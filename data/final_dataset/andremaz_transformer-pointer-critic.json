{"home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.None.main.runner": [[40, 84], ["datetime.datetime.now().replace().isoformat", "configs.configs.get_configs", "environment.env_factory.env_factory", "env.add_stats_to_agent_config", "agents.agent.Agent", "os.path.join", "json.dump", "env.store_dataset", "print", "agents.trainer.trainer", "print", "print", "agents.plotter.plotter", "print", "tester", "print", "os.path.isdir", "os.makedirs", "open", "os.path.join", "datetime.datetime.now().replace", "os.path.join", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.configs.configs.get_configs", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.environment.env_factory.env_factory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.add_stats_to_agent_config", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.store_dataset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.trainer.trainer", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.plotter.plotter", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["def", "runner", "(", "env_type", "=", "\"custom\"", ",", "env_name", "=", "'ResourceV3'", ",", "agent_name", "=", "\"tpc\"", ")", ":", "\n", "\n", "# Store the time of the script", "\n", "    ", "start_date", "=", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", ".", "isoformat", "(", ")", "\n", "\n", "# Read the configs", "\n", "agent_config", ",", "trainer_config", ",", "env_config", ",", "tester_config", ",", "_", ",", "all_configs", "=", "get_configs", "(", "env_name", ",", "agent_name", ")", "\n", "\n", "# Create the environment", "\n", "env", ",", "tester", "=", "env_factory", "(", "env_type", ",", "env_name", ",", "env_config", ")", "\n", "\n", "# Add info about the environment", "\n", "agent_config", "=", "env", ".", "add_stats_to_agent_config", "(", "agent_config", ")", "\n", "\n", "# Create the agent", "\n", "agent", "=", "Agent", "(", "'transformer'", ",", "agent_config", ")", "\n", "\n", "# Create a dir for logging training and testing results", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "env", ".", "name", ",", "start_date", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "# Store all configs used to train the model", "\n", "", "json", ".", "dump", "(", "all_configs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"config.json\"", ")", ",", "\"w\"", ")", ",", "indent", "=", "6", ")", "\n", "\n", "# Store the environment data for reproducibility", "\n", "env", ".", "store_dataset", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"env.txt\"", ")", ")", "\n", "\n", "# Train", "\n", "print", "(", "'Training...'", ")", "\n", "# tf.profiler.experimental.start('logdir')", "\n", "show_progress", "=", "True", "\n", "training_history", "=", "trainer", "(", "env", ",", "agent", ",", "trainer_config", ",", "show_progress", ",", "log_dir", ")", "\n", "# tf.profiler.experimental.stop()", "\n", "\n", "print", "(", "'\\nTraining Done...'", ")", "\n", "\n", "# Plot training results (learning curve and rewards)", "\n", "print", "(", "'\\nPlotting Results...'", ")", "\n", "training_plotter", "(", "training_history", ",", "env", ",", "agent", ",", "agent_config", ",", "trainer_config", ",", "log_dir", ")", "\n", "\n", "# Test the agent", "\n", "print", "(", "\"\\nTesting...\"", ")", "\n", "tester", "(", "env", ",", "agent", ",", "tester_config", ",", "log_dir", ")", "\n", "print", "(", "'\\nEnd... Goodbye!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.None.test_agent.runner": [[40, 72], ["datetime.datetime.now().replace().isoformat", "os.path.join", "configs.configs.get_configs", "environment.env_factory.env_factory", "env.add_stats_to_agent_config", "agents.agent.Agent", "agents.agent.Agent.load_weights", "print", "tester", "print", "print", "env.load_dataset", "os.path.join", "os.path.join", "datetime.datetime.now().replace", "os.path.join", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.configs.configs.get_configs", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.environment.env_factory.env_factory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.add_stats_to_agent_config", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.load_weights", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.load_dataset"], ["def", "runner", "(", "env_type", "=", "\"custom\"", ",", "env_name", "=", "'ResourceV3'", ",", "agent_name", "=", "\"tpc\"", ",", "agent_weights_dir", "=", "'2021-05-28T13:17:36'", ")", ":", "\n", "\n", "# Store the time of the script", "\n", "    ", "start_date", "=", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", ".", "isoformat", "(", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "env_name", ",", "agent_weights_dir", ")", "\n", "\n", "# Read the configs", "\n", "agent_config", ",", "_", ",", "env_config", ",", "tester_config", ",", "_", ",", "_", "=", "get_configs", "(", "\n", "'config'", ",", "# File name where config are stored", "\n", "agent_name", ",", "\n", "log_dir", "\n", ")", "\n", "\n", "# Create the environment", "\n", "env", ",", "tester", "=", "env_factory", "(", "env_type", ",", "env_name", ",", "env_config", ")", "\n", "# If necessary load the dataset", "\n", "if", "not", "env", ".", "generate_request_on_the_fly", ":", "\n", "        ", "print", "(", "'Loading Env. Dataset'", ")", "\n", "env", ".", "load_dataset", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"env.txt\"", ")", ")", "\n", "\n", "# Add info about the environment", "\n", "", "agent_config", "=", "env", ".", "add_stats_to_agent_config", "(", "agent_config", ")", "\n", "\n", "# Create the agent", "\n", "agent", "=", "Agent", "(", "'transformer'", ",", "agent_config", ")", "\n", "# Load the weights    ", "\n", "agent", ".", "load_weights", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'model'", ",", "'actor'", ")", ")", "\n", "\n", "# Test the agent", "\n", "print", "(", "\"\\nTesting...\"", ")", "\n", "tester", "(", "env", ",", "agent", ",", "tester_config", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "start_date", ")", ")", "\n", "print", "(", "'\\nEnd... Goodbye!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.__init__": [[16, 74], ["super().__init__", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.losses.MeanSquaredError", "tensorflow.keras.losses.CategoricalCrossentropy", "agents.models.model_factory.model_factory", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.models.model_factory.model_factory"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "opts", ")", ":", "\n", "        ", "super", "(", "Agent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "agent_config", "=", "opts", "\n", "\n", "# Default training mode", "\n", "self", ".", "training", "=", "True", "\n", "\n", "self", ".", "batch_size", ":", "int", "=", "opts", "[", "'batch_size'", "]", "\n", "self", ".", "num_resources", ":", "int", "=", "opts", "[", "'num_resources'", "]", "\n", "\n", "self", ".", "num_bins", ":", "int", "=", "opts", "[", "'num_bins'", "]", "\n", "self", ".", "tensor_size", ":", "int", "=", "opts", "[", "'tensor_size'", "]", "\n", "\n", "self", ".", "gamma", ":", "float", "=", "opts", "[", "'gamma'", "]", "# Discount factor", "\n", "self", ".", "values_loss_coefficient", ":", "float", "=", "opts", "[", "'values_loss_coefficient'", "]", "\n", "self", ".", "entropy_coefficient", ":", "float", "=", "opts", "[", "'entropy_coefficient'", "]", "\n", "self", ".", "stochastic_action_selection", ":", "bool", "=", "opts", "[", "'stochastic_action_selection'", "]", "\n", "\n", "### Optimizers ###", "\n", "self", ".", "critic_learning_rate", ":", "float", "=", "opts", "[", "'critic'", "]", "[", "'learning_rate'", "]", "\n", "self", ".", "critic_clipnorm", ":", "float", "=", "opts", "[", "'critic'", "]", "[", "'clipnorm'", "]", "\n", "self", ".", "critic_opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "\n", "learning_rate", "=", "self", ".", "critic_learning_rate", ",", "\n", "clipnorm", "=", "self", ".", "critic_clipnorm", "\n", ")", "\n", "\n", "self", ".", "actor_learning_rate", ":", "float", "=", "opts", "[", "'actor'", "]", "[", "'learning_rate'", "]", "\n", "self", ".", "actor_clipnorm", ":", "float", "=", "opts", "[", "'actor'", "]", "[", "'clipnorm'", "]", "\n", "self", ".", "pointer_opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "\n", "learning_rate", "=", "self", ".", "actor_learning_rate", ",", "\n", "clipnorm", "=", "self", ".", "actor_clipnorm", "\n", ")", "\n", "\n", "# Error fn for the critic", "\n", "self", ".", "mse", "=", "tf", ".", "keras", ".", "losses", ".", "MeanSquaredError", "(", ")", "\n", "\n", "# Error fn for the actor", "\n", "self", ".", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "CategoricalCrossentropy", "(", "\n", "from_logits", "=", "True", "\n", ")", "\n", "\n", "### Load the models", "\n", "self", ".", "bin_actor", ",", "self", ".", "critic", "=", "model_factory", "(", "\n", "name", ",", "\n", "opts", "\n", ")", "\n", "\n", "# Init memory", "\n", "self", ".", "states", "=", "[", "]", "\n", "self", ".", "actor_decoder_input", "=", "[", "]", "\n", "\n", "self", ".", "bins", "=", "[", "]", "\n", "self", ".", "bin_masks", "=", "[", "]", "\n", "\n", "self", ".", "mha_masks", "=", "[", "]", "# <= ToDo", "\n", "self", ".", "rewards", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_resources", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.store": [[75, 96], ["agent.Agent.states.append", "agent.Agent.actor_decoder_input.append", "agent.Agent.bin_masks.append", "agent.Agent.mha_masks.append", "agent.Agent.bins.append"], "methods", ["None"], ["", "def", "store", "(", "self", ",", "\n", "state", ",", "\n", "dec_input", ",", "\n", "bin_mask", ",", "\n", "mha_mask", ",", "\n", "bin", ",", "\n", "reward", ",", "\n", "training_step", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "states", ".", "append", "(", "state", ")", "\n", "\n", "self", ".", "actor_decoder_input", ".", "append", "(", "dec_input", ")", "\n", "\n", "self", ".", "bin_masks", ".", "append", "(", "bin_mask", ")", "\n", "\n", "self", ".", "mha_masks", ".", "append", "(", "mha_mask", ")", "\n", "\n", "self", ".", "bins", ".", "append", "(", "bin", ")", "# Bind IDs, a.k.a, bin actions", "\n", "\n", "self", ".", "rewards", "[", ":", ",", "training_step", "]", "=", "reward", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.clear_memory": [[97, 109], ["numpy.zeros"], "methods", ["None"], ["", "def", "clear_memory", "(", "self", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "]", "\n", "\n", "self", ".", "actor_decoder_input", "=", "[", "]", "\n", "\n", "self", ".", "bin_masks", "=", "[", "]", "\n", "\n", "self", ".", "mha_masks", "=", "[", "]", "\n", "\n", "self", ".", "bins", "=", "[", "]", "\n", "\n", "self", ".", "rewards", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_resources", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_discounted_rewards": [[110, 125], ["tensorflow.reshape", "numpy.zeros_like", "reversed", "range"], "methods", ["None"], ["", "def", "compute_discounted_rewards", "(", "self", ",", "bootstrap_state_value", ")", ":", "\n", "        ", "bootstrap_state_value", "=", "tf", ".", "reshape", "(", "bootstrap_state_value", ",", "[", "bootstrap_state_value", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "# self.rewards = np.ones((2, 10), dtype='float32')", "\n", "\n", "# Discounted rewards", "\n", "discounted_rewards", "=", "np", ".", "zeros_like", "(", "self", ".", "rewards", ")", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "            ", "estimate_value", "=", "self", ".", "rewards", "[", ":", ",", "step", "]", "+", "self", ".", "gamma", "*", "bootstrap_state_value", "\n", "discounted_rewards", "[", ":", ",", "step", "]", "=", "estimate_value", "\n", "\n", "# Update bootstrap value for next iteration", "\n", "bootstrap_state_value", "=", "estimate_value", "\n", "\n", "", "return", "discounted_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_value_loss": [[126, 167], ["tensorflow.concat", "tensorflow.concat", "agent.Agent.critic", "environment.custom.resource_v3.misc.utils.reshape_into_vertical_format", "tensorflow.keras.losses.mean_squared_error", "tensorflow.reduce_mean"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.reshape_into_vertical_format"], ["", "def", "compute_value_loss", "(", "self", ",", "discounted_rewards", ")", ":", "\n", "        ", "og_batch_size", "=", "self", ".", "states", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "# Reshape data into a single forward pass format", "\n", "# shape=(batch_steps * num_resources, total_elems, features)", "\n", "states", "=", "tf", ".", "concat", "(", "self", ".", "states", ",", "axis", "=", "0", ")", "\n", "batch_size", "=", "states", ".", "shape", "[", "0", "]", "\n", "\n", "# shape=(batch_steps * num_resources, 1, 1, total_elems)", "\n", "mha_mask", "=", "tf", ".", "concat", "(", "self", ".", "mha_masks", ",", "axis", "=", "0", ")", "\n", "\n", "# Get state_values", "\n", "state_values", "=", "self", ".", "critic", "(", "\n", "states", ",", "\n", "self", ".", "training", ",", "\n", "self", ".", "num_bins", ",", "\n", "enc_padding_mask", "=", "mha_mask", "\n", ")", "\n", "\n", "#a = np.array([", "\n", "#    [1, 2],", "\n", "#    [3, 4]", "\n", "# ], dtype=\"float32\")", "\n", "\n", "# Reshape the discounted rewards to match state values", "\n", "discounted_rewards", "=", "reshape_into_vertical_format", "(", "\n", "discounted_rewards", ",", "batch_size", "\n", ")", "\n", "\n", "advantages", "=", "discounted_rewards", "-", "state_values", "\n", "\n", "# Compute average loss for the batch", "\n", "# value_loss = self.mse(discounted_rewards, state_values)", "\n", "value_loss", "=", "tf", ".", "keras", ".", "losses", ".", "mean_squared_error", "(", "discounted_rewards", ",", "state_values", ")", "\n", "\n", "# Apply a constant factor", "\n", "value_loss", "=", "self", ".", "values_loss_coefficient", "*", "value_loss", "\n", "\n", "value_loss", "=", "tf", ".", "reduce_mean", "(", "value_loss", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "value_loss", ",", "state_values", ",", "advantages", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_actor_loss": [[168, 243], ["tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "model", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.concat", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.losses.SparseCategoricalCrossentropy.", "tensorflow.keras.losses.CategoricalCrossentropy", "tensorflow.keras.losses.CategoricalCrossentropy.", "tensorflow.reduce_mean", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "compute_actor_loss", "(", "self", ",", "\n", "model", ",", "\n", "masks", ",", "\n", "actions", ",", "\n", "decoder_inputs", ",", "\n", "advantages", "\n", ")", ":", "\n", "\n", "        ", "states", "=", "tf", ".", "concat", "(", "self", ".", "states", ",", "axis", "=", "0", ")", "\n", "attention_mask", "=", "tf", ".", "concat", "(", "masks", ",", "axis", "=", "0", ")", "\n", "mha_mask", "=", "tf", ".", "concat", "(", "self", ".", "mha_masks", ",", "axis", "=", "0", ")", "\n", "dec_input", "=", "tf", ".", "concat", "(", "decoder_inputs", ",", "axis", "=", "0", ")", "\n", "\n", "# Get logits, policy probabilities and actions", "\n", "pointer_logits", ",", "pointers_probs", ",", "point_index", ",", "dec_output", "=", "model", "(", "\n", "states", ",", "\n", "dec_input", ",", "\n", "attention_mask", ",", "\n", "self", ".", "training", ",", "\n", "self", ".", "num_bins", ",", "\n", "enc_padding_mask", "=", "mha_mask", ",", "\n", "dec_padding_mask", "=", "mha_mask", "\n", ")", "\n", "\n", "pointers_probs", "=", "tf", ".", "stop_gradient", "(", "pointers_probs", ")", "\n", "point_index", "=", "tf", ".", "stop_gradient", "(", "point_index", ")", "\n", "dec_output", "=", "tf", ".", "stop_gradient", "(", "dec_output", ")", "\n", "\n", "# One hot actions that we took during an episode", "\n", "actions", "=", "tf", ".", "concat", "(", "actions", ",", "axis", "=", "0", ")", "\n", "# actions_one_hot = tf.one_hot(", "\n", "#    actions, self.tensor_size, dtype=\"float32\")", "\n", "\n", "# Compute the policy loss", "\n", "policy_loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", "\n", "from_logits", "=", "True", ",", "reduction", "=", "tf", ".", "keras", ".", "losses", ".", "Reduction", ".", "NONE", "\n", ")", "\n", "policy_loss", "=", "policy_loss_fn", "(", "\n", "actions", ",", "pointer_logits", "\n", ")", "\n", "\n", "# # # # # # # # # # # # # # ", "\n", "# for debugging purposes #", "\n", "# # # # # # # # # # # # # # ", "\n", "# mean_allowed = tf.reduce_mean(policy_loss)", "\n", "# if mean_allowed > 10:", "\n", "#     max_index = tf.argmax(policy_loss)", "\n", "#     print(max_index)", "\n", "#     print(policy_loss[max_index])", "\n", "#     print(actions[max_index])", "\n", "#     print(attention_mask[max_index])", "\n", "#     print(pointers_probs[max_index])", "\n", "#     print(pointer_logits[max_index])", "\n", "#     assert False, \"EXIT\"", "\n", "\n", "policy_loss_times_adv", "=", "policy_loss", "*", "tf", ".", "squeeze", "(", "advantages", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Entropy loss can be calculated as cross-entropy over itself.", "\n", "# The greater the entropy, the more random the actions an agent takes.", "\n", "entropy_fn", "=", "tf", ".", "keras", ".", "losses", ".", "CategoricalCrossentropy", "(", "\n", "from_logits", "=", "True", ",", "reduction", "=", "tf", ".", "keras", ".", "losses", ".", "Reduction", ".", "NONE", "\n", ")", "\n", "entropy", "=", "entropy_fn", "(", "pointers_probs", ",", "pointer_logits", ")", "\n", "\n", "# entropy = tf.nn.softmax_cross_entropy_with_logits(", "\n", "#    labels=tf.stop_gradient(pointers_probs), logits=pointer_logits)", "\n", "\n", "# Compute average entropy loss", "\n", "# entropy_loss = tf.reduce_mean(entropy_loss)", "\n", "total_loss", "=", "tf", ".", "reduce_mean", "(", "\n", "policy_loss_times_adv", "-", "self", ".", "entropy_coefficient", "*", "entropy", ",", "axis", "=", "-", "1", "\n", ")", "\n", "\n", "\n", "return", "total_loss", ",", "dec_output", ",", "entropy", ",", "policy_loss", ",", "pointers_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act": [[244, 288], ["tensorflow.range", "build_feasible_mask", "agent.Agent.bin_actor", "tensorflow_probability.distributions.Categorical", "tensorflow_probability.distributions.Categorical.sample"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], ["", "def", "act", "(", "self", ",", "\n", "state", ",", "\n", "dec_input", ",", "\n", "bins_mask", ",", "\n", "mha_used_mask", ",", "\n", "build_feasible_mask", "\n", ")", ":", "\n", "        ", "batch_size", "=", "state", ".", "shape", "[", "0", "]", "\n", "# Create a tensor with the batch indices", "\n", "batch_indices", "=", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "# Update the masks for the bin-net", "\n", "# This will only allow to point to feasible solutions", "\n", "bins_mask", "=", "build_feasible_mask", "(", "state", ",", "\n", "dec_input", ",", "\n", "bins_mask", "\n", ")", "\n", "\n", "#########################################", "\n", "### SELECT bin TO PLACE THE resource ###", "\n", "#########################################", "\n", "bins_logits", ",", "bins_probs", ",", "bin_ids", ",", "decoded_bin", "=", "self", ".", "bin_actor", "(", "\n", "state", ",", "\n", "dec_input", ",", "# Pass resource to bin decoder", "\n", "bins_mask", ",", "\n", "self", ".", "training", ",", "\n", "self", ".", "num_bins", ",", "\n", "enc_padding_mask", "=", "mha_used_mask", ",", "\n", "dec_padding_mask", "=", "mha_used_mask", "\n", ")", "\n", "\n", "if", "self", ".", "stochastic_action_selection", ":", "\n", "# bin_ids = []", "\n", "# for batch_id in range(batch_size):", "\n", "# Stochastic bin selection", "\n", "            ", "dist_bin", "=", "tfp", ".", "distributions", ".", "Categorical", "(", "probs", "=", "bins_probs", ")", "\n", "bin_ids", "=", "dist_bin", ".", "sample", "(", ")", "\n", "\n", "# Decode the bin", "\n", "", "decoded_bin", "=", "state", "[", "batch_indices", ",", "bin_ids", "]", "\n", "\n", "return", "bin_ids", ",", "bins_mask", ",", "bins_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.save_weights": [[289, 291], ["agent.Agent.bin_actor.save_weights"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.save_weights"], ["", "def", "save_weights", "(", "self", ",", "location", ")", ":", "\n", "        ", "self", ".", "bin_actor", ".", "save_weights", "(", "location", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.load_weights": [[293, 295], ["agent.Agent.bin_actor.load_weights"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.load_weights"], ["", "def", "load_weights", "(", "self", ",", "location", ")", ":", "\n", "        ", "self", ".", "bin_actor", ".", "load_weights", "(", "location", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.set_testing_mode": [[296, 306], ["None"], "methods", ["None"], ["", "def", "set_testing_mode", "(", "self", ",", "batch_size", ",", "num_bins", ",", "num_resources", ")", ":", "\n", "        ", "self", ".", "training", "=", "False", "\n", "self", ".", "stochastic_action_selection", "=", "False", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "# Set the number for resources during testing", "\n", "# i.e, number of steps", "\n", "self", ".", "num_resources", "=", "num_resources", "\n", "\n", "self", ".", "num_bins", "=", "num_bins", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.trainer.trainer": [[8, 193], ["numpy.zeros", "env.reset", "time.time", "agent.compute_discounted_rewards", "tape_value.gradient", "tape_bin.gradient", "agent.critic_opt.apply_gradients", "agent.pointer_opt.apply_gradients", "value_loss_buffer.append", "bins_policy_loss_buffer.append", "bins_total_loss_buffer.append", "bins_entropy_buffer.append", "agent.clear_memory", "os.path.join", "agent.save_weights", "numpy.zeros", "env.reset", "time.time", "agent.act", "env.step", "agent.store", "next_dec_input.copy", "tensorflow.zeros", "agent.critic", "tensorflow.GradientTape", "agent.compute_value_loss", "tensorflow.GradientTape", "agent.compute_actor_loss", "zip", "zip", "value_loss.numpy", "numpy.mean", "bin_loss.numpy", "numpy.mean", "print", "current_state.copy", "next_dec_input.copy.copy", "bin_net_mask.copy", "mha_used_mask.copy", "bin_id.numpy().copy", "reward.numpy().copy", "numpy.sum", "numpy.min", "numpy.max", "numpy.average", "average_rewards_buffer.append", "min_rewards_buffer.append", "max_rewards_buffer.append", "tensorflow.stop_gradient", "bin_id.numpy", "reward.numpy", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "time.time"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_discounted_rewards", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.clear_memory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.save_weights", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.store", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_value_loss", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_actor_loss", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["def", "trainer", "(", "env", ":", "KnapsackV2", ",", "agent", ":", "Agent", ",", "opts", ":", "dict", ",", "show_progress", ":", "bool", ",", "log_dir", ":", "str", ")", ":", "\n", "# print(f'Training with {env.resource_sample_size} resources and {env.bin_sample_size} bins')", "\n", "\n", "    ", "export_weights", ":", "bool", "=", "opts", "[", "'store_model_weights'", "]", "[", "'export_weights'", "]", "\n", "\n", "# General training vars", "\n", "n_iterations", ":", "int", "=", "opts", "[", "'n_iterations'", "]", "\n", "n_steps_to_update", ":", "int", "=", "opts", "[", "'n_steps_to_update'", "]", "\n", "\n", "average_rewards_buffer", "=", "[", "]", "\n", "min_rewards_buffer", "=", "[", "]", "\n", "max_rewards_buffer", "=", "[", "]", "\n", "value_loss_buffer", "=", "[", "]", "\n", "\n", "bins_policy_loss_buffer", "=", "[", "]", "\n", "bins_total_loss_buffer", "=", "[", "]", "\n", "bins_entropy_buffer", "=", "[", "]", "\n", "\n", "episode_count", "=", "0", "\n", "\n", "# Initial vars for the initial episode", "\n", "isDone", "=", "False", "\n", "episode_rewards", "=", "np", ".", "zeros", "(", "\n", "(", "agent", ".", "batch_size", ",", "agent", ".", "num_resources", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "current_state", ",", "dec_input", ",", "bin_net_mask", ",", "mha_used_mask", "=", "env", ".", "reset", "(", ")", "\n", "\n", "training_step", "=", "0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "while", "episode_count", "<", "n_iterations", ":", "\n", "\n", "# Reached the end of episode. Reset for the next episode", "\n", "        ", "if", "isDone", ":", "\n", "            ", "isDone", "=", "False", "\n", "episode_rewards", "=", "np", ".", "zeros", "(", "\n", "(", "agent", ".", "batch_size", ",", "agent", ".", "num_resources", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "current_state", ",", "dec_input", ",", "bin_net_mask", ",", "mha_used_mask", "=", "env", ".", "reset", "(", ")", "\n", "\n", "training_step", "=", "0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "while", "not", "isDone", "or", "training_step", "<", "n_steps_to_update", ":", "\n", "# Select an action", "\n", "            ", "bin_id", ",", "bin_net_mask", ",", "_", "=", "agent", ".", "act", "(", "\n", "current_state", ",", "\n", "dec_input", ",", "\n", "bin_net_mask", ",", "\n", "mha_used_mask", ",", "\n", "env", ".", "build_feasible_mask", "\n", ")", "\n", "\n", "next_state", ",", "next_dec_input", ",", "reward", ",", "isDone", ",", "info", "=", "env", ".", "step", "(", "\n", "bin_id", ",", "\n", "bin_net_mask", "\n", ")", "\n", "\n", "# Store episode rewards", "\n", "episode_rewards", "[", ":", ",", "training_step", "]", "=", "reward", "[", ":", ",", "0", "]", "\n", "\n", "# Store in memory", "\n", "agent", ".", "store", "(", "\n", "current_state", ".", "copy", "(", ")", ",", "\n", "dec_input", ".", "copy", "(", ")", ",", "# Resource fed to actor decoder", "\n", "bin_net_mask", ".", "copy", "(", ")", ",", "\n", "mha_used_mask", ".", "copy", "(", ")", ",", "\n", "bin_id", ".", "numpy", "(", ")", ".", "copy", "(", ")", ",", "\n", "reward", ".", "numpy", "(", ")", ".", "copy", "(", ")", ",", "\n", "training_step", "\n", ")", "\n", "\n", "# Update for next iteration", "\n", "current_state", "=", "next_state", "\n", "dec_input", "=", "next_dec_input", ".", "copy", "(", ")", "\n", "bin_net_mask", "=", "info", "[", "'bin_net_mask'", "]", "\n", "mha_used_mask", "=", "info", "[", "'mha_used_mask'", "]", "\n", "\n", "training_step", "+=", "1", "\n", "\n", "# print(f'CPU {np.average(current_state[:,1:env.bin_sample_size,0]):.5f} || RAM {np.average(current_state[:,1:env.bin_sample_size,1]):.5f} || MEM {np.average(current_state[:,1:env.bin_sample_size,2]):.5f}')", "\n", "\n", "# Grab the stats from the current episode", "\n", "if", "isDone", ":", "\n", "                ", "episode_count", "+=", "1", "\n", "\n", "average_per_problem", "=", "np", ".", "sum", "(", "episode_rewards", ",", "axis", "=", "-", "1", ")", "\n", "min_in_batch", "=", "np", ".", "min", "(", "average_per_problem", ",", "axis", "=", "-", "1", ")", "\n", "max_in_batch", "=", "np", ".", "max", "(", "average_per_problem", ",", "axis", "=", "-", "1", ")", "\n", "episode_reward", "=", "np", ".", "average", "(", "average_per_problem", ",", "axis", "=", "-", "1", ")", "\n", "\n", "average_rewards_buffer", ".", "append", "(", "episode_reward", ")", "\n", "min_rewards_buffer", ".", "append", "(", "min_in_batch", ")", "\n", "max_rewards_buffer", ".", "append", "(", "max_in_batch", ")", "\n", "break", "\n", "# current_state, bin_net_mask, resource_net_mask, mha_used_mask = env.reset()", "\n", "\n", "", "", "if", "isDone", "==", "True", ":", "\n", "# We are done. So the state_value is 0", "\n", "            ", "bootstrap_state_value", "=", "tf", ".", "zeros", "(", "[", "agent", ".", "batch_size", ",", "1", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "", "else", ":", "\n", "# Not done. Ask model to generate the state value", "\n", "            ", "bootstrap_state_value", "=", "agent", ".", "critic", "(", "\n", "current_state", ",", "agent", ".", "training", ",", "enc_padding_mask", "=", "mha_used_mask", "\n", ")", "\n", "\n", "", "discounted_rewards", "=", "agent", ".", "compute_discounted_rewards", "(", "bootstrap_state_value", ")", "\n", "\n", "### Update Critic ###", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape_value", ":", "\n", "            ", "value_loss", ",", "state_values", ",", "advantages", "=", "agent", ".", "compute_value_loss", "(", "\n", "discounted_rewards", "\n", ")", "\n", "\n", "", "critic_grads", "=", "tape_value", ".", "gradient", "(", "\n", "value_loss", ",", "\n", "agent", ".", "critic", ".", "trainable_weights", "\n", ")", "\n", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape_bin", ":", "\n", "            ", "bin_loss", ",", "decoded_bins", ",", "bin_entropy", ",", "bin_policy_loss", ",", "_", "=", "agent", ".", "compute_actor_loss", "(", "\n", "agent", ".", "bin_actor", ",", "\n", "agent", ".", "bin_masks", ",", "\n", "agent", ".", "bins", ",", "\n", "agent", ".", "actor_decoder_input", ",", "\n", "tf", ".", "stop_gradient", "(", "advantages", ")", "\n", ")", "\n", "\n", "", "bin_grads", "=", "tape_bin", ".", "gradient", "(", "\n", "bin_loss", ",", "\n", "agent", ".", "bin_actor", ".", "trainable_weights", "\n", ")", "\n", "\n", "# Apply gradients to tweak the model", "\n", "agent", ".", "critic_opt", ".", "apply_gradients", "(", "\n", "zip", "(", "\n", "critic_grads", ",", "\n", "agent", ".", "critic", ".", "trainable_weights", "\n", ")", "\n", ")", "\n", "\n", "agent", ".", "pointer_opt", ".", "apply_gradients", "(", "\n", "zip", "(", "\n", "bin_grads", ",", "\n", "agent", ".", "bin_actor", ".", "trainable_weights", "\n", ")", "\n", ")", "\n", "\n", "# Store the stats", "\n", "value_loss_buffer", ".", "append", "(", "value_loss", ".", "numpy", "(", ")", ")", "\n", "bins_policy_loss_buffer", ".", "append", "(", "np", ".", "mean", "(", "bin_policy_loss", ")", ")", "\n", "bins_total_loss_buffer", ".", "append", "(", "bin_loss", ".", "numpy", "(", ")", ")", "\n", "bins_entropy_buffer", ".", "append", "(", "np", ".", "mean", "(", "bin_entropy", ")", ")", "\n", "\n", "if", "isDone", "and", "show_progress", ":", "\n", "            ", "print", "(", "f\"\\rEp: {episode_count} took {time.time() - start:.2f} sec.\\t\"", "+", "\n", "f\"Min@Batch: {min_in_batch:.3f}\\t\"", "+", "\n", "f\"Max@Batch: {max_in_batch:.3f}\\t\"", "+", "\n", "f\"Avg@Batch: {episode_reward:.3f}\\t\"", "+", "\n", "f\"Critic_Loss: {value_loss:.3f} \\t\"", "+", "\n", "f\"Actor_Total_Loss: {bin_loss:.3f} \\t\"", "+", "\n", "f\"Policy_Loss: {tf.reduce_mean(bin_policy_loss):.3f} \\t\"", "+", "\n", "f\"Entropy_Loss: {tf.reduce_mean(bin_entropy):.3f}\"", ",", "end", "=", "\"\\n\"", ")", "\n", "\n", "# Iteration complete. Clear agent's memory", "\n", "", "agent", ".", "clear_memory", "(", ")", "\n", "\n", "\n", "", "if", "export_weights", ":", "\n", "        ", "weight_location", "=", "os", ".", "path", ".", "join", "(", "\n", "log_dir", ",", "\n", "opts", "[", "'store_model_weights'", "]", "[", "'folder'", "]", ",", "\n", "opts", "[", "'store_model_weights'", "]", "[", "'filename'", "]", ")", "\n", "\n", "agent", ".", "save_weights", "(", "weight_location", ")", "\n", "\n", "", "return", "average_rewards_buffer", ",", "min_rewards_buffer", ",", "max_rewards_buffer", ",", "value_loss_buffer", ",", "bins_policy_loss_buffer", ",", "bins_total_loss_buffer", ",", "bins_entropy_buffer", "\n", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.plotter.plotter": [[5, 20], ["os.path.join", "plotter.plotter_leaning", "plotter.plotter_rewards", "plotter.log_training_stats"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.plotter.plotter_leaning", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.plotter.plotter_rewards", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.csv_writer.log_training_stats"], ["def", "plotter", "(", "data", ",", "env", ",", "agent", ",", "agent_config", ":", "dict", ",", "trainer_config", ":", "dict", ",", "log_dir", ":", "str", ")", ":", "\n", "\n", "    ", "export_stats", ":", "bool", "=", "trainer_config", "[", "'export_stats'", "]", "[", "'export_stats'", "]", "\n", "folder", ":", "bool", "=", "trainer_config", "[", "'export_stats'", "]", "[", "'folder'", "]", "\n", "\n", "if", "not", "export_stats", ":", "\n", "        ", "return", "\n", "\n", "", "location", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "folder", ")", "\n", "\n", "plotter_leaning", "(", "data", ",", "location", ",", "'learning'", ",", "agent", ".", "name", ")", "\n", "\n", "plotter_rewards", "(", "data", ",", "location", ",", "'rewards'", ",", "agent", ".", "name", ")", "\n", "\n", "log_training_stats", "(", "data", ",", "location", ",", "'logs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.plotter.plotter_leaning": [[21, 59], ["matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "os.path.isdir", "os.makedirs", "range", "len", "agent_name.upper", "file_name.replace"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close"], ["", "def", "plotter_leaning", "(", "data", ",", "location", ",", "file_name", ",", "agent_name", ")", ":", "\n", "# Destructure the tuple", "\n", "    ", "_", ",", "_", ",", "_", ",", "value_loss_buffer", ",", "bins_policy_loss_buffer", ",", "bins_total_loss_buffer", ",", "bins_entropy_buffer", "=", "data", "\n", "\n", "x_values", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "value_loss_buffer", ")", ")", "]", "\n", "\n", "plt", ".", "plot", "(", "x_values", ",", "value_loss_buffer", ",", "label", "=", "\"Value Loss\"", ")", "\n", "\n", "plt", ".", "plot", "(", "x_values", ",", "bins_policy_loss_buffer", ",", "label", "=", "\"Bin Policy Net Loss\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "bins_total_loss_buffer", ",", "label", "=", "\"Total Bin Net Loss\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "bins_entropy_buffer", ",", "label", "=", "\"Bin Net Entropy\"", ")", "\n", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "\n", "plot_title", "=", "f\"{agent_name.upper()}\\n|\"", "+", "file_name", "\n", "plt", ".", "title", "(", "plot_title", ")", "\n", "\n", "# Check if dir exists. If not, create it", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "location", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "location", ")", "\n", "\n", "# Show legend info", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "# plt.show(block=blockPlot)", "\n", "plt", ".", "savefig", "(", "\n", "f\"{location}/{file_name.replace(' ', '')}.png\"", ",", "\n", "dpi", "=", "200", ",", "\n", "bbox_inches", "=", "\"tight\"", "\n", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.plotter.plotter_rewards": [[60, 98], ["matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "os.path.isdir", "os.makedirs", "range", "len", "agent_name.upper", "file_name.replace"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close"], ["", "def", "plotter_rewards", "(", "data", ",", "location", ",", "file_name", ",", "agent_name", ")", ":", "\n", "\n", "# Destructure the tuple", "\n", "    ", "average_rewards_buffer", ",", "min_rewards_buffer", ",", "max_rewards_buffer", ",", "_", ",", "_", ",", "_", ",", "_", ",", "=", "data", "\n", "\n", "x_values", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "average_rewards_buffer", ")", ")", "]", "\n", "\n", "plt", ".", "plot", "(", "x_values", ",", "average_rewards_buffer", ",", "label", "=", "\"Average (in batch) Double Pointer Critic\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "min_rewards_buffer", ",", "label", "=", "\"Minimum (in Batch) Double Pointer Critic\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "max_rewards_buffer", ",", "label", "=", "\"Maximum (in batch) Double Pointer Critic\"", ")", "\n", "\n", "plt", ".", "ylabel", "(", "'Collected Reward'", ")", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "\n", "plot_title", "=", "f\"{agent_name.upper()}\\n|\"", "+", "file_name", "\n", "plt", ".", "title", "(", "plot_title", ")", "\n", "\n", "# Check if dir exists. If not, create it", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "location", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "location", ")", "\n", "\n", "# Show legend info", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "# plt.show(block=blockPlot)", "\n", "plt", ".", "savefig", "(", "\n", "f\"{location}/{file_name.replace(' ', '')}.png\"", ",", "\n", "dpi", "=", "200", ",", "\n", "bbox_inches", "=", "\"tight\"", "\n", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.plotter.log_training_stats": [[99, 128], ["fp.close", "open", "fp.write", "range", "len", "fp.write"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close"], ["", "def", "log_training_stats", "(", "data", ",", "location", ",", "file_name", ")", ":", "\n", "    ", "average_rewards_buffer", ",", "min_rewards_buffer", ",", "max_rewards_buffer", ",", "value_loss_buffer", ",", "bins_policy_loss_buffer", ",", "bins_total_loss_buffer", ",", "bins_entropy_buffer", "=", "data", "\n", "\n", "with", "open", "(", "f\"{location}/{file_name}.csv\"", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "header", "=", "'Step;Avg Reward;Max Reward;Min Reward;Value Loss;Bin Entropy;Total Bin Loss;Bin Policy Loss'", "\n", "\n", "fp", ".", "write", "(", "f'{header}\\n'", ")", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "average_rewards_buffer", ")", ")", ":", "\n", "            ", "avg", "=", "average_rewards_buffer", "[", "index", "]", "\n", "min", "=", "min_rewards_buffer", "[", "index", "]", "\n", "max", "=", "max_rewards_buffer", "[", "index", "]", "\n", "v_loss", "=", "value_loss_buffer", "[", "index", "]", "\n", "\n", "b_policy_loss", "=", "bins_policy_loss_buffer", "[", "index", "]", "\n", "b_total_loss", "=", "bins_total_loss_buffer", "[", "index", "]", "\n", "b_entr", "=", "bins_entropy_buffer", "[", "index", "]", "\n", "\n", "data", "=", "f\"{index};{avg:.3f};{max:.3f};{min:.3f};{v_loss:.3f};{b_entr:.3f};{b_total_loss:.3f};{b_policy_loss:.3f}\"", "\n", "\n", "fp", ".", "write", "(", "f\"{data}\\n\"", ")", "\n", "\n", "", "", "fp", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.models.model_factory.model_factory": [[4, 37], ["agents.models.transformer.actor.model.ActorTransformer", "agents.models.transformer.critic.model.CriticTransformer"], "function", ["None"], ["def", "model_factory", "(", "type", ",", "opts", ")", ":", "\n", "    ", "if", "type", "==", "'transformer'", ":", "\n", "        ", "allocator_actor", "=", "ActorTransformer", "(", "\n", "opts", "[", "'actor'", "]", "[", "'num_layers'", "]", ",", "\n", "opts", "[", "'actor'", "]", "[", "'dim_model'", "]", ",", "\n", "opts", "[", "'actor'", "]", "[", "'num_heads'", "]", ",", "\n", "opts", "[", "'actor'", "]", "[", "'inner_layer_dim'", "]", ",", "\n", "opts", "[", "'actor'", "]", "[", "'logit_clipping_C'", "]", ",", "\n", "opts", "[", "'actor'", "]", "[", "'encoder_embedding_time_distributed'", "]", ",", "\n", "opts", "[", "'actor'", "]", "[", "'attention_dense_units'", "]", ",", "\n", "opts", "[", "'actor'", "]", "[", "'use_default_initializer'", "]", ",", "\n", "opts", "[", "'encoder_embedding'", "]", "[", "'common'", "]", ",", "\n", "opts", "[", "'encoder_embedding'", "]", "[", "'num_bin_features'", "]", ",", "\n", "opts", "[", "'encoder_embedding'", "]", "[", "'num_resource_features'", "]", "\n", ")", "\n", "critic", "=", "CriticTransformer", "(", "\n", "opts", "[", "'critic'", "]", "[", "'num_layers'", "]", ",", "\n", "opts", "[", "'critic'", "]", "[", "'dim_model'", "]", ",", "\n", "opts", "[", "'critic'", "]", "[", "'num_heads'", "]", ",", "\n", "opts", "[", "'critic'", "]", "[", "'inner_layer_dim'", "]", ",", "\n", "opts", "[", "'critic'", "]", "[", "'encoder_embedding_time_distributed'", "]", ",", "\n", "opts", "[", "'critic'", "]", "[", "'last_layer_units'", "]", ",", "\n", "opts", "[", "'critic'", "]", "[", "'last_layer_activation'", "]", ",", "\n", "opts", "[", "'critic'", "]", "[", "'use_default_initializer'", "]", ",", "\n", "opts", "[", "'encoder_embedding'", "]", "[", "'common'", "]", ",", "\n", "opts", "[", "'encoder_embedding'", "]", "[", "'num_bin_features'", "]", ",", "\n", "opts", "[", "'encoder_embedding'", "]", "[", "'num_resource_features'", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "\n", "\n", "\n", "", "return", "allocator_actor", ",", "critic", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.actor.pointer_attention.PointerAttention.__init__": [[7, 20], ["tensorflow.keras.layers.Layer.__init__", "agents.models.transformer.common.utils.get_initializer", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.get_initializer"], ["  ", "def", "__init__", "(", "self", ",", "dense_units", ":", "int", ",", "logit_clipping_C", ":", "float", ",", "use_default_initializer", ":", "bool", "=", "True", ")", ":", "\n", "    ", "super", "(", "PointerAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dense_units", "=", "dense_units", "\n", "self", ".", "logit_clipping_C", "=", "logit_clipping_C", "\n", "self", ".", "use_default_initializer", "=", "use_default_initializer", "\n", "self", ".", "initializer", "=", "get_initializer", "(", "self", ".", "dense_units", ",", "self", ".", "use_default_initializer", ")", "\n", "\n", "self", ".", "W1", "=", "Dense", "(", "self", ".", "dense_units", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", "self", ".", "W2", "=", "Dense", "(", "self", ".", "dense_units", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", "self", ".", "V", "=", "Dense", "(", "1", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", "\n", "self", ".", "BIG_NUMBER", "=", "1e9", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.actor.pointer_attention.PointerAttention.call": [[21, 72], ["tensorflow.range", "pointer_attention.PointerAttention.V", "tensorflow.squeeze", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.gather_nd", "tensorflow.expand_dims", "tensorflow.nn.tanh", "tensorflow.stack", "tensorflow.nn.tanh", "pointer_attention.PointerAttention.W1", "pointer_attention.PointerAttention.W2"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "\n", "dec_output", ",", "\n", "enc_input", ",", "\n", "enc_outputs", ",", "\n", "mask", ",", "\n", "add_time_dim", "=", "False", ")", ":", "\n", "    ", "batch_size", "=", "enc_input", ".", "shape", "[", "0", "]", "\n", "# Create a tensor with the batch indices", "\n", "batch_indices", "=", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "# To performs ops between them we need to reshape the decoder_prev_hidden into [batch_size, 1, features]", "\n", "if", "add_time_dim", ":", "\n", "      ", "decoder_prev_hidden_with_time_dim", "=", "tf", ".", "expand_dims", "(", "dec_output", ",", "1", ")", "\n", "", "else", ":", "\n", "      ", "decoder_prev_hidden_with_time_dim", "=", "dec_output", "\n", "\n", "# score shape == [batch_size, max_length, 1]", "\n", "# we get 1 at the last axis because we are applying score to self.V", "\n", "# the shape of the tensor before applying self.V is [batch_size, max_length, units]", "\n", "", "score", "=", "self", ".", "V", "(", "tf", ".", "nn", ".", "tanh", "(", "\n", "self", ".", "W1", "(", "decoder_prev_hidden_with_time_dim", ")", "+", "self", ".", "W2", "(", "enc_outputs", ")", ")", ")", "\n", "\n", "# Remove last dim", "\n", "pointer_logits", "=", "tf", ".", "squeeze", "(", "score", ",", "axis", "=", "2", ")", "\n", "\n", "# Logits clipping", "\n", "# More info: https://arxiv.org/pdf/1611.09940.pdf", "\n", "# Appendix, Improving Exploration", "\n", "if", "self", ".", "logit_clipping_C", "is", "not", "None", ":", "\n", "      ", "pointer_logits", "=", "self", ".", "logit_clipping_C", "*", "tf", ".", "nn", ".", "tanh", "(", "pointer_logits", ")", "\n", "\n", "# Apply the mask", "\n", "", "pointer_logits", "-=", "mask", "*", "self", ".", "BIG_NUMBER", "\n", "\n", "# Apply softmax", "\n", "pointer_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "pointer_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Grab the indice of the values pointed by the pointer", "\n", "# pointer_index = pointer_probs.numpy().argmax(-1)", "\n", "pointer_index", "=", "tf", ".", "argmax", "(", "pointer_probs", ",", "axis", "=", "-", "1", ",", "output_type", "=", "'int32'", ")", "\n", "\n", "# Grab decoded element", "\n", "# dec_output = enc_input.numpy()[batch_indices, pointer_index]", "\n", "dec_output", "=", "tf", ".", "gather_nd", "(", "\n", "enc_input", ",", "tf", ".", "stack", "(", "(", "batch_indices", ",", "pointer_index", ")", ",", "-", "1", ")", "\n", ")", "\n", "\n", "return", "pointer_logits", ",", "pointer_probs", ",", "pointer_index", ",", "dec_output", ",", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.actor.decoder.Decoder.__init__": [[11, 60], ["super().__init__", "agents.models.transformer.common.utils.get_initializer", "agents.models.transformer.actor.pointer_attention.PointerAttention", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Dense", "agents.models.transformer.actor.decoder_layer.DecoderLayer", "tensorflow.keras.layers.Dense", "range"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.get_initializer"], ["  ", "def", "__init__", "(", "self", ",", "\n", "num_layers", ",", "\n", "d_model", ",", "\n", "num_heads", ",", "\n", "dff", ",", "\n", "logit_clipping_C", ":", "float", ",", "\n", "embedding_time_distributed", ":", "bool", ",", "\n", "attention_dense_units", ",", "\n", "use_default_initializer", ":", "bool", "=", "True", ")", ":", "\n", "    ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", ":", "int", "=", "d_model", "\n", "self", ".", "num_layers", ":", "int", "=", "num_layers", "\n", "self", ".", "embedding_time_distributed", ":", "bool", "=", "embedding_time_distributed", "\n", "\n", "self", ".", "d_model", ":", "int", "=", "d_model", "\n", "self", ".", "num_layers", ":", "int", "=", "num_layers", "\n", "\n", "self", ".", "use_default_initializer", "=", "use_default_initializer", "\n", "self", ".", "initializer", "=", "get_initializer", "(", "self", ".", "d_model", ",", "self", ".", "use_default_initializer", ")", "\n", "\n", "if", "self", ".", "embedding_time_distributed", ":", "\n", "      ", "self", ".", "embedding", "=", "TimeDistributed", "(", "\n", "Dense", "(", "\n", "self", ".", "d_model", ",", "\n", "kernel_initializer", "=", "self", ".", "initializer", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "embedding", "=", "Dense", "(", "\n", "self", ".", "d_model", ",", "\n", "kernel_initializer", "=", "self", ".", "initializer", "\n", ")", "\n", "\n", "", "self", ".", "dec_layers", "=", "[", "DecoderLayer", "(", "d_model", ",", "num_heads", ",", "dff", ",", "use_default_initializer", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "\n", "# self.last_decoder_layer = LastDecoderLayer(d_model,", "\n", "#                                            num_heads,", "\n", "#                                            dff,", "\n", "#                                            logit_clipping_C,", "\n", "#                                            attention_dense_units,", "\n", "#                                            rate,", "\n", "#                                            use_default_initializer)", "\n", "\n", "self", ".", "last_decoder_layer", "=", "PointerAttention", "(", "\n", "attention_dense_units", ",", "\n", "logit_clipping_C", ",", "\n", "use_default_initializer", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.actor.decoder.Decoder.call": [[62, 102], ["decoder.Decoder.embedding", "range", "decoder.Decoder.last_decoder_layer", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "\n", "dec_input", ",", "\n", "enc_input", ",", "\n", "enc_output", ",", "\n", "attention_mask", ",", "\n", "training", ",", "\n", "look_ahead_mask", ",", "\n", "padding_mask", ")", ":", "\n", "\n", "    ", "seq_len", "=", "tf", ".", "shape", "(", "dec_input", ")", "[", "1", "]", "\n", "attention_weights", "=", "{", "}", "\n", "\n", "dec_input", "=", "self", ".", "embedding", "(", "dec_input", ")", "# (batch_size, target_seq_len, d_model)", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "dec_input", ",", "block1", ",", "block2", "=", "self", ".", "dec_layers", "[", "i", "]", "(", "dec_input", ",", "\n", "enc_output", ",", "\n", "training", ",", "\n", "look_ahead_mask", ",", "\n", "padding_mask", ")", "\n", "\n", "", "attention_weights", "[", "'decoder_layer{}_block1'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "block1", "\n", "attention_weights", "[", "'decoder_layer{}_block2'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "block2", "\n", "\n", "p_logits", ",", "p_probs", ",", "p_index", ",", "p_value", "=", "self", ".", "last_decoder_layer", "(", "dec_input", ",", "\n", "enc_input", ",", "\n", "enc_output", ",", "\n", "attention_mask", ",", "\n", ")", "\n", "\n", "# p_logits, p_probs, p_index, p_value = self.last_decoder_layer(dec_input,", "\n", "#                                                               enc_input,", "\n", "#                                                               enc_output,", "\n", "#                                                               training,", "\n", "#                                                               attention_mask,", "\n", "#                                                               look_ahead_mask,", "\n", "#                                                               padding_mask", "\n", "#                                                               )", "\n", "\n", "return", "p_logits", ",", "p_probs", ",", "p_index", ",", "p_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.actor.model.ActorTransformer.__init__": [[6, 40], ["super().__init__", "agents.models.transformer.common.encoder.Encoder", "agents.models.transformer.actor.decoder.Decoder"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["  ", "def", "__init__", "(", "self", ",", "\n", "num_layers", ",", "\n", "d_model", ",", "\n", "num_heads", ",", "\n", "dff", ",", "\n", "logit_clipping_C", ":", "float", ",", "\n", "encoder_embedding_time_distributed", ",", "\n", "attention_dense_units", ",", "\n", "use_default_initializer", ":", "bool", ",", "\n", "common_embedding", ":", "bool", ",", "\n", "num_bin_features", ":", "int", ",", "\n", "num_resource_features", ":", "int", "\n", ")", ":", "\n", "\n", "    ", "super", "(", "ActorTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "num_layers", ",", "\n", "d_model", ",", "\n", "num_heads", ",", "\n", "dff", ",", "\n", "encoder_embedding_time_distributed", ",", "\n", "use_default_initializer", ",", "\n", "common_embedding", ",", "\n", "num_bin_features", ",", "\n", "num_resource_features", ")", "\n", "\n", "self", ".", "decoder", "=", "Decoder", "(", "num_layers", ",", "\n", "d_model", ",", "\n", "num_heads", ",", "\n", "dff", ",", "\n", "logit_clipping_C", ",", "\n", "encoder_embedding_time_distributed", ",", "\n", "attention_dense_units", ",", "\n", "use_default_initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.actor.model.ActorTransformer.call": [[41, 73], ["model.ActorTransformer.encoder", "model.ActorTransformer.decoder"], "methods", ["None"], ["", "@", "tf", ".", "function", "\n", "def", "call", "(", "self", ",", "\n", "enc_input", ",", "\n", "dec_input", ",", "\n", "attention_mask", ",", "\n", "training", ":", "bool", ",", "\n", "num_bins", ":", "int", ",", "\n", "enc_padding_mask", "=", "None", ",", "\n", "look_ahead_mask", "=", "None", ",", "\n", "dec_padding_mask", "=", "None", ",", "\n", ")", ":", "\n", "\n", "# enc_output.shape = (batch_size, inp_seq_len, d_model)", "\n", "    ", "enc_output", "=", "self", ".", "encoder", "(", "enc_input", ",", "\n", "training", ",", "\n", "num_bins", ",", "\n", "enc_padding_mask", ")", "\n", "\n", "# Compute a single pointer", "\n", "# p_logits.shape = (batch_size, inp_seq_len)", "\n", "# p_probs.shape = (batch_size, inp_seq_len)", "\n", "# p_index = int", "\n", "# p_value.shape = (batch_size, 2)", "\n", "p_logits", ",", "p_probs", ",", "p_index", ",", "p_value", "=", "self", ".", "decoder", "(", "dec_input", ",", "\n", "enc_input", ",", "\n", "enc_output", ",", "\n", "attention_mask", ",", "\n", "training", ",", "\n", "look_ahead_mask", ",", "\n", "dec_padding_mask", ")", "\n", "\n", "return", "p_logits", ",", "p_probs", ",", "p_index", ",", "p_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.actor.decoder_layer.DecoderLayer.__init__": [[6, 17], ["super().__init__", "agents.models.transformer.common.attention.MultiHeadAttention", "agents.models.transformer.common.attention.MultiHeadAttention", "agents.models.transformer.common.utils.point_wise_feed_forward_network", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.point_wise_feed_forward_network"], ["  ", "def", "__init__", "(", "self", ",", "d_model", ",", "num_heads", ",", "dff", ",", "use_default_initializer", ":", "bool", "=", "True", ")", ":", "\n", "    ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mha1", "=", "MultiHeadAttention", "(", "d_model", ",", "num_heads", ",", "use_default_initializer", ")", "\n", "self", ".", "mha2", "=", "MultiHeadAttention", "(", "d_model", ",", "num_heads", ",", "use_default_initializer", ")", "\n", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model", ",", "dff", ",", "use_default_initializer", ")", "\n", "\n", "self", ".", "layernorm1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "layernorm2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "layernorm3", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.actor.decoder_layer.DecoderLayer.call": [[18, 33], ["decoder_layer.DecoderLayer.mha1", "decoder_layer.DecoderLayer.layernorm1", "decoder_layer.DecoderLayer.mha2", "decoder_layer.DecoderLayer.layernorm2", "decoder_layer.DecoderLayer.ffn", "decoder_layer.DecoderLayer.layernorm3"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "enc_output", ",", "training", ",", "\n", "look_ahead_mask", ",", "padding_mask", ")", ":", "\n", "# enc_output.shape == (batch_size, input_seq_len, d_model)", "\n", "\n", "    ", "attn1", ",", "attn_weights_block1", "=", "self", ".", "mha1", "(", "x", ",", "x", ",", "x", ",", "look_ahead_mask", ")", "# (batch_size, target_seq_len, d_model)", "\n", "out1", "=", "self", ".", "layernorm1", "(", "attn1", "+", "x", ")", "\n", "\n", "attn2", ",", "attn_weights_block2", "=", "self", ".", "mha2", "(", "\n", "enc_output", ",", "enc_output", ",", "out1", ",", "padding_mask", ")", "# (batch_size, target_seq_len, d_model)", "\n", "out2", "=", "self", ".", "layernorm2", "(", "attn2", "+", "out1", ")", "# (batch_size, target_seq_len, d_model)", "\n", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out2", ")", "# (batch_size, target_seq_len, d_model)", "\n", "out3", "=", "self", ".", "layernorm3", "(", "ffn_output", "+", "out2", ")", "# (batch_size, target_seq_len, d_model)", "\n", "\n", "return", "out3", ",", "attn_weights_block1", ",", "attn_weights_block2", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.critic.model.CriticTransformer.__init__": [[6, 54], ["super().__init__", "agents.models.transformer.common.utils.get_initializer", "agents.models.transformer.common.encoder.Encoder", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.get_initializer"], ["  ", "def", "__init__", "(", "self", ",", "\n", "num_layers", ",", "\n", "d_model", ",", "\n", "num_heads", ",", "\n", "dff", ",", "\n", "logit_clipping_C", ":", "float", ",", "\n", "encoder_embedding_time_distributed", ",", "\n", "attention_dense_units", ",", "\n", "use_default_initializer", ":", "bool", ",", "\n", "common_embedding", ":", "bool", ",", "\n", "num_bin_features", ":", "int", ",", "\n", "num_resource_features", ":", "int", "\n", ")", ":", "\n", "\n", "    ", "super", "(", "ActorTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "num_layers", ",", "\n", "d_model", ",", "\n", "num_heads", ",", "\n", "dff", ",", "\n", "encoder_embedding_time_distributed", ",", "\n", "use_default_initializer", ",", "\n", "common_embedding", ",", "\n", "num_bin_features", ",", "\n", "num_resource_features", ")", "\n", "\n", "self", ".", "decoder", "=", "Decoder", "(", "num_layers", ",", "\n", "d_model", ",", "\n", "num_heads", ",", "\n", "dff", ",", "\n", "logit_clipping_C", ",", "\n", "encoder_embedding_time_distributed", ",", "\n", "attention_dense_units", ",", "\n", "use_default_initializer", ")", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "call", "(", "self", ",", "\n", "enc_input", ",", "\n", "dec_input", ",", "\n", "attention_mask", ",", "\n", "training", ":", "bool", ",", "\n", "num_bins", ":", "int", ",", "\n", "enc_padding_mask", "=", "None", ",", "\n", "look_ahead_mask", "=", "None", ",", "\n", "dec_padding_mask", "=", "None", ",", "\n", ")", ":", "\n", "\n", "# enc_output.shape = (batch_size, inp_seq_len, d_model)", "\n", "    ", "enc_output", "=", "self", ".", "encoder", "(", "enc_input", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.critic.model.CriticTransformer.call": [[55, 86], ["model.CriticTransformer.encoder", "model.CriticTransformer.flat_layer", "model.CriticTransformer.final_layer0", "model.CriticTransformer.final_layer1", "model.CriticTransformer.final_layer"], "methods", ["None"], ["training", ",", "\n", "num_bins", ",", "\n", "enc_padding_mask", ")", "\n", "\n", "# Compute a single pointer", "\n", "# p_logits.shape = (batch_size, inp_seq_len)", "\n", "# p_probs.shape = (batch_size, inp_seq_len)", "\n", "# p_index = int", "\n", "# p_value.shape = (batch_size, 2)", "\n", "p_logits", ",", "p_probs", ",", "p_index", ",", "p_value", "=", "self", ".", "decoder", "(", "dec_input", ",", "\n", "enc_input", ",", "\n", "enc_output", ",", "\n", "attention_mask", ",", "\n", "training", ",", "\n", "look_ahead_mask", ",", "\n", "dec_padding_mask", ")", "\n", "\n", "return", "p_logits", ",", "p_probs", ",", "p_index", ",", "p_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.encoder.Encoder.__init__": [[8, 66], ["super().__init__", "agents.models.transformer.common.utils.get_initializer", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Dense", "agents.models.transformer.common.encoder_layer.EncoderLayer", "agents.models.transformer.common.encoder_layer.EncoderLayer", "agents.models.transformer.common.encoder_layer.EncoderLayer", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Dense", "range", "range", "range", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.get_initializer"], ["  ", "def", "__init__", "(", "self", ",", "\n", "num_layers", ",", "\n", "d_model", ",", "\n", "num_heads", ",", "\n", "dff", ",", "\n", "embedding_time_distributed", ":", "bool", ",", "\n", "use_default_initializer", ":", "bool", ",", "\n", "common_embedding", ":", "bool", ",", "\n", "num_bin_features", ":", "int", ",", "\n", "num_resource_features", ":", "int", ")", ":", "\n", "\n", "    ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "common_embedding", "=", "common_embedding", "\n", "self", ".", "num_bin_features", "=", "num_bin_features", "\n", "self", ".", "num_resource_features", "=", "num_resource_features", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embedding_time_distributed", "=", "embedding_time_distributed", "\n", "\n", "self", ".", "use_default_initializer", "=", "use_default_initializer", "\n", "self", ".", "initializer", "=", "get_initializer", "(", "self", ".", "d_model", ",", "self", ".", "use_default_initializer", ")", "\n", "\n", "if", "self", ".", "embedding_time_distributed", ":", "\n", "      ", "self", ".", "embedding1", "=", "TimeDistributed", "(", "\n", "Dense", "(", "self", ".", "d_model", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", ")", "\n", "# If the env state needs separate embedding", "\n", "# For example, if features have different meanings", "\n", "# Or if, the number of features is different", "\n", "if", "not", "self", ".", "common_embedding", ":", "\n", "       ", "self", ".", "embedding2", "=", "TimeDistributed", "(", "\n", "Dense", "(", "self", ".", "d_model", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "embedding1", "=", "Dense", "(", "self", ".", "d_model", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", "# If the env state needs separate embedding", "\n", "# For example, if features have different meanings", "\n", "# Or if, the number of features is different", "\n", "if", "not", "self", ".", "common_embedding", ":", "\n", "        ", "self", ".", "embedding2", "=", "Dense", "(", "self", ".", "d_model", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", "\n", "", "", "if", "self", ".", "common_embedding", ":", "\n", "      ", "self", ".", "embedding_fn", "=", "self", ".", "common_embedding_fn", "\n", "", "else", ":", "\n", "      ", "self", ".", "embedding_fn", "=", "self", ".", "unique_embedding_fn", "\n", "\n", "", "self", ".", "enc_layers", "=", "[", "EncoderLayer", "(", "d_model", ",", "num_heads", ",", "dff", ",", "use_default_initializer", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "\n", "self", ".", "enc_layers_bins", "=", "[", "EncoderLayer", "(", "d_model", ",", "num_heads", ",", "dff", ",", "use_default_initializer", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "\n", "self", ".", "enc_layers_resources", "=", "[", "EncoderLayer", "(", "d_model", ",", "num_heads", ",", "dff", ",", "use_default_initializer", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "\n", "self", ".", "concatenate_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Concatenate", "(", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.encoder.Encoder.call": [[67, 100], ["encoder.Encoder.embedding_fn", "range", "range", "encoder.Encoder.concatenate_layer", "range", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", ",", "num_bins", ",", "enc_padding_mask", "=", "None", ")", ":", "\n", "\n", "    ", "seq_len", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "\n", "# adding embedding and position encoding.", "\n", "# x = self.embedding1(x)  # (batch_size, input_seq_len, d_model)", "\n", "\n", "encoded_bins", ",", "encoded_resources", "=", "self", ".", "embedding_fn", "(", "x", ",", "num_bins", ")", "\n", "\n", "# Self-Attention over the bins", "\n", "# encoded_bins = x[:, :num_bins]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "encoded_bins", "=", "self", ".", "enc_layers_bins", "[", "i", "]", "(", "\n", "encoded_bins", ",", "training", ",", "enc_padding_mask", "[", ":", ",", ":", ",", ":", ",", ":", "num_bins", "]", "\n", ")", "\n", "\n", "# Self-Attention over the resources", "\n", "# encoded_resources = x[:, num_bins:]", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "encoded_resources", "=", "self", ".", "enc_layers_resources", "[", "i", "]", "(", "\n", "encoded_resources", ",", "training", ",", "enc_padding_mask", "[", ":", ",", ":", ",", ":", ",", "num_bins", ":", "]", "\n", ")", "\n", "\n", "# Concatenate self-attentions of bins and resources", "\n", "", "concatenated_result", "=", "self", ".", "concatenate_layer", "(", "\n", "[", "encoded_bins", ",", "encoded_resources", "]", "\n", ")", "\n", "\n", "# Self-Attention over bins and resources", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "concatenated_result", "=", "self", ".", "enc_layers", "[", "i", "]", "(", "concatenated_result", ",", "training", ",", "enc_padding_mask", ")", "\n", "\n", "", "return", "concatenated_result", "# (batch_size, input_seq_len, d_model)", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.encoder.Encoder.common_embedding_fn": [[101, 110], ["encoder.Encoder.embedding1"], "methods", ["None"], ["", "def", "common_embedding_fn", "(", "self", ",", "x", ",", "num_bins", ")", ":", "\n", "\n", "# Pass thought embedding layer and then split", "\n", "    ", "x", "=", "self", ".", "embedding1", "(", "x", ")", "\n", "\n", "encoded_bins", "=", "x", "[", ":", ",", ":", "num_bins", "]", "\n", "encoded_resources", "=", "x", "[", ":", ",", "num_bins", ":", "]", "\n", "\n", "return", "encoded_bins", ",", "encoded_resources", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.encoder.Encoder.unique_embedding_fn": [[111, 122], ["encoder.Encoder.embedding1", "encoder.Encoder.embedding2"], "methods", ["None"], ["", "def", "unique_embedding_fn", "(", "self", ",", "x", ",", "num_bins", ")", ":", "\n", "\n", "# First split and then pass through embedding layers", "\n", "    ", "encoded_bins", "=", "x", "[", ":", ",", ":", "num_bins", ",", ":", "self", ".", "num_bin_features", "]", "\n", "encoded_resources", "=", "x", "[", ":", ",", "num_bins", ":", ",", ":", "self", ".", "num_resource_features", "]", "\n", "\n", "encoded_bins", "=", "self", ".", "embedding1", "(", "encoded_bins", ")", "\n", "\n", "encoded_resources", "=", "self", ".", "embedding2", "(", "encoded_resources", ")", "\n", "\n", "return", "encoded_bins", ",", "encoded_resources", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.encoder_layer.EncoderLayer.__init__": [[6, 14], ["super().__init__", "agents.models.transformer.common.attention.MultiHeadAttention", "agents.models.transformer.common.utils.point_wise_feed_forward_network", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.point_wise_feed_forward_network"], ["  ", "def", "__init__", "(", "self", ",", "d_model", ",", "num_heads", ",", "dff", ",", "use_default_initializer", ":", "bool", "=", "True", ")", ":", "\n", "    ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mha", "=", "MultiHeadAttention", "(", "d_model", ",", "num_heads", ",", "use_default_initializer", ")", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model", ",", "dff", ",", "use_default_initializer", ")", "\n", "\n", "self", ".", "layernorm1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "layernorm2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.encoder_layer.EncoderLayer.call": [[15, 24], ["encoder_layer.EncoderLayer.mha", "encoder_layer.EncoderLayer.layernorm1", "encoder_layer.EncoderLayer.ffn", "encoder_layer.EncoderLayer.layernorm2"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", ",", "mask", "=", "None", ")", ":", "\n", "\n", "    ", "attn_output", ",", "_", "=", "self", ".", "mha", "(", "x", ",", "x", ",", "x", ",", "mask", ")", "# (batch_size, input_seq_len, d_model)", "\n", "out1", "=", "self", ".", "layernorm1", "(", "x", "+", "attn_output", ")", "# (batch_size, input_seq_len, d_model)", "\n", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out1", ")", "# (batch_size, input_seq_len, d_model)", "\n", "out2", "=", "self", ".", "layernorm2", "(", "out1", "+", "ffn_output", ")", "# (batch_size, input_seq_len, d_model)", "\n", "\n", "return", "out2", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.attention.MultiHeadAttention.__init__": [[5, 22], ["super().__init__", "agents.models.transformer.common.utils.get_initializer", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.get_initializer"], ["  ", "def", "__init__", "(", "self", ",", "d_model", ",", "num_heads", ",", "use_default_initializer", ":", "bool", "=", "True", ")", ":", "\n", "    ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n", "assert", "d_model", "%", "self", ".", "num_heads", "==", "0", "\n", "\n", "self", ".", "depth", "=", "d_model", "//", "self", ".", "num_heads", "\n", "\n", "self", ".", "use_default_initializer", "=", "use_default_initializer", "\n", "self", ".", "initializer", "=", "get_initializer", "(", "self", ".", "d_model", ",", "self", ".", "use_default_initializer", ")", "\n", "\n", "self", ".", "wq", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", "self", ".", "wk", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", "self", ".", "wv", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "kernel_initializer", "=", "self", ".", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.attention.MultiHeadAttention.split_heads": [[23, 29], ["tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"Split the last (features) dimension into (num_heads, depth).\n    Transpose the result such that the shape is (batch_size, num_heads, seq_len, depth)\n    \"\"\"", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "depth", ")", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.attention.MultiHeadAttention.call": [[30, 53], ["attention.MultiHeadAttention.wq", "attention.MultiHeadAttention.wk", "attention.MultiHeadAttention.wv", "attention.MultiHeadAttention.split_heads", "attention.MultiHeadAttention.split_heads", "attention.MultiHeadAttention.split_heads", "agents.models.transformer.common.utils.scaled_dot_product_attention", "tensorflow.transpose", "tensorflow.reshape", "attention.MultiHeadAttention.dense", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.attention.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.attention.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.attention.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.scaled_dot_product_attention"], ["", "def", "call", "(", "self", ",", "v", ",", "k", ",", "q", ",", "mask", ")", ":", "\n", "    ", "batch_size", "=", "tf", ".", "shape", "(", "q", ")", "[", "0", "]", "\n", "\n", "q", "=", "self", ".", "wq", "(", "q", ")", "# (batch_size, seq_len, d_model)", "\n", "k", "=", "self", ".", "wk", "(", "k", ")", "# (batch_size, seq_len, d_model)", "\n", "v", "=", "self", ".", "wv", "(", "v", ")", "# (batch_size, seq_len, d_model)", "\n", "\n", "q", "=", "self", ".", "split_heads", "(", "q", ",", "batch_size", ")", "# (batch_size, num_heads, seq_len_q, depth)", "\n", "k", "=", "self", ".", "split_heads", "(", "k", ",", "batch_size", ")", "# (batch_size, num_heads, seq_len_k, depth)", "\n", "v", "=", "self", ".", "split_heads", "(", "v", ",", "batch_size", ")", "# (batch_size, num_heads, seq_len_v, depth)", "\n", "\n", "# scaled_attention.shape == (batch_size, num_heads, seq_len_q, depth)", "\n", "# attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)", "\n", "scaled_attention", ",", "attention_weights", "=", "scaled_dot_product_attention", "(", "\n", "q", ",", "k", ",", "v", ",", "mask", ")", "\n", "scaled_attention", "=", "tf", ".", "transpose", "(", "scaled_attention", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "# (batch_size, seq_len_q, num_heads, depth)", "\n", "\n", "concat_attention", "=", "tf", ".", "reshape", "(", "scaled_attention", ",", "\n", "(", "batch_size", ",", "-", "1", ",", "self", ".", "d_model", ")", ")", "# (batch_size, seq_len_q, d_model)", "\n", "\n", "output", "=", "self", ".", "dense", "(", "concat_attention", ")", "# (batch_size, seq_len_q, d_model)", "\n", "\n", "return", "output", ",", "attention_weights", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.point_wise_feed_forward_network": [[5, 11], ["utils.get_initializer", "tensorflow.keras.Sequential", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.get_initializer"], ["def", "point_wise_feed_forward_network", "(", "d_model", ",", "dff", ",", "use_default_initializer", ":", "bool", "=", "True", ")", ":", "\n", "  ", "initializer", "=", "get_initializer", "(", "d_model", ",", "use_default_initializer", ")", "\n", "\n", "return", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dff", ",", "activation", "=", "'relu'", ",", "kernel_initializer", "=", "initializer", ")", ",", "# (batch_size, seq_len, dff)", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "kernel_initializer", "=", "initializer", ")", "# (batch_size, seq_len, d_model)", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.scaled_dot_product_attention": [[13, 48], ["tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.math.sqrt", "tensorflow.shape"], "function", ["None"], ["", "def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", ":", "\n", "  ", "\"\"\"Calculate the attention weights.\n  q, k, v must have matching leading dimensions.\n  k, v must have matching penultimate dimension, i.e.: seq_len_k = seq_len_v.\n  The mask has different shapes depending on its type(padding or look ahead) \n  but it must be broadcastable for addition.\n  \n  Args:\n    q: query shape == (..., seq_len_q, depth)\n    k: key shape == (..., seq_len_k, depth)\n    v: value shape == (..., seq_len_v, depth_v)\n    mask: Float tensor with shape broadcastable \n          to (..., seq_len_q, seq_len_k). Defaults to None.\n    \n  Returns:\n    output, attention_weights\n  \"\"\"", "\n", "\n", "matmul_qk", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# (..., seq_len_q, seq_len_k)", "\n", "\n", "# scale matmul_qk", "\n", "dk", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "# add the mask to the scaled tensor.", "\n", "if", "mask", "is", "not", "None", ":", "\n", "    ", "scaled_attention_logits", "+=", "(", "mask", "*", "-", "1e9", ")", "\n", "\n", "# softmax is normalized on the last axis (seq_len_k) so that the scores", "\n", "# add up to 1.", "\n", "", "attention_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scaled_attention_logits", ",", "axis", "=", "-", "1", ")", "# (..., seq_len_q, seq_len_k)", "\n", "\n", "output", "=", "tf", ".", "matmul", "(", "attention_weights", ",", "v", ")", "# (..., seq_len_q, depth_v)", "\n", "\n", "return", "output", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.common.utils.get_initializer": [[49, 65], ["tensorflow.keras.initializers.RandomUniform", "math.sqrt"], "function", ["None"], ["", "def", "get_initializer", "(", "dims", ":", "int", ",", "use_default_initializer", ":", "bool", ")", ":", "\n", "    ", "if", "use_default_initializer", ":", "\n", "# Default initializer. More info: https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense", "\n", "      ", "return", "'glorot_uniform'", "\n", "\n", "# From https://arxiv.org/pdf/1803.08475.pdf", "\n", "# Page 6. Section 5 Hyperparameters", "\n", "", "value", "=", "1", "/", "math", ".", "sqrt", "(", "dims", ")", "\n", "\n", "init", "=", "tf", ".", "keras", ".", "initializers", ".", "RandomUniform", "(", "\n", "minval", "=", "-", "1", "*", "value", ",", "\n", "maxval", "=", "value", ",", "\n", "seed", "=", "None", "\n", ")", "\n", "\n", "return", "init", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.environment.env_factory.env_factory": [[27, 34], ["environment.gym.env.GymEnvironment", "Environment"], "function", ["None"], ["def", "env_factory", "(", "type", ",", "name", ",", "opts", ")", "->", "Tuple", "[", "ResourceEnvironmentV3", ",", "Callable", ",", "Callable", "]", ":", "\n", "    ", "if", "(", "type", "==", "'gym'", ")", ":", "return", "GymEnvironment", "(", "name", ")", "\n", "\n", "#try:", "\n", "Environment", ",", "tester", "=", "custom_envs", "[", "f\"{name}\"", "]", "\n", "# print(f'\"{name.upper()}\" environment selected.')", "\n", "return", "Environment", "(", "name", ",", "opts", ")", ",", "tester", "\n", "# except KeyError:", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.__init__": [[6, 11], ["environment.base.base.BaseEnvironment.__init__", "gym.make", "env.GymEnvironment.env.reset"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "        ", "super", "(", "GymEnvironment", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "\n", "self", ".", "env", "=", "gym", ".", "make", "(", "name", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.reset": [[12, 15], ["env.GymEnvironment.env.reset"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Reset the env and return initial observation", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.state": [[16, 19], ["None"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "# Return current state", "\n", "        ", "return", "self", ".", "env", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.step": [[20, 22], ["env.GymEnvironment.env.step"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.sample_action": [[23, 26], ["env.GymEnvironment.env.action_space.sample"], "methods", ["None"], ["", "def", "sample_action", "(", "self", ")", ":", "\n", "# Return random action", "\n", "        ", "return", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.get_action_space": [[27, 33], ["hasattr"], "methods", ["None"], ["", "def", "get_action_space", "(", "self", ")", ":", "\n", "# Returns action space", "\n", "        ", "if", "hasattr", "(", "self", ".", "env", ".", "action_space", ",", "'n'", ")", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.seed": [[34, 36], ["env.GymEnvironment.env.seed"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.seed"], ["", "", "def", "seed", "(", "self", ",", "num", ")", ":", "\n", "        ", "self", ".", "env", ".", "seed", "(", "num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.close": [[37, 39], ["env.GymEnvironment.env.close"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.get_observation_space": [[40, 43], ["None"], "methods", ["None"], ["", "def", "get_observation_space", "(", "self", ")", ":", "\n", "# Returns observation space", "\n", "        ", "return", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.add_stats_to_agent_config": [[44, 49], ["env.GymEnvironment.get_action_space", "env.GymEnvironment.get_observation_space"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.get_action_space", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.get_observation_space"], ["", "def", "add_stats_to_agent_config", "(", "self", ",", "agent_config", ")", ":", "\n", "        ", "agent_config", "[", "'action_space'", "]", "=", "self", ".", "get_action_space", "(", ")", "\n", "agent_config", "[", "'observation_space'", "]", "=", "self", ".", "get_observation_space", "(", ")", "\n", "\n", "return", "agent_config", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.gym.env.GymEnvironment.print_stats": [[50, 69], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print_stats", "(", "self", ")", ":", "\n", "        ", "print", "(", "'---------Environment Stats-----------------'", ")", "\n", "print", "(", "f'Name: \"{self.name}\"'", ")", "\n", "print", "(", "'___________________________________________'", ")", "\n", "print", "(", "'Action Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "action_space", ")", "\n", "\n", "print", "(", "'Observation Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ")", "\n", "\n", "print", "(", "'Observation Space Higher Bound'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ".", "high", ")", "\n", "\n", "print", "(", "'Observation Space Lower Bound'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ".", "low", ")", "\n", "\n", "print", "(", "'Maximum Episode Steps'", ")", "\n", "print", "(", "self", ".", "env", ".", "spec", ".", "max_episode_steps", ")", "\n", "print", "(", "'-------------------------------------------'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.item.Item.__init__": [[5, 17], ["super().__init__", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "batch_id", ",", "\n", "id", ",", "\n", "item_representation", ")", ":", "\n", "        ", "super", "(", "Item", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_id", "=", "batch_id", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "weight", "=", "np", ".", "array", "(", "[", "item_representation", "[", "0", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "value", "=", "np", ".", "array", "(", "[", "item_representation", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "self", ".", "ratio", "=", "self", ".", "value", "/", "self", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.item.Item.get_tensor_rep": [[18, 23], ["numpy.asanyarray().flatten", "numpy.asanyarray"], "methods", ["None"], ["", "def", "get_tensor_rep", "(", "self", ")", ":", "\n", "\n", "        ", "return", "np", ".", "asanyarray", "(", "[", "\n", "self", ".", "weight", ",", "\n", "self", ".", "value", ",", "\n", "]", ")", ".", "flatten", "(", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.item.Item.print": [[25, 27], ["item.Item.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print", "(", "self", ")", ":", "# pragma: no cover", "\n", "        ", "print", "(", "f'Batch: {self.batch_id} \\t| ID : {self.id:02d} \\t| Weight: {self.weight[0]:1f} \\t| RAM: {self.value[0]:1f} \\t'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.reward.GreedyReward.__init__": [[18, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opts", ":", "dict", ",", "EOS_NODE", ")", ":", "\n", "        ", "super", "(", "GreedyReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "EOS_NODE", "=", "EOS_NODE", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.reward.GreedyReward.compute_reward": [[22, 42], ["environment.custom.knapsack_v2.misc.utils.bins_eos_checker"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker"], ["", "def", "compute_reward", "(", "self", ",", "\n", "updated_batch", ",", "\n", "original_batch", ",", "\n", "total_num_nodes", ",", "\n", "bins", ",", "\n", "items", ",", "\n", "feasible_mask", ",", "\n", "node_ids", ",", "\n", ")", ":", "\n", "\n", "        ", "batch_size", "=", "updated_batch", ".", "shape", "[", "0", "]", "\n", "num_features", "=", "updated_batch", ".", "shape", "[", "2", "]", "\n", "\n", "is_eos", "=", "bins_eos_checker", "(", "bins", ",", "self", ".", "EOS_NODE", "[", "0", "]", ",", "num_features", ",", "\"float32\"", ")", "\n", "\n", "item_values", "=", "items", "[", ":", ",", "1", "]", "\n", "\n", "reward", "=", "item_values", "*", "(", "1", "-", "is_eos", ")", "\n", "\n", "return", "reward", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.reward.RewardFactory": [[3, 16], ["R", "NameError", "list", "rewards.keys"], "function", ["None"], ["def", "RewardFactory", "(", "opts", ":", "dict", ",", "EOS_NODE", ")", ":", "\n", "    ", "rewards", "=", "{", "\n", "\"greedy\"", ":", "GreedyReward", ",", "\n", "# ToDO: Add more rewards", "\n", "}", "\n", "\n", "try", ":", "\n", "        ", "rewardType", "=", "opts", "[", "'type'", "]", "\n", "R", "=", "rewards", "[", "f'{rewardType}'", "]", "\n", "# print(f'\"{rewardType.upper()}\" reward selected.')", "\n", "return", "R", "(", "opts", "[", "f'{rewardType}'", "]", ",", "EOS_NODE", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "raise", "NameError", "(", "f'Unknown Reward Name! Select one of {list(rewards.keys())}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.__init__": [[11, 29], ["super().__init__", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "batch_id", ",", "\n", "id", ",", "\n", "bin_representation", "\n", ")", ":", "\n", "        ", "super", "(", "Bin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_id", "=", "batch_id", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "capacity", "=", "np", ".", "array", "(", "[", "bin_representation", "[", "0", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "current_load", "=", "np", ".", "array", "(", "[", "bin_representation", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "self", ".", "item_list", ":", "List", "[", "Item", "]", "=", "[", "]", "\n", "\n", "self", ".", "current_value", "=", "np", ".", "array", "(", "[", "0.0", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "# History stats", "\n", "self", ".", "load_history", "=", "[", "self", ".", "current_load", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.reset": [[30, 38], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_load", "=", "np", ".", "array", "(", "[", "0", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "self", ".", "item_list", "=", "[", "]", "\n", "\n", "self", ".", "load_history", "=", "[", "self", ".", "current_load", "]", "\n", "\n", "self", ".", "current_value", "=", "np", ".", "array", "(", "[", "0.0", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.compute_updated_load": [[39, 41], ["environment.custom.knapsack_v2.misc.utils.round_half_up"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], ["", "def", "compute_updated_load", "(", "self", ",", "item", ":", "Item", ")", ":", "\n", "        ", "return", "round_half_up", "(", "self", ".", "current_load", "+", "item", ".", "weight", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.can_fit_item": [[42, 46], ["bin.Bin.compute_updated_load", "environment.custom.knapsack_v2.misc.utils.round_half_up"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.compute_updated_load", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], ["", "def", "can_fit_item", "(", "self", ",", "item", ":", "Item", ")", ":", "\n", "        ", "updated_load", "=", "self", ".", "compute_updated_load", "(", "item", ")", "\n", "\n", "return", "round_half_up", "(", "self", ".", "capacity", "-", "updated_load", ",", "2", ")", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.compute_remaining_capacity": [[47, 51], ["bin.Bin.compute_updated_load", "environment.custom.knapsack_v2.misc.utils.round_half_up"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.compute_updated_load", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], ["", "def", "compute_remaining_capacity", "(", "self", ",", "item", ":", "Item", ")", ":", "\n", "        ", "updated_load", "=", "self", ".", "compute_updated_load", "(", "item", ")", "\n", "\n", "return", "round_half_up", "(", "self", ".", "capacity", "-", "updated_load", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item": [[52, 64], ["bin.Bin.item_list.append", "bin.Bin.can_fit_item", "bin.Bin.compute_updated_load", "bin.Bin.load_history.append", "bin.Bin.current_load.copy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.can_fit_item", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.compute_updated_load"], ["", "def", "insert_item", "(", "self", ",", "item", ":", "Item", ")", ":", "\n", "\n", "        ", "if", "self", ".", "id", "!=", "0", ":", "\n", "            ", "assert", "self", ".", "can_fit_item", "(", "item", ")", ",", "f'Bin {self.id} is overloaded. Current load {self.current_load[0]:.2f}/{self.capacity[0]:.2f} || Item: weight {item.weight[0]:.2f} value {item.value[0]:.2f}'", "\n", "\n", "self", ".", "current_load", "=", "self", ".", "compute_updated_load", "(", "item", ")", "\n", "\n", "self", ".", "load_history", ".", "append", "(", "self", ".", "current_load", ".", "copy", "(", ")", ")", "\n", "\n", "", "self", ".", "current_value", "+=", "item", ".", "value", "\n", "self", ".", "item_list", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.print": [[65, 80], ["numpy.around", "numpy.around", "bin.Bin.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print", "(", "self", ",", "print_details", "=", "False", ")", ":", "# pragma: no cover", "\n", "        ", "maximum_capacity", "=", "np", ".", "around", "(", "self", ".", "capacity", ",", "decimals", "=", "4", ")", "\n", "current_load", "=", "np", ".", "around", "(", "self", ".", "current_load", ",", "decimals", "=", "4", ")", "\n", "\n", "print", "(", "f'Node ID: {self.id} \\t| Current Load {current_load} of {maximum_capacity}'", ")", "\n", "\n", "total_items", "=", "len", "(", "self", ".", "item_list", ")", "\n", "\n", "if", "print_details", ":", "\n", "            ", "print", "(", "'Resources allocated to the Node:'", ")", "\n", "if", "total_items", "==", "0", ":", "print", "(", "'<Empty>'", ")", "\n", "for", "res", "in", "self", ".", "item_list", ":", "\n", "                ", "res", ".", "print", "(", ")", "\n", "\n", "", "", "print", "(", "f'Total Requests {total_items}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.get_tensor_rep": [[81, 86], ["numpy.asanyarray().flatten", "numpy.asanyarray"], "methods", ["None"], ["", "def", "get_tensor_rep", "(", "self", ")", ":", "\n", "\n", "        ", "return", "np", ".", "asanyarray", "(", "[", "\n", "self", ".", "capacity", ",", "\n", "self", ".", "current_load", ",", "\n", "]", ")", ".", "flatten", "(", ")", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.attention_plotter.attention_plotter": [[7, 60], ["matplotlib.subplots", "enumerate", "range", "matplotlib.tight_layout", "matplotlib.show", "axs[].matshow", "matplotlib.sca", "int", "int", "matplotlib.xticks", "enumerate", "matplotlib.yticks", "numpy.transpose", "round", "round", "nodes_label.append", "range", "int", "int", "int", "int", "len", "round", "round", "round", "round"], "function", ["None"], ["def", "attention_plotter", "(", "attentions", ",", "\n", "num_resources", ",", "\n", "num_bins", "\n", ")", ":", "\n", "\n", "    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "1", ",", "num_resources", ")", "\n", "# fig.suptitle('Attentions')", "\n", "\n", "#for ax in axs.flat:", "\n", "#    ax.set(xlabel='resource', ylabel='nodes')", "\n", "\n", "# Hide x labels and tick labels for top plots and y ticks for right plots.", "\n", "#for ax in axs.flat:", "\n", "#    ax.label_outer()", "\n", "\n", "for", "index", ",", "attention", "in", "enumerate", "(", "attentions", ")", ":", "\n", "# Only show the attention over the bins", "\n", "        ", "bin_attention", "=", "attention", "[", "'attention_probs'", "]", "[", ":", ",", ":", "num_bins", "]", "\n", "axs", "[", "index", "]", ".", "matshow", "(", "np", ".", "transpose", "(", "bin_attention", ")", ")", "\n", "# axs.matshow(np.transpose(bin_attention))", "\n", "# axs[index].set_title('Backpack Attention')", "\n", "\n", "", "for", "index", "in", "range", "(", "num_resources", ")", ":", "\n", "# Select the plot by index for the Items", "\n", "        ", "plt", ".", "sca", "(", "axs", "[", "index", "]", ")", "\n", "# Add the ticks and the labels", "\n", "resource_input", "=", "attentions", "[", "index", "]", "[", "\"decoder_input\"", "]", "\n", "\n", "weight", "=", "int", "(", "round", "(", "resource_input", "[", "0", ",", "0", ",", "0", "]", "*", "100", ")", ")", "\n", "value", "=", "int", "(", "round", "(", "resource_input", "[", "0", ",", "0", ",", "1", "]", "*", "100", ")", ")", "\n", "\n", "resource_label", "=", "f'W:{weight} V:{value}'", "\n", "plt", ".", "xticks", "(", "[", "0", "]", ",", "[", "resource_label", "]", ",", "fontsize", "=", "8", ")", "\n", "\n", "node_states", "=", "attentions", "[", "index", "]", "[", "'current_state'", "]", "[", "0", ",", ":", "num_bins", "]", "\n", "nodes_label", "=", "[", "]", "\n", "for", "index", ",", "bin", "in", "enumerate", "(", "node_states", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "capacity", "=", "int", "(", "round", "(", "bin", "[", "0", "]", ")", ")", "\n", "load", "=", "int", "(", "round", "(", "bin", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "capacity", "=", "int", "(", "round", "(", "bin", "[", "0", "]", "*", "100", ")", ")", "\n", "load", "=", "int", "(", "round", "(", "bin", "[", "1", "]", "*", "100", ")", ")", "\n", "\n", "", "nodes_label", ".", "append", "(", "\n", "f'C:{capacity} L:{load}'", "\n", ")", "\n", "\n", "", "plt", ".", "yticks", "(", "range", "(", "len", "(", "nodes_label", ")", ")", ",", "nodes_label", ",", "rotation", "=", "0", ",", "fontsize", "=", "8", ")", "\n", "\n", "# plt.subplots_adjust(wspace=0.3, hspace = 0.3)", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", "block", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.tester.test": [[15, 97], ["numpy.array", "range", "environment.custom.knapsack_v2.misc.utils.generate_file_name", "range", "os.path.join", "environment.custom.knapsack_v2.misc.csv_writer.log_testing_stats", "range", "os.path.isdir", "os.makedirs", "range", "tester.test_single_instance", "global_stats.append"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.generate_file_name", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.csv_writer.log_testing_stats", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.tester.test_single_instance"], ["def", "test", "(", "\n", "env", ":", "KnapsackEnvironmentV2", ",", "\n", "agent", ":", "Agent", ",", "\n", "opts", ":", "dict", ",", "\n", "log_dir", ":", "str", "\n", ")", ":", "\n", "\n", "\n", "    ", "num_tests", ":", "int", "=", "opts", "[", "'testbed'", "]", "[", "'num_tests'", "]", "\n", "# Number of bins", "\n", "bin_configs", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'bin_sample_configs'", "]", "\n", "bin_size_min", "=", "bin_configs", "[", "'min'", "]", "\n", "bin_size_max", "=", "bin_configs", "[", "'max'", "]", "\n", "bin_size_step", "=", "bin_configs", "[", "'step'", "]", "\n", "\n", "# Bins capacities", "\n", "bin_available_capacities", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'bin_available_capacities'", "]", "\n", "bin_min_resource", "=", "bin_available_capacities", "[", "'min'", "]", "\n", "bin_max_resource", "=", "bin_available_capacities", "[", "'max'", "]", "\n", "bin_step_resource", "=", "bin_available_capacities", "[", "'step'", "]", "\n", "\n", "# Number of items", "\n", "item_configs", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'item_sample_configs'", "]", "\n", "item_size_min", "=", "item_configs", "[", "'min'", "]", "\n", "item_size_max", "=", "item_configs", "[", "'max'", "]", "\n", "item_size_step", "=", "item_configs", "[", "'step'", "]", "\n", "\n", "batch_size", ":", "int", "=", "opts", "[", "'batch_size'", "]", "\n", "\n", "show_per_test_stats", ":", "bool", "=", "opts", "[", "'show_per_test_stats'", "]", "\n", "\n", "export_stats", ":", "bool", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'export_stats'", "]", "\n", "test_folder", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'folder'", "]", "\n", "\n", "filename", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'filename'", "]", "\n", "if", "filename", "==", "None", ":", "\n", "        ", "filename", "=", "generate_file_name", "(", "agent", ".", "agent_config", ")", "\n", "\n", "", "global_stats", "=", "[", "]", "\n", "global_reward_results", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "# Won", "\n", "0", ",", "# Draw", "\n", "0", ",", "# Lost", "\n", "]", ")", "\n", "\n", "for", "item_sample_size", "in", "range", "(", "item_size_min", ",", "item_size_max", "+", "1", ",", "item_size_step", ")", ":", "\n", "        ", "for", "bin_sample_size", "in", "range", "(", "bin_size_min", ",", "bin_size_max", "+", "1", ",", "bin_size_step", ")", ":", "\n", "            ", "for", "bin_min_value", "in", "range", "(", "bin_min_resource", ",", "bin_max_resource", ",", "bin_step_resource", ")", ":", "\n", "# print(f'{node_min_value}||{node_min_value + node_step_resource}')", "\n", "                ", "for", "index", "in", "range", "(", "num_tests", ")", ":", "\n", "\n", "                    ", "instance_stats", ",", "reward_result", "=", "test_single_instance", "(", "\n", "index", ",", "\n", "env", ",", "\n", "agent", ",", "\n", "opts", ",", "\n", "batch_size", ",", "\n", "bin_sample_size", ",", "# Number of nodes", "\n", "bin_min_value", ",", "# Min resources available in each node", "\n", "bin_min_value", "+", "bin_step_resource", ",", "# Max resources available in each node", "\n", "item_sample_size", ",", "# Number of resources", "\n", "log_dir", "\n", ")", "\n", "\n", "global_reward_results", "+=", "reward_result", "\n", "\n", "global_stats", ".", "append", "(", "{", "\n", "\"test_instance\"", ":", "index", ",", "\n", "\"bin_sample_size\"", ":", "bin_sample_size", ",", "\n", "\"bin_min_value\"", ":", "bin_min_value", ",", "\n", "\"bin_max_value\"", ":", "bin_min_value", "+", "bin_step_resource", ",", "\n", "\"item_sample_size\"", ":", "item_sample_size", ",", "\n", "\"instance\"", ":", "instance_stats", "\n", "}", ")", "\n", "\n", "", "", "", "", "if", "export_stats", ":", "\n", "        ", "f", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "test_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "f", ")", "\n", "", "log_testing_stats", "(", "global_stats", ",", "f", ",", "filename", ")", "\n", "\n", "", "return", "global_reward_results", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.tester.test_single_instance": [[98, 235], ["env.set_testing_mode", "agent.set_testing_mode", "numpy.zeros", "env.reset", "environment.custom.knapsack_v2.heuristic.factory.heuristic_factory", "current_state.copy", "time.time", "environment.custom.knapsack_v2.misc.utils.gather_stats_from_solutions", "print", "agent.act", "env.step", "attentions.append", "next_dec_input.copy", "print", "solver.solve", "environment.custom.knapsack_v2.misc.utils.compute_max_steps", "datetime.datetime.now().replace().isoformat", "os.path.join", "environment.custom.knapsack_v2.misc.csv_writer.export_to_csv", "env.print_history", "print", "environment.custom.knapsack_v2.attention_plotter.attention_plotter", "print", "os.path.isdir", "os.makedirs", "environment.custom.knapsack_v2.misc.csv_writer.export_to_csv", "solver.print_node_stats", "current_state.copy", "numpy.array", "bins_probs.numpy", "datetime.datetime.now().replace", "time.time", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.factory.heuristic_factory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.gather_stats_from_solutions", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.compute_max_steps", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.export_to_csv", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.print_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.attention_plotter.attention_plotter", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.export_to_csv", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.print_node_stats"], ["", "def", "test_single_instance", "(", "\n", "instance_id", ",", "\n", "env", ":", "KnapsackEnvironmentV2", ",", "\n", "agent", ":", "Agent", ",", "\n", "opts", ":", "dict", ",", "\n", "batch_size", ":", "int", ",", "\n", "bin_sample_size", ":", "int", ",", "\n", "bin_min_val", ":", "int", ",", "\n", "bin_max_val", ":", "int", ",", "\n", "item_sample_size", ":", "int", ",", "\n", "log_dir", ":", "str", ",", "\n", ")", ":", "\n", "\n", "    ", "plot_attentions", ":", "bool", "=", "opts", "[", "'plot_attentions'", "]", "\n", "\n", "# batch_size: int = opts['batch_size']", "\n", "# req_sample_size: int = opts['profiles_sample_size']", "\n", "# node_sample_size: int = opts['node_sample_size']", "\n", "\n", "export_stats", ":", "bool", "=", "opts", "[", "'export_stats'", "]", "[", "'per_problem_stats'", "]", "[", "'export_stats'", "]", "\n", "folder", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'per_problem_stats'", "]", "[", "'folder'", "]", "\n", "\n", "show_inference_progress", ":", "bool", "=", "opts", "[", "'show_inference_progress'", "]", "\n", "show_solutions", ":", "bool", "=", "opts", "[", "'show_solutions'", "]", "\n", "show_detailed_solutions", ":", "bool", "=", "opts", "[", "'show_detailed_solutions'", "]", "\n", "\n", "# Set the agent and env to testing mode", "\n", "env", ".", "set_testing_mode", "(", "\n", "batch_size", ",", "\n", "bin_sample_size", ",", "\n", "item_sample_size", ",", "\n", "bin_min_val", ",", "\n", "bin_max_val", "\n", ")", "\n", "agent", ".", "set_testing_mode", "(", "\n", "batch_size", ",", "\n", "env", ".", "bin_sample_size", ",", "\n", "env", ".", "item_sample_size", "\n", ")", "\n", "\n", "training_step", "=", "0", "\n", "isDone", "=", "False", "\n", "episode_rewards", "=", "np", ".", "zeros", "(", "\n", "(", "agent", ".", "batch_size", ",", "agent", ".", "num_resources", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "current_state", ",", "dec_input", ",", "bin_net_mask", ",", "mha_used_mask", "=", "env", ".", "reset", "(", ")", "\n", "\n", "if", "show_inference_progress", ":", "\n", "        ", "print", "(", "f'Testing with {agent.num_resources} resources and {env.bin_sample_size} bins'", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Init the heuristic solvers ", "\n", "", "heuristic_solvers", "=", "heuristic_factory", "(", "env", ".", "bin_sample_size", ",", "opts", "[", "'heuristic'", "]", ")", "\n", "heuristic_input_state", "=", "current_state", ".", "copy", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "attentions", "=", "[", "]", "\n", "\n", "while", "not", "isDone", ":", "\n", "        ", "if", "show_inference_progress", ":", "\n", "            ", "print", "(", "f'Placing step {training_step} of {agent.num_resources}'", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Select an action", "\n", "", "bin_id", ",", "bin_net_mask", ",", "bins_probs", "=", "agent", ".", "act", "(", "\n", "current_state", ",", "\n", "dec_input", ",", "\n", "bin_net_mask", ",", "\n", "mha_used_mask", ",", "\n", "env", ".", "build_feasible_mask", "\n", ")", "\n", "\n", "\n", "next_state", ",", "next_dec_input", ",", "reward", ",", "isDone", ",", "info", "=", "env", ".", "step", "(", "\n", "bin_id", ",", "\n", "bin_net_mask", "\n", ")", "\n", "\n", "# Store episode rewards", "\n", "episode_rewards", "[", ":", ",", "training_step", "]", "=", "reward", "[", ":", ",", "0", "]", "\n", "\n", "attentions", ".", "append", "(", "{", "\n", "\"current_state\"", ":", "current_state", ".", "copy", "(", ")", ",", "\n", "'decoder_input'", ":", "np", ".", "array", "(", "dec_input", ")", ",", "\n", "\"attention_probs\"", ":", "bins_probs", ".", "numpy", "(", ")", "\n", "}", ")", "\n", "\n", "# Update for next iteration", "\n", "current_state", "=", "next_state", "\n", "dec_input", "=", "next_dec_input", ".", "copy", "(", ")", "\n", "bin_net_mask", "=", "info", "[", "'bin_net_mask'", "]", "\n", "mha_used_mask", "=", "info", "[", "'mha_used_mask'", "]", "\n", "\n", "training_step", "+=", "1", "\n", "\n", "", "if", "show_inference_progress", ":", "\n", "# if env.validate_history() == True:", "\n", "#    print('All solutions are valid!')", "\n", "#else:", "\n", "#    print('Ups! Network generated invalid solutions')", "\n", "\n", "        ", "print", "(", "f'Net solution found in {time.time() - start:.2f} seconds'", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Solve with Heuristic", "\n", "", "for", "solver", "in", "heuristic_solvers", ":", "\n", "        ", "solver", ".", "solve", "(", "heuristic_input_state", ")", "\n", "\n", "", "if", "export_stats", ":", "\n", "# Find the the node with maximum number of inserted resources", "\n", "        ", "max_steps", "=", "compute_max_steps", "(", "env", ".", "history", "[", "0", "]", ",", "heuristic_solvers", ")", "\n", "t", "=", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", ".", "isoformat", "(", ")", "\n", "# Export results to CSV", "\n", "f", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "f", ")", "\n", "\n", "", "export_to_csv", "(", "env", ".", "history", ",", "max_steps", ",", "agent", ".", "name", ",", "f'{f}/{t}_{instance_id}'", ")", "\n", "for", "solver", "in", "heuristic_solvers", ":", "\n", "            ", "export_to_csv", "(", "[", "solver", ".", "solution", "]", ",", "max_steps", ",", "solver", ".", "name", ",", "f'{f}/{t}_{instance_id}'", ")", "\n", "\n", "\n", "", "", "if", "show_solutions", ":", "\n", "        ", "env", ".", "print_history", "(", "show_detailed_solutions", ")", "\n", "print", "(", "'________________________________________________________________________________'", ")", "\n", "for", "solver", "in", "heuristic_solvers", ":", "\n", "            ", "solver", ".", "print_node_stats", "(", "show_detailed_solutions", ")", "\n", "\n", "", "", "if", "plot_attentions", ":", "\n", "# Plot the attentions to visualize the policy", "\n", "        ", "attention_plotter", "(", "\n", "attentions", ",", "\n", "env", ".", "item_sample_size", ",", "\n", "env", ".", "bin_sample_size", ",", "\n", ")", "\n", "\n", "", "stats", ",", "reward_result", "=", "gather_stats_from_solutions", "(", "env", ",", "heuristic_solvers", ")", "\n", "\n", "return", "stats", ",", "reward_result", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.__init__": [[22, 78], ["environment.base.base.BaseEnvironment.__init__", "numpy.full", "environment.custom.knapsack_v2.reward.RewardFactory", "env.KnapsackEnvironmentV2.generate_dataset", "env.KnapsackEnvironmentV2.generate_batch", "env.KnapsackEnvironmentV2.generate_masks"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.RewardFactory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_dataset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks"], ["\n", "", "def", "sample_action", "(", "self", ")", ":", "\n", "# Return random action", "\n", "        ", "return", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "\n", "", "def", "get_action_space", "(", "self", ")", ":", "\n", "# Returns action space", "\n", "        ", "if", "hasattr", "(", "self", ".", "env", ".", "action_space", ",", "'n'", ")", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "def", "seed", "(", "self", ",", "num", ")", ":", "\n", "        ", "self", ".", "env", ".", "seed", "(", "num", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "get_observation_space", "(", "self", ")", ":", "\n", "# Returns observation space", "\n", "        ", "return", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "add_stats_to_agent_config", "(", "self", ",", "agent_config", ")", ":", "\n", "        ", "agent_config", "[", "'action_space'", "]", "=", "self", ".", "get_action_space", "(", ")", "\n", "agent_config", "[", "'observation_space'", "]", "=", "self", ".", "get_observation_space", "(", ")", "\n", "\n", "return", "agent_config", "\n", "\n", "", "def", "print_stats", "(", "self", ")", ":", "\n", "        ", "print", "(", "'---------Environment Stats-----------------'", ")", "\n", "print", "(", "f'Name: \"{self.name}\"'", ")", "\n", "print", "(", "'___________________________________________'", ")", "\n", "print", "(", "'Action Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "action_space", ")", "\n", "\n", "print", "(", "'Observation Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ")", "\n", "\n", "print", "(", "'Observation Space Higher Bound'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ".", "high", ")", "\n", "\n", "print", "(", "'Observation Space Lower Bound'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ".", "low", ")", "\n", "\n", "print", "(", "'Maximum Episode Steps'", ")", "\n", "print", "(", "self", ".", "env", ".", "spec", ".", "max_episode_steps", ")", "\n", "print", "(", "'-------------------------------------------'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.reset": [[79, 90], ["env.KnapsackEnvironmentV2.generate_batch", "env.KnapsackEnvironmentV2.generate_masks", "env.KnapsackEnvironmentV2.state"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.state": [[91, 101], ["numpy.expand_dims", "env.KnapsackEnvironmentV2.batch.copy", "env.KnapsackEnvironmentV2.bin_net_mask.copy", "env.KnapsackEnvironmentV2.mha_used_mask.copy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.step": [[102, 186], ["tensorflow.fill", "tensorflow.range", "env.KnapsackEnvironmentV2.batch.copy", "environment.custom.knapsack_v2.misc.utils.compute_remaining_resources", "environment.custom.knapsack_v2.misc.utils.round_half_up", "tensorflow.cast", "numpy.all", "env.KnapsackEnvironmentV2.rewarder.compute_reward", "tensorflow.reshape", "env.KnapsackEnvironmentV2.batch.copy", "tensorflow.equal", "tensorflow.reshape", "env.KnapsackEnvironmentV2.bin_net_mask.copy", "env.KnapsackEnvironmentV2.resource_net_mask.copy", "env.KnapsackEnvironmentV2.mha_used_mask.copy", "env.KnapsackEnvironmentV2.place_items", "numpy.expand_dims", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.compute_remaining_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.place_items"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.generate_dataset": [[187, 205], ["tensorflow.concat", "tensorflow.cast", "tensorflow.random.uniform", "tensorflow.random.uniform"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.generate_batch": [[206, 269], ["numpy.zeros", "tensorflow.zeros", "tensorflow.concat", "tensorflow.cast", "tensorflow.random.uniform", "tensorflow.concat", "tensorflow.cast", "range", "env.KnapsackEnvironmentV2.build_history", "tensorflow.cast", "tensorflow.random.uniform", "tensorflow.random.uniform", "tensorflow.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.build_history"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.generate_masks": [[270, 294], ["numpy.zeros", "numpy.ones", "numpy.zeros_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.sample_action": [[295, 317], ["tensorflow.range", "tensorflow.fill", "numpy.expand_dims", "env.KnapsackEnvironmentV2.build_feasible_mask", "numpy.random.uniform", "tensorflow.nn.softmax", "tensorflow_probability.distributions.Categorical", "tensorflow_probability.distributions.Categorical.sample"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.add_stats_to_agent_config": [[318, 333], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.set_testing_mode": [[334, 351], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.build_history": [[352, 369], ["enumerate", "enumerate", "history.append", "nodes.append", "environment.custom.knapsack_v2.bin.Bin"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.place_items": [[370, 383], ["enumerate", "environment.custom.knapsack_v2.item.Item", "node.insert_item"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.build_feasible_mask": [[384, 409], ["tensorflow.tile", "tensorflow.less", "tensorflow.cast", "tensorflow.maximum", "feasible_mask.numpy.numpy.numpy", "numpy.all"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.print_history": [[410, 419], ["range", "print", "print", "node.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.store_dataset": [[420, 422], ["numpy.savetxt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env.KnapsackEnvironmentV2.load_dataset": [[423, 425], ["numpy.loadtxt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.reward_test.GreedyRewardTest.test_greedy_reward": [[11, 65], ["numpy.full", "environment.custom.knapsack_v2.reward.GreedyReward", "numpy.array", "numpy.array.copy", "environment.custom.knapsack_v2.reward.GreedyReward.compute_reward", "numpy.array", "reward_test.GreedyRewardTest.assertEqual", "environment.custom.knapsack_v2.reward.GreedyReward.compute_reward.numpy().tolist", "numpy.array.tolist", "environment.custom.knapsack_v2.reward.GreedyReward.compute_reward.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], ["from", "environment", ".", "custom", ".", "resource", ".", "reward", "import", "GreedyReward", "\n", "from", "environment", ".", "custom", ".", "resource", ".", "penalty", "import", "GreedyPenalty", "\n", "from", "environment", ".", "custom", ".", "resource", ".", "utils", "import", "bins_eos_checker", "\n", "\n", "class", "TestItem", "(", "unittest", ".", "TestCase", ")", ":", "\n", "\n", "    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "opts", "=", "{", "\n", "\"CPU_misplace_penalty\"", ":", "5", ",", "\n", "\"RAM_misplace_penalty\"", ":", "10", ",", "\n", "\"MEM_misplace_penalty\"", ":", "15", "\n", "}", "\n", "\n", "self", ".", "EOS_CODE", "=", "0", "\n", "resource_normalization_factor", "=", "1", "\n", "\n", "self", ".", "penalizer", "=", "GreedyPenalty", "(", "\n", "opts", ",", "self", ".", "EOS_CODE", ",", "resource_normalization_factor", "\n", ")", "\n", "\n", "opts", "=", "{", "\n", "\"reward_per_level\"", ":", "[", "10", ",", "20", "]", ",", "\n", "\"misplace_penalty_factor\"", ":", "0.5", ",", "\n", "\"correct_place_factor\"", ":", "1", ",", "\n", "\"premium_rejected\"", ":", "-", "20", ",", "\n", "\"free_rejected\"", ":", "0", "\n", "}", "\n", "\n", "self", ".", "rewarder", "=", "GreedyReward", "(", "\n", "opts", ",", "self", ".", "penalizer", ",", "self", ".", "EOS_CODE", "\n", ")", "\n", "\n", "", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "expected_reward_per_level", "=", "[", "10", ",", "20", "]", "\n", "misplace_penalty_factor", "=", "0.5", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "rewarder", ".", "reward_per_level", ",", "expected_reward_per_level", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "rewarder", ".", "misplace_penalty_factor", ",", "misplace_penalty_factor", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "self", ".", "rewarder", ".", "penalizer", ")", "\n", "\n", "", "def", "test_reward_UNpenalized", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin_test.TestBin.setUp": [[11, 17], ["numpy.array", "environment.custom.knapsack_v2.bin.Bin"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "batch_id", "=", "0", "\n", "id", "=", "0", "# EOS NODE", "\n", "self", ".", "node_representation", "=", "np", ".", "array", "(", "[", "0.9", ",", "0.0", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "self", ".", "node", "=", "Bin", "(", "batch_id", ",", "id", ",", "self", ".", "node_representation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin_test.TestBin.test_constructor": [[18, 39], ["bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.node.capacity.tolist", "bin_test.TestBin.node.current_load.tolist", "len", "len", "bin_test.TestBin.node.load_history[].tolist", "bin_test.TestBin.node_representation[].tolist", "bin_test.TestBin.node_representation[].tolist", "bin_test.TestBin.node_representation[].tolist"], "methods", ["None"], ["", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "node", ".", "batch_id", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "node", ".", "id", ",", "0", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "capacity", ".", "tolist", "(", ")", ",", "\n", "[", "self", ".", "node_representation", "[", "0", "]", ".", "tolist", "(", ")", "]", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "current_load", ".", "tolist", "(", ")", ",", "\n", "[", "self", ".", "node_representation", "[", "1", "]", ".", "tolist", "(", ")", "]", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "item_list", ")", ",", "0", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "load_history", ")", ",", "1", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "load_history", "[", "0", "]", ".", "tolist", "(", ")", ",", "\n", "[", "self", ".", "node_representation", "[", "1", "]", ".", "tolist", "(", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin_test.TestBin.test_insert_req_EOS_node": [[41, 65], ["numpy.array", "environment.custom.knapsack_v2.item.Item", "bin_test.TestBin.node.insert_item", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertAlmostEqual", "len", "bin_test.TestBin.node.capacity.tolist", "bin_test.TestBin.node.current_load.tolist", "bin_test.TestBin.node.current_value.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item"], ["", "def", "test_insert_req_EOS_node", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "id", "=", "1", "\n", "req_representation", "=", "np", ".", "array", "(", "[", "0.3", ",", "0.2", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "req", "=", "Item", "(", "\n", "batch_id", ",", "id", ",", "req_representation", "\n", ")", "\n", "\n", "self", ".", "node", ".", "insert_item", "(", "req", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "item_list", ")", ",", "1", ")", "\n", "\n", "# EOS Bin is not updated", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "capacity", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "0", "]", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "current_load", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "1", "]", "\n", ")", "\n", "\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "self", ".", "node", ".", "current_value", ".", "tolist", "(", ")", "[", "0", "]", ",", "0.2", ",", "precision", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin_test.TestBin.test_insert_req_regular_node": [[67, 98], ["numpy.array", "environment.custom.knapsack_v2.item.Item", "bin_test.TestBin.node.insert_item", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertAlmostEqual", "bin_test.TestBin.assertAlmostEqual", "bin_test.TestBin.assertAlmostEqual", "len", "bin_test.TestBin.node.capacity.tolist", "bin_test.TestBin.node.current_load.tolist", "bin_test.TestBin.node.current_value.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item"], ["", "def", "test_insert_req_regular_node", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "id", "=", "1", "\n", "req_representation", "=", "np", ".", "array", "(", "[", "0.3", ",", "0.7", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "req", "=", "Item", "(", "\n", "batch_id", ",", "id", ",", "req_representation", "\n", ")", "\n", "# Change the node ID to a non EOS", "\n", "self", ".", "node", ".", "id", "=", "1", "\n", "\n", "self", ".", "node", ".", "insert_item", "(", "req", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "item_list", ")", ",", "1", ")", "\n", "\n", "# EOS Node is not updated", "\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "self", ".", "node", ".", "capacity", ".", "tolist", "(", ")", "[", "0", "]", ",", "\n", "self", ".", "node_representation", "[", "0", "]", ",", "\n", "precision", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "self", ".", "node", ".", "current_load", ".", "tolist", "(", ")", "[", "0", "]", ",", "\n", "self", ".", "node_representation", "[", "1", "]", "+", "req_representation", "[", "0", "]", ",", "\n", "precision", "\n", ")", "\n", "\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "self", ".", "node", ".", "current_value", ".", "tolist", "(", ")", "[", "0", "]", ",", "0.7", ",", "precision", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin_test.TestBin.test_reset": [[101, 141], ["numpy.array", "environment.custom.knapsack_v2.item.Item", "bin_test.TestBin.assertEqual", "bin_test.TestBin.node.insert_item", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertAlmostEqual", "bin_test.TestBin.node.reset", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertEqual", "bin_test.TestBin.assertAlmostEqual", "len", "len", "len", "bin_test.TestBin.node.capacity.tolist", "bin_test.TestBin.node.current_load.tolist", "bin_test.TestBin.node.current_value.tolist", "bin_test.TestBin.node.current_value.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset"], ["", "def", "test_reset", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "id", "=", "1", "\n", "req_representation", "=", "np", ".", "array", "(", "[", "0.3", ",", "0.2", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "req", "=", "Item", "(", "\n", "batch_id", ",", "id", ",", "req_representation", "\n", ")", "\n", "\n", "# Change the node ID to a non EOS", "\n", "self", ".", "node", ".", "id", "=", "1", "\n", "\n", "# Initially there's no reqs", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "item_list", ")", ",", "0", ")", "\n", "\n", "self", ".", "node", ".", "insert_item", "(", "req", ")", "\n", "\n", "# Should be one", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "item_list", ")", ",", "1", ")", "\n", "\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "self", ".", "node", ".", "current_value", ".", "tolist", "(", ")", "[", "0", "]", ",", "0.2", ",", "precision", "\n", ")", "\n", "\n", "self", ".", "node", ".", "reset", "(", ")", "\n", "\n", "# Reset. Back to zero", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "item_list", ")", ",", "0", ")", "\n", "\n", "# Back to original values", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "capacity", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "0", "]", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "current_load", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "1", "]", "\n", ")", "\n", "\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "self", ".", "node", ".", "current_value", ".", "tolist", "(", ")", "[", "0", "]", ",", "0.0", ",", "precision", "\n", ")", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.setUp": [[12, 46], ["environment.custom.knapsack_v2.env.KnapsackEnvironmentV2"], "methods", ["None"], ["class", "TestKnapsackEnv", "(", "unittest", ".", "TestCase", ")", ":", "\n", "\n", "    ", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "1", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "4", ",", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "6", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "7", ",", "\n", "\"max_backpack_capacity\"", ":", "8", "\n", "}", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "batch_size", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "num_items", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "num_backpacks", ",", "1", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_item_value", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_item_value", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_item_weight", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_item_weight", ",", "6", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_backpack_capacity", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_backpack_capacity", ",", "8", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "tensor_size", ",", "4", ")", "# 2 Items + 1 Backpack + 1 EOS Backpack", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "problem_list", ")", ",", "2", ")", "\n", "\n", "", "def", "test_generate_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_constructor": [[47, 55], ["env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertIsNotNone", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual"], "methods", ["None"], ["\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_shapes": [[56, 64], ["env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual"], "methods", ["None"], ["\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "prob_list", "=", "env", ".", "generate", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "prob_list", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_reset": [[65, 72], ["env_test.TestKnapsackEnvironmentV2.env.reset", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset"], ["sub_prob_1", "=", "prob_list", "[", "0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "sub_prob_1", "[", "'backpacks'", "]", ")", ",", "3", ")", "# 2 normal + 1 EOS backpack", "\n", "self", ".", "assertEqual", "(", "len", "(", "sub_prob_1", "[", "'items'", "]", ")", ",", "2", ")", "# 2 normal + 1 EOS backpack", "\n", "\n", "", "def", "test_state_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_initial_masks": [[73, 94], ["numpy.array", "numpy.array", "env_test.TestKnapsackEnvironmentV2.env.state", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "bin_net_mask.tolist", "numpy.array.tolist", "mha_mask.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], ["\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "actual_state", ",", "_", ",", "_", "=", "env", ".", "state", "(", ")", "\n", "\n", "# Should be:", "\n", "# 2 -> batch size", "\n", "# 5 -> 1 EOS backpack + 2 normal backpacks + 2 items", "\n", "# 2 -> features", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_batch_values": [[96, 126], ["env_test.TestKnapsackEnvironmentV2.env.state", "env_test.TestKnapsackEnvironmentV2.assertTrue", "env_test.TestKnapsackEnvironmentV2.assertTrue", "env_test.TestKnapsackEnvironmentV2.assertTrue", "env_test.TestKnapsackEnvironmentV2.assertTrue", "env_test.TestKnapsackEnvironmentV2.assertTrue", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], ["[", "10", ",", "0", "]", ",", "# Backpack 1", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 2", "\n", "[", "5", ",", "3", "]", ",", "# Item 0", "\n", "[", "5", ",", "3", "]", "# Item 1", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# EOS Backpack", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 1", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 2", "\n", "[", "5", ",", "3", "]", ",", "# Item 0", "\n", "[", "5", ",", "3", "]", "# Item 1", "\n", "]", "\n", "]", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "", "def", "test_compute_masks_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_testing_mode": [[128, 170], ["env_test.TestKnapsackEnvironmentV2.env.set_testing_mode", "env_test.TestKnapsackEnvironmentV2.env.reset", "env_test.TestKnapsackEnvironmentV2.env.state", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "[].get_tensor_rep", "[].get_tensor_rep", "[].get_tensor_rep", "[].get_tensor_rep", "numpy.array", "[].get_tensor_rep", "[].get_tensor_rep", "[].get_tensor_rep", "[].get_tensor_rep", "numpy.array", "numpy.array", "env_test.TestKnapsackEnvironmentV2.assertEqual", "len", "len", "len", "nodes.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], ["actual_backpacks_masks", ",", "actual_items_masks", "=", "env", ".", "compute_masks", "(", ")", "\n", "\n", "# Test masks shape", "\n", "self", ".", "assertEqual", "(", "actual_backpacks_masks", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_items_masks", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_backpacks_masks", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_items_masks", "==", "expected_item_masks", ")", ")", "\n", "\n", "", "def", "test_step_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "action", "=", "[", "\n", "[", "1", ",", "3", "]", ",", "# Problem 0: Place item 0 (index 3) at backpack 1 (index 1)", "\n", "[", "2", ",", "4", "]", "# Problem 1: Place item 1 (index 4) at backpack 2 (index 2)", "\n", "]", "\n", "\n", "actual_state", ",", "actual_rewards", ",", "actual_dones", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_sample_action": [[172, 182], ["env_test.TestKnapsackEnvironmentV2.env.sample_action", "env_test.TestKnapsackEnvironmentV2.assertTrue", "env_test.TestKnapsackEnvironmentV2.assertEqual", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action"], ["self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_rewards", ".", "shape", ",", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_dones", ".", "shape", ",", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'backpack_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'item_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'num_items_to_place'", "]", ",", "2", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Backpack's value is equal to the selected item", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_step": [[183, 310], ["env_test.TestKnapsackEnvironmentV2.env.set_testing_mode", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "env_test.TestKnapsackEnvironmentV2.env.build_history", "environment.custom.knapsack_v2.misc.utils.compute_remaining_resources", "env_test.TestKnapsackEnvironmentV2.env.step", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.assertEqual", "numpy.array.tolist", "next_state.tolist", "numpy.array.tolist", "next_resource_mask.tolist", "numpy.array.tolist", "next_bin_mask.tolist", "numpy.array.tolist", "next_mha_mask.tolist", "len", "len", "len", "len", "fake_selected_reqs[].tolist", "len", "len", "len", "len", "fake_selected_reqs[].tolist", "instance_0_actual_req.weight.tolist", "instance_0_actual_req.value.tolist", "instance_1_actual_req.weight.tolist", "instance_1_actual_req.value.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.build_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.compute_remaining_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], ["[", "10", ",", "0", "]", ",", "# ", "\n", "[", "5", ",", "3", "]", ",", "# Item selected", "\n", "[", "5", ",", "3", "]", "# ", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# ", "\n", "[", "5", ",", "3", "]", "# Item selected", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "expected_rewards", "=", "[", "\n", "[", "3", "]", ",", "\n", "[", "3", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_rewards", "==", "expected_rewards", ")", ")", "\n", "\n", "expected_dones", "=", "[", "\n", "[", "False", "]", ",", "\n", "[", "False", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_dones", "==", "expected_dones", ")", ")", "\n", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'backpack_net_mask'", "]", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'item_net_mask'", "]", "==", "expected_item_masks", ")", ")", "\n", "\n", "", "def", "test_multiple_steps_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "action_list", "=", "np", ".", "array", "(", "[", "\n", "# 1 Step", "\n", "[", "\n", "[", "1", ",", "3", "]", ",", "# Problem 0: Place item 0 (index 3) at backpack 1 (index 1)", "\n", "[", "2", ",", "4", "]", "# Problem 1: Place item 1 (index 4) at backpack 2 (index 2)", "\n", "]", ",", "\n", "# 2 Step", "\n", "[", "\n", "[", "2", ",", "4", "]", ",", "# Problem 0: Place item 0 (index 3) at EOS backpack (index 0)", "\n", "[", "0", ",", "3", "]", "# Problem 1: Place item 1 (index 4) at EOS backpack (index 0)", "\n", "]", "\n", "]", ")", "\n", "\n", "actual_state", ",", "actual_rewards", ",", "actual_dones", ",", "info", "=", "env", ".", "multiple_steps", "(", "action_list", ")", "\n", "\n", "# Test data shapes", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_rewards", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_dones", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'backpack_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'item_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'num_items_to_place'", "]", ",", "2", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Step 1: Backpack's value is equal to the selected item", "\n", "[", "10", ",", "3", "]", ",", "# Step 2: Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# Step 1: Item selected", "\n", "[", "5", ",", "3", "]", "# Step 2: Item selected", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# Step 2: Backpack's value is equal to the selected item", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Step 1: Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# Step 2: Item selected", "\n", "[", "5", ",", "3", "]", "# Step 1: Item selected", "\n", "]", "\n", "]", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "expected_rewards", "=", "[", "\n", "[", "\n", "3.0", ",", "# Prob 1: Step 1", "\n", "3.0", "# Prob 1: Step 2", "\n", "]", ",", "\n", "[", "\n", "3.0", ",", "# Prob 2: Step 1", "\n", "0", "# Prob 2: Step 1", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_rewards", "==", "expected_rewards", ")", ")", "\n", "\n", "expected_dones", "=", "[", "\n", "[", "\n", "0", ",", "# Prob 1: Step 1: Not Done -> 1 is still pending", "\n", "1", "# Prob 1: Step 2: Done -> All items are placed", "\n", "]", ",", "\n", "[", "\n", "0", ",", "# Prob 1: Step 1: Not Done -> 1 is still pending", "\n", "1", "# Prob 1: Step 2: Done -> All items are placed", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_dones", "==", "expected_dones", ")", ")", "\n", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_is_done": [[312, 324], ["env_test.TestKnapsackEnvironmentV2.env.reset", "env_test.TestKnapsackEnvironmentV2.env.sample_action", "env_test.TestKnapsackEnvironmentV2.env.step", "env_test.TestKnapsackEnvironmentV2.assertFalse", "env_test.TestKnapsackEnvironmentV2.env.sample_action", "env_test.TestKnapsackEnvironmentV2.env.step", "env_test.TestKnapsackEnvironmentV2.assertTrue"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], ["self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'backpack_net_mask'", "]", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'item_net_mask'", "]", "==", "expected_item_masks", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_build_feasible_mask_ALL_SHOULD_be_unmasked": [[325, 360], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestKnapsackEnvironmentV2.env.build_feasible_mask", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_build_feasible_mask_ALL_SHOULD_be_masked": [[362, 397], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestKnapsackEnvironmentV2.env.build_feasible_mask", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_build_feasible_mask_2nd_and_3rd_SHOULD_be_unmasked": [[399, 434], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestKnapsackEnvironmentV2.env.build_feasible_mask", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_build_feasible_mask_SHOULD_mask_2_nodes": [[436, 471], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestKnapsackEnvironmentV2.env.build_feasible_mask", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_build_feasible_mask_SHOULD_mask_2_nodes_single_resource_overloaded": [[473, 508], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestKnapsackEnvironmentV2.env.build_feasible_mask", "env_test.TestKnapsackEnvironmentV2.assertEqual", "env_test.TestKnapsackEnvironmentV2.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.env_test.TestKnapsackEnvironmentV2.test_add_stats_to_agent_config": [[510, 522], ["env_test.TestKnapsackEnvironmentV2.env.add_stats_to_agent_config", "env_test.TestKnapsackEnvironmentV2.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.add_stats_to_agent_config"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.utils_test.TestUtils.test_round_ops": [[11, 35], ["numpy.array", "numpy.array", "numpy.array", "environment.custom.knapsack_v2.misc.utils.compute_remaining_resources", "utils_test.TestUtils.assertEqual", "environment.custom.knapsack_v2.misc.utils.compute_remaining_resources.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.compute_remaining_resources"], ["class", "TestUtils", "(", "unittest", ".", "TestCase", ")", ":", "\n", "\n", "    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "EOS_CODE", "=", "0", "\n", "\n", "\n", "", "def", "test_bins_full_checker", "(", "self", ")", ":", "\n", "        ", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "num_features", "=", "5", "\n", "excepted_result", "=", "[", "0", ",", "0", ",", "1", "]", "\n", "\n", "actual_result", "=", "bins_full_checker", "(", "feasible_bin_mask", ",", "num_features", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "excepted_result", ")", "\n", "\n", "", "def", "test_bins_full_checker", "(", "self", ")", ":", "\n", "        ", "bins", "=", "np", ".", "array", "(", "[", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "2.", ",", "5.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "10.", ",", "10.", ",", "1.", ",", "1.", "]", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestORToolsHeuristics.setUp": [[10, 34], ["numpy.array", "environment.custom.knapsack_v2.heuristic.factory.ORTools"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "\n", "        ", "heuristic_opts", "=", "{", "\n", "\"time_limit_ms\"", ":", "1000", ",", "\n", "\"num_threads\"", ":", "1", "\n", "}", "\n", "\n", "self", ".", "dummy_state", "=", "np", ".", "array", "(", "[", "\n", "[", "\n", "[", "-", "2.0", ",", "-", "2.0", "]", ",", "\n", "[", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.5", ",", "0.0", "]", ",", "\n", "[", "0.2", ",", "0.1", "]", ",", "\n", "[", "0.3", ",", "0.5", "]", ",", "\n", "[", "0.1", ",", "0.4", "]", ",", "\n", "[", "0.9", ",", "0.4", "]", ",", "\n", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "node_sample_size", "=", "3", "\n", "\n", "self", ".", "solver", "=", "ORTools", "(", "\n", "node_sample_size", ",", "\n", "heuristic_opts", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestORToolsHeuristics.test_parse_bins": [[36, 68], ["heuristic_test.TestORToolsHeuristics.solver.parse_bins", "heuristic_test.TestORToolsHeuristics.assertEqual", "numpy.array", "heuristic_test.TestORToolsHeuristics.assertEqual", "numpy.array", "heuristic_test.TestORToolsHeuristics.assertEqual", "numpy.array", "heuristic_test.TestORToolsHeuristics.assertEqual", "len", "bin_list[].get_tensor_rep().tolist", "numpy.array.tolist", "bin_list[].get_tensor_rep().tolist", "numpy.array.tolist", "bin_list[].get_tensor_rep().tolist", "numpy.array.tolist", "bin_list[].get_tensor_rep", "bin_list[].get_tensor_rep", "bin_list[].get_tensor_rep"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_bins", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], ["", "def", "test_parse_bins", "(", "self", ")", ":", "\n", "        ", "expected_num_bin", "=", "3", "\n", "\n", "bin_list", "=", "self", ".", "solver", ".", "parse_bins", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "bin_list", ")", ",", "\n", "expected_num_bin", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "-", "2", ",", "-", "2", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "0.1", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "0.5", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "2", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestORToolsHeuristics.test_parse_resources": [[70, 110], ["heuristic_test.TestORToolsHeuristics.solver.parse_items", "heuristic_test.TestORToolsHeuristics.assertEqual", "numpy.array", "heuristic_test.TestORToolsHeuristics.assertEqual", "numpy.array", "heuristic_test.TestORToolsHeuristics.assertEqual", "numpy.array", "heuristic_test.TestORToolsHeuristics.assertEqual", "numpy.array", "heuristic_test.TestORToolsHeuristics.assertEqual", "len", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_items", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], ["", "def", "test_parse_resources", "(", "self", ")", ":", "\n", "        ", "expected_num_resources", "=", "4", "\n", "\n", "resource_list", "=", "self", ".", "solver", ".", "parse_items", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "resource_list", ")", ",", "\n", "expected_num_resources", "\n", ")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.2", ",", "0.1", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.3", ",", "0.5", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_third_item", "=", "np", ".", "array", "(", "\n", "[", "0.1", ",", "0.4", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "2", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_third_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_fourth_item", "=", "np", ".", "array", "(", "\n", "[", "0.9", ",", "0.4", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "3", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_fourth_item", ".", "tolist", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestORToolsHeuristics.test_solver": [[112, 151], ["heuristic_test.TestORToolsHeuristics.solver.solve", "environment.custom.knapsack_v2.misc.utils.compute_stats", "heuristic_test.TestORToolsHeuristics.assertAlmostEqual", "heuristic_test.TestORToolsHeuristics.assertEqual", "heuristic_test.TestORToolsHeuristics.assertEqual", "heuristic_test.TestORToolsHeuristics.assertEqual", "heuristic_test.TestORToolsHeuristics.assertEqual", "heuristic_test.TestORToolsHeuristics.assertEqual", "heuristic_test.TestORToolsHeuristics.assertEqual", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_stats"], ["", "def", "test_solver", "(", "self", ")", ":", "\n", "        ", "self", ".", "solver", ".", "solve", "(", "self", ".", "dummy_state", ")", "\n", "\n", "\n", "actual_reward", ",", "actual_empty_nodes", ",", "actual_num_rejected_items", ",", "actual_rejected_value", "=", "compute_stats", "(", "self", ".", "solver", ".", "solution", ")", "\n", "\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "actual_reward", ",", "1.0", ",", "precision", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "actual_empty_nodes", ",", "0", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "actual_num_rejected_items", ",", "1", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "actual_rejected_value", ",", "0.4", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "solver", ".", "solution", "[", "0", "]", ".", "item_list", ")", ",", "\n", "1", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "solver", ".", "solution", "[", "1", "]", ".", "item_list", ")", ",", "\n", "1", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "solver", ".", "solution", "[", "2", "]", ".", "item_list", ")", ",", "\n", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestWasteReductionHeuristic.setUp": [[154, 178], ["numpy.array", "environment.custom.knapsack_v2.heuristic.factory.WasteReductionHeuristic"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "\n", "        ", "heuristic_opts", "=", "{", "\n", "\"item_sort_descending\"", ":", "True", ",", "\n", "\"bin_sort_descending\"", ":", "False", "\n", "}", "\n", "\n", "self", ".", "dummy_state", "=", "np", ".", "array", "(", "[", "\n", "[", "\n", "[", "-", "2.0", ",", "-", "2.0", "]", ",", "\n", "[", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.5", ",", "0.0", "]", ",", "\n", "[", "0.2", ",", "0.1", "]", ",", "\n", "[", "0.3", ",", "0.5", "]", ",", "\n", "[", "0.1", ",", "0.4", "]", ",", "\n", "[", "0.9", ",", "0.4", "]", ",", "\n", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "node_sample_size", "=", "3", "\n", "\n", "self", ".", "solver", "=", "WasteReductionHeuristic", "(", "\n", "node_sample_size", ",", "\n", "heuristic_opts", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestWasteReductionHeuristic.test_parse_bins": [[180, 212], ["heuristic_test.TestWasteReductionHeuristic.solver.parse_bins", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "numpy.array", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "numpy.array", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "numpy.array", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "len", "bin_list[].get_tensor_rep().tolist", "numpy.array.tolist", "bin_list[].get_tensor_rep().tolist", "numpy.array.tolist", "bin_list[].get_tensor_rep().tolist", "numpy.array.tolist", "bin_list[].get_tensor_rep", "bin_list[].get_tensor_rep", "bin_list[].get_tensor_rep"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_bins", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], ["", "def", "test_parse_bins", "(", "self", ")", ":", "\n", "        ", "expected_num_bin", "=", "3", "\n", "\n", "bin_list", "=", "self", ".", "solver", ".", "parse_bins", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "bin_list", ")", ",", "\n", "expected_num_bin", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "-", "2", ",", "-", "2", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "0.1", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "0.5", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "2", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestWasteReductionHeuristic.test_parse_resources": [[214, 254], ["heuristic_test.TestWasteReductionHeuristic.solver.parse_items", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "numpy.array", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "numpy.array", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "numpy.array", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "numpy.array", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "len", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_items", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], ["", "def", "test_parse_resources", "(", "self", ")", ":", "\n", "        ", "expected_num_resources", "=", "4", "\n", "\n", "resource_list", "=", "self", ".", "solver", ".", "parse_items", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "resource_list", ")", ",", "\n", "expected_num_resources", "\n", ")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.2", ",", "0.1", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.3", ",", "0.5", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_third_item", "=", "np", ".", "array", "(", "\n", "[", "0.1", ",", "0.4", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "2", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_third_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_fourth_item", "=", "np", ".", "array", "(", "\n", "[", "0.9", ",", "0.4", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "3", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_fourth_item", ".", "tolist", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestWasteReductionHeuristic.test_solver": [[256, 295], ["heuristic_test.TestWasteReductionHeuristic.solver.solve", "environment.custom.knapsack_v2.misc.utils.compute_stats", "heuristic_test.TestWasteReductionHeuristic.assertAlmostEqual", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "heuristic_test.TestWasteReductionHeuristic.assertEqual", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_stats"], ["", "def", "test_solver", "(", "self", ")", ":", "\n", "        ", "self", ".", "solver", ".", "solve", "(", "self", ".", "dummy_state", ")", "\n", "\n", "\n", "actual_reward", ",", "actual_empty_nodes", ",", "actual_num_rejected_items", ",", "actual_rejected_value", "=", "compute_stats", "(", "self", ".", "solver", ".", "solution", ")", "\n", "\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "actual_reward", "[", "0", "]", ",", "1.0", ",", "precision", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "actual_empty_nodes", ",", "0", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "actual_num_rejected_items", ",", "1", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "actual_rejected_value", ",", "0.4", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "solver", ".", "solution", "[", "0", "]", ".", "item_list", ")", ",", "\n", "1", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "solver", ".", "solution", "[", "1", "]", ".", "item_list", ")", ",", "\n", "1", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "solver", ".", "solution", "[", "2", "]", ".", "item_list", ")", ",", "\n", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestRandomHeuristic.setUp": [[298, 319], ["numpy.array", "environment.custom.knapsack_v2.heuristic.factory.RandomHeuristic"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "\n", "        ", "heuristic_opts", "=", "{", "}", "\n", "\n", "self", ".", "dummy_state", "=", "np", ".", "array", "(", "[", "\n", "[", "\n", "[", "-", "2.0", ",", "-", "2.0", "]", ",", "\n", "[", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.5", ",", "0.0", "]", ",", "\n", "[", "0.2", ",", "0.1", "]", ",", "\n", "[", "0.3", ",", "0.5", "]", ",", "\n", "[", "0.1", ",", "0.4", "]", ",", "\n", "[", "0.9", ",", "0.4", "]", ",", "\n", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "node_sample_size", "=", "3", "\n", "\n", "self", ".", "solver", "=", "RandomHeuristic", "(", "\n", "node_sample_size", ",", "\n", "heuristic_opts", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestRandomHeuristic.test_parse_bins": [[321, 353], ["heuristic_test.TestRandomHeuristic.solver.parse_bins", "heuristic_test.TestRandomHeuristic.assertEqual", "numpy.array", "heuristic_test.TestRandomHeuristic.assertEqual", "numpy.array", "heuristic_test.TestRandomHeuristic.assertEqual", "numpy.array", "heuristic_test.TestRandomHeuristic.assertEqual", "len", "bin_list[].get_tensor_rep().tolist", "numpy.array.tolist", "bin_list[].get_tensor_rep().tolist", "numpy.array.tolist", "bin_list[].get_tensor_rep().tolist", "numpy.array.tolist", "bin_list[].get_tensor_rep", "bin_list[].get_tensor_rep", "bin_list[].get_tensor_rep"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_bins", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], ["", "def", "test_parse_bins", "(", "self", ")", ":", "\n", "        ", "expected_num_bin", "=", "3", "\n", "\n", "bin_list", "=", "self", ".", "solver", ".", "parse_bins", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "bin_list", ")", ",", "\n", "expected_num_bin", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "-", "2", ",", "-", "2", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "0.1", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "0.5", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "2", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestRandomHeuristic.test_parse_resources": [[355, 395], ["heuristic_test.TestRandomHeuristic.solver.parse_items", "heuristic_test.TestRandomHeuristic.assertEqual", "numpy.array", "heuristic_test.TestRandomHeuristic.assertEqual", "numpy.array", "heuristic_test.TestRandomHeuristic.assertEqual", "numpy.array", "heuristic_test.TestRandomHeuristic.assertEqual", "numpy.array", "heuristic_test.TestRandomHeuristic.assertEqual", "len", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_items", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], ["", "def", "test_parse_resources", "(", "self", ")", ":", "\n", "        ", "expected_num_resources", "=", "4", "\n", "\n", "resource_list", "=", "self", ".", "solver", ".", "parse_items", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "resource_list", ")", ",", "\n", "expected_num_resources", "\n", ")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.2", ",", "0.1", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.3", ",", "0.5", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_third_item", "=", "np", ".", "array", "(", "\n", "[", "0.1", ",", "0.4", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "2", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_third_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_fourth_item", "=", "np", ".", "array", "(", "\n", "[", "0.9", ",", "0.4", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "3", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_fourth_item", ".", "tolist", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.heuristic_test.TestRandomHeuristic.test_solver": [[397, 409], ["heuristic_test.TestRandomHeuristic.solver.solve", "environment.custom.knapsack_v2.misc.utils.compute_stats", "heuristic_test.TestRandomHeuristic.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_stats"], ["", "def", "test_solver", "(", "self", ")", ":", "\n", "        ", "self", ".", "solver", ".", "solve", "(", "self", ".", "dummy_state", ")", "\n", "\n", "\n", "actual_reward", ",", "actual_empty_nodes", ",", "actual_num_rejected_items", ",", "actual_rejected_value", "=", "compute_stats", "(", "self", ".", "solver", ".", "solution", ")", "\n", "\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "actual_reward", "[", "0", "]", "+", "actual_rejected_value", "[", "0", "]", ",", "1.4", ",", "precision", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.or_tools.ORTools.__init__": [[19, 37], ["environment.custom.knapsack_v2.heuristic.base_heuristic.BaseHeuristic.__init__", "ortools.linear_solver.pywraplp.Solver", "or_tools.ORTools.solver.SetTimeLimit", "or_tools.ORTools.solver.SetNumThreads", "or_tools.ORTools.generate_name"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_greedy_critical.CPLEXGreedyCritical.generate_name"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ":", "int", ",", "\n", "opts", ":", "dict", "\n", ")", ":", "\n", "        ", "super", "(", "ORTools", ",", "self", ")", ".", "__init__", "(", "num_nodes", ")", "\n", "\n", "self", ".", "time_limit_ms", ":", "int", "=", "opts", "[", "'time_limit_ms'", "]", "\n", "self", ".", "num_threads", ":", "int", "=", "opts", "[", "'num_threads'", "]", "\n", "\n", "self", ".", "solver", "=", "pywraplp", ".", "Solver", "(", "'multiple_knapsack_mip'", ",", "\n", "pywraplp", ".", "Solver", ".", "CBC_MIXED_INTEGER_PROGRAMMING", ")", "\n", "\n", "# Time limit info: https://developers.google.com/optimization/lp/glop#setting-time-limits", "\n", "self", ".", "solver", ".", "SetTimeLimit", "(", "self", ".", "time_limit_ms", ")", "\n", "self", ".", "solver", ".", "SetNumThreads", "(", "self", ".", "num_threads", ")", "\n", "\n", "\n", "self", ".", "generate_name", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.or_tools.ORTools.generate_name": [[38, 40], ["None"], "methods", ["None"], ["", "def", "generate_name", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "f'OR_Tools_time_limit_{self.time_limit_ms}'", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.or_tools.ORTools.solve": [[41, 120], ["or_tools.ORTools.parse_bins", "or_tools.ORTools.pop", "or_tools.ORTools.parse_items", "or_tools.ORTools.parse_data", "or_tools.ORTools.solver.Objective", "or_tools.ORTools.SetMaximization", "or_tools.ORTools.solver.Solve", "numpy.zeros", "enumerate", "or_tools.ORTools.Value", "or_tools.ORTools.solver.Add", "or_tools.ORTools.solver.Add", "or_tools.ORTools.solver.IntVar", "or_tools.ORTools.SetCoefficient", "len", "x[].solution_value", "bin_list[].insert_item", "or_tools.ORTools.pop.insert_item", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_bins", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_items", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.or_tools.ORTools.parse_data", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item"], ["", "def", "solve", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "bin_list", "=", "self", ".", "parse_bins", "(", "state", ")", "\n", "EOS_NODE", "=", "bin_list", ".", "pop", "(", "0", ")", "\n", "item_list", "=", "self", ".", "parse_items", "(", "state", ")", "\n", "\n", "\n", "data", "=", "self", ".", "parse_data", "(", "state", ")", "\n", "# Variables", "\n", "# x[i, j] = 1 if item i is packed in bin j.", "\n", "x", "=", "{", "}", "\n", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "            ", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "                ", "x", "[", "(", "i", ",", "j", ")", "]", "=", "self", ".", "solver", ".", "IntVar", "(", "0", ",", "1", ",", "'x_%i_%i'", "%", "(", "i", ",", "j", ")", ")", "\n", "\n", "# Constraints", "\n", "# Each item can be in at most one bin.", "\n", "", "", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "            ", "self", ".", "solver", ".", "Add", "(", "sum", "(", "x", "[", "i", ",", "j", "]", "for", "j", "in", "data", "[", "'bins'", "]", ")", "<=", "1", ")", "\n", "# The amount packed in each bin cannot exceed its capacity.", "\n", "", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "            ", "self", ".", "solver", ".", "Add", "(", "\n", "sum", "(", "x", "[", "(", "i", ",", "j", ")", "]", "*", "data", "[", "'weights'", "]", "[", "i", "]", "\n", "for", "i", "in", "data", "[", "'items'", "]", ")", "<=", "data", "[", "'bin_capacities'", "]", "[", "j", "]", ")", "\n", "\n", "# Objective", "\n", "", "objective", "=", "self", ".", "solver", ".", "Objective", "(", ")", "\n", "\n", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "            ", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "                ", "objective", ".", "SetCoefficient", "(", "x", "[", "(", "i", ",", "j", ")", "]", ",", "data", "[", "'values'", "]", "[", "i", "]", ")", "\n", "", "", "objective", ".", "SetMaximization", "(", ")", "\n", "\n", "# Solve the problem", "\n", "status", "=", "self", ".", "solver", ".", "Solve", "(", ")", "\n", "\n", "taken_items", "=", "np", ".", "zeros", "(", "[", "len", "(", "data", "[", "'items'", "]", ")", "]", ",", "dtype", "=", "'int8'", ")", "\n", "for", "entry", "in", "x", ":", "\n", "            ", "if", "x", "[", "entry", "]", ".", "solution_value", "(", ")", ">", "0", ":", "\n", "# Mark item as taken", "\n", "                ", "taken_items", "[", "entry", "[", "0", "]", "]", "=", "1", "\n", "\n", "# Insert item into the bin", "\n", "bin_list", "[", "entry", "[", "1", "]", "]", ".", "insert_item", "(", "\n", "item_list", "[", "entry", "[", "0", "]", "]", "\n", ")", "\n", "\n", "", "", "for", "index", ",", "taken", "in", "enumerate", "(", "taken_items", ")", ":", "\n", "            ", "if", "taken", "==", "0", ":", "\n", "                ", "EOS_NODE", ".", "insert_item", "(", "\n", "item_list", "[", "index", "]", "\n", ")", "\n", "\n", "# Store a reference with the solution", "\n", "", "", "self", ".", "solution", "=", "[", "EOS_NODE", "]", "+", "bin_list", "\n", "\n", "# if status == pywraplp.Solver.OPTIMAL:", "\n", "#     print('Total packed value:', objective.Value())", "\n", "\n", "#     total_weight = 0", "\n", "#     for j in data['bins']:", "\n", "#         bin_weight = 0", "\n", "#         bin_value = 0", "\n", "#         print('Bin ', j, '\\n')", "\n", "#         for i in data['items']:", "\n", "#             if x[i, j].solution_value() > 0:", "\n", "#                 print('Item', i, '- weight:', data['weights'][i], ' value:',", "\n", "#                         data['values'][i])", "\n", "#                 bin_weight += data['weights'][i]", "\n", "#                 bin_value += data['values'][i]", "\n", "#         print('Packed bin weight:', bin_weight)", "\n", "#         print('Packed bin value:', bin_value)", "\n", "#         print()", "\n", "#         total_weight += bin_weight", "\n", "#     print('Total packed weight:', total_weight)", "\n", "# else:", "\n", "#     print('The problem does not have an optimal solution.')", "\n", "\n", "return", "objective", ".", "Value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.or_tools.ORTools.parse_data": [[121, 153], ["list", "len", "list", "weights.append", "values.append", "range", "bin_capacities.append", "range", "float", "len", "len"], "methods", ["None"], ["", "def", "parse_data", "(", "self", ",", "state", ")", ":", "\n", "# state = round_half_up(state * 100, 0)", "\n", "# state[:, 0, :] = -2", "\n", "# state = state.astype('int8')", "\n", "\n", "\n", "# split the state into bins and items", "\n", "        ", "bins", "=", "state", "[", "0", ",", ":", "self", ".", "num_bins", ",", ":", "]", "\n", "items", "=", "state", "[", "0", ",", "self", ".", "num_bins", ":", ",", ":", "]", "\n", "\n", "# Create OR tools acceptabe format", "\n", "data", "=", "{", "}", "\n", "weights", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "\n", "for", "item", "in", "items", ":", "\n", "            ", "weights", ".", "append", "(", "item", "[", "0", "]", ")", "\n", "values", ".", "append", "(", "float", "(", "item", "[", "1", "]", ")", ")", "\n", "\n", "", "data", "[", "'items'", "]", "=", "list", "(", "range", "(", "len", "(", "weights", ")", ")", ")", "\n", "data", "[", "'num_items'", "]", "=", "len", "(", "weights", ")", "\n", "data", "[", "'weights'", "]", "=", "weights", "\n", "data", "[", "'values'", "]", "=", "values", "\n", "\n", "bin_capacities", "=", "[", "]", "\n", "for", "bin", "in", "bins", "[", "1", ":", "]", ":", "#Skip EOS bin", "\n", "            ", "bin_capacities", ".", "append", "(", "bin", "[", "0", "]", ")", "\n", "\n", "", "data", "[", "'bins'", "]", "=", "list", "(", "range", "(", "(", "len", "(", "bin_capacities", ")", ")", ")", ")", "\n", "data", "[", "'bin_capacities'", "]", "=", "bin_capacities", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.random_heuristic.RandomHeuristic.__init__": [[16, 24], ["environment.custom.resource_v3.heuristic.base_heuristic.BaseHeuristic.__init__", "random_heuristic.RandomHeuristic.generate_name"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_greedy_critical.CPLEXGreedyCritical.generate_name"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ":", "int", ",", "\n", "opts", ":", "dict", "\n", ")", ":", "\n", "        ", "super", "(", "RandomHeuristic", ",", "self", ")", ".", "__init__", "(", "num_nodes", ")", "\n", "\n", "self", ".", "generate_name", "(", ")", "\n", "\n", "", "def", "generate_name", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.random_heuristic.RandomHeuristic.generate_name": [[25, 27], ["None"], "methods", ["None"], ["        ", "self", ".", "name", "=", "'random'", "\n", "\n", "", "def", "solve", "(", "self", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.random_heuristic.RandomHeuristic.solve": [[28, 46], ["random_heuristic.RandomHeuristic.parse_nodes", "random_heuristic.RandomHeuristic.pop", "random_heuristic.RandomHeuristic.parse_resources", "len", "random.randrange", "random_heuristic.RandomHeuristic.pop", "random_heuristic.RandomHeuristic.place_single_resource", "len"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.place_single_resource"], ["\n", "        ", "bin_list", "=", "self", ".", "parse_bins", "(", "state", ")", "\n", "EOS_NODE", "=", "bin_list", ".", "pop", "(", "0", ")", "\n", "\n", "item_list", "=", "self", ".", "parse_items", "(", "state", ")", "\n", "\n", "while", "len", "(", "item_list", ")", ">", "0", ":", "\n", "# Randomly pick an item", "\n", "            ", "item_index", "=", "random", ".", "randrange", "(", "len", "(", "item_list", ")", ")", "\n", "item", "=", "item_list", ".", "pop", "(", "item_index", ")", "\n", "\n", "copy_list", "=", "[", "]", "+", "bin_list", "\n", "\n", "self", ".", "place_single_item", "(", "item", ",", "copy_list", ",", "EOS_NODE", ")", "\n", "\n", "# Store a reference with the solution", "\n", "", "self", ".", "solution", "=", "[", "EOS_NODE", "]", "+", "bin_list", "\n", "\n", "", "def", "place_single_item", "(", "self", ",", "item", ",", "bin_list", ":", "List", "[", "Bin", "]", ",", "EOS_NODE", ":", "Bin", ")", ":", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.random_heuristic.RandomHeuristic.place_single_item": [[46, 63], ["len", "random.randrange", "bin_list.pop", "node.can_fit_item", "EOS_NODE.insert_item", "len", "node.insert_item"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.can_fit_item", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item"], ["", "def", "place_single_item", "(", "self", ",", "item", ",", "bin_list", ":", "List", "[", "Bin", "]", ",", "EOS_NODE", ":", "Bin", ")", ":", "\n", "\n", "# Now do the fit first", "\n", "        ", "allocated", "=", "False", "\n", "while", "len", "(", "bin_list", ")", ">", "0", ":", "\n", "# Randomly pick a node", "\n", "            ", "node_index", "=", "random", ".", "randrange", "(", "len", "(", "bin_list", ")", ")", "\n", "node", ":", "Bin", "=", "bin_list", ".", "pop", "(", "node_index", ")", "\n", "\n", "if", "node", ".", "can_fit_item", "(", "item", ")", ":", "\n", "                ", "node", ".", "insert_item", "(", "item", ")", "\n", "allocated", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "allocated", ":", "\n", "# Place at EOS node", "\n", "            ", "EOS_NODE", ".", "insert_item", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.__init__": [[8, 20], ["None"], "methods", ["None"], ["num_bins", ":", "int", "\n", ")", ":", "\n", "        ", "self", ".", "name", "=", "'base_heuristic'", "\n", "\n", "self", ".", "resource_batch_id", "=", "0", "\n", "self", ".", "num_bins", "=", "num_bins", "\n", "\n", "self", ".", "solution", "=", "[", "]", "\n", "\n", "", "def", "generate_name", "(", "self", ",", "state", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"generate_name\" not implemented'", ")", "\n", "\n", "", "def", "solve", "(", "self", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.generate_name": [[21, 23], ["NotImplementedError"], "methods", ["None"], ["        ", "raise", "NotImplementedError", "(", "'Method \"solve\" not implemented'", ")", "\n", "\n", "", "def", "place_single_item", "(", "self", ",", "resource", ",", "node_list", ",", "EOS_NODE", ")", ":", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.solve": [[24, 26], ["NotImplementedError"], "methods", ["None"], ["        ", "raise", "NotImplementedError", "(", "'Method \"place_single_resource\" not implemented'", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.place_single_item": [[23, 25], ["NotImplementedError"], "methods", ["None"], ["", "def", "place_single_item", "(", "self", ",", "resource", ",", "node_list", ",", "EOS_NODE", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"place_single_resource\" not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.reset": [[30, 34], ["None"], "methods", ["None"], ["\n", "", "def", "parse_bins", "(", "self", ",", "state", ")", "->", "List", "[", "Bin", "]", ":", "\n", "\n", "        ", "batch_size", "=", "state", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_bins": [[31, 51], ["enumerate", "bin_list.append", "environment.custom.knapsack_v2.bin.Bin"], "methods", ["None"], ["", "def", "parse_bins", "(", "self", ",", "state", ")", "->", "List", "[", "Bin", "]", ":", "\n", "\n", "        ", "batch_size", "=", "state", ".", "shape", "[", "0", "]", "\n", "\n", "assert", "batch_size", "==", "1", ",", "'Heuristic only works for problems with batch size equal to 1!'", "\n", "\n", "bins", "=", "state", "[", "0", ",", ":", "self", ".", "num_bins", ",", ":", "]", "\n", "# resources = state[:, env.bin_sample_size:, :]", "\n", "\n", "bin_list", "=", "[", "]", "\n", "for", "id", ",", "bin", "in", "enumerate", "(", "bins", ")", ":", "\n", "            ", "bin_list", ".", "append", "(", "\n", "Bin", "(", "\n", "0", ",", "# Nodes are created in first batch, i.e., state from env", "\n", "id", ",", "\n", "bin", "\n", ")", "\n", ")", "\n", "\n", "", "return", "bin_list", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_items": [[52, 72], ["enumerate", "item_list.append", "environment.custom.knapsack_v2.item.Item"], "methods", ["None"], ["", "def", "parse_items", "(", "self", ",", "state", ")", "->", "List", "[", "Item", "]", ":", "\n", "        ", "batch_size", "=", "state", ".", "shape", "[", "0", "]", "\n", "\n", "assert", "batch_size", "==", "1", ",", "'Heuristic only works for problems with batch size equal to 1!'", "\n", "\n", "items", "=", "state", "[", "0", ",", "self", ".", "num_bins", ":", ",", ":", "]", "\n", "\n", "item_list", "=", "[", "]", "\n", "for", "id", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "            ", "item_list", ".", "append", "(", "\n", "Item", "(", "\n", "self", ".", "resource_batch_id", ",", "\n", "id", ",", "\n", "item", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "resource_batch_id", "+=", "1", "\n", "\n", "return", "item_list", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.print_info": [[78, 81], ["elem.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["\n", "", "", "def", "print_node_stats", "(", "self", ",", "print_details", "=", "False", ")", ":", "# pragma: no cover", "\n", "        ", "for", "node", "in", "self", ".", "solution", ":", "\n", "            ", "node", ".", "print", "(", "print_details", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.print_node_stats": [[83, 86], ["node.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.factory.heuristic_factory": [[15, 43], ["factory.generate_dominant_combos", "environment.custom.resource_v3.heuristic.random_heuristic.RandomHeuristic", "cplex_solvers.append", "cplex_solvers.append", "CPLEXGreedyCritical", "CPLEXReducedNode"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.factory.generate_dominant_combos"], ["]", "\n", "\n", "or_tools", "=", "[", "\n", "ORTools", "(", "num_nodes", ",", "opts", "[", "'or_tools'", "]", ")", "\n", "]", "\n", "\n", "# Concat the array with the solvers", "\n", "heuristic_list", "=", "heuristic_list", "+", "waste_reduction_solvers", "+", "random_solvers", "+", "or_tools", "\n", "\n", "return", "heuristic_list", "\n", "\n", "", "def", "generate_waste_reduction_combos", "(", "num_nodes", ":", "int", ",", "opts", ":", "dict", ")", ":", "\n", "    ", "generate_combos", ":", "bool", "=", "opts", "[", "'generate_params_combos'", "]", "\n", "\n", "# Return as is", "\n", "if", "not", "generate_combos", ":", "\n", "        ", "return", "[", "\n", "WasteReductionHeuristic", "(", "num_nodes", ",", "opts", ")", "\n", "]", "\n", "\n", "", "dominant_list", "=", "[", "]", "\n", "\n", "item_sorting", "=", "[", "True", ",", "False", "]", "\n", "bin_sorting", "=", "[", "True", ",", "False", "]", "\n", "\n", "for", "i", "in", "item_sorting", ":", "\n", "        ", "for", "b", "in", "bin_sorting", ":", "\n", "            ", "opts_combo", "=", "{", "\n", "\"item_sort_descending\"", ":", "i", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.factory.generate_waste_reduction_combos": [[26, 52], ["environment.custom.knapsack_v2.heuristic.waste_reduction.WasteReductionHeuristic", "dominant_list.append", "environment.custom.knapsack_v2.heuristic.waste_reduction.WasteReductionHeuristic"], "function", ["None"], ["", "def", "generate_waste_reduction_combos", "(", "num_nodes", ":", "int", ",", "opts", ":", "dict", ")", ":", "\n", "    ", "generate_combos", ":", "bool", "=", "opts", "[", "'generate_params_combos'", "]", "\n", "\n", "# Return as is", "\n", "if", "not", "generate_combos", ":", "\n", "        ", "return", "[", "\n", "WasteReductionHeuristic", "(", "num_nodes", ",", "opts", ")", "\n", "]", "\n", "\n", "", "dominant_list", "=", "[", "]", "\n", "\n", "item_sorting", "=", "[", "True", ",", "False", "]", "\n", "bin_sorting", "=", "[", "True", ",", "False", "]", "\n", "\n", "for", "i", "in", "item_sorting", ":", "\n", "        ", "for", "b", "in", "bin_sorting", ":", "\n", "            ", "opts_combo", "=", "{", "\n", "\"item_sort_descending\"", ":", "i", ",", "\n", "\"bin_sort_descending\"", ":", "b", "\n", "}", "\n", "\n", "dominant_list", ".", "append", "(", "\n", "WasteReductionHeuristic", "(", "num_nodes", ",", "opts_combo", ")", "\n", ")", "\n", "\n", "", "", "return", "dominant_list", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.waste_reduction.WasteReductionHeuristic.__init__": [[15, 25], ["environment.custom.knapsack_v2.heuristic.base_heuristic.BaseHeuristic.__init__", "waste_reduction.WasteReductionHeuristic.generate_name"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_greedy_critical.CPLEXGreedyCritical.generate_name"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ":", "int", ",", "\n", "opts", ":", "dict", "\n", ")", ":", "\n", "        ", "super", "(", "WasteReductionHeuristic", ",", "self", ")", ".", "__init__", "(", "num_nodes", ")", "\n", "\n", "self", ".", "item_sort_descending", "=", "opts", "[", "'item_sort_descending'", "]", "\n", "self", ".", "bin_sort_descending", "=", "opts", "[", "'bin_sort_descending'", "]", "\n", "\n", "self", ".", "generate_name", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.waste_reduction.WasteReductionHeuristic.generate_name": [[26, 28], ["None"], "methods", ["None"], ["", "def", "generate_name", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "f'item_ASC_{self.item_sort_descending}_bin_ASC_{self.bin_sort_descending}'", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.waste_reduction.WasteReductionHeuristic.solve": [[29, 48], ["waste_reduction.WasteReductionHeuristic.parse_bins", "waste_reduction.WasteReductionHeuristic.pop", "waste_reduction.WasteReductionHeuristic.parse_items", "sorted", "waste_reduction.WasteReductionHeuristic.place_single_resource"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_bins", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_items", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.place_single_resource"], ["", "def", "solve", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "bin_list", "=", "self", ".", "parse_bins", "(", "state", ")", "\n", "EOS_NODE", "=", "bin_list", ".", "pop", "(", "0", ")", "\n", "\n", "item_list", "=", "self", ".", "parse_items", "(", "state", ")", "\n", "\n", "# Sort the resources in a descending order", "\n", "item_list", ":", "List", "[", "Item", "]", "=", "sorted", "(", "\n", "item_list", ",", "\n", "key", "=", "resource_sorting_fn", ",", "\n", "reverse", "=", "self", ".", "item_sort_descending", "\n", ")", "\n", "\n", "for", "item", "in", "item_list", ":", "\n", "            ", "self", ".", "place_single_resource", "(", "item", ",", "bin_list", ",", "EOS_NODE", ")", "\n", "\n", "# Store a reference with the solution", "\n", "", "self", ".", "solution", "=", "[", "EOS_NODE", "]", "+", "bin_list", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.waste_reduction.WasteReductionHeuristic.place_single_resource": [[49, 71], ["waste_reduction.compute_potential_placement_diffs", "sorted", "EOS_NODE.insert_item", "bin.insert_item"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.compute_potential_placement_diffs", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.insert_item"], ["", "def", "place_single_resource", "(", "self", ",", "item", ":", "Item", ",", "bin_list", ":", "List", "[", "Bin", "]", ",", "EOS_NODE", ":", "Bin", ")", ":", "\n", "        ", "diffs", "=", "compute_potential_placement_diffs", "(", "item", ",", "bin_list", ")", "\n", "\n", "# Sort the nodes by dominant resource", "\n", "sorted_bins", ":", "Tuple", "[", "float", ",", "Bin", "]", "=", "sorted", "(", "\n", "diffs", ",", "\n", "key", "=", "node_sorting_fn", ",", "\n", "reverse", "=", "self", ".", "bin_sort_descending", "\n", ")", "\n", "\n", "# Now do the fit first", "\n", "allocated", "=", "False", "\n", "bin", ":", "Bin", "\n", "for", "diff", ",", "bin", "in", "sorted_bins", ":", "\n", "            ", "if", "(", "diff", ">=", "0", ")", ":", "\n", "                ", "bin", ".", "insert_item", "(", "item", ")", "\n", "allocated", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "allocated", ":", "\n", "# Place at EOS node", "\n", "            ", "EOS_NODE", ".", "insert_item", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.waste_reduction.compute_potential_placement_diffs": [[72, 82], ["diffs.append", "bin.compute_remaining_capacity"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack_v2.bin.Bin.compute_remaining_capacity"], ["", "", "", "def", "compute_potential_placement_diffs", "(", "item", ",", "bin_list", ")", "->", "Tuple", "[", "float", ",", "Bin", "]", ":", "\n", "# Compute dominant resource of each node and current request", "\n", "        ", "diffs", "=", "[", "]", "\n", "bin", ":", "Bin", "\n", "for", "bin", "in", "bin_list", ":", "\n", "            ", "diffs", ".", "append", "(", "\n", "(", "bin", ".", "compute_remaining_capacity", "(", "item", ")", ",", "bin", ")", "\n", ")", "\n", "\n", "", "return", "diffs", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.waste_reduction.node_sorting_fn": [[83, 85], ["None"], "function", ["None"], ["", "def", "node_sorting_fn", "(", "e", ":", "Tuple", "[", "float", ",", "Bin", "]", ")", ":", "\n", "    ", "return", "e", "[", "0", "]", "\n", "# return (node.remaining_CPU, node.remaining_RAM, node.remaining_MEM)", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.waste_reduction.resource_sorting_fn": [[87, 89], ["None"], "function", ["None"], ["", "def", "resource_sorting_fn", "(", "elem", ":", "Item", ")", ":", "\n", "    ", "return", "elem", ".", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.DominantResourceHeuristic.__init__": [[15, 26], ["environment.custom.resource_v3.heuristic.base_heuristic.BaseHeuristic.__init__", "dominant_heuristic.DominantResourceHeuristic.generate_name"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_greedy_critical.CPLEXGreedyCritical.generate_name"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ":", "int", ",", "\n", "normalization_factor", ":", "int", ",", "\n", "opts", ":", "dict", "\n", ")", ":", "\n", "        ", "super", "(", "DominantResourceHeuristic", ",", "self", ")", ".", "__init__", "(", "num_nodes", ",", "normalization_factor", ")", "\n", "\n", "self", ".", "resource_sort_descending", "=", "opts", "[", "'resource_sort_descending'", "]", "\n", "self", ".", "node_sort_descending", "=", "opts", "[", "'node_sort_descending'", "]", "\n", "\n", "self", ".", "generate_name", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.DominantResourceHeuristic.generate_name": [[27, 29], ["None"], "methods", ["None"], ["", "def", "generate_name", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "f'dominant_resource_ASC_{self.resource_sort_descending}_node_ASC_{self.node_sort_descending}'", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.DominantResourceHeuristic.solve": [[30, 49], ["dominant_heuristic.DominantResourceHeuristic.parse_nodes", "dominant_heuristic.DominantResourceHeuristic.pop", "dominant_heuristic.DominantResourceHeuristic.parse_resources", "sorted", "dominant_heuristic.DominantResourceHeuristic.place_single_resource"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.place_single_resource"], ["", "def", "solve", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "node_list", "=", "self", ".", "parse_nodes", "(", "state", ")", "\n", "EOS_NODE", "=", "node_list", ".", "pop", "(", "0", ")", "\n", "\n", "resource_list", "=", "self", ".", "parse_resources", "(", "state", ")", "\n", "\n", "# Sort the resources in a descending order", "\n", "resource_list", ":", "List", "[", "Resource", "]", "=", "sorted", "(", "\n", "resource_list", ",", "\n", "key", "=", "resource_sorting_fn", ",", "\n", "reverse", "=", "self", ".", "resource_sort_descending", "\n", ")", "\n", "\n", "for", "resource", "in", "resource_list", ":", "\n", "            ", "self", ".", "place_single_resource", "(", "resource", ",", "node_list", ",", "EOS_NODE", ")", "\n", "\n", "# Store a reference with the solution", "\n", "", "self", ".", "solution", "=", "[", "EOS_NODE", "]", "+", "node_list", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.DominantResourceHeuristic.place_single_resource": [[50, 72], ["dominant_heuristic.compute_potential_placement_diffs", "sorted", "EOS_NODE.insert_req", "node.insert_req"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.compute_potential_placement_diffs", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req"], ["", "def", "place_single_resource", "(", "self", ",", "resource", ":", "Resource", ",", "node_list", ":", "List", "[", "Node", "]", ",", "EOS_NODE", ":", "Node", ")", ":", "\n", "\n", "        ", "diffs", "=", "compute_potential_placement_diffs", "(", "resource", ",", "node_list", ")", "\n", "\n", "# Sort the nodes by dominant resource", "\n", "sorted_nodes", ":", "Tuple", "[", "float", ",", "Node", "]", "=", "sorted", "(", "\n", "diffs", ",", "\n", "key", "=", "node_sorting_fn", ",", "\n", "reverse", "=", "self", ".", "node_sort_descending", "\n", ")", "\n", "\n", "# Now do the fit first", "\n", "allocated", "=", "False", "\n", "for", "diff", ",", "node", "in", "sorted_nodes", ":", "\n", "            ", "if", "(", "diff", ">=", "0", ")", ":", "\n", "                ", "node", ".", "insert_req", "(", "resource", ")", "\n", "allocated", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "allocated", ":", "\n", "# Place at EOS node", "\n", "            ", "EOS_NODE", ".", "insert_req", "(", "resource", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.compute_potential_placement_diffs": [[73, 82], ["diffs.append", "node.compute_dominant_resource"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.compute_dominant_resource"], ["", "", "", "def", "compute_potential_placement_diffs", "(", "resource", ",", "node_list", ")", "->", "Tuple", "[", "float", ",", "Node", "]", ":", "\n", "# Compute dominant resource of each node and current request", "\n", "        ", "diffs", "=", "[", "]", "\n", "for", "node", "in", "node_list", ":", "\n", "            ", "diffs", ".", "append", "(", "\n", "(", "node", ".", "compute_dominant_resource", "(", "resource", ")", ",", "node", ")", "\n", ")", "\n", "\n", "", "return", "diffs", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.node_sorting_fn": [[83, 85], ["None"], "function", ["None"], ["", "def", "node_sorting_fn", "(", "e", ":", "Tuple", "[", "float", ",", "Node", "]", ")", ":", "\n", "    ", "return", "e", "[", "0", "]", "\n", "# return (node.remaining_CPU, node.remaining_RAM, node.remaining_MEM)", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.resource_sorting_fn": [[87, 89], ["max"], "function", ["None"], ["", "def", "resource_sorting_fn", "(", "elem", ":", "Resource", ")", ":", "\n", "    ", "return", "max", "(", "elem", ".", "CPU", ",", "elem", ".", "RAM", ",", "elem", ".", "MEM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_reduced_node.CPLEXReducedNode.__init__": [[14, 25], ["environment.custom.resource_v3.heuristic.base_heuristic.BaseHeuristic.__init__", "cplex_reduced_node.CPLEXReducedNode.generate_name"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_greedy_critical.CPLEXGreedyCritical.generate_name"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ":", "int", ",", "\n", "normalization_factor", ":", "int", ",", "\n", "opts", ":", "dict", "\n", ")", ":", "\n", "        ", "super", "(", "CPLEXReducedNode", ",", "self", ")", ".", "__init__", "(", "num_nodes", ",", "normalization_factor", ")", "\n", "\n", "self", ".", "time_limit_ms", ":", "int", "=", "opts", "[", "'time_limit_ms'", "]", "\n", "self", ".", "num_threads", ":", "int", "=", "opts", "[", "'num_threads'", "]", "\n", "\n", "self", ".", "generate_name", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_reduced_node.CPLEXReducedNode.generate_name": [[26, 28], ["None"], "methods", ["None"], ["", "def", "generate_name", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "f'CPLEX_reduced_node'", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_reduced_node.CPLEXReducedNode.solve": [[29, 124], ["cplex_reduced_node.CPLEXReducedNode.parse_nodes", "cplex_reduced_node.CPLEXReducedNode.pop", "cplex_reduced_node.CPLEXReducedNode.parse_resources", "range", "environment.custom.resource_v3.misc.utils.round_half_up", "range", "environment.custom.resource_v3.misc.utils.round_half_up", "range", "docplex.mp.model.Model", "int", "docplex.mp.model.Model.binary_var_list", "docplex.mp.model.Model.binary_var_dict", "docplex.mp.model.Model.binary_var_dict", "docplex.mp.model.Model.add_constraints", "docplex.mp.model.Model.add_constraints", "docplex.mp.model.Model.add_constraints", "docplex.mp.model.Model.maximize", "docplex.mp.model.Model.solve", "docplex.mp.model.Model.solution.get_value_dict", "numpy.zeros", "enumerate", "docplex.mp.model.Model.sum", "len", "node_list[].insert_req", "cplex_reduced_node.CPLEXReducedNode.pop.insert_req", "docplex.mp.model.Model.sum", "docplex.mp.model.Model.sum", "float", "docplex.mp.model.Model.sum", "len", "float"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req"], ["", "def", "solve", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "node_list", "=", "self", ".", "parse_nodes", "(", "state", ")", "\n", "EOS_NODE", "=", "node_list", ".", "pop", "(", "0", ")", "\n", "\n", "resource_list", "=", "self", ".", "parse_resources", "(", "state", ")", "\n", "\n", "# CPU, RAM and MEM indexes", "\n", "feature_ids", "=", "range", "(", "state", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# Rescale nodes for CPLEX to avoid precision issues", "\n", "# More info: https://github.com/IBMDecisionOptimization/docplex-examples/issues/46", "\n", "nodes", "=", "round_half_up", "(", "\n", "state", "[", ":", ",", "1", ":", "self", ".", "num_nodes", "]", "[", "0", "]", "*", "self", ".", "normalization_factor", ",", "\n", "0", "# Decimal precision", "\n", ")", "\n", "nodes_ids", "=", "range", "(", "nodes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Rescale resources for CPLEX to avoid precision issues", "\n", "# More info: https://github.com/IBMDecisionOptimization/docplex-examples/issues/46", "\n", "resources", "=", "round_half_up", "(", "\n", "state", "[", ":", ",", "self", ".", "num_nodes", ":", "]", "[", "0", "]", "*", "self", ".", "normalization_factor", ",", "\n", "0", "# Decimal precision", "\n", ")", "\n", "resources_ids", "=", "range", "(", "resources", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# CPLEX Model", "\n", "mdl", "=", "Model", "(", "name", "=", "\"load_balancing\"", ")", "\n", "\n", "mdl", ".", "parameters", ".", "threads", "=", "self", ".", "num_threads", "\n", "# In seconds", "\n", "mdl", ".", "parameters", ".", "timelimit", "=", "int", "(", "self", ".", "time_limit_ms", "/", "1000", ")", "\n", "\n", "is_resource_executed", "=", "mdl", ".", "binary_var_list", "(", "\n", "[", "x", "for", "x", "in", "resources_ids", "]", ",", "name", "=", "'w'", ")", "\n", "\n", "is_resource_placed_at_node", "=", "mdl", ".", "binary_var_dict", "(", "\n", "[", "(", "x", ",", "n", ")", "for", "x", "in", "resources_ids", "for", "n", "in", "nodes_ids", "]", ",", "name", "=", "'B'", ")", "\n", "\n", "theta", "=", "mdl", ".", "binary_var_dict", "(", "\n", "[", "n", "for", "n", "in", "nodes_ids", "]", ",", "name", "=", "'theta'", ")", "\n", "\n", "# Rule placement", "\n", "mdl", ".", "add_constraints", "(", "\n", "mdl", ".", "sum", "(", "is_resource_placed_at_node", "[", "x", ",", "n", "]", "for", "n", "in", "nodes_ids", ")", "==", "is_resource_executed", "[", "x", "]", "for", "x", "in", "resources_ids", "\n", ")", "\n", "\n", "# Computation Resource Limitation", "\n", "mdl", ".", "add_constraints", "(", "\n", "mdl", ".", "sum", "(", "float", "(", "resources", "[", "x", ",", "m", "]", ")", "*", "is_resource_placed_at_node", "[", "x", ",", "n", "]", "for", "x", "in", "resources_ids", ")", "<=", "float", "(", "nodes", "[", "n", ",", "m", "]", ")", "for", "n", "in", "nodes_ids", "for", "m", "in", "feature_ids", "\n", ")", "\n", "\n", "# Determine if node is in use", "\n", "mdl", ".", "add_constraints", "(", "\n", "theta", "[", "n", "]", ">=", "is_resource_placed_at_node", "[", "x", ",", "n", "]", "for", "n", "in", "nodes_ids", "for", "x", "in", "resources_ids", "\n", ")", "\n", "\n", "# ToDo", "\n", "mdl", ".", "maximize", "(", "\n", "mdl", ".", "sum", "(", "is_resource_executed", "[", "x", "]", "for", "x", "in", "resources_ids", ")", "\n", "-", "mdl", ".", "sum", "(", "theta", "[", "n", "]", "for", "n", "in", "nodes_ids", ")", "/", "len", "(", "nodes_ids", ")", "\n", ")", "\n", "\n", "# mdl.print_information()", "\n", "mdl", ".", "solve", "(", ")", "\n", "# mdl.print_solution(print_zeros=True)", "\n", "\n", "# Parse solution", "\n", "placements", "=", "mdl", ".", "solution", ".", "get_value_dict", "(", "is_resource_placed_at_node", ")", "\n", "taken_items", "=", "np", ".", "zeros", "(", "[", "len", "(", "resources_ids", ")", "]", ",", "dtype", "=", "'int8'", ")", "\n", "\n", "for", "entry", "in", "placements", ":", "\n", "            ", "if", "placements", "[", "entry", "]", "==", "1", ":", "\n", "# Mark as taken", "\n", "                ", "taken_items", "[", "entry", "[", "0", "]", "]", "=", "1", "\n", "\n", "# Insert into the node", "\n", "node_list", "[", "entry", "[", "1", "]", "]", ".", "insert_req", "(", "\n", "resource_list", "[", "entry", "[", "0", "]", "]", "\n", ")", "\n", "\n", "# Place the rejected into EOS", "\n", "", "", "for", "index", ",", "taken", "in", "enumerate", "(", "taken_items", ")", ":", "\n", "            ", "if", "taken", "==", "0", ":", "\n", "                ", "EOS_NODE", ".", "insert_req", "(", "\n", "resource_list", "[", "index", "]", "\n", ")", "\n", "\n", "# Store a reference with the solution", "\n", "", "", "self", ".", "solution", "=", "[", "EOS_NODE", "]", "+", "node_list", "\n", "\n", "# Store the status code of the solution", "\n", "# More info about CPLEX status codes here: https://www.ibm.com/docs/en/icos/12.8.0.0?topic=micclcarm-solution-status-codes-by-number-in-cplex-callable-library-c-api", "\n", "if", "mdl", ".", "solution", ".", "solve_details", ".", "status_code", "==", "101", ":", "# 101 is MIP Optimal", "\n", "            ", "self", ".", "is_optimal", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.random_heuristic.RandomHeuristic.place_single_resource": [[47, 64], ["len", "random.randrange", "node_list.pop", "node.can_fit_resource", "EOS_NODE.insert_req", "len", "node.insert_req"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.can_fit_resource", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req"], ["\n", "# Now do the fit first", "\n", "        ", "allocated", "=", "False", "\n", "while", "len", "(", "bin_list", ")", ">", "0", ":", "\n", "# Randomly pick a node", "\n", "            ", "node_index", "=", "random", ".", "randrange", "(", "len", "(", "bin_list", ")", ")", "\n", "node", ":", "Bin", "=", "bin_list", ".", "pop", "(", "node_index", ")", "\n", "\n", "if", "node", ".", "can_fit_item", "(", "item", ")", ":", "\n", "                ", "node", ".", "insert_item", "(", "item", ")", "\n", "allocated", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "allocated", ":", "\n", "# Place at EOS node", "\n", "            ", "EOS_NODE", ".", "insert_item", "(", "item", ")", "\n", "\n", "", "", "", "if", "__name__", "==", "\"__main__\"", ":", "# pragma: no cover", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.place_single_resource": [[27, 29], ["NotImplementedError"], "methods", ["None"], ["        ", "self", ".", "resource_batch_id", "=", "0", "\n", "\n", "self", ".", "solution", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_nodes": [[35, 55], ["enumerate", "node_list.append", "environment.custom.resource_v3.node.Node"], "methods", ["None"], ["assert", "batch_size", "==", "1", ",", "'Heuristic only works for problems with batch size equal to 1!'", "\n", "\n", "bins", "=", "state", "[", "0", ",", ":", "self", ".", "num_bins", ",", ":", "]", "\n", "# resources = state[:, env.bin_sample_size:, :]", "\n", "\n", "bin_list", "=", "[", "]", "\n", "for", "id", ",", "bin", "in", "enumerate", "(", "bins", ")", ":", "\n", "            ", "bin_list", ".", "append", "(", "\n", "Bin", "(", "\n", "0", ",", "# Nodes are created in first batch, i.e., state from env", "\n", "id", ",", "\n", "bin", "\n", ")", "\n", ")", "\n", "\n", "", "return", "bin_list", "\n", "\n", "", "def", "parse_items", "(", "self", ",", "state", ")", "->", "List", "[", "Item", "]", ":", "\n", "        ", "batch_size", "=", "state", ".", "shape", "[", "0", "]", "\n", "\n", "assert", "batch_size", "==", "1", ",", "'Heuristic only works for problems with batch size equal to 1!'", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.parse_resources": [[56, 76], ["enumerate", "resource_list.append", "environment.custom.resource_v3.resource.Resource"], "methods", ["None"], ["\n", "items", "=", "state", "[", "0", ",", "self", ".", "num_bins", ":", ",", ":", "]", "\n", "\n", "item_list", "=", "[", "]", "\n", "for", "id", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "            ", "item_list", ".", "append", "(", "\n", "Item", "(", "\n", "self", ".", "resource_batch_id", ",", "\n", "id", ",", "\n", "item", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "resource_batch_id", "+=", "1", "\n", "\n", "return", "item_list", "\n", "\n", "\n", "", "def", "print_info", "(", "self", ",", "elem_list", ":", "list", ")", ":", "# pragma: no cover", "\n", "        ", "for", "elem", "in", "elem_list", ":", "\n", "            ", "elem", ".", "print", "(", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.factory.generate_dominant_combos": [[44, 70], ["environment.custom.resource_v3.heuristic.dominant_heuristic.DominantResourceHeuristic", "dominant_list.append", "environment.custom.resource_v3.heuristic.dominant_heuristic.DominantResourceHeuristic"], "function", ["None"], ["\"bin_sort_descending\"", ":", "b", "\n", "}", "\n", "\n", "dominant_list", ".", "append", "(", "\n", "WasteReductionHeuristic", "(", "num_nodes", ",", "opts_combo", ")", "\n", ")", "\n", "\n", "", "", "return", "dominant_list", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_greedy_critical.CPLEXGreedyCritical.__init__": [[14, 27], ["environment.custom.resource_v3.heuristic.base_heuristic.BaseHeuristic.__init__", "cplex_greedy_critical.CPLEXGreedyCritical.generate_name"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_greedy_critical.CPLEXGreedyCritical.generate_name"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ":", "int", ",", "\n", "normalization_factor", ":", "int", ",", "\n", "opts", ":", "dict", "\n", ")", ":", "\n", "        ", "super", "(", "CPLEXGreedyCritical", ",", "self", ")", ".", "__init__", "(", "num_nodes", ",", "normalization_factor", ")", "\n", "\n", "self", ".", "time_limit_ms", ":", "int", "=", "opts", "[", "'time_limit_ms'", "]", "\n", "self", ".", "num_threads", ":", "int", "=", "opts", "[", "'num_threads'", "]", "\n", "\n", "self", ".", "greedy_with_critical_resource", ":", "bool", "=", "opts", "[", "'greedy_with_critical_resource'", "]", "\n", "\n", "self", ".", "generate_name", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_greedy_critical.CPLEXGreedyCritical.generate_name": [[28, 30], ["None"], "methods", ["None"], ["", "def", "generate_name", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "f'CPLEX'", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.cplex_greedy_critical.CPLEXGreedyCritical.solve": [[31, 144], ["cplex_greedy_critical.CPLEXGreedyCritical.parse_nodes", "cplex_greedy_critical.CPLEXGreedyCritical.pop", "cplex_greedy_critical.CPLEXGreedyCritical.parse_resources", "range", "environment.custom.resource_v3.misc.utils.round_half_up", "range", "environment.custom.resource_v3.misc.utils.round_half_up", "range", "docplex.mp.model.Model", "int", "docplex.mp.model.Model.binary_var_list", "docplex.mp.model.Model.binary_var_dict", "docplex.mp.model.Model.continuous_var_list", "docplex.mp.model.Model.continuous_var", "docplex.mp.model.Model._is_continuous_var", "docplex.mp.model.Model.add_constraints", "docplex.mp.model.Model.add_constraints", "docplex.mp.model.Model.add_constraints", "docplex.mp.model.Model.add_constraints", "docplex.mp.model.Model.solve", "docplex.mp.model.Model.solution.get_value_dict", "numpy.zeros", "enumerate", "docplex.mp.model.Model.maximize", "docplex.mp.model.Model.maximize", "docplex.mp.model.Model.sum", "len", "node_list[].insert_req", "cplex_greedy_critical.CPLEXGreedyCritical.pop.insert_req", "docplex.mp.model.Model.sum", "docplex.mp.model.Model.sum", "float", "docplex.mp.model.Model.sum", "float", "docplex.mp.model.Model.sum", "float", "float"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req"], ["", "def", "solve", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "node_list", "=", "self", ".", "parse_nodes", "(", "state", ")", "\n", "EOS_NODE", "=", "node_list", ".", "pop", "(", "0", ")", "\n", "\n", "resource_list", "=", "self", ".", "parse_resources", "(", "state", ")", "\n", "\n", "# CPU, RAM and MEM indexes", "\n", "feature_ids", "=", "range", "(", "state", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# Rescale nodes for CPLEX to avoid precision issues", "\n", "# More info: https://github.com/IBMDecisionOptimization/docplex-examples/issues/46", "\n", "nodes", "=", "round_half_up", "(", "\n", "state", "[", ":", ",", "1", ":", "self", ".", "num_nodes", "]", "[", "0", "]", "*", "self", ".", "normalization_factor", ",", "\n", "0", "# Decimal precision", "\n", ")", "\n", "nodes_ids", "=", "range", "(", "nodes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Rescale resources for CPLEX to avoid precision issues", "\n", "# More info: https://github.com/IBMDecisionOptimization/docplex-examples/issues/46", "\n", "resources", "=", "round_half_up", "(", "\n", "state", "[", ":", ",", "self", ".", "num_nodes", ":", "]", "[", "0", "]", "*", "self", ".", "normalization_factor", ",", "\n", "0", "# Decimal precision", "\n", ")", "\n", "resources_ids", "=", "range", "(", "resources", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# CPLEX Model", "\n", "mdl", "=", "Model", "(", "name", "=", "\"load_balancing\"", ")", "\n", "\n", "mdl", ".", "parameters", ".", "threads", "=", "self", ".", "num_threads", "\n", "# In seconds", "\n", "mdl", ".", "parameters", ".", "timelimit", "=", "int", "(", "self", ".", "time_limit_ms", "/", "1000", ")", "\n", "\n", "is_resource_executed", "=", "mdl", ".", "binary_var_list", "(", "\n", "[", "x", "for", "x", "in", "resources_ids", "]", ",", "name", "=", "'w'", ")", "\n", "\n", "is_resource_placed_at_node", "=", "mdl", ".", "binary_var_dict", "(", "\n", "[", "(", "x", ",", "n", ")", "for", "x", "in", "resources_ids", "for", "n", "in", "nodes_ids", "]", ",", "name", "=", "'B'", ")", "\n", "\n", "# Critical Resource at specific nodes", "\n", "# Rescale Upper Bound to avoid precision issues", "\n", "# More info: https://github.com/IBMDecisionOptimization/docplex-examples/issues/46", "\n", "omega_node", "=", "mdl", ".", "continuous_var_list", "(", "[", "n", "for", "n", "in", "nodes_ids", "]", ",", "lb", "=", "0", ",", "ub", "=", "1", "*", "self", ".", "normalization_factor", ",", "name", "=", "'omega'", ")", "\n", "\n", "# Global critical resource", "\n", "# Rescale Upper Bound to avoid precision issues", "\n", "# More info: https://github.com/IBMDecisionOptimization/docplex-examples/issues/46", "\n", "omega_max", "=", "mdl", ".", "continuous_var", "(", "name", "=", "'omega_max'", ",", "lb", "=", "0", ",", "ub", "=", "1", "*", "self", ".", "normalization_factor", ")", "\n", "mdl", ".", "_is_continuous_var", "(", "omega_max", ")", "\n", "#mdl.add_constraint(omega_max >= 0)", "\n", "#mdl.add_constraint(omega_max <= 1)", "\n", "\n", "\n", "# Rule placement", "\n", "mdl", ".", "add_constraints", "(", "\n", "mdl", ".", "sum", "(", "is_resource_placed_at_node", "[", "x", ",", "n", "]", "for", "n", "in", "nodes_ids", ")", "==", "is_resource_executed", "[", "x", "]", "for", "x", "in", "resources_ids", "\n", ")", "\n", "\n", "# Computation Resource Limitation", "\n", "mdl", ".", "add_constraints", "(", "\n", "mdl", ".", "sum", "(", "float", "(", "resources", "[", "x", ",", "m", "]", ")", "*", "is_resource_placed_at_node", "[", "x", ",", "n", "]", "for", "x", "in", "resources_ids", ")", "<=", "float", "(", "nodes", "[", "n", ",", "m", "]", ")", "for", "n", "in", "nodes_ids", "for", "m", "in", "feature_ids", "\n", ")", "\n", "\n", "# Determining the Critical Resource Margin", "\n", "mdl", ".", "add_constraints", "(", "\n", "omega_node", "[", "n", "]", "<=", "float", "(", "nodes", "[", "n", ",", "m", "]", ")", "-", "mdl", ".", "sum", "(", "float", "(", "resources", "[", "x", ",", "m", "]", ")", "*", "is_resource_placed_at_node", "[", "x", ",", "n", "]", "for", "x", "in", "resources_ids", ")", "for", "n", "in", "nodes_ids", "for", "m", "in", "feature_ids", "\n", ")", "\n", "\n", "# Most critical Resource", "\n", "mdl", ".", "add_constraints", "(", "\n", "omega_max", "<=", "omega_node", "[", "n", "]", "for", "n", "in", "nodes_ids", "\n", ")", "\n", "\n", "# Objective function", "\n", "if", "self", ".", "greedy_with_critical_resource", ":", "\n", "# Greedy + Most Critical Resource", "\n", "            ", "mdl", ".", "maximize", "(", "mdl", ".", "sum", "(", "is_resource_executed", "[", "x", "]", "for", "x", "in", "resources_ids", ")", "+", "omega_max", "/", "self", ".", "normalization_factor", ")", "\n", "", "else", ":", "\n", "# Greedy", "\n", "            ", "mdl", ".", "maximize", "(", "mdl", ".", "sum", "(", "is_resource_executed", "[", "x", "]", "for", "x", "in", "resources_ids", ")", ")", "\n", "# mdl.maximize(mdl.sum(is_resource_executed[x] for x in resources_ids)) # Greedy", "\n", "# mdl.print_information()", "\n", "", "mdl", ".", "solve", "(", ")", "\n", "# mdl.print_solution(print_zeros=True)", "\n", "\n", "# Parse solution", "\n", "placements", "=", "mdl", ".", "solution", ".", "get_value_dict", "(", "is_resource_placed_at_node", ")", "\n", "taken_items", "=", "np", ".", "zeros", "(", "[", "len", "(", "resources_ids", ")", "]", ",", "dtype", "=", "'int8'", ")", "\n", "\n", "for", "entry", "in", "placements", ":", "\n", "            ", "if", "placements", "[", "entry", "]", "==", "1", ":", "\n", "# Mark as taken", "\n", "                ", "taken_items", "[", "entry", "[", "0", "]", "]", "=", "1", "\n", "\n", "# Insert into the node", "\n", "node_list", "[", "entry", "[", "1", "]", "]", ".", "insert_req", "(", "\n", "resource_list", "[", "entry", "[", "0", "]", "]", "\n", ")", "\n", "\n", "# Place the rejected into EOS", "\n", "", "", "for", "index", ",", "taken", "in", "enumerate", "(", "taken_items", ")", ":", "\n", "            ", "if", "taken", "==", "0", ":", "\n", "                ", "EOS_NODE", ".", "insert_req", "(", "\n", "resource_list", "[", "index", "]", "\n", ")", "\n", "\n", "# Store a reference with the solution", "\n", "", "", "self", ".", "solution", "=", "[", "EOS_NODE", "]", "+", "node_list", "\n", "\n", "# Store the status code of the solution", "\n", "# More info about CPLEX status codes here: https://www.ibm.com/docs/en/icos/12.8.0.0?topic=micclcarm-solution-status-codes-by-number-in-cplex-callable-library-c-api", "\n", "if", "mdl", ".", "solution", ".", "solve_details", ".", "status_code", "==", "101", ":", "# 101 is MIP Optimal", "\n", "            ", "self", ".", "is_optimal", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.csv_writer.log_testing_stats": [[3, 36], ["open", "fp.write", "fp.close", "list", "fp.write", "entry.keys", "list", "entry.values", "keys[].split", "keys[].split", "keys[].split", "keys[].split"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close"], ["from", "typing", "import", "List", "\n", "\n", "def", "log_testing_stats", "(", "global_stats", ",", "folder", ",", "file_name", ")", ":", "\n", "\n", "    ", "with", "open", "(", "f\"{folder}/{file_name}.csv\"", ",", "'w'", ")", "as", "fp", ":", "\n", "# First passage to generate the header", "\n", "        ", "header", "=", "''", "\n", "\n", "# Place Node and Resource stats into header", "\n", "for", "entry", "in", "global_stats", "[", "0", "]", ":", "\n", "            ", "if", "entry", "!=", "'instance'", ":", "\n", "                ", "header", "=", "header", "+", "f\"{entry};\"", "\n", "\n", "# Place Heuristic method name into header", "\n", "", "", "for", "entry", "in", "global_stats", "[", "0", "]", "[", "'instance'", "]", ":", "\n", "            ", "keys", "=", "list", "(", "entry", ".", "keys", "(", ")", ")", "\n", "header", "=", "header", "+", "f\"{' '.join(keys[0].split('_'))};{' '.join(keys[1].split('_'))};{' '.join(keys[2].split('_'))};{' '.join(keys[3].split('_'))};\"", "\n", "", "fp", ".", "write", "(", "f\"{header}\\n\"", ")", "\n", "\n", "\n", "for", "instance_stats", "in", "global_stats", ":", "\n", "            ", "data", "=", "f\"{instance_stats['test_instance']};\"", "f\"{instance_stats['bin_sample_size']};\"", "f\"{instance_stats['bin_min_value']};\"", "f\"{instance_stats['bin_max_value']};\"", "f\"{instance_stats['item_sample_size']};\"", "\n", "\n", "for", "entry", "in", "instance_stats", "[", "'instance'", "]", ":", "\n", "                ", "reward", ",", "empty_nodes", ",", "num_rejected_items", ",", "rejected_value", "=", "list", "(", "entry", ".", "values", "(", ")", ")", "\n", "# dominant = round_half_up(dominant, 2)", "\n", "data", "=", "data", "+", "f\"{reward[0]:.3f};{empty_nodes};{num_rejected_items};{rejected_value[0]:.3f};\"", "\n", "# print(data)", "\n", "", "fp", ".", "write", "(", "f\"{data}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.csv_writer.log_training_stats": [[37, 66], ["fp.close", "open", "fp.write", "range", "len", "fp.write"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close"], ["", "fp", ".", "close", "(", ")", "\n", "\n", "", "", "def", "log_training_stats", "(", "data", ",", "location", ",", "file_name", ")", ":", "\n", "    ", "average_rewards_buffer", ",", "min_rewards_buffer", ",", "max_rewards_buffer", ",", "value_loss_buffer", ",", "bins_policy_loss_buffer", ",", "bins_total_loss_buffer", ",", "bins_entropy_buffer", "=", "data", "\n", "\n", "with", "open", "(", "f\"{location}/{file_name}.csv\"", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "header", "=", "'Step;Avg Reward;Max Reward;Min Reward;Value Loss;Bin Entropy;Total Bin Loss;Bin Policy Loss'", "\n", "\n", "fp", ".", "write", "(", "f'{header}\\n'", ")", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "average_rewards_buffer", ")", ")", ":", "\n", "            ", "avg", "=", "average_rewards_buffer", "[", "index", "]", "\n", "min", "=", "min_rewards_buffer", "[", "index", "]", "\n", "max", "=", "max_rewards_buffer", "[", "index", "]", "\n", "v_loss", "=", "value_loss_buffer", "[", "index", "]", "\n", "\n", "b_policy_loss", "=", "bins_policy_loss_buffer", "[", "index", "]", "\n", "b_total_loss", "=", "bins_total_loss_buffer", "[", "index", "]", "\n", "b_entr", "=", "bins_entropy_buffer", "[", "index", "]", "\n", "\n", "data", "=", "f\"{index};{avg:.3f};{max:.3f};{min:.3f};{v_loss:.3f};{b_entr:.3f};{b_total_loss:.3f};{b_policy_loss:.3f}\"", "\n", "\n", "fp", ".", "write", "(", "f\"{data}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.csv_writer.export_to_csv": [[67, 99], ["fp.close", "open", "fp.write", "environment.custom.resource_v3.misc.utils.compute_stats", "range", "fp.write", "len"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_stats"], ["", "", "fp", ".", "close", "(", ")", "\n", "\n", "", "def", "export_to_csv", "(", "history", ",", "max_steps", ",", "method", ":", "str", ",", "location", ")", "->", "None", ":", "\n", "        ", "with", "open", "(", "f\"{location}_{method}.csv\"", ",", "'w'", ")", "as", "fp", ":", "\n", "\n", "            ", "header", "=", "f'Method;Step;Node;CPU;RAM;MEM;Delta;Rejected;Empty Nodes\\n'", "\n", "fp", ".", "write", "(", "header", ")", "\n", "for", "history_instance", "in", "history", ":", "\n", "\n", "                ", "delta", ",", "rejected", ",", "empty_nodes", "=", "compute_stats", "(", "history_instance", ")", "\n", "\n", "for", "node", "in", "history_instance", ":", "\n", "                    ", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "\n", "                        ", "try", ":", "\n", "                            ", "current_CPU", "=", "node", ".", "CPU_history", "[", "step", "]", "\n", "current_RAM", "=", "node", ".", "RAM_history", "[", "step", "]", "\n", "current_MEM", "=", "node", ".", "MEM_history", "[", "step", "]", "\n", "\n", "", "except", ":", "\n", "                            ", "last_step_in_node", "=", "len", "(", "node", ".", "CPU_history", ")", "-", "1", "\n", "current_CPU", "=", "node", ".", "CPU_history", "[", "last_step_in_node", "]", "\n", "current_RAM", "=", "node", ".", "RAM_history", "[", "last_step_in_node", "]", "\n", "current_MEM", "=", "node", ".", "MEM_history", "[", "last_step_in_node", "]", "\n", "\n", "", "CPU_load", "=", "current_CPU", "\n", "RAM_load", "=", "current_RAM", "\n", "MEM_load", "=", "current_MEM", "\n", "\n", "node_info", "=", "f'{method};{step};{node.id};{CPU_load[0]:.2f};{RAM_load[0]:.2f};{MEM_load[0]:.2f};{delta[0]:.2f};{rejected};{empty_nodes}\\n'", "\n", "# print(node_info)", "\n", "fp", ".", "write", "(", "node_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up": [[19, 23], ["numpy.floor"], "function", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_remaining_resources": [[36, 43], ["utils.round_half_up"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], ["\n", "# add the mask to the scaled tensor.", "\n", "if", "mask", "is", "not", "None", ":", "\n", "    ", "scaled_attention_logits", "+=", "(", "mask", "*", "-", "1e9", ")", "\n", "\n", "# softmax is normalized on the last axis (seq_len_k) so that the scores", "\n", "# add up to 1.", "\n", "", "attention_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scaled_attention_logits", ",", "axis", "=", "-", "1", ")", "# (..., seq_len_q, seq_len_k)", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.bins_eos_checker": [[24, 35], ["tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.equal", "tensorflow.equal"], "function", ["None"], ["\n", "\n", "matmul_qk", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# (..., seq_len_q, seq_len_k)", "\n", "\n", "# scale matmul_qk", "\n", "dk", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_max_steps": [[44, 55], ["max", "steps_list.append", "len"], "function", ["None"], ["\n", "output", "=", "tf", ".", "matmul", "(", "attention_weights", ",", "v", ")", "# (..., seq_len_q, depth_v)", "\n", "\n", "return", "output", ",", "attention_weights", "\n", "\n", "", "def", "get_initializer", "(", "dims", ":", "int", ",", "use_default_initializer", ":", "bool", ")", ":", "\n", "    ", "if", "use_default_initializer", ":", "\n", "# Default initializer. More info: https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense", "\n", "      ", "return", "'glorot_uniform'", "\n", "\n", "# From https://arxiv.org/pdf/1803.08475.pdf", "\n", "# Page 6. Section 5 Hyperparameters", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_stats": [[56, 84], ["len", "min", "min", "min", "min", "nodes_cpu_stats.append", "nodes_ram_stats.append", "nodes_mem_stats.append", "len"], "function", ["None"], ["", "value", "=", "1", "/", "math", ".", "sqrt", "(", "dims", ")", "\n", "\n", "init", "=", "tf", ".", "keras", ".", "initializers", ".", "RandomUniform", "(", "\n", "minval", "=", "-", "1", "*", "value", ",", "\n", "maxval", "=", "value", ",", "\n", "seed", "=", "None", "\n", ")", "\n", "\n", "return", "init", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.gather_stats_from_solutions": [[100, 160], ["utils.compute_stats", "utils.round_half_up", "stats.append", "numpy.array", "numpy.array", "utils.compute_stats", "max", "min", "stats.append", "utils.round_half_up"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_stats", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_stats", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.generate_file_name": [[161, 172], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.reshape_into_horizontal_format": [[7, 12], ["tensorflow.reshape", "tensorflow.transpose"], "function", ["None"], ["\n", "return", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dff", ",", "activation", "=", "'relu'", ",", "kernel_initializer", "=", "initializer", ")", ",", "# (batch_size, seq_len, dff)", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "kernel_initializer", "=", "initializer", ")", "# (batch_size, seq_len, d_model)", "\n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.reshape_into_vertical_format": [[13, 18], ["tensorflow.transpose", "tensorflow.reshape"], "function", ["None"], ["", "def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.num_overloaded_nodes": [[85, 99], ["min"], "function", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.optimum_solver.create_data_model": [[5, 18], ["list", "len", "list", "range", "range", "len"], "function", ["None"], ["def", "create_data_model", "(", ")", ":", "\n", "    ", "\"\"\"Create the data for the example.\"\"\"", "\n", "data", "=", "{", "}", "\n", "weights", "=", "[", "48", ",", "30", ",", "42", ",", "36", ",", "36", ",", "48", ",", "42", ",", "42", ",", "36", ",", "24", ",", "30", ",", "30", ",", "42", ",", "36", ",", "36", "]", "\n", "values", "=", "[", "10", ",", "30", ",", "25", ",", "50", ",", "35", ",", "30", ",", "15", ",", "40", ",", "30", ",", "35", ",", "45", ",", "10", ",", "20", ",", "30", ",", "25", "]", "\n", "data", "[", "'weights'", "]", "=", "weights", "\n", "data", "[", "'values'", "]", "=", "values", "\n", "data", "[", "'items'", "]", "=", "list", "(", "range", "(", "len", "(", "weights", ")", ")", ")", "\n", "data", "[", "'num_items'", "]", "=", "len", "(", "weights", ")", "\n", "num_bins", "=", "5", "\n", "data", "[", "'bins'", "]", "=", "list", "(", "range", "(", "num_bins", ")", ")", "\n", "data", "[", "'bin_capacities'", "]", "=", "[", "100", ",", "100", ",", "100", ",", "100", ",", "100", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.optimum_solver.solver": [[20, 77], ["ortools.linear_solver.pywraplp.Solver", "pywraplp.Solver.Objective", "solver.Objective.SetMaximization", "pywraplp.Solver.Solve", "solver.Objective.Value", "pywraplp.Solver.Add", "pywraplp.Solver.Add", "print", "pywraplp.Solver.IntVar", "solver.Objective.SetCoefficient", "print", "print", "sum", "sum", "solver.Objective.Value", "print", "print", "print", "print", "x[].solution_value", "print"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "solver", "(", "data", ",", "print_details", "=", "True", ")", ":", "\n", "# data = create_data_model()", "\n", "\n", "# Create the mip solver with the CBC backend.", "\n", "    ", "solver", "=", "pywraplp", ".", "Solver", "(", "'multiple_knapsack_mip'", ",", "\n", "pywraplp", ".", "Solver", ".", "CBC_MIXED_INTEGER_PROGRAMMING", ")", "\n", "\n", "# Variables", "\n", "# x[i, j] = 1 if item i is packed in bin j.", "\n", "x", "=", "{", "}", "\n", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "        ", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "            ", "x", "[", "(", "i", ",", "j", ")", "]", "=", "solver", ".", "IntVar", "(", "0", ",", "1", ",", "'x_%i_%i'", "%", "(", "i", ",", "j", ")", ")", "\n", "\n", "# Constraints", "\n", "# Each item can be in at most one bin.", "\n", "", "", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "        ", "solver", ".", "Add", "(", "sum", "(", "x", "[", "i", ",", "j", "]", "for", "j", "in", "data", "[", "'bins'", "]", ")", "<=", "1", ")", "\n", "# The amount packed in each bin cannot exceed its capacity.", "\n", "", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "        ", "solver", ".", "Add", "(", "\n", "sum", "(", "x", "[", "(", "i", ",", "j", ")", "]", "*", "data", "[", "'weights'", "]", "[", "i", "]", "\n", "for", "i", "in", "data", "[", "'items'", "]", ")", "<=", "data", "[", "'bin_capacities'", "]", "[", "j", "]", ")", "\n", "\n", "# Objective", "\n", "", "objective", "=", "solver", ".", "Objective", "(", ")", "\n", "\n", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "        ", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "            ", "objective", ".", "SetCoefficient", "(", "x", "[", "(", "i", ",", "j", ")", "]", ",", "data", "[", "'values'", "]", "[", "i", "]", ")", "\n", "", "", "objective", ".", "SetMaximization", "(", ")", "\n", "\n", "status", "=", "solver", ".", "Solve", "(", ")", "\n", "\n", "if", "status", "==", "pywraplp", ".", "Solver", ".", "OPTIMAL", ":", "\n", "        ", "if", "print_details", ":", "\n", "            ", "print", "(", "'Total packed value:'", ",", "objective", ".", "Value", "(", ")", ")", "\n", "total_weight", "=", "0", "\n", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "                ", "bin_weight", "=", "0", "\n", "bin_value", "=", "0", "\n", "print", "(", "'Bin '", ",", "j", ",", "'\\n'", ")", "\n", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "                    ", "if", "x", "[", "i", ",", "j", "]", ".", "solution_value", "(", ")", ">", "0", ":", "\n", "                        ", "print", "(", "'Item'", ",", "i", ",", "'- weight:'", ",", "data", "[", "'weights'", "]", "[", "i", "]", ",", "' value:'", ",", "\n", "data", "[", "'values'", "]", "[", "i", "]", ")", "\n", "bin_weight", "+=", "data", "[", "'weights'", "]", "[", "i", "]", "\n", "bin_value", "+=", "data", "[", "'values'", "]", "[", "i", "]", "\n", "", "", "print", "(", "'Packed bin weight:'", ",", "bin_weight", ")", "\n", "print", "(", "'Packed bin value:'", ",", "bin_value", ")", "\n", "print", "(", ")", "\n", "total_weight", "+=", "bin_weight", "\n", "", "print", "(", "'Total packed weight:'", ",", "total_weight", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'The problem does not have an optimal solution.'", ")", "\n", "\n", "", "return", "objective", ".", "Value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.heuristic.solver": [[12, 34], ["heuristic.parse_input", "sorted", "sorted", "operator.attrgetter", "item.is_taken", "item.take", "backpack.add_item"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.heuristic_v2.parse_input", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.take"], ["def", "solver", "(", "problem", ",", "num_backpacks", ":", "int", ")", ":", "\n", "    ", "backpacks", ",", "items", "=", "parse_input", "(", "problem", ",", "num_backpacks", ")", "\n", "\n", "backpacks", ":", "List", "[", "Backpack", "]", "=", "sorted", "(", "backpacks", ",", "key", "=", "attrgetter", "(", "\"capacity\"", ")", ",", "reverse", "=", "True", ")", "\n", "items", ":", "List", "[", "Item", "]", "=", "sorted", "(", "items", ",", "key", "=", "lambda", "item", ":", "item", ".", "ratio", ",", "reverse", "=", "True", ")", "\n", "\n", "total_value", "=", "0", "\n", "for", "backpack", "in", "backpacks", ":", "\n", "        ", "for", "item", "in", "items", ":", "\n", "            ", "if", "not", "item", ".", "is_taken", "(", ")", ":", "\n", "                ", "if", "item", ".", "weight", "+", "backpack", ".", "current_load", "<=", "backpack", ".", "capacity", ":", "\n", "                    ", "item", ".", "take", "(", ")", "# Mark as taken", "\n", "\n", "# Add to backpack. For stats", "\n", "backpack", ".", "add_item", "(", "item", ".", "id", ",", "item", ".", "weight", ",", "item", ".", "value", ")", "\n", "\n", "# Add to the total value", "\n", "total_value", "+=", "item", ".", "value", "\n", "\n", "# print_backpack_stats(backpacks)", "\n", "\n", "", "", "", "", "return", "total_value", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.heuristic.parse_input": [[35, 53], ["enumerate", "enumerate", "backpacks.append", "items.append", "environment.custom.knapsack.backpack.Backpack", "environment.custom.knapsack.item.Item"], "function", ["None"], ["", "def", "parse_input", "(", "problem", ",", "num_backpacks", ")", "->", "Tuple", "[", "List", "[", "Backpack", "]", ",", "List", "[", "Item", "]", "]", ":", "\n", "    ", "backpacks", "=", "[", "]", "\n", "for", "index", ",", "bps", "in", "enumerate", "(", "problem", "[", ":", "num_backpacks", "]", ")", ":", "\n", "        ", "backpacks", ".", "append", "(", "\n", "Backpack", "(", "index", ",", "bps", "[", "0", "]", ")", "\n", ")", "\n", "\n", "", "items", "=", "[", "]", "\n", "for", "index", ",", "itm", "in", "enumerate", "(", "problem", "[", "num_backpacks", ":", "]", ")", ":", "\n", "        ", "items", ".", "append", "(", "\n", "Item", "(", "\n", "index", ",", "\n", "weight", "=", "itm", "[", "0", "]", ",", "\n", "value", "=", "itm", "[", "1", "]", "\n", ")", "\n", ")", "\n", "\n", "", "return", "backpacks", ",", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.heuristic.print_backpack_stats": [[54, 56], ["backpack.print"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print_backpack_stats", "(", "backpacks", ":", "List", "[", "Backpack", "]", ")", ":", "\n", "    ", "for", "backpack", "in", "backpacks", ":", "backpack", ".", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.heuristic.validate_solution": [[57, 63], ["backpack.is_valid"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.is_valid"], ["", "def", "validate_solution", "(", "backpacks", ":", "List", "[", "Backpack", "]", ")", ":", "\n", "    ", "for", "backpack", "in", "backpacks", ":", "\n", "        ", "if", "backpack", ".", "is_valid", "(", ")", "==", "False", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.vehicle.Vehicle.__init__": [[4, 22], ["super().__init__", "vehicle.Vehicle.add_node"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.vehicle.Vehicle.add_node"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "depot_x", ",", "depot_y", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "Vehicle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "depot_x", "=", "depot_x", "\n", "self", ".", "depot_y", "=", "depot_y", "\n", "\n", "self", ".", "current_x", "=", "depot_x", "\n", "self", ".", "current_y", "=", "depot_y", "\n", "\n", "self", ".", "current_load", "=", "0", "\n", "self", ".", "route_distance", "=", "0", "\n", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "\n", "# Add the depot. All vehicles start from there", "\n", "self", ".", "add_node", "(", "0", ",", "depot_x", ",", "depot_y", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.vehicle.Vehicle.add_node": [[23, 49], ["round", "vehicle.Vehicle.nodes.append", "math.sqrt"], "methods", ["None"], ["", "def", "add_node", "(", "self", ",", "node_id", ",", "x", ",", "y", ",", "demand", ")", ":", "\n", "        ", "node", "=", "{", "\n", "\"id\"", ":", "node_id", ",", "\n", "\"x\"", ":", "x", ",", "\n", "\"y\"", ":", "y", ",", "\n", "\"demand\"", ":", "demand", "\n", "}", "\n", "\n", "assert", "self", ".", "capacity", ">=", "self", ".", "current_load", "+", "demand", ",", "f'Vehicle {self.id} is overloaded. Maximum capacity: {self.capacity} || Current Load {self.current_load} ||  Item Weight: {demand}'", "\n", "\n", "self", ".", "current_load", "+=", "demand", "\n", "\n", "# Compute route distance between current vehicle location and the node", "\n", "xd", "=", "self", ".", "current_x", "-", "x", "\n", "yd", "=", "self", ".", "current_y", "-", "y", "\n", "\n", "distance", "=", "round", "(", "sqrt", "(", "xd", "*", "xd", "+", "yd", "*", "yd", ")", ")", "\n", "\n", "# Update the coords of the vehicle", "\n", "self", ".", "current_x", "=", "x", "\n", "self", ".", "current_y", "=", "y", "\n", "\n", "self", ".", "route_distance", "+=", "distance", "\n", "\n", "self", ".", "nodes", ".", "append", "(", "node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.vehicle.Vehicle.reset": [[50, 56], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_load", "=", "0", "\n", "self", ".", "route_distance", "=", "0", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "current_x", "=", "self", ".", "depot_x", "\n", "self", ".", "current_y", "=", "self", ".", "current_y", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.vehicle.Vehicle.print": [[57, 63], ["vehicle.Vehicle.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "print", "(", "f'Vehicle ID: {self.id} | Maximum Capacity: {self.capacity} | Current Load: {self.current_load} | Route Distance: {self.route_distance} | Current Location X {self.current_x} | Y {self.current_y}'", ")", "\n", "\n", "print", "(", "f'Route'", ")", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "            ", "print", "(", "f\"Node X {node['x']} \\t|| Node Y {node['y']} \\t|| Demand {node['demand']}\"", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.__init__": [[15, 49], ["environment.base.base.BaseEnvironment.__init__", "environment.custom.vrp.datasets.parser.load_problem", "math.ceil", "env.CVRP.generate_dataset", "list", "list", "env.CVRP.generate_batch", "env.CVRP.generate_masks", "range", "range"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.load_problem", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_dataset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks"], ["\n", "", "def", "state", "(", "self", ")", ":", "\n", "# Return current state", "\n", "        ", "return", "self", ".", "env", ".", "state", "\n", "\n", "", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "", "def", "sample_action", "(", "self", ")", ":", "\n", "# Return random action", "\n", "        ", "return", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "\n", "", "def", "get_action_space", "(", "self", ")", ":", "\n", "# Returns action space", "\n", "        ", "if", "hasattr", "(", "self", ".", "env", ".", "action_space", ",", "'n'", ")", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "def", "seed", "(", "self", ",", "num", ")", ":", "\n", "        ", "self", ".", "env", ".", "seed", "(", "num", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "get_observation_space", "(", "self", ")", ":", "\n", "# Returns observation space", "\n", "        ", "return", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "add_stats_to_agent_config", "(", "self", ",", "agent_config", ")", ":", "\n", "        ", "agent_config", "[", "'action_space'", "]", "=", "self", ".", "get_action_space", "(", ")", "\n", "agent_config", "[", "'observation_space'", "]", "=", "self", ".", "get_observation_space", "(", ")", "\n", "\n", "return", "agent_config", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.reset": [[50, 60], ["env.CVRP.generate_batch", "env.CVRP.generate_masks", "env.CVRP.state"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], ["", "def", "print_stats", "(", "self", ")", ":", "\n", "        ", "print", "(", "'---------Environment Stats-----------------'", ")", "\n", "print", "(", "f'Name: \"{self.name}\"'", ")", "\n", "print", "(", "'___________________________________________'", ")", "\n", "print", "(", "'Action Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "action_space", ")", "\n", "\n", "print", "(", "'Observation Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ")", "\n", "\n", "print", "(", "'Observation Space Higher Bound'", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.state": [[61, 66], ["env.CVRP.batch.copy", "env.CVRP.backpack_net_mask.copy", "env.CVRP.item_net_mask.copy", "env.CVRP.mha_used_mask.copy"], "methods", ["None"], ["print", "(", "self", ".", "env", ".", "observation_space", ".", "high", ")", "\n", "\n", "print", "(", "'Observation Space Lower Bound'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ".", "low", ")", "\n", "\n", "print", "(", "'Maximum Episode Steps'", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.step": [[67, 147], ["numpy.zeros", "range", "round", "history_entry.add_node", "env.CVRP.backpack_net_mask.copy", "env.CVRP.item_net_mask.copy", "env.CVRP.mha_used_mask.copy", "env.CVRP.batch.copy", "math.sqrt", "str"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.vehicle.Vehicle.add_node"], ["print", "(", "self", ".", "env", ".", "spec", ".", "max_episode_steps", ")", "\n", "print", "(", "'-------------------------------------------'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.generate_batch": [[148, 200], ["numpy.zeros", "range", "numpy.random.shuffle", "range", "numpy.random.shuffle", "range", "history.append", "node_sample_ids.pop", "vehicle_sample_ids.pop", "environment.custom.vrp.vehicle.Vehicle", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.generate_masks": [[201, 226], ["numpy.zeros", "numpy.ones", "range", "numpy.zeros_like", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.add_stats_to_agent_config": [[227, 242], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.generate_dataset": [[243, 269], ["numpy.zeros", "enumerate", "numpy.zeros", "range", "numpy.zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.build_feasible_mask": [[270, 302], ["numpy.ones_like", "numpy.reshape", "tensorflow.cast", "tensorflow.maximum", "tensorflow.cast", "tensorflow.math.less"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.vrp.env.CVRP.print_history": [[303, 314], ["range", "print", "env.CVRP.history[].values", "print", "print", "vehicle.print", "len"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.datasets.parser.converter": [[7, 23], ["parser.find_problems_with_opt", "parser.parse_problem", "parser.parse_solution", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.datasets.parser.find_problems_with_opt", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.datasets.parser.parse_problem", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.datasets.parser.parse_solution"], ["def", "converter", "(", "dir_path", ")", ":", "\n", "    ", "prob_sol_pair", "=", "find_problems_with_opt", "(", "dir_path", ")", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "prob_name", ",", "sol_name", "in", "prob_sol_pair", ":", "\n", "        ", "p", "=", "parse_problem", "(", "dir_path", ",", "prob_name", ")", "\n", "s", "=", "parse_solution", "(", "dir_path", ",", "sol_name", ")", "\n", "entry", "=", "{", "\n", "'problem'", ":", "p", ",", "\n", "'solution'", ":", "s", "\n", "}", "\n", "# dataset.append(entry)", "\n", "with", "open", "(", "f'{dir_path}/{prob_name}.json'", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "entry", ",", "fp", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.datasets.parser.parse_solution": [[24, 48], ["open", "line.split.split", "len", "len", "print", "route_list.append", "line[].lower", "int", "route.append", "int"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "parse_solution", "(", "dir_path", ",", "sol_name", ")", ":", "\n", "    ", "file", "=", "open", "(", "f'{dir_path}/{sol_name}'", ",", "'r'", ")", "\n", "\n", "cost", "=", "-", "1", "\n", "route_list", "=", "[", "]", "\n", "for", "line", "in", "file", ":", "\n", "        ", "line", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "            ", "break", "\n", "", "if", "line", "[", "0", "]", "==", "\"Route\"", ":", "\n", "            ", "route", "=", "[", "]", "\n", "print", "(", "line", "[", "2", ":", "]", ")", "\n", "for", "node_id", "in", "line", "[", "2", ":", "]", ":", "\n", "                ", "route", ".", "append", "(", "int", "(", "node_id", ")", ")", "\n", "", "route_list", ".", "append", "(", "route", ")", "\n", "", "if", "line", "[", "0", "]", ".", "lower", "(", ")", "==", "\"cost\"", ":", "\n", "            ", "cost", "=", "int", "(", "line", "[", "-", "1", "]", ")", "\n", "\n", "", "", "solution", "=", "{", "\n", "\"cost\"", ":", "cost", ",", "\n", "\"num_routes\"", ":", "len", "(", "route_list", ")", ",", "\n", "\"routes\"", ":", "route_list", ",", "\n", "}", "\n", "return", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.datasets.parser.parse_problem": [[49, 138], ["open", "line.split.split", "comment.join.join", "int", "int", "nodes.append", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "parse_problem", "(", "dir_path", ",", "prob_name", ")", ":", "\n", "    ", "file", "=", "open", "(", "f'{dir_path}/{prob_name}'", ",", "'r'", ")", "\n", "# line_num = 0", "\n", "NODE_LOC", "=", "False", "\n", "DEMAND_SEC", "=", "False", "\n", "DEPOT_SEC", "=", "False", "\n", "\n", "name", "=", "''", "\n", "comment", "=", "' '", "\n", "prob_type", "=", "''", "\n", "dimension", "=", "-", "1", "\n", "edge_weight_type", "=", "''", "\n", "nodes", "=", "[", "]", "\n", "vehicle_capacity", "=", "-", "1", "# Will be filled during parsing", "\n", "total_demand", "=", "0", "\n", "\n", "for", "line", "in", "file", ":", "\n", "        ", "line", "=", "line", ".", "split", "(", ")", "\n", "if", "line", "[", "-", "1", "]", "==", "'EOF'", ":", "\n", "            ", "break", "\n", "", "if", "line", "[", "0", "]", "==", "'NAME'", ":", "\n", "            ", "name", "=", "line", "[", "-", "1", "]", "\n", "", "if", "line", "[", "0", "]", "==", "'COMMENT'", ":", "\n", "            ", "comment", "=", "comment", ".", "join", "(", "line", "[", "2", ":", "]", ")", "\n", "continue", "\n", "", "if", "line", "[", "0", "]", "==", "'TYPE'", ":", "\n", "            ", "prob_type", "=", "line", "[", "-", "1", "]", "\n", "", "if", "line", "[", "0", "]", "==", "'DIMENSION'", ":", "\n", "            ", "dimension", "=", "int", "(", "line", "[", "-", "1", "]", ")", "\n", "continue", "\n", "", "if", "line", "[", "0", "]", "==", "'EDGE_WEIGHT_TYPE'", ":", "\n", "            ", "edge_weight_type", "=", "line", "[", "-", "1", "]", "\n", "continue", "\n", "", "if", "line", "[", "0", "]", "==", "'CAPACITY'", ":", "\n", "# print(line[-1])", "\n", "            ", "vehicle_capacity", "=", "int", "(", "line", "[", "-", "1", "]", ")", "\n", "continue", "\n", "", "if", "line", "[", "-", "1", "]", "==", "'NODE_COORD_SECTION'", ":", "\n", "            ", "NODE_LOC", "=", "True", "\n", "DEMAND_SEC", "=", "False", "\n", "DEPOT_SEC", "=", "False", "\n", "continue", "\n", "", "if", "line", "[", "-", "1", "]", "==", "'DEMAND_SECTION'", ":", "\n", "            ", "NODE_LOC", "=", "False", "\n", "DEMAND_SEC", "=", "True", "\n", "DEPOT_SEC", "=", "False", "\n", "continue", "\n", "", "if", "line", "[", "-", "1", "]", "==", "'DEPOT_SECTION'", ":", "\n", "            ", "NODE_LOC", "=", "False", "\n", "DEMAND_SEC", "=", "False", "\n", "DEPOT_SEC", "=", "True", "\n", "continue", "\n", "\n", "", "if", "NODE_LOC", ":", "\n", "            ", "node", "=", "{", "\n", "\"id\"", ":", "int", "(", "line", "[", "0", "]", ")", ",", "\n", "\"x\"", ":", "int", "(", "line", "[", "1", "]", ")", ",", "\n", "\"y\"", ":", "int", "(", "line", "[", "2", "]", ")", ",", "\n", "\"demand\"", ":", "-", "1", ",", "# Will be filled later", "\n", "'type'", ":", "NODE", "\n", "}", "\n", "nodes", ".", "append", "(", "node", ")", "\n", "\n", "", "if", "DEMAND_SEC", ":", "\n", "            ", "id", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "node", "=", "nodes", "[", "id", "-", "1", "]", "# In the datasets the indexes start at 1 in", "\n", "demand", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "total_demand", "+=", "demand", "\n", "node", "[", "'demand'", "]", "=", "demand", "\n", "\n", "", "if", "DEPOT_SEC", ":", "\n", "            ", "if", "(", "line", "[", "0", "]", "!=", "'-1'", ")", ":", "# -1 is the EOL of depot section", "\n", "                ", "id", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "node", "=", "nodes", "[", "id", "-", "1", "]", "# In the datasets the indexes start at 1 in", "\n", "node", "[", "'type'", "]", "=", "DEPOT", "\n", "\n", "# line_num += 1", "\n", "", "", "", "problem", "=", "{", "\n", "\"name\"", ":", "name", ",", "\n", "\"comment\"", ":", "comment", ",", "\n", "\"type\"", ":", "prob_type", ",", "\n", "\"dimension\"", ":", "dimension", ",", "\n", "\"edge_weight_type\"", ":", "edge_weight_type", ",", "\n", "\"capacity\"", ":", "vehicle_capacity", ",", "\n", "\"total_demand\"", ":", "total_demand", ",", "\n", "\"nodes\"", ":", "nodes", ",", "\n", "}", "\n", "\n", "return", "problem", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.datasets.parser.find_problems_with_opt": [[139, 158], ["os.listdir", "file_name.split", "os.listdir.index", "prob_sol_pair.append"], "function", ["None"], ["", "def", "find_problems_with_opt", "(", "dir_path", ")", ":", "\n", "    ", "prob_sol_pair", "=", "[", "]", "\n", "file_list", "=", "listdir", "(", "dir_path", ")", "\n", "for", "file_name", "in", "file_list", ":", "\n", "        ", "file_type", "=", "file_name", ".", "split", "(", "\".\"", ")", "\n", "if", "file_type", "[", "-", "1", "]", "==", "'vrp'", ":", "\n", "            ", "try", ":", "\n", "                ", "opt_index", "=", "file_list", ".", "index", "(", "f'opt-{file_type[0]}'", ")", "\n", "p_name", "=", "file_name", "\n", "sol_name", "=", "file_list", "[", "opt_index", "]", "\n", "\n", "prob_sol_pair", ".", "append", "(", "\n", "(", "p_name", ",", "sol_name", ")", "\n", ")", "\n", "", "except", "ValueError", "as", "identifier", ":", "\n", "# print(identifier)", "\n", "                ", "pass", "\n", "\n", "", "", "", "return", "prob_sol_pair", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.datasets.parser.load_problem": [[159, 174], ["os.listdir", "file_name.split", "open", "json.load", "problem_instances.append"], "function", ["None"], ["", "def", "load_problem", "(", "dir_path", ",", "prob_name", "=", "None", ")", ":", "\n", "    ", "problem_instances", "=", "[", "]", "\n", "file_list", "=", "listdir", "(", "dir_path", ")", "\n", "for", "file_name", "in", "file_list", ":", "\n", "        ", "file_type", "=", "file_name", ".", "split", "(", "\".\"", ")", "\n", "if", "file_type", "[", "-", "1", "]", "==", "'json'", ":", "\n", "            ", "with", "open", "(", "f'{dir_path}/{file_name}'", ")", "as", "json_file", ":", "\n", "                ", "problem", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "if", "problem", "[", "'problem'", "]", "[", "'name'", "]", "==", "prob_name", ":", "\n", "                    ", "return", "problem", "[", "'problem'", "]", ",", "problem", "[", "'solution'", "]", "\n", "\n", "", "problem_instances", ".", "append", "(", "problem", ")", "\n", "\n", "", "", "", "return", "problem_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.__init__": [[4, 19], ["None"], "methods", ["None"], ["class", "Item", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "batch_id", ",", "\n", "id", ",", "\n", "item_representation", ")", ":", "\n", "        ", "super", "(", "Item", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_id", "=", "batch_id", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "weight", "=", "np", ".", "array", "(", "[", "item_representation", "[", "0", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "value", "=", "np", ".", "array", "(", "[", "item_representation", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "self", ".", "ratio", "=", "self", ".", "value", "/", "self", ".", "weight", "\n", "\n", "", "def", "get_tensor_rep", "(", "self", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken": [[20, 22], ["None"], "methods", ["None"], ["        ", "return", "np", ".", "asanyarray", "(", "[", "\n", "self", ".", "weight", ",", "\n", "self", ".", "value", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.take": [[23, 27], ["ValueError"], "methods", ["None"], ["]", ")", ".", "flatten", "(", ")", "\n", "\n", "", "def", "print", "(", "self", ")", ":", "# pragma: no cover", "\n", "        ", "print", "(", "f'Batch: {self.batch_id} \\t| ID : {self.id:02d} \\t| Weight: {self.weight[0]:1f} \\t| RAM: {self.value[0]:1f} \\t'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.place_back": [[28, 32], ["ValueError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.print_stats": [[33, 35], ["print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.backpack.Backpack.__init__": [[3, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "Backpack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "current_load", "=", "0", "\n", "self", ".", "current_value", "=", "0", "\n", "\n", "self", ".", "resources", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.backpack.Backpack.add_resource": [[13, 28], ["backpack.Backpack.resources.append"], "methods", ["None"], ["", "def", "add_resource", "(", "self", ",", "id", ",", "weight", ",", "value", ")", ":", "\n", "        ", "item", "=", "{", "\n", "'id'", ":", "id", ",", "\n", "'weight'", ":", "weight", ",", "\n", "'value'", ":", "value", "\n", "}", "\n", "\n", "if", "(", "self", ".", "id", "!=", "0", ")", ":", "\n", "            ", "assert", "self", ".", "capacity", ">=", "self", ".", "current_load", "+", "weight", ",", "f'Backpack {self.id} is overloaded. Maximum capacity: {self.capacity} || Item Weight: {weight}'", "\n", "\n", "self", ".", "current_load", "=", "self", ".", "current_load", "+", "weight", "\n", "self", ".", "current_value", "=", "self", ".", "current_value", "+", "value", "\n", "\n", "", "self", ".", "resources", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.backpack.Backpack.reset": [[29, 32], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_load", "=", "0", "\n", "self", ".", "resources", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.backpack.Backpack.print": [[33, 40], ["backpack.Backpack.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "print", "(", "f'Backpack ID: {self.id} | Maximum Capacity: {self.capacity} | Current Load: {self.current_load} | Backpack Value: {self.current_value}'", ")", "\n", "\n", "print", "(", "f'Items in the backpack:'", ")", "\n", "if", "len", "(", "self", ".", "resources", ")", "==", "0", ":", "print", "(", "'<Empty>'", ")", "\n", "for", "item", "in", "self", ".", "resources", ":", "\n", "            ", "print", "(", "f'ID: {item[\"id\"]} | Weight {item[\"weight\"]} | Value {item[\"value\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.backpack.Backpack.is_valid": [[41, 55], ["None"], "methods", ["None"], ["", "", "def", "is_valid", "(", "self", ")", ":", "\n", "        ", "total_load", "=", "0", "\n", "for", "i", "in", "self", ".", "resources", ":", "\n", "            ", "total_load", "+=", "i", "[", "'weight'", "]", "\n", "\n", "# By default EOS is always true", "\n", "", "if", "(", "self", ".", "id", "==", "0", ")", ":", "return", "True", "\n", "\n", "assert", "total_load", "==", "self", ".", "current_load", ",", "'Total weight of resources is different from current load of backpack'", "\n", "\n", "if", "total_load", ">", "self", ".", "capacity", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.plotter.plotter": [[10, 73], ["matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "env.convert_to_ortools_input", "opt_solver", "os.path.isdir", "os.makedirs", "range", "numpy.array", "numpy.array", "numpy.array", "range", "len", "len", "agent_name.upper", "file_name.replace"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.convert_to_ortools_input"], ["if", "not", "export_stats", ":", "\n", "        ", "return", "\n", "\n", "", "location", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "folder", ")", "\n", "\n", "plotter_leaning", "(", "data", ",", "location", ",", "'learning'", ",", "agent", ".", "name", ")", "\n", "\n", "plotter_rewards", "(", "data", ",", "location", ",", "'rewards'", ",", "agent", ".", "name", ")", "\n", "\n", "log_training_stats", "(", "data", ",", "location", ",", "'logs'", ")", "\n", "\n", "", "def", "plotter_leaning", "(", "data", ",", "location", ",", "file_name", ",", "agent_name", ")", ":", "\n", "# Destructure the tuple", "\n", "    ", "_", ",", "_", ",", "_", ",", "value_loss_buffer", ",", "bins_policy_loss_buffer", ",", "bins_total_loss_buffer", ",", "bins_entropy_buffer", "=", "data", "\n", "\n", "x_values", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "value_loss_buffer", ")", ")", "]", "\n", "\n", "plt", ".", "plot", "(", "x_values", ",", "value_loss_buffer", ",", "label", "=", "\"Value Loss\"", ")", "\n", "\n", "plt", ".", "plot", "(", "x_values", ",", "bins_policy_loss_buffer", ",", "label", "=", "\"Bin Policy Net Loss\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "bins_total_loss_buffer", ",", "label", "=", "\"Total Bin Net Loss\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "bins_entropy_buffer", ",", "label", "=", "\"Bin Net Entropy\"", ")", "\n", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "\n", "plot_title", "=", "f\"{agent_name.upper()}\\n|\"", "+", "file_name", "\n", "plt", ".", "title", "(", "plot_title", ")", "\n", "\n", "# Check if dir exists. If not, create it", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "location", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "location", ")", "\n", "\n", "# Show legend info", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "# plt.show(block=blockPlot)", "\n", "plt", ".", "savefig", "(", "\n", "f\"{location}/{file_name.replace(' ', '')}.png\"", ",", "\n", "dpi", "=", "200", ",", "\n", "bbox_inches", "=", "\"tight\"", "\n", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "def", "plotter_rewards", "(", "data", ",", "location", ",", "file_name", ",", "agent_name", ")", ":", "\n", "\n", "# Destructure the tuple", "\n", "    ", "average_rewards_buffer", ",", "min_rewards_buffer", ",", "max_rewards_buffer", ",", "_", ",", "_", ",", "_", ",", "_", ",", "=", "data", "\n", "\n", "x_values", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "average_rewards_buffer", ")", ")", "]", "\n", "\n", "plt", ".", "plot", "(", "x_values", ",", "average_rewards_buffer", ",", "label", "=", "\"Average (in batch) Double Pointer Critic\"", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.plotter.plot_attentions": [[74, 122], ["matplotlib.subplots", "enumerate", "range", "matplotlib.show", "axs[].matshow", "axs[].matshow", "matplotlib.sca", "matplotlib.yticks", "matplotlib.xticks", "matplotlib.sca", "matplotlib.yticks", "matplotlib.xticks", "item_xlabel.append", "range", "backpack_xlabel.append", "range", "int", "int", "len", "int", "int", "len", "int", "int", "int", "int"], "function", ["None"], ["plt", ".", "plot", "(", "x_values", ",", "min_rewards_buffer", ",", "label", "=", "\"Minimum (in Batch) Double Pointer Critic\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "max_rewards_buffer", ",", "label", "=", "\"Maximum (in batch) Double Pointer Critic\"", ")", "\n", "\n", "plt", ".", "ylabel", "(", "'Collected Reward'", ")", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "\n", "plot_title", "=", "f\"{agent_name.upper()}\\n|\"", "+", "file_name", "\n", "plt", ".", "title", "(", "plot_title", ")", "\n", "\n", "# Check if dir exists. If not, create it", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "location", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "location", ")", "\n", "\n", "# Show legend info", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "# plt.show(block=blockPlot)", "\n", "plt", ".", "savefig", "(", "\n", "f\"{location}/{file_name.replace(' ', '')}.png\"", ",", "\n", "dpi", "=", "200", ",", "\n", "bbox_inches", "=", "\"tight\"", "\n", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "def", "log_training_stats", "(", "data", ",", "location", ",", "file_name", ")", ":", "\n", "    ", "average_rewards_buffer", ",", "min_rewards_buffer", ",", "max_rewards_buffer", ",", "value_loss_buffer", ",", "bins_policy_loss_buffer", ",", "bins_total_loss_buffer", ",", "bins_entropy_buffer", "=", "data", "\n", "\n", "with", "open", "(", "f\"{location}/{file_name}.csv\"", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "header", "=", "'Step;Avg Reward;Max Reward;Min Reward;Value Loss;Bin Entropy;Total Bin Loss;Bin Policy Loss'", "\n", "\n", "fp", ".", "write", "(", "f'{header}\\n'", ")", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "average_rewards_buffer", ")", ")", ":", "\n", "            ", "avg", "=", "average_rewards_buffer", "[", "index", "]", "\n", "min", "=", "min_rewards_buffer", "[", "index", "]", "\n", "max", "=", "max_rewards_buffer", "[", "index", "]", "\n", "v_loss", "=", "value_loss_buffer", "[", "index", "]", "\n", "\n", "b_policy_loss", "=", "bins_policy_loss_buffer", "[", "index", "]", "\n", "b_total_loss", "=", "bins_total_loss_buffer", "[", "index", "]", "\n", "b_entr", "=", "bins_entropy_buffer", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.tester.test": [[13, 139], ["numpy.zeros", "env.reset", "agent.generate_decoder_input", "print", "print", "time.time", "range", "print", "print", "time.time", "print", "numpy.sum", "zip", "print", "time.time", "range", "print", "print", "heuristic_values.append", "print", "agent.act", "env.step", "attentions.append", "env.validate_history", "print", "print", "print", "env.convert_to_ortools_input", "optimal_values.append", "heuristic_solver", "len", "print", "print", "opt_solver", "numpy.array", "decoded_resource.numpy", "resources_probs.numpy", "bins_probs.numpy", "current_state.copy", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.validate_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.convert_to_ortools_input", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["\n", "\n", "def", "test", "(", "\n", "env", ":", "KnapsackEnvironmentV2", ",", "\n", "agent", ":", "Agent", ",", "\n", "opts", ":", "dict", ",", "\n", "log_dir", ":", "str", "\n", ")", ":", "\n", "\n", "\n", "    ", "num_tests", ":", "int", "=", "opts", "[", "'testbed'", "]", "[", "'num_tests'", "]", "\n", "# Number of bins", "\n", "bin_configs", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'bin_sample_configs'", "]", "\n", "bin_size_min", "=", "bin_configs", "[", "'min'", "]", "\n", "bin_size_max", "=", "bin_configs", "[", "'max'", "]", "\n", "bin_size_step", "=", "bin_configs", "[", "'step'", "]", "\n", "\n", "# Bins capacities", "\n", "bin_available_capacities", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'bin_available_capacities'", "]", "\n", "bin_min_resource", "=", "bin_available_capacities", "[", "'min'", "]", "\n", "bin_max_resource", "=", "bin_available_capacities", "[", "'max'", "]", "\n", "bin_step_resource", "=", "bin_available_capacities", "[", "'step'", "]", "\n", "\n", "# Number of items", "\n", "item_configs", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'item_sample_configs'", "]", "\n", "item_size_min", "=", "item_configs", "[", "'min'", "]", "\n", "item_size_max", "=", "item_configs", "[", "'max'", "]", "\n", "item_size_step", "=", "item_configs", "[", "'step'", "]", "\n", "\n", "batch_size", ":", "int", "=", "opts", "[", "'batch_size'", "]", "\n", "\n", "show_per_test_stats", ":", "bool", "=", "opts", "[", "'show_per_test_stats'", "]", "\n", "\n", "export_stats", ":", "bool", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'export_stats'", "]", "\n", "test_folder", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'folder'", "]", "\n", "\n", "filename", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'filename'", "]", "\n", "if", "filename", "==", "None", ":", "\n", "        ", "filename", "=", "generate_file_name", "(", "agent", ".", "agent_config", ")", "\n", "\n", "", "global_stats", "=", "[", "]", "\n", "global_reward_results", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "# Won", "\n", "0", ",", "# Draw", "\n", "0", ",", "# Lost", "\n", "]", ")", "\n", "\n", "for", "item_sample_size", "in", "range", "(", "item_size_min", ",", "item_size_max", "+", "1", ",", "item_size_step", ")", ":", "\n", "        ", "for", "bin_sample_size", "in", "range", "(", "bin_size_min", ",", "bin_size_max", "+", "1", ",", "bin_size_step", ")", ":", "\n", "            ", "for", "bin_min_value", "in", "range", "(", "bin_min_resource", ",", "bin_max_resource", ",", "bin_step_resource", ")", ":", "\n", "# print(f'{node_min_value}||{node_min_value + node_step_resource}')", "\n", "                ", "for", "index", "in", "range", "(", "num_tests", ")", ":", "\n", "\n", "                    ", "instance_stats", ",", "reward_result", "=", "test_single_instance", "(", "\n", "index", ",", "\n", "env", ",", "\n", "agent", ",", "\n", "opts", ",", "\n", "batch_size", ",", "\n", "bin_sample_size", ",", "# Number of nodes", "\n", "bin_min_value", ",", "# Min resources available in each node", "\n", "bin_min_value", "+", "bin_step_resource", ",", "# Max resources available in each node", "\n", "item_sample_size", ",", "# Number of resources", "\n", "log_dir", "\n", ")", "\n", "\n", "global_reward_results", "+=", "reward_result", "\n", "\n", "global_stats", ".", "append", "(", "{", "\n", "\"test_instance\"", ":", "index", ",", "\n", "\"bin_sample_size\"", ":", "bin_sample_size", ",", "\n", "\"bin_min_value\"", ":", "bin_min_value", ",", "\n", "\"bin_max_value\"", ":", "bin_min_value", "+", "bin_step_resource", ",", "\n", "\"item_sample_size\"", ":", "item_sample_size", ",", "\n", "\"instance\"", ":", "instance_stats", "\n", "}", ")", "\n", "\n", "", "", "", "", "if", "export_stats", ":", "\n", "        ", "f", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "test_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "f", ")", "\n", "", "log_testing_stats", "(", "global_stats", ",", "f", ",", "filename", ")", "\n", "\n", "", "return", "global_reward_results", "\n", "\n", "", "def", "test_single_instance", "(", "\n", "instance_id", ",", "\n", "env", ":", "KnapsackEnvironmentV2", ",", "\n", "agent", ":", "Agent", ",", "\n", "opts", ":", "dict", ",", "\n", "batch_size", ":", "int", ",", "\n", "bin_sample_size", ":", "int", ",", "\n", "bin_min_val", ":", "int", ",", "\n", "bin_max_val", ":", "int", ",", "\n", "item_sample_size", ":", "int", ",", "\n", "log_dir", ":", "str", ",", "\n", ")", ":", "\n", "\n", "    ", "plot_attentions", ":", "bool", "=", "opts", "[", "'plot_attentions'", "]", "\n", "\n", "# batch_size: int = opts['batch_size']", "\n", "# req_sample_size: int = opts['profiles_sample_size']", "\n", "# node_sample_size: int = opts['node_sample_size']", "\n", "\n", "export_stats", ":", "bool", "=", "opts", "[", "'export_stats'", "]", "[", "'per_problem_stats'", "]", "[", "'export_stats'", "]", "\n", "folder", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'per_problem_stats'", "]", "[", "'folder'", "]", "\n", "\n", "show_inference_progress", ":", "bool", "=", "opts", "[", "'show_inference_progress'", "]", "\n", "show_solutions", ":", "bool", "=", "opts", "[", "'show_solutions'", "]", "\n", "show_detailed_solutions", ":", "bool", "=", "opts", "[", "'show_detailed_solutions'", "]", "\n", "\n", "# Set the agent and env to testing mode", "\n", "env", ".", "set_testing_mode", "(", "\n", "batch_size", ",", "\n", "bin_sample_size", ",", "\n", "item_sample_size", ",", "\n", "bin_min_val", ",", "\n", "bin_max_val", "\n", ")", "\n", "agent", ".", "set_testing_mode", "(", "\n", "batch_size", ",", "\n", "env", ".", "bin_sample_size", ",", "\n", "env", ".", "item_sample_size", "\n", ")", "\n", "\n", "training_step", "=", "0", "\n", "isDone", "=", "False", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.__init__": [[14, 62], ["environment.base.base.BaseEnvironment.__init__", "numpy.array", "list", "list", "env_v2.KnapsackV2.generate_batch", "env_v2.KnapsackV2.generate_masks", "env_v2.KnapsackV2.load_problem", "env_v2.KnapsackV2.generate_dataset", "range", "range"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.load_problem", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_dataset"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", ",", "opts", ":", "dict", ")", ":", "\n", "        ", "super", "(", "KnapsackV2", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "\n", "self", ".", "load_from_file", "=", "opts", "[", "'load_from_file'", "]", "\n", "self", ".", "location", "=", "opts", "[", "'location'", "]", "\n", "\n", "\n", "self", ".", "batch_size", ":", "int", "=", "opts", "[", "'batch_size'", "]", "\n", "self", ".", "num_resources", ":", "int", "=", "opts", "[", "'num_resources'", "]", "\n", "self", ".", "resource_sample_size", ":", "int", "=", "opts", "[", "'resource_sample_size'", "]", "\n", "\n", "assert", "self", ".", "num_resources", ">=", "self", ".", "resource_sample_size", ",", "'Item sample size should be less than total number of resources'", "\n", "\n", "self", ".", "num_bins", ":", "int", "=", "opts", "[", "'num_bins'", "]", "+", "1", "# + 1 because of the EOS bin", "\n", "self", ".", "bin_sample_size", ":", "int", "=", "opts", "[", "'bin_sample_size'", "]", "+", "1", "# + 1 because of the EOS bin", "\n", "\n", "assert", "self", ".", "num_bins", ">=", "self", ".", "bin_sample_size", ",", "'Backpacks sample size should be less than total number of bins'", "\n", "\n", "self", ".", "EOS_CODE", ":", "int", "=", "opts", "[", "'EOS_CODE'", "]", "\n", "\n", "self", ".", "normalization_factor", ":", "int", "=", "opts", "[", "'normalization_factor'", "]", "\n", "\n", "self", ".", "min_resource_value", ":", "int", "=", "opts", "[", "'min_resource_value'", "]", "\n", "self", ".", "max_resource_value", ":", "int", "=", "opts", "[", "'max_resource_value'", "]", "\n", "self", ".", "min_resource_weight", ":", "int", "=", "opts", "[", "'min_resource_weight'", "]", "\n", "self", ".", "max_resource_weight", ":", "int", "=", "opts", "[", "'max_resource_weight'", "]", "\n", "\n", "self", ".", "min_bin_capacity", ":", "int", "=", "opts", "[", "'min_bin_capacity'", "]", "\n", "self", ".", "max_bin_capacity", ":", "int", "=", "opts", "[", "'max_bin_capacity'", "]", "\n", "\n", "self", ".", "EOS_BACKPACK", "=", "np", ".", "array", "(", "(", "self", ".", "EOS_CODE", ",", "self", ".", "EOS_CODE", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "if", "self", ".", "load_from_file", ":", "\n", "            ", "self", ".", "total_bins", ",", "self", ".", "total_resources", "=", "self", ".", "load_problem", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "total_bins", ",", "self", ".", "total_resources", "=", "self", ".", "generate_dataset", "(", ")", "\n", "\n", "# Generate the IDs of the resources and bins", "\n", "", "self", ".", "binIDS", "=", "list", "(", "range", "(", "1", ",", "self", ".", "num_bins", ")", ")", "# Skip the 0 because it will be allways the EOS bin", "\n", "self", ".", "resourceIDS", "=", "list", "(", "range", "(", "0", ",", "self", ".", "num_resources", ")", ")", "\n", "\n", "# Problem batch", "\n", "self", ".", "batch", ",", "self", ".", "history", "=", "self", ".", "generate_batch", "(", ")", "\n", "# Default masks", "\n", "# Will be updated during at each step() call", "\n", "self", ".", "bin_net_mask", ",", "self", ".", "resource_net_mask", ",", "self", ".", "mha_used_mask", "=", "self", ".", "generate_masks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.reset": [[63, 70], ["env_v2.KnapsackV2.generate_batch", "env_v2.KnapsackV2.generate_masks", "env_v2.KnapsackV2.state"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch", ",", "self", ".", "history", "=", "self", ".", "generate_batch", "(", ")", "\n", "self", ".", "bin_net_mask", ",", "self", ".", "resource_net_mask", ",", "self", ".", "mha_used_mask", "=", "self", ".", "generate_masks", "(", ")", "\n", "\n", "return", "self", ".", "state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.state": [[71, 76], ["env_v2.KnapsackV2.batch.copy", "env_v2.KnapsackV2.bin_net_mask.copy", "env_v2.KnapsackV2.resource_net_mask.copy", "env_v2.KnapsackV2.mha_used_mask.copy"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch", ".", "copy", "(", ")", ",", "self", ".", "bin_net_mask", ".", "copy", "(", ")", ",", "self", ".", "resource_net_mask", ".", "copy", "(", ")", ",", "self", ".", "mha_used_mask", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.step": [[77, 137], ["numpy.zeros", "range", "numpy.all", "history_entry.add_resource", "env_v2.KnapsackV2.bin_net_mask.copy", "env_v2.KnapsackV2.resource_net_mask.copy", "env_v2.KnapsackV2.mha_used_mask.copy", "env_v2.KnapsackV2.batch.copy", "tensorflow.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.add_resource"], ["", "def", "step", "(", "self", ",", "bin_ids", ":", "list", ",", "resource_ids", ":", "list", ",", "feasible_bin_mask", ")", ":", "\n", "# rewards = []", "\n", "        ", "rewards", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "1", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "# Default is not done", "\n", "isDone", "=", "False", "\n", "\n", "# Default mask for resources", "\n", "for", "batch_id", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "bin_id", "=", "bin_ids", "[", "batch_id", "]", "\n", "resource_id", "=", "resource_ids", "[", "batch_id", "]", "\n", "\n", "bin", "=", "self", ".", "batch", "[", "batch_id", ",", "bin_id", "]", "\n", "resource", "=", "self", ".", "batch", "[", "batch_id", ",", "resource_id", "]", "\n", "\n", "resource_weight", "=", "resource", "[", "0", "]", "\n", "resource_value", "=", "resource", "[", "1", "]", "\n", "\n", "bin_capacity", "=", "bin", "[", "0", "]", "\n", "bin_load", "=", "bin", "[", "1", "]", "\n", "\n", "# Update the bin entry", "\n", "if", "(", "bin_id", "!=", "0", ")", ":", "\n", "                ", "assert", "bin_load", "+", "resource_weight", "<=", "bin_capacity", ",", "f'Backpack {bin_id} is overloaded. Maximum capacity: {bin_capacity} || Current load: {bin_load} || Item Weight: {resource_weight}'", "\n", "\n", "self", ".", "batch", "[", "batch_id", ",", "bin_id", ",", "1", "]", "=", "bin_load", "+", "resource_weight", "\n", "\n", "# Add to history", "\n", "", "history_entry", ":", "History", "=", "self", ".", "history", "[", "batch_id", "]", "[", "bin_id", "]", "\n", "history_entry", ".", "add_resource", "(", "resource_id", ",", "resource_weight", ",", "resource_value", ")", "\n", "\n", "# Update the masks", "\n", "# Item taken mask it", "\n", "self", ".", "resource_net_mask", "[", "batch_id", ",", "resource_id", "]", "=", "1", "\n", "self", ".", "mha_used_mask", "[", "batch_id", ",", ":", ",", ":", ",", "resource_id", "]", "=", "1", "\n", "\n", "# Mask the bin if it's full", "\n", "if", "(", "bin_capacity", "==", "bin_load", "+", "resource_weight", ")", ":", "\n", "                ", "self", ".", "bin_net_mask", "[", "batch_id", ",", "bin_id", "]", "=", "1", "\n", "self", ".", "mha_used_mask", "[", "batch_id", ",", ":", ",", ":", ",", "bin_id", "]", "=", "1", "\n", "\n", "", "if", "(", "bin_id", "==", "0", ")", ":", "\n", "                ", "reward", "=", "0", "# No reward. Placed at EOS bin", "\n", "", "else", ":", "\n", "                ", "reward", "=", "resource_value", "\n", "\n", "", "rewards", "[", "batch_id", "]", "[", "0", "]", "=", "reward", "\n", "\n", "", "info", "=", "{", "\n", "'bin_net_mask'", ":", "self", ".", "bin_net_mask", ".", "copy", "(", ")", ",", "\n", "'resource_net_mask'", ":", "self", ".", "resource_net_mask", ".", "copy", "(", ")", ",", "\n", "'mha_used_mask'", ":", "self", ".", "mha_used_mask", ".", "copy", "(", ")", ",", "\n", "'num_resource_to_place'", ":", "self", ".", "num_resources", "\n", "}", "\n", "\n", "if", "np", ".", "all", "(", "self", ".", "resource_net_mask", "==", "1", ")", ":", "\n", "            ", "isDone", "=", "True", "\n", "\n", "", "return", "self", ".", "batch", ".", "copy", "(", ")", ",", "tf", ".", "convert_to_tensor", "(", "rewards", ")", ",", "isDone", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.generate_dataset": [[138, 166], ["numpy.zeros", "range", "numpy.zeros", "range", "random.randint", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "generate_dataset", "(", "self", ")", ":", "\n", "# Num bins + 1 for EOS", "\n", "        ", "bins", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_bins", ",", "2", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Skip the first EOS bin", "\n", "bins", "[", "0", "]", "=", "self", ".", "EOS_BACKPACK", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_bins", ")", ":", "\n", "            ", "bins", "[", "i", ",", "0", "]", "=", "randint", "(", "\n", "self", ".", "min_bin_capacity", ",", "\n", "self", ".", "max_bin_capacity", "\n", ")", "/", "self", ".", "normalization_factor", "\n", "\n", "bins", "[", "i", ",", "1", "]", "=", "0", "# Current load", "\n", "\n", "", "resources", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_resources", ",", "2", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_resources", ")", ":", "\n", "            ", "resources", "[", "i", ",", "0", "]", "=", "randint", "(", "\n", "self", ".", "min_resource_weight", ",", "\n", "self", ".", "max_resource_weight", "\n", ")", "/", "self", ".", "normalization_factor", "\n", "\n", "resources", "[", "i", ",", "1", "]", "=", "randint", "(", "\n", "self", ".", "min_resource_value", ",", "\n", "self", ".", "max_resource_value", "\n", ")", "/", "self", ".", "normalization_factor", "\n", "\n", "", "return", "bins", ",", "resources", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.generate_batch": [[167, 215], ["numpy.zeros", "range", "problem.append", "numpy.random.shuffle", "range", "numpy.random.shuffle", "range", "history.append", "environment.custom.knapsack.backpack.Backpack", "bins_sample_ids.pop", "problem.append", "resources_sample_ids.pop", "environment.custom.knapsack.backpack.Backpack"], "methods", ["None"], ["", "def", "generate_batch", "(", "self", ")", ":", "\n", "        ", "history", "=", "[", "]", "# For info and stats", "\n", "\n", "elem_size", "=", "self", ".", "bin_sample_size", "+", "self", ".", "resource_sample_size", "\n", "\n", "# Init empty batch", "\n", "batch", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "elem_size", ",", "2", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "batch_id", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "problem", "=", "[", "]", "\n", "\n", "# Set the EOS bin", "\n", "batch", "[", "batch_id", ",", "0", "]", "=", "self", ".", "EOS_BACKPACK", "\n", "\n", "problem", ".", "append", "(", "History", "(", "0", ",", "0", ")", ")", "# EOS bin is always empty", "\n", "\n", "# Shuffle the bins and select a sample", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "binIDS", ")", "\n", "bins_sample_ids", "=", "self", ".", "binIDS", "[", ":", "self", ".", "bin_sample_size", "-", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "bin_sample_size", ")", ":", "\n", "# Pop the ID", "\n", "                ", "id", "=", "bins_sample_ids", ".", "pop", "(", "0", ")", "\n", "# Get the bin by ID", "\n", "bin", "=", "self", ".", "total_bins", "[", "id", "]", "\n", "\n", "problem", ".", "append", "(", "History", "(", "i", ",", "bin", "[", "0", "]", ")", ")", "\n", "\n", "batch", "[", "batch_id", ",", "i", ",", "0", "]", "=", "bin", "[", "0", "]", "# Set total capacity", "\n", "batch", "[", "batch_id", ",", "i", ",", "1", "]", "=", "bin", "[", "1", "]", "# Set current load = 0", "\n", "\n", "# Shuffle the resources and select a sample", "\n", "", "np", ".", "random", ".", "shuffle", "(", "self", ".", "resourceIDS", ")", "\n", "resources_sample_ids", "=", "self", ".", "resourceIDS", "[", ":", "self", ".", "resource_sample_size", "]", "\n", "\n", "start", "=", "self", ".", "bin_sample_size", "\n", "end", "=", "self", ".", "bin_sample_size", "+", "self", ".", "resource_sample_size", "\n", "for", "i", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "# Pop the ID", "\n", "                ", "id", "=", "resources_sample_ids", ".", "pop", "(", "0", ")", "\n", "# Get the resource by ID", "\n", "resource", "=", "self", ".", "total_resources", "[", "id", "]", "\n", "batch", "[", "batch_id", ",", "i", ",", "0", "]", "=", "resource", "[", "0", "]", "# Set weight", "\n", "batch", "[", "batch_id", ",", "i", ",", "1", "]", "=", "resource", "[", "1", "]", "# Set value", "\n", "\n", "", "history", ".", "append", "(", "problem", ")", "\n", "\n", "", "return", "batch", ",", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.generate_masks": [[216, 239], ["numpy.zeros", "numpy.ones", "range", "numpy.zeros_like", "range"], "methods", ["None"], ["", "def", "generate_masks", "(", "self", ")", ":", "\n", "\n", "        ", "elem_size", "=", "self", ".", "bin_sample_size", "+", "self", ".", "resource_sample_size", "\n", "\n", "# Represents positions marked as \"0\" where resource Ptr Net can point", "\n", "resource_net_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "elem_size", ")", ",", "dtype", "=", "'float32'", ")", "\n", "# Represents positions marked as \"0\" where bin Ptr Net can point", "\n", "bin_net_mask", "=", "np", ".", "ones", "(", "\n", "(", "self", ".", "batch_size", ",", "elem_size", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Default mask for resources", "\n", "for", "batch_id", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "bin_sample_size", ")", ":", "\n", "                ", "resource_net_mask", "[", "batch_id", ",", "i", "]", "=", "1", "\n", "\n", "# Default mask for bin", "\n", "", "", "bin_net_mask", "=", "bin_net_mask", "-", "resource_net_mask", "\n", "\n", "# For Transformer's multi head attention", "\n", "mha_used_mask", "=", "np", ".", "zeros_like", "(", "resource_net_mask", ")", "\n", "mha_used_mask", "=", "mha_used_mask", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "return", "bin_net_mask", ",", "resource_net_mask", ",", "mha_used_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.print_history": [[240, 253], ["range", "print", "print", "print", "bp.print", "len"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print_history", "(", "self", ")", ":", "\n", "        ", "for", "batch_id", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "total_packed_resources", "=", "0", "\n", "total_packed_value", "=", "0", "\n", "total_packed_weight", "=", "0", "\n", "print", "(", "'_________________________________'", ")", "\n", "for", "bp", "in", "self", ".", "history", "[", "batch_id", "]", ":", "\n", "                ", "bp", ".", "print", "(", ")", "\n", "total_packed_resources", "+=", "len", "(", "bp", ".", "resources", ")", "\n", "total_packed_value", "+=", "bp", ".", "current_value", "\n", "total_packed_weight", "+=", "bp", ".", "current_load", "\n", "", "print", "(", "f'\\nTotal Packed Items:  {total_packed_resources} || Total Packed Value {total_packed_value} || Total Packed Weight {total_packed_weight}'", ")", "\n", "print", "(", "'_________________________________'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.add_stats_to_agent_config": [[254, 265], ["len", "len"], "methods", ["None"], ["", "", "def", "add_stats_to_agent_config", "(", "self", ",", "agent_config", ":", "dict", ")", ":", "\n", "        ", "agent_config", "[", "'num_resources'", "]", "=", "self", ".", "resource_sample_size", "\n", "agent_config", "[", "'num_bins'", "]", "=", "self", ".", "bin_sample_size", "\n", "\n", "agent_config", "[", "'tensor_size'", "]", "=", "self", ".", "bin_sample_size", "+", "self", ".", "resource_sample_size", "\n", "\n", "agent_config", "[", "'batch_size'", "]", "=", "self", ".", "batch_size", "\n", "\n", "agent_config", "[", "'vocab_size'", "]", "=", "len", "(", "self", ".", "total_bins", ")", "+", "len", "(", "self", ".", "total_resources", ")", "\n", "\n", "return", "agent_config", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.build_feasible_mask": [[266, 294], ["numpy.ones_like", "numpy.reshape", "tensorflow.cast", "tensorflow.maximum", "tensorflow.cast().numpy", "tensorflow.math.less", "tensorflow.cast"], "methods", ["None"], ["", "def", "build_feasible_mask", "(", "self", ",", "state", ",", "resources", ",", "bin_net_mask", ")", ":", "\n", "\n", "        ", "batch", "=", "state", ".", "shape", "[", "0", "]", "\n", "\n", "resource_net_mask", "=", "np", ".", "ones_like", "(", "bin_net_mask", ")", "\n", "resource_net_mask", "-=", "bin_net_mask", "\n", "\n", "# Extract weights", "\n", "# Reshape into (batch, 1)", "\n", "resource_weight", "=", "np", ".", "reshape", "(", "resources", "[", ":", ",", "0", "]", ",", "(", "batch", ",", "1", ")", ")", "\n", "\n", "bin_capacity", "=", "state", "[", ":", ",", ":", ",", "0", "]", "\n", "bin_current_load", "=", "state", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "totals", "=", "bin_capacity", "-", "(", "bin_current_load", "+", "resource_weight", ")", "\n", "# EOS is always available for poiting", "\n", "totals", "[", ":", ",", "0", "]", "=", "0", "\n", "# Can't point to resources positions", "\n", "totals", "*=", "resource_net_mask", "\n", "\n", "binary_masks", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "math", ".", "less", "(", "totals", ",", "0", ")", ",", "tf", ".", "float32", "\n", ")", "\n", "\n", "# Merge the masks", "\n", "mask", "=", "tf", ".", "maximum", "(", "binary_masks", ",", "bin_net_mask", ")", "\n", "\n", "return", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "\"float32\"", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.convert_to_ortools_input": [[295, 325], ["list", "len", "list", "weights.append", "values.append", "range", "bins.append", "range", "int", "int", "len", "int", "len"], "methods", ["None"], ["", "def", "convert_to_ortools_input", "(", "self", ",", "problem_id", "=", "0", ")", ":", "\n", "\n", "        ", "assert", "problem_id", "<", "self", ".", "batch_size", ",", "f'Problem ID is out of bounds. Must be less than {self.batch_size}'", "\n", "\n", "# Select by ID from the batch", "\n", "problem", "=", "self", ".", "batch", "[", "problem_id", "]", "\n", "p_bps", "=", "problem", "[", ":", "self", ".", "bin_sample_size", "]", "\n", "p_resources", "=", "problem", "[", "self", ".", "bin_sample_size", ":", "]", "\n", "\n", "data", "=", "{", "}", "\n", "\n", "weights", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "resource", "in", "p_resources", ":", "\n", "            ", "weights", ".", "append", "(", "int", "(", "resource", "[", "0", "]", ")", ")", "\n", "values", ".", "append", "(", "int", "(", "resource", "[", "1", "]", ")", ")", "\n", "\n", "", "data", "[", "'weights'", "]", "=", "weights", "\n", "data", "[", "'values'", "]", "=", "values", "\n", "data", "[", "'resources'", "]", "=", "list", "(", "range", "(", "len", "(", "weights", ")", ")", ")", "\n", "data", "[", "'num_resources'", "]", "=", "len", "(", "weights", ")", "\n", "\n", "bins", "=", "[", "]", "\n", "for", "bin", "in", "p_bps", ":", "\n", "            ", "bins", ".", "append", "(", "int", "(", "bin", "[", "0", "]", ")", ")", "\n", "\n", "", "data", "[", "'bin_capacities'", "]", "=", "bins", "\n", "data", "[", "'bins'", "]", "=", "list", "(", "range", "(", "len", "(", "bins", ")", ")", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.save_problem": [[326, 345], ["enumerate", "enumerate", "float", "float", "float", "open", "json.dump"], "methods", ["None"], ["", "def", "save_problem", "(", "self", ")", ":", "\n", "        ", "bins", "=", "{", "}", "\n", "for", "i", ",", "bin", "in", "enumerate", "(", "self", ".", "total_bins", ")", ":", "\n", "            ", "bins", "[", "f'{i}'", "]", "=", "{", "}", "\n", "bins", "[", "f'{i}'", "]", "[", "'capacity'", "]", "=", "float", "(", "bin", "[", "0", "]", ")", "\n", "\n", "", "resources", "=", "{", "}", "\n", "for", "i", ",", "resource", "in", "enumerate", "(", "self", ".", "total_resources", ")", ":", "\n", "            ", "resources", "[", "f'{i}'", "]", "=", "{", "}", "\n", "resources", "[", "f'{i}'", "]", "[", "'weight'", "]", "=", "float", "(", "resource", "[", "0", "]", ")", "\n", "resources", "[", "f'{i}'", "]", "[", "'value'", "]", "=", "float", "(", "resource", "[", "1", "]", ")", "\n", "\n", "", "problem", "=", "{", "\n", "\"bins\"", ":", "bins", ",", "\n", "\"resources\"", ":", "resources", "\n", "}", "\n", "\n", "with", "open", "(", "self", ".", "location", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "problem", ",", "fp", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.load_problem": [[346, 372], ["len", "numpy.zeros", "enumerate", "len", "numpy.zeros", "enumerate", "open", "json.load", "bins_dict.values", "resources_dict.values"], "methods", ["None"], ["", "", "def", "load_problem", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "location", ")", "as", "json_file", ":", "\n", "            ", "problem", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "bins_dict", ":", "dict", "=", "problem", "[", "'bins'", "]", "\n", "self", ".", "num_bins", "=", "len", "(", "bins_dict", ")", "\n", "bins", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_bins", ",", "2", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "id", ",", "bin", "in", "enumerate", "(", "bins_dict", ".", "values", "(", ")", ")", ":", "\n", "            ", "bins", "[", "id", ",", "0", "]", "=", "bin", "[", "'capacity'", "]", "\n", "\n", "# EOS has the save value", "\n", "if", "(", "id", "==", "0", ")", ":", "\n", "                ", "bins", "[", "id", ",", "1", "]", "=", "bin", "[", "'capacity'", "]", "\n", "", "else", ":", "\n", "                ", "bins", "[", "id", ",", "1", "]", "=", "0", "\n", "\n", "", "", "resources_dict", ":", "dict", "=", "problem", "[", "'resources'", "]", "\n", "self", ".", "num_resources", "=", "len", "(", "resources_dict", ")", "\n", "resources", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_resources", ",", "2", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "id", ",", "resource", "in", "enumerate", "(", "resources_dict", ".", "values", "(", ")", ")", ":", "\n", "            ", "resources", "[", "id", ",", "0", "]", "=", "resource", "[", "'weight'", "]", "\n", "resources", "[", "id", ",", "1", "]", "=", "resource", "[", "'value'", "]", "\n", "\n", "", "return", "bins", ",", "resources", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.validate_history": [[374, 381], ["bin.is_valid"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.is_valid"], ["", "def", "validate_history", "(", "self", ")", ":", "\n", "        ", "for", "problem", "in", "self", ".", "history", ":", "\n", "            ", "for", "bin", "in", "problem", ":", "\n", "                ", "if", "bin", ".", "is_valid", "(", ")", "==", "False", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.optimum_solver.create_data_model": [[5, 18], ["list", "len", "list", "range", "range", "len"], "function", ["None"], ["def", "create_data_model", "(", ")", ":", "\n", "    ", "\"\"\"Create the data for the example.\"\"\"", "\n", "data", "=", "{", "}", "\n", "weights", "=", "[", "48", ",", "30", ",", "42", ",", "36", ",", "36", ",", "48", ",", "42", ",", "42", ",", "36", ",", "24", ",", "30", ",", "30", ",", "42", ",", "36", ",", "36", "]", "\n", "values", "=", "[", "10", ",", "30", ",", "25", ",", "50", ",", "35", ",", "30", ",", "15", ",", "40", ",", "30", ",", "35", ",", "45", ",", "10", ",", "20", ",", "30", ",", "25", "]", "\n", "data", "[", "'weights'", "]", "=", "weights", "\n", "data", "[", "'values'", "]", "=", "values", "\n", "data", "[", "'items'", "]", "=", "list", "(", "range", "(", "len", "(", "weights", ")", ")", ")", "\n", "data", "[", "'num_items'", "]", "=", "len", "(", "weights", ")", "\n", "num_bins", "=", "5", "\n", "data", "[", "'bins'", "]", "=", "list", "(", "range", "(", "num_bins", ")", ")", "\n", "data", "[", "'bin_capacities'", "]", "=", "[", "100", ",", "100", ",", "100", ",", "100", ",", "100", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.optimum_solver.solver": [[20, 77], ["ortools.linear_solver.pywraplp.Solver", "pywraplp.Solver.Objective", "solver.Objective.SetMaximization", "pywraplp.Solver.Solve", "solver.Objective.Value", "pywraplp.Solver.Add", "pywraplp.Solver.Add", "print", "pywraplp.Solver.IntVar", "solver.Objective.SetCoefficient", "print", "print", "sum", "sum", "solver.Objective.Value", "print", "print", "print", "print", "x[].solution_value", "print"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "solver", "(", "data", ",", "print_details", "=", "True", ")", ":", "\n", "# data = create_data_model()", "\n", "\n", "# Create the mip solver with the CBC backend.", "\n", "    ", "solver", "=", "pywraplp", ".", "Solver", "(", "'multiple_knapsack_mip'", ",", "\n", "pywraplp", ".", "Solver", ".", "CBC_MIXED_INTEGER_PROGRAMMING", ")", "\n", "\n", "# Variables", "\n", "# x[i, j] = 1 if item i is packed in bin j.", "\n", "x", "=", "{", "}", "\n", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "        ", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "            ", "x", "[", "(", "i", ",", "j", ")", "]", "=", "solver", ".", "IntVar", "(", "0", ",", "1", ",", "'x_%i_%i'", "%", "(", "i", ",", "j", ")", ")", "\n", "\n", "# Constraints", "\n", "# Each item can be in at most one bin.", "\n", "", "", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "        ", "solver", ".", "Add", "(", "sum", "(", "x", "[", "i", ",", "j", "]", "for", "j", "in", "data", "[", "'bins'", "]", ")", "<=", "1", ")", "\n", "# The amount packed in each bin cannot exceed its capacity.", "\n", "", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "        ", "solver", ".", "Add", "(", "\n", "sum", "(", "x", "[", "(", "i", ",", "j", ")", "]", "*", "data", "[", "'weights'", "]", "[", "i", "]", "\n", "for", "i", "in", "data", "[", "'items'", "]", ")", "<=", "data", "[", "'bin_capacities'", "]", "[", "j", "]", ")", "\n", "\n", "# Objective", "\n", "", "objective", "=", "solver", ".", "Objective", "(", ")", "\n", "\n", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "        ", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "            ", "objective", ".", "SetCoefficient", "(", "x", "[", "(", "i", ",", "j", ")", "]", ",", "data", "[", "'values'", "]", "[", "i", "]", ")", "\n", "", "", "objective", ".", "SetMaximization", "(", ")", "\n", "\n", "status", "=", "solver", ".", "Solve", "(", ")", "\n", "\n", "if", "status", "==", "pywraplp", ".", "Solver", ".", "OPTIMAL", ":", "\n", "        ", "if", "print_details", ":", "\n", "            ", "print", "(", "'Total packed value:'", ",", "objective", ".", "Value", "(", ")", ")", "\n", "total_weight", "=", "0", "\n", "for", "j", "in", "data", "[", "'bins'", "]", ":", "\n", "                ", "bin_weight", "=", "0", "\n", "bin_value", "=", "0", "\n", "print", "(", "'Bin '", ",", "j", ",", "'\\n'", ")", "\n", "for", "i", "in", "data", "[", "'items'", "]", ":", "\n", "                    ", "if", "x", "[", "i", ",", "j", "]", ".", "solution_value", "(", ")", ">", "0", ":", "\n", "                        ", "print", "(", "'Item'", ",", "i", ",", "'- weight:'", ",", "data", "[", "'weights'", "]", "[", "i", "]", ",", "' value:'", ",", "\n", "data", "[", "'values'", "]", "[", "i", "]", ")", "\n", "bin_weight", "+=", "data", "[", "'weights'", "]", "[", "i", "]", "\n", "bin_value", "+=", "data", "[", "'values'", "]", "[", "i", "]", "\n", "", "", "print", "(", "'Packed bin weight:'", ",", "bin_weight", ")", "\n", "print", "(", "'Packed bin value:'", ",", "bin_value", ")", "\n", "print", "(", ")", "\n", "total_weight", "+=", "bin_weight", "\n", "", "print", "(", "'Total packed weight:'", ",", "total_weight", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'The problem does not have an optimal solution.'", ")", "\n", "\n", "", "return", "objective", ".", "Value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.heuristic.solver": [[12, 34], ["heuristic.parse_input", "sorted", "sorted", "operator.attrgetter", "item.is_taken", "item.take", "backpack.add_resource"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.heuristic_v2.parse_input", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.take", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.add_resource"], ["def", "solver", "(", "problem", ",", "num_backpacks", ":", "int", ")", ":", "\n", "    ", "backpacks", ",", "items", "=", "parse_input", "(", "problem", ",", "num_backpacks", ")", "\n", "\n", "backpacks", ":", "List", "[", "Backpack", "]", "=", "sorted", "(", "backpacks", ",", "key", "=", "attrgetter", "(", "\"capacity\"", ")", ",", "reverse", "=", "True", ")", "\n", "items", ":", "List", "[", "Item", "]", "=", "sorted", "(", "items", ",", "key", "=", "lambda", "item", ":", "item", ".", "ratio", ",", "reverse", "=", "True", ")", "\n", "\n", "total_value", "=", "0", "\n", "for", "backpack", "in", "backpacks", ":", "\n", "        ", "for", "item", "in", "items", ":", "\n", "            ", "if", "not", "item", ".", "is_taken", "(", ")", ":", "\n", "                ", "if", "item", ".", "weight", "+", "backpack", ".", "current_load", "<=", "backpack", ".", "capacity", ":", "\n", "                    ", "item", ".", "take", "(", ")", "# Mark as taken", "\n", "\n", "# Add to backpack. For stats", "\n", "backpack", ".", "add_item", "(", "item", ".", "id", ",", "item", ".", "weight", ",", "item", ".", "value", ")", "\n", "\n", "# Add to the total value", "\n", "total_value", "+=", "item", ".", "value", "\n", "\n", "# print_backpack_stats(backpacks)", "\n", "\n", "", "", "", "", "return", "total_value", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.heuristic.parse_input": [[35, 53], ["enumerate", "enumerate", "backpacks.append", "items.append", "environment.custom.knapsack.backpack.Backpack", "environment.custom.knapsack.item.Item"], "function", ["None"], ["", "def", "parse_input", "(", "problem", ",", "num_backpacks", ")", "->", "Tuple", "[", "List", "[", "Backpack", "]", ",", "List", "[", "Item", "]", "]", ":", "\n", "    ", "backpacks", "=", "[", "]", "\n", "for", "index", ",", "bps", "in", "enumerate", "(", "problem", "[", ":", "num_backpacks", "]", ")", ":", "\n", "        ", "backpacks", ".", "append", "(", "\n", "Backpack", "(", "index", ",", "bps", "[", "0", "]", ")", "\n", ")", "\n", "\n", "", "items", "=", "[", "]", "\n", "for", "index", ",", "itm", "in", "enumerate", "(", "problem", "[", "num_backpacks", ":", "]", ")", ":", "\n", "        ", "items", ".", "append", "(", "\n", "Item", "(", "\n", "index", ",", "\n", "weight", "=", "itm", "[", "0", "]", ",", "\n", "value", "=", "itm", "[", "1", "]", "\n", ")", "\n", ")", "\n", "\n", "", "return", "backpacks", ",", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.heuristic.print_backpack_stats": [[54, 56], ["backpack.print"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print_backpack_stats", "(", "backpacks", ":", "List", "[", "Backpack", "]", ")", ":", "\n", "    ", "for", "backpack", "in", "backpacks", ":", "backpack", ".", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.heuristic.validate_solution": [[57, 63], ["backpack.is_valid"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.is_valid"], ["", "def", "validate_solution", "(", "backpacks", ":", "List", "[", "Backpack", "]", ")", ":", "\n", "    ", "for", "backpack", "in", "backpacks", ":", "\n", "        ", "if", "backpack", ".", "is_valid", "(", ")", "==", "False", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.heuristic_v2.solver": [[15, 21], ["heuristic_v2.parse_input", "mknapsack.algorithms.mtm"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.heuristic_v2.parse_input"], ["def", "solver", "(", "problem", ",", "num_backpacks", ":", "int", ")", ":", "\n", "    ", "backpacks", ",", "item_weights", ",", "item_values", "=", "parse_input", "(", "problem", ",", "num_backpacks", ")", "\n", "\n", "total_value", ",", "x", ",", "bt", ",", "glopt", "=", "mtm", "(", "item_values", ",", "item_weights", ",", "backpacks", ")", "\n", "\n", "return", "total_value", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.heuristic_v2.parse_input": [[22, 34], ["enumerate", "enumerate", "backpacks.append", "item_weights.append", "item_values.append", "int", "int", "int"], "function", ["None"], ["", "def", "parse_input", "(", "problem", ",", "num_backpacks", ")", "->", "Tuple", "[", "List", "[", "Backpack", "]", ",", "List", "[", "Item", "]", "]", ":", "\n", "    ", "backpacks", "=", "[", "]", "\n", "for", "index", ",", "bps", "in", "enumerate", "(", "problem", "[", ":", "num_backpacks", "]", ")", ":", "\n", "        ", "backpacks", ".", "append", "(", "int", "(", "bps", "[", "0", "]", ")", ")", "\n", "\n", "", "item_weights", "=", "[", "]", "\n", "item_values", "=", "[", "]", "\n", "for", "index", ",", "itm", "in", "enumerate", "(", "problem", "[", "num_backpacks", ":", "]", ")", ":", "\n", "        ", "item_weights", ".", "append", "(", "int", "(", "itm", "[", "0", "]", ")", ")", "\n", "item_values", ".", "append", "(", "int", "(", "itm", "[", "1", "]", ")", ")", "\n", "\n", "", "return", "backpacks", ",", "item_weights", ",", "item_values", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestKnapsackEnv.test_constructor": [[14, 44], ["environment.custom.knapsack.env.Knapsack", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "len"], "methods", ["None"], ["    ", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "1", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "4", ",", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "6", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "7", ",", "\n", "\"max_backpack_capacity\"", ":", "8", "\n", "}", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "batch_size", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "num_items", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "num_backpacks", ",", "1", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_item_value", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_item_value", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_item_weight", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_item_weight", ",", "6", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_backpack_capacity", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_backpack_capacity", ",", "8", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "tensor_size", ",", "4", ")", "# 2 Items + 1 Backpack + 1 EOS Backpack", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "problem_list", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestKnapsackEnv.test_generate_fn": [[45, 68], ["environment.custom.knapsack.env.Knapsack", "environment.custom.knapsack.env.Knapsack.generate", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "len", "len", "len"], "methods", ["None"], ["", "def", "test_generate_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "prob_list", "=", "env", ".", "generate", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "prob_list", ")", ",", "2", ")", "\n", "\n", "sub_prob_1", "=", "prob_list", "[", "0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "sub_prob_1", "[", "'backpacks'", "]", ")", ",", "3", ")", "# 2 normal + 1 EOS backpack", "\n", "self", ".", "assertEqual", "(", "len", "(", "sub_prob_1", "[", "'items'", "]", ")", ",", "2", ")", "# 2 normal + 1 EOS backpack", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestKnapsackEnv.test_state_fn": [[69, 111], ["environment.custom.knapsack.env.Knapsack", "environment.custom.knapsack.env.Knapsack.state", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertTrue", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], ["", "def", "test_state_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "actual_state", ",", "_", ",", "_", "=", "env", ".", "state", "(", ")", "\n", "\n", "# Should be:", "\n", "# 2 -> batch size", "\n", "# 5 -> 1 EOS backpack + 2 normal backpacks + 2 items", "\n", "# 2 -> features", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# EOS Backpack", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 1", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 2", "\n", "[", "5", ",", "3", "]", ",", "# Item 0", "\n", "[", "5", ",", "3", "]", "# Item 1", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# EOS Backpack", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 1", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 2", "\n", "[", "5", ",", "3", "]", ",", "# Item 0", "\n", "[", "5", ",", "3", "]", "# Item 1", "\n", "]", "\n", "]", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestKnapsackEnv.test_compute_masks_fn": [[112, 147], ["environment.custom.knapsack.env.Knapsack", "environment.custom.knapsack.env.Knapsack.compute_masks", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertTrue", "env_test.TestKnapsackEnv.assertTrue", "numpy.all", "numpy.all"], "methods", ["None"], ["", "def", "test_compute_masks_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "actual_backpacks_masks", ",", "actual_items_masks", "=", "env", ".", "compute_masks", "(", ")", "\n", "\n", "# Test masks shape", "\n", "self", ".", "assertEqual", "(", "actual_backpacks_masks", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_items_masks", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_backpacks_masks", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_items_masks", "==", "expected_item_masks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestKnapsackEnv.test_step_fn": [[148, 223], ["environment.custom.knapsack.env.Knapsack", "environment.custom.knapsack.env.Knapsack.step", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertTrue", "env_test.TestKnapsackEnv.assertTrue", "env_test.TestKnapsackEnv.assertTrue", "env_test.TestKnapsackEnv.assertTrue", "env_test.TestKnapsackEnv.assertTrue", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], ["", "def", "test_step_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "action", "=", "[", "\n", "[", "1", ",", "3", "]", ",", "# Problem 0: Place item 0 (index 3) at backpack 1 (index 1)", "\n", "[", "2", ",", "4", "]", "# Problem 1: Place item 1 (index 4) at backpack 2 (index 2)", "\n", "]", "\n", "\n", "actual_state", ",", "actual_rewards", ",", "actual_dones", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Test data shapes", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_rewards", ".", "shape", ",", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_dones", ".", "shape", ",", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'backpack_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'item_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'num_items_to_place'", "]", ",", "2", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Backpack's value is equal to the selected item", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "5", ",", "3", "]", ",", "# Item selected", "\n", "[", "5", ",", "3", "]", "# ", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# ", "\n", "[", "5", ",", "3", "]", "# Item selected", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "expected_rewards", "=", "[", "\n", "[", "3", "]", ",", "\n", "[", "3", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_rewards", "==", "expected_rewards", ")", ")", "\n", "\n", "expected_dones", "=", "[", "\n", "[", "False", "]", ",", "\n", "[", "False", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_dones", "==", "expected_dones", ")", ")", "\n", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'backpack_net_mask'", "]", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'item_net_mask'", "]", "==", "expected_item_masks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestKnapsackEnv.test_multiple_steps_fn": [[224, 320], ["environment.custom.knapsack.env.Knapsack", "numpy.array", "environment.custom.knapsack.env.Knapsack.multiple_steps", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertEqual", "env_test.TestKnapsackEnv.assertTrue", "env_test.TestKnapsackEnv.assertTrue", "env_test.TestKnapsackEnv.assertTrue", "env_test.TestKnapsackEnv.assertTrue", "env_test.TestKnapsackEnv.assertTrue", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.all"], "methods", ["None"], ["", "def", "test_multiple_steps_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "action_list", "=", "np", ".", "array", "(", "[", "\n", "# 1 Step", "\n", "[", "\n", "[", "1", ",", "3", "]", ",", "# Problem 0: Place item 0 (index 3) at backpack 1 (index 1)", "\n", "[", "2", ",", "4", "]", "# Problem 1: Place item 1 (index 4) at backpack 2 (index 2)", "\n", "]", ",", "\n", "# 2 Step", "\n", "[", "\n", "[", "2", ",", "4", "]", ",", "# Problem 0: Place item 0 (index 3) at EOS backpack (index 0)", "\n", "[", "0", ",", "3", "]", "# Problem 1: Place item 1 (index 4) at EOS backpack (index 0)", "\n", "]", "\n", "]", ")", "\n", "\n", "actual_state", ",", "actual_rewards", ",", "actual_dones", ",", "info", "=", "env", ".", "multiple_steps", "(", "action_list", ")", "\n", "\n", "# Test data shapes", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_rewards", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_dones", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'backpack_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'item_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'num_items_to_place'", "]", ",", "2", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Step 1: Backpack's value is equal to the selected item", "\n", "[", "10", ",", "3", "]", ",", "# Step 2: Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# Step 1: Item selected", "\n", "[", "5", ",", "3", "]", "# Step 2: Item selected", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# Step 2: Backpack's value is equal to the selected item", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Step 1: Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# Step 2: Item selected", "\n", "[", "5", ",", "3", "]", "# Step 1: Item selected", "\n", "]", "\n", "]", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "expected_rewards", "=", "[", "\n", "[", "\n", "3.0", ",", "# Prob 1: Step 1", "\n", "3.0", "# Prob 1: Step 2", "\n", "]", ",", "\n", "[", "\n", "3.0", ",", "# Prob 2: Step 1", "\n", "0", "# Prob 2: Step 1", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_rewards", "==", "expected_rewards", ")", ")", "\n", "\n", "expected_dones", "=", "[", "\n", "[", "\n", "0", ",", "# Prob 1: Step 1: Not Done -> 1 is still pending", "\n", "1", "# Prob 1: Step 2: Done -> All items are placed", "\n", "]", ",", "\n", "[", "\n", "0", ",", "# Prob 1: Step 1: Not Done -> 1 is still pending", "\n", "1", "# Prob 1: Step 2: Done -> All items are placed", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_dones", "==", "expected_dones", ")", ")", "\n", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'backpack_net_mask'", "]", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'item_net_mask'", "]", "==", "expected_item_masks", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.backpack_test.TestBackpack.test_constructor": [[16, 26], ["environment.custom.knapsack.backpack.Backpack", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "len"], "methods", ["None"], ["    ", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "backpack", "=", "Backpack", "(", "0", ",", "EOS_BACKPACK", ",", "10", ",", "10", ")", "\n", "\n", "self", ".", "assertEqual", "(", "backpack", ".", "id", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "backpack", ".", "type", ",", "EOS_BACKPACK", ")", "\n", "self", ".", "assertEqual", "(", "backpack", ".", "capacity", ",", "10", ")", "\n", "\n", "self", ".", "assertEqual", "(", "backpack", ".", "current_capacity", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "backpack", ".", "current_value", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "backpack", ".", "items", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.backpack_test.TestBackpack.test_add_item_backpack": [[27, 73], ["environment.custom.knapsack.backpack.Backpack", "environment.custom.knapsack.item.Item", "environment.custom.knapsack.item.Item", "environment.custom.knapsack.item.Item", "environment.custom.knapsack.backpack.Backpack.add_item", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "environment.custom.knapsack.backpack.Backpack.add_item", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "environment.custom.knapsack.backpack.Backpack.add_item", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "environment.custom.knapsack.backpack.Backpack.clear", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "backpack_test.TestBackpack.assertEqual", "environment.custom.knapsack.item.Item.is_taken", "environment.custom.knapsack.item.Item.is_taken", "environment.custom.knapsack.item.Item.is_taken", "len", "environment.custom.knapsack.backpack.Backpack.is_full", "len", "environment.custom.knapsack.item.Item.is_taken", "environment.custom.knapsack.item.Item.is_taken", "environment.custom.knapsack.item.Item.is_taken"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken"], ["", "def", "test_add_item_backpack", "(", "self", ")", ":", "\n", "        ", "backpack", "=", "Backpack", "(", "0", ",", "NORMAL_BACKPACK", ",", "10", ",", "10", ")", "\n", "\n", "item1", "=", "Item", "(", "0", ",", "1", ",", "1", ",", "2", ",", "2", ")", "# Light item", "\n", "item2", "=", "Item", "(", "1", ",", "100", ",", "100", ",", "1", ",", "1", ")", "# Light but valuable item", "\n", "item3", "=", "Item", "(", "1", ",", "1", ",", "1", ",", "100", ",", "100", ")", "# Heavy item", "\n", "\n", "is_valid", ",", "capacity_diff", ",", "current_value", "=", "backpack", ".", "add_item", "(", "item1", ")", "\n", "self", ".", "assertEqual", "(", "is_valid", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "capacity_diff", ",", "8", ")", "# 10 (Backpack) - 2 (item1)", "\n", "self", ".", "assertEqual", "(", "current_value", ",", "1", ")", "# 1 (item1)", "\n", "\n", "is_valid", ",", "capacity_diff", ",", "current_value", "=", "backpack", ".", "add_item", "(", "item2", ")", "\n", "self", ".", "assertEqual", "(", "is_valid", ",", "True", ")", "\n", "# 10 (Backpack) - ( 2 (item1) + 1 (item2))", "\n", "self", ".", "assertEqual", "(", "capacity_diff", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "current_value", ",", "101", ")", "# 1 (item1) + 100 (item2)", "\n", "\n", "is_valid", ",", "capacity_diff", ",", "current_value", "=", "backpack", ".", "add_item", "(", "item3", ")", "\n", "self", ".", "assertEqual", "(", "is_valid", ",", "False", ")", "\n", "# 10 (Backpack) - ( 2 (item1) + 1 (item2) + 100 (item3) )", "\n", "self", ".", "assertEqual", "(", "capacity_diff", ",", "93", ")", "\n", "# 1 (item1) + 100 (item2) + 1 (item3)", "\n", "self", ".", "assertEqual", "(", "current_value", ",", "102", ")", "\n", "\n", "# Item is taken even if it's placed at EOS backpack", "\n", "self", ".", "assertEqual", "(", "item1", ".", "is_taken", "(", ")", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "item2", ".", "is_taken", "(", ")", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "item3", ".", "is_taken", "(", ")", ",", "True", ")", "\n", "\n", "# Must have 3 items stored", "\n", "self", ".", "assertEqual", "(", "len", "(", "backpack", ".", "items", ")", ",", "3", ")", "\n", "\n", "self", ".", "assertEqual", "(", "backpack", ".", "is_full", "(", ")", ",", "True", ")", "\n", "\n", "# Clear the backpack", "\n", "backpack", ".", "clear", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "backpack", ".", "current_capacity", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "backpack", ".", "current_value", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "backpack", ".", "items", ")", ",", "0", ")", "\n", "\n", "# Item's returned back", "\n", "self", ".", "assertEqual", "(", "item1", ".", "is_taken", "(", ")", ",", "False", ")", "\n", "self", ".", "assertEqual", "(", "item2", ".", "is_taken", "(", ")", ",", "False", ")", "\n", "self", ".", "assertEqual", "(", "item3", ".", "is_taken", "(", ")", ",", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.item_test.TestItem.test_constructor": [[15, 22], ["environment.custom.knapsack.item.Item", "item_test.TestItem.assertEqual", "item_test.TestItem.assertEqual", "item_test.TestItem.assertEqual", "item_test.TestItem.assertEqual"], "methods", ["None"], ["    ", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "item", "=", "Item", "(", "0", ",", "1", ",", "1", ",", "2", ",", "2", ")", "# Light item", "\n", "\n", "self", ".", "assertEqual", "(", "item", ".", "id", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "item", ".", "value", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "item", ".", "weight", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "item", ".", "taken", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.item_test.TestItem.test_methods": [[23, 37], ["environment.custom.knapsack.item.Item", "item_test.TestItem.assertEqual", "environment.custom.knapsack.item.Item.take", "item_test.TestItem.assertEqual", "environment.custom.knapsack.item.Item.place_back", "item_test.TestItem.assertEqual", "environment.custom.knapsack.item.Item.is_taken", "environment.custom.knapsack.item.Item.is_taken", "item_test.TestItem.assertRaises", "environment.custom.knapsack.item.Item.take", "environment.custom.knapsack.item.Item.is_taken"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.take", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.place_back", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.take", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.item.Item.is_taken"], ["", "def", "test_methods", "(", "self", ")", ":", "\n", "        ", "item", "=", "Item", "(", "0", ",", "1", ",", "1", ",", "2", ",", "2", ")", "# Light item", "\n", "\n", "self", ".", "assertEqual", "(", "item", ".", "is_taken", "(", ")", ",", "False", ")", "\n", "item", ".", "take", "(", ")", "\n", "self", ".", "assertEqual", "(", "item", ".", "is_taken", "(", ")", ",", "True", ")", "\n", "\n", "# Can't take the item that was already taken", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "item", ".", "take", "(", ")", "\n", "\n", "", "item", ".", "place_back", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "item", ".", "is_taken", "(", ")", ",", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.setUp": [[17, 41], ["environment.custom.resource.penalty.GreedyPenalty", "environment.custom.resource.reward.GreedyReward"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "opts", "=", "{", "\n", "\"CPU_misplace_penalty\"", ":", "5", ",", "\n", "\"RAM_misplace_penalty\"", ":", "10", ",", "\n", "\"MEM_misplace_penalty\"", ":", "15", "\n", "}", "\n", "\n", "self", ".", "EOS_CODE", "=", "0", "\n", "resource_normalization_factor", "=", "1", "\n", "\n", "self", ".", "penalizer", "=", "GreedyPenalty", "(", "\n", "opts", ",", "self", ".", "EOS_CODE", ",", "resource_normalization_factor", "\n", ")", "\n", "\n", "opts", "=", "{", "\n", "\"reward_per_level\"", ":", "[", "10", ",", "20", "]", ",", "\n", "\"misplace_penalty_factor\"", ":", "0.5", ",", "\n", "\"correct_place_factor\"", ":", "1", ",", "\n", "\"premium_rejected\"", ":", "-", "20", ",", "\n", "\"free_rejected\"", ":", "0", "\n", "}", "\n", "\n", "self", ".", "rewarder", "=", "GreedyReward", "(", "\n", "opts", ",", "self", ".", "penalizer", ",", "self", ".", "EOS_CODE", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_constructor": [[43, 55], ["reward_test.TestItem.assertEqual", "reward_test.TestItem.assertEqual", "reward_test.TestItem.assertIsNotNone"], "methods", ["None"], ["", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "expected_reward_per_level", "=", "[", "10", ",", "20", "]", "\n", "misplace_penalty_factor", "=", "0.5", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "rewarder", ".", "reward_per_level", ",", "expected_reward_per_level", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "rewarder", ".", "misplace_penalty_factor", ",", "misplace_penalty_factor", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "self", ".", "rewarder", ".", "penalizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_UNpenalized": [[56, 88], ["numpy.array", "numpy.array", "reward_test.TestItem.rewarder.compute_reward", "reward_test.TestItem.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], ["", "def", "test_reward_UNpenalized", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "[", "400.", ",", "500.", ",", "600.", ",", "1.", ",", "3.", "]", "\n", "# Premium user: 1", "\n", "# Request Type: 2", "\n", "resource", "=", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "1.", "]", "\n", "\n", "expected_reward", "=", "20", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Dummy values. Not used in greedy reward", "\n", "remaining_bin_resources", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward", "(", "\n", "batch", ",", "total_num_nodes", ",", "bin", ",", "remaining_bin_resources", ",", "resource", ",", "feasible_bin_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_UNpenalized_premium": [[90, 122], ["numpy.array", "numpy.array", "reward_test.TestItem.rewarder.compute_reward", "reward_test.TestItem.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], ["", "def", "test_reward_UNpenalized_premium", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "[", "400.", ",", "500.", ",", "600.", ",", "1.", ",", "3.", "]", "\n", "# Premium user: 1", "\n", "# Request Type: 2", "\n", "resource", "=", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "1.", "]", "\n", "\n", "expected_reward", "=", "20", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Dummy values. Not used in greedy reward", "\n", "remaining_bin_resources", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward", "(", "\n", "batch", ",", "total_num_nodes", ",", "bin", ",", "remaining_bin_resources", ",", "resource", ",", "feasible_bin_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_UNpenalized_free": [[123, 155], ["numpy.array", "numpy.array", "reward_test.TestItem.rewarder.compute_reward", "reward_test.TestItem.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], ["", "def", "test_reward_UNpenalized_free", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "[", "400.", ",", "500.", ",", "600.", ",", "1.", ",", "3.", "]", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "0.", "]", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "10", "\n", "\n", "# Dummy values. Not used in greedy reward", "\n", "remaining_bin_resources", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward", "(", "\n", "batch", ",", "total_num_nodes", ",", "bin", ",", "remaining_bin_resources", ",", "resource", ",", "feasible_bin_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_penalized_free": [[156, 188], ["numpy.array", "numpy.array", "reward_test.TestItem.rewarder.compute_reward", "reward_test.TestItem.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], ["", "def", "test_reward_penalized_free", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "[", "400.", ",", "500.", ",", "600.", ",", "1.", ",", "3.", "]", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "[", "40.", ",", "50.", ",", "60.", ",", "5.", ",", "0.", "]", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "5", "\n", "\n", "# Dummy values. Not used in greedy reward", "\n", "remaining_bin_resources", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward", "(", "\n", "batch", ",", "total_num_nodes", ",", "bin", ",", "remaining_bin_resources", ",", "resource", ",", "feasible_bin_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_batch_UNpenalized": [[193, 238], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "reward_test.TestItem.penalizer.to_penalize_batch", "environment.custom.resource.utils.bins_eos_checker", "reward_test.TestItem.rewarder.compute_reward_batch", "reward_test.TestItem.assertEqual", "reward_test.TestItem.numpy().tolist", "reward_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch"], ["", "def", "test_reward_batch_UNpenalized", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 1", "\n", "# Request Type: 2", "\n", "resource", "=", "np", ".", "array", "(", "[", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "20", "]", "\n", "\n", "feasible_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_batch_UNpenalized_premium": [[239, 283], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "reward_test.TestItem.penalizer.to_penalize_batch", "environment.custom.resource.utils.bins_eos_checker", "reward_test.TestItem.rewarder.compute_reward_batch", "reward_test.TestItem.assertEqual", "reward_test.TestItem.numpy().tolist", "reward_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch"], ["", "def", "test_reward_batch_UNpenalized_premium", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 1", "\n", "# Request Type: 2", "\n", "resource", "=", "np", ".", "array", "(", "[", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "20", "]", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_bin_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_batch_UNpenalized_free": [[284, 328], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "reward_test.TestItem.penalizer.to_penalize_batch", "environment.custom.resource.utils.bins_eos_checker", "reward_test.TestItem.rewarder.compute_reward_batch", "reward_test.TestItem.assertEqual", "reward_test.TestItem.numpy().tolist", "reward_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch"], ["", "def", "test_reward_batch_UNpenalized_free", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "np", ".", "array", "(", "[", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "0.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "10", "]", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_bin_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_batch_penalized_free": [[329, 373], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "reward_test.TestItem.penalizer.to_penalize_batch", "environment.custom.resource.utils.bins_eos_checker", "reward_test.TestItem.rewarder.compute_reward_batch", "reward_test.TestItem.assertEqual", "reward_test.TestItem.numpy().tolist", "reward_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch"], ["", "def", "test_reward_batch_penalized_free", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "np", ".", "array", "(", "[", "[", "40.", ",", "50.", ",", "60.", ",", "5.", ",", "0.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "5", "]", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_bin_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_batch_premium_first_UNpenalized_second_penalized": [[376, 436], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "reward_test.TestItem.penalizer.to_penalize_batch", "environment.custom.resource.utils.bins_eos_checker", "reward_test.TestItem.rewarder.compute_reward_batch", "reward_test.TestItem.assertEqual", "reward_test.TestItem.numpy().tolist", "reward_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch"], ["", "def", "test_reward_batch_premium_first_UNpenalized_second_penalized", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "\n", "]", ",", "\n", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "\n", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "# No penalty", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "# Will receive penalty", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "np", ".", "array", "(", "[", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "1.", ",", "1.", "]", ",", "# Withing the range", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "5.", ",", "1.", "]", "# Outside the range", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "20", ",", "10", "]", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_bin_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_reward_batch_premium_first_at_EOS_wrong_second_at_EOS_correct": [[437, 497], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "reward_test.TestItem.penalizer.to_penalize_batch", "environment.custom.resource.utils.bins_eos_checker", "reward_test.TestItem.rewarder.compute_reward_batch", "reward_test.TestItem.assertEqual", "reward_test.TestItem.numpy().tolist", "reward_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch"], ["", "def", "test_reward_batch_premium_first_at_EOS_wrong_second_at_EOS_correct", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "\n", "]", ",", "\n", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "\n", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "# EOS node", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "# EOS node", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "np", ".", "array", "(", "[", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "5.", ",", "1.", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "# Give negative because there are nodes available", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "# Only EOS is available", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "-", "20", ",", "0", "]", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_bin_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_complex_free_and_premium": [[498, 578], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "reward_test.TestItem.penalizer.to_penalize_batch", "environment.custom.resource.utils.bins_eos_checker", "reward_test.TestItem.rewarder.compute_reward_batch", "reward_test.TestItem.assertEqual", "reward_test.TestItem.numpy().tolist", "reward_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch"], ["", "def", "test_complex_free_and_premium", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "0.", "]", "\n", "]", ",", "\n", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "0.", "]", "\n", "]", ",", "\n", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "0.", "]", "\n", "]", ",", "\n", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "0.", "]", "\n", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "# EOS node", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "# EOS node", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "np", ".", "array", "(", "[", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "0.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "0.", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "# Give negative because there are nodes available", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "# Only EOS is available", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "# Give negative because there are nodes available", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "# Only EOS is available", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "20", ",", "0", ",", "10", ",", "0", "]", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_bin_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.reward_test.TestItem.test_complex_all_premium": [[579, 626], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "reward_test.TestItem.penalizer.to_penalize_batch", "environment.custom.resource.utils.bins_eos_checker", "reward_test.TestItem.rewarder.compute_reward_batch", "reward_test.TestItem.assertEqual", "reward_test.TestItem.numpy().tolist", "reward_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch"], ["", "def", "test_complex_all_premium", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "1.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "1.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "0.", "]", "\n", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "bin", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "# EOS node", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "resource", "=", "np", ".", "array", "(", "[", "\n", "[", "0.0025", ",", "0.0027", ",", "0.002", ",", "0.38", ",", "1.", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "0", "]", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_bin_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestResource.setUp": [[16, 90], ["environment.custom.resource.env.ResourceEnvironment"], "methods", ["None"], ["\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "1", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "4", ",", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "6", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "7", ",", "\n", "\"max_backpack_capacity\"", ":", "8", "\n", "}", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "batch_size", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "num_items", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "num_backpacks", ",", "1", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_item_value", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_item_value", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_item_weight", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_item_weight", ",", "6", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_backpack_capacity", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_backpack_capacity", ",", "8", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "tensor_size", ",", "4", ")", "# 2 Items + 1 Backpack + 1 EOS Backpack", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "problem_list", ")", ",", "2", ")", "\n", "\n", "", "def", "test_generate_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "prob_list", "=", "env", ".", "generate", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "prob_list", ")", ",", "2", ")", "\n", "\n", "sub_prob_1", "=", "prob_list", "[", "0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "sub_prob_1", "[", "'backpacks'", "]", ")", ",", "3", ")", "# 2 normal + 1 EOS backpack", "\n", "self", ".", "assertEqual", "(", "len", "(", "sub_prob_1", "[", "'items'", "]", ")", ",", "2", ")", "# 2 normal + 1 EOS backpack", "\n", "\n", "", "def", "test_state_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "actual_state", ",", "_", ",", "_", "=", "env", ".", "state", "(", ")", "\n", "\n", "# Should be:", "\n", "# 2 -> batch size", "\n", "# 5 -> 1 EOS backpack + 2 normal backpacks + 2 items", "\n", "# 2 -> features", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestResource.test_constructor": [[91, 97], ["env_test.TestResource.assertEqual", "env_test.TestResource.assertIsNotNone", "env_test.TestResource.assertIsNotNone", "env_test.TestResource.assertEqual", "len"], "methods", ["None"], ["self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# EOS Backpack", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 1", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 2", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestResource.test_shapes": [[99, 108], ["env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual"], "methods", ["None"], ["[", "5", ",", "3", "]", "# Item 1", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# EOS Backpack", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 1", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 2", "\n", "[", "5", ",", "3", "]", ",", "# Item 0", "\n", "[", "5", ",", "3", "]", "# Item 1", "\n", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestResource.test_reset": [[110, 137], ["env_test.TestResource.env.num_inserted_resources", "numpy.array", "env_test.TestResource.env.step", "env_test.TestResource.env.step", "env_test.TestResource.env.num_inserted_resources", "env_test.TestResource.env.reset_num_iterations", "env_test.TestResource.env.reset", "env_test.TestResource.env.num_inserted_resources", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.num_inserted_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.num_inserted_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.reset_num_iterations", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.num_inserted_resources"], ["self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "", "def", "test_compute_masks_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "actual_backpacks_masks", ",", "actual_items_masks", "=", "env", ".", "compute_masks", "(", ")", "\n", "\n", "# Test masks shape", "\n", "self", ".", "assertEqual", "(", "actual_backpacks_masks", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_items_masks", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepFn.setUp": [[140, 214], ["environment.custom.resource.env.ResourceEnvironment"], "methods", ["None"], ["\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_items_masks", "==", "expected_item_masks", ")", ")", "\n", "\n", "", "def", "test_step_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "action", "=", "[", "\n", "[", "1", ",", "3", "]", ",", "# Problem 0: Place item 0 (index 3) at backpack 1 (index 1)", "\n", "[", "2", ",", "4", "]", "# Problem 1: Place item 1 (index 4) at backpack 2 (index 2)", "\n", "]", "\n", "\n", "actual_state", ",", "actual_rewards", ",", "actual_dones", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Test data shapes", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_rewards", ".", "shape", ",", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_dones", ".", "shape", ",", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'backpack_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'item_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'num_items_to_place'", "]", ",", "2", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Backpack's value is equal to the selected item", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "5", ",", "3", "]", ",", "# Item selected", "\n", "[", "5", ",", "3", "]", "# ", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# ", "\n", "[", "5", ",", "3", "]", "# Item selected", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "expected_rewards", "=", "[", "\n", "[", "3", "]", ",", "\n", "[", "3", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_rewards", "==", "expected_rewards", ")", ")", "\n", "\n", "expected_dones", "=", "[", "\n", "[", "False", "]", ",", "\n", "[", "False", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_dones", "==", "expected_dones", ")", ")", "\n", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepFn.test_step_EOS_node_reward_SHOULD_be_negative": [[215, 275], ["numpy.array", "env_test.TestStepFn.env.rebuild_history", "numpy.array", "env_test.TestStepFn.env.build_feasible_mask", "env_test.TestStepFn.env.step", "numpy.array", "env_test.TestStepFn.assertEqual", "numpy.array", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], ["self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'backpack_net_mask'", "]", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'item_net_mask'", "]", "==", "expected_item_masks", ")", ")", "\n", "\n", "", "def", "test_multiple_steps_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "action_list", "=", "np", ".", "array", "(", "[", "\n", "# 1 Step", "\n", "[", "\n", "[", "1", ",", "3", "]", ",", "# Problem 0: Place item 0 (index 3) at backpack 1 (index 1)", "\n", "[", "2", ",", "4", "]", "# Problem 1: Place item 1 (index 4) at backpack 2 (index 2)", "\n", "]", ",", "\n", "# 2 Step", "\n", "[", "\n", "[", "2", ",", "4", "]", ",", "# Problem 0: Place item 0 (index 3) at EOS backpack (index 0)", "\n", "[", "0", ",", "3", "]", "# Problem 1: Place item 1 (index 4) at EOS backpack (index 0)", "\n", "]", "\n", "]", ")", "\n", "\n", "actual_state", ",", "actual_rewards", ",", "actual_dones", ",", "info", "=", "env", ".", "multiple_steps", "(", "action_list", ")", "\n", "\n", "# Test data shapes", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_rewards", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_dones", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'backpack_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'item_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'num_items_to_place'", "]", ",", "2", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Step 1: Backpack's value is equal to the selected item", "\n", "[", "10", ",", "3", "]", ",", "# Step 2: Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# Step 1: Item selected", "\n", "[", "5", ",", "3", "]", "# Step 2: Item selected", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# Step 2: Backpack's value is equal to the selected item", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Step 1: Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# Step 2: Item selected", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepFn.test_step_premium_user_NO_penalty": [[276, 336], ["numpy.array", "env_test.TestStepFn.env.rebuild_history", "numpy.array", "env_test.TestStepFn.env.build_feasible_mask", "env_test.TestStepFn.env.step", "numpy.array", "env_test.TestStepFn.assertEqual", "numpy.array", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], ["[", "5", ",", "3", "]", "# Step 1: Item selected", "\n", "]", "\n", "]", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "expected_rewards", "=", "[", "\n", "[", "\n", "3.0", ",", "# Prob 1: Step 1", "\n", "3.0", "# Prob 1: Step 2", "\n", "]", ",", "\n", "[", "\n", "3.0", ",", "# Prob 2: Step 1", "\n", "0", "# Prob 2: Step 1", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_rewards", "==", "expected_rewards", ")", ")", "\n", "\n", "expected_dones", "=", "[", "\n", "[", "\n", "0", ",", "# Prob 1: Step 1: Not Done -> 1 is still pending", "\n", "1", "# Prob 1: Step 2: Done -> All items are placed", "\n", "]", ",", "\n", "[", "\n", "0", ",", "# Prob 1: Step 1: Not Done -> 1 is still pending", "\n", "1", "# Prob 1: Step 2: Done -> All items are placed", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_dones", "==", "expected_dones", ")", ")", "\n", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'backpack_net_mask'", "]", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'item_net_mask'", "]", "==", "expected_item_masks", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepFn.test_step_premium_user_WITH_penalty": [[337, 397], ["numpy.array", "env_test.TestStepFn.env.rebuild_history", "numpy.array", "env_test.TestStepFn.env.build_feasible_mask", "env_test.TestStepFn.env.step", "numpy.array", "env_test.TestStepFn.assertEqual", "numpy.array", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepFn.test_step_free_user_NO_penalty": [[398, 458], ["numpy.array", "env_test.TestStepFn.env.rebuild_history", "numpy.array", "env_test.TestStepFn.env.build_feasible_mask", "env_test.TestStepFn.env.step", "numpy.array", "env_test.TestStepFn.assertEqual", "numpy.array", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepFn.test_step_free_user_WITH_penalty": [[459, 519], ["numpy.array", "env_test.TestStepFn.env.rebuild_history", "numpy.array", "env_test.TestStepFn.env.build_feasible_mask", "env_test.TestStepFn.env.step", "numpy.array", "env_test.TestStepFn.assertEqual", "numpy.array", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepFn.test_step_SHOULD_be_Done": [[520, 617], ["numpy.array", "env_test.TestStepFn.env.rebuild_history", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.assertEqual", "numpy.array", "env_test.TestStepFn.env.step", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.env.step", "env_test.TestStepFn.assertTrue", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.assertEqual", "env_test.TestStepFn.env.resource_net_mask.tolist", "env_test.TestStepFn.env.mha_used_mask.tolist", "info[].tolist", "info[].tolist", "info[].tolist", "info[].tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepBatchFn.setUp": [[621, 695], ["environment.custom.resource.env.ResourceEnvironment"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepBatchFn.test_step_EOS_node_reward_SHOULD_be_negative": [[696, 756], ["numpy.array", "env_test.TestStepBatchFn.env.rebuild_history", "numpy.array", "env_test.TestStepBatchFn.env.build_feasible_mask", "env_test.TestStepBatchFn.env.step_batch", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.step_batch"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepBatchFn.test_step_premium_user_NO_penalty": [[757, 817], ["numpy.array", "env_test.TestStepBatchFn.env.rebuild_history", "numpy.array", "env_test.TestStepBatchFn.env.build_feasible_mask", "env_test.TestStepBatchFn.env.step_batch", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.step_batch"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepBatchFn.test_step_premium_user_WITH_penalty": [[818, 878], ["numpy.array", "env_test.TestStepBatchFn.env.rebuild_history", "numpy.array", "env_test.TestStepBatchFn.env.build_feasible_mask", "env_test.TestStepBatchFn.env.step_batch", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.step_batch"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepBatchFn.test_step_free_user_NO_penalty": [[879, 939], ["numpy.array", "env_test.TestStepBatchFn.env.rebuild_history", "numpy.array", "env_test.TestStepBatchFn.env.build_feasible_mask", "env_test.TestStepBatchFn.env.step_batch", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.step_batch"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepBatchFn.test_step_free_user_WITH_penalty": [[940, 1000], ["numpy.array", "env_test.TestStepBatchFn.env.rebuild_history", "numpy.array", "env_test.TestStepBatchFn.env.build_feasible_mask", "env_test.TestStepBatchFn.env.step_batch", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "numpy.array", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.assertFalse", "next_state.tolist", "numpy.array.tolist", "rewards.numpy().tolist", "numpy.array.tolist", "rewards.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.step_batch"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestStepBatchFn.test_step_SHOULD_be_Done": [[1001, 1098], ["numpy.array", "env_test.TestStepBatchFn.env.rebuild_history", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.assertEqual", "numpy.array", "env_test.TestStepBatchFn.env.step_batch", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.env.step_batch", "env_test.TestStepBatchFn.assertTrue", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.assertEqual", "env_test.TestStepBatchFn.env.resource_net_mask.tolist", "env_test.TestStepBatchFn.env.mha_used_mask.tolist", "info[].tolist", "info[].tolist", "info[].tolist", "info[].tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.step_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.step_batch"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestMaskingFn.setUp": [[1102, 1176], ["environment.custom.resource.env.ResourceEnvironment"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestMaskingFn.test_build_feasible_mask_SHOULD_mask_all": [[1177, 1216], ["numpy.array", "numpy.array", "numpy.array", "env_test.TestMaskingFn.env.build_feasible_mask", "env_test.TestMaskingFn.assertEqual", "env_test.TestMaskingFn.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestMaskingFn.test_build_feasible_mask_SHOULD_leave_all_unmasked": [[1218, 1257], ["numpy.array", "numpy.array", "numpy.array", "env_test.TestMaskingFn.env.build_feasible_mask", "env_test.TestMaskingFn.assertEqual", "env_test.TestMaskingFn.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestMaskingFn.test_build_feasible_mask_SHOULD_mask_1_bin_IN_RANGE": [[1259, 1298], ["numpy.array", "numpy.array", "numpy.array", "env_test.TestMaskingFn.env.build_feasible_mask", "env_test.TestMaskingFn.assertEqual", "env_test.TestMaskingFn.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestMaskingFn.test_build_feasible_mask_SHOULD_mask_all_because_bin_OUT_RANGE": [[1300, 1339], ["numpy.array", "numpy.array", "numpy.array", "env_test.TestMaskingFn.env.build_feasible_mask", "env_test.TestMaskingFn.assertEqual", "env_test.TestMaskingFn.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestMaskingFn.test_build_feasible_mask_SHOULD_leave_bins_OUT_RANGE_unmasked": [[1341, 1380], ["numpy.array", "numpy.array", "numpy.array", "env_test.TestMaskingFn.env.build_feasible_mask", "env_test.TestMaskingFn.assertEqual", "env_test.TestMaskingFn.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.env_test.TestMaskingFn.test_build_feasible_mask_SHOULD_leave_bins_OUT_RANGE_unmasked_": [[1382, 1421], ["numpy.array", "numpy.array", "numpy.array", "env_test.TestMaskingFn.env.build_feasible_mask", "env_test.TestMaskingFn.assertEqual", "env_test.TestMaskingFn.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.utils_test.TestUtils.setUp": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "EOS_CODE", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.utils_test.TestUtils.test_bins_full_checker": [[31, 45], ["numpy.array", "environment.custom.resource.utils.bins_eos_checker", "utils_test.TestUtils.assertEqual", "environment.custom.resource.utils.bins_eos_checker.numpy().tolist", "environment.custom.resource.utils.bins_eos_checker.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker"], ["", "def", "test_bins_full_checker", "(", "self", ")", ":", "\n", "        ", "bins", "=", "np", ".", "array", "(", "[", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "2.", ",", "5.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "10.", ",", "10.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "# Only this one is EOS", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "num_features", "=", "5", "\n", "excepted_result", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "\n", "actual_result", "=", "bins_eos_checker", "(", "bins", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "excepted_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.utils_test.TestUtils.test_is_premium_and_bins_are_full_checker": [[46, 81], ["numpy.array", "numpy.array", "numpy.array", "environment.custom.resource.utils.bins_full_checker", "environment.custom.resource.utils.is_premium_wrongly_rejected_checker", "utils_test.TestUtils.assertEqual", "environment.custom.resource.utils.is_premium_wrongly_rejected_checker.numpy().tolist", "environment.custom.resource.utils.is_premium_wrongly_rejected_checker.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_full_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.is_premium_wrongly_rejected_checker"], ["", "def", "test_is_premium_and_bins_are_full_checker", "(", "self", ")", ":", "\n", "        ", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "# All Full", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "num_features", "=", "5", "\n", "\n", "user_types", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "# Free", "\n", "0", ",", "# Free", "\n", "1", ",", "# Premium", "\n", "1", "# Premium", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "is_eos_bin", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "\n", "1", ",", "\n", "0", ",", "\n", "1", "\n", "]", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "are_bins_full", "=", "bins_full_checker", "(", "feasible_bin_mask", ",", "num_features", ")", "\n", "\n", "expected_result", "=", "[", "\n", "0", ",", "\n", "0", ",", "\n", "0", ",", "\n", "1", "# Rejected while there were space", "\n", "]", "\n", "actual_result", "=", "is_premium_wrongly_rejected_checker", "(", "are_bins_full", ",", "user_types", ",", "is_eos_bin", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_result", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.setUp": [[13, 25], ["environment.custom.resource.penalty.GreedyPenalty"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "opts", "=", "{", "\n", "\"CPU_misplace_penalty\"", ":", "5", ",", "\n", "\"RAM_misplace_penalty\"", ":", "10", ",", "\n", "\"MEM_misplace_penalty\"", ":", "15", "\n", "}", "\n", "\n", "EOS_CODE", "=", "-", "1", "\n", "resource_normalization_factor", "=", "1", "\n", "\n", "self", ".", "penalizer", "=", "GreedyPenalty", "(", "\n", "opts", ",", "EOS_CODE", ",", "resource_normalization_factor", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_constructor": [[27, 31], ["penalty_test.TestItem.assertEqual", "penalty_test.TestItem.assertEqual", "penalty_test.TestItem.assertEqual"], "methods", ["None"], ["", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "penalizer", ".", "CPU_penalty", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "penalizer", ".", "RAM_penalty", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "penalizer", ".", "MEM_penalty", ",", "15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_compute_CPU_penalty": [[32, 36], ["penalty_test.TestItem.assertEqual", "penalty_test.TestItem.penalizer.compute_CPU_penalty"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_CPU_penalty"], ["", "def", "test_compute_CPU_penalty", "(", "self", ")", ":", "\n", "        ", "resource_CPU", "=", "3", "\n", "expected_CPU", "=", "8", "\n", "self", ".", "assertEqual", "(", "self", ".", "penalizer", ".", "compute_CPU_penalty", "(", "resource_CPU", ")", ",", "expected_CPU", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_compute_RAM_penalty": [[37, 41], ["penalty_test.TestItem.assertEqual", "penalty_test.TestItem.penalizer.compute_RAM_penalty"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_RAM_penalty"], ["", "def", "test_compute_RAM_penalty", "(", "self", ")", ":", "\n", "        ", "resource_RAM", "=", "7", "\n", "expected_RAM", "=", "17", "\n", "self", ".", "assertEqual", "(", "self", ".", "penalizer", ".", "compute_RAM_penalty", "(", "resource_RAM", ")", ",", "expected_RAM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_compute_MEM_penalty": [[42, 46], ["penalty_test.TestItem.assertEqual", "penalty_test.TestItem.penalizer.compute_MEM_penalty"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_MEM_penalty"], ["", "def", "test_compute_MEM_penalty", "(", "self", ")", ":", "\n", "        ", "resource_MEM", "=", "1", "\n", "expected_MEM", "=", "16", "\n", "self", ".", "assertEqual", "(", "self", ".", "penalizer", ".", "compute_MEM_penalty", "(", "resource_MEM", ")", ",", "expected_MEM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_compute_penalty": [[47, 63], ["penalty_test.TestItem.penalizer.compute_penalty", "penalty_test.TestItem.assertEqual", "penalty_test.TestItem.assertEqual", "penalty_test.TestItem.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_penalty"], ["", "def", "test_compute_penalty", "(", "self", ")", ":", "\n", "        ", "resource_CPU", "=", "5", "\n", "resource_RAM", "=", "10", "\n", "resource_MEM", "=", "10", "\n", "\n", "expected_CPU", "=", "10", "\n", "expected_RAM", "=", "20", "\n", "expected_MEM", "=", "25", "\n", "\n", "actual_CPU", ",", "actual_RAM", ",", "actual_MEM", "=", "self", ".", "penalizer", ".", "compute_penalty", "(", "\n", "resource_CPU", ",", "resource_RAM", ",", "resource_MEM", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "expected_CPU", ",", "actual_CPU", ")", "\n", "self", ".", "assertEqual", "(", "expected_RAM", ",", "actual_RAM", ")", "\n", "self", ".", "assertEqual", "(", "expected_MEM", ",", "actual_MEM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_should_NOT_to_penalize": [[64, 73], ["penalty_test.TestItem.assertEqual", "penalty_test.TestItem.penalizer.to_penalize"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize"], ["", "def", "test_should_NOT_to_penalize", "(", "self", ")", ":", "\n", "        ", "bin_lower_type", "=", "2", "\n", "bin_upper_type", "=", "5", "\n", "\n", "resource_type", "=", "3", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "penalizer", ".", "to_penalize", "(", "bin_lower_type", ",", "bin_upper_type", ",", "resource_type", ")", ",", "\n", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_should_to_penalize_lower_bound": [[75, 84], ["penalty_test.TestItem.assertEqual", "penalty_test.TestItem.penalizer.to_penalize"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize"], ["", "def", "test_should_to_penalize_lower_bound", "(", "self", ")", ":", "\n", "        ", "bin_lower_type", "=", "2", "\n", "bin_upper_type", "=", "5", "\n", "\n", "resource_type", "=", "1", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "penalizer", ".", "to_penalize", "(", "bin_lower_type", ",", "bin_upper_type", ",", "resource_type", ")", ",", "\n", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_should_to_penalize_upper_bound": [[86, 95], ["penalty_test.TestItem.assertEqual", "penalty_test.TestItem.penalizer.to_penalize"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize"], ["", "def", "test_should_to_penalize_upper_bound", "(", "self", ")", ":", "\n", "        ", "bin_lower_type", "=", "2", "\n", "bin_upper_type", "=", "5", "\n", "\n", "resource_type", "=", "6", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "penalizer", ".", "to_penalize", "(", "bin_lower_type", ",", "bin_upper_type", ",", "resource_type", ")", ",", "\n", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_batch_should_NOT_penalize": [[97, 123], ["numpy.array", "numpy.array", "numpy.array", "penalty_test.TestItem.penalizer.to_penalize_batch", "penalty_test.TestItem.assertEqual", "penalty_test.TestItem.numpy().tolist", "penalty_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch"], ["", "def", "test_batch_should_NOT_penalize", "(", "self", ")", ":", "\n", "        ", "bin_lower_type", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "# node 0 lower bound", "\n", "4", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "bin_upper_type", "=", "np", ".", "array", "(", "[", "\n", "7", ",", "# node 0 lower bound", "\n", "6", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "resource_type", "=", "np", ".", "array", "(", "[", "\n", "5", ",", "# resource 0 type", "\n", "6", ",", "# resource 1 type", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "\n", "expected_result", "=", "[", "0", ",", "0", "]", "\n", "\n", "actual_result", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin_lower_type", ",", "\n", "bin_upper_type", ",", "\n", "resource_type", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_batch_should_penalize_upper_bound": [[124, 150], ["numpy.array", "numpy.array", "numpy.array", "penalty_test.TestItem.penalizer.to_penalize_batch", "penalty_test.TestItem.assertEqual", "penalty_test.TestItem.numpy().tolist", "penalty_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch"], ["", "def", "test_batch_should_penalize_upper_bound", "(", "self", ")", ":", "\n", "        ", "bin_lower_type", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "# node 0 lower bound", "\n", "4", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "bin_upper_type", "=", "np", ".", "array", "(", "[", "\n", "7", ",", "# node 0 lower bound", "\n", "6", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "resource_type", "=", "np", ".", "array", "(", "[", "\n", "55", ",", "# resource 0 type", "\n", "65", ",", "# resource 1 type", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "\n", "expected_result", "=", "[", "1", ",", "1", "]", "\n", "\n", "actual_result", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin_lower_type", ",", "\n", "bin_upper_type", ",", "\n", "resource_type", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_batch_should_penalize_lower_bound": [[151, 177], ["numpy.array", "numpy.array", "numpy.array", "penalty_test.TestItem.penalizer.to_penalize_batch", "penalty_test.TestItem.assertEqual", "penalty_test.TestItem.numpy().tolist", "penalty_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch"], ["", "def", "test_batch_should_penalize_lower_bound", "(", "self", ")", ":", "\n", "        ", "bin_lower_type", "=", "np", ".", "array", "(", "[", "\n", "3", ",", "# node 0 lower bound", "\n", "4", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "bin_upper_type", "=", "np", ".", "array", "(", "[", "\n", "7", ",", "# node 0 lower bound", "\n", "6", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "resource_type", "=", "np", ".", "array", "(", "[", "\n", "1", ",", "# resource 0 type", "\n", "1", ",", "# resource 1 type", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "\n", "expected_result", "=", "[", "1", ",", "1", "]", "\n", "\n", "actual_result", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin_lower_type", ",", "\n", "bin_upper_type", ",", "\n", "resource_type", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_batch_should_penalize_first_element": [[178, 204], ["numpy.array", "numpy.array", "numpy.array", "penalty_test.TestItem.penalizer.to_penalize_batch", "penalty_test.TestItem.assertEqual", "penalty_test.TestItem.numpy().tolist", "penalty_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch"], ["", "def", "test_batch_should_penalize_first_element", "(", "self", ")", ":", "\n", "        ", "bin_lower_type", "=", "np", ".", "array", "(", "[", "\n", "3", ",", "# node 0 lower bound", "\n", "4", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "bin_upper_type", "=", "np", ".", "array", "(", "[", "\n", "7", ",", "# node 0 lower bound", "\n", "6", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "resource_type", "=", "np", ".", "array", "(", "[", "\n", "199", ",", "# resource 0 type", "\n", "5", ",", "# resource 1 type", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "\n", "expected_result", "=", "[", "1", ",", "0", "]", "\n", "\n", "actual_result", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin_lower_type", ",", "\n", "bin_upper_type", ",", "\n", "resource_type", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.tests.penalty_test.TestItem.test_batch_should_penalize_second_element": [[205, 231], ["numpy.array", "numpy.array", "numpy.array", "penalty_test.TestItem.penalizer.to_penalize_batch", "penalty_test.TestItem.assertEqual", "penalty_test.TestItem.numpy().tolist", "penalty_test.TestItem.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch"], ["", "def", "test_batch_should_penalize_second_element", "(", "self", ")", ":", "\n", "        ", "bin_lower_type", "=", "np", ".", "array", "(", "[", "\n", "3", ",", "# node 0 lower bound", "\n", "4", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "bin_upper_type", "=", "np", ".", "array", "(", "[", "\n", "7", ",", "# node 0 lower bound", "\n", "6", ",", "# node 1 lower bound", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "resource_type", "=", "np", ".", "array", "(", "[", "\n", "4", ",", "# resource 0 type", "\n", "588", ",", "# resource 1 type", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "\n", "expected_result", "=", "[", "0", ",", "1", "]", "\n", "\n", "actual_result", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin_lower_type", ",", "\n", "bin_upper_type", ",", "\n", "resource_type", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.resource.Resource.__init__": [[5, 16], ["super().__init__", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "batch_id", ",", "\n", "id", ",", "\n", "resource_representation", ")", ":", "\n", "        ", "super", "(", "Resource", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_id", "=", "batch_id", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "CPU", "=", "np", ".", "array", "(", "[", "resource_representation", "[", "0", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "RAM", "=", "np", ".", "array", "(", "[", "resource_representation", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "MEM", "=", "np", ".", "array", "(", "[", "resource_representation", "[", "2", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.resource.Resource.get_tensor_rep": [[17, 23], ["numpy.asanyarray().flatten", "numpy.asanyarray"], "methods", ["None"], ["", "def", "get_tensor_rep", "(", "self", ")", ":", "\n", "\n", "        ", "return", "np", ".", "asanyarray", "(", "[", "\n", "self", ".", "CPU", ",", "\n", "self", ".", "RAM", ",", "\n", "self", ".", "MEM", "\n", "]", ")", ".", "flatten", "(", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.resource.Resource.print": [[25, 27], ["resource.Resource.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print", "(", "self", ")", ":", "# pragma: no cover", "\n", "        ", "print", "(", "f'Batch: {self.batch_id} \\t| ID : {self.id:02d} \\t| CPU: {self.CPU[0]:1f} \\t| RAM: {self.RAM[0]:1f} \\t| MEM: {self.MEM[0]:1f} \\t'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.__init__": [[12, 35], ["super().__init__", "numpy.array", "numpy.array", "numpy.array", "node.Node.CPU.copy", "node.Node.RAM.copy", "node.Node.MEM.copy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "batch_id", ",", "\n", "id", ",", "\n", "bin_representation", "\n", ")", ":", "\n", "        ", "super", "(", "Node", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_id", "=", "batch_id", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "CPU", "=", "np", ".", "array", "(", "[", "bin_representation", "[", "0", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "RAM", "=", "np", ".", "array", "(", "[", "bin_representation", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "MEM", "=", "np", ".", "array", "(", "[", "bin_representation", "[", "2", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "self", ".", "remaining_CPU", "=", "self", ".", "CPU", ".", "copy", "(", ")", "\n", "self", ".", "remaining_RAM", "=", "self", ".", "RAM", ".", "copy", "(", ")", "\n", "self", ".", "remaining_MEM", "=", "self", ".", "MEM", ".", "copy", "(", ")", "\n", "\n", "self", ".", "req_list", ":", "List", "[", "Request", "]", "=", "[", "]", "\n", "\n", "# History stats", "\n", "self", ".", "CPU_history", "=", "[", "self", ".", "CPU", "]", "\n", "self", ".", "RAM_history", "=", "[", "self", ".", "RAM", "]", "\n", "self", ".", "MEM_history", "=", "[", "self", ".", "MEM", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.compute_dominant_resource": [[36, 42], ["environment.custom.resource_v3.misc.utils.round_half_up", "environment.custom.resource_v3.misc.utils.round_half_up", "environment.custom.resource_v3.misc.utils.round_half_up", "min"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], ["", "def", "compute_dominant_resource", "(", "self", ",", "req", ":", "Request", ")", ":", "\n", "        ", "diff_cpu", "=", "round_half_up", "(", "self", ".", "remaining_CPU", "-", "req", ".", "CPU", ",", "2", ")", "\n", "diff_ram", "=", "round_half_up", "(", "self", ".", "remaining_RAM", "-", "req", ".", "RAM", ",", "2", ")", "\n", "diff_mem", "=", "round_half_up", "(", "self", ".", "remaining_MEM", "-", "req", ".", "MEM", ",", "2", ")", "\n", "\n", "return", "min", "(", "diff_cpu", ",", "diff_ram", ",", "diff_mem", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.can_fit_resource": [[43, 47], ["node.Node.compute_dominant_resource"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.compute_dominant_resource"], ["", "def", "can_fit_resource", "(", "self", ",", "req", ":", "Request", ")", ":", "\n", "        ", "dominant_resource", "=", "self", ".", "compute_dominant_resource", "(", "req", ")", "\n", "\n", "return", "dominant_resource", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.reset": [[48, 58], ["node.Node.CPU.copy", "node.Node.RAM.copy", "node.Node.MEM.copy"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "remaining_CPU", "=", "self", ".", "CPU", ".", "copy", "(", ")", "\n", "self", ".", "remaining_RAM", "=", "self", ".", "RAM", ".", "copy", "(", ")", "\n", "self", ".", "remaining_MEM", "=", "self", ".", "MEM", ".", "copy", "(", ")", "\n", "\n", "self", ".", "req_list", ":", "List", "[", "Request", "]", "=", "[", "]", "\n", "\n", "self", ".", "CPU_history", "=", "[", "self", ".", "CPU", "]", "\n", "self", ".", "RAM_history", "=", "[", "self", ".", "RAM", "]", "\n", "self", ".", "MEM_history", "=", "[", "self", ".", "MEM", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req": [[59, 79], ["node.Node.req_list.append", "node.Node.can_fit_resource", "environment.custom.resource_v3.misc.utils.round_half_up", "environment.custom.resource_v3.misc.utils.round_half_up", "environment.custom.resource_v3.misc.utils.round_half_up", "node.Node.CPU_history.append", "node.Node.RAM_history.append", "node.Node.MEM_history.append", "node.Node.remaining_CPU.copy", "node.Node.remaining_RAM.copy", "node.Node.remaining_MEM.copy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.can_fit_resource", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], ["", "def", "insert_req", "(", "self", ",", "req", ":", "Request", ")", ":", "\n", "\n", "        ", "if", "self", ".", "id", "!=", "0", ":", "\n", "\n", "            ", "assert", "self", ".", "can_fit_resource", "(", "req", ")", ",", "f'Node {self.id} is overloaded. Node info: {self.remaining_CPU}|{self.remaining_RAM}|{self.remaining_MEM}. Resource info: {req.CPU}|{req.RAM}|{req.MEM}'", "\n", "# Update the remaining resources of the Node", "\n", "# self.remaining_CPU -= req.CPU", "\n", "# self.remaining_RAM -= req.RAM", "\n", "# self.remaining_MEM -= req.MEM", "\n", "\n", "self", ".", "remaining_CPU", "=", "round_half_up", "(", "self", ".", "remaining_CPU", "-", "req", ".", "CPU", ",", "2", ")", "\n", "self", ".", "remaining_RAM", "=", "round_half_up", "(", "self", ".", "remaining_RAM", "-", "req", ".", "RAM", ",", "2", ")", "\n", "self", ".", "remaining_MEM", "=", "round_half_up", "(", "self", ".", "remaining_MEM", "-", "req", ".", "MEM", ",", "2", ")", "\n", "\n", "self", ".", "CPU_history", ".", "append", "(", "self", ".", "remaining_CPU", ".", "copy", "(", ")", ")", "\n", "self", ".", "RAM_history", ".", "append", "(", "self", ".", "remaining_RAM", ".", "copy", "(", ")", ")", "\n", "self", ".", "MEM_history", ".", "append", "(", "self", ".", "remaining_MEM", ".", "copy", "(", ")", ")", "\n", "\n", "", "self", ".", "req_list", ".", "append", "(", "req", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.print": [[80, 99], ["numpy.around", "numpy.around", "numpy.around", "min", "node.Node.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print", "(", "self", ",", "print_details", "=", "False", ")", ":", "# pragma: no cover", "\n", "        ", "CPU_load", "=", "np", ".", "around", "(", "self", ".", "remaining_CPU", ",", "decimals", "=", "4", ")", "\n", "RAM_load", "=", "np", ".", "around", "(", "self", ".", "remaining_RAM", ",", "decimals", "=", "4", ")", "\n", "MEM_load", "=", "np", ".", "around", "(", "self", ".", "remaining_MEM", ",", "decimals", "=", "4", ")", "\n", "dominant", "=", "min", "(", "self", ".", "remaining_CPU", ",", "self", ".", "remaining_RAM", ",", "self", ".", "remaining_MEM", ")", "\n", "\n", "print", "(", "f'Node ID: {self.id} \\t| Remaining CPU: {CPU_load} of {self.CPU} \\t| Remaining RAM: {RAM_load} of {self.RAM} \\t| Remaining MEM: {MEM_load} of {self.MEM} || Dominant {dominant[0]:.3f} \\t'", ")", "\n", "\n", "total_nodes", "=", "len", "(", "self", ".", "req_list", ")", "\n", "\n", "if", "print_details", ":", "\n", "            ", "print", "(", "'Resources allocated to the Node:'", ")", "\n", "if", "total_nodes", "==", "0", ":", "print", "(", "'<Empty>'", ")", "\n", "for", "res", "in", "self", ".", "req_list", ":", "\n", "                ", "res", ".", "print", "(", ")", "\n", "\n", "", "", "self", ".", "print_history_stats", "(", ")", "\n", "\n", "print", "(", "f'Total Requests {total_nodes}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.print_history_stats": [[100, 112], ["node.Node.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["", "def", "print_history_stats", "(", "self", ")", ":", "# pragma: no cover", "\n", "        ", "print", "(", "'CPU History'", ")", "\n", "\n", "np", ".", "set_printoptions", "(", "precision", "=", "4", ")", "\n", "\n", "print", "(", "np", ".", "asanyarray", "(", "self", ".", "CPU_history", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "print", "(", "'RAM History'", ")", "\n", "print", "(", "np", ".", "asanyarray", "(", "self", ".", "RAM_history", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "print", "(", "'MEM History'", ")", "\n", "print", "(", "np", ".", "asanyarray", "(", "self", ".", "MEM_history", ")", ".", "flatten", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep": [[113, 119], ["numpy.asanyarray().flatten", "numpy.asanyarray"], "methods", ["None"], ["", "def", "get_tensor_rep", "(", "self", ")", ":", "\n", "\n", "        ", "return", "np", ".", "asanyarray", "(", "[", "\n", "self", ".", "remaining_CPU", ",", "\n", "self", ".", "remaining_RAM", ",", "\n", "self", ".", "remaining_MEM", "\n", "]", ")", ".", "flatten", "(", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.GreedyReward.__init__": [[24, 27], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["original_batch", ",", "\n", "total_num_nodes", ",", "\n", "bins", ",", "\n", "items", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.GreedyReward.compute_reward": [[28, 45], ["environment.custom.resource_v3.misc.utils.bins_eos_checker"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker"], ["feasible_mask", ",", "\n", "node_ids", ",", "\n", ")", ":", "\n", "\n", "        ", "batch_size", "=", "updated_batch", ".", "shape", "[", "0", "]", "\n", "num_features", "=", "updated_batch", ".", "shape", "[", "2", "]", "\n", "\n", "is_eos", "=", "bins_eos_checker", "(", "bins", ",", "self", ".", "EOS_NODE", "[", "0", "]", ",", "num_features", ",", "\"float32\"", ")", "\n", "\n", "item_values", "=", "items", "[", ":", ",", "1", "]", "\n", "\n", "reward", "=", "item_values", "*", "(", "1", "-", "is_eos", ")", "\n", "\n", "return", "reward", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.SingleNodeDominantReward.__init__": [[47, 51], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.SingleNodeDominantReward.compute_reward": [[52, 86], ["environment.custom.resource_v3.misc.utils.bins_eos_checker", "tensorflow.reduce_min"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.GlobalDominantReward.__init__": [[89, 93], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.GlobalDominantReward.compute_reward": [[94, 128], ["tensorflow.reduce_min", "environment.custom.resource_v3.misc.utils.bins_eos_checker", "tensorflow.reduce_min"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.ReducedNodeUsage.__init__": [[131, 137], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.ReducedNodeUsage.compute_reward": [[138, 167], ["tensorflow.range", "environment.custom.resource_v3.misc.utils.bins_eos_checker"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.GiniReward.__init__": [[170, 173], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.GiniReward.compute_reward": [[174, 196], ["reward.gini_calculator", "reward.gini_calculator", "reward.gini_calculator"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.gini_calculator", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.gini_calculator", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.gini_calculator"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.RewardFactory": [[6, 22], ["R", "NameError", "list", "rewards.keys"], "function", ["None"], ["# ToDO: Add more rewards", "\n", "}", "\n", "\n", "try", ":", "\n", "        ", "rewardType", "=", "opts", "[", "'type'", "]", "\n", "R", "=", "rewards", "[", "f'{rewardType}'", "]", "\n", "# print(f'\"{rewardType.upper()}\" reward selected.')", "\n", "return", "R", "(", "opts", "[", "f'{rewardType}'", "]", ",", "EOS_NODE", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "raise", "NameError", "(", "f'Unknown Reward Name! Select one of {list(rewards.keys())}'", ")", "\n", "\n", "", "", "class", "GreedyReward", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "opts", ":", "dict", ",", "EOS_NODE", ")", ":", "\n", "        ", "super", "(", "GreedyReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "EOS_NODE", "=", "EOS_NODE", "\n", "\n", "", "def", "compute_reward", "(", "self", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.gini_calculator": [[200, 224], ["tensorflow.range", "tensorflow.sort", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.attention_plotter.attention_plotter": [[7, 63], ["matplotlib.subplots", "enumerate", "range", "matplotlib.tight_layout", "matplotlib.show", "axs[].matshow", "matplotlib.sca", "int", "int", "int", "matplotlib.xticks", "enumerate", "matplotlib.yticks", "numpy.transpose", "round", "round", "round", "nodes_label.append", "range", "int", "int", "int", "int", "int", "int", "len", "round", "round", "round", "round", "round", "round"], "function", ["None"], ["def", "attention_plotter", "(", "attentions", ",", "\n", "num_resources", ",", "\n", "num_bins", "\n", ")", ":", "\n", "\n", "    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "1", ",", "num_resources", ")", "\n", "# fig.suptitle('Attentions')", "\n", "\n", "#for ax in axs.flat:", "\n", "#    ax.set(xlabel='resource', ylabel='nodes')", "\n", "\n", "# Hide x labels and tick labels for top plots and y ticks for right plots.", "\n", "#for ax in axs.flat:", "\n", "#    ax.label_outer()", "\n", "\n", "for", "index", ",", "attention", "in", "enumerate", "(", "attentions", ")", ":", "\n", "# Only show the attention over the bins", "\n", "        ", "bin_attention", "=", "attention", "[", "'attention_probs'", "]", "[", ":", ",", ":", "num_bins", "]", "\n", "axs", "[", "index", "]", ".", "matshow", "(", "np", ".", "transpose", "(", "bin_attention", ")", ")", "\n", "# axs.matshow(np.transpose(bin_attention))", "\n", "# axs[index].set_title('Backpack Attention')", "\n", "\n", "", "for", "index", "in", "range", "(", "num_resources", ")", ":", "\n", "# Select the plot by index for the Items", "\n", "        ", "plt", ".", "sca", "(", "axs", "[", "index", "]", ")", "\n", "# Add the ticks and the labels", "\n", "resource_input", "=", "attentions", "[", "index", "]", "[", "\"decoder_input\"", "]", "\n", "\n", "weight", "=", "int", "(", "round", "(", "resource_input", "[", "0", ",", "0", ",", "0", "]", "*", "100", ")", ")", "\n", "value", "=", "int", "(", "round", "(", "resource_input", "[", "0", ",", "0", ",", "1", "]", "*", "100", ")", ")", "\n", "\n", "resource_label", "=", "f'W:{weight} V:{value}'", "\n", "plt", ".", "xticks", "(", "[", "0", "]", ",", "[", "resource_label", "]", ",", "fontsize", "=", "8", ")", "\n", "\n", "node_states", "=", "attentions", "[", "index", "]", "[", "'current_state'", "]", "[", "0", ",", ":", "num_bins", "]", "\n", "nodes_label", "=", "[", "]", "\n", "for", "index", ",", "bin", "in", "enumerate", "(", "node_states", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "capacity", "=", "int", "(", "round", "(", "bin", "[", "0", "]", ")", ")", "\n", "load", "=", "int", "(", "round", "(", "bin", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "capacity", "=", "int", "(", "round", "(", "bin", "[", "0", "]", "*", "100", ")", ")", "\n", "load", "=", "int", "(", "round", "(", "bin", "[", "1", "]", "*", "100", ")", ")", "\n", "\n", "", "nodes_label", ".", "append", "(", "\n", "f'C:{capacity} L:{load}'", "\n", ")", "\n", "\n", "", "plt", ".", "yticks", "(", "range", "(", "len", "(", "nodes_label", ")", ")", ",", "nodes_label", ",", "rotation", "=", "0", ",", "fontsize", "=", "8", ")", "\n", "\n", "# plt.subplots_adjust(wspace=0.3, hspace = 0.3)", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", "block", "=", "True", ")", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "# pragma: no cover", "\n", "    ", "current_state", "=", "np", ".", "array", "(", "[", "[", "\n", "[", "-", "2.", ",", "-", "2.", "]", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.tester.test": [[19, 116], ["numpy.array", "numpy.array", "range", "environment.custom.resource_v3.misc.utils.generate_file_name", "range", "os.path.join", "environment.custom.resource_v3.misc.csv_writer.log_testing_stats", "range", "os.path.isdir", "os.makedirs", "range", "tester.test_single_instance", "global_stats.append"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.generate_file_name", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.csv_writer.log_testing_stats", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.tester.test_single_instance"], ["log_dir", ":", "str", "\n", ")", ":", "\n", "\n", "\n", "    ", "num_tests", ":", "int", "=", "opts", "[", "'testbed'", "]", "[", "'num_tests'", "]", "\n", "# Number of bins", "\n", "bin_configs", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'bin_sample_configs'", "]", "\n", "bin_size_min", "=", "bin_configs", "[", "'min'", "]", "\n", "bin_size_max", "=", "bin_configs", "[", "'max'", "]", "\n", "bin_size_step", "=", "bin_configs", "[", "'step'", "]", "\n", "\n", "# Bins capacities", "\n", "bin_available_capacities", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'bin_available_capacities'", "]", "\n", "bin_min_resource", "=", "bin_available_capacities", "[", "'min'", "]", "\n", "bin_max_resource", "=", "bin_available_capacities", "[", "'max'", "]", "\n", "bin_step_resource", "=", "bin_available_capacities", "[", "'step'", "]", "\n", "\n", "# Number of items", "\n", "item_configs", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'item_sample_configs'", "]", "\n", "item_size_min", "=", "item_configs", "[", "'min'", "]", "\n", "item_size_max", "=", "item_configs", "[", "'max'", "]", "\n", "item_size_step", "=", "item_configs", "[", "'step'", "]", "\n", "\n", "batch_size", ":", "int", "=", "opts", "[", "'batch_size'", "]", "\n", "\n", "show_per_test_stats", ":", "bool", "=", "opts", "[", "'show_per_test_stats'", "]", "\n", "\n", "export_stats", ":", "bool", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'export_stats'", "]", "\n", "test_folder", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'folder'", "]", "\n", "\n", "filename", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'filename'", "]", "\n", "if", "filename", "==", "None", ":", "\n", "        ", "filename", "=", "generate_file_name", "(", "agent", ".", "agent_config", ")", "\n", "\n", "", "global_stats", "=", "[", "]", "\n", "global_reward_results", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "# Won", "\n", "0", ",", "# Draw", "\n", "0", ",", "# Lost", "\n", "]", ")", "\n", "\n", "for", "item_sample_size", "in", "range", "(", "item_size_min", ",", "item_size_max", "+", "1", ",", "item_size_step", ")", ":", "\n", "        ", "for", "bin_sample_size", "in", "range", "(", "bin_size_min", ",", "bin_size_max", "+", "1", ",", "bin_size_step", ")", ":", "\n", "            ", "for", "bin_min_value", "in", "range", "(", "bin_min_resource", ",", "bin_max_resource", ",", "bin_step_resource", ")", ":", "\n", "# print(f'{node_min_value}||{node_min_value + node_step_resource}')", "\n", "                ", "for", "index", "in", "range", "(", "num_tests", ")", ":", "\n", "\n", "                    ", "instance_stats", ",", "reward_result", "=", "test_single_instance", "(", "\n", "index", ",", "\n", "env", ",", "\n", "agent", ",", "\n", "opts", ",", "\n", "batch_size", ",", "\n", "bin_sample_size", ",", "# Number of nodes", "\n", "bin_min_value", ",", "# Min resources available in each node", "\n", "bin_min_value", "+", "bin_step_resource", ",", "# Max resources available in each node", "\n", "item_sample_size", ",", "# Number of resources", "\n", "log_dir", "\n", ")", "\n", "\n", "global_reward_results", "+=", "reward_result", "\n", "\n", "global_stats", ".", "append", "(", "{", "\n", "\"test_instance\"", ":", "index", ",", "\n", "\"bin_sample_size\"", ":", "bin_sample_size", ",", "\n", "\"bin_min_value\"", ":", "bin_min_value", ",", "\n", "\"bin_max_value\"", ":", "bin_min_value", "+", "bin_step_resource", ",", "\n", "\"item_sample_size\"", ":", "item_sample_size", ",", "\n", "\"instance\"", ":", "instance_stats", "\n", "}", ")", "\n", "\n", "", "", "", "", "if", "export_stats", ":", "\n", "        ", "f", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "test_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "f", ")", "\n", "", "log_testing_stats", "(", "global_stats", ",", "f", ",", "filename", ")", "\n", "\n", "", "return", "global_reward_results", "\n", "\n", "", "def", "test_single_instance", "(", "\n", "instance_id", ",", "\n", "env", ":", "KnapsackEnvironmentV2", ",", "\n", "agent", ":", "Agent", ",", "\n", "opts", ":", "dict", ",", "\n", "batch_size", ":", "int", ",", "\n", "bin_sample_size", ":", "int", ",", "\n", "bin_min_val", ":", "int", ",", "\n", "bin_max_val", ":", "int", ",", "\n", "item_sample_size", ":", "int", ",", "\n", "log_dir", ":", "str", ",", "\n", ")", ":", "\n", "\n", "    ", "plot_attentions", ":", "bool", "=", "opts", "[", "'plot_attentions'", "]", "\n", "\n", "# batch_size: int = opts['batch_size']", "\n", "# req_sample_size: int = opts['profiles_sample_size']", "\n", "# node_sample_size: int = opts['node_sample_size']", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.tester.test_single_instance": [[117, 256], ["env.set_testing_mode", "agent.set_testing_mode", "numpy.zeros", "env.reset", "environment.custom.resource_v3.heuristic.factory.heuristic_factory", "current_state.copy", "time.time", "environment.custom.resource_v3.misc.utils.gather_stats_from_solutions", "print", "agent.act", "env.step", "attentions.append", "next_dec_input.copy", "print", "solver.solve", "environment.custom.resource_v3.misc.utils.compute_max_steps", "datetime.datetime.now().replace().isoformat", "os.path.join", "environment.custom.resource_v3.misc.csv_writer.export_to_csv", "env.print_history", "print", "environment.custom.resource_v3.attention_plotter.attention_plotter", "print", "os.path.isdir", "os.makedirs", "environment.custom.resource_v3.misc.csv_writer.export_to_csv", "solver.print_node_stats", "current_state.copy", "numpy.array", "bins_probs.numpy", "datetime.datetime.now().replace", "time.time", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.factory.heuristic_factory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.gather_stats_from_solutions", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.compute_max_steps", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.export_to_csv", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.print_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.attention_plotter.attention_plotter", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.export_to_csv", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.print_node_stats"], ["export_stats", ":", "bool", "=", "opts", "[", "'export_stats'", "]", "[", "'per_problem_stats'", "]", "[", "'export_stats'", "]", "\n", "folder", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'per_problem_stats'", "]", "[", "'folder'", "]", "\n", "\n", "show_inference_progress", ":", "bool", "=", "opts", "[", "'show_inference_progress'", "]", "\n", "show_solutions", ":", "bool", "=", "opts", "[", "'show_solutions'", "]", "\n", "show_detailed_solutions", ":", "bool", "=", "opts", "[", "'show_detailed_solutions'", "]", "\n", "\n", "# Set the agent and env to testing mode", "\n", "env", ".", "set_testing_mode", "(", "\n", "batch_size", ",", "\n", "bin_sample_size", ",", "\n", "item_sample_size", ",", "\n", "bin_min_val", ",", "\n", "bin_max_val", "\n", ")", "\n", "agent", ".", "set_testing_mode", "(", "\n", "batch_size", ",", "\n", "env", ".", "bin_sample_size", ",", "\n", "env", ".", "item_sample_size", "\n", ")", "\n", "\n", "training_step", "=", "0", "\n", "isDone", "=", "False", "\n", "episode_rewards", "=", "np", ".", "zeros", "(", "\n", "(", "agent", ".", "batch_size", ",", "agent", ".", "num_resources", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "current_state", ",", "dec_input", ",", "bin_net_mask", ",", "mha_used_mask", "=", "env", ".", "reset", "(", ")", "\n", "\n", "if", "show_inference_progress", ":", "\n", "        ", "print", "(", "f'Testing with {agent.num_resources} resources and {env.bin_sample_size} bins'", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Init the heuristic solvers ", "\n", "", "heuristic_solvers", "=", "heuristic_factory", "(", "env", ".", "bin_sample_size", ",", "opts", "[", "'heuristic'", "]", ")", "\n", "heuristic_input_state", "=", "current_state", ".", "copy", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "attentions", "=", "[", "]", "\n", "\n", "while", "not", "isDone", ":", "\n", "        ", "if", "show_inference_progress", ":", "\n", "            ", "print", "(", "f'Placing step {training_step} of {agent.num_resources}'", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Select an action", "\n", "", "bin_id", ",", "bin_net_mask", ",", "bins_probs", "=", "agent", ".", "act", "(", "\n", "current_state", ",", "\n", "dec_input", ",", "\n", "bin_net_mask", ",", "\n", "mha_used_mask", ",", "\n", "env", ".", "build_feasible_mask", "\n", ")", "\n", "\n", "\n", "next_state", ",", "next_dec_input", ",", "reward", ",", "isDone", ",", "info", "=", "env", ".", "step", "(", "\n", "bin_id", ",", "\n", "bin_net_mask", "\n", ")", "\n", "\n", "# Store episode rewards", "\n", "episode_rewards", "[", ":", ",", "training_step", "]", "=", "reward", "[", ":", ",", "0", "]", "\n", "\n", "attentions", ".", "append", "(", "{", "\n", "\"current_state\"", ":", "current_state", ".", "copy", "(", ")", ",", "\n", "'decoder_input'", ":", "np", ".", "array", "(", "dec_input", ")", ",", "\n", "\"attention_probs\"", ":", "bins_probs", ".", "numpy", "(", ")", "\n", "}", ")", "\n", "\n", "# Update for next iteration", "\n", "current_state", "=", "next_state", "\n", "dec_input", "=", "next_dec_input", ".", "copy", "(", ")", "\n", "bin_net_mask", "=", "info", "[", "'bin_net_mask'", "]", "\n", "mha_used_mask", "=", "info", "[", "'mha_used_mask'", "]", "\n", "\n", "training_step", "+=", "1", "\n", "\n", "", "if", "show_inference_progress", ":", "\n", "# if env.validate_history() == True:", "\n", "#    print('All solutions are valid!')", "\n", "#else:", "\n", "#    print('Ups! Network generated invalid solutions')", "\n", "\n", "        ", "print", "(", "f'Net solution found in {time.time() - start:.2f} seconds'", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Solve with Heuristic", "\n", "", "for", "solver", "in", "heuristic_solvers", ":", "\n", "        ", "solver", ".", "solve", "(", "heuristic_input_state", ")", "\n", "\n", "", "if", "export_stats", ":", "\n", "# Find the the node with maximum number of inserted resources", "\n", "        ", "max_steps", "=", "compute_max_steps", "(", "env", ".", "history", "[", "0", "]", ",", "heuristic_solvers", ")", "\n", "t", "=", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", ".", "isoformat", "(", ")", "\n", "# Export results to CSV", "\n", "f", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "f", ")", "\n", "\n", "", "export_to_csv", "(", "env", ".", "history", ",", "max_steps", ",", "agent", ".", "name", ",", "f'{f}/{t}_{instance_id}'", ")", "\n", "for", "solver", "in", "heuristic_solvers", ":", "\n", "            ", "export_to_csv", "(", "[", "solver", ".", "solution", "]", ",", "max_steps", ",", "solver", ".", "name", ",", "f'{f}/{t}_{instance_id}'", ")", "\n", "\n", "\n", "", "", "if", "show_solutions", ":", "\n", "        ", "env", ".", "print_history", "(", "show_detailed_solutions", ")", "\n", "print", "(", "'________________________________________________________________________________'", ")", "\n", "for", "solver", "in", "heuristic_solvers", ":", "\n", "            ", "solver", ".", "print_node_stats", "(", "show_detailed_solutions", ")", "\n", "\n", "", "", "if", "plot_attentions", ":", "\n", "# Plot the attentions to visualize the policy", "\n", "        ", "attention_plotter", "(", "\n", "attentions", ",", "\n", "env", ".", "item_sample_size", ",", "\n", "env", ".", "bin_sample_size", ",", "\n", ")", "\n", "\n", "", "stats", ",", "reward_result", "=", "gather_stats_from_solutions", "(", "env", ",", "heuristic_solvers", ")", "\n", "\n", "return", "stats", ",", "reward_result", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.__init__": [[21, 82], ["environment.base.base.BaseEnvironment.__init__", "numpy.full", "environment.custom.resource_v3.reward.RewardFactory", "isinstance", "env.ResourceEnvironmentV3.generate_dataset", "env.ResourceEnvironmentV3.generate_batch", "env.ResourceEnvironmentV3.generate_masks", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.RewardFactory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_dataset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks"], ["        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "", "def", "sample_action", "(", "self", ")", ":", "\n", "# Return random action", "\n", "        ", "return", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "\n", "", "def", "get_action_space", "(", "self", ")", ":", "\n", "# Returns action space", "\n", "        ", "if", "hasattr", "(", "self", ".", "env", ".", "action_space", ",", "'n'", ")", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "def", "seed", "(", "self", ",", "num", ")", ":", "\n", "        ", "self", ".", "env", ".", "seed", "(", "num", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "get_observation_space", "(", "self", ")", ":", "\n", "# Returns observation space", "\n", "        ", "return", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "add_stats_to_agent_config", "(", "self", ",", "agent_config", ")", ":", "\n", "        ", "agent_config", "[", "'action_space'", "]", "=", "self", ".", "get_action_space", "(", ")", "\n", "agent_config", "[", "'observation_space'", "]", "=", "self", ".", "get_observation_space", "(", ")", "\n", "\n", "return", "agent_config", "\n", "\n", "", "def", "print_stats", "(", "self", ")", ":", "\n", "        ", "print", "(", "'---------Environment Stats-----------------'", ")", "\n", "print", "(", "f'Name: \"{self.name}\"'", ")", "\n", "print", "(", "'___________________________________________'", ")", "\n", "print", "(", "'Action Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "action_space", ")", "\n", "\n", "print", "(", "'Observation Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ")", "\n", "\n", "print", "(", "'Observation Space Higher Bound'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ".", "high", ")", "\n", "\n", "print", "(", "'Observation Space Lower Bound'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ".", "low", ")", "\n", "\n", "print", "(", "'Maximum Episode Steps'", ")", "\n", "print", "(", "self", ".", "env", ".", "spec", ".", "max_episode_steps", ")", "\n", "print", "(", "'-------------------------------------------'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.reset": [[83, 100], ["isinstance", "env.ResourceEnvironmentV3.generate_batch", "env.ResourceEnvironmentV3.generate_masks", "env.ResourceEnvironmentV3.state", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.state": [[101, 114], ["numpy.expand_dims", "env.ResourceEnvironmentV3.batch.copy", "isinstance", "env.ResourceEnvironmentV3.add_is_empty_dim", "env.ResourceEnvironmentV3.bin_net_mask.copy", "env.ResourceEnvironmentV3.mha_used_mask.copy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.add_is_empty_dim"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.step": [[115, 204], ["tensorflow.fill", "tensorflow.range", "env.ResourceEnvironmentV3.batch.copy", "environment.custom.resource_v3.misc.utils.compute_remaining_resources", "tensorflow.reduce_min", "tensorflow.cast", "numpy.all", "env.ResourceEnvironmentV3.rewarder.compute_reward", "tensorflow.reshape", "env.ResourceEnvironmentV3.batch.copy", "isinstance", "tensorflow.equal", "tensorflow.reshape", "env.ResourceEnvironmentV3.bin_net_mask.copy", "env.ResourceEnvironmentV3.resource_net_mask.copy", "env.ResourceEnvironmentV3.mha_used_mask.copy", "env.ResourceEnvironmentV3.place_reqs", "numpy.expand_dims", "numpy.array", "env.ResourceEnvironmentV3.add_is_empty_dim"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.compute_remaining_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.place_reqs", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.add_is_empty_dim"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_dataset": [[205, 216], ["tensorflow.cast", "tensorflow.random.uniform"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch": [[217, 264], ["numpy.zeros", "tensorflow.cast", "tensorflow.random.uniform", "tensorflow.cast", "range", "env.ResourceEnvironmentV3.build_history", "tensorflow.random.uniform", "tensorflow.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.build_history"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_masks": [[265, 289], ["numpy.zeros", "numpy.ones", "numpy.zeros_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.sample_action": [[290, 313], ["tensorflow.range", "tensorflow.fill", "numpy.expand_dims", "env.ResourceEnvironmentV3.build_feasible_mask", "numpy.random.uniform", "tensorflow.nn.softmax", "tensorflow_probability.distributions.Categorical", "tensorflow_probability.distributions.Categorical.sample"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.add_stats_to_agent_config": [[314, 335], ["isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.set_testing_mode": [[336, 353], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.build_history": [[354, 371], ["enumerate", "enumerate", "history.append", "nodes.append", "environment.custom.resource_v3.node.Node"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.place_reqs": [[372, 385], ["enumerate", "environment.custom.resource_v3.resource.Resource", "node.insert_req"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.build_feasible_mask": [[387, 423], ["isinstance", "tensorflow.tile", "environment.custom.resource_v3.misc.utils.compute_remaining_resources", "tensorflow.reduce_min", "tensorflow.less", "tensorflow.cast", "tensorflow.maximum", "feasible_mask.numpy.numpy.numpy", "numpy.all", "env.ResourceEnvironmentV3.remove_is_empty_dim"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.compute_remaining_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.remove_is_empty_dim"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.add_is_empty_dim": [[424, 427], ["numpy.concatenate", "environment.custom.resource_v3.misc.utils.round_half_up"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.remove_is_empty_dim": [[428, 431], ["environment.custom.resource_v3.misc.utils.round_half_up"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.print_history": [[432, 442], ["range", "print", "print", "node.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.store_dataset": [[443, 445], ["numpy.savetxt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.load_dataset": [[446, 448], ["numpy.loadtxt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward_test.Greedy_0_1_Reward.test_greedy_0_1_reward": [[10, 70], ["numpy.full", "environment.custom.resource_v3.reward.GreedyReward", "numpy.array", "numpy.array.copy", "environment.custom.resource_v3.reward.GreedyReward.compute_reward", "numpy.array", "reward_test.Greedy_0_1_Reward.assertEqual", "environment.custom.resource_v3.reward.GreedyReward.compute_reward.numpy().tolist", "numpy.array.tolist", "environment.custom.resource_v3.reward.GreedyReward.compute_reward.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], ["# Custom Imports", "\n", "from", "environment", ".", "custom", ".", "resource", ".", "reward", "import", "GreedyReward", "\n", "from", "environment", ".", "custom", ".", "resource", ".", "penalty", "import", "GreedyPenalty", "\n", "from", "environment", ".", "custom", ".", "resource", ".", "utils", "import", "bins_eos_checker", "\n", "\n", "class", "TestItem", "(", "unittest", ".", "TestCase", ")", ":", "\n", "\n", "    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "opts", "=", "{", "\n", "\"CPU_misplace_penalty\"", ":", "5", ",", "\n", "\"RAM_misplace_penalty\"", ":", "10", ",", "\n", "\"MEM_misplace_penalty\"", ":", "15", "\n", "}", "\n", "\n", "self", ".", "EOS_CODE", "=", "0", "\n", "resource_normalization_factor", "=", "1", "\n", "\n", "self", ".", "penalizer", "=", "GreedyPenalty", "(", "\n", "opts", ",", "self", ".", "EOS_CODE", ",", "resource_normalization_factor", "\n", ")", "\n", "\n", "opts", "=", "{", "\n", "\"reward_per_level\"", ":", "[", "10", ",", "20", "]", ",", "\n", "\"misplace_penalty_factor\"", ":", "0.5", ",", "\n", "\"correct_place_factor\"", ":", "1", ",", "\n", "\"premium_rejected\"", ":", "-", "20", ",", "\n", "\"free_rejected\"", ":", "0", "\n", "}", "\n", "\n", "self", ".", "rewarder", "=", "GreedyReward", "(", "\n", "opts", ",", "self", ".", "penalizer", ",", "self", ".", "EOS_CODE", "\n", ")", "\n", "\n", "", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "expected_reward_per_level", "=", "[", "10", ",", "20", "]", "\n", "misplace_penalty_factor", "=", "0.5", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "rewarder", ".", "reward_per_level", ",", "expected_reward_per_level", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "rewarder", ".", "misplace_penalty_factor", ",", "misplace_penalty_factor", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "self", ".", "rewarder", ".", "penalizer", ")", "\n", "\n", "", "def", "test_reward_UNpenalized", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "[", "400.", ",", "500.", ",", "600.", ",", "1.", ",", "3.", "]", "\n", "# Premium user: 1", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward_test.SingleNodeDominantTest.test_fair_single_node_dominant_reward": [[73, 135], ["numpy.full", "environment.custom.resource_v3.reward.SingleNodeDominantReward", "numpy.array", "numpy.array.copy", "environment.custom.resource_v3.reward.SingleNodeDominantReward.compute_reward", "numpy.array", "reward_test.SingleNodeDominantTest.assertEqual", "environment.custom.resource_v3.reward.SingleNodeDominantReward.compute_reward.numpy().tolist", "numpy.array.tolist", "environment.custom.resource_v3.reward.SingleNodeDominantReward.compute_reward.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], ["\n", "expected_reward", "=", "20", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Dummy values. Not used in greedy reward", "\n", "remaining_bin_resources", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward", "(", "\n", "batch", ",", "total_num_nodes", ",", "bin", ",", "remaining_bin_resources", ",", "resource", ",", "feasible_bin_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ",", "expected_reward", ")", "\n", "\n", "\n", "", "def", "test_reward_UNpenalized_premium", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "[", "400.", ",", "500.", ",", "600.", ",", "1.", ",", "3.", "]", "\n", "# Premium user: 1", "\n", "# Request Type: 2", "\n", "resource", "=", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "1.", "]", "\n", "\n", "expected_reward", "=", "20", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Dummy values. Not used in greedy reward", "\n", "remaining_bin_resources", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward", "(", "\n", "batch", ",", "total_num_nodes", ",", "bin", ",", "remaining_bin_resources", ",", "resource", ",", "feasible_bin_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ",", "expected_reward", ")", "\n", "\n", "", "def", "test_reward_UNpenalized_free", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward_test.GlobalDominantTest.test_fair_single_node_dominant_reward": [[138, 200], ["numpy.full", "environment.custom.resource_v3.reward.GlobalDominantReward", "numpy.array", "numpy.array.copy", "environment.custom.resource_v3.reward.GlobalDominantReward.compute_reward", "numpy.array", "reward_test.GlobalDominantTest.assertEqual", "environment.custom.resource_v3.reward.GlobalDominantReward.compute_reward.numpy().tolist", "numpy.array.tolist", "environment.custom.resource_v3.reward.GlobalDominantReward.compute_reward.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], ["# Request Type: 5", "\n", "resource", "=", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "0.", "]", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "10", "\n", "\n", "# Dummy values. Not used in greedy reward", "\n", "remaining_bin_resources", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward", "(", "\n", "batch", ",", "total_num_nodes", ",", "bin", ",", "remaining_bin_resources", ",", "resource", ",", "feasible_bin_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ",", "expected_reward", ")", "\n", "\n", "", "def", "test_reward_penalized_free", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "[", "400.", ",", "500.", ",", "600.", ",", "1.", ",", "3.", "]", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "[", "40.", ",", "50.", ",", "60.", ",", "5.", ",", "0.", "]", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "5", "\n", "\n", "# Dummy values. Not used in greedy reward", "\n", "remaining_bin_resources", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward", "(", "\n", "batch", ",", "total_num_nodes", ",", "bin", ",", "remaining_bin_resources", ",", "resource", ",", "feasible_bin_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ",", "expected_reward", ")", "\n", "\n", "############################################################", "\n", "##################  COPY PASTA OF TESTS ABOVE   ############", "\n", "############################################################", "\n", "\n", "", "def", "test_reward_batch_UNpenalized", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward_test.ReducedNodeUsageTest.test_fair_single_node_dominant_reward": [[203, 328], ["numpy.full", "environment.custom.resource_v3.reward.ReducedNodeUsage", "numpy.zeros", "numpy.array", "numpy.array.copy", "environment.custom.resource_v3.reward.ReducedNodeUsage.compute_reward", "numpy.array", "reward_test.ReducedNodeUsageTest.assertEqual", "numpy.array", "reward_test.ReducedNodeUsageTest.assertEqual", "environment.custom.resource_v3.reward.ReducedNodeUsage.compute_reward", "numpy.array", "reward_test.ReducedNodeUsageTest.assertEqual", "numpy.array", "reward_test.ReducedNodeUsageTest.assertEqual", "numpy.zeros.tolist", "numpy.array.tolist", "environment.custom.resource_v3.reward.ReducedNodeUsage.compute_reward.numpy().tolist", "numpy.array.tolist", "numpy.zeros.tolist", "numpy.array.tolist", "environment.custom.resource_v3.reward.ReducedNodeUsage.compute_reward.numpy().tolist", "numpy.array.tolist", "environment.custom.resource_v3.reward.ReducedNodeUsage.compute_reward.numpy", "environment.custom.resource_v3.reward.ReducedNodeUsage.compute_reward.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], ["\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 1", "\n", "# Request Type: 2", "\n", "resource", "=", "np", ".", "array", "(", "[", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "20", "]", "\n", "\n", "feasible_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n", "", "def", "test_reward_batch_UNpenalized_premium", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 1", "\n", "# Request Type: 2", "\n", "resource", "=", "np", ".", "array", "(", "[", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "20", "]", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_bin_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n", "", "def", "test_reward_batch_UNpenalized_free", "(", "self", ")", ":", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "np", ".", "array", "(", "[", "[", "40.", ",", "50.", ",", "60.", ",", "2.", ",", "0.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "10", "]", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n", "num_features", "=", "5", "\n", "is_eos_bin", "=", "bins_eos_checker", "(", "bin", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "actual_reward", "=", "self", ".", "rewarder", ".", "compute_reward_batch", "(", "\n", "batch", ",", "\n", "total_num_nodes", ",", "\n", "bin", ",", "\n", "resource", ",", "\n", "feasible_bin_mask", ",", "\n", "penalties", ",", "\n", "is_eos_bin", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_reward", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "expected_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward_test.TestGiniCalculartor.test_gini_calculator": [[331, 358], ["numpy.array", "numpy.array", "environment.custom.resource_v3.reward.gini_calculator", "numpy.testing.assert_array_almost_equal", "environment.custom.resource_v3.reward.gini_calculator.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.reward.gini_calculator"], ["[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "100.", ",", "200.", ",", "300.", ",", "0.", ",", "2.", "]", ",", "\n", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", ",", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "40.", ",", "50.", ",", "60.", ",", "8.", ",", "1.", "]", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "total_num_nodes", "=", "3", "\n", "\n", "# Lower bound type: 0", "\n", "# Upper bound type: 3", "\n", "bin", "=", "np", ".", "array", "(", "[", "[", "400.", ",", "500.", ",", "600.", ",", "0.", ",", "3.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "# Premium user: 0", "\n", "# Request Type: 5", "\n", "resource", "=", "np", ".", "array", "(", "[", "[", "40.", ",", "50.", ",", "60.", ",", "5.", ",", "0.", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "expected_reward", "=", "[", "5", "]", "\n", "\n", "penalties", "=", "self", ".", "penalizer", ".", "to_penalize_batch", "(", "\n", "bin", "[", ":", ",", "3", "]", ",", "\n", "bin", "[", ":", ",", "4", "]", ",", "\n", "resource", "[", ":", ",", "3", "]", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.setUp": [[13, 48], ["environment.custom.resource_v3.env.ResourceEnvironmentV3"], "methods", ["None"], ["\n", "    ", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "1", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "4", ",", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "6", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "7", ",", "\n", "\"max_backpack_capacity\"", ":", "8", "\n", "}", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "batch_size", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "num_items", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "num_backpacks", ",", "1", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_item_value", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_item_value", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_item_weight", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_item_weight", ",", "6", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "min_backpack_capacity", ",", "7", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "max_backpack_capacity", ",", "8", ")", "\n", "\n", "self", ".", "assertEqual", "(", "env", ".", "tensor_size", ",", "4", ")", "# 2 Items + 1 Backpack + 1 EOS Backpack", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "env", ".", "problem_list", ")", ",", "2", ")", "\n", "\n", "", "def", "test_generate_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_constructor": [[49, 57], ["env_test.TestResource.assertEqual", "env_test.TestResource.assertIsNotNone", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual"], "methods", ["None"], ["\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_shapes": [[58, 66], ["env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual"], "methods", ["None"], ["\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "prob_list", "=", "env", ".", "generate", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "prob_list", ")", ",", "2", ")", "\n", "\n", "sub_prob_1", "=", "prob_list", "[", "0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "sub_prob_1", "[", "'backpacks'", "]", ")", ",", "3", ")", "# 2 normal + 1 EOS backpack", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_reset": [[67, 74], ["env_test.TestResource.env.reset", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset"], ["self", ".", "assertEqual", "(", "len", "(", "sub_prob_1", "[", "'items'", "]", ")", ",", "2", ")", "# 2 normal + 1 EOS backpack", "\n", "\n", "", "def", "test_state_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_initial_masks": [[75, 96], ["numpy.array", "numpy.array", "env_test.TestResource.env.state", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "bin_net_mask.tolist", "numpy.array.tolist", "mha_mask.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], ["\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "actual_state", ",", "_", ",", "_", "=", "env", ".", "state", "(", ")", "\n", "\n", "# Should be:", "\n", "# 2 -> batch size", "\n", "# 5 -> 1 EOS backpack + 2 normal backpacks + 2 items", "\n", "# 2 -> features", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# EOS Backpack", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 1", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_batch_values": [[98, 116], ["env_test.TestResource.env.state", "env_test.TestResource.assertTrue", "env_test.TestResource.assertTrue", "env_test.TestResource.assertTrue", "numpy.all", "numpy.all", "numpy.all", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], ["[", "5", ",", "3", "]", ",", "# Item 0", "\n", "[", "5", ",", "3", "]", "# Item 1", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# EOS Backpack", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 1", "\n", "[", "10", ",", "0", "]", ",", "# Backpack 2", "\n", "[", "5", ",", "3", "]", ",", "# Item 0", "\n", "[", "5", ",", "3", "]", "# Item 1", "\n", "]", "\n", "]", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "", "def", "test_compute_masks_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_testing_mode": [[118, 159], ["env_test.TestResource.env.set_testing_mode", "env_test.TestResource.env.reset", "env_test.TestResource.env.state", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "[].get_tensor_rep", "[].get_tensor_rep", "[].get_tensor_rep", "[].get_tensor_rep", "numpy.array", "[].get_tensor_rep", "[].get_tensor_rep", "[].get_tensor_rep", "[].get_tensor_rep", "numpy.array", "numpy.array", "env_test.TestResource.assertEqual", "len", "len", "len", "nodes.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], ["\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "actual_backpacks_masks", ",", "actual_items_masks", "=", "env", ".", "compute_masks", "(", ")", "\n", "\n", "# Test masks shape", "\n", "self", ".", "assertEqual", "(", "actual_backpacks_masks", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_items_masks", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_backpacks_masks", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_items_masks", "==", "expected_item_masks", ")", ")", "\n", "\n", "", "def", "test_step_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_sample_action": [[161, 172], ["env_test.TestResource.env.sample_action", "env_test.TestResource.assertTrue", "env_test.TestResource.assertEqual", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action"], ["\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "action", "=", "[", "\n", "[", "1", ",", "3", "]", ",", "# Problem 0: Place item 0 (index 3) at backpack 1 (index 1)", "\n", "[", "2", ",", "4", "]", "# Problem 1: Place item 1 (index 4) at backpack 2 (index 2)", "\n", "]", "\n", "\n", "actual_state", ",", "actual_rewards", ",", "actual_dones", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Test data shapes", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_step": [[173, 301], ["env_test.TestResource.env.set_testing_mode", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "env_test.TestResource.env.build_history", "env_test.TestResource.env.step", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "env_test.TestResource.assertEqual", "numpy.array.tolist", "next_state.tolist", "numpy.array.tolist", "next_resource_mask.tolist", "numpy.array.tolist", "next_bin_mask.tolist", "numpy.array.tolist", "next_mha_mask.tolist", "len", "len", "len", "len", "fake_selected_reqs[].tolist", "len", "len", "len", "len", "fake_selected_reqs[].tolist", "instance_0_actual_req.MEM.tolist", "instance_1_actual_req.MEM.tolist", "instance_0_actual_req.CPU.tolist", "instance_0_actual_req.RAM.tolist", "instance_1_actual_req.CPU.tolist", "instance_1_actual_req.RAM.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.build_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], ["self", ".", "assertEqual", "(", "actual_rewards", ".", "shape", ",", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_dones", ".", "shape", ",", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'backpack_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'item_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'num_items_to_place'", "]", ",", "2", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Backpack's value is equal to the selected item", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "5", ",", "3", "]", ",", "# Item selected", "\n", "[", "5", ",", "3", "]", "# ", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# ", "\n", "[", "5", ",", "3", "]", "# Item selected", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "expected_rewards", "=", "[", "\n", "[", "3", "]", ",", "\n", "[", "3", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_rewards", "==", "expected_rewards", ")", ")", "\n", "\n", "expected_dones", "=", "[", "\n", "[", "False", "]", ",", "\n", "[", "False", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_dones", "==", "expected_dones", ")", ")", "\n", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'backpack_net_mask'", "]", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'item_net_mask'", "]", "==", "expected_item_masks", ")", ")", "\n", "\n", "", "def", "test_multiple_steps_fn", "(", "self", ")", ":", "\n", "        ", "env", "=", "Knapsack", "(", "'knapsack'", ",", "{", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\"num_items\"", ":", "2", ",", "\n", "\"num_backpacks\"", ":", "2", ",", "\n", "\n", "\"min_item_value\"", ":", "3", ",", "\n", "\"max_item_value\"", ":", "3", ",", "\n", "\n", "\"min_item_weight\"", ":", "5", ",", "\n", "\"max_item_weight\"", ":", "5", ",", "\n", "\n", "\"min_backpack_capacity\"", ":", "10", ",", "\n", "\"max_backpack_capacity\"", ":", "10", "\n", "}", ")", "\n", "\n", "action_list", "=", "np", ".", "array", "(", "[", "\n", "# 1 Step", "\n", "[", "\n", "[", "1", ",", "3", "]", ",", "# Problem 0: Place item 0 (index 3) at backpack 1 (index 1)", "\n", "[", "2", ",", "4", "]", "# Problem 1: Place item 1 (index 4) at backpack 2 (index 2)", "\n", "]", ",", "\n", "# 2 Step", "\n", "[", "\n", "[", "2", ",", "4", "]", ",", "# Problem 0: Place item 0 (index 3) at EOS backpack (index 0)", "\n", "[", "0", ",", "3", "]", "# Problem 1: Place item 1 (index 4) at EOS backpack (index 0)", "\n", "]", "\n", "]", ")", "\n", "\n", "actual_state", ",", "actual_rewards", ",", "actual_dones", ",", "info", "=", "env", ".", "multiple_steps", "(", "action_list", ")", "\n", "\n", "# Test data shapes", "\n", "self", ".", "assertEqual", "(", "actual_state", ".", "shape", ",", "(", "2", ",", "5", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_rewards", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "actual_dones", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'backpack_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'item_net_mask'", "]", ".", "shape", ",", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "info", "[", "'num_items_to_place'", "]", ",", "2", ")", "\n", "\n", "expected_state", "=", "[", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Step 1: Backpack's value is equal to the selected item", "\n", "[", "10", ",", "3", "]", ",", "# Step 2: Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# Step 1: Item selected", "\n", "[", "5", ",", "3", "]", "# Step 2: Item selected", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "0", "]", ",", "# Step 2: Backpack's value is equal to the selected item", "\n", "[", "10", ",", "0", "]", ",", "# ", "\n", "[", "10", ",", "3", "]", ",", "# Step 1: Backpack's value is equal to the selected item", "\n", "[", "5", ",", "3", "]", ",", "# Step 2: Item selected", "\n", "[", "5", ",", "3", "]", "# Step 1: Item selected", "\n", "]", "\n", "]", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_state", "==", "expected_state", ")", ")", "\n", "\n", "expected_rewards", "=", "[", "\n", "[", "\n", "3.0", ",", "# Prob 1: Step 1", "\n", "3.0", "# Prob 1: Step 2", "\n", "]", ",", "\n", "[", "\n", "3.0", ",", "# Prob 2: Step 1", "\n", "0", "# Prob 2: Step 1", "\n", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_rewards", "==", "expected_rewards", ")", ")", "\n", "\n", "expected_dones", "=", "[", "\n", "[", "\n", "0", ",", "# Prob 1: Step 1: Not Done -> 1 is still pending", "\n", "1", "# Prob 1: Step 2: Done -> All items are placed", "\n", "]", ",", "\n", "[", "\n", "0", ",", "# Prob 1: Step 1: Not Done -> 1 is still pending", "\n", "1", "# Prob 1: Step 2: Done -> All items are placed", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_is_done": [[303, 315], ["env_test.TestResource.env.reset", "env_test.TestResource.env.sample_action", "env_test.TestResource.env.step", "env_test.TestResource.assertFalse", "env_test.TestResource.env.sample_action", "env_test.TestResource.env.step", "env_test.TestResource.assertTrue"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], ["]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "actual_dones", "==", "expected_dones", ")", ")", "\n", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_backpacks_masks", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'backpack_net_mask'", "]", "==", "expected_backpacks_masks", ")", ")", "\n", "\n", "# Test the actual values of backpack mask", "\n", "expected_item_masks", "=", "[", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_build_feasible_mask_ALL_SHOULD_be_unmasked": [[316, 351], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestResource.env.build_feasible_mask", "env_test.TestResource.assertEqual", "env_test.TestResource.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], ["[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "info", "[", "'item_net_mask'", "]", "==", "expected_item_masks", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_build_feasible_mask_ALL_SHOULD_be_masked": [[353, 388], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestResource.env.build_feasible_mask", "env_test.TestResource.assertEqual", "env_test.TestResource.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_build_feasible_mask_2nd_and_3rd_SHOULD_be_unmasked": [[390, 425], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestResource.env.build_feasible_mask", "env_test.TestResource.assertEqual", "env_test.TestResource.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_build_feasible_mask_SHOULD_mask_2_nodes": [[427, 462], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestResource.env.build_feasible_mask", "env_test.TestResource.assertEqual", "env_test.TestResource.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_build_feasible_mask_SHOULD_mask_2_nodes_single_resource_overloaded": [[464, 499], ["numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "env_test.TestResource.env.build_feasible_mask", "env_test.TestResource.assertEqual", "env_test.TestResource.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResource.test_add_stats_to_agent_config": [[501, 513], ["env_test.TestResource.env.add_stats_to_agent_config", "env_test.TestResource.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.add_stats_to_agent_config"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResourceWithDecoderInput.setUp": [[516, 551], ["environment.custom.resource_v3.env.ResourceEnvironmentV3"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResourceWithDecoderInput.test_initial_masks": [[552, 573], ["numpy.array", "numpy.array", "env_test.TestResourceWithDecoderInput.env.state", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "bin_net_mask.tolist", "numpy.array.tolist", "mha_mask.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResourceWithDecoderInput.test_sample_action": [[575, 585], ["env_test.TestResourceWithDecoderInput.env.sample_action", "env_test.TestResourceWithDecoderInput.assertTrue", "env_test.TestResourceWithDecoderInput.assertEqual", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResourceWithDecoderInput.test_reset": [[586, 596], ["env_test.TestResourceWithDecoderInput.env.reset", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResourceWithDecoderInput.test_step": [[597, 731], ["env_test.TestResourceWithDecoderInput.env.set_testing_mode", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "env_test.TestResourceWithDecoderInput.env.build_history", "environment.custom.resource_v3.misc.utils.compute_remaining_resources", "env_test.TestResourceWithDecoderInput.env.step", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "numpy.array", "numpy.expand_dims", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertEqual", "numpy.array.tolist", "next_state.tolist", "next_decoder_input.tolist", "numpy.expand_dims.tolist", "numpy.array.tolist", "next_bin_mask.tolist", "numpy.array.tolist", "next_mha_mask.tolist", "len", "len", "len", "len", "fake_selected_reqs[].tolist", "len", "len", "len", "len", "fake_selected_reqs[].tolist", "instance_0_actual_req.MEM.tolist", "instance_1_actual_req.MEM.tolist", "instance_0_actual_req.CPU.tolist", "instance_0_actual_req.RAM.tolist", "instance_1_actual_req.CPU.tolist", "instance_1_actual_req.RAM.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.build_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.compute_remaining_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResourceWithDecoderInput.test_is_done": [[733, 752], ["env_test.TestResourceWithDecoderInput.env.reset", "env_test.TestResourceWithDecoderInput.env.sample_action", "env_test.TestResourceWithDecoderInput.env.step", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertFalse", "env_test.TestResourceWithDecoderInput.env.sample_action", "env_test.TestResourceWithDecoderInput.env.step", "env_test.TestResourceWithDecoderInput.assertEqual", "env_test.TestResourceWithDecoderInput.assertTrue"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResourceWithReduceNodesReward.setUp": [[755, 793], ["environment.custom.resource_v3.env.ResourceEnvironmentV3"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResourceWithReduceNodesReward.test_shapes": [[794, 820], ["env_test.TestResourceWithReduceNodesReward.env.reset", "env_test.TestResourceWithReduceNodesReward.assertEqual", "env_test.TestResourceWithReduceNodesReward.assertTrue", "env_test.TestResourceWithReduceNodesReward.assertTrue", "env_test.TestResourceWithReduceNodesReward.env.sample_action", "env_test.TestResourceWithReduceNodesReward.env.step", "env_test.TestResourceWithReduceNodesReward.assertEqual", "numpy.all", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env_test.TestResourceWithReduceNodesReward.test_add_stats_to_agent_config": [[822, 834], ["env_test.TestResourceWithReduceNodesReward.env.add_stats_to_agent_config", "env_test.TestResourceWithReduceNodesReward.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.add_stats_to_agent_config"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node_test.TestNode.setUp": [[11, 17], ["numpy.array", "environment.custom.resource_v3.node.Node"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "batch_id", "=", "0", "\n", "id", "=", "0", "# EOS NODE", "\n", "self", ".", "node_representation", "=", "np", ".", "array", "(", "[", "0.9", ",", "0.8", ",", "0.7", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "self", ".", "node", "=", "Node", "(", "batch_id", ",", "id", ",", "self", ".", "node_representation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node_test.TestNode.test_constructor": [[18, 42], ["node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.node.CPU.tolist", "node_test.TestNode.node.RAM.tolist", "node_test.TestNode.node.MEM.tolist", "len", "len", "len", "len", "node_test.TestNode.node_representation[].tolist", "node_test.TestNode.node_representation[].tolist", "node_test.TestNode.node_representation[].tolist"], "methods", ["None"], ["", "def", "test_constructor", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "node", ".", "batch_id", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "node", ".", "id", ",", "0", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "CPU", ".", "tolist", "(", ")", ",", "\n", "[", "self", ".", "node_representation", "[", "0", "]", ".", "tolist", "(", ")", "]", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "RAM", ".", "tolist", "(", ")", ",", "\n", "[", "self", ".", "node_representation", "[", "1", "]", ".", "tolist", "(", ")", "]", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "MEM", ".", "tolist", "(", ")", ",", "\n", "[", "self", ".", "node_representation", "[", "2", "]", ".", "tolist", "(", ")", "]", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "req_list", ")", ",", "0", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "CPU_history", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "RAM_history", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "MEM_history", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node_test.TestNode.test_insert_req_EOS_node": [[43, 65], ["numpy.array", "environment.custom.resource_v3.resource.Resource", "node_test.TestNode.node.insert_req", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "len", "node_test.TestNode.node.remaining_CPU.tolist", "node_test.TestNode.node.remaining_RAM.tolist", "node_test.TestNode.node.remaining_MEM.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req"], ["", "def", "test_insert_req_EOS_node", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "id", "=", "1", "\n", "req_representation", "=", "np", ".", "array", "(", "[", "0.3", ",", "0.2", ",", "0.1", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "req", "=", "Resource", "(", "\n", "batch_id", ",", "id", ",", "req_representation", "\n", ")", "\n", "\n", "self", ".", "node", ".", "insert_req", "(", "req", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "req_list", ")", ",", "1", ")", "\n", "\n", "# EOS Node is not updated", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "remaining_CPU", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "0", "]", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "remaining_RAM", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "1", "]", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "remaining_MEM", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "2", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node_test.TestNode.test_insert_req_regular_node": [[67, 98], ["numpy.array", "environment.custom.resource_v3.resource.Resource", "node_test.TestNode.node.insert_req", "node_test.TestNode.assertEqual", "node_test.TestNode.assertAlmostEqual", "node_test.TestNode.assertAlmostEqual", "node_test.TestNode.assertAlmostEqual", "len", "node_test.TestNode.node.remaining_CPU.tolist", "node_test.TestNode.node.remaining_RAM.tolist", "node_test.TestNode.node.remaining_MEM.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req"], ["", "def", "test_insert_req_regular_node", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "id", "=", "1", "\n", "req_representation", "=", "np", ".", "array", "(", "[", "0.3", ",", "0.2", ",", "0.1", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "req", "=", "Resource", "(", "\n", "batch_id", ",", "id", ",", "req_representation", "\n", ")", "\n", "# Change the node ID to a non EOS", "\n", "self", ".", "node", ".", "id", "=", "1", "\n", "\n", "self", ".", "node", ".", "insert_req", "(", "req", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "req_list", ")", ",", "1", ")", "\n", "\n", "# EOS Node is not updated", "\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "self", ".", "node", ".", "remaining_CPU", ".", "tolist", "(", ")", "[", "0", "]", ",", "\n", "self", ".", "node_representation", "[", "0", "]", "-", "req_representation", "[", "0", "]", ",", "\n", "precision", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "self", ".", "node", ".", "remaining_RAM", ".", "tolist", "(", ")", "[", "0", "]", ",", "\n", "self", ".", "node_representation", "[", "1", "]", "-", "req_representation", "[", "1", "]", ",", "\n", "precision", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "self", ".", "node", ".", "remaining_MEM", ".", "tolist", "(", ")", "[", "0", "]", ",", "\n", "self", ".", "node_representation", "[", "2", "]", "-", "req_representation", "[", "2", "]", ",", "\n", "precision", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node_test.TestNode.test_reset": [[100, 133], ["numpy.array", "environment.custom.resource_v3.resource.Resource", "node_test.TestNode.assertEqual", "node_test.TestNode.node.insert_req", "node_test.TestNode.assertEqual", "node_test.TestNode.node.reset", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "node_test.TestNode.assertEqual", "len", "len", "len", "node_test.TestNode.node.remaining_CPU.tolist", "node_test.TestNode.node.remaining_RAM.tolist", "node_test.TestNode.node.remaining_MEM.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.insert_req", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset"], ["", "def", "test_reset", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "id", "=", "1", "\n", "req_representation", "=", "np", ".", "array", "(", "[", "0.3", ",", "0.2", ",", "0.1", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "req", "=", "Resource", "(", "\n", "batch_id", ",", "id", ",", "req_representation", "\n", ")", "\n", "\n", "# Change the node ID to a non EOS", "\n", "self", ".", "node", ".", "id", "=", "1", "\n", "\n", "# Initially there's no reqs", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "req_list", ")", ",", "0", ")", "\n", "\n", "self", ".", "node", ".", "insert_req", "(", "req", ")", "\n", "\n", "# Should be one", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "req_list", ")", ",", "1", ")", "\n", "\n", "self", ".", "node", ".", "reset", "(", ")", "\n", "\n", "# Reset. Back to zero", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "node", ".", "req_list", ")", ",", "0", ")", "\n", "\n", "# Back to original values", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "remaining_CPU", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "0", "]", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "remaining_RAM", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "1", "]", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "node", ".", "remaining_MEM", ".", "tolist", "(", ")", ",", "self", ".", "node_representation", "[", "2", "]", "\n", ")", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.utils_test.TestUtils.test_round_ops": [[10, 29], ["utils_test.TestUtils.assertFalse", "utils_test.TestUtils.assertEqual", "utils_test.TestUtils.assertEqual", "utils_test.TestUtils.assertEqual", "environment.custom.resource_v3.misc.utils.round_half_up", "environment.custom.resource_v3.misc.utils.round_half_up", "environment.custom.resource_v3.misc.utils.round_half_up", "environment.custom.resource_v3.misc.utils.round_half_up", "environment.custom.resource_v3.misc.utils.round_half_up", "environment.custom.resource_v3.misc.utils.round_half_up"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.round_half_up"], ["\n", "class", "TestUtils", "(", "unittest", ".", "TestCase", ")", ":", "\n", "\n", "    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "EOS_CODE", "=", "0", "\n", "\n", "\n", "", "def", "test_bins_full_checker", "(", "self", ")", ":", "\n", "        ", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "num_features", "=", "5", "\n", "excepted_result", "=", "[", "0", ",", "0", ",", "1", "]", "\n", "\n", "actual_result", "=", "bins_full_checker", "(", "feasible_bin_mask", ",", "num_features", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "excepted_result", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.utils_test.TestUtils.test_reshape_into_vertical_format": [[31, 54], ["numpy.array", "numpy.array", "environment.custom.resource_v3.misc.utils.reshape_into_vertical_format", "utils_test.TestUtils.assertEqual", "environment.custom.resource_v3.misc.utils.reshape_into_vertical_format.numpy().tolist", "numpy.array.tolist", "environment.custom.resource_v3.misc.utils.reshape_into_vertical_format.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.reshape_into_vertical_format"], ["", "def", "test_bins_full_checker", "(", "self", ")", ":", "\n", "        ", "bins", "=", "np", ".", "array", "(", "[", "\n", "[", "10.", ",", "20.", ",", "30.", ",", "2.", ",", "5.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "10.", ",", "10.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "# Only this one is EOS", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "num_features", "=", "5", "\n", "excepted_result", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "\n", "actual_result", "=", "bins_eos_checker", "(", "bins", ",", "self", ".", "EOS_CODE", ",", "num_features", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual_result", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "excepted_result", ")", "\n", "\n", "", "def", "test_is_premium_and_bins_are_full_checker", "(", "self", ")", ":", "\n", "        ", "feasible_bin_mask", "=", "np", ".", "array", "(", "[", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "# All Full", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "num_features", "=", "5", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.utils_test.TestUtils.test_reshape_into_horizontal_format": [[55, 77], ["numpy.array", "numpy.array", "environment.custom.resource_v3.misc.utils.reshape_into_horizontal_format", "utils_test.TestUtils.assertEqual", "environment.custom.resource_v3.misc.utils.reshape_into_horizontal_format.numpy().tolist", "numpy.array.tolist", "environment.custom.resource_v3.misc.utils.reshape_into_horizontal_format.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.reshape_into_horizontal_format"], ["\n", "user_types", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "# Free", "\n", "0", ",", "# Free", "\n", "1", ",", "# Premium", "\n", "1", "# Premium", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "is_eos_bin", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "\n", "1", ",", "\n", "0", ",", "\n", "1", "\n", "]", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "are_bins_full", "=", "bins_full_checker", "(", "feasible_bin_mask", ",", "num_features", ")", "\n", "\n", "expected_result", "=", "[", "\n", "0", ",", "\n", "0", ",", "\n", "0", ",", "\n", "1", "# Rejected while there were space", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.heuristic_test.TestDominantHeuristic.setUp": [[18, 42], ["numpy.array", "DominantResourceHeuristic"], "methods", ["None"], ["[", "\n", "[", "-", "2.0", ",", "-", "2.0", "]", ",", "\n", "[", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.5", ",", "0.0", "]", ",", "\n", "[", "0.2", ",", "0.1", "]", ",", "\n", "[", "0.3", ",", "0.5", "]", ",", "\n", "[", "0.1", ",", "0.4", "]", ",", "\n", "[", "0.9", ",", "0.4", "]", ",", "\n", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "node_sample_size", "=", "3", "\n", "\n", "self", ".", "solver", "=", "ORTools", "(", "\n", "node_sample_size", ",", "\n", "heuristic_opts", "\n", ")", "\n", "\n", "", "def", "test_parse_bins", "(", "self", ")", ":", "\n", "        ", "expected_num_bin", "=", "3", "\n", "\n", "bin_list", "=", "self", ".", "solver", ".", "parse_bins", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "bin_list", ")", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.heuristic_test.TestDominantHeuristic.test_parse_nodes": [[44, 76], ["heuristic_test.TestDominantHeuristic.solver.parse_nodes", "heuristic_test.TestDominantHeuristic.assertEqual", "numpy.array", "heuristic_test.TestDominantHeuristic.assertEqual", "numpy.array", "heuristic_test.TestDominantHeuristic.assertEqual", "numpy.array", "heuristic_test.TestDominantHeuristic.assertEqual", "len", "node_list[].get_tensor_rep().tolist", "numpy.array.tolist", "node_list[].get_tensor_rep().tolist", "numpy.array.tolist", "node_list[].get_tensor_rep().tolist", "numpy.array.tolist", "node_list[].get_tensor_rep", "node_list[].get_tensor_rep", "node_list[].get_tensor_rep"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], [")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "-", "2", ",", "-", "2", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "0.1", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "0.5", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "2", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "", "def", "test_parse_resources", "(", "self", ")", ":", "\n", "        ", "expected_num_resources", "=", "4", "\n", "\n", "resource_list", "=", "self", ".", "solver", ".", "parse_items", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "resource_list", ")", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.heuristic_test.TestDominantHeuristic.test_parse_resources": [[78, 102], ["heuristic_test.TestDominantHeuristic.solver.parse_resources", "heuristic_test.TestDominantHeuristic.assertEqual", "numpy.array", "heuristic_test.TestDominantHeuristic.assertEqual", "numpy.array", "heuristic_test.TestDominantHeuristic.assertEqual", "len", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep().tolist", "numpy.array.tolist", "resource_list[].get_tensor_rep", "resource_list[].get_tensor_rep"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], [")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.2", ",", "0.1", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.3", ",", "0.5", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_third_item", "=", "np", ".", "array", "(", "\n", "[", "0.1", ",", "0.4", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "2", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_third_item", ".", "tolist", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.heuristic_test.TestDominantHeuristic.test_compute_dominant_resource": [[104, 118], ["heuristic_test.TestDominantHeuristic.solver.parse_nodes", "heuristic_test.TestDominantHeuristic.solver.parse_resources", "node_list[].compute_dominant_resource", "numpy.array", "heuristic_test.TestDominantHeuristic.assertEqual", "node_list[].compute_dominant_resource.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.compute_dominant_resource"], ["expected_fourth_item", "=", "np", ".", "array", "(", "\n", "[", "0.9", ",", "0.4", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "3", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_fourth_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "", "def", "test_solver", "(", "self", ")", ":", "\n", "        ", "self", ".", "solver", ".", "solve", "(", "self", ".", "dummy_state", ")", "\n", "\n", "\n", "actual_reward", ",", "actual_empty_nodes", ",", "actual_num_rejected_items", ","]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.heuristic_test.TestDominantHeuristic.test_place_single_resource": [[120, 149], ["heuristic_test.TestDominantHeuristic.solver.parse_nodes", "heuristic_test.TestDominantHeuristic.pop", "heuristic_test.TestDominantHeuristic.solver.parse_resources", "heuristic_test.TestDominantHeuristic.solver.place_single_resource", "heuristic_test.TestDominantHeuristic.assertEqual", "heuristic_test.TestDominantHeuristic.assertEqual", "heuristic_test.TestDominantHeuristic.assertEqual", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.base_heuristic.BaseHeuristic.place_single_resource"], ["\n", "precision", "=", "2", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "actual_reward", ",", "1.0", ",", "precision", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "actual_empty_nodes", ",", "0", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "actual_num_rejected_items", ",", "1", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "actual_rejected_value", ",", "0.4", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "solver", ".", "solution", "[", "0", "]", ".", "item_list", ")", ",", "\n", "1", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "solver", ".", "solution", "[", "1", "]", ".", "item_list", ")", ",", "\n", "1", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "self", ".", "solver", ".", "solution", "[", "2", "]", ".", "item_list", ")", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.heuristic_test.TestDominantHeuristic.test_compute_potential_placement_diffs": [[151, 160], ["heuristic_test.TestDominantHeuristic.solver.parse_nodes", "heuristic_test.TestDominantHeuristic.pop", "heuristic_test.TestDominantHeuristic.solver.parse_resources", "environment.custom.resource_v3.heuristic.dominant_heuristic.compute_potential_placement_diffs", "heuristic_test.TestDominantHeuristic.assertEqual", "heuristic_test.TestDominantHeuristic.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.heuristic.dominant_heuristic.compute_potential_placement_diffs"], [")", "\n", "\n", "", "", "class", "TestWasteReductionHeuristic", "(", "unittest", ".", "TestCase", ")", ":", "\n", "    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "\n", "        ", "heuristic_opts", "=", "{", "\n", "\"item_sort_descending\"", ":", "True", ",", "\n", "\"bin_sort_descending\"", ":", "False", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.heuristic_test.TestDominantHeuristic.test_solver": [[161, 196], ["heuristic_test.TestDominantHeuristic.solver.solve", "heuristic_test.TestDominantHeuristic.assertEqual", "numpy.array", "heuristic_test.TestDominantHeuristic.assertEqual", "heuristic_test.TestDominantHeuristic.assertEqual", "heuristic_test.TestDominantHeuristic.assertEqual", "numpy.array", "heuristic_test.TestDominantHeuristic.assertEqual", "len", "actual_resource_at_node0.get_tensor_rep().tolist", "numpy.array.tolist", "len", "len", "actual_resource_at_node2.get_tensor_rep().tolist", "numpy.array.tolist", "actual_resource_at_node0.get_tensor_rep", "actual_resource_at_node2.get_tensor_rep"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.node.Node.get_tensor_rep"], ["self", ".", "dummy_state", "=", "np", ".", "array", "(", "[", "\n", "[", "\n", "[", "-", "2.0", ",", "-", "2.0", "]", ",", "\n", "[", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.5", ",", "0.0", "]", ",", "\n", "[", "0.2", ",", "0.1", "]", ",", "\n", "[", "0.3", ",", "0.5", "]", ",", "\n", "[", "0.1", ",", "0.4", "]", ",", "\n", "[", "0.9", ",", "0.4", "]", ",", "\n", "]", "\n", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "node_sample_size", "=", "3", "\n", "\n", "self", ".", "solver", "=", "WasteReductionHeuristic", "(", "\n", "node_sample_size", ",", "\n", "heuristic_opts", "\n", ")", "\n", "\n", "", "def", "test_parse_bins", "(", "self", ")", ":", "\n", "        ", "expected_num_bin", "=", "3", "\n", "\n", "bin_list", "=", "self", ".", "solver", ".", "parse_bins", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "bin_list", ")", ",", "\n", "expected_num_bin", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "-", "2", ",", "-", "2", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.heuristic_test.TestRandomHeuristic.setUp": [[199, 220], ["numpy.array", "RandomHeuristic"], "methods", ["None"], ["[", "0.1", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_node", "=", "np", ".", "array", "(", "\n", "[", "0.5", ",", "0", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bin_list", "[", "2", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_node", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "", "def", "test_parse_resources", "(", "self", ")", ":", "\n", "        ", "expected_num_resources", "=", "4", "\n", "\n", "resource_list", "=", "self", ".", "solver", ".", "parse_items", "(", "self", ".", "dummy_state", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "resource_list", ")", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.heuristic_test.TestRandomHeuristic.test_solver": [[222, 239], ["heuristic_test.TestRandomHeuristic.solver.solve", "environment.custom.resource_v3.misc.utils.compute_stats", "heuristic_test.TestRandomHeuristic.assertEqual", "heuristic_test.TestRandomHeuristic.assertEqual", "heuristic_test.TestRandomHeuristic.assertEqual"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.misc.utils.compute_stats"], [")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.2", ",", "0.1", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "0", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "expected_first_item", "=", "np", ".", "array", "(", "\n", "[", "0.3", ",", "0.5", ",", "]", ",", "dtype", "=", "\"float32\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "resource_list", "[", "1", "]", ".", "get_tensor_rep", "(", ")", ".", "tolist", "(", ")", ",", "\n", "expected_first_item", ".", "tolist", "(", ")", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.__init__": [[17, 46], ["super().__init__", "numpy.array", "numpy.array", "numpy.array", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "opts", ",", "\n", "EOS_CODE", ",", "\n", "resource_normalization_factor", "\n", ")", ":", "\n", "        ", "super", "(", "GreedyPenalty", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "EOS_CODE", "=", "EOS_CODE", "\n", "\n", "self", ".", "CPU_penalty", "=", "np", ".", "array", "(", "\n", "[", "opts", "[", "'CPU_misplace_penalty'", "]", "/", "resource_normalization_factor", "]", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "self", ".", "RAM_penalty", "=", "np", ".", "array", "(", "\n", "[", "opts", "[", "'RAM_misplace_penalty'", "]", "/", "resource_normalization_factor", "]", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "self", ".", "MEM_penalty", "=", "np", ".", "array", "(", "\n", "[", "opts", "[", "'MEM_misplace_penalty'", "]", "/", "resource_normalization_factor", "]", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "\n", "self", ".", "tensor", "=", "tf", ".", "constant", "(", "[", "\n", "self", ".", "CPU_penalty", ",", "\n", "self", ".", "RAM_penalty", ",", "\n", "self", ".", "MEM_penalty", "\n", "]", ",", "\n", "dtype", "=", "'float32'", ",", "\n", "shape", "=", "(", "1", ",", "3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_penalty": [[48, 55], ["penalty.GreedyPenalty.compute_CPU_penalty", "penalty.GreedyPenalty.compute_RAM_penalty", "penalty.GreedyPenalty.compute_MEM_penalty"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_CPU_penalty", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_RAM_penalty", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_MEM_penalty"], ["", "def", "compute_penalty", "(", "self", ",", "CPU", ",", "RAM", ",", "MEM", ")", ":", "\n", "\n", "        ", "CPU", "=", "self", ".", "compute_CPU_penalty", "(", "CPU", ")", "\n", "RAM", "=", "self", ".", "compute_RAM_penalty", "(", "RAM", ")", "\n", "MEM", "=", "self", ".", "compute_MEM_penalty", "(", "MEM", ")", "\n", "\n", "return", "CPU", ",", "RAM", ",", "MEM", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_CPU_penalty": [[56, 58], ["None"], "methods", ["None"], ["", "def", "compute_CPU_penalty", "(", "self", ",", "CPU", ")", ":", "\n", "        ", "return", "CPU", "+", "self", ".", "CPU_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_RAM_penalty": [[59, 61], ["None"], "methods", ["None"], ["", "def", "compute_RAM_penalty", "(", "self", ",", "RAM", ")", ":", "\n", "        ", "return", "RAM", "+", "self", ".", "RAM_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_MEM_penalty": [[62, 64], ["None"], "methods", ["None"], ["", "def", "compute_MEM_penalty", "(", "self", ",", "MEM", ")", ":", "\n", "        ", "return", "MEM", "+", "self", ".", "MEM_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize": [[65, 75], ["None"], "methods", ["None"], ["", "def", "to_penalize", "(", "self", ",", "bin_lower_type", ",", "bin_upper_type", ",", "resource_type", ")", ":", "\n", "\n", "# EOS Node is always available", "\n", "        ", "if", "bin_lower_type", "==", "self", ".", "EOS_CODE", "and", "bin_upper_type", "==", "self", ".", "EOS_CODE", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "bin_lower_type", "<=", "resource_type", "<=", "bin_upper_type", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch": [[76, 93], ["tensorflow.greater_equal", "tensorflow.less_equal", "tensorflow.logical_and", "tensorflow.cast"], "methods", ["None"], ["", "def", "to_penalize_batch", "(", "self", ",", "bin_lower_type", ",", "bin_upper_type", ",", "resource_type", ")", ":", "\n", "\n", "# resource_type = np.reshape(resource_type, (batch_size, 1))", "\n", "\n", "# Look for places that won't be penalized", "\n", "# From: https://stackoverflow.com/a/55870586", "\n", "        ", "lower_tensor", "=", "tf", ".", "greater_equal", "(", "resource_type", ",", "bin_lower_type", ")", "\n", "upper_tensor", "=", "tf", ".", "less_equal", "(", "resource_type", ",", "bin_upper_type", ")", "\n", "\n", "in_range", "=", "tf", ".", "logical_and", "(", "lower_tensor", ",", "upper_tensor", ")", "\n", "# Marked as 1 = there's penalty involved", "\n", "# Marked as 0 = no penalty", "\n", "in_range", "=", "1", "-", "tf", ".", "cast", "(", "in_range", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "# in_range = np.reshape(in_range, (batch_size, 1))", "\n", "\n", "return", "in_range", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.tensor_representation": [[94, 96], ["None"], "methods", ["None"], ["", "def", "tensor_representation", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tensor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.PenaltyFactory": [[4, 15], ["P", "NameError", "list", "penalties.keys"], "function", ["None"], ["def", "PenaltyFactory", "(", "opts", ":", "dict", ",", "EOS_CODE", ",", "resource_normalization_factor", ")", ":", "\n", "    ", "penalties", "=", "{", "\n", "'greedy'", ":", "GreedyPenalty", ",", "\n", "}", "\n", "\n", "try", ":", "\n", "        ", "penaltyType", "=", "opts", "[", "'type'", "]", "\n", "P", "=", "penalties", "[", "f'{penaltyType}'", "]", "\n", "return", "P", "(", "opts", "[", "f'{penaltyType}'", "]", ",", "EOS_CODE", ",", "resource_normalization_factor", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "raise", "NameError", "(", "f'Unknown Penalizer Name! Select one of {list(penalties.keys())}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.resource.Resource.__init__": [[5, 22], ["super().__init__", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "batch_id", ",", "\n", "id", ",", "\n", "resource_representation", ")", ":", "\n", "        ", "super", "(", "Resource", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_id", "=", "batch_id", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "CPU", "=", "np", ".", "array", "(", "[", "resource_representation", "[", "0", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "RAM", "=", "np", ".", "array", "(", "[", "resource_representation", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "MEM", "=", "np", ".", "array", "(", "[", "resource_representation", "[", "2", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "", "def", "get_tensor_rep", "(", "self", ")", ":", "\n", "\n", "        ", "return", "np", ".", "asanyarray", "(", "[", "\n", "self", ".", "CPU", ",", "\n", "self", ".", "RAM", ",", "\n", "self", ".", "MEM", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.resource.Resource.print": [[24, 28], ["resource.Resource.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["\n", "", "def", "print", "(", "self", ")", ":", "# pragma: no cover", "\n", "        ", "print", "(", "f'Batch: {self.batch_id} \\t| ID : {self.id:02d} \\t| CPU: {self.CPU[0]:1f} \\t| RAM: {self.RAM[0]:1f} \\t| MEM: {self.MEM[0]:1f} \\t'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.__init__": [[11, 54], ["super().__init__", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["class", "Node", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "batch_id", ",", "\n", "id", ",", "\n", "bin_representation", "\n", ")", ":", "\n", "        ", "super", "(", "Node", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_id", "=", "batch_id", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "CPU", "=", "np", ".", "array", "(", "[", "bin_representation", "[", "0", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "RAM", "=", "np", ".", "array", "(", "[", "bin_representation", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "MEM", "=", "np", ".", "array", "(", "[", "bin_representation", "[", "2", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "self", ".", "remaining_CPU", "=", "self", ".", "CPU", ".", "copy", "(", ")", "\n", "self", ".", "remaining_RAM", "=", "self", ".", "RAM", ".", "copy", "(", ")", "\n", "self", ".", "remaining_MEM", "=", "self", ".", "MEM", ".", "copy", "(", ")", "\n", "\n", "self", ".", "req_list", ":", "List", "[", "Request", "]", "=", "[", "]", "\n", "\n", "# History stats", "\n", "self", ".", "CPU_history", "=", "[", "self", ".", "CPU", "]", "\n", "self", ".", "RAM_history", "=", "[", "self", ".", "RAM", "]", "\n", "self", ".", "MEM_history", "=", "[", "self", ".", "MEM", "]", "\n", "\n", "", "def", "compute_dominant_resource", "(", "self", ",", "req", ":", "Request", ")", ":", "\n", "        ", "diff_cpu", "=", "round_half_up", "(", "self", ".", "remaining_CPU", "-", "req", ".", "CPU", ",", "2", ")", "\n", "diff_ram", "=", "round_half_up", "(", "self", ".", "remaining_RAM", "-", "req", ".", "RAM", ",", "2", ")", "\n", "diff_mem", "=", "round_half_up", "(", "self", ".", "remaining_MEM", "-", "req", ".", "MEM", ",", "2", ")", "\n", "\n", "return", "min", "(", "diff_cpu", ",", "diff_ram", ",", "diff_mem", ")", "\n", "\n", "", "def", "can_fit_resource", "(", "self", ",", "req", ":", "Request", ")", ":", "\n", "        ", "dominant_resource", "=", "self", ".", "compute_dominant_resource", "(", "req", ")", "\n", "\n", "return", "dominant_resource", ">=", "0", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "remaining_CPU", "=", "self", ".", "CPU", ".", "copy", "(", ")", "\n", "self", ".", "remaining_RAM", "=", "self", ".", "RAM", ".", "copy", "(", ")", "\n", "self", ".", "remaining_MEM", "=", "self", ".", "MEM", ".", "copy", "(", ")", "\n", "\n", "self", ".", "req_list", ":", "List", "[", "Request", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.add_resource": [[55, 67], ["environment.custom.resource.resource.Resource", "node.Node.insert_resource"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.insert_resource"], ["self", ".", "CPU_history", "=", "[", "self", ".", "CPU", "]", "\n", "self", ".", "RAM_history", "=", "[", "self", ".", "RAM", "]", "\n", "self", ".", "MEM_history", "=", "[", "self", ".", "MEM", "]", "\n", "\n", "", "def", "insert_req", "(", "self", ",", "req", ":", "Request", ")", ":", "\n", "\n", "        ", "if", "self", ".", "id", "!=", "0", ":", "\n", "\n", "            ", "assert", "self", ".", "can_fit_resource", "(", "req", ")", ",", "f'Node {self.id} is overloaded. Node info: {self.remaining_CPU}|{self.remaining_RAM}|{self.remaining_MEM}. Resource info: {req.CPU}|{req.RAM}|{req.MEM}'", "\n", "# Update the remaining resources of the Node", "\n", "# self.remaining_CPU -= req.CPU", "\n", "# self.remaining_RAM -= req.RAM", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.insert_resource": [[68, 99], ["node.Node.resources.append", "node.Node.validate", "node.Node.CPU_history.append", "node.Node.RAM_history.append", "node.Node.MEM_history.append", "node.Node.percentage_penalized_history.append", "node.Node.compute_percentage_penalized_resources"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.validate", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.compute_percentage_penalized_resources"], ["# self.remaining_MEM -= req.MEM", "\n", "\n", "self", ".", "remaining_CPU", "=", "round_half_up", "(", "self", ".", "remaining_CPU", "-", "req", ".", "CPU", ",", "2", ")", "\n", "self", ".", "remaining_RAM", "=", "round_half_up", "(", "self", ".", "remaining_RAM", "-", "req", ".", "RAM", ",", "2", ")", "\n", "self", ".", "remaining_MEM", "=", "round_half_up", "(", "self", ".", "remaining_MEM", "-", "req", ".", "MEM", ",", "2", ")", "\n", "\n", "self", ".", "CPU_history", ".", "append", "(", "self", ".", "remaining_CPU", ".", "copy", "(", ")", ")", "\n", "self", ".", "RAM_history", ".", "append", "(", "self", ".", "remaining_RAM", ".", "copy", "(", ")", ")", "\n", "self", ".", "MEM_history", ".", "append", "(", "self", ".", "remaining_MEM", ".", "copy", "(", ")", ")", "\n", "\n", "", "self", ".", "req_list", ".", "append", "(", "req", ")", "\n", "\n", "", "def", "print", "(", "self", ",", "print_details", "=", "False", ")", ":", "# pragma: no cover", "\n", "        ", "CPU_load", "=", "np", ".", "around", "(", "self", ".", "remaining_CPU", ",", "decimals", "=", "4", ")", "\n", "RAM_load", "=", "np", ".", "around", "(", "self", ".", "remaining_RAM", ",", "decimals", "=", "4", ")", "\n", "MEM_load", "=", "np", ".", "around", "(", "self", ".", "remaining_MEM", ",", "decimals", "=", "4", ")", "\n", "dominant", "=", "min", "(", "self", ".", "remaining_CPU", ",", "self", ".", "remaining_RAM", ",", "self", ".", "remaining_MEM", ")", "\n", "\n", "print", "(", "f'Node ID: {self.id} \\t| Remaining CPU: {CPU_load} of {self.CPU} \\t| Remaining RAM: {RAM_load} of {self.RAM} \\t| Remaining MEM: {MEM_load} of {self.MEM} || Dominant {dominant[0]:.3f} \\t'", ")", "\n", "\n", "total_nodes", "=", "len", "(", "self", ".", "req_list", ")", "\n", "\n", "if", "print_details", ":", "\n", "            ", "print", "(", "'Resources allocated to the Node:'", ")", "\n", "if", "total_nodes", "==", "0", ":", "print", "(", "'<Empty>'", ")", "\n", "for", "res", "in", "self", ".", "req_list", ":", "\n", "                ", "res", ".", "print", "(", ")", "\n", "\n", "", "", "self", ".", "print_history_stats", "(", ")", "\n", "\n", "print", "(", "f'Total Requests {total_nodes}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.reset": [[101, 115], ["None"], "methods", ["None"], ["        ", "print", "(", "'CPU History'", ")", "\n", "\n", "np", ".", "set_printoptions", "(", "precision", "=", "4", ")", "\n", "\n", "print", "(", "np", ".", "asanyarray", "(", "self", ".", "CPU_history", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "print", "(", "'RAM History'", ")", "\n", "print", "(", "np", ".", "asanyarray", "(", "self", ".", "RAM_history", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "print", "(", "'MEM History'", ")", "\n", "print", "(", "np", ".", "asanyarray", "(", "self", ".", "MEM_history", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "", "def", "get_tensor_rep", "(", "self", ")", ":", "\n", "\n", "        ", "return", "np", ".", "asanyarray", "(", "[", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.validate": [[116, 135], ["node.Node.penalizer.to_penalize", "node.Node.penalizer.compute_CPU_penalty", "node.Node.penalizer.compute_RAM_penalty", "node.Node.penalizer.compute_MEM_penalty"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_CPU_penalty", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_RAM_penalty", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.compute_MEM_penalty"], ["self", ".", "remaining_CPU", ",", "\n", "self", ".", "remaining_RAM", ",", "\n", "self", ".", "remaining_MEM", "\n", "]", ")", ".", "flatten", "(", ")", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "# pragma: no cover", "\n", "    ", "a", "=", "1", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print": [[136, 169], ["len", "node.Node.compute_percentage_penalized_resources", "node.Node.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.compute_percentage_penalized_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.compute_node_load": [[170, 176], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.compute_percentage_penalized_resources": [[177, 195], ["len", "int", "int", "round", "round", "int", "round"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print_history_stats": [[196, 205], ["node.Node.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.is_valid": [[206, 211], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.get_stats": [[212, 233], ["len", "node.Node.compute_percentage_penalized_resources", "numpy.asanyarray().flatten", "numpy.asanyarray().flatten", "numpy.asanyarray().flatten", "node.Node.compute_node_load", "numpy.asanyarray", "numpy.asanyarray", "numpy.asanyarray"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.compute_percentage_penalized_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.compute_node_load"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.get_rejection_stats": [[234, 269], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.plotter.plotter": [[10, 73], ["matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "env.convert_to_ortools_input", "opt_solver", "os.path.isdir", "os.makedirs", "range", "numpy.array", "numpy.array", "numpy.array", "range", "len", "len", "agent_name.upper", "file_name.replace"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.convert_to_ortools_input"], ["if", "not", "export_stats", ":", "\n", "        ", "return", "\n", "\n", "", "location", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "folder", ")", "\n", "\n", "plotter_leaning", "(", "data", ",", "location", ",", "'learning'", ",", "agent", ".", "name", ")", "\n", "\n", "plotter_rewards", "(", "data", ",", "location", ",", "'rewards'", ",", "agent", ".", "name", ")", "\n", "\n", "log_training_stats", "(", "data", ",", "location", ",", "'logs'", ")", "\n", "\n", "", "def", "plotter_leaning", "(", "data", ",", "location", ",", "file_name", ",", "agent_name", ")", ":", "\n", "# Destructure the tuple", "\n", "    ", "_", ",", "_", ",", "_", ",", "value_loss_buffer", ",", "bins_policy_loss_buffer", ",", "bins_total_loss_buffer", ",", "bins_entropy_buffer", "=", "data", "\n", "\n", "x_values", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "value_loss_buffer", ")", ")", "]", "\n", "\n", "plt", ".", "plot", "(", "x_values", ",", "value_loss_buffer", ",", "label", "=", "\"Value Loss\"", ")", "\n", "\n", "plt", ".", "plot", "(", "x_values", ",", "bins_policy_loss_buffer", ",", "label", "=", "\"Bin Policy Net Loss\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "bins_total_loss_buffer", ",", "label", "=", "\"Total Bin Net Loss\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "bins_entropy_buffer", ",", "label", "=", "\"Bin Net Entropy\"", ")", "\n", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "\n", "plot_title", "=", "f\"{agent_name.upper()}\\n|\"", "+", "file_name", "\n", "plt", ".", "title", "(", "plot_title", ")", "\n", "\n", "# Check if dir exists. If not, create it", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "location", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "location", ")", "\n", "\n", "# Show legend info", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "# plt.show(block=blockPlot)", "\n", "plt", ".", "savefig", "(", "\n", "f\"{location}/{file_name.replace(' ', '')}.png\"", ",", "\n", "dpi", "=", "200", ",", "\n", "bbox_inches", "=", "\"tight\"", "\n", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "def", "plotter_rewards", "(", "data", ",", "location", ",", "file_name", ",", "agent_name", ")", ":", "\n", "\n", "# Destructure the tuple", "\n", "    ", "average_rewards_buffer", ",", "min_rewards_buffer", ",", "max_rewards_buffer", ",", "_", ",", "_", ",", "_", ",", "_", ",", "=", "data", "\n", "\n", "x_values", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "average_rewards_buffer", ")", ")", "]", "\n", "\n", "plt", ".", "plot", "(", "x_values", ",", "average_rewards_buffer", ",", "label", "=", "\"Average (in batch) Double Pointer Critic\"", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.plotter.plot_attentions": [[74, 171], ["matplotlib.subplots", "enumerate", "range", "matplotlib.tight_layout", "matplotlib.show", "axs[].matshow", "axs[].matshow", "matplotlib.sca", "int", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.sca", "int", "int", "int", "int", "int", "matplotlib.xticks", "matplotlib.yticks", "numpy.transpose", "numpy.transpose", "int", "int", "int", "int", "int", "round", "int", "resource_ylabel.append", "range", "round", "round", "round", "round", "round", "int", "int", "int", "int", "int", "bin_ylabel.append", "range", "round", "round", "round", "round", "round", "int", "int", "int", "int", "int", "round", "len", "round", "round", "round", "round", "round", "len", "round", "round", "round", "round", "round"], "function", ["None"], ["plt", ".", "plot", "(", "x_values", ",", "min_rewards_buffer", ",", "label", "=", "\"Minimum (in Batch) Double Pointer Critic\"", ")", "\n", "plt", ".", "plot", "(", "x_values", ",", "max_rewards_buffer", ",", "label", "=", "\"Maximum (in batch) Double Pointer Critic\"", ")", "\n", "\n", "plt", ".", "ylabel", "(", "'Collected Reward'", ")", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "\n", "plot_title", "=", "f\"{agent_name.upper()}\\n|\"", "+", "file_name", "\n", "plt", ".", "title", "(", "plot_title", ")", "\n", "\n", "# Check if dir exists. If not, create it", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "location", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "location", ")", "\n", "\n", "# Show legend info", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "# plt.show(block=blockPlot)", "\n", "plt", ".", "savefig", "(", "\n", "f\"{location}/{file_name.replace(' ', '')}.png\"", ",", "\n", "dpi", "=", "200", ",", "\n", "bbox_inches", "=", "\"tight\"", "\n", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "def", "log_training_stats", "(", "data", ",", "location", ",", "file_name", ")", ":", "\n", "    ", "average_rewards_buffer", ",", "min_rewards_buffer", ",", "max_rewards_buffer", ",", "value_loss_buffer", ",", "bins_policy_loss_buffer", ",", "bins_total_loss_buffer", ",", "bins_entropy_buffer", "=", "data", "\n", "\n", "with", "open", "(", "f\"{location}/{file_name}.csv\"", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "header", "=", "'Step;Avg Reward;Max Reward;Min Reward;Value Loss;Bin Entropy;Total Bin Loss;Bin Policy Loss'", "\n", "\n", "fp", ".", "write", "(", "f'{header}\\n'", ")", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "average_rewards_buffer", ")", ")", ":", "\n", "            ", "avg", "=", "average_rewards_buffer", "[", "index", "]", "\n", "min", "=", "min_rewards_buffer", "[", "index", "]", "\n", "max", "=", "max_rewards_buffer", "[", "index", "]", "\n", "v_loss", "=", "value_loss_buffer", "[", "index", "]", "\n", "\n", "b_policy_loss", "=", "bins_policy_loss_buffer", "[", "index", "]", "\n", "b_total_loss", "=", "bins_total_loss_buffer", "[", "index", "]", "\n", "b_entr", "=", "bins_entropy_buffer", "[", "index", "]", "\n", "\n", "data", "=", "f\"{index};{avg:.3f};{max:.3f};{min:.3f};{v_loss:.3f};{b_entr:.3f};{b_total_loss:.3f};{b_policy_loss:.3f}\"", "\n", "\n", "fp", ".", "write", "(", "f\"{data}\\n\"", ")", "\n", "\n", "", "", "fp", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.GreedyReward.__init__": [[23, 61], ["super().__init__", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], ["updated_batch", ",", "\n", "original_batch", ",", "\n", "total_num_nodes", ",", "\n", "bins", ",", "\n", "items", ",", "\n", "feasible_mask", ",", "\n", "node_ids", ",", "\n", ")", ":", "\n", "\n", "        ", "batch_size", "=", "updated_batch", ".", "shape", "[", "0", "]", "\n", "num_features", "=", "updated_batch", ".", "shape", "[", "2", "]", "\n", "\n", "is_eos", "=", "bins_eos_checker", "(", "bins", ",", "self", ".", "EOS_NODE", "[", "0", "]", ",", "num_features", ",", "\"float32\"", ")", "\n", "\n", "item_values", "=", "items", "[", ":", ",", "1", "]", "\n", "\n", "reward", "=", "item_values", "*", "(", "1", "-", "is_eos", ")", "\n", "\n", "return", "reward", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.GreedyReward.compute_reward": [[62, 104], ["int", "reward.GreedyReward.penalizer.to_penalize", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.GreedyReward.compute_reward_batch": [[105, 159], ["tensorflow.range", "tensorflow.cast", "tensorflow.tile().numpy", "tensorflow.tile().numpy", "environment.custom.resource.utils.bins_full_checker", "environment.custom.resource.utils.is_premium_wrongly_rejected_checker", "tensorflow.tile", "tensorflow.tile"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_full_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.is_premium_wrongly_rejected_checker"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.__init__": [[161, 198], ["super().__init__", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward": [[199, 245], ["int", "reward.FairReward.compute_skewness_reward", "reward.FairReward.penalizer.to_penalize", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_skewness_reward", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_skewness_reward": [[246, 258], ["tensorflow_probability.stats.variance", "tensorflow_probability.stats.variance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch": [[259, 325], ["tensorflow.range", "tensorflow.cast", "environment.custom.resource.utils.bins_eos_checker", "reward.FairReward.penalizer.to_penalize_batch", "tensorflow.tile().numpy", "tensorflow.tile().numpy", "environment.custom.resource.utils.bins_full_checker", "environment.custom.resource.utils.is_premium_wrongly_rejected_checker", "tensorflow.tile", "tensorflow.tile"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_full_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.is_premium_wrongly_rejected_checker"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.RewardFactory": [[7, 20], ["print", "R", "NameError", "rewardType.upper", "list", "rewards.keys"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["}", "\n", "\n", "try", ":", "\n", "        ", "rewardType", "=", "opts", "[", "'type'", "]", "\n", "R", "=", "rewards", "[", "f'{rewardType}'", "]", "\n", "# print(f'\"{rewardType.upper()}\" reward selected.')", "\n", "return", "R", "(", "opts", "[", "f'{rewardType}'", "]", ",", "EOS_NODE", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "raise", "NameError", "(", "f'Unknown Reward Name! Select one of {list(rewards.keys())}'", ")", "\n", "\n", "", "", "class", "GreedyReward", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "opts", ":", "dict", ",", "EOS_NODE", ")", ":", "\n", "        ", "super", "(", "GreedyReward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "EOS_NODE", "=", "EOS_NODE", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.tester.test": [[16, 34], ["print", "range", "tester.test_single_instance", "print"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.tester.test_single_instance", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["env", ":", "KnapsackEnvironmentV2", ",", "\n", "agent", ":", "Agent", ",", "\n", "opts", ":", "dict", ",", "\n", "log_dir", ":", "str", "\n", ")", ":", "\n", "\n", "\n", "    ", "num_tests", ":", "int", "=", "opts", "[", "'testbed'", "]", "[", "'num_tests'", "]", "\n", "# Number of bins", "\n", "bin_configs", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'bin_sample_configs'", "]", "\n", "bin_size_min", "=", "bin_configs", "[", "'min'", "]", "\n", "bin_size_max", "=", "bin_configs", "[", "'max'", "]", "\n", "bin_size_step", "=", "bin_configs", "[", "'step'", "]", "\n", "\n", "# Bins capacities", "\n", "bin_available_capacities", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'bin_available_capacities'", "]", "\n", "bin_min_resource", "=", "bin_available_capacities", "[", "'min'", "]", "\n", "bin_max_resource", "=", "bin_available_capacities", "[", "'max'", "]", "\n", "bin_step_resource", "=", "bin_available_capacities", "[", "'step'", "]", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.tester.test_single_instance": [[36, 193], ["env.reset_num_iterations", "numpy.zeros", "env.reset", "agent.generate_decoder_input", "env.rebuild_history", "env.set_testing_mode", "time.time", "heuristic_solver", "environment.custom.resource.utils.compute_max_steps", "datetime.datetime.now().replace().isoformat", "environment.custom.resource.utils.export_to_csv", "environment.custom.resource.utils.export_to_csv", "numpy.sum", "print", "print", "heuristic_solver.solve", "env.print_history", "print", "heuristic_solver.print_node_stats", "env.get_rejection_stats", "heuristic_solver.get_rejection_stats", "env.reset", "agent.generate_decoder_input", "state_list.append", "agent.act", "env.step", "attentions.append", "env.validate_history", "print", "print", "datetime.datetime.now().replace", "len", "print", "numpy.array", "decoded_resource.numpy", "resources_probs.numpy", "bins_probs.numpy", "current_state.copy", "datetime.datetime.now", "time.time"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.reset_num_iterations", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.compute_max_steps", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.export_to_csv", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.export_to_csv", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.print_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.print_node_stats", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.get_rejection_stats", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.get_rejection_stats", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.validate_history", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["# Number of items", "\n", "item_configs", ":", "dict", "=", "opts", "[", "'testbed'", "]", "[", "'item_sample_configs'", "]", "\n", "item_size_min", "=", "item_configs", "[", "'min'", "]", "\n", "item_size_max", "=", "item_configs", "[", "'max'", "]", "\n", "item_size_step", "=", "item_configs", "[", "'step'", "]", "\n", "\n", "batch_size", ":", "int", "=", "opts", "[", "'batch_size'", "]", "\n", "\n", "show_per_test_stats", ":", "bool", "=", "opts", "[", "'show_per_test_stats'", "]", "\n", "\n", "export_stats", ":", "bool", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'export_stats'", "]", "\n", "test_folder", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'folder'", "]", "\n", "\n", "filename", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'global_stats'", "]", "[", "'filename'", "]", "\n", "if", "filename", "==", "None", ":", "\n", "        ", "filename", "=", "generate_file_name", "(", "agent", ".", "agent_config", ")", "\n", "\n", "", "global_stats", "=", "[", "]", "\n", "global_reward_results", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "# Won", "\n", "0", ",", "# Draw", "\n", "0", ",", "# Lost", "\n", "]", ")", "\n", "\n", "for", "item_sample_size", "in", "range", "(", "item_size_min", ",", "item_size_max", "+", "1", ",", "item_size_step", ")", ":", "\n", "        ", "for", "bin_sample_size", "in", "range", "(", "bin_size_min", ",", "bin_size_max", "+", "1", ",", "bin_size_step", ")", ":", "\n", "            ", "for", "bin_min_value", "in", "range", "(", "bin_min_resource", ",", "bin_max_resource", ",", "bin_step_resource", ")", ":", "\n", "# print(f'{node_min_value}||{node_min_value + node_step_resource}')", "\n", "                ", "for", "index", "in", "range", "(", "num_tests", ")", ":", "\n", "\n", "                    ", "instance_stats", ",", "reward_result", "=", "test_single_instance", "(", "\n", "index", ",", "\n", "env", ",", "\n", "agent", ",", "\n", "opts", ",", "\n", "batch_size", ",", "\n", "bin_sample_size", ",", "# Number of nodes", "\n", "bin_min_value", ",", "# Min resources available in each node", "\n", "bin_min_value", "+", "bin_step_resource", ",", "# Max resources available in each node", "\n", "item_sample_size", ",", "# Number of resources", "\n", "log_dir", "\n", ")", "\n", "\n", "global_reward_results", "+=", "reward_result", "\n", "\n", "global_stats", ".", "append", "(", "{", "\n", "\"test_instance\"", ":", "index", ",", "\n", "\"bin_sample_size\"", ":", "bin_sample_size", ",", "\n", "\"bin_min_value\"", ":", "bin_min_value", ",", "\n", "\"bin_max_value\"", ":", "bin_min_value", "+", "bin_step_resource", ",", "\n", "\"item_sample_size\"", ":", "item_sample_size", ",", "\n", "\"instance\"", ":", "instance_stats", "\n", "}", ")", "\n", "\n", "", "", "", "", "if", "export_stats", ":", "\n", "        ", "f", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "test_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "f", ")", "\n", "", "log_testing_stats", "(", "global_stats", ",", "f", ",", "filename", ")", "\n", "\n", "", "return", "global_reward_results", "\n", "\n", "", "def", "test_single_instance", "(", "\n", "instance_id", ",", "\n", "env", ":", "KnapsackEnvironmentV2", ",", "\n", "agent", ":", "Agent", ",", "\n", "opts", ":", "dict", ",", "\n", "batch_size", ":", "int", ",", "\n", "bin_sample_size", ":", "int", ",", "\n", "bin_min_val", ":", "int", ",", "\n", "bin_max_val", ":", "int", ",", "\n", "item_sample_size", ":", "int", ",", "\n", "log_dir", ":", "str", ",", "\n", ")", ":", "\n", "\n", "    ", "plot_attentions", ":", "bool", "=", "opts", "[", "'plot_attentions'", "]", "\n", "\n", "# batch_size: int = opts['batch_size']", "\n", "# req_sample_size: int = opts['profiles_sample_size']", "\n", "# node_sample_size: int = opts['node_sample_size']", "\n", "\n", "export_stats", ":", "bool", "=", "opts", "[", "'export_stats'", "]", "[", "'per_problem_stats'", "]", "[", "'export_stats'", "]", "\n", "folder", ":", "str", "=", "opts", "[", "'export_stats'", "]", "[", "'per_problem_stats'", "]", "[", "'folder'", "]", "\n", "\n", "show_inference_progress", ":", "bool", "=", "opts", "[", "'show_inference_progress'", "]", "\n", "show_solutions", ":", "bool", "=", "opts", "[", "'show_solutions'", "]", "\n", "show_detailed_solutions", ":", "bool", "=", "opts", "[", "'show_detailed_solutions'", "]", "\n", "\n", "# Set the agent and env to testing mode", "\n", "env", ".", "set_testing_mode", "(", "\n", "batch_size", ",", "\n", "bin_sample_size", ",", "\n", "item_sample_size", ",", "\n", "bin_min_val", ",", "\n", "bin_max_val", "\n", ")", "\n", "agent", ".", "set_testing_mode", "(", "\n", "batch_size", ",", "\n", "env", ".", "bin_sample_size", ",", "\n", "env", ".", "item_sample_size", "\n", ")", "\n", "\n", "training_step", "=", "0", "\n", "isDone", "=", "False", "\n", "episode_rewards", "=", "np", ".", "zeros", "(", "\n", "(", "agent", ".", "batch_size", ",", "agent", ".", "num_resources", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "current_state", ",", "dec_input", ",", "bin_net_mask", ",", "mha_used_mask", "=", "env", ".", "reset", "(", ")", "\n", "\n", "if", "show_inference_progress", ":", "\n", "        ", "print", "(", "f'Testing with {agent.num_resources} resources and {env.bin_sample_size} bins'", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Init the heuristic solvers ", "\n", "", "heuristic_solvers", "=", "heuristic_factory", "(", "env", ".", "bin_sample_size", ",", "opts", "[", "'heuristic'", "]", ")", "\n", "heuristic_input_state", "=", "current_state", ".", "copy", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "attentions", "=", "[", "]", "\n", "\n", "while", "not", "isDone", ":", "\n", "        ", "if", "show_inference_progress", ":", "\n", "            ", "print", "(", "f'Placing step {training_step} of {agent.num_resources}'", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Select an action", "\n", "", "bin_id", ",", "bin_net_mask", ",", "bins_probs", "=", "agent", ".", "act", "(", "\n", "current_state", ",", "\n", "dec_input", ",", "\n", "bin_net_mask", ",", "\n", "mha_used_mask", ",", "\n", "env", ".", "build_feasible_mask", "\n", ")", "\n", "\n", "\n", "next_state", ",", "next_dec_input", ",", "reward", ",", "isDone", ",", "info", "=", "env", ".", "step", "(", "\n", "bin_id", ",", "\n", "bin_net_mask", "\n", ")", "\n", "\n", "# Store episode rewards", "\n", "episode_rewards", "[", ":", ",", "training_step", "]", "=", "reward", "[", ":", ",", "0", "]", "\n", "\n", "attentions", ".", "append", "(", "{", "\n", "\"current_state\"", ":", "current_state", ".", "copy", "(", ")", ",", "\n", "'decoder_input'", ":", "np", ".", "array", "(", "dec_input", ")", ",", "\n", "\"attention_probs\"", ":", "bins_probs", ".", "numpy", "(", ")", "\n", "}", ")", "\n", "\n", "# Update for next iteration", "\n", "current_state", "=", "next_state", "\n", "dec_input", "=", "next_dec_input", ".", "copy", "(", ")", "\n", "bin_net_mask", "=", "info", "[", "'bin_net_mask'", "]", "\n", "mha_used_mask", "=", "info", "[", "'mha_used_mask'", "]", "\n", "\n", "training_step", "+=", "1", "\n", "\n", "", "if", "show_inference_progress", ":", "\n", "# if env.validate_history() == True:", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.tester.compute_opt_solutions": [[194, 205], ["print", "time.time", "range", "print", "print", "env.convert_to_ortools_input", "optimal_values.append", "opt_solver", "time.time"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.knapsack.env_v2.KnapsackV2.convert_to_ortools_input"], ["#    print('All solutions are valid!')", "\n", "#else:", "\n", "#    print('Ups! Network generated invalid solutions')", "\n", "\n", "        ", "print", "(", "f'Net solution found in {time.time() - start:.2f} seconds'", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Solve with Heuristic", "\n", "", "for", "solver", "in", "heuristic_solvers", ":", "\n", "        ", "solver", ".", "solve", "(", "heuristic_input_state", ")", "\n", "\n", "", "if", "export_stats", ":", "\n", "# Find the the node with maximum number of inserted resources", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.tester.compute_heuristic_solutions": [[207, 219], ["print", "time.time", "range", "print", "print", "heuristic_values.append", "heuristic_solver", "time.time"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["t", "=", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", ".", "isoformat", "(", ")", "\n", "# Export results to CSV", "\n", "f", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "f", ")", "\n", "\n", "", "export_to_csv", "(", "env", ".", "history", ",", "max_steps", ",", "agent", ".", "name", ",", "f'{f}/{t}_{instance_id}'", ")", "\n", "for", "solver", "in", "heuristic_solvers", ":", "\n", "            ", "export_to_csv", "(", "[", "solver", ".", "solution", "]", ",", "max_steps", ",", "solver", ".", "name", ",", "f'{f}/{t}_{instance_id}'", ")", "\n", "\n", "\n", "", "", "if", "show_solutions", ":", "\n", "        ", "env", ".", "print_history", "(", "show_detailed_solutions", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.__init__": [[15, 35], ["super().__init__", "heuristic.GreedyHeuristic.parse_nodes"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes"], ["backpacks", ":", "List", "[", "Backpack", "]", "=", "sorted", "(", "backpacks", ",", "key", "=", "attrgetter", "(", "\"capacity\"", ")", ",", "reverse", "=", "True", ")", "\n", "items", ":", "List", "[", "Item", "]", "=", "sorted", "(", "items", ",", "key", "=", "lambda", "item", ":", "item", ".", "ratio", ",", "reverse", "=", "True", ")", "\n", "\n", "total_value", "=", "0", "\n", "for", "backpack", "in", "backpacks", ":", "\n", "        ", "for", "item", "in", "items", ":", "\n", "            ", "if", "not", "item", ".", "is_taken", "(", ")", ":", "\n", "                ", "if", "item", ".", "weight", "+", "backpack", ".", "current_load", "<=", "backpack", ".", "capacity", ":", "\n", "                    ", "item", ".", "take", "(", ")", "# Mark as taken", "\n", "\n", "# Add to backpack. For stats", "\n", "backpack", ".", "add_item", "(", "item", ".", "id", ",", "item", ".", "weight", ",", "item", ".", "value", ")", "\n", "\n", "# Add to the total value", "\n", "total_value", "+=", "item", ".", "value", "\n", "\n", "# print_backpack_stats(backpacks)", "\n", "\n", "", "", "", "", "return", "total_value", "\n", "\n", "", "def", "parse_input", "(", "problem", ",", "num_backpacks", ")", "->", "Tuple", "[", "List", "[", "Backpack", "]", ",", "List", "[", "Item", "]", "]", ":", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.reset": [[36, 40], ["None"], "methods", ["None"], ["    ", "backpacks", "=", "[", "]", "\n", "for", "index", ",", "bps", "in", "enumerate", "(", "problem", "[", ":", "num_backpacks", "]", ")", ":", "\n", "        ", "backpacks", ".", "append", "(", "\n", "Backpack", "(", "index", ",", "bps", "[", "0", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_nodes": [[41, 70], ["heuristic.GreedyHeuristic.env.state", "enumerate", "node_list.append", "environment.custom.resource.node.Node"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state"], ["\n", "", "items", "=", "[", "]", "\n", "for", "index", ",", "itm", "in", "enumerate", "(", "problem", "[", "num_backpacks", ":", "]", ")", ":", "\n", "        ", "items", ".", "append", "(", "\n", "Item", "(", "\n", "index", ",", "\n", "weight", "=", "itm", "[", "0", "]", ",", "\n", "value", "=", "itm", "[", "1", "]", "\n", ")", "\n", ")", "\n", "\n", "", "return", "backpacks", ",", "items", "\n", "\n", "", "def", "print_backpack_stats", "(", "backpacks", ":", "List", "[", "Backpack", "]", ")", ":", "\n", "    ", "for", "backpack", "in", "backpacks", ":", "backpack", ".", "print", "(", ")", "\n", "\n", "", "def", "validate_solution", "(", "backpacks", ":", "List", "[", "Backpack", "]", ")", ":", "\n", "    ", "for", "backpack", "in", "backpacks", ":", "\n", "        ", "if", "backpack", ".", "is_valid", "(", ")", "==", "False", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "# pragma: no cover", "\n", "\n", "    ", "problem", "=", "[", "[", "0.", ",", "0.", "]", ",", "\n", "[", "35.", ",", "0.", "]", ",", "\n", "[", "30.", ",", "0.", "]", ",", "\n", "[", "32.", ",", "0.", "]", ",", "\n", "[", "26.", ",", "0.", "]", ",", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources": [[71, 95], ["enumerate", "resource_list.append", "environment.custom.resource.resource.Resource"], "methods", ["None"], ["[", "37.", ",", "0.", "]", ",", "\n", "[", "8.", ",", "62.", "]", ",", "\n", "[", "5.", ",", "40.", "]", ",", "\n", "[", "7.", ",", "61.", "]", ",", "\n", "[", "5.", ",", "7.", "]", ",", "\n", "[", "10.", ",", "99.", "]", ",", "\n", "[", "5.", ",", "53.", "]", ",", "\n", "[", "10.", ",", "15.", "]", ",", "\n", "[", "7.", ",", "85.", "]", ",", "\n", "[", "5.", ",", "23.", "]", ",", "\n", "[", "10.", ",", "82.", "]", ",", "\n", "[", "8.", ",", "4.", "]", ",", "\n", "[", "8.", ",", "63.", "]", ",", "\n", "[", "9.", ",", "74.", "]", ",", "\n", "[", "7.", ",", "83.", "]", ",", "\n", "[", "8.", ",", "73.", "]", ",", "\n", "[", "5.", ",", "69.", "]", ",", "\n", "[", "5.", ",", "18.", "]", ",", "\n", "[", "5.", ",", "87.", "]", ",", "\n", "[", "5.", ",", "80.", "]", ",", "\n", "[", "10.", ",", "8.", "]", "]", "\n", "num_backpacks", "=", "6", "\n", "\n", "solver", "(", "problem", ",", "num_backpacks", ")", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.solve": [[97, 133], ["heuristic.GreedyHeuristic.parse_resources", "sorted", "heuristic.GreedyHeuristic.find_matching_nodes", "sorted", "sorted", "heuristic.GreedyHeuristic.EOS_NODE.insert_resource", "node.validate", "node.insert_resource"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.parse_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.find_matching_nodes", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.insert_resource", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.validate", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.insert_resource"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.find_matching_nodes": [[134, 143], ["matching_nodes.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.print_info": [[144, 147], ["elem.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.print_node_stats": [[149, 152], ["node.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.GreedyHeuristic.get_rejection_stats": [[153, 155], ["heuristic.GreedyHeuristic.EOS_NODE.get_rejection_stats"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.get_rejection_stats"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.node_sorting_fn": [[156, 158], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.heuristic.resource_sorting_fn": [[159, 161], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.is_premium_wrongly_rejected_checker": [[6, 15], ["tensorflow.cast", "tensorflow.logical_and", "tensorflow.greater", "tensorflow.equal"], "function", ["None"], ["  ", "initializer", "=", "get_initializer", "(", "d_model", ",", "use_default_initializer", ")", "\n", "\n", "return", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dff", ",", "activation", "=", "'relu'", ",", "kernel_initializer", "=", "initializer", ")", ",", "# (batch_size, seq_len, dff)", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "kernel_initializer", "=", "initializer", ")", "# (batch_size, seq_len, d_model)", "\n", "]", ")", "\n", "\n", "", "def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker": [[16, 27], ["tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.equal", "tensorflow.equal"], "function", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_full_checker": [[29, 39], ["tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.equal"], "function", ["None"], ["\n", "\n", "matmul_qk", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# (..., seq_len_q, seq_len_k)", "\n", "\n", "# scale matmul_qk", "\n", "dk", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "# add the mask to the scaled tensor.", "\n", "if", "mask", "is", "not", "None", ":", "\n", "    ", "scaled_attention_logits", "+=", "(", "mask", "*", "-", "1e9", ")", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.compute_max_steps": [[41, 49], ["max", "steps_list.append", "len"], "function", ["None"], ["# softmax is normalized on the last axis (seq_len_k) so that the scores", "\n", "# add up to 1.", "\n", "", "attention_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scaled_attention_logits", ",", "axis", "=", "-", "1", ")", "# (..., seq_len_q, seq_len_k)", "\n", "\n", "output", "=", "tf", ".", "matmul", "(", "attention_weights", ",", "v", ")", "# (..., seq_len_q, depth_v)", "\n", "\n", "return", "output", ",", "attention_weights", "\n", "\n", "", "def", "get_initializer", "(", "dims", ":", "int", ",", "use_default_initializer", ":", "bool", ")", ":", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.export_to_csv": [[50, 108], ["fp.close", "open", "fp.write", "steps_list.append", "range", "len", "numpy.array", "numpy.array", "numpy.array", "fp.write", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close"], ["    ", "if", "use_default_initializer", ":", "\n", "# Default initializer. More info: https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense", "\n", "      ", "return", "'glorot_uniform'", "\n", "\n", "# From https://arxiv.org/pdf/1803.08475.pdf", "\n", "# Page 6. Section 5 Hyperparameters", "\n", "", "value", "=", "1", "/", "math", ".", "sqrt", "(", "dims", ")", "\n", "\n", "init", "=", "tf", ".", "keras", ".", "initializers", ".", "RandomUniform", "(", "\n", "minval", "=", "-", "1", "*", "value", ",", "\n", "maxval", "=", "value", ",", "\n", "seed", "=", "None", "\n", ")", "\n", "\n", "return", "init", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.__init__": [[21, 127], ["environment.base.base.BaseEnvironment.__init__", "environment.custom.resource.penalty.PenaltyFactory", "environment.custom.resource.reward.RewardFactory", "list", "numpy.full", "env.ResourceEnvironment.generate_dataset", "list", "list", "env.ResourceEnvironment.generate_batch", "env.ResourceEnvironment.generate_masks", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.PenaltyFactory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.RewardFactory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_dataset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks"], ["        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "", "def", "sample_action", "(", "self", ")", ":", "\n", "# Return random action", "\n", "        ", "return", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "\n", "", "def", "get_action_space", "(", "self", ")", ":", "\n", "# Returns action space", "\n", "        ", "if", "hasattr", "(", "self", ".", "env", ".", "action_space", ",", "'n'", ")", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "def", "seed", "(", "self", ",", "num", ")", ":", "\n", "        ", "self", ".", "env", ".", "seed", "(", "num", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "", "def", "get_observation_space", "(", "self", ")", ":", "\n", "# Returns observation space", "\n", "        ", "return", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "add_stats_to_agent_config", "(", "self", ",", "agent_config", ")", ":", "\n", "        ", "agent_config", "[", "'action_space'", "]", "=", "self", ".", "get_action_space", "(", ")", "\n", "agent_config", "[", "'observation_space'", "]", "=", "self", ".", "get_observation_space", "(", ")", "\n", "\n", "return", "agent_config", "\n", "\n", "", "def", "print_stats", "(", "self", ")", ":", "\n", "        ", "print", "(", "'---------Environment Stats-----------------'", ")", "\n", "print", "(", "f'Name: \"{self.name}\"'", ")", "\n", "print", "(", "'___________________________________________'", ")", "\n", "print", "(", "'Action Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "action_space", ")", "\n", "\n", "print", "(", "'Observation Space'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ")", "\n", "\n", "print", "(", "'Observation Space Higher Bound'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ".", "high", ")", "\n", "\n", "print", "(", "'Observation Space Lower Bound'", ")", "\n", "print", "(", "self", ".", "env", ".", "observation_space", ".", "low", ")", "\n", "\n", "print", "(", "'Maximum Episode Steps'", ")", "\n", "print", "(", "self", ".", "env", ".", "spec", ".", "max_episode_steps", ")", "\n", "print", "(", "'-------------------------------------------'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.set_testing_mode": [[129, 134], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.reset_num_iterations": [[135, 137], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.reset": [[138, 151], ["env.ResourceEnvironment.generate_masks", "env.ResourceEnvironment.state", "env.ResourceEnvironment.generate_resources", "env.ResourceEnvironment.generate_batch"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource_v3.env.ResourceEnvironmentV3.generate_batch"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.state": [[152, 157], ["env.ResourceEnvironment.batch.copy", "env.ResourceEnvironment.bin_net_mask.copy", "env.ResourceEnvironment.resource_net_mask.copy", "env.ResourceEnvironment.mha_used_mask.copy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.step": [[158, 224], ["numpy.zeros", "range", "numpy.all", "node.add_resource", "env.ResourceEnvironment.rewarder.compute_reward", "env.ResourceEnvironment.bin_net_mask.copy", "env.ResourceEnvironment.resource_net_mask.copy", "env.ResourceEnvironment.mha_used_mask.copy", "env.ResourceEnvironment.batch.copy", "tensorflow.convert_to_tensor", "numpy.all", "numpy.any"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.add_resource", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.step_batch": [[225, 299], ["tensorflow.range", "env.ResourceEnvironment.penalizer.to_penalize_batch", "environment.custom.resource.utils.bins_eos_checker", "env.ResourceEnvironment.compute_remaining_resources", "env.ResourceEnvironment.rewarder.compute_reward_batch", "numpy.all", "numpy.all", "tensorflow.reshape", "env.ResourceEnvironment.bin_net_mask.copy", "env.ResourceEnvironment.resource_net_mask.copy", "env.ResourceEnvironment.mha_used_mask.copy", "tensorflow.expand_dims", "env.ResourceEnvironment.batch.copy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.to_penalize_batch", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.utils.bins_eos_checker", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.compute_remaining_resources", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.reward.FairReward.compute_reward_batch"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_dataset": [[300, 358], ["numpy.zeros", "range", "numpy.zeros", "range", "random.randint", "random.randrange", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_unique_resources": [[359, 382], ["numpy.zeros", "range", "numpy.random.shuffle", "range", "resources_sample_ids.pop", "random.randint"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_repeated_resources": [[383, 406], ["numpy.zeros", "range", "range", "random.randrange", "random.randint", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_unique_batch": [[407, 476], ["numpy.zeros", "range", "problem.append", "numpy.random.shuffle", "range", "numpy.random.shuffle", "range", "history.append", "environment.custom.resource.node.Node", "bins_sample_ids.pop", "problem.append", "resources_sample_ids.pop", "random.randint", "environment.custom.resource.node.Node"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_repeated_batch": [[477, 546], ["numpy.zeros", "range", "problem.append", "range", "range", "history.append", "environment.custom.resource.node.Node", "random.randrange", "problem.append", "random.randrange", "random.randint", "len", "environment.custom.resource.node.Node", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.generate_masks": [[547, 569], ["numpy.zeros", "numpy.ones", "range", "numpy.zeros_like", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.add_stats_to_agent_config": [[570, 581], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.compute_remaining_resources": [[582, 604], ["env.ResourceEnvironment.penalizer.tensor_representation", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.tensor_representation"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask": [[605, 697], ["env.ResourceEnvironment.penalizer.tensor_representation", "tensorflow.tile", "tensorflow.expand_dims", "numpy.ones_like", "numpy.reshape", "numpy.reshape", "tensorflow.greater_equal", "tensorflow.less_equal", "tensorflow.logical_and", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reduce_min", "tensorflow.less", "tensorflow.cast", "tensorflow.maximum", "feasible_mask.numpy.numpy.numpy", "tensorflow.maximum", "in_range_mask.numpy.numpy.numpy", "tensorflow.cast", "tensorflow.concat().numpy", "tensorflow.range", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.logical_or", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.concat", "tensorflow.equal", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.penalty.GreedyPenalty.tensor_representation"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.num_inserted_resources": [[699, 707], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.rebuild_history": [[708, 731], ["enumerate", "enumerate", "history.append", "bins.append", "environment.custom.resource.node.Node"], "methods", ["None"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.print_history": [[732, 739], ["range", "print", "print", "bp.print"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.validate_history": [[740, 747], ["bin.is_valid"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.is_valid"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.sample_action": [[748, 774], ["tensorflow.range", "numpy.random.uniform", "tensorflow.nn.softmax", "tensorflow_probability.distributions.Categorical", "tensorflow_probability.distributions.Categorical.sample", "env.ResourceEnvironment.build_feasible_mask", "numpy.random.uniform", "tensorflow.nn.softmax", "tensorflow_probability.distributions.Categorical", "tensorflow_probability.distributions.Categorical.sample"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.build_feasible_mask"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.get_rejection_stats": [[775, 777], ["[].get_rejection_stats"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.get_rejection_stats"], []], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset": [[6, 8], ["NotImplementedError"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"reset\" not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.state": [[9, 11], ["NotImplementedError"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"state\" not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step": [[12, 14], ["NotImplementedError"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"step\" not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.sample_action": [[15, 17], ["NotImplementedError"], "methods", ["None"], ["", "def", "sample_action", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"sample_action\" not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.get_action_space": [[18, 20], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_action_space", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"get_action_space\" not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.seed": [[21, 23], ["NotImplementedError"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "num", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"seed\" not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.close": [[24, 26], ["NotImplementedError"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"close\" not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.get_observation_space": [[27, 30], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_observation_space", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'Method \"get_observation_space\" not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.print_stats": [[31, 33], ["NotImplementedError"], "methods", ["None"], ["", "def", "print_stats", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method \"print_stats\" not implemented'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agent.agent_test.TestResourceGreedyReward.setUp": [[17, 98], ["environment.custom.resource_v3.env.ResourceEnvironmentV3", "agent_test.TestResourceGreedyReward.env.add_stats_to_agent_config", "agents.agent.Agent"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.add_stats_to_agent_config"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "ENV_CONFIG", "=", "{", "\n", "\"description\"", ":", "\"Environment configs.\"", ",", "\n", "\n", "\"generate_decoder_input\"", ":", "True", ",", "\n", "\"mask_nodes_in_mha\"", ":", "False", ",", "\n", "\"generate_request_on_the_fly\"", ":", "True", ",", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\n", "\"seed_value\"", ":", "1234", ",", "\n", "\n", "\"normalization_factor\"", ":", "100", ",", "\n", "\"decimal_precision\"", ":", "2", ",", "\n", "\n", "\"num_features\"", ":", "3", ",", "\n", "\"num_profiles\"", ":", "20", ",", "\n", "\n", "\"profiles_sample_size\"", ":", "2", ",", "\n", "\"node_sample_size\"", ":", "3", ",", "\n", "\n", "\"EOS_CODE\"", ":", "-", "2", ",", "\n", "\"req_min_val\"", ":", "1", ",", "\n", "\"req_max_val\"", ":", "30", ",", "\n", "\n", "\"node_min_val\"", ":", "80", ",", "\n", "\"node_max_val\"", ":", "100", ",", "\n", "\n", "\"reward\"", ":", "{", "\n", "\"type\"", ":", "\"greedy\"", ",", "\n", "\"greedy\"", ":", "{", "}", ",", "\n", "\"fair\"", ":", "{", "}", ",", "\n", "\"gini\"", ":", "{", "}", "\n", "}", "\n", "}", "\n", "\n", "AGENT_CONFIG", "=", "{", "\n", "\n", "\"single_actor\"", ":", "True", ",", "\n", "\"gamma\"", ":", "0.99", ",", "\n", "\"values_loss_coefficient\"", ":", "1.0", ",", "\n", "\"entropy_coefficient\"", ":", "0.1", ",", "\n", "\"stochastic_action_selection\"", ":", "True", ",", "\n", "\"use_mha_mask\"", ":", "True", ",", "\n", "\n", "\"actor\"", ":", "{", "\n", "\"use_default_initializer\"", ":", "False", ",", "\n", "\"num_layers\"", ":", "1", ",", "\n", "\"dim_model\"", ":", "128", ",", "\n", "\"num_heads\"", ":", "8", ",", "\n", "\"inner_layer_dim\"", ":", "128", ",", "\n", "\"SOS_CODE\"", ":", "-", "1", ",", "\n", "\"encoder_embedding_time_distributed\"", ":", "True", ",", "\n", "\"attention_dense_units\"", ":", "128", ",", "\n", "\"dropout_rate\"", ":", "0.0", ",", "\n", "\"logit_clipping_C\"", ":", "10.0", ",", "\n", "\n", "\"learning_rate\"", ":", "0.0001", ",", "\n", "\"clipnorm\"", ":", "None", "\n", "}", ",", "\n", "\n", "\"critic\"", ":", "{", "\n", "\"use_default_initializer\"", ":", "False", ",", "\n", "\"num_layers\"", ":", "3", ",", "\n", "\"dim_model\"", ":", "128", ",", "\n", "\"num_heads\"", ":", "8", ",", "\n", "\"inner_layer_dim\"", ":", "128", ",", "\n", "\"encoder_embedding_time_distributed\"", ":", "True", ",", "\n", "\"last_layer_units\"", ":", "128", ",", "\n", "\"last_layer_activation\"", ":", "\"linear\"", ",", "\n", "\"dropout_rate\"", ":", "0.0", ",", "\n", "\n", "\"learning_rate\"", ":", "0.0001", ",", "\n", "\"clipnorm\"", ":", "None", "\n", "}", "\n", "}", "\n", "\n", "self", ".", "env", "=", "ResourceEnvironmentV3", "(", "'ResourceV3'", ",", "ENV_CONFIG", ")", "\n", "\n", "config", "=", "self", ".", "env", ".", "add_stats_to_agent_config", "(", "AGENT_CONFIG", ")", "\n", "\n", "self", ".", "agent", "=", "Agent", "(", "'transformer'", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agent.agent_test.TestResourceGreedyReward.tearDown": [[99, 102], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "env", "=", "None", "\n", "self", ".", "agent", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agent.agent_test.TestResourceGreedyReward.test_act": [[103, 138], ["agent_test.TestResourceGreedyReward.env.reset", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.agent.act", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertTrue", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "len", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act"], ["", "def", "test_act", "(", "self", ")", "->", "None", ":", "\n", "        ", "current_state", ",", "decoder_input", ",", "bin_net_mask", ",", "mha_used_mask", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "current_state", ".", "shape", ",", "(", "2", ",", "6", ",", "3", ")", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "decoder_input", ".", "shape", ",", "(", "2", ",", "1", ",", "3", ")", "\n", ")", "\n", "\n", "bin_ids", ",", "bins_mask", ",", "bins_probs", "=", "self", ".", "agent", ".", "act", "(", "\n", "current_state", ",", "\n", "decoder_input", ",", "\n", "bin_net_mask", ",", "\n", "mha_used_mask", ",", "\n", "self", ".", "env", ".", "build_feasible_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "bin_ids", ")", ",", "2", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "np", ".", "all", "(", "bin_ids", "<=", "3", ")", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "bins_mask", ".", "shape", ",", "(", "2", ",", "6", ")", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "bins_probs", ".", "shape", ",", "(", "2", ",", "6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agent.agent_test.TestResourceGreedyReward.test_loss_compute": [[139, 236], ["agent_test.TestResourceGreedyReward.env.reset", "numpy.zeros", "agent_test.TestResourceGreedyReward.agent.compute_discounted_rewards", "agent_test.TestResourceGreedyReward.agent.compute_value_loss", "agent_test.TestResourceGreedyReward.agent.compute_actor_loss", "agent_test.TestResourceGreedyReward.assertEqual", "numpy.testing.assert_almost_equal", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.agent.clear_memory", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.assertEqual", "agent_test.TestResourceGreedyReward.agent.act", "probs.append", "agent_test.TestResourceGreedyReward.env.step", "agent_test.TestResourceGreedyReward.agent.store", "next_dec_input.copy", "numpy.concatenate", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "current_state.copy", "next_dec_input.copy.copy", "bin_net_mask.copy", "mha_used_mask.copy", "bin_id.numpy().copy", "reward.numpy().copy", "bin_id.numpy", "reward.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_discounted_rewards", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_value_loss", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_actor_loss", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.clear_memory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.store"], ["", "def", "test_loss_compute", "(", "self", ")", ":", "\n", "\n", "# Probabilities from which the actions will sampled", "\n", "        ", "probs", "=", "[", "]", "\n", "\n", "# Initial vars for the initial episode", "\n", "isDone", "=", "False", "\n", "current_state", ",", "dec_input", ",", "bin_net_mask", ",", "mha_used_mask", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "training_step", "=", "0", "\n", "\n", "while", "not", "isDone", ":", "\n", "# Select an action", "\n", "            ", "bin_id", ",", "bin_net_mask", ",", "bin_probs", "=", "self", ".", "agent", ".", "act", "(", "\n", "current_state", ",", "\n", "dec_input", ",", "\n", "bin_net_mask", ",", "\n", "mha_used_mask", ",", "\n", "self", ".", "env", ".", "build_feasible_mask", "\n", ")", "\n", "\n", "probs", ".", "append", "(", "bin_probs", ")", "\n", "\n", "next_state", ",", "next_dec_input", ",", "reward", ",", "isDone", ",", "info", "=", "self", ".", "env", ".", "step", "(", "\n", "bin_id", ",", "\n", "bin_net_mask", "\n", ")", "\n", "\n", "# Store in memory", "\n", "self", ".", "agent", ".", "store", "(", "\n", "current_state", ".", "copy", "(", ")", ",", "\n", "dec_input", ".", "copy", "(", ")", ",", "# Resource fed to actor decoder", "\n", "bin_net_mask", ".", "copy", "(", ")", ",", "\n", "mha_used_mask", ".", "copy", "(", ")", ",", "\n", "bin_id", ".", "numpy", "(", ")", ".", "copy", "(", ")", ",", "\n", "reward", ".", "numpy", "(", ")", ".", "copy", "(", ")", ",", "\n", "training_step", "\n", ")", "\n", "\n", "# Update for next iteration", "\n", "current_state", "=", "next_state", "\n", "dec_input", "=", "next_dec_input", ".", "copy", "(", ")", "\n", "bin_net_mask", "=", "info", "[", "'bin_net_mask'", "]", "\n", "mha_used_mask", "=", "info", "[", "'mha_used_mask'", "]", "\n", "\n", "training_step", "+=", "1", "\n", "\n", "", "bootstrap_state_value", "=", "np", ".", "zeros", "(", "\n", "[", "self", ".", "agent", ".", "batch_size", ",", "1", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "discounted_rewards", "=", "self", ".", "agent", ".", "compute_discounted_rewards", "(", "\n", "bootstrap_state_value", "\n", ")", "\n", "\n", "value_loss", ",", "state_values", ",", "advantages", "=", "self", ".", "agent", ".", "compute_value_loss", "(", "\n", "discounted_rewards", "\n", ")", "\n", "\n", "bin_loss", ",", "decoded_bins", ",", "bin_entropy", ",", "bin_policy_loss", ",", "pointers_probs", "=", "self", ".", "agent", ".", "compute_actor_loss", "(", "\n", "self", ".", "agent", ".", "bin_actor", ",", "\n", "self", ".", "agent", ".", "bin_masks", ",", "\n", "self", ".", "agent", ".", "bins", ",", "\n", "self", ".", "agent", ".", "actor_decoder_input", ",", "\n", "advantages", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "pointers_probs", ".", "shape", ",", "\n", "(", "4", ",", "6", ")", "\n", ")", "\n", "\n", "# Probabilities should be the same during act() and while computing the loss", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "pointers_probs", ",", "np", ".", "concatenate", "(", "probs", ",", "axis", "=", "0", ")", ",", "decimal", "=", "5", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "states", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "actor_decoder_input", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "bin_masks", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "mha_masks", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "bins", ")", ",", "2", ")", "\n", "\n", "self", ".", "agent", ".", "clear_memory", "(", ")", "\n", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "states", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "actor_decoder_input", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "bin_masks", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "mha_masks", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "bins", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agent.agent_test.TestResourceReduceNodeReward.setUp": [[240, 325], ["environment.custom.resource_v3.env.ResourceEnvironmentV3", "agent_test.TestResourceReduceNodeReward.env.add_stats_to_agent_config", "agents.agent.Agent"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.env.ResourceEnvironment.add_stats_to_agent_config"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "ENV_CONFIG", "=", "{", "\n", "\"description\"", ":", "\"Environment configs.\"", ",", "\n", "\n", "\"generate_decoder_input\"", ":", "True", ",", "\n", "\"mask_nodes_in_mha\"", ":", "False", ",", "\n", "\"generate_request_on_the_fly\"", ":", "True", ",", "\n", "\"batch_size\"", ":", "2", ",", "\n", "\n", "\"seed_value\"", ":", "1234", ",", "\n", "\n", "\"normalization_factor\"", ":", "100", ",", "\n", "\"decimal_precision\"", ":", "2", ",", "\n", "\n", "\"num_features\"", ":", "3", ",", "\n", "\"num_profiles\"", ":", "20", ",", "\n", "\n", "\"profiles_sample_size\"", ":", "2", ",", "\n", "\"node_sample_size\"", ":", "3", ",", "\n", "\n", "\"EOS_CODE\"", ":", "-", "2", ",", "\n", "\"req_min_val\"", ":", "1", ",", "\n", "\"req_max_val\"", ":", "30", ",", "\n", "\n", "\"node_min_val\"", ":", "80", ",", "\n", "\"node_max_val\"", ":", "100", ",", "\n", "\n", "\"reward\"", ":", "{", "\n", "\"type\"", ":", "\"reduced_node_usage\"", ",", "\n", "\"greedy\"", ":", "{", "}", ",", "\n", "\"fair\"", ":", "{", "}", ",", "\n", "\"gini\"", ":", "{", "}", ",", "\n", "\"reduced_node_usage\"", ":", "{", "\n", "\"rejection_penalty\"", ":", "-", "2", ",", "\n", "\"use_new_node_penalty\"", ":", "-", "1", "\n", "}", "\n", "}", "\n", "}", "\n", "\n", "AGENT_CONFIG", "=", "{", "\n", "\n", "\"single_actor\"", ":", "True", ",", "\n", "\"gamma\"", ":", "0.99", ",", "\n", "\"values_loss_coefficient\"", ":", "1.0", ",", "\n", "\"entropy_coefficient\"", ":", "0.1", ",", "\n", "\"stochastic_action_selection\"", ":", "True", ",", "\n", "\"use_mha_mask\"", ":", "True", ",", "\n", "\n", "\"actor\"", ":", "{", "\n", "\"use_default_initializer\"", ":", "False", ",", "\n", "\"num_layers\"", ":", "1", ",", "\n", "\"dim_model\"", ":", "128", ",", "\n", "\"num_heads\"", ":", "8", ",", "\n", "\"inner_layer_dim\"", ":", "128", ",", "\n", "\"SOS_CODE\"", ":", "-", "1", ",", "\n", "\"encoder_embedding_time_distributed\"", ":", "True", ",", "\n", "\"attention_dense_units\"", ":", "128", ",", "\n", "\"dropout_rate\"", ":", "0.0", ",", "\n", "\"logit_clipping_C\"", ":", "10.0", ",", "\n", "\n", "\"learning_rate\"", ":", "0.0001", ",", "\n", "\"clipnorm\"", ":", "None", "\n", "}", ",", "\n", "\n", "\"critic\"", ":", "{", "\n", "\"use_default_initializer\"", ":", "False", ",", "\n", "\"num_layers\"", ":", "3", ",", "\n", "\"dim_model\"", ":", "128", ",", "\n", "\"num_heads\"", ":", "8", ",", "\n", "\"inner_layer_dim\"", ":", "128", ",", "\n", "\"encoder_embedding_time_distributed\"", ":", "True", ",", "\n", "\"last_layer_units\"", ":", "128", ",", "\n", "\"last_layer_activation\"", ":", "\"linear\"", ",", "\n", "\"dropout_rate\"", ":", "0.0", ",", "\n", "\n", "\"learning_rate\"", ":", "0.0001", ",", "\n", "\"clipnorm\"", ":", "None", "\n", "}", "\n", "}", "\n", "\n", "self", ".", "env", "=", "ResourceEnvironmentV3", "(", "'ResourceV3'", ",", "ENV_CONFIG", ")", "\n", "\n", "config", "=", "self", ".", "env", ".", "add_stats_to_agent_config", "(", "AGENT_CONFIG", ")", "\n", "\n", "self", ".", "agent", "=", "Agent", "(", "'transformer'", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agent.agent_test.TestResourceReduceNodeReward.tearDown": [[326, 329], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "env", "=", "None", "\n", "self", ".", "agent", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agent.agent_test.TestResourceReduceNodeReward.test_act": [[330, 365], ["agent_test.TestResourceReduceNodeReward.env.reset", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.agent.act", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertTrue", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "len", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act"], ["", "def", "test_act", "(", "self", ")", "->", "None", ":", "\n", "        ", "current_state", ",", "decoder_input", ",", "bin_net_mask", ",", "mha_used_mask", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "current_state", ".", "shape", ",", "(", "2", ",", "6", ",", "4", ")", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "decoder_input", ".", "shape", ",", "(", "2", ",", "1", ",", "3", ")", "\n", ")", "\n", "\n", "bin_ids", ",", "bins_mask", ",", "bins_probs", "=", "self", ".", "agent", ".", "act", "(", "\n", "current_state", ",", "\n", "decoder_input", ",", "\n", "bin_net_mask", ",", "\n", "mha_used_mask", ",", "\n", "self", ".", "env", ".", "build_feasible_mask", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "bin_ids", ")", ",", "2", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "np", ".", "all", "(", "bin_ids", "<=", "3", ")", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "bins_mask", ".", "shape", ",", "(", "2", ",", "6", ")", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "bins_probs", ".", "shape", ",", "(", "2", ",", "6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agent.agent_test.TestResourceReduceNodeReward.test_loss_compute": [[366, 463], ["agent_test.TestResourceReduceNodeReward.env.reset", "numpy.zeros", "agent_test.TestResourceReduceNodeReward.agent.compute_discounted_rewards", "agent_test.TestResourceReduceNodeReward.agent.compute_value_loss", "agent_test.TestResourceReduceNodeReward.agent.compute_actor_loss", "agent_test.TestResourceReduceNodeReward.assertEqual", "numpy.testing.assert_almost_equal", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.agent.clear_memory", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.assertEqual", "agent_test.TestResourceReduceNodeReward.agent.act", "probs.append", "agent_test.TestResourceReduceNodeReward.env.step", "agent_test.TestResourceReduceNodeReward.agent.store", "next_dec_input.copy", "numpy.concatenate", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "current_state.copy", "next_dec_input.copy.copy", "bin_net_mask.copy", "mha_used_mask.copy", "bin_id.numpy().copy", "reward.numpy().copy", "bin_id.numpy", "reward.numpy"], "methods", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.reset", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_discounted_rewards", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_value_loss", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.compute_actor_loss", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.clear_memory", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.act", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.base.base.BaseEnvironment.step", "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.agents.agent.Agent.store"], ["", "def", "test_loss_compute", "(", "self", ")", ":", "\n", "\n", "# Probabilities from which the actions will sampled", "\n", "        ", "probs", "=", "[", "]", "\n", "\n", "# Initial vars for the initial episode", "\n", "isDone", "=", "False", "\n", "current_state", ",", "dec_input", ",", "bin_net_mask", ",", "mha_used_mask", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "training_step", "=", "0", "\n", "\n", "while", "not", "isDone", ":", "\n", "# Select an action", "\n", "            ", "bin_id", ",", "bin_net_mask", ",", "bin_probs", "=", "self", ".", "agent", ".", "act", "(", "\n", "current_state", ",", "\n", "dec_input", ",", "\n", "bin_net_mask", ",", "\n", "mha_used_mask", ",", "\n", "self", ".", "env", ".", "build_feasible_mask", "\n", ")", "\n", "\n", "probs", ".", "append", "(", "bin_probs", ")", "\n", "\n", "next_state", ",", "next_dec_input", ",", "reward", ",", "isDone", ",", "info", "=", "self", ".", "env", ".", "step", "(", "\n", "bin_id", ",", "\n", "bin_net_mask", "\n", ")", "\n", "\n", "# Store in memory", "\n", "self", ".", "agent", ".", "store", "(", "\n", "current_state", ".", "copy", "(", ")", ",", "\n", "dec_input", ".", "copy", "(", ")", ",", "# Resource fed to actor decoder", "\n", "bin_net_mask", ".", "copy", "(", ")", ",", "\n", "mha_used_mask", ".", "copy", "(", ")", ",", "\n", "bin_id", ".", "numpy", "(", ")", ".", "copy", "(", ")", ",", "\n", "reward", ".", "numpy", "(", ")", ".", "copy", "(", ")", ",", "\n", "training_step", "\n", ")", "\n", "\n", "# Update for next iteration", "\n", "current_state", "=", "next_state", "\n", "dec_input", "=", "next_dec_input", ".", "copy", "(", ")", "\n", "bin_net_mask", "=", "info", "[", "'bin_net_mask'", "]", "\n", "mha_used_mask", "=", "info", "[", "'mha_used_mask'", "]", "\n", "\n", "training_step", "+=", "1", "\n", "\n", "", "bootstrap_state_value", "=", "np", ".", "zeros", "(", "\n", "[", "self", ".", "agent", ".", "batch_size", ",", "1", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "discounted_rewards", "=", "self", ".", "agent", ".", "compute_discounted_rewards", "(", "\n", "bootstrap_state_value", "\n", ")", "\n", "\n", "value_loss", ",", "state_values", ",", "advantages", "=", "self", ".", "agent", ".", "compute_value_loss", "(", "\n", "discounted_rewards", "\n", ")", "\n", "\n", "bin_loss", ",", "decoded_bins", ",", "bin_entropy", ",", "bin_policy_loss", ",", "pointers_probs", "=", "self", ".", "agent", ".", "compute_actor_loss", "(", "\n", "self", ".", "agent", ".", "bin_actor", ",", "\n", "self", ".", "agent", ".", "bin_masks", ",", "\n", "self", ".", "agent", ".", "bins", ",", "\n", "self", ".", "agent", ".", "actor_decoder_input", ",", "\n", "advantages", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "pointers_probs", ".", "shape", ",", "\n", "(", "4", ",", "6", ")", "\n", ")", "\n", "\n", "# Probabilities should be the same during act() and while computing the loss", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "pointers_probs", ",", "np", ".", "concatenate", "(", "probs", ",", "axis", "=", "0", ")", ",", "decimal", "=", "5", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "states", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "actor_decoder_input", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "bin_masks", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "mha_masks", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "bins", ")", ",", "2", ")", "\n", "\n", "self", ".", "agent", ".", "clear_memory", "(", ")", "\n", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "states", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "actor_decoder_input", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "bin_masks", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "mha_masks", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "self", ".", "agent", ".", "bins", ")", ",", "0", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.configs.configs.get_configs": [[5, 16], ["os.path.join", "open", "json.load", "print"], "function", ["home.repos.pwc.inspect_result.andremaz_transformer-pointer-critic.resource.node.Node.print"], ["def", "get_configs", "(", "env_name", ",", "agent_name", ",", "conf_dir", "=", "'./configs'", ")", "->", "Tuple", "[", "dict", ",", "dict", ",", "dict", ",", "dict", "]", ":", "\n", "    ", "try", ":", "\n", "        ", "file_location", "=", "os", ".", "path", ".", "join", "(", "conf_dir", ",", "env_name", ")", "\n", "# Load the JSON with the configs for the selected environment", "\n", "with", "open", "(", "f\"{file_location}.json\"", ")", "as", "json_file", ":", "\n", "            ", "params", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "# Return the agent's hyper params and training configs", "\n", "", "return", "params", "[", "agent_name", "]", "[", "\"agent_config\"", "]", ",", "params", "[", "\"trainer_config\"", "]", ",", "params", "[", "\"env_config\"", "]", ",", "params", "[", "\"tester_config\"", "]", ",", "params", "[", "\"tuner_config\"", "]", ",", "params", "\n", "", "except", "KeyError", ":", "\n", "        ", "print", "(", "\"Can't find agent_config/trainer_config/env_config combo for the current problem! Check JSON file in configs dir!\"", ")", "\n", "", "", ""]]}