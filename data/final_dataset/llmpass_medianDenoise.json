{"home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.TrainValTensorBoard.__init__": [[18, 25], ["os.path.join", "keras.callbacks.TensorBoard.__init__", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.TrainValTensorBoard.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", "=", "'../logs'", ",", "**", "kwargs", ")", ":", "\n", "# Make the original `TensorBoard` log to a subdirectory 'training'", "\n", "        ", "training_log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'training'", ")", "\n", "super", "(", "TrainValTensorBoard", ",", "self", ")", ".", "__init__", "(", "training_log_dir", ",", "**", "kwargs", ")", "\n", "\n", "# Log the validation metrics to a separate subdirectory", "\n", "self", ".", "val_log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'validation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.TrainValTensorBoard.set_model": [[26, 30], ["tf.summary.FileWriter", "super().set_model"], "methods", ["home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.TrainValTensorBoard.set_model"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "# Setup writer for validation metrics", "\n", "        ", "self", ".", "val_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "val_log_dir", ")", "\n", "super", "(", "TrainValTensorBoard", ",", "self", ")", ".", "set_model", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.TrainValTensorBoard.on_epoch_end": [[31, 49], ["val_logs.items", "train.TrainValTensorBoard.val_writer.flush", "logs.update", "super().on_epoch_end", "k.replace", "tf.Summary", "tf.Summary.value.add", "value.item", "train.TrainValTensorBoard.val_writer.add_summary", "logs.items", "k.startswith", "logs.items", "keras.backend.backend.eval", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.TrainValTensorBoard.on_epoch_end"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "# Pop the validation logs and handle them separately with", "\n", "# `self.val_writer`. Also rename the keys so that they can", "\n", "# be plotted on the same figure with the training metrics", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "val_logs", "=", "{", "k", ".", "replace", "(", "'val_'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "'val_'", ")", "}", "\n", "for", "name", ",", "value", "in", "val_logs", ".", "items", "(", ")", ":", "\n", "            ", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "summary_value", "=", "summary", ".", "value", ".", "add", "(", ")", "\n", "summary_value", ".", "simple_value", "=", "value", ".", "item", "(", ")", "\n", "summary_value", ".", "tag", "=", "name", "\n", "self", ".", "val_writer", ".", "add_summary", "(", "summary", ",", "epoch", ")", "\n", "", "self", ".", "val_writer", ".", "flush", "(", ")", "\n", "\n", "# Pass the remaining logs to `TensorBoard.on_epoch_end`", "\n", "logs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", "if", "not", "k", ".", "startswith", "(", "'val_'", ")", "}", "\n", "logs", ".", "update", "(", "{", "'lr'", ":", "keras", ".", "eval", "(", "self", ".", "model", ".", "optimizer", ".", "lr", ")", "}", ")", "\n", "super", "(", "TrainValTensorBoard", ",", "self", ")", ".", "on_epoch_end", "(", "epoch", ",", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.TrainValTensorBoard.on_train_end": [[50, 53], ["super().on_train_end", "train.TrainValTensorBoard.val_writer.close"], "methods", ["home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.TrainValTensorBoard.on_train_end"], ["", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "super", "(", "TrainValTensorBoard", ",", "self", ")", ".", "on_train_end", "(", "logs", ")", "\n", "self", ".", "val_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.data_aug": [[89, 106], ["numpy.flipud", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.rot90", "numpy.flipud", "numpy.rot90"], "function", ["None"], ["def", "data_aug", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "img", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ")", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", ")", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llmpass_medianDenoise.code.train.gen_patches": [[107, 125], ["cv2.imread", "cv2.resize", "cv2.resize", "int", "int", "range", "int", "int", "range", "patches.append"], "function", ["None"], ["", "", "def", "gen_patches", "(", "file_name", ",", "scales", "=", "[", "1", "]", ",", "patch_size", "=", "70", ",", "stride", "=", "20", ",", "aug_times", "=", "1", ")", ":", "\n", "# read image", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "file_name", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "200", ",", "200", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "patches", "=", "[", "]", "\n", "for", "s", "in", "scales", ":", "\n", "        ", "h_scaled", ",", "w_scaled", "=", "int", "(", "h", "*", "s", ")", ",", "int", "(", "w", "*", "s", ")", "\n", "img_scaled", "=", "cv2", ".", "resize", "(", "img", ",", "(", "h_scaled", ",", "w_scaled", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "# extract patches", "\n", "n1", "=", "int", "(", "(", "h_scaled", "-", "patch_size", ")", "/", "stride", ")", "\n", "n2", "=", "int", "(", "(", "w_scaled", "-", "patch_size", ")", "/", "stride", ")", "\n", "for", "i2", "in", "range", "(", "n2", "-", "1", ")", ":", "\n", "            ", "for", "i1", "in", "range", "(", "n1", "-", "1", ")", ":", "\n", "                ", "x", "=", "img_scaled", "[", "i1", "*", "stride", ":", "i1", "*", "stride", "+", "patch_size", ",", "\n", "i2", "*", "stride", ":", "i2", "*", "stride", "+", "patch_size", "]", "\n", "patches", ".", "append", "(", "x", ")", "\n", "", "", "", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.llmpass_medianDenoise.code.model.find_medians": [[15, 26], ["tensorflow.extract_image_patches", "int", "tensorflow.nn.top_k", "tensorflow.slice"], "function", ["None"], ["def", "find_medians", "(", "x", ",", "k", "=", "3", ")", ":", "\n", "    ", "patches", "=", "tf", ".", "extract_image_patches", "(", "\n", "x", ",", "\n", "ksizes", "=", "[", "1", ",", "k", ",", "k", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "rates", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ")", "\n", "m_idx", "=", "int", "(", "k", "*", "k", "/", "2", "+", "1", ")", "\n", "top", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "patches", ",", "m_idx", ",", "sorted", "=", "True", ")", "\n", "median", "=", "tf", ".", "slice", "(", "top", ",", "[", "0", ",", "0", ",", "0", ",", "m_idx", "-", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "return", "median", "\n", "\n"]], "home.repos.pwc.inspect_result.llmpass_medianDenoise.code.model.median_pool2d": [[28, 34], ["tensorflow.split", "merge", "model.find_medians"], "function", ["home.repos.pwc.inspect_result.llmpass_medianDenoise.code.model.find_medians"], ["", "def", "median_pool2d", "(", "x", ",", "k", "=", "3", ")", ":", "\n", "    ", "channels", "=", "tf", ".", "split", "(", "x", ",", "num_or_size_splits", "=", "x", ".", "shape", "[", "3", "]", ",", "axis", "=", "3", ")", "\n", "for", "channel", "in", "channels", ":", "\n", "        ", "channel", "=", "find_medians", "(", "channel", ",", "k", ")", "\n", "", "median", "=", "merge", "(", "channels", ",", "mode", "=", "'concat'", ",", "concat_axis", "=", "-", "1", ")", "\n", "return", "median", "\n", "\n"]], "home.repos.pwc.inspect_result.llmpass_medianDenoise.code.model.median_pool2d_output_shape": [[36, 39], ["list", "tuple"], "function", ["None"], ["", "def", "median_pool2d_output_shape", "(", "input_shape", ")", ":", "\n", "    ", "shape", "=", "list", "(", "input_shape", ")", "\n", "return", "tuple", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.llmpass_medianDenoise.code.model.fully_conv": [[41, 73], ["Input", "range", "Model", "Model.summary", "Lambda", "Lambda", "Conv2D", "PReLU", "model.fully_conv._residual_block"], "function", ["None"], ["", "def", "fully_conv", "(", "pretrained_weights", "=", "None", ",", "input_size", "=", "(", "None", ",", "None", ",", "3", ")", ")", ":", "\n", "    ", "def", "_residual_block", "(", "inputs", ",", "feature_dim", "=", "64", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "feature_dim", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "kernel_initializer", "=", "\"he_normal\"", ")", "(", "inputs", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "PReLU", "(", "shared_axes", "=", "[", "1", ",", "2", "]", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "feature_dim", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "kernel_initializer", "=", "\"he_normal\"", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "m", "=", "Add", "(", ")", "(", "[", "x", ",", "inputs", "]", ")", "\n", "return", "m", "\n", "\n", "", "input_img", "=", "Input", "(", "shape", "=", "input_size", ",", "name", "=", "'input_image'", ")", "\n", "x5", "=", "Lambda", "(", "median_pool2d", ",", "arguments", "=", "{", "'k'", ":", "5", "}", ",", "\n", "output_shape", "=", "median_pool2d_output_shape", ")", "(", "input_img", ")", "\n", "x5", "=", "Lambda", "(", "median_pool2d", ",", "arguments", "=", "{", "'k'", ":", "5", "}", ",", "\n", "output_shape", "=", "median_pool2d_output_shape", ")", "(", "x5", ")", "\n", "x", "=", "x5", "\n", "x", "=", "Conv2D", "(", "n_init_features", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "kernel_initializer", "=", "\"he_normal\"", ")", "(", "x", ")", "\n", "x", "=", "PReLU", "(", "shared_axes", "=", "[", "1", ",", "2", "]", ")", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "32", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "n_init_features", ",", "(", "3", ",", "3", ")", ",", "kernel_initializer", "=", "'Orthogonal'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "axis", "=", "3", ",", "momentum", "=", "0.99", ",", "epsilon", "=", "0.0001", ")", "(", "x", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "_residual_block", "(", "x", ",", "feature_dim", "=", "n_init_features", ")", "\n", "if", "i", "<", "16", ":", "\n", "            ", "x", "=", "Lambda", "(", "median_pool2d", ",", "arguments", "=", "{", "'k'", ":", "5", "}", ",", "output_shape", "=", "min_pool2d_output_shape", ")", "(", "x", ")", "\n", "", "", "x", "=", "Conv2D", "(", "3", ",", "(", "3", ",", "3", ")", ",", "kernel_initializer", "=", "'Orthogonal'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "model", "=", "Model", "(", "input", "=", "input_img", ",", "output", "=", "x", ")", "\n", "model", ".", "summary", "(", ")", "\n", "if", "(", "pretrained_weights", ")", ":", "\n", "    \t", "model", ".", "load_weights", "(", "pretrained_weights", ")", "\n", "", "return", "model", "\n", "\n"]]}