{"home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.compute_pairwise_distance": [[12, 25], ["sklearn.metrics.pairwise_distances"], "function", ["None"], ["def", "compute_pairwise_distance", "(", "data_x", ",", "data_y", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        data_x: numpy.ndarray([N, feature_dim], dtype=np.float32)\n        data_y: numpy.ndarray([N, feature_dim], dtype=np.float32)\n    Returns:\n        numpy.ndarray([N, N], dtype=np.float32) of pairwise distances.\n    \"\"\"", "\n", "if", "data_y", "is", "None", ":", "\n", "        ", "data_y", "=", "data_x", "\n", "", "dists", "=", "sklearn", ".", "metrics", ".", "pairwise_distances", "(", "\n", "data_x", ",", "data_y", ",", "metric", "=", "'euclidean'", ",", "n_jobs", "=", "8", ")", "\n", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.get_kth_value": [[27, 39], ["numpy.take_along_axis", "np.take_along_axis.max", "numpy.argpartition"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "def", "get_kth_value", "(", "unsorted", ",", "k", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        unsorted: numpy.ndarray of any dimensionality.\n        k: int\n    Returns:\n        kth values along the designated axis.\n    \"\"\"", "\n", "indices", "=", "np", ".", "argpartition", "(", "unsorted", ",", "k", ",", "axis", "=", "axis", ")", "[", "...", ",", ":", "k", "]", "\n", "k_smallests", "=", "np", ".", "take_along_axis", "(", "unsorted", ",", "indices", ",", "axis", "=", "axis", ")", "\n", "kth_values", "=", "k_smallests", ".", "max", "(", "axis", "=", "axis", ")", "\n", "return", "kth_values", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.compute_nearest_neighbour_distances": [[41, 52], ["prdc.compute_pairwise_distance", "prdc.get_kth_value"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.compute_pairwise_distance", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.get_kth_value"], ["", "def", "compute_nearest_neighbour_distances", "(", "input_features", ",", "nearest_k", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_features: numpy.ndarray([N, feature_dim], dtype=np.float32)\n        nearest_k: int\n    Returns:\n        Distances to kth nearest neighbours.\n    \"\"\"", "\n", "distances", "=", "compute_pairwise_distance", "(", "input_features", ")", "\n", "radii", "=", "get_kth_value", "(", "distances", ",", "k", "=", "nearest_k", "+", "1", ",", "axis", "=", "-", "1", ")", "\n", "return", "radii", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.compute_prdc": [[54, 97], ["print", "prdc.compute_nearest_neighbour_distances", "prdc.compute_nearest_neighbour_distances", "prdc.compute_pairwise_distance", "dict", "float", "compute_pairwise_distance.min", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.compute_nearest_neighbour_distances", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.compute_nearest_neighbour_distances", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.compute_pairwise_distance"], ["", "def", "compute_prdc", "(", "real_features", ",", "fake_features", ",", "nearest_k", ")", ":", "\n", "    ", "\"\"\"\n    Computes precision, recall, density, and coverage given two manifolds.\n    Args:\n        real_features: numpy.ndarray([N, feature_dim], dtype=np.float32)\n        fake_features: numpy.ndarray([N, feature_dim], dtype=np.float32)\n        nearest_k: int.\n    Returns:\n        dict of precision, recall, density, and coverage.\n    \"\"\"", "\n", "\n", "print", "(", "'Num real: {} Num fake: {}'", "\n", ".", "format", "(", "real_features", ".", "shape", "[", "0", "]", ",", "fake_features", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "real_nearest_neighbour_distances", "=", "compute_nearest_neighbour_distances", "(", "\n", "real_features", ",", "nearest_k", ")", "\n", "fake_nearest_neighbour_distances", "=", "compute_nearest_neighbour_distances", "(", "\n", "fake_features", ",", "nearest_k", ")", "\n", "distance_real_fake", "=", "compute_pairwise_distance", "(", "\n", "real_features", ",", "fake_features", ")", "\n", "\n", "precision", "=", "(", "\n", "distance_real_fake", "<", "\n", "np", ".", "expand_dims", "(", "real_nearest_neighbour_distances", ",", "axis", "=", "1", ")", "\n", ")", ".", "any", "(", "axis", "=", "0", ")", ".", "mean", "(", ")", "\n", "\n", "recall", "=", "(", "\n", "distance_real_fake", "<", "\n", "np", ".", "expand_dims", "(", "fake_nearest_neighbour_distances", ",", "axis", "=", "0", ")", "\n", ")", ".", "any", "(", "axis", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "density", "=", "(", "1.", "/", "float", "(", "nearest_k", ")", ")", "*", "(", "\n", "distance_real_fake", "<", "\n", "np", ".", "expand_dims", "(", "real_nearest_neighbour_distances", ",", "axis", "=", "1", ")", "\n", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "mean", "(", ")", "\n", "\n", "coverage", "=", "(", "\n", "distance_real_fake", ".", "min", "(", "axis", "=", "1", ")", "<", "\n", "real_nearest_neighbour_distances", "\n", ")", ".", "mean", "(", ")", "\n", "\n", "return", "dict", "(", "precision", "=", "precision", ",", "recall", "=", "recall", ",", "\n", "density", "=", "density", ",", "coverage", "=", "coverage", ")", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.InceptionV3.__init__": [[31, 127], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "_inception_v3.InceptionV3.blocks.append", "_inception_v3.InceptionV3.parameters", "inception.fid_inception_v3", "inception._inception_v3", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "_inception_v3.InceptionV3.blocks.append", "_inception_v3.InceptionV3.blocks.append", "_inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.fid_inception_v3", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception._inception_v3"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ",", "\n", "use_fid_inception", "=", "True", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradients. Possibly useful\n            for finetuning the network\n        use_fid_inception : bool\n            If true, uses the pretrained Inception model used in Tensorflow's\n            FID implementation. If false, uses the pretrained Inception model\n            available in torchvision. The FID Inception model has different\n            weights and a slightly different structure from torchvision's\n            Inception model. If you want to compute FID scores, you are\n            strongly advised to set this parameter to true to get comparable\n            results.\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "use_fid_inception", ":", "\n", "            ", "inception", "=", "fid_inception_v3", "(", ")", "\n", "", "else", ":", "\n", "            ", "inception", "=", "_inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.InceptionV3.forward": [[128, 161], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.FIDInceptionA.__init__": [[207, 209], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "FIDInceptionA", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "pool_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.FIDInceptionA.forward": [[210, 228], ["inception.FIDInceptionA.branch1x1", "inception.FIDInceptionA.branch5x5_1", "inception.FIDInceptionA.branch5x5_2", "inception.FIDInceptionA.branch3x3dbl_1", "inception.FIDInceptionA.branch3x3dbl_2", "inception.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.FIDInceptionC.__init__": [[232, 234], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "FIDInceptionC", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "channels_7x7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.FIDInceptionC.forward": [[235, 256], ["inception.FIDInceptionC.branch1x1", "inception.FIDInceptionC.branch7x7_1", "inception.FIDInceptionC.branch7x7_2", "inception.FIDInceptionC.branch7x7_3", "inception.FIDInceptionC.branch7x7dbl_1", "inception.FIDInceptionC.branch7x7dbl_2", "inception.FIDInceptionC.branch7x7dbl_3", "inception.FIDInceptionC.branch7x7dbl_4", "inception.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.FIDInceptionE_1.__init__": [[260, 262], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_1", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.FIDInceptionE_1.forward": [[263, 289], ["inception.FIDInceptionE_1.branch1x1", "inception.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3dbl_1", "inception.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3_2a", "inception.FIDInceptionE_1.branch3x3_2b", "inception.FIDInceptionE_1.branch3x3dbl_3a", "inception.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.FIDInceptionE_2.__init__": [[293, 295], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_2", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.FIDInceptionE_2.forward": [[296, 323], ["inception.FIDInceptionE_2.branch1x1", "inception.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3dbl_1", "inception.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3_2a", "inception.FIDInceptionE_2.branch3x3_2b", "inception.FIDInceptionE_2.branch3x3dbl_3a", "inception.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: The FID Inception model uses max pooling instead of average", "\n", "# pooling. This is likely an error in this specific Inception", "\n", "# implementation, as other Inception models use average pooling here", "\n", "# (which matches the description in the paper).", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception._inception_v3": [[163, 178], ["torchvision.models.inception_v3", "tuple", "map", "torchvision.__version__.split"], "function", ["None"], ["", "", "def", "_inception_v3", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wraps `torchvision.models.inception_v3`\n    Skips default weight inititialization if supported by torchvision version.\n    See https://github.com/mseitzer/pytorch-fid/issues/28.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "version", "=", "tuple", "(", "map", "(", "int", ",", "torchvision", ".", "__version__", ".", "split", "(", "'.'", ")", "[", ":", "2", "]", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "# Just a caution against weird version strings", "\n", "        ", "version", "=", "(", "0", ",", ")", "\n", "\n", "", "if", "version", ">=", "(", "0", ",", "6", ")", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "\n", "", "return", "torchvision", ".", "models", ".", "inception_v3", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception.fid_inception_v3": [[180, 203], ["inception._inception_v3", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionE_1", "inception.FIDInceptionE_2", "load_state_dict_from_url", "_inception_v3.load_state_dict"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.inception._inception_v3"], ["", "def", "fid_inception_v3", "(", ")", ":", "\n", "    ", "\"\"\"Build pretrained Inception model for FID computation\n    The Inception model for FID computation uses a different set of weights\n    and has a slightly different structure than torchvision's Inception.\n    This method first constructs torchvision's Inception and then patches the\n    necessary parts that are different in the FID Inception model.\n    \"\"\"", "\n", "inception", "=", "_inception_v3", "(", "num_classes", "=", "1008", ",", "\n", "aux_logits", "=", "False", ",", "\n", "pretrained", "=", "False", ")", "\n", "inception", ".", "Mixed_5b", "=", "FIDInceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "inception", ".", "Mixed_5c", "=", "FIDInceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_5d", "=", "FIDInceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_6b", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "inception", ".", "Mixed_6c", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6d", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6e", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "inception", ".", "Mixed_7b", "=", "FIDInceptionE_1", "(", "1280", ")", "\n", "inception", ".", "Mixed_7c", "=", "FIDInceptionE_2", "(", "2048", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "FID_WEIGHTS_URL", ",", "progress", "=", "True", ")", "\n", "inception", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "inception", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score.imread": [[58, 63], ["numpy.asarray", "PIL.Image.open"], "function", ["None"], ["def", "imread", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Loads an image file into a (height, width, 3) uint8 ndarray. .resize((229, 229), Image.BILINEAR)\n    \"\"\"", "\n", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "filename", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score.get_activations": [[65, 116], ["model.eval", "numpy.empty", "tqdm", "len", "print", "len", "range", "numpy.array", "images.transpose.transpose", "torch.from_numpy().type", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy().reshape", "len", "len", "batch.cuda.cuda", "model", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d.size", "imread().astype", "torch.from_numpy", "torch.nn.functional.adaptive_avg_pool2d.size", "torch.nn.functional.adaptive_avg_pool2d.size", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "fid_score.imread", "str", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread"], ["", "def", "get_activations", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "batch_size", ">", "len", "(", "files", ")", ":", "\n", "        ", "print", "(", "(", "'Warning: batch size is bigger than the data size. '", "\n", "'Setting batch size to data size'", ")", ")", "\n", "batch_size", "=", "len", "(", "files", ")", "\n", "\n", "", "pred_arr", "=", "np", ".", "empty", "(", "(", "len", "(", "files", ")", ",", "dims", ")", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "len", "(", "files", ")", ",", "batch_size", ")", ")", ":", "\n", "        ", "start", "=", "i", "\n", "end", "=", "i", "+", "batch_size", "\n", "\n", "images", "=", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "f", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "f", "in", "files", "[", "start", ":", "end", "]", "]", ")", "\n", "\n", "# Reshape to (n_images, 3, height, width)", "\n", "images", "=", "images", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "images", "/=", "255", "\n", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "size", "(", "2", ")", "!=", "1", "or", "pred", ".", "size", "(", "3", ")", "!=", "1", ":", "\n", "            ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "pred", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score.calculate_frechet_distance": [[118, 170], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score.calculate_activation_statistics": [[172, 193], ["fid_score.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.get_activations", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "files", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score._compute_statistics_of_path": [[195, 207], ["pathlib.Path.endswith", "numpy.load", "np.load.close", "pathlib.Path", "fid_score.calculate_activation_statistics", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score.calculate_activation_statistics"], ["", "def", "_compute_statistics_of_path", "(", "path", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score.calculate_fid_given_paths": [[209, 228], ["evaluations.inception.InceptionV3", "fid_score._compute_statistics_of_path", "fid_score._compute_statistics_of_path", "fid_score.calculate_frechet_distance", "evaluations.inception.InceptionV3.cuda", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC._compute_statistics_of_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC._compute_statistics_of_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score.calculate_frechet_distance"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "batch_size", ",", "cuda", ",", "dims", ")", ":", "\n", "    ", "\"\"\"Calculates the FID of two paths\"\"\"", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "p", ")", "\n", "\n", "", "", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "m1", ",", "s1", "=", "_compute_statistics_of_path", "(", "paths", "[", "0", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "m2", ",", "s2", "=", "_compute_statistics_of_path", "(", "paths", "[", "1", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score.main": [[230, 239], ["parser.parse_args", "fid_score.calculate_fid_given_paths", "print"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.parse_args", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.fid_score.calculate_fid_given_paths"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "\n", "fid_value", "=", "calculate_fid_given_paths", "(", "args", ".", "path", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "gpu", "!=", "''", ",", "\n", "args", ".", "dims", ")", "\n", "print", "(", "'FID: '", ",", "fid_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread": [[35, 40], ["numpy.asarray", "PIL.Image.open"], "function", ["None"], ["def", "imread", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Loads an image file into a (height, width, 3) uint8 ndarray. .resize((229, 229), Image.BILINEAR)\n    \"\"\"", "\n", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "filename", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.get_activations": [[42, 93], ["model.eval", "numpy.empty", "tqdm", "len", "print", "len", "range", "numpy.array", "images.transpose.transpose", "torch.from_numpy().type", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy().reshape", "len", "len", "batch.cuda.cuda", "model", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d.size", "imread().astype", "torch.from_numpy", "torch.nn.functional.adaptive_avg_pool2d.size", "torch.nn.functional.adaptive_avg_pool2d.size", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "DC.imread", "str", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread"], ["", "def", "get_activations", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "batch_size", ">", "len", "(", "files", ")", ":", "\n", "        ", "print", "(", "(", "'Warning: batch size is bigger than the data size. '", "\n", "'Setting batch size to data size'", ")", ")", "\n", "batch_size", "=", "len", "(", "files", ")", "\n", "\n", "", "pred_arr", "=", "np", ".", "empty", "(", "(", "len", "(", "files", ")", ",", "dims", ")", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "len", "(", "files", ")", ",", "batch_size", ")", ")", ":", "\n", "        ", "start", "=", "i", "\n", "end", "=", "i", "+", "batch_size", "\n", "\n", "images", "=", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "f", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "f", "in", "files", "[", "start", ":", "end", "]", "]", ")", "\n", "\n", "# Reshape to (n_images, 3, height, width)", "\n", "images", "=", "images", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "images", "/=", "255", "\n", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "size", "(", "2", ")", "!=", "1", "or", "pred", ".", "size", "(", "3", ")", "!=", "1", ":", "\n", "            ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "pred", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC._compute_statistics_of_path": [[95, 106], ["pathlib.Path.endswith", "numpy.load", "get_activations.close", "pathlib.Path", "DC.get_activations", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.get_activations"], ["", "def", "_compute_statistics_of_path", "(", "path", ",", "model", ",", "batch_size", ",", "dims", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "f", "=", "get_activations", "(", "files", ",", "model", ",", "batch_size", ",", "dims", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.calculate_DC_given_paths": [[108, 127], ["inception.InceptionV3", "inception.InceptionV3.cuda", "DC._compute_statistics_of_path", "DC._compute_statistics_of_path", "prdc.compute_prdc", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC._compute_statistics_of_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC._compute_statistics_of_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.prdc.compute_prdc"], ["", "def", "calculate_DC_given_paths", "(", "paths", ",", "batch_size", ",", "dims", ")", ":", "\n", "\n", "    ", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "p", ")", "\n", "\n", "", "", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "f0", "=", "_compute_statistics_of_path", "(", "paths", "[", "0", "]", ",", "model", ",", "batch_size", ",", "dims", ")", "\n", "\n", "f1", "=", "_compute_statistics_of_path", "(", "paths", "[", "1", "]", ",", "model", ",", "batch_size", ",", "dims", ")", "\n", "\n", "dc_value", "=", "compute_prdc", "(", "real_features", "=", "f0", ",", "fake_features", "=", "f1", ",", "nearest_k", "=", "95", ")", "\n", "\n", "return", "dc_value", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.main": [[129, 139], ["parser.parse_args", "DC.calculate_DC_given_paths", "print"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.parse_args", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.calculate_DC_given_paths"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'0'", "\n", "# print(args.path)", "\n", "args", ".", "path", "=", "[", "'/data2/gyang/TAGAN/results/summer2winter-F64-mixer/test_350/images/real_B'", ",", "'/data2/gyang/TAGAN/results/summer2winter-F64-mixer/test_350/images/fake_B'", "]", "\n", "# args.path=['/data2/gyang/TAGAN/results/summer2winter-F64_unaligned+mixer/test_300/images/real_A','/data2/gyang/TAGAN/results/summer2winter-F64_unaligned+mixer/test_300/images/real_A']", "\n", "dc_value", "=", "calculate_DC_given_paths", "(", "args", ".", "path", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "dims", ")", "\n", "print", "(", "dc_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.pretrained_networks.squeezenet.__init__": [[6, 34], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "pretrained_networks.squeezenet.slice1.add_module", "pretrained_networks.squeezenet.slice2.add_module", "pretrained_networks.squeezenet.slice3.add_module", "pretrained_networks.squeezenet.slice4.add_module", "pretrained_networks.squeezenet.slice5.add_module", "pretrained_networks.squeezenet.slice6.add_module", "pretrained_networks.squeezenet.slice7.add_module", "pretrained_networks.squeezenet.parameters", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrained_features", "=", "tv", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.pretrained_networks.squeezenet.forward": [[35, 54], ["pretrained_networks.squeezenet.slice1", "pretrained_networks.squeezenet.slice2", "pretrained_networks.squeezenet.slice3", "pretrained_networks.squeezenet.slice4", "pretrained_networks.squeezenet.slice5", "pretrained_networks.squeezenet.slice6", "pretrained_networks.squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"SqueezeOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.pretrained_networks.alexnet.__init__": [[57, 79], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "pretrained_networks.alexnet.slice1.add_module", "pretrained_networks.alexnet.slice2.add_module", "pretrained_networks.alexnet.slice3.add_module", "pretrained_networks.alexnet.slice4.add_module", "pretrained_networks.alexnet.slice5.add_module", "pretrained_networks.alexnet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "tv", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.pretrained_networks.alexnet.forward": [[80, 95], ["pretrained_networks.alexnet.slice1", "pretrained_networks.alexnet.slice2", "pretrained_networks.alexnet.slice3", "pretrained_networks.alexnet.slice4", "pretrained_networks.alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.pretrained_networks.vgg16.__init__": [[97, 119], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "pretrained_networks.vgg16.slice1.add_module", "pretrained_networks.vgg16.slice2.add_module", "pretrained_networks.vgg16.slice3.add_module", "pretrained_networks.vgg16.slice4.add_module", "pretrained_networks.vgg16.slice5.add_module", "pretrained_networks.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "tv", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.pretrained_networks.vgg16.forward": [[120, 135], ["pretrained_networks.vgg16.slice1", "pretrained_networks.vgg16.slice2", "pretrained_networks.vgg16.slice3", "pretrained_networks.vgg16.slice4", "pretrained_networks.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.pretrained_networks.resnet.__init__": [[139, 161], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet101", "torchvision.models.resnet152"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ",", "num", "=", "18", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "num", "==", "18", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "34", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet34", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "50", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "101", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "152", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet152", "(", "pretrained", "=", "pretrained", ")", "\n", "", "self", ".", "N_slices", "=", "5", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "net", ".", "conv1", "\n", "self", ".", "bn1", "=", "self", ".", "net", ".", "bn1", "\n", "self", ".", "relu", "=", "self", ".", "net", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "net", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "net", ".", "layer1", "\n", "self", ".", "layer2", "=", "self", ".", "net", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "net", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.pretrained_networks.resnet.forward": [[162, 181], ["pretrained_networks.resnet.conv1", "pretrained_networks.resnet.bn1", "pretrained_networks.resnet.relu", "pretrained_networks.resnet.maxpool", "pretrained_networks.resnet.layer1", "pretrained_networks.resnet.layer2", "pretrained_networks.resnet.layer3", "pretrained_networks.resnet.layer4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "X", ")", "\n", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "maxpool", "(", "h", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h_conv2", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_conv3", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_conv4", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_conv5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"Outputs\"", ",", "[", "'relu1'", ",", "'conv2'", ",", "'conv3'", ",", "'conv4'", ",", "'conv5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_conv2", ",", "h_conv3", ",", "h_conv4", ",", "h_conv5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.name": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.initialize": [[19, 85], ["list", "lpips.LPIPS", "trainer.Trainer.net.parameters", "lpips.BCERankingLoss", "list", "torch.optim.Adam", "trainer.Trainer.net.eval", "trainer.Trainer.net.to", "torch.nn.DataParallel", "print", "networks.print_network", "print", "lpips.LPIPS", "trainer.Trainer.rankLoss.net.parameters", "trainer.Trainer.rankLoss.to", "lpips.L2", "lpips.DSSIM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.print_network"], ["", "def", "initialize", "(", "self", ",", "model", "=", "'lpips'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'Lab'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "model_path", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "printNet", "=", "False", ",", "spatial", "=", "False", ",", "\n", "is_train", "=", "False", ",", "lr", "=", ".0001", ",", "beta1", "=", "0.5", ",", "version", "=", "'0.1'", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "'''\n        INPUTS\n            model - ['lpips'] for linearly calibrated network\n                    ['baseline'] for off-the-shelf network\n                    ['L2'] for L2 distance in Lab colorspace\n                    ['SSIM'] for ssim in RGB colorspace\n            net - ['squeeze','alex','vgg']\n            model_path - if None, will look in weights/[NET_NAME].pth\n            colorspace - ['Lab','RGB'] colorspace to use for L2 and SSIM\n            use_gpu - bool - whether or not to use a GPU\n            printNet - bool - whether or not to print network architecture out\n            spatial - bool - whether to output an array containing varying distances across spatial dimensions\n            is_train - bool - [True] for training mode\n            lr - float - initial learning rate\n            beta1 - float - initial momentum term for adam\n            version - 0.1 for latest, 0.0 was original (with a bug)\n            gpu_ids - int array - [0] by default, gpus to use\n        '''", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "model_name", "=", "'%s [%s]'", "%", "(", "model", ",", "net", ")", "\n", "\n", "if", "(", "self", ".", "model", "==", "'lpips'", ")", ":", "# pretrained net + linear layer", "\n", "            ", "self", ".", "net", "=", "lpips", ".", "LPIPS", "(", "pretrained", "=", "not", "is_train", ",", "net", "=", "net", ",", "version", "=", "version", ",", "lpips", "=", "True", ",", "spatial", "=", "spatial", ",", "\n", "pnet_rand", "=", "pnet_rand", ",", "pnet_tune", "=", "pnet_tune", ",", "\n", "use_dropout", "=", "True", ",", "model_path", "=", "model_path", ",", "eval_mode", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "==", "'baseline'", ")", ":", "# pretrained network", "\n", "            ", "self", ".", "net", "=", "lpips", ".", "LPIPS", "(", "pnet_rand", "=", "pnet_rand", ",", "net", "=", "net", ",", "lpips", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'L2'", ",", "'l2'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "lpips", ".", "L2", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "# not really a network, only for testing", "\n", "self", ".", "model_name", "=", "'L2'", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'DSSIM'", ",", "'dssim'", ",", "'SSIM'", ",", "'ssim'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "lpips", ".", "DSSIM", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "\n", "self", ".", "model_name", "=", "'SSIM'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model [%s] not recognized.\"", "%", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "parameters", "=", "list", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "# training mode", "\n", "# extra network on top to go from distances (d0,d1) => predicted human judgment (h*)", "\n", "            ", "self", ".", "rankLoss", "=", "lpips", ".", "BCERankingLoss", "(", ")", "\n", "self", ".", "parameters", "+=", "list", "(", "self", ".", "rankLoss", ".", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "old_lr", "=", "lr", "\n", "self", ".", "optimizer_net", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "# test mode", "\n", "            ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "", "if", "(", "use_gpu", ")", ":", "\n", "            ", "self", ".", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "net", ",", "device_ids", "=", "gpu_ids", ")", "\n", "if", "(", "self", ".", "is_train", ")", ":", "\n", "                ", "self", ".", "rankLoss", "=", "self", ".", "rankLoss", ".", "to", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "# just put this on GPU0", "\n", "\n", "", "", "if", "(", "printNet", ")", ":", "\n", "            ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "net", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.forward": [[86, 95], ["trainer.Trainer.net.forward"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "        ", "''' Function computes the distance between image patches in0 and in1\n        INPUTS\n            in0, in1 - torch.Tensor object of shape Nx3xXxY - image patch scaled to [-1,1]\n        OUTPUT\n            computed distances between in0 and in1\n        '''", "\n", "\n", "return", "self", ".", "net", ".", "forward", "(", "in0", ",", "in1", ",", "retPerLayer", "=", "retPerLayer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.optimize_parameters": [[97, 103], ["trainer.Trainer.forward_train", "trainer.Trainer.optimizer_net.zero_grad", "trainer.Trainer.backward_train", "trainer.Trainer.optimizer_net.step", "trainer.Trainer.clamp_weights"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.forward_train", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.backward_train", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.clamp_weights"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "step", "(", ")", "\n", "self", ".", "clamp_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.clamp_weights": [[104, 108], ["trainer.Trainer.net.modules", "hasattr", "torch.clamp"], "methods", ["None"], ["", "def", "clamp_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "module", ",", "'weight'", ")", "and", "module", ".", "kernel_size", "==", "(", "1", ",", "1", ")", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "module", ".", "weight", ".", "data", ",", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.set_input": [[109, 124], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.Trainer.input_ref.to", "trainer.Trainer.input_p0.to", "trainer.Trainer.input_p1.to", "trainer.Trainer.input_judge.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input_ref", "=", "data", "[", "'ref'", "]", "\n", "self", ".", "input_p0", "=", "data", "[", "'p0'", "]", "\n", "self", ".", "input_p1", "=", "data", "[", "'p1'", "]", "\n", "self", ".", "input_judge", "=", "data", "[", "'judge'", "]", "\n", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "input_ref", "=", "self", ".", "input_ref", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p0", "=", "self", ".", "input_p0", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p1", "=", "self", ".", "input_p1", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_judge", "=", "self", ".", "input_judge", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "var_ref", "=", "Variable", "(", "self", ".", "input_ref", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p0", "=", "Variable", "(", "self", ".", "input_p0", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p1", "=", "Variable", "(", "self", ".", "input_p1", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.forward_train": [[125, 135], ["trainer.Trainer.forward", "trainer.Trainer.forward", "trainer.Trainer.compute_accuracy", "torch.autograd.Variable().view", "trainer.Trainer.rankLoss.forward", "trainer.Trainer.d0.size", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.compute_accuracy", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward"], ["", "def", "forward_train", "(", "self", ")", ":", "# run forward pass", "\n", "        ", "self", ".", "d0", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p0", ")", "\n", "self", ".", "d1", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p1", ")", "\n", "self", ".", "acc_r", "=", "self", ".", "compute_accuracy", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "input_judge", ")", "\n", "\n", "self", ".", "var_judge", "=", "Variable", "(", "1.", "*", "self", ".", "input_judge", ")", ".", "view", "(", "self", ".", "d0", ".", "size", "(", ")", ")", "\n", "\n", "self", ".", "loss_total", "=", "self", ".", "rankLoss", ".", "forward", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "var_judge", "*", "2.", "-", "1.", ")", "\n", "\n", "return", "self", ".", "loss_total", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.backward_train": [[136, 138], ["torch.mean().backward", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "backward_train", "(", "self", ")", ":", "\n", "        ", "torch", ".", "mean", "(", "self", ".", "loss_total", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.compute_accuracy": [[139, 144], ["judge.cpu().numpy().flatten", "judge.cpu().numpy", "judge.cpu"], "methods", ["None"], ["", "def", "compute_accuracy", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "''' d0, d1 are Variables, judge is a Tensor '''", "\n", "d1_lt_d0", "=", "(", "d1", "<", "d0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "judge_per", "=", "judge", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "return", "d1_lt_d0", "*", "judge_per", "+", "(", "1", "-", "d1_lt_d0", ")", "*", "(", "1", "-", "judge_per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.get_current_errors": [[145, 153], ["collections.OrderedDict", "collections.OrderedDict.keys", "numpy.mean", "trainer.Trainer.loss_total.data.cpu().numpy", "trainer.Trainer.loss_total.data.cpu"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "retDict", "=", "OrderedDict", "(", "[", "(", "'loss_total'", ",", "self", ".", "loss_total", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "(", "'acc_r'", ",", "self", ".", "acc_r", ")", "]", ")", "\n", "\n", "for", "key", "in", "retDict", ".", "keys", "(", ")", ":", "\n", "            ", "retDict", "[", "key", "]", "=", "np", ".", "mean", "(", "retDict", "[", "key", "]", ")", "\n", "\n", "", "return", "retDict", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.get_current_visuals": [[154, 168], ["lpips.tensor2im", "lpips.tensor2im", "lpips.tensor2im", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "collections.OrderedDict", "trainer.Trainer.var_ref.data.size"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "zoom_factor", "=", "256", "/", "self", ".", "var_ref", ".", "data", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "ref_img", "=", "lpips", ".", "tensor2im", "(", "self", ".", "var_ref", ".", "data", ")", "\n", "p0_img", "=", "lpips", ".", "tensor2im", "(", "self", ".", "var_p0", ".", "data", ")", "\n", "p1_img", "=", "lpips", ".", "tensor2im", "(", "self", ".", "var_p1", ".", "data", ")", "\n", "\n", "ref_img_vis", "=", "zoom", "(", "ref_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p0_img_vis", "=", "zoom", "(", "p0_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p1_img_vis", "=", "zoom", "(", "p1_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "\n", "return", "OrderedDict", "(", "[", "(", "'ref'", ",", "ref_img_vis", ")", ",", "\n", "(", "'p0'", ",", "p0_img_vis", ")", ",", "\n", "(", "'p1'", ",", "p1_img_vis", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.save": [[169, 175], ["trainer.Trainer.save_network", "trainer.Trainer.save_network", "trainer.Trainer.save_network"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.save_network", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.save_network", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.save_network"], ["", "def", "save", "(", "self", ",", "path", ",", "label", ")", ":", "\n", "        ", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ".", "module", ",", "path", ",", "''", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ",", "path", ",", "''", ",", "label", ")", "\n", "", "self", ".", "save_network", "(", "self", ".", "rankLoss", ".", "net", ",", "path", ",", "'rank'", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.save_network": [[177, 181], ["os.path.join", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "path", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.load_network": [[183, 188], ["os.path.join", "print", "network.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "'Loading network from %s'", "%", "save_path", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.update_learning_rate": [[189, 198], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "nepoch_decay", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "lr", "/", "nepoch_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer_net", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "print", "(", "'update lr [%s] decay: %f -> %f'", "%", "(", "type", ",", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.get_image_paths": [[200, 202], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.Trainer.save_done": [[203, 206], ["numpy.save", "numpy.savetxt", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "def", "save_done", "(", "self", ",", "flag", "=", "False", ")", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "flag", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "[", "flag", ",", "]", ",", "fmt", "=", "'%i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.score_2afc_dataset": [[208, 242], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.array", "data_loader.load_data", "func().data.cpu().numpy().flatten().tolist", "func().data.cpu().numpy().flatten().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.mean", "dict", "func().data.cpu().numpy().flatten", "func().data.cpu().numpy().flatten", "data[].cpu().numpy().flatten", "func().data.cpu().numpy", "func().data.cpu().numpy", "data[].cpu().numpy", "func().data.cpu", "func().data.cpu", "data[].cpu", "func", "func"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.CustomDatasetDataLoader.load_data", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "", "def", "score_2afc_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes Two Alternative Forced Choice (2AFC) score using\n        distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a TwoAFCDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return numpy array of length N\n    OUTPUTS\n        [0] - 2AFC score in [0,1], fraction of time func agrees with human evaluators\n        [1] - dictionary with following elements\n            d0s,d1s - N arrays containing distances between reference patch to perturbed patches \n            gts - N array in [0,1], preferred patch selected by human evaluators\n                (closer to \"0\" for left patch p0, \"1\" for right patch p1,\n                \"0.6\" means 60pct people preferred right patch, 40pct preferred left)\n            scores - N array in [0,1], corresponding to what percentage function agreed with humans\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "d0s", "=", "[", "]", "\n", "d1s", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "d0s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p0'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "d1s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'judge'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "d0s", "=", "np", ".", "array", "(", "d0s", ")", "\n", "d1s", "=", "np", ".", "array", "(", "d1s", ")", "\n", "gts", "=", "np", ".", "array", "(", "gts", ")", "\n", "scores", "=", "(", "d0s", "<", "d1s", ")", "*", "(", "1.", "-", "gts", ")", "+", "(", "d1s", "<", "d0s", ")", "*", "gts", "+", "(", "d1s", "==", "d0s", ")", "*", ".5", "\n", "\n", "return", "(", "np", ".", "mean", "(", "scores", ")", ",", "dict", "(", "d0s", "=", "d0s", ",", "d1s", "=", "d1s", ",", "gts", "=", "gts", ",", "scores", "=", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.trainer.score_jnd_dataset": [[243, 281], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "lpips.voc_ap", "data_loader.load_data", "func().data.cpu().numpy().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.sum", "dict", "func().data.cpu().numpy", "data[].cpu().numpy().flatten", "func().data.cpu", "data[].cpu().numpy", "data[].cpu", "func"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.voc_ap", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.CustomDatasetDataLoader.load_data"], ["", "def", "score_jnd_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes JND score using distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a JNDDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return pytorch array of length N\n    OUTPUTS\n        [0] - JND score in [0,1], mAP score (area under precision-recall curve)\n        [1] - dictionary with following elements\n            ds - N array containing distances between two patches shown to human evaluator\n            sames - N array containing fraction of people who thought the two patches were identical\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "ds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "ds", "+=", "func", "(", "data", "[", "'p0'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'same'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "sames", "=", "np", ".", "array", "(", "gts", ")", "\n", "ds", "=", "np", ".", "array", "(", "ds", ")", "\n", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "ds", ")", "\n", "ds_sorted", "=", "ds", "[", "sorted_inds", "]", "\n", "sames_sorted", "=", "sames", "[", "sorted_inds", "]", "\n", "\n", "TPs", "=", "np", ".", "cumsum", "(", "sames_sorted", ")", "\n", "FPs", "=", "np", ".", "cumsum", "(", "1", "-", "sames_sorted", ")", "\n", "FNs", "=", "np", ".", "sum", "(", "sames_sorted", ")", "-", "TPs", "\n", "\n", "precs", "=", "TPs", "/", "(", "TPs", "+", "FPs", ")", "\n", "recs", "=", "TPs", "/", "(", "TPs", "+", "FNs", ")", "\n", "score", "=", "lpips", ".", "voc_ap", "(", "recs", ",", "precs", ")", "\n", "\n", "return", "(", "score", ",", "dict", "(", "ds", "=", "ds", ",", "sames", "=", "sames", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.LPIPS.__init__": [[23, 79], ["torch.Module.__init__", "lpips.ScalingLayer", "len", "net_type", "print", "lpips.NetLinLayer", "lpips.NetLinLayer", "lpips.NetLinLayer", "lpips.NetLinLayer", "lpips.NetLinLayer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "lpips.LPIPS.eval", "lpips.NetLinLayer", "lpips.NetLinLayer", "lpips.LPIPS.load_state_dict", "os.path.abspath", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "inspect.getfile"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.eval"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ",", "net", "=", "'alex'", ",", "version", "=", "'0.1'", ",", "lpips", "=", "True", ",", "spatial", "=", "False", ",", "\n", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "use_dropout", "=", "True", ",", "model_path", "=", "None", ",", "eval_mode", "=", "True", ",", "verbose", "=", "True", ")", ":", "\n", "# lpips - [True] means with linear calibration on top of base network", "\n", "# pretrained - [True] means load linear weights", "\n", "\n", "        ", "super", "(", "LPIPS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "verbose", ")", ":", "\n", "            ", "print", "(", "'Setting up [%s] perceptual loss: trunk [%s], v[%s], spatial [%s]'", "%", "\n", "(", "'LPIPS'", "if", "lpips", "else", "'baseline'", ",", "net", ",", "version", ",", "'on'", "if", "spatial", "else", "'off'", ")", ")", "\n", "\n", "", "self", ".", "pnet_type", "=", "net", "\n", "self", ".", "pnet_tune", "=", "pnet_tune", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "lpips", "=", "lpips", "# false means baseline of just averaging all layers", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "\n", "if", "(", "self", ".", "pnet_type", "in", "[", "'vgg'", ",", "'vgg16'", "]", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "vgg16", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'alex'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "alexnet", "\n", "self", ".", "chns", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "squeezenet", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "", "self", ".", "L", "=", "len", "(", "self", ".", "chns", ")", "\n", "\n", "self", ".", "net", "=", "net_type", "(", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "self", ".", "pnet_tune", ")", "\n", "\n", "if", "(", "lpips", ")", ":", "\n", "            ", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "if", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "# 7 layers for squeezenet", "\n", "                ", "self", ".", "lin5", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "5", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin6", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "6", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "+=", "[", "self", ".", "lin5", ",", "self", ".", "lin6", "]", "\n", "", "self", ".", "lins", "=", "nn", ".", "ModuleList", "(", "self", ".", "lins", ")", "\n", "\n", "if", "(", "pretrained", ")", ":", "\n", "                ", "if", "(", "model_path", "is", "None", ")", ":", "\n", "                    ", "import", "inspect", "\n", "import", "os", "\n", "model_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "inspect", ".", "getfile", "(", "self", ".", "__init__", ")", ",", "'..'", ",", "'weights/v%s/%s.pth'", "%", "(", "version", ",", "net", ")", ")", ")", "\n", "\n", "", "if", "(", "verbose", ")", ":", "\n", "                    ", "print", "(", "'Loading model from: %s'", "%", "model_path", ")", "\n", "", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cpu'", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "if", "(", "eval_mode", ")", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.LPIPS.forward": [[80, 123], ["range", "range", "lpips.LPIPS.net.forward", "lpips.LPIPS.net.forward", "lpips.LPIPS.scaling_layer", "lpips.LPIPS.scaling_layer", "lpips.normalize_tensor", "lpips.normalize_tensor", "lpips.upsample", "lpips.spatial_average", "lpips.upsample", "lpips.spatial_average", "range", "range", "diffs[].sum", "range", "diffs[].sum", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.normalize_tensor", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.normalize_tensor", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.spatial_average", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.spatial_average"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "if", "normalize", ":", "# turn on this flag if input is [0,1] so it can be adjusted to [-1, +1]", "\n", "            ", "in0", "=", "2", "*", "in0", "-", "1", "\n", "in1", "=", "2", "*", "in1", "-", "1", "\n", "\n", "# v0.0 - original release had a bug, where input was not scaled", "\n", "", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "in0", ")", ",", "self", ".", "scaling_layer", "(", "in1", ")", ")", "if", "self", ".", "version", "==", "'0.1'", "else", "(", "in0", ",", "in1", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in0_input", ")", ",", "self", ".", "net", ".", "forward", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "lpips", ".", "normalize_tensor", "(", "outs0", "[", "kk", "]", ")", ",", "lpips", ".", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "if", "(", "self", ".", "lpips", ")", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "self", ".", "lins", "[", "kk", "]", "(", "diffs", "[", "kk", "]", ")", ",", "out_HW", "=", "in0", ".", "shape", "[", "2", ":", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "self", ".", "lins", "[", "kk", "]", "(", "diffs", "[", "kk", "]", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "out_HW", "=", "in0", ".", "shape", "[", "2", ":", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "\n", "", "", "val", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "1", ",", "self", ".", "L", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "\n", "# a = spatial_average(self.lins[kk](diffs[kk]), keepdim=True)", "\n", "# b = torch.max(self.lins[kk](feats0[kk]**2))", "\n", "# for kk in range(self.L):", "\n", "#     a += spatial_average(self.lins[kk](diffs[kk]), keepdim=True)", "\n", "#     b = torch.max(b,torch.max(self.lins[kk](feats0[kk]**2)))", "\n", "# a = a/self.L", "\n", "# from IPython import embed", "\n", "# embed()", "\n", "# return 10*torch.log10(b/a)", "\n", "\n", "", "if", "(", "retPerLayer", ")", ":", "\n", "            ", "return", "(", "val", ",", "res", ")", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.ScalingLayer.__init__": [[126, 130], ["torch.Module.__init__", "lpips.ScalingLayer.register_buffer", "lpips.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.ScalingLayer.forward": [[131, 133], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.NetLinLayer.__init__": [[137, 143], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.NetLinLayer.forward": [[144, 146], ["lpips.NetLinLayer.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.Dist2LogitLayer.__init__": [[149, 160], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ",", "use_sigmoid", "=", "True", ")", ":", "\n", "        ", "super", "(", "Dist2LogitLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "5", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "if", "(", "use_sigmoid", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Sigmoid", "(", ")", ",", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.Dist2LogitLayer.forward": [[161, 163], ["lpips.Dist2LogitLayer.model.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "torch", ".", "cat", "(", "(", "d0", ",", "d1", ",", "d0", "-", "d1", ",", "d0", "/", "(", "d1", "+", "eps", ")", ",", "d1", "/", "(", "d0", "+", "eps", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.BCERankingLoss.__init__": [[165, 170], ["torch.Module.__init__", "lpips.Dist2LogitLayer", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ")", ":", "\n", "        ", "super", "(", "BCERankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "Dist2LogitLayer", "(", "chn_mid", "=", "chn_mid", ")", "\n", "# self.parameters = list(self.net.parameters())", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.BCERankingLoss.forward": [[171, 175], ["lpips.BCERankingLoss.net.forward", "lpips.BCERankingLoss.loss"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.loss"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "per", "=", "(", "judge", "+", "1.", ")", "/", "2.", "\n", "self", ".", "logit", "=", "self", ".", "net", ".", "forward", "(", "d0", ",", "d1", ")", "\n", "return", "self", ".", "loss", "(", "self", ".", "logit", ",", "per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.FakeNet.__init__": [[178, 182], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "colorspace", "=", "'Lab'", ")", ":", "\n", "        ", "super", "(", "FakeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "colorspace", "=", "colorspace", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.L2.forward": [[184, 198], ["in0.size", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "in0.size", "lpips.l2().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "lpips.l2", "lpips.tensor2np", "lpips.tensor2np", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "lpips.tensor2tensorlab", "lpips.tensor2tensorlab", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.l2", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "(", "N", ",", "C", ",", "X", ",", "Y", ")", "=", "in0", ".", "size", "(", ")", "\n", "value", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "(", "in0", "-", "in1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "1", ",", "X", ",", "Y", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "Y", ")", ",", "dim", "=", "3", ")", ".", "view", "(", "N", ")", "\n", "return", "value", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "lpips", ".", "l2", "(", "lpips", ".", "tensor2np", "(", "lpips", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "lpips", ".", "tensor2np", "(", "lpips", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "                ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.DSSIM.forward": [[201, 213], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "lpips.dssim().astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "in0.size", "lpips.dssim().astype", "lpips.dssim", "lpips.dssim", "lpips.tensor2im", "lpips.tensor2im", "lpips.tensor2np", "lpips.tensor2np", "lpips.tensor2tensorlab", "lpips.tensor2tensorlab"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.dssim", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.dssim", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "value", "=", "lpips", ".", "dssim", "(", "1.", "*", "lpips", ".", "tensor2im", "(", "in0", ".", "data", ")", ",", "1.", "*", "lpips", ".", "tensor2im", "(", "in1", ".", "data", ")", ",", "range", "=", "255.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "lpips", ".", "dssim", "(", "lpips", ".", "tensor2np", "(", "lpips", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "lpips", ".", "tensor2np", "(", "lpips", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.spatial_average": [[14, 16], ["in_tens.mean"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["def", "spatial_average", "(", "in_tens", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "in_tens", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.upsample": [[17, 20], ["torch.Upsample"], "function", ["None"], ["", "def", "upsample", "(", "in_tens", ",", "out_HW", "=", "(", "64", ",", "64", ")", ")", ":", "# assumes scale factor is same for H and W", "\n", "    ", "in_H", ",", "in_W", "=", "in_tens", ".", "shape", "[", "2", "]", ",", "in_tens", ".", "shape", "[", "3", "]", "\n", "return", "nn", ".", "Upsample", "(", "size", "=", "out_HW", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "(", "in_tens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.print_network": [[214, 220], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network'", ",", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.normalize_tensor": [[42, 45], ["torch.sqrt", "torch.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.l2": [[46, 48], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.psnr": [[49, 51], ["numpy.log10", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.dssim": [[52, 55], ["compare_ssim"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.rgb2lab": [[116, 119], ["color.rgb2lab"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.rgb2lab"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2np": [[63, 66], ["tensor_obj[].cpu().float().numpy().transpose", "tensor_obj[].cpu().float().numpy", "tensor_obj[].cpu().float", "tensor_obj[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.np2tensor": [[67, 70], ["torch.Tensor", "np_obj[].transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2tensorlab": [[71, 84], ["__init__.tensor2im", "color.rgb2lab", "__init__.np2tensor"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.rgb2lab", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.np2tensor"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensorlab2tensor": [[85, 102], ["warnings.filterwarnings", "__init__.tensor2np", "numpy.clip", "color.rgb2lab", "__init__.np2tensor", "__init__.im2tensor", "color.lab2rgb", "rgb_back.astype", "numpy.isclose", "__init__.im2tensor", "lab.astype", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.rgb2lab", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.np2tensor", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.im2tensor", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.colorization_model.ColorizationModel.lab2rgb", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.im2tensor"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.load_image": [[103, 115], ["rawpy.imread", "raw.postprocess", "cv2.imread", "plt.imread"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2im": [[133, 138], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.im2tensor": [[139, 143], ["torch.Tensor", "[].transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.tensor2vec": [[129, 131], ["vector_tensor.data.cpu().numpy", "vector_tensor.data.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.voc_ap": [[146, 178], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.__init__": [[14, 34], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "dominate.tags.meta", "str"], "methods", ["None"], ["            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n", "", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n", "", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n", "", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.get_image_dir": [[35, 38], ["None"], "methods", ["None"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.add_header": [[39, 47], ["dominate.tags.h3"], "methods", ["None"], ["                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n", "", "", "", "", "", "", "def", "save", "(", "self", ",", "file", "=", "'index'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.add_table": [[31, 34], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.add_images": [[48, 67], ["dominate.tags.table", "html.HTML.doc.add", "dominate.tags.tr", "zip", "dominate.tags.td", "dominate.tags.p", "dominate.tags.br", "dominate.tags.p", "dominate.tags.a", "dominate.tags.img", "os.path.join", "os.path.join"], "methods", ["None"], ["        ", "html_file", "=", "'%s/%s.html'", "%", "(", "self", ".", "web_dir", ",", "file", ")", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "html", "=", "HTML", "(", "'web/'", ",", "'test_html'", ")", "\n", "html", ".", "add_header", "(", "'hello world'", ")", "\n", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "4", ")", ":", "\n", "        ", "ims", ".", "append", "(", "'image_%d.png'", "%", "n", ")", "\n", "txts", ".", "append", "(", "'text_%d'", "%", "n", ")", "\n", "links", ".", "append", "(", "'image_%d.png'", "%", "n", ")", "\n", "", "html", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ")", "\n", "html", ".", "save", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save": [[68, 74], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.__init__": [[52, 90], ["os.path.join", "visdom.Visdom", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write", "numpy.random.randint", "visualizer.Visualizer.vis.check_connection", "visualizer.Visualizer.create_visdom_connections"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.mkdirs", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.create_visdom_connections"], ["img", "=", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "img", "=", "zoom_to_res", "(", "img", ",", "res", "=", "res", ",", "order", "=", "0", ")", "\n", "images", ".", "append", "(", "img", ")", "\n", "idx", "+=", "1", "\n", "", "if", "len", "(", "visuals", ".", "items", "(", ")", ")", "%", "2", "!=", "0", ":", "\n", "                ", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "white_image", "=", "zoom_to_res", "(", "white_image", ",", "res", "=", "res", ",", "order", "=", "0", ")", "\n", "images", ".", "append", "(", "white_image", ")", "\n", "", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "nrows", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", ")", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_cnt%.6d_%s.png'", "%", "(", "epoch", ",", "self", ".", "display_cnt", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "zoom_to_res", "(", "image_numpy", ",", "res", "=", "res", ",", "axis", "=", "2", ")", ",", "img_path", ")", "\n", "\n", "", "self", ".", "display_cnt", "+=", "1", "\n", "self", ".", "display_cnt_high", "=", "np", ".", "maximum", "(", "self", ".", "display_cnt_high", ",", "self", ".", "display_cnt", ")", "\n", "\n", "# update website", "\n", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "if", "(", "n", "==", "epoch", ")", ":", "\n", "                    ", "high", "=", "self", ".", "display_cnt", "\n", "", "else", ":", "\n", "                    ", "high", "=", "self", ".", "display_cnt_high", "\n", "", "for", "c", "in", "range", "(", "high", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_cnt%.6d_%s.png'", "%", "(", "n", ",", "c", ",", "label", ")", "\n", "ims", ".", "append", "(", "os", ".", "path", ".", "join", "(", "'images'", ",", "img_path", ")", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "os", ".", "path", ".", "join", "(", "'images'", ",", "img_path", ")", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.display_current_results": [[102, 182], ["visuals.items", "html.HTML", "range", "html.HTML.save", "min", "visuals.items", "util.tensor2im", "os.path.join", "util.save_image", "html.HTML.add_header", "visuals.items", "html.HTML.add_images", "len", "util.tensor2im", "images.append", "numpy.ones_like", "images.append", "visualizer.Visualizer.vis.images", "visualizer.Visualizer.vis.text", "visuals.items", "util.tensor2im", "ims.append", "txts.append", "links.append", "next", "util.tensor2im.transpose", "util.tensor2im.transpose", "visualizer.Visualizer.create_visdom_connections", "util.tensor2im", "visualizer.Visualizer.vis.image", "visualizer.Visualizer.create_visdom_connections", "iter", "dict", "dict", "util.tensor2im.transpose", "visuals.values", "dict"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.save_image", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.add_header", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.add_images", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.create_visdom_connections", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.create_visdom_connections"], ["", "else", ":", "\n", "            ", "plot_keys", "=", "keys", "\n", "\n", "", "if", "(", "to_plot", ")", ":", "\n", "            ", "(", "f", ",", "ax", ")", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "", "for", "(", "k", ",", "kname", ")", "in", "enumerate", "(", "plot_keys", ")", ":", "\n", "            ", "kk", "=", "np", ".", "where", "(", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", "==", "kname", ")", "[", "0", "]", "[", "0", "]", "\n", "x", "=", "self", ".", "plot_data", "[", "'X'", "]", "\n", "y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", "[", ":", ",", "kk", "]", "\n", "if", "(", "to_plot", ")", ":", "\n", "                ", "ax", ".", "plot", "(", "x", ",", "y", ",", "'o-'", ",", "label", "=", "kname", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s_x'", ")", "%", "kname", ",", "x", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s_y'", ")", "%", "kname", ",", "y", ")", "\n", "\n", "", "if", "(", "to_plot", ")", ":", "\n", "            ", "plt", ".", "legend", "(", "loc", "=", "0", ",", "fontsize", "=", "'small'", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'Value'", ")", "\n", "f", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s.png'", "%", "name", ")", ")", "\n", "f", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# errors: dictionary of error labels and values", "\n", "", "", "def", "plot_current_errors", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "\n", "# errors: same format as |errors| of plotCurrentErrors", "\n", "", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ",", "t2", "=", "-", "1", ",", "t2o", "=", "-", "1", ",", "fid", "=", "None", ")", ":", "\n", "        ", "message", "=", "'(ep: %d, it: %d, t: %.3f[s], ept: %.2f/%.2f[h]) '", "%", "(", "epoch", ",", "i", ",", "t", ",", "t2o", ",", "t2", ")", "\n", "message", "+=", "(", "', '", ")", ".", "join", "(", "[", "'%s: %.3f'", "%", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", "]", ")", "\n", "\n", "print", "(", "message", ")", "\n", "if", "(", "fid", "is", "not", "None", ")", ":", "\n", "            ", "fid", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n", "\n", "# save image to the disk", "\n", "", "", "def", "save_images_simple", "(", "self", ",", "webpage", ",", "images", ",", "names", ",", "in_txts", ",", "prefix", "=", "''", ",", "res", "=", "256", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "name", ",", "image_numpy", ",", "txt", "in", "zip", "(", "names", ",", "images", ",", "in_txts", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "prefix", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "if", "(", "res", "is", "not", "None", ")", ":", "\n", "                ", "util", ".", "save_image", "(", "zoom_to_res", "(", "image_numpy", ",", "res", "=", "res", ",", "axis", "=", "2", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "                ", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "", "ims", ".", "append", "(", "os", ".", "path", ".", "join", "(", "webpage", ".", "img_subdir", ",", "image_name", ")", ")", "\n", "# txts.append(name)", "\n", "txts", ".", "append", "(", "txt", ")", "\n", "links", ".", "append", "(", "os", ".", "path", ".", "join", "(", "webpage", ".", "img_subdir", ",", "image_name", ")", ")", "\n", "# embed()", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n", "# save image to the disk", "\n", "", "def", "save_images", "(", "self", ",", "webpage", ",", "images", ",", "names", ",", "image_path", ",", "title", "=", "''", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "# short_path = ntpath.basename(image_path)", "\n", "# name = os.path.splitext(short_path)[0]", "\n", "# name = short_path", "\n", "# webpage.add_header('%s, %s' % (name, title))", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.plot_current_errors_save": [[93, 123], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "enumerate", "hasattr", "matplotlib.subplots", "numpy.save", "numpy.save", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "f.savefig", "f.clf", "matplotlib.close", "list", "numpy.array", "ax.plot", "os.path.join", "errors.keys", "numpy.where", "os.path.join", "os.path.join", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "", "def", "plot_current_errors_save", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ",", "keys", "=", "'+ALL'", ",", "name", "=", "'loss'", ",", "to_plot", "=", "False", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "\n", "# embed()", "\n", "if", "(", "keys", "==", "'+ALL'", ")", ":", "\n", "            ", "plot_keys", "=", "self", ".", "plot_data", "[", "'legend'", "]", "\n", "", "else", ":", "\n", "            ", "plot_keys", "=", "keys", "\n", "\n", "", "if", "(", "to_plot", ")", ":", "\n", "            ", "(", "f", ",", "ax", ")", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "", "for", "(", "k", ",", "kname", ")", "in", "enumerate", "(", "plot_keys", ")", ":", "\n", "            ", "kk", "=", "np", ".", "where", "(", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", "==", "kname", ")", "[", "0", "]", "[", "0", "]", "\n", "x", "=", "self", ".", "plot_data", "[", "'X'", "]", "\n", "y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", "[", ":", ",", "kk", "]", "\n", "if", "(", "to_plot", ")", ":", "\n", "                ", "ax", ".", "plot", "(", "x", ",", "y", ",", "'o-'", ",", "label", "=", "kname", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s_x'", ")", "%", "kname", ",", "x", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s_y'", ")", "%", "kname", ",", "y", ")", "\n", "\n", "", "if", "(", "to_plot", ")", ":", "\n", "            ", "plt", ".", "legend", "(", "loc", "=", "0", ",", "fontsize", "=", "'small'", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'Value'", ")", "\n", "f", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s.png'", "%", "name", ")", ")", "\n", "f", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.plot_current_errors": [[125, 139], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.vis.line", "hasattr", "list", "numpy.stack", "numpy.array", "errors.keys", "len", "numpy.array"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.print_current_errors": [[141, 148], ["print", "fid.write", "errors.items"], "methods", ["None"], ["", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ",", "t2", "=", "-", "1", ",", "t2o", "=", "-", "1", ",", "fid", "=", "None", ")", ":", "\n", "        ", "message", "=", "'(ep: %d, it: %d, t: %.3f[s], ept: %.2f/%.2f[h]) '", "%", "(", "epoch", ",", "i", ",", "t", ",", "t2o", ",", "t2", ")", "\n", "message", "+=", "(", "', '", ")", ".", "join", "(", "[", "'%s: %.3f'", "%", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", "]", ")", "\n", "\n", "print", "(", "message", ")", "\n", "if", "(", "fid", "is", "not", "None", ")", ":", "\n", "            ", "fid", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.save_images_simple": [[151, 171], ["webpage.get_image_dir", "zip", "webpage.add_images", "os.path.join", "ims.append", "txts.append", "links.append", "util.save_image", "util.save_image", "os.path.join", "os.path.join", "visualizer.zoom_to_res"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.add_images", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.save_image", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.save_image", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.zoom_to_res"], ["", "", "def", "save_images_simple", "(", "self", ",", "webpage", ",", "images", ",", "names", ",", "in_txts", ",", "prefix", "=", "''", ",", "res", "=", "256", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "name", ",", "image_numpy", ",", "txt", "in", "zip", "(", "names", ",", "images", ",", "in_txts", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "prefix", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "if", "(", "res", "is", "not", "None", ")", ":", "\n", "                ", "util", ".", "save_image", "(", "zoom_to_res", "(", "image_numpy", ",", "res", "=", "res", ",", "axis", "=", "2", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "                ", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "", "ims", ".", "append", "(", "os", ".", "path", ".", "join", "(", "webpage", ".", "img_subdir", ",", "image_name", ")", ")", "\n", "# txts.append(name)", "\n", "txts", ".", "append", "(", "txt", ")", "\n", "links", ".", "append", "(", "os", ".", "path", ".", "join", "(", "webpage", ".", "img_subdir", ",", "image_name", ")", ")", "\n", "# embed()", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.save_images": [[173, 192], ["webpage.get_image_dir", "zip", "webpage.add_images", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.add_images", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.save_image"], ["", "def", "save_images", "(", "self", ",", "webpage", ",", "images", ",", "names", ",", "image_path", ",", "title", "=", "''", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "# short_path = ntpath.basename(image_path)", "\n", "# name = os.path.splitext(short_path)[0]", "\n", "# name = short_path", "\n", "# webpage.add_header('%s, %s' % (name, title))", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "zip", "(", "names", ",", "images", ")", ":", "\n", "            ", "image_name", "=", "'%s.jpg'", "%", "(", "label", ",", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.zoom_to_res": [[10, 18], ["zoom", "zoom"], "function", ["None"], ["def", "zoom_to_res", "(", "img", ",", "res", "=", "256", ",", "order", "=", "0", ",", "axis", "=", "0", ")", ":", "\n", "# img   3xXxX", "\n", "    ", "from", "scipy", ".", "ndimage", "import", "zoom", "\n", "zoom_factor", "=", "res", "/", "img", ".", "shape", "[", "1", "]", "\n", "if", "(", "axis", "==", "0", ")", ":", "\n", "        ", "return", "zoom", "(", "img", ",", "[", "1", ",", "zoom_factor", ",", "zoom_factor", "]", ",", "order", "=", "order", ")", "\n", "", "elif", "(", "axis", "==", "2", ")", ":", "\n", "        ", "return", "zoom", "(", "img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.load_image": [[10, 22], ["rawpy.imread", "raw.postprocess", "cv2.imread", "matplotlib.imread"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread"], ["def", "load_image", "(", "path", ")", ":", "\n", "    ", "if", "(", "path", "[", "-", "3", ":", "]", "==", "'dng'", ")", ":", "\n", "        ", "import", "rawpy", "\n", "with", "rawpy", ".", "imread", "(", "path", ")", "as", "raw", ":", "\n", "            ", "img", "=", "raw", ".", "postprocess", "(", ")", "\n", "", "", "elif", "(", "path", "[", "-", "3", ":", "]", "==", "'bmp'", "or", "path", "[", "-", "3", ":", "]", "==", "'jpg'", "or", "path", "[", "-", "3", ":", "]", "==", "'png'", ")", ":", "\n", "        ", "import", "cv2", "\n", "return", "cv2", ".", "imread", "(", "path", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "img", "=", "(", "255", "*", "plt", ".", "imread", "(", "path", ")", "[", ":", ",", ":", ",", ":", "3", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.save_image": [[85, 101], ["PIL.Image.fromarray", "image_pil.resize.save", "image_pil.resize.resize", "image_pil.resize.resize", "int", "int"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.mkdirs": [[119, 130], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.mkdir", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.mkdir"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.mkdir": [[132, 140], ["os.path.exists", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im": [[45, 64], ["np.tile.astype", "isinstance", "isinstance", "image_tensor[].cpu().float().numpy", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "def", "im2tensor", "(", "image", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def im2tensor(image, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.im2tensor": [[45, 49], ["torch.Tensor", "[].transpose"], "function", ["None"], ["", "def", "im2tensor", "(", "image", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def im2tensor(image, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.image_pool.ImagePool.__init__": [[12, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "\"\"\"Initialize the ImagePool class\n\n        Parameters:\n            pool_size (int) -- the size of image buffer, if pool_size=0, no buffer will be created\n        \"\"\"", "\n", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "# create an empty pool", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.image_pool.ImagePool.query": [[23, 55], ["torch.cat", "torch.unsqueeze", "image_pool.ImagePool.images.append", "torch.cat.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "\"\"\"Return an image from the pool.\n\n        Parameters:\n            images: the latest generated images from the generator\n\n        Returns images from the buffer.\n\n        By 50/100, the buffer will return input images.\n        By 50/100, the buffer will return images previously stored in the buffer,\n        and insert the current images to the buffer.\n        \"\"\"", "\n", "if", "self", ".", "pool_size", "==", "0", ":", "# if the buffer size is 0, do nothing", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ".", "data", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "# if the buffer is not full; keep inserting current images to the buffer", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "# by 50% chance, the buffer will return a previously stored image, and insert the current image into the buffer", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "# randint is inclusive", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "# by another 50% chance, the buffer will return the current image", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "torch", ".", "cat", "(", "return_images", ",", "0", ")", "# collect all the images and return", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.reset": [[91, 94], ["None"], "methods", ["None"], ["\n", "# save errors into a directory", "\n", "", "", "def", "plot_current_errors_save", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ",", "keys", "=", "'+ALL'", ",", "name", "=", "'loss'", ",", "to_plot", "=", "False", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.create_visdom_connections": [[95, 101], ["print", "print", "subprocess.Popen"], "methods", ["None"], ["            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "\n", "# embed()", "\n", "if", "(", "keys", "==", "'+ALL'", ")", ":", "\n", "            ", "plot_keys", "=", "self", ".", "plot_data", "[", "'legend'", "]", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.plot_current_losses": [[183, 216], ["list().index", "plot_data[].append", "plot_data[].append", "len", "list", "visualizer.Visualizer.vis.line", "losses.keys", "list", "list", "visualizer.Visualizer.create_visdom_connections", "losses.keys", "visualizer.Visualizer.plot_data.keys", "numpy.stack", "numpy.array", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.create_visdom_connections"], ["for", "label", ",", "image_numpy", "in", "zip", "(", "names", ",", "images", ")", ":", "\n", "            ", "image_name", "=", "'%s.jpg'", "%", "(", "label", ",", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n", "# save image to the disk", "\n", "# def save_images(self, webpage, visuals, image_path, short=False):", "\n", "#     image_dir = webpage.get_image_dir()", "\n", "#     if short:", "\n", "#         short_path = ntpath.basename(image_path)", "\n", "#         name = os.path.splitext(short_path)[0]", "\n", "#     else:", "\n", "#         name = image_path", "\n", "\n", "#     webpage.add_header(name)", "\n", "#     ims = []", "\n", "#     txts = []", "\n", "#     links = []", "\n", "\n", "#     for label, image_numpy in visuals.items():", "\n", "#         image_name = '%s_%s.png' % (name, label)", "\n", "#         save_path = os.path.join(image_dir, image_name)", "\n", "#         util.save_image(image_numpy, save_path)", "\n", "\n", "#         ims.append(image_name)", "\n", "#         txts.append(label)", "\n", "#         links.append(image_name)", "\n", "#     webpage.add_images(ims, txts, links, width=self.win_size)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.Visualizer.print_current_losses": [[218, 235], ["losses.items", "print", "open", "log_file.write"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.visualizer.save_images": [[15, 44], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "util.tensor2im", "os.makedirs", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.add_header", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.add_images", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.save_image"], ["        ", "return", "zoom", "(", "img", ",", "[", "1", ",", "zoom_factor", ",", "zoom_factor", "]", ",", "order", "=", "order", ")", "\n", "", "elif", "(", "axis", "==", "2", ")", ":", "\n", "        ", "return", "zoom", "(", "img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "order", ")", "\n", "\n", "", "", "class", "Visualizer", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "# self.use_html = opt.is_train and not opt.no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "self", ".", "display_cnt", "=", "0", "# display_current_results counter", "\n", "self", ".", "display_cnt_high", "=", "0", "\n", "self", ".", "use_html", "=", "opt", ".", "use_html", "\n", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "opt", ".", "display_port", ")", "\n", "\n", "", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "]", ")", "\n", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "img_dir", ",", "]", ")", "\n", "\n", "# |visuals|: dictionary of images to display or save", "\n", "", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "nrows", "=", "None", ",", "res", "=", "256", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "title", "=", "self", ".", "name", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.__init__": [[27, 34], ["url_dict.get", "technique.lower"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get"], ["def", "__init__", "(", "self", ",", "technique", "=", "'cyclegan'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "url_dict", "=", "{", "\n", "'pix2pix'", ":", "'http://efrosgans.eecs.berkeley.edu/pix2pix/datasets/'", ",", "\n", "'cyclegan'", ":", "'https://people.eecs.berkeley.edu/~taesung_park/CycleGAN/datasets'", "\n", "}", "\n", "self", ".", "url", "=", "url_dict", ".", "get", "(", "technique", ".", "lower", "(", ")", ")", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData._print": [[35, 38], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_verbose", ":", "\n", "            ", "print", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData._get_options": [[39, 45], ["bs4.BeautifulSoup", "bs4.BeautifulSoup.find_all", "h.text.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_options", "(", "r", ")", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "r", ".", "text", ",", "'lxml'", ")", "\n", "options", "=", "[", "h", ".", "text", "for", "h", "in", "soup", ".", "find_all", "(", "'a'", ",", "href", "=", "True", ")", "\n", "if", "h", ".", "text", ".", "endswith", "(", "(", "'.zip'", ",", "'tar.gz'", ")", ")", "]", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData._present_options": [[46, 55], ["requests.get", "get_data.GetData._get_options", "print", "enumerate", "input", "print", "int"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData._get_options"], ["", "def", "_present_options", "(", "self", ")", ":", "\n", "        ", "r", "=", "requests", ".", "get", "(", "self", ".", "url", ")", "\n", "options", "=", "self", ".", "_get_options", "(", "r", ")", "\n", "print", "(", "'Options:\\n'", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "options", ")", ":", "\n", "            ", "print", "(", "\"{0}: {1}\"", ".", "format", "(", "i", ",", "o", ")", ")", "\n", "", "choice", "=", "input", "(", "\"\\nPlease enter the number of the \"", "\n", "\"dataset above you wish to download:\"", ")", "\n", "return", "options", "[", "int", "(", "choice", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData._download_data": [[56, 78], ["os.path.basename", "os.path.join", "os.path.basename.endswith", "get_data.GetData._print", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.isdir", "os.makedirs", "open", "requests.get", "f.write", "tarfile.open", "os.path.basename.endswith", "zipfile.ZipFile", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData._print", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get"], ["", "def", "_download_data", "(", "self", ",", "dataset_url", ",", "save_path", ")", ":", "\n", "        ", "if", "not", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "base", "=", "basename", "(", "dataset_url", ")", "\n", "temp_save_path", "=", "join", "(", "save_path", ",", "base", ")", "\n", "\n", "with", "open", "(", "temp_save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "r", "=", "requests", ".", "get", "(", "dataset_url", ")", "\n", "f", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "if", "base", ".", "endswith", "(", "'.tar.gz'", ")", ":", "\n", "            ", "obj", "=", "tarfile", ".", "open", "(", "temp_save_path", ")", "\n", "", "elif", "base", ".", "endswith", "(", "'.zip'", ")", ":", "\n", "            ", "obj", "=", "ZipFile", "(", "temp_save_path", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown File Type: {0}.\"", ".", "format", "(", "base", ")", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Unpacking Data...\"", ")", "\n", "obj", ".", "extractall", "(", "save_path", ")", "\n", "obj", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "temp_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get": [[79, 111], ["os.path.join", "os.path.isdir", "os.path.abspath", "get_data.GetData._present_options", "warnings.warn", "get_data.GetData._print", "get_data.GetData._download_data", "get_data.GetData.split"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData._present_options", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData._print", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData._download_data"], ["", "def", "get", "(", "self", ",", "save_path", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Download a dataset.\n\n        Parameters:\n            save_path (str) -- A directory to save the data to.\n            dataset (str)   -- (optional). A specific dataset to download.\n                            Note: this must include the file extension.\n                            If None, options will be presented for you\n                            to choose from.\n\n        Returns:\n            save_path_full (str) -- the absolute path to the downloaded data.\n\n        \"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "selected_dataset", "=", "self", ".", "_present_options", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_dataset", "=", "dataset", "\n", "\n", "", "save_path_full", "=", "join", "(", "save_path", ",", "selected_dataset", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "if", "isdir", "(", "save_path_full", ")", ":", "\n", "            ", "warn", "(", "\"\\n'{0}' already exists. Voiding Download.\"", ".", "format", "(", "\n", "save_path_full", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "'Downloading Data...'", ")", "\n", "url", "=", "\"{0}/{1}\"", ".", "format", "(", "self", ".", "url", ",", "selected_dataset", ")", "\n", "self", ".", "_download_data", "(", "url", ",", "save_path", "=", "save_path", ")", "\n", "\n", "", "return", "abspath", "(", "save_path_full", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.str2bool": [[14, 23], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["            ", "img", "=", "raw", ".", "postprocess", "(", ")", "\n", "", "", "elif", "(", "path", "[", "-", "3", ":", "]", "==", "'bmp'", "or", "path", "[", "-", "3", ":", "]", "==", "'jpg'", "or", "path", "[", "-", "3", ":", "]", "==", "'png'", ")", ":", "\n", "        ", "import", "cv2", "\n", "return", "cv2", ".", "imread", "(", "path", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "img", "=", "(", "255", "*", "plt", ".", "imread", "(", "path", ")", "[", ":", ",", ":", ",", ":", "3", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "", "return", "img", "\n", "\n", "", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.copyconf": [[25, 30], ["argparse.Namespace", "setattr", "vars"], "function", ["None"], ["image_pil", ".", "save", "(", "image_path", ")", "\n", "\n", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.find_class_in_module": [[32, 43], ["target_cls_name.replace().lower.replace().lower", "importlib.import_module", "importlib.import_module.__dict__.items", "target_cls_name.replace().lower.replace", "name.lower"], "function", ["None"], ["        ", "mkdir", "(", "paths", ")", "\n", "\n", "", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "\n", "", "", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def tensor2im(image_tensor, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "cent", ")", "*", "factor", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.diagnose_network": [[66, 83], ["net.parameters", "print", "print", "torch.mean", "torch.mean", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.print_numpy": [[103, 117], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.std"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.correct_resize_label": [[142, 154], ["t.detach().cpu.detach().cpu", "range", "torch.stack().to", "torch.stack().to", "t.detach().cpu.size", "numpy.transpose", "PIL.Image.fromarray().resize", "torch.from_numpy().long", "torch.from_numpy().long", "resized.append", "t.detach().cpu.detach", "one_t.numpy().astype", "torch.stack", "torch.stack", "PIL.Image.fromarray", "torch.from_numpy", "torch.from_numpy", "one_t.numpy", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.correct_resize": [[156, 166], ["t.detach().cpu.detach().cpu", "range", "torch.stack().to", "torch.stack().to", "t.detach().cpu.size", "PIL.Image.fromarray().resize", "resized.append", "t.detach().cpu.detach", "torch.stack", "torch.stack", "PIL.Image.fromarray", "torchvision.transforms.functional.to_tensor", "util.tensor2im"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.tensor2im"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.data_loader.CreateDataLoader": [[1, 7], ["CustomDatasetDataLoader", "CustomDatasetDataLoader.initialize"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.initialize"], ["def", "CreateDataLoader", "(", "datafolder", ",", "dataroot", "=", "'./dataset'", ",", "dataset_mode", "=", "'2afc'", ",", "load_size", "=", "64", ",", "batch_size", "=", "1", ",", "serial_batches", "=", "True", ",", "nThreads", "=", "4", ")", ":", "\n", "    ", "from", "data", ".", "custom_dataset_data_loader", "import", "CustomDatasetDataLoader", "\n", "data_loader", "=", "CustomDatasetDataLoader", "(", ")", "\n", "# print(data_loader.name())", "\n", "data_loader", ".", "initialize", "(", "datafolder", ",", "dataroot", "=", "dataroot", "+", "'/'", "+", "dataset_mode", ",", "dataset_mode", "=", "dataset_mode", ",", "load_size", "=", "load_size", ",", "batch_size", "=", "batch_size", ",", "serial_batches", "=", "serial_batches", ",", "nThreads", "=", "nThreads", ")", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.custom_dataset_data_loader.CustomDatasetDataLoader.name": [[20, 22], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CustomDatasetDataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.custom_dataset_data_loader.CustomDatasetDataLoader.initialize": [[23, 34], ["data.base_data_loader.BaseDataLoader.initialize", "custom_dataset_data_loader.CreateDataset", "torch.utils.data.DataLoader", "isinstance", "os.path.join", "int"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.custom_dataset_data_loader.CreateDataset"], ["", "def", "initialize", "(", "self", ",", "datafolders", ",", "dataroot", "=", "'./dataset'", ",", "dataset_mode", "=", "'2afc'", ",", "load_size", "=", "64", ",", "batch_size", "=", "1", ",", "serial_batches", "=", "True", ",", "nThreads", "=", "1", ")", ":", "\n", "        ", "BaseDataLoader", ".", "initialize", "(", "self", ")", "\n", "if", "(", "not", "isinstance", "(", "datafolders", ",", "list", ")", ")", ":", "\n", "            ", "datafolders", "=", "[", "datafolders", ",", "]", "\n", "", "data_root_folders", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "datafolder", ")", "for", "datafolder", "in", "datafolders", "]", "\n", "self", ".", "dataset", "=", "CreateDataset", "(", "data_root_folders", ",", "dataset_mode", "=", "dataset_mode", ",", "load_size", "=", "load_size", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "not", "serial_batches", ",", "\n", "num_workers", "=", "int", "(", "nThreads", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.custom_dataset_data_loader.CustomDatasetDataLoader.load_data": [[35, 37], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.custom_dataset_data_loader.CustomDatasetDataLoader.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.custom_dataset_data_loader.CreateDataset": [[5, 18], ["JNDDataset.initialize", "TwoAFCDataset", "JNDDataset", "ValueError"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.initialize"], ["def", "CreateDataset", "(", "dataroots", ",", "dataset_mode", "=", "'2afc'", ",", "load_size", "=", "64", ",", ")", ":", "\n", "    ", "dataset", "=", "None", "\n", "if", "dataset_mode", "==", "'2afc'", ":", "# human judgements", "\n", "        ", "from", "data", ".", "dataset", ".", "twoafc_dataset", "import", "TwoAFCDataset", "\n", "dataset", "=", "TwoAFCDataset", "(", ")", "\n", "", "elif", "dataset_mode", "==", "'jnd'", ":", "# human judgements", "\n", "        ", "from", "data", ".", "dataset", ".", "jnd_dataset", "import", "JNDDataset", "\n", "dataset", "=", "JNDDataset", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Dataset Mode [%s] not recognized.\"", "%", "self", ".", "dataset_mode", ")", "\n", "\n", "", "dataset", ".", "initialize", "(", "dataroots", ",", "load_size", "=", "load_size", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.ImageFolder.__init__": [[41, 53], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset"], ["", "", "", "", "return", "images", "\n", "\n", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "class", "ImageFolder", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.ImageFolder.__getitem__": [[54, 63], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.ImageFolder.__len__": [[64, 66], ["len"], "methods", ["None"], ["            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.is_image_file": [[19, 21], ["any", "filename.endswith"], "function", ["None"], ["NP_EXTENSIONS", "=", "[", "'.npy'", ",", "]", "\n", "\n", "def", "is_image_file", "(", "filename", ",", "mode", "=", "'img'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset": [[23, 33], ["float", "os.path.isdir", "sorted", "os.walk", "image_folder.is_image_file", "min", "os.path.join", "images.append", "len"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.is_image_file"], ["        ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "", "elif", "(", "mode", "==", "'np'", ")", ":", "\n", "        ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "NP_EXTENSIONS", ")", "\n", "\n", "", "", "def", "make_dataset", "(", "dirs", ",", "mode", "=", "'img'", ")", ":", "\n", "    ", "if", "(", "not", "isinstance", "(", "dirs", ",", "list", ")", ")", ":", "\n", "        ", "dirs", "=", "[", "dirs", ",", "]", "\n", "\n", "", "images", "=", "[", "]", "\n", "for", "dir", "in", "dirs", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.default_loader": [[35, 37], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ",", "mode", "=", "mode", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_data_loader.BaseDataLoader.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_data_loader.BaseDataLoader.initialize": [[6, 8], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_data_loader.BaseDataLoader.load_data": [[9, 11], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.aligned_dataset.AlignedDataset.__init__": [[14, 26], ["data.base_dataset.BaseDataset.__init__", "os.path.join", "sorted", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this dataset class.\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "self", ".", "dir_AB", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", ")", "# get the image directory", "\n", "self", ".", "AB_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_AB", ",", "opt", ".", "max_dataset_size", ")", ")", "# get image paths", "\n", "assert", "(", "self", ".", "opt", ".", "load_size", ">=", "self", ".", "opt", ".", "crop_size", ")", "# crop_size should be smaller than the size of loaded image", "\n", "self", ".", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "if", "self", ".", "opt", ".", "direction", "==", "'BtoA'", "else", "self", ".", "opt", ".", "input_nc", "\n", "self", ".", "output_nc", "=", "self", ".", "opt", ".", "input_nc", "if", "self", ".", "opt", ".", "direction", "==", "'BtoA'", "else", "self", ".", "opt", ".", "output_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.aligned_dataset.AlignedDataset.__getitem__": [[27, 57], ["PIL.Image.open().convert", "int", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "data.base_dataset.get_transform.", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_params", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns a dictionary that contains A, B, A_paths and B_paths\n            A (tensor) - - an image in the input domain\n            B (tensor) - - its corresponding image in the target domain\n            A_paths (str) - - image paths\n            B_paths (str) - - image paths (same as A_paths)\n        \"\"\"", "\n", "# read a image given a random integer index", "\n", "AB_path", "=", "self", ".", "AB_paths", "[", "index", "]", "\n", "AB", "=", "Image", ".", "open", "(", "AB_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# split AB image into A and B", "\n", "w", ",", "h", "=", "AB", ".", "size", "\n", "w2", "=", "int", "(", "w", "/", "2", ")", "\n", "A", "=", "AB", ".", "crop", "(", "(", "0", ",", "0", ",", "w2", ",", "h", ")", ")", "\n", "B", "=", "AB", ".", "crop", "(", "(", "w2", ",", "0", ",", "w", ",", "h", ")", ")", "\n", "\n", "# apply the same transform to both A and B", "\n", "transform_params", "=", "get_params", "(", "self", ".", "opt", ",", "A", ".", "size", ")", "\n", "A_transform", "=", "get_transform", "(", "self", ".", "opt", ",", "transform_params", ",", "grayscale", "=", "(", "self", ".", "input_nc", "==", "1", ")", ")", "\n", "B_transform", "=", "get_transform", "(", "self", ".", "opt", ",", "transform_params", ",", "grayscale", "=", "(", "self", ".", "output_nc", "==", "1", ")", ")", "\n", "\n", "A", "=", "A_transform", "(", "A", ")", "\n", "B", "=", "B_transform", "(", "B", ")", "\n", "\n", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "'A_paths'", ":", "AB_path", ",", "'B_paths'", ":", "AB_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.aligned_dataset.AlignedDataset.__len__": [[58, 61], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "AB_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.singleimage_dataset.SingleImageDataset.__init__": [[20, 65], ["data.base_dataset.BaseDataset.__init__", "os.path.join", "os.path.join", "len", "len", "PIL.Image.open().convert", "PIL.Image.open().convert", "print", "numpy.random.uniform", "numpy.reshape", "numpy.random.uniform", "numpy.reshape", "list", "random.shuffle", "list", "random.shuffle", "os.path.exists", "os.path.exists", "sorted", "sorted", "numpy.tile", "numpy.tile", "range", "range", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "len", "len", "PIL.Image.open", "PIL.Image.open", "len", "len", "str", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this dataset class.\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'trainA'", ")", "# create a path '/path/to/data/trainA'", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'trainB'", ")", "# create a path '/path/to/data/trainB'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "dir_A", ")", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "dir_B", ")", ":", "\n", "            ", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_A", ",", "opt", ".", "max_dataset_size", ")", ")", "# load images from '/path/to/data/trainA'", "\n", "self", ".", "B_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_B", ",", "opt", ".", "max_dataset_size", ")", ")", "# load images from '/path/to/data/trainB'", "\n", "", "self", ".", "A_size", "=", "len", "(", "self", ".", "A_paths", ")", "# get the size of dataset A", "\n", "self", ".", "B_size", "=", "len", "(", "self", ".", "B_paths", ")", "# get the size of dataset B", "\n", "\n", "assert", "len", "(", "self", ".", "A_paths", ")", "==", "1", "and", "len", "(", "self", ".", "B_paths", ")", "==", "1", ",", "\"SingleImageDataset class should be used with one image in each domain\"", "\n", "A_img", "=", "Image", ".", "open", "(", "self", ".", "A_paths", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "B_img", "=", "Image", ".", "open", "(", "self", ".", "B_paths", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "print", "(", "\"Image sizes %s and %s\"", "%", "(", "str", "(", "A_img", ".", "size", ")", ",", "str", "(", "B_img", ".", "size", ")", ")", ")", "\n", "\n", "self", ".", "A_img", "=", "A_img", "\n", "self", ".", "B_img", "=", "B_img", "\n", "\n", "# In single-image translation, we augment the data loader by applying", "\n", "# random scaling. Still, we design the data loader such that the", "\n", "# amount of scaling is the same within a minibatch. To do this,", "\n", "# we precompute the random scaling values, and repeat them by |batch_size|.", "\n", "A_zoom", "=", "1", "/", "self", ".", "opt", ".", "random_scale_max", "\n", "zoom_levels_A", "=", "np", ".", "random", ".", "uniform", "(", "A_zoom", ",", "1.0", ",", "size", "=", "(", "len", "(", "self", ")", "//", "opt", ".", "batch_size", "+", "1", ",", "1", ",", "2", ")", ")", "\n", "self", ".", "zoom_levels_A", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "zoom_levels_A", ",", "(", "1", ",", "opt", ".", "batch_size", ",", "1", ")", ")", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "\n", "B_zoom", "=", "1", "/", "self", ".", "opt", ".", "random_scale_max", "\n", "zoom_levels_B", "=", "np", ".", "random", ".", "uniform", "(", "B_zoom", ",", "1.0", ",", "size", "=", "(", "len", "(", "self", ")", "//", "opt", ".", "batch_size", "+", "1", ",", "1", ",", "2", ")", ")", "\n", "self", ".", "zoom_levels_B", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "zoom_levels_B", ",", "(", "1", ",", "opt", ".", "batch_size", ",", "1", ")", ")", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "\n", "# While the crop locations are randomized, the negative samples should", "\n", "# not come from the same location. To do this, we precompute the", "\n", "# crop locations with no repetition.", "\n", "self", ".", "patch_indices_A", "=", "list", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "patch_indices_A", ")", "\n", "self", ".", "patch_indices_B", "=", "list", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "patch_indices_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.singleimage_dataset.SingleImageDataset.__getitem__": [[66, 103], ["data.base_dataset.get_transform", "data.base_dataset.get_transform.", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "data.base_dataset.get_transform.", "random.random", "random.random"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index (int)      -- a random integer for data indexing\n\n        Returns a dictionary that contains A, B, A_paths and B_paths\n            A (tensor)       -- an image in the input domain\n            B (tensor)       -- its corresponding image in the target domain\n            A_paths (str)    -- image paths\n            B_paths (str)    -- image paths\n        \"\"\"", "\n", "A_path", "=", "self", ".", "A_paths", "[", "0", "]", "\n", "B_path", "=", "self", ".", "B_paths", "[", "0", "]", "\n", "A_img", "=", "self", ".", "A_img", "\n", "B_img", "=", "self", ".", "B_img", "\n", "\n", "# apply image transformation", "\n", "if", "self", ".", "opt", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "param", "=", "{", "'scale_factor'", ":", "self", ".", "zoom_levels_A", "[", "index", "]", ",", "\n", "'patch_index'", ":", "self", ".", "patch_indices_A", "[", "index", "]", ",", "\n", "'flip'", ":", "random", ".", "random", "(", ")", ">", "0.5", "}", "\n", "\n", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "params", "=", "param", ",", "method", "=", "Image", ".", "BILINEAR", ")", "\n", "A", "=", "transform_A", "(", "A_img", ")", "\n", "\n", "param", "=", "{", "'scale_factor'", ":", "self", ".", "zoom_levels_B", "[", "index", "]", ",", "\n", "'patch_index'", ":", "self", ".", "patch_indices_B", "[", "index", "]", ",", "\n", "'flip'", ":", "random", ".", "random", "(", ")", ">", "0.5", "}", "\n", "transform_B", "=", "get_transform", "(", "self", ".", "opt", ",", "params", "=", "param", ",", "method", "=", "Image", ".", "BILINEAR", ")", "\n", "B", "=", "transform_B", "(", "B_img", ")", "\n", "", "else", ":", "\n", "            ", "transform", "=", "get_transform", "(", "self", ".", "opt", ",", "method", "=", "Image", ".", "BILINEAR", ")", "\n", "A", "=", "transform", "(", "A_img", ")", "\n", "B", "=", "transform", "(", "B_img", ")", "\n", "\n", "", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "'A_paths'", ":", "A_path", ",", "'B_paths'", ":", "B_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.singleimage_dataset.SingleImageDataset.__len__": [[104, 108], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Let's pretend the single image contains 100,000 crops for convenience.\n        \"\"\"", "\n", "return", "100000", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.colorization_dataset.ColorizationDataset.modify_commandline_options": [[15, 31], ["parser.set_defaults"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n\n        By default, the number of channels for input image  is 1 (L) and\n        the number of channels for output image is 2 (ab). The direction is from A to B\n        \"\"\"", "\n", "parser", ".", "set_defaults", "(", "input_nc", "=", "1", ",", "output_nc", "=", "2", ",", "direction", "=", "'AtoB'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.colorization_dataset.ColorizationDataset.__init__": [[32, 43], ["data.base_dataset.BaseDataset.__init__", "os.path.join", "sorted", "data.base_dataset.get_transform", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this dataset class.\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", ")", "\n", "self", ".", "AB_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir", ",", "opt", ".", "max_dataset_size", ")", ")", "\n", "assert", "(", "opt", ".", "input_nc", "==", "1", "and", "opt", ".", "output_nc", "==", "2", "and", "opt", ".", "direction", "==", "'AtoB'", ")", "\n", "self", ".", "transform", "=", "get_transform", "(", "self", ".", "opt", ",", "convert", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.colorization_dataset.ColorizationDataset.__getitem__": [[44, 65], ["PIL.Image.open().convert", "colorization_dataset.ColorizationDataset.transform", "numpy.array", "skimage.color.rgb2lab().astype", "torchvision.ToTensor", "PIL.Image.open", "skimage.color.rgb2lab"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.rgb2lab"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns a dictionary that contains A, B, A_paths and B_paths\n            A (tensor) - - the L channel of an image\n            B (tensor) - - the ab channels of the same image\n            A_paths (str) - - image paths\n            B_paths (str) - - image paths (same as A_paths)\n        \"\"\"", "\n", "path", "=", "self", ".", "AB_paths", "[", "index", "]", "\n", "im", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "im", "=", "self", ".", "transform", "(", "im", ")", "\n", "im", "=", "np", ".", "array", "(", "im", ")", "\n", "lab", "=", "color", ".", "rgb2lab", "(", "im", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "lab_t", "=", "transforms", ".", "ToTensor", "(", ")", "(", "lab", ")", "\n", "A", "=", "lab_t", "[", "[", "0", "]", ",", "...", "]", "/", "50.0", "-", "1.0", "\n", "B", "=", "lab_t", "[", "[", "1", ",", "2", "]", ",", "...", "]", "/", "110.0", "\n", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "'A_paths'", ":", "path", ",", "'B_paths'", ":", "path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.colorization_dataset.ColorizationDataset.__len__": [[66, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "AB_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.BaseDataset.__init__": [[23, 31], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.BaseDataset.modify_commandline_options": [[32, 44], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.BaseDataset.__len__": [[45, 49], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.BaseDataset.__getitem__": [[50, 61], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_params": [[63, 79], ["random.randint", "random.randint", "numpy.maximum", "numpy.maximum", "random.random"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform": [[81, 132], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Grayscale", "torchvision.Resize", "torchvision.Resize", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "transform_list.append", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Lambda", "transform_list.append", "torchvision.Lambda", "torchvision.Lambda", "torchvision.RandomCrop", "torchvision.Lambda", "torchvision.RandomHorizontalFlip", "transform_list.append", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Lambda", "base_dataset.__patch", "base_dataset.__trim", "base_dataset.__make_power_2", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__random_zoom", "base_dataset.__random_zoom", "base_dataset.__crop", "base_dataset.__scale_shortside", "base_dataset.__flip"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__patch", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__trim", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__make_power_2", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__random_zoom", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__random_zoom", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__crop", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__scale_shortside", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__flip"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__make_power_2": [[134, 142], ["int", "int", "img.resize", "round", "round"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__random_zoom": [[144, 154], ["max", "max", "img.resize.resize", "numpy.random.uniform", "int", "int", "round", "round"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__scale_shortside": [[156, 164], ["min", "img.resize", "round", "round"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__trim": [[166, 181], ["img.crop", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__scale_width": [[183, 190], ["int", "img.resize", "max"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__crop": [[192, 199], ["img.crop"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__patch": [[201, 215], ["numpy.random.randint", "numpy.random.randint", "img.crop", "int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__flip": [[217, 221], ["img.transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.__print_size_warning": [[223, 231], ["hasattr", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.single_dataset.SingleDataset.__init__": [[12, 22], ["data.base_dataset.BaseDataset.__init__", "sorted", "data.base_dataset.get_transform", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this dataset class.\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "opt", ".", "dataroot", ",", "opt", ".", "max_dataset_size", ")", ")", "\n", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "if", "self", ".", "opt", ".", "direction", "==", "'BtoA'", "else", "self", ".", "opt", ".", "input_nc", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ",", "grayscale", "=", "(", "input_nc", "==", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.single_dataset.SingleDataset.__getitem__": [[23, 37], ["PIL.Image.open().convert", "single_dataset.SingleDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns a dictionary that contains A and A_paths\n            A(tensor) - - an image in one domain\n            A_paths(str) - - the path of the image\n        \"\"\"", "\n", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "A", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "return", "{", "'A'", ":", "A", ",", "'A_paths'", ":", "A_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.single_dataset.SingleDataset.__len__": [[38, 41], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "A_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.template_dataset.TemplateDataset.modify_commandline_options": [[21, 35], ["parser.add_argument", "parser.set_defaults"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "parser", ".", "add_argument", "(", "'--new_dataset_option'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'new dataset option'", ")", "\n", "parser", ".", "set_defaults", "(", "max_dataset_size", "=", "10", ",", "new_dataset_option", "=", "2.0", ")", "# specify dataset-specific default values", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.template_dataset.TemplateDataset.__init__": [[36, 53], ["data.base_dataset.BaseDataset.__init__", "data.base_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this dataset class.\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n\n        A few things can be done here.\n        - save the options (have been done in BaseDataset)\n        - get image paths and meta information of the dataset.\n        - define the image transformation.\n        \"\"\"", "\n", "# save the option and dataset root", "\n", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "# get the image paths of your dataset;", "\n", "self", ".", "image_paths", "=", "[", "]", "# You can call sorted(make_dataset(self.root, opt.max_dataset_size)) to get all the image paths under the directory self.root", "\n", "# define the default transform function. You can use <base_dataset.get_transform>; You can also define your custom transform function", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.template_dataset.TemplateDataset.__getitem__": [[54, 72], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index -- a random integer for data indexing\n\n        Returns:\n            a dictionary of data with their names. It usually contains the data itself and its metadata information.\n\n        Step 1: get a random image path: e.g., path = self.image_paths[index]\n        Step 2: load your data from the disk: e.g., image = Image.open(path).convert('RGB').\n        Step 3: convert your data to a PyTorch tensor. You can use helpder functions such as self.transform. e.g., data = self.transform(image)\n        Step 4: return a data point as a dictionary.\n        \"\"\"", "\n", "path", "=", "'temp'", "# needs to be a string", "\n", "data_A", "=", "None", "# needs to be a tensor", "\n", "data_B", "=", "None", "# needs to be a tensor", "\n", "return", "{", "'data_A'", ":", "data_A", ",", "'data_B'", ":", "data_B", ",", "'path'", ":", "path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.template_dataset.TemplateDataset.__len__": [[73, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images.\"\"\"", "\n", "return", "len", "(", "self", ".", "image_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.CustomDatasetDataLoader.__init__": [[65, 80], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "print", "torch.utils.data.DataLoader", "int", "type"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.CustomDatasetDataLoader.load_data": [[81, 83], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.CustomDatasetDataLoader.__len__": [[84, 87], ["min", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.CustomDatasetDataLoader.__iter__": [[88, 94], ["enumerate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.find_dataset_using_name": [[18, 39], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "NotImplementedError", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.get_option_setter": [[41, 45], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.create_dataset": [[47, 60], ["__init__.CustomDatasetDataLoader", "__init__.CustomDatasetDataLoader.load_data"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.__init__.CustomDatasetDataLoader.load_data"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.unaligned_dataset.UnalignedDataset.__init__": [[21, 49], ["data.base_dataset.BaseDataset.__init__", "os.path.join", "os.path.join", "sorted", "sorted", "len", "len", "data.base_dataset.get_transform", "torchvision.Compose", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this dataset class.\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'A'", ")", "# create a path '/path/to/data/trainA'", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'B'", ")", "# create a path '/path/to/data/trainB'", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_A", ",", "opt", ".", "max_dataset_size", ")", ")", "# load images from '/path/to/data/trainA'", "\n", "self", ".", "B_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_B", ",", "opt", ".", "max_dataset_size", ")", ")", "# load images from '/path/to/data/trainB'", "\n", "self", ".", "A_size", "=", "len", "(", "self", ".", "A_paths", ")", "# get the size of dataset A", "\n", "self", ".", "B_size", "=", "len", "(", "self", ".", "B_paths", ")", "# get the size of dataset B", "\n", "# apply image transformation", "\n", "# For FastCUT mode, if in finetuning phase (learning rate is decaying)", "\n", "# do not perform resize-crop data augmentation of CycleGAN.", "\n", "# print('current_epoch', self.current_epoch)", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ",", "convert", "=", "False", ")", "\n", "if", "self", ".", "opt", ".", "isTrain", "and", "opt", ".", "augment", ":", "\n", "            ", "self", ".", "transform_aug", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.5", ",", "contrast", "=", "0.5", ",", "saturation", "=", "0.5", ",", "hue", "=", "0.3", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform_aug", "=", "None", "\n", "", "self", ".", "transform_tensor", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.unaligned_dataset.UnalignedDataset.__getitem__": [[50, 80], ["PIL.Image.open().convert", "PIL.Image.open().convert", "unaligned_dataset.UnalignedDataset.transform", "unaligned_dataset.UnalignedDataset.transform", "unaligned_dataset.UnalignedDataset.transform_tensor", "unaligned_dataset.UnalignedDataset.transform_tensor", "random.randint", "unaligned_dataset.UnalignedDataset.transform_aug", "unaligned_dataset.UnalignedDataset.transform_aug", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index (int)      -- a random integer for data indexing\n\n        Returns a dictionary that contains A, B, A_paths and B_paths\n            A (tensor)       -- an image in the input domain\n            B (tensor)       -- its corresponding image in the target domain\n            A_paths (str)    -- image paths\n            B_paths (str)    -- image paths\n        \"\"\"", "\n", "A_path", "=", "self", ".", "A_paths", "[", "index", "%", "self", ".", "A_size", "]", "# make sure index is within then range", "\n", "if", "self", ".", "opt", ".", "serial_batches", ":", "# make sure index is within then range", "\n", "            ", "index_B", "=", "index", "%", "self", ".", "B_size", "\n", "", "else", ":", "# randomize the index for domain B to avoid fixed pairs.", "\n", "            ", "index_B", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "B_size", "-", "1", ")", "\n", "", "B_path", "=", "self", ".", "B_paths", "[", "index_B", "]", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "B_img", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "A_pil", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "B_pil", "=", "self", ".", "transform", "(", "B_img", ")", "\n", "A", "=", "self", ".", "transform_tensor", "(", "A_pil", ")", "\n", "B", "=", "self", ".", "transform_tensor", "(", "B_pil", ")", "\n", "if", "self", ".", "opt", ".", "isTrain", "and", "self", ".", "transform_aug", "is", "not", "None", ":", "\n", "            ", "A_aug", "=", "self", ".", "transform_aug", "(", "A_pil", ")", "\n", "B_aug", "=", "self", ".", "transform_aug", "(", "B_pil", ")", "\n", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "'A_paths'", ":", "A_path", ",", "'B_paths'", ":", "B_path", ",", "'A_aug'", ":", "A_aug", ",", "'B_aug'", ":", "B_aug", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "'A_paths'", ":", "A_path", ",", "'B_paths'", ":", "B_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.unaligned_dataset.UnalignedDataset.__len__": [[81, 88], ["max"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\n\n        As we have two datasets with potentially different number of images,\n        we take a maximum of\n        \"\"\"", "\n", "return", "max", "(", "self", ".", "A_size", ",", "self", ".", "B_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.dataset.twoafc_dataset.TwoAFCDataset.initialize": [[11, 41], ["data.image_folder.make_dataset", "sorted", "data.image_folder.make_dataset", "sorted", "data.image_folder.make_dataset", "sorted", "transform_list.append", "torchvision.Compose", "data.image_folder.make_dataset", "sorted", "isinstance", "os.path.join", "os.path.join", "os.path.join", "torchvision.Scale", "torchvision.ToTensor", "torchvision.Normalize", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "dataroots", ",", "load_size", "=", "64", ")", ":", "\n", "        ", "if", "(", "not", "isinstance", "(", "dataroots", ",", "list", ")", ")", ":", "\n", "            ", "dataroots", "=", "[", "dataroots", ",", "]", "\n", "", "self", ".", "roots", "=", "dataroots", "\n", "self", ".", "load_size", "=", "load_size", "\n", "\n", "# image directory", "\n", "self", ".", "dir_ref", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'ref'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "ref_paths", "=", "make_dataset", "(", "self", ".", "dir_ref", ")", "\n", "self", ".", "ref_paths", "=", "sorted", "(", "self", ".", "ref_paths", ")", "\n", "\n", "self", ".", "dir_p0", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'p0'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "p0_paths", "=", "make_dataset", "(", "self", ".", "dir_p0", ")", "\n", "self", ".", "p0_paths", "=", "sorted", "(", "self", ".", "p0_paths", ")", "\n", "\n", "self", ".", "dir_p1", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'p1'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "p1_paths", "=", "make_dataset", "(", "self", ".", "dir_p1", ")", "\n", "self", ".", "p1_paths", "=", "sorted", "(", "self", ".", "p1_paths", ")", "\n", "\n", "transform_list", "=", "[", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Scale", "(", "load_size", ")", ")", "\n", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "# judgement directory", "\n", "self", ".", "dir_J", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'judge'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "judge_paths", "=", "make_dataset", "(", "self", ".", "dir_J", ",", "mode", "=", "'np'", ")", "\n", "self", ".", "judge_paths", "=", "sorted", "(", "self", ".", "judge_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.dataset.twoafc_dataset.TwoAFCDataset.__getitem__": [[42, 63], ["PIL.Image.open().convert", "twoafc_dataset.TwoAFCDataset.transform", "PIL.Image.open().convert", "twoafc_dataset.TwoAFCDataset.transform", "PIL.Image.open().convert", "twoafc_dataset.TwoAFCDataset.transform", "numpy.load().reshape", "torch.FloatTensor", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "numpy.load"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "p0_path", "=", "self", ".", "p0_paths", "[", "index", "]", "\n", "p0_img_", "=", "Image", ".", "open", "(", "p0_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p0_img", "=", "self", ".", "transform", "(", "p0_img_", ")", "\n", "\n", "p1_path", "=", "self", ".", "p1_paths", "[", "index", "]", "\n", "p1_img_", "=", "Image", ".", "open", "(", "p1_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p1_img", "=", "self", ".", "transform", "(", "p1_img_", ")", "\n", "\n", "ref_path", "=", "self", ".", "ref_paths", "[", "index", "]", "\n", "ref_img_", "=", "Image", ".", "open", "(", "ref_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "ref_img", "=", "self", ".", "transform", "(", "ref_img_", ")", "\n", "\n", "judge_path", "=", "self", ".", "judge_paths", "[", "index", "]", "\n", "# judge_img = (np.load(judge_path)*2.-1.).reshape((1,1,1,)) # [-1,1]", "\n", "judge_img", "=", "np", ".", "load", "(", "judge_path", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", ")", ")", "# [0,1]", "\n", "\n", "judge_img", "=", "torch", ".", "FloatTensor", "(", "judge_img", ")", "\n", "\n", "return", "{", "'p0'", ":", "p0_img", ",", "'p1'", ":", "p1_img", ",", "'ref'", ":", "ref_img", ",", "'judge'", ":", "judge_img", ",", "\n", "'p0_path'", ":", "p0_path", ",", "'p1_path'", ":", "p1_path", ",", "'ref_path'", ":", "ref_path", ",", "'judge_path'", ":", "judge_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.dataset.twoafc_dataset.TwoAFCDataset.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "p0_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.dataset.base_dataset.BaseDataset.__init__": [[4, 6], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.dataset.base_dataset.BaseDataset.name": [[7, 9], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.dataset.base_dataset.BaseDataset.initialize": [[10, 12], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.dataset.jnd_dataset.JNDDataset.initialize": [[11, 34], ["os.path.join", "data.image_folder.make_dataset", "sorted", "os.path.join", "data.image_folder.make_dataset", "sorted", "transform_list.append", "torchvision.Compose", "os.path.join", "data.image_folder.make_dataset", "sorted", "torchvision.Scale", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "dataroot", ",", "load_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "root", "=", "dataroot", "\n", "self", ".", "load_size", "=", "load_size", "\n", "\n", "self", ".", "dir_p0", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'p0'", ")", "\n", "self", ".", "p0_paths", "=", "make_dataset", "(", "self", ".", "dir_p0", ")", "\n", "self", ".", "p0_paths", "=", "sorted", "(", "self", ".", "p0_paths", ")", "\n", "\n", "self", ".", "dir_p1", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'p1'", ")", "\n", "self", ".", "p1_paths", "=", "make_dataset", "(", "self", ".", "dir_p1", ")", "\n", "self", ".", "p1_paths", "=", "sorted", "(", "self", ".", "p1_paths", ")", "\n", "\n", "transform_list", "=", "[", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Scale", "(", "load_size", ")", ")", "\n", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "# judgement directory", "\n", "self", ".", "dir_S", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'same'", ")", "\n", "self", ".", "same_paths", "=", "make_dataset", "(", "self", ".", "dir_S", ",", "mode", "=", "'np'", ")", "\n", "self", ".", "same_paths", "=", "sorted", "(", "self", ".", "same_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.dataset.jnd_dataset.JNDDataset.__getitem__": [[35, 51], ["PIL.Image.open().convert", "jnd_dataset.JNDDataset.transform", "PIL.Image.open().convert", "jnd_dataset.JNDDataset.transform", "numpy.load().reshape", "torch.FloatTensor", "PIL.Image.open", "PIL.Image.open", "numpy.load"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "p0_path", "=", "self", ".", "p0_paths", "[", "index", "]", "\n", "p0_img_", "=", "Image", ".", "open", "(", "p0_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p0_img", "=", "self", ".", "transform", "(", "p0_img_", ")", "\n", "\n", "p1_path", "=", "self", ".", "p1_paths", "[", "index", "]", "\n", "p1_img_", "=", "Image", ".", "open", "(", "p1_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p1_img", "=", "self", ".", "transform", "(", "p1_img_", ")", "\n", "\n", "same_path", "=", "self", ".", "same_paths", "[", "index", "]", "\n", "same_img", "=", "np", ".", "load", "(", "same_path", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", ")", ")", "# [0,1]", "\n", "\n", "same_img", "=", "torch", ".", "FloatTensor", "(", "same_img", ")", "\n", "\n", "return", "{", "'p0'", ":", "p0_img", ",", "'p1'", ":", "p1_img", ",", "'same'", ":", "same_img", ",", "\n", "'p0_path'", ":", "p0_path", ",", "'p1_path'", ":", "p1_path", ",", "'same_path'", ":", "same_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.dataset.jnd_dataset.JNDDataset.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "p0_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment._StreamMetrics.__init__": [[71, 74], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Overridden by subclasses \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment._StreamMetrics.update": [[75, 78], ["NotImplementedError"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "gt", ",", "pred", ")", ":", "\n", "        ", "\"\"\" Overridden by subclasses \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment._StreamMetrics.get_results": [[79, 82], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "\"\"\" Overridden by subclasses \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment._StreamMetrics.to_str": [[83, 86], ["NotImplementedError"], "methods", ["None"], ["", "def", "to_str", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "\"\"\" Overridden by subclasses \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment._StreamMetrics.reset": [[87, 90], ["NotImplementedError"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Overridden by subclasses \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment._StreamMetrics.synch": [[91, 94], ["NotImplementedError"], "methods", ["None"], ["", "def", "synch", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\" Overridden by subclasses \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics.__init__": [[100, 105], ["segment._StreamMetrics.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "self", ".", "total_samples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics.update": [[106, 110], ["zip", "len", "segment.StreamSegMetrics._fast_hist", "lt.flatten", "lp.flatten"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics._fast_hist"], ["", "def", "update", "(", "self", ",", "label_trues", ",", "label_preds", ")", ":", "\n", "        ", "for", "lt", ",", "lp", "in", "zip", "(", "label_trues", ",", "label_preds", ")", ":", "\n", "            ", "self", ".", "confusion_matrix", "+=", "self", ".", "_fast_hist", "(", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ")", "\n", "", "self", ".", "total_samples", "+=", "len", "(", "label_trues", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics.to_str": [[111, 126], ["results.items", "results[].items", "results[].items", "str", "str"], "methods", ["None"], ["", "def", "to_str", "(", "self", ",", "results", ")", ":", "\n", "        ", "string", "=", "\"\\n\"", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"Class IoU\"", "and", "k", "!=", "\"Class Acc\"", "and", "k", "!=", "\"Confusion Matrix\"", ":", "\n", "                ", "string", "+=", "\"%s: %f\\n\"", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "", "string", "+=", "'Class IoU:\\n'", "\n", "for", "k", ",", "v", "in", "results", "[", "'Class IoU'", "]", ".", "items", "(", ")", ":", "\n", "            ", "string", "+=", "\"\\tclass %d: %s\\n\"", "%", "(", "k", ",", "str", "(", "v", ")", ")", "\n", "\n", "", "string", "+=", "'Class Acc:\\n'", "\n", "for", "k", ",", "v", "in", "results", "[", "'Class Acc'", "]", ".", "items", "(", ")", ":", "\n", "            ", "string", "+=", "\"\\tclass %d: %s\\n\"", "%", "(", "k", ",", "str", "(", "v", ")", ")", "\n", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics._fast_hist": [[127, 134], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "methods", ["None"], ["", "def", "_fast_hist", "(", "self", ",", "label_true", ",", "label_pred", ")", ":", "\n", "        ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "self", ".", "n_classes", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "self", ".", "n_classes", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", ",", "\n", "minlength", "=", "self", ".", "n_classes", "**", "2", ",", "\n", ")", ".", "reshape", "(", "self", ".", "n_classes", ",", "self", ".", "n_classes", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics.get_results": [[135, 167], ["hist.sum", "numpy.diag", "numpy.mean", "numpy.mean", "dict", "dict", "numpy.diag.sum", "hist.sum", "hist.sum", "hist.sum", "zip", "zip", "range", "range", "hist.sum", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns accuracy score evaluation result.\n            - overall accuracy\n            - mean accuracy\n            - mean IU\n            - fwavacc\n        \"\"\"", "\n", "EPS", "=", "1e-6", "\n", "hist", "=", "self", ".", "confusion_matrix", "\n", "\n", "gt_sum", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "mask", "=", "(", "gt_sum", "!=", "0", ")", "\n", "diag", "=", "np", ".", "diag", "(", "hist", ")", "\n", "\n", "acc", "=", "diag", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls_c", "=", "diag", "/", "(", "gt_sum", "+", "EPS", ")", "\n", "acc_cls", "=", "np", ".", "mean", "(", "acc_cls_c", "[", "mask", "]", ")", "\n", "iu", "=", "diag", "/", "(", "gt_sum", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "diag", "+", "EPS", ")", "\n", "mean_iu", "=", "np", ".", "mean", "(", "iu", "[", "mask", "]", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "cls_iu", "=", "dict", "(", "zip", "(", "range", "(", "self", ".", "n_classes", ")", ",", "[", "iu", "[", "i", "]", "if", "m", "else", "\"X\"", "for", "i", ",", "m", "in", "enumerate", "(", "mask", ")", "]", ")", ")", "\n", "cls_acc", "=", "dict", "(", "zip", "(", "range", "(", "self", ".", "n_classes", ")", ",", "[", "acc_cls_c", "[", "i", "]", "if", "m", "else", "\"X\"", "for", "i", ",", "m", "in", "enumerate", "(", "mask", ")", "]", ")", ")", "\n", "\n", "return", "{", "\n", "\"Total samples\"", ":", "self", ".", "total_samples", ",", "\n", "\"Overall Acc\"", ":", "acc", ",", "\n", "\"Mean Acc\"", ":", "acc_cls", ",", "\n", "\"FreqW Acc\"", ":", "fwavacc", ",", "\n", "\"Mean IoU\"", ":", "mean_iu", ",", "\n", "\"Class IoU\"", ":", "cls_iu", ",", "\n", "\"Class Acc\"", ":", "cls_acc", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics.reset": [[169, 172], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_classes", ",", "self", ".", "n_classes", ")", ")", "\n", "self", ".", "total_samples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics.synch": [[173, 184], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.reduce", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.tensor().to.cpu().numpy", "torch.tensor().to.cpu().numpy", "torch.tensor().to.cpu().numpy", "torch.tensor().to.cpu().numpy", "torch.tensor().to.cpu().numpy", "torch.tensor().to.cpu().numpy", "torch.tensor().to.cpu().numpy", "torch.tensor().to.cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to.cpu", "torch.tensor().to.cpu", "torch.tensor().to.cpu", "torch.tensor().to.cpu", "torch.tensor().to.cpu", "torch.tensor().to.cpu", "torch.tensor().to.cpu", "torch.tensor().to.cpu"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank"], ["", "def", "synch", "(", "self", ",", "device", ")", ":", "\n", "# collect from multi-processes", "\n", "        ", "confusion_matrix", "=", "torch", ".", "tensor", "(", "self", ".", "confusion_matrix", ")", ".", "to", "(", "device", ")", "\n", "samples", "=", "torch", ".", "tensor", "(", "self", ".", "total_samples", ")", ".", "to", "(", "device", ")", "\n", "\n", "torch", ".", "distributed", ".", "reduce", "(", "confusion_matrix", ",", "dst", "=", "0", ")", "\n", "torch", ".", "distributed", ".", "reduce", "(", "samples", ",", "dst", "=", "0", ")", "\n", "\n", "if", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "confusion_matrix", "=", "confusion_matrix", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "total_samples", "=", "samples", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.DRNSeg.__init__": [[198, 224], ["torch.nn.Module.__init__", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "m.weight.data.normal_", "m.bias.data.zero_", "drn.__dict__.get", "torch.nn.DataParallel.load_state_dict", "math.sqrt", "torch.nn.UpsamplingBilinear2d", "torch.nn.UpsamplingBilinear2d", "torch.nn.UpsamplingBilinear2d", "torch.nn.UpsamplingBilinear2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "segment.fill_up_weights", "list", "model.children"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.fill_up_weights"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ",", "classes", ",", "pretrained_model", "=", "None", ",", "\n", "pretrained", "=", "True", ",", "use_torch_up", "=", "False", ")", ":", "\n", "        ", "super", "(", "DRNSeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "drn", ".", "__dict__", ".", "get", "(", "model_name", ")", "(", "\n", "pretrained", "=", "pretrained", ",", "num_classes", "=", "1000", ")", "\n", "pmodel", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "if", "pretrained_model", "is", "not", "None", ":", "\n", "            ", "pmodel", ".", "load_state_dict", "(", "pretrained_model", ")", "\n", "", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", ")", "\n", "\n", "self", ".", "seg", "=", "nn", ".", "Conv2d", "(", "model", ".", "out_dim", ",", "classes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "m", "=", "self", ".", "seg", "\n", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "if", "use_torch_up", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "8", ")", "\n", "", "else", ":", "\n", "            ", "up", "=", "nn", ".", "ConvTranspose2d", "(", "classes", ",", "classes", ",", "16", ",", "stride", "=", "8", ",", "padding", "=", "4", ",", "\n", "output_padding", "=", "0", ",", "groups", "=", "classes", ",", "\n", "bias", "=", "False", ")", "\n", "fill_up_weights", "(", "up", ")", "\n", "up", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "up", "=", "up", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.DRNSeg.forward": [[225, 230], ["segment.DRNSeg.base", "segment.DRNSeg.seg", "segment.DRNSeg.up", "segment.DRNSeg.softmax"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "x", "=", "self", ".", "seg", "(", "x", ")", "\n", "y", "=", "self", ".", "up", "(", "x", ")", "\n", "return", "self", ".", "softmax", "(", "y", ")", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.DRNSeg.optim_parameters": [[231, 236], ["segment.DRNSeg.base.parameters", "segment.DRNSeg.seg.parameters"], "methods", ["None"], ["", "def", "optim_parameters", "(", "self", ",", "memo", "=", "None", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "base", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "param", "\n", "", "for", "param", "in", "self", ".", "seg", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "param", "\n", "", "", "", "class", "MaskToTensor", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.MaskToTensor.__call__": [[237, 239], ["torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "int32", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegList.__init__": [[242, 267], ["segment.SegList.read_lists", "json.load", "torchvision.Compose", "torchvision.Compose", "open", "os.path.join", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "segment.MaskToTensor"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegListMS.read_lists"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "phase", ",", "transform", ",", "list_dir", "=", "None", ",", "\n", "out_name", "=", "False", ")", ":", "\n", "        ", "self", ".", "list_dir", "=", "data_dir", "if", "list_dir", "is", "None", "else", "list_dir", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "out_name", "=", "out_name", "\n", "self", ".", "phase", "=", "phase", "\n", "# self.transforms = transforms", "\n", "self", ".", "image_list", "=", "None", "\n", "self", ".", "label_list", "=", "None", "\n", "self", ".", "bbox_list", "=", "None", "\n", "self", ".", "read_lists", "(", ")", "\n", "info", "=", "json", ".", "load", "(", "open", "(", "join", "(", "'./datasets/cityscapes'", ",", "'info.json'", ")", ",", "'r'", ")", ")", "\n", "self", ".", "img_transform", "=", "standard_transforms", ".", "Compose", "(", "[", "\n", "standard_transforms", ".", "Resize", "(", "(", "256", ",", "128", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "standard_transforms", ".", "ToTensor", "(", ")", ",", "\n", "standard_transforms", ".", "Normalize", "(", "mean", "=", "info", "[", "'mean'", "]", ",", "std", "=", "info", "[", "'std'", "]", ")", ",", "\n", "]", ")", "\n", "self", ".", "gt_transform", "=", "standard_transforms", ".", "Compose", "(", "[", "\n", "standard_transforms", ".", "Resize", "(", "(", "256", ",", "128", ")", ",", "interpolation", "=", "0", ")", ",", "\n", "MaskToTensor", "(", ")", ",", "\n", "# transforms.Normalize(mean=info['mean'], std=info['std']),", "\n", "]", ")", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegList.__getitem__": [[267, 278], ["list", "tuple", "PIL.Image.open", "list.append", "segment.SegList.T", "list.append", "os.path.join", "PIL.Image.open", "list.append", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegList.T"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "[", "Image", ".", "open", "(", "join", "(", "self", ".", "data_dir", ",", "self", ".", "image_list", "[", "index", "]", ")", ")", "]", "\n", "if", "self", ".", "label_list", "is", "not", "None", ":", "\n", "            ", "data", ".", "append", "(", "Image", ".", "open", "(", "\n", "join", "(", "self", ".", "data_dir", ",", "self", ".", "label_list", "[", "index", "]", ")", ")", ")", "\n", "", "data", "=", "list", "(", "self", ".", "T", "(", "data", ")", ")", "\n", "if", "self", ".", "out_name", ":", "\n", "            ", "if", "self", ".", "label_list", "is", "None", ":", "\n", "                ", "data", ".", "append", "(", "data", "[", "0", "]", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "", "data", ".", "append", "(", "self", ".", "image_list", "[", "index", "]", ")", "\n", "", "return", "tuple", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegList.__len__": [[279, 281], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegList.read_lists": [[282, 290], ["os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "line.strip", "open", "line.strip", "len", "len", "open"], "methods", ["None"], ["", "def", "read_lists", "(", "self", ")", ":", "\n", "        ", "image_path", "=", "join", "(", "self", ".", "list_dir", ",", "self", ".", "phase", "+", "'_images.txt'", ")", "\n", "label_path", "=", "join", "(", "self", ".", "list_dir", ",", "self", ".", "phase", "+", "'_labels.txt'", ")", "\n", "assert", "exists", "(", "image_path", ")", "\n", "self", ".", "image_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "image_path", ",", "'r'", ")", "]", "\n", "if", "exists", "(", "label_path", ")", ":", "\n", "            ", "self", ".", "label_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "label_path", ",", "'r'", ")", "]", "\n", "assert", "len", "(", "self", ".", "image_list", ")", "==", "len", "(", "self", ".", "label_list", ")", "\n", "", "", "def", "T", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegList.T": [[290, 302], ["numpy.asarray", "segment.SegList.id_to_trainid.items", "PIL.Image.fromarray", "numpy.ones", "label_copy.astype", "segment.SegList.img_transform", "segment.SegList.gt_transform"], "methods", ["None"], ["", "", "def", "T", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", "=", "data", "[", "0", "]", "\n", "gt", "=", "data", "[", "1", "]", "\n", "# print(np.unique(gt))", "\n", "label", "=", "np", ".", "asarray", "(", "gt", ",", "np", ".", "uint8", ")", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "gt", "=", "Image", ".", "fromarray", "(", "label_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "return", "self", ".", "img_transform", "(", "img", ")", ",", "self", ".", "gt_transform", "(", "gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegListMS.__init__": [[305, 315], ["segment.SegListMS.read_lists"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegListMS.read_lists"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "phase", ",", "transforms", ",", "scales", ",", "list_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "list_dir", "=", "data_dir", "if", "list_dir", "is", "None", "else", "list_dir", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "image_list", "=", "None", "\n", "self", ".", "label_list", "=", "None", "\n", "self", ".", "bbox_list", "=", "None", "\n", "self", ".", "read_lists", "(", ")", "\n", "self", ".", "scales", "=", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegListMS.__getitem__": [[316, 330], ["list", "list.append", "list.extend", "tuple", "PIL.Image.open", "data.append", "segment.SegListMS.transforms", "os.path.join", "PIL.Image.open", "segment.SegListMS.transforms", "os.path.join", "data[].resize", "int", "int"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "[", "Image", ".", "open", "(", "join", "(", "self", ".", "data_dir", ",", "self", ".", "image_list", "[", "index", "]", ")", ")", "]", "\n", "w", ",", "h", "=", "data", "[", "0", "]", ".", "size", "\n", "if", "self", ".", "label_list", "is", "not", "None", ":", "\n", "            ", "data", ".", "append", "(", "Image", ".", "open", "(", "\n", "join", "(", "self", ".", "data_dir", ",", "self", ".", "label_list", "[", "index", "]", ")", ")", ")", "\n", "# data = list(self.transforms(*data))", "\n", "", "out_data", "=", "list", "(", "self", ".", "transforms", "(", "*", "data", ")", ")", "\n", "ms_images", "=", "[", "self", ".", "transforms", "(", "data", "[", "0", "]", ".", "resize", "(", "(", "int", "(", "w", "*", "s", ")", ",", "int", "(", "h", "*", "s", ")", ")", ",", "\n", "Image", ".", "BICUBIC", ")", ")", "[", "0", "]", "\n", "for", "s", "in", "self", ".", "scales", "]", "\n", "out_data", ".", "append", "(", "self", ".", "image_list", "[", "index", "]", ")", "\n", "out_data", ".", "extend", "(", "ms_images", ")", "\n", "return", "tuple", "(", "out_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegListMS.__len__": [[331, 333], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.SegListMS.read_lists": [[334, 342], ["os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "line.strip", "open", "line.strip", "len", "len", "open"], "methods", ["None"], ["", "def", "read_lists", "(", "self", ")", ":", "\n", "        ", "image_path", "=", "join", "(", "self", ".", "list_dir", ",", "self", ".", "phase", "+", "'_images.txt'", ")", "\n", "label_path", "=", "join", "(", "self", ".", "list_dir", ",", "self", ".", "phase", "+", "'_labels.txt'", ")", "\n", "assert", "exists", "(", "image_path", ")", "\n", "self", ".", "image_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "image_path", ",", "'r'", ")", "]", "\n", "if", "exists", "(", "label_path", ")", ":", "\n", "            ", "self", ".", "label_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "label_path", ",", "'r'", ")", "]", "\n", "assert", "len", "(", "self", ".", "image_list", ")", "==", "len", "(", "self", ".", "label_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.AverageMeter.__init__": [[391, 393], ["segment.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.AverageMeter.reset": [[394, 399], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.AverageMeter.update": [[400, 405], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.fill_up_weights": [[185, 195], ["math.ceil", "range", "range", "w.size", "range", "w.size", "w.size", "w.size", "math.fabs", "math.fabs"], "function", ["None"], ["", "", "", "def", "fill_up_weights", "(", "up", ")", ":", "\n", "    ", "w", "=", "up", ".", "weight", ".", "data", "\n", "f", "=", "math", ".", "ceil", "(", "w", ".", "size", "(", "2", ")", "/", "2", ")", "\n", "c", "=", "(", "2", "*", "f", "-", "1", "-", "f", "%", "2", ")", "/", "(", "2.", "*", "f", ")", "\n", "for", "i", "in", "range", "(", "w", ".", "size", "(", "2", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "w", ".", "size", "(", "3", ")", ")", ":", "\n", "            ", "w", "[", "0", ",", "0", ",", "i", ",", "j", "]", "=", "(", "1", "-", "math", ".", "fabs", "(", "i", "/", "f", "-", "c", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "j", "/", "f", "-", "c", ")", ")", "\n", "", "", "for", "c", "in", "range", "(", "1", ",", "w", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "w", "[", "c", ",", "0", ",", ":", ",", ":", "]", "=", "w", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.validate": [[344, 387], ["segment.AverageMeter", "segment.AverageMeter", "segment.AverageMeter", "model.eval", "time.time", "enumerate", "logger.info", "input.cuda.cuda", "target.float.cuda", "torch.autograd.Varible", "torch.autograd.Varible", "torch.autograd.Varible", "torch.autograd.Varible", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "criterion", "segment.AverageMeter.update", "segment.AverageMeter.update", "time.time", "type", "target.float.float", "model", "input.cuda.size", "segment.AverageMeter.update", "logger.info", "eval_score", "input.cuda.size", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "eval_score", "=", "None", ",", "print_freq", "=", "10", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "score", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "if", "type", "(", "criterion", ")", "in", "[", "torch", ".", "nn", ".", "modules", ".", "loss", ".", "L1Loss", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "loss", ".", "MSELoss", "]", ":", "\n", "            ", "target", "=", "target", ".", "float", "(", ")", "\n", "", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Varible", "(", "input", ",", "volatile", "=", "True", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ",", "volatile", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "[", "0", "]", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "# prec1, prec5 = accuracy(output.data, target, topk=(1, 5))", "\n", "losses", ".", "update", "(", "loss", ".", "data", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "if", "eval_score", "is", "not", "None", ":", "\n", "            ", "score", ".", "update", "(", "eval_score", "(", "output", ",", "target_var", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Score {score.val:.3f} ({score.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "score", "=", "score", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "' * Score {top1.avg:.3f}'", ".", "format", "(", "top1", "=", "score", ")", ")", "\n", "\n", "return", "score", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.accuracy": [[407, 418], ["output.max", "pred.view.view", "target.view.view", "pred.view.eq", "correct.view.view", "correct.view.float().sum().mul", "correct.view.float().sum", "correct.view.size", "correct.view.float"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "", "def", "accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "# batch_size = target.size(0) * target.size(1) * target.size(2)", "\n", "_", ",", "pred", "=", "output", ".", "max", "(", "1", ")", "\n", "pred", "=", "pred", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ")", "\n", "correct", "=", "correct", "[", "target", "!=", "255", "]", "\n", "correct", "=", "correct", ".", "view", "(", "-", "1", ")", "\n", "score", "=", "correct", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ".", "mul", "(", "100.0", "/", "correct", ".", "size", "(", "0", ")", ")", "\n", "return", "score", ".", "data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.train": [[420, 472], ["segment.AverageMeter", "segment.AverageMeter", "segment.AverageMeter", "segment.AverageMeter", "model.train", "time.time", "enumerate", "segment.AverageMeter.update", "input.cuda.cuda", "target.float.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "criterion", "segment.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "segment.AverageMeter.update", "time.time", "type", "target.float.float", "model", "input.cuda.size", "segment.AverageMeter.update", "logger.info", "time.time", "eval_score", "input.cuda.size", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.train", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "\n", "eval_score", "=", "None", ",", "print_freq", "=", "10", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "scores", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "type", "(", "criterion", ")", "in", "[", "torch", ".", "nn", ".", "modules", ".", "loss", ".", "L1Loss", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "loss", ".", "MSELoss", "]", ":", "\n", "            ", "target", "=", "target", ".", "float", "(", ")", "\n", "\n", "", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "[", "0", "]", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "# prec1, prec5 = accuracy(output.data, target, topk=(1, 5))", "\n", "losses", ".", "update", "(", "loss", ".", "data", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "if", "eval_score", "is", "not", "None", ":", "\n", "            ", "scores", ".", "update", "(", "eval_score", "(", "output", ",", "target_var", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Score {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.save_checkpoint": [[474, 478], ["torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.train_seg": [[480, 578], ["print", "args.__dict__.items", "segment.DRNSeg", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.NLLLoss2d", "nn.NLLLoss2d.cuda", "json.load", "torchvision.transforms.Normalize", "t.extend", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "print", "DRNSeg.load_state_dict", "open", "t.append", "t.append", "segment.SegList", "segment.SegList", "segment.DRNSeg.optim_parameters", "os.path.isfile", "segment.validate", "segment.adjust_learning_rate", "logger.info", "segment.train", "segment.validate", "max", "os.path.join", "segment.save_checkpoint", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "os.path.join", "torchvision.transforms.RandomRotate", "torchvision.transforms.RandomScale", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "print", "print", "os.path.join", "shutil.copyfile", "torch.nn.DataParallel().cuda.state_dict", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.DRNSeg.optim_parameters", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.validate", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.adjust_learning_rate", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.train", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.validate", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.save_checkpoint"], ["", "", "def", "train_seg", "(", "args", ")", ":", "\n", "    ", "batch_size", "=", "args", ".", "batch_size", "\n", "num_workers", "=", "args", ".", "workers", "\n", "crop_size", "=", "args", ".", "crop_size", "\n", "\n", "print", "(", "' '", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "':'", ",", "v", ")", "\n", "\n", "", "single_model", "=", "DRNSeg", "(", "args", ".", "arch", ",", "args", ".", "classes", ",", "None", ",", "\n", "pretrained", "=", "True", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "single_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "pretrained", ")", ")", "\n", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "single_model", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "nn", ".", "NLLLoss2d", "(", "ignore_index", "=", "255", ")", "\n", "\n", "criterion", ".", "cuda", "(", ")", "\n", "\n", "# Data loading code", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "info", "=", "json", ".", "load", "(", "open", "(", "join", "(", "data_dir", ",", "'info.json'", ")", ",", "'r'", ")", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "info", "[", "'mean'", "]", ",", "\n", "std", "=", "info", "[", "'std'", "]", ")", "\n", "t", "=", "[", "]", "\n", "if", "args", ".", "random_rotate", ">", "0", ":", "\n", "        ", "t", ".", "append", "(", "transforms", ".", "RandomRotate", "(", "args", ".", "random_rotate", ")", ")", "\n", "", "if", "args", ".", "random_scale", ">", "0", ":", "\n", "        ", "t", ".", "append", "(", "transforms", ".", "RandomScale", "(", "args", ".", "random_scale", ")", ")", "\n", "", "t", ".", "extend", "(", "[", "transforms", ".", "RandomCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "SegList", "(", "data_dir", ",", "'train'", ",", "transforms", ".", "Compose", "(", "t", ")", ",", "\n", "list_dir", "=", "args", ".", "list_dir", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "True", "\n", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "SegList", "(", "data_dir", ",", "'val'", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "list_dir", "=", "args", ".", "list_dir", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "True", "\n", ")", "\n", "\n", "# define loss function (criterion) and pptimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "single_model", ".", "optim_parameters", "(", ")", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "best_prec1", "=", "0", "\n", "start_epoch", "=", "0", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "eval_score", "=", "accuracy", ")", "\n", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "lr", "=", "adjust_learning_rate", "(", "args", ",", "optimizer", ",", "epoch", ")", "\n", "logger", ".", "info", "(", "'Epoch: [{0}]\\tlr {1:.06f}'", ".", "format", "(", "epoch", ",", "lr", ")", ")", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "\n", "eval_score", "=", "accuracy", ")", "\n", "\n", "# evaluate on validation set", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "eval_score", "=", "accuracy", ")", "\n", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'checkpoint_latest.pth.tar'", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "checkpoint_path", ")", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "save_iter", "==", "0", ":", "\n", "            ", "history_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'checkpoint_{:03d}.pth.tar'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "shutil", ".", "copyfile", "(", "checkpoint_path", ",", "history_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.adjust_learning_rate": [[580, 594], ["ValueError"], "function", ["None"], ["", "", "", "def", "adjust_learning_rate", "(", "args", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"\n    Sets the learning rate to the initial LR decayed by 10 every 30 epochs\n    \"\"\"", "\n", "if", "args", ".", "lr_mode", "==", "'step'", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "args", ".", "step", ")", ")", "\n", "", "elif", "args", ".", "lr_mode", "==", "'poly'", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "1", "-", "epoch", "/", "args", ".", "epochs", ")", "**", "0.9", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown lr mode {}'", ".", "format", "(", "args", ".", "lr_mode", ")", ")", "\n", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.fast_hist": [[596, 602], ["numpy.bincount().reshape", "numpy.bincount", "label[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "pred", ",", "label", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "label", ">=", "0", ")", "&", "(", "label", "<", "n", ")", "\n", "# print(pred.shape)", "\n", "# print(label.shape)", "\n", "return", "np", ".", "bincount", "(", "\n", "n", "*", "label", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "pred", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.per_class_iu": [[604, 606], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.save_output_images": [[608, 628], ["range", "len", "PIL.Image.fromarray", "filenames[].split", "os.path.join", "Image.fromarray.save", "predictions[].astype", "os.path.split", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "def", "save_output_images", "(", "predictions", ",", "filenames", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"\n    Saves a given (B x C x H x W) into an image file.\n    If given a mini-batch tensor, will save the tensor as a grid of images.\n    \"\"\"", "\n", "# pdb.set_trace()", "\n", "for", "ind", "in", "range", "(", "len", "(", "filenames", ")", ")", ":", "\n", "        ", "im", "=", "Image", ".", "fromarray", "(", "predictions", "[", "ind", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "output_dir", "=", "'./pred'", "\n", "# print(output_dir)", "\n", "n", "=", "filenames", "[", "ind", "]", ".", "split", "(", "'/'", ")", "\n", "name", "=", "n", "[", "-", "1", "]", "\n", "# print(name)", "\n", "\n", "fn", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "name", ")", "\n", "# print(fn)", "\n", "out_dir", "=", "split", "(", "fn", ")", "[", "0", "]", "\n", "if", "not", "exists", "(", "out_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "im", ".", "save", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.save_colorful_images": [[630, 646], ["range", "len", "PIL.Image.fromarray", "filenames[].split", "os.path.join", "Image.fromarray.save", "os.path.split", "os.path.exists", "os.makedirs", "predictions[].squeeze"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "", "def", "save_colorful_images", "(", "predictions", ",", "filenames", ",", "output_dir", ",", "palettes", ")", ":", "\n", "   ", "\"\"\"\n   Saves a given (B x C x H x W) into an image file.\n   If given a mini-batch tensor, will save the tensor as a grid of images.\n   \"\"\"", "\n", "for", "ind", "in", "range", "(", "len", "(", "filenames", ")", ")", ":", "\n", "       ", "im", "=", "Image", ".", "fromarray", "(", "palettes", "[", "predictions", "[", "ind", "]", ".", "squeeze", "(", ")", "]", ")", "\n", "output_dir", "=", "'./pred_color'", "\n", "# print(output_dir)", "\n", "n", "=", "filenames", "[", "ind", "]", ".", "split", "(", "'/'", ")", "\n", "name", "=", "n", "[", "-", "1", "]", "\n", "fn", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "name", ")", "\n", "out_dir", "=", "split", "(", "fn", ")", "[", "0", "]", "\n", "if", "not", "exists", "(", "out_dir", ")", ":", "\n", "           ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "im", ".", "save", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.test": [[648, 697], ["segment.StreamSegMetrics", "segment.StreamSegMetrics.reset", "model.eval", "segment.AverageMeter", "segment.AverageMeter", "time.time", "numpy.zeros", "enumerate", "segment.StreamSegMetrics.get_results", "logger.info", "segment.AverageMeter.update", "torch.autograd.Variable", "torch.max", "torch.max", "torch.max", "torch.max", "pred.cpu().data.numpy.cpu().data.numpy", "segment.AverageMeter.update", "label.numpy.numpy", "segment.fast_hist", "logger.info", "time.time", "logger.info", "segment.StreamSegMetrics.update", "segment.StreamSegMetrics.to_str", "logger.info", "round", "model", "pred.cpu().data.numpy.flatten", "label.numpy.flatten", "segment.per_class_iu", "numpy.nanmean", "time.time", "time.time", "len", "pred.cpu().data.numpy.cpu", "round", "numpy.nanmean", "segment.per_class_iu"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.AverageMeter.reset", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics.get_results", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.fast_hist", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.StreamSegMetrics.to_str", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.per_class_iu", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.per_class_iu"], ["", "", "def", "test", "(", "eval_data_loader", ",", "model", ",", "num_classes", ",", "\n", "output_dir", "=", "'./pred'", ",", "has_gt", "=", "True", ",", "save_vis", "=", "False", ")", ":", "\n", "# output_dir = './pred'", "\n", "# # print('11111')", "\n", "    ", "val_metrics", "=", "StreamSegMetrics", "(", "num_classes", ")", "\n", "val_metrics", ".", "reset", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "for", "iter", ",", "(", "image", ",", "label", ",", "name", ")", "in", "enumerate", "(", "eval_data_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "image_var", "=", "Variable", "(", "image", ",", "requires_grad", "=", "False", ",", "volatile", "=", "True", ")", "\n", "# print(name)", "\n", "final", "=", "model", "(", "image_var", ")", "[", "0", "]", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "final", ",", "1", ")", "\n", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "# print(np.unique(pred))", "\n", "# print(pred.shape)", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# if save_vis:", "\n", "# print(output_dir)", "\n", "# save_output_images(pred, name, output_dir)", "\n", "# save_colorful_images(", "\n", "#     pred, name, output_dir + '_color',", "\n", "#     TRIPLET_PALETTE if num_classes == 3 else CITYSCAPE_PALETTE)", "\n", "# if has_gt:", "\n", "label", "=", "label", ".", "numpy", "(", ")", "\n", "\n", "# print(label.shape)", "\n", "hist", "+=", "fast_hist", "(", "pred", ".", "flatten", "(", ")", ",", "label", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "# result = umetrics.calculate(label, pred, strict=True, iou_threshold=0.5)", "\n", "# print(result.results)", "\n", "logger", ".", "info", "(", "'===> mAP {mAP:.3f}'", ".", "format", "(", "\n", "mAP", "=", "round", "(", "np", ".", "nanmean", "(", "per_class_iu", "(", "hist", ")", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "'Eval: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", ".", "format", "(", "iter", ",", "len", "(", "eval_data_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ")", ")", "\n", "val_metrics", ".", "update", "(", "label", ",", "pred", ")", "\n", "", "score", "=", "val_metrics", ".", "get_results", "(", ")", "\n", "logger", ".", "info", "(", "val_metrics", ".", "to_str", "(", "score", ")", ")", "\n", "if", "has_gt", ":", "#val", "\n", "        ", "ious", "=", "per_class_iu", "(", "hist", ")", "*", "100", "\n", "logger", ".", "info", "(", "' '", ".", "join", "(", "'{:.03f}'", ".", "format", "(", "i", ")", "for", "i", "in", "ious", ")", ")", "\n", "return", "round", "(", "np", ".", "nanmean", "(", "ious", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.resize_4d_tensor": [[699, 733], ["tensor.cpu().numpy", "numpy.empty", "tensor.size", "tensor.size", "numpy.array", "range", "threading.Thread", "w.start", "w.join", "tensor.cpu", "tensor.size", "tensor.size", "PIL.Image.fromarray().resize", "tensor.size", "numpy.array", "range", "PIL.Image.fromarray().resize", "tensor.size", "PIL.Image.fromarray", "PIL.Image.fromarray"], "function", ["None"], ["", "", "def", "resize_4d_tensor", "(", "tensor", ",", "width", ",", "height", ")", ":", "\n", "    ", "tensor_cpu", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "tensor", ".", "size", "(", "2", ")", "==", "height", "and", "tensor", ".", "size", "(", "3", ")", "==", "width", ":", "\n", "        ", "return", "tensor_cpu", "\n", "", "out_size", "=", "(", "tensor", ".", "size", "(", "0", ")", ",", "tensor", ".", "size", "(", "1", ")", ",", "height", ",", "width", ")", "\n", "out", "=", "np", ".", "empty", "(", "out_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "resize_one", "(", "i", ",", "j", ")", ":", "\n", "        ", "out", "[", "i", ",", "j", "]", "=", "np", ".", "array", "(", "\n", "Image", ".", "fromarray", "(", "tensor_cpu", "[", "i", ",", "j", "]", ")", ".", "resize", "(", "\n", "(", "width", ",", "height", ")", ",", "Image", ".", "BILINEAR", ")", ")", "\n", "\n", "", "def", "resize_channel", "(", "j", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "out", "[", "i", ",", "j", "]", "=", "np", ".", "array", "(", "\n", "Image", ".", "fromarray", "(", "tensor_cpu", "[", "i", ",", "j", "]", ")", ".", "resize", "(", "\n", "(", "width", ",", "height", ")", ",", "Image", ".", "BILINEAR", ")", ")", "\n", "\n", "# workers = [threading.Thread(target=resize_one, args=(i, j))", "\n", "#            for i in range(tensor.size(0)) for j in range(tensor.size(1))]", "\n", "\n", "", "", "workers", "=", "[", "threading", ".", "Thread", "(", "target", "=", "resize_channel", ",", "args", "=", "(", "j", ",", ")", ")", "\n", "for", "j", "in", "range", "(", "tensor", ".", "size", "(", "1", ")", ")", "]", "\n", "for", "w", "in", "workers", ":", "\n", "        ", "w", ".", "start", "(", ")", "\n", "", "for", "w", "in", "workers", ":", "\n", "        ", "w", ".", "join", "(", ")", "\n", "# for i in range(tensor.size(0)):", "\n", "#     for j in range(tensor.size(1)):", "\n", "#         out[i, j] = np.array(", "\n", "#             Image.fromarray(tensor_cpu[i, j]).resize(", "\n", "#                 (w, h), Image.BILINEAR))", "\n", "# out = tensor.new().resize_(*out.shape).copy_(torch.from_numpy(out))", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.test_ms": [[735, 783], ["model.eval", "segment.AverageMeter", "segment.AverageMeter", "time.time", "numpy.zeros", "len", "enumerate", "segment.AverageMeter.update", "images.extend", "sum", "sum.argmax", "segment.AverageMeter.update", "time.time", "logger.info", "logger.info", "round", "input_data[].size", "torch.autograd.Variable", "outputs.append", "segment.save_output_images", "segment.save_colorful_images", "label.numpy.numpy", "segment.fast_hist", "logger.info", "segment.per_class_iu", "numpy.nanmean", "time.time", "model", "segment.resize_4d_tensor", "time.time", "final.argmax.flatten", "label.numpy.flatten", "len", "round", "numpy.nanmean", "segment.per_class_iu"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.save_output_images", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.save_colorful_images", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.fast_hist", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.per_class_iu", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.resize_4d_tensor", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.per_class_iu"], ["", "def", "test_ms", "(", "eval_data_loader", ",", "model", ",", "num_classes", ",", "scales", ",", "\n", "output_dir", "=", "'pred'", ",", "has_gt", "=", "True", ",", "save_vis", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "num_scales", "=", "len", "(", "scales", ")", "\n", "for", "iter", ",", "input_data", "in", "enumerate", "(", "eval_data_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "has_gt", ":", "\n", "            ", "name", "=", "input_data", "[", "2", "]", "\n", "label", "=", "input_data", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "name", "=", "input_data", "[", "1", "]", "\n", "", "h", ",", "w", "=", "input_data", "[", "0", "]", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "images", "=", "[", "input_data", "[", "0", "]", "]", "\n", "images", ".", "extend", "(", "input_data", "[", "-", "num_scales", ":", "]", ")", "\n", "# pdb.set_trace()", "\n", "outputs", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "image_var", "=", "Variable", "(", "image", ",", "requires_grad", "=", "False", ",", "volatile", "=", "True", ")", "\n", "final", "=", "model", "(", "image_var", ")", "[", "0", "]", "\n", "outputs", ".", "append", "(", "final", ".", "data", ")", "\n", "", "final", "=", "sum", "(", "[", "resize_4d_tensor", "(", "out", ",", "w", ",", "h", ")", "for", "out", "in", "outputs", "]", ")", "\n", "# _, pred = torch.max(torch.from_numpy(final), 1)", "\n", "# pred = pred.cpu().numpy()", "\n", "pred", "=", "final", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "save_vis", ":", "\n", "            ", "save_output_images", "(", "pred", ",", "name", ",", "output_dir", ")", "\n", "save_colorful_images", "(", "pred", ",", "name", ",", "output_dir", "+", "'_color'", ",", "\n", "CITYSCAPE_PALETTE", ")", "\n", "", "if", "has_gt", ":", "\n", "            ", "label", "=", "label", ".", "numpy", "(", ")", "\n", "hist", "+=", "fast_hist", "(", "pred", ".", "flatten", "(", ")", ",", "label", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "logger", ".", "info", "(", "'===> mAP {mAP:.3f}'", ".", "format", "(", "\n", "mAP", "=", "round", "(", "np", ".", "nanmean", "(", "per_class_iu", "(", "hist", ")", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "'Eval: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", ".", "format", "(", "iter", ",", "len", "(", "eval_data_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ")", ")", "\n", "", "if", "has_gt", ":", "#val", "\n", "        ", "ious", "=", "per_class_iu", "(", "hist", ")", "*", "100", "\n", "logger", ".", "info", "(", "' '", ".", "join", "(", "'{:.03f}'", ".", "format", "(", "i", ")", "for", "i", "in", "ious", ")", ")", "\n", "return", "round", "(", "np", ".", "nanmean", "(", "ious", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.test_seg": [[785, 863], ["args.__dict__.items", "segment.DRNSeg", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "json.load", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "segment.test", "logger.info", "print", "DRNSeg.load_state_dict", "open", "segment.SegListMS", "segment.SegList", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "os.path.join", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.test"], ["", "", "def", "test_seg", "(", "args", ")", ":", "\n", "    ", "batch_size", "=", "args", ".", "batch_size", "\n", "num_workers", "=", "args", ".", "workers", "\n", "phase", "=", "args", ".", "phase", "\n", "\n", "for", "k", ",", "v", "in", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "':'", ",", "v", ")", "\n", "\n", "", "single_model", "=", "DRNSeg", "(", "args", ".", "arch", ",", "args", ".", "classes", ",", "pretrained_model", "=", "None", ",", "\n", "pretrained", "=", "True", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "single_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "pretrained", ")", ")", "\n", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "single_model", ")", ".", "cuda", "(", ")", "\n", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "info", "=", "json", ".", "load", "(", "open", "(", "join", "(", "data_dir", ",", "'info.json'", ")", ",", "'r'", ")", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "info", "[", "'mean'", "]", ",", "std", "=", "info", "[", "'std'", "]", ")", "\n", "scales", "=", "[", "0.5", ",", "0.75", ",", "1.25", ",", "1.5", ",", "1.75", "]", "\n", "if", "args", ".", "ms", ":", "\n", "        ", "dataset", "=", "SegListMS", "(", "data_dir", ",", "phase", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "scales", ",", "list_dir", "=", "args", ".", "list_dir", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "SegList", "(", "data_dir", ",", "phase", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "list_dir", "=", "args", ".", "list_dir", ",", "out_name", "=", "True", ")", "\n", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "False", "\n", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# optionally resume from a checkpoint", "\n", "start_epoch", "=", "0", "\n", "# if args.resume:", "\n", "#     if os.path.isfile(args.resume):", "\n", "#         logger.info(\"=> loading checkpoint '{}'\".format(args.resume))", "\n", "#         checkpoint = torch.load(args.resume)", "\n", "#         # start_epoch = checkpoint['epoch']", "\n", "#         # best_prec1 = checkpoint['best_prec1']", "\n", "#         model_dict = model.state_dict()", "\n", "#         kep = list(checkpoint.keys())", "\n", "#         for key in kep:", "\n", "#             # print(key)", "\n", "#             if 'base' in key:", "\n", "#                 key_n = 'module.'+key", "\n", "#             if 'seg' in key:", "\n", "#                 key_n = 'module.' + key", "\n", "#             if 'up' in key:", "\n", "#                 key_n = 'module.' + key", "\n", "#             # print(key_n)", "\n", "#             checkpoint[key_n] = checkpoint.pop(key)", "\n", "#         model.load_state_dict(checkpoint)", "\n", "#", "\n", "#         # logger.info(\"=> loaded checkpoint '{}' (epoch {})\"", "\n", "#         #       .format(args.resume, checkpoint['epoch']))", "\n", "#     else:", "\n", "#         logger.info(\"=> no checkpoint found at '{}'\".format(args.resume))", "\n", "\n", "out_dir", "=", "'{}_{:03d}_{}'", ".", "format", "(", "args", ".", "arch", ",", "start_epoch", ",", "phase", ")", "\n", "if", "len", "(", "args", ".", "test_suffix", ")", ">", "0", ":", "\n", "        ", "out_dir", "+=", "'_'", "+", "args", ".", "test_suffix", "\n", "", "if", "args", ".", "ms", ":", "\n", "        ", "out_dir", "+=", "'_ms'", "\n", "\n", "# if args.ms:", "\n", "#     mAP = test_ms(test_loader, model, args.classes, save_vis=True,", "\n", "#                   has_gt=phase != 'test' or args.with_gt,", "\n", "#                   output_dir=out_dir,", "\n", "#                   scales=scales)", "\n", "# else:", "\n", "", "mAP", "=", "test", "(", "test_loader", ",", "model", ",", "args", ".", "classes", ",", "save_vis", "=", "True", ",", "\n", "has_gt", "=", "phase", "!=", "'test'", "or", "args", ".", "with_gt", ",", "output_dir", "=", "out_dir", ")", "\n", "logger", ".", "info", "(", "'mAP: %f'", ",", "mAP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.parse_args": [[865, 922], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'cmd'", ",", "choices", "=", "[", "'train'", ",", "'test'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--data-dir'", ",", "default", "=", "None", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--list-dir'", ",", "default", "=", "None", ",", "\n", "help", "=", "'List dir to look for train_images.txt etc. '", "\n", "'It is the same with --data-dir if not set.'", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--classes'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--crop-size'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--step'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--arch'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-mode'", ",", "type", "=", "str", ",", "default", "=", "'step'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'W'", ",", "help", "=", "'weight decay (default: 1e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--evaluate'", ",", "dest", "=", "'evaluate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate model on validation set'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "dest", "=", "'pretrained'", ",", "\n", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'use pre-trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_path'", ",", "default", "=", "'./'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'output path for training checkpoints'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_iter'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of training iterations between'", "\n", "'checkpoint history saves'", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--load-release'", ",", "dest", "=", "'load_rel'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "default", "=", "'val'", ")", "\n", "parser", ".", "add_argument", "(", "'--random-scale'", ",", "default", "=", "0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--random-rotate'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--bn-sync'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--ms'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Turn on multi-scale testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--with-gt'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "classes", ">", "0", "\n", "\n", "print", "(", "' '", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "bn_sync", ":", "\n", "        ", "drn", ".", "BatchNorm", "=", "batchnormsync", ".", "BatchNormSync", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.main": [[924, 930], ["segment.parse_args", "segment.train_seg", "segment.test_seg"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.parse_args", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.train_seg", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.segment.test_seg"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "if", "args", ".", "cmd", "==", "'train'", ":", "\n", "        ", "train_seg", "(", "args", ")", "\n", "", "elif", "args", ".", "cmd", "==", "'test'", ":", "\n", "        ", "test_seg", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.BasicBlock.__init__": [[35, 48], ["torch.Module.__init__", "drn.conv3x3", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.conv3x3", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.conv3x3", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "\n", "padding", "=", "dilation", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ",", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.BasicBlock.forward": [[49, 66], ["drn.BasicBlock.conv1", "drn.BasicBlock.bn1", "drn.BasicBlock.relu", "drn.BasicBlock.conv2", "drn.BasicBlock.bn2", "drn.BasicBlock.relu", "drn.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "out", "+=", "residual", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.Bottleneck.__init__": [[71, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.Bottleneck.forward": [[86, 107], ["drn.Bottleneck.conv1", "drn.Bottleneck.bn1", "drn.Bottleneck.relu", "drn.Bottleneck.conv2", "drn.Bottleneck.bn2", "drn.Bottleneck.relu", "drn.Bottleneck.conv3", "drn.Bottleneck.bn3", "drn.Bottleneck.relu", "drn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN.__init__": [[111, 176], ["torch.Module.__init__", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN.modules", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "torch.Sequential", "torch.Sequential", "drn.DRN._make_conv_layers", "drn.DRN._make_conv_layers", "drn.DRN._make_layer", "drn.DRN._make_layer", "m.weight.data.normal_", "isinstance", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.DRN._make_conv_layers", "drn.DRN._make_conv_layers", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN._make_conv_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "\n", "channels", "=", "(", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", ",", "512", ",", "512", ")", ",", "\n", "out_map", "=", "False", ",", "out_middle", "=", "False", ",", "pool_size", "=", "28", ",", "arch", "=", "'D'", ")", ":", "\n", "        ", "super", "(", "DRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "channels", "[", "0", "]", "\n", "self", ".", "out_map", "=", "out_map", "\n", "self", ".", "out_dim", "=", "channels", "[", "-", "1", "]", "\n", "self", ".", "out_middle", "=", "out_middle", "\n", "self", ".", "arch", "=", "arch", "\n", "\n", "if", "arch", "==", "'C'", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "channels", "[", "0", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "BasicBlock", ",", "channels", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "BasicBlock", ",", "channels", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "", "elif", "arch", "==", "'D'", ":", "\n", "            ", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_conv_layers", "(", "\n", "channels", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_conv_layers", "(", "\n", "channels", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "\n", "", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "4", "]", ",", "layers", "[", "4", "]", ",", "\n", "dilation", "=", "2", ",", "new_level", "=", "False", ")", "\n", "self", ".", "layer6", "=", "None", "if", "layers", "[", "5", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "5", "]", ",", "layers", "[", "5", "]", ",", "dilation", "=", "4", ",", "\n", "new_level", "=", "False", ")", "\n", "\n", "if", "arch", "==", "'C'", ":", "\n", "            ", "self", ".", "layer7", "=", "None", "if", "layers", "[", "6", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "BasicBlock", ",", "channels", "[", "6", "]", ",", "layers", "[", "6", "]", ",", "dilation", "=", "2", ",", "\n", "new_level", "=", "False", ",", "residual", "=", "False", ")", "\n", "self", ".", "layer8", "=", "None", "if", "layers", "[", "7", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "BasicBlock", ",", "channels", "[", "7", "]", ",", "layers", "[", "7", "]", ",", "dilation", "=", "1", ",", "\n", "new_level", "=", "False", ",", "residual", "=", "False", ")", "\n", "", "elif", "arch", "==", "'D'", ":", "\n", "            ", "self", ".", "layer7", "=", "None", "if", "layers", "[", "6", "]", "==", "0", "else", "self", ".", "_make_conv_layers", "(", "channels", "[", "6", "]", ",", "layers", "[", "6", "]", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer8", "=", "None", "if", "layers", "[", "7", "]", "==", "0", "else", "self", ".", "_make_conv_layers", "(", "channels", "[", "7", "]", ",", "layers", "[", "7", "]", ",", "dilation", "=", "1", ")", "\n", "\n", "", "if", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "pool_size", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "self", ".", "out_dim", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN._make_layer": [[177, 200], ["list", "list.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "list.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "\n", "new_level", "=", "True", ",", "residual", "=", "True", ")", ":", "\n", "        ", "assert", "dilation", "==", "1", "or", "dilation", "%", "2", "==", "0", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "list", "(", ")", "\n", "layers", ".", "append", "(", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", "if", "dilation", "==", "1", "else", "(", "\n", "dilation", "//", "2", "if", "new_level", "else", "dilation", ",", "dilation", ")", ",", "\n", "residual", "=", "residual", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "residual", "=", "residual", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN._make_conv_layers": [[201, 212], ["range", "torch.Sequential", "torch.Sequential", "modules.extend", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_conv_layers", "(", "self", ",", "channels", ",", "convs", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "convs", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", ",", "\n", "BatchNorm", "(", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN.forward": [[213, 260], ["list", "drn.DRN.layer1", "list.append", "drn.DRN.layer2", "list.append", "drn.DRN.layer3", "list.append", "drn.DRN.layer4", "list.append", "drn.DRN.layer5", "list.append", "drn.DRN.conv1", "drn.DRN.bn1", "drn.DRN.relu", "drn.DRN.layer6", "list.append", "drn.DRN.layer7", "list.append", "drn.DRN.layer8", "list.append", "drn.DRN.fc", "drn.DRN.avgpool", "drn.DRN.fc", "drn.DRN.view", "drn.DRN.layer0", "drn.DRN.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "list", "(", ")", "\n", "\n", "if", "self", ".", "arch", "==", "'C'", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "elif", "self", ".", "arch", "==", "'D'", ":", "\n", "            ", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "if", "self", ".", "layer6", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer6", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer7", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer7", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer8", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer8", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "out_map", ":", "\n", "            ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "out_middle", ":", "\n", "            ", "return", "x", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A.__init__": [[264, 289], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "drn.DRN_A.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "DRN_A", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_dim", "=", "512", "*", "block", ".", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "28", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A._make_layer": [[297, 314], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.DRN_A.forward": [[315, 331], ["drn.DRN_A.conv1", "drn.DRN_A.bn1", "drn.DRN_A.relu", "drn.DRN_A.maxpool", "drn.DRN_A.layer1", "drn.DRN_A.layer2", "drn.DRN_A.layer3", "drn.DRN_A.layer4", "drn.DRN_A.avgpool", "drn.DRN_A.view", "drn.DRN_A.fc", "drn.DRN_A.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.conv3x3": [[27, 30], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_a_50": [[333, 338], ["drn.DRN_A", "DRN_A.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "drn_a_50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN_A", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_c_26": [[340, 345], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_c_26", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-26'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_c_42": [[347, 352], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_c_42", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-42'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_c_58": [[354, 359], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_c_58", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-58'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_d_22": [[361, 366], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_d_22", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-22'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_d_24": [[368, 373], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_d_24", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-24'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_d_38": [[375, 380], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_d_38", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-38'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_d_40": [[382, 387], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_d_40", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-40'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_d_54": [[389, 394], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_d_54", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-54'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_d_56": [[396, 401], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_d_56", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-56'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_d_105": [[403, 408], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_d_105", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "23", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-105'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.drn.drn_d_107": [[410, 415], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "drn_d_107", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "23", ",", "3", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-107'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.RandomCrop.__init__": [[10, 15], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.RandomCrop.__call__": [[16, 46], ["random.randint", "random.randint", "results.extend", "data_transforms.pad_image", "data_transforms.pad_image", "pad_image.crop", "results.append", "pad_image.crop"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_image", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_image"], ["", "", "def", "__call__", "(", "self", ",", "image", ",", "label", ",", "*", "args", ")", ":", "\n", "        ", "assert", "label", "is", "None", "or", "image", ".", "size", "==", "label", ".", "size", ",", "\"image and label doesn't have the same size {} / {}\"", ".", "format", "(", "\n", "image", ".", "size", ",", "label", ".", "size", ")", "\n", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "tw", ",", "th", "=", "self", ".", "size", "\n", "top", "=", "bottom", "=", "left", "=", "right", "=", "0", "\n", "if", "w", "<", "tw", ":", "\n", "            ", "left", "=", "(", "tw", "-", "w", ")", "//", "2", "\n", "right", "=", "tw", "-", "w", "-", "left", "\n", "", "if", "h", "<", "th", ":", "\n", "            ", "top", "=", "(", "th", "-", "h", ")", "//", "2", "\n", "bottom", "=", "th", "-", "h", "-", "top", "\n", "", "if", "left", ">", "0", "or", "right", ">", "0", "or", "top", ">", "0", "or", "bottom", ">", "0", ":", "\n", "            ", "label", "=", "pad_image", "(", "\n", "'constant'", ",", "label", ",", "top", ",", "bottom", ",", "left", ",", "right", ",", "value", "=", "255", ")", "\n", "image", "=", "pad_image", "(", "\n", "'reflection'", ",", "image", ",", "top", ",", "bottom", ",", "left", ",", "right", ")", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "(", "image", ",", "label", ",", "*", "args", ")", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "results", "=", "[", "image", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "]", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "results", ".", "append", "(", "label", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ")", "\n", "", "results", ".", "extend", "(", "args", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.RandomScale.__init__": [[49, 53], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", ")", ":", "\n", "        ", "if", "isinstance", "(", "scale", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "scale", "=", "[", "1", "/", "scale", ",", "scale", "]", "\n", "", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.RandomScale.__call__": [[54, 67], ["random.uniform", "int", "int", "image.resize", "label.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "ratio", "=", "random", ".", "uniform", "(", "self", ".", "scale", "[", "0", "]", ",", "self", ".", "scale", "[", "1", "]", ")", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "tw", "=", "int", "(", "ratio", "*", "w", ")", "\n", "th", "=", "int", "(", "ratio", "*", "h", ")", "\n", "if", "ratio", "==", "1", ":", "\n", "            ", "return", "image", ",", "label", "\n", "", "elif", "ratio", "<", "1", ":", "\n", "            ", "interpolation", "=", "Image", ".", "ANTIALIAS", "\n", "", "else", ":", "\n", "            ", "interpolation", "=", "Image", ".", "CUBIC", "\n", "", "return", "image", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "interpolation", ")", ",", "label", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.RandomRotate.__init__": [[75, 77], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "angle", ")", ":", "\n", "        ", "self", ".", "angle", "=", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.RandomRotate.__call__": [[78, 94], ["max", "data_transforms.pad_image", "image.crop.crop.rotate", "image.crop.crop.crop", "random.randint", "data_transforms.pad_image", "label.crop.crop.rotate", "label.crop.crop.crop"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_image", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_image"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", "=", "None", ",", "*", "args", ")", ":", "\n", "        ", "assert", "label", "is", "None", "or", "image", ".", "size", "==", "label", ".", "size", "\n", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "p", "=", "max", "(", "(", "h", ",", "w", ")", ")", "\n", "angle", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "angle", "*", "2", ")", "-", "self", ".", "angle", "\n", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "pad_image", "(", "'constant'", ",", "label", ",", "h", ",", "h", ",", "w", ",", "w", ",", "value", "=", "255", ")", "\n", "label", "=", "label", ".", "rotate", "(", "angle", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "label", "=", "label", ".", "crop", "(", "(", "w", ",", "h", ",", "w", "+", "w", ",", "h", "+", "h", ")", ")", "\n", "\n", "", "image", "=", "pad_image", "(", "'reflection'", ",", "image", ",", "h", ",", "h", ",", "w", ",", "w", ")", "\n", "image", "=", "image", ".", "rotate", "(", "angle", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "image", "=", "image", ".", "crop", "(", "(", "w", ",", "h", ",", "w", "+", "w", ",", "h", "+", "h", ")", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.RandomHorizontalFlip.__call__": [[100, 107], ["random.random", "image.transpose", "label.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "results", "=", "[", "image", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "label", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "]", "\n", "", "else", ":", "\n", "            ", "results", "=", "[", "image", ",", "label", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.Normalize.__init__": [[115, 118], ["torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "torch", ".", "FloatTensor", "(", "mean", ")", "\n", "self", ".", "std", "=", "torch", ".", "FloatTensor", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.Normalize.__call__": [[119, 126], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", "=", "None", ")", ":", "\n", "        ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "image", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "if", "label", "is", "None", ":", "\n", "            ", "return", "image", ",", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.Pad.__init__": [[185, 191], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "padding", ",", "fill", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "padding", ",", "numbers", ".", "Number", ")", "\n", "assert", "isinstance", "(", "fill", ",", "numbers", ".", "Number", ")", "or", "isinstance", "(", "fill", ",", "str", ")", "or", "isinstance", "(", "fill", ",", "tuple", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "fill", "=", "fill", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.Pad.__call__": [[192, 208], ["data_transforms.pad_image", "data_transforms.pad_image", "data_transforms.pad_image"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_image", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_image", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_image"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", "=", "None", ",", "*", "args", ")", ":", "\n", "        ", "if", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "pad_image", "(", "\n", "'constant'", ",", "label", ",", "\n", "self", ".", "padding", ",", "self", ".", "padding", ",", "self", ".", "padding", ",", "self", ".", "padding", ",", "\n", "value", "=", "255", ")", "\n", "", "if", "self", ".", "fill", "==", "-", "1", ":", "\n", "            ", "image", "=", "pad_image", "(", "\n", "'reflection'", ",", "image", ",", "\n", "self", ".", "padding", ",", "self", ".", "padding", ",", "self", ".", "padding", ",", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "pad_image", "(", "\n", "'constant'", ",", "image", ",", "\n", "self", ".", "padding", ",", "self", ".", "padding", ",", "self", ".", "padding", ",", "self", ".", "padding", ",", "\n", "value", "=", "self", ".", "fill", ")", "\n", "", "return", "(", "image", ",", "label", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.PadImage.__init__": [[211, 217], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "padding", ",", "fill", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "padding", ",", "numbers", ".", "Number", ")", "\n", "assert", "isinstance", "(", "fill", ",", "numbers", ".", "Number", ")", "or", "isinstance", "(", "fill", ",", "str", ")", "or", "isinstance", "(", "fill", ",", "tuple", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "fill", "=", "fill", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.PadImage.__call__": [[218, 226], ["data_transforms.pad_image", "PIL.ImageOps.expand"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_image"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", "=", "None", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "fill", "==", "-", "1", ":", "\n", "            ", "image", "=", "pad_image", "(", "\n", "'reflection'", ",", "image", ",", "\n", "self", ".", "padding", ",", "self", ".", "padding", ",", "self", ".", "padding", ",", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "ImageOps", ".", "expand", "(", "image", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "self", ".", "fill", ")", "\n", "", "return", "(", "image", ",", "label", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.ToTensor.__call__": [[233, 254], ["isinstance", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "torch.from_numpy", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "torch.ByteStorage.from_buffer", "len", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.LongTensor", "pic.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "numpy.array", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "pic", ",", "label", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ")", "\n", "", "else", ":", "\n", "# handle PIL Image", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "                ", "nchannel", "=", "3", "\n", "", "else", ":", "\n", "                ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "img", "=", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "return", "img", ",", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.Compose.__init__": [[260, 262], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.Compose.__call__": [[263, 267], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "args", "=", "t", "(", "*", "args", ")", "\n", "", "return", "args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_reflection": [[128, 156], ["list", "numpy.empty", "data_transforms.pad_reflection"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_reflection"], ["", "", "", "def", "pad_reflection", "(", "image", ",", "top", ",", "bottom", ",", "left", ",", "right", ")", ":", "\n", "    ", "if", "top", "==", "0", "and", "bottom", "==", "0", "and", "left", "==", "0", "and", "right", "==", "0", ":", "\n", "        ", "return", "image", "\n", "", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "next_top", "=", "next_bottom", "=", "next_left", "=", "next_right", "=", "0", "\n", "if", "top", ">", "h", "-", "1", ":", "\n", "        ", "next_top", "=", "top", "-", "h", "+", "1", "\n", "top", "=", "h", "-", "1", "\n", "", "if", "bottom", ">", "h", "-", "1", ":", "\n", "        ", "next_bottom", "=", "bottom", "-", "h", "+", "1", "\n", "bottom", "=", "h", "-", "1", "\n", "", "if", "left", ">", "w", "-", "1", ":", "\n", "        ", "next_left", "=", "left", "-", "w", "+", "1", "\n", "left", "=", "w", "-", "1", "\n", "", "if", "right", ">", "w", "-", "1", ":", "\n", "        ", "next_right", "=", "right", "-", "w", "+", "1", "\n", "right", "=", "w", "-", "1", "\n", "", "new_shape", "=", "list", "(", "image", ".", "shape", ")", "\n", "new_shape", "[", "0", "]", "+=", "top", "+", "bottom", "\n", "new_shape", "[", "1", "]", "+=", "left", "+", "right", "\n", "new_image", "=", "np", ".", "empty", "(", "new_shape", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "new_image", "[", "top", ":", "top", "+", "h", ",", "left", ":", "left", "+", "w", "]", "=", "image", "\n", "new_image", "[", ":", "top", ",", "left", ":", "left", "+", "w", "]", "=", "image", "[", "top", ":", "0", ":", "-", "1", ",", ":", "]", "\n", "new_image", "[", "top", "+", "h", ":", ",", "left", ":", "left", "+", "w", "]", "=", "image", "[", "-", "1", ":", "-", "bottom", "-", "1", ":", "-", "1", ",", ":", "]", "\n", "new_image", "[", ":", ",", ":", "left", "]", "=", "new_image", "[", ":", ",", "left", "*", "2", ":", "left", ":", "-", "1", "]", "\n", "new_image", "[", ":", ",", "left", "+", "w", ":", "]", "=", "new_image", "[", ":", ",", "-", "right", "-", "1", ":", "-", "right", "*", "2", "-", "1", ":", "-", "1", "]", "\n", "return", "pad_reflection", "(", "new_image", ",", "next_top", ",", "next_bottom", ",", "\n", "next_left", ",", "next_right", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_constant": [[158, 169], ["list", "numpy.empty", "np.empty.fill"], "function", ["None"], ["", "def", "pad_constant", "(", "image", ",", "top", ",", "bottom", ",", "left", ",", "right", ",", "value", ")", ":", "\n", "    ", "if", "top", "==", "0", "and", "bottom", "==", "0", "and", "left", "==", "0", "and", "right", "==", "0", ":", "\n", "        ", "return", "image", "\n", "", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "new_shape", "=", "list", "(", "image", ".", "shape", ")", "\n", "new_shape", "[", "0", "]", "+=", "top", "+", "bottom", "\n", "new_shape", "[", "1", "]", "+=", "left", "+", "right", "\n", "new_image", "=", "np", ".", "empty", "(", "new_shape", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "new_image", ".", "fill", "(", "value", ")", "\n", "new_image", "[", "top", ":", "top", "+", "h", ",", "left", ":", "left", "+", "w", "]", "=", "image", "\n", "return", "new_image", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_image": [[171, 180], ["PIL.Image.fromarray", "data_transforms.pad_reflection", "PIL.Image.fromarray", "ValueError", "numpy.asarray", "data_transforms.pad_constant", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_reflection", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.drn.data_transforms.pad_constant"], ["", "def", "pad_image", "(", "mode", ",", "image", ",", "top", ",", "bottom", ",", "left", ",", "right", ",", "value", "=", "0", ")", ":", "\n", "    ", "if", "mode", "==", "'reflection'", ":", "\n", "        ", "return", "Image", ".", "fromarray", "(", "\n", "pad_reflection", "(", "np", ".", "asarray", "(", "image", ")", ",", "top", ",", "bottom", ",", "left", ",", "right", ")", ")", "\n", "", "elif", "mode", "==", "'constant'", ":", "\n", "        ", "return", "Image", ".", "fromarray", "(", "\n", "pad_constant", "(", "np", ".", "asarray", "(", "image", ")", ",", "top", ",", "bottom", ",", "left", ",", "right", ",", "value", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown mode {}'", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.functions.batchnormp.BatchNormPFunction.__init__": [[18, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "running_mean", ",", "running_var", ",", "training", ",", "\n", "cum_queue", ",", "broadcast_queue", ",", "device_ids", ",", "sync", ",", "\n", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "running_mean", "=", "running_mean", "\n", "self", ".", "running_var", "=", "running_var", "\n", "self", ".", "mean", "=", "None", "\n", "self", ".", "var", "=", "None", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "cum_queue", "=", "cum_queue", "\n", "self", ".", "broadcast_queue", "=", "broadcast_queue", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "self", ".", "sync", "=", "sync", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.functions.batchnormp.BatchNormPFunction.forward": [[34, 88], ["input.new", "batchnormp.BatchNormPFunction.save_for_backward", "int", "input.size", "input.new().resize_", "input.new().resize_", "dense.batch_norm.BatchNormalizationP_mean_cuda", "dense.batch_norm.BatchNormalizationP_var_cuda", "dense.batch_norm.BatchNormalizationP_var_cuda", "input_t.std", "dense.batch_norm.BatchNormalizationP_forward", "dense.batch_norm.BatchNormalizationP_forward_cuda", "input.size", "input.size", "input.new().resize_.copy_", "input.new().resize_.copy_", "input.new", "input.new", "len", "torch.from_numpy", "len", "torch.from_numpy", "batchnormp.BatchNormPFunction.cum_mean", "batchnormp.BatchNormPFunction.cum_mean", "input.get_device", "input.new().resize_.cpu().numpy", "input.get_device", "input.new().resize_.cpu().numpy", "input.new().resize_.cpu", "input.new().resize_.cpu"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.std", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.functions.batchnormp.BatchNormPFunction.cum_mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.functions.batchnormp.BatchNormPFunction.cum_mean"], ["", "def", "forward", "(", "self", ",", "input", ",", "weight", ",", "bias", ")", ":", "\n", "        ", "output", "=", "input", ".", "new", "(", ")", "\n", "self", ".", "save_for_backward", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n", "# input_t = input.transpose(0, 1).double()", "\n", "# input_size = input_t.size()", "\n", "batch_size", "=", "int", "(", "input", ".", "size", "(", "0", ")", ")", "\n", "# input_t.resize_(int(input_size[0]), int(np.prod(input_size[1:])))", "\n", "# self.mean = input_t.mean(dim=1)", "\n", "\n", "device_ids", "=", "self", ".", "device_ids", "\n", "# print('device', input.get_device(), flush=True)", "\n", "if", "input", ".", "is_cuda", ":", "\n", "# self.mean.copy_(torch.from_numpy(", "\n", "#     self.cum_mean(input.get_device(),", "\n", "#                   self.mean.cpu().numpy(),", "\n", "#                   batch_size)))", "\n", "# var = input_t - torch.unsqueeze(self.mean, 1)", "\n", "# var *= var", "\n", "# var = var.mean(dim=1)", "\n", "# total_var = self.cum_mean(", "\n", "#     input.get_device(), var.cpu().numpy(), batch_size)", "\n", "# self.std = input_t.new().resize_as_(self.mean). \\", "\n", "#     copy_(torch.from_numpy(total_var)).sqrt()", "\n", "\n", "            ", "mean_cuda", "=", "input", ".", "new", "(", ")", ".", "resize_", "(", "input", ".", "size", "(", "1", ")", ")", "\n", "var_cuda", "=", "input", ".", "new", "(", ")", ".", "resize_", "(", "input", ".", "size", "(", "1", ")", ")", "\n", "batch_norm", ".", "BatchNormalizationP_mean_cuda", "(", "input", ",", "mean_cuda", ")", "\n", "\n", "if", "len", "(", "device_ids", ")", ">", "1", "and", "self", ".", "sync", "and", "self", ".", "training", ":", "\n", "                ", "mean_cuda", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "self", ".", "cum_mean", "(", "\n", "input", ".", "get_device", "(", ")", ",", "mean_cuda", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "batch_size", ")", ")", ")", "\n", "", "batch_norm", ".", "BatchNormalizationP_var_cuda", "(", "input", ",", "mean_cuda", ",", "var_cuda", ")", "\n", "if", "len", "(", "device_ids", ")", ">", "1", "and", "self", ".", "sync", "and", "self", ".", "training", ":", "\n", "                ", "var_cuda", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "self", ".", "cum_mean", "(", "\n", "input", ".", "get_device", "(", ")", ",", "var_cuda", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "batch_size", ")", ")", ")", "\n", "", "", "else", ":", "\n", "# self.std = input_t.std(dim=1, unbiased=False)", "\n", "            ", "batch_norm", ".", "BatchNormalizationP_var_cuda", "(", "input", ",", "mean_cuda", ",", "var_cuda", ")", "\n", "", "self", ".", "mean", "=", "mean_cuda", "\n", "self", ".", "var", "=", "var_cuda", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "self", ".", "std", "=", "input_t", ".", "std", "(", "dim", "=", "1", ",", "unbiased", "=", "False", ")", "\n", "batch_norm", ".", "BatchNormalizationP_forward", "(", "\n", "input", ",", "output", ",", "weight", ",", "bias", ",", "\n", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "", "else", ":", "\n", "            ", "batch_norm", ".", "BatchNormalizationP_forward_cuda", "(", "\n", "input", ",", "output", ",", "weight", ",", "bias", ",", "\n", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "mean", ",", "self", ".", "var", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.functions.batchnormp.BatchNormPFunction.cum_mean": [[89, 115], ["cum_queue.put", "numpy.zeros", "broadcast_queue.join", "broadcast_cv.acquire", "range", "broadcast_cv.notify_all", "broadcast_cv.release", "broadcast_cv.acquire", "broadcast_queue.get", "broadcast_queue.task_done", "broadcast_cv.release", "cum_queue.get", "cum_queue.task_done", "broadcast_queue.put", "broadcast_queue.qsize", "broadcast_cv.wait", "len"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get"], ["", "def", "cum_mean", "(", "self", ",", "this_device", ",", "this_mean", ",", "batch_size", ")", ":", "\n", "        ", "cum_queue", ".", "put", "(", "(", "batch_size", ",", "this_mean", ")", ")", "\n", "total_mean", "=", "np", ".", "zeros", "(", "this_mean", ".", "shape", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "total_batch_size", "=", "0", "\n", "if", "this_device", "==", "self", ".", "device_ids", "[", "0", "]", ":", "\n", "            ", "for", "_", "in", "self", ".", "device_ids", ":", "\n", "                ", "item", "=", "cum_queue", ".", "get", "(", ")", "\n", "total_batch_size", "+=", "item", "[", "0", "]", "\n", "total_mean", "+=", "item", "[", "0", "]", "*", "item", "[", "1", "]", "\n", "cum_queue", ".", "task_done", "(", ")", "\n", "", "total_mean", "/=", "total_batch_size", "\n", "broadcast_cv", ".", "acquire", "(", ")", "\n", "for", "_", "in", "range", "(", "len", "(", "self", ".", "device_ids", ")", "-", "1", ")", ":", "\n", "                ", "broadcast_queue", ".", "put", "(", "total_mean", ")", "\n", "", "broadcast_cv", ".", "notify_all", "(", ")", "\n", "broadcast_cv", ".", "release", "(", ")", "\n", "", "else", ":", "\n", "            ", "broadcast_cv", ".", "acquire", "(", ")", "\n", "if", "broadcast_queue", ".", "qsize", "(", ")", "==", "0", ":", "\n", "                ", "broadcast_cv", ".", "wait", "(", ")", "\n", "", "total_mean", "=", "broadcast_queue", ".", "get", "(", ")", "\n", "broadcast_queue", ".", "task_done", "(", ")", "\n", "broadcast_cv", ".", "release", "(", ")", "\n", "# assert cum_queue.empty()", "\n", "", "broadcast_queue", ".", "join", "(", ")", "\n", "return", "total_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.functions.batchnormp.BatchNormPFunction.backward": [[116, 179], ["grad_output.new().resize_as_", "grad_output.new().resize_as_().zero_", "grad_output.new().resize_as_().zero_", "dense.batch_norm.BatchNormalizationP_backward", "int", "grad_output.new().resize_", "grad_output.new().resize_", "dense.batch_norm.BatchNormalizationP_mean_grad_cuda", "dense.batch_norm.BatchNormalizationP_backward_cuda", "grad_output.new", "grad_output.new().resize_as_", "grad_output.new().resize_as_", "grad_output.size", "grad_output.size", "grad_output.size", "grad_output.new().resize_.copy_", "grad_output.new().resize_.copy_", "grad_output.new", "grad_output.new", "len", "torch.from_numpy", "torch.from_numpy", "grad_output.new", "grad_output.new", "batchnormp.BatchNormPFunction.cum_mean", "batchnormp.BatchNormPFunction.cum_mean", "grad_output.get_device", "grad_output.new().resize_.cpu().numpy", "grad_output.get_device", "grad_output.new().resize_.cpu().numpy", "grad_output.new().resize_.cpu", "grad_output.new().resize_.cpu"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.functions.batchnormp.BatchNormPFunction.cum_mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.functions.batchnormp.BatchNormPFunction.cum_mean"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "weight", ",", "bias", "=", "self", ".", "saved_tensors", "\n", "grad_input", "=", "grad_output", ".", "new", "(", ")", ".", "resize_as_", "(", "input", ")", "\n", "grad_weight", "=", "grad_output", ".", "new", "(", ")", ".", "resize_as_", "(", "weight", ")", ".", "zero_", "(", ")", "\n", "grad_bias", "=", "grad_output", ".", "new", "(", ")", ".", "resize_as_", "(", "bias", ")", ".", "zero_", "(", ")", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "batch_norm", ".", "BatchNormalizationP_backward", "(", "\n", "input", ",", "grad_output", ",", "grad_input", ",", "grad_weight", ",", "grad_bias", ",", "\n", "weight", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "mean", ",", "\n", "self", ".", "std", ",", "self", ".", "training", ",", "1", ",", "self", ".", "eps", ")", "\n", "", "else", ":", "\n", "# grad_output_t = grad_output.transpose(0, 1).double()", "\n", "# batch_size = int(grad_output.size(0))", "\n", "# grad_output_t.resize_(int(grad_output_t.size(0)),", "\n", "#                       int(np.prod(grad_output_t.size()[1:])))", "\n", "# grad_output_mean = grad_output_t.mean(dim=1)", "\n", "# device_ids = self.device_ids", "\n", "# if len(device_ids) > 1 and self.sync:", "\n", "#     grad_output_mean.copy_(torch.from_numpy(", "\n", "#         self.cum_mean(grad_output.get_device(),", "\n", "#                       grad_output_mean.cpu().numpy(),", "\n", "#                       batch_size)))", "\n", "# grad_output_mean = grad_output_mean.float()", "\n", "#", "\n", "# input_t = input.transpose(0, 1).double()", "\n", "# input_size = input_t.size()", "\n", "# input_t.resize_(int(input_size[0]), int(np.prod(input_size[1:])))", "\n", "# dotP = (input_t - torch.unsqueeze(self.mean.double(), 1)) * \\", "\n", "#        grad_output_t", "\n", "# dotP = dotP.mean(dim=1)", "\n", "# if len(device_ids) > 1 and self.sync:", "\n", "#     dotP.copy_(torch.from_numpy(", "\n", "#         self.cum_mean(grad_output.get_device(),", "\n", "#                       dotP.cpu().numpy(),", "\n", "#                       batch_size)))", "\n", "# dotP = dotP.float()", "\n", "\n", "            ", "batch_size", "=", "int", "(", "grad_output", ".", "size", "(", "0", ")", ")", "\n", "grad_output_mean_cuda", "=", "grad_output", ".", "new", "(", ")", ".", "resize_", "(", "grad_output", ".", "size", "(", "1", ")", ")", "\n", "dotP_cuda", "=", "grad_output", ".", "new", "(", ")", ".", "resize_", "(", "\n", "grad_output", ".", "size", "(", "1", ")", ")", "\n", "batch_norm", ".", "BatchNormalizationP_mean_grad_cuda", "(", "\n", "input", ",", "grad_output", ",", "self", ".", "running_mean", ",", "\n", "self", ".", "mean", ",", "grad_output_mean_cuda", ",", "dotP_cuda", ",", "self", ".", "training", "\n", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", ">", "1", "and", "self", ".", "sync", ":", "\n", "                ", "grad_output_mean_cuda", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "\n", "self", ".", "cum_mean", "(", "grad_output", ".", "get_device", "(", ")", ",", "\n", "grad_output_mean_cuda", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "batch_size", ")", ")", ")", "\n", "dotP_cuda", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "\n", "self", ".", "cum_mean", "(", "grad_output", ".", "get_device", "(", ")", ",", "\n", "dotP_cuda", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "batch_size", ")", ")", ")", "\n", "\n", "# pdb.set_trace()", "\n", "\n", "", "batch_norm", ".", "BatchNormalizationP_backward_cuda", "(", "\n", "input", ",", "grad_output", ",", "grad_output_mean_cuda", ",", "dotP_cuda", ",", "\n", "grad_input", ",", "grad_weight", ",", "grad_bias", ",", "\n", "weight", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "mean", ",", "self", ".", "var", ",", "self", ".", "training", ",", "1", ",", "self", ".", "eps", ")", "\n", "", "return", "grad_input", ",", "grad_weight", ",", "grad_bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.modules.batchnormsync.BatchNormSync.__init__": [[14, 38], ["torch.nn.Module.__init__", "batchnormsync.BatchNormSync.register_buffer", "batchnormsync.BatchNormSync.register_buffer", "torch.zeros", "torch.ones", "batchnormsync.BatchNormSync.reset_parameters", "queue.Queue", "queue.Queue", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "batchnormsync.BatchNormSync.register_parameter", "batchnormsync.BatchNormSync.register_parameter", "torch.zeros", "torch.ones", "list", "torch.Tensor", "torch.Tensor", "range", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleFC.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "device_ids", "=", "None", ")", ":", "\n", "        ", "super", "(", "BatchNormSync", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "num_features", ")", "\n", "self", ".", "std", "=", "torch", ".", "ones", "(", "num_features", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "self", ".", "cum_queue", "=", "Queue", "(", ")", "\n", "self", ".", "broadcast_queue", "=", "Queue", "(", ")", "\n", "if", "device_ids", "is", "None", ":", "\n", "            ", "self", ".", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device_ids", "=", "device_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.modules.batchnormsync.BatchNormSync.reset_parameters": [[39, 50], ["batchnormsync.BatchNormSync.running_mean.zero_", "batchnormsync.BatchNormSync.running_var.fill_", "batchnormsync.BatchNormSync.mean.zero_", "batchnormsync.BatchNormSync.std.fill_", "batchnormsync.BatchNormSync.bias.data.zero_", "batchnormsync.BatchNormSync.weight.data.fill_", "batchnormsync.BatchNormSync.weight.data.uniform_"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "self", ".", "mean", ".", "zero_", "(", ")", "\n", "self", ".", "std", ".", "fill_", "(", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "if", "BatchNormSync", ".", "checking_mode", ":", "\n", "                ", "self", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.modules.batchnormsync.BatchNormSync.forward": [[51, 60], ["int", "functions.batchnormp.BatchNormPFunction", "functions.batchnormp.BatchNormPFunction.", "input.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "training", "=", "int", "(", "self", ".", "training", ")", "\n", "assert", "input", ".", "size", "(", "1", ")", "==", "self", ".", "num_features", "\n", "\n", "bn_func", "=", "BatchNormPFunction", "(", "\n", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "# self.mean, self.std,", "\n", "training", ",", "self", ".", "cum_queue", ",", "self", ".", "broadcast_queue", ",", "self", ".", "device_ids", ",", "\n", "BatchNormSync", ".", "sync", ",", "self", ".", "eps", ",", "self", ".", "momentum", ",", "self", ".", "affine", ")", "\n", "return", "bn_func", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.modules.batchnormsync.BatchNormSync.__repr__": [[61, 65], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "\n", "' affine={affine})'", "\n", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.batch_norm.__init__._import_symbols": [[6, 11], ["dir", "getattr", "torch.utils.ffi._wrap_function", "__all__.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.compute_mean_std": [[8, 23], ["os.path.join", "numpy.random.shuffle", "numpy.vstack", "print", "line.strip", "PIL.Image.open", "np.vstack.append", "numpy.mean", "numpy.std", "mean.tolist", "std.tolist", "open", "json.dump", "open", "os.path.join", "numpy.asarray().reshape", "os.path.join", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.std"], ["def", "compute_mean_std", "(", "data_dir", ",", "list_dir", ")", ":", "\n", "    ", "image_list_path", "=", "osp", ".", "join", "(", "list_dir", ",", "'train_images.txt'", ")", "\n", "image_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "image_list_path", ",", "'r'", ")", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "image_list", ")", "\n", "pixels", "=", "[", "]", "\n", "for", "image_path", "in", "image_list", "[", ":", "500", "]", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "data_dir", ",", "image_path", ")", ",", "'r'", ")", "\n", "pixels", ".", "append", "(", "np", ".", "asarray", "(", "image", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", "\n", "", "pixels", "=", "np", ".", "vstack", "(", "pixels", ")", "\n", "mean", "=", "np", ".", "mean", "(", "pixels", ",", "axis", "=", "0", ")", "/", "255", "\n", "std", "=", "np", ".", "std", "(", "pixels", ",", "axis", "=", "0", ")", "/", "255", "\n", "print", "(", "mean", ",", "std", ")", "\n", "info", "=", "{", "'mean'", ":", "mean", ".", "tolist", "(", ")", ",", "'std'", ":", "std", ".", "tolist", "(", ")", "}", "\n", "with", "open", "(", "osp", ".", "join", "(", "data_dir", ",", "'info.json'", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "info", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.parse_args": [[25, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Compute mean and std of a dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'data_dir'", ",", "default", "=", "'./'", ",", "required", "=", "True", ",", "\n", "help", "=", "'data folder where train_images.txt resides.'", ")", "\n", "parser", ".", "add_argument", "(", "'list_dir'", ",", "default", "=", "None", ",", "required", "=", "False", ",", "\n", "help", "=", "'data folder where train_images.txt resides.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "list_dir", "is", "None", ":", "\n", "        ", "args", ".", "list_dir", "=", "args", ".", "data_dir", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.main": [[38, 41], ["compute_mean_std.parse_args", "compute_mean_std.compute_mean_std"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.parse_args", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.compute_mean_std"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "compute_mean_std", "(", "args", ".", "data_dir", ",", "args", ".", "list_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.combine_A_and_B.image_write": [[8, 13], ["cv2.imread", "cv2.imread", "numpy.concatenate", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread"], ["def", "image_write", "(", "path_A", ",", "path_B", ",", "path_AB", ")", ":", "\n", "    ", "im_A", "=", "cv2", ".", "imread", "(", "path_A", ",", "1", ")", "# python2: cv2.CV_LOAD_IMAGE_COLOR; python3: cv2.IMREAD_COLOR", "\n", "im_B", "=", "cv2", ".", "imread", "(", "path_B", ",", "1", ")", "# python2: cv2.CV_LOAD_IMAGE_COLOR; python3: cv2.IMREAD_COLOR", "\n", "im_AB", "=", "np", ".", "concatenate", "(", "[", "im_A", ",", "im_B", "]", ",", "1", ")", "\n", "cv2", ".", "imwrite", "(", "path_AB", ",", "im_AB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.prepare_night2day_dataset.load_resized_img": [[19, 22], ["cv2.imread"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.evaluations.DC.imread"], ["def", "load_resized_img", "(", "path", ")", ":", "\n", "# return Image.open(path).convert('RGB')", "\n", "    ", "return", "cv2", ".", "imread", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.prepare_night2day_dataset.check_matching_pair": [[23, 29], ["os.path.basename().replace", "os.path.basename().replace", "os.path.basename", "os.path.basename"], "function", ["None"], ["", "def", "check_matching_pair", "(", "segmap_path", ",", "photo_path", ")", ":", "\n", "    ", "segmap_identifier", "=", "os", ".", "path", ".", "basename", "(", "segmap_path", ")", ".", "replace", "(", "'_gtFine_color'", ",", "''", ")", "\n", "photo_identifier", "=", "os", ".", "path", ".", "basename", "(", "photo_path", ")", ".", "replace", "(", "'_leftImg8bit'", ",", "''", ")", "\n", "\n", "assert", "segmap_identifier", "==", "photo_identifier", ",", "\"[%s] and [%s] don't seem to be matching. Aborting.\"", "%", "(", "segmap_path", ",", "photo_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.prepare_night2day_dataset.process_cityscapes": [[31, 60], ["os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "print", "glob.glob", "sorted", "enumerate", "os.path.join", "PIL.Image.open", "photo.crop.crop", "photo.crop.crop", "os.path.join", "photo.crop.save", "os.path.join", "photo.crop.save", "os.path.join", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "def", "process_cityscapes", "(", "leftImg8bit_dir", ",", "output_dir", ",", "phase", ")", ":", "\n", "    ", "save_phase", "=", "'test'", "if", "phase", "==", "'test'", "else", "'train'", "\n", "savedir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "save_phase", ")", "\n", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "savedir", "+", "'A'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "savedir", "+", "'B'", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "\"Directory structure prepared at %s\"", "%", "output_dir", ")", "\n", "\n", "photo_expr", "=", "os", ".", "path", ".", "join", "(", "leftImg8bit_dir", ",", "phase", ")", "+", "\"/*\"", "\n", "photo_paths", "=", "glob", ".", "glob", "(", "photo_expr", ")", "\n", "photo_paths", "=", "sorted", "(", "photo_paths", ")", "\n", "\n", "\n", "for", "i", ",", "photo_path", "in", "enumerate", "(", "photo_paths", ")", ":", "\n", "# print(photo_path)", "\n", "        ", "photo", "=", "Image", ".", "open", "(", "photo_path", ")", "\n", "# photo = np.asarray(photo)", "\n", "# photo=photo[np.newaxis,...]", "\n", "# print(np.size(photo))", "\n", "segmap", "=", "photo", ".", "crop", "(", "(", "256", ",", "0", ",", "512", ",", "256", ")", ")", "\n", "photo", "=", "photo", ".", "crop", "(", "(", "0", ",", "0", ",", "256", ",", "256", ")", ")", "\n", "# data for cyclegan where the two images are stored at two distinct directories", "\n", "savepath", "=", "os", ".", "path", ".", "join", "(", "savedir", "+", "'A'", ",", "\"%d_A.jpg\"", "%", "i", ")", "\n", "photo", ".", "save", "(", "savepath", ",", "format", "=", "'JPEG'", ",", "subsampling", "=", "0", ",", "quality", "=", "100", ")", "\n", "savepath", "=", "os", ".", "path", ".", "join", "(", "savedir", "+", "'B'", ",", "\"%d_B.jpg\"", "%", "i", ")", "\n", "segmap", ".", "save", "(", "savepath", ",", "format", "=", "'JPEG'", ",", "subsampling", "=", "0", ",", "quality", "=", "100", ")", "\n", "savepath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "\"%d.jpg\"", "%", "i", ")", "\n", "if", "i", "%", "(", "len", "(", "photo_paths", ")", "//", "10", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"%d / %d: last image saved at %s, \"", "%", "(", "i", ",", "len", "(", "photo_paths", ")", ",", "savepath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.prepare_cityscapes_dataset.load_resized_img": [[17, 19], ["PIL.Image.open().convert().resize", "PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "load_resized_img", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", ".", "resize", "(", "(", "256", ",", "256", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.prepare_cityscapes_dataset.check_matching_pair": [[20, 26], ["os.path.basename().replace", "os.path.basename().replace", "os.path.basename", "os.path.basename"], "function", ["None"], ["", "def", "check_matching_pair", "(", "segmap_path", ",", "photo_path", ")", ":", "\n", "    ", "segmap_identifier", "=", "os", ".", "path", ".", "basename", "(", "segmap_path", ")", ".", "replace", "(", "'_gtFine_color'", ",", "''", ")", "\n", "photo_identifier", "=", "os", ".", "path", ".", "basename", "(", "photo_path", ")", ".", "replace", "(", "'_leftImg8bit'", ",", "''", ")", "\n", "\n", "assert", "segmap_identifier", "==", "photo_identifier", ",", "\"[%s] and [%s] don't seem to be matching. Aborting.\"", "%", "(", "segmap_path", ",", "photo_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.prepare_cityscapes_dataset.process_cityscapes": [[28, 67], ["os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "print", "glob.glob", "sorted", "glob.glob", "sorted", "enumerate", "os.path.join", "os.path.join", "len", "len", "zip", "prepare_cityscapes_dataset.check_matching_pair", "prepare_cityscapes_dataset.load_resized_img", "prepare_cityscapes_dataset.load_resized_img", "PIL.Image.new", "Image.new.paste", "Image.new.paste", "os.path.join", "Image.new.save", "os.path.join", "load_resized_img.save", "os.path.join", "load_resized_img.save", "len", "len", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.prepare_cityscapes_dataset.check_matching_pair", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.prepare_cityscapes_dataset.load_resized_img", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.prepare_cityscapes_dataset.load_resized_img", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "def", "process_cityscapes", "(", "gtFine_dir", ",", "leftImg8bit_dir", ",", "output_dir", ",", "phase", ")", ":", "\n", "    ", "save_phase", "=", "'test'", "if", "phase", "==", "'val'", "else", "'train'", "\n", "savedir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "save_phase", ")", "\n", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "savedir", "+", "'A'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "savedir", "+", "'B'", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "\"Directory structure prepared at %s\"", "%", "output_dir", ")", "\n", "\n", "segmap_expr", "=", "os", ".", "path", ".", "join", "(", "gtFine_dir", ",", "phase", ")", "+", "\"/*/*_color.png\"", "\n", "segmap_paths", "=", "glob", ".", "glob", "(", "segmap_expr", ")", "\n", "segmap_paths", "=", "sorted", "(", "segmap_paths", ")", "\n", "\n", "photo_expr", "=", "os", ".", "path", ".", "join", "(", "leftImg8bit_dir", ",", "phase", ")", "+", "\"/*/*_leftImg8bit.png\"", "\n", "photo_paths", "=", "glob", ".", "glob", "(", "photo_expr", ")", "\n", "photo_paths", "=", "sorted", "(", "photo_paths", ")", "\n", "\n", "assert", "len", "(", "segmap_paths", ")", "==", "len", "(", "photo_paths", ")", ",", "\"%d images that match [%s], and %d images that match [%s]. Aborting.\"", "%", "(", "len", "(", "segmap_paths", ")", ",", "segmap_expr", ",", "len", "(", "photo_paths", ")", ",", "photo_expr", ")", "\n", "\n", "for", "i", ",", "(", "segmap_path", ",", "photo_path", ")", "in", "enumerate", "(", "zip", "(", "segmap_paths", ",", "photo_paths", ")", ")", ":", "\n", "        ", "check_matching_pair", "(", "segmap_path", ",", "photo_path", ")", "\n", "segmap", "=", "load_resized_img", "(", "segmap_path", ")", "\n", "photo", "=", "load_resized_img", "(", "photo_path", ")", "\n", "\n", "# data for pix2pix where the two images are placed side-by-side", "\n", "sidebyside", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "512", ",", "256", ")", ")", "\n", "sidebyside", ".", "paste", "(", "segmap", ",", "(", "256", ",", "0", ")", ")", "\n", "sidebyside", ".", "paste", "(", "photo", ",", "(", "0", ",", "0", ")", ")", "\n", "savepath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "\"%d.jpg\"", "%", "i", ")", "\n", "sidebyside", ".", "save", "(", "savepath", ",", "format", "=", "'JPEG'", ",", "subsampling", "=", "0", ",", "quality", "=", "100", ")", "\n", "\n", "# data for cyclegan where the two images are stored at two distinct directories", "\n", "savepath", "=", "os", ".", "path", ".", "join", "(", "savedir", "+", "'A'", ",", "\"%d_A.jpg\"", "%", "i", ")", "\n", "photo", ".", "save", "(", "savepath", ",", "format", "=", "'JPEG'", ",", "subsampling", "=", "0", ",", "quality", "=", "100", ")", "\n", "savepath", "=", "os", ".", "path", ".", "join", "(", "savedir", "+", "'B'", ",", "\"%d_B.jpg\"", "%", "i", ")", "\n", "segmap", ".", "save", "(", "savepath", ",", "format", "=", "'JPEG'", ",", "subsampling", "=", "0", ",", "quality", "=", "100", ")", "\n", "\n", "if", "i", "%", "(", "len", "(", "segmap_paths", ")", "//", "10", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"%d / %d: last image saved at %s, \"", "%", "(", "i", ",", "len", "(", "segmap_paths", ")", ",", "savepath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.make_dataset_aligned.get_file_paths": [[6, 18], ["os.walk", "sorted", "os.path.abspath", "os.path.join", "filename.endswith", "filename.endswith", "image_file_paths.append"], "function", ["None"], ["def", "get_file_paths", "(", "folder", ")", ":", "\n", "    ", "image_file_paths", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "folder", ")", ":", "\n", "        ", "filenames", "=", "sorted", "(", "filenames", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "input_path", "=", "os", ".", "path", ".", "abspath", "(", "root", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "input_path", ",", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", "or", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                ", "image_file_paths", ".", "append", "(", "file_path", ")", "\n", "\n", "", "", "break", "# prevent descending into subfolders", "\n", "", "return", "image_file_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.make_dataset_aligned.align_images": [[20, 33], ["range", "os.path.exists", "os.makedirs", "len", "PIL.Image.open", "PIL.Image.open", "PIL.Image.new", "Image.new.paste", "Image.new.paste", "Image.new.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "def", "align_images", "(", "a_file_paths", ",", "b_file_paths", ",", "target_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "target_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "target_path", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "a_file_paths", ")", ")", ":", "\n", "        ", "img_a", "=", "Image", ".", "open", "(", "a_file_paths", "[", "i", "]", ")", "\n", "img_b", "=", "Image", ".", "open", "(", "b_file_paths", "[", "i", "]", ")", "\n", "assert", "(", "img_a", ".", "size", "==", "img_b", ".", "size", ")", "\n", "\n", "aligned_image", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "(", "img_a", ".", "size", "[", "0", "]", "*", "2", ",", "img_a", ".", "size", "[", "1", "]", ")", ")", "\n", "aligned_image", ".", "paste", "(", "img_a", ",", "(", "0", ",", "0", ")", ")", "\n", "aligned_image", ".", "paste", "(", "img_b", ",", "(", "img_a", ".", "size", "[", "0", "]", ",", "0", ")", ")", "\n", "aligned_image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "target_path", ",", "'{:04d}.jpg'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.cityscapes.prepare_data.label2id": [[87, 94], ["numpy.array", "numpy.empty", "PIL.Image.fromarray"], "function", ["None"], ["def", "label2id", "(", "image", ")", ":", "\n", "    ", "array", "=", "np", ".", "array", "(", "image", ")", "\n", "out_array", "=", "np", ".", "empty", "(", "array", ".", "shape", ",", "dtype", "=", "array", ".", "dtype", ")", "\n", "for", "l", "in", "labels", ":", "\n", "        ", "if", "0", "<=", "l", ".", "trainId", "<", "255", ":", "\n", "            ", "out_array", "[", "array", "==", "l", ".", "trainId", "]", "=", "l", ".", "id", "\n", "", "", "return", "Image", ".", "fromarray", "(", "out_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.cityscapes.prepare_data.id2label": [[96, 102], ["numpy.array", "numpy.empty", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "id2label", "(", "image", ")", ":", "\n", "    ", "array", "=", "np", ".", "array", "(", "image", ")", "\n", "out_array", "=", "np", ".", "empty", "(", "array", ".", "shape", ",", "dtype", "=", "array", ".", "dtype", ")", "\n", "for", "l", "in", "labels", ":", "\n", "        ", "out_array", "[", "array", "==", "l", ".", "id", "]", "=", "l", ".", "trainId", "\n", "", "return", "Image", ".", "fromarray", "(", "out_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.cityscapes.prepare_data.prepare_cityscape_submission": [[104, 117], ["os.walk", "os.path.join", "os.path.join", "PIL.Image.open", "prepare_data.label2id", "print", "label2id.save", "root.replace", "os.path.split", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.cityscapes.prepare_data.label2id", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "def", "prepare_cityscape_submission", "(", "in_dir", ")", ":", "\n", "    ", "our_dir", "=", "in_dir", "+", "'_id'", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "in_dir", ")", ":", "\n", "        ", "for", "name", "in", "filenames", ":", "\n", "            ", "in_path", "=", "join", "(", "root", ",", "name", ")", "\n", "out_path", "=", "join", "(", "root", ".", "replace", "(", "in_dir", ",", "our_dir", ")", ",", "name", ")", "\n", "file_dir", "=", "split", "(", "out_path", ")", "[", "0", "]", "\n", "if", "not", "exists", "(", "file_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "file_dir", ")", "\n", "", "image", "=", "Image", ".", "open", "(", "in_path", ")", "\n", "id_map", "=", "label2id", "(", "image", ")", "\n", "print", "(", "'Writing'", ",", "out_path", ")", "\n", "id_map", ".", "save", "(", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.cityscapes.prepare_data.prepare_cityscape_training": [[119, 133], ["os.walk", "name.split", "os.path.join", "os.path.join", "PIL.Image.open", "prepare_data.id2label", "print", "id2label.save"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.cityscapes.prepare_data.id2label", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "", "", "def", "prepare_cityscape_training", "(", "in_dir", ")", ":", "\n", "    ", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "in_dir", ")", ":", "\n", "        ", "for", "name", "in", "filenames", ":", "\n", "            ", "parts", "=", "name", ".", "split", "(", "'_'", ")", "\n", "if", "parts", "[", "-", "1", "]", "!=", "'labelIds.png'", ":", "\n", "                ", "continue", "\n", "", "parts", "[", "-", "1", "]", "=", "'trainIds.png'", "\n", "out_name", "=", "'_'", ".", "join", "(", "parts", ")", "\n", "in_path", "=", "join", "(", "root", ",", "name", ")", "\n", "out_path", "=", "join", "(", "root", ",", "out_name", ")", "\n", "image", "=", "Image", ".", "open", "(", "in_path", ")", "\n", "id_map", "=", "id2label", "(", "image", ")", "\n", "print", "(", "'Writing'", ",", "out_path", ")", "\n", "id_map", ".", "save", "(", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.PreNormResidual.__init__": [[99, 103], ["torch.nn.Module.__init__", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.PreNormResidual.forward": [[104, 106], ["networks.PreNormResidual.fn", "networks.PreNormResidual.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "self", ".", "norm", "(", "x", ")", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_G": [[14, 41], ["cyclegan_networks.get_norm_layer", "cyclegan_networks.init_net", "cyclegan_networks.ResnetGenerator", "stylegan_networks.StyleGAN2Generator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.get_norm_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.init_net"], ["def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "\n", "init_gain", "=", "0.02", ",", "no_antialias", "=", "False", ",", "no_antialias_up", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "opt", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create a generator\n    :param input_nc: the number of channels in input images\n    :param output_nc: the number of channels in output images\n    :param ngf: the number of filters in the first conv layer\n    :param netG: the architecture's name: resnet_9blocks | munit | stylegan2\n    :param norm: the name of normalization layers used in the network: batch | instance | none\n    :param use_dropout: if use dropout layers.\n    :param init_type: the name of our initialization method.\n    :param init_gain: scaling factor for normal, xavier and orthogonal.\n    :param no_antialias: use learned down sampling layer or not\n    :param no_antialias_up: use learned up sampling layer or not\n    :param gpu_ids: which GPUs the network runs on: e.g., 0,1,2\n    :param opt: options\n    :return:\n    \"\"\"", "\n", "norm_value", "=", "cyclegan_networks", ".", "get_norm_layer", "(", "norm", ")", "\n", "\n", "if", "netG", "==", "'resnet_9blocks'", ":", "\n", "        ", "net", "=", "cyclegan_networks", ".", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_value", ",", "use_dropout", ",", "n_blocks", "=", "9", ",", "no_antialias", "=", "no_antialias", ",", "no_antialias_up", "=", "no_antialias_up", ",", "opt", "=", "opt", ")", "\n", "", "elif", "netG", "==", "'stylegan2'", ":", "\n", "        ", "net", "=", "stylegan_networks", ".", "StyleGAN2Generator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "opt", "=", "opt", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "netG", ")", "\n", "", "return", "cyclegan_networks", ".", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ",", "initialize_weights", "=", "(", "'stylegan2'", "not", "in", "netG", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_D": [[43, 68], ["cyclegan_networks.get_norm_layer", "cyclegan_networks.init_net", "cyclegan_networks.NLayerDiscriminator", "cyclegan_networks.D_NLayersMulti", "stylegan_networks.StyleGAN2Discriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.get_norm_layer", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD", ",", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "no_antialias", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "opt", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create a discriminator\n    :param input_nc: the number of channels in input images\n    :param ndf: the number of filters in the first conv layer\n    :param netD: the architecture's name\n    :param n_layers_D: the number of conv layers in the discriminator; effective when netD=='n_layers'\n    :param norm: the type of normalization layers used in the network\n    :param init_type: the name of the initialization method\n    :param init_gain: scaling factor for normal, xavier and orthogonal\n    :param no_antialias: use learned down sampling layer or not\n    :param gpu_ids: which GPUs the network runs on: e.g., 0,1,2\n    :param opt: options\n    :return:\n    \"\"\"", "\n", "norm_value", "=", "cyclegan_networks", ".", "get_norm_layer", "(", "norm", ")", "\n", "if", "netD", "==", "'basic'", ":", "\n", "        ", "net", "=", "cyclegan_networks", ".", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_value", ",", "no_antialias", ")", "\n", "", "elif", "netD", "==", "'bimulti'", ":", "\n", "        ", "net", "=", "cyclegan_networks", ".", "D_NLayersMulti", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "n_layers_D", ",", "norm_layer", "=", "norm_value", ",", "num_D", "=", "2", ")", "\n", "", "elif", "'stylegan2'", "in", "netD", ":", "\n", "        ", "net", "=", "stylegan_networks", ".", "StyleGAN2Discriminator", "(", "input_nc", ",", "ndf", ",", "opt", "=", "opt", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "netD", ")", "\n", "", "return", "cyclegan_networks", ".", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ",", "initialize_weights", "=", "(", "'stylegan2'", "not", "in", "netD", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.get_scheduler": [[73, 98], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Return a learning rate scheduler\n    Parameters:\n        optimizer          -- the optimizer of the network\n        opt (option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\uff0e\u3000\n                              opt.lr_policy is the name of learning rate policy: linear | step | plateau | cosine\n    For 'linear', we keep the same learning rate for the first <opt.n_epochs> epochs\n    and linearly decay the rate to zero over the next <opt.n_epochs_decay> epochs.\n    For other schedulers (step, plateau, and cosine), we use the default PyTorch schedulers.\n    See https://pytorch.org/docs/stable/optim.html for more details.\n    \"\"\"", "\n", "if", "opt", ".", "lr_policy", "==", "'linear'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "opt", ".", "epoch_count", "-", "opt", ".", "n_epochs", ")", "/", "float", "(", "opt", ".", "n_epochs_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "n_epochs", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "", "class", "PreNormResidual", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.FeedForward": [[107, 114], ["torch.nn.Sequential", "dense", "torch.nn.GELU", "torch.nn.Dropout", "dense", "torch.nn.Dropout"], "function", ["None"], ["", "", "def", "FeedForward", "(", "dim", ",", "expansion_factor", "=", "4", ",", "dropout", "=", "0.", ",", "dense", "=", "nn", ".", "Linear", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "dense", "(", "dim", ",", "dim", "*", "expansion_factor", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "dense", "(", "dim", "*", "expansion_factor", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_transG": [[116, 120], ["glanet.glanet", "glanet.glanet.to"], "function", ["None"], ["", "def", "define_transG", "(", "gpu_ids", ")", ":", "\n", "\n", "    ", "net", "=", "glanet", "(", ")", "\n", "return", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.mlp_ mixer.PreNormResidual.__init__": [[9, 13], ["torch.nn.Module.__init__", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.mlp_ mixer.PreNormResidual.forward": [[14, 16], ["mlp_ mixer.PreNormResidual.fn", "mlp_ mixer.PreNormResidual.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "self", ".", "norm", "(", "x", ")", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.mlp_ mixer.generator.__init__": [[44, 61], ["mlp_ mixer.MLPMixer", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.MLPMixer"], ["    ", "def", "__init__", "(", "self", ",", "image_size", "=", "256", ",", "channels", "=", "3", ",", "patch_size", "=", "16", ",", "dim", "=", "512", ",", "depth", "=", "12", ",", "num_classes", "=", "1000", ",", "expansion_factor", "=", "4", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "self", ".", "encoder", "=", "MLPMixer", "(", ")", "\n", "embed_dim", "=", "1024", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "\n", "embed_dim", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "\n", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "\n", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv2d", "(", "\n", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "3", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "_", ",", "self", ".", "syncbn_fc_0", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "256", ")", "\n", "_", ",", "self", ".", "syncbn_fc_1", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "256", ")", "\n", "_", ",", "self", ".", "syncbn_fc_2", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "256", ")", "\n", "_", ",", "self", ".", "syncbn_fc_3", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "256", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.mlp_ mixer.generator.forward": [[61, 88], ["mlp_ mixer.MLPMixer", "mlp_ mixer.generator.conv_0", "mlp_ mixer.generator.syncbn_fc_0", "torch.relu", "torch.interpolate", "mlp_ mixer.generator.conv_1", "mlp_ mixer.generator.syncbn_fc_1", "torch.relu", "torch.interpolate", "mlp_ mixer.generator.conv_2", "mlp_ mixer.generator.syncbn_fc_2", "torch.relu", "torch.interpolate", "mlp_ mixer.generator.conv_3", "mlp_ mixer.generator.syncbn_fc_3", "torch.relu", "mlp_ mixer.generator.conv_4", "torch.interpolate", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.MLPMixer"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "### encoder", "\n", "        ", "x", "=", "MLPMixer", "(", "x", ")", "\n", "### deconder", "\n", "x", "=", "self", ".", "conv_0", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_0", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "self", ".", "conv_1", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "self", ".", "conv_2", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "self", ".", "conv_3", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "conv_4", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "return", "nn", ".", "Tanh", "(", ")", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.mlp_ mixer.FeedForward": [[17, 24], ["torch.nn.Sequential", "dense", "torch.nn.GELU", "torch.nn.Dropout", "dense", "torch.nn.Dropout"], "function", ["None"], ["", "", "def", "FeedForward", "(", "dim", ",", "expansion_factor", "=", "4", ",", "dropout", "=", "0.", ",", "dense", "=", "nn", ".", "Linear", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "dense", "(", "dim", ",", "dim", "*", "expansion_factor", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "dense", "(", "dim", "*", "expansion_factor", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.mlp_ mixer.MLPMixer": [[26, 39], ["torch.nn.Sequential", "functools.partial", "einops.layers.torch.Rearrange", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.Sequential", "mlp_ mixer.PreNormResidual", "mlp_ mixer.PreNormResidual", "range", "mlp_ mixer.FeedForward", "mlp_ mixer.FeedForward"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.FeedForward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.FeedForward"], ["", "def", "MLPMixer", "(", "image_size", "=", "256", ",", "channels", "=", "3", ",", "patch_size", "=", "16", ",", "dim", "=", "512", ",", "depth", "=", "12", ",", "num_classes", "=", "1000", ",", "expansion_factor", "=", "4", ",", "dropout", "=", "0.", ")", ":", "\n", "    ", "assert", "(", "image_size", "%", "patch_size", ")", "==", "0", ",", "'image must be divisible by patch size'", "\n", "num_patches", "=", "(", "image_size", "//", "patch_size", ")", "**", "2", "\n", "chan_first", ",", "chan_last", "=", "partial", "(", "nn", ".", "Conv1d", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "Linear", "\n", "\n", "return", "nn", ".", "Sequential", "(", "\n", "Rearrange", "(", "'b c (h p1) (w p2) -> b (h w) (p1 p2 c)'", ",", "p1", "=", "patch_size", ",", "p2", "=", "patch_size", ")", ",", "\n", "nn", ".", "Linear", "(", "(", "patch_size", "**", "2", ")", "*", "channels", ",", "dim", ")", ",", "\n", "*", "[", "nn", ".", "Sequential", "(", "\n", "PreNormResidual", "(", "dim", ",", "FeedForward", "(", "num_patches", ",", "expansion_factor", ",", "dropout", ",", "chan_first", ")", ")", ",", "\n", "PreNormResidual", "(", "dim", ",", "FeedForward", "(", "dim", ",", "expansion_factor", ",", "dropout", ",", "chan_last", ")", ")", "\n", ")", "for", "_", "in", "range", "(", "depth", ")", "]", ",", "\n", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "# Reduce('b n c -> b c', 'mean'),", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.Mlp.__init__": [[51, 59], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.Mlp.forward": [[60, 67], ["cycle_mlp.Mlp.fc1", "cycle_mlp.Mlp.act", "cycle_mlp.Mlp.drop", "cycle_mlp.Mlp.fc2", "cycle_mlp.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleFC.__init__": [[73, 112], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "cycle_mlp.CycleFC.register_buffer", "cycle_mlp.CycleFC.reset_parameters", "ValueError", "ValueError", "ValueError", "ValueError", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.Parameter", "torch.Parameter", "cycle_mlp.CycleFC.register_parameter", "cycle_mlp.CycleFC.gen_offset", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleFC.reset_parameters", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleFC.gen_offset"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "kernel_size", ",", "# re-defined kernel_size, represent the spatial area of staircase FC", "\n", "stride", ":", "int", "=", "1", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "CycleFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "if", "stride", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'stride must be 1'", ")", "\n", "", "if", "padding", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'padding must be 0'", ")", "\n", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "1", ",", "1", ")", ")", "# kernel size == 1", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "register_buffer", "(", "'offset'", ",", "self", ".", "gen_offset", "(", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleFC.reset_parameters": [[113, 120], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleFC.gen_offset": [[121, 138], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "range"], "methods", ["None"], ["", "", "def", "gen_offset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        offset (Tensor[batch_size, 2 * offset_groups * kernel_height * kernel_width,\n            out_height, out_width]): offsets to be applied for each position in the\n            convolution kernel.\n        \"\"\"", "\n", "offset", "=", "torch", ".", "empty", "(", "1", ",", "self", ".", "in_channels", "*", "2", ",", "1", ",", "1", ")", "\n", "start_idx", "=", "(", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", ")", "//", "2", "\n", "assert", "self", ".", "kernel_size", "[", "0", "]", "==", "1", "or", "self", ".", "kernel_size", "[", "1", "]", "==", "1", ",", "self", ".", "kernel_size", "\n", "for", "i", "in", "range", "(", "self", ".", "in_channels", ")", ":", "\n", "            ", "if", "self", ".", "kernel_size", "[", "0", "]", "==", "1", ":", "\n", "                ", "offset", "[", "0", ",", "2", "*", "i", "+", "0", ",", "0", ",", "0", "]", "=", "0", "\n", "offset", "[", "0", ",", "2", "*", "i", "+", "1", ",", "0", ",", "0", "]", "=", "(", "i", "+", "start_idx", ")", "%", "self", ".", "kernel_size", "[", "1", "]", "-", "(", "self", ".", "kernel_size", "[", "1", "]", "//", "2", ")", "\n", "", "else", ":", "\n", "                ", "offset", "[", "0", ",", "2", "*", "i", "+", "0", ",", "0", ",", "0", "]", "=", "(", "i", "+", "start_idx", ")", "%", "self", ".", "kernel_size", "[", "0", "]", "-", "(", "self", ".", "kernel_size", "[", "0", "]", "//", "2", ")", "\n", "offset", "[", "0", ",", "2", "*", "i", "+", "1", ",", "0", ",", "0", "]", "=", "0", "\n", "", "", "return", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleFC.forward": [[139, 147], ["input.size", "torchvision.ops.deform_conv.deform_conv2d", "cycle_mlp.CycleFC.offset.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            input (Tensor[batch_size, in_channels, in_height, in_width]): input tensor\n        \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "input", ".", "size", "(", ")", "\n", "return", "deform_conv2d_tv", "(", "input", ",", "self", ".", "offset", ".", "expand", "(", "B", ",", "-", "1", ",", "H", ",", "W", ")", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "self", ".", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleFC.extra_repr": [[148, 160], ["s.format"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "'{in_channels}'", "\n", "s", "+=", "', {out_channels}'", "\n", "s", "+=", "', kernel_size={kernel_size}'", "\n", "s", "+=", "', stride={stride}'", "\n", "s", "+=", "', padding={padding}'", "if", "self", ".", "padding", "!=", "(", "0", ",", "0", ")", "else", "''", "\n", "s", "+=", "', dilation={dilation}'", "if", "self", ".", "dilation", "!=", "(", "1", ",", "1", ")", "else", "''", "\n", "s", "+=", "', groups={groups}'", "if", "self", ".", "groups", "!=", "1", "else", "''", "\n", "s", "+=", "', bias=False'", "if", "self", ".", "bias", "is", "None", "else", "''", "\n", "s", "+=", "')'", "\n", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleMLP.__init__": [[163, 174], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "cycle_mlp.CycleFC", "cycle_mlp.CycleFC", "cycle_mlp.Mlp", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_c", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "\n", "self", ".", "sfc_h", "=", "CycleFC", "(", "dim", ",", "dim", ",", "(", "1", ",", "3", ")", ",", "1", ",", "0", ")", "\n", "self", ".", "sfc_w", "=", "CycleFC", "(", "dim", ",", "dim", ",", "(", "3", ",", "1", ")", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "reweight", "=", "Mlp", "(", "dim", ",", "dim", "//", "4", ",", "dim", "*", "3", ")", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleMLP.forward": [[175, 190], ["cycle_mlp.CycleMLP.sfc_h().permute", "cycle_mlp.CycleMLP.sfc_w().permute", "cycle_mlp.CycleMLP.mlp_c", "cycle_mlp.CycleMLP.reweight().reshape().permute().softmax().unsqueeze().unsqueeze", "cycle_mlp.CycleMLP.proj", "cycle_mlp.CycleMLP.proj_drop", "cycle_mlp.CycleMLP.sfc_h", "cycle_mlp.CycleMLP.sfc_w", "cycle_mlp.CycleMLP.reweight().reshape().permute().softmax().unsqueeze", "cycle_mlp.CycleMLP.permute", "cycle_mlp.CycleMLP.permute", "cycle_mlp.CycleMLP.reweight().reshape().permute().softmax", "cycle_mlp.CycleMLP.reweight().reshape().permute", "cycle_mlp.CycleMLP.reweight().reshape", "cycle_mlp.CycleMLP.reweight"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "h", "=", "self", ".", "sfc_h", "(", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "w", "=", "self", ".", "sfc_w", "(", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "c", "=", "self", ".", "mlp_c", "(", "x", ")", "\n", "\n", "a", "=", "(", "h", "+", "w", "+", "c", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "flatten", "(", "2", ")", ".", "mean", "(", "2", ")", "\n", "a", "=", "self", ".", "reweight", "(", "a", ")", ".", "reshape", "(", "B", ",", "C", ",", "3", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "softmax", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "x", "=", "h", "*", "a", "[", "0", "]", "+", "w", "*", "a", "[", "1", "]", "+", "c", "*", "a", "[", "2", "]", "\n", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleBlock.__init__": [[194, 207], ["torch.Module.__init__", "norm_layer", "mlp_fn", "norm_layer", "int", "cycle_mlp.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "skip_lam", "=", "1.0", ",", "mlp_fn", "=", "CycleMLP", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "mlp_fn", "(", "dim", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "attn_drop", ")", "\n", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ")", "\n", "self", ".", "skip_lam", "=", "skip_lam", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleBlock.forward": [[208, 212], ["cycle_mlp.CycleBlock.drop_path", "cycle_mlp.CycleBlock.drop_path", "cycle_mlp.CycleBlock.attn", "cycle_mlp.CycleBlock.mlp", "cycle_mlp.CycleBlock.norm1", "cycle_mlp.CycleBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "/", "self", ".", "skip_lam", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "/", "self", ".", "skip_lam", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.PatchEmbedOverlapping.__init__": [[217, 227], ["torch.Module.__init__", "timm.models.layers.helpers.to_2tuple", "timm.models.layers.helpers.to_2tuple", "timm.models.layers.helpers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "patch_size", "=", "16", ",", "stride", "=", "16", ",", "padding", "=", "0", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "norm_layer", "=", "None", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "stride", "=", "to_2tuple", "(", "stride", ")", "\n", "padding", "=", "to_2tuple", "(", "padding", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "# remove image_size in model init to support dynamic image size", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "groups", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "if", "norm_layer", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.PatchEmbedOverlapping.forward": [[228, 231], ["cycle_mlp.PatchEmbedOverlapping.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.Downsample.__init__": [[236, 240], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "in_embed_dim", ",", "out_embed_dim", ",", "patch_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "patch_size", "==", "2", ",", "patch_size", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_embed_dim", ",", "out_embed_dim", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.Downsample.forward": [[241, 246], ["x.permute.permute.permute", "cycle_mlp.Downsample.proj", "x.permute.permute.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "# B, C, H, W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.__init__": [[263, 308], ["torch.Module.__init__", "cycle_mlp.PatchEmbedOverlapping", "range", "torch.ModuleList", "torch.ModuleList", "cycle_mlp.CycleNet.apply", "len", "cycle_mlp.basic_blocks", "network.append", "enumerate", "norm_layer", "network.append", "cycle_mlp.CycleNet.add_module", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "len", "cycle_mlp.Downsample", "os.environ.get", "torch.Identity", "torch.Identity", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.basic_blocks", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get"], ["def", "__init__", "(", "self", ",", "layers", ",", "img_size", "=", "224", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "\n", "embed_dims", "=", "None", ",", "transitions", "=", "None", ",", "segment_dim", "=", "None", ",", "mlp_ratios", "=", "None", ",", "skip_lam", "=", "1.0", ",", "\n", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "mlp_fn", "=", "CycleMLP", ",", "fork_feat", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "fork_feat", ":", "\n", "            ", "self", ".", "num_classes", "=", "num_classes", "\n", "", "self", ".", "fork_feat", "=", "fork_feat", "\n", "\n", "self", ".", "patch_embed", "=", "PatchEmbedOverlapping", "(", "patch_size", "=", "7", ",", "stride", "=", "4", ",", "padding", "=", "2", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "embed_dims", "[", "0", "]", ")", "\n", "\n", "network", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "layers", ")", ")", ":", "\n", "            ", "stage", "=", "basic_blocks", "(", "embed_dims", "[", "i", "]", ",", "i", ",", "layers", ",", "mlp_ratio", "=", "mlp_ratios", "[", "i", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path_rate", "=", "drop_path_rate", ",", "\n", "norm_layer", "=", "norm_layer", ",", "skip_lam", "=", "skip_lam", ",", "mlp_fn", "=", "mlp_fn", ")", "\n", "network", ".", "append", "(", "stage", ")", "\n", "if", "i", ">=", "len", "(", "layers", ")", "-", "1", ":", "\n", "                ", "break", "\n", "", "if", "transitions", "[", "i", "]", "or", "embed_dims", "[", "i", "]", "!=", "embed_dims", "[", "i", "+", "1", "]", ":", "\n", "                ", "patch_size", "=", "2", "if", "transitions", "[", "i", "]", "else", "1", "\n", "network", ".", "append", "(", "Downsample", "(", "embed_dims", "[", "i", "]", ",", "embed_dims", "[", "i", "+", "1", "]", ",", "patch_size", ")", ")", "\n", "\n", "", "", "self", ".", "network", "=", "nn", ".", "ModuleList", "(", "network", ")", "\n", "\n", "if", "self", ".", "fork_feat", ":", "\n", "# add a norm layer for each output", "\n", "            ", "self", ".", "out_indices", "=", "[", "0", ",", "2", ",", "4", ",", "6", "]", "\n", "for", "i_emb", ",", "i_layer", "in", "enumerate", "(", "self", ".", "out_indices", ")", ":", "\n", "                ", "if", "i_emb", "==", "0", "and", "os", ".", "environ", ".", "get", "(", "'FORK_LAST3'", ",", "None", ")", ":", "\n", "# TODO: more elegant way", "\n", "                    ", "\"\"\"For RetinaNet, `start_level=1`. The first norm layer will not used.\n                    cmd: `FORK_LAST3=1 python -m torch.distributed.launch ...`\n                    \"\"\"", "\n", "layer", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "                    ", "layer", "=", "norm_layer", "(", "embed_dims", "[", "i_emb", "]", ")", "\n", "", "layer_name", "=", "f'norm{i_layer}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "", "", "else", ":", "\n", "# Classifier head", "\n", "            ", "self", ".", "norm", "=", "norm_layer", "(", "embed_dims", "[", "-", "1", "]", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dims", "[", "-", "1", "]", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "cls_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.cls_init_weights": [[309, 320], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "timm.models.layers.trunc_normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "def", "cls_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "CycleFC", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.init_weights": [[321, 326], ["isinstance", "get_root_logger", "load_checkpoint"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\" mmseg or mmdet `init_weight` \"\"\"", "\n", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.get_classifier": [[327, 329], ["None"], "methods", ["None"], ["", "", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.reset_classifier": [[330, 333], ["torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.forward_embeddings": [[334, 339], ["cycle_mlp.CycleNet.patch_embed", "x.permute.permute.permute"], "methods", ["None"], ["", "def", "forward_embeddings", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "# B,C,H,W-> B,H,W,C", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.forward_tokens": [[340, 354], ["enumerate", "block.reshape", "block", "getattr", "getattr.", "outs.append", "getattr.permute().contiguous", "getattr.permute"], "methods", ["None"], ["", "def", "forward_tokens", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "network", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "self", ".", "fork_feat", "and", "idx", "in", "self", ".", "out_indices", ":", "\n", "                ", "norm_layer", "=", "getattr", "(", "self", ",", "f'norm{idx}'", ")", "\n", "x_out", "=", "norm_layer", "(", "x", ")", "\n", "outs", ".", "append", "(", "x_out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "\n", "", "", "if", "self", ".", "fork_feat", ":", "\n", "            ", "return", "outs", "\n", "\n", "", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "-", "1", ",", "C", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.forward": [[355, 365], ["cycle_mlp.CycleNet.forward_embeddings", "cycle_mlp.CycleNet.forward_tokens", "cycle_mlp.CycleNet.norm", "cycle_mlp.CycleNet.head", "cycle_mlp.CycleNet.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.forward_embeddings", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleNet.forward_tokens", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_embeddings", "(", "x", ")", "\n", "# B, H, W, C -> B, N, C", "\n", "x", "=", "self", ".", "forward_tokens", "(", "x", ")", "\n", "if", "self", ".", "fork_feat", ":", "\n", "            ", "return", "x", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "cls_out", "=", "self", ".", "head", "(", "x", ".", "mean", "(", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp._cfg": [[34, 41], ["None"], "function", ["None"], ["", "def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", ".96", ",", "'interpolation'", ":", "'bicubic'", ",", "\n", "'mean'", ":", "IMAGENET_DEFAULT_MEAN", ",", "'std'", ":", "IMAGENET_DEFAULT_STD", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.basic_blocks": [[248, 259], ["range", "torch.Sequential", "nn.Sequential.append", "cycle_mlp.CycleBlock", "sum", "sum"], "function", ["None"], ["", "", "def", "basic_blocks", "(", "dim", ",", "index", ",", "layers", ",", "mlp_ratio", "=", "3.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "skip_lam", "=", "1.0", ",", "mlp_fn", "=", "CycleMLP", ",", "**", "kwargs", ")", ":", "\n", "    ", "blocks", "=", "[", "]", "\n", "\n", "for", "block_idx", "in", "range", "(", "layers", "[", "index", "]", ")", ":", "\n", "        ", "block_dpr", "=", "drop_path_rate", "*", "(", "block_idx", "+", "sum", "(", "layers", "[", ":", "index", "]", ")", ")", "/", "(", "sum", "(", "layers", ")", "-", "1", ")", "\n", "blocks", ".", "append", "(", "CycleBlock", "(", "dim", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "attn_drop", "=", "attn_drop", ",", "drop_path", "=", "block_dpr", ",", "skip_lam", "=", "skip_lam", ",", "mlp_fn", "=", "mlp_fn", ")", ")", "\n", "", "blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleMLP_B1": [[367, 377], ["cycle_mlp.CycleNet"], "function", ["None"], ["", "", "@", "register_model", "\n", "def", "CycleMLP_B1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "transitions", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "layers", "=", "[", "2", ",", "2", ",", "4", ",", "2", "]", "\n", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", "\n", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", "\n", "model", "=", "CycleNet", "(", "layers", ",", "embed_dims", "=", "embed_dims", ",", "patch_size", "=", "7", ",", "transitions", "=", "transitions", ",", "\n", "mlp_ratios", "=", "mlp_ratios", ",", "mlp_fn", "=", "CycleMLP", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'cycle_S'", "]", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleMLP_B2": [[379, 389], ["cycle_mlp.CycleNet"], "function", ["None"], ["", "@", "register_model", "\n", "def", "CycleMLP_B2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "transitions", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "layers", "=", "[", "2", ",", "3", ",", "10", ",", "3", "]", "\n", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", "\n", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", "\n", "model", "=", "CycleNet", "(", "layers", ",", "embed_dims", "=", "embed_dims", ",", "patch_size", "=", "7", ",", "transitions", "=", "transitions", ",", "\n", "mlp_ratios", "=", "mlp_ratios", ",", "mlp_fn", "=", "CycleMLP", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'cycle_S'", "]", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleMLP_B3": [[391, 401], ["cycle_mlp.CycleNet"], "function", ["None"], ["", "@", "register_model", "\n", "def", "CycleMLP_B3", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "transitions", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "layers", "=", "[", "3", ",", "4", ",", "18", ",", "3", "]", "\n", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", "\n", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", "\n", "model", "=", "CycleNet", "(", "layers", ",", "embed_dims", "=", "embed_dims", ",", "patch_size", "=", "7", ",", "transitions", "=", "transitions", ",", "\n", "mlp_ratios", "=", "mlp_ratios", ",", "mlp_fn", "=", "CycleMLP", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'cycle_M'", "]", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleMLP_B4": [[403, 413], ["cycle_mlp.CycleNet"], "function", ["None"], ["", "@", "register_model", "\n", "def", "CycleMLP_B4", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "transitions", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "layers", "=", "[", "3", ",", "8", ",", "27", ",", "3", "]", "\n", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", "\n", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", "\n", "model", "=", "CycleNet", "(", "layers", ",", "embed_dims", "=", "embed_dims", ",", "patch_size", "=", "7", ",", "transitions", "=", "transitions", ",", "\n", "mlp_ratios", "=", "mlp_ratios", ",", "mlp_fn", "=", "CycleMLP", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'cycle_L'", "]", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_mlp.CycleMLP_B5": [[415, 425], ["cycle_mlp.CycleNet"], "function", ["None"], ["", "@", "register_model", "\n", "def", "CycleMLP_B5", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "transitions", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "layers", "=", "[", "3", ",", "4", ",", "24", ",", "3", "]", "\n", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", "\n", "embed_dims", "=", "[", "96", ",", "192", ",", "384", ",", "768", "]", "\n", "model", "=", "CycleNet", "(", "layers", ",", "embed_dims", "=", "embed_dims", ",", "patch_size", "=", "7", ",", "transitions", "=", "transitions", ",", "\n", "mlp_ratios", "=", "mlp_ratios", ",", "mlp_fn", "=", "CycleMLP", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfgs", "[", "'cycle_L'", "]", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.test_model.TestModel.modify_commandline_options": [[11, 30], ["parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n\n        The model can only be used during test time. It requires '--dataset_mode single'.\n        You need to specify the network using the option '--model_suffix'.\n        \"\"\"", "\n", "assert", "not", "is_train", ",", "'TestModel cannot be used during training time'", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "'single'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_suffix'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'In checkpoints_dir, [epoch]_net_G[model_suffix].pth will be loaded as the generator.'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.test_model.TestModel.__init__": [[31, 51], ["base_model.BaseModel.__init__", "networks.define_G", "setattr"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_G"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the pix2pix class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "assert", "(", "not", "opt", ".", "isTrain", ")", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "# specify the training losses you want to print out. The training/test scripts  will call <BaseModel.get_current_losses>", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "# specify the images you want to save/display. The training/test scripts  will call <BaseModel.get_current_visuals>", "\n", "self", ".", "visual_names", "=", "[", "'real'", ",", "'fake'", "]", "\n", "# specify the models you want to save to the disk. The training/test scripts will call <BaseModel.save_networks> and <BaseModel.load_networks>", "\n", "self", ".", "model_names", "=", "[", "'G'", "+", "opt", ".", "model_suffix", "]", "# only generator is needed.", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "# assigns the model to self.netG_[suffix] so that it can be loaded", "\n", "# please see <BaseModel.load_networks>", "\n", "setattr", "(", "self", ",", "'netG'", "+", "opt", ".", "model_suffix", ",", "self", ".", "netG", ")", "# store netG in self.", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.test_model.TestModel.set_input": [[52, 62], ["input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n\n        We need to use 'single_dataset' dataset mode. It only load images from one domain.\n        \"\"\"", "\n", "self", ".", "real", "=", "input", "[", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.test_model.TestModel.forward": [[63, 66], ["test_model.TestModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass.\"\"\"", "\n", "self", ".", "fake", "=", "self", ".", "netG", "(", "self", ".", "real", ")", "# G(real)", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.test_model.TestModel.optimize_parameters": [[67, 70], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"No optimization for test model.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.ResBlock.__init__": [[32, 42], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "glanet.Conv2dBlock", "glanet.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm", "=", "'in'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ",", "style_dim", "=", "3", ",", "norm_after_conv", "=", "'ln'", ",", "\n", "res_off", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "res_off", "=", "res_off", "\n", "model", "=", "[", "]", "\n", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ",", "\n", "style_dim", "=", "style_dim", ",", "norm_after_conv", "=", "norm_after_conv", ")", "]", "\n", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ",", "\n", "style_dim", "=", "style_dim", ",", "norm_after_conv", "=", "norm_after_conv", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "ModuleList", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.ResBlock.forward": [[43, 51], ["layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "spade_input", "=", "None", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "for", "layer", "in", "self", ".", "model", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "spade_input", ")", "\n", "", "if", "self", ".", "res_off", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.ResBlocks.__init__": [[54, 71], ["torch.Module.__init__", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "DeprecationWarning", "glanet.ResBlock", "glanet.ResBlock"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "dim", ",", "norm", "=", "'in'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ",", "non_local", "=", "False", ",", "\n", "style_dim", "=", "3", ",", "norm_after_conv", "=", "'ln'", ")", ":", "\n", "        ", "super", "(", "ResBlocks", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "if", "isinstance", "(", "non_local", ",", "(", "list", ",", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "                ", "if", "i", "in", "non_local", ":", "\n", "                    ", "raise", "DeprecationWarning", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "model", "+=", "[", "ResBlock", "(", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ",", "\n", "style_dim", "=", "style_dim", ",", "norm_after_conv", "=", "norm_after_conv", ")", "]", "\n", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "                ", "self", ".", "model", "+=", "[", "ResBlock", "(", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ",", "\n", "style_dim", "=", "style_dim", ",", "norm_after_conv", "=", "norm_after_conv", ")", "]", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.ResBlocks.forward": [[72, 74], ["glanet.ResBlocks.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.Conv2dBlock.__init__": [[77, 154], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "SpectralNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "glanet.LayerNorm", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "glanet.AdaptiveInstanceNorm2d", "torch.SELU", "torch.SELU", "torch.SELU", "torch.SELU", "torch.SELU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "glanet.Conv2dBlock._get_norm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "np.prod"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.Conv2dBlock._get_norm"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "0", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ",", "style_dim", "=", "3", ",", "norm_after_conv", "=", "'ln'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bias", "=", "True", "\n", "self", ".", "norm_type", "=", "norm", "\n", "# initialize padding", "\n", "if", "pad_type", "==", "'reflect'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'replicate'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReplicationPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'zero'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", ")", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported padding type: {}\"", ".", "format", "(", "pad_type", ")", "\n", "\n", "# initialize normalization", "\n", "", "self", ".", "compute_kernel", "=", "True", "if", "norm", "==", "'conv_kernel'", "else", "False", "\n", "self", ".", "WCT", "=", "True", "if", "norm", "==", "'WCT'", "else", "False", "\n", "\n", "norm_dim", "=", "output_dim", "\n", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'adain'", ":", "\n", "            ", "self", ".", "norm", "=", "AdaptiveInstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'WCT'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "self", ".", "style_dim", "=", "style_dim", "\n", "self", ".", "dim", "=", "output_dim", ",", "input_dim", ",", "kernel_size", ",", "kernel_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "mlp_W", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "style_dim", ",", "output_dim", "**", "2", ")", ",", "\n", ")", "\n", "self", ".", "mlp_bias", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "style_dim", ",", "output_dim", ")", ",", "\n", ")", "\n", "", "elif", "norm", "==", "'none'", "or", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "elif", "norm", "==", "'conv_kernel'", ":", "\n", "            ", "self", ".", "style_dim", "=", "style_dim", "\n", "self", ".", "norm_after_conv", "=", "norm_after_conv", "\n", "self", ".", "_get_norm", "(", "self", ".", "norm_after_conv", ",", "norm_dim", ")", "\n", "self", ".", "dim", "=", "output_dim", ",", "input_dim", ",", "kernel_size", ",", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "mlp_kernel", "=", "nn", ".", "Linear", "(", "self", ".", "style_dim", ",", "int", "(", "np", ".", "prod", "(", "self", ".", "dim", ")", ")", ")", "\n", "self", ".", "mlp_bias", "=", "nn", ".", "Linear", "(", "self", ".", "style_dim", ",", "output_dim", ")", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n", "# initialize convolution", "\n", "", "if", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "conv", "=", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "bias", "=", "self", ".", "use_bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "bias", "=", "self", ".", "use_bias", ")", "\n", "\n", "", "self", ".", "style", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.Conv2dBlock._get_norm": [[155, 168], ["torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "glanet.LayerNorm", "glanet.AdaptiveInstanceNorm2d"], "methods", ["None"], ["", "def", "_get_norm", "(", "self", ",", "norm", ",", "norm_dim", ")", ":", "\n", "        ", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'adain'", ":", "\n", "            ", "self", ".", "norm", "=", "AdaptiveInstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.Conv2dBlock.forward": [[169, 195], ["glanet.Conv2dBlock.mlp_kernel", "glanet.Conv2dBlock.mlp_bias", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "glanet.Conv2dBlock.conv", "glanet.Conv2dBlock.mean().mean", "glanet.Conv2dBlock.permute", "glanet.Conv2dBlock.mlp_W", "glanet.Conv2dBlock.mlp_bias", "W.view.view.view", "glanet.Conv2dBlock.permute", "glanet.Conv2dBlock.activation", "glanet.Conv2dBlock.pad", "glanet.Conv2dBlock.view", "glanet.Conv2dBlock.view", "glanet.Conv2dBlock.pad", "glanet.Conv2dBlock.norm", "glanet.Conv2dBlock.norm", "glanet.Conv2dBlock.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "spade_input", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "compute_kernel", ":", "\n", "            ", "conv_kernel", "=", "self", ".", "mlp_kernel", "(", "self", ".", "style", ")", "\n", "conv_bias", "=", "self", ".", "mlp_bias", "(", "self", ".", "style", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "self", ".", "pad", "(", "x", ")", ",", "conv_kernel", ".", "view", "(", "*", "self", ".", "dim", ")", ",", "conv_bias", ".", "view", "(", "-", "1", ")", ",", "self", ".", "stride", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "self", ".", "pad", "(", "x", ")", ")", "\n", "", "if", "self", ".", "WCT", ":", "\n", "            ", "x_mean", "=", "x", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x", "=", "x", "-", "x_mean", "\n", "W", "=", "self", ".", "mlp_W", "(", "self", ".", "style", ")", "\n", "bias", "=", "self", ".", "mlp_bias", "(", "self", ".", "style", ")", "\n", "W", "=", "W", ".", "view", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", "\n", "x", "=", "x", "@", "W", "\n", "x", "=", "x", "+", "bias", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "if", "self", ".", "norm_type", "==", "'spade'", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ",", "spade_input", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.ContentEncoderBase.__init__": [[198, 205], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_preparation", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "model_downsample", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "model_postprocess", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "output_dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.ContentEncoderBase.forward": [[206, 209], ["chain", "glanet.module_list_forward"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.module_list_forward"], ["", "def", "forward", "(", "self", ",", "tensor", ",", "spade_input", "=", "None", ")", ":", "\n", "        ", "model", "=", "chain", "(", "self", ".", "model_preparation", ",", "self", ".", "model_downsample", ",", "self", ".", "model_postprocess", ")", "\n", "return", "module_list_forward", "(", "model", ",", "tensor", ",", "spade_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.ContentEncoderBC.__init__": [[212, 223], ["glanet.ContentEncoderBase.__init__", "range", "glanet.Conv2dBlock", "glanet.ResBlocks", "glanet.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_downsamples", ",", "num_blocks", ",", "input_dim", ",", "dim", ",", "norm", ",", "activ", ",", "pad_type", ",", "non_local", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dim", ")", "\n", "self", ".", "model_preparation", "+=", "[", "Conv2dBlock", "(", "input_dim", ",", "dim", ",", "9", ",", "1", ",", "4", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "# downsampling blocks", "\n", "for", "i", "in", "range", "(", "num_downsamples", ")", ":", "\n", "            ", "self", ".", "model_downsample", "+=", "[", "\n", "Conv2dBlock", "(", "dim", ",", "2", "*", "dim", ",", "6", ",", "2", ",", "2", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "dim", "*=", "2", "\n", "# residual blocks", "\n", "", "self", ".", "model_postprocess", "+=", "[", "\n", "ResBlocks", "(", "num_blocks", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ",", "non_local", "=", "non_local", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.ContentEncoderUnet.__init__": [[226, 231], ["glanet.ContentEncoderBC.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "skip_dim", "=", "kwargs", "[", "'skip_dim'", "]", "\n", "if", "isinstance", "(", "self", ".", "skip_dim", ",", "int", ")", ":", "\n", "            ", "self", ".", "skip_dim", "=", "[", "self", ".", "skip_dim", "]", "*", "kwargs", "[", "'num_downsamples'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.ContentEncoderUnet.forward": [[232, 253], ["output.append", "layer", "output.append", "layer", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "output", ":", "List", "[", "torch", ".", "Tensor", "]", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "model_preparation", ":", "\n", "            ", "tensor", "=", "layer", "(", "tensor", ")", "\n", "# tensor = module_list_forward(self.model_preparation, tensor, spade_input)", "\n", "\n", "", "for", "layer", "in", "self", ".", "model_downsample", ":", "\n", "            ", "skip_dim", "=", "5", "\n", "if", "skip_dim", ">", "0", ":", "\n", "                ", "out", "=", "tensor", "[", ":", ",", ":", "skip_dim", "]", "\n", "", "else", ":", "\n", "                ", "out", "=", "tensor", "\n", "", "output", ".", "append", "(", "out", ")", "\n", "tensor", "=", "layer", "(", "tensor", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "model_postprocess", ":", "\n", "            ", "tensor", "=", "layer", "(", "tensor", ")", "\n", "# tensor = module_list_forward(self.model_postprocess, tensor, spade_input)", "\n", "", "output", ".", "append", "(", "tensor", ")", "\n", "output_reversed", ":", "List", "[", "torch", ".", "Tensor", "]", "=", "[", "output", "[", "2", "]", ",", "output", "[", "1", "]", ",", "output", "[", "0", "]", "]", "\n", "return", "output_reversed", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.StyleEncoderBase.__init__": [[257, 262], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_dim", "=", "dim", "\n", "self", ".", "body", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.StyleEncoderBase.forward": [[263, 275], ["layer", "layer", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor", ",", "spade_input", "=", "None", ")", ":", "\n", "        ", "if", "spade_input", ":", "\n", "            ", "for", "layer", "in", "self", ".", "body", ":", "\n", "                ", "tensor", "=", "layer", "(", "tensor", ",", "spade_input", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "layer", "in", "self", ".", "body", ":", "\n", "                ", "tensor", "=", "layer", "(", "tensor", ")", "\n", "\n", "", "", "for", "layer", "in", "self", ".", "head", ":", "\n", "            ", "tensor", "=", "layer", "(", "tensor", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.StyleEncoder.__init__": [[278, 291], ["glanet.StyleEncoderBase.__init__", "range", "range", "glanet.Conv2dBlock", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "glanet.Conv2dBlock", "glanet.Conv2dBlock", "NormalizeOutput"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_downsamples", ",", "input_dim", ",", "dim", ",", "output_dim", ",", "norm", ",", "activ", ",", "pad_type", ",", "normalized_out", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dim", ")", "\n", "self", ".", "body", "+=", "[", "Conv2dBlock", "(", "input_dim", ",", "dim", ",", "7", ",", "1", ",", "3", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "body", "+=", "[", "Conv2dBlock", "(", "dim", ",", "2", "*", "dim", ",", "4", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "dim", "*=", "2", "\n", "", "for", "i", "in", "range", "(", "num_downsamples", "-", "2", ")", ":", "\n", "            ", "self", ".", "body", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "4", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "\n", "", "self", ".", "head", "+=", "[", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "]", "\n", "self", ".", "head", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "output_dim", ",", "1", ",", "1", ",", "0", ")", "]", "\n", "if", "normalized_out", ":", "\n", "            ", "self", ".", "head", "+=", "[", "NormalizeOutput", "(", "dim", "=", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.MLP.__init__": [[295, 303], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "glanet.LinearBlock", "glanet.LinearBlock", "glanet.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dim", ",", "num_blocks", ",", "norm", "=", "'none'", ",", "activ", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "self", ".", "model", "+=", "[", "LinearBlock", "(", "input_dim", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ")", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", "-", "2", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "LinearBlock", "(", "dim", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ")", "]", "\n", "", "self", ".", "model", "+=", "[", "LinearBlock", "(", "dim", ",", "output_dim", ",", "norm", "=", "'none'", ",", "activation", "=", "'none'", ")", "]", "# no output activations", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.MLP.forward": [[304, 306], ["glanet.MLP.model", "x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.LinearBlock.__init__": [[309, 346], ["torch.Module.__init__", "SpectralNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "glanet.LayerNorm", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.SELU", "torch.SELU", "torch.SELU", "torch.SELU", "torch.SELU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "LinearBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "use_bias", "=", "True", "\n", "# initialize fully connected layer", "\n", "if", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "fc", "=", "SpectralNorm", "(", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "use_bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "use_bias", ")", "\n", "\n", "# initialize normalization", "\n", "", "norm_dim", "=", "output_dim", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", "or", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.LinearBlock.forward": [[347, 354], ["glanet.LinearBlock.fc", "glanet.LinearBlock.norm", "glanet.LinearBlock.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "out", "=", "self", ".", "norm", "(", "out", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.LayerNorm.__init__": [[357, 366], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ".", "uniform_", "(", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.LayerNorm.forward": [[367, 383], ["x.size", "x.view().mean().view", "x.view().std().view", "x.view().mean().view", "x.view().std().view", "glanet.LayerNorm.beta.view", "x.dim", "x.view().mean", "x.view().std", "x.view().mean", "x.view().std", "glanet.LayerNorm.gamma.view", "x.dim", "x.view", "x.view", "x.view", "x.view", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.std", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.std"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shape", "=", "[", "-", "1", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "if", "x", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "# These two lines run much faster in pytorch 0.4 than the two lines listed below.", "\n", "            ", "mean", "=", "x", ".", "view", "(", "-", "1", ")", ".", "mean", "(", ")", ".", "view", "(", "*", "shape", ")", "\n", "std", "=", "x", ".", "view", "(", "-", "1", ")", ".", "std", "(", ")", ".", "view", "(", "*", "shape", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "1", ")", ".", "view", "(", "*", "shape", ")", "\n", "std", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "std", "(", "1", ")", ".", "view", "(", "*", "shape", ")", "\n", "\n", "", "x", "=", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "shape", "=", "[", "1", ",", "-", "1", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "2", ")", "\n", "x", "=", "x", "*", "self", ".", "gamma", ".", "view", "(", "*", "shape", ")", "+", "self", ".", "beta", ".", "view", "(", "*", "shape", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.AdaptiveInstanceNorm2d.__init__": [[386, 397], ["torch.Module.__init__", "glanet.AdaptiveInstanceNorm2d.register_buffer", "glanet.AdaptiveInstanceNorm2d.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "# weight and bias are dynamically assigned", "\n", "self", ".", "weight", "=", "None", "\n", "self", ".", "bias", "=", "None", "\n", "# just dummy buffers, not used", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.AdaptiveInstanceNorm2d.forward": [[398, 412], ["glanet.AdaptiveInstanceNorm2d.running_mean.repeat().type_as", "glanet.AdaptiveInstanceNorm2d.running_var.repeat().type_as", "x.contiguous().view", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm.view", "x.size", "x.size", "glanet.AdaptiveInstanceNorm2d.running_mean.repeat", "glanet.AdaptiveInstanceNorm2d.running_var.repeat", "x.contiguous", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "weight", "is", "not", "None", "and", "self", ".", "bias", "is", "not", "None", ",", "\"Please assign weight and bias before calling AdaIN!\"", "\n", "b", ",", "c", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "running_mean", "=", "self", ".", "running_mean", ".", "repeat", "(", "b", ")", ".", "type_as", "(", "x", ")", "\n", "running_var", "=", "self", ".", "running_var", ".", "repeat", "(", "b", ")", ".", "type_as", "(", "x", ")", "\n", "\n", "# Apply instance norm", "\n", "x_reshaped", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "b", "*", "c", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "out", "=", "F", ".", "batch_norm", "(", "\n", "x_reshaped", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "True", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "return", "out", ".", "view", "(", "b", ",", "c", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.AdaptiveInstanceNorm2d.__repr__": [[413, 415], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "str", "(", "self", ".", "num_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderBase.__init__": [[430, 437], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "glanet.DecoderBase._init_modules"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderUnet._init_modules"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "upsample_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "_init_modules", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderBase._init_modules": [[438, 440], ["None"], "methods", ["None"], ["", "def", "_init_modules", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderBase.forward": [[441, 448], ["glanet.module_list_forward", "layer"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.module_list_forward"], ["", "def", "forward", "(", "self", ",", "tensor", ",", "spade_input", "=", "None", ")", ":", "\n", "        ", "tensor", "=", "module_list_forward", "(", "self", ".", "body", ",", "tensor", ",", "spade_input", ")", "\n", "\n", "for", "layer", "in", "self", ".", "upsample_head", ":", "\n", "            ", "tensor", "=", "layer", "(", "tensor", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINBase.__init__": [[451, 465], ["glanet.DecoderBase.__init__", "adain_net_config.pop", "glanet.DecoderAdaINBase._calc_adain_params", "print", "glanet.MLP"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINBase._calc_adain_params"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "adain_net_config", "=", "kwargs", "[", "'adain_net'", "]", "\n", "architecture", "=", "adain_net_config", ".", "pop", "(", "'architecture'", ")", "\n", "num_adain_params", "=", "self", ".", "_calc_adain_params", "(", ")", "\n", "adain_net_config", "[", "'output_dim'", "]", "=", "num_adain_params", "\n", "print", "(", "'output dim:'", ",", "num_adain_params", ")", "\n", "\n", "# self.adain_net = MLP(input_dim=3, output_dim=3, dim=64, num_blocks=3) #getattr(hidt.networks.blocks.modules, architecture)(**adain_net_config)", "\n", "self", ".", "adain_net", "=", "MLP", "(", "**", "adain_net_config", ")", "\n", "self", ".", "style_dim", "=", "adain_net_config", "[", "'input_dim'", "]", "\n", "self", ".", "pred_adain_params", "=", "'adain'", "==", "kwargs", "[", "'res_norm'", "]", "or", "'adain'", "==", "kwargs", "[", "'up_norm'", "]", "or", "'adain'", "==", "kwargs", "[", "\n", "'norm_after_conv'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINBase._calc_adain_params": [[466, 468], ["glanet.DecoderAdaINBase.get_num_adain_params"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINBase.get_num_adain_params"], ["", "def", "_calc_adain_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_num_adain_params", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINBase.get_num_adain_params": [[469, 477], ["model.modules"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_num_adain_params", "(", "model", ")", ":", "\n", "# return the number of AdaIN parameters needed by the model", "\n", "        ", "num_adain_params", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "in", "(", "\"AdaptiveInstanceNorm2d\"", ",", "'AdaLIN'", ")", ":", "\n", "                ", "num_adain_params", "+=", "2", "*", "m", ".", "num_features", "\n", "", "", "return", "num_adain_params", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINBase.assign_adain_params": [[478, 492], ["model.modules", "mean.contiguous().view", "std.contiguous().view", "adain_params.size", "mean.contiguous", "std.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "assign_adain_params", "(", "adain_params", ",", "model", ")", ":", "\n", "# assign the adain_params to the AdaIN layers in model", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "in", "(", "'AdaptiveInstanceNorm2d'", ",", "'AdaLIN'", ")", ":", "\n", "                ", "assert", "adain_params", ".", "shape", "[", "1", "]", "\n", "mean", "=", "adain_params", "[", ":", ",", ":", "m", ".", "num_features", "]", "\n", "assert", "mean", ".", "shape", "[", "1", "]", "\n", "std", "=", "adain_params", "[", ":", ",", "m", ".", "num_features", ":", "2", "*", "m", ".", "num_features", "]", "\n", "assert", "std", ".", "shape", "[", "1", "]", "\n", "m", ".", "bias", "=", "mean", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "m", ".", "weight", "=", "std", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "adain_params", ".", "size", "(", "1", ")", ">=", "2", "*", "m", ".", "num_features", ":", "\n", "                    ", "adain_params", "=", "adain_params", "[", ":", ",", "2", "*", "m", ".", "num_features", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINBase.forward": [[493, 498], ["glanet.DecoderBase.forward", "glanet.DecoderAdaINBase.adain_net", "glanet.DecoderAdaINBase.assign_adain_params"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINBase.assign_adain_params"], ["", "", "", "", "def", "forward", "(", "self", ",", "content_tensor", ",", "style_tensor", ",", "spade_input", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "pred_adain_params", ":", "\n", "            ", "adain_params", "=", "self", ".", "adain_net", "(", "style_tensor", ")", "\n", "self", ".", "assign_adain_params", "(", "adain_params", ",", "self", ")", "\n", "", "return", "super", "(", ")", ".", "forward", "(", "content_tensor", ",", "spade_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINConvBase.__init__": [[501, 505], ["glanet.DecoderAdaINBase.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "pred_conv_kernel", "=", "'conv_kernel'", "==", "kwargs", "[", "'res_norm'", "]", "or", "'conv_kernel'", "==", "kwargs", "[", "'up_norm'", "]", "or", "'WCT'", "==", "kwargs", "[", "'res_norm'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINConvBase.assign_style": [[506, 512], ["model.modules"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "assign_style", "(", "style", ",", "model", ")", ":", "\n", "# assign a style to the Conv2dBlocks", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "==", "\"Conv2dBlock\"", ":", "\n", "                ", "m", ".", "style", "=", "style", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINConvBase.forward": [[513, 518], ["glanet.DecoderAdaINBase.forward", "glanet.DecoderAdaINConvBase.assign_style", "style_tensor.size", "style_tensor.view"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINConvBase.assign_style"], ["", "", "", "def", "forward", "(", "self", ",", "content_tensor", ",", "style_tensor", ",", "spade_input", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "pred_conv_kernel", ":", "\n", "            ", "assert", "style_tensor", ".", "size", "(", "0", ")", "==", "1", ",", "'prediction of convilution does not work with batch size > 1'", "\n", "self", ".", "assign_style", "(", "style_tensor", ".", "view", "(", "1", ",", "-", "1", ")", ",", "self", ")", "\n", "", "return", "super", "(", ")", ".", "forward", "(", "content_tensor", ",", "style_tensor", ",", "spade_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderUnet._init_modules": [[521, 578], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "isinstance", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "glanet.ResBlocks", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "glanet.Conv2dBlock", "glanet.Conv2dBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "glanet.Conv2dBlock", "kwargs.get", "glanet.ResBlocks", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get"], ["    ", "def", "_init_modules", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "num_upsamples", "=", "kwargs", "[", "'num_upsamples'", "]", "\n", "self", ".", "body", "+=", "[", "ResBlocks", "(", "kwargs", "[", "'num_blocks'", "]", ",", "\n", "kwargs", "[", "'dim'", "]", ",", "\n", "norm", "=", "kwargs", "[", "'res_norm'", "]", ",", "\n", "activation", "=", "kwargs", "[", "'activ'", "]", ",", "\n", "pad_type", "=", "kwargs", "[", "'pad_type'", "]", ",", "\n", "style_dim", "=", "kwargs", ".", "get", "(", "'style_dim'", ",", "3", ")", ")", "]", "\n", "\n", "self", ".", "upsample_postprocess", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "skip_preprocess", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "dim", "=", "kwargs", "[", "'dim'", "]", "\n", "skip_dim", "=", "kwargs", "[", "'skip_dim'", "]", "\n", "if", "isinstance", "(", "skip_dim", ",", "int", ")", ":", "\n", "            ", "skip_dim", "=", "[", "skip_dim", "]", "*", "kwargs", "[", "'num_upsamples'", "]", "\n", "", "skip_dim", "=", "skip_dim", "[", ":", ":", "-", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "kwargs", "[", "'num_upsamples'", "]", ")", ":", "\n", "            ", "self", ".", "upsample_head", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "]", "\n", "current_upsample_postprocess", "=", "[", "\n", "Conv2dBlock", "(", "dim", "+", "skip_dim", "[", "i", "]", ",", "\n", "dim", "//", "2", ",", "7", ",", "1", ",", "3", ",", "\n", "norm", "=", "kwargs", "[", "'up_norm'", "]", ",", "\n", "activation", "=", "kwargs", "[", "'activ'", "]", ",", "\n", "pad_type", "=", "kwargs", "[", "'pad_type'", "]", ",", "\n", "style_dim", "=", "kwargs", ".", "get", "(", "'style_dim'", ",", "3", ")", ",", "\n", "norm_after_conv", "=", "kwargs", ".", "get", "(", "'norm_after_conv'", ",", "'ln'", ")", ",", "\n", ")", "]", "\n", "if", "kwargs", "[", "'num_res_conv'", "]", ":", "\n", "                ", "current_upsample_postprocess", "+=", "[", "ResBlocks", "(", "kwargs", "[", "'num_res_conv'", "]", ",", "\n", "dim", "//", "2", ",", "\n", "norm", "=", "kwargs", "[", "'up_norm'", "]", ",", "\n", "activation", "=", "kwargs", "[", "'activ'", "]", ",", "\n", "pad_type", "=", "kwargs", "[", "'pad_type'", "]", ",", "\n", "style_dim", "=", "kwargs", ".", "get", "(", "'style_dim'", ",", "3", ")", ",", "\n", "norm_after_conv", "=", "kwargs", ".", "get", "(", "'norm_after_conv'", ",", "'ln'", ")", ",", "\n", ")", "]", "\n", "\n", "", "current_skip_preprocess", "=", "[", "Conv2dBlock", "(", "skip_dim", "[", "i", "]", ",", "\n", "skip_dim", "[", "i", "]", ",", "7", ",", "1", ",", "3", ",", "\n", "norm", "=", "kwargs", "[", "'res_norm'", "]", ",", "\n", "activation", "=", "kwargs", "[", "'activ'", "]", ",", "\n", "pad_type", "=", "kwargs", "[", "'pad_type'", "]", ",", "\n", "style_dim", "=", "kwargs", ".", "get", "(", "'style_dim'", ",", "3", ")", ",", "\n", "norm_after_conv", "=", "kwargs", ".", "get", "(", "'norm_after_conv'", ",", "'ln'", ")", ",", "\n", ")", "]", "\n", "\n", "self", ".", "upsample_postprocess", "+=", "[", "nn", ".", "Sequential", "(", "*", "current_upsample_postprocess", ")", "]", "\n", "self", ".", "skip_preprocess", "+=", "[", "nn", ".", "Sequential", "(", "*", "current_skip_preprocess", ")", "]", "\n", "dim", "//=", "2", "\n", "\n", "# use reflection padding in the last conv layer", "\n", "", "self", ".", "model_postprocess", "=", "nn", ".", "ModuleList", "(", "[", "Conv2dBlock", "(", "dim", ",", "kwargs", "[", "'output_dim'", "]", ",", "9", ",", "1", ",", "4", ",", "\n", "norm", "=", "'none'", ",", "\n", "activation", "=", "'none'", ",", "\n", "pad_type", "=", "kwargs", "[", "'pad_type'", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderUnet.forward": [[579, 599], ["glanet.module_list_forward", "zip", "glanet.module_list_forward", "glanet.DecoderUnet.adain_net", "glanet.DecoderUnet.assign_adain_params", "glanet.DecoderUnet.assign_style", "up_layer", "skip_preprocess_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "up_postprocess_layer", "style_tensor.size", "style_tensor.view"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.module_list_forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.module_list_forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINBase.assign_adain_params", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.DecoderAdaINConvBase.assign_style"], ["", "def", "forward", "(", "self", ",", "content_list", ",", "style_tensor", ",", "spade_input", "=", "None", ",", "pure_generation", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "pred_adain_params", ":", "\n", "            ", "adain_params", "=", "self", ".", "adain_net", "(", "style_tensor", ")", "\n", "self", ".", "assign_adain_params", "(", "adain_params", ",", "self", ")", "\n", "\n", "", "if", "self", ".", "pred_conv_kernel", ":", "\n", "            ", "assert", "style_tensor", ".", "size", "(", "0", ")", "==", "1", ",", "'prediction of convilution does not work with batch size > 1'", "\n", "self", ".", "assign_style", "(", "style_tensor", ".", "view", "(", "1", ",", "-", "1", ")", ",", "self", ")", "\n", "\n", "", "tensor", "=", "module_list_forward", "(", "self", ".", "body", ",", "content_list", "[", "0", "]", ",", "spade_input", ")", "\n", "for", "skip_content", ",", "up_layer", ",", "up_postprocess_layer", ",", "skip_preprocess_layer", "in", "zip", "(", "content_list", "[", "1", ":", "]", ",", "\n", "self", ".", "upsample_head", ",", "\n", "self", ".", "upsample_postprocess", ",", "\n", "self", ".", "skip_preprocess", ")", ":", "\n", "            ", "tensor", "=", "up_layer", "(", "tensor", ")", "\n", "skip_tensor", "=", "skip_preprocess_layer", "(", "skip_content", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "[", "tensor", ",", "skip_tensor", "]", ",", "1", ")", "\n", "tensor", "=", "up_postprocess_layer", "(", "tensor", ")", "\n", "", "tensor", "=", "module_list_forward", "(", "self", ".", "model_postprocess", ",", "tensor", ",", "spade_input", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.MLP_Distribution.__init__": [[606, 616], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "latent_dim", ")", ":", "\n", "        ", "super", "(", "MLP_Distribution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "int", "(", "0.5", "*", "input_dim", "+", "0.5", "*", "latent_dim", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "int", "(", "0.5", "*", "input_dim", "+", "0.5", "*", "latent_dim", ")", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "int", "(", "0.5", "*", "input_dim", "+", "0.5", "*", "latent_dim", ")", ",", "2", "*", "latent_dim", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "2", "*", "latent_dim", ")", "\n", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.MLP_Distribution.forward": [[617, 641], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "glanet.MLP_Distribution.fc1", "glanet.MLP_Distribution.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "glanet.MLP_Distribution.fc2", "glanet.MLP_Distribution.bn2", "mu_log_sigma[].unsqueeze", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ",", "feature2", "=", "None", ",", "return_everything", "=", "False", ")", ":", "\n", "# posterioir will have a feature2 as well", "\n", "\n", "        ", "if", "feature2", "is", "not", "None", ":", "# implying that it is guided net", "\n", "            ", "feature", "=", "torch", ".", "cat", "(", "[", "feature", ",", "feature2", "]", ",", "dim", "=", "1", ")", "\n", "### to avoid bs=1", "\n", "", "feature", "=", "torch", ".", "cat", "(", "[", "feature", ",", "feature", "]", ")", "\n", "# print(feature.shape)", "\n", "encoding", "=", "self", ".", "fc1", "(", "feature", ")", "\n", "encoding", "=", "self", ".", "bn1", "(", "encoding", ")", "\n", "encoding", "=", "F", ".", "relu", "(", "encoding", ")", "\n", "\n", "encoding", "=", "self", ".", "fc2", "(", "encoding", ")", "\n", "mu_log_sigma", "=", "self", ".", "bn2", "(", "encoding", ")", "\n", "mu_log_sigma", "=", "mu_log_sigma", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", "\n", "mu", "=", "mu_log_sigma", "[", ":", ",", ":", "self", ".", "latent_dim", "]", "\n", "log_sigma", "=", "mu_log_sigma", "[", ":", ",", "self", ".", "latent_dim", ":", "]", "\n", "\n", "dist", "=", "Independent", "(", "Normal", "(", "loc", "=", "mu", ",", "scale", "=", "torch", ".", "exp", "(", "log_sigma", ")", ")", ",", "1", ")", "\n", "\n", "if", "return_everything", ":", "\n", "            ", "return", "mu", ",", "log_sigma", "\n", "", "else", ":", "\n", "            ", "return", "dist", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.Conv_Downsample.__init__": [[648, 656], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ")", ":", "\n", "        ", "super", "(", "Conv_Downsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "int", "(", "0.5", "*", "output_dim", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "0.5", "*", "output_dim", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "int", "(", "0.5", "*", "output_dim", ")", ",", "output_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.Conv_Downsample.forward": [[657, 665], ["glanet.Conv_Downsample.conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "glanet.Conv_Downsample.conv2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "glanet.Conv_Downsample.bn1", "glanet.Conv_Downsample.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "bn2", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.PreNormResidual.__init__": [[668, 672], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.PreNormResidual.forward": [[672, 674], ["glanet.PreNormResidual.fn", "glanet.PreNormResidual.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "self", ".", "norm", "(", "x", ")", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.glanet.__init__": [[702, 724], ["torch.Module.__init__", "glanet.ContentEncoderUnet", "glanet.MLPMixer", "glanet.Conv_Downsample", "glanet.MLP_Distribution", "glanet.MLP_Distribution", "glanet.DecoderUnet"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.MLPMixer"], ["    ", "def", "__init__", "(", "self", ",", "latent_dim", "=", "32", ")", ":", "\n", "        ", "super", "(", "glanet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "self", ".", "style_dim", "=", "latent_dim", "\n", "\n", "self", ".", "content_encoder", "=", "ContentEncoderUnet", "(", "num_downsamples", "=", "2", ",", "num_blocks", "=", "4", ",", "input_dim", "=", "3", ",", "dim", "=", "48", ",", "norm", "=", "'in'", ",", "\n", "activ", "=", "'relu'", ",", "pad_type", "=", "'reflect'", ",", "skip_dim", "=", "5", ")", "\n", "\n", "self", ".", "style_encoder", "=", "MLPMixer", "(", "num_classes", "=", "self", ".", "latent_dim", ",", "depth", "=", "4", ")", "\n", "# unguided distribution", "\n", "self", ".", "down_unguided", "=", "Conv_Downsample", "(", "192", ",", "2", ")", "# reduces feature map from 192x64x64 to 2x16x16=512", "\n", "\n", "self", ".", "unguided_mlp", "=", "MLP_Distribution", "(", "512", "+", "self", ".", "latent_dim", ",", "self", ".", "latent_dim", ")", "# 256x256", "\n", "\n", "\n", "self", ".", "guided_mlp", "=", "MLP_Distribution", "(", "self", ".", "latent_dim", ",", "self", ".", "latent_dim", ")", "\n", "\n", "self", ".", "decoder", "=", "DecoderUnet", "(", "num_upsamples", "=", "2", ",", "num_blocks", "=", "5", ",", "dim", "=", "192", ",", "res_norm", "=", "'adain'", ",", "activ", "=", "'relu'", ",", "\n", "pad_type", "=", "'reflect'", ",", "skip_dim", "=", "5", ",", "up_norm", "=", "'ln'", ",", "num_res_conv", "=", "0", ",", "output_dim", "=", "3", ",", "\n", "adain_net", "=", "{", "'architecture'", ":", "'MLP'", ",", "'input_dim'", ":", "self", ".", "latent_dim", ",", "'dim'", ":", "64", ",", "\n", "'num_blocks'", ":", "3", ",", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.glanet.forward": [[725, 770], ["glanet.glanet.content_encoder", "glanet.glanet.style_encoder", "glanet.glanet.down_unguided().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "glanet.glanet.unguided_mlp", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "glanet.glanet.decoder", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "glanet.glanet.style_encoder", "glanet.glanet.guided_mlp", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample.unsqueeze().unsqueeze", "glanet.glanet.down_unguided", "glanet.glanet.view", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.Independent.rsample.unsqueeze", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source", ",", "style", "=", "None", ",", "training", "=", "True", ")", ":", "\n", "# print(source.shape)", "\n", "# source content", "\n", "        ", "source_content", "=", "self", ".", "content_encoder", "(", "source", ")", "\n", "\n", "# source style", "\n", "source_style", "=", "self", ".", "style_encoder", "(", "source", ")", "\n", "# print(source_style.shape)", "\n", "source_features", "=", "source_content", "[", "0", "]", "\n", "source_features", "=", "(", "self", ".", "down_unguided", "(", "source_features", ")", ")", ".", "view", "(", "source", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "### for mlp mixer", "\n", "source_features", "=", "torch", ".", "cat", "(", "[", "source_features", ",", "source_style", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# print(source_features.shape)", "\n", "mu_unguided", ",", "log_var_unguided", "=", "self", ".", "unguided_mlp", "(", "source_features", ",", "return_everything", "=", "True", ")", "\n", "# print(mu_unguided.shape)", "\n", "# print(log_var_unguided.shape)", "\n", "\n", "unguided_distribution", "=", "Independent", "(", "Normal", "(", "loc", "=", "mu_unguided", ",", "scale", "=", "torch", ".", "exp", "(", "log_var_unguided", ")", ")", ",", "1", ")", "\n", "\n", "# guided synthesis: if we have a style image, we are doing guided synthesis", "\n", "if", "style", "is", "not", "None", ":", "\n", "# target style", "\n", "            ", "target_style", "=", "self", ".", "style_encoder", "(", "style", ")", "\n", "\n", "# guided distribution", "\n", "### for mlp mixer", "\n", "mu_guided", ",", "log_var_guided", "=", "self", ".", "guided_mlp", "(", "target_style", ".", "view", "(", "source", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "\n", "return_everything", "=", "True", ")", "\n", "guided_distribution", "=", "Independent", "(", "Normal", "(", "loc", "=", "mu_guided", ",", "scale", "=", "torch", ".", "exp", "(", "log_var_guided", ")", ")", ",", "1", ")", "\n", "\n", "feedback_vector", "=", "guided_distribution", ".", "rsample", "(", ")", "\n", "# unguided synthesis (if there is no style image)", "\n", "", "else", ":", "\n", "            ", "feedback_vector", "=", "unguided_distribution", ".", "rsample", "(", ")", "\n", "\n", "", "prediction", "=", "self", ".", "decoder", "(", "source_content", ",", "feedback_vector", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ")", "\n", "\n", "if", "training", ":", "\n", "# print( unguided_distribution.stddev.shape)", "\n", "            ", "return", "nn", ".", "Tanh", "(", ")", "(", "prediction", ")", ",", "unguided_distribution", ".", "mean", ",", "unguided_distribution", ".", "stddev", ",", "guided_distribution", ".", "mean", ",", "guided_distribution", ".", "stddev", ",", "feedback_vector", "# return everything during training", "\n", "\n", "", "else", ":", "\n", "            ", "return", "prediction", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.module_list_forward": [[417, 427], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "layer", "layer"], "function", ["None"], ["", "", "def", "module_list_forward", "(", "module_list", ":", "nn", ".", "ModuleList", ",", "tensor", ":", "torch", ".", "Tensor", ",", "\n", "spade_input", "=", "torch", ".", "zeros", "(", "1", ")", ")", ":", "\n", "    ", "if", "spade_input", ":", "\n", "        ", "for", "layer", "in", "module_list", ":", "\n", "            ", "tensor", "=", "layer", "(", "tensor", ",", "spade_input", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "layer", "in", "module_list", ":", "\n", "            ", "tensor", "=", "layer", "(", "tensor", ")", "\n", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.FeedForward": [[675, 682], ["torch.Sequential", "dense", "torch.GELU", "torch.Dropout", "dense", "torch.Dropout"], "function", ["None"], ["", "", "def", "FeedForward", "(", "dim", ",", "expansion_factor", "=", "4", ",", "dropout", "=", "0.", ",", "dense", "=", "nn", ".", "Linear", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "dense", "(", "dim", ",", "dim", "*", "expansion_factor", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "dense", "(", "dim", "*", "expansion_factor", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.MLPMixer": [[684, 698], ["torch.Sequential", "functools.partial", "einops.layers.torch.Rearrange", "torch.Linear", "torch.LayerNorm", "einops.layers.torch.Reduce", "torch.Linear", "torch.Sequential", "glanet.PreNormResidual", "glanet.PreNormResidual", "range", "glanet.FeedForward", "glanet.FeedForward"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.FeedForward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.glanet.FeedForward"], ["", "def", "MLPMixer", "(", "image_size", "=", "256", ",", "channels", "=", "3", ",", "patch_size", "=", "16", ",", "dim", "=", "512", ",", "depth", "=", "12", ",", "num_classes", "=", "1000", ",", "expansion_factor", "=", "4", ",", "dropout", "=", "0.", ")", ":", "\n", "    ", "assert", "(", "image_size", "%", "patch_size", ")", "==", "0", ",", "'image must be divisible by patch size'", "\n", "num_patches", "=", "(", "image_size", "//", "patch_size", ")", "**", "2", "\n", "chan_first", ",", "chan_last", "=", "partial", "(", "nn", ".", "Conv1d", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "Linear", "\n", "return", "nn", ".", "Sequential", "(", "\n", "Rearrange", "(", "'b c (h p1) (w p2) -> b (h w) (p1 p2 c)'", ",", "p1", "=", "patch_size", ",", "p2", "=", "patch_size", ")", ",", "\n", "nn", ".", "Linear", "(", "(", "patch_size", "**", "2", ")", "*", "channels", ",", "dim", ")", ",", "\n", "*", "[", "nn", ".", "Sequential", "(", "\n", "PreNormResidual", "(", "dim", ",", "FeedForward", "(", "num_patches", ",", "expansion_factor", ",", "dropout", ",", "chan_first", ")", ")", ",", "\n", "PreNormResidual", "(", "dim", ",", "FeedForward", "(", "dim", ",", "expansion_factor", ",", "dropout", ",", "chan_last", ")", ")", "\n", ")", "for", "_", "in", "range", "(", "depth", ")", "]", ",", "\n", "nn", ".", "LayerNorm", "(", "dim", ")", ",", "\n", "Reduce", "(", "'b n c -> b c'", ",", "'mean'", ")", ",", "\n", "nn", ".", "Linear", "(", "dim", ",", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.D_NLayersMulti.__init__": [[21, 38], ["torch.Module.__init__", "cyclegan_networks.D_NLayersMulti.get_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cyclegan_networks.D_NLayersMulti.get_layers", "cyclegan_networks.D_NLayersMulti.add_module", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "cyclegan_networks.D_NLayersMulti.get_layers", "cyclegan_networks.D_NLayersMulti.add_module", "round", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.D_NLayersMulti.get_layers", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.D_NLayersMulti.get_layers", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.D_NLayersMulti.get_layers"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "num_D", "=", "1", ")", ":", "\n", "        ", "super", "(", "D_NLayersMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# st()", "\n", "self", ".", "num_D", "=", "num_D", "\n", "if", "num_D", "==", "1", ":", "\n", "            ", "layers", "=", "self", ".", "get_layers", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "            ", "layers", "=", "self", ".", "get_layers", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ")", "\n", "self", ".", "add_module", "(", "\"model_0\"", ",", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "self", ".", "down", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "\n", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_D", ")", ":", "\n", "                ", "ndf_i", "=", "int", "(", "round", "(", "ndf", "/", "(", "2", "**", "i", ")", ")", ")", "\n", "layers", "=", "self", ".", "get_layers", "(", "input_nc", ",", "ndf_i", ",", "n_layers", ",", "norm_layer", ")", "\n", "self", ".", "add_module", "(", "\"model_%d\"", "%", "i", ",", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.D_NLayersMulti.get_layers": [[39, 70], ["range", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "", "", "def", "get_layers", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "\n", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "\n", "\n", "return", "sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.D_NLayersMulti.forward": [[71, 82], ["range", "cyclegan_networks.D_NLayersMulti.model", "getattr", "result.append", "getattr.", "cyclegan_networks.D_NLayersMulti.down"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "num_D", "==", "1", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "", "result", "=", "[", "]", "\n", "down", "=", "input", "\n", "for", "i", "in", "range", "(", "self", ".", "num_D", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "\"model_%d\"", "%", "i", ")", "\n", "result", ".", "append", "(", "model", "(", "down", ")", ")", "\n", "if", "i", "!=", "self", ".", "num_D", "-", "1", ":", "\n", "                ", "down", "=", "self", ".", "down", "(", "down", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.NLayerDiscriminator.__init__": [[87, 141], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "cyclegan_networks.Downsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "cyclegan_networks.Downsample"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "no_antialias", "=", "False", ")", ":", "\n", "        ", "\"\"\"Construct a PatchGAN discriminator\n\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            n_layers (int)  -- the number of conv layers in the discriminator\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "if", "no_antialias", ":", "\n", "            ", "sequence", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "", "else", ":", "\n", "            ", "sequence", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "Downsample", "(", "ndf", ")", "\n", "# nn.AvgPool2d(3, stride=2, padding=[1, 1], count_include_pad=False)", "\n", "]", "\n", "\n", "", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "# gradually increase the number of filters", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "if", "no_antialias", ":", "\n", "                ", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "Downsample", "(", "ndf", "*", "nf_mult", ")", "\n", "# nn.AvgPool2d(3, stride=2, padding=[1, 1], count_include_pad=False)", "\n", "]", "\n", "\n", "", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "# output 1 channel prediction map", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.NLayerDiscriminator.forward": [[142, 145], ["cyclegan_networks.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.PixelDiscriminator.__init__": [[150, 173], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a 1x1 PatchGAN discriminator\n\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "net", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.PixelDiscriminator.forward": [[174, 177], ["cyclegan_networks.PixelDiscriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "return", "self", ".", "net", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.ResnetGenerator.__init__": [[188, 252], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "cyclegan_networks.ResnetBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "cyclegan_networks.Downsample", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "cyclegan_networks.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "\n", "padding_type", "=", "'reflect'", ",", "no_antialias", "=", "False", ",", "no_antialias_up", "=", "False", ",", "opt", "=", "None", ")", ":", "\n", "        ", "\"\"\"Construct a Resnet-based generator\n\n        Parameters:\n            input_nc (int)      -- the number of channels in input images\n            output_nc (int)     -- the number of channels in output images\n            ngf (int)           -- the number of filters in the last conv layer\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers\n            n_blocks (int)      -- the number of ResNet blocks\n            padding_type (str)  -- the name of padding layer in conv layers: reflect | replicate | zero\n        \"\"\"", "\n", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add downsampling layers", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "if", "no_antialias", ":", "\n", "                ", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "Downsample", "(", "ngf", "*", "mult", "*", "2", ")", "\n", "# nn.AvgPool2d(kernel_size=2, stride=2)", "\n", "]", "\n", "\n", "", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "# add ResNet blocks", "\n", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add upsampling layers", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "if", "no_antialias_up", ":", "\n", "                ", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "+=", "[", "\n", "Upsample", "(", "ngf", "*", "mult", ")", ",", "\n", "# nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True),", "\n", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.ResnetGenerator.forward": [[253, 267], ["len", "enumerate", "cyclegan_networks.ResnetGenerator.model", "layer", "feats.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "layers", "=", "[", "]", ",", "encode_only", "=", "False", ")", ":", "\n", "        ", "if", "len", "(", "layers", ")", ">", "0", ":", "\n", "            ", "feat", "=", "x", "\n", "feats", "=", "[", "]", "\n", "for", "layer_id", ",", "layer", "in", "enumerate", "(", "self", ".", "model", ")", ":", "\n", "                ", "feat", "=", "layer", "(", "feat", ")", "\n", "if", "layer_id", "in", "layers", ":", "\n", "                    ", "feats", ".", "append", "(", "feat", ")", "\n", "", "if", "layer_id", "==", "layers", "[", "-", "1", "]", "and", "encode_only", ":", "\n", "                    ", "return", "None", ",", "feats", "\n", "", "", "return", "feat", ",", "feats", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "out", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.ResnetBlock.__init__": [[275, 285], ["torch.Module.__init__", "cyclegan_networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.ResnetBlock.build_conv_block"], ["def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Initialize the Resnet block\n\n        A resnet block is a conv block with skip connections\n        We construct a conv block with build_conv_block function,\n        and implement skip connections in <forward> function.\n        Original Resnet paper: https://arxiv.org/pdf/1512.03385.pdf\n        \"\"\"", "\n", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.ResnetBlock.build_conv_block": [[286, 325], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Construct a convolutional block.\n\n        Parameters:\n            dim (int)           -- the number of channels in the conv layer.\n            padding_type (str)  -- the name of padding layer: reflect | replicate | zero\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers.\n            use_bias (bool)     -- if the conv layer uses bias or not\n\n        Returns a conv block (with a conv layer, a normalization layer, and a non-linearity layer (ReLU))\n        \"\"\"", "\n", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.ResnetBlock.forward": [[326, 330], ["cyclegan_networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function (with skip connections)\"\"\"", "\n", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "# add skip connections", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.Downsample.__init__": [[358, 372], ["torch.Module.__init__", "int", "cyclegan_networks.get_filter", "cyclegan_networks.Downsample.register_buffer", "int", "int", "int", "int", "filt[].repeat", "cyclegan_networks.get_pad_layer", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.get_filter", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.get_pad_layer"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "pad_type", "=", "'reflect'", ",", "filt_size", "=", "3", ",", "stride", "=", "2", ",", "pad_off", "=", "0", ")", ":", "\n", "        ", "super", "(", "Downsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filt_size", "=", "filt_size", "\n", "self", ".", "pad_off", "=", "pad_off", "\n", "self", ".", "pad_sizes", "=", "[", "int", "(", "1.", "*", "(", "filt_size", "-", "1", ")", "/", "2", ")", ",", "int", "(", "np", ".", "ceil", "(", "1.", "*", "(", "filt_size", "-", "1", ")", "/", "2", ")", ")", ",", "int", "(", "1.", "*", "(", "filt_size", "-", "1", ")", "/", "2", ")", ",", "int", "(", "np", ".", "ceil", "(", "1.", "*", "(", "filt_size", "-", "1", ")", "/", "2", ")", ")", "]", "\n", "self", ".", "pad_sizes", "=", "[", "pad_size", "+", "pad_off", "for", "pad_size", "in", "self", ".", "pad_sizes", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "off", "=", "int", "(", "(", "self", ".", "stride", "-", "1", ")", "/", "2.", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "\n", "filt", "=", "get_filter", "(", "filt_size", "=", "self", ".", "filt_size", ")", "\n", "self", ".", "register_buffer", "(", "'filt'", ",", "filt", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "(", "self", ".", "channels", ",", "1", ",", "1", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "pad", "=", "get_pad_layer", "(", "pad_type", ")", "(", "self", ".", "pad_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.Downsample.forward": [[373, 381], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "cyclegan_networks.Downsample.pad", "cyclegan_networks.Downsample.pad"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "(", "self", ".", "filt_size", "==", "1", ")", ":", "\n", "            ", "if", "(", "self", ".", "pad_off", "==", "0", ")", ":", "\n", "                ", "return", "inp", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "pad", "(", "inp", ")", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", "\n", "", "", "else", ":", "\n", "            ", "return", "F", ".", "conv2d", "(", "self", ".", "pad", "(", "inp", ")", ",", "self", ".", "filt", ",", "stride", "=", "self", ".", "stride", ",", "groups", "=", "inp", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.Upsample2.__init__": [[384, 388], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "mode", "=", "'nearest'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "factor", "=", "scale_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.Upsample2.forward": [[389, 391], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "factor", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.Upsample.__init__": [[394, 407], ["torch.Module.__init__", "int", "int", "cyclegan_networks.Upsample.register_buffer", "numpy.mod", "cyclegan_networks.get_filter", "filt[].repeat", "cyclegan_networks.get_pad_layer"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.get_filter", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.get_pad_layer"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "pad_type", "=", "'repl'", ",", "filt_size", "=", "4", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filt_size", "=", "filt_size", "\n", "self", ".", "filt_odd", "=", "np", ".", "mod", "(", "filt_size", ",", "2", ")", "==", "1", "\n", "self", ".", "pad_size", "=", "int", "(", "(", "filt_size", "-", "1", ")", "/", "2", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "off", "=", "int", "(", "(", "self", ".", "stride", "-", "1", ")", "/", "2.", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "\n", "filt", "=", "get_filter", "(", "filt_size", "=", "self", ".", "filt_size", ")", "*", "(", "stride", "**", "2", ")", "\n", "self", ".", "register_buffer", "(", "'filt'", ",", "filt", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "(", "self", ".", "channels", ",", "1", ",", "1", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "pad", "=", "get_pad_layer", "(", "pad_type", ")", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.Upsample.forward": [[408, 414], ["torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "cyclegan_networks.Upsample.pad"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv_transpose2d"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "ret_val", "=", "F", ".", "conv_transpose2d", "(", "self", ".", "pad", "(", "inp", ")", ",", "self", ".", "filt", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", "+", "self", ".", "pad_size", ",", "groups", "=", "inp", ".", "shape", "[", "1", "]", ")", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", "\n", "if", "(", "self", ".", "filt_odd", ")", ":", "\n", "            ", "return", "ret_val", "\n", "", "else", ":", "\n", "            ", "return", "ret_val", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.Identity.forward": [[429, 431], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.get_filter": [[335, 355], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.array", "torch.sum", "torch.sum", "torch.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "get_filter", "(", "filt_size", "=", "3", ")", ":", "\n", "    ", "if", "(", "filt_size", "==", "1", ")", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "1.", ",", "]", ")", "\n", "", "elif", "(", "filt_size", "==", "2", ")", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "1.", ",", "1.", "]", ")", "\n", "", "elif", "(", "filt_size", "==", "3", ")", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "1.", ",", "2.", ",", "1.", "]", ")", "\n", "", "elif", "(", "filt_size", "==", "4", ")", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "1.", ",", "3.", ",", "3.", ",", "1.", "]", ")", "\n", "", "elif", "(", "filt_size", "==", "5", ")", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "1.", ",", "4.", ",", "6.", ",", "4.", ",", "1.", "]", ")", "\n", "", "elif", "(", "filt_size", "==", "6", ")", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "1.", ",", "5.", ",", "10.", ",", "10.", ",", "5.", ",", "1.", "]", ")", "\n", "", "elif", "(", "filt_size", "==", "7", ")", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "1.", ",", "6.", ",", "15.", ",", "20.", ",", "15.", ",", "6.", ",", "1.", "]", ")", "\n", "\n", "", "filt", "=", "torch", ".", "Tensor", "(", "a", "[", ":", ",", "None", "]", "*", "a", "[", "None", ",", ":", "]", ")", "\n", "filt", "=", "filt", "/", "torch", ".", "sum", "(", "filt", ")", "\n", "\n", "return", "filt", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.get_pad_layer": [[416, 426], ["print"], "function", ["None"], ["", "", "", "def", "get_pad_layer", "(", "pad_type", ")", ":", "\n", "    ", "if", "(", "pad_type", "in", "[", "'refl'", ",", "'reflect'", "]", ")", ":", "\n", "        ", "PadLayer", "=", "nn", ".", "ReflectionPad2d", "\n", "", "elif", "(", "pad_type", "in", "[", "'repl'", ",", "'replicate'", "]", ")", ":", "\n", "        ", "PadLayer", "=", "nn", ".", "ReplicationPad2d", "\n", "", "elif", "(", "pad_type", "==", "'zero'", ")", ":", "\n", "        ", "PadLayer", "=", "nn", ".", "ZeroPad2d", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Pad type [%s] not recognized'", "%", "pad_type", ")", "\n", "", "return", "PadLayer", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.get_norm_layer": [[433, 451], ["functools.partial", "functools.partial", "NotImplementedError", "cyclegan_networks.Identity"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "\"\"\"Return a normalization layer\n\n    Parameters:\n        norm_type (str) -- the name of the normalization layer: batch | instance | none\n\n    For BatchNorm, we use learnable affine parameters and track running statistics (mean/stddev).\n    For InstanceNorm, we do not use learnable affine parameters. We do not track running statistics.\n    \"\"\"", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "def", "norm_layer", "(", "x", ")", ":", "return", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.init_weights": [[453, 487], ["print", "net.apply", "hasattr", "print", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"Initialize network weights.\n\n    Parameters:\n        net (network)   -- network to be initialized\n        init_type (str) -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        init_gain (float)    -- scaling factor for normal, xavier and orthogonal.\n\n    We use 'normal' in the original pix2pix and CycleGAN paper. But xavier and kaiming might\n    work better for some applications. Feel free to try yourself.\n    \"\"\"", "\n", "def", "init_func", "(", "m", ")", ":", "# define the initialization function", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "debug", ":", "\n", "                ", "print", "(", "classname", ")", "\n", "", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "# BatchNorm Layer's weight is not a matrix; only normal distribution applies.", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "# apply the initialization function <init_func>", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.init_net": [[489, 505], ["len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "net.to", "cyclegan_networks.init_weights"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ",", "debug", "=", "False", ",", "initialize_weights", "=", "True", ")", ":", "\n", "    ", "\"\"\"Initialize a network: 1. register CPU/GPU device (with multi-GPU support); 2. initialize the network weights\n    Parameters:\n        net (network)      -- the network to be initialized\n        init_type (str)    -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        gain (float)       -- scaling factor for normal, xavier and orthogonal.\n        gpu_ids (int list) -- which GPUs the network runs on: e.g., 0,1,2\n\n    Return an initialized network.\n    \"\"\"", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "if", "initialize_weights", ":", "\n", "        ", "init_weights", "(", "net", ",", "init_type", ",", "init_gain", "=", "init_gain", ",", "debug", "=", "debug", ")", "\n", "", "return", "net", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.modify_commandline_options": [[20, 44], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param parser: original options parser\n        :return: the modified parser\n        \"\"\"", "\n", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--attn_layers'", ",", "type", "=", "str", ",", "default", "=", "'4, 7, 9'", ",", "help", "=", "'compute spatial loss on which layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_nums'", ",", "type", "=", "float", ",", "default", "=", "256", ",", "help", "=", "'select how many patches for shape consistency, -1 use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'patch size to calculate the attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_mode'", ",", "type", "=", "str", ",", "default", "=", "'cos'", ",", "help", "=", "'which loss type is used, cos | l1 | info'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'normalize the feature map for FLSeSim'", ")", "\n", "parser", ".", "add_argument", "(", "'--learned_attn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use the learnable attention map'", ")", "\n", "parser", ".", "add_argument", "(", "'--augment'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use data augmentation for contrastive learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--T'", ",", "type", "=", "float", ",", "default", "=", "0.07", ",", "help", "=", "'temperature for similarity'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_spatial'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for spatially-correlative loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_spatial_idt'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight for idt spatial loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_perceptual'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight for feature consistency loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_style'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight for style loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'use identity mapping'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_gradient'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight for the gradient penalty'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.__init__": [[45, 111], ["base_model.BaseModel.__init__", "networks.define_transG", "losses.VGG16().to", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "sc_model.SCModel.dino.load_state_dict", "sc_model.SCModel.dino.to", "networks.define_D", "util.image_pool.ImagePool", "losses.GANLoss().to", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "losses.StyleLoss().to", "losses.VGGLoss().to", "losses.SpatialCorrelativeLoss().to", "losses.Normalization", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "sc_model.SCModel.optimizers.append", "sc_model.SCModel.optimizers.append", "losses.VGG16", "int", "sc_model.SCModel.visual_names.append", "sc_model.SCModel.loss_names.append", "sc_model.SCModel.model_names.append", "sc_model.SCModel.loss_names.append", "sc_model.SCModel.set_requires_grad", "itertools.chain", "itertools.chain", "sc_model.SCModel.opt.attn_layers.split", "sc_model.SCModel.loss_names.append", "sc_model.SCModel.loss_names.append", "losses.GANLoss", "losses.StyleLoss", "losses.VGGLoss", "losses.SpatialCorrelativeLoss", "sc_model.SCModel.netG.parameters", "sc_model.SCModel.netD.parameters"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_transG", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_D", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the translation losses\n        :param opt: stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "# specify the training losses you want to print out", "\n", "self", ".", "loss_names", "=", "[", "'style'", ",", "'G_s'", ",", "'per'", ",", "'D_real'", ",", "'D_fake'", ",", "'G_GAN'", "]", "\n", "# specify the images you want to save/display", "\n", "self", ".", "visual_names", "=", "[", "'real_A'", ",", "'fake_B'", ",", "'real_B'", ",", "'mask'", "]", "\n", "# for test remove mask", "\n", "# self.visual_names = ['real_A', 'fake_B' , 'real_B']", "\n", "\n", "# specify the models you want to save to the disk", "\n", "self", ".", "model_names", "=", "[", "'G'", ",", "'D'", "]", "if", "self", ".", "isTrain", "else", "[", "'G'", "]", "\n", "# define the networks", "\n", "# self.netG = networks.define_G(opt.input_nc, opt.output_nc, opt.ngf, opt.netG, opt.norm, not opt.no_dropout,", "\n", "#                         opt.init_type, opt.init_gain, opt.no_antialias, opt.no_antialias_up, self.gpu_ids, opt)", "\n", "self", ".", "netG", "=", "networks", ".", "define_transG", "(", "self", ".", "gpu_ids", ")", "\n", "### pretrain module", "\n", "self", ".", "netPre", "=", "losses", ".", "VGG16", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "dino", "=", "vits", ".", "__dict__", "[", "'vit_small'", "]", "(", "patch_size", "=", "8", ",", "num_classes", "=", "0", ")", "\n", "url", "=", "\"dino_deitsmall8_300ep_pretrain/dino_deitsmall8_300ep_pretrain.pth\"", "# model used for visualizations in our paper", "\n", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/\"", "+", "url", ")", "\n", "self", ".", "dino", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "self", ".", "dino", ".", "to", "(", "self", ".", "device", ")", "\n", "# define the training process", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "\n", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "opt", ".", "no_antialias", ",", "self", ".", "gpu_ids", ",", "opt", ")", "\n", "self", ".", "attn_layers", "=", "[", "int", "(", "i", ")", "for", "i", "in", "self", ".", "opt", ".", "attn_layers", ".", "split", "(", "','", ")", "]", "\n", "if", "opt", ".", "lambda_identity", ">", "0.0", "or", "opt", ".", "lambda_spatial_idt", ">", "0.0", ":", "\n", "# only works when input and output images have the same number of channels", "\n", "                ", "self", ".", "visual_names", ".", "append", "(", "'idt_B'", ")", "\n", "if", "opt", ".", "lambda_identity", ">", "0.0", ":", "\n", "                    ", "self", ".", "loss_names", ".", "append", "(", "'idt_B'", ")", "\n", "", "if", "opt", ".", "lambda_spatial_idt", ">", "0.0", ":", "\n", "                    ", "self", ".", "loss_names", ".", "append", "(", "'G_s_idt_B'", ")", "\n", "", "assert", "(", "opt", ".", "input_nc", "==", "opt", ".", "output_nc", ")", "\n", "", "if", "opt", ".", "lambda_gradient", ">", "0.0", ":", "\n", "                ", "self", ".", "loss_names", ".", "append", "(", "'D_Gradient'", ")", "\n", "", "self", ".", "fake_B_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "# create image buffer to store previously generated images", "\n", "\n", "\n", "# define the loss function", "\n", "self", ".", "criterionGAN", "=", "losses", ".", "GANLoss", "(", "opt", ".", "gan_mode", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionIdt", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionStyle", "=", "losses", ".", "StyleLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionFeature", "=", "losses", ".", "VGGLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "### opt.learned_attn SpatialCorrelativeLoss(use_conv)", "\n", "self", ".", "criterionSpatial", "=", "losses", ".", "SpatialCorrelativeLoss", "(", "opt", ".", "loss_mode", ",", "opt", ".", "patch_nums", ",", "opt", ".", "patch_size", ",", "opt", ".", "use_norm", ",", "\n", "opt", ".", "learned_attn", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ",", "T", "=", "opt", ".", "T", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "normalization", "=", "losses", ".", "Normalization", "(", "self", ".", "device", ")", "\n", "# define the contrastive loss", "\n", "if", "opt", ".", "learned_attn", ":", "\n", "                ", "self", ".", "netF", "=", "self", ".", "criterionSpatial", "\n", "self", ".", "model_names", ".", "append", "(", "'F'", ")", "\n", "self", ".", "loss_names", ".", "append", "(", "'spatial'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netPre", "]", ",", "False", ")", "\n", "\n", "# initialize optimizers", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.data_dependent_initialize": [[112, 133], ["sc_model.SCModel.set_input", "sc_model.SCModel.forward", "sc_model.SCModel.real_A.size", "max", "sc_model.SCModel.backward_G", "sc_model.SCModel.optimizer_G.zero_grad", "len", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "sc_model.SCModel.optimizers.append", "sc_model.SCModel.optimizer_F.zero_grad", "list", "list", "filter", "filter", "sc_model.SCModel.netPre.parameters", "sc_model.SCModel.netF.parameters"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.set_input", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.backward_G"], ["", "", "def", "data_dependent_initialize", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        The learnable spatially-correlative map is defined in terms of the shape of the intermediate, extracted features\n        of a given network (encoder or pretrained VGG16). Because of this, the weights of spatial are initialized at the\n        first feedforward pass with some input images\n        :return:\n        \"\"\"", "\n", "self", ".", "set_input", "(", "data", ")", "\n", "bs_per_gpu", "=", "self", ".", "real_A", ".", "size", "(", "0", ")", "//", "max", "(", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ",", "1", ")", "\n", "self", ".", "real_A", "=", "self", ".", "real_A", "[", ":", "bs_per_gpu", "]", "\n", "self", ".", "real_B", "=", "self", ".", "real_B", "[", ":", "bs_per_gpu", "]", "\n", "self", ".", "forward", "(", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "opt", ".", "learned_attn", ":", "\n", "                ", "self", ".", "optimizer_F", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "netPre", ".", "parameters", "(", ")", ")", ")", ",", "'lr'", ":", "self", ".", "opt", ".", "lr", "*", "0.0", "}", ",", "\n", "{", "'params'", ":", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "netF", ".", "parameters", "(", ")", ")", ")", "}", "]", ",", "\n", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "self", ".", "opt", ".", "beta2", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_F", ")", "\n", "self", ".", "optimizer_F", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.set_input": [[134, 147], ["input[].to", "input[].to", "input[].to", "input[].to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Unpack input data from the dataloader and perform necessary pre-processing steps\n        :param input: include the data itself and its metadata information\n        :return:\n        \"\"\"", "\n", "AtoB", "=", "self", ".", "opt", ".", "direction", "==", "'AtoB'", "\n", "self", ".", "real_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "opt", ".", "isTrain", "and", "self", ".", "opt", ".", "augment", ":", "\n", "            ", "self", ".", "aug_A", "=", "input", "[", "'A_aug'", "if", "AtoB", "else", "'B_aug'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "aug_B", "=", "input", "[", "'B_aug'", "if", "AtoB", "else", "'A_aug'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.forward": [[148, 171], ["sc_model.SCModel.netG", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent", "sc_model.SCModel.dino.get_last_selfattention", "attentionsrc_src_dino[].reshape", "attentionsrc_src_dino.reshape.reshape.reshape", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.repeat().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "attentionsrc_src_dino.reshape.reshape.unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.repeat", "sc_model.SCModel.real_A.size", "sc_model.SCModel.real_A.size"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.get_last_selfattention", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass\"\"\"", "\n", "self", ".", "real", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "real_B", ")", ",", "dim", "=", "0", ")", "if", "(", "self", ".", "opt", ".", "lambda_identity", "+", "self", ".", "opt", ".", "lambda_spatial_idt", ">", "0", ")", "and", "self", ".", "opt", ".", "isTrain", "else", "self", ".", "real_A", "\n", "#### un_guided", "\n", "self", ".", "fake", ",", "self", ".", "unguided_mean", ",", "self", ".", "unguided_sigma", ",", "self", ".", "posterior_mean", ",", "self", ".", "posterior_sigma", ",", "self", ".", "posterior_sample", "=", "self", ".", "netG", "(", "self", ".", "real", ",", "self", ".", "real_B", ",", "True", ")", "\n", "self", ".", "unguided_distribution", "=", "Independent", "(", "Normal", "(", "self", ".", "unguided_mean", ",", "self", ".", "unguided_sigma", ")", ",", "1", ")", "\n", "## add dino attention", "\n", "w_featmap", "=", "self", ".", "real_A", ".", "shape", "[", "-", "2", "]", "//", "8", "\n", "h_featmap", "=", "self", ".", "real_A", ".", "shape", "[", "-", "1", "]", "//", "8", "\n", "attentionsrc_src_dino", "=", "self", ".", "dino", ".", "get_last_selfattention", "(", "self", ".", "real_A", ")", "\n", "nh", "=", "attentionsrc_src_dino", ".", "shape", "[", "1", "]", "# number of head", "\n", "attentionsrc_src_dino", "=", "attentionsrc_src_dino", "[", "0", ",", ":", ",", "0", ",", "1", ":", "]", ".", "reshape", "(", "nh", ",", "-", "1", ")", "\n", "# interpolate", "\n", "attentionsrc_src_dino", "=", "attentionsrc_src_dino", ".", "reshape", "(", "nh", ",", "w_featmap", ",", "h_featmap", ")", "\n", "mask_", "=", "nn", ".", "functional", ".", "interpolate", "(", "attentionsrc_src_dino", ".", "unsqueeze", "(", "0", ")", ",", "scale_factor", "=", "8", ",", "mode", "=", "\"nearest\"", ")", "[", "0", "]", "\n", "### Regulation", "\n", "mask", "=", "mask_", "[", "0", "]", "\n", "mask", "=", "(", "mask", "-", "torch", ".", "min", "(", "mask", ")", ")", "/", "(", "torch", ".", "max", "(", "mask", ")", "-", "torch", ".", "min", "(", "mask", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "fake", "[", ":", "self", ".", "real_A", ".", "size", "(", "0", ")", "]", "\n", "if", "(", "self", ".", "opt", ".", "lambda_identity", "+", "self", ".", "opt", ".", "lambda_spatial_idt", ">", "0", ")", "and", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "idt_B", "=", "self", ".", "fake", "[", "self", ".", "real_A", ".", "size", "(", "0", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.backward_F": [[172, 185], ["sc_model.SCModel.Spatial_Loss", "sc_model.SCModel.loss_spatial.backward", "sc_model.SCModel.normalization", "sc_model.SCModel.normalization", "sc_model.SCModel.normalization", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sc_model.SCModel.normalization", "sc_model.SCModel.normalization", "sc_model.SCModel.fake_B.detach"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.Spatial_Loss", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward"], ["", "", "def", "backward_F", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the contrastive loss for learned spatially-correlative loss\n        \"\"\"", "\n", "norm_real_A", ",", "norm_real_B", ",", "norm_fake_B", "=", "self", ".", "normalization", "(", "(", "self", ".", "real_A", "+", "1", ")", "*", "0.5", ")", ",", "self", ".", "normalization", "(", "(", "self", ".", "real_B", "+", "1", ")", "*", "0.5", ")", ",", "self", ".", "normalization", "(", "(", "self", ".", "fake_B", ".", "detach", "(", ")", "+", "1", ")", "*", "0.5", ")", "\n", "if", "self", ".", "opt", ".", "augment", ":", "\n", "            ", "norm_aug_A", ",", "norm_aug_B", "=", "self", ".", "normalization", "(", "(", "self", ".", "aug_A", "+", "1", ")", "*", "0.5", ")", ",", "self", ".", "normalization", "(", "(", "self", ".", "aug_B", "+", "1", ")", "*", "0.5", ")", "\n", "norm_real_A", "=", "torch", ".", "cat", "(", "[", "norm_real_A", ",", "norm_real_A", "]", ",", "dim", "=", "0", ")", "\n", "norm_fake_B", "=", "torch", ".", "cat", "(", "[", "norm_fake_B", ",", "norm_aug_A", "]", ",", "dim", "=", "0", ")", "\n", "norm_real_B", "=", "torch", ".", "cat", "(", "[", "norm_real_B", ",", "norm_aug_B", "]", ",", "dim", "=", "0", ")", "\n", "", "self", ".", "loss_spatial", "=", "self", ".", "Spatial_Loss", "(", "self", ".", "netPre", ",", "self", ".", "mask", ",", "norm_real_A", ",", "norm_fake_B", ",", "norm_real_B", ")", "\n", "\n", "self", ".", "loss_spatial", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.backward_D_basic": [[186, 210], ["real.requires_grad_", "netD", "sc_model.SCModel.criterionGAN", "netD", "sc_model.SCModel.criterionGAN", "loss_D.backward", "losses.cal_gradient_penalty"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.cal_gradient_penalty"], ["", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "        ", "\"\"\"\n        Calculate GAN loss for the discriminator\n        :param netD: the discriminator D\n        :param real: real images\n        :param fake: images generated by a generator\n        :return: discriminator loss\n        \"\"\"", "\n", "# real", "\n", "real", ".", "requires_grad_", "(", ")", "\n", "pred_real", "=", "netD", "(", "real", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ",", "is_dis", "=", "True", ")", "\n", "# fake", "\n", "pred_fake", "=", "netD", "(", "fake", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ",", "is_dis", "=", "True", ")", "\n", "# combined loss", "\n", "loss_D", "=", "(", "self", ".", "loss_D_real", "+", "self", ".", "loss_D_fake", ")", "*", "0.5", "\n", "# gradient penalty", "\n", "if", "self", ".", "opt", ".", "lambda_gradient", ">", "0.0", ":", "\n", "            ", "self", ".", "loss_D_Gradient", ",", "_", "=", "losses", ".", "cal_gradient_penalty", "(", "netD", ",", "real", ",", "fake", ",", "real", ".", "device", ",", "lambda_gp", "=", "self", ".", "opt", ".", "lambda_gradient", ")", "#", "\n", "loss_D", "+=", "self", ".", "loss_D_Gradient", "\n", "", "loss_D", ".", "backward", "(", ")", "\n", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.backward_D": [[211, 215], ["sc_model.SCModel.fake_B_pool.query", "sc_model.SCModel.backward_D_basic", "sc_model.SCModel.detach"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.backward_D_basic"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate the GAN loss for discriminator\"\"\"", "\n", "fake_B", "=", "self", ".", "fake_B_pool", ".", "query", "(", "self", ".", "fake_B", ")", "\n", "self", ".", "loss_D_A", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD", ",", "self", ".", "real_B", ",", "fake_B", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.backward_G": [[216, 249], ["sc_model.SCModel.criterionGAN", "sc_model.SCModel.normalization", "sc_model.SCModel.normalization", "sc_model.SCModel.normalization", "sc_model.SCModel.loss_G.backward", "sc_model.SCModel.netD", "sc_model.SCModel.normalization", "sc_model.MoG_KL_Unit_Gaussian", "sc_model.SCModel.criterionStyle", "sc_model.SCModel.criterionFeature", "sc_model.SCModel.Spatial_Loss", "sc_model.SCModel.Spatial_Loss", "sc_model.SCModel.criterionIdt", "log_prob_modified().mean", "sc_model.log_prob_modified"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.MoG_KL_Unit_Gaussian", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.Spatial_Loss", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.Spatial_Loss", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.log_prob_modified"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate the loss for generator G_A\"\"\"", "\n", "l_style", "=", "self", ".", "opt", ".", "lambda_style", "\n", "l_per", "=", "self", ".", "opt", ".", "lambda_perceptual", "\n", "l_sptial", "=", "self", ".", "opt", ".", "lambda_spatial", "\n", "l_idt", "=", "self", ".", "opt", ".", "lambda_identity", "\n", "l_spatial_idt", "=", "self", ".", "opt", ".", "lambda_spatial_idt", "\n", "\n", "# GAN loss", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD", "(", "self", ".", "fake_B", ")", ",", "True", ")", "\n", "# different structural loss", "\n", "norm_real_A", "=", "self", ".", "normalization", "(", "(", "self", ".", "real_A", "+", "1", ")", "*", "0.5", ")", "\n", "norm_fake_B", "=", "self", ".", "normalization", "(", "(", "self", ".", "fake_B", "+", "1", ")", "*", "0.5", ")", "\n", "norm_real_B", "=", "self", ".", "normalization", "(", "(", "self", ".", "real_B", "+", "1", ")", "*", "0.5", ")", "\n", "self", ".", "loss_style", "=", "self", ".", "criterionStyle", "(", "norm_real_B", ",", "norm_fake_B", ")", "*", "l_style", "if", "l_style", ">", "0", "else", "0", "\n", "self", ".", "loss_per", "=", "self", ".", "criterionFeature", "(", "norm_real_A", ",", "norm_fake_B", ")", "*", "l_per", "if", "l_per", ">", "0", "else", "0", "\n", "self", ".", "loss_G_s", "=", "self", ".", "Spatial_Loss", "(", "self", ".", "netPre", ",", "self", ".", "mask", ",", "norm_real_A", ",", "norm_fake_B", ",", "None", ")", "*", "l_sptial", "if", "l_sptial", ">", "0", "else", "0", "\n", "# identity loss", "\n", "if", "l_spatial_idt", ">", "0", ":", "\n", "            ", "norm_fake_idt_B", "=", "self", ".", "normalization", "(", "(", "self", ".", "idt_B", "+", "1", ")", "*", "0.5", ")", "\n", "self", ".", "loss_G_s_idt_B", "=", "self", ".", "Spatial_Loss", "(", "self", ".", "netPre", ",", "self", ".", "mask", ",", "norm_real_B", ",", "norm_fake_idt_B", ",", "None", ")", "*", "l_spatial_idt", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_G_s_idt_B", "=", "0", "\n", "", "self", ".", "loss_idt_B", "=", "self", ".", "criterionIdt", "(", "self", ".", "real_B", ",", "self", ".", "idt_B", ")", "*", "l_idt", "if", "l_idt", ">", "0", "else", "0", "\n", "\n", "self", ".", "unguided_loss", "=", "0.1", "*", "MoG_KL_Unit_Gaussian", "(", "self", ".", "unguided_distribution", ")", "\n", "\n", "self", ".", "likelihood_posterior_loss", "=", "0.1", "*", "-", "log_prob_modified", "(", "self", ".", "unguided_distribution", ",", "\n", "self", ".", "posterior_sample", ")", ".", "mean", "(", ")", "\n", "self", ".", "global_loss", "=", "self", ".", "unguided_loss", "+", "self", ".", "likelihood_posterior_loss", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_GAN", "+", "self", ".", "loss_style", "+", "self", ".", "loss_per", "+", "self", ".", "loss_G_s", "+", "self", ".", "loss_G_s_idt_B", "+", "self", ".", "loss_idt_B", "+", "1", "*", "self", ".", "global_loss", "\n", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.optimize_parameters": [[250, 271], ["sc_model.SCModel.forward", "sc_model.SCModel.set_requires_grad", "sc_model.SCModel.optimizer_D.zero_grad", "sc_model.SCModel.backward_D", "sc_model.SCModel.optimizer_D.step", "sc_model.SCModel.set_requires_grad", "sc_model.SCModel.optimizer_G.zero_grad", "sc_model.SCModel.backward_G", "sc_model.SCModel.optimizer_G.step", "sc_model.SCModel.set_requires_grad", "sc_model.SCModel.optimizer_F.zero_grad", "sc_model.SCModel.backward_F", "sc_model.SCModel.optimizer_F.step", "sc_model.SCModel.set_requires_grad"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.backward_D", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.backward_G", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.backward_F", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights\"\"\"", "\n", "# forward", "\n", "self", ".", "forward", "(", ")", "\n", "if", "self", ".", "opt", ".", "learned_attn", ":", "\n", "            ", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netF", ",", "self", ".", "netPre", "]", ",", "True", ")", "\n", "self", ".", "optimizer_F", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_F", "(", ")", "\n", "self", ".", "optimizer_F", ".", "step", "(", ")", "\n", "# D_A", "\n", "", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD", "]", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "# G_A", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD", "]", ",", "False", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "opt", ".", "learned_attn", ":", "\n", "            ", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netF", ",", "self", ".", "netPre", "]", ",", "False", ")", "\n", "", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.SCModel.Spatial_Loss": [[272, 295], ["len", "net", "net", "enumerate", "net", "zip", "sc_model.SCModel.criterionSpatial.loss", "sc_model.SCModel.mean", "sc_model.SCModel.criterionSpatial.update_init_", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.loss", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.update_init_"], ["", "def", "Spatial_Loss", "(", "self", ",", "net", ",", "mask", ",", "src", ",", "tgt", ",", "other", "=", "None", ")", ":", "\n", "        ", "\"\"\"given the source and target images to calculate the spatial similarity and dissimilarity loss\"\"\"", "\n", "n_layers", "=", "len", "(", "self", ".", "attn_layers", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "src", "=", "src", "*", "mask", "\n", "tgt", "=", "tgt", "*", "mask", "\n", "", "feats_src", "=", "net", "(", "src", ",", "self", ".", "attn_layers", ",", "encode_only", "=", "True", ")", "\n", "feats_tgt", "=", "net", "(", "tgt", ",", "self", ".", "attn_layers", ",", "encode_only", "=", "True", ")", "\n", "if", "other", "is", "not", "None", ":", "\n", "            ", "feats_oth", "=", "net", "(", "torch", ".", "flip", "(", "other", ",", "[", "2", ",", "3", "]", ")", ",", "self", ".", "attn_layers", ",", "encode_only", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "feats_oth", "=", "[", "None", "for", "_", "in", "range", "(", "n_layers", ")", "]", "\n", "\n", "", "total_loss", "=", "0.0", "\n", "for", "i", ",", "(", "feat_src", ",", "feat_tgt", ",", "feat_oth", ")", "in", "enumerate", "(", "zip", "(", "feats_src", ",", "feats_tgt", ",", "feats_oth", ")", ")", ":", "\n", "\n", "            ", "loss", "=", "self", ".", "criterionSpatial", ".", "loss", "(", "feat_src", ",", "feat_tgt", ",", "feat_oth", ",", "i", ")", "\n", "total_loss", "+=", "loss", ".", "mean", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "criterionSpatial", ".", "conv_init", ":", "\n", "            ", "self", ".", "criterionSpatial", ".", "update_init_", "(", ")", "\n", "\n", "", "return", "total_loss", "/", "n_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.MoG": [[297, 305], ["torch.sum", "torch.sum", "torch.sum", "torch.mm", "torch.mm", "torch.mm", "torch.distributions.MultivariateNormal", "torch.sum", "torch.sum", "torch.sum", "b.unsqueeze", "b.unsqueeze", "torch.diag", "torch.diag", "torch.diag", "torch.mm", "torch.mm", "torch.mm", "means.transpose"], "function", ["None"], ["", "", "def", "MoG", "(", "gaussians", ")", ":", "\n", "    ", "means", "=", "gaussians", ".", "mean", "\n", "variances", "=", "torch", ".", "sum", "(", "gaussians", ".", "variance", ",", "dim", "=", "0", ")", "# .to(device)", "\n", "size", "=", "means", ".", "shape", "[", "0", "]", "\n", "b", "=", "(", "torch", ".", "sum", "(", "means", ",", "dim", "=", "0", ")", "/", "size", ")", "# .to(device)", "\n", "b_temp", "=", "torch", ".", "mm", "(", "b", ".", "unsqueeze", "(", "1", ")", ",", "b", ".", "unsqueeze", "(", "0", ")", ")", "\n", "B", "=", "(", "(", "torch", ".", "diag", "(", "variances", ")", "/", "size", "+", "torch", ".", "mm", "(", "means", ".", "transpose", "(", "0", ",", "1", ")", ",", "means", ")", "/", "size", "-", "b_temp", ")", ")", "# .unsqueeze(0)", "\n", "return", "MultivariateNormal", "(", "b", ",", "covariance_matrix", "=", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.MoG_KL_Unit_Gaussian": [[307, 317], ["sc_model.MoG", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.distributions.MultivariateNormal", "torch.distributions.kl.kl_divergence", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.eye", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.MoG"], ["", "def", "MoG_KL_Unit_Gaussian", "(", "distribution", ")", ":", "\n", "    ", "collapsed_multivariate", "=", "MoG", "(", "distribution", ")", "# Mixture of Gaussian modeling", "\n", "\n", "unit_cov", "=", "torch", ".", "eye", "(", "collapsed_multivariate", ".", "mean", ".", "shape", "[", "-", "1", "]", ")", ".", "cuda", "(", ")", "# .unsqueeze(0)", "\n", "# print('cov matrix shape:', unit_cov.shape)", "\n", "unit_Gaussian", "=", "MultivariateNormal", "(", "torch", ".", "zeros_like", "(", "collapsed_multivariate", ".", "mean", ")", ",", "unit_cov", ")", "\n", "\n", "loss", "=", "kl", ".", "kl_divergence", "(", "unit_Gaussian", ",", "collapsed_multivariate", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sc_model.log_prob_modified": [[318, 323], ["None"], "function", ["None"], ["", "def", "log_prob_modified", "(", "distribution", ",", "sample", ")", ":", "\n", "    ", "var", "=", "distribution", ".", "stddev", "**", "2", "\n", "\n", "log_prob", "=", "-", "(", "(", "sample", "-", "distribution", ".", "mean", ")", "**", "2", ")", "/", "(", "2", "*", "var", ")", "\n", "return", "log_prob", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.modify_commandline_options": [[19, 46], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n\n        For CycleGAN, in addition to GAN losses, we introduce lambda_A, lambda_B, and lambda_identity for the following losses.\n        A (source domain), B (target domain).\n        Generators: G_A: A -> B; G_B: B -> A.\n        Discriminators: D_A: G_A(A) vs. B; D_B: G_B(B) vs. A.\n        Forward cycle loss:  lambda_A * ||G_B(G_A(A)) - A|| (Eqn. (2) in the paper)\n        Backward cycle loss: lambda_B * ||G_A(G_B(B)) - B|| (Eqn. (2) in the paper)\n        Identity loss (optional): lambda_identity * (||G_A(B) - B|| * lambda_B + ||G_B(A) - A|| * lambda_A) (Sec 5.2 \"Photo generation from paintings\" in the paper)\n        Dropout is not used in the original CycleGAN paper.\n        \"\"\"", "\n", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "# default CycleGAN did not use dropout", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'use identity mapping. Setting lambda_identity other than 0 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set lambda_identity = 0.1'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.__init__": [[47, 98], ["base_model.BaseModel.__init__", "networks.define_G", "networks.define_G", "visual_names_A.append", "visual_names_B.append", "networks.define_D", "networks.define_D", "util.image_pool.ImagePool", "util.image_pool.ImagePool", "losses.GANLoss().to", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "cycle_gan_model.CycleGANModel.optimizers.append", "cycle_gan_model.CycleGANModel.optimizers.append", "itertools.chain", "itertools.chain", "losses.GANLoss", "cycle_gan_model.CycleGANModel.netG_A.parameters", "cycle_gan_model.CycleGANModel.netG_B.parameters", "cycle_gan_model.CycleGANModel.netD_A.parameters", "cycle_gan_model.CycleGANModel.netD_B.parameters"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_G", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_G", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_D", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_D"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the CycleGAN class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "# specify the training losses you want to print out. The training/test scripts will call <BaseModel.get_current_losses>", "\n", "self", ".", "loss_names", "=", "[", "'D_A'", ",", "'G_A'", ",", "'cycle_A'", ",", "'idt_A'", ",", "'D_B'", ",", "'G_B'", ",", "'cycle_B'", ",", "'idt_B'", "]", "\n", "# specify the images you want to save/display. The training/test scripts will call <BaseModel.get_current_visuals>", "\n", "visual_names_A", "=", "[", "'real_A'", ",", "'fake_B'", ",", "'rec_A'", "]", "\n", "visual_names_B", "=", "[", "'real_B'", ",", "'fake_A'", ",", "'rec_B'", "]", "\n", "if", "self", ".", "isTrain", "and", "self", ".", "opt", ".", "lambda_identity", ">", "0.0", ":", "# if identity loss is used, we also visualize idt_B=G_A(B) ad idt_A=G_A(B)", "\n", "            ", "visual_names_A", ".", "append", "(", "'idt_B'", ")", "\n", "visual_names_B", ".", "append", "(", "'idt_A'", ")", "\n", "\n", "", "self", ".", "visual_names", "=", "visual_names_A", "+", "visual_names_B", "# combine visualizations for A and B", "\n", "# specify the models you want to save to the disk. The training/test scripts will call <BaseModel.save_networks> and <BaseModel.load_networks>.", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", ",", "'D_A'", ",", "'D_B'", "]", "\n", "", "else", ":", "# during test time, only load Gs", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", "]", "\n", "\n", "# define networks (both Generators and discriminators)", "\n", "# The naming is different from those used in the paper.", "\n", "# Code (vs. paper): G_A (G), G_B (F), D_A (D_Y), D_B (D_X)", "\n", "", "self", ".", "netG_A", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "netG_B", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "# define discriminators", "\n", "            ", "self", ".", "netD_A", "=", "networks", ".", "define_D", "(", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "netD_B", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "lambda_identity", ">", "0.0", ":", "# only works when input and output images have the same number of channels", "\n", "                ", "assert", "(", "opt", ".", "input_nc", "==", "opt", ".", "output_nc", ")", "\n", "", "self", ".", "fake_A_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "# create image buffer to store previously generated images", "\n", "self", ".", "fake_B_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "# create image buffer to store previously generated images", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "losses", ".", "GANLoss", "(", "opt", ".", "gan_mode", ")", ".", "to", "(", "self", ".", "device", ")", "# define GAN loss.", "\n", "self", ".", "criterionCycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionIdt", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "# initialize optimizers; schedulers will be automatically created by function <BaseModel.setup>.", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_A", ".", "parameters", "(", ")", ",", "self", ".", "netG_B", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netD_A", ".", "parameters", "(", ")", ",", "self", ".", "netD_B", ".", "parameters", "(", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.set_input": [[99, 111], ["input[].to", "input[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input (dict): include the data itself and its metadata information.\n\n        The option 'direction' can be used to swap domain A and domain B.\n        \"\"\"", "\n", "AtoB", "=", "self", ".", "opt", ".", "direction", "==", "'AtoB'", "\n", "self", ".", "real_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.forward": [[112, 118], ["cycle_gan_model.CycleGANModel.netG_A", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netG_A"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "self", ".", "fake_B", "=", "self", ".", "netG_A", "(", "self", ".", "real_A", ")", "# G_A(A)", "\n", "self", ".", "rec_A", "=", "self", ".", "netG_B", "(", "self", ".", "fake_B", ")", "# G_B(G_A(A))", "\n", "self", ".", "fake_A", "=", "self", ".", "netG_B", "(", "self", ".", "real_B", ")", "# G_B(B)", "\n", "self", ".", "rec_B", "=", "self", ".", "netG_A", "(", "self", ".", "fake_A", ")", "# G_A(G_B(B))", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.backward_D_basic": [[119, 140], ["netD", "cycle_gan_model.CycleGANModel.criterionGAN", "netD", "cycle_gan_model.CycleGANModel.criterionGAN", "loss_D.backward", "fake.detach"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward"], ["", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for the discriminator\n\n        Parameters:\n            netD (network)      -- the discriminator D\n            real (tensor array) -- real images\n            fake (tensor array) -- images generated by a generator\n\n        Return the discriminator loss.\n        We also call loss_D.backward() to calculate the gradients.\n        \"\"\"", "\n", "# Real", "\n", "pred_real", "=", "netD", "(", "real", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss and calculate gradients", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.backward_D_A": [[141, 145], ["cycle_gan_model.CycleGANModel.fake_B_pool.query", "cycle_gan_model.CycleGANModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.backward_D_basic"], ["", "def", "backward_D_A", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for discriminator D_A\"\"\"", "\n", "fake_B", "=", "self", ".", "fake_B_pool", ".", "query", "(", "self", ".", "fake_B", ")", "\n", "self", ".", "loss_D_A", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_A", ",", "self", ".", "real_B", ",", "fake_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.backward_D_B": [[146, 150], ["cycle_gan_model.CycleGANModel.fake_A_pool.query", "cycle_gan_model.CycleGANModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.backward_D_basic"], ["", "def", "backward_D_B", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for discriminator D_B\"\"\"", "\n", "fake_A", "=", "self", ".", "fake_A_pool", ".", "query", "(", "self", ".", "fake_A", ")", "\n", "self", ".", "loss_D_B", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_B", ",", "self", ".", "real_A", ",", "fake_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.backward_G": [[151, 179], ["cycle_gan_model.CycleGANModel.criterionGAN", "cycle_gan_model.CycleGANModel.criterionGAN", "cycle_gan_model.CycleGANModel.loss_G.backward", "cycle_gan_model.CycleGANModel.netG_A", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netD_A", "cycle_gan_model.CycleGANModel.netD_B", "cycle_gan_model.CycleGANModel.criterionCycle", "cycle_gan_model.CycleGANModel.criterionCycle", "cycle_gan_model.CycleGANModel.criterionIdt", "cycle_gan_model.CycleGANModel.criterionIdt"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate the loss for generators G_A and G_B\"\"\"", "\n", "lambda_idt", "=", "self", ".", "opt", ".", "lambda_identity", "\n", "lambda_A", "=", "self", ".", "opt", ".", "lambda_A", "\n", "lambda_B", "=", "self", ".", "opt", ".", "lambda_B", "\n", "# Identity loss", "\n", "if", "lambda_idt", ">", "0", ":", "\n", "# G_A should be identity if real_B is fed: ||G_A(B) - B||", "\n", "            ", "self", ".", "idt_A", "=", "self", ".", "netG_A", "(", "self", ".", "real_B", ")", "\n", "self", ".", "loss_idt_A", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_A", ",", "self", ".", "real_B", ")", "*", "lambda_B", "*", "lambda_idt", "\n", "# G_B should be identity if real_A is fed: ||G_B(A) - A||", "\n", "self", ".", "idt_B", "=", "self", ".", "netG_B", "(", "self", ".", "real_A", ")", "\n", "self", ".", "loss_idt_B", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_B", ",", "self", ".", "real_A", ")", "*", "lambda_A", "*", "lambda_idt", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_idt_A", "=", "0", "\n", "self", ".", "loss_idt_B", "=", "0", "\n", "\n", "# GAN loss D_A(G_A(A))", "\n", "", "self", ".", "loss_G_A", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_A", "(", "self", ".", "fake_B", ")", ",", "True", ")", "\n", "# GAN loss D_B(G_B(B))", "\n", "self", ".", "loss_G_B", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_B", "(", "self", ".", "fake_A", ")", ",", "True", ")", "\n", "# Forward cycle loss || G_B(G_A(A)) - A||", "\n", "self", ".", "loss_cycle_A", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_A", ",", "self", ".", "real_A", ")", "*", "lambda_A", "\n", "# Backward cycle loss || G_A(G_B(B)) - B||", "\n", "self", ".", "loss_cycle_B", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_B", ",", "self", ".", "real_B", ")", "*", "lambda_B", "\n", "# combined loss and calculate gradients", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_A", "+", "self", ".", "loss_G_B", "+", "self", ".", "loss_cycle_A", "+", "self", ".", "loss_cycle_B", "+", "self", ".", "loss_idt_A", "+", "self", ".", "loss_idt_B", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.optimize_parameters": [[180, 195], ["cycle_gan_model.CycleGANModel.forward", "cycle_gan_model.CycleGANModel.set_requires_grad", "cycle_gan_model.CycleGANModel.optimizer_G.zero_grad", "cycle_gan_model.CycleGANModel.backward_G", "cycle_gan_model.CycleGANModel.optimizer_G.step", "cycle_gan_model.CycleGANModel.set_requires_grad", "cycle_gan_model.CycleGANModel.optimizer_D.zero_grad", "cycle_gan_model.CycleGANModel.backward_D_A", "cycle_gan_model.CycleGANModel.backward_D_B", "cycle_gan_model.CycleGANModel.optimizer_D.step"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.backward_G", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.backward_D_A", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cycle_gan_model.CycleGANModel.backward_D_B", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "# forward", "\n", "self", ".", "forward", "(", ")", "# compute fake images and reconstruction images.", "\n", "# G_A and G_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "False", ")", "# Ds require no gradients when optimizing Gs", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "# set G_A and G_B's gradients to zero", "\n", "self", ".", "backward_G", "(", ")", "# calculate gradients for G_A and G_B", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "# update G_A and G_B's weights", "\n", "# D_A and D_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "# set D_A and D_B's gradients to zero", "\n", "self", ".", "backward_D_A", "(", ")", "# calculate gradients for D_A", "\n", "self", ".", "backward_D_B", "(", ")", "# calculate graidents for D_B", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "# update D_A and D_B's weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.__init__.find_model_using_name": [[24, 45], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.__init__.get_option_setter": [[47, 51], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.__init__.create_model": [[53, 67], ["__init__.find_model_using_name", "find_model_using_name.", "print", "type"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.DropPath.__init__": [[41, 44], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.DropPath.forward": [[45, 47], ["vision_transformer.drop_path"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.Mlp.__init__": [[50, 58], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.Mlp.forward": [[59, 66], ["vision_transformer.Mlp.fc1", "vision_transformer.Mlp.act", "vision_transformer.Mlp.drop", "vision_transformer.Mlp.fc2", "vision_transformer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.Attention.__init__": [[69, 79], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.Attention.forward": [[80, 93], ["vision_transformer.Attention.qkv().reshape().permute", "vision_transformer.Attention.softmax", "vision_transformer.Attention.attn_drop", "vision_transformer.Attention.proj", "vision_transformer.Attention.proj_drop", "vision_transformer.Attention.qkv().reshape", "k.transpose", "vision_transformer.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.Block.__init__": [[96, 106], ["torch.Module.__init__", "norm_layer", "vision_transformer.Attention", "norm_layer", "int", "vision_transformer.Mlp", "vision_transformer.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.Block.forward": [[107, 114], ["vision_transformer.Block.attn", "vision_transformer.Block.norm1", "vision_transformer.Block.drop_path", "vision_transformer.Block.drop_path", "vision_transformer.Block.mlp", "vision_transformer.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "y", ",", "attn", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "if", "return_attention", ":", "\n", "            ", "return", "attn", "\n", "", "x", "=", "x", "+", "self", ".", "drop_path", "(", "y", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.PatchEmbed.__init__": [[119, 127], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_patches", "=", "(", "img_size", "//", "patch_size", ")", "*", "(", "img_size", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.PatchEmbed.forward": [[128, 132], ["vision_transformer.PatchEmbed.proj().flatten().transpose", "vision_transformer.PatchEmbed.proj().flatten", "vision_transformer.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.__init__": [[136, 164], ["torch.Module.__init__", "vision_transformer.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "norm_layer", "utils.trunc_normal_", "utils.trunc_normal_", "vision_transformer.VisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vision_transformer.Block", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["def", "__init__", "(", "self", ",", "img_size", "=", "[", "224", "]", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "0", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", "[", "0", "]", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Classifier head", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer._init_weights": [[165, 173], ["isinstance", "utils.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.interpolate_pos_encoding": [[174, 195], ["torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "class_pos_embed.unsqueeze", "patch_pos_embed.permute().view.permute().view.reshape", "int", "int", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "interpolate_pos_encoding", "(", "self", ",", "x", ",", "w", ",", "h", ")", ":", "\n", "        ", "npatch", "=", "x", ".", "shape", "[", "1", "]", "-", "1", "\n", "N", "=", "self", ".", "pos_embed", ".", "shape", "[", "1", "]", "-", "1", "\n", "if", "npatch", "==", "N", "and", "w", "==", "h", ":", "\n", "            ", "return", "self", ".", "pos_embed", "\n", "", "class_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "0", "]", "\n", "patch_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "1", ":", "]", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "w0", "=", "w", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "h0", "=", "h", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "# we add a small number to avoid floating point error in the interpolation", "\n", "# see discussion at https://github.com/facebookresearch/dino/issues/8", "\n", "w0", ",", "h0", "=", "w0", "+", "0.1", ",", "h0", "+", "0.1", "\n", "patch_pos_embed", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "patch_pos_embed", ".", "reshape", "(", "1", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "scale_factor", "=", "(", "w0", "/", "math", ".", "sqrt", "(", "N", ")", ",", "h0", "/", "math", ".", "sqrt", "(", "N", ")", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", ")", "\n", "assert", "int", "(", "w0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "2", "]", "and", "int", "(", "h0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "1", "]", "\n", "patch_pos_embed", "=", "patch_pos_embed", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "(", "class_pos_embed", ".", "unsqueeze", "(", "0", ")", ",", "patch_pos_embed", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.prepare_tokens": [[196, 208], ["vision_transformer.VisionTransformer.patch_embed", "vision_transformer.VisionTransformer.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_transformer.VisionTransformer.pos_drop", "vision_transformer.VisionTransformer.interpolate_pos_encoding"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.interpolate_pos_encoding"], ["", "def", "prepare_tokens", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "nc", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "# patch linear embedding", "\n", "\n", "# add the [CLS] token to the embed patch tokens", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# add positional encoding to each token", "\n", "x", "=", "x", "+", "self", ".", "interpolate_pos_encoding", "(", "x", ",", "w", ",", "h", ")", "\n", "\n", "return", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.forward": [[209, 215], ["vision_transformer.VisionTransformer.prepare_tokens", "vision_transformer.VisionTransformer.norm", "blk"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.prepare_tokens"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.get_last_selfattention": [[216, 224], ["vision_transformer.VisionTransformer.prepare_tokens", "enumerate", "blk", "blk", "len"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.prepare_tokens"], ["", "def", "get_last_selfattention", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "if", "i", "<", "len", "(", "self", ".", "blocks", ")", "-", "1", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "else", ":", "\n", "# return attention of the last block", "\n", "                ", "return", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.get_intermediate_layers": [[225, 234], ["vision_transformer.VisionTransformer.prepare_tokens", "enumerate", "blk", "output.append", "len", "vision_transformer.VisionTransformer.norm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.VisionTransformer.prepare_tokens"], ["", "", "", "def", "get_intermediate_layers", "(", "self", ",", "x", ",", "n", "=", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "# we return the output tokens from the `n` last blocks", "\n", "output", "=", "[", "]", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "if", "len", "(", "self", ".", "blocks", ")", "-", "i", "<=", "n", ":", "\n", "                ", "output", ".", "append", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.DINOHead.__init__": [[258, 280], ["torch.Module.__init__", "max", "vision_transformer.DINOHead.apply", "torch.utils.weight_norm", "torch.utils.weight_norm", "vision_transformer.DINOHead.last_layer.weight_g.data.fill_", "torch.Linear", "torch.Linear", "layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "layers.append", "torch.GELU", "torch.GELU", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "layers.append", "torch.GELU", "torch.GELU", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "use_bn", "=", "False", ",", "norm_last_layer", "=", "True", ",", "nlayers", "=", "3", ",", "hidden_dim", "=", "2048", ",", "bottleneck_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "nlayers", "=", "max", "(", "nlayers", ",", "1", ")", "\n", "if", "nlayers", "==", "1", ":", "\n", "            ", "self", ".", "mlp", "=", "nn", ".", "Linear", "(", "in_dim", ",", "bottleneck_dim", ")", "\n", "", "else", ":", "\n", "            ", "layers", "=", "[", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "]", "\n", "if", "use_bn", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "GELU", "(", ")", ")", "\n", "for", "_", "in", "range", "(", "nlayers", "-", "2", ")", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "if", "use_bn", ":", "\n", "                    ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "GELU", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "bottleneck_dim", ")", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "last_layer", "=", "nn", ".", "utils", ".", "weight_norm", "(", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "out_dim", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "last_layer", ".", "weight_g", ".", "data", ".", "fill_", "(", "1", ")", "\n", "if", "norm_last_layer", ":", "\n", "            ", "self", ".", "last_layer", ".", "weight_g", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.DINOHead._init_weights": [[281, 286], ["isinstance", "utils.trunc_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.DINOHead.forward": [[287, 292], ["vision_transformer.DINOHead.mlp", "torch.functional.normalize", "torch.functional.normalize", "vision_transformer.DINOHead.last_layer"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "return", "x", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.drop_path": [[27, 36], ["random_tensor.floor_", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.vit_tiny": [[236, 241], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["", "", "def", "vit_tiny", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.vit_small": [[243, 248], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_small", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.vision_transformer.vit_base": [[250, 255], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_base", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2Discriminator.__init__": [[20, 70], ["torch.nn.Module.__init__", "int", "range", "torch.nn.Sequential", "stylegan_networks.ConvLayer", "min", "min", "min", "min", "int", "int", "int", "int", "int", "stylegan_networks.ConvLayer", "math.log", "convs.append", "stylegan_networks.ConvLayer", "torch.nn.Sequential", "int", "int", "int", "int", "int", "round", "round", "round", "round", "round", "stylegan_networks.ResBlock", "int", "stylegan_networks.EqualLinear", "stylegan_networks.EqualLinear", "numpy.rint", "int", "round", "round", "round", "round", "numpy.log2", "numpy.log2", "min"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "size", "=", "None", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "StyleGAN2Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "stddev_group", "=", "16", "\n", "if", "size", "is", "None", ":", "\n", "            ", "size", "=", "2", "**", "int", "(", "(", "np", ".", "rint", "(", "np", ".", "log2", "(", "min", "(", "opt", ".", "load_size", ",", "opt", ".", "crop_size", ")", ")", ")", ")", ")", "\n", "if", "\"patch\"", "in", "self", ".", "opt", ".", "netD", "and", "self", ".", "opt", ".", "D_patch_size", "is", "not", "None", ":", "\n", "                ", "size", "=", "2", "**", "int", "(", "np", ".", "log2", "(", "self", ".", "opt", ".", "D_patch_size", ")", ")", "\n", "\n", "", "", "channel_multiplier", "=", "ndf", "/", "64", "\n", "channels", "=", "{", "\n", "4", ":", "min", "(", "384", ",", "int", "(", "round", "(", "4096", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "8", ":", "min", "(", "384", ",", "int", "(", "round", "(", "2048", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "16", ":", "min", "(", "384", ",", "int", "(", "round", "(", "1024", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "32", ":", "min", "(", "384", ",", "int", "(", "round", "(", "512", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "64", ":", "int", "(", "round", "(", "256", "*", "channel_multiplier", ")", ")", ",", "\n", "128", ":", "int", "(", "round", "(", "128", "*", "channel_multiplier", ")", ")", ",", "\n", "256", ":", "int", "(", "round", "(", "64", "*", "channel_multiplier", ")", ")", ",", "\n", "512", ":", "int", "(", "round", "(", "32", "*", "channel_multiplier", ")", ")", ",", "\n", "1024", ":", "int", "(", "round", "(", "16", "*", "channel_multiplier", ")", ")", ",", "\n", "}", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", "\n", "\n", "convs", "=", "[", "ConvLayer", "(", "input_nc", ",", "channels", "[", "size", "]", ",", "1", ")", "]", "\n", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "in_channel", "=", "channels", "[", "size", "]", "\n", "if", "'smallpatch'", "in", "self", ".", "opt", ".", "netD", ":", "\n", "            ", "final_res_log2", "=", "5", "\n", "", "elif", "'patch'", "in", "self", ".", "opt", ".", "netD", ":", "\n", "            ", "final_res_log2", "=", "4", "\n", "", "else", ":", "\n", "            ", "final_res_log2", "=", "3", "\n", "\n", "", "for", "i", "in", "range", "(", "log_size", ",", "final_res_log2", ",", "-", "1", ")", ":", "\n", "            ", "out_channel", "=", "channels", "[", "2", "**", "(", "i", "-", "1", ")", "]", "\n", "convs", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "blur_kernel", ")", ")", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "if", "'tile'", "in", "self", ".", "opt", ".", "netD", ":", "\n", "            ", "in_channel", "+=", "1", "\n", "", "self", ".", "final_conv", "=", "ConvLayer", "(", "in_channel", ",", "channels", "[", "4", "]", ",", "3", ")", "\n", "if", "'patch'", "in", "self", ".", "opt", ".", "netD", ":", "\n", "            ", "self", ".", "final_linear", "=", "ConvLayer", "(", "channels", "[", "4", "]", ",", "1", ",", "3", ",", "bias", "=", "False", ",", "activate", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "size", "=", "2", "**", "int", "(", "final_res_log2", ")", "\n", "self", ".", "final_linear", "=", "nn", ".", "Sequential", "(", "\n", "EqualLinear", "(", "channels", "[", "4", "]", "*", "size", "*", "size", ",", "channels", "[", "4", "]", ",", "activation", "=", "'fused_lrelu'", ")", ",", "\n", "EqualLinear", "(", "channels", "[", "4", "]", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2Discriminator.forward": [[72, 96], ["stylegan_networks.StyleGAN2Discriminator.convs", "out.view.view.size", "stylegan_networks.StyleGAN2Discriminator.final_conv", "stylegan_networks.StyleGAN2Discriminator.final_linear", "input.size", "torch.randint", "torch.randint", "min", "out.view.view.view", "torch.sqrt", "stddev.repeat.repeat.mean().squeeze", "stddev.repeat.repeat.repeat", "torch.cat", "out.view.view.view", "stddev.repeat.repeat.var", "stddev.repeat.repeat.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "get_minibatch_features", "=", "False", ")", ":", "\n", "        ", "if", "\"patch\"", "in", "self", ".", "opt", ".", "netD", "and", "self", ".", "opt", ".", "D_patch_size", "is", "not", "None", ":", "\n", "            ", "_", ",", "_", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "y", "=", "torch", ".", "randint", "(", "h", "-", "self", ".", "opt", ".", "D_patch_size", ",", "(", ")", ")", "\n", "x", "=", "torch", ".", "randint", "(", "w", "-", "self", ".", "opt", ".", "D_patch_size", ",", "(", ")", ")", "\n", "input", "=", "input", "[", ":", ",", ":", ",", "y", ":", "y", "+", "self", ".", "opt", ".", "D_patch_size", ",", "x", ":", "x", "+", "self", ".", "opt", ".", "D_patch_size", "]", "\n", "", "out", "=", "input", "\n", "out", "=", "self", ".", "convs", "(", "out", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "out", ".", "size", "(", ")", "\n", "\n", "if", "get_minibatch_features", "and", "'tile'", "in", "self", ".", "opt", ".", "netD", ":", "\n", "            ", "group", "=", "min", "(", "b", ",", "self", ".", "stddev_group", ")", "\n", "stddev", "=", "out", ".", "view", "(", "group", ",", "-", "1", ",", "1", ",", "c", "//", "1", ",", "h", ",", "w", ")", "\n", "stddev", "=", "torch", ".", "sqrt", "(", "stddev", ".", "var", "(", "0", ",", "unbiased", "=", "False", ")", "+", "1e-8", ")", "\n", "stddev", "=", "stddev", ".", "mean", "(", "[", "2", ",", "3", ",", "4", "]", ",", "keepdim", "=", "True", ")", ".", "squeeze", "(", "2", ")", "\n", "stddev", "=", "stddev", ".", "repeat", "(", "group", ",", "1", ",", "h", ",", "w", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "stddev", "]", ",", "1", ")", "\n", "\n", "", "out", "=", "self", ".", "final_conv", "(", "out", ")", "\n", "if", "'patch'", "not", "in", "self", ".", "opt", ".", "netD", ":", "\n", "            ", "out", "=", "out", ".", "view", "(", "b", ",", "-", "1", ")", "\n", "", "out", "=", "self", ".", "final_linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2Generator.__init__": [[102, 107], ["torch.nn.Module.__init__", "stylegan_networks.StyleGAN2Encoder", "stylegan_networks.StyleGAN2Decoder"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_blocks", "=", "6", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "StyleGAN2Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "encoder", "=", "StyleGAN2Encoder", "(", "input_nc", ",", "ngf", ",", "n_blocks", ",", "opt", ")", "\n", "self", ".", "decoder", "=", "StyleGAN2Decoder", "(", "output_nc", ",", "ngf", ",", "n_blocks", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2Generator.forward": [[108, 115], ["stylegan_networks.StyleGAN2Generator.encoder", "stylegan_networks.StyleGAN2Generator.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "layers", "=", "[", "]", ",", "encode_only", "=", "False", ")", ":", "\n", "        ", "feat", ",", "feats", "=", "self", ".", "encoder", "(", "input", ",", "layers", ",", "encode_only", ")", "\n", "if", "encode_only", ":", "\n", "            ", "return", "None", ",", "feats", "\n", "", "else", ":", "\n", "            ", "fake", "=", "self", ".", "decoder", "(", "feat", ")", "\n", "return", "fake", ",", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2Encoder.__init__": [[121, 156], ["torch.nn.Module.__init__", "range", "range", "torch.nn.Sequential", "min", "min", "min", "min", "int", "int", "int", "int", "int", "int", "torch.nn.Identity", "stylegan_networks.ConvLayer", "convs.append", "convs.append", "int", "int", "int", "int", "round", "round", "round", "round", "round", "numpy.rint", "stylegan_networks.ResBlock", "stylegan_networks.ResBlock", "round", "round", "round", "round", "numpy.log2", "min"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ngf", "=", "64", ",", "n_blocks", "=", "6", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "StyleGAN2Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "opt", "is", "not", "None", "\n", "self", ".", "opt", "=", "opt", "\n", "channel_multiplier", "=", "ngf", "/", "32", "\n", "channels", "=", "{", "\n", "4", ":", "min", "(", "512", ",", "int", "(", "round", "(", "4096", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "8", ":", "min", "(", "512", ",", "int", "(", "round", "(", "2048", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "16", ":", "min", "(", "512", ",", "int", "(", "round", "(", "1024", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "32", ":", "min", "(", "512", ",", "int", "(", "round", "(", "512", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "64", ":", "int", "(", "round", "(", "256", "*", "channel_multiplier", ")", ")", ",", "\n", "128", ":", "int", "(", "round", "(", "128", "*", "channel_multiplier", ")", ")", ",", "\n", "256", ":", "int", "(", "round", "(", "64", "*", "channel_multiplier", ")", ")", ",", "\n", "512", ":", "int", "(", "round", "(", "32", "*", "channel_multiplier", ")", ")", ",", "\n", "1024", ":", "int", "(", "round", "(", "16", "*", "channel_multiplier", ")", ")", ",", "\n", "}", "\n", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", "\n", "\n", "cur_res", "=", "2", "**", "int", "(", "(", "np", ".", "rint", "(", "np", ".", "log2", "(", "min", "(", "opt", ".", "load_size", ",", "opt", ".", "crop_size", ")", ")", ")", ")", ")", "\n", "convs", "=", "[", "nn", ".", "Identity", "(", ")", ",", "\n", "ConvLayer", "(", "input_nc", ",", "channels", "[", "cur_res", "]", ",", "1", ")", "]", "\n", "\n", "num_downsampling", "=", "self", ".", "opt", ".", "stylegan2_G_num_downsampling", "\n", "for", "i", "in", "range", "(", "num_downsampling", ")", ":", "\n", "            ", "in_channel", "=", "channels", "[", "cur_res", "]", "\n", "out_channel", "=", "channels", "[", "cur_res", "//", "2", "]", "\n", "convs", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "blur_kernel", ",", "downsample", "=", "True", ")", ")", "\n", "cur_res", "=", "cur_res", "//", "2", "\n", "\n", "", "for", "i", "in", "range", "(", "n_blocks", "//", "2", ")", ":", "\n", "            ", "n_channel", "=", "channels", "[", "cur_res", "]", "\n", "convs", ".", "append", "(", "ResBlock", "(", "n_channel", ",", "n_channel", ",", "downsample", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2Encoder.forward": [[157, 172], ["len", "enumerate", "layers.append", "layer", "stylegan_networks.StyleGAN2Encoder.convs", "feats.append", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "layers", "=", "[", "]", ",", "get_features", "=", "False", ")", ":", "\n", "        ", "if", "len", "(", "layers", ")", ">", "0", ":", "\n", "            ", "feat", "=", "input", "\n", "feats", "=", "[", "]", "\n", "if", "-", "1", "in", "layers", ":", "\n", "                ", "layers", ".", "append", "(", "len", "(", "self", ".", "convs", ")", "-", "1", ")", "\n", "", "for", "layer_id", ",", "layer", "in", "enumerate", "(", "self", ".", "convs", ")", ":", "\n", "                ", "feat", "=", "layer", "(", "feat", ")", "\n", "if", "layer_id", "in", "layers", ":", "\n", "                    ", "feats", ".", "append", "(", "feat", ")", "\n", "", "if", "layer_id", "==", "layers", "[", "-", "1", "]", "and", "get_features", ":", "\n", "                    ", "return", "None", ",", "feats", "\n", "", "", "return", "feat", ",", "feats", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "convs", "(", "input", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2Decoder.__init__": [[175, 213], ["torch.nn.Module.__init__", "range", "range", "convs.append", "torch.nn.Sequential", "min", "min", "min", "min", "int", "int", "int", "int", "int", "convs.append", "convs.append", "stylegan_networks.ConvLayer", "int", "int", "int", "int", "round", "round", "round", "round", "round", "int", "stylegan_networks.ResBlock", "stylegan_networks.StyledConv", "round", "round", "round", "round", "numpy.rint", "numpy.log2", "min"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_blocks", "=", "6", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "StyleGAN2Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "opt", "is", "not", "None", "\n", "self", ".", "opt", "=", "opt", "\n", "channel_multiplier", "=", "ngf", "/", "32", "\n", "channels", "=", "{", "\n", "4", ":", "min", "(", "512", ",", "int", "(", "round", "(", "4096", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "8", ":", "min", "(", "512", ",", "int", "(", "round", "(", "2048", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "16", ":", "min", "(", "512", ",", "int", "(", "round", "(", "1024", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "32", ":", "min", "(", "512", ",", "int", "(", "round", "(", "512", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "64", ":", "int", "(", "round", "(", "256", "*", "channel_multiplier", ")", ")", ",", "\n", "128", ":", "int", "(", "round", "(", "128", "*", "channel_multiplier", ")", ")", ",", "\n", "256", ":", "int", "(", "round", "(", "64", "*", "channel_multiplier", ")", ")", ",", "\n", "512", ":", "int", "(", "round", "(", "32", "*", "channel_multiplier", ")", ")", ",", "\n", "1024", ":", "int", "(", "round", "(", "16", "*", "channel_multiplier", ")", ")", ",", "\n", "}", "\n", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", "\n", "\n", "num_downsampling", "=", "self", ".", "opt", ".", "stylegan2_G_num_downsampling", "\n", "cur_res", "=", "2", "**", "int", "(", "(", "np", ".", "rint", "(", "np", ".", "log2", "(", "min", "(", "opt", ".", "load_size", ",", "opt", ".", "crop_size", ")", ")", ")", ")", ")", "//", "(", "2", "**", "num_downsampling", ")", "\n", "convs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_blocks", "//", "2", ")", ":", "\n", "            ", "n_channel", "=", "channels", "[", "cur_res", "]", "\n", "convs", ".", "append", "(", "ResBlock", "(", "n_channel", ",", "n_channel", ",", "downsample", "=", "False", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_downsampling", ")", ":", "\n", "            ", "in_channel", "=", "channels", "[", "cur_res", "]", "\n", "out_channel", "=", "channels", "[", "cur_res", "*", "2", "]", "\n", "inject_noise", "=", "\"small\"", "not", "in", "self", ".", "opt", ".", "netG", "\n", "convs", ".", "append", "(", "StyledConv", "(", "in_channel", ",", "out_channel", ",", "3", ",", "upsample", "=", "True", ",", "blur_kernel", "=", "blur_kernel", ",", "\n", "inject_noise", "=", "inject_noise", ")", ")", "\n", "cur_res", "=", "cur_res", "*", "2", "\n", "\n", "", "convs", ".", "append", "(", "ConvLayer", "(", "channels", "[", "cur_res", "]", ",", "output_nc", ",", "1", ")", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2Decoder.forward": [[214, 216], ["torch.nn.functional.tanh", "stylegan_networks.StyleGAN2Decoder.convs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "tanh", "(", "self", ".", "convs", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2DecoderWS.__init__": [[219, 270], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "stylegan_networks.ConstantInput", "stylegan_networks.StyledConv", "stylegan_networks.ToRGB", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Module", "range", "range", "stylegan_networks.PixelNorm", "layers.append", "min", "min", "min", "min", "int", "int", "int", "int", "int", "math.log", "stylegan_networks.StyleGAN2DecoderWS.noises.register_buffer", "stylegan_networks.StyleGAN2DecoderWS.convs.append", "stylegan_networks.StyleGAN2DecoderWS.convs.append", "stylegan_networks.StyleGAN2DecoderWS.to_rgbs.append", "stylegan_networks.EqualLinear", "int", "int", "int", "int", "round", "round", "round", "round", "round", "torch.randn", "stylegan_networks.StyledConv", "stylegan_networks.StyledConv", "stylegan_networks.ToRGB", "round", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "style_dim", ",", "n_mlp", ",", "channel_multiplier", "=", "2", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "lr_mlp", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "StyleGAN2DecoderWS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "style_dim", "=", "style_dim", "\n", "\n", "layers", "=", "[", "PixelNorm", "(", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_mlp", ")", ":", "\n", "            ", "layers", ".", "append", "(", "EqualLinear", "(", "style_dim", ",", "style_dim", ",", "lr_mul", "=", "lr_mlp", ",", "activation", "=", "'fused_lrelu'", ")", ")", "\n", "\n", "", "self", ".", "style", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "channels", "=", "{", "\n", "4", ":", "min", "(", "512", ",", "int", "(", "round", "(", "4096", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "8", ":", "min", "(", "512", ",", "int", "(", "round", "(", "2048", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "16", ":", "min", "(", "512", ",", "int", "(", "round", "(", "1024", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "32", ":", "min", "(", "512", ",", "int", "(", "round", "(", "512", "*", "channel_multiplier", ")", ")", ")", ",", "\n", "64", ":", "int", "(", "round", "(", "256", "*", "channel_multiplier", ")", ")", ",", "\n", "128", ":", "int", "(", "round", "(", "128", "*", "channel_multiplier", ")", ")", ",", "\n", "256", ":", "int", "(", "round", "(", "64", "*", "channel_multiplier", ")", ")", ",", "\n", "512", ":", "int", "(", "round", "(", "32", "*", "channel_multiplier", ")", ")", ",", "\n", "1024", ":", "int", "(", "round", "(", "16", "*", "channel_multiplier", ")", ")", ",", "\n", "}", "\n", "\n", "self", ".", "input", "=", "ConstantInput", "(", "channels", "[", "4", "]", ")", "\n", "self", ".", "conv1", "=", "StyledConv", "(", "channels", "[", "4", "]", ",", "channels", "[", "4", "]", ",", "3", ",", "style_dim", ",", "blur_kernel", "=", "blur_kernel", ")", "\n", "self", ".", "to_rgb1", "=", "ToRGB", "(", "channels", "[", "4", "]", ",", "style_dim", ",", "upsample", "=", "False", ")", "\n", "\n", "self", ".", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "self", ".", "num_layers", "=", "(", "self", ".", "log_size", "-", "2", ")", "*", "2", "+", "1", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "to_rgbs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noises", "=", "nn", ".", "Module", "(", ")", "\n", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "res", "=", "(", "layer_idx", "+", "5", ")", "//", "2", "\n", "shape", "=", "[", "1", ",", "1", ",", "2", "**", "res", ",", "2", "**", "res", "]", "\n", "self", ".", "noises", ".", "register_buffer", "(", "f'noise_{layer_idx}'", ",", "torch", ".", "randn", "(", "*", "shape", ")", ")", "\n", "\n", "", "in_channel", "=", "channels", "[", "4", "]", "\n", "for", "i", "in", "range", "(", "3", ",", "self", ".", "log_size", "+", "1", ")", ":", "\n", "            ", "out_channel", "=", "channels", "[", "2", "**", "i", "]", "\n", "self", ".", "convs", ".", "append", "(", "StyledConv", "(", "in_channel", ",", "out_channel", ",", "3", ",", "style_dim", ",", "upsample", "=", "True", ",", "blur_kernel", "=", "blur_kernel", ")", ")", "\n", "self", ".", "convs", ".", "append", "(", "StyledConv", "(", "out_channel", ",", "out_channel", ",", "3", ",", "style_dim", ",", "blur_kernel", "=", "blur_kernel", ")", ")", "\n", "self", ".", "to_rgbs", ".", "append", "(", "ToRGB", "(", "out_channel", ",", "style_dim", ")", ")", "\n", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "n_latent", "=", "self", ".", "log_size", "*", "2", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2DecoderWS.make_noise": [[271, 278], ["range", "torch.randn", "range", "noises.append", "torch.randn"], "methods", ["None"], ["", "def", "make_noise", "(", "self", ")", ":", "\n", "        ", "device", "=", "self", ".", "input", ".", "input", ".", "device", "\n", "noises", "=", "[", "torch", ".", "randn", "(", "1", ",", "1", ",", "2", "**", "2", ",", "2", "**", "2", ",", "device", "=", "device", ")", "]", "\n", "for", "i", "in", "range", "(", "3", ",", "self", ".", "log_size", "+", "1", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                ", "noises", ".", "append", "(", "torch", ".", "randn", "(", "1", ",", "1", ",", "2", "**", "i", ",", "2", "**", "i", ",", "device", "=", "device", ")", ")", "\n", "", "", "return", "noises", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2DecoderWS.mean_latent": [[279, 284], ["torch.randn", "stylegan_networks.StyleGAN2DecoderWS.style().mean", "stylegan_networks.StyleGAN2DecoderWS.style"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "mean_latent", "(", "self", ",", "n_latent", ")", ":", "\n", "        ", "latent_in", "=", "torch", ".", "randn", "(", "n_latent", ",", "self", ".", "style_dim", ",", "device", "=", "self", ".", "input", ".", "input", ".", "device", ")", "\n", "latent", "=", "self", ".", "style", "(", "latent_in", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2DecoderWS.get_latent": [[285, 287], ["stylegan_networks.StyleGAN2DecoderWS.style"], "methods", ["None"], ["", "def", "get_latent", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "style", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyleGAN2DecoderWS.forward": [[288, 336], ["stylegan_networks.StyleGAN2DecoderWS.input", "stylegan_networks.StyleGAN2DecoderWS.conv1", "stylegan_networks.StyleGAN2DecoderWS.to_rgb1", "zip", "len", "styles[].unsqueeze().repeat", "styles[].unsqueeze().repeat", "torch.cat", "conv1", "conv2", "to_rgb", "stylegan_networks.StyleGAN2DecoderWS.style", "style_t.append", "len", "styles[].unsqueeze().repeat", "random.randint", "getattr", "styles[].unsqueeze", "styles[].unsqueeze", "range", "styles[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "styles", ",", "return_latents", "=", "False", ",", "inject_index", "=", "None", ",", "truncation", "=", "1", ",", "truncation_latent", "=", "None", ",", "\n", "input_is_latent", "=", "False", ",", "noise", "=", "None", ",", "randomize_noise", "=", "True", ",", ")", ":", "\n", "\n", "        ", "if", "not", "input_is_latent", ":", "\n", "            ", "styles", "=", "[", "self", ".", "style", "(", "s", ")", "for", "s", "in", "styles", "]", "\n", "\n", "", "if", "noise", "is", "None", ":", "\n", "            ", "if", "randomize_noise", ":", "\n", "                ", "noise", "=", "[", "None", "]", "*", "self", ".", "num_layers", "\n", "", "else", ":", "\n", "                ", "noise", "=", "[", "getattr", "(", "self", ".", "noises", ",", "f'noise_{i}'", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "]", "\n", "\n", "", "", "if", "truncation", "<", "1", ":", "\n", "            ", "style_t", "=", "[", "]", "\n", "for", "style", "in", "styles", ":", "\n", "                ", "style_t", ".", "append", "(", "truncation_latent", "+", "truncation", "*", "(", "style", "-", "truncation_latent", ")", ")", "\n", "", "styles", "=", "style_t", "\n", "\n", "", "if", "len", "(", "styles", ")", "<", "2", ":", "\n", "            ", "inject_index", "=", "self", ".", "n_latent", "\n", "if", "len", "(", "styles", "[", "0", "]", ".", "shape", ")", "<", "3", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "inject_index", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "inject_index", "is", "None", ":", "\n", "                ", "inject_index", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "n_latent", "-", "1", ")", "\n", "\n", "", "latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "inject_index", ",", "1", ")", "\n", "latent2", "=", "styles", "[", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_latent", "-", "inject_index", ",", "1", ")", "\n", "latent", "=", "torch", ".", "cat", "(", "[", "latent", ",", "latent2", "]", ",", "1", ")", "\n", "\n", "", "out", "=", "self", ".", "input", "(", "latent", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ",", "latent", "[", ":", ",", "0", "]", ",", "noise", "=", "noise", "[", "0", "]", ")", "\n", "skip", "=", "self", ".", "to_rgb1", "(", "out", ",", "latent", "[", ":", ",", "1", "]", ")", "\n", "\n", "i", "=", "1", "\n", "for", "conv1", ",", "conv2", ",", "noise1", ",", "noise2", ",", "to_rgb", "in", "zip", "(", "self", ".", "convs", "[", ":", ":", "2", "]", ",", "self", ".", "convs", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "2", ":", ":", "2", "]", ",", "self", ".", "to_rgbs", ")", ":", "\n", "            ", "out", "=", "conv1", "(", "out", ",", "latent", "[", ":", ",", "i", "]", ",", "noise", "=", "noise1", ")", "\n", "out", "=", "conv2", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "1", "]", ",", "noise", "=", "noise2", ")", "\n", "skip", "=", "to_rgb", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "2", "]", ",", "skip", ")", "\n", "i", "+=", "2", "\n", "\n", "", "image", "=", "skip", "\n", "if", "return_latents", ":", "\n", "            ", "return", "image", ",", "latent", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ModulatedConv2d.__init__": [[342, 373], ["torch.nn.Module.__init__", "torch.nn.Parameter", "stylegan_networks.Blur", "stylegan_networks.Blur", "math.sqrt", "math.sqrt", "torch.randn", "stylegan_networks.EqualLinear", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "style_dim", ",", "demodulate", "=", "True", ",", "upsample", "=", "False", ",", "\n", "downsample", "=", "False", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", "ModulatedConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "eps", "=", "1e-8", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "out_channel", "=", "out_channel", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "upsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "-", "(", "kernel_size", "-", "1", ")", "\n", "self", ".", "blur", "=", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", ",", "p", "//", "2", "+", "1", ")", ",", "upsample_factor", "=", "factor", ")", "\n", "\n", "", "if", "downsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "+", "(", "kernel_size", "-", "1", ")", "\n", "self", ".", "blur", "=", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "(", "p", "+", "1", ")", "//", "2", ",", "p", "//", "2", ")", ")", "\n", "\n", "", "fan_in", "=", "in_channel", "*", "kernel_size", "**", "2", "\n", "self", ".", "scale", "=", "math", ".", "sqrt", "(", "1", ")", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "out_channel", ",", "in_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", "\n", "\n", "if", "style_dim", "is", "not", "None", "and", "style_dim", ">", "0", ":", "\n", "            ", "self", ".", "modulation", "=", "EqualLinear", "(", "style_dim", ",", "in_channel", ",", "bias_init", "=", "1", ")", "\n", "\n", "", "self", ".", "demodulate", "=", "demodulate", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ModulatedConv2d.__repr__": [[374, 376], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "f'{self.__class__.__name__}({self.in_channel}, {self.out_channel}, {self.kernel_size}, '", "\n", "f'upsample={self.upsample}, downsample={self.downsample})'", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ModulatedConv2d.forward": [[378, 417], ["weight.transpose().reshape.transpose().reshape.view", "stylegan_networks.ModulatedConv2d.modulation().view", "torch.ones().to", "torch.rsqrt", "input.view.view.view", "weight.transpose().reshape.transpose().reshape.view", "weight.transpose().reshape.transpose().reshape.transpose().reshape", "torch.nn.functional.conv_transpose2d", "out.view.view.view", "stylegan_networks.ModulatedConv2d.blur", "torch.rsqrt.view", "stylegan_networks.ModulatedConv2d.blur", "input.view.view.view", "torch.nn.functional.conv2d", "out.view.view.view", "input.view.view.view", "torch.nn.functional.conv2d", "out.view.view.view", "stylegan_networks.ModulatedConv2d.modulation", "torch.ones", "weight.transpose().reshape.transpose().reshape.pow().sum", "weight.transpose().reshape.transpose().reshape.transpose", "weight.transpose().reshape.transpose().reshape.pow"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d"], ["", "def", "forward", "(", "self", ",", "input", ",", "style", ")", ":", "\n", "        ", "b", ",", "in_channel", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "\n", "if", "style", "is", "not", "None", ":", "\n", "            ", "style", "=", "self", ".", "modulation", "(", "style", ")", ".", "view", "(", "b", ",", "1", ",", "in_channel", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "style", "=", "torch", ".", "ones", "(", "b", ",", "1", ",", "in_channel", ",", "1", ",", "1", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "", "weight", "=", "self", ".", "scale", "*", "self", ".", "weight", "*", "style", "\n", "\n", "if", "self", ".", "demodulate", ":", "\n", "            ", "demod", "=", "torch", ".", "rsqrt", "(", "weight", ".", "pow", "(", "2", ")", ".", "sum", "(", "[", "2", ",", "3", ",", "4", "]", ")", "+", "1e-8", ")", "\n", "weight", "=", "weight", "*", "demod", ".", "view", "(", "b", ",", "self", ".", "out_channel", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "weight", "=", "weight", ".", "view", "(", "b", "*", "self", ".", "out_channel", ",", "in_channel", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", "\n", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "1", ",", "b", "*", "in_channel", ",", "h", ",", "w", ")", "\n", "weight", "=", "weight", ".", "view", "(", "b", ",", "self", ".", "out_channel", ",", "in_channel", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", "\n", "weight", "=", "weight", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "b", "*", "in_channel", ",", "self", ".", "out_channel", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", "\n", "out", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "weight", ",", "padding", "=", "0", ",", "stride", "=", "2", ",", "groups", "=", "b", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "out", "=", "out", ".", "view", "(", "b", ",", "self", ".", "out_channel", ",", "height", ",", "width", ")", "\n", "out", "=", "self", ".", "blur", "(", "out", ")", "\n", "\n", "", "elif", "self", ".", "downsample", ":", "\n", "            ", "input", "=", "self", ".", "blur", "(", "input", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "input", ".", "shape", "\n", "input", "=", "input", ".", "view", "(", "1", ",", "b", "*", "in_channel", ",", "height", ",", "width", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "padding", "=", "0", ",", "stride", "=", "2", ",", "groups", "=", "b", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "out", "=", "out", ".", "view", "(", "b", ",", "self", ".", "out_channel", ",", "height", ",", "width", ")", "\n", "\n", "", "else", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "1", ",", "b", "*", "in_channel", ",", "h", ",", "w", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "padding", "=", "self", ".", "padding", ",", "groups", "=", "b", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "out", "=", "out", ".", "view", "(", "b", ",", "self", ".", "out_channel", ",", "height", ",", "width", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyledConv.__init__": [[420, 430], ["torch.nn.Module.__init__", "stylegan_networks.ModulatedConv2d", "stylegan_networks.NoiseInjection", "stylegan_networks.FusedLeakyReLU"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "style_dim", "=", "None", ",", "upsample", "=", "False", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "demodulate", "=", "True", ",", "inject_noise", "=", "None", ")", ":", "\n", "        ", "super", "(", "StyledConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inject_noise", "=", "inject_noise", "\n", "self", ".", "conv", "=", "ModulatedConv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "style_dim", ",", "upsample", "=", "upsample", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "demodulate", "=", "demodulate", ")", "\n", "\n", "self", ".", "noise", "=", "NoiseInjection", "(", ")", "\n", "self", ".", "activate", "=", "FusedLeakyReLU", "(", "out_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.StyledConv.forward": [[431, 438], ["stylegan_networks.StyledConv.conv", "stylegan_networks.StyledConv.activate", "stylegan_networks.StyledConv.noise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "style", "=", "None", ",", "noise", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "input", ",", "style", ")", "\n", "if", "self", ".", "inject_noise", ":", "\n", "            ", "out", "=", "self", ".", "noise", "(", "out", ",", "noise", "=", "noise", ")", "\n", "", "out", "=", "self", ".", "activate", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ToRGB.__init__": [[441, 449], ["torch.nn.Module.__init__", "stylegan_networks.ModulatedConv2d", "torch.nn.Parameter", "stylegan_networks.Upsample", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "style_dim", ",", "upsample", "=", "True", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "upsample", ":", "\n", "            ", "self", ".", "upsample", "=", "Upsample", "(", "blur_kernel", ")", "\n", "\n", "", "self", ".", "conv", "=", "ModulatedConv2d", "(", "in_channel", ",", "3", ",", "1", ",", "style_dim", ",", "demodulate", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ToRGB.forward": [[450, 459], ["stylegan_networks.ToRGB.conv", "stylegan_networks.ToRGB.upsample"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.lpips.upsample"], ["", "def", "forward", "(", "self", ",", "input", ",", "style", ",", "skip", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "input", ",", "style", ")", "\n", "out", "=", "out", "+", "self", ".", "bias", "\n", "\n", "if", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "upsample", "(", "skip", ")", "\n", "out", "=", "out", "+", "skip", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ConvLayer.__init__": [[462, 484], ["layers.append", "torch.nn.Sequential.__init__", "layers.append", "stylegan_networks.EqualConv2d", "stylegan_networks.Blur", "layers.append", "layers.append", "len", "stylegan_networks.FusedLeakyReLU", "stylegan_networks.ScaledLeakyReLU"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "downsample", "=", "False", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "bias", "=", "True", ",", "activate", "=", "True", ",", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "if", "downsample", ":", "\n", "            ", "factor", "=", "2", "\n", "p", "=", "(", "len", "(", "blur_kernel", ")", "-", "factor", ")", "+", "(", "kernel_size", "-", "1", ")", "\n", "layers", ".", "append", "(", "Blur", "(", "blur_kernel", ",", "pad", "=", "(", "(", "p", "+", "1", ")", "//", "2", ",", "p", "//", "2", ")", ")", ")", "\n", "stride", "=", "2", "\n", "self", ".", "padding", "=", "0", "\n", "", "else", ":", "\n", "            ", "stride", "=", "1", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "", "layers", ".", "append", "(", "EqualConv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "padding", "=", "self", ".", "padding", ",", "stride", "=", "stride", ",", "bias", "=", "bias", "and", "not", "activate", ",", ")", ")", "\n", "\n", "if", "activate", ":", "\n", "            ", "if", "bias", ":", "\n", "                ", "layers", ".", "append", "(", "FusedLeakyReLU", "(", "out_channel", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "ScaledLeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ResBlock.__init__": [[487, 498], ["torch.nn.Module.__init__", "stylegan_networks.ConvLayer", "stylegan_networks.ConvLayer", "stylegan_networks.ConvLayer", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "downsample", "=", "True", ",", "skip_gain", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "skip_gain", "=", "skip_gain", "\n", "self", ".", "conv1", "=", "ConvLayer", "(", "in_channel", ",", "in_channel", ",", "3", ")", "\n", "self", ".", "conv2", "=", "ConvLayer", "(", "in_channel", ",", "out_channel", ",", "3", ",", "downsample", "=", "downsample", ",", "blur_kernel", "=", "blur_kernel", ")", "\n", "\n", "if", "in_channel", "!=", "out_channel", "or", "downsample", ":", "\n", "            ", "self", ".", "skip", "=", "ConvLayer", "(", "in_channel", ",", "out_channel", ",", "1", ",", "downsample", "=", "downsample", ",", "activate", "=", "False", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ResBlock.forward": [[499, 507], ["stylegan_networks.ResBlock.conv1", "stylegan_networks.ResBlock.conv2", "stylegan_networks.ResBlock.skip", "math.sqrt"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "input", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n", "out", "=", "(", "out", "*", "self", ".", "skip_gain", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "self", ".", "skip_gain", "**", "2", "+", "1.0", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.FusedLeakyReLU.__init__": [[517, 522], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "channel", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.FusedLeakyReLU.forward": [[523, 526], ["stylegan_networks.fused_leaky_relu"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.fused_leaky_relu"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "fused_leaky_relu", "(", "input", ",", "self", ".", "bias", ",", "self", ".", "negative_slope", ",", "self", ".", "scale", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.PixelNorm.__init__": [[552, 554], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.PixelNorm.forward": [[555, 557], ["torch.rsqrt", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "/", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.Upsample.__init__": [[571, 584], ["torch.nn.Module.__init__", "stylegan_networks.Upsample.register_buffer", "stylegan_networks.make_kernel"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.make_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "factor", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "factor", "=", "factor", "\n", "kernel", "=", "make_kernel", "(", "kernel", ")", "*", "(", "factor", "**", "2", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", ")", "\n", "\n", "p", "=", "kernel", ".", "shape", "[", "0", "]", "-", "factor", "\n", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "self", ".", "pad", "=", "(", "pad0", ",", "pad1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.Upsample.forward": [[585, 589], ["stylegan_networks.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "upfirdn2d", "(", "input", ",", "self", ".", "kernel", ",", "up", "=", "self", ".", "factor", ",", "down", "=", "1", ",", "pad", "=", "self", ".", "pad", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.Downsample.__init__": [[592, 605], ["torch.nn.Module.__init__", "stylegan_networks.make_kernel", "stylegan_networks.Downsample.register_buffer"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.make_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "factor", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "factor", "=", "factor", "\n", "kernel", "=", "make_kernel", "(", "kernel", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", ")", "\n", "\n", "p", "=", "kernel", ".", "shape", "[", "0", "]", "-", "factor", "\n", "\n", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "\n", "pad1", "=", "p", "//", "2", "\n", "\n", "self", ".", "pad", "=", "(", "pad0", ",", "pad1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.Downsample.forward": [[606, 610], ["stylegan_networks.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "upfirdn2d", "(", "input", ",", "self", ".", "kernel", ",", "up", "=", "1", ",", "down", "=", "self", ".", "factor", ",", "pad", "=", "self", ".", "pad", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.Blur.__init__": [[613, 624], ["torch.nn.Module.__init__", "stylegan_networks.make_kernel", "stylegan_networks.Blur.register_buffer"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.make_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "pad", ",", "upsample_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "kernel", "=", "make_kernel", "(", "kernel", ")", "\n", "\n", "if", "upsample_factor", ">", "1", ":", "\n", "            ", "kernel", "=", "kernel", "*", "(", "upsample_factor", "**", "2", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", ")", "\n", "\n", "self", ".", "pad", "=", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.Blur.forward": [[625, 629], ["stylegan_networks.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "upfirdn2d", "(", "input", ",", "self", ".", "kernel", ",", "pad", "=", "self", ".", "pad", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ScaledLeakyReLU.__init__": [[632, 636], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ScaledLeakyReLU.forward": [[637, 641], ["torch.nn.functional.leaky_relu", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "leaky_relu", "(", "input", ",", "negative_slope", "=", "self", ".", "negative_slope", ")", "\n", "\n", "return", "out", "*", "math", ".", "sqrt", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.NoiseInjection.__init__": [[644, 648], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.NoiseInjection.forward": [[649, 655], ["image.new_empty().normal_", "image.new_empty"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "noise", "=", "None", ")", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "batch", ",", "_", ",", "height", ",", "width", "=", "image", ".", "shape", "\n", "noise", "=", "image", ".", "new_empty", "(", "batch", ",", "1", ",", "height", ",", "width", ")", ".", "normal_", "(", ")", "\n", "\n", "", "return", "image", "+", "self", ".", "weight", "*", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ConstantInput.__init__": [[658, 662], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "size", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "channel", ",", "size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.ConstantInput.forward": [[663, 668], ["stylegan_networks.ConstantInput.input.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "batch", "=", "input", ".", "shape", "[", "0", "]", "\n", "out", "=", "self", ".", "input", ".", "repeat", "(", "batch", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.EqualConv2d.__init__": [[671, 684], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn", "math.sqrt", "math.sqrt", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "out_channel", ",", "in_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", "\n", "self", ".", "scale", "=", "math", ".", "sqrt", "(", "1", ")", "/", "math", ".", "sqrt", "(", "in_channel", "*", "(", "kernel_size", "**", "2", ")", ")", "\n", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channel", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.EqualConv2d.forward": [[685, 688], ["torch.nn.functional.conv2d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "F", ".", "conv2d", "(", "input", ",", "self", ".", "weight", "*", "self", ".", "scale", ",", "bias", "=", "self", ".", "bias", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.EqualConv2d.__repr__": [[689, 691], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "f'{self.__class__.__name__}({self.weight.shape[1]}, {self.weight.shape[0]},'", "\n", "f' {self.weight.shape[2]}, stride={self.stride}, padding={self.padding})'", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.EqualLinear.__init__": [[695, 709], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn().div_", "torch.nn.Parameter", "torch.zeros().fill_", "math.sqrt", "math.sqrt", "torch.randn", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "bias", "=", "True", ",", "bias_init", "=", "0", ",", "lr_mul", "=", "1.0", ",", "activation", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "out_channel", ",", "in_channel", ")", ".", "div_", "(", "lr_mul", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channel", ")", ".", "fill_", "(", "bias_init", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n", "", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "scale", "=", "(", "math", ".", "sqrt", "(", "1", ")", "/", "math", ".", "sqrt", "(", "in_channel", ")", ")", "*", "lr_mul", "\n", "self", ".", "lr_mul", "=", "lr_mul", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.EqualLinear.forward": [[710, 718], ["torch.nn.functional.linear", "stylegan_networks.fused_leaky_relu", "torch.nn.functional.linear"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.fused_leaky_relu"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "activation", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", "*", "self", ".", "scale", ")", "\n", "out", "=", "fused_leaky_relu", "(", "out", ",", "self", ".", "bias", "*", "self", ".", "lr_mul", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", "*", "self", ".", "scale", ",", "bias", "=", "self", ".", "bias", "*", "self", ".", "lr_mul", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.EqualLinear.__repr__": [[719, 721], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "f'{self.__class__.__name__}({self.weight.shape[1]}, {self.weight.shape[0]})'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.fused_leaky_relu": [[512, 514], ["torch.nn.functional.leaky_relu"], "function", ["None"], ["", "", "def", "fused_leaky_relu", "(", "input", ",", "bias", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "    ", "return", "F", ".", "leaky_relu", "(", "input", "+", "bias", ",", "negative_slope", ")", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.upfirdn2d_native": [[528, 545], ["input.view", "torch.nn.functional.pad", "out.reshape.view", "torch.nn.functional.pad", "out.reshape.reshape", "torch.flip().view", "torch.nn.functional.conv2d", "out.reshape.reshape", "max", "max", "max", "max", "torch.flip", "max", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "", "def", "upfirdn2d_native", "(", "input", ",", "kernel", ",", "up_x", ",", "up_y", ",", "down_x", ",", "down_y", ",", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", ")", ":", "\n", "    ", "_", ",", "minor", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "kernel_h", ",", "kernel_w", "=", "kernel", ".", "shape", "\n", "\n", "out", "=", "input", ".", "view", "(", "-", "1", ",", "minor", ",", "in_h", ",", "1", ",", "in_w", ",", "1", ")", "\n", "out", "=", "F", ".", "pad", "(", "out", ",", "[", "0", ",", "up_x", "-", "1", ",", "0", ",", "0", ",", "0", ",", "up_y", "-", "1", ",", "0", ",", "0", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "minor", ",", "in_h", "*", "up_y", ",", "in_w", "*", "up_x", ")", "\n", "\n", "out", "=", "F", ".", "pad", "(", "out", ",", "[", "max", "(", "pad_x0", ",", "0", ")", ",", "max", "(", "pad_x1", ",", "0", ")", ",", "max", "(", "pad_y0", ",", "0", ")", ",", "max", "(", "pad_y1", ",", "0", ")", "]", ")", "\n", "out", "=", "out", "[", ":", ",", ":", ",", "max", "(", "-", "pad_y0", ",", "0", ")", ":", "out", ".", "shape", "[", "2", "]", "-", "max", "(", "-", "pad_y1", ",", "0", ")", ",", "max", "(", "-", "pad_x0", ",", "0", ")", ":", "out", ".", "shape", "[", "3", "]", "-", "max", "(", "-", "pad_x1", ",", "0", ")", ",", "]", "\n", "\n", "out", "=", "out", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", ",", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "]", ")", "\n", "w", "=", "torch", ".", "flip", "(", "kernel", ",", "[", "0", ",", "1", "]", ")", ".", "view", "(", "1", ",", "1", ",", "kernel_h", ",", "kernel_w", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "out", ",", "w", ")", "\n", "out", "=", "out", ".", "reshape", "(", "-", "1", ",", "minor", ",", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", "+", "1", ",", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", "+", "1", ",", ")", "\n", "\n", "return", "out", "[", ":", ",", ":", ",", ":", ":", "down_y", ",", ":", ":", "down_x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.upfirdn2d": [[547, 549], ["stylegan_networks.upfirdn2d_native"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.upfirdn2d_native"], ["", "def", "upfirdn2d", "(", "input", ",", "kernel", ",", "up", "=", "1", ",", "down", "=", "1", ",", "pad", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "    ", "return", "upfirdn2d_native", "(", "input", ",", "kernel", ",", "up", ",", "up", ",", "down", ",", "down", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.stylegan_networks.make_kernel": [[559, 568], ["torch.tensor", "torch.tensor.sum", "len"], "function", ["None"], ["", "", "def", "make_kernel", "(", "k", ")", ":", "\n", "    ", "k", "=", "torch", ".", "tensor", "(", "k", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "if", "len", "(", "k", ".", "shape", ")", "==", "1", ":", "\n", "        ", "k", "=", "k", "[", "None", ",", ":", "]", "*", "k", "[", ":", ",", "None", "]", "\n", "\n", "", "k", "/=", "k", ".", "sum", "(", ")", "\n", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.__init__": [[18, 45], ["os.path.join", "torch.device", "torch.device"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the BaseModel class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n\n        When creating your custom class, you need to implement your own initialization.\n        In this function, you should first call <BaseModel.__init__(self, opt)>\n        Then, you need to define four lists:\n            -- self.loss_names (str list):          specify the training losses that you want to plot and save.\n            -- self.model_names (str list):         define networks used in our training.\n            -- self.visual_names (str list):        specify the images that you want to display and save.\n            -- self.optimizers (optimizer list):    define and initialize optimizers. You can define one optimizer for each network. If two networks are updated at the same time, you can use itertools.chain to group them. See cycle_gan_model.py for an example.\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "# get device name: CPU or GPU", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "# save all the checkpoints to save_dir", "\n", "if", "opt", ".", "preprocess", "!=", "'scale_width'", ":", "# with [scale_width], input images might have different sizes, which hurts the performance of cudnn.benchmark.", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "self", ".", "metric", "=", "0", "# used for learning rate policy 'plateau'", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.modify_commandline_options": [[46, 58], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new model-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_input": [[59, 67], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input (dict): includes the data itself and its metadata information.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.forward": [[68, 72], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.optimize_parameters": [[73, 77], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.setup": [[78, 90], ["base_model.BaseModel.print_networks", "base_model.BaseModel.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Load and print networks; create schedulers\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "schedulers", "=", "[", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "]", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "load_suffix", "=", "'iter_%d'", "%", "opt", ".", "load_iter", "if", "opt", ".", "load_iter", ">", "0", "else", "opt", ".", "epoch", "\n", "self", ".", "load_networks", "(", "load_suffix", ")", "\n", "", "self", ".", "print_networks", "(", "opt", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.parallelize": [[91, 97], ["isinstance", "getattr", "len", "setattr", "torch.nn.DataParallel"], "methods", ["None"], ["", "def", "parallelize", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "                    ", "setattr", "(", "self", ",", "'net'", "+", "name", ",", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "self", ".", "opt", ".", "gpu_ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.data_dependent_initialize": [[98, 100], ["None"], "methods", ["None"], ["", "", "", "", "def", "data_dependent_initialize", "(", "self", ",", "data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.eval": [[101, 107], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make models eval mode during test time\"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.test": [[108, 117], ["torch.no_grad", "base_model.BaseModel.forward", "base_model.BaseModel.compute_visuals"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.colorization_model.ColorizationModel.compute_visuals"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Forward function used in test time.\n\n        This function wraps <forward> function in no_grad() so we don't save intermediate steps for backprop\n        It also calls <compute_visuals> to produce additional visualization results\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "self", ".", "compute_visuals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.compute_visuals": [[118, 121], ["None"], "methods", ["None"], ["", "", "def", "compute_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate additional output images for visdom and HTML visualization\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.get_image_paths": [[122, 125], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return image paths that are used to load current data\"\"\"", "\n", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.update_learning_rate": [[126, 137], ["print", "scheduler.step", "scheduler.step"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update learning rates for all the networks; called at the end of every epoch\"\"\"", "\n", "old_lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "if", "self", ".", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "                ", "scheduler", ".", "step", "(", "self", ".", "metric", ")", "\n", "", "else", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate %.7f -> %.7f'", "%", "(", "old_lr", ",", "lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.get_current_visuals": [[138, 145], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return visualization images. train.py will display these images with visdom, and save the images to a HTML\"\"\"", "\n", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "visual_ret", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.get_current_losses": [[146, 153], ["collections.OrderedDict", "isinstance", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return traning losses / errors. train.py will print out these errors on console, and save them to a file\"\"\"", "\n", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "# float(...) works for both scalar tensor and float number", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.save_networks": [[154, 171], ["isinstance", "os.path.join", "getattr", "torch.cuda.is_available", "torch.save", "getattr.cuda", "torch.save", "len", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.module.cpu", "getattr.cpu"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "def", "save_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Save all the networks to the disk.\n\n        Parameters:\n            epoch (int) -- current epoch; used in the file name '%s_net_%s.pth' % (epoch, name)\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.__patch_instance_norm_state_dict": [[172, 185], ["len", "base_model.BaseModel.__patch_instance_norm_state_dict", "module.__class__.__name__.startswith", "module.__class__.__name__.startswith", "state_dict.pop", "getattr", "getattr", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "", "", "def", "__patch_instance_norm_state_dict", "(", "self", ",", "state_dict", ",", "module", ",", "keys", ",", "i", "=", "0", ")", ":", "\n", "        ", "\"\"\"Fix InstanceNorm checkpoints incompatibility (prior to 0.4)\"\"\"", "\n", "key", "=", "keys", "[", "i", "]", "\n", "if", "i", "+", "1", "==", "len", "(", "keys", ")", ":", "# at the end, pointing to a parameter/buffer", "\n", "            ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'running_mean'", "or", "key", "==", "'running_var'", ")", ":", "\n", "                ", "if", "getattr", "(", "module", ",", "key", ")", "is", "None", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'num_batches_tracked'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "getattr", "(", "module", ",", "key", ")", ",", "keys", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.load_networks": [[186, 210], ["isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "hasattr", "list", "getattr.load_state_dict", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "load_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Load all the networks from the disk.\n\n        Parameters:\n            epoch (int) -- current epoch; used in the file name '%s_net_%s.pth' % (epoch, name)\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "'loading the model from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "'_metadata'", ")", ":", "\n", "                    ", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "# need to copy keys here because we mutate in loop", "\n", "                    ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "net", ",", "key", ".", "split", "(", "'.'", ")", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.print_networks": [[211, 228], ["print", "print", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["None"], ["", "", "", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "\"\"\"Print the total number of parameters in the network and (if verbose) network architecture\n\n        Parameters:\n            verbose (bool) -- if verbose: print the network architecture\n        \"\"\"", "\n", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad": [[229, 241], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n        Parameters:\n            nets (network list)   -- a list of networks\n            requires_grad (bool)  -- whether the networks require gradients or not\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.GaussianBlur.__init__": [[39, 43], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "radius_min", "=", "0.1", ",", "radius_max", "=", "2.", ")", ":", "\n", "        ", "self", ".", "prob", "=", "p", "\n", "self", ".", "radius_min", "=", "radius_min", "\n", "self", ".", "radius_max", "=", "radius_max", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.GaussianBlur.__call__": [[44, 52], ["img.filter", "random.random", "PIL.ImageFilter.GaussianBlur", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "do_it", "=", "random", ".", "random", "(", ")", "<=", "self", ".", "prob", "\n", "if", "not", "do_it", ":", "\n", "            ", "return", "img", "\n", "\n", "", "return", "img", ".", "filter", "(", "\n", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "uniform", "(", "self", ".", "radius_min", ",", "self", ".", "radius_max", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.Solarization.__init__": [[60, 62], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.Solarization.__call__": [[63, 68], ["random.random", "PIL.ImageOps.solarize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "ImageOps", ".", "solarize", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.__init__": [[198, 205], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.6f} ({global_avg:.6f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.update": [[206, 210], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.synchronize_between_processes": [[211, 223], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.median": [[224, 228], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.avg": [[229, 233], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.global_avg": [[234, 237], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max": [[238, 241], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.value": [[242, 245], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.__str__": [[246, 253], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MetricLogger.__init__": [[283, 286], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MetricLogger.update": [[287, 293], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MetricLogger.__getattr__": [[294, 301], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MetricLogger.__str__": [[302, 309], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MetricLogger.synchronize_between_processes": [[310, 313], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MetricLogger.add_meter": [[314, 316], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MetricLogger.log_every": [[317, 370], ["time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "utils.MetricLogger.delimiter.join", "utils.MetricLogger.delimiter.join", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "utils.MetricLogger.format", "utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.6f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.6f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.6f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.__init__": [[526, 532], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "0", ",", "weight_decay", "=", "0", ",", "momentum", "=", "0.9", ",", "eta", "=", "0.001", ",", "\n", "weight_decay_filter", "=", "None", ",", "lars_adaptation_filter", "=", "None", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ",", "momentum", "=", "momentum", ",", "\n", "eta", "=", "eta", ",", "weight_decay_filter", "=", "weight_decay_filter", ",", "\n", "lars_adaptation_filter", "=", "lars_adaptation_filter", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step": [[533, 561], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mu.mul_().add_", "p.add_", "dp.mul.mul.add", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.where", "torch.where", "torch.where", "torch.where", "dp.mul.mul.mul", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "mu.mul_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "g", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "g", "[", "'params'", "]", ":", "\n", "                ", "dp", "=", "p", ".", "grad", "\n", "\n", "if", "dp", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "p", ".", "ndim", "!=", "1", ":", "\n", "                    ", "dp", "=", "dp", ".", "add", "(", "p", ",", "alpha", "=", "g", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "if", "p", ".", "ndim", "!=", "1", ":", "\n", "                    ", "param_norm", "=", "torch", ".", "norm", "(", "p", ")", "\n", "update_norm", "=", "torch", ".", "norm", "(", "dp", ")", "\n", "one", "=", "torch", ".", "ones_like", "(", "param_norm", ")", "\n", "q", "=", "torch", ".", "where", "(", "param_norm", ">", "0.", ",", "\n", "torch", ".", "where", "(", "update_norm", ">", "0", ",", "\n", "(", "g", "[", "'eta'", "]", "*", "param_norm", "/", "update_norm", ")", ",", "one", ")", ",", "one", ")", "\n", "dp", "=", "dp", ".", "mul", "(", "q", ")", "\n", "\n", "", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'mu'", "not", "in", "param_state", ":", "\n", "                    ", "param_state", "[", "'mu'", "]", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "", "mu", "=", "param_state", "[", "'mu'", "]", "\n", "mu", ".", "mul_", "(", "g", "[", "'momentum'", "]", ")", ".", "add_", "(", "dp", ")", "\n", "\n", "p", ".", "add_", "(", "mu", ",", "alpha", "=", "-", "g", "[", "'lr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MultiCropWrapper.__init__": [[572, 578], ["torch.nn.Module.__init__", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "head", ")", ":", "\n", "        ", "super", "(", "MultiCropWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# disable layers dedicated to ImageNet labels classification", "\n", "backbone", ".", "fc", ",", "backbone", ".", "head", "=", "nn", ".", "Identity", "(", ")", ",", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "head", "=", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.MultiCropWrapper.forward": [[579, 597], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "utils.MultiCropWrapper.head", "isinstance", "utils.MultiCropWrapper.backbone", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# convert to list", "\n", "        ", "if", "not", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "x", "=", "[", "x", "]", "\n", "", "idx_crops", "=", "torch", ".", "cumsum", "(", "torch", ".", "unique_consecutive", "(", "\n", "torch", ".", "tensor", "(", "[", "inp", ".", "shape", "[", "-", "1", "]", "for", "inp", "in", "x", "]", ")", ",", "\n", "return_counts", "=", "True", ",", "\n", ")", "[", "1", "]", ",", "0", ")", "\n", "start_idx", "=", "0", "\n", "for", "end_idx", "in", "idx_crops", ":", "\n", "            ", "_out", "=", "self", ".", "backbone", "(", "torch", ".", "cat", "(", "x", "[", "start_idx", ":", "end_idx", "]", ")", ")", "\n", "if", "start_idx", "==", "0", ":", "\n", "                ", "output", "=", "_out", "\n", "", "else", ":", "\n", "                ", "output", "=", "torch", ".", "cat", "(", "(", "output", ",", "_out", ")", ")", "\n", "", "start_idx", "=", "end_idx", "\n", "# Run the head forward on the concatenated features.", "\n", "", "return", "self", ".", "head", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.load_pretrained_weights": [[70, 99], ["os.path.isfile", "torch.load", "torch.load", "model.load_state_dict", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "k.replace", "k.replace", "utils.setup_for_distributed.print", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "model.load_state_dict", "utils.setup_for_distributed.print", "torch.hub.load_state_dict_from_url.items", "torch.hub.load_state_dict_from_url.items"], "function", ["None"], ["", "", "", "def", "load_pretrained_weights", "(", "model", ",", "pretrained_weights", ",", "checkpoint_key", ",", "model_name", ",", "patch_size", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "pretrained_weights", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "pretrained_weights", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "checkpoint_key", "is", "not", "None", "and", "checkpoint_key", "in", "state_dict", ":", "\n", "            ", "print", "(", "f\"Take key {checkpoint_key} in provided checkpoint dict\"", ")", "\n", "state_dict", "=", "state_dict", "[", "checkpoint_key", "]", "\n", "# remove `module.` prefix", "\n", "", "state_dict", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "# remove `backbone.` prefix induced by multicrop wrapper", "\n", "state_dict", "=", "{", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Pretrained weights found at {} and loaded with msg: {}'", ".", "format", "(", "pretrained_weights", ",", "msg", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Please use the `--pretrained_weights` argument to indicate the path of the checkpoint to evaluate.\"", ")", "\n", "url", "=", "None", "\n", "if", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "16", ":", "\n", "            ", "url", "=", "\"dino_deitsmall16_pretrain/dino_deitsmall16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "8", ":", "\n", "            ", "url", "=", "\"dino_deitsmall8_pretrain/dino_deitsmall8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "16", ":", "\n", "            ", "url", "=", "\"dino_vitbase16_pretrain/dino_vitbase16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "8", ":", "\n", "            ", "url", "=", "\"dino_vitbase8_pretrain/dino_vitbase8_pretrain.pth\"", "\n", "", "if", "url", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Since no pretrained weights have been provided, we load the reference pretrained DINO weights.\"", ")", "\n", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/\"", "+", "url", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"There is no reference weights available for this model => We use random weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.clip_gradients": [[101, 111], ["model.named_parameters", "p.grad.data.norm", "norms.append", "p.grad.data.norm.item", "p.grad.data.mul_"], "function", ["None"], ["", "", "", "def", "clip_gradients", "(", "model", ",", "clip", ")", ":", "\n", "    ", "norms", "=", "[", "]", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "data", ".", "norm", "(", "2", ")", "\n", "norms", ".", "append", "(", "param_norm", ".", "item", "(", ")", ")", "\n", "clip_coef", "=", "clip", "/", "(", "param_norm", "+", "1e-6", ")", "\n", "if", "clip_coef", "<", "1", ":", "\n", "                ", "p", ".", "grad", ".", "data", ".", "mul_", "(", "clip_coef", ")", "\n", "", "", "", "return", "norms", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.cancel_gradients_last_layer": [[113, 119], ["model.named_parameters"], "function", ["None"], ["", "def", "cancel_gradients_last_layer", "(", "epoch", ",", "model", ",", "freeze_last_layer", ")", ":", "\n", "    ", "if", "epoch", ">=", "freeze_last_layer", ":", "\n", "        ", "return", "\n", "", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "\"last_layer\"", "in", "n", ":", "\n", "            ", "p", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.restart_from_checkpoint": [[121, 154], ["utils.setup_for_distributed.print", "torch.load", "torch.load", "kwargs.items", "os.path.isfile", "utils.setup_for_distributed.print", "value.load_state_dict", "utils.setup_for_distributed.print", "value.load_state_dict", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print"], "function", ["None"], ["", "", "", "def", "restart_from_checkpoint", "(", "ckp_path", ",", "run_variables", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Re-start from checkpoint\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "ckp_path", ")", ":", "\n", "        ", "return", "\n", "", "print", "(", "\"Found checkpoint at {}\"", ".", "format", "(", "ckp_path", ")", ")", "\n", "\n", "# open checkpoint file", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckp_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "# key is what to look for in the checkpoint file", "\n", "# value is the object to load", "\n", "# example: {'state_dict': model}", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "checkpoint", "and", "value", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "msg", "=", "value", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"=> loaded {} from checkpoint '{}' with msg {}\"", ".", "format", "(", "key", ",", "ckp_path", ",", "msg", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "try", ":", "\n", "                    ", "msg", "=", "value", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "print", "(", "\"=> loaded {} from checkpoint '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print", "(", "\"=> failed to load {} from checkpoint '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "print", "(", "\"=> failed to load {} from checkpoint '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "\n", "# re load variable important for the run", "\n", "", "", "if", "run_variables", "is", "not", "None", ":", "\n", "        ", "for", "var_name", "in", "run_variables", ":", "\n", "            ", "if", "var_name", "in", "checkpoint", ":", "\n", "                ", "run_variables", "[", "var_name", "]", "=", "checkpoint", "[", "var_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.cosine_scheduler": [[156, 168], ["numpy.array", "numpy.arange", "numpy.concatenate", "numpy.linspace", "len", "numpy.cos", "len"], "function", ["None"], ["", "", "", "", "def", "cosine_scheduler", "(", "base_value", ",", "final_value", ",", "epochs", ",", "niter_per_ep", ",", "warmup_epochs", "=", "0", ",", "start_warmup_value", "=", "0", ")", ":", "\n", "    ", "warmup_schedule", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "warmup_iters", "=", "warmup_epochs", "*", "niter_per_ep", "\n", "if", "warmup_epochs", ">", "0", ":", "\n", "        ", "warmup_schedule", "=", "np", ".", "linspace", "(", "start_warmup_value", ",", "base_value", ",", "warmup_iters", ")", "\n", "\n", "", "iters", "=", "np", ".", "arange", "(", "epochs", "*", "niter_per_ep", "-", "warmup_iters", ")", "\n", "schedule", "=", "final_value", "+", "0.5", "*", "(", "base_value", "-", "final_value", ")", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "iters", "/", "len", "(", "iters", ")", ")", ")", "\n", "\n", "schedule", "=", "np", ".", "concatenate", "(", "(", "warmup_schedule", ",", "schedule", ")", ")", "\n", "assert", "len", "(", "schedule", ")", "==", "epochs", "*", "niter_per_ep", "\n", "return", "schedule", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.bool_flag": [[170, 182], ["s.lower", "s.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "bool_flag", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    Parse boolean arguments from the command line.\n    \"\"\"", "\n", "FALSY_STRINGS", "=", "{", "\"off\"", ",", "\"false\"", ",", "\"0\"", "}", "\n", "TRUTHY_STRINGS", "=", "{", "\"on\"", ",", "\"true\"", ",", "\"1\"", "}", "\n", "if", "s", ".", "lower", "(", ")", "in", "FALSY_STRINGS", ":", "\n", "        ", "return", "False", "\n", "", "elif", "s", ".", "lower", "(", ")", "in", "TRUTHY_STRINGS", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"invalid value for a boolean flag\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.fix_random_seeds": [[184, 191], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["", "", "def", "fix_random_seeds", "(", "seed", "=", "31", ")", ":", "\n", "    ", "\"\"\"\n    Fix random seeds.\n    \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.reduce_dict": [[255, 280], ["utils.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_world_size"], ["", "", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_sha": [[372, 390], ["os.path.dirname", "os.path.abspath", "subprocess.check_output().decode().strip", "utils.get_sha._run"], "function", ["None"], ["", "", "def", "get_sha", "(", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n", "def", "_run", "(", "command", ")", ":", "\n", "        ", "return", "subprocess", ".", "check_output", "(", "command", ",", "cwd", "=", "cwd", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "", "sha", "=", "'N/A'", "\n", "diff", "=", "\"clean\"", "\n", "branch", "=", "'N/A'", "\n", "try", ":", "\n", "        ", "sha", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'diff'", "]", ",", "cwd", "=", "cwd", ")", "\n", "diff", "=", "_run", "(", "[", "'git'", ",", "'diff-index'", ",", "'HEAD'", "]", ")", "\n", "diff", "=", "\"has uncommited changes\"", "if", "diff", "else", "\"clean\"", "\n", "branch", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'--abbrev-ref'", ",", "'HEAD'", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "", "message", "=", "f\"sha: {sha}, status: {diff}, branch: {branch}\"", "\n", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.is_dist_avail_and_initialized": [[392, 398], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_world_size": [[400, 404], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_world_size", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank": [[406, 410], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.is_main_process": [[412, 414], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.save_on_master": [[416, 419], ["utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.is_main_process", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.html.HTML.save"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.setup_for_distributed": [[421, 434], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.init_distributed_mode": [[436, 469], ["torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.barrier", "utils.setup_for_distributed", "int", "int", "int", "int", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.device_count", "torch.cuda.device_count", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.setup_for_distributed"], ["", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "# launched with torch.distributed.launch", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "# launched with submitit on a slurm cluster", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "# launched naively with `python main_dino.py`", "\n", "# we manually add MASTER_ADDR and MASTER_PORT to env variables", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'Will run the code on one GPU.'", ")", "\n", "args", ".", "rank", ",", "args", ".", "gpu", ",", "args", ".", "world_size", "=", "0", ",", "0", ",", "1", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'127.0.0.1'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "'29500'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Does not support training without GPU.'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ",", "\n", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.accuracy": [[471, 479], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.reshape().expand_as", "target.reshape", "correct[].reshape().float().sum", "correct[].reshape().float", "correct[].reshape"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "return", "[", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "*", "100.", "/", "batch_size", "for", "k", "in", "topk", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils._no_grad_trunc_normal_": [[481, 515], ["warnings.warn", "torch.no_grad", "torch.no_grad", "utils._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.trunc_normal_": [[517, 520], ["utils._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.get_params_groups": [[599, 611], ["model.named_parameters", "name.endswith", "not_regularized.append", "regularized.append", "len"], "function", ["None"], ["", "", "def", "get_params_groups", "(", "model", ")", ":", "\n", "    ", "regularized", "=", "[", "]", "\n", "not_regularized", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "# we do not regularize biases nor Norm parameters", "\n", "", "if", "name", ".", "endswith", "(", "\".bias\"", ")", "or", "len", "(", "param", ".", "shape", ")", "==", "1", ":", "\n", "            ", "not_regularized", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "regularized", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "{", "'params'", ":", "regularized", "}", ",", "{", "'params'", ":", "not_regularized", ",", "'weight_decay'", ":", "0.", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.has_batchnorms": [[613, 619], ["model.named_modules", "isinstance"], "function", ["None"], ["", "def", "has_batchnorms", "(", "model", ")", ":", "\n", "    ", "bn_types", "=", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ",", "nn", ".", "SyncBatchNorm", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "bn_types", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.GANLoss.__init__": [[16, 41], ["torch.Module.__init__", "losses.GANLoss.register_buffer", "losses.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.ReLU", "torch.ReLU", "torch.ReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "\"\"\" Initialize the GANLoss class.\n\n        Parameters:\n            gan_mode (str) - - the type of GAN objective. It currently supports vanilla, lsgan, and wgangp.\n            target_real_label (bool) - - label for a real image\n            target_fake_label (bool) - - label of a fake image\n\n        Note: Do not use sigmoid as the last layer of Discriminator.\n        LSGAN needs no sigmoid. vanilla GANs will handle it with BCEWithLogitsLoss.\n        \"\"\"", "\n", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "if", "gan_mode", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "gan_mode", "==", "'vanilla'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "gan_mode", "in", "[", "'wgangp'", ",", "'nonsaturating'", "]", ":", "\n", "            ", "self", ".", "loss", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'gan mode %s not implemented'", "%", "gan_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.GANLoss.get_target_tensor": [[42, 58], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "prediction", ",", "target_is_real", ")", ":", "\n", "        ", "\"\"\"Create label tensors with the same size as the input.\n\n        Parameters:\n            prediction (tensor) - - tpyically the prediction from a discriminator\n            target_is_real (bool) - - if the ground truth label is for real images or fake images\n\n        Returns:\n            A label tensor filled with ground truth label, and with the size of the input\n        \"\"\"", "\n", "\n", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.GANLoss.calculate_loss": [[59, 88], ["losses.GANLoss.get_target_tensor", "losses.GANLoss.loss", "prediction.mean", "torch.softplus().mean", "torch.softplus().mean", "torch.softplus().mean", "torch.softplus().mean", "torch.softplus().mean", "torch.softplus().mean", "prediction.mean", "losses.GANLoss.loss().mean", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "losses.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.loss", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.loss"], ["", "def", "calculate_loss", "(", "self", ",", "prediction", ",", "target_is_real", ",", "is_dis", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calculate loss given Discriminator's output and grount truth labels.\n\n        Parameters:\n            prediction (tensor) - - tpyically the prediction output from a discriminator\n            target_is_real (bool) - - if the ground truth label is for real images or fake images\n\n        Returns:\n            the calculated loss.\n        \"\"\"", "\n", "if", "self", ".", "gan_mode", "in", "[", "'lsgan'", ",", "'vanilla'", "]", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "prediction", ",", "target_is_real", ")", "\n", "loss", "=", "self", ".", "loss", "(", "prediction", ",", "target_tensor", ")", "\n", "", "else", ":", "\n", "            ", "if", "is_dis", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "prediction", "=", "-", "prediction", "\n", "", "if", "self", ".", "gan_mode", "==", "'wgangp'", ":", "\n", "                    ", "loss", "=", "prediction", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'nonsaturating'", ":", "\n", "                    ", "loss", "=", "F", ".", "softplus", "(", "prediction", ")", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "                    ", "loss", "=", "self", ".", "loss", "(", "1", "+", "prediction", ")", ".", "mean", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "gan_mode", "==", "'nonsaturating'", ":", "\n", "                   ", "loss", "=", "F", ".", "softplus", "(", "-", "prediction", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "-", "prediction", ".", "mean", "(", ")", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.GANLoss.__call__": [[89, 100], ["isinstance", "sum", "losses.GANLoss.calculate_loss", "losses.append", "losses.GANLoss.calculate_loss"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.GANLoss.calculate_loss", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.GANLoss.calculate_loss"], ["", "def", "__call__", "(", "self", ",", "predictions", ",", "target_is_real", ",", "is_dis", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calculate loss for multi-scales gan\"\"\"", "\n", "if", "isinstance", "(", "predictions", ",", "list", ")", ":", "\n", "            ", "losses", "=", "[", "]", "\n", "for", "prediction", "in", "predictions", ":", "\n", "                ", "losses", ".", "append", "(", "self", ".", "calculate_loss", "(", "prediction", ",", "target_is_real", ",", "is_dis", ")", ")", "\n", "", "loss", "=", "sum", "(", "losses", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "calculate_loss", "(", "predictions", ",", "target_is_real", ",", "is_dis", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.__init__": [[153, 157], ["torch.Module.__init__", "losses.StyleLoss.add_module", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "losses.VGG16"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StyleLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'vgg'", ",", "VGG16", "(", ")", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.compute_gram": [[158, 165], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "methods", ["None"], ["", "def", "compute_gram", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "b", "*", "h", "*", "w", "*", "ch", ")", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.__call__": [[166, 178], ["losses.StyleLoss.criterion", "losses.StyleLoss.criterion", "losses.StyleLoss.criterion", "losses.StyleLoss.criterion", "losses.StyleLoss.vgg", "losses.StyleLoss.vgg", "losses.StyleLoss.compute_gram", "losses.StyleLoss.compute_gram", "losses.StyleLoss.compute_gram", "losses.StyleLoss.compute_gram", "losses.StyleLoss.compute_gram", "losses.StyleLoss.compute_gram", "losses.StyleLoss.compute_gram", "losses.StyleLoss.compute_gram"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.StyleLoss.compute_gram"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# Compute features", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "\n", "# Compute loss", "\n", "style_loss", "=", "0.0", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu1_2'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu1_2'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu2_2'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu2_2'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu3_3'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu3_3'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu4_3'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu4_3'", "]", ")", ")", "\n", "\n", "return", "style_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.PerceptualLoss.__init__": [[187, 192], ["torch.Module.__init__", "losses.PerceptualLoss.add_module", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "losses.VGG16"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "weights", "=", "[", "0.0", ",", "0.0", ",", "1.0", ",", "0.0", ",", "0.0", "]", ")", ":", "\n", "        ", "super", "(", "PerceptualLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'vgg'", ",", "VGG16", "(", ")", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.PerceptualLoss.__call__": [[193, 205], ["losses.PerceptualLoss.vgg", "losses.PerceptualLoss.vgg", "losses.PerceptualLoss.criterion", "losses.PerceptualLoss.criterion", "losses.PerceptualLoss.criterion", "losses.PerceptualLoss.criterion", "losses.PerceptualLoss.criterion"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# Compute features", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "\n", "content_loss", "=", "0.0", "\n", "content_loss", "+=", "self", ".", "weights", "[", "0", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu1_2'", "]", ",", "y_vgg", "[", "'relu1_2'", "]", ")", "if", "self", ".", "weights", "[", "0", "]", ">", "0", "else", "0", "\n", "content_loss", "+=", "self", ".", "weights", "[", "1", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu2_2'", "]", ",", "y_vgg", "[", "'relu2_2'", "]", ")", "if", "self", ".", "weights", "[", "1", "]", ">", "0", "else", "0", "\n", "content_loss", "+=", "self", ".", "weights", "[", "2", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu3_3'", "]", ",", "y_vgg", "[", "'relu3_3'", "]", ")", "if", "self", ".", "weights", "[", "2", "]", ">", "0", "else", "0", "\n", "content_loss", "+=", "self", ".", "weights", "[", "3", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu4_3'", "]", ",", "y_vgg", "[", "'relu4_3'", "]", ")", "if", "self", ".", "weights", "[", "3", "]", ">", "0", "else", "0", "\n", "content_loss", "+=", "self", ".", "weights", "[", "4", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu5_3'", "]", ",", "y_vgg", "[", "'relu5_3'", "]", ")", "if", "self", ".", "weights", "[", "4", "]", ">", "0", "else", "0", "\n", "\n", "return", "content_loss", "\n", "", "", "class", "VGGLoss", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.VGGLoss.__init__": [[211, 216], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "losses.Vgg19"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.VGGLoss.forward": [[217, 223], ["range", "losses.VGGLoss.vgg", "losses.VGGLoss.vgg", "len", "losses.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.PatchSim.__init__": [[226, 231], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "patch_nums", "=", "256", ",", "patch_size", "=", "None", ",", "norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "PatchSim", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "patch_nums", "=", "patch_nums", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "use_norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.PatchSim.forward": [[232, 245], ["feat.size", "losses.PatchSim.select_patch", "feat.mean", "torch.normalize", "torch.normalize", "torch.normalize", "query.bmm", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "patch_sim.view.view.view", "numpy.sqrt", "len", "query.bmm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.PatchSim.select_patch", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "feat", ",", "patch_ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the similarity for selected patches\n        \"\"\"", "\n", "B", ",", "C", ",", "W", ",", "H", "=", "feat", ".", "size", "(", ")", "\n", "feat", "=", "feat", "-", "feat", ".", "mean", "(", "dim", "=", "[", "-", "2", ",", "-", "1", "]", ",", "keepdim", "=", "True", ")", "\n", "feat", "=", "F", ".", "normalize", "(", "feat", ",", "dim", "=", "1", ")", "if", "self", ".", "use_norm", "else", "feat", "/", "np", ".", "sqrt", "(", "C", ")", "\n", "query", ",", "key", ",", "patch_ids", "=", "self", ".", "select_patch", "(", "feat", ",", "patch_ids", "=", "patch_ids", ")", "\n", "patch_sim", "=", "query", ".", "bmm", "(", "key", ")", "if", "self", ".", "use_norm", "else", "torch", ".", "tanh", "(", "query", ".", "bmm", "(", "key", ")", "/", "10", ")", "\n", "if", "patch_ids", "is", "not", "None", ":", "\n", "            ", "patch_sim", "=", "patch_sim", ".", "view", "(", "B", ",", "len", "(", "patch_ids", ")", ",", "-", "1", ")", "\n", "\n", "", "return", "patch_sim", ",", "patch_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.PatchSim.select_patch": [[246, 279], ["feat.size", "feat.permute().flatten", "feat_query.reshape.reshape.size", "feat.reshape().permute", "feat.reshape", "feat.permute", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "range", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "feat.reshape.reshape", "feat_query.reshape.reshape.reshape", "feat.reshape", "feat.permute().flatten.size", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "feat.reshape.append", "feat.reshape", "int", "int", "int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "min", "torch.randperm.size", "torch.randperm.size", "torch.randperm.size"], "methods", ["None"], ["", "def", "select_patch", "(", "self", ",", "feat", ",", "patch_ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Select the patches\n        \"\"\"", "\n", "B", ",", "C", ",", "W", ",", "H", "=", "feat", ".", "size", "(", ")", "\n", "pw", ",", "ph", "=", "self", ".", "patch_size", ",", "self", ".", "patch_size", "\n", "feat_reshape", "=", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "flatten", "(", "1", ",", "2", ")", "# B*N*C N=W*H", "\n", "if", "self", ".", "patch_nums", ">", "0", ":", "\n", "            ", "if", "patch_ids", "is", "None", ":", "\n", "                ", "patch_ids", "=", "torch", ".", "randperm", "(", "feat_reshape", ".", "size", "(", "1", ")", ",", "device", "=", "feat", ".", "device", ")", "\n", "patch_ids", "=", "patch_ids", "[", ":", "int", "(", "min", "(", "self", ".", "patch_nums", ",", "patch_ids", ".", "size", "(", "0", ")", ")", ")", "]", "\n", "", "feat_query", "=", "feat_reshape", "[", ":", ",", "patch_ids", ",", ":", "]", "# B*Num*C", "\n", "feat_key", "=", "[", "]", "\n", "Num", "=", "feat_query", ".", "size", "(", "1", ")", "\n", "if", "pw", "<", "W", "and", "ph", "<", "H", ":", "\n", "                ", "pos_x", ",", "pos_y", "=", "patch_ids", "//", "W", ",", "patch_ids", "%", "W", "\n", "# patch should in the feature", "\n", "left", ",", "top", "=", "pos_x", "-", "int", "(", "pw", "/", "2", ")", ",", "pos_y", "-", "int", "(", "ph", "/", "2", ")", "\n", "left", ",", "top", "=", "torch", ".", "where", "(", "left", ">", "0", ",", "left", ",", "torch", ".", "zeros_like", "(", "left", ")", ")", ",", "torch", ".", "where", "(", "top", ">", "0", ",", "top", ",", "torch", ".", "zeros_like", "(", "top", ")", ")", "\n", "start_x", "=", "torch", ".", "where", "(", "left", ">", "(", "W", "-", "pw", ")", ",", "(", "W", "-", "pw", ")", "*", "torch", ".", "ones_like", "(", "left", ")", ",", "left", ")", "\n", "start_y", "=", "torch", ".", "where", "(", "top", ">", "(", "H", "-", "ph", ")", ",", "(", "H", "-", "ph", ")", "*", "torch", ".", "ones_like", "(", "top", ")", ",", "top", ")", "\n", "for", "i", "in", "range", "(", "Num", ")", ":", "\n", "                    ", "feat_key", ".", "append", "(", "feat", "[", ":", ",", ":", ",", "start_x", "[", "i", "]", ":", "start_x", "[", "i", "]", "+", "pw", ",", "start_y", "[", "i", "]", ":", "start_y", "[", "i", "]", "+", "ph", "]", ")", "# B*C*patch_w*patch_h", "\n", "", "feat_key", "=", "torch", ".", "stack", "(", "feat_key", ",", "dim", "=", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "# B*Num*C*patch_w*patch_h", "\n", "feat_key", "=", "feat_key", ".", "reshape", "(", "B", "*", "Num", ",", "C", ",", "pw", "*", "ph", ")", "# Num * C * N", "\n", "feat_query", "=", "feat_query", ".", "reshape", "(", "B", "*", "Num", ",", "1", ",", "C", ")", "# Num * 1 * C", "\n", "", "else", ":", "# if patch larger than features size, use B * C * N (H * W)", "\n", "                ", "feat_key", "=", "feat", ".", "reshape", "(", "B", ",", "C", ",", "W", "*", "H", ")", "\n", "", "", "else", ":", "\n", "            ", "feat_query", "=", "feat", ".", "reshape", "(", "B", ",", "C", ",", "H", "*", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B * N (H * W) * C", "\n", "feat_key", "=", "feat", ".", "reshape", "(", "B", ",", "C", ",", "H", "*", "W", ")", "# B * C * N (H * W)", "\n", "\n", "", "return", "feat_query", ",", "feat_key", ",", "patch_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.__init__": [[285, 301], ["torch.Module.__init__", "losses.PatchSim", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "loss_mode", "=", "'cos'", ",", "patch_nums", "=", "256", ",", "patch_size", "=", "32", ",", "norm", "=", "True", ",", "use_conv", "=", "True", ",", "\n", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ",", "T", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "SpatialCorrelativeLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "patch_sim", "=", "PatchSim", "(", "patch_nums", "=", "patch_nums", ",", "patch_size", "=", "patch_size", ",", "norm", "=", "norm", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "patch_nums", "=", "patch_nums", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "use_conv", "=", "use_conv", "\n", "self", ".", "conv_init", "=", "False", "\n", "self", ".", "init_type", "=", "init_type", "\n", "self", ".", "init_gain", "=", "init_gain", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "loss_mode", "=", "loss_mode", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "if", "norm", "else", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "cross_entropy_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.update_init_": [[302, 304], ["None"], "methods", ["None"], ["", "def", "update_init_", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_init", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.create_conv": [[305, 320], ["feat.size", "max", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.to", "setattr", "cyclegan_networks.init_net", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.cyclegan_networks.init_net"], ["", "def", "create_conv", "(", "self", ",", "feat", ",", "layer", ")", ":", "\n", "        ", "\"\"\"\n        create the 1*1 conv filter to select the features for a specific task\n        :param feat: extracted features from a pretrained VGG or encoder for the similarity and dissimilarity map\n        :param layer: different layers use different filter\n        :return:\n        \"\"\"", "\n", "input_nc", "=", "feat", ".", "size", "(", "1", ")", "\n", "output_nc", "=", "max", "(", "32", ",", "input_nc", "//", "4", ")", "\n", "conv", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "1", ")", "]", ")", "\n", "conv", ".", "to", "(", "feat", ".", "device", ")", "\n", "setattr", "(", "self", ",", "'conv_%d'", "%", "layer", ",", "conv", ")", "\n", "init_net", "(", "conv", ",", "self", ".", "init_type", ",", "self", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.cal_sim": [[321, 343], ["losses.SpatialCorrelativeLoss.patch_sim", "losses.SpatialCorrelativeLoss.patch_sim", "getattr", "losses.SpatialCorrelativeLoss.patch_sim", "losses.SpatialCorrelativeLoss.create_conv", "getattr.", "getattr.", "getattr."], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.create_conv"], ["", "def", "cal_sim", "(", "self", ",", "f_src", ",", "f_tgt", ",", "f_other", "=", "None", ",", "layer", "=", "0", ",", "patch_ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        calculate the similarity map using the fixed/learned query and key\n        :param f_src: feature map from source domain\n        :param f_tgt: feature map from target domain\n        :param f_other: feature map from other image (only used for contrastive learning for spatial network)\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "use_conv", ":", "\n", "            ", "if", "not", "self", ".", "conv_init", ":", "\n", "                ", "self", ".", "create_conv", "(", "f_src", ",", "layer", ")", "\n", "", "conv", "=", "getattr", "(", "self", ",", "'conv_%d'", "%", "layer", ")", "\n", "f_src", ",", "f_tgt", "=", "conv", "(", "f_src", ")", ",", "conv", "(", "f_tgt", ")", "\n", "f_other", "=", "conv", "(", "f_other", ")", "if", "f_other", "is", "not", "None", "else", "None", "\n", "", "sim_src", ",", "patch_ids", "=", "self", ".", "patch_sim", "(", "f_src", ",", "patch_ids", ")", "\n", "sim_tgt", ",", "patch_ids", "=", "self", ".", "patch_sim", "(", "f_tgt", ",", "patch_ids", ")", "\n", "if", "f_other", "is", "not", "None", ":", "\n", "            ", "sim_other", ",", "_", "=", "self", ".", "patch_sim", "(", "f_other", ",", "patch_ids", ")", "\n", "", "else", ":", "\n", "            ", "sim_other", "=", "None", "\n", "\n", "", "return", "sim_src", ",", "sim_tgt", ",", "sim_other", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.compare_sim": [[344, 376], ["torch.normalize.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "losses.SpatialCorrelativeLoss.cross_entropy_loss", "torch.normalize.sort", "int", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.normalize.bmm().view", "torch.normalize.bmm().view", "torch.normalize.bmm().view", "losses.SpatialCorrelativeLoss.criterion", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "losses.SpatialCorrelativeLoss.criterion", "NotImplementedError", "torch.normalize.bmm", "torch.normalize.bmm", "torch.normalize.bmm", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.normalize.permute", "torch.normalize.permute", "torch.normalize.permute"], "methods", ["None"], ["", "def", "compare_sim", "(", "self", ",", "sim_src", ",", "sim_tgt", ",", "sim_other", ")", ":", "\n", "        ", "\"\"\"\n        measure the shape distance between the same shape and different inputs\n        :param sim_src: the shape similarity map from source input image\n        :param sim_tgt: the shape similarity map from target output image\n        :param sim_other: the shape similarity map from other input image\n        :return:\n        \"\"\"", "\n", "B", ",", "Num", ",", "N", "=", "sim_src", ".", "size", "(", ")", "\n", "if", "self", ".", "loss_mode", "==", "'info'", "or", "sim_other", "is", "not", "None", ":", "\n", "            ", "sim_src", "=", "F", ".", "normalize", "(", "sim_src", ",", "dim", "=", "-", "1", ")", "\n", "sim_tgt", "=", "F", ".", "normalize", "(", "sim_tgt", ",", "dim", "=", "-", "1", ")", "\n", "sim_other", "=", "F", ".", "normalize", "(", "sim_other", ",", "dim", "=", "-", "1", ")", "\n", "sam_neg1", "=", "(", "sim_src", ".", "bmm", "(", "sim_other", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ")", ".", "view", "(", "-", "1", ",", "Num", ")", "/", "self", ".", "T", "\n", "sam_neg2", "=", "(", "sim_tgt", ".", "bmm", "(", "sim_other", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ")", ".", "view", "(", "-", "1", ",", "Num", ")", "/", "self", ".", "T", "\n", "sam_self", "=", "(", "sim_src", ".", "bmm", "(", "sim_tgt", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ")", ".", "view", "(", "-", "1", ",", "Num", ")", "/", "self", ".", "T", "\n", "sam_self", "=", "torch", ".", "cat", "(", "[", "sam_self", ",", "sam_neg1", ",", "sam_neg2", "]", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "cross_entropy_loss", "(", "sam_self", ",", "torch", ".", "arange", "(", "0", ",", "sam_self", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "sim_src", ".", "device", ")", "%", "(", "Num", ")", ")", "\n", "", "else", ":", "\n", "            ", "tgt_sorted", ",", "_", "=", "sim_tgt", ".", "sort", "(", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "num", "=", "int", "(", "N", "/", "4", ")", "\n", "src", "=", "torch", ".", "where", "(", "sim_tgt", "<", "tgt_sorted", "[", ":", ",", ":", ",", "num", ":", "num", "+", "1", "]", ",", "0", "*", "sim_src", ",", "sim_src", ")", "\n", "tgt", "=", "torch", ".", "where", "(", "sim_tgt", "<", "tgt_sorted", "[", ":", ",", ":", ",", "num", ":", "num", "+", "1", "]", ",", "0", "*", "sim_tgt", ",", "sim_tgt", ")", "\n", "if", "self", ".", "loss_mode", "==", "'l1'", ":", "\n", "                ", "loss", "=", "self", ".", "criterion", "(", "(", "N", "/", "num", ")", "*", "src", ",", "(", "N", "/", "num", ")", "*", "tgt", ")", "\n", "", "elif", "self", ".", "loss_mode", "==", "'cos'", ":", "\n", "                ", "sim_pos", "=", "F", ".", "cosine_similarity", "(", "src", ",", "tgt", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "torch", ".", "ones_like", "(", "sim_pos", ")", ",", "sim_pos", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "self", ".", "loss_mode", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.loss": [[377, 394], ["losses.SpatialCorrelativeLoss.cal_sim", "losses.SpatialCorrelativeLoss.compare_sim"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.cal_sim", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.compare_sim"], ["", "def", "loss", "(", "self", ",", "f_src", ",", "f_tgt", ",", "f_other", "=", "None", ",", "layer", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        calculate the spatial similarity and dissimilarity loss for given features from source and target domain\n        :param f_src: source domain features\n        :param f_tgt: target domain features\n        :param f_other: other random sampled features\n        :param layer:\n        :return:\n        \"\"\"", "\n", "sim_src", ",", "sim_tgt", ",", "sim_other", "=", "self", ".", "cal_sim", "(", "f_src", ",", "f_tgt", ",", "f_other", ",", "layer", ")", "\n", "# if sim_other is not None:", "\n", "#     loss=self.barlow_loss_func(sim_src, sim_tgt)+self.barlow_loss_func(sim_other, sim_tgt)", "\n", "# else:", "\n", "#     loss=self.barlow_loss_func(sim_src, sim_tgt)", "\n", "# calculate the spatial similarity for source and target domain", "\n", "loss", "=", "self", ".", "compare_sim", "(", "sim_src", ",", "sim_tgt", ",", "sim_other", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.SpatialCorrelativeLoss.barlow_loss_func": [[395, 415], ["torch.nn.BatchNorm1d().to.size", "torch.nn.BatchNorm1d().to.reshape", "torch.nn.BatchNorm1d().to.reshape", "torch.nn.BatchNorm1d().to", "torch.nn.BatchNorm1d().to", "torch.nn.BatchNorm1d().to", "torch.nn.BatchNorm1d().to", "torch.nn.BatchNorm1d().to", "torch.nn.BatchNorm1d().to", "torch.nn.BatchNorm1d().to", "torch.nn.BatchNorm1d().to", "torch.nn.BatchNorm1d().to", "torch.nn.BatchNorm1d().to.", "torch.nn.BatchNorm1d().to.", "torch.nn.BatchNorm1d().to.", "torch.nn.BatchNorm1d().to.", "torch.nn.BatchNorm1d().to.", "torch.nn.BatchNorm1d().to.", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "cdif.sum", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.eye.bool", "torch.eye.bool", "torch.eye.bool"], "methods", ["None"], ["", "def", "barlow_loss_func", "(", "self", ",", "z1", ",", "z2", ",", "lamb", "=", "5e-3", ",", "scale_loss", "=", "0.025", ")", ":", "\n", "### data preprocess", "\n", "# print(z1.shape)", "\n", "        ", "_", ",", "N", ",", "D", "=", "z1", ".", "size", "(", ")", "\n", "z1", "=", "z1", ".", "reshape", "(", "N", ",", "D", ")", "\n", "z2", "=", "z2", ".", "reshape", "(", "N", ",", "D", ")", "\n", "# print(z1.shape)", "\n", "\n", "# to match the original code", "\n", "bn", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "D", ",", "affine", "=", "False", ")", ".", "to", "(", "z1", ".", "device", ")", "\n", "z1", "=", "bn", "(", "z1", ")", "\n", "z2", "=", "bn", "(", "z2", ")", "\n", "\n", "corr", "=", "torch", ".", "einsum", "(", "\"bi, bj -> ij\"", ",", "z1", ",", "z2", ")", "/", "N", "\n", "\n", "diag", "=", "torch", ".", "eye", "(", "D", ",", "device", "=", "corr", ".", "device", ")", "\n", "cdif", "=", "(", "corr", "-", "diag", ")", ".", "pow", "(", "2", ")", "\n", "cdif", "[", "~", "diag", ".", "bool", "(", ")", "]", "*=", "lamb", "\n", "loss", "=", "scale_loss", "*", "cdif", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.Normalization.__init__": [[417, 426], ["torch.Module.__init__", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to.view", "torch.tensor().to.view", "torch.tensor().to.view", "torch.tensor().to.view", "torch.tensor().to.view", "torch.tensor().to.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "Normalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# .view the mean and std to make them [C x 1 x 1] so that they can", "\n", "# directly work with image Tensor of shape [B x C x H x W].", "\n", "# B is batch size. C is number of channels. H is height and W is width.", "\n", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "to", "(", "device", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "mean", "=", "mean", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "std", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.Normalization.forward": [[427, 430], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "# normalize img", "\n", "        ", "return", "(", "img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.VGG16.__init__": [[433, 492], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "torchvision.vgg16", "losses.VGG16.relu1_1.add_module", "losses.VGG16.relu1_2.add_module", "losses.VGG16.relu2_1.add_module", "losses.VGG16.relu2_2.add_module", "losses.VGG16.relu3_1.add_module", "losses.VGG16.relu3_2.add_module", "losses.VGG16.relu3_3.add_module", "losses.VGG16.relu4_1.add_module", "losses.VGG16.relu4_2.add_module", "losses.VGG16.relu4_3.add_module", "losses.VGG16.relu5_1.add_module", "losses.VGG16.relu5_2.add_module", "losses.VGG16.relu5_3.add_module", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "relu1_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu1_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu2_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu2_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu3_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu4_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu5_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "relu1_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "            ", "self", ".", "relu1_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "4", ",", "7", ")", ":", "\n", "            ", "self", ".", "relu2_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "7", ",", "9", ")", ":", "\n", "            ", "self", ".", "relu2_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "9", ",", "12", ")", ":", "\n", "            ", "self", ".", "relu3_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "12", ",", "14", ")", ":", "\n", "            ", "self", ".", "relu3_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "14", ",", "16", ")", ":", "\n", "            ", "self", ".", "relu3_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "16", ",", "18", ")", ":", "\n", "            ", "self", ".", "relu4_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "18", ",", "21", ")", ":", "\n", "            ", "self", ".", "relu4_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "21", ",", "23", ")", ":", "\n", "            ", "self", ".", "relu4_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "23", ",", "26", ")", ":", "\n", "            ", "self", ".", "relu5_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "26", ",", "28", ")", ":", "\n", "            ", "self", ".", "relu5_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "28", ",", "30", ")", ":", "\n", "            ", "self", ".", "relu5_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.VGG16.forward": [[497, 545], ["losses.VGG16.relu1_1", "losses.VGG16.relu1_2", "losses.VGG16.relu2_1", "losses.VGG16.relu2_2", "losses.VGG16.relu3_1", "losses.VGG16.relu3_2", "losses.VGG16.relu3_3", "losses.VGG16.relu4_1", "losses.VGG16.relu4_2", "losses.VGG16.relu4_3", "losses.VGG16.relu5_1", "losses.VGG16.relu5_2", "losses.VGG16.relu5_3", "len", "enumerate", "feats.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "layers", "=", "None", ",", "encode_only", "=", "False", ",", "resize", "=", "False", ")", ":", "\n", "        ", "relu1_1", "=", "self", ".", "relu1_1", "(", "x", ")", "\n", "relu1_2", "=", "self", ".", "relu1_2", "(", "relu1_1", ")", "\n", "\n", "relu2_1", "=", "self", ".", "relu2_1", "(", "relu1_2", ")", "\n", "relu2_2", "=", "self", ".", "relu2_2", "(", "relu2_1", ")", "\n", "\n", "relu3_1", "=", "self", ".", "relu3_1", "(", "relu2_2", ")", "\n", "relu3_2", "=", "self", ".", "relu3_2", "(", "relu3_1", ")", "\n", "relu3_3", "=", "self", ".", "relu3_3", "(", "relu3_2", ")", "\n", "\n", "relu4_1", "=", "self", ".", "relu4_1", "(", "relu3_3", ")", "\n", "relu4_2", "=", "self", ".", "relu4_2", "(", "relu4_1", ")", "\n", "relu4_3", "=", "self", ".", "relu4_3", "(", "relu4_2", ")", "\n", "\n", "relu5_1", "=", "self", ".", "relu5_1", "(", "relu4_3", ")", "\n", "relu5_2", "=", "self", ".", "relu5_2", "(", "relu5_1", ")", "\n", "relu5_3", "=", "self", ".", "relu5_3", "(", "relu5_2", ")", "\n", "\n", "out", "=", "{", "\n", "'relu1_1'", ":", "relu1_1", ",", "\n", "'relu1_2'", ":", "relu1_2", ",", "\n", "\n", "'relu2_1'", ":", "relu2_1", ",", "\n", "'relu2_2'", ":", "relu2_2", ",", "\n", "\n", "'relu3_1'", ":", "relu3_1", ",", "\n", "'relu3_2'", ":", "relu3_2", ",", "\n", "'relu3_3'", ":", "relu3_3", ",", "\n", "\n", "'relu4_1'", ":", "relu4_1", ",", "\n", "'relu4_2'", ":", "relu4_2", ",", "\n", "'relu4_3'", ":", "relu4_3", ",", "\n", "\n", "'relu5_1'", ":", "relu5_1", ",", "\n", "'relu5_2'", ":", "relu5_2", ",", "\n", "'relu5_3'", ":", "relu5_3", ",", "\n", "}", "\n", "if", "encode_only", ":", "\n", "            ", "if", "len", "(", "layers", ")", ">", "0", ":", "\n", "                ", "feats", "=", "[", "]", "\n", "for", "layer", ",", "key", "in", "enumerate", "(", "out", ")", ":", "\n", "                    ", "if", "layer", "in", "layers", ":", "\n", "                        ", "feats", ".", "append", "(", "out", "[", "key", "]", ")", "\n", "", "", "return", "feats", "\n", "", "else", ":", "\n", "                ", "return", "out", "[", "'relu3_1'", "]", "\n", "", "", "return", "out", "\n", "", "", "class", "Vgg19", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.Vgg19.__init__": [[546, 567], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.vgg19", "losses.Vgg19.slice1.add_module", "losses.Vgg19.slice2.add_module", "losses.Vgg19.slice3.add_module", "losses.Vgg19.slice4.add_module", "losses.Vgg19.slice5.add_module", "losses.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.Vgg19.forward": [[568, 576], ["losses.Vgg19.slice1", "losses.Vgg19.slice2", "losses.Vgg19.slice3", "losses.Vgg19.slice4", "losses.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.losses.cal_gradient_penalty": [[102, 144], ["interpolatesv.requires_grad_", "netD", "isinstance", "gradients.view.view", "real_data.size", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.rand", "torch.rand", "torch.rand", "alpha.expand().contiguous().view.expand().contiguous().view", "NotImplementedError", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.ones().to", "torch.ones().to", "torch.ones().to", "alpha.expand().contiguous().view.expand().contiguous", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "alpha.expand().contiguous().view.expand", "torch.ones", "torch.ones", "torch.ones", "netD.size", "disc_interpolate.size", "real_data.nelement"], "function", ["None"], ["", "", "def", "cal_gradient_penalty", "(", "netD", ",", "real_data", ",", "fake_data", ",", "device", ",", "type", "=", "'mixed'", ",", "constant", "=", "1.0", ",", "lambda_gp", "=", "10.0", ")", ":", "\n", "    ", "\"\"\"Calculate the gradient penalty loss, used in WGAN-GP paper https://arxiv.org/abs/1704.00028\n\n    Arguments:\n        netD (network)              -- discriminator network\n        real_data (tensor array)    -- real images\n        fake_data (tensor array)    -- generated images from the generator\n        device (str)                -- GPU / CPU: from torch.device('cuda:{}'.format(self.gpu_ids[0])) if self.gpu_ids else torch.device('cpu')\n        type (str)                  -- if we mix real and fake data or not [real | fake | mixed].\n        constant (float)            -- the constant used in formula ( ||gradient||_2 - constant)^2\n        lambda_gp (float)           -- weight for this loss\n\n    Returns the gradient penalty loss\n    \"\"\"", "\n", "if", "lambda_gp", ">", "0.0", ":", "\n", "        ", "if", "type", "==", "'real'", ":", "# either use real images, fake images, or a linear interpolation of two.", "\n", "            ", "interpolatesv", "=", "real_data", "\n", "", "elif", "type", "==", "'fake'", ":", "\n", "            ", "interpolatesv", "=", "fake_data", "\n", "", "elif", "type", "==", "'mixed'", ":", "\n", "            ", "alpha", "=", "torch", ".", "rand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "1", ",", "device", "=", "device", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "real_data", ".", "nelement", "(", ")", "//", "real_data", ".", "shape", "[", "0", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "*", "real_data", ".", "shape", ")", "\n", "interpolatesv", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'{} not implemented'", ".", "format", "(", "type", ")", ")", "\n", "", "interpolatesv", ".", "requires_grad_", "(", "True", ")", "\n", "disc_interpolates", "=", "netD", "(", "interpolatesv", ")", "\n", "if", "isinstance", "(", "disc_interpolates", ",", "list", ")", ":", "\n", "            ", "gradients", "=", "0", "\n", "for", "disc_interpolate", "in", "disc_interpolates", ":", "\n", "                ", "gradients", "+=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolate", ",", "inputs", "=", "interpolatesv", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolate", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolatesv", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "", "gradients", "=", "gradients", ".", "view", "(", "real_data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flat the data", "\n", "gradient_penalty", "=", "(", "(", "(", "gradients", "+", "1e-16", ")", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "constant", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "lambda_gp", "# added eps", "\n", "return", "gradient_penalty", ",", "gradients", "\n", "", "else", ":", "\n", "        ", "return", "0.0", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.colorization_model.ColorizationModel.modify_commandline_options": [[14, 31], ["pix2pix_model.Pix2PixModel.modify_commandline_options", "parser.set_defaults"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.modify_commandline_options"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n\n        By default, we use 'colorization' dataset for this model.\n        See the original pix2pix paper (https://arxiv.org/pdf/1611.07004.pdf) and colorization results (Figure 9 in the paper)\n        \"\"\"", "\n", "Pix2PixModel", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "'colorization'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.colorization_model.ColorizationModel.__init__": [[32, 47], ["pix2pix_model.Pix2PixModel.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n\n        For visualization, we set 'visual_names' as 'real_A' (input real image),\n        'real_B_rgb' (ground truth RGB image), and 'fake_B_rgb' (predicted RGB image)\n        We convert the Lab image 'real_B' (inherited from Pix2pixModel) to a RGB image 'real_B_rgb'.\n        we convert the Lab image 'fake_B' (inherited from Pix2pixModel) to a RGB image 'fake_B_rgb'.\n        \"\"\"", "\n", "# reuse the pix2pix model", "\n", "Pix2PixModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "# specify the images to be visualized.", "\n", "self", ".", "visual_names", "=", "[", "'real_A'", ",", "'real_B_rgb'", ",", "'fake_B_rgb'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.colorization_model.ColorizationModel.lab2rgb": [[48, 64], ["torch.cat", "Lab[].data.cpu().float().numpy", "numpy.transpose", "numpy.transpose.astype", "skimage.color.lab2rgb", "Lab[].data.cpu().float", "Lab[].data.cpu"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.colorization_model.ColorizationModel.lab2rgb"], ["", "def", "lab2rgb", "(", "self", ",", "L", ",", "AB", ")", ":", "\n", "        ", "\"\"\"Convert an Lab tensor image to a RGB numpy output\n        Parameters:\n            L  (1-channel tensor array): L channel images (range: [-1, 1], torch tensor array)\n            AB (2-channel tensor array):  ab channel images (range: [-1, 1], torch tensor array)\n\n        Returns:\n            rgb (RGB numpy image): rgb output images  (range: [0, 255], numpy array)\n        \"\"\"", "\n", "AB2", "=", "AB", "*", "110.0", "\n", "L2", "=", "(", "L", "+", "1.0", ")", "*", "50.0", "\n", "Lab", "=", "torch", ".", "cat", "(", "[", "L2", ",", "AB2", "]", ",", "dim", "=", "1", ")", "\n", "Lab", "=", "Lab", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "Lab", "=", "np", ".", "transpose", "(", "Lab", ".", "astype", "(", "np", ".", "float64", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "rgb", "=", "color", ".", "lab2rgb", "(", "Lab", ")", "*", "255", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.colorization_model.ColorizationModel.compute_visuals": [[65, 69], ["colorization_model.ColorizationModel.lab2rgb", "colorization_model.ColorizationModel.lab2rgb"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.colorization_model.ColorizationModel.lab2rgb", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.colorization_model.ColorizationModel.lab2rgb"], ["", "def", "compute_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate additional output images for visdom and HTML visualization\"\"\"", "\n", "self", ".", "real_B_rgb", "=", "self", ".", "lab2rgb", "(", "self", ".", "real_A", ",", "self", ".", "real_B", ")", "\n", "self", ".", "fake_B_rgb", "=", "self", ".", "lab2rgb", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.template_model.TemplateModel.modify_commandline_options": [[24, 40], ["parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new model-specific options and rewrite default values for existing options.\n\n        Parameters:\n            parser -- the option parser\n            is_train -- if it is training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "'aligned'", ")", "# You can rewrite default values for this model. For example, this model usually uses aligned dataset as its dataset.", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_regression'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for the regression loss'", ")", "# You can define new arguments for this model.", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.template_model.TemplateModel.__init__": [[41, 69], ["base_model.BaseModel.__init__", "networks.define_G", "torch.nn.L1Loss", "torch.optim.Adam", "template_model.TemplateModel.netG.parameters"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_G"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this model class.\n\n        Parameters:\n            opt -- training/test options\n\n        A few things can be done here.\n        - (required) call the initialization function of BaseModel\n        - define loss function, visualization images, model names, and optimizers\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "# call the initialization method of BaseModel", "\n", "# specify the training losses you want to print out. The program will call base_model.get_current_losses to plot the losses to the console and save them to the disk.", "\n", "self", ".", "loss_names", "=", "[", "'loss_G'", "]", "\n", "# specify the images you want to save and display. The program will call base_model.get_current_visuals to save and display these images.", "\n", "self", ".", "visual_names", "=", "[", "'data_A'", ",", "'data_B'", ",", "'output'", "]", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks to save and load networks.", "\n", "# you can use opt.isTrain to specify different behaviors for training and test. For example, some networks will not be used during test, and you don't need to load them.", "\n", "self", ".", "model_names", "=", "[", "'G'", "]", "\n", "# define networks; you can use opt.isTrain to specify different behaviors for training and test.", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "isTrain", ":", "# only defined during training time", "\n", "# define your loss functions. You can use losses provided by torch.nn such as torch.nn.L1Loss.", "\n", "# We also provide a GANLoss class \"networks.GANLoss\". self.criterionGAN = networks.GANLoss().to(self.device)", "\n", "            ", "self", ".", "criterionLoss", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "# define and initialize optimizers. You can define one optimizer for each network.", "\n", "# If two networks are updated at the same time, you can use itertools.chain to group them. See cycle_gan_model.py for an example.", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "self", ".", "optimizer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.template_model.TemplateModel.set_input": [[72, 82], ["input[].to", "input[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n        \"\"\"", "\n", "AtoB", "=", "self", ".", "opt", ".", "direction", "==", "'AtoB'", "# use <direction> to swap data_A and data_B", "\n", "self", ".", "data_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", ".", "to", "(", "self", ".", "device", ")", "# get image data A", "\n", "self", ".", "data_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "# get image data B", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "# get image paths", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.template_model.TemplateModel.forward": [[83, 86], ["template_model.TemplateModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass. This will be called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "self", ".", "output", "=", "self", ".", "netG", "(", "self", ".", "data_A", ")", "# generate output image given the input data_A", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.template_model.TemplateModel.backward": [[87, 93], ["template_model.TemplateModel.loss_G.backward", "template_model.TemplateModel.criterionLoss"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward"], ["", "def", "backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "# caculate the intermediate results if necessary; here self.output has been computed during function <forward>", "\n", "# calculate loss given the input and intermediate results", "\n", "self", ".", "loss_G", "=", "self", ".", "criterionLoss", "(", "self", ".", "output", ",", "self", ".", "data_B", ")", "*", "self", ".", "opt", ".", "lambda_regression", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "# calculate gradients of network G w.r.t. loss_G", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.template_model.TemplateModel.optimize_parameters": [[94, 100], ["template_model.TemplateModel.forward", "template_model.TemplateModel.optimizer.zero_grad", "template_model.TemplateModel.backward", "template_model.TemplateModel.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update network weights; it will be called in every training iteration.\"\"\"", "\n", "self", ".", "forward", "(", ")", "# first call forward to calculate intermediate results", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "# clear network G's existing gradients", "\n", "self", ".", "backward", "(", ")", "# calculate gradients for network G", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "# update gradients for network G", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sinsc_model.SinSCModel.modify_commandline_options": [[9, 56], ["sc_model.SCModel.modify_commandline_options", "sc_model.SCModel.modify_commandline_options.set_defaults", "sc_model.SCModel.modify_commandline_options.set_defaults", "sc_model.SCModel.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.modify_commandline_options"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param parser: original options parser\n        :param is_train: whether training phase or test phase. You can use this flag to add training-specific or test-specific options\n        :return: the modified parser\n        \"\"\"", "\n", "parser", "=", "SCModel", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "\n", "dataset_mode", "=", "'singleimage'", ",", "\n", "netG", "=", "'stylegan2'", ",", "\n", "stylegan2_G_num_downsampling", "=", "2", ",", "\n", "netD", "=", "\"stylegan2\"", ",", "\n", "gan_mode", "=", "\"nonsaturating\"", ",", "\n", "num_patches", "=", "1", ",", "\n", "attn_layers", "=", "\"4,7,9\"", ",", "\n", "lambda_spatial", "=", "10.0", ",", "\n", "lambda_identity", "=", "0.0", ",", "\n", "lambda_gradient", "=", "1.0", ",", "\n", "lambda_spatial_idt", "=", "0.0", ",", "\n", "ngf", "=", "8", ",", "\n", "ndf", "=", "8", ",", "\n", "lr", "=", "0.001", ",", "\n", "beta1", "=", "0.0", ",", "\n", "beta2", "=", "0.99", ",", "\n", "load_size", "=", "1024", ",", "\n", "crop_size", "=", "128", ",", "\n", "preprocess", "=", "\"zoom_and_patch\"", ",", "\n", "D_patch_size", "=", "None", ",", "\n", ")", "\n", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "preprocess", "=", "\"zoom_and_patch\"", ",", "\n", "batch_size", "=", "16", ",", "\n", "save_epoch_freq", "=", "1", ",", "\n", "save_latest_freq", "=", "20000", ",", "\n", "n_epochs", "=", "4", ",", "\n", "n_epochs_decay", "=", "4", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "preprocess", "=", "\"none\"", ",", "# load the whole image as it is", "\n", "batch_size", "=", "1", ",", "\n", "num_test", "=", "1", ",", "\n", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.sinsc_model.SinSCModel.__init__": [[57, 59], ["sc_model.SCModel.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.modify_commandline_options": [[16, 38], ["parser.set_defaults", "parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n\n        For pix2pix, we do not use image buffer\n        The training objective is: GAN Loss + lambda_L1 * ||G(A)-B||_1\n        By default, we use vanilla GAN loss, UNet with batchnorm, and aligned datasets.\n        \"\"\"", "\n", "# changing the default values to match the pix2pix paper (https://phillipi.github.io/pix2pix/)", "\n", "parser", ".", "set_defaults", "(", "norm", "=", "'batch'", ",", "netG", "=", "'unet_256'", ",", "dataset_mode", "=", "'aligned'", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "pool_size", "=", "0", ",", "gan_mode", "=", "'vanilla'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_L1'", ",", "type", "=", "float", ",", "default", "=", "100.0", ",", "help", "=", "'weight for L1 loss'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.__init__": [[39, 72], ["base_model.BaseModel.__init__", "networks.define_G", "networks.define_D", "networks.GANLoss().to", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "pix2pix_model.Pix2PixModel.optimizers.append", "pix2pix_model.Pix2PixModel.optimizers.append", "pix2pix_model.Pix2PixModel.netG.parameters", "pix2pix_model.Pix2PixModel.netD.parameters", "networks.GANLoss"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_G", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.networks.define_D"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the pix2pix class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "# specify the training losses you want to print out. The training/test scripts will call <BaseModel.get_current_losses>", "\n", "self", ".", "loss_names", "=", "[", "'G_GAN'", ",", "'G_L1'", ",", "'D_real'", ",", "'D_fake'", "]", "\n", "# specify the images you want to save/display. The training/test scripts will call <BaseModel.get_current_visuals>", "\n", "self", ".", "visual_names", "=", "[", "'real_A'", ",", "'fake_B'", ",", "'real_B'", "]", "\n", "# specify the models you want to save to the disk. The training/test scripts will call <BaseModel.save_networks> and <BaseModel.load_networks>", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G'", ",", "'D'", "]", "\n", "", "else", ":", "# during test time, only load G", "\n", "            ", "self", ".", "model_names", "=", "[", "'G'", "]", "\n", "# define networks (both generator and discriminator)", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "# define a discriminator; conditional GANs need to take both input and output images; Therefore, #channels for D is input_nc + output_nc", "\n", "            ", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", "+", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "opt", ".", "gan_mode", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "# initialize optimizers; schedulers will be automatically created by function <BaseModel.setup>.", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.set_input": [[73, 85], ["input[].to", "input[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input (dict): include the data itself and its metadata information.\n\n        The option 'direction' can be used to swap images in domain A and domain B.\n        \"\"\"", "\n", "AtoB", "=", "self", ".", "opt", ".", "direction", "==", "'AtoB'", "\n", "self", ".", "real_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.forward": [[86, 89], ["pix2pix_model.Pix2PixModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", "(", "self", ".", "real_A", ")", "# G(A)", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.backward_D": [[90, 103], ["torch.cat", "pix2pix_model.Pix2PixModel.netD", "pix2pix_model.Pix2PixModel.criterionGAN", "torch.cat", "pix2pix_model.Pix2PixModel.netD", "pix2pix_model.Pix2PixModel.criterionGAN", "pix2pix_model.Pix2PixModel.loss_D.backward", "torch.cat.detach"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for the discriminator\"\"\"", "\n", "# Fake; stop backprop to the generator by detaching fake_B", "\n", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "# we use conditional GANs; we need to feed both input and output to the discriminator", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Real", "\n", "real_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "real_B", ")", ",", "1", ")", "\n", "pred_real", "=", "self", ".", "netD", "(", "real_AB", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# combine loss and calculate gradients", "\n", "self", ".", "loss_D", "=", "(", "self", ".", "loss_D_fake", "+", "self", ".", "loss_D_real", ")", "*", "0.5", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.backward_G": [[104, 115], ["torch.cat", "pix2pix_model.Pix2PixModel.netD", "pix2pix_model.Pix2PixModel.criterionGAN", "pix2pix_model.Pix2PixModel.loss_G.backward", "pix2pix_model.Pix2PixModel.criterionL1"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN and L1 loss for the generator\"\"\"", "\n", "# First, G(A) should fake the discriminator", "\n", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "# Second, G(A) = B", "\n", "self", ".", "loss_G_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "fake_B", ",", "self", ".", "real_B", ")", "*", "self", ".", "opt", ".", "lambda_L1", "\n", "# combine loss and calculate gradients", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_GAN", "+", "self", ".", "loss_G_L1", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.optimize_parameters": [[116, 128], ["pix2pix_model.Pix2PixModel.forward", "pix2pix_model.Pix2PixModel.set_requires_grad", "pix2pix_model.Pix2PixModel.optimizer_D.zero_grad", "pix2pix_model.Pix2PixModel.backward_D", "pix2pix_model.Pix2PixModel.optimizer_D.step", "pix2pix_model.Pix2PixModel.set_requires_grad", "pix2pix_model.Pix2PixModel.optimizer_G.zero_grad", "pix2pix_model.Pix2PixModel.backward_G", "pix2pix_model.Pix2PixModel.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.backward_D", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.pix2pix_model.Pix2PixModel.backward_G", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.LARS.step"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "# compute fake images: G(A)", "\n", "# update D", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "True", ")", "# enable backprop for D", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "# set D's gradients to zero", "\n", "self", ".", "backward_D", "(", ")", "# calculate gradients for D", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "# update D's weights", "\n", "# update G", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "False", ")", "# D requires no gradients when optimizing G", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "# set G's gradients to zero", "\n", "self", ".", "backward_G", "(", ")", "# calculate graidents for G", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "# udpate G's weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.matmul.__init__": [[36, 38], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.matmul.forward": [[39, 42], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.PixelNorm.__init__": [[49, 51], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.PixelNorm.forward": [[52, 54], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.CustomAct.__init__": [[67, 73], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.CustomAct.forward": [[74, 76], ["ViT_scale3_local_new_rp.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Mlp.__init__": [[78, 86], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ViT_scale3_local_new_rp.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Mlp.forward": [[87, 94], ["ViT_scale3_local_new_rp.Mlp.fc1", "ViT_scale3_local_new_rp.Mlp.act", "ViT_scale3_local_new_rp.Mlp.drop", "ViT_scale3_local_new_rp.Mlp.fc2", "ViT_scale3_local_new_rp.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Attention.__init__": [[97, 127], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT_scale3_local_new_rp.matmul", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_scale3_local_new_rp.Attention.register_buffer", "ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Attention.forward": [[128, 147], ["ViT_scale3_local_new_rp.Attention.qkv().reshape().permute", "ViT_scale3_local_new_rp.Attention.softmax", "ViT_scale3_local_new_rp.Attention.attn_drop", "ViT_scale3_local_new_rp.Attention.mat().transpose().reshape", "ViT_scale3_local_new_rp.Attention.proj", "ViT_scale3_local_new_rp.Attention.proj_drop", "ViT_scale3_local_new_rp.Attention.mat", "ViT_scale3_local_new_rp.Attention.qkv().reshape", "k.transpose", "ViT_scale3_local_new_rp.Attention.mat().transpose", "ViT_scale3_local_new_rp.Attention.qkv", "ViT_scale3_local_new_rp.Attention.mat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "# if self.window_size != 0:", "\n", "#     relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1).clone()].view(", "\n", "#         self.window_size * self.window_size, self.window_size * self.window_size, -1)  # Wh*Ww,Wh*Ww,nH", "\n", "#     relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww", "\n", "#     print(attn.shape)", "\n", "#     print(relative_position_bias.unsqueeze(0).shape)", "\n", "#     attn = attn + relative_position_bias.unsqueeze(0)", "\n", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.CustomNorm.__init__": [[149, 160], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_scale3_local_new_rp.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.CustomNorm.forward": [[161, 169], ["ViT_scale3_local_new_rp.CustomNorm.norm().permute", "ViT_scale3_local_new_rp.CustomNorm.norm", "ViT_scale3_local_new_rp.CustomNorm.norm", "ViT_scale3_local_new_rp.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Block.__init__": [[204, 215], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "ViT_scale3_local_new_rp.Attention", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "int", "ViT_scale3_local_new_rp.Mlp", "ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "\"ln\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Block.forward": [[216, 220], ["ViT_scale3_local_new_rp.Block.drop_path", "ViT_scale3_local_new_rp.Block.drop_path", "ViT_scale3_local_new_rp.Block.attn", "ViT_scale3_local_new_rp.Block.mlp", "ViT_scale3_local_new_rp.Block.norm1", "ViT_scale3_local_new_rp.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.StageBlock.__init__": [[223, 239], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ViT_scale3_local_new_rp.Block", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "'ln'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.StageBlock.forward": [[240, 244], ["blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "block", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Generator.__init__": [[257, 339], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_scale3_local_new_rp.StageBlock", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_scale3_local_new_rp.Discriminator", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "einops.layers.torch.Rearrange", "torch.Linear", "torch.Linear", "torch.Linear", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_scale3_local_new_rp.StageBlock", "ViT_scale3_local_new_rp.StageBlock"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "'ln'", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "8", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "window_size", "=", "8", "\n", "norm_layer", "=", "8", "\n", "mlp_ratio", "=", "4", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "\"5,4,2\"", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "\"gelu\"", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "128", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", ",", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "tRGB_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "4", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "16", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "\n", "self", ".", "to_patch_embedding", "=", "nn", ".", "Sequential", "(", "\n", "Rearrange", "(", "'b c (h p1) (w p2) -> b (h w) (p1 p2 c)'", ",", "p1", "=", "16", ",", "p2", "=", "16", ")", ",", "\n", "nn", ".", "Linear", "(", "3", "*", "16", "*", "16", ",", "128", ")", ",", "\n", ")", "\n", "self", ".", "encoder", "=", "Discriminator", "(", ")", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Generator._init_weights": [[339, 353], ["isinstance", "ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Generator.set_arch": [[354, 356], ["None"], "methods", ["None"], ["", "", "def", "set_arch", "(", "self", ",", "x", ",", "cur_stage", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Generator.forward": [[357, 394], ["ViT_scale3_local_new_rp.Generator.encoder", "ViT_scale3_local_new_rp.Generator.size", "print", "ViT_scale3_local_new_rp.Generator.blocks", "print", "ViT_scale3_local_new_rp.Generator.tRGB_1", "ViT_scale3_local_new_rp.pixel_upsample", "print", "print", "ViT_scale3_local_new_rp.Generator.tRGB_2", "ViT_scale3_local_new_rp.pixel_upsample", "print", "ViT_scale3_local_new_rp.Generator.tRGB_3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ViT_scale3_local_new_rp.Generator.pos_embed[].to", "ViT_scale3_local_new_rp.Generator.permute().view", "ViT_scale3_local_new_rp.Generator.pos_embed[].to", "ViT_scale3_local_new_rp.Generator.permute().view", "ViT_scale3_local_new_rp.Generator.pos_embed[].to", "ViT_scale3_local_new_rp.Generator.permute().view", "ViT_scale3_local_new_rp.Generator.get_device", "ViT_scale3_local_new_rp.Generator.get_device", "ViT_scale3_local_new_rp.Generator.get_device", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ViT_scale3_local_new_rp.Generator.permute", "ViT_scale3_local_new_rp.Generator.permute", "ViT_scale3_local_new_rp.Generator.permute"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "#### encoder", "\n", "        ", "x", ",", "_", "=", "self", ".", "encoder", "(", "z", ")", "\n", "### vit path encoding", "\n", "# z=self.to_patch_embedding(z)", "\n", "# z=z.sum(dim=1)/256", "\n", "#", "\n", "# x = self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "x_1", "=", "self", ".", "tRGB_1", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", ",", "H", ",", "W", ")", ")", "\n", "\n", "### x_1 1, 3, 8, 8", "\n", "# print(x_1.shape)", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "0", "]", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "\n", "x_2", "=", "self", ".", "tRGB_2", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "4", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "1", "]", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "\n", "x_3", "=", "self", ".", "tRGB_3", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "16", ",", "H", ",", "W", ")", ")", "\n", "output", "=", "F", ".", "interpolate", "(", "x_1", ",", "scale_factor", "=", "4", ")", "+", "F", ".", "interpolate", "(", "x_2", ",", "scale_factor", "=", "2", ")", "+", "x_3", "\n", "# print(output.shape)", "\n", "### reshape 1,3,32,32---1,3,256,256", "\n", "output", "=", "F", ".", "interpolate", "(", "output", ",", "scale_factor", "=", "8", ")", "\n", "return", "output", ",", "x_3", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.SpaceToDepth.__init__": [[401, 405], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "block_size", "in", "{", "2", ",", "4", "}", ",", "\"Space2Depth only supports blocks size = 4 or 2\"", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.SpaceToDepth.forward": [[406, 413], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "S", "=", "self", ".", "block_size", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "S", ",", "S", ",", "W", "//", "S", ",", "S", ")", "# (N, C, H//bs, bs, W//bs, bs)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# (N, bs, bs, C, H//bs, W//bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "S", "*", "S", ",", "H", "//", "S", ",", "W", "//", "S", ")", "# (N, C*bs^2, H//bs, W//bs)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.DisBlock.__init__": [[416, 428], ["torch.Module.__init__", "ViT_scale3_local_new_rp.CustomNorm", "ViT_scale3_local_new_rp.Attention", "ViT_scale3_local_new_rp.CustomNorm", "int", "ViT_scale3_local_new_rp.Mlp", "ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.DisBlock.forward": [[429, 433], ["ViT_scale3_local_new_rp.DisBlock.drop_path", "ViT_scale3_local_new_rp.DisBlock.drop_path", "ViT_scale3_local_new_rp.DisBlock.attn", "ViT_scale3_local_new_rp.DisBlock.mlp", "ViT_scale3_local_new_rp.DisBlock.norm1", "ViT_scale3_local_new_rp.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Discriminator.__init__": [[436, 530], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_scale3_local_new_rp.CustomNorm", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_scale3_local_new_rp.Discriminator.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "ViT_scale3_local_new_rp.DisBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.asarray", "numpy.eye", "range", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ViT_scale3_local_new_rp.Discriminator.register_buffer", "ViT_scale3_local_new_rp.Discriminator.register_buffer", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_scale3_local_new_rp.DisBlock", "ViT_scale3_local_new_rp.DisBlock", "ViT_scale3_local_new_rp.DisBlock", "ViT_scale3_local_new_rp.DisBlock", "numpy.convolve", "numpy.convolve", "scipy.signal.convolve", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch_utils.ops.upfirdn2d.setup_filter", "range", "range", "range", "range", "numpy.arange", "numpy.dstack().reshape", "numpy.dstack", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "32", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "128", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "\n", "\n", "depth", "=", "7", "\n", "self", ".", "patch_size", "=", "4", "\n", "norm_layer", "=", "'ln'", "\n", "self", ".", "window_size", "=", "8", "\n", "\n", "act_layer", "=", "\"gelu\"", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", "*", "3", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", "*", "2", ",", "stride", "=", "patch_size", "*", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_3", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", "*", "4", ",", "stride", "=", "patch_size", "*", "4", ",", "padding", "=", "0", ")", "\n", "#         self.fRGB_4 = nn.Conv2d(3, embed_dim//2, kernel_size=patch_size, stride=patch_size, padding=0)", "\n", "img_size", "=", "256", "\n", "num_patches_1", "=", "(", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_3", "=", "(", "(", "img_size", "//", "4", ")", "//", "patch_size", ")", "**", "2", "\n", "#         num_patches_4 = ((args.img_size//8) // patch_size)**2", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "4", "*", "3", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", "//", "8", "*", "7", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_3", ",", "embed_dim", ")", ")", "\n", "#         self.pos_embed_4 = nn.Parameter(torch.zeros(1, num_patches_4, embed_dim))", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", "*", "3", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "self", ".", "window_size", ")", "\n", "for", "i", "in", "range", "(", "depth", "-", "1", ")", "]", ")", "\n", "self", ".", "blocks_11", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", "*", "3", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "64", ")", "\n", "for", "i", "in", "range", "(", "1", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "8", "*", "7", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "32", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_3", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "16", ")", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", "]", ")", "\n", "#         self.blocks_4 = nn.ModuleList([", "\n", "#             DisBlock(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer)", "\n", "#             for i in range(depth)])", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "0", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_3", ",", "std", "=", ".02", ")", "\n", "#         trunc_normal_(self.pos_embed_4, std=.02)", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "diff_aug", "=", "'None'", "\n", "if", "'filter'", "in", "self", ".", "diff_aug", ":", "\n", "            ", "Hz_lo", "=", "np", ".", "asarray", "(", "wavelets", "[", "'sym2'", "]", ")", "# H(z)", "\n", "Hz_hi", "=", "Hz_lo", "*", "(", "(", "-", "1", ")", "**", "np", ".", "arange", "(", "Hz_lo", ".", "size", ")", ")", "# H(-z)", "\n", "Hz_lo2", "=", "np", ".", "convolve", "(", "Hz_lo", ",", "Hz_lo", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(z) * H(z^-1) / 2", "\n", "Hz_hi2", "=", "np", ".", "convolve", "(", "Hz_hi", ",", "Hz_hi", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(-z) * H(-z^-1) / 2", "\n", "Hz_fbank", "=", "np", ".", "eye", "(", "4", ",", "1", ")", "# Bandpass(H(z), b_i)", "\n", "for", "i", "in", "range", "(", "1", ",", "Hz_fbank", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Hz_fbank", "=", "np", ".", "dstack", "(", "[", "Hz_fbank", ",", "np", ".", "zeros_like", "(", "Hz_fbank", ")", "]", ")", ".", "reshape", "(", "Hz_fbank", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Hz_fbank", "=", "scipy", ".", "signal", ".", "convolve", "(", "Hz_fbank", ",", "[", "Hz_lo2", "]", ")", "\n", "Hz_fbank", "[", "i", ",", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "-", "Hz_hi2", ".", "size", ")", "//", "2", ":", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "+", "Hz_hi2", ".", "size", ")", "//", "2", "]", "+=", "Hz_hi2", "\n", "", "Hz_fbank", "=", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "register_buffer", "(", "'Hz_fbank'", ",", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_fbank", "=", "None", "\n", "", "if", "'geo'", "in", "self", ".", "diff_aug", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'Hz_geom'", ",", "upfirdn2d", ".", "setup_filter", "(", "wavelets", "[", "'sym6'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_geom", "=", "None", "\n", "", "self", ".", "featlay", "=", "nn", ".", "Conv2d", "(", "128", ",", "384", ",", "1", ")", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Discriminator._init_weights": [[530, 538], ["isinstance", "ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Discriminator.forward_features": [[540, 618], ["blk.size", "ViT_scale3_local_new_rp.Discriminator.fRGB_1().flatten().permute", "ViT_scale3_local_new_rp.Discriminator.fRGB_2().flatten().permute", "ViT_scale3_local_new_rp.Discriminator.fRGB_3().flatten().permute", "blk.size", "blk.view", "ViT_scale3_local_new_rp.window_partition", "blk.view", "blk.view", "window_reverse().view", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "ViT_scale3_local_new_rp.Discriminator.featlay", "feat.view().permute.view().permute.view().permute", "ViT_scale3_local_new_rp.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_scale3_local_new_rp.Discriminator.last_block", "ViT_scale3_local_new_rp.Discriminator.norm", "diff_aug.DiffAugment", "blk", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "ViT_scale3_local_new_rp.Discriminator.fRGB_1().flatten", "ViT_scale3_local_new_rp.Discriminator.fRGB_2().flatten", "ViT_scale3_local_new_rp.Discriminator.fRGB_3().flatten", "ViT_scale3_local_new_rp.window_reverse", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "blk.permute", "feat.view().permute.view().permute.view", "ViT_scale3_local_new_rp.Discriminator.fRGB_1", "ViT_scale3_local_new_rp.Discriminator.fRGB_2", "ViT_scale3_local_new_rp.Discriminator.fRGB_3"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "diff_aug", ",", "True", ",", "[", "self", ".", "Hz_geom", ",", "self", ".", "Hz_fbank", "]", ")", "\n", "#         with torch.no_grad():", "\n", "#             save_image(x.clone(), f'in_{self.args.rank}.png', nrow=4, padding=1, normalize=True, scale_each=True)", "\n", "#         import time", "\n", "#         time.sleep(10)", "\n", "", "B", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "H", "=", "W", "=", "H", "//", "self", ".", "patch_size", "\n", "\n", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_3", "=", "self", ".", "fRGB_3", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#         x_4 = self.fRGB_4(nn.AvgPool2d(8)(x)).flatten(2).permute(0,2,1)", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_11", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "#         print(x.shape)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# print(x.shape)", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_3", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_3", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "# #         x = SpaceToDepth(2)(x)", "\n", "x_", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x_", ")", "\n", "# print(x_.shape)", "\n", "\n", "feat", "=", "self", ".", "featlay", "(", "x_", ")", "\n", "feat", "=", "feat", ".", "view", "(", "1", ",", "384", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# print(feat.shape)", "\n", "\n", "# _, _, H, W = x.shape", "\n", "#         x = x.flatten(2).permute(0, 2, 1)", "\n", "#         x = torch.cat([x, x_4], dim=-1)", "\n", "#         x = x + self.pos_embed_4", "\n", "\n", "#         for blk in self.blocks_4:", "\n", "#             x = blk(x)", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "feat", ",", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.Discriminator.forward": [[619, 624], ["ViT_scale3_local_new_rp.Discriminator.forward_features", "ViT_scale3_local_new_rp.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", ",", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "# feat=x", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "feat", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.count_matmul": [[43, 47], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.gelu": [[55, 62], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.leakyrelu": [[63, 65], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.window_partition": [[172, 184], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.window_reverse": [[186, 200], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp.pixel_upsample": [[245, 255], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_scale3_local_new_rp._downsample": [[396, 399], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.matmul.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.matmul.forward": [[14, 17], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.PixelNorm.__init__": [[24, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.PixelNorm.forward": [[27, 29], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.CustomAct.__init__": [[42, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.CustomAct.forward": [[49, 51], ["ViT_custom.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Mlp.__init__": [[53, 61], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "ViT_custom.CustomAct", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Mlp.forward": [[62, 69], ["ViT_custom.Mlp.fc1", "ViT_custom.Mlp.act", "ViT_custom.Mlp.drop", "ViT_custom.Mlp.fc2", "ViT_custom.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Attention.__init__": [[72, 84], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "ViT_custom.matmul"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Attention.forward": [[85, 98], ["ViT_custom.Attention.qkv().reshape().permute", "ViT_custom.Attention.softmax", "ViT_custom.Attention.attn_drop", "ViT_custom.Attention.mat().transpose().reshape", "ViT_custom.Attention.proj", "ViT_custom.Attention.proj_drop", "ViT_custom.Attention.mat", "ViT_custom.Attention.qkv().reshape", "k.transpose", "ViT_custom.Attention.mat().transpose", "ViT_custom.Attention.qkv", "ViT_custom.Attention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.CustomNorm.__init__": [[100, 111], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.CustomNorm.forward": [[112, 120], ["ViT_custom.CustomNorm.norm().permute", "ViT_custom.CustomNorm.norm", "ViT_custom.CustomNorm.norm", "ViT_custom.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Block.__init__": [[123, 134], ["torch.Module.__init__", "ViT_custom.CustomNorm", "ViT_custom.Attention", "ViT_custom.CustomNorm", "int", "ViT_custom.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Block.forward": [[135, 139], ["ViT_custom.Block.drop_path", "ViT_custom.Block.drop_path", "ViT_custom.Block.attn", "ViT_custom.Block.mlp", "ViT_custom.Block.norm1", "ViT_custom.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.StageBlock.__init__": [[142, 158], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "ViT_custom.Block", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.StageBlock.forward": [[159, 163], ["blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "block", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Generator.__init__": [[176, 245], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom.StageBlock", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom.StageBlock", "ViT_custom.StageBlock"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "mlp_ratio", "=", "args", ".", "g_mlp", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", ",", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "16", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Generator.set_arch": [[267, 269], ["None"], "methods", ["None"], ["", "def", "set_arch", "(", "self", ",", "x", ",", "cur_stage", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Generator.forward": [[270, 290], ["ViT_custom.Generator.l1().view", "blk.size", "ViT_custom.Generator.blocks", "enumerate", "ViT_custom.Generator.deconv", "z.size", "ViT_custom.Generator.pos_embed[].to", "ViT_custom.pixel_upsample", "blk", "blk.permute().view", "ViT_custom.Generator.l1", "blk.get_device", "ViT_custom.Generator.pos_embed[].to", "z.norm", "blk.get_device", "blk.permute"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "latent_norm", ":", "\n", "            ", "latent_size", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "z", "=", "(", "z", "/", "z", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "(", "latent_size", "**", "0.5", ")", ")", "\n", "", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "for", "index", ",", "blk", "in", "enumerate", "(", "self", ".", "upsample_blocks", ")", ":", "\n", "# x = x.permute(0,2,1)", "\n", "# x = x.view(-1, self.embed_dim, H, W)", "\n", "            ", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "index", "+", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "blk", "(", "x", ")", "\n", "# _, _, H, W = x.size()", "\n", "# x = x.view(-1, self.embed_dim, H*W)", "\n", "# x = x.permute(0,2,1)", "\n", "", "output", "=", "self", ".", "deconv", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", "//", "16", ",", "H", ",", "W", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.DisBlock.__init__": [[298, 310], ["torch.Module.__init__", "ViT_custom.CustomNorm", "ViT_custom.Attention", "ViT_custom.CustomNorm", "int", "ViT_custom.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.DisBlock.forward": [[311, 315], ["ViT_custom.DisBlock.drop_path", "ViT_custom.DisBlock.drop_path", "ViT_custom.DisBlock.attn", "ViT_custom.DisBlock.mlp", "ViT_custom.DisBlock.norm1", "ViT_custom.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Discriminator.__init__": [[320, 366], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "ViT_custom.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "ViT_custom.Discriminator.apply", "HybridEmbed", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom.DisBlock", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "mlp_ratio", "=", "args", ".", "d_mlp", "\n", "if", "hybrid_backbone", "is", "not", "None", ":", "\n", "            ", "self", ".", "patch_embed", "=", "HybridEmbed", "(", "\n", "hybrid_backbone", ",", "img_size", "=", "img_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patch_embed", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "", "num_patches", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "i", "]", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Discriminator._init_weights": [[367, 379], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "#         elif isinstance(m, nn.Conv2d):", "\n", "#             trunc_normal_(m.weight, std=.02)", "\n", "#             if isinstance(m, nn.Conv2d) and m.bias is not None:", "\n", "#                 nn.init.constant_(m.bias, 0)", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Discriminator.forward_features": [[381, 396], ["ViT_custom.Discriminator.patch_embed().flatten().permute", "ViT_custom.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom.Discriminator.pos_drop", "ViT_custom.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "ViT_custom.Discriminator.patch_embed().flatten", "ViT_custom.Discriminator.patch_embed"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.DiffAugment"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ")", "\n", "", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.Discriminator.forward": [[397, 401], ["ViT_custom.Discriminator.forward_features", "ViT_custom.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.count_matmul": [[18, 22], ["torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.gelu": [[30, 37], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.leakyrelu": [[38, 40], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom.pixel_upsample": [[164, 174], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom._downsample": [[292, 295], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.DiffAugment": [[48, 59], ["policy.split", "f.contiguous", "f.permute", "f.permute", "f"], "function", ["None"], ["def", "DiffAugment", "(", "x", ",", "policy", "=", "''", ",", "channels_first", "=", "True", ",", "affine", "=", "None", ")", ":", "\n", "    ", "if", "policy", ":", "\n", "        ", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "for", "p", "in", "policy", ".", "split", "(", "','", ")", ":", "\n", "            ", "for", "f", "in", "AUGMENT_FNS", "[", "p", "]", ":", "\n", "                ", "x", "=", "f", "(", "x", ",", "affine", "=", "affine", ")", "\n", "", "", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_crop": [[60, 69], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate.size", "torch.where", "torch.where", "random.randint", "random.randint", "x_crop.size", "x.size", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "rand_crop", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x_large", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "1.2", ",", "mode", "=", "'bicubic'", ")", "\n", "_", ",", "_", ",", "h_large", ",", "w_large", "=", "x_large", ".", "size", "(", ")", "\n", "h_start", ",", "w_start", "=", "random", ".", "randint", "(", "0", ",", "(", "h_large", "-", "h", ")", ")", ",", "random", ".", "randint", "(", "0", ",", "(", "w_large", "-", "w", ")", ")", "\n", "x_crop", "=", "x_large", "[", ":", ",", ":", ",", "h_start", ":", "h_start", "+", "h", ",", "w_start", ":", "w_start", "+", "w", "]", "\n", "assert", "x_crop", ".", "size", "(", ")", "==", "x", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "b", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "<", "0.2", ",", "x_crop", ",", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_filter": [[71, 109], ["Hz_fbank.to.to", "ada.constant", "torch.ones", "torch.ones", "enumerate", "Hz_prime.reshape.unsqueeze().repeat", "Hz_prime.reshape.reshape", "images.reshape.reshape", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch_utils.ops.conv2d_gradfix.conv2d", "torch_utils.ops.conv2d_gradfix.conv2d", "images.reshape.reshape", "len", "torch.exp2", "torch.exp2", "torch.where", "torch.where", "torch.ones", "torch.ones", "numpy.array", "torch.ones_like", "torch.ones_like", "Hz_prime.reshape.unsqueeze", "Hz_prime.reshape.unsqueeze", "Hz_prime.reshape.unsqueeze", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.ones.square"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.constant", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d"], ["", "def", "rand_filter", "(", "images", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio", "=", "0.25", "\n", "\n", "\n", "_", ",", "Hz_fbank", "=", "affine", "\n", "Hz_fbank", "=", "Hz_fbank", ".", "to", "(", "images", ".", "device", ")", "\n", "imgfilter_bands", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "images", ".", "shape", "\n", "device", "=", "images", ".", "device", "\n", "num_bands", "=", "Hz_fbank", ".", "shape", "[", "0", "]", "\n", "assert", "len", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "==", "num_bands", "\n", "expected_power", "=", "constant", "(", "np", ".", "array", "(", "[", "10", ",", "1", ",", "1", ",", "1", "]", ")", "/", "13", ",", "device", "=", "device", ")", "# Expected power spectrum (1/f).", "\n", "\n", "# Apply amplification for each band with probability (imgfilter * strength * band_strength).", "\n", "g", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "num_bands", "]", ",", "device", "=", "device", ")", "# Global gain vector (identity).", "\n", "for", "i", ",", "band_strength", "in", "enumerate", "(", "imgfilter_bands", ")", ":", "\n", "        ", "t_i", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "1", ")", "\n", "t_i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "ratio", "*", "band_strength", ",", "t_i", ",", "torch", ".", "ones_like", "(", "t_i", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             t_i = torch.full_like(t_i, torch.exp2(torch.erfinv(debug_percentile * 2 - 1) * 1)) if band_strength > 0 else torch.ones_like(t_i)", "\n", "t", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "num_bands", "]", ",", "device", "=", "device", ")", "# Temporary gain vector.", "\n", "t", "[", ":", ",", "i", "]", "=", "t_i", "# Replace i'th element.", "\n", "t", "=", "t", "/", "(", "expected_power", "*", "t", ".", "square", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", ".", "sqrt", "(", ")", "# Normalize power.", "\n", "g", "=", "g", "*", "t", "# Accumulate into global gain.", "\n", "\n", "# Construct combined amplification filter.", "\n", "", "Hz_prime", "=", "g", "@", "Hz_fbank", "# [batch, tap]", "\n", "Hz_prime", "=", "Hz_prime", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "[", "1", ",", "num_channels", ",", "1", "]", ")", "# [batch, channels, tap]", "\n", "Hz_prime", "=", "Hz_prime", ".", "reshape", "(", "[", "batch_size", "*", "num_channels", ",", "1", ",", "-", "1", "]", ")", "# [batch * channels, 1, tap]", "\n", "\n", "# Apply filter.", "\n", "p", "=", "Hz_fbank", ".", "shape", "[", "1", "]", "//", "2", "\n", "images", "=", "images", ".", "reshape", "(", "[", "1", ",", "batch_size", "*", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "images", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "images", ",", "pad", "=", "[", "p", ",", "p", ",", "p", ",", "p", "]", ",", "mode", "=", "'reflect'", ")", "\n", "images", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "images", ",", "weight", "=", "Hz_prime", ".", "unsqueeze", "(", "2", ")", ",", "groups", "=", "batch_size", "*", "num_channels", ")", "\n", "images", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "images", ",", "weight", "=", "Hz_prime", ".", "unsqueeze", "(", "3", ")", ",", "groups", "=", "batch_size", "*", "num_channels", ")", "\n", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_hue": [[110, 149], ["torch.eye", "torch.eye", "ada.constant", "torch.where", "torch.where", "images.reshape.reshape", "images.reshape.reshape", "numpy.asarray", "numpy.sqrt", "torch.zeros_like", "torch.zeros_like", "ada.rotate3d", "torch.rand", "torch.rand", "C[].mean", "ValueError", "torch.rand", "torch.rand", "C[].sum"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.constant", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.rotate3d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "rand_hue", "(", "images", ",", "affine", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "images", ".", "shape", "\n", "device", "=", "images", ".", "device", "\n", "I_4", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "device", ")", "\n", "C", "=", "I_4", "\n", "v", "=", "constant", "(", "np", ".", "asarray", "(", "[", "1", ",", "1", ",", "1", ",", "0", "]", ")", "/", "np", ".", "sqrt", "(", "3", ")", ",", "device", "=", "device", ")", "# Luma axis.", "\n", "\n", "# Apply hue rotation with probability (hue * strength).", "\n", "if", "num_channels", ">", "1", ":", "\n", "        ", "theta", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "1", "\n", "theta", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "0.5", ",", "theta", ",", "torch", ".", "zeros_like", "(", "theta", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             theta = torch.full_like(theta, (debug_percentile * 2 - 1) * np.pi * 1)", "\n", "C", "=", "rotate3d", "(", "v", ",", "theta", ")", "@", "C", "# Rotate around v.", "\n", "\n", "# Apply saturation with probability (saturation * strength).", "\n", "#     if self.saturation > 0 and num_channels > 1:", "\n", "#         s = torch.exp2(torch.randn([batch_size, 1, 1], device=device) * self.saturation_std)", "\n", "#         s = torch.where(torch.rand([batch_size, 1, 1], device=device) < self.saturation * self.p, s, torch.ones_like(s))", "\n", "#         if debug_percentile is not None:", "\n", "#             s = torch.full_like(s, torch.exp2(torch.erfinv(debug_percentile * 2 - 1) * self.saturation_std))", "\n", "#         C = (v.ger(v) + (I_4 - v.ger(v)) * s) @ C", "\n", "\n", "# ------------------------------", "\n", "# Execute color transformations.", "\n", "# ------------------------------", "\n", "\n", "# Execute if the transform is not identity.", "\n", "", "if", "C", "is", "not", "I_4", ":", "\n", "        ", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", "*", "width", "]", ")", "\n", "if", "num_channels", "==", "3", ":", "\n", "            ", "images", "=", "C", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "images", "+", "C", "[", ":", ",", ":", "3", ",", "3", ":", "]", "\n", "", "elif", "num_channels", "==", "1", ":", "\n", "            ", "C", "=", "C", "[", ":", ",", ":", "3", ",", ":", "]", ".", "mean", "(", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "images", "=", "images", "*", "C", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "dim", "=", "2", ",", "keepdims", "=", "True", ")", "+", "C", "[", ":", ",", ":", ",", "3", ":", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Image must be RGB (3 channels) or L (1 channel)'", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_geo": [[150, 267], ["Hz_geom.to.to", "torch.eye", "torch.eye", "torch.floor", "torch.floor", "torch.where", "torch.where", "torch.exp2", "torch.exp2", "torch.where", "torch.where", "torch.exp2", "torch.exp2", "torch.where", "torch.where", "torch.where", "torch.where", "ada.matrix", "cp[].permute().flatten", "margin.min.max", "margin.min.min", "margin.min.ceil().to", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch_utils.ops.upfirdn2d.upsample2d", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch_utils.ops.grid_sample_gradfix.grid_sample", "torch_utils.ops.upfirdn2d.downsample2d", "torch.zeros_like", "torch.zeros_like", "ada.scale2d_inv", "torch.ones_like", "torch.ones_like", "ada.scale2d_inv", "torch.ones_like", "torch.ones_like", "ada.scale2d_inv", "torch.randn", "torch.randn", "torch.zeros_like", "torch.zeros_like", "ada.translate2d_inv", "ada.matrix.t", "torch.cat().max", "torch.cat().max", "ada.constant", "ada.constant", "ada.constant", "ada.translate2d", "ada.scale2d_inv", "ada.translate2d_inv", "ada.scale2d_inv", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "cp[].permute", "margin.min.ceil", "ada.scale2d", "ada.translate2d", "ada.scale2d", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.matrix", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upsample2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix.grid_sample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.downsample2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.translate2d_inv", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.constant", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.constant", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.constant", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.translate2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.translate2d_inv", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.translate2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d"], ["", "def", "rand_geo", "(", "images", ",", "affine", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "images", ".", "shape", "\n", "device", "=", "images", ".", "device", "\n", "\n", "Hz_geom", ",", "_", "=", "affine", "\n", "Hz_geom", "=", "Hz_geom", ".", "to", "(", "images", ".", "device", ")", "\n", "\n", "I_3", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "device", ")", "\n", "G_inv", "=", "I_3", "\n", "\n", "# Apply x-flip with probability (xflip * strength).", "\n", "if", "1", ":", "\n", "        ", "i", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", ")", "\n", "i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "1", ",", "i", ",", "torch", ".", "zeros_like", "(", "i", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             i = torch.full_like(i, torch.floor(debug_percentile * 2))", "\n", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "1", "-", "2", "*", "i", ",", "1", ")", "\n", "\n", "#     # Apply 90 degree rotations with probability (rotate90 * strength).", "\n", "#     if self.rotate90 > 0:", "\n", "#         i = torch.floor(torch.rand([batch_size], device=device) * 4)", "\n", "#         i = torch.where(torch.rand([batch_size], device=device) < self.rotate90 * P, i, torch.zeros_like(i))", "\n", "#         if debug_percentile is not None:", "\n", "#             i = torch.full_like(i, torch.floor(debug_percentile * 4))", "\n", "#         G_inv = G_inv @ rotate2d_inv(-np.pi / 2 * i)", "\n", "\n", "# Apply integer translation with probability (xint * strength).", "\n", "#     if self.xint > 0:", "\n", "#         t = (torch.rand([batch_size, 2], device=device) * 2 - 1) * self.xint_max", "\n", "#         t = torch.where(torch.rand([batch_size, 1], device=device) < self.xint * P, t, torch.zeros_like(t))", "\n", "#         if debug_percentile is not None:", "\n", "#             t = torch.full_like(t, (debug_percentile * 2 - 1) * self.xint_max)", "\n", "#         G_inv = G_inv @ translate2d_inv(torch.round(t[:,0] * width), torch.round(t[:,1] * height))", "\n", "\n", "# --------------------------------------------------------", "\n", "# Select parameters for general geometric transformations.", "\n", "# --------------------------------------------------------", "\n", "\n", "# Apply isotropic scaling with probability (scale * strength).", "\n", "", "if", "1", ":", "\n", "        ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "0.2", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "0.3", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             s = torch.full_like(s, torch.exp2(torch.erfinv(debug_percentile * 2 - 1) * self.scale_std))", "\n", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "s", ",", "s", ")", "\n", "\n", "#     # Apply pre-rotation with probability p_rot.", "\n", "#     p_rot = 1 - torch.sqrt((1 - self.rotate * self.p).clamp(0, 1)) # P(pre OR post) = p", "\n", "#     if self.rotate > 0:", "\n", "#         theta = (torch.rand([batch_size], device=device) * 2 - 1) * np.pi * self.rotate_max", "\n", "#         theta = torch.where(torch.rand([batch_size], device=device) < p_rot, theta, torch.zeros_like(theta))", "\n", "#         if debug_percentile is not None:", "\n", "#             theta = torch.full_like(theta, (debug_percentile * 2 - 1) * np.pi * self.rotate_max)", "\n", "#         G_inv = G_inv @ rotate2d_inv(-theta) # Before anisotropic scaling.", "\n", "\n", "#     Apply anisotropic scaling with probability (aniso * strength).", "\n", "", "if", "1", ":", "\n", "        ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "0.2", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "0.3", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             s = torch.full_like(s, torch.exp2(torch.erfinv(debug_percentile * 2 - 1) * self.aniso_std))", "\n", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "s", ",", "1", "/", "s", ")", "\n", "\n", "#     # Apply post-rotation with probability p_rot.", "\n", "#     if self.rotate > 0:", "\n", "#         theta = (torch.rand([batch_size], device=device) * 2 - 1) * np.pi * self.rotate_max", "\n", "#         theta = torch.where(torch.rand([batch_size], device=device) < p_rot, theta, torch.zeros_like(theta))", "\n", "#         if debug_percentile is not None:", "\n", "#             theta = torch.zeros_like(theta)", "\n", "#         G_inv = G_inv @ rotate2d_inv(-theta) # After anisotropic scaling.", "\n", "\n", "# Apply fractional translation with probability (xfrac * strength).", "\n", "", "if", "1", ":", "\n", "        ", "t", "=", "torch", ".", "randn", "(", "[", "batch_size", ",", "2", "]", ",", "device", "=", "device", ")", "*", "0.125", "\n", "t", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", "]", ",", "device", "=", "device", ")", "<", "0.3", ",", "t", ",", "torch", ".", "zeros_like", "(", "t", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             t = torch.full_like(t, torch.erfinv(debug_percentile * 2 - 1) * 0.125)", "\n", "G_inv", "=", "G_inv", "@", "translate2d_inv", "(", "t", "[", ":", ",", "0", "]", "*", "width", ",", "t", "[", ":", ",", "1", "]", "*", "height", ")", "\n", "\n", "# ----------------------------------", "\n", "# Execute geometric transformations.", "\n", "# ----------------------------------", "\n", "\n", "# Execute if the transform is not identity.", "\n", "", "if", "G_inv", "is", "not", "I_3", ":", "\n", "\n", "# Calculate padding.", "\n", "        ", "cx", "=", "(", "width", "-", "1", ")", "/", "2", "\n", "cy", "=", "(", "height", "-", "1", ")", "/", "2", "\n", "cp", "=", "matrix", "(", "[", "-", "cx", ",", "-", "cy", ",", "1", "]", ",", "[", "cx", ",", "-", "cy", ",", "1", "]", ",", "[", "cx", ",", "cy", ",", "1", "]", ",", "[", "-", "cx", ",", "cy", ",", "1", "]", ",", "device", "=", "device", ")", "# [idx, xyz]", "\n", "cp", "=", "G_inv", "@", "cp", ".", "t", "(", ")", "# [batch, xyz, idx]", "\n", "Hz_pad", "=", "Hz_geom", ".", "shape", "[", "0", "]", "//", "4", "\n", "margin", "=", "cp", "[", ":", ",", ":", "2", ",", ":", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "flatten", "(", "1", ")", "# [xy, batch * idx]", "\n", "margin", "=", "torch", ".", "cat", "(", "[", "-", "margin", ",", "margin", "]", ")", ".", "max", "(", "dim", "=", "1", ")", ".", "values", "# [x0, y0, x1, y1]", "\n", "margin", "=", "margin", "+", "constant", "(", "[", "Hz_pad", "*", "2", "-", "cx", ",", "Hz_pad", "*", "2", "-", "cy", "]", "*", "2", ",", "device", "=", "device", ")", "\n", "margin", "=", "margin", ".", "max", "(", "constant", "(", "[", "0", ",", "0", "]", "*", "2", ",", "device", "=", "device", ")", ")", "\n", "margin", "=", "margin", ".", "min", "(", "constant", "(", "[", "width", "-", "1", ",", "height", "-", "1", "]", "*", "2", ",", "device", "=", "device", ")", ")", "\n", "mx0", ",", "my0", ",", "mx1", ",", "my1", "=", "margin", ".", "ceil", "(", ")", ".", "to", "(", "torch", ".", "int32", ")", "\n", "\n", "# Pad image and adjust origin.", "\n", "images", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "images", ",", "pad", "=", "[", "mx0", ",", "mx1", ",", "my0", ",", "my1", "]", ",", "mode", "=", "'reflect'", ")", "\n", "G_inv", "=", "translate2d", "(", "(", "mx0", "-", "mx1", ")", "/", "2", ",", "(", "my0", "-", "my1", ")", "/", "2", ")", "@", "G_inv", "\n", "\n", "# Upsample.", "\n", "images", "=", "upfirdn2d", ".", "upsample2d", "(", "x", "=", "images", ",", "f", "=", "Hz_geom", ",", "up", "=", "2", ")", "\n", "G_inv", "=", "scale2d", "(", "2", ",", "2", ",", "device", "=", "device", ")", "@", "G_inv", "@", "scale2d_inv", "(", "2", ",", "2", ",", "device", "=", "device", ")", "\n", "G_inv", "=", "translate2d", "(", "-", "0.5", ",", "-", "0.5", ",", "device", "=", "device", ")", "@", "G_inv", "@", "translate2d_inv", "(", "-", "0.5", ",", "-", "0.5", ",", "device", "=", "device", ")", "\n", "\n", "# Execute transformation.", "\n", "shape", "=", "[", "batch_size", ",", "num_channels", ",", "(", "height", "+", "Hz_pad", "*", "2", ")", "*", "2", ",", "(", "width", "+", "Hz_pad", "*", "2", ")", "*", "2", "]", "\n", "G_inv", "=", "scale2d", "(", "2", "/", "images", ".", "shape", "[", "3", "]", ",", "2", "/", "images", ".", "shape", "[", "2", "]", ",", "device", "=", "device", ")", "@", "G_inv", "@", "scale2d_inv", "(", "2", "/", "shape", "[", "3", "]", ",", "2", "/", "shape", "[", "2", "]", ",", "device", "=", "device", ")", "\n", "grid", "=", "torch", ".", "nn", ".", "functional", ".", "affine_grid", "(", "theta", "=", "G_inv", "[", ":", ",", ":", "2", ",", ":", "]", ",", "size", "=", "shape", ",", "align_corners", "=", "False", ")", "\n", "images", "=", "grid_sample_gradfix", ".", "grid_sample", "(", "images", ",", "grid", ")", "\n", "\n", "# Downsample and crop.", "\n", "images", "=", "upfirdn2d", ".", "downsample2d", "(", "x", "=", "images", ",", "f", "=", "Hz_geom", ",", "down", "=", "2", ",", "padding", "=", "-", "Hz_pad", "*", "2", ",", "flip_filter", "=", "True", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_brightness": [[271, 274], ["torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_brightness", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "x", "=", "x", "+", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "-", "0.5", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_saturation": [[276, 280], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "rand_saturation", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "*", "2", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_contrast": [[282, 286], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "rand_contrast", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "+", "0.5", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_translation": [[288, 302], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_translation", "(", "x", ",", "ratio", "=", "0.2", ",", "affine", "=", "None", ")", ":", "\n", "    ", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_translation_1": [[303, 319], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_translation_1", "(", "x", ",", "ratio", "=", "0.1", ",", "affine", "=", "None", ")", ":", "\n", "    ", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_x", "=", "translation_x", "*", "2", "-", "1", "\n", "translation_y", "=", "translation_y", "*", "2", "-", "1", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_strong_translation": [[320, 335], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_strong_translation", "(", "x", ",", "ratio", "=", "0.125", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio", "=", "0.125", "\n", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_cutout": [[337, 359], ["random.random", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_cutout", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "        ", "cutout_size", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_erase": [[360, 385], ["random.randint", "random.randint", "random.random", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_erase", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio_x", "=", "random", ".", "randint", "(", "20", ",", "x", ".", "size", "(", "2", ")", "//", "2", "+", "20", ")", "\n", "ratio_y", "=", "random", ".", "randint", "(", "20", ",", "x", ".", "size", "(", "3", ")", "//", "2", "+", "20", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "#         cutout_size = int(x.size(2) * ratio_x + 0.5), int(x.size(3) * ratio_y + 0.5)", "\n", "        ", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_erase_ratio": [[386, 411], ["random.randint", "random.randint", "int", "int", "int", "int", "random.random", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_erase_ratio", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio_x", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.7", ")", ")", "\n", "ratio_y", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.7", ")", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "#         cutout_size = int(x.size(2) * ratio_x + 0.5), int(x.size(3) * ratio_y + 0.5)", "\n", "        ", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_erase2_ratio": [[412, 457], ["random.randint", "random.randint", "int", "int", "int", "int", "random.random", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_erase2_ratio", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio_x", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.7", ")", ")", "\n", "ratio_y", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.7", ")", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "#         cutout_size = int(x.size(2) * ratio_x + 0.5), int(x.size(3) * ratio_y + 0.5)", "\n", "        ", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "\n", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_rand_erase_ratio": [[458, 477], ["random.randint", "random.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "int", "int", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "mask[].unsqueeze", "x.size", "x.size", "x.size", "int", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "int", "x.size", "x.size", "int", "x.size"], "function", ["None"], ["", "def", "rand_rand_erase_ratio", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio_x", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.7", ")", ")", "\n", "ratio_y", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.7", ")", ")", "\n", "#     if random.random() < 0.3:", "\n", "#         cutout_size = int(x.size(2) * ratio_x + 0.5), int(x.size(3) * ratio_y + 0.5)", "\n", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "[", ":", "int", "(", "x", ".", "size", "(", "0", ")", "*", "0.3", ")", "]", "=", "x", "[", ":", "int", "(", "x", ".", "size", "(", "0", ")", "*", "0.3", ")", "]", "*", "mask", "[", ":", "int", "(", "x", ".", "size", "(", "0", ")", "*", "0.3", ")", "]", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_cutmix": [[478, 516], ["torch.randperm().cuda", "torch.randperm().cuda", "diff_aug.rand_cutmix.rand_bbox"], "function", ["None"], ["", "def", "rand_cutmix", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "def", "rand_bbox", "(", "size", ",", "lam", ")", ":", "\n", "        ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "lam", "\n", "cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "#         if random.random()<0.5:", "\n", "#             cx = 0", "\n", "#         else:", "\n", "#             cx = int(W*0.6)", "\n", "#         if random.random()<0.5:", "\n", "#             cy = 0", "\n", "#         else:", "\n", "#             cy = int(H*0.6)", "\n", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n", "", "lam", "=", "0.45", "+", "0.1", "*", "random", ".", "random", "(", ")", "\n", "rand_index", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "#     for i in range(10000):", "\n", "#         if rand_index[0].item() == 0:", "\n", "#             rand_index = torch.randperm(x.size()[0]).cuda()", "\n", "#         else:", "\n", "#             break", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "rand_bbox", "(", "x", ".", "size", "(", ")", ",", "lam", ")", "\n", "x", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "x", "[", "rand_index", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.rand_rotate": [[547, 552], ["random.randint", "random.random", "torch.rot90", "torch.rot90"], "function", ["None"], ["", "def", "rand_rotate", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "k", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "ratio", ":", "\n", "        ", "x", "=", "torch", ".", "rot90", "(", "x", ",", "k", ",", "[", "2", ",", "3", "]", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.matmul.__init__": [[35, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.matmul.forward": [[38, 41], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.PixelNorm.__init__": [[48, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.PixelNorm.forward": [[51, 53], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.CustomAct.__init__": [[66, 72], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.CustomAct.forward": [[73, 75], ["ViT_custom_scale2.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Mlp.__init__": [[77, 85], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ViT_custom_scale2.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Mlp.forward": [[86, 93], ["ViT_custom_scale2.Mlp.fc1", "ViT_custom_scale2.Mlp.act", "ViT_custom_scale2.Mlp.drop", "ViT_custom_scale2.Mlp.fc2", "ViT_custom_scale2.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Attention.__init__": [[96, 126], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT_custom_scale2.matmul", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_custom_scale2.Attention.register_buffer", "models_search.ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Attention.forward": [[127, 144], ["ViT_custom_scale2.Attention.qkv().reshape().permute", "ViT_custom_scale2.Attention.softmax", "ViT_custom_scale2.Attention.attn_drop", "ViT_custom_scale2.Attention.mat().transpose().reshape", "ViT_custom_scale2.Attention.proj", "ViT_custom_scale2.Attention.proj_drop", "ViT_custom_scale2.Attention.mat", "ViT_custom_scale2.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "ViT_custom_scale2.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "ViT_custom_scale2.Attention.mat().transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "ViT_custom_scale2.Attention.qkv", "ViT_custom_scale2.Attention.mat", "ViT_custom_scale2.Attention.relative_position_index.view().clone", "ViT_custom_scale2.Attention.relative_position_index.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.CustomNorm.__init__": [[146, 157], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom_scale2.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.CustomNorm.forward": [[158, 166], ["ViT_custom_scale2.CustomNorm.norm().permute", "ViT_custom_scale2.CustomNorm.norm", "ViT_custom_scale2.CustomNorm.norm", "ViT_custom_scale2.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Block.__init__": [[201, 212], ["torch.Module.__init__", "ViT_custom_scale2.CustomNorm", "ViT_custom_scale2.Attention", "ViT_custom_scale2.CustomNorm", "int", "ViT_custom_scale2.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Block.forward": [[213, 217], ["ViT_custom_scale2.Block.drop_path", "ViT_custom_scale2.Block.drop_path", "ViT_custom_scale2.Block.attn", "ViT_custom_scale2.Block.mlp", "ViT_custom_scale2.Block.norm1", "ViT_custom_scale2.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.StageBlock.__init__": [[220, 236], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ViT_custom_scale2.Block", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.StageBlock.forward": [[237, 241], ["blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "block", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Generator.__init__": [[254, 328], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom_scale2.StageBlock", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_scale2.StageBlock", "ViT_custom_scale2.StageBlock"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", ",", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "tRGB_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "4", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "16", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Generator._init_weights": [[330, 344], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Generator.set_arch": [[345, 347], ["None"], "methods", ["None"], ["", "", "def", "set_arch", "(", "self", ",", "x", ",", "cur_stage", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Generator.forward": [[348, 368], ["ViT_custom_scale2.Generator.l1().view", "ViT_custom_scale2.Generator.size", "ViT_custom_scale2.Generator.blocks", "ViT_custom_scale2.Generator.tRGB_1", "ViT_custom_scale2.pixel_upsample", "ViT_custom_scale2.Generator.tRGB_2", "ViT_custom_scale2.pixel_upsample", "ViT_custom_scale2.Generator.tRGB_3", "ViT_custom_scale2.Generator.pos_embed[].to", "ViT_custom_scale2.Generator.permute().view", "ViT_custom_scale2.Generator.pos_embed[].to", "ViT_custom_scale2.Generator.permute().view", "ViT_custom_scale2.Generator.pos_embed[].to", "ViT_custom_scale2.Generator.permute().view", "ViT_custom_scale2.Generator.l1", "ViT_custom_scale2.Generator.get_device", "ViT_custom_scale2.Generator.get_device", "ViT_custom_scale2.Generator.get_device", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ViT_custom_scale2.Generator.permute", "ViT_custom_scale2.Generator.permute", "ViT_custom_scale2.Generator.permute"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "\n", "x_1", "=", "self", ".", "tRGB_1", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "0", "]", "(", "x", ")", "\n", "\n", "x_2", "=", "self", ".", "tRGB_2", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "4", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "1", "]", "(", "x", ")", "\n", "\n", "x_3", "=", "self", ".", "tRGB_3", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "16", ",", "H", ",", "W", ")", ")", "\n", "output", "=", "F", ".", "interpolate", "(", "x_1", ",", "scale_factor", "=", "4", ")", "+", "F", ".", "interpolate", "(", "x_2", ",", "scale_factor", "=", "2", ")", "+", "x_3", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.SpaceToDepth.__init__": [[375, 379], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "block_size", "in", "{", "2", ",", "4", "}", ",", "\"Space2Depth only supports blocks size = 4 or 2\"", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.SpaceToDepth.forward": [[380, 387], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "S", "=", "self", ".", "block_size", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "S", ",", "S", ",", "W", "//", "S", ",", "S", ")", "# (N, C, H//bs, bs, W//bs, bs)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# (N, bs, bs, C, H//bs, W//bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "S", "*", "S", ",", "H", "//", "S", ",", "W", "//", "S", ")", "# (N, C*bs^2, H//bs, W//bs)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.DisBlock.__init__": [[390, 402], ["torch.Module.__init__", "ViT_custom_scale2.CustomNorm", "ViT_custom_scale2.Attention", "ViT_custom_scale2.CustomNorm", "int", "ViT_custom_scale2.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.DisBlock.forward": [[403, 407], ["ViT_custom_scale2.DisBlock.drop_path", "ViT_custom_scale2.DisBlock.drop_path", "ViT_custom_scale2.DisBlock.attn", "ViT_custom_scale2.DisBlock.mlp", "ViT_custom_scale2.DisBlock.norm1", "ViT_custom_scale2.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Discriminator.__init__": [[410, 486], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_scale2.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "ViT_custom_scale2.Discriminator.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "ViT_custom_scale2.DisBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.asarray", "numpy.eye", "range", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ViT_custom_scale2.Discriminator.register_buffer", "ViT_custom_scale2.Discriminator.register_buffer", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_scale2.DisBlock", "ViT_custom_scale2.DisBlock", "numpy.convolve", "numpy.convolve", "scipy.signal.convolve", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch_utils.ops.upfirdn2d.setup_filter", "range", "range", "numpy.arange", "numpy.dstack().reshape", "numpy.dstack", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "patch_size", "=", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "self", ".", "window_size", "=", "args", ".", "d_window_size", "\n", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", "*", "3", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "patch_size", "*", "2", ",", "stride", "=", "patch_size", "*", "2", ",", "padding", "=", "0", ")", "\n", "#         self.fRGB_4 = nn.Conv2d(3, embed_dim//2, kernel_size=patch_size, stride=patch_size, padding=0)", "\n", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "#         num_patches_4 = ((args.img_size//8) // patch_size)**2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "4", "*", "3", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", ")", ")", "\n", "#         self.pos_embed_4 = nn.Parameter(torch.zeros(1, num_patches_4, embed_dim))", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", "*", "3", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "args", ".", "bottom_width", "*", "4", "//", "2", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "args", ".", "bottom_width", "*", "4", "//", "4", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "0", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "#         trunc_normal_(self.pos_embed_4, std=.02)", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "if", "'filter'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "Hz_lo", "=", "np", ".", "asarray", "(", "wavelets", "[", "'sym2'", "]", ")", "# H(z)", "\n", "Hz_hi", "=", "Hz_lo", "*", "(", "(", "-", "1", ")", "**", "np", ".", "arange", "(", "Hz_lo", ".", "size", ")", ")", "# H(-z)", "\n", "Hz_lo2", "=", "np", ".", "convolve", "(", "Hz_lo", ",", "Hz_lo", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(z) * H(z^-1) / 2", "\n", "Hz_hi2", "=", "np", ".", "convolve", "(", "Hz_hi", ",", "Hz_hi", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(-z) * H(-z^-1) / 2", "\n", "Hz_fbank", "=", "np", ".", "eye", "(", "4", ",", "1", ")", "# Bandpass(H(z), b_i)", "\n", "for", "i", "in", "range", "(", "1", ",", "Hz_fbank", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Hz_fbank", "=", "np", ".", "dstack", "(", "[", "Hz_fbank", ",", "np", ".", "zeros_like", "(", "Hz_fbank", ")", "]", ")", ".", "reshape", "(", "Hz_fbank", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Hz_fbank", "=", "scipy", ".", "signal", ".", "convolve", "(", "Hz_fbank", ",", "[", "Hz_lo2", "]", ")", "\n", "Hz_fbank", "[", "i", ",", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "-", "Hz_hi2", ".", "size", ")", "//", "2", ":", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "+", "Hz_hi2", ".", "size", ")", "//", "2", "]", "+=", "Hz_hi2", "\n", "", "Hz_fbank", "=", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "register_buffer", "(", "'Hz_fbank'", ",", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_fbank", "=", "None", "\n", "", "if", "'geo'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'Hz_geom'", ",", "upfirdn2d", ".", "setup_filter", "(", "wavelets", "[", "'sym6'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_geom", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Discriminator._init_weights": [[487, 495], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Discriminator.forward_features": [[497, 537], ["blk.size", "ViT_custom_scale2.Discriminator.fRGB_1().flatten().permute", "ViT_custom_scale2.Discriminator.fRGB_2().flatten().permute", "blk.size", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_scale2.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_scale2.Discriminator.last_block", "ViT_custom_scale2.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "ViT_custom_scale2.Discriminator.fRGB_1().flatten", "ViT_custom_scale2.Discriminator.fRGB_2().flatten", "blk.permute", "blk.flatten", "ViT_custom_scale2.Discriminator.fRGB_1", "ViT_custom_scale2.Discriminator.fRGB_2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.DiffAugment"], ["", "", "def", "forward_features", "(", "self", ",", "x", ",", "aug", "=", "True", ",", "epoch", "=", "400", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", "and", "aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ",", "[", "self", ".", "Hz_geom", ",", "self", ".", "Hz_fbank", "]", ")", "\n", "#         with torch.no_grad():", "\n", "#             save_image(x.clone(), f'in_{self.args.rank}.png', nrow=4, padding=1, normalize=True, scale_each=True)", "\n", "#         import time", "\n", "#         time.sleep(5)", "\n", "", "B", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "H", "=", "W", "=", "H", "//", "self", ".", "patch_size", "\n", "\n", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#         x_4 = self.fRGB_4(nn.AvgPool2d(8)(x)).flatten(2).permute(0,2,1)", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.Discriminator.forward": [[538, 542], ["ViT_custom_scale2.Discriminator.forward_features", "ViT_custom_scale2.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "aug", "=", "True", ",", "epoch", "=", "400", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ",", "aug", "=", "aug", ",", "epoch", "=", "epoch", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.count_matmul": [[42, 46], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.gelu": [[54, 61], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.leakyrelu": [[62, 64], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.window_partition": [[169, 181], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.window_reverse": [[183, 197], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2.pixel_upsample": [[242, 252], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_scale2._downsample": [[370, 373], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.matmul.__init__": [[28, 30], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.matmul.forward": [[31, 34], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.PixelNorm.__init__": [[40, 42], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.PixelNorm.forward": [[42, 44], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "", "", "def", "gelu", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.CustomAct.__init__": [[54, 60], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.CustomAct.forward": [[61, 63], ["ViT_custom_local544444_256_rp.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Mlp.__init__": [[65, 73], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ViT_custom_local544444_256_rp.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Mlp.forward": [[73, 80], ["ViT_custom_local544444_256_rp.Mlp.fc1", "ViT_custom_local544444_256_rp.Mlp.act", "ViT_custom_local544444_256_rp.Mlp.drop", "ViT_custom_local544444_256_rp.Mlp.fc2", "ViT_custom_local544444_256_rp.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Attention.__init__": [[84, 114], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT_custom_local544444_256_rp.matmul", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_custom_local544444_256_rp.Attention.register_buffer", "ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Attention.forward": [[115, 131], ["ViT_custom_local544444_256_rp.Attention.qkv().reshape().permute", "ViT_custom_local544444_256_rp.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "ViT_custom_local544444_256_rp.Attention.softmax", "ViT_custom_local544444_256_rp.Attention.attn_drop", "ViT_custom_local544444_256_rp.Attention.mat().transpose().reshape", "ViT_custom_local544444_256_rp.Attention.proj", "ViT_custom_local544444_256_rp.Attention.proj_drop", "ViT_custom_local544444_256_rp.Attention.mat", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "ViT_custom_local544444_256_rp.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "ViT_custom_local544444_256_rp.Attention.mat().transpose", "ViT_custom_local544444_256_rp.Attention.qkv", "ViT_custom_local544444_256_rp.Attention.relative_position_index.view", "ViT_custom_local544444_256_rp.Attention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.CustomNorm.__init__": [[135, 146], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom_local544444_256_rp.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.CustomNorm.forward": [[147, 155], ["ViT_custom_local544444_256_rp.CustomNorm.norm().permute", "ViT_custom_local544444_256_rp.CustomNorm.norm", "ViT_custom_local544444_256_rp.CustomNorm.norm", "ViT_custom_local544444_256_rp.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Block.__init__": [[157, 168], ["torch.Module.__init__", "ViT_custom_local544444_256_rp.CustomNorm", "ViT_custom_local544444_256_rp.Attention", "ViT_custom_local544444_256_rp.CustomNorm", "int", "ViT_custom_local544444_256_rp.Mlp", "ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Block.forward": [[168, 172], ["ViT_custom_local544444_256_rp.Block.drop_path", "ViT_custom_local544444_256_rp.Block.drop_path", "ViT_custom_local544444_256_rp.Block.attn", "ViT_custom_local544444_256_rp.Block.mlp", "ViT_custom_local544444_256_rp.Block.norm1", "ViT_custom_local544444_256_rp.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.StageBlock.__init__": [[174, 191], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_local544444_256_rp.Block", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "models", "=", "[", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "window_size", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "models", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.StageBlock.forward": [[191, 198], ["ViT_custom_local544444_256_rp.StageBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#         for blk in self.block:", "\n", "#             # x = blk(x)", "\n", "#             checkpoint.checkpoint(blk, x)", "\n", "#         x = checkpoint.checkpoint(self.block, x)", "\n", "        ", "x", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "x", "\n", "", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Generator.__init__": [[247, 379], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_local544444_256_rp.Discriminator", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "256", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "8", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "1024", "\n", "self", ".", "window_size", "=", "16", "\n", "norm_layer", "=", "'pn'", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "'5,4,4,4,4,4'", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "\"gelu\"", "\n", "self", ".", "l2_size", "=", "0", "\n", "\n", "if", "self", ".", "l2_size", "==", "0", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "512", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "", "elif", "self", ".", "l2_size", ">", "1000", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "512", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", "//", "16", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", "//", "16", ",", "self", ".", "l2_size", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "512", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", "", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "8", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_5", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "16", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed_6", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "32", ")", "**", "2", ",", "embed_dim", "//", "64", ")", ")", "\n", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", ",", "\n", "self", ".", "pos_embed_4", ",", "\n", "self", ".", "pos_embed_5", ",", "\n", "self", ".", "pos_embed_6", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "8", "\n", ")", "\n", "self", ".", "blocks_2", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "16", "\n", ")", "\n", "self", ".", "blocks_3", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "32", "\n", ")", "\n", "self", ".", "blocks_4", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "3", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_5", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "4", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_6", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "5", "]", ",", "\n", "dim", "=", "embed_dim", "//", "64", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "64", ",", "3", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "encoder", "=", "Discriminator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Generator.forward": [[400, 455], ["ViT_custom_local544444_256_rp.Generator.encoder", "window_reverse().view().permute.size", "ViT_custom_local544444_256_rp.Generator.blocks_1", "ViT_custom_local544444_256_rp.bicubic_upsample", "window_reverse().view().permute.size", "ViT_custom_local544444_256_rp.Generator.blocks_2", "ViT_custom_local544444_256_rp.bicubic_upsample", "window_reverse().view().permute.size", "ViT_custom_local544444_256_rp.Generator.blocks_3", "ViT_custom_local544444_256_rp.pixel_upsample", "window_reverse().view().permute.size", "window_reverse().view().permute.view", "ViT_custom_local544444_256_rp.window_partition", "window_reverse().view().permute.view", "ViT_custom_local544444_256_rp.Generator.blocks_4", "window_reverse().view().permute.view", "window_reverse().view", "ViT_custom_local544444_256_rp.pixel_upsample", "window_reverse().view().permute.size", "window_reverse().view().permute.view", "ViT_custom_local544444_256_rp.window_partition", "window_reverse().view().permute.view", "ViT_custom_local544444_256_rp.Generator.blocks_5", "window_reverse().view().permute.view", "window_reverse().view", "ViT_custom_local544444_256_rp.pixel_upsample", "window_reverse().view().permute.size", "window_reverse().view().permute.view", "ViT_custom_local544444_256_rp.window_partition", "window_reverse().view().permute.view", "ViT_custom_local544444_256_rp.Generator.blocks_6", "window_reverse().view().permute.view", "window_reverse().view().permute", "ViT_custom_local544444_256_rp.Generator.deconv", "ViT_custom_local544444_256_rp.window_reverse", "ViT_custom_local544444_256_rp.window_reverse", "window_reverse().view", "ViT_custom_local544444_256_rp.window_reverse"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.bicubic_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.bicubic_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "\n", "# x = self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)", "\n", "#### encoder", "\n", "        ", "x", ",", "_", "=", "self", ".", "encoder", "(", "z", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", "\n", "B", "=", "x", ".", "size", "(", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks_1", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "blocks_2", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "blocks_3", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "3", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_4", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "4", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_5", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "5", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_6", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "\n", "output", "=", "self", ".", "deconv", "(", "x", ")", "\n", "# print(output.shape)", "\n", "return", "output", ",", "x", "\n", "", "", "def", "_downsample", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.DisBlock.__init__": [[461, 473], ["torch.Module.__init__", "ViT_custom_local544444_256_rp.CustomNorm", "ViT_custom_local544444_256_rp.Attention", "ViT_custom_local544444_256_rp.CustomNorm", "int", "ViT_custom_local544444_256_rp.Mlp", "ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.DisBlock.forward": [[474, 478], ["ViT_custom_local544444_256_rp.DisBlock.drop_path", "ViT_custom_local544444_256_rp.DisBlock.drop_path", "ViT_custom_local544444_256_rp.DisBlock.attn", "ViT_custom_local544444_256_rp.DisBlock.mlp", "ViT_custom_local544444_256_rp.DisBlock.norm1", "ViT_custom_local544444_256_rp.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Discriminator.__init__": [[481, 572], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_local544444_256_rp.CustomNorm", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_custom_local544444_256_rp.Discriminator.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "ViT_custom_local544444_256_rp.DisBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.asarray", "numpy.eye", "range", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ViT_custom_local544444_256_rp.Discriminator.register_buffer", "ViT_custom_local544444_256_rp.Discriminator.register_buffer", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_local544444_256_rp.DisBlock", "ViT_custom_local544444_256_rp.DisBlock", "ViT_custom_local544444_256_rp.DisBlock", "ViT_custom_local544444_256_rp.DisBlock", "numpy.convolve", "numpy.convolve", "scipy.signal.convolve", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "upfirdn2d.setup_filter", "range", "range", "range", "range", "numpy.arange", "numpy.dstack().reshape", "numpy.dstack", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "32", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "1024", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "\n", "\n", "depth", "=", "7", "\n", "self", ".", "patch_size", "=", "4", "\n", "norm_layer", "=", "'ln'", "\n", "self", ".", "window_size", "=", "8", "\n", "\n", "act_layer", "=", "\"gelu\"", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", "*", "3", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", "*", "2", ",", "stride", "=", "patch_size", "*", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_3", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", "*", "4", ",", "stride", "=", "patch_size", "*", "4", ",", "padding", "=", "0", ")", "\n", "#         self.fRGB_4 = nn.Conv2d(3, embed_dim//2, kernel_size=patch_size, stride=patch_size, padding=0)", "\n", "img_size", "=", "256", "\n", "num_patches_1", "=", "(", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_3", "=", "(", "(", "img_size", "//", "4", ")", "//", "patch_size", ")", "**", "2", "\n", "#         num_patches_4 = ((args.img_size//8) // patch_size)**2", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "4", "*", "3", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", "//", "8", "*", "7", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_3", ",", "embed_dim", ")", ")", "\n", "#         self.pos_embed_4 = nn.Parameter(torch.zeros(1, num_patches_4, embed_dim))", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", "*", "3", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", ")", "\n", "for", "i", "in", "range", "(", "depth", "-", "1", ")", "]", ")", "\n", "self", ".", "blocks_11", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", "*", "3", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "64", ")", "\n", "for", "i", "in", "range", "(", "1", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "8", "*", "7", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "32", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_3", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "16", ")", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", "]", ")", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "0", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_3", ",", "std", "=", ".02", ")", "\n", "#         trunc_normal_(self.pos_embed_4, std=.02)", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "diff_aug", "=", "'None'", "\n", "if", "'filter'", "in", "self", ".", "diff_aug", ":", "\n", "            ", "Hz_lo", "=", "np", ".", "asarray", "(", "wavelets", "[", "'sym2'", "]", ")", "# H(z)", "\n", "Hz_hi", "=", "Hz_lo", "*", "(", "(", "-", "1", ")", "**", "np", ".", "arange", "(", "Hz_lo", ".", "size", ")", ")", "# H(-z)", "\n", "Hz_lo2", "=", "np", ".", "convolve", "(", "Hz_lo", ",", "Hz_lo", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(z) * H(z^-1) / 2", "\n", "Hz_hi2", "=", "np", ".", "convolve", "(", "Hz_hi", ",", "Hz_hi", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(-z) * H(-z^-1) / 2", "\n", "Hz_fbank", "=", "np", ".", "eye", "(", "4", ",", "1", ")", "# Bandpass(H(z), b_i)", "\n", "for", "i", "in", "range", "(", "1", ",", "Hz_fbank", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Hz_fbank", "=", "np", ".", "dstack", "(", "[", "Hz_fbank", ",", "np", ".", "zeros_like", "(", "Hz_fbank", ")", "]", ")", ".", "reshape", "(", "Hz_fbank", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Hz_fbank", "=", "scipy", ".", "signal", ".", "convolve", "(", "Hz_fbank", ",", "[", "Hz_lo2", "]", ")", "\n", "Hz_fbank", "[", "i", ",", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "-", "Hz_hi2", ".", "size", ")", "//", "2", ":", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "+", "Hz_hi2", ".", "size", ")", "//", "2", "]", "+=", "Hz_hi2", "\n", "", "Hz_fbank", "=", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "register_buffer", "(", "'Hz_fbank'", ",", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_fbank", "=", "None", "\n", "", "if", "'geo'", "in", "self", ".", "diff_aug", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'Hz_geom'", ",", "upfirdn2d", ".", "setup_filter", "(", "wavelets", "[", "'sym6'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_geom", "=", "None", "\n", "", "self", ".", "featlay", "=", "nn", ".", "Conv2d", "(", "128", ",", "1024", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Discriminator._init_weights": [[573, 581], ["isinstance", "ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Discriminator.forward_features": [[582, 661], ["blk.size", "ViT_custom_local544444_256_rp.Discriminator.fRGB_1().flatten().permute", "ViT_custom_local544444_256_rp.Discriminator.fRGB_2().flatten().permute", "ViT_custom_local544444_256_rp.Discriminator.fRGB_3().flatten().permute", "blk.size", "blk.view", "ViT_custom_local544444_256_rp.window_partition", "blk.view", "blk.view", "window_reverse().view", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.permute().view.view().permute", "diff_aug.DiffAugment", "blk", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "ViT_custom_local544444_256_rp.Discriminator.fRGB_1().flatten", "ViT_custom_local544444_256_rp.Discriminator.fRGB_2().flatten", "ViT_custom_local544444_256_rp.Discriminator.fRGB_3().flatten", "ViT_custom_local544444_256_rp.window_reverse", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "blk.permute", "blk.permute().view.view", "ViT_custom_local544444_256_rp.Discriminator.fRGB_1", "ViT_custom_local544444_256_rp.Discriminator.fRGB_2", "ViT_custom_local544444_256_rp.Discriminator.fRGB_3"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "diff_aug", ",", "True", ",", "[", "self", ".", "Hz_geom", ",", "self", ".", "Hz_fbank", "]", ")", "\n", "#         with torch.no_grad():", "\n", "#             save_image(x.clone(), f'in_{self.args.rank}.png', nrow=4, padding=1, normalize=True, scale_each=True)", "\n", "#         import time", "\n", "#         time.sleep(10)", "\n", "", "B", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "H", "=", "W", "=", "H", "//", "self", ".", "patch_size", "\n", "\n", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_3", "=", "self", ".", "fRGB_3", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#         x_4 = self.fRGB_4(nn.AvgPool2d(8)(x)).flatten(2).permute(0,2,1)", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_11", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "#         print(x.shape)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# print(x.shape)", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_3", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_3", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "# #         x = SpaceToDepth(2)(x)", "\n", "x_", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x_", ")", "\n", "# print(x_.shape)", "\n", "\n", "# feat = self.featlay(x_)", "\n", "# feat = feat.view(1, 1024, -1).permute(0, 2, 1)", "\n", "feat", "=", "x_", ".", "view", "(", "1", ",", "1024", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# print(feat.shape)", "\n", "\n", "# _, _, H, W = x.shape", "\n", "#         x = x.flatten(2).permute(0, 2, 1)", "\n", "#         x = torch.cat([x, x_4], dim=-1)", "\n", "#         x = x + self.pos_embed_4", "\n", "\n", "#         for blk in self.blocks_4:", "\n", "#             x = blk(x)", "\n", "\n", "# cls_tokens = self.cls_token.expand(B, -1, -1)", "\n", "# x = torch.cat((cls_tokens, x), dim=1)", "\n", "#", "\n", "# x = self.last_block(x)", "\n", "# x = self.norm(x)", "\n", "return", "feat", ",", "x", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.Discriminator.forward": [[661, 666], ["ViT_custom_local544444_256_rp.Discriminator.forward_features"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", ",", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "# feat=x", "\n", "# x = self.head(x)", "\n", "return", "feat", ",", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.count_matmul": [[34, 38], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.gelu": [[44, 51], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "", "def", "leakyrelu", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.leakyrelu": [[51, 53], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "", "class", "CustomAct", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.pixel_upsample": [[198, 208], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.bicubic_upsample": [[209, 219], ["x.permute.size", "x.permute.permute", "x.permute.view", "torch.functional.interpolate", "x.permute.size", "x.permute.view", "x.permute.permute"], "function", ["None"], ["", "def", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bicubic'", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.window_partition": [[220, 232], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp.window_reverse": [[232, 246], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp._downsample": [[455, 458], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.matmul.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.matmul.forward": [[14, 17], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.PixelNorm.__init__": [[23, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.PixelNorm.forward": [[25, 27], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "", "", "def", "gelu", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.CustomAct.__init__": [[37, 43], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.CustomAct.forward": [[44, 46], ["ViT_custom_local544444_256_rp_noise.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Mlp.__init__": [[48, 58], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ViT_custom_local544444_256_rp_noise.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "self", ".", "noise_strength_1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "self", ".", "noise_strength_2", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Mlp.forward": [[58, 67], ["ViT_custom_local544444_256_rp_noise.Mlp.fc1", "ViT_custom_local544444_256_rp_noise.Mlp.act", "ViT_custom_local544444_256_rp_noise.Mlp.drop", "ViT_custom_local544444_256_rp_noise.Mlp.fc2", "ViT_custom_local544444_256_rp_noise.Mlp.drop", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "ViT_custom_local544444_256_rp_noise.Mlp.size", "ViT_custom_local544444_256_rp_noise.Mlp.size", "ViT_custom_local544444_256_rp_noise.Mlp.size", "ViT_custom_local544444_256_rp_noise.Mlp.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "x", "+", "torch", ".", "randn", "(", "[", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "*", "self", ".", "noise_strength_1", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "x", "+", "torch", ".", "randn", "(", "[", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "*", "self", ".", "noise_strength_2", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Attention.__init__": [[71, 101], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT_custom_local544444_256_rp_noise.matmul", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_custom_local544444_256_rp_noise.Attention.register_buffer", "ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Attention.forward": [[102, 118], ["ViT_custom_local544444_256_rp_noise.Attention.qkv().reshape().permute", "ViT_custom_local544444_256_rp_noise.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "ViT_custom_local544444_256_rp_noise.Attention.softmax", "ViT_custom_local544444_256_rp_noise.Attention.attn_drop", "ViT_custom_local544444_256_rp_noise.Attention.mat().transpose().reshape", "ViT_custom_local544444_256_rp_noise.Attention.proj", "ViT_custom_local544444_256_rp_noise.Attention.proj_drop", "ViT_custom_local544444_256_rp_noise.Attention.mat", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "ViT_custom_local544444_256_rp_noise.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "ViT_custom_local544444_256_rp_noise.Attention.mat().transpose", "ViT_custom_local544444_256_rp_noise.Attention.qkv", "ViT_custom_local544444_256_rp_noise.Attention.relative_position_index.view", "ViT_custom_local544444_256_rp_noise.Attention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.CustomNorm.__init__": [[122, 133], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom_local544444_256_rp_noise.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.CustomNorm.forward": [[134, 142], ["ViT_custom_local544444_256_rp_noise.CustomNorm.norm().permute", "ViT_custom_local544444_256_rp_noise.CustomNorm.norm", "ViT_custom_local544444_256_rp_noise.CustomNorm.norm", "ViT_custom_local544444_256_rp_noise.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Block.__init__": [[144, 155], ["torch.Module.__init__", "ViT_custom_local544444_256_rp_noise.CustomNorm", "ViT_custom_local544444_256_rp_noise.Attention", "ViT_custom_local544444_256_rp_noise.CustomNorm", "int", "ViT_custom_local544444_256_rp_noise.Mlp", "ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Block.forward": [[155, 159], ["ViT_custom_local544444_256_rp_noise.Block.drop_path", "ViT_custom_local544444_256_rp_noise.Block.drop_path", "ViT_custom_local544444_256_rp_noise.Block.attn", "ViT_custom_local544444_256_rp_noise.Block.mlp", "ViT_custom_local544444_256_rp_noise.Block.norm1", "ViT_custom_local544444_256_rp_noise.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.StageBlock.__init__": [[161, 178], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_local544444_256_rp_noise.Block", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "models", "=", "[", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "window_size", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "models", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.StageBlock.forward": [[178, 185], ["ViT_custom_local544444_256_rp_noise.StageBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#         for blk in self.block:", "\n", "#             # x = blk(x)", "\n", "#             checkpoint.checkpoint(blk, x)", "\n", "#         x = checkpoint.checkpoint(self.block, x)", "\n", "        ", "x", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "x", "\n", "", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Generator.__init__": [[234, 365], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "4", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "window_size", "=", "8", "\n", "norm_layer", "=", "8", "\n", "mlp_ratio", "=", "4", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "\"5,4,2\"", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "\"gelu\"", "\n", "self", ".", "l2_size", "=", "0", "\n", "\n", "if", "self", ".", "l2_size", "==", "0", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "128", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "", "elif", "self", ".", "l2_size", ">", "1000", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "128", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", "//", "16", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", "//", "16", ",", "self", ".", "l2_size", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "128", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", "", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "8", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_5", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "16", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed_6", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "32", ")", "**", "2", ",", "embed_dim", "//", "64", ")", ")", "\n", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", ",", "\n", "self", ".", "pos_embed_4", ",", "\n", "self", ".", "pos_embed_5", ",", "\n", "self", ".", "pos_embed_6", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "8", "\n", ")", "\n", "self", ".", "blocks_2", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "16", "\n", ")", "\n", "self", ".", "blocks_3", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "32", "\n", ")", "\n", "self", ".", "blocks_4", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "3", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_5", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "4", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_6", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "5", "]", ",", "\n", "dim", "=", "embed_dim", "//", "64", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "64", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Generator.forward": [[386, 450], ["ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.blocks_1", "ViT_custom_local544444_256_rp_noise.bicubic_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.blocks_2", "ViT_custom_local544444_256_rp_noise.bicubic_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.blocks_3", "ViT_custom_local544444_256_rp_noise.pixel_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.window_partition", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.Generator.blocks_4", "ViT_custom_local544444_256_rp_noise.Generator.view", "window_reverse().view", "ViT_custom_local544444_256_rp_noise.pixel_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.window_partition", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.Generator.blocks_5", "ViT_custom_local544444_256_rp_noise.Generator.view", "window_reverse().view", "ViT_custom_local544444_256_rp_noise.pixel_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.window_partition", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.Generator.blocks_6", "ViT_custom_local544444_256_rp_noise.Generator.view", "window_reverse().view().permute", "ViT_custom_local544444_256_rp_noise.Generator.deconv", "ViT_custom_local544444_256_rp_noise.Generator.l1().view", "ViT_custom_local544444_256_rp_noise.Generator.l1().view", "ViT_custom_local544444_256_rp_noise.Generator.l2", "ViT_custom_local544444_256_rp_noise.Generator.l1().view", "ViT_custom_local544444_256_rp_noise.Generator.l2", "ViT_custom_local544444_256_rp_noise.window_reverse", "ViT_custom_local544444_256_rp_noise.window_reverse", "window_reverse().view", "ViT_custom_local544444_256_rp_noise.Generator.l1", "ViT_custom_local544444_256_rp_noise.Generator.l1", "ViT_custom_local544444_256_rp_noise.Generator.l1", "ViT_custom_local544444_256_rp_noise.window_reverse"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.bicubic_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.bicubic_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.l2", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.lpips.__init__.l2", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "# if self.args.latent_norm:", "\n", "#     latent_size = z.size(-1)", "\n", "#     z = (z/z.norm(dim=-1, keepdim=True) * (latent_size ** 0.5))", "\n", "# if self.args.latent_norm:", "\n", "#     latent_size = z.size(-1)", "\n", "#     z = (z/z.norm(dim=-1, keepdim=True) * (latent_size ** 0.5))", "\n", "        ", "if", "self", ".", "l2_size", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "", "elif", "self", ".", "l2_size", ">", "1000", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "l2_size", "//", "16", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "l2_size", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "\n", "", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", "\n", "B", "=", "x", ".", "size", "(", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks_1", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "blocks_2", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "blocks_3", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "3", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_4", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "4", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_5", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "5", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_6", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "\n", "output", "=", "self", ".", "deconv", "(", "x", ")", "\n", "return", "output", "\n", "", "", "def", "_downsample", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.DisBlock.__init__": [[455, 467], ["torch.Module.__init__", "ViT_custom_local544444_256_rp_noise.CustomNorm", "ViT_custom_local544444_256_rp_noise.Attention", "ViT_custom_local544444_256_rp_noise.CustomNorm", "int", "ViT_custom_local544444_256_rp_noise.Mlp", "ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "separate", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.DisBlock.forward": [[468, 472], ["ViT_custom_local544444_256_rp_noise.DisBlock.drop_path", "ViT_custom_local544444_256_rp_noise.DisBlock.drop_path", "ViT_custom_local544444_256_rp_noise.DisBlock.attn", "ViT_custom_local544444_256_rp_noise.DisBlock.mlp", "ViT_custom_local544444_256_rp_noise.DisBlock.norm1", "ViT_custom_local544444_256_rp_noise.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.__init__": [[475, 546], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_local544444_256_rp_noise.CustomNorm", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_helper.trunc_normal_", "ViT_custom_local544444_256_rp_noise.Discriminator.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "ViT_custom_local544444_256_rp_noise.Block", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_local544444_256_rp_noise.DisBlock", "ViT_custom_local544444_256_rp_noise.DisBlock", "ViT_custom_local544444_256_rp_noise.DisBlock", "ViT_custom_local544444_256_rp_noise.DisBlock", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "patch_size", "=", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "self", ".", "window_size", "=", "args", ".", "d_window_size", "\n", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_3", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_4", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "2", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_3", "=", "(", "(", "args", ".", "img_size", "//", "4", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_4", "=", "(", "(", "args", ".", "img_size", "//", "8", ")", "//", "patch_size", ")", "**", "2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "8", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_3", ",", "embed_dim", "//", "2", ")", ")", "\n", "self", ".", "pos_embed_4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_4", ",", "embed_dim", ")", ")", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "8", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_3", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "2", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_4", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_3", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_4", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Discriminator._init_weights": [[547, 555], ["isinstance", "ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.forward_features": [[557, 620], ["ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_1().flatten().permute", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_2().flatten().permute", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_3().flatten().permute", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_4().flatten().permute", "ViT_custom_local544444_256_rp_noise.Discriminator.pos_drop", "blk.size", "blk.view", "ViT_custom_local544444_256_rp_noise.window_partition", "blk.view", "blk.view", "window_reverse().view", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_local544444_256_rp_noise.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_local544444_256_rp_noise.Discriminator.last_block", "ViT_custom_local544444_256_rp_noise.Discriminator.norm", "diff_aug.DiffAugment", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_1().flatten", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_2().flatten", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_3().flatten", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_4().flatten", "ViT_custom_local544444_256_rp_noise.window_reverse", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_1", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_2", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_3", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_4", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ")", "\n", "\n", "", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_3", "=", "self", ".", "fRGB_3", "(", "nn", ".", "AvgPool2d", "(", "4", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_4", "=", "self", ".", "fRGB_4", "(", "nn", ".", "AvgPool2d", "(", "8", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "H", "=", "W", "=", "self", ".", "args", ".", "img_size", "//", "self", ".", "patch_size", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_3", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_3", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_4", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_4", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_4", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.forward": [[621, 625], ["ViT_custom_local544444_256_rp_noise.Discriminator.forward_features", "ViT_custom_local544444_256_rp_noise.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.count_matmul": [[17, 21], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.gelu": [[27, 34], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "", "def", "leakyrelu", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.leakyrelu": [[34, 36], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "", "class", "CustomAct", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample": [[185, 195], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.bicubic_upsample": [[196, 206], ["x.permute.size", "x.permute.permute", "x.permute.view", "torch.functional.interpolate", "x.permute.size", "x.permute.view", "x.permute.permute"], "function", ["None"], ["", "def", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bicubic'", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_partition": [[207, 219], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise.window_reverse": [[219, 233], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_custom_local544444_256_rp_noise._downsample": [[450, 453], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "", "class", "DisBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.constant": [[6, 26], ["numpy.asarray", "_constant_cache.get", "tuple", "torch.get_default_dtype", "torch.device", "np.asarray.tobytes", "torch.as_tensor", "tensor.contiguous.contiguous", "np.asarray.copy", "torch.broadcast_tensors", "torch.empty"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get"], ["def", "constant", "(", "value", ",", "shape", "=", "None", ",", "dtype", "=", "None", ",", "device", "=", "None", ",", "memory_format", "=", "None", ")", ":", "\n", "    ", "value", "=", "np", ".", "asarray", "(", "value", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "torch", ".", "get_default_dtype", "(", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "if", "memory_format", "is", "None", ":", "\n", "        ", "memory_format", "=", "torch", ".", "contiguous_format", "\n", "\n", "", "key", "=", "(", "value", ".", "shape", ",", "value", ".", "dtype", ",", "value", ".", "tobytes", "(", ")", ",", "shape", ",", "dtype", ",", "device", ",", "memory_format", ")", "\n", "tensor", "=", "_constant_cache", ".", "get", "(", "key", ",", "None", ")", "\n", "if", "tensor", "is", "None", ":", "\n", "        ", "tensor", "=", "torch", ".", "as_tensor", "(", "value", ".", "copy", "(", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "            ", "tensor", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "tensor", ",", "torch", ".", "empty", "(", "shape", ")", ")", "\n", "", "tensor", "=", "tensor", ".", "contiguous", "(", "memory_format", "=", "memory_format", ")", "\n", "_constant_cache", "[", "key", "]", "=", "tensor", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.matrix": [[27, 36], ["all", "torch.stack().reshape", "len", "ada.constant", "isinstance", "numpy.asarray", "isinstance", "ada.constant", "torch.stack", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.constant", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.constant"], ["", "def", "matrix", "(", "*", "rows", ",", "device", "=", "None", ")", ":", "\n", "    ", "assert", "all", "(", "len", "(", "row", ")", "==", "len", "(", "rows", "[", "0", "]", ")", "for", "row", "in", "rows", ")", "\n", "elems", "=", "[", "x", "for", "row", "in", "rows", "for", "x", "in", "row", "]", "\n", "ref", "=", "[", "x", "for", "x", "in", "elems", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "]", "\n", "if", "len", "(", "ref", ")", "==", "0", ":", "\n", "        ", "return", "constant", "(", "np", ".", "asarray", "(", "rows", ")", ",", "device", "=", "device", ")", "\n", "", "assert", "device", "is", "None", "or", "device", "==", "ref", "[", "0", "]", ".", "device", "\n", "elems", "=", "[", "x", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "constant", "(", "x", ",", "shape", "=", "ref", "[", "0", "]", ".", "shape", ",", "device", "=", "ref", "[", "0", "]", ".", "device", ")", "for", "x", "in", "elems", "]", "\n", "return", "torch", ".", "stack", "(", "elems", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "ref", "[", "0", "]", ".", "shape", "+", "(", "len", "(", "rows", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.translate2d": [[37, 43], ["ada.matrix"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.matrix"], ["", "def", "translate2d", "(", "tx", ",", "ty", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "1", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.translate3d": [[44, 51], ["ada.matrix"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.matrix"], ["", "def", "translate3d", "(", "tx", ",", "ty", ",", "tz", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "1", ",", "0", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "tz", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d": [[52, 58], ["ada.matrix"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.matrix"], ["", "def", "scale2d", "(", "sx", ",", "sy", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "sx", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "sy", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale3d": [[59, 66], ["ada.matrix"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.matrix"], ["", "def", "scale3d", "(", "sx", ",", "sy", ",", "sz", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "sx", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "sy", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "sz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.rotate2d": [[67, 73], ["ada.matrix", "torch.cos", "torch.sin", "torch.sin", "torch.cos"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.matrix"], ["", "def", "rotate2d", "(", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "torch", ".", "cos", "(", "theta", ")", ",", "torch", ".", "sin", "(", "-", "theta", ")", ",", "0", "]", ",", "\n", "[", "torch", ".", "sin", "(", "theta", ")", ",", "torch", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.rotate3d": [[74, 83], ["torch.sin", "torch.cos", "ada.matrix"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.matrix"], ["", "def", "rotate3d", "(", "v", ",", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "vx", "=", "v", "[", "...", ",", "0", "]", ";", "vy", "=", "v", "[", "...", ",", "1", "]", ";", "vz", "=", "v", "[", "...", ",", "2", "]", "\n", "s", "=", "torch", ".", "sin", "(", "theta", ")", ";", "c", "=", "torch", ".", "cos", "(", "theta", ")", ";", "cc", "=", "1", "-", "c", "\n", "return", "matrix", "(", "\n", "[", "vx", "*", "vx", "*", "cc", "+", "c", ",", "vx", "*", "vy", "*", "cc", "-", "vz", "*", "s", ",", "vx", "*", "vz", "*", "cc", "+", "vy", "*", "s", ",", "0", "]", ",", "\n", "[", "vy", "*", "vx", "*", "cc", "+", "vz", "*", "s", ",", "vy", "*", "vy", "*", "cc", "+", "c", ",", "vy", "*", "vz", "*", "cc", "-", "vx", "*", "s", ",", "0", "]", ",", "\n", "[", "vz", "*", "vx", "*", "cc", "-", "vy", "*", "s", ",", "vz", "*", "vy", "*", "cc", "+", "vx", "*", "s", ",", "vz", "*", "vz", "*", "cc", "+", "c", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.translate2d_inv": [[84, 86], ["ada.translate2d"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.translate2d"], ["", "def", "translate2d_inv", "(", "tx", ",", "ty", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "translate2d", "(", "-", "tx", ",", "-", "ty", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d_inv": [[87, 89], ["ada.scale2d"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.scale2d"], ["", "def", "scale2d_inv", "(", "sx", ",", "sy", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "scale2d", "(", "1", "/", "sx", ",", "1", "/", "sy", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.rotate2d_inv": [[90, 92], ["ada.rotate2d"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ada.rotate2d"], ["", "def", "rotate2d_inv", "(", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "rotate2d", "(", "-", "theta", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.DropPath.__init__": [[25, 28], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.DropPath.forward": [[29, 31], ["ViT_helper.drop_path"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.drop_path": [[4, 20], ["random_tensor.floor_", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper._ntuple": [[37, 43], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["def", "_ntuple", "(", "n", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "            ", "return", "x", "\n", "", "return", "tuple", "(", "repeat", "(", "x", ",", "n", ")", ")", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper._no_grad_trunc_normal_": [[57, 91], ["warnings.warn", "torch.no_grad", "torch.no_grad", "ViT_helper._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper.trunc_normal_": [[93, 112], ["ViT_helper._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models_search.ViT_helper._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.suppress_tracer_warnings.__enter__": [[70, 74], ["super().__enter__", "warnings.simplefilter"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.suppress_tracer_warnings.__enter__"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__enter__", "(", ")", "\n", "warnings", ".", "simplefilter", "(", "'ignore'", ",", "category", "=", "torch", ".", "jit", ".", "TracerWarning", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.InfiniteSampler.__init__": [[110, 122], ["super().__init__", "len"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "rank", "=", "0", ",", "num_replicas", "=", "1", ",", "shuffle", "=", "True", ",", "seed", "=", "0", ",", "window_size", "=", "0.5", ")", ":", "\n", "        ", "assert", "len", "(", "dataset", ")", ">", "0", "\n", "assert", "num_replicas", ">", "0", "\n", "assert", "0", "<=", "rank", "<", "num_replicas", "\n", "assert", "0", "<=", "window_size", "<=", "1", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.InfiniteSampler.__iter__": [[123, 141], ["numpy.arange", "len", "numpy.random.RandomState", "numpy.random.RandomState.shuffle", "int", "numpy.rint", "numpy.random.RandomState.randint"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "order", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "rnd", "=", "None", "\n", "window", "=", "0", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "rnd", ".", "shuffle", "(", "order", ")", "\n", "window", "=", "int", "(", "np", ".", "rint", "(", "order", ".", "size", "*", "self", ".", "window_size", ")", ")", "\n", "\n", "", "idx", "=", "0", "\n", "while", "True", ":", "\n", "            ", "i", "=", "idx", "%", "order", ".", "size", "\n", "if", "idx", "%", "self", ".", "num_replicas", "==", "self", ".", "rank", ":", "\n", "                ", "yield", "order", "[", "i", "]", "\n", "", "if", "window", ">=", "2", ":", "\n", "                ", "j", "=", "(", "i", "-", "rnd", ".", "randint", "(", "window", ")", ")", "%", "order", ".", "size", "\n", "order", "[", "i", "]", ",", "order", "[", "j", "]", "=", "order", "[", "j", "]", ",", "order", "[", "i", "]", "\n", "", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.constant": [[22, 42], ["numpy.asarray", "_constant_cache.get", "tuple", "torch.get_default_dtype", "torch.device", "np.asarray.tobytes", "torch.as_tensor", "tensor.contiguous.contiguous", "np.asarray.copy", "torch.broadcast_tensors", "torch.empty"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get"], ["def", "constant", "(", "value", ",", "shape", "=", "None", ",", "dtype", "=", "None", ",", "device", "=", "None", ",", "memory_format", "=", "None", ")", ":", "\n", "    ", "value", "=", "np", ".", "asarray", "(", "value", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "torch", ".", "get_default_dtype", "(", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "if", "memory_format", "is", "None", ":", "\n", "        ", "memory_format", "=", "torch", ".", "contiguous_format", "\n", "\n", "", "key", "=", "(", "value", ".", "shape", ",", "value", ".", "dtype", ",", "value", ".", "tobytes", "(", ")", ",", "shape", ",", "dtype", ",", "device", ",", "memory_format", ")", "\n", "tensor", "=", "_constant_cache", ".", "get", "(", "key", ",", "None", ")", "\n", "if", "tensor", "is", "None", ":", "\n", "        ", "tensor", "=", "torch", ".", "as_tensor", "(", "value", ".", "copy", "(", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "            ", "tensor", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "tensor", ",", "torch", ".", "empty", "(", "shape", ")", ")", "\n", "", "tensor", "=", "tensor", ".", "contiguous", "(", "memory_format", "=", "memory_format", ")", "\n", "_constant_cache", "[", "key", "]", "=", "tensor", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.assert_shape": [[80, 94], ["enumerate", "len", "AssertionError", "zip", "isinstance", "isinstance", "len", "misc.suppress_tracer_warnings", "symbolic_assert", "torch.equal", "misc.suppress_tracer_warnings", "symbolic_assert", "AssertionError", "torch.as_tensor", "torch.equal", "torch.as_tensor"], "function", ["None"], ["", "", "def", "assert_shape", "(", "tensor", ",", "ref_shape", ")", ":", "\n", "    ", "if", "tensor", ".", "ndim", "!=", "len", "(", "ref_shape", ")", ":", "\n", "        ", "raise", "AssertionError", "(", "f'Wrong number of dimensions: got {tensor.ndim}, expected {len(ref_shape)}'", ")", "\n", "", "for", "idx", ",", "(", "size", ",", "ref_size", ")", "in", "enumerate", "(", "zip", "(", "tensor", ".", "shape", ",", "ref_shape", ")", ")", ":", "\n", "        ", "if", "ref_size", "is", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "isinstance", "(", "ref_size", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "with", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "                ", "symbolic_assert", "(", "torch", ".", "equal", "(", "torch", ".", "as_tensor", "(", "size", ")", ",", "ref_size", ")", ",", "f'Wrong size for dimension {idx}'", ")", "\n", "", "", "elif", "isinstance", "(", "size", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "with", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "                ", "symbolic_assert", "(", "torch", ".", "equal", "(", "size", ",", "torch", ".", "as_tensor", "(", "ref_size", ")", ")", ",", "f'Wrong size for dimension {idx}: expected {ref_size}'", ")", "\n", "", "", "elif", "size", "!=", "ref_size", ":", "\n", "            ", "raise", "AssertionError", "(", "f'Wrong size for dimension {idx}: got {size}, expected {ref_size}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.profiled_function": [[98, 104], ["torch.autograd.profiler.record_function", "fn"], "function", ["None"], ["", "", "", "def", "profiled_function", "(", "fn", ")", ":", "\n", "    ", "def", "decorator", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "fn", ".", "__name__", ")", ":", "\n", "            ", "return", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "decorator", ".", "__name__", "=", "fn", ".", "__name__", "\n", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.params_and_buffers": [[145, 148], ["isinstance", "list", "list", "module.parameters", "module.buffers"], "function", ["None"], ["", "", "", "def", "params_and_buffers", "(", "module", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "return", "list", "(", "module", ".", "parameters", "(", ")", ")", "+", "list", "(", "module", ".", "buffers", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.named_params_and_buffers": [[149, 152], ["isinstance", "list", "list", "module.named_parameters", "module.named_buffers"], "function", ["None"], ["", "def", "named_params_and_buffers", "(", "module", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "return", "list", "(", "module", ".", "named_parameters", "(", ")", ")", "+", "list", "(", "module", ".", "named_buffers", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.copy_params_and_buffers": [[153, 161], ["isinstance", "isinstance", "misc.named_params_and_buffers", "misc.named_params_and_buffers", "tensor.copy_().requires_grad_", "tensor.copy_", "src_tensors[].detach"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.named_params_and_buffers", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.named_params_and_buffers"], ["", "def", "copy_params_and_buffers", "(", "src_module", ",", "dst_module", ",", "require_all", "=", "False", ")", ":", "\n", "    ", "assert", "isinstance", "(", "src_module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "isinstance", "(", "dst_module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "src_tensors", "=", "{", "name", ":", "tensor", "for", "name", ",", "tensor", "in", "named_params_and_buffers", "(", "src_module", ")", "}", "\n", "for", "name", ",", "tensor", "in", "named_params_and_buffers", "(", "dst_module", ")", ":", "\n", "        ", "assert", "(", "name", "in", "src_tensors", ")", "or", "(", "not", "require_all", ")", "\n", "if", "name", "in", "src_tensors", ":", "\n", "            ", "tensor", ".", "copy_", "(", "src_tensors", "[", "name", "]", ".", "detach", "(", ")", ")", ".", "requires_grad_", "(", "tensor", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.ddp_sync": [[166, 174], ["isinstance", "isinstance", "module.no_sync"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "ddp_sync", "(", "module", ",", "sync", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "if", "sync", "or", "not", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "        ", "yield", "\n", "", "else", ":", "\n", "        ", "with", "module", ".", "no_sync", "(", ")", ":", "\n", "            ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.check_ddp_consistency": [[178, 188], ["isinstance", "misc.named_params_and_buffers", "tensor.detach.detach", "tensor.detach.clone", "torch.distributed.broadcast", "re.fullmatch", "type", "nan_to_num", "nan_to_num"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.named_params_and_buffers"], ["", "", "", "def", "check_ddp_consistency", "(", "module", ",", "ignore_regex", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "for", "name", ",", "tensor", "in", "named_params_and_buffers", "(", "module", ")", ":", "\n", "        ", "fullname", "=", "type", "(", "module", ")", ".", "__name__", "+", "'.'", "+", "name", "\n", "if", "ignore_regex", "is", "not", "None", "and", "re", ".", "fullmatch", "(", "ignore_regex", ",", "fullname", ")", ":", "\n", "            ", "continue", "\n", "", "tensor", "=", "tensor", ".", "detach", "(", ")", "\n", "other", "=", "tensor", ".", "clone", "(", ")", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "tensor", "=", "other", ",", "src", "=", "0", ")", "\n", "assert", "(", "nan_to_num", "(", "tensor", ")", "==", "nan_to_num", "(", "other", ")", ")", ".", "all", "(", ")", ",", "fullname", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.print_module_summary": [[192, 261], ["isinstance", "isinstance", "module", "set", "print", "print", "isinstance", "mod.register_forward_pre_hook", "mod.register_forward_hook", "hook.remove", "sum", "sum", "range", "max", "print", "entries.append", "module.modules", "module.modules", "id", "len", "module.named_modules", "str", "len", "len", "str", "str", "zip", "isinstance", "list", "dnnlib.EasyDict", "e.mod.parameters", "e.mod.buffers", "type", "t.numel", "t.numel", "list", "str().split", "len", "isinstance", "id", "id", "id", "len", "len", "len", "str", "str", "str", "zip", "len", "len"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "", "def", "print_module_summary", "(", "module", ",", "inputs", ",", "max_nesting", "=", "3", ",", "skip_redundant", "=", "True", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "not", "isinstance", "(", "module", ",", "torch", ".", "jit", ".", "ScriptModule", ")", "\n", "assert", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", "\n", "\n", "# Register hooks.", "\n", "entries", "=", "[", "]", "\n", "nesting", "=", "[", "0", "]", "\n", "def", "pre_hook", "(", "_mod", ",", "_inputs", ")", ":", "\n", "        ", "nesting", "[", "0", "]", "+=", "1", "\n", "", "def", "post_hook", "(", "mod", ",", "_inputs", ",", "outputs", ")", ":", "\n", "        ", "nesting", "[", "0", "]", "-=", "1", "\n", "if", "nesting", "[", "0", "]", "<=", "max_nesting", ":", "\n", "            ", "outputs", "=", "list", "(", "outputs", ")", "if", "isinstance", "(", "outputs", ",", "(", "tuple", ",", "list", ")", ")", "else", "[", "outputs", "]", "\n", "outputs", "=", "[", "t", "for", "t", "in", "outputs", "if", "isinstance", "(", "t", ",", "torch", ".", "Tensor", ")", "]", "\n", "entries", ".", "append", "(", "dnnlib", ".", "EasyDict", "(", "mod", "=", "mod", ",", "outputs", "=", "outputs", ")", ")", "\n", "", "", "hooks", "=", "[", "mod", ".", "register_forward_pre_hook", "(", "pre_hook", ")", "for", "mod", "in", "module", ".", "modules", "(", ")", "]", "\n", "hooks", "+=", "[", "mod", ".", "register_forward_hook", "(", "post_hook", ")", "for", "mod", "in", "module", ".", "modules", "(", ")", "]", "\n", "\n", "# Run module.", "\n", "outputs", "=", "module", "(", "*", "inputs", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "# Identify unique outputs, parameters, and buffers.", "\n", "", "tensors_seen", "=", "set", "(", ")", "\n", "for", "e", "in", "entries", ":", "\n", "        ", "e", ".", "unique_params", "=", "[", "t", "for", "t", "in", "e", ".", "mod", ".", "parameters", "(", ")", "if", "id", "(", "t", ")", "not", "in", "tensors_seen", "]", "\n", "e", ".", "unique_buffers", "=", "[", "t", "for", "t", "in", "e", ".", "mod", ".", "buffers", "(", ")", "if", "id", "(", "t", ")", "not", "in", "tensors_seen", "]", "\n", "e", ".", "unique_outputs", "=", "[", "t", "for", "t", "in", "e", ".", "outputs", "if", "id", "(", "t", ")", "not", "in", "tensors_seen", "]", "\n", "tensors_seen", "|=", "{", "id", "(", "t", ")", "for", "t", "in", "e", ".", "unique_params", "+", "e", ".", "unique_buffers", "+", "e", ".", "unique_outputs", "}", "\n", "\n", "# Filter out redundant entries.", "\n", "", "if", "skip_redundant", ":", "\n", "        ", "entries", "=", "[", "e", "for", "e", "in", "entries", "if", "len", "(", "e", ".", "unique_params", ")", "or", "len", "(", "e", ".", "unique_buffers", ")", "or", "len", "(", "e", ".", "unique_outputs", ")", "]", "\n", "\n", "# Construct table.", "\n", "", "rows", "=", "[", "[", "type", "(", "module", ")", ".", "__name__", ",", "'Parameters'", ",", "'Buffers'", ",", "'Output shape'", ",", "'Datatype'", "]", "]", "\n", "rows", "+=", "[", "[", "'---'", "]", "*", "len", "(", "rows", "[", "0", "]", ")", "]", "\n", "param_total", "=", "0", "\n", "buffer_total", "=", "0", "\n", "submodule_names", "=", "{", "mod", ":", "name", "for", "name", ",", "mod", "in", "module", ".", "named_modules", "(", ")", "}", "\n", "for", "e", "in", "entries", ":", "\n", "        ", "name", "=", "'<top-level>'", "if", "e", ".", "mod", "is", "module", "else", "submodule_names", "[", "e", ".", "mod", "]", "\n", "param_size", "=", "sum", "(", "t", ".", "numel", "(", ")", "for", "t", "in", "e", ".", "unique_params", ")", "\n", "buffer_size", "=", "sum", "(", "t", ".", "numel", "(", ")", "for", "t", "in", "e", ".", "unique_buffers", ")", "\n", "output_shapes", "=", "[", "str", "(", "list", "(", "e", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "for", "t", "in", "e", ".", "outputs", "]", "\n", "output_dtypes", "=", "[", "str", "(", "t", ".", "dtype", ")", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "for", "t", "in", "e", ".", "outputs", "]", "\n", "rows", "+=", "[", "[", "\n", "name", "+", "(", "':0'", "if", "len", "(", "e", ".", "outputs", ")", ">=", "2", "else", "''", ")", ",", "\n", "str", "(", "param_size", ")", "if", "param_size", "else", "'-'", ",", "\n", "str", "(", "buffer_size", ")", "if", "buffer_size", "else", "'-'", ",", "\n", "(", "output_shapes", "+", "[", "'-'", "]", ")", "[", "0", "]", ",", "\n", "(", "output_dtypes", "+", "[", "'-'", "]", ")", "[", "0", "]", ",", "\n", "]", "]", "\n", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "e", ".", "outputs", ")", ")", ":", "\n", "            ", "rows", "+=", "[", "[", "name", "+", "f':{idx}'", ",", "'-'", ",", "'-'", ",", "output_shapes", "[", "idx", "]", ",", "output_dtypes", "[", "idx", "]", "]", "]", "\n", "", "param_total", "+=", "param_size", "\n", "buffer_total", "+=", "buffer_size", "\n", "", "rows", "+=", "[", "[", "'---'", "]", "*", "len", "(", "rows", "[", "0", "]", ")", "]", "\n", "rows", "+=", "[", "[", "'Total'", ",", "str", "(", "param_total", ")", ",", "str", "(", "buffer_total", ")", ",", "'-'", ",", "'-'", "]", "]", "\n", "\n", "# Print table.", "\n", "widths", "=", "[", "max", "(", "len", "(", "cell", ")", "for", "cell", "in", "column", ")", "for", "column", "in", "zip", "(", "*", "rows", ")", "]", "\n", "print", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "        ", "print", "(", "'  '", ".", "join", "(", "cell", "+", "' '", "*", "(", "width", "-", "len", "(", "cell", ")", ")", "for", "cell", ",", "width", "in", "zip", "(", "row", ",", "widths", ")", ")", ")", "\n", "", "print", "(", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.__init__": [[133, 140], ["re.compile", "dict", "dict", "training_stats.Collector.update", "training_stats.Collector._moments.clear"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update"], ["def", "__init__", "(", "self", ",", "regex", "=", "'.*'", ",", "keep_previous", "=", "True", ")", ":", "\n", "        ", "self", ".", "_regex", "=", "re", ".", "compile", "(", "regex", ")", "\n", "self", ".", "_keep_previous", "=", "keep_previous", "\n", "self", ".", "_cumulative", "=", "dict", "(", ")", "\n", "self", ".", "_moments", "=", "dict", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "self", ".", "_moments", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.names": [[141, 146], ["training_stats.Collector._regex.fullmatch"], "methods", ["None"], ["", "def", "names", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the names of all statistics broadcasted so far that\n        match the regular expression specified at construction time.\n        \"\"\"", "\n", "return", "[", "name", "for", "name", "in", "_counters", "if", "self", ".", "_regex", ".", "fullmatch", "(", "name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update": [[147, 169], ["training_stats._sync", "training_stats.Collector._moments.clear", "training_stats.Collector.names", "training_stats.Collector._cumulative[].copy_", "torch.zeros", "float"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats._sync", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.names"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Copies current values of the internal counters to the\n        user-visible state and resets them for the next round.\n\n        If `keep_previous=True` was specified at construction time, the\n        operation is skipped for statistics that have received no scalars\n        since the last update, retaining their previous averages.\n\n        This method performs a number of GPU-to-CPU transfers and one\n        `torch.distributed.all_reduce()`. It is intended to be called\n        periodically in the main training loop, typically once every\n        N training steps.\n        \"\"\"", "\n", "if", "not", "self", ".", "_keep_previous", ":", "\n", "            ", "self", ".", "_moments", ".", "clear", "(", ")", "\n", "", "for", "name", ",", "cumulative", "in", "_sync", "(", "self", ".", "names", "(", ")", ")", ":", "\n", "            ", "if", "name", "not", "in", "self", ".", "_cumulative", ":", "\n", "                ", "self", ".", "_cumulative", "[", "name", "]", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ")", "\n", "", "delta", "=", "cumulative", "-", "self", ".", "_cumulative", "[", "name", "]", "\n", "self", ".", "_cumulative", "[", "name", "]", ".", "copy_", "(", "cumulative", ")", "\n", "if", "float", "(", "delta", "[", "0", "]", ")", "!=", "0", ":", "\n", "                ", "self", ".", "_moments", "[", "name", "]", "=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector._get_delta": [[170, 179], ["training_stats.Collector._regex.fullmatch", "torch.zeros"], "methods", ["None"], ["", "", "", "def", "_get_delta", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the raw moments that were accumulated for the given\n        statistic between the last two calls to `update()`, or zero if\n        no scalars were collected.\n        \"\"\"", "\n", "assert", "self", ".", "_regex", ".", "fullmatch", "(", "name", ")", "\n", "if", "name", "not", "in", "self", ".", "_moments", ":", "\n", "            ", "self", ".", "_moments", "[", "name", "]", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ")", "\n", "", "return", "self", ".", "_moments", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.num": [[180, 187], ["training_stats.Collector._get_delta", "int"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector._get_delta"], ["", "def", "num", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the number of scalars that were accumulated for the given\n        statistic between the last two calls to `update()`, or zero if\n        no scalars were collected.\n        \"\"\"", "\n", "delta", "=", "self", ".", "_get_delta", "(", "name", ")", "\n", "return", "int", "(", "delta", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean": [[188, 197], ["training_stats.Collector._get_delta", "float", "int", "float"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector._get_delta"], ["", "def", "mean", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the mean of the scalars that were accumulated for the\n        given statistic between the last two calls to `update()`, or NaN if\n        no scalars were collected.\n        \"\"\"", "\n", "delta", "=", "self", ".", "_get_delta", "(", "name", ")", "\n", "if", "int", "(", "delta", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "return", "float", "(", "'nan'", ")", "\n", "", "return", "float", "(", "delta", "[", "1", "]", "/", "delta", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.std": [[198, 211], ["training_stats.Collector._get_delta", "float", "float", "numpy.sqrt", "float", "int", "float", "max", "int", "numpy.isfinite", "float", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector._get_delta", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "def", "std", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the standard deviation of the scalars that were\n        accumulated for the given statistic between the last two calls to\n        `update()`, or NaN if no scalars were collected.\n        \"\"\"", "\n", "delta", "=", "self", ".", "_get_delta", "(", "name", ")", "\n", "if", "int", "(", "delta", "[", "0", "]", ")", "==", "0", "or", "not", "np", ".", "isfinite", "(", "float", "(", "delta", "[", "1", "]", ")", ")", ":", "\n", "            ", "return", "float", "(", "'nan'", ")", "\n", "", "if", "int", "(", "delta", "[", "0", "]", ")", "==", "1", ":", "\n", "            ", "return", "float", "(", "0", ")", "\n", "", "mean", "=", "float", "(", "delta", "[", "1", "]", "/", "delta", "[", "0", "]", ")", "\n", "raw_var", "=", "float", "(", "delta", "[", "2", "]", "/", "delta", "[", "0", "]", ")", "\n", "return", "np", ".", "sqrt", "(", "max", "(", "raw_var", "-", "np", ".", "square", "(", "mean", ")", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.as_dict": [[212, 225], ["dnnlib.EasyDict", "training_stats.Collector.names", "dnnlib.EasyDict", "training_stats.Collector.num", "training_stats.Collector.mean", "training_stats.Collector.std"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.names", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.num", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.std"], ["", "def", "as_dict", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the averages accumulated between the last two calls to\n        `update()` as an `dnnlib.EasyDict`. The contents are as follows:\n\n            dnnlib.EasyDict(\n                NAME = dnnlib.EasyDict(num=FLOAT, mean=FLOAT, std=FLOAT),\n                ...\n            )\n        \"\"\"", "\n", "stats", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "for", "name", "in", "self", ".", "names", "(", ")", ":", "\n", "            ", "stats", "[", "name", "]", "=", "dnnlib", ".", "EasyDict", "(", "num", "=", "self", ".", "num", "(", "name", ")", ",", "mean", "=", "self", ".", "mean", "(", "name", ")", ",", "std", "=", "self", ".", "std", "(", "name", ")", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.__getitem__": [[226, 231], ["training_stats.Collector.mean"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.mean"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Convenience getter.\n        `collector[name]` is a synonym for `collector.mean(name)`.\n        \"\"\"", "\n", "return", "self", ".", "mean", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.init_multiprocessing": [[34, 52], ["None"], "function", ["None"], ["def", "init_multiprocessing", "(", "rank", ",", "sync_device", ")", ":", "\n", "    ", "r\"\"\"Initializes `torch_utils.training_stats` for collecting statistics\n    across multiple processes.\n\n    This function must be called after\n    `torch.distributed.init_process_group()` and before `Collector.update()`.\n    The call is not necessary if multi-process collection is not needed.\n\n    Args:\n        rank:           Rank of the current process.\n        sync_device:    PyTorch device to use for inter-process\n                        communication, or None to disable multi-process\n                        collection. Typically `torch.device('cuda', rank)`.\n    \"\"\"", "\n", "global", "_rank", ",", "_sync_device", "\n", "assert", "not", "_sync_called", "\n", "_rank", "=", "rank", "\n", "_sync_device", "=", "sync_device", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.report": [[55, 100], ["torch.as_tensor", "elems.detach().flatten().to.detach().flatten().to", "torch.stack", "moments.to.to", "[].add_", "dict", "elems.detach().flatten().to.numel", "torch.zeros_like", "elems.detach().flatten().to.detach().flatten", "torch.ones_like().sum", "elems.detach().flatten().to.sum", "elems.detach().flatten().to.square().sum", "elems.detach().flatten().to.detach", "torch.ones_like", "elems.detach().flatten().to.square"], "function", ["None"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "report", "(", "name", ",", "value", ")", ":", "\n", "    ", "r\"\"\"Broadcasts the given set of scalars to all interested instances of\n    `Collector`, across device and process boundaries.\n\n    This function is expected to be extremely cheap and can be safely\n    called from anywhere in the training loop, loss function, or inside a\n    `torch.nn.Module`.\n\n    Warning: The current implementation expects the set of unique names to\n    be consistent across processes. Please make sure that `report()` is\n    called at least once for each unique name by each process, and in the\n    same order. If a given process has no scalars to broadcast, it can do\n    `report(name, [])` (empty list).\n\n    Args:\n        name:   Arbitrary string specifying the name of the statistic.\n                Averages are accumulated separately for each unique name.\n        value:  Arbitrary set of scalars. Can be a list, tuple,\n                NumPy array, PyTorch tensor, or Python scalar.\n\n    Returns:\n        The same `value` that was passed in.\n    \"\"\"", "\n", "if", "name", "not", "in", "_counters", ":", "\n", "        ", "_counters", "[", "name", "]", "=", "dict", "(", ")", "\n", "\n", "", "elems", "=", "torch", ".", "as_tensor", "(", "value", ")", "\n", "if", "elems", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "value", "\n", "\n", "", "elems", "=", "elems", ".", "detach", "(", ")", ".", "flatten", "(", ")", ".", "to", "(", "_reduce_dtype", ")", "\n", "moments", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "ones_like", "(", "elems", ")", ".", "sum", "(", ")", ",", "\n", "elems", ".", "sum", "(", ")", ",", "\n", "elems", ".", "square", "(", ")", ".", "sum", "(", ")", ",", "\n", "]", ")", "\n", "assert", "moments", ".", "ndim", "==", "1", "and", "moments", ".", "shape", "[", "0", "]", "==", "_num_moments", "\n", "moments", "=", "moments", ".", "to", "(", "_counter_dtype", ")", "\n", "\n", "device", "=", "moments", ".", "device", "\n", "if", "device", "not", "in", "_counters", "[", "name", "]", ":", "\n", "        ", "_counters", "[", "name", "]", "[", "device", "]", "=", "torch", ".", "zeros_like", "(", "moments", ")", "\n", "", "_counters", "[", "name", "]", "[", "device", "]", ".", "add_", "(", "moments", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.report0": [[103, 110], ["training_stats.report"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.report"], ["", "def", "report0", "(", "name", ",", "value", ")", ":", "\n", "    ", "r\"\"\"Broadcasts the given set of scalars by the first process (`rank = 0`),\n    but ignores any scalars provided by the other processes.\n    See `report()` for further details.\n    \"\"\"", "\n", "report", "(", "name", ",", "value", "if", "_rank", "==", "0", "else", "[", "]", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats._sync": [[234, 267], ["torch.stack", "deltas.cpu.cpu", "enumerate", "len", "torch.device", "torch.zeros", "_counters[].values", "deltas.cpu.append", "torch.distributed.all_reduce", "_cumulative[].add_", "torch.zeros.add_", "counter.copy_", "torch.zeros", "counter.to", "torch.zeros_like"], "function", ["None"], ["", "", "def", "_sync", "(", "names", ")", ":", "\n", "    ", "r\"\"\"Synchronize the global cumulative counters across devices and\n    processes. Called internally by `Collector.update()`.\n    \"\"\"", "\n", "if", "len", "(", "names", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "global", "_sync_called", "\n", "_sync_called", "=", "True", "\n", "\n", "# Collect deltas within current rank.", "\n", "deltas", "=", "[", "]", "\n", "device", "=", "_sync_device", "if", "_sync_device", "is", "not", "None", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "for", "name", "in", "names", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ",", "device", "=", "device", ")", "\n", "for", "counter", "in", "_counters", "[", "name", "]", ".", "values", "(", ")", ":", "\n", "            ", "delta", ".", "add_", "(", "counter", ".", "to", "(", "device", ")", ")", "\n", "counter", ".", "copy_", "(", "torch", ".", "zeros_like", "(", "counter", ")", ")", "\n", "", "deltas", ".", "append", "(", "delta", ")", "\n", "", "deltas", "=", "torch", ".", "stack", "(", "deltas", ")", "\n", "\n", "# Sum deltas across ranks.", "\n", "if", "_sync_device", "is", "not", "None", ":", "\n", "        ", "torch", ".", "distributed", ".", "all_reduce", "(", "deltas", ")", "\n", "\n", "# Update cumulative values.", "\n", "", "deltas", "=", "deltas", ".", "cpu", "(", ")", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "if", "name", "not", "in", "_cumulative", ":", "\n", "            ", "_cumulative", "[", "name", "]", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ")", "\n", "", "_cumulative", "[", "name", "]", ".", "add_", "(", "deltas", "[", "idx", "]", ")", "\n", "\n", "# Return name-value pairs.", "\n", "", "return", "[", "(", "name", ",", "_cumulative", "[", "name", "]", ")", "for", "name", "in", "names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.custom_ops._find_compiler_bindir": [[28, 40], ["sorted", "len", "glob.glob"], "function", ["None"], ["def", "_find_compiler_bindir", "(", ")", ":", "\n", "    ", "patterns", "=", "[", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/Professional/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/BuildTools/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/Community/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio */vc/bin'", ",", "\n", "]", "\n", "for", "pattern", "in", "patterns", ":", "\n", "        ", "matches", "=", "sorted", "(", "glob", ".", "glob", "(", "pattern", ")", ")", "\n", "if", "len", "(", "matches", ")", ":", "\n", "            ", "return", "matches", "[", "-", "1", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.custom_ops.get_plugin": [[46, 125], ["print", "set", "importlib.import_module", "print", "print", "custom_ops._find_compiler_bindir", "sorted", "hashlib.md5", "torch.utils.cpp_extension._get_build_directory", "torch.utils.cpp_extension._get_build_directory", "os.path.join", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "print", "os.system", "RuntimeError", "os.path.dirname", "len", "list", "hashlib.md5.hexdigest", "os.path.isdir", "os.makedirs", "torch.utils.file_baton.FileBaton", "torch.utils.file_baton.FileBaton.try_acquire", "os.path.join", "print", "open", "hashlib.md5.update", "os.path.join", "torch.utils.file_baton.FileBaton.wait", "os.path.basename", "f.read", "torch.utils.file_baton.FileBaton.release", "pathlib.Path().iterdir", "x.is_file", "shutil.copyfile", "os.path.join", "pathlib.Path", "os.path.basename", "list"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.custom_ops._find_compiler_bindir", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update"], ["def", "get_plugin", "(", "module_name", ",", "sources", ",", "**", "build_kwargs", ")", ":", "\n", "    ", "assert", "verbosity", "in", "[", "'none'", ",", "'brief'", ",", "'full'", "]", "\n", "\n", "# Already cached?", "\n", "if", "module_name", "in", "_cached_plugins", ":", "\n", "        ", "return", "_cached_plugins", "[", "module_name", "]", "\n", "\n", "# Print status.", "\n", "", "if", "verbosity", "==", "'full'", ":", "\n", "        ", "print", "(", "f'Setting up PyTorch plugin \"{module_name}\"...'", ")", "\n", "", "elif", "verbosity", "==", "'brief'", ":", "\n", "        ", "print", "(", "f'Setting up PyTorch plugin \"{module_name}\"... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "", "try", ":", "# pylint: disable=too-many-nested-blocks", "\n", "# Make sure we can find the necessary compiler binaries.", "\n", "        ", "if", "os", ".", "name", "==", "'nt'", "and", "os", ".", "system", "(", "\"where cl.exe >nul 2>nul\"", ")", "!=", "0", ":", "\n", "            ", "compiler_bindir", "=", "_find_compiler_bindir", "(", ")", "\n", "if", "compiler_bindir", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "f'Could not find MSVC/GCC/CLANG installation on this computer. Check _find_compiler_bindir() in \"{__file__}\".'", ")", "\n", "", "os", ".", "environ", "[", "'PATH'", "]", "+=", "';'", "+", "compiler_bindir", "\n", "\n", "# Compile and load.", "\n", "", "verbose_build", "=", "(", "verbosity", "==", "'full'", ")", "\n", "\n", "# Incremental build md5sum trickery.  Copies all the input source files", "\n", "# into a cached build directory under a combined md5 digest of the input", "\n", "# source files.  Copying is done only if the combined digest has changed.", "\n", "# This keeps input file timestamps and filenames the same as in previous", "\n", "# extension builds, allowing for fast incremental rebuilds.", "\n", "#", "\n", "# This optimization is done only in case all the source files reside in", "\n", "# a single directory (just for simplicity) and if the TORCH_EXTENSIONS_DIR", "\n", "# environment variable is set (we take this as a signal that the user", "\n", "# actually cares about this.)", "\n", "source_dirs_set", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "source", ")", "for", "source", "in", "sources", ")", "\n", "if", "len", "(", "source_dirs_set", ")", "==", "1", "and", "(", "'TORCH_EXTENSIONS_DIR'", "in", "os", ".", "environ", ")", ":", "\n", "            ", "all_source_files", "=", "sorted", "(", "list", "(", "x", "for", "x", "in", "Path", "(", "list", "(", "source_dirs_set", ")", "[", "0", "]", ")", ".", "iterdir", "(", ")", "if", "x", ".", "is_file", "(", ")", ")", ")", "\n", "\n", "# Compute a combined hash digest for all source files in the same", "\n", "# custom op directory (usually .cu, .cpp, .py and .h files).", "\n", "hash_md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "for", "src", "in", "all_source_files", ":", "\n", "                ", "with", "open", "(", "src", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "hash_md5", ".", "update", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "build_dir", "=", "torch", ".", "utils", ".", "cpp_extension", ".", "_get_build_directory", "(", "module_name", ",", "verbose", "=", "verbose_build", ")", "# pylint: disable=protected-access", "\n", "digest_build_dir", "=", "os", ".", "path", ".", "join", "(", "build_dir", ",", "hash_md5", ".", "hexdigest", "(", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "digest_build_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "digest_build_dir", ",", "exist_ok", "=", "True", ")", "\n", "baton", "=", "FileBaton", "(", "os", ".", "path", ".", "join", "(", "digest_build_dir", ",", "'lock'", ")", ")", "\n", "if", "baton", ".", "try_acquire", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "for", "src", "in", "all_source_files", ":", "\n", "                            ", "shutil", ".", "copyfile", "(", "src", ",", "os", ".", "path", ".", "join", "(", "digest_build_dir", ",", "os", ".", "path", ".", "basename", "(", "src", ")", ")", ")", "\n", "", "", "finally", ":", "\n", "                        ", "baton", ".", "release", "(", ")", "\n", "", "", "else", ":", "\n", "# Someone else is copying source files under the digest dir,", "\n", "# wait until done and continue.", "\n", "                    ", "baton", ".", "wait", "(", ")", "\n", "", "", "digest_sources", "=", "[", "os", ".", "path", ".", "join", "(", "digest_build_dir", ",", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "for", "x", "in", "sources", "]", "\n", "torch", ".", "utils", ".", "cpp_extension", ".", "load", "(", "name", "=", "module_name", ",", "build_directory", "=", "build_dir", ",", "\n", "verbose", "=", "verbose_build", ",", "sources", "=", "digest_sources", ",", "**", "build_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "utils", ".", "cpp_extension", ".", "load", "(", "name", "=", "module_name", ",", "verbose", "=", "verbose_build", ",", "sources", "=", "sources", ",", "**", "build_kwargs", ")", "\n", "", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "\n", "", "except", ":", "\n", "        ", "if", "verbosity", "==", "'brief'", ":", "\n", "            ", "print", "(", "'Failed!'", ")", "\n", "", "raise", "\n", "\n", "# Print status and add to cache.", "\n", "", "if", "verbosity", "==", "'full'", ":", "\n", "        ", "print", "(", "f'Done setting up PyTorch plugin \"{module_name}\".'", ")", "\n", "", "elif", "verbosity", "==", "'brief'", ":", "\n", "        ", "print", "(", "'Done.'", ")", "\n", "", "_cached_plugins", "[", "module_name", "]", "=", "module", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence.persistent_class": [[35, 131], ["isinstance", "persistence.is_persistent", "persistence._module_to_src", "_decorators.add", "super().__init__", "copy.deepcopy", "copy.deepcopy", "persistence._check_pickleable", "copy.deepcopy", "dnnlib.EasyDict", "list", "tuple", "persistence..__reduce__", "copy.deepcopy", "super().__reduce__", "max", "dict", "len"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence.is_persistent", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence._module_to_src", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence._check_pickleable", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["def", "persistent_class", "(", "orig_class", ")", ":", "\n", "    ", "r\"\"\"Class decorator that extends a given class to save its source code\n    when pickled.\n\n    Example:\n\n        from torch_utils import persistence\n\n        @persistence.persistent_class\n        class MyNetwork(torch.nn.Module):\n            def __init__(self, num_inputs, num_outputs):\n                super().__init__()\n                self.fc = MyLayer(num_inputs, num_outputs)\n                ...\n\n        @persistence.persistent_class\n        class MyLayer(torch.nn.Module):\n            ...\n\n    When pickled, any instance of `MyNetwork` and `MyLayer` will save its\n    source code alongside other internal state (e.g., parameters, buffers,\n    and submodules). This way, any previously exported pickle will remain\n    usable even if the class definitions have been modified or are no\n    longer available.\n\n    The decorator saves the source code of the entire Python module\n    containing the decorated class. It does *not* save the source code of\n    any imported modules. Thus, the imported modules must be available\n    during unpickling, also including `torch_utils.persistence` itself.\n\n    It is ok to call functions defined in the same module from the\n    decorated class. However, if the decorated class depends on other\n    classes defined in the same module, they must be decorated as well.\n    This is illustrated in the above example in the case of `MyLayer`.\n\n    It is also possible to employ the decorator just-in-time before\n    calling the constructor. For example:\n\n        cls = MyLayer\n        if want_to_make_it_persistent:\n            cls = persistence.persistent_class(cls)\n        layer = cls(num_inputs, num_outputs)\n\n    As an additional feature, the decorator also keeps track of the\n    arguments that were used to construct each instance of the decorated\n    class. The arguments can be queried via `obj.init_args` and\n    `obj.init_kwargs`, and they are automatically pickled alongside other\n    object state. A typical use case is to first unpickle a previous\n    instance of a persistent class, and then upgrade it to use the latest\n    version of the source code:\n\n        with open('old_pickle.pkl', 'rb') as f:\n            old_net = pickle.load(f)\n        new_net = MyNetwork(*old_obj.init_args, **old_obj.init_kwargs)\n        misc.copy_params_and_buffers(old_net, new_net, require_all=True)\n    \"\"\"", "\n", "assert", "isinstance", "(", "orig_class", ",", "type", ")", "\n", "if", "is_persistent", "(", "orig_class", ")", ":", "\n", "        ", "return", "orig_class", "\n", "\n", "", "assert", "orig_class", ".", "__module__", "in", "sys", ".", "modules", "\n", "orig_module", "=", "sys", ".", "modules", "[", "orig_class", ".", "__module__", "]", "\n", "orig_module_src", "=", "_module_to_src", "(", "orig_module", ")", "\n", "\n", "class", "Decorator", "(", "orig_class", ")", ":", "\n", "        ", "_orig_module_src", "=", "orig_module_src", "\n", "_orig_class_name", "=", "orig_class", ".", "__name__", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_init_args", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "self", ".", "_init_kwargs", "=", "copy", ".", "deepcopy", "(", "kwargs", ")", "\n", "assert", "orig_class", ".", "__name__", "in", "orig_module", ".", "__dict__", "\n", "_check_pickleable", "(", "self", ".", "__reduce__", "(", ")", ")", "\n", "\n", "", "@", "property", "\n", "def", "init_args", "(", "self", ")", ":", "\n", "            ", "return", "copy", ".", "deepcopy", "(", "self", ".", "_init_args", ")", "\n", "\n", "", "@", "property", "\n", "def", "init_kwargs", "(", "self", ")", ":", "\n", "            ", "return", "dnnlib", ".", "EasyDict", "(", "copy", ".", "deepcopy", "(", "self", ".", "_init_kwargs", ")", ")", "\n", "\n", "", "def", "__reduce__", "(", "self", ")", ":", "\n", "            ", "fields", "=", "list", "(", "super", "(", ")", ".", "__reduce__", "(", ")", ")", "\n", "fields", "+=", "[", "None", "]", "*", "max", "(", "3", "-", "len", "(", "fields", ")", ",", "0", ")", "\n", "if", "fields", "[", "0", "]", "is", "not", "_reconstruct_persistent_obj", ":", "\n", "                ", "meta", "=", "dict", "(", "type", "=", "'class'", ",", "version", "=", "_version", ",", "module_src", "=", "self", ".", "_orig_module_src", ",", "class_name", "=", "self", ".", "_orig_class_name", ",", "state", "=", "fields", "[", "2", "]", ")", "\n", "fields", "[", "0", "]", "=", "_reconstruct_persistent_obj", "# reconstruct func", "\n", "fields", "[", "1", "]", "=", "(", "meta", ",", ")", "# reconstruct args", "\n", "fields", "[", "2", "]", "=", "None", "# state dict", "\n", "", "return", "tuple", "(", "fields", ")", "\n", "\n", "", "", "Decorator", ".", "__name__", "=", "orig_class", ".", "__name__", "\n", "_decorators", ".", "add", "(", "Decorator", ")", "\n", "return", "Decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence.is_persistent": [[134, 144], ["type"], "function", ["None"], ["", "def", "is_persistent", "(", "obj", ")", ":", "\n", "    ", "r\"\"\"Test whether the given object or class is persistent, i.e.,\n    whether it will save its source code when pickled.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "if", "obj", "in", "_decorators", ":", "\n", "            ", "return", "True", "\n", "", "", "except", "TypeError", ":", "\n", "        ", "pass", "\n", "", "return", "type", "(", "obj", ")", "in", "_decorators", "# pylint: disable=unidiomatic-typecheck", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence.import_hook": [[147, 176], ["callable", "_import_hooks.append"], "function", ["None"], ["", "def", "import_hook", "(", "hook", ")", ":", "\n", "    ", "r\"\"\"Register an import hook that is called whenever a persistent object\n    is being unpickled. A typical use case is to patch the pickled source\n    code to avoid errors and inconsistencies when the API of some imported\n    module has changed.\n\n    The hook should have the following signature:\n\n        hook(meta) -> modified meta\n\n    `meta` is an instance of `dnnlib.EasyDict` with the following fields:\n\n        type:       Type of the persistent object, e.g. `'class'`.\n        version:    Internal version number of `torch_utils.persistence`.\n        module_src  Original source code of the Python module.\n        class_name: Class name in the original Python module.\n        state:      Internal state of the object.\n\n    Example:\n\n        @persistence.import_hook\n        def wreck_my_network(meta):\n            if meta.class_name == 'MyNetwork':\n                print('MyNetwork is being imported. I will wreck it!')\n                meta.module_src = meta.module_src.replace(\"True\", \"False\")\n            return meta\n    \"\"\"", "\n", "assert", "callable", "(", "hook", ")", "\n", "_import_hooks", ".", "append", "(", "hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence._reconstruct_persistent_obj": [[179, 203], ["dnnlib.EasyDict", "dnnlib.EasyDict", "persistence._src_to_module", "persistence.persistent_class", "persistent_class.__new__", "getattr", "callable", "hook", "getattr.", "decorator_class.__new__.__dict__.update"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence._src_to_module", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence.persistent_class", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.training_stats.Collector.update"], ["", "def", "_reconstruct_persistent_obj", "(", "meta", ")", ":", "\n", "    ", "r\"\"\"Hook that is called internally by the `pickle` module to unpickle\n    a persistent object.\n    \"\"\"", "\n", "meta", "=", "dnnlib", ".", "EasyDict", "(", "meta", ")", "\n", "meta", ".", "state", "=", "dnnlib", ".", "EasyDict", "(", "meta", ".", "state", ")", "\n", "for", "hook", "in", "_import_hooks", ":", "\n", "        ", "meta", "=", "hook", "(", "meta", ")", "\n", "assert", "meta", "is", "not", "None", "\n", "\n", "", "assert", "meta", ".", "version", "==", "_version", "\n", "module", "=", "_src_to_module", "(", "meta", ".", "module_src", ")", "\n", "\n", "assert", "meta", ".", "type", "==", "'class'", "\n", "orig_class", "=", "module", ".", "__dict__", "[", "meta", ".", "class_name", "]", "\n", "decorator_class", "=", "persistent_class", "(", "orig_class", ")", "\n", "obj", "=", "decorator_class", ".", "__new__", "(", "decorator_class", ")", "\n", "\n", "setstate", "=", "getattr", "(", "obj", ",", "'__setstate__'", ",", "None", ")", "\n", "if", "callable", "(", "setstate", ")", ":", "\n", "        ", "setstate", "(", "meta", ".", "state", ")", "# pylint: disable=not-callable", "\n", "", "else", ":", "\n", "        ", "obj", ".", "__dict__", ".", "update", "(", "meta", ".", "state", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence._module_to_src": [[206, 215], ["_module_to_src_dict.get", "inspect.getsource"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get"], ["", "def", "_module_to_src", "(", "module", ")", ":", "\n", "    ", "r\"\"\"Query the source code of a given Python module.\n    \"\"\"", "\n", "src", "=", "_module_to_src_dict", ".", "get", "(", "module", ",", "None", ")", "\n", "if", "src", "is", "None", ":", "\n", "        ", "src", "=", "inspect", ".", "getsource", "(", "module", ")", "\n", "_module_to_src_dict", "[", "module", "]", "=", "src", "\n", "_src_to_module_dict", "[", "src", "]", "=", "module", "\n", "", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence._src_to_module": [[216, 228], ["_src_to_module_dict.get", "types.ModuleType", "exec", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.get_data.GetData.get"], ["", "def", "_src_to_module", "(", "src", ")", ":", "\n", "    ", "r\"\"\"Get or create a Python module for the given source code.\n    \"\"\"", "\n", "module", "=", "_src_to_module_dict", ".", "get", "(", "src", ",", "None", ")", "\n", "if", "module", "is", "None", ":", "\n", "        ", "module_name", "=", "\"_imported_module_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "module", "=", "types", ".", "ModuleType", "(", "module_name", ")", "\n", "sys", ".", "modules", "[", "module_name", "]", "=", "module", "\n", "_module_to_src_dict", "[", "module", "]", "=", "src", "\n", "_src_to_module_dict", "[", "src", "]", "=", "module", "\n", "exec", "(", "src", ",", "module", ".", "__dict__", ")", "# pylint: disable=exec-used", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence._check_pickleable": [[231, 250], ["isinstance", "isinstance", "isinstance", "persistence.is_persistent", "io.BytesIO", "pickle.dump", "persistence._check_pickleable.recurse"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.persistence.is_persistent"], ["", "def", "_check_pickleable", "(", "obj", ")", ":", "\n", "    ", "r\"\"\"Check that the given object is pickleable, raising an exception if\n    it is not. This function is expected to be considerably more efficient\n    than actually pickling the object.\n    \"\"\"", "\n", "def", "recurse", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "(", "list", ",", "tuple", ",", "set", ")", ")", ":", "\n", "            ", "return", "[", "recurse", "(", "x", ")", "for", "x", "in", "obj", "]", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "return", "[", "[", "recurse", "(", "x", ")", ",", "recurse", "(", "y", ")", "]", "for", "x", ",", "y", "in", "obj", ".", "items", "(", ")", "]", "\n", "", "if", "isinstance", "(", "obj", ",", "(", "str", ",", "int", ",", "float", ",", "bool", ",", "bytes", ",", "bytearray", ")", ")", ":", "\n", "            ", "return", "None", "# Python primitive types are pickleable.", "\n", "", "if", "f'{type(obj).__module__}.{type(obj).__name__}'", "in", "[", "'numpy.ndarray'", ",", "'torch.Tensor'", "]", ":", "\n", "            ", "return", "None", "# NumPy arrays and PyTorch tensors are pickleable.", "\n", "", "if", "is_persistent", "(", "obj", ")", ":", "\n", "            ", "return", "None", "# Persistent objects are pickleable, by virtue of the constructor check.", "\n", "", "return", "obj", "\n", "", "with", "io", ".", "BytesIO", "(", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "recurse", "(", "obj", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.bias_act._init": [[41, 52], ["os.path.join", "custom_ops.get_plugin", "os.path.dirname", "warnings.warn", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.custom_ops.get_plugin"], ["def", "_init", "(", ")", ":", "\n", "    ", "global", "_inited", ",", "_plugin", "\n", "if", "not", "_inited", ":", "\n", "        ", "_inited", "=", "True", "\n", "sources", "=", "[", "'bias_act.cpp'", ",", "'bias_act.cu'", "]", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "try", ":", "\n", "            ", "_plugin", "=", "custom_ops", ".", "get_plugin", "(", "'bias_act_plugin'", ",", "sources", "=", "sources", ",", "extra_cuda_cflags", "=", "[", "'--use_fast_math'", "]", ")", "\n", "", "except", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Failed to build CUDA kernels for bias_act. Falling back to slow reference implementation. Details:\\n\\n'", "+", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "return", "_plugin", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.bias_act.bias_act": [[55, 90], ["isinstance", "bias_act._bias_act_ref", "bias_act._init", "_bias_act_cuda().apply", "bias_act._bias_act_cuda"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.bias_act._bias_act_ref", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._init", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.bias_act._bias_act_cuda"], ["", "def", "bias_act", "(", "x", ",", "b", "=", "None", ",", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Fused bias and activation function.\n\n    Adds bias `b` to activation tensor `x`, evaluates activation function `act`,\n    and scales the result by `gain`. Each of the steps is optional. In most cases,\n    the fused op is considerably more efficient than performing the same calculation\n    using standard PyTorch ops. It supports first and second order gradients,\n    but not third order gradients.\n\n    Args:\n        x:      Input activation tensor. Can be of any shape.\n        b:      Bias vector, or `None` to disable. Must be a 1D tensor of the same type\n                as `x`. The shape must be known, and it must match the dimension of `x`\n                corresponding to `dim`.\n        dim:    The dimension in `x` corresponding to the elements of `b`.\n                The value of `dim` is ignored if `b` is not specified.\n        act:    Name of the activation function to evaluate, or `\"linear\"` to disable.\n                Can be e.g. `\"relu\"`, `\"lrelu\"`, `\"tanh\"`, `\"sigmoid\"`, `\"swish\"`, etc.\n                See `activation_funcs` for a full list. `None` is not allowed.\n        alpha:  Shape parameter for the activation function, or `None` to use the default.\n        gain:   Scaling factor for the output tensor, or `None` to use default.\n                See `activation_funcs` for the default scaling of each activation function.\n                If unsure, consider specifying 1.\n        clamp:  Clamp the output values to `[-clamp, +clamp]`, or `None` to disable\n                the clamping (default).\n        impl:   Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the same shape and datatype as `x`.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "impl", "in", "[", "'ref'", ",", "'cuda'", "]", "\n", "if", "impl", "==", "'cuda'", "and", "x", ".", "device", ".", "type", "==", "'cuda'", "and", "_init", "(", ")", ":", "\n", "        ", "return", "_bias_act_cuda", "(", "dim", "=", "dim", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ",", "clamp", "=", "clamp", ")", ".", "apply", "(", "x", ",", "b", ")", "\n", "", "return", "_bias_act_ref", "(", "x", "=", "x", ",", "b", "=", "b", ",", "dim", "=", "dim", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ",", "clamp", "=", "clamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.bias_act._bias_act_ref": [[93, 124], ["isinstance", "float", "float", "float", "float", "spec.func", "float", "x.clamp.clamp", "isinstance", "b.reshape", "range"], "function", ["None"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "_bias_act_ref", "(", "x", ",", "b", "=", "None", ",", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `bias_act()` using standard TensorFlow ops.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "clamp", "is", "None", "or", "clamp", ">=", "0", "\n", "spec", "=", "activation_funcs", "[", "act", "]", "\n", "alpha", "=", "float", "(", "alpha", "if", "alpha", "is", "not", "None", "else", "spec", ".", "def_alpha", ")", "\n", "gain", "=", "float", "(", "gain", "if", "gain", "is", "not", "None", "else", "spec", ".", "def_gain", ")", "\n", "clamp", "=", "float", "(", "clamp", "if", "clamp", "is", "not", "None", "else", "-", "1", ")", "\n", "\n", "# Add bias.", "\n", "if", "b", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "b", ",", "torch", ".", "Tensor", ")", "and", "b", ".", "ndim", "==", "1", "\n", "assert", "0", "<=", "dim", "<", "x", ".", "ndim", "\n", "assert", "b", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "dim", "]", "\n", "x", "=", "x", "+", "b", ".", "reshape", "(", "[", "-", "1", "if", "i", "==", "dim", "else", "1", "for", "i", "in", "range", "(", "x", ".", "ndim", ")", "]", ")", "\n", "\n", "# Evaluate activation function.", "\n", "", "alpha", "=", "float", "(", "alpha", ")", "\n", "x", "=", "spec", ".", "func", "(", "x", ",", "alpha", "=", "alpha", ")", "\n", "\n", "# Scale by gain.", "\n", "gain", "=", "float", "(", "gain", ")", "\n", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "=", "x", "*", "gain", "\n", "\n", "# Clamp.", "\n", "", "if", "clamp", ">=", "0", ":", "\n", "        ", "x", "=", "x", ".", "clamp", "(", "-", "clamp", ",", "clamp", ")", "# pylint: disable=invalid-unary-operand-type", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.bias_act._bias_act_cuda": [[129, 211], ["float", "float", "float", "x.contiguous.contiguous", "ctx.save_for_backward", "dy.contiguous.contiguous", "_plugin.bias_act", "ctx.save_for_backward", "d_dx.contiguous.contiguous", "b.contiguous", "_plugin.bias_act", "BiasActCudaGrad.apply.sum", "BiasActCudaGrad.apply", "_plugin.bias_act", "_plugin.bias_act.sum", "BiasActCudaGrad.apply", "x.contiguous.stride", "range", "dy.contiguous.stride", "range"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.bias_act.bias_act", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.bias_act.bias_act", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.bias_act.bias_act"], ["def", "_bias_act_cuda", "(", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `bias_act()` using custom ops.\n    \"\"\"", "\n", "# Parse arguments.", "\n", "assert", "clamp", "is", "None", "or", "clamp", ">=", "0", "\n", "spec", "=", "activation_funcs", "[", "act", "]", "\n", "alpha", "=", "float", "(", "alpha", "if", "alpha", "is", "not", "None", "else", "spec", ".", "def_alpha", ")", "\n", "gain", "=", "float", "(", "gain", "if", "gain", "is", "not", "None", "else", "spec", ".", "def_gain", ")", "\n", "clamp", "=", "float", "(", "clamp", "if", "clamp", "is", "not", "None", "else", "-", "1", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "dim", ",", "act", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "if", "key", "in", "_bias_act_cuda_cache", ":", "\n", "        ", "return", "_bias_act_cuda_cache", "[", "key", "]", "\n", "\n", "# Forward op.", "\n", "", "class", "BiasActCuda", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "b", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "ctx", ".", "memory_format", "=", "torch", ".", "channels_last", "if", "x", ".", "ndim", ">", "2", "and", "x", ".", "stride", "(", ")", "[", "1", "]", "==", "1", "else", "torch", ".", "contiguous_format", "\n", "x", "=", "x", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "b", "=", "b", ".", "contiguous", "(", ")", "if", "b", "is", "not", "None", "else", "_null_tensor", "\n", "y", "=", "x", "\n", "if", "act", "!=", "'linear'", "or", "gain", "!=", "1", "or", "clamp", ">=", "0", "or", "b", "is", "not", "_null_tensor", ":", "\n", "                ", "y", "=", "_plugin", ".", "bias_act", "(", "x", ",", "b", ",", "_null_tensor", ",", "_null_tensor", ",", "_null_tensor", ",", "0", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "\n", "x", "if", "'x'", "in", "spec", ".", "ref", "or", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "b", "if", "'x'", "in", "spec", ".", "ref", "or", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "y", "if", "'y'", "in", "spec", ".", "ref", "else", "_null_tensor", ")", "\n", "return", "y", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "dy", "=", "dy", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "x", ",", "b", ",", "y", "=", "ctx", ".", "saved_tensors", "\n", "dx", "=", "None", "\n", "db", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "dx", "=", "dy", "\n", "if", "act", "!=", "'linear'", "or", "gain", "!=", "1", "or", "clamp", ">=", "0", ":", "\n", "                    ", "dx", "=", "BiasActCudaGrad", ".", "apply", "(", "dy", ",", "x", ",", "b", ",", "y", ")", "\n", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "db", "=", "dx", ".", "sum", "(", "[", "i", "for", "i", "in", "range", "(", "dx", ".", "ndim", ")", "if", "i", "!=", "dim", "]", ")", "\n", "\n", "", "return", "dx", ",", "db", "\n", "\n", "# Backward op.", "\n", "", "", "class", "BiasActCudaGrad", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "dy", ",", "x", ",", "b", ",", "y", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "ctx", ".", "memory_format", "=", "torch", ".", "channels_last", "if", "dy", ".", "ndim", ">", "2", "and", "dy", ".", "stride", "(", ")", "[", "1", "]", "==", "1", "else", "torch", ".", "contiguous_format", "\n", "dx", "=", "_plugin", ".", "bias_act", "(", "dy", ",", "b", ",", "x", ",", "y", ",", "_null_tensor", ",", "1", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "ctx", ".", "save_for_backward", "(", "\n", "dy", "if", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "x", ",", "b", ",", "y", ")", "\n", "return", "dx", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "d_dx", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "d_dx", "=", "d_dx", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "dy", ",", "x", ",", "b", ",", "y", "=", "ctx", ".", "saved_tensors", "\n", "d_dy", "=", "None", "\n", "d_x", "=", "None", "\n", "d_b", "=", "None", "\n", "d_y", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "d_dy", "=", "BiasActCudaGrad", ".", "apply", "(", "d_dx", ",", "x", ",", "b", ",", "y", ")", "\n", "\n", "", "if", "spec", ".", "has_2nd_grad", "and", "(", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", ":", "\n", "                ", "d_x", "=", "_plugin", ".", "bias_act", "(", "d_dx", ",", "b", ",", "x", ",", "y", ",", "dy", ",", "2", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "\n", "", "if", "spec", ".", "has_2nd_grad", "and", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "d_b", "=", "d_x", ".", "sum", "(", "[", "i", "for", "i", "in", "range", "(", "d_x", ".", "ndim", ")", "if", "i", "!=", "dim", "]", ")", "\n", "\n", "", "return", "d_dy", ",", "d_x", ",", "d_b", ",", "d_y", "\n", "\n", "# Add to cache.", "\n", "", "", "_bias_act_cuda_cache", "[", "key", "]", "=", "BiasActCuda", "\n", "return", "BiasActCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._get_weight_shape": [[21, 26], ["misc.assert_shape", "misc.suppress_tracer_warnings", "int"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.assert_shape"], ["def", "_get_weight_shape", "(", "w", ")", ":", "\n", "    ", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# this value will be treated as a constant", "\n", "        ", "shape", "=", "[", "int", "(", "sz", ")", "for", "sz", "in", "w", ".", "shape", "]", "\n", "", "misc", ".", "assert_shape", "(", "w", ",", "shape", ")", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._conv2d_wrapper": [[29, 55], ["conv2d_resample._get_weight_shape", "op", "w.to.flip", "conv2d_gradfix.conv2d.to", "min", "conv2d_gradfix.conv2d.reshape", "conv2d_gradfix.conv2d.to", "w.to.to", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d.stride", "w.to.squeeze().squeeze", "conv2d_gradfix.conv2d.reshape", "w.to.squeeze"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._get_weight_shape", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d"], ["", "def", "_conv2d_wrapper", "(", "x", ",", "w", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "1", ",", "transpose", "=", "False", ",", "flip_weight", "=", "True", ")", ":", "\n", "    ", "\"\"\"Wrapper for the underlying `conv2d()` and `conv_transpose2d()` implementations.\n    \"\"\"", "\n", "out_channels", ",", "in_channels_per_group", ",", "kh", ",", "kw", "=", "_get_weight_shape", "(", "w", ")", "\n", "\n", "# Flip weight if requested.", "\n", "if", "not", "flip_weight", ":", "# conv2d() actually performs correlation (flip_weight=True) not convolution (flip_weight=False).", "\n", "        ", "w", "=", "w", ".", "flip", "(", "[", "2", ",", "3", "]", ")", "\n", "\n", "# Workaround performance pitfall in cuDNN 8.0.5, triggered when using", "\n", "# 1x1 kernel + memory_format=channels_last + less than 64 channels.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "stride", "==", "1", "and", "padding", "in", "[", "0", ",", "[", "0", ",", "0", "]", ",", "(", "0", ",", "0", ")", "]", "and", "not", "transpose", ":", "\n", "        ", "if", "x", ".", "stride", "(", ")", "[", "1", "]", "==", "1", "and", "min", "(", "out_channels", ",", "in_channels_per_group", ")", "<", "64", ":", "\n", "            ", "if", "out_channels", "<=", "4", "and", "groups", "==", "1", ":", "\n", "                ", "in_shape", "=", "x", ".", "shape", "\n", "x", "=", "w", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", "@", "x", ".", "reshape", "(", "[", "in_shape", "[", "0", "]", ",", "in_channels_per_group", ",", "-", "1", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "[", "in_shape", "[", "0", "]", ",", "out_channels", ",", "in_shape", "[", "2", "]", ",", "in_shape", "[", "3", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", ".", "to", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "w", "=", "w", ".", "to", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "x", ",", "w", ",", "groups", "=", "groups", ")", "\n", "", "return", "x", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "# Otherwise => execute using conv2d_gradfix.", "\n", "", "", "op", "=", "conv2d_gradfix", ".", "conv_transpose2d", "if", "transpose", "else", "conv2d_gradfix", ".", "conv2d", "\n", "return", "op", "(", "x", ",", "w", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample.conv2d_resample": [[58, 155], ["conv2d_resample._get_weight_shape", "upfirdn2d._get_filter_size", "upfirdn2d._parse_padding", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "conv2d_resample._conv2d_wrapper", "upfirdn2d.upfirdn2d", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "max", "max", "conv2d_resample._conv2d_wrapper", "upfirdn2d.upfirdn2d", "upfirdn2d.upfirdn2d", "isinstance", "w.reshape.transpose", "w.reshape.reshape", "w.reshape.transpose", "w.reshape.reshape", "min", "min", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._get_weight_shape", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_resample._conv2d_wrapper"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "conv2d_resample", "(", "x", ",", "w", ",", "f", "=", "None", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "1", ",", "flip_weight", "=", "True", ",", "flip_filter", "=", "False", ")", ":", "\n", "    ", "r\"\"\"2D convolution with optional up/downsampling.\n\n    Padding is performed only once at the beginning, not between the operations.\n\n    Args:\n        x:              Input tensor of shape\n                        `[batch_size, in_channels, in_height, in_width]`.\n        w:              Weight tensor of shape\n                        `[out_channels, in_channels//groups, kernel_height, kernel_width]`.\n        f:              Low-pass filter for up/downsampling. Must be prepared beforehand by\n                        calling upfirdn2d.setup_filter(). None = identity (default).\n        up:             Integer upsampling factor (default: 1).\n        down:           Integer downsampling factor (default: 1).\n        padding:        Padding with respect to the upsampled image. Can be a single number\n                        or a list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                        (default: 0).\n        groups:         Split input channels into N groups (default: 1).\n        flip_weight:    False = convolution, True = correlation (default: True).\n        flip_filter:    False = convolution, True = correlation (default: False).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "# Validate arguments.", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "(", "x", ".", "ndim", "==", "4", ")", "\n", "assert", "isinstance", "(", "w", ",", "torch", ".", "Tensor", ")", "and", "(", "w", ".", "ndim", "==", "4", ")", "and", "(", "w", ".", "dtype", "==", "x", ".", "dtype", ")", "\n", "assert", "f", "is", "None", "or", "(", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "and", "f", ".", "dtype", "==", "torch", ".", "float32", ")", "\n", "assert", "isinstance", "(", "up", ",", "int", ")", "and", "(", "up", ">=", "1", ")", "\n", "assert", "isinstance", "(", "down", ",", "int", ")", "and", "(", "down", ">=", "1", ")", "\n", "assert", "isinstance", "(", "groups", ",", "int", ")", "and", "(", "groups", ">=", "1", ")", "\n", "out_channels", ",", "in_channels_per_group", ",", "kh", ",", "kw", "=", "_get_weight_shape", "(", "w", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "px0", ",", "px1", ",", "py0", ",", "py1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Adjust padding to account for up/downsampling.", "\n", "if", "up", ">", "1", ":", "\n", "        ", "px0", "+=", "(", "fw", "+", "up", "-", "1", ")", "//", "2", "\n", "px1", "+=", "(", "fw", "-", "up", ")", "//", "2", "\n", "py0", "+=", "(", "fh", "+", "up", "-", "1", ")", "//", "2", "\n", "py1", "+=", "(", "fh", "-", "up", ")", "//", "2", "\n", "", "if", "down", ">", "1", ":", "\n", "        ", "px0", "+=", "(", "fw", "-", "down", "+", "1", ")", "//", "2", "\n", "px1", "+=", "(", "fw", "-", "down", ")", "//", "2", "\n", "py0", "+=", "(", "fh", "-", "down", "+", "1", ")", "//", "2", "\n", "py1", "+=", "(", "fh", "-", "down", ")", "//", "2", "\n", "\n", "# Fast path: 1x1 convolution with downsampling only => downsample first, then convolve.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "(", "down", ">", "1", "and", "up", "==", "1", ")", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "return", "x", "\n", "\n", "# Fast path: 1x1 convolution with upsampling only => convolve first, then upsample.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "(", "up", ">", "1", "and", "down", "==", "1", ")", ":", "\n", "        ", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "return", "x", "\n", "\n", "# Fast path: downsampling only => use strided convolution.", "\n", "", "if", "down", ">", "1", "and", "up", "==", "1", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "stride", "=", "down", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "return", "x", "\n", "\n", "# Fast path: upsampling with optional downsampling => use transpose strided convolution.", "\n", "", "if", "up", ">", "1", ":", "\n", "        ", "if", "groups", "==", "1", ":", "\n", "            ", "w", "=", "w", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "groups", ",", "out_channels", "//", "groups", ",", "in_channels_per_group", ",", "kh", ",", "kw", ")", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "2", ")", "\n", "w", "=", "w", ".", "reshape", "(", "groups", "*", "in_channels_per_group", ",", "out_channels", "//", "groups", ",", "kh", ",", "kw", ")", "\n", "", "px0", "-=", "kw", "-", "1", "\n", "px1", "-=", "kw", "-", "up", "\n", "py0", "-=", "kh", "-", "1", "\n", "py1", "-=", "kh", "-", "up", "\n", "pxt", "=", "max", "(", "min", "(", "-", "px0", ",", "-", "px1", ")", ",", "0", ")", "\n", "pyt", "=", "max", "(", "min", "(", "-", "py0", ",", "-", "py1", ")", ",", "0", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "stride", "=", "up", ",", "padding", "=", "[", "pyt", ",", "pxt", "]", ",", "groups", "=", "groups", ",", "transpose", "=", "True", ",", "flip_weight", "=", "(", "not", "flip_weight", ")", ")", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "padding", "=", "[", "px0", "+", "pxt", ",", "px1", "+", "pxt", ",", "py0", "+", "pyt", ",", "py1", "+", "pyt", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "if", "down", ">", "1", ":", "\n", "            ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "\n", "", "return", "x", "\n", "\n", "# Fast path: no up/downsampling, padding supported by the underlying implementation => use plain conv2d.", "\n", "", "if", "up", "==", "1", "and", "down", "==", "1", ":", "\n", "        ", "if", "px0", "==", "px1", "and", "py0", "==", "py1", "and", "px0", ">=", "0", "and", "py0", ">=", "0", ":", "\n", "            ", "return", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "padding", "=", "[", "py0", ",", "px0", "]", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "\n", "# Fallback: Generic reference implementation.", "\n", "", "", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "(", "f", "if", "up", ">", "1", "else", "None", ")", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "if", "down", ">", "1", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.no_weight_gradients": [[25, 32], ["None"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "no_weight_gradients", "(", ")", ":", "\n", "    ", "global", "weight_gradients_disabled", "\n", "old", "=", "weight_gradients_disabled", "\n", "weight_gradients_disabled", "=", "True", "\n", "yield", "\n", "weight_gradients_disabled", "=", "old", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d": [[35, 39], ["conv2d_gradfix._should_use_custom_op", "torch.nn.functional.conv2d", "_conv2d_gradfix().apply", "conv2d_gradfix._conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix._conv2d_gradfix"], ["", "def", "conv2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", "input", ")", ":", "\n", "        ", "return", "_conv2d_gradfix", "(", "transpose", "=", "False", ",", "weight_shape", "=", "weight", ".", "shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv_transpose2d": [[40, 44], ["conv2d_gradfix._should_use_custom_op", "torch.nn.functional.conv_transpose2d", "_conv2d_gradfix().apply", "conv2d_gradfix._conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix._conv2d_gradfix"], ["", "def", "conv_transpose2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", "input", ")", ":", "\n", "        ", "return", "_conv2d_gradfix", "(", "transpose", "=", "True", ",", "weight_shape", "=", "weight", ".", "shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "conv_transpose2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix._should_use_custom_op": [[47, 57], ["isinstance", "any", "warnings.warn", "torch.__version__.startswith"], "function", ["None"], ["", "def", "_should_use_custom_op", "(", "input", ")", ":", "\n", "    ", "assert", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", "\n", "if", "(", "not", "enabled", ")", "or", "(", "not", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "input", ".", "device", ".", "type", "!=", "'cuda'", ":", "\n", "        ", "return", "False", "\n", "", "if", "any", "(", "torch", ".", "__version__", ".", "startswith", "(", "x", ")", "for", "x", "in", "[", "'1.7.'", ",", "'1.8.'", ",", "'1.9'", "]", ")", ":", "\n", "        ", "return", "True", "\n", "", "warnings", ".", "warn", "(", "f'conv2d_gradfix not supported on PyTorch {torch.__version__}. Falling back to torch.nn.functional.conv2d().'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix._tuple_of_ints": [[58, 63], ["all", "isinstance", "tuple", "len", "isinstance"], "function", ["None"], ["", "def", "_tuple_of_ints", "(", "xs", ",", "ndim", ")", ":", "\n", "    ", "xs", "=", "tuple", "(", "xs", ")", "if", "isinstance", "(", "xs", ",", "(", "tuple", ",", "list", ")", ")", "else", "(", "xs", ",", ")", "*", "ndim", "\n", "assert", "len", "(", "xs", ")", "==", "ndim", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "xs", ")", "\n", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix._conv2d_gradfix": [[68, 169], ["tuple", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "all", "all", "all", "dict", "len", "all", "all", "ctx.save_for_backward", "torch._C._jit_get_operation", "torch._C._jit_get_operation.", "ctx.save_for_backward", "range", "range", "range", "range", "torch.nn.functional.conv2d", "torch.nn.functional.conv_transpose2d", "conv2d_gradfix._conv2d_gradfix.calc_output_padding"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv_transpose2d"], ["def", "_conv2d_gradfix", "(", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", ")", ":", "\n", "# Parse arguments.", "\n", "    ", "ndim", "=", "2", "\n", "weight_shape", "=", "tuple", "(", "weight_shape", ")", "\n", "stride", "=", "_tuple_of_ints", "(", "stride", ",", "ndim", ")", "\n", "padding", "=", "_tuple_of_ints", "(", "padding", ",", "ndim", ")", "\n", "output_padding", "=", "_tuple_of_ints", "(", "output_padding", ",", "ndim", ")", "\n", "dilation", "=", "_tuple_of_ints", "(", "dilation", ",", "ndim", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", ")", "\n", "if", "key", "in", "_conv2d_gradfix_cache", ":", "\n", "        ", "return", "_conv2d_gradfix_cache", "[", "key", "]", "\n", "\n", "# Validate arguments.", "\n", "", "assert", "groups", ">=", "1", "\n", "assert", "len", "(", "weight_shape", ")", "==", "ndim", "+", "2", "\n", "assert", "all", "(", "stride", "[", "i", "]", ">=", "1", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "assert", "all", "(", "padding", "[", "i", "]", ">=", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "assert", "all", "(", "dilation", "[", "i", "]", ">=", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "if", "not", "transpose", ":", "\n", "        ", "assert", "all", "(", "output_padding", "[", "i", "]", "==", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "", "else", ":", "# transpose", "\n", "        ", "assert", "all", "(", "0", "<=", "output_padding", "[", "i", "]", "<", "max", "(", "stride", "[", "i", "]", ",", "dilation", "[", "i", "]", ")", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "\n", "# Helpers.", "\n", "", "common_kwargs", "=", "dict", "(", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "def", "calc_output_padding", "(", "input_shape", ",", "output_shape", ")", ":", "\n", "        ", "if", "transpose", ":", "\n", "            ", "return", "[", "0", ",", "0", "]", "\n", "", "return", "[", "\n", "input_shape", "[", "i", "+", "2", "]", "\n", "-", "(", "output_shape", "[", "i", "+", "2", "]", "-", "1", ")", "*", "stride", "[", "i", "]", "\n", "-", "(", "1", "-", "2", "*", "padding", "[", "i", "]", ")", "\n", "-", "dilation", "[", "i", "]", "*", "(", "weight_shape", "[", "i", "+", "2", "]", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "ndim", ")", "\n", "]", "\n", "\n", "# Forward & backward.", "\n", "", "class", "Conv2d", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "weight", ",", "bias", ")", ":", "\n", "            ", "assert", "weight", ".", "shape", "==", "weight_shape", "\n", "if", "not", "transpose", ":", "\n", "                ", "output", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "**", "common_kwargs", ")", "\n", "", "else", ":", "# transpose", "\n", "                ", "output", "=", "torch", ".", "nn", ".", "functional", ".", "conv_transpose2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "output_padding", "=", "output_padding", ",", "**", "common_kwargs", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "input", ",", "weight", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "input", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "None", "\n", "grad_weight", "=", "None", "\n", "grad_bias", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "input_shape", "=", "input", ".", "shape", ",", "output_shape", "=", "grad_output", ".", "shape", ")", "\n", "grad_input", "=", "_conv2d_gradfix", "(", "transpose", "=", "(", "not", "transpose", ")", ",", "weight_shape", "=", "weight_shape", ",", "output_padding", "=", "p", ",", "**", "common_kwargs", ")", ".", "apply", "(", "grad_output", ",", "weight", ",", "None", ")", "\n", "assert", "grad_input", ".", "shape", "==", "input", ".", "shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "and", "not", "weight_gradients_disabled", ":", "\n", "                ", "grad_weight", "=", "Conv2dGradWeight", ".", "apply", "(", "grad_output", ",", "input", ")", "\n", "assert", "grad_weight", ".", "shape", "==", "weight_shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_bias", "=", "grad_output", ".", "sum", "(", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_weight", ",", "grad_bias", "\n", "\n", "# Gradient with respect to the weights.", "\n", "", "", "class", "Conv2dGradWeight", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "input", ")", ":", "\n", "            ", "op", "=", "torch", ".", "_C", ".", "_jit_get_operation", "(", "'aten::cudnn_convolution_backward_weight'", "if", "not", "transpose", "else", "'aten::cudnn_convolution_transpose_backward_weight'", ")", "\n", "flags", "=", "[", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", ",", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", ",", "torch", ".", "backends", ".", "cudnn", ".", "allow_tf32", "]", "\n", "grad_weight", "=", "op", "(", "weight_shape", ",", "grad_output", ",", "input", ",", "padding", ",", "stride", ",", "dilation", ",", "groups", ",", "*", "flags", ")", "\n", "assert", "grad_weight", ".", "shape", "==", "weight_shape", "\n", "ctx", ".", "save_for_backward", "(", "grad_output", ",", "input", ")", "\n", "return", "grad_weight", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad2_grad_weight", ")", ":", "\n", "            ", "grad_output", ",", "input", "=", "ctx", ".", "saved_tensors", "\n", "grad2_grad_output", "=", "None", "\n", "grad2_input", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "grad2_grad_output", "=", "Conv2d", ".", "apply", "(", "input", ",", "grad2_grad_weight", ",", "None", ")", "\n", "assert", "grad2_grad_output", ".", "shape", "==", "grad_output", ".", "shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "input_shape", "=", "input", ".", "shape", ",", "output_shape", "=", "grad_output", ".", "shape", ")", "\n", "grad2_input", "=", "_conv2d_gradfix", "(", "transpose", "=", "(", "not", "transpose", ")", ",", "weight_shape", "=", "weight_shape", ",", "output_padding", "=", "p", ",", "**", "common_kwargs", ")", ".", "apply", "(", "grad_output", ",", "grad2_grad_weight", ",", "None", ")", "\n", "assert", "grad2_input", ".", "shape", "==", "input", ".", "shape", "\n", "\n", "", "return", "grad2_grad_output", ",", "grad2_input", "\n", "\n", "", "", "_conv2d_gradfix_cache", "[", "key", "]", "=", "Conv2d", "\n", "return", "Conv2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix._GridSample2dForward.forward": [[45, 52], ["torch.nn.functional.grid_sample", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix.grid_sample"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "grid", ")", ":", "\n", "        ", "assert", "input", ".", "ndim", "==", "4", "\n", "assert", "grid", ".", "ndim", "==", "4", "\n", "output", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "input", ",", "grid", "=", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "grid", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix._GridSample2dForward.backward": [[53, 58], ["_GridSample2dBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "grid", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", ",", "grad_grid", "=", "_GridSample2dBackward", ".", "apply", "(", "grad_output", ",", "input", ",", "grid", ")", "\n", "return", "grad_input", ",", "grad_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix._GridSample2dBackward.forward": [[62, 68], ["torch._C._jit_get_operation", "torch._C._jit_get_operation.", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "input", ",", "grid", ")", ":", "\n", "        ", "op", "=", "torch", ".", "_C", ".", "_jit_get_operation", "(", "'aten::grid_sampler_2d_backward'", ")", "\n", "grad_input", ",", "grad_grid", "=", "op", "(", "grad_output", ",", "input", ",", "grid", ",", "0", ",", "0", ",", "False", ")", "\n", "ctx", ".", "save_for_backward", "(", "grid", ")", "\n", "return", "grad_input", ",", "grad_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix._GridSample2dBackward.backward": [[69, 82], ["_GridSample2dForward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad2_grad_input", ",", "grad2_grad_grid", ")", ":", "\n", "        ", "_", "=", "grad2_grad_grid", "# unused", "\n", "grid", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad2_grad_output", "=", "None", "\n", "grad2_input", "=", "None", "\n", "grad2_grid", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad2_grad_output", "=", "_GridSample2dForward", ".", "apply", "(", "grad2_grad_input", ",", "grid", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "2", "]", "\n", "return", "grad2_grad_output", ",", "grad2_input", ",", "grad2_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix.grid_sample": [[27, 31], ["grid_sample_gradfix._should_use_custom_op", "torch.nn.functional.grid_sample", "_GridSample2dForward.apply"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix.grid_sample"], ["def", "grid_sample", "(", "input", ",", "grid", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", ")", ":", "\n", "        ", "return", "_GridSample2dForward", ".", "apply", "(", "input", ",", "grid", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "input", ",", "grid", "=", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.grid_sample_gradfix._should_use_custom_op": [[34, 41], ["any", "warnings.warn", "torch.__version__.startswith"], "function", ["None"], ["", "def", "_should_use_custom_op", "(", ")", ":", "\n", "    ", "if", "not", "enabled", ":", "\n", "        ", "return", "False", "\n", "", "if", "any", "(", "torch", ".", "__version__", ".", "startswith", "(", "x", ")", "for", "x", "in", "[", "'1.7.'", ",", "'1.8.'", ",", "'1.9'", "]", ")", ":", "\n", "        ", "return", "True", "\n", "", "warnings", ".", "warn", "(", "f'grid_sample_gradfix not supported on PyTorch {torch.__version__}. Falling back to torch.nn.functional.grid_sample().'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.forward": [[21, 27], ["torch.addcmul", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "a", ",", "b", ",", "c", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "out", "=", "torch", ".", "addcmul", "(", "c", ",", "a", ",", "b", ")", "\n", "ctx", ".", "save_for_backward", "(", "a", ",", "b", ")", "\n", "ctx", ".", "c_shape", "=", "c", ".", "shape", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._FusedMultiplyAdd.backward": [[28, 46], ["fma._unbroadcast", "fma._unbroadcast", "fma._unbroadcast"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._unbroadcast", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._unbroadcast", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._unbroadcast"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dout", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "a", ",", "b", "=", "ctx", ".", "saved_tensors", "\n", "c_shape", "=", "ctx", ".", "c_shape", "\n", "da", "=", "None", "\n", "db", "=", "None", "\n", "dc", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "da", "=", "_unbroadcast", "(", "dout", "*", "b", ",", "a", ".", "shape", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "db", "=", "_unbroadcast", "(", "dout", "*", "a", ",", "b", ".", "shape", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "dc", "=", "_unbroadcast", "(", "dout", ",", "c_shape", ")", "\n", "\n", "", "return", "da", ",", "db", ",", "dc", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma.fma": [[15, 17], ["_FusedMultiplyAdd.apply"], "function", ["None"], ["def", "fma", "(", "a", ",", "b", ",", "c", ")", ":", "# => a * b + c", "\n", "    ", "return", "_FusedMultiplyAdd", ".", "apply", "(", "a", ",", "b", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.fma._unbroadcast": [[49, 59], ["len", "len", "x.reshape.sum", "x.reshape.reshape", "range"], "function", ["None"], ["", "", "def", "_unbroadcast", "(", "x", ",", "shape", ")", ":", "\n", "    ", "extra_dims", "=", "x", ".", "ndim", "-", "len", "(", "shape", ")", "\n", "assert", "extra_dims", ">=", "0", "\n", "dim", "=", "[", "i", "for", "i", "in", "range", "(", "x", ".", "ndim", ")", "if", "x", ".", "shape", "[", "i", "]", ">", "1", "and", "(", "i", "<", "extra_dims", "or", "shape", "[", "i", "-", "extra_dims", "]", "==", "1", ")", "]", "\n", "if", "len", "(", "dim", ")", ":", "\n", "        ", "x", "=", "x", ".", "sum", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "if", "extra_dims", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "*", "x", ".", "shape", "[", "extra_dims", "+", "1", ":", "]", ")", "\n", "", "assert", "x", ".", "shape", "==", "shape", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._init": [[26, 36], ["os.path.join", "custom_ops.get_plugin", "os.path.dirname", "warnings.warn", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.custom_ops.get_plugin"], ["def", "_init", "(", ")", ":", "\n", "    ", "global", "_inited", ",", "_plugin", "\n", "if", "not", "_inited", ":", "\n", "        ", "sources", "=", "[", "'upfirdn2d.cpp'", ",", "'upfirdn2d.cu'", "]", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "try", ":", "\n", "            ", "_plugin", "=", "custom_ops", ".", "get_plugin", "(", "'upfirdn2d_plugin'", ",", "sources", "=", "sources", ",", "extra_cuda_cflags", "=", "[", "'--use_fast_math'", "]", ")", "\n", "", "except", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Failed to build CUDA kernels for upfirdn2d. Falling back to slow reference implementation. Details:\\n\\n'", "+", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "return", "_plugin", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_scaling": [[37, 45], ["isinstance", "isinstance", "all", "isinstance"], "function", ["None"], ["", "def", "_parse_scaling", "(", "scaling", ")", ":", "\n", "    ", "if", "isinstance", "(", "scaling", ",", "int", ")", ":", "\n", "        ", "scaling", "=", "[", "scaling", ",", "scaling", "]", "\n", "", "assert", "isinstance", "(", "scaling", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "scaling", ")", "\n", "sx", ",", "sy", "=", "scaling", "\n", "assert", "sx", ">=", "1", "and", "sy", ">=", "1", "\n", "return", "sx", ",", "sy", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_padding": [[46, 56], ["isinstance", "isinstance", "all", "len", "isinstance"], "function", ["None"], ["", "def", "_parse_padding", "(", "padding", ")", ":", "\n", "    ", "if", "isinstance", "(", "padding", ",", "int", ")", ":", "\n", "        ", "padding", "=", "[", "padding", ",", "padding", "]", "\n", "", "assert", "isinstance", "(", "padding", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "padding", ")", "\n", "if", "len", "(", "padding", ")", "==", "2", ":", "\n", "        ", "padx", ",", "pady", "=", "padding", "\n", "padding", "=", "[", "padx", ",", "padx", ",", "pady", ",", "pady", "]", "\n", "", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "padding", "\n", "return", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._get_filter_size": [[57, 69], ["misc.assert_shape", "isinstance", "misc.suppress_tracer_warnings", "int", "int"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.torch_utils.misc.assert_shape"], ["", "def", "_get_filter_size", "(", "f", ")", ":", "\n", "    ", "if", "f", "is", "None", ":", "\n", "        ", "return", "1", ",", "1", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "fw", "=", "f", ".", "shape", "[", "-", "1", "]", "\n", "fh", "=", "f", ".", "shape", "[", "0", "]", "\n", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "\n", "        ", "fw", "=", "int", "(", "fw", ")", "\n", "fh", "=", "int", "(", "fh", ")", "\n", "", "misc", ".", "assert_shape", "(", "f", ",", "[", "fh", ",", "fw", "]", "[", ":", "f", ".", "ndim", "]", ")", "\n", "assert", "fw", ">=", "1", "and", "fh", ">=", "1", "\n", "return", "fw", ",", "fh", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.setup_filter": [[72, 117], ["torch.device", "torch.as_tensor", "f.flip.to", "f.flip.numel", "f.flip.ger", "f.flip.sum", "f.flip.flip", "list", "f.flip.numel", "range"], "function", ["None"], ["", "def", "setup_filter", "(", "f", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "normalize", "=", "True", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "separable", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Convenience function to setup 2D FIR filter for `upfirdn2d()`.\n\n    Args:\n        f:           Torch tensor, numpy array, or python list of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable),\n                     `[]` (impulse), or\n                     `None` (identity).\n        device:      Result device (default: cpu).\n        normalize:   Normalize the filter so that it retains the magnitude\n                     for constant input signal (DC)? (default: True).\n        flip_filter: Flip the filter? (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        separable:   Return a separable filter? (default: select automatically).\n\n    Returns:\n        Float32 tensor of the shape\n        `[filter_height, filter_width]` (non-separable) or\n        `[filter_taps]` (separable).\n    \"\"\"", "\n", "# Validate.", "\n", "if", "f", "is", "None", ":", "\n", "        ", "f", "=", "1", "\n", "", "f", "=", "torch", ".", "as_tensor", "(", "f", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "assert", "f", ".", "ndim", "in", "[", "0", ",", "1", ",", "2", "]", "\n", "assert", "f", ".", "numel", "(", ")", ">", "0", "\n", "if", "f", ".", "ndim", "==", "0", ":", "\n", "        ", "f", "=", "f", "[", "np", ".", "newaxis", "]", "\n", "\n", "# Separable?", "\n", "", "if", "separable", "is", "None", ":", "\n", "        ", "separable", "=", "(", "f", ".", "ndim", "==", "1", "and", "f", ".", "numel", "(", ")", ">=", "8", ")", "\n", "", "if", "f", ".", "ndim", "==", "1", "and", "not", "separable", ":", "\n", "        ", "f", "=", "f", ".", "ger", "(", "f", ")", "\n", "", "assert", "f", ".", "ndim", "==", "(", "1", "if", "separable", "else", "2", ")", "\n", "\n", "# Apply normalize, flip, gain, and device.", "\n", "if", "normalize", ":", "\n", "        ", "f", "/=", "f", ".", "sum", "(", ")", "\n", "", "if", "flip_filter", ":", "\n", "        ", "f", "=", "f", ".", "flip", "(", "list", "(", "range", "(", "f", ".", "ndim", ")", ")", ")", "\n", "", "f", "=", "f", "*", "(", "gain", "**", "(", "f", ".", "ndim", "/", "2", ")", ")", "\n", "f", "=", "f", ".", "to", "(", "device", "=", "device", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d": [[120, 165], ["isinstance", "upfirdn2d._upfirdn2d_ref", "upfirdn2d._init", "_upfirdn2d_cuda().apply", "upfirdn2d._upfirdn2d_cuda"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._upfirdn2d_ref", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._init", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._upfirdn2d_cuda"], ["", "def", "upfirdn2d", "(", "x", ",", "f", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Pad, upsample, filter, and downsample a batch of 2D images.\n\n    Performs the following sequence of operations for each channel:\n\n    1. Upsample the image by inserting N-1 zeros after each pixel (`up`).\n\n    2. Pad the image with the specified number of zeros on each side (`padding`).\n       Negative padding corresponds to cropping the image.\n\n    3. Convolve the image with the specified 2D FIR filter (`f`), shrinking it\n       so that the footprint of all output pixels lies within the input image.\n\n    4. Downsample the image by keeping every Nth pixel (`down`).\n\n    This sequence of operations bears close resemblance to scipy.signal.upfirdn().\n    The fused op is considerably more efficient than performing the same calculation\n    using standard PyTorch ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        up:          Integer upsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        down:        Integer downsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the upsampled image. Can be a single number\n                     or a list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "impl", "in", "[", "'ref'", ",", "'cuda'", "]", "\n", "if", "impl", "==", "'cuda'", "and", "x", ".", "device", ".", "type", "==", "'cuda'", "and", "_init", "(", ")", ":", "\n", "        ", "return", "_upfirdn2d_cuda", "(", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ")", ".", "apply", "(", "x", ",", "f", ")", "\n", "", "return", "_upfirdn2d_ref", "(", "x", ",", "f", ",", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._upfirdn2d_ref": [[168, 209], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "conv2d_gradfix.conv2d.reshape", "torch.nn.functional.pad", "conv2d_gradfix.conv2d.reshape", "torch.nn.functional.pad", "f.flip.to", "f[].repeat", "isinstance", "torch.ones", "isinstance", "f.flip.flip", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d", "max", "max", "max", "max", "list", "max", "max", "range", "f.flip.unsqueeze", "f.flip.unsqueeze", "max", "max"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.utils.SmoothedValue.max"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "_upfirdn2d_ref", "(", "x", ",", "f", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `upfirdn2d()` using standard PyTorch ops.\n    \"\"\"", "\n", "# Validate arguments.", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "if", "f", "is", "None", ":", "\n", "        ", "f", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "assert", "f", ".", "dtype", "==", "torch", ".", "float32", "and", "not", "f", ".", "requires_grad", "\n", "batch_size", ",", "num_channels", ",", "in_height", ",", "in_width", "=", "x", ".", "shape", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Upsample by inserting zeros.", "\n", "x", "=", "x", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "in_height", ",", "1", ",", "in_width", ",", "1", "]", ")", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ",", "[", "0", ",", "upx", "-", "1", ",", "0", ",", "0", ",", "0", ",", "upy", "-", "1", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "in_height", "*", "upy", ",", "in_width", "*", "upx", "]", ")", "\n", "\n", "# Pad or crop.", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ",", "[", "max", "(", "padx0", ",", "0", ")", ",", "max", "(", "padx1", ",", "0", ")", ",", "max", "(", "pady0", ",", "0", ")", ",", "max", "(", "pady1", ",", "0", ")", "]", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "max", "(", "-", "pady0", ",", "0", ")", ":", "x", ".", "shape", "[", "2", "]", "-", "max", "(", "-", "pady1", ",", "0", ")", ",", "max", "(", "-", "padx0", ",", "0", ")", ":", "x", ".", "shape", "[", "3", "]", "-", "max", "(", "-", "padx1", ",", "0", ")", "]", "\n", "\n", "# Setup filter.", "\n", "f", "=", "f", "*", "(", "gain", "**", "(", "f", ".", "ndim", "/", "2", ")", ")", "\n", "f", "=", "f", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "not", "flip_filter", ":", "\n", "        ", "f", "=", "f", ".", "flip", "(", "list", "(", "range", "(", "f", ".", "ndim", ")", ")", ")", "\n", "\n", "# Convolve with the filter.", "\n", "", "f", "=", "f", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "repeat", "(", "[", "num_channels", ",", "1", "]", "+", "[", "1", "]", "*", "f", ".", "ndim", ")", "\n", "if", "f", ".", "ndim", "==", "4", ":", "\n", "        ", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ",", "groups", "=", "num_channels", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ".", "unsqueeze", "(", "2", ")", ",", "groups", "=", "num_channels", ")", "\n", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ".", "unsqueeze", "(", "3", ")", ",", "groups", "=", "num_channels", ")", "\n", "\n", "# Downsample by throwing away pixels.", "\n", "", "x", "=", "x", "[", ":", ",", ":", ",", ":", ":", "downy", ",", ":", ":", "downx", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._upfirdn2d_cuda": [[214, 269], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "ctx.save_for_backward", "upfirdn2d._get_filter_size", "isinstance", "torch.ones", "isinstance", "_plugin.upfirdn2d", "_plugin.upfirdn2d", "_plugin.upfirdn2d", "_upfirdn2d_cuda().apply", "torch.ones.unsqueeze", "numpy.sqrt", "torch.ones.unsqueeze", "numpy.sqrt", "upfirdn2d._upfirdn2d_cuda"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._upfirdn2d_cuda"], ["def", "_upfirdn2d_cuda", "(", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `upfirdn2d()` using custom ops.\n    \"\"\"", "\n", "# Parse arguments.", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "gain", ")", "\n", "if", "key", "in", "_upfirdn2d_cuda_cache", ":", "\n", "        ", "return", "_upfirdn2d_cuda_cache", "[", "key", "]", "\n", "\n", "# Forward op.", "\n", "", "class", "Upfirdn2dCuda", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "f", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "if", "f", "is", "None", ":", "\n", "                ", "f", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "y", "=", "x", "\n", "if", "f", ".", "ndim", "==", "2", ":", "\n", "                ", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ",", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "gain", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ".", "unsqueeze", "(", "0", ")", ",", "upx", ",", "1", ",", "downx", ",", "1", ",", "padx0", ",", "padx1", ",", "0", ",", "0", ",", "flip_filter", ",", "np", ".", "sqrt", "(", "gain", ")", ")", "\n", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ".", "unsqueeze", "(", "1", ")", ",", "1", ",", "upy", ",", "1", ",", "downy", ",", "0", ",", "0", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "np", ".", "sqrt", "(", "gain", ")", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "f", ")", "\n", "ctx", ".", "x_shape", "=", "x", ".", "shape", "\n", "return", "y", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "f", ",", "=", "ctx", ".", "saved_tensors", "\n", "_", ",", "_", ",", "ih", ",", "iw", "=", "ctx", ".", "x_shape", "\n", "_", ",", "_", ",", "oh", ",", "ow", "=", "dy", ".", "shape", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "fw", "-", "padx0", "-", "1", ",", "\n", "iw", "*", "upx", "-", "ow", "*", "downx", "+", "padx0", "-", "upx", "+", "1", ",", "\n", "fh", "-", "pady0", "-", "1", ",", "\n", "ih", "*", "upy", "-", "oh", "*", "downy", "+", "pady0", "-", "upy", "+", "1", ",", "\n", "]", "\n", "dx", "=", "None", "\n", "df", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "dx", "=", "_upfirdn2d_cuda", "(", "up", "=", "down", ",", "down", "=", "up", ",", "padding", "=", "p", ",", "flip_filter", "=", "(", "not", "flip_filter", ")", ",", "gain", "=", "gain", ")", ".", "apply", "(", "dy", ",", "f", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "1", "]", "\n", "return", "dx", ",", "df", "\n", "\n", "# Add to cache.", "\n", "", "", "_upfirdn2d_cuda_cache", "[", "key", "]", "=", "Upfirdn2dCuda", "\n", "return", "Upfirdn2dCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.filter2d": [[272, 305], ["upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d"], ["", "def", "filter2d", "(", "x", ",", "f", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Filter a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape matches the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        padding:     Padding with respect to the output. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "fw", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "1", ")", "//", "2", ",", "\n", "pady0", "+", "fh", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "1", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upsample2d": [[308, 344], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d"], ["", "def", "upsample2d", "(", "x", ",", "f", ",", "up", "=", "2", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Upsample a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape is a multiple of the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        up:          Integer upsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the output. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "(", "fw", "+", "upx", "-", "1", ")", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "upx", ")", "//", "2", ",", "\n", "pady0", "+", "(", "fh", "+", "upy", "-", "1", ")", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "upy", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "up", "=", "up", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", "*", "upx", "*", "upy", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.downsample2d": [[347, 383], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.ops.upfirdn2d.upfirdn2d"], ["", "def", "downsample2d", "(", "x", ",", "f", ",", "down", "=", "2", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Downsample a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape is a fraction of the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        down:        Integer downsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the input. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "(", "fw", "-", "downx", "+", "1", ")", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "downx", ")", "//", "2", ",", "\n", "pady0", "+", "(", "fh", "-", "downy", "+", "1", ")", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "downy", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "down", "=", "down", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.test_options.TestOptions.initialize": [[10, 24], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.get_default"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.initialize"], ["def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "# define shared options", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "# Dropout and Batchnorm has different behavioir during training and test.", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use eval mode during test time.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_test'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "# rewrite devalue values", "\n", "parser", ".", "set_defaults", "(", "model", "=", "'test'", ")", "\n", "# To avoid cropping, the load_size should be the same as crop_size", "\n", "parser", ".", "set_defaults", "(", "load_size", "=", "parser", ".", "get_default", "(", "'crop_size'", ")", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.train_options.TrainOptions.initialize": [[10, 42], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.initialize"], ["def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "# visdom and HTML visualization parameters", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_ncols'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'if positive, display all images in a single visdom web panel with certain number of images per row.'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'window id of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_server'", ",", "type", "=", "str", ",", "default", "=", "\"http://localhost\"", ",", "help", "=", "'visdom server of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_env'", ",", "type", "=", "str", ",", "default", "=", "'main'", ",", "help", "=", "'visdom display environment name (default is \"main\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visdom port of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--update_html_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving training results to html'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "# network saving and loading parameters", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_by_iter'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether saves model by iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "# training parameters", "\n", "parser", ".", "add_argument", "(", "'--n_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'number of epochs with the initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epochs_decay'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'number of epochs to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'lsgan'", ",", "help", "=", "'the type of GAN objective. [vanilla| lsgan | wgangp]. vanilla GAN loss is the cross-entropy objective used in the original GAN paper.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'linear'", ",", "help", "=", "'learning rate policy. [linear | step | plateau | cosine]'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.__init__": [[16, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the class; indicates the class hasn't been initailized\"\"\"", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.initialize": [[20, 68], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "\"\"\"Define the common options that are used in both training and test.\"\"\"", "\n", "# basic parameters", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "True", ",", "help", "=", "'path to images (should have subfolders trainA, trainB, valA, valB, etc)'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'experiment_name'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "# model parameters", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'cycle_gan'", ",", "help", "=", "'chooses which model to use. [cycle_gan | pix2pix | test | colorization]'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels: 3 for RGB and 1 for grayscale'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels: 3 for RGB and 1 for grayscale'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in the last conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in the first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'basic'", ",", "help", "=", "'specify discriminator architecture [basic | n_layers | pixel]. The basic model is a 70x70 PatchGAN. n_layers allows you to specify the layers in the discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'resnet_9blocks'", ",", "help", "=", "'specify generator architecture [resnet_9blocks | resnet_6blocks | unet_256 | unet_128]'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if netD==n_layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization [instance | batch | none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'xavier'", ",", "help", "=", "'network initialization [normal | xavier | kaiming | orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_dropout'", ",", "type", "=", "util", ".", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "True", ",", "help", "=", "'no dropout for the generator'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_antialias'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use stride=2 convs instead of antialiased-downsampling (sad)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_antialias_up'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use [upconv(learned filter)] instead of [upconv(hard-coded [1,3,3,1] filter), conv]'", ")", "\n", "\n", "# dataset parameters", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'unaligned'", ",", "help", "=", "'chooses how datasets are loaded. [unaligned | aligned | single | colorization]'", ")", "\n", "parser", ".", "add_argument", "(", "'--direction'", ",", "type", "=", "str", ",", "default", "=", "'AtoB'", ",", "help", "=", "'AtoB or BtoA'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_threads'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "286", ",", "help", "=", "'scale images to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'then crop to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop | crop | scale_width | scale_width_and_crop | none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size for both visdom and HTML'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_scale_max'", ",", "type", "=", "float", ",", "default", "=", "3.0", ",", "\n", "help", "=", "'(used for single image translation) Randomly scale the image by the specified factor as data augmentation.'", ")", "\n", "\n", "# additional parameters", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_iter'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'which iteration to load? if load_iter > 0, the code will load models by iter_[load_iter]; otherwise, the code will load models by [epoch]'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, print more debugging information'", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'customized suffix: opt.name = opt.name + suffix: e.g., {model}_{netG}_size{load_size}'", ")", "\n", "# parameters related to StyleGAN2-based networks", "\n", "parser", ".", "add_argument", "(", "'--stylegan2_G_num_downsampling'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Number of downsampling layers used by StyleGAN2Generator'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.gather_options": [[69, 96], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "base_options.BaseOptions.parse_known_args", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.__init__.get_option_setter", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.models.__init__.get_option_setter", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.datasets.compute_mean_std.parse_args", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize our parser with basic options(only once).\n        Add additional model-specific and dataset-specific options.\n        These options are defined in the <modify_commandline_options> function\n        in model and dataset classes.\n        \"\"\"", "\n", "if", "not", "self", ".", "initialized", ":", "# check if it has been initialized", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "# parse again with new defaults", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_name", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_name", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "# save and return the parser", "\n", "self", ".", "parser", "=", "parser", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.print_options": [[97, 121], ["sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "vars().items", "base_options.BaseOptions.parser.get_default", "open", "opt_file.write", "opt_file.write", "str", "str", "vars", "str"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.util.util.mkdirs"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Print and save options\n\n        It will print both current options and default values(if different).\n        It will save options into a text file / [checkpoints_dir] / opt.txt\n        \"\"\"", "\n", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'{}_opt.txt'", ".", "format", "(", "opt", ".", "phase", ")", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.parse": [[122, 146], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append", "base_options.BaseOptions.suffix.format", "vars"], "methods", ["home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.ygjwd12345_GLANet.options.base_options.BaseOptions.print_options"], ["", "", "def", "parse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Parse our options, create checkpoints directory suffix, and set up gpu device.\"\"\"", "\n", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "# process opt.suffix", "\n", "if", "opt", ".", "suffix", ":", "\n", "            ", "suffix", "=", "(", "'_'", "+", "opt", ".", "suffix", ".", "format", "(", "**", "vars", "(", "opt", ")", ")", ")", "if", "opt", ".", "suffix", "!=", "''", "else", "''", "\n", "opt", ".", "name", "=", "opt", ".", "name", "+", "suffix", "\n", "\n", "", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}