{"home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.mst.decode_mst": [[8, 88], ["numpy.array", "numpy.zeros", "numpy.zeros", "range", "mst.chu_liu_edmonds", "numpy.zeros", "final_edges.items", "ValueError", "energy.max.argmax", "energy.max.max", "representatives.append", "range", "numpy.ones", "ValueError", "range"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.mst.chu_liu_edmonds", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.argmax"], ["def", "decode_mst", "(", "\n", "energy", ":", "numpy", ".", "ndarray", ",", "length", ":", "int", ",", "has_labels", ":", "bool", "=", "True", "\n", ")", "->", "Tuple", "[", "numpy", ".", "ndarray", ",", "numpy", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Note: Counter to typical intuition, this function decodes the _maximum_\n    spanning tree.\n\n    Decode the optimal MST tree with the Chu-Liu-Edmonds algorithm for\n    maximum spanning arborescences on graphs.\n\n    # Parameters\n\n    energy : `numpy.ndarray`, required.\n        A tensor with shape (num_labels, timesteps, timesteps)\n        containing the energy of each edge. If has_labels is `False`,\n        the tensor should have shape (timesteps, timesteps) instead.\n    length : `int`, required.\n        The length of this sequence, as the energy may have come\n        from a padded batch.\n    has_labels : `bool`, optional, (default = `True`)\n        Whether the graph has labels or not.\n    \"\"\"", "\n", "if", "has_labels", "and", "energy", ".", "ndim", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\"The dimension of the energy array is not equal to 3.\"", ")", "\n", "", "elif", "not", "has_labels", "and", "energy", ".", "ndim", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"The dimension of the energy array is not equal to 2.\"", ")", "\n", "", "input_shape", "=", "energy", ".", "shape", "\n", "max_length", "=", "input_shape", "[", "-", "1", "]", "\n", "\n", "# Our energy matrix might have been batched -", "\n", "# here we clip it to contain only non padded tokens.", "\n", "if", "has_labels", ":", "\n", "        ", "energy", "=", "energy", "[", ":", ",", ":", "length", ",", ":", "length", "]", "\n", "# get best label for each edge.", "\n", "label_id_matrix", "=", "energy", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "energy", "=", "energy", ".", "max", "(", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "energy", "=", "energy", "[", ":", "length", ",", ":", "length", "]", "\n", "label_id_matrix", "=", "None", "\n", "# get original score matrix", "\n", "", "original_score_matrix", "=", "energy", "\n", "# initialize score matrix to original score matrix", "\n", "score_matrix", "=", "numpy", ".", "array", "(", "original_score_matrix", ",", "copy", "=", "True", ")", "\n", "\n", "old_input", "=", "numpy", ".", "zeros", "(", "[", "length", ",", "length", "]", ",", "dtype", "=", "numpy", ".", "int32", ")", "\n", "old_output", "=", "numpy", ".", "zeros", "(", "[", "length", ",", "length", "]", ",", "dtype", "=", "numpy", ".", "int32", ")", "\n", "current_nodes", "=", "[", "True", "for", "_", "in", "range", "(", "length", ")", "]", "\n", "representatives", ":", "List", "[", "Set", "[", "int", "]", "]", "=", "[", "]", "\n", "\n", "for", "node1", "in", "range", "(", "length", ")", ":", "\n", "        ", "original_score_matrix", "[", "node1", ",", "node1", "]", "=", "0.0", "\n", "score_matrix", "[", "node1", ",", "node1", "]", "=", "0.0", "\n", "representatives", ".", "append", "(", "{", "node1", "}", ")", "\n", "\n", "for", "node2", "in", "range", "(", "node1", "+", "1", ",", "length", ")", ":", "\n", "            ", "old_input", "[", "node1", ",", "node2", "]", "=", "node1", "\n", "old_output", "[", "node1", ",", "node2", "]", "=", "node2", "\n", "\n", "old_input", "[", "node2", ",", "node1", "]", "=", "node2", "\n", "old_output", "[", "node2", ",", "node1", "]", "=", "node1", "\n", "\n", "", "", "final_edges", ":", "Dict", "[", "int", ",", "int", "]", "=", "{", "}", "\n", "\n", "# The main algorithm operates inplace.", "\n", "chu_liu_edmonds", "(", "\n", "length", ",", "score_matrix", ",", "current_nodes", ",", "final_edges", ",", "old_input", ",", "old_output", ",", "representatives", "\n", ")", "\n", "\n", "heads", "=", "numpy", ".", "zeros", "(", "[", "max_length", "]", ",", "numpy", ".", "int32", ")", "\n", "if", "has_labels", ":", "\n", "        ", "head_type", "=", "numpy", ".", "ones", "(", "[", "max_length", "]", ",", "numpy", ".", "int32", ")", "\n", "", "else", ":", "\n", "        ", "head_type", "=", "None", "\n", "\n", "", "for", "child", ",", "parent", "in", "final_edges", ".", "items", "(", ")", ":", "\n", "        ", "heads", "[", "child", "]", "=", "parent", "\n", "if", "has_labels", ":", "\n", "            ", "head_type", "[", "child", "]", "=", "label_id_matrix", "[", "parent", ",", "child", "]", "\n", "\n", "", "", "return", "heads", ",", "head_type", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.mst.chu_liu_edmonds": [[90, 251], ["range", "mst._find_cycle", "range", "enumerate", "mst.chu_liu_edmonds", "enumerate", "parents.append", "range", "float", "float", "considered_representatives.append", "range", "set", "considered_representatives[].add", "representatives[].add"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.mst._find_cycle", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.mst.chu_liu_edmonds"], ["", "def", "chu_liu_edmonds", "(", "\n", "length", ":", "int", ",", "\n", "score_matrix", ":", "numpy", ".", "ndarray", ",", "\n", "current_nodes", ":", "List", "[", "bool", "]", ",", "\n", "final_edges", ":", "Dict", "[", "int", ",", "int", "]", ",", "\n", "old_input", ":", "numpy", ".", "ndarray", ",", "\n", "old_output", ":", "numpy", ".", "ndarray", ",", "\n", "representatives", ":", "List", "[", "Set", "[", "int", "]", "]", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Applies the chu-liu-edmonds algorithm recursively\n    to a graph with edge weights defined by score_matrix.\n\n    Note that this function operates in place, so variables\n    will be modified.\n\n    # Parameters\n\n    length : `int`, required.\n        The number of nodes.\n    score_matrix : `numpy.ndarray`, required.\n        The score matrix representing the scores for pairs\n        of nodes.\n    current_nodes : `List[bool]`, required.\n        The nodes which are representatives in the graph.\n        A representative at it's most basic represents a node,\n        but as the algorithm progresses, individual nodes will\n        represent collapsed cycles in the graph.\n    final_edges : `Dict[int, int]`, required.\n        An empty dictionary which will be populated with the\n        nodes which are connected in the maximum spanning tree.\n    old_input : `numpy.ndarray`, required.\n    old_output : `numpy.ndarray`, required.\n    representatives : `List[Set[int]]`, required.\n        A list containing the nodes that a particular node\n        is representing at this iteration in the graph.\n\n    # Returns\n\n    Nothing - all variables are modified in place.\n\n    \"\"\"", "\n", "# Set the initial graph to be the greedy best one.", "\n", "parents", "=", "[", "-", "1", "]", "\n", "for", "node1", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "        ", "parents", ".", "append", "(", "0", ")", "\n", "if", "current_nodes", "[", "node1", "]", ":", "\n", "            ", "max_score", "=", "score_matrix", "[", "0", ",", "node1", "]", "\n", "for", "node2", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "                ", "if", "node2", "==", "node1", "or", "not", "current_nodes", "[", "node2", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "new_score", "=", "score_matrix", "[", "node2", ",", "node1", "]", "\n", "if", "new_score", ">", "max_score", ":", "\n", "                    ", "max_score", "=", "new_score", "\n", "parents", "[", "node1", "]", "=", "node2", "\n", "\n", "# Check if this solution has a cycle.", "\n", "", "", "", "", "has_cycle", ",", "cycle", "=", "_find_cycle", "(", "parents", ",", "length", ",", "current_nodes", ")", "\n", "# If there are no cycles, find all edges and return.", "\n", "if", "not", "has_cycle", ":", "\n", "        ", "final_edges", "[", "0", "]", "=", "-", "1", "\n", "for", "node", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "            ", "if", "not", "current_nodes", "[", "node", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "parent", "=", "old_input", "[", "parents", "[", "node", "]", ",", "node", "]", "\n", "child", "=", "old_output", "[", "parents", "[", "node", "]", ",", "node", "]", "\n", "final_edges", "[", "child", "]", "=", "parent", "\n", "", "return", "\n", "\n", "# Otherwise, we have a cycle so we need to remove an edge.", "\n", "# From here until the recursive call is the contraction stage of the algorithm.", "\n", "", "cycle_weight", "=", "0.0", "\n", "# Find the weight of the cycle.", "\n", "index", "=", "0", "\n", "for", "node", "in", "cycle", ":", "\n", "        ", "index", "+=", "1", "\n", "cycle_weight", "+=", "score_matrix", "[", "parents", "[", "node", "]", ",", "node", "]", "\n", "\n", "# For each node in the graph, find the maximum weight incoming", "\n", "# and outgoing edge into the cycle.", "\n", "", "cycle_representative", "=", "cycle", "[", "0", "]", "\n", "for", "node", "in", "range", "(", "length", ")", ":", "\n", "        ", "if", "not", "current_nodes", "[", "node", "]", "or", "node", "in", "cycle", ":", "\n", "            ", "continue", "\n", "\n", "", "in_edge_weight", "=", "float", "(", "\"-inf\"", ")", "\n", "in_edge", "=", "-", "1", "\n", "out_edge_weight", "=", "float", "(", "\"-inf\"", ")", "\n", "out_edge", "=", "-", "1", "\n", "\n", "for", "node_in_cycle", "in", "cycle", ":", "\n", "            ", "if", "score_matrix", "[", "node_in_cycle", ",", "node", "]", ">", "in_edge_weight", ":", "\n", "                ", "in_edge_weight", "=", "score_matrix", "[", "node_in_cycle", ",", "node", "]", "\n", "in_edge", "=", "node_in_cycle", "\n", "\n", "# Add the new edge score to the cycle weight", "\n", "# and subtract the edge we're considering removing.", "\n", "", "score", "=", "(", "\n", "cycle_weight", "\n", "+", "score_matrix", "[", "node", ",", "node_in_cycle", "]", "\n", "-", "score_matrix", "[", "parents", "[", "node_in_cycle", "]", ",", "node_in_cycle", "]", "\n", ")", "\n", "\n", "if", "score", ">", "out_edge_weight", ":", "\n", "                ", "out_edge_weight", "=", "score", "\n", "out_edge", "=", "node_in_cycle", "\n", "\n", "", "", "score_matrix", "[", "cycle_representative", ",", "node", "]", "=", "in_edge_weight", "\n", "old_input", "[", "cycle_representative", ",", "node", "]", "=", "old_input", "[", "in_edge", ",", "node", "]", "\n", "old_output", "[", "cycle_representative", ",", "node", "]", "=", "old_output", "[", "in_edge", ",", "node", "]", "\n", "\n", "score_matrix", "[", "node", ",", "cycle_representative", "]", "=", "out_edge_weight", "\n", "old_output", "[", "node", ",", "cycle_representative", "]", "=", "old_output", "[", "node", ",", "out_edge", "]", "\n", "old_input", "[", "node", ",", "cycle_representative", "]", "=", "old_input", "[", "node", ",", "out_edge", "]", "\n", "\n", "# For the next recursive iteration, we want to consider the cycle as a", "\n", "# single node. Here we collapse the cycle into the first node in the", "\n", "# cycle (first node is arbitrary), set all the other nodes not be", "\n", "# considered in the next iteration. We also keep track of which", "\n", "# representatives we are considering this iteration because we need", "\n", "# them below to check if we're done.", "\n", "", "considered_representatives", ":", "List", "[", "Set", "[", "int", "]", "]", "=", "[", "]", "\n", "for", "i", ",", "node_in_cycle", "in", "enumerate", "(", "cycle", ")", ":", "\n", "        ", "considered_representatives", ".", "append", "(", "set", "(", ")", ")", "\n", "if", "i", ">", "0", ":", "\n", "# We need to consider at least one", "\n", "# node in the cycle, arbitrarily choose", "\n", "# the first.", "\n", "            ", "current_nodes", "[", "node_in_cycle", "]", "=", "False", "\n", "\n", "", "for", "node", "in", "representatives", "[", "node_in_cycle", "]", ":", "\n", "            ", "considered_representatives", "[", "i", "]", ".", "add", "(", "node", ")", "\n", "if", "i", ">", "0", ":", "\n", "                ", "representatives", "[", "cycle_representative", "]", ".", "add", "(", "node", ")", "\n", "\n", "", "", "", "chu_liu_edmonds", "(", "\n", "length", ",", "score_matrix", ",", "current_nodes", ",", "final_edges", ",", "old_input", ",", "old_output", ",", "representatives", "\n", ")", "\n", "\n", "# Expansion stage.", "\n", "# check each node in cycle, if one of its representatives", "\n", "# is a key in the final_edges, it is the one we need.", "\n", "found", "=", "False", "\n", "key_node", "=", "-", "1", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "cycle", ")", ":", "\n", "        ", "for", "cycle_rep", "in", "considered_representatives", "[", "i", "]", ":", "\n", "            ", "if", "cycle_rep", "in", "final_edges", ":", "\n", "                ", "key_node", "=", "node", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "if", "found", ":", "\n", "            ", "break", "\n", "\n", "", "", "previous", "=", "parents", "[", "key_node", "]", "\n", "while", "previous", "!=", "key_node", ":", "\n", "        ", "child", "=", "old_output", "[", "parents", "[", "previous", "]", ",", "previous", "]", "\n", "parent", "=", "old_input", "[", "parents", "[", "previous", "]", ",", "previous", "]", "\n", "final_edges", "[", "child", "]", "=", "parent", "\n", "previous", "=", "parents", "[", "previous", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.mst._find_cycle": [[253, 295], ["set", "range", "set", "set.add", "list", "range", "set.add", "set.add", "set.add"], "function", ["None"], ["", "", "def", "_find_cycle", "(", "\n", "parents", ":", "List", "[", "int", "]", ",", "length", ":", "int", ",", "current_nodes", ":", "List", "[", "bool", "]", "\n", ")", "->", "Tuple", "[", "bool", ",", "List", "[", "int", "]", "]", ":", "\n", "\n", "    ", "added", "=", "[", "False", "for", "_", "in", "range", "(", "length", ")", "]", "\n", "added", "[", "0", "]", "=", "True", "\n", "cycle", "=", "set", "(", ")", "\n", "has_cycle", "=", "False", "\n", "for", "i", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "        ", "if", "has_cycle", ":", "\n", "            ", "break", "\n", "# don't redo nodes we've already", "\n", "# visited or aren't considering.", "\n", "", "if", "added", "[", "i", "]", "or", "not", "current_nodes", "[", "i", "]", ":", "\n", "            ", "continue", "\n", "# Initialize a new possible cycle.", "\n", "", "this_cycle", "=", "set", "(", ")", "\n", "this_cycle", ".", "add", "(", "i", ")", "\n", "added", "[", "i", "]", "=", "True", "\n", "has_cycle", "=", "True", "\n", "next_node", "=", "i", "\n", "while", "parents", "[", "next_node", "]", "not", "in", "this_cycle", ":", "\n", "            ", "next_node", "=", "parents", "[", "next_node", "]", "\n", "# If we see a node we've already processed,", "\n", "# we can stop, because the node we are", "\n", "# processing would have been in that cycle.", "\n", "if", "added", "[", "next_node", "]", ":", "\n", "                ", "has_cycle", "=", "False", "\n", "break", "\n", "", "added", "[", "next_node", "]", "=", "True", "\n", "this_cycle", ".", "add", "(", "next_node", ")", "\n", "\n", "", "if", "has_cycle", ":", "\n", "            ", "original", "=", "next_node", "\n", "cycle", ".", "add", "(", "original", ")", "\n", "next_node", "=", "parents", "[", "original", "]", "\n", "while", "next_node", "!=", "original", ":", "\n", "                ", "cycle", ".", "add", "(", "next_node", ")", "\n", "next_node", "=", "parents", "[", "next_node", "]", "\n", "", "break", "\n", "\n", "", "", "return", "has_cycle", ",", "list", "(", "cycle", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.BucketIterator.__iter__": [[166, 171], ["text2array.ShuffleIterator", "text2array.BatchIterator", "len", "len"], "methods", ["None"], ["    ", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "ss", "in", "self", ".", "_buckets", ":", "\n", "            ", "if", "self", ".", "_shuf", "and", "len", "(", "ss", ")", ">", "1", ":", "\n", "                ", "ss", "=", "ShuffleIterator", "(", "ss", ",", "key", "=", "lambda", "s", ":", "len", "(", "s", "[", "\"words\"", "]", ")", ",", "rng", "=", "self", ".", "_rng", ")", "\n", "", "yield", "from", "text2array", ".", "BatchIterator", "(", "ss", ",", "self", ".", "_bsz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.default": [[48, 86], ["torch.cuda.is_available"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "default", "(", ")", ":", "\n", "# directory to save finetuning artifacts", "\n", "    ", "artifacts_dir", "=", "\"ft_artifacts\"", "\n", "# whether to overwrite existing artifacts directory", "\n", "overwrite", "=", "False", "\n", "# discard train/dev/test samples with length greater than these numbers", "\n", "max_length", "=", "{", "}", "\n", "# load source models from these directories and parameters {key: (load_from, load_params)}", "\n", "load_src", "=", "{", "}", "\n", "# whether to treat keys in load_src as lang codes", "\n", "src_key_as_lang", "=", "False", "\n", "# the main source to start finetuning from", "\n", "main_src", "=", "\"\"", "\n", "# device to run on [cpu, cuda]", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "# path to word embedding in word2vec format", "\n", "word_emb_path", "=", "\"wiki.en.vec\"", "\n", "# whether to freeze word and tag embedding", "\n", "freeze", "=", "False", "\n", "# cumulative prob threshold", "\n", "thresh", "=", "0.95", "\n", "# whether to operate in the space of projective trees", "\n", "projective", "=", "False", "\n", "# whether to consider multi-root trees (otherwise only single-root trees)", "\n", "multiroot", "=", "False", "\n", "# batch size", "\n", "batch_size", "=", "16", "\n", "# learning rate", "\n", "lr", "=", "1e-5", "\n", "# coefficient of L2 regularization against initial parameters", "\n", "l2_coef", "=", "1.0", "\n", "# max number of epochs", "\n", "max_epoch", "=", "5", "\n", "# whether to save the final samples as an artifact", "\n", "save_samples", "=", "False", "\n", "# load samples from this file (*.pkl)", "\n", "load_samples_from", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.ahmadetal": [[88, 93], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "ahmadetal", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "100", "}", "\n", "batch_size", "=", "80", "\n", "corpus", "=", "{", "\"normalize_digits\"", ":", "True", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.heetal_eval_setup": [[95, 98], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "heetal_eval_setup", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"dev\"", ":", "150", ",", "\"test\"", ":", "150", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.nearby": [[100, 105], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "nearby", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "30", "}", "\n", "lr", "=", "2.1e-5", "\n", "l2_coef", "=", "0.079", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.distant": [[107, 112], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "distant", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "30", "}", "\n", "lr", "=", "5.9e-5", "\n", "l2_coef", "=", "1.2e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.repr_nearby": [[114, 119], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "repr_nearby", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "30", "}", "\n", "lr", "=", "1.7e-5", "\n", "l2_coef", "=", "4e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.repr_distant": [[121, 126], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "repr_distant", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "30", "}", "\n", "lr", "=", "9.7e-5", "\n", "l2_coef", "=", "0.084", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.prag_nearby": [[128, 133], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "prag_nearby", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "30", "}", "\n", "lr", "=", "4.4e-5", "\n", "l2_coef", "=", "2.7e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.prag_distant": [[135, 140], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "prag_distant", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "30", "}", "\n", "lr", "=", "8.5e-5", "\n", "l2_coef", "=", "2.8e-5", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.prag_proj_nearby": [[142, 148], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "prag_proj_nearby", "(", ")", ":", "\n", "    ", "projective", "=", "True", "\n", "max_length", "=", "{", "\"train\"", ":", "20", "}", "\n", "lr", "=", "9.4e-5", "\n", "l2_coef", "=", "2.4e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.prag_proj_distant": [[150, 156], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "prag_proj_distant", "(", ")", ":", "\n", "    ", "projective", "=", "True", "\n", "max_length", "=", "{", "\"train\"", ":", "20", "}", "\n", "lr", "=", "9.4e-5", "\n", "l2_coef", "=", "2.4e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.testrun": [[158, 163], ["dict"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "testrun", "(", ")", ":", "\n", "    ", "seed", "=", "12345", "\n", "max_epoch", "=", "2", "\n", "corpus", "=", "dict", "(", "portion", "=", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.run_eval": [[173, 221], ["rnnr.Runner", "rnnr.Runner.on", "rnnr.Runner.on", "sum", "rnnr.attachments.ProgressBar().attach_on", "rnnr.attachments.SumReducer().attach_on", "aatrn.compute_aatrn_loss", "aatrn.compute_aatrn_loss.item", "[].size", "rnnr.attachments.MeanReducer().attach_on", "torch.no_grad", "rnnr.Runner.run", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_total_arc_type_scores", "callbacks.predict_batch", "callbacks.evaluate_batch", "callbacks.get_n_items", "[].bool", "len", "rnnr.attachments.ProgressBar", "rnnr.attachments.SumReducer", "run_pptx.BucketIterator", "rnnr.attachments.MeanReducer", "len"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.aatrn.compute_aatrn_loss", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.predict_batch", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.evaluate_batch", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.get_n_items"], ["", "", "", "@", "ex", ".", "capture", "\n", "def", "run_eval", "(", "\n", "model", ",", "\n", "vocab", ",", "\n", "samples", ",", "\n", "compute_loss", "=", "True", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "projective", "=", "False", ",", "\n", "multiroot", "=", "True", ",", "\n", "batch_size", "=", "32", ",", "\n", ")", ":", "\n", "    ", "runner", "=", "Runner", "(", ")", "\n", "runner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ",", "training", "=", "False", ")", ",", "\n", "compute_total_arc_type_scores", "(", "model", ",", "vocab", ")", ",", "\n", "predict_batch", "(", "projective", ",", "multiroot", ")", ",", "\n", "evaluate_batch", "(", ")", ",", "\n", "get_n_items", "(", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "@", "runner", ".", "on", "(", "Event", ".", "BATCH", ")", "\n", "def", "maybe_compute_loss", "(", "state", ")", ":", "\n", "        ", "if", "not", "compute_loss", ":", "\n", "            ", "return", "\n", "\n", "", "pptx_loss", "=", "compute_aatrn_loss", "(", "\n", "state", "[", "\"total_arc_type_scores\"", "]", ",", "\n", "state", "[", "\"batch\"", "]", "[", "\"pptx_mask\"", "]", ".", "bool", "(", ")", ",", "\n", "projective", "=", "projective", ",", "\n", "multiroot", "=", "multiroot", ",", "\n", ")", "\n", "state", "[", "\"pptx_loss\"", "]", "=", "pptx_loss", ".", "item", "(", ")", "\n", "state", "[", "\"size\"", "]", "=", "state", "[", "\"batch\"", "]", "[", "\"words\"", "]", ".", "size", "(", "0", ")", "\n", "\n", "", "n_tokens", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", ")", "\n", "ProgressBar", "(", "leave", "=", "False", ",", "total", "=", "n_tokens", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "SumReducer", "(", "\"counts\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "if", "compute_loss", ":", "\n", "        ", "MeanReducer", "(", "\"mean_pptx_loss\"", ",", "value", "=", "\"pptx_loss\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "runner", ".", "run", "(", "BucketIterator", "(", "samples", ",", "lambda", "s", ":", "len", "(", "s", "[", "\"words\"", "]", ")", ",", "batch_size", ")", ")", "\n", "\n", "", "return", "runner", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_pptx.finetune": [[223, 474], ["pathlib.Path", "_log.info", "pathlib.Path.mkdir", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "srcs.append", "enumerate", "_log.info", "_log.info", "path.write_text", "_log.info", "path.write_text", "serialization.load.word_emb.requires_grad_", "serialization.load.tag_emb.requires_grad_", "_log.info", "torch.optim.Adam", "rnnr.Runner", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.attachments.EpochTimer().attach_on", "sum", "rnnr.attachments.ProgressBar().attach_on", "text2array.ShuffleIterator", "_log.info", "_log.info", "sum", "_log.info", "_log.info", "_log.info", "_log.info", "serialization.load", "_log.info", "serialization.load.extend", "_log.info", "_log.info", "serialization.load", "_log.info", "serialization.load.load_state_dict", "_log.info", "serialization.load.to", "serialization.dump", "serialization.dump", "_log.info", "list", "_log.info", "utils.report_log_ntrees_stats", "serialization.load.parameters", "p.clone().detach", "[].bool", "aatrn.compute_aatrn_loss", "mask.size", "mask.long().sum().item", "_log.info", "run_pptx.run_eval", "utils.print_accs", "_log.info", "_run.log_scalar", "_log.info", "run_pptx.run_eval", "utils.print_accs", "callbacks.save_state_dict", "run_pptx.BucketIterator", "rnnr.Runner.run", "ValueError", "open", "pickle.load", "list", "len", "_log.info", "srcs.remove", "len", "pathlib.Path", "path.read_text", "_log.info", "itertools.chain", "len", "list", "pathlib.Path", "path.read_text", "pathlib.Path", "torch.load", "torch.no_grad", "torch.nn.Embedding.from_pretrained", "enumerate", "rnnr.Runner", "rnnr.Runner.state.update", "rnnr.Runner.on", "rnnr.Runner.on", "sum", "rnnr.attachments.ProgressBar().attach_on", "_log.info", "zip", "_log.info", "utils.report_log_ntrees_stats", "_log.info", "range", "open", "pickle.dump", "serialization.load.stoi", "serialization.load.named_parameters", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_l2_loss", "callbacks.compute_total_arc_type_scores", "aatrn.compute_aatrn_loss.item", "state[].item", "loss.item", "callbacks.update_params", "callbacks.log_grads", "callbacks.log_stats", "rnnr.attachments.EpochTimer", "len", "rnnr.attachments.ProgressBar", "_log.info", "ingredients.corpus.read_samples", "len", "len", "serialization.load.stoi", "utils.extend_word_embedding", "all", "[].all", "aatrn.compute_ambiguous_arcs_mask", "state[].extend", "state[].extend", "[].numel", "torch.no_grad", "rnnr.Runner.run", "len", "len", "len", "len", "torch.tensor.tolist", "len", "len", "len", "torch.tensor", "p.clone", "mask.long().sum", "len", "pickle.load.values", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_total_arc_type_scores", "[].tolist", "len", "rnnr.attachments.ProgressBar", "run_pptx.BucketIterator", "torch.tensor.dim", "torch.tensor", "torch.zeros().bool", "max_length.get", "mask.long", "len", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.report_log_ntrees_stats", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.aatrn.compute_aatrn_loss", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.save_state_dict", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.report_log_ntrees_stats", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_l2_loss", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.update_params", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_grads", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_stats", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.extend_word_embedding", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.aatrn.compute_ambiguous_arcs_mask", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores"], ["", "@", "ex", ".", "automain", "\n", "def", "finetune", "(", "\n", "corpus", ",", "\n", "_log", ",", "\n", "_run", ",", "\n", "_rnd", ",", "\n", "max_length", "=", "None", ",", "\n", "artifacts_dir", "=", "\"ft_artifacts\"", ",", "\n", "load_samples_from", "=", "None", ",", "\n", "overwrite", "=", "False", ",", "\n", "load_src", "=", "None", ",", "\n", "src_key_as_lang", "=", "False", ",", "\n", "main_src", "=", "None", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "word_emb_path", "=", "\"wiki.id.vec\"", ",", "\n", "freeze", "=", "False", ",", "\n", "thresh", "=", "0.95", ",", "\n", "projective", "=", "False", ",", "\n", "multiroot", "=", "True", ",", "\n", "batch_size", "=", "32", ",", "\n", "save_samples", "=", "False", ",", "\n", "lr", "=", "1e-5", ",", "\n", "l2_coef", "=", "1.0", ",", "\n", "max_epoch", "=", "5", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Finetune a trained model with PPTX.\"\"\"", "\n", "if", "max_length", "is", "None", ":", "\n", "        ", "max_length", "=", "{", "}", "\n", "", "if", "load_src", "is", "None", ":", "\n", "        ", "load_src", "=", "{", "\"src\"", ":", "(", "\"artifacts\"", ",", "\"model.pth\"", ")", "}", "\n", "main_src", "=", "\"src\"", "\n", "", "elif", "main_src", "not", "in", "load_src", ":", "\n", "        ", "raise", "ValueError", "(", "f\"{main_src} not found in load_src\"", ")", "\n", "\n", "", "artifacts_dir", "=", "Path", "(", "artifacts_dir", ")", "\n", "_log", ".", "info", "(", "\"Creating artifacts directory %s\"", ",", "artifacts_dir", ")", "\n", "artifacts_dir", ".", "mkdir", "(", "exist_ok", "=", "overwrite", ")", "\n", "\n", "if", "load_samples_from", ":", "\n", "        ", "_log", ".", "info", "(", "\"Loading samples from %s\"", ",", "load_samples_from", ")", "\n", "with", "open", "(", "load_samples_from", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "samples", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "samples", "=", "{", "\n", "wh", ":", "list", "(", "read_samples", "(", "which", "=", "wh", ",", "max_length", "=", "max_length", ".", "get", "(", "wh", ")", ")", ")", "\n", "for", "wh", "in", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", "]", "\n", "}", "\n", "", "for", "wh", "in", "samples", ":", "\n", "        ", "n_toks", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "wh", "]", ")", "\n", "_log", ".", "info", "(", "\"Read %d %s samples and %d tokens\"", ",", "len", "(", "samples", "[", "wh", "]", ")", ",", "wh", ",", "n_toks", ")", "\n", "\n", "", "kv", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "word_emb_path", ")", "\n", "\n", "if", "load_samples_from", ":", "\n", "        ", "_log", ".", "info", "(", "\"Skipping non-main src because samples are processed and loaded\"", ")", "\n", "srcs", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "srcs", "=", "[", "src", "for", "src", "in", "load_src", "if", "src", "!=", "main_src", "]", "\n", "if", "src_key_as_lang", "and", "corpus", "[", "\"lang\"", "]", "in", "srcs", ":", "\n", "            ", "_log", ".", "info", "(", "\"Removing %s from src parsers because it's the tgt\"", ",", "corpus", "[", "\"lang\"", "]", ")", "\n", "srcs", ".", "remove", "(", "corpus", "[", "\"lang\"", "]", ")", "\n", "", "", "srcs", ".", "append", "(", "main_src", ")", "\n", "\n", "for", "src_i", ",", "src", "in", "enumerate", "(", "srcs", ")", ":", "\n", "        ", "_log", ".", "info", "(", "\"Processing src %s [%d/%d]\"", ",", "src", ",", "src_i", "+", "1", ",", "len", "(", "srcs", ")", ")", "\n", "load_from", ",", "load_params", "=", "load_src", "[", "src", "]", "\n", "path", "=", "Path", "(", "load_from", ")", "/", "\"vocab.yml\"", "\n", "_log", ".", "info", "(", "\"Loading %s vocabulary from %s\"", ",", "src", ",", "path", ")", "\n", "vocab", "=", "load", "(", "path", ".", "read_text", "(", "encoding", "=", "\"utf8\"", ")", ")", "\n", "for", "name", "in", "vocab", ":", "\n", "            ", "_log", ".", "info", "(", "\"Found %d %s\"", ",", "len", "(", "vocab", "[", "name", "]", ")", ",", "name", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Extending %s vocabulary with target words\"", ",", "src", ")", "\n", "vocab", ".", "extend", "(", "chain", "(", "*", "samples", ".", "values", "(", ")", ")", ",", "[", "\"words\"", "]", ")", "\n", "_log", ".", "info", "(", "\"Found %d words now\"", ",", "len", "(", "vocab", "[", "\"words\"", "]", ")", ")", "\n", "\n", "samples_", "=", "{", "wh", ":", "list", "(", "vocab", ".", "stoi", "(", "samples", "[", "wh", "]", ")", ")", "for", "wh", "in", "samples", "}", "\n", "\n", "path", "=", "Path", "(", "load_from", ")", "/", "\"model.yml\"", "\n", "_log", ".", "info", "(", "\"Loading %s model from metadata %s\"", ",", "src", ",", "path", ")", "\n", "model", "=", "load", "(", "path", ".", "read_text", "(", "encoding", "=", "\"utf8\"", ")", ")", "\n", "\n", "path", "=", "Path", "(", "load_from", ")", "/", "load_params", "\n", "_log", ".", "info", "(", "\"Loading %s model parameters from %s\"", ",", "src", ",", "path", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "\"cpu\"", ")", ")", "\n", "\n", "_log", ".", "info", "(", "\"Creating %s extended word embedding layer\"", ",", "src", ")", "\n", "assert", "model", ".", "word_emb", ".", "embedding_dim", "==", "kv", ".", "vector_size", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "word_emb", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "extend_word_embedding", "(", "model", ".", "word_emb", ".", "weight", ",", "vocab", "[", "\"words\"", "]", ",", "kv", ")", "\n", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "for", "wh", "in", "[", "\"train\"", ",", "\"dev\"", "]", ":", "\n", "            ", "if", "load_samples_from", ":", "\n", "                ", "assert", "all", "(", "\"pptx_mask\"", "in", "s", "for", "s", "in", "samples", "[", "wh", "]", ")", "\n", "continue", "\n", "\n", "", "for", "i", ",", "s", "in", "enumerate", "(", "samples_", "[", "wh", "]", ")", ":", "\n", "                ", "s", "[", "\"_id\"", "]", "=", "i", "\n", "\n", "", "runner", "=", "Runner", "(", ")", "\n", "runner", ".", "state", ".", "update", "(", "{", "\"pptx_masks\"", ":", "[", "]", ",", "\"_ids\"", ":", "[", "]", "}", ")", "\n", "runner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ",", "training", "=", "False", ")", ",", "\n", "compute_total_arc_type_scores", "(", "model", ",", "vocab", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "@", "runner", ".", "on", "(", "Event", ".", "BATCH", ")", "\n", "def", "compute_pptx_ambiguous_arcs_mask", "(", "state", ")", ":", "\n", "                ", "assert", "state", "[", "\"batch\"", "]", "[", "\"mask\"", "]", ".", "all", "(", ")", "\n", "scores", "=", "state", "[", "\"total_arc_type_scores\"", "]", "\n", "pptx_mask", "=", "compute_ambiguous_arcs_mask", "(", "scores", ",", "thresh", ",", "projective", ",", "multiroot", ")", "\n", "state", "[", "\"pptx_masks\"", "]", ".", "extend", "(", "pptx_mask", ")", "\n", "state", "[", "\"_ids\"", "]", ".", "extend", "(", "state", "[", "\"batch\"", "]", "[", "\"_id\"", "]", ".", "tolist", "(", ")", ")", "\n", "state", "[", "\"n_items\"", "]", "=", "state", "[", "\"batch\"", "]", "[", "\"words\"", "]", ".", "numel", "(", ")", "\n", "\n", "", "n_toks", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples_", "[", "wh", "]", ")", "\n", "ProgressBar", "(", "total", "=", "n_toks", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "\n", "_log", ".", "info", "(", "\"Computing PPTX ambiguous arcs mask for %s set with source %s\"", ",", "wh", ",", "src", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "runner", ".", "run", "(", "BucketIterator", "(", "samples_", "[", "wh", "]", ",", "lambda", "s", ":", "len", "(", "s", "[", "\"words\"", "]", ")", ",", "batch_size", ")", ")", "\n", "\n", "", "assert", "len", "(", "runner", ".", "state", "[", "\"pptx_masks\"", "]", ")", "==", "len", "(", "samples_", "[", "wh", "]", ")", "\n", "assert", "len", "(", "runner", ".", "state", "[", "\"_ids\"", "]", ")", "==", "len", "(", "samples_", "[", "wh", "]", ")", "\n", "for", "i", ",", "pptx_mask", "in", "zip", "(", "runner", ".", "state", "[", "\"_ids\"", "]", ",", "runner", ".", "state", "[", "\"pptx_masks\"", "]", ")", ":", "\n", "                ", "samples_", "[", "wh", "]", "[", "i", "]", "[", "\"pptx_mask\"", "]", "=", "pptx_mask", ".", "tolist", "(", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Computing (log) number of trees stats on %s set\"", ",", "wh", ")", "\n", "report_log_ntrees_stats", "(", "\n", "samples_", "[", "wh", "]", ",", "\"pptx_mask\"", ",", "batch_size", ",", "projective", ",", "multiroot", "\n", ")", "\n", "\n", "_log", ".", "info", "(", "\"Combining the ambiguous arcs mask\"", ")", "\n", "assert", "len", "(", "samples_", "[", "wh", "]", ")", "==", "len", "(", "samples", "[", "wh", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "samples_", "[", "wh", "]", ")", ")", ":", "\n", "                ", "pptx_mask", "=", "torch", ".", "tensor", "(", "samples_", "[", "wh", "]", "[", "i", "]", "[", "\"pptx_mask\"", "]", ")", "\n", "assert", "pptx_mask", ".", "dim", "(", ")", "==", "3", "\n", "if", "\"pptx_mask\"", "in", "samples", "[", "wh", "]", "[", "i", "]", ":", "\n", "                    ", "old_mask", "=", "torch", ".", "tensor", "(", "samples", "[", "wh", "]", "[", "i", "]", "[", "\"pptx_mask\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "old_mask", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "1", ")", ".", "bool", "(", ")", "\n", "", "samples", "[", "wh", "]", "[", "i", "]", "[", "\"pptx_mask\"", "]", "=", "(", "old_mask", "|", "pptx_mask", ")", ".", "tolist", "(", ")", "\n", "\n", "", "", "", "assert", "src", "==", "main_src", "\n", "_log", ".", "info", "(", "\"Main source is %s\"", ",", "src", ")", "\n", "\n", "path", "=", "artifacts_dir", "/", "\"vocab.yml\"", "\n", "_log", ".", "info", "(", "\"Saving vocabulary to %s\"", ",", "path", ")", "\n", "path", ".", "write_text", "(", "dump", "(", "vocab", ")", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "path", "=", "artifacts_dir", "/", "\"model.yml\"", "\n", "_log", ".", "info", "(", "\"Saving model metadata to %s\"", ",", "path", ")", "\n", "path", ".", "write_text", "(", "dump", "(", "model", ")", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "if", "save_samples", ":", "\n", "        ", "path", "=", "artifacts_dir", "/", "\"samples.pkl\"", "\n", "_log", ".", "info", "(", "\"Saving samples to %s\"", ",", "path", ")", "\n", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "samples", ",", "f", ")", "\n", "\n", "", "", "samples", "=", "{", "wh", ":", "list", "(", "vocab", ".", "stoi", "(", "samples", "[", "wh", "]", ")", ")", "for", "wh", "in", "samples", "}", "\n", "\n", "for", "wh", "in", "[", "\"train\"", ",", "\"dev\"", "]", ":", "\n", "        ", "_log", ".", "info", "(", "\"Computing (log) number of trees stats on %s set\"", ",", "wh", ")", "\n", "report_log_ntrees_stats", "(", "samples", "[", "wh", "]", ",", "\"pptx_mask\"", ",", "batch_size", ",", "projective", ",", "multiroot", ")", "\n", "\n", "", "model", ".", "word_emb", ".", "requires_grad_", "(", "not", "freeze", ")", "\n", "model", ".", "tag_emb", ".", "requires_grad_", "(", "not", "freeze", ")", "\n", "\n", "_log", ".", "info", "(", "\"Creating optimizer\"", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "finetuner", "=", "Runner", "(", ")", "\n", "origin_params", "=", "{", "name", ":", "p", ".", "clone", "(", ")", ".", "detach", "(", ")", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "}", "\n", "finetuner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ")", ",", "\n", "compute_l2_loss", "(", "model", ",", "origin_params", ")", ",", "\n", "compute_total_arc_type_scores", "(", "model", ",", "vocab", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "@", "finetuner", ".", "on", "(", "Event", ".", "BATCH", ")", "\n", "def", "compute_loss", "(", "state", ")", ":", "\n", "        ", "mask", "=", "state", "[", "\"batch\"", "]", "[", "\"mask\"", "]", "\n", "pptx_mask", "=", "state", "[", "\"batch\"", "]", "[", "\"pptx_mask\"", "]", ".", "bool", "(", ")", "\n", "scores", "=", "state", "[", "\"total_arc_type_scores\"", "]", "\n", "\n", "pptx_loss", "=", "compute_aatrn_loss", "(", "scores", ",", "pptx_mask", ",", "mask", ",", "projective", ",", "multiroot", ")", "\n", "pptx_loss", "/=", "mask", ".", "size", "(", "0", ")", "\n", "loss", "=", "pptx_loss", "+", "l2_coef", "*", "state", "[", "\"l2_loss\"", "]", "\n", "\n", "state", "[", "\"loss\"", "]", "=", "loss", "\n", "state", "[", "\"stats\"", "]", "=", "{", "\n", "\"pptx_loss\"", ":", "pptx_loss", ".", "item", "(", ")", ",", "\n", "\"l2_loss\"", ":", "state", "[", "\"l2_loss\"", "]", ".", "item", "(", ")", ",", "\n", "}", "\n", "state", "[", "\"extra_stats\"", "]", "=", "{", "\"loss\"", ":", "loss", ".", "item", "(", ")", "}", "\n", "state", "[", "\"n_items\"", "]", "=", "mask", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "finetuner", ".", "on", "(", "Event", ".", "BATCH", ",", "[", "update_params", "(", "opt", ")", ",", "log_grads", "(", "_run", ",", "model", ")", ",", "log_stats", "(", "_run", ")", "]", ")", "\n", "\n", "@", "finetuner", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ")", "\n", "def", "eval_on_dev", "(", "state", ")", ":", "\n", "        ", "_log", ".", "info", "(", "\"Evaluating on dev\"", ")", "\n", "eval_state", "=", "run_eval", "(", "model", ",", "vocab", ",", "samples", "[", "\"dev\"", "]", ")", "\n", "accs", "=", "eval_state", "[", "\"counts\"", "]", ".", "accs", "\n", "print_accs", "(", "accs", ",", "run", "=", "_run", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "pptx_loss", "=", "eval_state", "[", "\"mean_pptx_loss\"", "]", "\n", "_log", ".", "info", "(", "\"dev_pptx_loss: %.4f\"", ",", "pptx_loss", ")", "\n", "_run", ".", "log_scalar", "(", "\"dev_pptx_loss\"", ",", "pptx_loss", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "state", "[", "\"dev_accs\"", "]", "=", "accs", "\n", "\n", "", "@", "finetuner", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ")", "\n", "def", "maybe_eval_on_test", "(", "state", ")", ":", "\n", "        ", "if", "state", "[", "\"epoch\"", "]", "!=", "max_epoch", ":", "\n", "            ", "return", "\n", "\n", "", "_log", ".", "info", "(", "\"Evaluating on test\"", ")", "\n", "eval_state", "=", "run_eval", "(", "model", ",", "vocab", ",", "samples", "[", "\"test\"", "]", ",", "compute_loss", "=", "False", ")", "\n", "print_accs", "(", "eval_state", "[", "\"counts\"", "]", ".", "accs", ",", "on", "=", "\"test\"", ",", "run", "=", "_run", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "", "finetuner", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ",", "save_state_dict", "(", "\"model\"", ",", "model", ",", "under", "=", "artifacts_dir", ")", ")", "\n", "\n", "EpochTimer", "(", ")", ".", "attach_on", "(", "finetuner", ")", "\n", "n_tokens", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "\"train\"", "]", ")", "\n", "ProgressBar", "(", "stats", "=", "\"stats\"", ",", "total", "=", "n_tokens", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "finetuner", ")", "\n", "\n", "bucket_key", "=", "lambda", "s", ":", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "-", "1", ")", "//", "10", "\n", "trn_iter", "=", "ShuffleIterator", "(", "\n", "BucketIterator", "(", "samples", "[", "\"train\"", "]", ",", "bucket_key", ",", "batch_size", ",", "shuffle_bucket", "=", "True", ",", "rng", "=", "_rnd", ")", ",", "\n", "rng", "=", "_rnd", ",", "\n", ")", "\n", "_log", ".", "info", "(", "\"Starting finetuning\"", ")", "\n", "try", ":", "\n", "        ", "finetuner", ".", "run", "(", "trn_iter", ",", "max_epoch", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "_log", ".", "info", "(", "\"Interrupt detected, training will abort\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "finetuner", ".", "state", "[", "\"dev_accs\"", "]", "[", "\"las_nopunct\"", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.default": [[48, 96], ["torch.cuda.is_available"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "default", "(", ")", ":", "\n", "# directory to save training artifacts", "\n", "    ", "artifacts_dir", "=", "\"artifacts\"", "\n", "# whether to overwrite existing artifacts directory", "\n", "overwrite", "=", "False", "\n", "# discard train/dev/test samples with length greater than these numbers", "\n", "max_length", "=", "{", "}", "\n", "# path to word embedding in word2vec format", "\n", "word_emb_path", "=", "\"wiki.en.vec\"", "\n", "# size of POS tag embedding", "\n", "tag_size", "=", "50", "\n", "# number of heads in transformer encoder", "\n", "n_heads", "=", "10", "\n", "# number of layers in transformer encoder", "\n", "n_layers", "=", "6", "\n", "# size of feedforward hidden layer in transformer encoder", "\n", "ff_size", "=", "2048", "\n", "# size of keys and values in the transformer encoder", "\n", "kv_size", "=", "35", "\n", "# word dropout rate", "\n", "p_word", "=", "0.5", "\n", "# output dim dropout rate", "\n", "p_out", "=", "0.5", "\n", "# size of dep arc representation", "\n", "arc_size", "=", "128", "\n", "# size of dep type representation", "\n", "type_size", "=", "128", "\n", "# batch size", "\n", "batch_size", "=", "16", "\n", "# learning rate", "\n", "lr", "=", "1e-4", "\n", "# max number of epochs", "\n", "max_epoch", "=", "1000", "\n", "# device to run on [cpu, cuda]", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "# how many epochs to wait before early stopping", "\n", "patience", "=", "50", "\n", "# whether to operate in the space of projective trees", "\n", "projective", "=", "False", "\n", "# whether to consider multi-root trees (otherwise only single-root trees)", "\n", "multiroot", "=", "True", "\n", "# load parameters from this file under artifacts directory (only for evaluate)", "\n", "load_params", "=", "\"model.pth\"", "\n", "# whether to do type-wise evaluation (only for evaluate)", "\n", "type_wise", "=", "False", "\n", "# load types vocabulary from this file", "\n", "load_types_vocab_from", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.testrun": [[98, 110], ["dict"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "testrun", "(", ")", ":", "\n", "    ", "seed", "=", "12345", "\n", "tag_size", "=", "10", "\n", "n_heads", "=", "2", "\n", "n_layers", "=", "2", "\n", "ff_size", "=", "7", "\n", "kv_size", "=", "6", "\n", "arc_size", "=", "3", "\n", "type_size", "=", "3", "\n", "max_epoch", "=", "3", "\n", "corpus", "=", "dict", "(", "portion", "=", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.ahmadetal": [[112, 127], ["dict", "dict"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "ahmadetal", "(", ")", ":", "\n", "    ", "max_length", "=", "dict", "(", "train", "=", "100", ",", "dev", "=", "140", ",", "test", "=", "140", ")", "\n", "tag_size", "=", "50", "\n", "n_heads", "=", "8", "\n", "n_layers", "=", "6", "\n", "ff_size", "=", "512", "\n", "kv_size", "=", "64", "\n", "p_word", "=", "0.2", "\n", "p_out", "=", "0.2", "\n", "arc_size", "=", "512", "\n", "type_size", "=", "128", "\n", "batch_size", "=", "80", "\n", "lr", "=", "1e-4", "\n", "corpus", "=", "dict", "(", "normalize_digits", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.heetal_eval_setup": [[129, 132], ["dict"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "heetal_eval_setup", "(", ")", ":", "\n", "    ", "max_length", "=", "dict", "(", "dev", "=", "150", ",", "test", "=", "150", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.make_model": [[134, 194], ["gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "_log.info", "models.SelfAttGraph", "_log.info", "torch.randn", "_log.info", "_log.info", "_log.info", "path.write_text", "len", "len", "len", "sum", "len", "vocab[].index", "torch.no_grad", "torch.nn.Embedding.from_pretrained", "pathlib.Path", "serialization.dump", "torch.from_numpy", "p.numel", "w.lower", "torch.from_numpy", "models.SelfAttGraph.parameters", "w.lower"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump"], ["", "@", "ex", ".", "capture", "\n", "def", "make_model", "(", "\n", "vocab", ",", "\n", "_log", ",", "\n", "word_emb_path", "=", "\"wiki.en.vec\"", ",", "\n", "artifacts_dir", "=", "\"artifacts\"", ",", "\n", "tag_size", "=", "50", ",", "\n", "n_heads", "=", "10", ",", "\n", "n_layers", "=", "6", ",", "\n", "ff_size", "=", "2048", ",", "\n", "kv_size", "=", "64", ",", "\n", "p_word", "=", "0.5", ",", "\n", "p_out", "=", "0.5", ",", "\n", "arc_size", "=", "128", ",", "\n", "type_size", "=", "128", ",", "\n", ")", ":", "\n", "    ", "kv", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "word_emb_path", ")", "\n", "\n", "_log", ".", "info", "(", "\"Creating model\"", ")", "\n", "model", "=", "SelfAttGraph", "(", "\n", "len", "(", "vocab", "[", "\"words\"", "]", ")", ",", "\n", "len", "(", "vocab", "[", "\"types\"", "]", ")", ",", "\n", "len", "(", "vocab", "[", "\"tags\"", "]", ")", ",", "\n", "word_size", "=", "kv", ".", "vector_size", ",", "\n", "tag_size", "=", "tag_size", ",", "\n", "n_heads", "=", "n_heads", ",", "\n", "n_layers", "=", "n_layers", ",", "\n", "ff_size", "=", "ff_size", ",", "\n", "kv_size", "=", "kv_size", ",", "\n", "word_dropout", "=", "p_word", ",", "\n", "outdim_dropout", "=", "p_out", ",", "\n", "arc_size", "=", "arc_size", ",", "\n", "type_size", "=", "type_size", ",", "\n", ")", "\n", "_log", ".", "info", "(", "\"Model created with %d parameters\"", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "weight", "=", "torch", ".", "randn", "(", "len", "(", "vocab", "[", "\"words\"", "]", ")", ",", "kv", ".", "vector_size", ")", "\n", "cnt_pre", ",", "cnt_unk", "=", "0", ",", "0", "\n", "for", "w", "in", "vocab", "[", "\"words\"", "]", ":", "\n", "        ", "wid", "=", "vocab", "[", "\"words\"", "]", ".", "index", "(", "w", ")", "\n", "if", "w", "in", "kv", ":", "\n", "            ", "weight", "[", "wid", "]", "=", "torch", ".", "from_numpy", "(", "kv", "[", "w", "]", ")", "\n", "cnt_pre", "+=", "1", "\n", "", "elif", "w", ".", "lower", "(", ")", "in", "kv", ":", "\n", "            ", "weight", "[", "wid", "]", "=", "torch", ".", "from_numpy", "(", "kv", "[", "w", ".", "lower", "(", ")", "]", ")", "\n", "cnt_pre", "+=", "1", "\n", "", "else", ":", "\n", "            ", "cnt_unk", "+=", "1", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# freeze embedding to preserve alignment", "\n", "        ", "model", ".", "word_emb", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "weight", ",", "freeze", "=", "True", ")", "\n", "", "_log", ".", "info", "(", "\"Initialized %d words with pre-trained embedding\"", ",", "cnt_pre", ")", "\n", "_log", ".", "info", "(", "\"Found %d unknown words\"", ",", "cnt_unk", ")", "\n", "\n", "path", "=", "Path", "(", "artifacts_dir", ")", "/", "\"model.yml\"", "\n", "_log", ".", "info", "(", "\"Saving model metadata to %s\"", ",", "path", ")", "\n", "path", ".", "write_text", "(", "dump", "(", "model", ")", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.run_eval": [[196, 234], ["rnnr.Runner", "rnnr.Runner.on", "sum", "rnnr.attachments.ProgressBar().attach_on", "rnnr.attachments.SumReducer().attach_on", "rnnr.attachments.LambdaReducer().attach_on", "torch.no_grad", "rnnr.Runner.run", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_total_arc_type_scores", "callbacks.predict_batch", "callbacks.evaluate_batch", "callbacks.get_n_items", "len", "rnnr.attachments.ProgressBar", "rnnr.attachments.SumReducer", "text2array.BucketIterator", "rnnr.attachments.LambdaReducer", "len"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.predict_batch", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.evaluate_batch", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.get_n_items"], ["", "@", "ex", ".", "capture", "\n", "def", "run_eval", "(", "\n", "model", ",", "\n", "vocab", ",", "\n", "samples", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "projective", "=", "False", ",", "\n", "multiroot", "=", "True", ",", "\n", "batch_size", "=", "32", ",", "\n", "type_wise", "=", "False", ",", "\n", ")", ":", "\n", "    ", "runner", "=", "Runner", "(", ")", "\n", "runner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ",", "training", "=", "False", ")", ",", "\n", "compute_total_arc_type_scores", "(", "model", ",", "vocab", ")", ",", "\n", "predict_batch", "(", "projective", ",", "multiroot", ")", ",", "\n", "evaluate_batch", "(", "vocab", "[", "\"types\"", "]", "if", "type_wise", "else", "None", ")", ",", "\n", "get_n_items", "(", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "n_tokens", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", ")", "\n", "ProgressBar", "(", "leave", "=", "False", ",", "total", "=", "n_tokens", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "SumReducer", "(", "\"counts\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "if", "type_wise", ":", "\n", "        ", "LambdaReducer", "(", "\n", "\"type2counts\"", ",", "\n", "lambda", "o1", ",", "o2", ":", "{", "y", ":", "o1", "[", "y", "]", "+", "o2", "[", "y", "]", "for", "y", "in", "vocab", "[", "\"types\"", "]", "}", ",", "\n", "value", "=", "\"tw_output\"", ",", "\n", ")", ".", "attach_on", "(", "runner", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "runner", ".", "run", "(", "BucketIterator", "(", "samples", ",", "lambda", "s", ":", "len", "(", "s", "[", "\"words\"", "]", ")", ",", "batch_size", ")", ")", "\n", "\n", "", "return", "runner", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.evaluate": [[236, 328], ["pathlib.Path", "list", "_log.info", "serialization.load", "serialization.load.keys", "_log.info", "len", "serialization.load.extend", "_log.info", "_log.info", "serialization.load", "_log.info", "serialization.load.load_state_dict", "serialization.load.to", "dev_accs.get", "list", "ingredients.corpus.read_samples", "sum", "_log.info", "path.read_text", "_log.info", "itertools.chain", "len", "list", "path.read_text", "torch.load", "len", "_log.info", "_log.info", "run_parser.run_eval", "utils.print_accs", "ingredients.corpus.read_samples", "_log.info", "len", "len", "serialization.load.stoi", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "_log.warning", "torch.no_grad", "torch.nn.Embedding.from_pretrained", "_log.info", "state[].items", "max_length.get", "len", "samples.values", "utils.extend_word_embedding", "c.accs.items", "max_length.get", "vocab[].index", "_log.info", "_run.log_scalar", "_log.info", "_run.log_scalar", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.extend_word_embedding"], ["", "@", "ex", ".", "command", "\n", "def", "evaluate", "(", "\n", "_log", ",", "\n", "_run", ",", "\n", "max_length", "=", "None", ",", "\n", "artifacts_dir", "=", "\"artifacts\"", ",", "\n", "load_params", "=", "\"model.pth\"", ",", "\n", "word_emb_path", "=", "\"wiki.id.vec\"", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate a trained self-attention graph-based parser.\"\"\"", "\n", "if", "max_length", "is", "None", ":", "\n", "        ", "max_length", "=", "{", "}", "\n", "\n", "", "artifacts_dir", "=", "Path", "(", "artifacts_dir", ")", "\n", "\n", "samples", "=", "{", "}", "\n", "try", ":", "\n", "        ", "samples", "[", "\"dev\"", "]", "=", "list", "(", "read_samples", "(", "which", "=", "\"dev\"", ",", "max_length", "=", "max_length", ".", "get", "(", "\"dev\"", ")", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "_log", ".", "info", "(", "\"Dev set is not found, skipping\"", ")", "\n", "", "samples", "[", "\"test\"", "]", "=", "list", "(", "read_samples", "(", "which", "=", "\"test\"", ",", "max_length", "=", "max_length", ".", "get", "(", "\"test\"", ")", ")", ")", "\n", "\n", "for", "wh", "in", "samples", ":", "\n", "        ", "n_toks", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "wh", "]", ")", "\n", "_log", ".", "info", "(", "\"Read %d %s samples and %d tokens\"", ",", "len", "(", "samples", "[", "wh", "]", ")", ",", "wh", ",", "n_toks", ")", "\n", "\n", "", "path", "=", "artifacts_dir", "/", "\"vocab.yml\"", "\n", "_log", ".", "info", "(", "\"Loading source vocabulary from %s\"", ",", "path", ")", "\n", "vocab", "=", "load", "(", "path", ".", "read_text", "(", "encoding", "=", "\"utf8\"", ")", ")", "\n", "for", "name", "in", "vocab", ".", "keys", "(", ")", ":", "\n", "        ", "_log", ".", "info", "(", "\"Found %d %s\"", ",", "len", "(", "vocab", "[", "name", "]", ")", ",", "name", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Extending vocab with target words\"", ")", "\n", "old_n_words", "=", "len", "(", "vocab", "[", "\"words\"", "]", ")", "\n", "vocab", ".", "extend", "(", "chain", "(", "*", "samples", ".", "values", "(", ")", ")", ",", "[", "\"words\"", "]", ")", "\n", "_log", ".", "info", "(", "\"Found %d words now\"", ",", "len", "(", "vocab", "[", "\"words\"", "]", ")", ")", "\n", "\n", "samples", "=", "{", "wh", ":", "list", "(", "vocab", ".", "stoi", "(", "samples", "[", "wh", "]", ")", ")", "for", "wh", "in", "samples", "}", "\n", "\n", "path", "=", "artifacts_dir", "/", "\"model.yml\"", "\n", "_log", ".", "info", "(", "\"Loading model from metadata %s\"", ",", "path", ")", "\n", "model", "=", "load", "(", "path", ".", "read_text", "(", "encoding", "=", "\"utf8\"", ")", ")", "\n", "\n", "path", "=", "artifacts_dir", "/", "load_params", "\n", "_log", ".", "info", "(", "\"Loading model parameters from %s\"", ",", "path", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "\"cpu\"", ")", ")", "\n", "\n", "if", "len", "(", "vocab", "[", "\"words\"", "]", ")", ">", "old_n_words", ":", "\n", "        ", "_log", ".", "info", "(", "\"Creating extended word embedding layer\"", ")", "\n", "if", "word_emb_path", ":", "\n", "            ", "kv", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "word_emb_path", ")", "\n", "assert", "model", ".", "word_emb", ".", "embedding_dim", "==", "kv", ".", "vector_size", "\n", "", "else", ":", "\n", "            ", "_log", ".", "warning", "(", "\n", "\"Word embedding file not specified; any extra target words will be treated as unks\"", "\n", ")", "\n", "kv", "=", "None", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "word_emb", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "extend_word_embedding", "(", "\n", "model", ".", "word_emb", ".", "weight", ",", "\n", "vocab", "[", "\"words\"", "]", ",", "\n", "kv", ",", "\n", "vocab", "[", "\"words\"", "]", ".", "index", "(", "vocab", ".", "UNK_TOKEN", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "model", ".", "to", "(", "device", ")", "\n", "dev_accs", "=", "{", "}", "\n", "for", "wh", "in", "samples", ":", "\n", "        ", "_log", ".", "info", "(", "\"Evaluating on %s\"", ",", "wh", ")", "\n", "state", "=", "run_eval", "(", "model", ",", "vocab", ",", "samples", "[", "wh", "]", ")", "\n", "accs", "=", "state", "[", "\"counts\"", "]", ".", "accs", "\n", "if", "wh", "==", "\"dev\"", ":", "\n", "            ", "dev_accs", "=", "accs", "\n", "", "print_accs", "(", "accs", ",", "on", "=", "wh", ",", "run", "=", "_run", ")", "\n", "\n", "if", "\"type2counts\"", "in", "state", ":", "\n", "            ", "_log", ".", "info", "(", "\"Type-wise accuracies:\"", ")", "\n", "for", "type_", ",", "c", "in", "state", "[", "\"type2counts\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "for", "key", ",", "acc", "in", "c", ".", "accs", ".", "items", "(", ")", ":", "\n", "                    ", "metric_name", "=", "f\"{wh}_{type_}_{key}\"", "\n", "_log", ".", "info", "(", "f\"{metric_name}: {acc:.2%}\"", ")", "\n", "_run", ".", "log_scalar", "(", "metric_name", ",", "acc", ")", "\n", "\n", "", "for", "suffix", "in", "(", "\"\"", ",", "\"_nopunct\"", ")", ":", "\n", "                    ", "metric_name", "=", "f\"{wh}_{type_}_n_arcs{suffix}\"", "\n", "_log", ".", "info", "(", "\"%s: %d\"", ",", "metric_name", ",", "getattr", "(", "c", ",", "f\"n_arcs{suffix}\"", ")", ")", "\n", "_run", ".", "log_scalar", "(", "metric_name", ",", "getattr", "(", "c", ",", "f\"n_arcs{suffix}\"", ")", ")", "\n", "\n", "", "", "", "", "return", "dev_accs", ".", "get", "(", "\"las_nopunct\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.train": [[330, 489], ["pathlib.Path", "_log.info", "pathlib.Path.mkdir", "_log.info", "text2array.Vocab.from_samples", "_log.info", "_log.info", "pathlib.Path.write_text", "run_parser.make_model", "make_model.to", "_log.info", "torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "rnnr.Runner", "rnnr.Runner.state.update", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.attachments.EpochTimer().attach_on", "sum", "rnnr.attachments.ProgressBar().attach_on", "text2array.ShuffleIterator", "_log.info", "list", "sum", "_log.info", "itertools.chain", "pathlib.Path", "_log.info", "_log.info", "serialization.dump", "list", "make_model.parameters", "make_model.", "einops.rearrange.masked_fill", "einops.rearrange", "heads.reshape.reshape", "torch.nn.functional.cross_entropy", "einops.rearrange", "types.reshape.reshape", "torch.nn.functional.cross_entropy", "arc_loss.masked_select().mean.masked_select().mean", "type_loss.masked_select().mean.masked_select().mean", "bat[].long().sum().item", "_log.info", "run_parser.run_eval", "utils.print_accs", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "_log.info", "run_parser.run_eval", "utils.print_accs", "text2array.BucketIterator", "rnnr.Runner.run", "ingredients.corpus.read_samples", "len", "serialization.load", "len", "Vocab.from_samples.stoi", "callbacks.batch2tensors", "callbacks.set_train_mode", "arc_loss.masked_select().mean.item", "type_loss.masked_select().mean.item", "math.exp", "math.exp", "callbacks.update_params", "callbacks.log_grads", "callbacks.log_stats", "_log.info", "_log.info", "utils.print_accs", "utils.print_accs", "rnnr.callbacks.maybe_stop_early", "callbacks.save_state_dict", "rnnr.attachments.EpochTimer", "len", "rnnr.attachments.ProgressBar", "_log.info", "len", "samples.values", "pathlib.Path.read_text", "mask.unsqueeze", "arc_loss.masked_select().mean.masked_select", "type_loss.masked_select().mean.masked_select", "bat[].long().sum", "len", "max_length.get", "vocab[].index", "mask.reshape", "mask.reshape", "bat[].long"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.make_model", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.update_params", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_grads", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_stats", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.save_state_dict"], ["", "@", "ex", ".", "automain", "\n", "def", "train", "(", "\n", "_log", ",", "\n", "_run", ",", "\n", "_rnd", ",", "\n", "artifacts_dir", "=", "\"artifacts\"", ",", "\n", "overwrite", "=", "False", ",", "\n", "max_length", "=", "None", ",", "\n", "load_types_vocab_from", "=", "None", ",", "\n", "batch_size", "=", "16", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "lr", "=", "0.001", ",", "\n", "patience", "=", "5", ",", "\n", "max_epoch", "=", "1000", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Train a self-attention graph-based parser.\"\"\"", "\n", "if", "max_length", "is", "None", ":", "\n", "        ", "max_length", "=", "{", "}", "\n", "\n", "", "artifacts_dir", "=", "Path", "(", "artifacts_dir", ")", "\n", "_log", ".", "info", "(", "\"Creating artifacts directory %s\"", ",", "artifacts_dir", ")", "\n", "artifacts_dir", ".", "mkdir", "(", "exist_ok", "=", "overwrite", ")", "\n", "\n", "samples", "=", "{", "\n", "wh", ":", "list", "(", "read_samples", "(", "which", "=", "wh", ",", "max_length", "=", "max_length", ".", "get", "(", "wh", ")", ")", ")", "\n", "for", "wh", "in", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", "]", "\n", "}", "\n", "for", "wh", "in", "samples", ":", "\n", "        ", "n_toks", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "wh", "]", ")", "\n", "_log", ".", "info", "(", "\"Read %d %s samples and %d tokens\"", ",", "len", "(", "samples", "[", "wh", "]", ")", ",", "wh", ",", "n_toks", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Creating vocabulary\"", ")", "\n", "vocab", "=", "Vocab", ".", "from_samples", "(", "chain", "(", "*", "samples", ".", "values", "(", ")", ")", ")", "\n", "if", "load_types_vocab_from", ":", "\n", "        ", "path", "=", "Path", "(", "load_types_vocab_from", ")", "\n", "_log", ".", "info", "(", "\"Loading types vocab from %s\"", ",", "path", ")", "\n", "vocab", "[", "\"types\"", "]", "=", "load", "(", "path", ".", "read_text", "(", "encoding", "=", "\"utf8\"", ")", ")", "[", "\"types\"", "]", "\n", "\n", "", "_log", ".", "info", "(", "\"Vocabulary created\"", ")", "\n", "for", "name", "in", "vocab", ":", "\n", "        ", "_log", ".", "info", "(", "\"Found %d %s\"", ",", "len", "(", "vocab", "[", "name", "]", ")", ",", "name", ")", "\n", "\n", "", "path", "=", "artifacts_dir", "/", "\"vocab.yml\"", "\n", "_log", ".", "info", "(", "\"Saving vocabulary to %s\"", ",", "path", ")", "\n", "path", ".", "write_text", "(", "dump", "(", "vocab", ")", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "samples", "=", "{", "wh", ":", "list", "(", "vocab", ".", "stoi", "(", "samples", "[", "wh", "]", ")", ")", "for", "wh", "in", "samples", "}", "\n", "\n", "model", "=", "make_model", "(", "vocab", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "_log", ".", "info", "(", "\"Creating optimizer\"", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "opt", ",", "mode", "=", "\"max\"", ",", "factor", "=", "0.5", ")", "\n", "\n", "trainer", "=", "Runner", "(", ")", "\n", "trainer", ".", "state", ".", "update", "(", "{", "\"dev_larcs_nopunct\"", ":", "-", "1", ",", "\"dev_uarcs_nopunct\"", ":", "-", "1", "}", ")", "\n", "trainer", ".", "on", "(", "Event", ".", "BATCH", ",", "[", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "set_train_mode", "(", "model", ")", "]", ")", "\n", "\n", "@", "trainer", ".", "on", "(", "Event", ".", "BATCH", ")", "\n", "def", "compute_loss", "(", "state", ")", ":", "\n", "        ", "bat", "=", "state", "[", "\"batch\"", "]", "\n", "words", ",", "tags", ",", "heads", ",", "types", "=", "bat", "[", "\"words\"", "]", ",", "bat", "[", "\"tags\"", "]", ",", "bat", "[", "\"heads\"", "]", ",", "bat", "[", "\"types\"", "]", "\n", "mask", "=", "bat", "[", "\"mask\"", "]", "\n", "\n", "arc_scores", ",", "type_scores", "=", "model", "(", "words", ",", "tags", ",", "mask", ",", "heads", ")", "\n", "arc_scores", "=", "arc_scores", ".", "masked_fill", "(", "~", "mask", ".", "unsqueeze", "(", "2", ")", ",", "-", "1e9", ")", "# mask padding heads", "\n", "type_scores", "[", "...", ",", "vocab", "[", "\"types\"", "]", ".", "index", "(", "Vocab", ".", "PAD_TOKEN", ")", "]", "=", "-", "1e9", "\n", "\n", "# remove root", "\n", "arc_scores", ",", "type_scores", "=", "arc_scores", "[", ":", ",", ":", ",", "1", ":", "]", ",", "type_scores", "[", ":", ",", "1", ":", "]", "\n", "heads", ",", "types", ",", "mask", "=", "heads", "[", ":", ",", "1", ":", "]", ",", "types", "[", ":", ",", "1", ":", "]", ",", "mask", "[", ":", ",", "1", ":", "]", "\n", "\n", "arc_scores", "=", "rearrange", "(", "arc_scores", ",", "\"bsz slen1 slen2 -> (bsz slen2) slen1\"", ")", "\n", "heads", "=", "heads", ".", "reshape", "(", "-", "1", ")", "\n", "arc_loss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "arc_scores", ",", "heads", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "type_scores", "=", "rearrange", "(", "type_scores", ",", "\"bsz slen ntypes -> (bsz slen) ntypes\"", ")", "\n", "types", "=", "types", ".", "reshape", "(", "-", "1", ")", "\n", "type_loss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "type_scores", ",", "types", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "arc_loss", "=", "arc_loss", ".", "masked_select", "(", "mask", ".", "reshape", "(", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "type_loss", "=", "type_loss", ".", "masked_select", "(", "mask", ".", "reshape", "(", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "loss", "=", "arc_loss", "+", "type_loss", "\n", "\n", "state", "[", "\"loss\"", "]", "=", "loss", "\n", "arc_loss", ",", "type_loss", "=", "arc_loss", ".", "item", "(", ")", ",", "type_loss", ".", "item", "(", ")", "\n", "state", "[", "\"stats\"", "]", "=", "{", "\n", "\"arc_ppl\"", ":", "math", ".", "exp", "(", "arc_loss", ")", ",", "\n", "\"type_ppl\"", ":", "math", ".", "exp", "(", "type_loss", ")", ",", "\n", "}", "\n", "state", "[", "\"extra_stats\"", "]", "=", "{", "\"arc_loss\"", ":", "arc_loss", ",", "\"type_loss\"", ":", "type_loss", "}", "\n", "state", "[", "\"n_items\"", "]", "=", "bat", "[", "\"mask\"", "]", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "trainer", ".", "on", "(", "Event", ".", "BATCH", ",", "[", "update_params", "(", "opt", ")", ",", "log_grads", "(", "_run", ",", "model", ")", ",", "log_stats", "(", "_run", ")", "]", ")", "\n", "\n", "@", "trainer", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ")", "\n", "def", "eval_on_dev", "(", "state", ")", ":", "\n", "        ", "_log", ".", "info", "(", "\"Evaluating on dev\"", ")", "\n", "eval_state", "=", "run_eval", "(", "model", ",", "vocab", ",", "samples", "[", "\"dev\"", "]", ")", "\n", "accs", "=", "eval_state", "[", "\"counts\"", "]", ".", "accs", "\n", "print_accs", "(", "accs", ",", "run", "=", "_run", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "scheduler", ".", "step", "(", "accs", "[", "\"las_nopunct\"", "]", ")", "\n", "\n", "if", "eval_state", "[", "\"counts\"", "]", ".", "larcs_nopunct", ">", "state", "[", "\"dev_larcs_nopunct\"", "]", ":", "\n", "            ", "state", "[", "\"better\"", "]", "=", "True", "\n", "", "elif", "eval_state", "[", "\"counts\"", "]", ".", "larcs_nopunct", "<", "state", "[", "\"dev_larcs_nopunct\"", "]", ":", "\n", "            ", "state", "[", "\"better\"", "]", "=", "False", "\n", "", "elif", "eval_state", "[", "\"counts\"", "]", ".", "uarcs_nopunct", ">", "state", "[", "\"dev_uarcs_nopunct\"", "]", ":", "\n", "            ", "state", "[", "\"better\"", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "state", "[", "\"better\"", "]", "=", "False", "\n", "\n", "", "if", "state", "[", "\"better\"", "]", ":", "\n", "            ", "_log", ".", "info", "(", "\"Found new best result on dev!\"", ")", "\n", "state", "[", "\"dev_larcs_nopunct\"", "]", "=", "eval_state", "[", "\"counts\"", "]", ".", "larcs_nopunct", "\n", "state", "[", "\"dev_uarcs_nopunct\"", "]", "=", "eval_state", "[", "\"counts\"", "]", ".", "uarcs_nopunct", "\n", "state", "[", "\"dev_accs\"", "]", "=", "accs", "\n", "state", "[", "\"dev_epoch\"", "]", "=", "state", "[", "\"epoch\"", "]", "\n", "", "else", ":", "\n", "            ", "_log", ".", "info", "(", "\"Not better, the best so far is epoch %d:\"", ",", "state", "[", "\"dev_epoch\"", "]", ")", "\n", "print_accs", "(", "state", "[", "\"dev_accs\"", "]", ")", "\n", "print_accs", "(", "state", "[", "\"test_accs\"", "]", ",", "on", "=", "\"test\"", ")", "\n", "\n", "", "", "@", "trainer", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ")", "\n", "def", "maybe_eval_on_test", "(", "state", ")", ":", "\n", "        ", "if", "not", "state", "[", "\"better\"", "]", ":", "\n", "            ", "return", "\n", "\n", "", "_log", ".", "info", "(", "\"Evaluating on test\"", ")", "\n", "eval_state", "=", "run_eval", "(", "model", ",", "vocab", ",", "samples", "[", "\"test\"", "]", ")", "\n", "state", "[", "\"test_accs\"", "]", "=", "eval_state", "[", "\"counts\"", "]", ".", "accs", "\n", "print_accs", "(", "state", "[", "\"test_accs\"", "]", ",", "on", "=", "\"test\"", ",", "run", "=", "_run", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "", "trainer", ".", "on", "(", "\n", "Event", ".", "EPOCH_FINISHED", ",", "\n", "[", "\n", "maybe_stop_early", "(", "patience", "=", "patience", ")", ",", "\n", "save_state_dict", "(", "\"model\"", ",", "model", ",", "under", "=", "artifacts_dir", ",", "when", "=", "\"better\"", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "EpochTimer", "(", ")", ".", "attach_on", "(", "trainer", ")", "\n", "n_tokens", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "\"train\"", "]", ")", "\n", "ProgressBar", "(", "stats", "=", "\"stats\"", ",", "total", "=", "n_tokens", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "trainer", ")", "\n", "\n", "bucket_key", "=", "lambda", "s", ":", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "-", "1", ")", "//", "10", "\n", "trn_iter", "=", "ShuffleIterator", "(", "\n", "BucketIterator", "(", "samples", "[", "\"train\"", "]", ",", "bucket_key", ",", "batch_size", ",", "shuffle_bucket", "=", "True", ",", "rng", "=", "_rnd", ")", ",", "\n", "rng", "=", "_rnd", ",", "\n", ")", "\n", "_log", ".", "info", "(", "\"Starting training\"", ")", "\n", "try", ":", "\n", "        ", "trainer", ".", "run", "(", "trn_iter", ",", "max_epoch", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "_log", ".", "info", "(", "\"Interrupt detected, training will abort\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "trainer", ".", "state", "[", "\"dev_accs\"", "]", "[", "\"las_nopunct\"", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph.__init__": [[17, 60], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.Dropout2d", "torch.Dropout2d", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Bilinear", "torch.Bilinear", "torch.Linear", "torch.Linear", "models.SelfAttGraph.reset_parameters", "torch.Embedding", "torch.Embedding", "modules.TransformerEncoderLayer", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "einops.layers.torch.Rearrange", "torch.Dropout2d", "torch.Dropout2d", "einops.layers.torch.Rearrange", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.__init__", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_words", ":", "int", ",", "\n", "n_types", ":", "int", ",", "\n", "n_tags", ":", "int", "=", "0", ",", "\n", "word_size", ":", "int", "=", "300", ",", "\n", "tag_size", ":", "int", "=", "50", ",", "\n", "n_heads", ":", "int", "=", "10", ",", "\n", "n_layers", ":", "int", "=", "6", ",", "\n", "ff_size", ":", "int", "=", "2048", ",", "\n", "kv_size", ":", "int", "=", "64", ",", "\n", "word_dropout", ":", "float", "=", "0.5", ",", "\n", "outdim_dropout", ":", "float", "=", "0.5", ",", "\n", "arc_size", ":", "int", "=", "128", ",", "\n", "type_size", ":", "int", "=", "128", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_emb", "=", "nn", ".", "Embedding", "(", "n_words", ",", "word_size", ")", "\n", "enc_in_size", "=", "word_size", "\n", "self", ".", "tag_emb", "=", "None", "\n", "if", "n_tags", ">", "0", ":", "\n", "            ", "self", ".", "tag_emb", "=", "nn", ".", "Embedding", "(", "n_tags", ",", "tag_size", ")", "\n", "enc_in_size", "+=", "tag_size", "\n", "", "self", ".", "encoder", "=", "nn", ".", "TransformerEncoder", "(", "\n", "TransformerEncoderLayer", "(", "enc_in_size", ",", "n_heads", ",", "ff_size", "=", "ff_size", ",", "kv_size", "=", "kv_size", ")", ",", "\n", "n_layers", ",", "\n", ")", "\n", "\n", "enc_out_size", "=", "self", ".", "encoder", ".", "layers", "[", "-", "1", "]", ".", "norm2", ".", "normalized_shape", "[", "-", "1", "]", "\n", "self", ".", "word_dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "word_dropout", ")", "\n", "self", ".", "mlp_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "enc_out_size", ",", "2", "*", "arc_size", "+", "2", "*", "type_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "Rearrange", "(", "\"bsz slen dim -> bsz dim slen\"", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "p", "=", "outdim_dropout", ")", ",", "# drop some dims entirely", "\n", "Rearrange", "(", "\"bsz dim slen -> bsz slen dim\"", ")", ",", "\n", ")", "\n", "\n", "self", ".", "arc_score_mix", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "arc_size", ",", "arc_size", ")", ")", "# type: ignore", "\n", "self", ".", "arc_score_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "arc_size", ")", ")", "# type: ignore", "\n", "self", ".", "type_score_mix", "=", "nn", ".", "Bilinear", "(", "type_size", ",", "type_size", ",", "n_types", ")", "\n", "self", ".", "type_score_bias", "=", "nn", ".", "Linear", "(", "2", "*", "type_size", ",", "n_types", ",", "bias", "=", "False", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph.reset_parameters": [[61, 64], ["torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "arc_score_mix", ",", "-", "0.01", ",", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "arc_score_bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph.forward": [[65, 98], ["models.SelfAttGraph._embed", "models.SelfAttGraph._encode", "models.SelfAttGraph._compute_arc_scores", "models.SelfAttGraph._compute_type_scores", "words.dim", "torch.full_like().bool", "torch.full_like().bool", "torch.full_like().bool", "torch.full_like().bool", "type_h.gather.gather.unsqueeze().expand().contiguous", "type_d.unsqueeze().expand().contiguous.unsqueeze().expand().contiguous.unsqueeze().expand().contiguous", "einops.rearrange().expand_as", "type_h.gather.gather.gather", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "type_h.gather.gather.unsqueeze().expand", "type_d.unsqueeze().expand().contiguous.unsqueeze().expand().contiguous.unsqueeze().expand", "einops.rearrange", "type_h.gather.gather.unsqueeze", "type_d.unsqueeze().expand().contiguous.unsqueeze().expand().contiguous.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph._embed", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph._encode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph._compute_arc_scores", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph._compute_type_scores"], ["", "def", "forward", "(", "self", ",", "words", ",", "tags", "=", "None", ",", "mask", "=", "None", ",", "heads", "=", "None", ")", ":", "\n", "        ", "assert", "words", ".", "dim", "(", ")", "==", "2", "\n", "assert", "tags", "is", "None", "or", "tags", ".", "shape", "==", "words", ".", "shape", "\n", "assert", "mask", "is", "None", "or", "mask", ".", "shape", "==", "words", ".", "shape", "\n", "assert", "heads", "is", "None", "or", "heads", ".", "shape", "==", "words", ".", "shape", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "full_like", "(", "words", ",", "1", ")", ".", "bool", "(", ")", "\n", "\n", "", "bsz", ",", "slen", "=", "words", ".", "shape", "\n", "\n", "# shape: (bsz, slen, dim)", "\n", "inputs", "=", "self", ".", "_embed", "(", "words", ",", "tags", ")", "\n", "# each shape: (bsz, slen, dim)", "\n", "arc_h", ",", "arc_d", ",", "type_h", ",", "type_d", "=", "self", ".", "_encode", "(", "inputs", ",", "mask", ")", "# type: ignore", "\n", "\n", "# shape: (bsz, slen, slen)", "\n", "arc_scores", "=", "self", ".", "_compute_arc_scores", "(", "arc_h", ",", "arc_d", ")", "\n", "\n", "if", "heads", "is", "None", ":", "\n", "# broadcast over dependents", "\n", "            ", "type_h", "=", "type_h", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bsz", ",", "slen", ",", "slen", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "# broadcast over heads", "\n", "type_d", "=", "type_d", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bsz", ",", "slen", ",", "slen", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# broadcast over dimensions", "\n", "            ", "heads", "=", "rearrange", "(", "heads", ",", "\"bsz slen -> bsz slen ()\"", ")", ".", "expand_as", "(", "type_h", ")", "\n", "# reorder type_h according to heads", "\n", "type_h", "=", "type_h", ".", "gather", "(", "1", ",", "heads", ")", "\n", "# shape: (bsz, slen, n_types) or (bsz, slen, slen, n_types)", "\n", "", "type_scores", "=", "self", ".", "_compute_type_scores", "(", "type_h", ",", "type_d", ")", "\n", "\n", "return", "arc_scores", ",", "type_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph._embed": [[99, 112], ["models.SelfAttGraph.word_emb", "words.dim", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.SelfAttGraph.tag_emb"], "methods", ["None"], ["", "def", "_embed", "(", "self", ",", "words", ":", "LongTensor", ",", "tags", ":", "Optional", "[", "LongTensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "# shape: (bsz, slen)", "\n", "        ", "assert", "words", ".", "dim", "(", ")", "==", "2", "\n", "assert", "tags", "is", "None", "or", "tags", ".", "shape", "==", "words", ".", "shape", "\n", "\n", "# shape: (bsz, slen, wdim)", "\n", "outputs", "=", "self", ".", "word_emb", "(", "words", ")", "\n", "if", "self", ".", "tag_emb", "is", "not", "None", ":", "\n", "            ", "assert", "tags", "is", "not", "None", "\n", "# shape: (bsz, slen, wdim+tdim)", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "outputs", ",", "self", ".", "tag_emb", "(", "tags", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph._encode": [[113, 137], ["models.SelfAttGraph.word_dropout", "einops.rearrange", "models.SelfAttGraph.encoder", "einops.rearrange", "models.SelfAttGraph.mlp_layer", "models.SelfAttGraph.arc_score_bias.numel", "einops.rearrange", "einops.rearrange", "inputs.dim"], "methods", ["None"], ["", "def", "_encode", "(", "\n", "self", ",", "inputs", ":", "Tensor", ",", "mask", ":", "BoolTensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "# shape: (bsz, slen, dim)", "\n", "        ", "assert", "inputs", ".", "dim", "(", ")", "==", "3", "\n", "# shape: (bsz, slen)", "\n", "assert", "mask", ".", "shape", "==", "inputs", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "# drop some words entirely", "\n", "outputs", "=", "self", ".", "word_dropout", "(", "inputs", ")", "\n", "\n", "outputs", "=", "rearrange", "(", "outputs", ",", "\"bsz slen dim -> slen bsz dim\"", ")", "\n", "outputs", "=", "self", ".", "encoder", "(", "outputs", ",", "src_key_padding_mask", "=", "~", "mask", ")", "\n", "outputs", "=", "rearrange", "(", "outputs", ",", "\"slen bsz dim -> bsz slen dim\"", ")", "\n", "\n", "# shape: (bsz, slen, dim)", "\n", "outputs", "=", "self", ".", "mlp_layer", "(", "outputs", ")", "\n", "arc_size", "=", "self", ".", "arc_score_bias", ".", "numel", "(", ")", "\n", "outputs_arc", "=", "outputs", "[", ":", ",", ":", ",", ":", "2", "*", "arc_size", "]", "\n", "outputs_type", "=", "outputs", "[", ":", ",", ":", ",", "2", "*", "arc_size", ":", "]", "\n", "\n", "arc_h", ",", "arc_d", "=", "rearrange", "(", "outputs_arc", ",", "\"bsz slen (n asz) -> n bsz slen asz\"", ",", "n", "=", "2", ")", "\n", "type_h", ",", "type_d", "=", "rearrange", "(", "outputs_type", ",", "\"bsz slen (n tsz) -> n bsz slen tsz\"", ",", "n", "=", "2", ")", "\n", "return", "arc_h", ",", "arc_d", ",", "type_h", ",", "type_d", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph._compute_arc_scores": [[138, 157], ["einops.rearrange", "arc_h.dim", "einops.rearrange"], "methods", ["None"], ["", "def", "_compute_arc_scores", "(", "self", ",", "arc_h", ":", "Tensor", ",", "arc_d", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"Compute scores of arcs for all heads and dependents.\n\n        This method implements equation 6 in (Dozat and Manning, 2017).\n        \"\"\"", "\n", "# shape: (bsz, slen, dim)", "\n", "assert", "arc_h", ".", "dim", "(", ")", "==", "3", "\n", "assert", "arc_d", ".", "shape", "==", "arc_h", ".", "shape", "\n", "\n", "arc_d", "=", "rearrange", "(", "arc_d", ",", "\"bsz slen asz -> bsz asz slen\"", ")", "\n", "\n", "# shape: (bsz, slen, slen)", "\n", "mix_scores", "=", "arc_h", "@", "self", ".", "arc_score_mix", "@", "arc_d", "\n", "# shape: (bsz, slen, 1)", "\n", "# broadcast bias scores over every possible dependent", "\n", "bias_scores", "=", "arc_h", "@", "rearrange", "(", "self", ".", "arc_score_bias", ",", "\"asz -> asz ()\"", ")", "\n", "\n", "# shape: (bsz, slen, slen)", "\n", "return", "mix_scores", "+", "bias_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.models.SelfAttGraph._compute_type_scores": [[158, 176], ["models.SelfAttGraph.type_score_mix", "models.SelfAttGraph.type_score_bias", "type_h.dim", "einops.rearrange"], "methods", ["None"], ["", "def", "_compute_type_scores", "(", "self", ",", "type_h", ":", "Tensor", ",", "type_d", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"Compute scores of types for all dependents of given/all heads.\n\n        This method implements equation 3 in (Dozat and Manning, 2017).\n        \"\"\"", "\n", "# shape: (bsz, slen, dim) or (bsz, slen, slen, dim)", "\n", "assert", "type_h", ".", "dim", "(", ")", "in", "(", "3", ",", "4", ")", "\n", "assert", "type_d", ".", "shape", "==", "type_h", ".", "shape", "\n", "\n", "# shape: (bsz, slen, n_types) or (bsz, slen, slen, n_types)", "\n", "mix_scores", "=", "self", ".", "type_score_mix", "(", "type_h", ",", "type_d", ")", "\n", "# shape: (bsz, slen, n_types) or (bsz, slen, slen, n_types)", "\n", "bias_scores", "=", "self", ".", "type_score_bias", "(", "\n", "rearrange", "(", "[", "type_h", ",", "type_d", "]", ",", "\"n ... dim -> ... (n dim)\"", ")", "\n", ")", "\n", "\n", "# shape: (bsz, slen, n_types) or (bsz, slen, slen, n_types)", "\n", "return", "mix_scores", "+", "bias_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.compute_leakage.main": [[19, 57], ["readers.UDReader", "print", "collections.defaultdict", "list", "tqdm.tqdm", "print", "readers.UDReader.read_samples", "networkx.Graph", "src_graphs[].append", "print", "list", "tqdm.tqdm", "print", "readers.UDReader.read_samples", "networkx.Graph", "networkx.tree_isomorphism", "enumerate", "len", "len", "len", "len", "enumerate"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples"], ["def", "main", "(", "\n", "ud_path", ":", "Path", ",", "\n", "langs", ":", "Optional", "[", "Collection", "[", "str", "]", "]", "=", "None", ",", "\n", "src_train_max_length", ":", "int", "=", "100", ",", "\n", "tgt_test_max_length", ":", "int", "=", "150", ",", "\n", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "    ", "if", "langs", "is", "None", ":", "\n", "        ", "langs", "=", "\"fa ar id ko tr hi hr he bg it pt fr es no da sv nl de\"", ".", "split", "(", ")", "\n", "\n", "", "r", "=", "UDReader", "(", "ud_path", ")", "\n", "\n", "print", "(", "\"Reading en train samples\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "src_graphs", ":", "Dict", "[", "int", ",", "List", "[", "nx", ".", "Graph", "]", "]", "=", "defaultdict", "(", "list", ")", "\n", "src_samples", "=", "list", "(", "r", ".", "read_samples", "(", "\"en\"", ")", ")", "\n", "for", "s", "in", "tqdm", "(", "src_samples", ",", "unit", "=", "\"sample\"", ")", ":", "\n", "        ", "g", "=", "nx", ".", "Graph", "(", "[", "(", "v", ",", "u", ")", "for", "u", ",", "v", "in", "enumerate", "(", "s", "[", "\"heads\"", "]", ",", "start", "=", "1", ")", "]", ")", "\n", "src_graphs", "[", "len", "(", "s", "[", "\"words\"", "]", ")", "]", ".", "append", "(", "g", ")", "\n", "\n", "", "res", ",", "cnt", "=", "{", "}", ",", "0", "\n", "for", "lang", "in", "langs", ":", "\n", "        ", "cnt", "+=", "1", "\n", "print", "(", "\n", "f\"[{cnt}/{len(langs)}] Computing leakage for {lang} test samples\"", ",", "file", "=", "sys", ".", "stderr", ",", "\n", ")", "\n", "n_samples", ",", "n_leaks", "=", "0", ",", "0", "\n", "tgt_samples", "=", "list", "(", "r", ".", "read_samples", "(", "lang", ",", "\"test\"", ")", ")", "\n", "for", "s", "in", "tqdm", "(", "tgt_samples", ",", "unit", "=", "\"sample\"", ")", ":", "\n", "            ", "n_samples", "+=", "1", "\n", "g", "=", "nx", ".", "Graph", "(", "[", "(", "v", ",", "u", ")", "for", "u", ",", "v", "in", "enumerate", "(", "s", "[", "\"heads\"", "]", ",", "start", "=", "1", ")", "]", ")", "\n", "for", "g_", "in", "src_graphs", "[", "len", "(", "s", "[", "\"words\"", "]", ")", "]", ":", "\n", "                ", "if", "iso", ".", "tree_isomorphism", "(", "g", ",", "g_", ")", ":", "\n", "                    ", "n_leaks", "+=", "1", "\n", "break", "\n", "", "", "", "print", "(", "f\"[{cnt}/{len(langs)}] Leakage is {n_leaks/n_samples:.1%}\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "res", "[", "lang", "]", "=", "n_leaks", "/", "n_samples", "\n", "", "print", "(", "\"Done\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.readers.UDReader.__init__": [[48, 64], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "ud_path", ":", "Path", ",", "\n", "skip_mwe_and_empty", ":", "bool", "=", "True", ",", "\n", "version", ":", "int", "=", "2", ",", "\n", "treebank_dict", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "if", "treebank_dict", "is", "None", ":", "\n", "            ", "treebank_dict", "=", "self", ".", "DEFAULT_TREEBANK", "\n", "", "if", "version", "not", "in", "(", "1", ",", "2", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"version must be 1 or 2\"", ")", "\n", "\n", "", "self", ".", "ud_path", "=", "ud_path", "\n", "self", ".", "treebank_dict", "=", "treebank_dict", "\n", "self", ".", "skip_mwe_and_empty", "=", "skip_mwe_and_empty", "\n", "self", ".", "version", "=", "version", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.readers.UDReader.read_samples": [[65, 69], ["readers.UDReader._read_samples_v2", "readers.UDReader._read_samples_v1"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.readers.UDReader._read_samples_v2", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.readers.UDReader._read_samples_v1"], ["", "def", "read_samples", "(", "self", ",", "langcode", ":", "str", ",", "which", ":", "str", "=", "\"train\"", ")", "->", "Iterator", "[", "dict", "]", ":", "\n", "        ", "if", "self", ".", "version", "==", "1", ":", "\n", "            ", "return", "self", ".", "_read_samples_v1", "(", "langcode", ",", "which", ")", "\n", "", "return", "self", ".", "_read_samples_v2", "(", "langcode", ",", "which", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.readers.UDReader._read_samples_v2": [[70, 90], ["open", "conllu.parse_incr", "collections.defaultdict", "tbname.lower", "sample[].append", "sample[].append", "sample[].append", "sample[].append", "isinstance"], "methods", ["None"], ["", "def", "_read_samples_v2", "(", "self", ",", "langcode", ":", "str", ",", "which", ":", "str", "=", "\"train\"", ")", "->", "Iterator", "[", "dict", "]", ":", "\n", "        ", "langname", ",", "tbnames", "=", "self", ".", "treebank_dict", "[", "langcode", "]", "\n", "for", "tbname", "in", "tbnames", ":", "\n", "            ", "path", "=", "(", "\n", "self", ".", "ud_path", "\n", "/", "f\"UD_{langname}-{tbname}\"", "\n", "/", "f\"{langcode}_{tbname.lower()}-ud-{which}.conllu\"", "\n", ")", "\n", "with", "open", "(", "path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "for", "sent", "in", "parse_incr", "(", "f", ")", ":", "\n", "                    ", "sample", ":", "dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "tok", "in", "sent", ":", "\n", "# skip MWEs or empty words", "\n", "                        ", "if", "self", ".", "skip_mwe_and_empty", "and", "not", "isinstance", "(", "tok", "[", "\"id\"", "]", ",", "int", ")", ":", "\n", "                            ", "continue", "\n", "", "sample", "[", "\"words\"", "]", ".", "append", "(", "tok", "[", "\"form\"", "]", ")", "\n", "sample", "[", "\"tags\"", "]", ".", "append", "(", "tok", "[", "\"upostag\"", "]", ")", "\n", "sample", "[", "\"heads\"", "]", ".", "append", "(", "tok", "[", "\"head\"", "]", ")", "\n", "sample", "[", "\"types\"", "]", ".", "append", "(", "tok", "[", "\"deprel\"", "]", ")", "\n", "", "yield", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.readers.UDReader._read_samples_v1": [[91, 106], ["open", "conllu.parse_incr", "collections.defaultdict", "sample[].append", "sample[].append", "sample[].append", "sample[].append", "isinstance"], "methods", ["None"], ["", "", "", "", "def", "_read_samples_v1", "(", "self", ",", "langcode", ":", "str", ",", "which", ":", "str", "=", "\"train\"", ")", "->", "Iterator", "[", "dict", "]", ":", "\n", "        ", "langname", ",", "_", "=", "self", ".", "treebank_dict", "[", "langcode", "]", "\n", "path", "=", "self", ".", "ud_path", "/", "f\"UD_{langname}\"", "/", "f\"{langcode}-ud-{which}.conllu\"", "\n", "with", "open", "(", "path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "for", "sent", "in", "parse_incr", "(", "f", ")", ":", "\n", "                ", "sample", ":", "dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "tok", "in", "sent", ":", "\n", "# skip MWEs or empty words", "\n", "                    ", "if", "self", ".", "skip_mwe_and_empty", "and", "not", "isinstance", "(", "tok", "[", "\"id\"", "]", ",", "int", ")", ":", "\n", "                        ", "continue", "\n", "", "sample", "[", "\"words\"", "]", ".", "append", "(", "tok", "[", "\"form\"", "]", ")", "\n", "sample", "[", "\"tags\"", "]", ".", "append", "(", "tok", "[", "\"upostag\"", "]", ")", "\n", "sample", "[", "\"heads\"", "]", ".", "append", "(", "tok", "[", "\"head\"", "]", ")", "\n", "sample", "[", "\"types\"", "]", ".", "append", "(", "tok", "[", "\"deprel\"", "]", ")", "\n", "", "yield", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.readers.get_proj_edges": [[108, 132], ["collections.defaultdict", "adj_set[].add", "readers.get_proj_edges.dfs"], "function", ["None"], ["", "", "", "", "def", "get_proj_edges", "(", "edges", ":", "Collection", "[", "Tuple", "[", "int", ",", "int", "]", "]", ")", "->", "Iterator", "[", "Tuple", "[", "int", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"Obtain projective edges from a collection of edges of a dependency tree.\"\"\"", "\n", "adj_set", ":", "dict", "=", "defaultdict", "(", "set", ")", "\n", "for", "u", ",", "v", "in", "edges", ":", "\n", "        ", "adj_set", "[", "u", "]", ".", "add", "(", "v", ")", "\n", "\n", "", "def", "dfs", "(", "root", ":", "int", ")", "->", "Set", "[", "int", "]", ":", "\n", "        ", "stack", ",", "seen", "=", "[", "root", "]", ",", "set", "(", ")", "\n", "while", "stack", ":", "\n", "            ", "u", "=", "stack", ".", "pop", "(", ")", "\n", "seen", ".", "add", "(", "u", ")", "\n", "for", "v", "in", "adj_set", "[", "u", "]", ":", "\n", "                ", "if", "v", "not", "in", "seen", ":", "\n", "                    ", "stack", ".", "append", "(", "v", ")", "\n", "", "", "", "return", "seen", "\n", "\n", "", "nodes", "=", "{", "u", "for", "e", "in", "edges", "for", "u", "in", "e", "}", "\n", "reachable_from", "=", "{", "u", ":", "dfs", "(", "u", ")", "for", "u", "in", "nodes", "}", "\n", "for", "u", ",", "v", "in", "edges", ":", "\n", "        ", "for", "w", "in", "range", "(", "min", "(", "u", ",", "v", ")", "+", "1", ",", "max", "(", "u", ",", "v", ")", ")", ":", "\n", "            ", "if", "w", "not", "in", "reachable_from", "[", "u", "]", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "yield", "(", "u", ",", "v", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.split_conllu.split": [[14, 36], ["pathlib.Path.mkdir", "print", "random.Random.shuffle", "enumerate", "enumerate", "pathlib.Path", "random.Random", "open", "conllu.parse", "tqdm.tqdm", "print", "f.read", "open", "print", "sent.serialize"], "function", ["None"], ["def", "split", "(", "path", ",", "out_path", "=", "None", ",", "n_parts", "=", "5", ",", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"Split a CoNLL-U file into parts.\"\"\"", "\n", "if", "out_path", "is", "None", ":", "\n", "        ", "out_path", "=", "Path", "(", "\"output\"", ")", "\n", "", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "random", ".", "Random", "(", ")", "\n", "\n", "", "out_path", ".", "mkdir", "(", ")", "\n", "\n", "print", "(", "f\"Reading {path}\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "with", "open", "(", "path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "sents", "=", "parse", "(", "f", ".", "read", "(", ")", ")", "\n", "", "rng", ".", "shuffle", "(", "sents", ")", "\n", "\n", "count", "=", "[", "0", "]", "*", "n_parts", "\n", "for", "i", ",", "sent", "in", "enumerate", "(", "tqdm", "(", "sents", ")", ")", ":", "\n", "        ", "count", "[", "i", "%", "n_parts", "]", "+=", "1", "\n", "with", "open", "(", "out_path", "/", "f\"{i % n_parts:02}.conllu\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "print", "(", "sent", ".", "serialize", "(", ")", ",", "file", "=", "f", ",", "end", "=", "\"\"", ")", "\n", "\n", "", "", "for", "i", ",", "cnt", "in", "enumerate", "(", "count", ")", ":", "\n", "        ", "print", "(", "f\"Part {i:02}: {cnt}\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.default": [[46, 78], ["torch.cuda.is_available"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "default", "(", ")", ":", "\n", "# directory to save finetuning artifacts", "\n", "    ", "artifacts_dir", "=", "\"ft_artifacts\"", "\n", "# whether to overwrite existing artifacts directory", "\n", "overwrite", "=", "False", "\n", "# discard train/dev/test samples with length greater than these numbers", "\n", "max_length", "=", "{", "}", "\n", "# load training artifacts from this artifacts directory", "\n", "load_from", "=", "\"artifacts\"", "\n", "# load trained model parameters from this file under 'load_from' directory", "\n", "load_params", "=", "\"model.pth\"", "\n", "# device to run on [cpu, cuda]", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "# path to word embedding in word2vec format", "\n", "word_emb_path", "=", "\"wiki.en.vec\"", "\n", "# whether to freeze word and tag embedding", "\n", "freeze", "=", "False", "\n", "# cumulative prob threshold", "\n", "thresh", "=", "0.95", "\n", "# whether to operate in the space of projective trees", "\n", "projective", "=", "False", "\n", "# whether to consider multi-root trees (otherwise only single-root trees)", "\n", "multiroot", "=", "False", "\n", "# batch size", "\n", "batch_size", "=", "16", "\n", "# learning rate", "\n", "lr", "=", "1e-5", "\n", "# coefficient of L2 regularization against initial parameters", "\n", "l2_coef", "=", "1.0", "\n", "# max number of epochs", "\n", "max_epoch", "=", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.ahmadetal": [[80, 85], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "ahmadetal", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "100", "}", "\n", "batch_size", "=", "80", "\n", "corpus", "=", "{", "\"normalize_digits\"", ":", "True", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.heetal_eval_setup": [[87, 90], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "heetal_eval_setup", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"dev\"", ":", "150", ",", "\"test\"", ":", "150", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.nearby": [[92, 97], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "nearby", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "30", "}", "\n", "lr", "=", "3.8e-5", "\n", "l2_coef", "=", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.distant": [[99, 104], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "distant", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "30", "}", "\n", "lr", "=", "2e-5", "\n", "l2_coef", "=", "0.39", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.proj_nearby": [[106, 112], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "proj_nearby", "(", ")", ":", "\n", "    ", "projective", "=", "True", "\n", "max_length", "=", "{", "\"train\"", ":", "20", "}", "\n", "lr", "=", "1e-4", "\n", "l2_coef", "=", "7.9e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.proj_distant": [[114, 120], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "proj_distant", "(", ")", ":", "\n", "    ", "projective", "=", "True", "\n", "max_length", "=", "{", "\"train\"", ":", "20", "}", "\n", "lr", "=", "1e-4", "\n", "l2_coef", "=", "7.9e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.testrun": [[122, 127], ["dict"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "testrun", "(", ")", ":", "\n", "    ", "seed", "=", "12345", "\n", "max_epoch", "=", "2", "\n", "corpus", "=", "dict", "(", "portion", "=", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.run_eval": [[129, 178], ["rnnr.Runner", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "sum", "rnnr.attachments.ProgressBar().attach_on", "rnnr.attachments.SumReducer().attach_on", "aatrn.compute_aatrn_loss", "aatrn.compute_aatrn_loss.item", "[].size", "rnnr.attachments.MeanReducer().attach_on", "torch.no_grad", "rnnr.Runner.run", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_total_arc_type_scores", "[].bool", "callbacks.predict_batch", "callbacks.evaluate_batch", "callbacks.get_n_items", "len", "rnnr.attachments.ProgressBar", "rnnr.attachments.SumReducer", "text2array.BucketIterator", "rnnr.attachments.MeanReducer", "len"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.aatrn.compute_aatrn_loss", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.predict_batch", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.evaluate_batch", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.get_n_items"], ["", "@", "ex", ".", "capture", "\n", "def", "run_eval", "(", "\n", "model", ",", "\n", "vocab", ",", "\n", "samples", ",", "\n", "compute_loss", "=", "True", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "projective", "=", "False", ",", "\n", "multiroot", "=", "True", ",", "\n", "batch_size", "=", "32", ",", "\n", ")", ":", "\n", "    ", "runner", "=", "Runner", "(", ")", "\n", "runner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ",", "training", "=", "False", ")", ",", "\n", "compute_total_arc_type_scores", "(", "model", ",", "vocab", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "@", "runner", ".", "on", "(", "Event", ".", "BATCH", ")", "\n", "def", "maybe_compute_loss", "(", "state", ")", ":", "\n", "        ", "if", "not", "compute_loss", ":", "\n", "            ", "return", "\n", "\n", "", "ppt_loss", "=", "compute_aatrn_loss", "(", "\n", "state", "[", "\"total_arc_type_scores\"", "]", ",", "\n", "state", "[", "\"batch\"", "]", "[", "\"ppt_mask\"", "]", ".", "bool", "(", ")", ",", "\n", "projective", "=", "projective", ",", "\n", "multiroot", "=", "multiroot", ",", "\n", ")", "\n", "state", "[", "\"ppt_loss\"", "]", "=", "ppt_loss", ".", "item", "(", ")", "\n", "state", "[", "\"size\"", "]", "=", "state", "[", "\"batch\"", "]", "[", "\"words\"", "]", ".", "size", "(", "0", ")", "\n", "\n", "", "runner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "[", "predict_batch", "(", "projective", ",", "multiroot", ")", ",", "evaluate_batch", "(", ")", ",", "get_n_items", "(", ")", "]", "\n", ")", "\n", "\n", "n_tokens", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", ")", "\n", "ProgressBar", "(", "leave", "=", "False", ",", "total", "=", "n_tokens", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "SumReducer", "(", "\"counts\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "if", "compute_loss", ":", "\n", "        ", "MeanReducer", "(", "\"mean_ppt_loss\"", ",", "value", "=", "\"ppt_loss\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "runner", ".", "run", "(", "BucketIterator", "(", "samples", ",", "lambda", "s", ":", "len", "(", "s", "[", "\"words\"", "]", ")", ",", "batch_size", ")", ")", "\n", "\n", "", "return", "runner", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_ppt.finetune": [[180, 371], ["pathlib.Path", "_log.info", "pathlib.Path.mkdir", "_log.info", "serialization.load", "_log.info", "serialization.load.extend", "_log.info", "_log.info", "path.write_text", "_log.info", "serialization.load", "_log.info", "serialization.load.load_state_dict", "_log.info", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "_log.info", "path.write_text", "serialization.load.word_emb.requires_grad_", "serialization.load.tag_emb.requires_grad_", "serialization.load.to", "_log.info", "torch.optim.Adam", "rnnr.Runner", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.attachments.EpochTimer().attach_on", "sum", "rnnr.attachments.ProgressBar().attach_on", "text2array.ShuffleIterator", "_log.info", "list", "sum", "_log.info", "pathlib.Path", "path.read_text", "_log.info", "itertools.chain", "len", "serialization.dump", "list", "pathlib.Path", "path.read_text", "pathlib.Path", "torch.load", "torch.no_grad", "torch.nn.Embedding.from_pretrained", "serialization.dump", "enumerate", "rnnr.Runner", "rnnr.Runner.state.update", "rnnr.Runner.on", "rnnr.Runner.on", "sum", "rnnr.attachments.ProgressBar().attach_on", "_log.info", "zip", "_log.info", "utils.report_log_ntrees_stats", "serialization.load.parameters", "p.clone().detach", "[].bool", "aatrn.compute_aatrn_loss", "mask.size", "mask.long().sum().item", "_log.info", "run_ppt.run_eval", "utils.print_accs", "_log.info", "_run.log_scalar", "_log.info", "run_ppt.run_eval", "utils.print_accs", "callbacks.save_state_dict", "text2array.BucketIterator", "rnnr.Runner.run", "ingredients.corpus.read_samples", "len", "len", "serialization.load.stoi", "utils.extend_word_embedding", "[].all", "aatrn.compute_ambiguous_arcs_mask", "state[].extend", "state[].extend", "[].numel", "torch.no_grad", "rnnr.Runner.run", "len", "len", "len", "len", "serialization.load.named_parameters", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_l2_loss", "callbacks.compute_total_arc_type_scores", "aatrn.compute_aatrn_loss.item", "state[].item", "loss.item", "callbacks.update_params", "callbacks.log_grads", "callbacks.log_stats", "rnnr.attachments.EpochTimer", "len", "rnnr.attachments.ProgressBar", "_log.info", "len", "samples.values", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_total_arc_type_scores", "aatrn.compute_ambiguous_arcs_mask.tolist", "[].tolist", "len", "rnnr.attachments.ProgressBar", "text2array.BucketIterator", "p.clone", "mask.long().sum", "len", "max_length.get", "len", "mask.long"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.report_log_ntrees_stats", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.aatrn.compute_aatrn_loss", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.save_state_dict", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.extend_word_embedding", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.aatrn.compute_ambiguous_arcs_mask", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_l2_loss", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.update_params", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_grads", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_stats", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores"], ["", "@", "ex", ".", "automain", "\n", "def", "finetune", "(", "\n", "_log", ",", "\n", "_run", ",", "\n", "_rnd", ",", "\n", "max_length", "=", "None", ",", "\n", "artifacts_dir", "=", "\"ft_artifacts\"", ",", "\n", "overwrite", "=", "False", ",", "\n", "load_from", "=", "\"artifacts\"", ",", "\n", "load_params", "=", "\"model.pth\"", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "word_emb_path", "=", "\"wiki.id.vec\"", ",", "\n", "freeze", "=", "False", ",", "\n", "thresh", "=", "0.95", ",", "\n", "projective", "=", "False", ",", "\n", "multiroot", "=", "True", ",", "\n", "batch_size", "=", "32", ",", "\n", "lr", "=", "1e-5", ",", "\n", "l2_coef", "=", "1.0", ",", "\n", "max_epoch", "=", "5", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Finetune a trained model with PPT.\"\"\"", "\n", "if", "max_length", "is", "None", ":", "\n", "        ", "max_length", "=", "{", "}", "\n", "\n", "", "artifacts_dir", "=", "Path", "(", "artifacts_dir", ")", "\n", "_log", ".", "info", "(", "\"Creating artifacts directory %s\"", ",", "artifacts_dir", ")", "\n", "artifacts_dir", ".", "mkdir", "(", "exist_ok", "=", "overwrite", ")", "\n", "\n", "samples", "=", "{", "\n", "wh", ":", "list", "(", "read_samples", "(", "which", "=", "wh", ",", "max_length", "=", "max_length", ".", "get", "(", "wh", ")", ")", ")", "\n", "for", "wh", "in", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", "]", "\n", "}", "\n", "for", "wh", "in", "samples", ":", "\n", "        ", "n_toks", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "wh", "]", ")", "\n", "_log", ".", "info", "(", "\"Read %d %s samples and %d tokens\"", ",", "len", "(", "samples", "[", "wh", "]", ")", ",", "wh", ",", "n_toks", ")", "\n", "\n", "", "path", "=", "Path", "(", "load_from", ")", "/", "\"vocab.yml\"", "\n", "_log", ".", "info", "(", "\"Loading vocabulary from %s\"", ",", "path", ")", "\n", "vocab", "=", "load", "(", "path", ".", "read_text", "(", "encoding", "=", "\"utf8\"", ")", ")", "\n", "for", "name", "in", "vocab", ":", "\n", "        ", "_log", ".", "info", "(", "\"Found %d %s\"", ",", "len", "(", "vocab", "[", "name", "]", ")", ",", "name", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Extending vocabulary with target words\"", ")", "\n", "vocab", ".", "extend", "(", "chain", "(", "*", "samples", ".", "values", "(", ")", ")", ",", "[", "\"words\"", "]", ")", "\n", "_log", ".", "info", "(", "\"Found %d words now\"", ",", "len", "(", "vocab", "[", "\"words\"", "]", ")", ")", "\n", "\n", "path", "=", "artifacts_dir", "/", "\"vocab.yml\"", "\n", "_log", ".", "info", "(", "\"Saving vocabulary to %s\"", ",", "path", ")", "\n", "path", ".", "write_text", "(", "dump", "(", "vocab", ")", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "samples", "=", "{", "wh", ":", "list", "(", "vocab", ".", "stoi", "(", "samples", "[", "wh", "]", ")", ")", "for", "wh", "in", "samples", "}", "\n", "\n", "path", "=", "Path", "(", "load_from", ")", "/", "\"model.yml\"", "\n", "_log", ".", "info", "(", "\"Loading model from metadata %s\"", ",", "path", ")", "\n", "model", "=", "load", "(", "path", ".", "read_text", "(", "encoding", "=", "\"utf8\"", ")", ")", "\n", "\n", "path", "=", "Path", "(", "load_from", ")", "/", "load_params", "\n", "_log", ".", "info", "(", "\"Loading model parameters from %s\"", ",", "path", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "\"cpu\"", ")", ")", "\n", "\n", "_log", ".", "info", "(", "\"Creating extended word embedding layer\"", ")", "\n", "kv", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "word_emb_path", ")", "\n", "assert", "model", ".", "word_emb", ".", "embedding_dim", "==", "kv", ".", "vector_size", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "word_emb", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "extend_word_embedding", "(", "model", ".", "word_emb", ".", "weight", ",", "vocab", "[", "\"words\"", "]", ",", "kv", ")", "\n", ")", "\n", "\n", "", "path", "=", "artifacts_dir", "/", "\"model.yml\"", "\n", "_log", ".", "info", "(", "\"Saving model metadata to %s\"", ",", "path", ")", "\n", "path", ".", "write_text", "(", "dump", "(", "model", ")", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "model", ".", "word_emb", ".", "requires_grad_", "(", "not", "freeze", ")", "\n", "model", ".", "tag_emb", ".", "requires_grad_", "(", "not", "freeze", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "for", "wh", "in", "[", "\"train\"", ",", "\"dev\"", "]", ":", "\n", "        ", "for", "i", ",", "s", "in", "enumerate", "(", "samples", "[", "wh", "]", ")", ":", "\n", "            ", "s", "[", "\"_id\"", "]", "=", "i", "\n", "\n", "", "runner", "=", "Runner", "(", ")", "\n", "runner", ".", "state", ".", "update", "(", "{", "\"ppt_masks\"", ":", "[", "]", ",", "\"_ids\"", ":", "[", "]", "}", ")", "\n", "runner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ",", "training", "=", "False", ")", ",", "\n", "compute_total_arc_type_scores", "(", "model", ",", "vocab", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "@", "runner", ".", "on", "(", "Event", ".", "BATCH", ")", "\n", "def", "compute_ppt_ambiguous_arcs_mask", "(", "state", ")", ":", "\n", "            ", "assert", "state", "[", "\"batch\"", "]", "[", "\"mask\"", "]", ".", "all", "(", ")", "\n", "scores", "=", "state", "[", "\"total_arc_type_scores\"", "]", "\n", "ppt_mask", "=", "compute_ambiguous_arcs_mask", "(", "scores", ",", "thresh", ",", "projective", ",", "multiroot", ")", "\n", "state", "[", "\"ppt_masks\"", "]", ".", "extend", "(", "ppt_mask", ".", "tolist", "(", ")", ")", "\n", "state", "[", "\"_ids\"", "]", ".", "extend", "(", "state", "[", "\"batch\"", "]", "[", "\"_id\"", "]", ".", "tolist", "(", ")", ")", "\n", "state", "[", "\"n_items\"", "]", "=", "state", "[", "\"batch\"", "]", "[", "\"words\"", "]", ".", "numel", "(", ")", "\n", "\n", "", "n_toks", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "wh", "]", ")", "\n", "ProgressBar", "(", "total", "=", "n_toks", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "\n", "_log", ".", "info", "(", "\"Computing PPT ambiguous arcs mask for %s set\"", ",", "wh", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "runner", ".", "run", "(", "BucketIterator", "(", "samples", "[", "wh", "]", ",", "lambda", "s", ":", "len", "(", "s", "[", "\"words\"", "]", ")", ",", "batch_size", ")", ")", "\n", "\n", "", "assert", "len", "(", "runner", ".", "state", "[", "\"ppt_masks\"", "]", ")", "==", "len", "(", "samples", "[", "wh", "]", ")", "\n", "assert", "len", "(", "runner", ".", "state", "[", "\"_ids\"", "]", ")", "==", "len", "(", "samples", "[", "wh", "]", ")", "\n", "for", "i", ",", "ppt_mask", "in", "zip", "(", "runner", ".", "state", "[", "\"_ids\"", "]", ",", "runner", ".", "state", "[", "\"ppt_masks\"", "]", ")", ":", "\n", "            ", "samples", "[", "wh", "]", "[", "i", "]", "[", "\"ppt_mask\"", "]", "=", "ppt_mask", "\n", "\n", "", "_log", ".", "info", "(", "\"Computing (log) number of trees stats on %s set\"", ",", "wh", ")", "\n", "report_log_ntrees_stats", "(", "samples", "[", "wh", "]", ",", "\"ppt_mask\"", ",", "batch_size", ",", "projective", ",", "multiroot", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Creating optimizer\"", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "finetuner", "=", "Runner", "(", ")", "\n", "origin_params", "=", "{", "name", ":", "p", ".", "clone", "(", ")", ".", "detach", "(", ")", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "}", "\n", "finetuner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ")", ",", "\n", "compute_l2_loss", "(", "model", ",", "origin_params", ")", ",", "\n", "compute_total_arc_type_scores", "(", "model", ",", "vocab", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "@", "finetuner", ".", "on", "(", "Event", ".", "BATCH", ")", "\n", "def", "compute_loss", "(", "state", ")", ":", "\n", "        ", "mask", "=", "state", "[", "\"batch\"", "]", "[", "\"mask\"", "]", "\n", "ppt_mask", "=", "state", "[", "\"batch\"", "]", "[", "\"ppt_mask\"", "]", ".", "bool", "(", ")", "\n", "scores", "=", "state", "[", "\"total_arc_type_scores\"", "]", "\n", "\n", "ppt_loss", "=", "compute_aatrn_loss", "(", "scores", ",", "ppt_mask", ",", "mask", ",", "projective", ",", "multiroot", ")", "\n", "ppt_loss", "/=", "mask", ".", "size", "(", "0", ")", "\n", "loss", "=", "ppt_loss", "+", "l2_coef", "*", "state", "[", "\"l2_loss\"", "]", "\n", "\n", "state", "[", "\"loss\"", "]", "=", "loss", "\n", "state", "[", "\"stats\"", "]", "=", "{", "\n", "\"ppt_loss\"", ":", "ppt_loss", ".", "item", "(", ")", ",", "\n", "\"l2_loss\"", ":", "state", "[", "\"l2_loss\"", "]", ".", "item", "(", ")", ",", "\n", "}", "\n", "state", "[", "\"extra_stats\"", "]", "=", "{", "\"loss\"", ":", "loss", ".", "item", "(", ")", "}", "\n", "state", "[", "\"n_items\"", "]", "=", "mask", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "finetuner", ".", "on", "(", "Event", ".", "BATCH", ",", "[", "update_params", "(", "opt", ")", ",", "log_grads", "(", "_run", ",", "model", ")", ",", "log_stats", "(", "_run", ")", "]", ")", "\n", "\n", "@", "finetuner", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ")", "\n", "def", "eval_on_dev", "(", "state", ")", ":", "\n", "        ", "_log", ".", "info", "(", "\"Evaluating on dev\"", ")", "\n", "eval_state", "=", "run_eval", "(", "model", ",", "vocab", ",", "samples", "[", "\"dev\"", "]", ")", "\n", "accs", "=", "eval_state", "[", "\"counts\"", "]", ".", "accs", "\n", "print_accs", "(", "accs", ",", "run", "=", "_run", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "ppt_loss", "=", "eval_state", "[", "\"mean_ppt_loss\"", "]", "\n", "_log", ".", "info", "(", "\"dev_ppt_loss: %.4f\"", ",", "ppt_loss", ")", "\n", "_run", ".", "log_scalar", "(", "\"dev_ppt_loss\"", ",", "ppt_loss", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "state", "[", "\"dev_accs\"", "]", "=", "accs", "\n", "\n", "", "@", "finetuner", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ")", "\n", "def", "maybe_eval_on_test", "(", "state", ")", ":", "\n", "        ", "if", "state", "[", "\"epoch\"", "]", "!=", "max_epoch", ":", "\n", "            ", "return", "\n", "\n", "", "_log", ".", "info", "(", "\"Evaluating on test\"", ")", "\n", "eval_state", "=", "run_eval", "(", "model", ",", "vocab", ",", "samples", "[", "\"test\"", "]", ",", "compute_loss", "=", "False", ")", "\n", "print_accs", "(", "eval_state", "[", "\"counts\"", "]", ".", "accs", ",", "on", "=", "\"test\"", ",", "run", "=", "_run", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "", "finetuner", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ",", "save_state_dict", "(", "\"model\"", ",", "model", ",", "under", "=", "artifacts_dir", ")", ")", "\n", "\n", "EpochTimer", "(", ")", ".", "attach_on", "(", "finetuner", ")", "\n", "n_tokens", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "\"train\"", "]", ")", "\n", "ProgressBar", "(", "stats", "=", "\"stats\"", ",", "total", "=", "n_tokens", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "finetuner", ")", "\n", "\n", "bucket_key", "=", "lambda", "s", ":", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "-", "1", ")", "//", "10", "\n", "trn_iter", "=", "ShuffleIterator", "(", "\n", "BucketIterator", "(", "samples", "[", "\"train\"", "]", ",", "bucket_key", ",", "batch_size", ",", "shuffle_bucket", "=", "True", ",", "rng", "=", "_rnd", ")", ",", "\n", "rng", "=", "_rnd", ",", "\n", ")", "\n", "_log", ".", "info", "(", "\"Starting finetuning\"", ")", "\n", "try", ":", "\n", "        ", "finetuner", ".", "run", "(", "trn_iter", ",", "max_epoch", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "_log", ".", "info", "(", "\"Interrupt detected, training will abort\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "finetuner", ".", "state", "[", "\"dev_accs\"", "]", "[", "\"las_nopunct\"", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.modules.TransformerEncoderLayer.__init__": [[15, 28], ["torch.TransformerEncoderLayer.__init__", "modules.DistanceAwareSelfAttention"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "d_model", ":", "int", ",", "\n", "n_heads", ":", "int", ",", "\n", "ff_size", ":", "int", "=", "2048", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "kv_size", ":", "int", "=", "64", ",", "\n", ")", "->", "None", ":", "\n", "# call with fake n_heads to avoid error creating MultiheadAttention", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "d_model", ",", "1", ",", "dim_feedforward", "=", "ff_size", ",", "dropout", "=", "dropout", ")", "\n", "# replace with custom attention", "\n", "self", ".", "self_attn", "=", "DistanceAwareSelfAttention", "(", "\n", "d_model", ",", "n_heads", ",", "dropout", "=", "dropout", ",", "kv_size", "=", "kv_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.modules.DistanceAwareSelfAttention.__init__": [[34, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "einops.layers.torch.Rearrange"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "embed_dim", ":", "int", ",", "\n", "n_heads", ":", "int", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "clip_dist", ":", "int", "=", "10", ",", "\n", "kv_size", ":", "int", "=", "64", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "embed_dim", ",", "3", "*", "n_heads", "*", "kv_size", ")", ",", "\n", "Rearrange", "(", "\"slen bsz (n nhead dim) -> n bsz nhead slen dim\"", ",", "n", "=", "3", ",", "dim", "=", "kv_size", ")", ",", "\n", ")", "\n", "self", ".", "k_dist_emb", "=", "nn", ".", "Embedding", "(", "clip_dist", "+", "1", ",", "kv_size", ")", "\n", "self", ".", "v_dist_emb", "=", "nn", ".", "Embedding", "(", "clip_dist", "+", "1", ",", "kv_size", ")", "\n", "self", ".", "attn_dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "n_heads", "*", "kv_size", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.modules.DistanceAwareSelfAttention.forward": [[52, 92], ["modules.DistanceAwareSelfAttention.in_proj", "modules.DistanceAwareSelfAttention._get_distances().to", "einops.rearrange", "modules.DistanceAwareSelfAttention.softmax", "modules.DistanceAwareSelfAttention.attn_dropout", "einops.rearrange", "modules.DistanceAwareSelfAttention.out_proj", "inputs.dim", "q.size", "modules.DistanceAwareSelfAttention._get_dist_attn_weights", "einops.rearrange", "modules.DistanceAwareSelfAttention.masked_fill_", "modules.DistanceAwareSelfAttention._get_dist_attn_outputs", "modules.DistanceAwareSelfAttention._get_distances", "float", "inputs.size", "inputs.size", "inputs.size"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.modules.DistanceAwareSelfAttention._get_dist_attn_weights", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.modules.DistanceAwareSelfAttention._get_dist_attn_outputs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.modules.DistanceAwareSelfAttention._get_distances"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "inputs2", ",", "inputs3", ",", "attn_mask", "=", "None", ",", "key_padding_mask", "=", "None", ")", ":", "\n", "        ", "assert", "inputs", "is", "inputs2", "and", "inputs", "is", "inputs3", ",", "\"must be a self-attention\"", "\n", "assert", "attn_mask", "is", "None", ",", "\"attn_mask should not be given\"", "\n", "\n", "# shape: (slen, bsz, embed_dim)", "\n", "assert", "inputs", ".", "dim", "(", ")", "==", "3", "\n", "# shape: (bsz, slen)", "\n", "assert", "key_padding_mask", "is", "None", "or", "key_padding_mask", ".", "shape", "==", "(", "\n", "inputs", ".", "size", "(", "1", ")", ",", "\n", "inputs", ".", "size", "(", "0", ")", ",", "\n", ")", "\n", "\n", "# each shape: (bsz, nhead, slen, qdim/vdim)", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "in_proj", "(", "inputs", ")", "\n", "# shape: (slen, slen)", "\n", "distances", "=", "self", ".", "_get_distances", "(", "inputs", ".", "size", "(", "0", ")", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "\n", "q", "*=", "q", ".", "size", "(", "-", "1", ")", "**", "-", "0.5", "\n", "k", "=", "rearrange", "(", "k", ",", "\"bsz nhead slen qdim -> bsz nhead qdim slen\"", ")", "\n", "\n", "# shape: (bsz, nhead, slen, slen)", "\n", "attn_weights", "=", "q", "@", "k", "+", "self", ".", "_get_dist_attn_weights", "(", "q", ",", "distances", ")", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "# broadcast over heads and queries", "\n", "            ", "mask", "=", "rearrange", "(", "key_padding_mask", ",", "\"bsz slen -> bsz () () slen\"", ")", "\n", "attn_weights", ".", "masked_fill_", "(", "mask", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "# shape: (bsz, nhead, slen, slen)", "\n", "", "attn_weights", "=", "attn_weights", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "# shape: (bsz, nhead, slen, slen)", "\n", "attn_weights", "=", "self", ".", "attn_dropout", "(", "attn_weights", ")", "\n", "# shape: (bsz, nhead, slen, vdim)", "\n", "attn_outputs", "=", "attn_weights", "@", "v", "+", "self", ".", "_get_dist_attn_outputs", "(", "attn_weights", ",", "distances", ")", "\n", "\n", "attn_outputs", "=", "rearrange", "(", "attn_outputs", ",", "\"bsz nhead slen vdim -> slen bsz (nhead vdim)\"", ")", "\n", "# shape: (slen, bsz, embed_dim)", "\n", "attn_outputs", "=", "self", ".", "out_proj", "(", "attn_outputs", ")", "\n", "\n", "return", "attn_outputs", ",", "None", "# attn_weights is not needed", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.modules.DistanceAwareSelfAttention._get_distances": [[93, 101], ["einops.rearrange", "einops.rearrange", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.clamp().long", "torch.abs.clamp().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.abs.clamp", "torch.abs.clamp"], "methods", ["None"], ["", "def", "_get_distances", "(", "self", ",", "slen", ":", "int", ")", "->", "LongTensor", ":", "\n", "        ", "x", "=", "rearrange", "(", "torch", ".", "arange", "(", "slen", ")", ",", "\"slen -> () slen\"", ")", "\n", "y", "=", "rearrange", "(", "torch", ".", "arange", "(", "slen", ")", ",", "\"slen -> slen ()\"", ")", "\n", "# shape: (slen, slen)", "\n", "dist", "=", "torch", ".", "abs", "(", "x", "-", "y", ")", "\n", "clip_dist", "=", "self", ".", "k_dist_emb", ".", "num_embeddings", "-", "1", "\n", "# shape: (slen, slen)", "\n", "return", "dist", ".", "clamp", "(", "max", "=", "clip_dist", ")", ".", "long", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.modules.DistanceAwareSelfAttention._get_dist_attn_weights": [[102, 115], ["modules.DistanceAwareSelfAttention.k_dist_emb", "einops.rearrange", "einops.rearrange", "einops.rearrange", "q.dim", "q.size", "q.size"], "methods", ["None"], ["", "def", "_get_dist_attn_weights", "(", "self", ",", "q", ":", "Tensor", ",", "dist", ":", "LongTensor", ")", "->", "Tensor", ":", "\n", "# shape: (bsz, nhead, slen, qdim)", "\n", "        ", "assert", "q", ".", "dim", "(", ")", "==", "4", "\n", "# shape: (slen, slen)", "\n", "assert", "dist", ".", "shape", "==", "(", "q", ".", "size", "(", "2", ")", ",", "q", ".", "size", "(", "2", ")", ")", "\n", "\n", "# shape: (slen, slen, qdim)", "\n", "k_dist", "=", "self", ".", "k_dist_emb", "(", "dist", ")", "\n", "\n", "q_dist", "=", "rearrange", "(", "q", ",", "\"bsz nhead slen qdim -> bsz nhead slen () qdim\"", ")", "# bc over keys", "\n", "k_dist", "=", "rearrange", "(", "k_dist", ",", "\"slen slen2 qdim -> slen qdim slen2\"", ")", "\n", "weights", "=", "q_dist", "@", "k_dist", "\n", "return", "rearrange", "(", "weights", ",", "\"bsz nhead slen () slen2 -> bsz nhead slen slen2\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.modules.DistanceAwareSelfAttention._get_dist_attn_outputs": [[116, 129], ["modules.DistanceAwareSelfAttention.v_dist_emb", "einops.rearrange", "einops.rearrange", "attn_weights.dim", "attn_weights.size", "attn_weights.size"], "methods", ["None"], ["", "def", "_get_dist_attn_outputs", "(", "self", ",", "attn_weights", ":", "Tensor", ",", "dist", ":", "LongTensor", ")", "->", "Tensor", ":", "\n", "# shape: (bsz, nhead, slen, slen)", "\n", "        ", "assert", "attn_weights", ".", "dim", "(", ")", "==", "4", "\n", "assert", "attn_weights", ".", "size", "(", "-", "2", ")", "==", "attn_weights", ".", "size", "(", "-", "1", ")", "\n", "# shape: (slen, slen)", "\n", "assert", "dist", ".", "shape", "==", "attn_weights", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "# shape: (slen, slen, vdim)", "\n", "v_dist", "=", "self", ".", "v_dist_emb", "(", "dist", ")", "\n", "\n", "attn_dist", "=", "rearrange", "(", "attn_weights", ",", "\"bsz nhead slen slen2 -> bsz nhead slen () slen2\"", ")", "\n", "outputs", "=", "attn_dist", "@", "v_dist", "\n", "return", "rearrange", "(", "outputs", ",", "\"bsz nhead slen () vdim -> bsz nhead slen vdim\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.__init__": [[37, 56], ["scores.dim", "scores.size", "scores.new_full().bool", "scores.new_full"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "scores", ":", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "BoolTensor", "]", "=", "None", ",", "\n", "projective", ":", "bool", "=", "False", ",", "\n", "multiroot", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "assert", "scores", ".", "dim", "(", ")", "==", "4", "\n", "bsz", ",", "slen", "=", "scores", ".", "shape", "[", ":", "2", "]", "\n", "assert", "scores", ".", "size", "(", "2", ")", "==", "slen", "\n", "assert", "mask", "is", "None", "or", "mask", ".", "shape", "==", "(", "bsz", ",", "slen", ")", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "scores", ".", "new_full", "(", "[", "bsz", ",", "slen", "]", ",", "1", ")", ".", "bool", "(", ")", "# type: ignore", "\n", "\n", "", "self", ".", "scores", "=", "scores", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "proj", "=", "projective", "\n", "self", ".", "multiroot", "=", "multiroot", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.log_probs": [[57, 92], ["heads.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "scores.masked_fill.masked_fill.gather().squeeze", "scores.masked_fill.masked_fill.gather().squeeze", "scores.masked_fill.masked_fill.masked_fill", "scores.masked_fill.masked_fill.masked_fill", "heads.unsqueeze().expand.unsqueeze().expand.dim", "scores.masked_fill.masked_fill.sum", "heads.unsqueeze().expand.unsqueeze().expand.unsqueeze", "scores.masked_fill.masked_fill.gather", "scores.masked_fill.masked_fill.gather", "torch.arange().to", "crf.DepTreeCRF.log_partitions", "heads.unsqueeze().expand.unsqueeze().expand.unsqueeze", "types.unsqueeze", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.log_partitions"], ["", "def", "log_probs", "(", "\n", "self", ",", "heads", ":", "LongTensor", ",", "types", ":", "LongTensor", ",", "score_only", ":", "bool", "=", "False", "\n", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"Compute the log probability of a labeled dependency tree.\n\n        Args:\n            heads: Tensor of shape (B, N) containing the index/position of the head of\n                each word.\n            types: Tensor of shape (B, N) containing the dependency types for the\n                corresponding head-dependent relation.\n            score_only: Whether to compute only the score of the tree. Useful for training\n                with cross-entropy loss.\n\n        Returns:\n            1-D tensor of length B containing the log probabilities.\n        \"\"\"", "\n", "assert", "heads", ".", "dim", "(", ")", "==", "2", "\n", "assert", "types", ".", "shape", "==", "heads", ".", "shape", "\n", "assert", "self", ".", "mask", "is", "not", "None", "\n", "\n", "scores", "=", "self", ".", "scores", "\n", "bsz", ",", "slen", ",", "_", ",", "n_types", "=", "self", ".", "scores", ".", "shape", "\n", "\n", "# broadcast over types", "\n", "heads", "=", "heads", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bsz", ",", "slen", ",", "n_types", ")", "# type: ignore", "\n", "# shape: (bsz, slen, n_types)", "\n", "scores", "=", "scores", ".", "gather", "(", "1", ",", "heads", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "# shape: (bsz, slen)", "\n", "scores", "=", "scores", ".", "gather", "(", "2", ",", "types", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "# mask scores from invalid dependents", "\n", "scores", "=", "scores", ".", "masked_fill", "(", "~", "self", ".", "mask", ",", "0", ")", "\n", "# mask scores of root as dependents", "\n", "scores", "=", "scores", ".", "masked_fill", "(", "torch", ".", "arange", "(", "slen", ")", ".", "to", "(", "scores", ".", "device", ")", "==", "self", ".", "ROOT", ",", "0", ")", "\n", "\n", "return", "scores", ".", "sum", "(", "dim", "=", "1", ")", "-", "(", "0", "if", "score_only", "else", "self", ".", "log_partitions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.argmax": [[93, 124], ["torch_struct.DependencyCRF.DepTreeCRF.scores.max", "torch_struct.DependencyCRF.DepTreeCRF.mask.long().sum", "best_types.gather().squeeze", "torch_struct.DependencyCRF", "torch_struct.deptree._convert().max", "crf.find_mst", "torch_struct.DependencyCRF.DepTreeCRF.mask.long", "torch_struct.deptree._unconvert", "warnings.warn", "torch_struct.DependencyCRF.DepTreeCRF.tolist", "best_types.gather", "torch_struct.deptree._convert", "find_mst.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.find_mst"], ["", "def", "argmax", "(", "self", ")", "->", "Tuple", "[", "LongTensor", ",", "LongTensor", "]", ":", "\n", "        ", "\"\"\"Compute the most probable labeled dependency tree.\n\n        Returns:\n            - Tensor of shape (B, N) containing the head positions of the best tree.\n            - Tensor of shape (B, N) containing the dependency types for the\n              corresponding head-dependent relation.\n        \"\"\"", "\n", "assert", "self", ".", "mask", "is", "not", "None", "\n", "\n", "# each shape: (bsz, slen, slen)", "\n", "scores", ",", "best_types", "=", "self", ".", "scores", ".", "max", "(", "dim", "=", "3", ")", "\n", "lengths", "=", "self", ".", "mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "proj", ":", "\n", "            ", "crf", "=", "DependencyCRF", "(", "_unconvert", "(", "scores", ")", ",", "lengths", "-", "1", ",", "multiroot", "=", "self", ".", "multiroot", ")", "\n", "# shape: (bsz, slen)", "\n", "_", ",", "pred_heads", "=", "_convert", "(", "crf", ".", "argmax", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "pred_heads", "[", ":", ",", "self", ".", "ROOT", "]", "=", "self", ".", "ROOT", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "multiroot", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"argmax for non-projective is still multiroot although multiroot=False\"", "\n", ")", "\n", "# shape: (bsz, slen)", "\n", "", "pred_heads", "=", "find_mst", "(", "scores", ",", "lengths", ".", "tolist", "(", ")", ")", "\n", "\n", "# shape: (bsz, slen)", "\n", "", "pred_types", "=", "best_types", ".", "gather", "(", "1", ",", "pred_heads", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "pred_heads", ",", "pred_types", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.log_partitions": [[125, 139], ["matrix_tree.compute_log_partitions", "torch_struct.DependencyCRF.DepTreeCRF.mask.long().sum", "torch_struct.DependencyCRF", "torch_struct.deptree._unconvert", "torch_struct.DependencyCRF.DepTreeCRF.mask.long"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.compute_log_partitions"], ["", "def", "log_partitions", "(", "self", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"Compute the log partition function.\n\n        Returns:\n            1-D tensor of length B containing the log partition functions.\n        \"\"\"", "\n", "assert", "self", ".", "mask", "is", "not", "None", "\n", "\n", "if", "self", ".", "proj", ":", "\n", "            ", "lengths", "=", "self", ".", "mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "crf", "=", "DependencyCRF", "(", "_unconvert", "(", "self", ".", "scores", ")", ",", "lengths", "-", "1", ",", "multiroot", "=", "self", ".", "multiroot", ")", "\n", "return", "crf", ".", "partition", "\n", "\n", "", "return", "compute_log_partitions", "(", "self", ".", "scores", ",", "self", ".", "mask", ",", "self", ".", "multiroot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.marginals": [[140, 162], ["matrix_tree.compute_marginals", "torch_struct.DependencyCRF.DepTreeCRF.mask.long().sum", "torch_struct.DependencyCRF", "torch_struct.deptree._convert", "torch.eye().to().unsqueeze().bool", "margs.masked_fill.masked_fill.masked_fill", "torch_struct.deptree._unconvert", "torch_struct.DependencyCRF.DepTreeCRF.mask.long", "torch.eye().to().unsqueeze", "torch.eye().to", "torch.eye", "margs.masked_fill.masked_fill.size"], "methods", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.compute_marginals"], ["", "def", "marginals", "(", "self", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"Compute the arc marginal probabilities.\n\n        Returns:\n            Tensor of shape (B, N, N, L) containing the arc marginal probabilities.\n        \"\"\"", "\n", "assert", "self", ".", "mask", "is", "not", "None", "\n", "\n", "if", "self", ".", "proj", ":", "\n", "            ", "lengths", "=", "self", ".", "mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "crf", "=", "DependencyCRF", "(", "_unconvert", "(", "self", ".", "scores", ")", ",", "lengths", "-", "1", ",", "multiroot", "=", "self", ".", "multiroot", ")", "\n", "margs", "=", "_convert", "(", "crf", ".", "marginals", ")", "\n", "\n", "# marginals of incoming arcs to root are zero", "\n", "margs", "[", ":", ",", ":", ",", "self", ".", "ROOT", "]", "=", "0", "\n", "# marginals of self-loops are zero", "\n", "self_loop_mask", "=", "torch", ".", "eye", "(", "margs", ".", "size", "(", "1", ")", ")", ".", "to", "(", "margs", ".", "device", ")", ".", "unsqueeze", "(", "2", ")", ".", "bool", "(", ")", "\n", "margs", "=", "margs", ".", "masked_fill", "(", "self_loop_mask", ",", "0", ")", "\n", "\n", "return", "margs", "\n", "\n", "", "return", "compute_marginals", "(", "self", ".", "scores", ",", "self", ".", "mask", ",", "self", ".", "multiroot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.find_mst": [[164, 186], ["scores.new_zeros().long", "range", "mst.decode_mst", "torch.from_numpy().to", "scores.new_zeros", "scores[].cpu().numpy", "torch.from_numpy", "scores[].cpu"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.mst.decode_mst"], ["", "", "def", "find_mst", "(", "scores", ":", "Tensor", ",", "slens", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ",", "root", ":", "int", "=", "0", ")", "->", "LongTensor", ":", "\n", "    ", "\"\"\"Find maximum spanning tree with Tarjan's implementation of Edmond's algorithm.\n\n    Args:\n        scores: Tensor of shape (B, N, N) containing the scores of all possible arcs.\n        slens: List of sequence lengths.\n        root: Index/position of the root.\n\n    Returns:\n        Tensor of shape (B, N) containing the head positions of the maximum tree.\n    \"\"\"", "\n", "bsz", ",", "maxlen", ",", "_", "=", "scores", ".", "shape", "\n", "heads", "=", "scores", ".", "new_zeros", "(", "(", "bsz", ",", "maxlen", ")", ")", ".", "long", "(", ")", "\n", "\n", "for", "b", "in", "range", "(", "bsz", ")", ":", "\n", "        ", "slen", "=", "maxlen", "if", "slens", "is", "None", "else", "slens", "[", "b", "]", "\n", "hs", ",", "_", "=", "decode_mst", "(", "scores", "[", "b", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "slen", ",", "has_labels", "=", "False", ")", "\n", "heads", "[", "b", "]", "=", "torch", ".", "from_numpy", "(", "hs", ")", ".", "to", "(", "heads", ")", "\n", "\n", "", "heads", "[", ":", ",", "root", "]", "=", "root", "\n", "\n", "return", "heads", "# type: ignore", "\n", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.align_embedding.default": [[21, 29], ["None"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "default", "(", ")", ":", "\n", "# path to directory containing fasttext *.vec files", "\n", "    ", "fasttext_dir", "=", "\"fasttext\"", "\n", "# comma-separated list of languages to align", "\n", "langs", "=", "\"en,id\"", "\n", "# output directory", "\n", "output_dir", "=", "\"aligned_fasttext\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.align_embedding.ahmadetal": [[31, 34], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "ahmadetal", "(", ")", ":", "\n", "    ", "langs", "=", "\"ar,bg,ca,zh,hr,cs,da,nl,en,et,fi,fr,de,he,hi,id,it,ja,ko,la,lv,no,pl,pt,ro,ru,sk,sl,es,sv,uk\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.align_embedding.heetal": [[36, 39], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "heetal", "(", ")", ":", "\n", "    ", "langs", "=", "\"zh,fa,ar,ja,id,ko,tr,hi,hr,he,bg,it,pt,fr,es,no,da,sv,nl,de,en\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.align_embedding.align": [[41, 58], ["pathlib.Path", "pathlib.Path.mkdir", "langs.split", "_log.info", "output_path.exists", "fastText_multilingual.fasttext.FastVector", "fastText_multilingual.fasttext.FastVector.apply_transform", "fastText_multilingual.fasttext.FastVector.export", "_log.info", "str", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.split_conllu.split"], ["", "@", "ex", ".", "automain", "\n", "def", "align", "(", "_log", ",", "fasttext_dir", "=", "\"fasttext\"", ",", "langs", "=", "\"en,id\"", ",", "output_dir", "=", "\"aligned_fasttext\"", ")", ":", "\n", "    ", "\"\"\"Align fasttext embeddings with the method of Smith et al. (2017).\"\"\"", "\n", "output_dir", "=", "Path", "(", "output_dir", ")", "\n", "output_dir", ".", "mkdir", "(", ")", "\n", "\n", "for", "lang", "in", "langs", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "_log", ".", "info", "(", "\"Aligning embedding for %s\"", ",", "lang", ")", "\n", "output_path", "=", "output_dir", "/", "f\"wiki.multi.{lang}.vec\"", "\n", "if", "output_path", ".", "exists", "(", ")", ":", "\n", "            ", "_log", ".", "info", "(", "\"Aligned embedding already exists, skipping\"", ")", "\n", "continue", "\n", "", "dictionary", "=", "FastVector", "(", "vector_file", "=", "Path", "(", "fasttext_dir", ")", "/", "f\"wiki.{lang}.vec\"", ")", "\n", "dictionary", ".", "apply_transform", "(", "\n", "str", "(", "Path", "(", "\"fastText_multilingual\"", ")", "/", "\"alignment_matrices\"", "/", "f\"{lang}.txt\"", ")", "\n", ")", "\n", "dictionary", ".", "export", "(", "output_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.aatrn.compute_aatrn_loss": [[11, 23], ["scores.masked_fill", "crf.DepTreeCRF", "crf.DepTreeCRF", "crf.DepTreeCRF.log_partitions().sum", "crf.DepTreeCRF.log_partitions().sum", "crf.DepTreeCRF.log_partitions", "crf.DepTreeCRF.log_partitions"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.log_partitions", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.log_partitions"], ["def", "compute_aatrn_loss", "(", "\n", "scores", ":", "Tensor", ",", "\n", "aa_mask", ":", "BoolTensor", ",", "\n", "mask", ":", "Optional", "[", "BoolTensor", "]", "=", "None", ",", "\n", "projective", ":", "bool", "=", "False", ",", "\n", "multiroot", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tensor", ":", "\n", "    ", "assert", "aa_mask", ".", "shape", "==", "scores", ".", "shape", "\n", "masked_scores", "=", "scores", ".", "masked_fill", "(", "~", "aa_mask", ",", "-", "1e9", ")", "\n", "crf", "=", "DepTreeCRF", "(", "masked_scores", ",", "mask", ",", "projective", ",", "multiroot", ")", "\n", "crf_z", "=", "DepTreeCRF", "(", "scores", ",", "mask", ",", "projective", ",", "multiroot", ")", "\n", "return", "-", "crf", ".", "log_partitions", "(", ")", ".", "sum", "(", ")", "+", "crf_z", ".", "log_partitions", "(", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.aatrn.compute_ambiguous_arcs_mask": [[25, 61], ["crf.DepTreeCRF", "crf.DepTreeCRF.marginals", "einops.rearrange", "einops.rearrange.sort", "einops.rearrange.long().sum().clamp", "einops.rearrange.scatter", "orig_indices.sort", "einops.rearrange.gather", "crf.DepTreeCRF.argmax", "einops.rearrange.scatter", "einops.rearrange", "scores.dim", "einops.rearrange.cumsum", "best_idx.unsqueeze", "einops.rearrange.long().sum", "einops.rearrange.long"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.marginals", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.argmax"], ["", "def", "compute_ambiguous_arcs_mask", "(", "\n", "scores", ":", "Tensor", ",", "\n", "threshold", ":", "float", "=", "0.95", ",", "\n", "projective", ":", "bool", "=", "False", ",", "\n", "multiroot", ":", "bool", "=", "True", ",", "\n", ")", "->", "BoolTensor", ":", "\n", "    ", "assert", "scores", ".", "dim", "(", ")", "==", "4", "\n", "bsz", ",", "slen", ",", "_", ",", "n_types", "=", "scores", ".", "shape", "\n", "assert", "0", "<=", "threshold", "<=", "1", "\n", "\n", "crf", "=", "DepTreeCRF", "(", "scores", ",", "projective", "=", "projective", ",", "multiroot", "=", "multiroot", ")", "\n", "marginals", "=", "crf", ".", "marginals", "(", ")", "\n", "\n", "# select high-prob arcs until their cumulative probability exceeds threshold", "\n", "marginals", "=", "rearrange", "(", "marginals", ",", "\"bsz hlen dlen ntypes -> bsz dlen (hlen ntypes)\"", ")", "\n", "marginals", ",", "orig_indices", "=", "marginals", ".", "sort", "(", "dim", "=", "2", ",", "descending", "=", "True", ")", "\n", "arc_mask", "=", "marginals", ".", "cumsum", "(", "dim", "=", "2", ")", "<", "threshold", "\n", "\n", "# mark the arc that makes the cum sum exceeds threshold", "\n", "last_idx", "=", "arc_mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "max", "=", "slen", "*", "n_types", "-", "1", ")", "\n", "arc_mask", "=", "arc_mask", ".", "scatter", "(", "2", ",", "last_idx", ",", "True", ")", "\n", "\n", "# restore the arc_mask order and shape", "\n", "_", ",", "restore_indices", "=", "orig_indices", ".", "sort", "(", "dim", "=", "2", ")", "\n", "arc_mask", "=", "arc_mask", ".", "gather", "(", "2", ",", "restore_indices", ")", "\n", "\n", "# ensure best tree is selected", "\n", "# each shape: (bsz, slen)", "\n", "best_heads", ",", "best_types", "=", "crf", ".", "argmax", "(", ")", "\n", "best_idx", "=", "best_heads", "*", "n_types", "+", "best_types", "\n", "arc_mask", "=", "arc_mask", ".", "scatter", "(", "2", ",", "best_idx", ".", "unsqueeze", "(", "2", ")", ",", "True", ")", "\n", "\n", "arc_mask", "=", "rearrange", "(", "\n", "arc_mask", ",", "\"bsz dlen (hlen ntypes) -> bsz hlen dlen ntypes\"", ",", "hlen", "=", "slen", "\n", ")", "\n", "return", "arc_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.default": [[46, 76], ["torch.cuda.is_available"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "default", "(", ")", ":", "\n", "# directory to save finetuning artifacts", "\n", "    ", "artifacts_dir", "=", "\"ft_artifacts\"", "\n", "# whether to overwrite existing artifacts directory", "\n", "overwrite", "=", "False", "\n", "# discard train/dev/test samples with length greater than these numbers", "\n", "max_length", "=", "{", "}", "\n", "# load training artifacts from this artifacts directory", "\n", "load_from", "=", "\"artifacts\"", "\n", "# load trained model parameters from this file under 'load_from' directory", "\n", "load_params", "=", "\"model.pth\"", "\n", "# device to run on [cpu, cuda]", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "# path to word embedding in word2vec format", "\n", "word_emb_path", "=", "\"wiki.en.vec\"", "\n", "# whether to freeze word and tag embedding", "\n", "freeze", "=", "False", "\n", "# whether to operate in the space of projective trees", "\n", "projective", "=", "False", "\n", "# whether to consider multi-root trees (otherwise only single-root trees)", "\n", "multiroot", "=", "False", "\n", "# batch size", "\n", "batch_size", "=", "16", "\n", "# learning rate", "\n", "lr", "=", "1e-5", "\n", "# coefficient of L2 regularization against initial parameters", "\n", "l2_coef", "=", "1.0", "\n", "# max number of epochs", "\n", "max_epoch", "=", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.ahmadetal": [[78, 83], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "ahmadetal", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "100", "}", "\n", "batch_size", "=", "80", "\n", "corpus", "=", "{", "\"normalize_digits\"", ":", "True", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.heetal_eval_setup": [[85, 88], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "heetal_eval_setup", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"dev\"", ":", "150", ",", "\"test\"", ":", "150", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.nearby": [[90, 95], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "nearby", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "60", "}", "\n", "lr", "=", "5.6e-4", "\n", "l2_coef", "=", "3e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.distant": [[97, 102], ["None"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "distant", "(", ")", ":", "\n", "    ", "max_length", "=", "{", "\"train\"", ":", "60", "}", "\n", "lr", "=", "3.7e-4", "\n", "l2_coef", "=", "2.8e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.testrun": [[104, 109], ["dict"], "function", ["None"], ["", "@", "ex", ".", "named_config", "\n", "def", "testrun", "(", ")", ":", "\n", "    ", "seed", "=", "12345", "\n", "max_epoch", "=", "2", "\n", "corpus", "=", "dict", "(", "portion", "=", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval": [[111, 136], ["rnnr.Runner", "rnnr.Runner.on", "sum", "rnnr.attachments.ProgressBar().attach_on", "rnnr.attachments.SumReducer().attach_on", "torch.no_grad", "rnnr.Runner.run", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_total_arc_type_scores", "callbacks.predict_batch", "callbacks.evaluate_batch", "callbacks.get_n_items", "len", "rnnr.attachments.ProgressBar", "rnnr.attachments.SumReducer", "text2array.BucketIterator", "len"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.predict_batch", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.evaluate_batch", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.get_n_items"], ["", "@", "ex", ".", "capture", "\n", "def", "run_eval", "(", "\n", "model", ",", "vocab", ",", "samples", ",", "device", "=", "\"cpu\"", ",", "projective", "=", "False", ",", "multiroot", "=", "True", ",", "batch_size", "=", "32", ",", "\n", ")", ":", "\n", "    ", "runner", "=", "Runner", "(", ")", "\n", "runner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ",", "training", "=", "False", ")", ",", "\n", "compute_total_arc_type_scores", "(", "model", ",", "vocab", ")", ",", "\n", "predict_batch", "(", "projective", ",", "multiroot", ")", ",", "\n", "evaluate_batch", "(", ")", ",", "\n", "get_n_items", "(", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "n_tokens", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", ")", "\n", "ProgressBar", "(", "leave", "=", "False", ",", "total", "=", "n_tokens", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "SumReducer", "(", "\"counts\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "runner", ".", "run", "(", "BucketIterator", "(", "samples", ",", "lambda", "s", ":", "len", "(", "s", "[", "\"words\"", "]", ")", ",", "batch_size", ")", ")", "\n", "\n", "", "return", "runner", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.finetune": [[138, 343], ["pathlib.Path", "_log.info", "pathlib.Path.mkdir", "_log.info", "serialization.load", "_log.info", "serialization.load.extend", "_log.info", "_log.info", "path.write_text", "_log.info", "serialization.load", "_log.info", "serialization.load.load_state_dict", "_log.info", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "_log.info", "path.write_text", "serialization.load.word_emb.requires_grad_", "serialization.load.tag_emb.requires_grad_", "serialization.load.to", "_log.info", "torch.optim.Adam", "rnnr.Runner", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.Runner.on", "rnnr.attachments.EpochTimer().attach_on", "sum", "rnnr.attachments.ProgressBar().attach_on", "text2array.ShuffleIterator", "_log.info", "list", "sum", "_log.info", "pathlib.Path", "path.read_text", "_log.info", "itertools.chain", "len", "serialization.dump", "list", "pathlib.Path", "path.read_text", "pathlib.Path", "torch.load", "torch.no_grad", "torch.nn.Embedding.from_pretrained", "serialization.dump", "enumerate", "rnnr.Runner", "rnnr.Runner.state.update", "rnnr.Runner.on", "rnnr.Runner.on", "sum", "rnnr.attachments.ProgressBar().attach_on", "_log.info", "zip", "serialization.load.parameters", "p.clone().detach", "serialization.load.", "einops.rearrange.masked_fill", "einops.rearrange", "heads.reshape.reshape", "torch.nn.functional.cross_entropy", "einops.rearrange", "types.reshape.reshape", "torch.nn.functional.cross_entropy", "arc_loss.masked_select().mean.masked_select().mean", "type_loss.masked_select().mean.masked_select().mean", "_log.info", "run_st.run_eval", "utils.print_accs", "_log.info", "run_st.run_eval", "utils.print_accs", "callbacks.save_state_dict", "text2array.BucketIterator", "rnnr.Runner.run", "ingredients.corpus.read_samples", "len", "len", "serialization.load.stoi", "utils.extend_word_embedding", "state[].extend", "state[].extend", "state[].extend", "[].numel", "torch.no_grad", "rnnr.Runner.run", "len", "len", "len", "len", "len", "len", "serialization.load.named_parameters", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_l2_loss", "arc_loss.masked_select().mean.exp().item", "type_loss.masked_select().mean.exp().item", "state[].item", "arc_loss.masked_select().mean.item", "type_loss.masked_select().mean.item", "callbacks.get_n_items", "callbacks.update_params", "callbacks.log_grads", "callbacks.log_stats", "rnnr.attachments.EpochTimer", "len", "rnnr.attachments.ProgressBar", "_log.info", "len", "samples.values", "callbacks.batch2tensors", "callbacks.set_train_mode", "callbacks.compute_total_arc_type_scores", "callbacks.predict_batch", "state[].tolist", "state[].tolist", "[].tolist", "len", "rnnr.attachments.ProgressBar", "text2array.BucketIterator", "len", "len", "len", "len", "p.clone", "mask.unsqueeze", "arc_loss.masked_select().mean.masked_select", "type_loss.masked_select().mean.masked_select", "len", "max_length.get", "vocab[].index", "mask.reshape", "mask.reshape", "arc_loss.masked_select().mean.exp", "type_loss.masked_select().mean.exp", "len"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_st.run_eval", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.save_state_dict", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.extend_word_embedding", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_l2_loss", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.get_n_items", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.update_params", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_grads", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_stats", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.predict_batch"], ["", "@", "ex", ".", "automain", "\n", "def", "finetune", "(", "\n", "_log", ",", "\n", "_run", ",", "\n", "_rnd", ",", "\n", "max_length", "=", "None", ",", "\n", "artifacts_dir", "=", "\"ft_artifacts\"", ",", "\n", "overwrite", "=", "False", ",", "\n", "load_from", "=", "\"artifacts\"", ",", "\n", "load_params", "=", "\"model.pth\"", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "word_emb_path", "=", "\"wiki.id.vec\"", ",", "\n", "freeze", "=", "False", ",", "\n", "projective", "=", "False", ",", "\n", "multiroot", "=", "True", ",", "\n", "batch_size", "=", "32", ",", "\n", "lr", "=", "1e-5", ",", "\n", "l2_coef", "=", "1.0", ",", "\n", "max_epoch", "=", "5", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Finetune a trained model with self-training.\"\"\"", "\n", "if", "max_length", "is", "None", ":", "\n", "        ", "max_length", "=", "{", "}", "\n", "\n", "", "artifacts_dir", "=", "Path", "(", "artifacts_dir", ")", "\n", "_log", ".", "info", "(", "\"Creating artifacts directory %s\"", ",", "artifacts_dir", ")", "\n", "artifacts_dir", ".", "mkdir", "(", "exist_ok", "=", "overwrite", ")", "\n", "\n", "samples", "=", "{", "\n", "wh", ":", "list", "(", "read_samples", "(", "which", "=", "wh", ",", "max_length", "=", "max_length", ".", "get", "(", "wh", ")", ")", ")", "\n", "for", "wh", "in", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", "]", "\n", "}", "\n", "for", "wh", "in", "samples", ":", "\n", "        ", "n_toks", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "wh", "]", ")", "\n", "_log", ".", "info", "(", "\"Read %d %s samples and %d tokens\"", ",", "len", "(", "samples", "[", "wh", "]", ")", ",", "wh", ",", "n_toks", ")", "\n", "\n", "", "path", "=", "Path", "(", "load_from", ")", "/", "\"vocab.yml\"", "\n", "_log", ".", "info", "(", "\"Loading vocabulary from %s\"", ",", "path", ")", "\n", "vocab", "=", "load", "(", "path", ".", "read_text", "(", "encoding", "=", "\"utf8\"", ")", ")", "\n", "for", "name", "in", "vocab", ":", "\n", "        ", "_log", ".", "info", "(", "\"Found %d %s\"", ",", "len", "(", "vocab", "[", "name", "]", ")", ",", "name", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Extending vocabulary with target words\"", ")", "\n", "vocab", ".", "extend", "(", "chain", "(", "*", "samples", ".", "values", "(", ")", ")", ",", "[", "\"words\"", "]", ")", "\n", "_log", ".", "info", "(", "\"Found %d words now\"", ",", "len", "(", "vocab", "[", "\"words\"", "]", ")", ")", "\n", "\n", "path", "=", "artifacts_dir", "/", "\"vocab.yml\"", "\n", "_log", ".", "info", "(", "\"Saving vocabulary to %s\"", ",", "path", ")", "\n", "path", ".", "write_text", "(", "dump", "(", "vocab", ")", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "samples", "=", "{", "wh", ":", "list", "(", "vocab", ".", "stoi", "(", "samples", "[", "wh", "]", ")", ")", "for", "wh", "in", "samples", "}", "\n", "\n", "path", "=", "Path", "(", "load_from", ")", "/", "\"model.yml\"", "\n", "_log", ".", "info", "(", "\"Loading model from metadata %s\"", ",", "path", ")", "\n", "model", "=", "load", "(", "path", ".", "read_text", "(", "encoding", "=", "\"utf8\"", ")", ")", "\n", "\n", "path", "=", "Path", "(", "load_from", ")", "/", "load_params", "\n", "_log", ".", "info", "(", "\"Loading model parameters from %s\"", ",", "path", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "\"cpu\"", ")", ")", "\n", "\n", "_log", ".", "info", "(", "\"Creating extended word embedding layer\"", ")", "\n", "kv", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "word_emb_path", ")", "\n", "assert", "model", ".", "word_emb", ".", "embedding_dim", "==", "kv", ".", "vector_size", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "word_emb", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "extend_word_embedding", "(", "model", ".", "word_emb", ".", "weight", ",", "vocab", "[", "\"words\"", "]", ",", "kv", ")", "\n", ")", "\n", "\n", "", "path", "=", "artifacts_dir", "/", "\"model.yml\"", "\n", "_log", ".", "info", "(", "\"Saving model metadata to %s\"", ",", "path", ")", "\n", "path", ".", "write_text", "(", "dump", "(", "model", ")", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "model", ".", "word_emb", ".", "requires_grad_", "(", "not", "freeze", ")", "\n", "model", ".", "tag_emb", ".", "requires_grad_", "(", "not", "freeze", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "for", "wh", "in", "[", "\"train\"", "]", ":", "\n", "        ", "for", "i", ",", "s", "in", "enumerate", "(", "samples", "[", "wh", "]", ")", ":", "\n", "            ", "s", "[", "\"_id\"", "]", "=", "i", "\n", "\n", "", "runner", "=", "Runner", "(", ")", "\n", "runner", ".", "state", ".", "update", "(", "{", "\"st_heads\"", ":", "[", "]", ",", "\"st_types\"", ":", "[", "]", ",", "\"_ids\"", ":", "[", "]", "}", ")", "\n", "runner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ",", "training", "=", "False", ")", ",", "\n", "compute_total_arc_type_scores", "(", "model", ",", "vocab", ")", ",", "\n", "predict_batch", "(", "projective", ",", "multiroot", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "@", "runner", ".", "on", "(", "Event", ".", "BATCH", ")", "\n", "def", "save_st_trees", "(", "state", ")", ":", "\n", "            ", "state", "[", "\"st_heads\"", "]", ".", "extend", "(", "state", "[", "\"pred_heads\"", "]", ".", "tolist", "(", ")", ")", "\n", "state", "[", "\"st_types\"", "]", ".", "extend", "(", "state", "[", "\"pred_types\"", "]", ".", "tolist", "(", ")", ")", "\n", "state", "[", "\"_ids\"", "]", ".", "extend", "(", "state", "[", "\"batch\"", "]", "[", "\"_id\"", "]", ".", "tolist", "(", ")", ")", "\n", "state", "[", "\"n_items\"", "]", "=", "state", "[", "\"batch\"", "]", "[", "\"words\"", "]", ".", "numel", "(", ")", "\n", "\n", "", "n_toks", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "wh", "]", ")", "\n", "ProgressBar", "(", "total", "=", "n_toks", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "runner", ")", "\n", "\n", "_log", ".", "info", "(", "\"Computing ST trees for %s set\"", ",", "wh", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "runner", ".", "run", "(", "BucketIterator", "(", "samples", "[", "wh", "]", ",", "lambda", "s", ":", "len", "(", "s", "[", "\"words\"", "]", ")", ",", "batch_size", ")", ")", "\n", "\n", "", "assert", "len", "(", "runner", ".", "state", "[", "\"st_heads\"", "]", ")", "==", "len", "(", "samples", "[", "wh", "]", ")", "\n", "assert", "len", "(", "runner", ".", "state", "[", "\"st_types\"", "]", ")", "==", "len", "(", "samples", "[", "wh", "]", ")", "\n", "assert", "len", "(", "runner", ".", "state", "[", "\"_ids\"", "]", ")", "==", "len", "(", "samples", "[", "wh", "]", ")", "\n", "for", "i", ",", "st_heads", ",", "st_types", "in", "zip", "(", "\n", "runner", ".", "state", "[", "\"_ids\"", "]", ",", "runner", ".", "state", "[", "\"st_heads\"", "]", ",", "runner", ".", "state", "[", "\"st_types\"", "]", "\n", ")", ":", "\n", "            ", "assert", "len", "(", "samples", "[", "wh", "]", "[", "i", "]", "[", "\"words\"", "]", ")", "==", "len", "(", "st_heads", ")", "\n", "assert", "len", "(", "samples", "[", "wh", "]", "[", "i", "]", "[", "\"words\"", "]", ")", "==", "len", "(", "st_types", ")", "\n", "samples", "[", "wh", "]", "[", "i", "]", "[", "\"st_heads\"", "]", "=", "st_heads", "\n", "samples", "[", "wh", "]", "[", "i", "]", "[", "\"st_types\"", "]", "=", "st_types", "\n", "\n", "", "", "_log", ".", "info", "(", "\"Creating optimizer\"", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "finetuner", "=", "Runner", "(", ")", "\n", "origin_params", "=", "{", "name", ":", "p", ".", "clone", "(", ")", ".", "detach", "(", ")", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "}", "\n", "finetuner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "\n", "batch2tensors", "(", "device", ",", "vocab", ")", ",", "\n", "set_train_mode", "(", "model", ")", ",", "\n", "compute_l2_loss", "(", "model", ",", "origin_params", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "@", "finetuner", ".", "on", "(", "Event", ".", "BATCH", ")", "\n", "def", "compute_loss", "(", "state", ")", ":", "\n", "        ", "bat", "=", "state", "[", "\"batch\"", "]", "\n", "words", ",", "tags", ",", "heads", ",", "types", "=", "bat", "[", "\"words\"", "]", ",", "bat", "[", "\"tags\"", "]", ",", "bat", "[", "\"st_heads\"", "]", ",", "bat", "[", "\"st_types\"", "]", "\n", "mask", "=", "bat", "[", "\"mask\"", "]", "\n", "\n", "arc_scores", ",", "type_scores", "=", "model", "(", "words", ",", "tags", ",", "mask", ",", "heads", ")", "\n", "arc_scores", "=", "arc_scores", ".", "masked_fill", "(", "~", "mask", ".", "unsqueeze", "(", "2", ")", ",", "-", "1e9", ")", "# mask padding heads", "\n", "type_scores", "[", "...", ",", "vocab", "[", "\"types\"", "]", ".", "index", "(", "vocab", ".", "PAD_TOKEN", ")", "]", "=", "-", "1e9", "\n", "\n", "# remove root", "\n", "arc_scores", ",", "type_scores", "=", "arc_scores", "[", ":", ",", ":", ",", "1", ":", "]", ",", "type_scores", "[", ":", ",", "1", ":", "]", "\n", "heads", ",", "types", ",", "mask", "=", "heads", "[", ":", ",", "1", ":", "]", ",", "types", "[", ":", ",", "1", ":", "]", ",", "mask", "[", ":", ",", "1", ":", "]", "\n", "\n", "arc_scores", "=", "rearrange", "(", "arc_scores", ",", "\"bsz slen1 slen2 -> (bsz slen2) slen1\"", ")", "\n", "heads", "=", "heads", ".", "reshape", "(", "-", "1", ")", "\n", "arc_loss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "arc_scores", ",", "heads", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "type_scores", "=", "rearrange", "(", "type_scores", ",", "\"bsz slen ntypes -> (bsz slen) ntypes\"", ")", "\n", "types", "=", "types", ".", "reshape", "(", "-", "1", ")", "\n", "type_loss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "type_scores", ",", "types", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "arc_loss", "=", "arc_loss", ".", "masked_select", "(", "mask", ".", "reshape", "(", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "type_loss", "=", "type_loss", ".", "masked_select", "(", "mask", ".", "reshape", "(", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "loss", "=", "arc_loss", "+", "type_loss", "+", "l2_coef", "*", "state", "[", "\"l2_loss\"", "]", "\n", "\n", "state", "[", "\"loss\"", "]", "=", "loss", "\n", "state", "[", "\"stats\"", "]", "=", "{", "\n", "\"arc_ppl\"", ":", "arc_loss", ".", "exp", "(", ")", ".", "item", "(", ")", ",", "\n", "\"type_ppl\"", ":", "type_loss", ".", "exp", "(", ")", ".", "item", "(", ")", ",", "\n", "\"l2_loss\"", ":", "state", "[", "\"l2_loss\"", "]", ".", "item", "(", ")", ",", "\n", "}", "\n", "state", "[", "\"extra_stats\"", "]", "=", "{", "\"arc_loss\"", ":", "arc_loss", ".", "item", "(", ")", ",", "\"type_loss\"", ":", "type_loss", ".", "item", "(", ")", "}", "\n", "\n", "", "finetuner", ".", "on", "(", "\n", "Event", ".", "BATCH", ",", "\n", "[", "get_n_items", "(", ")", ",", "update_params", "(", "opt", ")", ",", "log_grads", "(", "_run", ",", "model", ")", ",", "log_stats", "(", "_run", ")", "]", ",", "\n", ")", "\n", "\n", "@", "finetuner", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ")", "\n", "def", "eval_on_dev", "(", "state", ")", ":", "\n", "        ", "_log", ".", "info", "(", "\"Evaluating on dev\"", ")", "\n", "eval_state", "=", "run_eval", "(", "model", ",", "vocab", ",", "samples", "[", "\"dev\"", "]", ")", "\n", "accs", "=", "eval_state", "[", "\"counts\"", "]", ".", "accs", "\n", "print_accs", "(", "accs", ",", "run", "=", "_run", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "state", "[", "\"dev_accs\"", "]", "=", "accs", "\n", "\n", "", "@", "finetuner", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ")", "\n", "def", "maybe_eval_on_test", "(", "state", ")", ":", "\n", "        ", "if", "state", "[", "\"epoch\"", "]", "!=", "max_epoch", ":", "\n", "            ", "return", "\n", "\n", "", "_log", ".", "info", "(", "\"Evaluating on test\"", ")", "\n", "eval_state", "=", "run_eval", "(", "model", ",", "vocab", ",", "samples", "[", "\"test\"", "]", ")", "\n", "print_accs", "(", "eval_state", "[", "\"counts\"", "]", ".", "accs", ",", "on", "=", "\"test\"", ",", "run", "=", "_run", ",", "step", "=", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "", "finetuner", ".", "on", "(", "Event", ".", "EPOCH_FINISHED", ",", "save_state_dict", "(", "\"model\"", ",", "model", ",", "under", "=", "artifacts_dir", ")", ")", "\n", "\n", "EpochTimer", "(", ")", ".", "attach_on", "(", "finetuner", ")", "\n", "n_tokens", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", "[", "\"train\"", "]", ")", "\n", "ProgressBar", "(", "stats", "=", "\"stats\"", ",", "total", "=", "n_tokens", ",", "unit", "=", "\"tok\"", ")", ".", "attach_on", "(", "finetuner", ")", "\n", "\n", "bucket_key", "=", "lambda", "s", ":", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "-", "1", ")", "//", "10", "\n", "trn_iter", "=", "ShuffleIterator", "(", "\n", "BucketIterator", "(", "samples", "[", "\"train\"", "]", ",", "bucket_key", ",", "batch_size", ",", "shuffle_bucket", "=", "True", ",", "rng", "=", "_rnd", ")", ",", "\n", "rng", "=", "_rnd", ",", "\n", ")", "\n", "_log", ".", "info", "(", "\"Starting finetuning\"", ")", "\n", "try", ":", "\n", "        ", "finetuner", ".", "run", "(", "trn_iter", ",", "max_epoch", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "_log", ".", "info", "(", "\"Interrupt detected, training will abort\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "finetuner", ".", "state", "[", "\"dev_accs\"", "]", "[", "\"las_nopunct\"", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.minimize_vectors_file.default": [[26, 32], ["None"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "default", "(", ")", ":", "\n", "# path to vectors file in word2vec format", "\n", "    ", "vectors_path", "=", "\"wiki.en.vec\"", "\n", "# write minimized vectors to this file path", "\n", "output_path", "=", "\"wiki.min.en.vec\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.minimize_vectors_file.minimize": [[34, 54], ["text2array.Vocab.from_samples", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "_log.info", "gensim.models.keyedvectors.KeyedVectors", "_log.info", "gensim.models.keyedvectors.KeyedVectors.save_word2vec_format", "list", "list", "itertools.chain", "ingredients.corpus.read_samples", "ingredients.corpus.read_samples", "samples.values"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples"], ["", "@", "ex", ".", "automain", "\n", "def", "minimize", "(", "_log", ",", "vectors_path", "=", "\"wiki.en.vec\"", ",", "output_path", "=", "\"wiki.min.en.vec\"", ")", ":", "\n", "    ", "\"\"\"Minimize the given vectors file to contain only words in the given corpus.\"\"\"", "\n", "samples", "=", "{", "wh", ":", "list", "(", "read_samples", "(", "which", "=", "wh", ")", ")", "for", "wh", "in", "[", "\"train\"", ",", "\"test\"", "]", "}", "\n", "try", ":", "\n", "        ", "samples", "[", "\"dev\"", "]", "=", "list", "(", "read_samples", "(", "which", "=", "\"dev\"", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "pass", "# skip if not exist", "\n", "\n", "", "vocab", "=", "Vocab", ".", "from_samples", "(", "chain", "(", "*", "samples", ".", "values", "(", ")", ")", ")", "\n", "kv", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "vectors_path", ")", "\n", "\n", "_log", ".", "info", "(", "\"Creating new, minimized word vectors\"", ")", "\n", "min_kv", "=", "KeyedVectors", "(", "kv", ".", "vector_size", ")", "\n", "for", "w", "in", "kv", ".", "vocab", ":", "\n", "        ", "if", "w", "in", "vocab", "[", "\"words\"", "]", ":", "\n", "            ", "min_kv", "[", "w", "]", "=", "kv", "[", "w", "]", "\n", "\n", "", "", "_log", ".", "info", "(", "\"Saving the new word vectors to %s\"", ",", "output_path", ")", "\n", "min_kv", ".", "save_word2vec_format", "(", "output_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.sample_conllu.sample": [[14, 29], ["print", "random.Random.shuffle", "pathlib.Path", "random.Random", "open", "conllu.parse", "open", "tqdm.tqdm", "f.read", "print", "sent.serialize"], "function", ["None"], ["def", "sample", "(", "path", ",", "size", ",", "out_path", "=", "None", ",", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"Sample sentences from a CoNLL-U file.\"\"\"", "\n", "if", "out_path", "is", "None", ":", "\n", "        ", "out_path", "=", "Path", "(", "\"output.conllu\"", ")", "\n", "", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "random", ".", "Random", "(", ")", "\n", "\n", "", "print", "(", "f\"Reading {path}\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "with", "open", "(", "path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "sents", "=", "parse", "(", "f", ".", "read", "(", ")", ")", "\n", "", "rng", ".", "shuffle", "(", "sents", ")", "\n", "\n", "with", "open", "(", "out_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "for", "sent", "in", "tqdm", "(", "sents", "[", ":", "size", "]", ")", ":", "\n", "            ", "print", "(", "sent", ".", "serialize", "(", ")", ",", "file", "=", "f", ",", "end", "=", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump": [[12, 14], ["camel.Camel().dump", "camel.Camel"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.dump"], ["def", "dump", "(", "obj", ")", ":", "\n", "    ", "return", "Camel", "(", "[", "reg", "]", ")", ".", "dump", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load": [[16, 18], ["camel.Camel().load", "camel.Camel"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization.load"], ["", "def", "load", "(", "data", ")", ":", "\n", "    ", "return", "Camel", "(", "[", "reg", "]", ")", ".", "load", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization._dump_vocab": [[20, 23], ["reg.dumper", "dict"], "function", ["None"], ["", "@", "reg", ".", "dumper", "(", "Vocab", ",", "\"vocab\"", ",", "version", "=", "1", ")", "\n", "def", "_dump_vocab", "(", "vocab", ")", ":", "\n", "    ", "return", "dict", "(", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization._load_vocab": [[25, 28], ["reg.loader", "text2array.Vocab"], "function", ["None"], ["", "@", "reg", ".", "loader", "(", "\"vocab\"", ",", "version", "=", "1", ")", "\n", "def", "_load_vocab", "(", "data", ",", "version", ")", ":", "\n", "    ", "return", "Vocab", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization._dump_strstore": [[30, 33], ["reg.dumper", "list"], "function", ["None"], ["", "@", "reg", ".", "dumper", "(", "StringStore", ",", "\"strstore\"", ",", "version", "=", "1", ")", "\n", "def", "_dump_strstore", "(", "store", ")", ":", "\n", "    ", "return", "{", "\"initial\"", ":", "list", "(", "store", ")", ",", "\"default\"", ":", "store", ".", "default", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization._load_strstore": [[35, 38], ["reg.loader", "text2array.vocab.StringStore"], "function", ["None"], ["", "@", "reg", ".", "loader", "(", "\"strstore\"", ",", "version", "=", "1", ")", "\n", "def", "_load_strstore", "(", "data", ",", "version", ")", ":", "\n", "    ", "return", "StringStore", "(", "**", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization._dump_self_att_graph": [[40, 57], ["reg.dumper", "model.arc_score_bias.numel"], "function", ["None"], ["", "@", "reg", ".", "dumper", "(", "SelfAttGraph", ",", "\"self_att_graph\"", ",", "version", "=", "1", ")", "\n", "def", "_dump_self_att_graph", "(", "model", ")", ":", "\n", "    ", "kv_size", "=", "model", ".", "encoder", ".", "layers", "[", "0", "]", ".", "self_attn", ".", "k_dist_emb", ".", "embedding_dim", "\n", "return", "{", "\n", "\"n_words\"", ":", "model", ".", "word_emb", ".", "num_embeddings", ",", "\n", "\"n_types\"", ":", "model", ".", "type_score_mix", ".", "out_features", ",", "\n", "\"n_tags\"", ":", "0", "if", "model", ".", "tag_emb", "is", "None", "else", "model", ".", "tag_emb", ".", "num_embeddings", ",", "\n", "\"word_size\"", ":", "model", ".", "word_emb", ".", "embedding_dim", ",", "\n", "\"tag_size\"", ":", "0", "if", "model", ".", "tag_emb", "is", "None", "else", "model", ".", "tag_emb", ".", "embedding_dim", ",", "\n", "\"n_heads\"", ":", "model", ".", "encoder", ".", "layers", "[", "0", "]", ".", "self_attn", ".", "in_proj", "[", "0", "]", ".", "out_features", "//", "(", "3", "*", "kv_size", ")", ",", "\n", "\"n_layers\"", ":", "model", ".", "encoder", ".", "num_layers", ",", "\n", "\"ff_size\"", ":", "model", ".", "encoder", ".", "layers", "[", "0", "]", ".", "linear1", ".", "out_features", ",", "\n", "\"kv_size\"", ":", "kv_size", ",", "\n", "\"word_dropout\"", ":", "model", ".", "word_dropout", ".", "p", ",", "\n", "\"outdim_dropout\"", ":", "model", ".", "mlp_layer", "[", "-", "2", "]", ".", "p", ",", "\n", "\"arc_size\"", ":", "model", ".", "arc_score_bias", ".", "numel", "(", ")", ",", "\n", "\"type_size\"", ":", "model", ".", "type_score_mix", ".", "in1_features", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.serialization._load_self_att_graph": [[60, 63], ["reg.loader", "models.SelfAttGraph", "data.pop", "data.pop"], "function", ["None"], ["", "@", "reg", ".", "loader", "(", "\"self_att_graph\"", ",", "version", "=", "1", ")", "\n", "def", "_load_self_att_graph", "(", "data", ",", "version", ")", ":", "\n", "    ", "return", "SelfAttGraph", "(", "data", ".", "pop", "(", "\"n_words\"", ")", ",", "data", ".", "pop", "(", "\"n_types\"", ")", ",", "**", "data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.set_train_mode": [[14, 19], ["model.train"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.run_parser.train"], ["def", "set_train_mode", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "training", ":", "bool", "=", "True", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "def", "callback", "(", "state", ")", ":", "\n", "        ", "model", ".", "train", "(", "training", ")", "\n", "\n", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.batch2tensors": [[21, 32], ["state[].to_array", "batch[].bool", "batch[].bool", "torch.from_numpy().long().to", "vocab[].index", "torch.from_numpy().long", "torch.from_numpy"], "function", ["None"], ["", "def", "batch2tensors", "(", "device", ":", "str", ",", "vocab", ":", "Vocab", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "def", "callback", "(", "state", ")", ":", "\n", "        ", "batch", "=", "state", "[", "\"batch\"", "]", ".", "to_array", "(", ")", "\n", "for", "k", "in", "batch", ":", "\n", "            ", "batch", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "batch", "[", "k", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "", "batch", "[", "\"proj?\"", "]", "=", "batch", "[", "\"proj?\"", "]", ".", "bool", "(", ")", "\n", "batch", "[", "\"punct?\"", "]", "=", "batch", "[", "\"punct?\"", "]", ".", "bool", "(", ")", "\n", "batch", "[", "\"mask\"", "]", "=", "batch", "[", "\"words\"", "]", "!=", "vocab", "[", "\"words\"", "]", ".", "index", "(", "Vocab", ".", "PAD_TOKEN", ")", "\n", "state", "[", "\"batch\"", "]", "=", "batch", "\n", "\n", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.update_params": [[34, 41], ["opt.zero_grad", "state[].backward", "opt.step"], "function", ["None"], ["", "def", "update_params", "(", "opt", ":", "torch", ".", "optim", ".", "Optimizer", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "def", "callback", "(", "state", ")", ":", "\n", "        ", "opt", ".", "zero_grad", "(", ")", "\n", "state", "[", "\"loss\"", "]", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_grads": [[43, 53], ["model.named_parameters", "run.log_scalar", "p.grad.norm().item", "p.grad.norm"], "function", ["None"], ["", "def", "log_grads", "(", "run", ":", "Run", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "every", ":", "int", "=", "10", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "def", "callback", "(", "state", ")", ":", "\n", "        ", "if", "state", "[", "\"n_iters\"", "]", "%", "every", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "run", ".", "log_scalar", "(", "f\"grad_{name}\"", ",", "p", ".", "grad", ".", "norm", "(", ")", ".", "item", "(", ")", ",", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "", "", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.log_stats": [[55, 66], ["state[].items", "state.get().items", "run.log_scalar", "run.log_scalar", "state.get"], "function", ["None"], ["", "def", "log_stats", "(", "run", ":", "Run", ",", "every", ":", "int", "=", "10", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "def", "callback", "(", "state", ")", ":", "\n", "        ", "if", "state", "[", "\"n_iters\"", "]", "%", "every", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "for", "name", ",", "value", "in", "state", "[", "\"stats\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "run", ".", "log_scalar", "(", "f\"batch_{name}\"", ",", "value", ",", "state", "[", "\"n_iters\"", "]", ")", "\n", "", "for", "name", ",", "value", "in", "state", ".", "get", "(", "\"extra_stats\"", ",", "{", "}", ")", ".", "items", "(", ")", ":", "\n", "            ", "run", ".", "log_scalar", "(", "f\"batch_{name}\"", ",", "value", ",", "state", "[", "\"n_iters\"", "]", ")", "\n", "\n", "", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.save_state_dict": [[68, 71], ["kwargs.update", "rnnr.callbacks.save", "torch.save", "m.state_dict"], "function", ["None"], ["", "def", "save_state_dict", "(", "*", "args", ",", "**", "kwargs", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "kwargs", ".", "update", "(", "{", "\"using\"", ":", "lambda", "m", ",", "p", ":", "torch", ".", "save", "(", "m", ".", "state_dict", "(", ")", ",", "p", ")", ",", "\"ext\"", ":", "\"pth\"", "}", ")", "\n", "return", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_total_arc_type_scores": [[73, 89], ["model", "range", "arc_scores.log_softmax.masked_fill", "arc_scores.log_softmax.log_softmax", "type_scores.log_softmax.log_softmax", "arc_scores.log_softmax.unsqueeze", "mask.unsqueeze", "vocab[].index"], "function", ["None"], ["", "def", "compute_total_arc_type_scores", "(", "\n", "model", ":", "torch", ".", "nn", ".", "Module", ",", "vocab", ":", "Vocab", "\n", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "def", "callback", "(", "state", ")", ":", "\n", "        ", "bat", "=", "state", "[", "\"batch\"", "]", "\n", "words", ",", "tags", ",", "mask", "=", "bat", "[", "\"words\"", "]", ",", "bat", "[", "\"tags\"", "]", ",", "bat", "[", "\"mask\"", "]", "\n", "\n", "arc_scores", ",", "type_scores", "=", "model", "(", "words", ",", "tags", ",", "mask", ")", "\n", "type_scores", "[", "...", ",", "vocab", "[", "\"types\"", "]", ".", "index", "(", "vocab", ".", "PAD_TOKEN", ")", "]", "=", "-", "1e9", "# mask padding type", "\n", "_", ",", "HEAD", ",", "DEPD", ",", "TYPE", "=", "range", "(", "4", ")", "\n", "arc_scores", "=", "arc_scores", ".", "masked_fill", "(", "~", "mask", ".", "unsqueeze", "(", "DEPD", ")", ",", "-", "1e9", ")", "# mask padding heads", "\n", "arc_scores", "=", "arc_scores", ".", "log_softmax", "(", "dim", "=", "HEAD", ")", "\n", "type_scores", "=", "type_scores", ".", "log_softmax", "(", "dim", "=", "TYPE", ")", "\n", "state", "[", "\"total_arc_type_scores\"", "]", "=", "arc_scores", ".", "unsqueeze", "(", "TYPE", ")", "+", "type_scores", "\n", "\n", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.predict_batch": [[91, 102], ["[].all", "crf.DepTreeCRF", "crf.DepTreeCRF.argmax"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.argmax"], ["", "def", "predict_batch", "(", "\n", "projective", "=", "False", ",", "multiroot", "=", "False", ",", "scores", "=", "\"total_arc_type_scores\"", "\n", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "def", "callback", "(", "state", ")", ":", "\n", "        ", "assert", "state", "[", "\"batch\"", "]", "[", "\"mask\"", "]", ".", "all", "(", ")", "\n", "crf", "=", "DepTreeCRF", "(", "state", "[", "scores", "]", ",", "projective", "=", "projective", ",", "multiroot", "=", "multiroot", ")", "\n", "pred_heads", ",", "pred_types", "=", "crf", ".", "argmax", "(", ")", "\n", "state", "[", "\"pred_heads\"", "]", "=", "pred_heads", "\n", "state", "[", "\"pred_types\"", "]", "=", "pred_types", "\n", "\n", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.get_n_items": [[104, 109], ["[].long().sum().item", "[].long().sum", "[].long"], "function", ["None"], ["", "def", "get_n_items", "(", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "def", "callback", "(", "state", ")", ":", "\n", "        ", "state", "[", "\"n_items\"", "]", "=", "state", "[", "\"batch\"", "]", "[", "\"mask\"", "]", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.evaluate_batch": [[111, 144], ["evaluation.count_correct", "evaluation.count_correct", "type_vocab.index"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.evaluation.count_correct", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.evaluation.count_correct"], ["", "def", "evaluate_batch", "(", "type_vocab", ":", "Optional", "[", "Sequence", "[", "str", "]", "]", "=", "None", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "def", "callback", "(", "state", ")", ":", "\n", "        ", "bat", "=", "state", "[", "\"batch\"", "]", "\n", "words", ",", "tags", ",", "heads", ",", "types", "=", "bat", "[", "\"words\"", "]", ",", "bat", "[", "\"tags\"", "]", ",", "bat", "[", "\"heads\"", "]", ",", "bat", "[", "\"types\"", "]", "\n", "pred_heads", ",", "pred_types", "=", "state", "[", "\"pred_heads\"", "]", ",", "state", "[", "\"pred_types\"", "]", "\n", "mask", ",", "proj_mask", ",", "punct_mask", "=", "bat", "[", "\"mask\"", "]", ",", "bat", "[", "\"proj?\"", "]", ",", "bat", "[", "\"punct?\"", "]", "\n", "\n", "# remove root", "\n", "words", ",", "tags", ",", "heads", ",", "types", "=", "words", "[", ":", ",", "1", ":", "]", ",", "tags", "[", ":", ",", "1", ":", "]", ",", "heads", "[", ":", ",", "1", ":", "]", ",", "types", "[", ":", ",", "1", ":", "]", "\n", "pred_heads", ",", "pred_types", "=", "pred_heads", "[", ":", ",", "1", ":", "]", ",", "pred_types", "[", ":", ",", "1", ":", "]", "\n", "mask", ",", "proj_mask", ",", "punct_mask", "=", "mask", "[", ":", ",", "1", ":", "]", ",", "proj_mask", "[", ":", ",", "1", ":", "]", ",", "punct_mask", "[", ":", ",", "1", ":", "]", "\n", "\n", "counts", "=", "count_correct", "(", "\n", "heads", ",", "types", ",", "pred_heads", ",", "pred_types", ",", "mask", ",", "~", "punct_mask", ",", "proj_mask", "\n", ")", "\n", "state", "[", "\"output\"", "]", "=", "counts", "\n", "\n", "if", "type_vocab", "is", "not", "None", ":", "\n", "            ", "state", "[", "\"tw_output\"", "]", "=", "{", "\n", "y", ":", "count_correct", "(", "\n", "heads", ",", "\n", "types", ",", "\n", "pred_heads", ",", "\n", "pred_types", ",", "\n", "mask", ",", "\n", "~", "punct_mask", ",", "\n", "proj_mask", ",", "\n", "type_idx", "=", "type_vocab", ".", "index", "(", "y", ")", ",", "\n", ")", "\n", "for", "y", "in", "type_vocab", "\n", "}", "\n", "\n", "", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.callbacks.compute_l2_loss": [[146, 159], ["model.named_parameters", "origin.get"], "function", ["None"], ["", "def", "compute_l2_loss", "(", "\n", "model", ":", "torch", ".", "nn", ".", "Module", ",", "origin", ":", "Optional", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", "=", "None", "\n", ")", "->", "Callable", "[", "[", "dict", "]", ",", "None", "]", ":", "\n", "    ", "if", "origin", "is", "None", ":", "\n", "        ", "origin", "=", "{", "}", "\n", "\n", "", "def", "callback", "(", "state", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "loss", "+=", "(", "p", "-", "origin", ".", "get", "(", "name", ",", "0", ")", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "\n", "", "state", "[", "\"l2_loss\"", "]", "=", "loss", "\n", "\n", "", "return", "callback", "\n", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.extend_word_embedding": [[19, 51], ["torch.randn", "logger.info", "logger.info", "weight.dim", "len", "weight.size", "words.index", "weight.size", "weight.size", "torch.from_numpy", "w.lower", "torch.from_numpy", "w.lower"], "function", ["None"], ["def", "extend_word_embedding", "(", "\n", "weight", ":", "Tensor", ",", "\n", "words", ":", "Sequence", "[", "str", "]", ",", "\n", "kv", ":", "Optional", "[", "Mapping", "[", "str", ",", "np", ".", "ndarray", "]", "]", "=", "None", ",", "\n", "unk_id", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "Tensor", ":", "\n", "    ", "assert", "weight", ".", "dim", "(", ")", "==", "2", "\n", "if", "kv", "is", "None", ":", "\n", "        ", "kv", "=", "{", "}", "\n", "\n", "", "new_weight", "=", "torch", ".", "randn", "(", "len", "(", "words", ")", ",", "weight", ".", "size", "(", "1", ")", ")", "\n", "new_weight", "[", ":", "weight", ".", "size", "(", "0", ")", "]", "=", "weight", "\n", "cnt_pre", ",", "cnt_unk", "=", "0", ",", "0", "\n", "for", "w", "in", "words", ":", "\n", "        ", "wid", "=", "words", ".", "index", "(", "w", ")", "\n", "if", "wid", "<", "weight", ".", "size", "(", "0", ")", ":", "\n", "            ", "continue", "\n", "", "if", "w", "in", "kv", ":", "\n", "            ", "new_weight", "[", "wid", "]", "=", "torch", ".", "from_numpy", "(", "kv", "[", "w", "]", ")", "\n", "cnt_pre", "+=", "1", "\n", "", "elif", "w", ".", "lower", "(", ")", "in", "kv", ":", "\n", "            ", "new_weight", "[", "wid", "]", "=", "torch", ".", "from_numpy", "(", "kv", "[", "w", ".", "lower", "(", ")", "]", ")", "\n", "cnt_pre", "+=", "1", "\n", "", "else", ":", "\n", "            ", "cnt_unk", "+=", "1", "\n", "if", "unk_id", "is", "not", "None", ":", "\n", "                ", "new_weight", "[", "wid", "]", "=", "weight", "[", "unk_id", "]", "\n", "\n", "", "", "", "logger", ".", "info", "(", "\"Initialized %d target words with pre-trained embedding\"", ",", "cnt_pre", ")", "\n", "logger", ".", "info", "(", "\"Found %d unknown words\"", ",", "cnt_unk", ")", "\n", "\n", "return", "new_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.report_log_ntrees_stats": [[53, 80], ["tqdm.tqdm", "text2array.BucketIterator", "tqdm.tqdm.close", "logger.info", "batch.to_array", "torch.from_numpy().bool", "torch.zeros_like().float().masked_fill", "log_ntrees.extend", "tqdm.tqdm.update", "numpy.min", "numpy.quantile", "numpy.quantile", "numpy.quantile", "numpy.max", "sum", "len", "crf.DepTreeCRF().log_partitions().tolist", "torch.from_numpy", "torch.zeros_like().float", "len", "crf.DepTreeCRF().log_partitions", "torch.zeros_like", "crf.DepTreeCRF"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.crf.DepTreeCRF.log_partitions"], ["", "def", "report_log_ntrees_stats", "(", "\n", "samples", ":", "Sequence", "[", "dict", "]", ",", "\n", "aa_mask_field", ":", "str", ",", "\n", "batch_size", ":", "int", "=", "1", ",", "\n", "projective", ":", "bool", "=", "False", ",", "\n", "multiroot", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "    ", "log_ntrees", ":", "list", "=", "[", "]", "\n", "pbar", "=", "tqdm", "(", "total", "=", "sum", "(", "len", "(", "s", "[", "\"words\"", "]", ")", "for", "s", "in", "samples", ")", ",", "leave", "=", "False", ")", "\n", "for", "batch", "in", "BucketIterator", "(", "samples", ",", "lambda", "s", ":", "len", "(", "s", "[", "\"words\"", "]", ")", ",", "batch_size", ")", ":", "\n", "        ", "arr", "=", "batch", ".", "to_array", "(", ")", "\n", "aaet_mask", "=", "torch", ".", "from_numpy", "(", "arr", "[", "aa_mask_field", "]", ")", ".", "bool", "(", ")", "\n", "cnt_scores", "=", "torch", ".", "zeros_like", "(", "aaet_mask", ")", ".", "float", "(", ")", ".", "masked_fill", "(", "~", "aaet_mask", ",", "-", "1e9", ")", "\n", "log_ntrees", ".", "extend", "(", "\n", "DepTreeCRF", "(", "cnt_scores", ",", "projective", "=", "projective", ",", "multiroot", "=", "multiroot", ")", "\n", ".", "log_partitions", "(", ")", "\n", ".", "tolist", "(", ")", "\n", ")", "\n", "pbar", ".", "update", "(", "arr", "[", "\"words\"", "]", ".", "size", ")", "\n", "", "pbar", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Log number of trees: min %.2f | q1 %.2f | q2 %.2f | q3 %.2f | max %.2f\"", ",", "\n", "np", ".", "min", "(", "log_ntrees", ")", ",", "\n", "np", ".", "quantile", "(", "log_ntrees", ",", "0.25", ")", ",", "\n", "np", ".", "quantile", "(", "log_ntrees", ",", "0.5", ")", ",", "\n", "np", ".", "quantile", "(", "log_ntrees", ",", "0.75", ")", ",", "\n", "np", ".", "max", "(", "log_ntrees", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.utils.print_accs": [[83, 93], ["accs.items", "logger.info", "run.log_scalar"], "function", ["None"], ["", "def", "print_accs", "(", "\n", "accs", ":", "Mapping", "[", "str", ",", "float", "]", ",", "\n", "on", ":", "str", "=", "\"dev\"", ",", "\n", "run", ":", "Optional", "[", "Run", "]", "=", "None", ",", "\n", "step", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "    ", "for", "key", ",", "acc", "in", "accs", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"{on}_{key}: {acc:.2%}\"", ")", "\n", "if", "run", "is", "not", "None", ":", "\n", "            ", "run", ".", "log_scalar", "(", "f\"{on}_{key}\"", ",", "acc", ",", "step", "=", "step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.evaluation.Counts.accs": [[113, 130], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "accs", "(", "self", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "accs", "=", "{", "\n", "\"uem\"", ":", "self", ".", "usents", "/", "self", ".", "n_sents", ",", "\n", "\"uem_nopunct\"", ":", "self", ".", "usents_nopunct", "/", "self", ".", "n_sents", ",", "\n", "\"uas\"", ":", "self", ".", "uarcs", "/", "self", ".", "n_arcs", ",", "\n", "\"uas_nopunct\"", ":", "self", ".", "uarcs_nopunct", "/", "self", ".", "n_arcs_nopunct", ",", "\n", "\"lem\"", ":", "self", ".", "lsents", "/", "self", ".", "n_sents", ",", "\n", "\"lem_nopunct\"", ":", "self", ".", "lsents_nopunct", "/", "self", ".", "n_sents", ",", "\n", "\"las\"", ":", "self", ".", "larcs", "/", "self", ".", "n_arcs", ",", "\n", "\"las_nopunct\"", ":", "self", ".", "larcs_nopunct", "/", "self", ".", "n_arcs_nopunct", ",", "\n", "}", "\n", "if", "self", ".", "n_arcs_nonproj", ":", "\n", "            ", "accs", "[", "\"uas_nonproj\"", "]", "=", "self", ".", "uarcs_nonproj", "/", "self", ".", "n_arcs_nonproj", "\n", "accs", "[", "\"las_nonproj\"", "]", "=", "self", ".", "larcs_nonproj", "/", "self", ".", "n_arcs_nonproj", "\n", "", "accs", "[", "\"root\"", "]", "=", "self", ".", "roots", "/", "self", ".", "n_roots", "\n", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.evaluation.Counts.__add__": [[131, 138], ["torch.tensor", "torch.tensor", "evaluation.Counts", "isinstance", "dataclasses.astuple", "dataclasses.astuple", "z.tolist"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "c", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "c", ",", "Counts", ")", ":", "\n", "            ", "raise", "TypeError", "\n", "", "x", "=", "torch", ".", "tensor", "(", "astuple", "(", "self", ")", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "astuple", "(", "c", ")", ")", "\n", "z", "=", "x", "+", "y", "\n", "return", "Counts", "(", "*", "z", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.evaluation.TypeWiseCounts.__add__": [[150, 160], ["torch.tensor", "torch.tensor", "evaluation.TypeWiseCounts.__class__", "isinstance", "ValueError", "dataclasses.astuple", "dataclasses.astuple", "z[].tolist"], "methods", ["None"], ["def", "__add__", "(", "self", ",", "c", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "c", ",", "self", ".", "__class__", ")", ":", "\n", "            ", "raise", "TypeError", "\n", "", "if", "self", ".", "type_idx", "!=", "c", ".", "type_idx", ":", "\n", "            ", "raise", "ValueError", "(", "\"cannot add counts with different type idx\"", ")", "\n", "\n", "", "x", "=", "torch", ".", "tensor", "(", "astuple", "(", "self", ")", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "astuple", "(", "c", ")", ")", "\n", "z", "=", "x", "+", "y", "\n", "return", "self", ".", "__class__", "(", "self", ".", "type_idx", ",", "*", "z", "[", "1", ":", "]", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.evaluation.TypeWiseCounts.accs": [[161, 171], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "accs", "(", "self", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "accs", "=", "{", "}", "\n", "if", "self", ".", "n_arcs", ":", "\n", "            ", "accs", "[", "\"uas\"", "]", "=", "self", ".", "uarcs", "/", "self", ".", "n_arcs", "\n", "accs", "[", "\"las\"", "]", "=", "self", ".", "larcs", "/", "self", ".", "n_arcs", "\n", "", "if", "self", ".", "n_arcs_nopunct", ":", "\n", "            ", "accs", "[", "\"uas_nopunct\"", "]", "=", "self", ".", "uarcs_nopunct", "/", "self", ".", "n_arcs_nopunct", "\n", "accs", "[", "\"las_nopunct\"", "]", "=", "self", ".", "larcs_nopunct", "/", "self", ".", "n_arcs_nopunct", "\n", "", "return", "accs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.evaluation.count_correct": [[10, 91], ["int", "int", "int", "int", "int", "int", "evaluation.TypeWiseCounts", "heads.dim", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "heads.size", "int", "int", "int", "int", "evaluation.Counts", "torch.all", "torch.all().long().sum", "torch.all().long().sum", "torch.all().long().sum", "torch.all().long().sum", "mask.long().sum", "torch.all().long", "torch.all().long", "torch.all().long", "torch.all().long", "mask.long", "torch.all", "torch.all", "torch.all", "torch.all"], "function", ["None"], ["def", "count_correct", "(", "\n", "heads", ":", "LongTensor", ",", "\n", "types", ":", "LongTensor", ",", "\n", "pred_heads", ":", "LongTensor", ",", "\n", "pred_types", ":", "LongTensor", ",", "\n", "mask", ":", "BoolTensor", ",", "\n", "nopunct_mask", ":", "BoolTensor", ",", "\n", "proj_mask", ":", "BoolTensor", ",", "\n", "root_idx", ":", "int", "=", "0", ",", "\n", "type_idx", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "Union", "[", "\"Counts\"", ",", "\"TypeWiseCounts\"", "]", ":", "\n", "# shape: (bsz, slen)", "\n", "    ", "assert", "heads", ".", "dim", "(", ")", "==", "2", "\n", "assert", "types", ".", "shape", "==", "heads", ".", "shape", "\n", "assert", "pred_heads", ".", "shape", "==", "heads", ".", "shape", "\n", "assert", "pred_types", ".", "shape", "==", "heads", ".", "shape", "\n", "assert", "mask", ".", "shape", "==", "heads", ".", "shape", "\n", "assert", "nopunct_mask", ".", "shape", "==", "heads", ".", "shape", "\n", "assert", "proj_mask", ".", "shape", "==", "heads", ".", "shape", "\n", "\n", "corr_heads", "=", "heads", "==", "pred_heads", "\n", "corr_types", "=", "types", "==", "pred_types", "\n", "\n", "if", "type_idx", "is", "None", ":", "\n", "        ", "root_mask", "=", "heads", "==", "root_idx", "\n", "nonproj_mask", "=", "~", "torch", ".", "all", "(", "proj_mask", "|", "(", "~", "mask", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "usents", "=", "int", "(", "torch", ".", "all", "(", "corr_heads", "|", "(", "~", "mask", ")", ",", "dim", "=", "1", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "usents_nopunct", "=", "int", "(", "\n", "torch", ".", "all", "(", "corr_heads", "|", "(", "~", "mask", ")", "|", "(", "~", "nopunct_mask", ")", ",", "dim", "=", "1", ")", ".", "long", "(", ")", ".", "sum", "(", ")", "\n", ")", "\n", "lsents", "=", "int", "(", "torch", ".", "all", "(", "corr_heads", "&", "corr_types", "|", "(", "~", "mask", ")", ",", "dim", "=", "1", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "lsents_nopunct", "=", "int", "(", "\n", "torch", ".", "all", "(", "corr_heads", "&", "corr_types", "|", "(", "~", "mask", ")", "|", "(", "~", "nopunct_mask", ")", ",", "dim", "=", "1", ")", ".", "long", "(", ")", ".", "sum", "(", ")", "\n", ")", "\n", "uarcs", "=", "int", "(", "(", "corr_heads", "&", "mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "uarcs_nopunct", "=", "int", "(", "(", "corr_heads", "&", "mask", "&", "nopunct_mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "uarcs_nonproj", "=", "int", "(", "(", "corr_heads", "&", "mask", "&", "nonproj_mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "larcs", "=", "int", "(", "(", "corr_heads", "&", "corr_types", "&", "mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "larcs_nopunct", "=", "int", "(", "(", "corr_heads", "&", "corr_types", "&", "mask", "&", "nopunct_mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "larcs_nonproj", "=", "int", "(", "(", "corr_heads", "&", "corr_types", "&", "mask", "&", "nonproj_mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "roots", "=", "int", "(", "(", "corr_heads", "&", "mask", "&", "root_mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "n_sents", "=", "heads", ".", "size", "(", "0", ")", "\n", "n_arcs", "=", "int", "(", "mask", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "n_arcs_nopunct", "=", "int", "(", "(", "mask", "&", "nopunct_mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "n_arcs_nonproj", "=", "int", "(", "(", "mask", "&", "nonproj_mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "n_roots", "=", "int", "(", "(", "mask", "&", "root_mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "\n", "return", "Counts", "(", "\n", "usents", ",", "\n", "usents_nopunct", ",", "\n", "lsents", ",", "\n", "lsents_nopunct", ",", "\n", "uarcs", ",", "\n", "uarcs_nopunct", ",", "\n", "uarcs_nonproj", ",", "\n", "larcs", ",", "\n", "larcs_nopunct", ",", "\n", "larcs_nonproj", ",", "\n", "roots", ",", "\n", "n_sents", ",", "\n", "n_arcs", ",", "\n", "n_arcs_nopunct", ",", "\n", "n_arcs_nonproj", ",", "\n", "n_roots", ",", "\n", ")", "\n", "\n", "", "assert", "type_idx", "is", "not", "None", "\n", "type_mask", "=", "types", "==", "type_idx", "\n", "\n", "uarcs", "=", "int", "(", "(", "corr_heads", "&", "type_mask", "&", "mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "uarcs_nopunct", "=", "int", "(", "(", "corr_heads", "&", "type_mask", "&", "nopunct_mask", "&", "mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "larcs", "=", "int", "(", "(", "corr_heads", "&", "corr_types", "&", "type_mask", "&", "mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "larcs_nopunct", "=", "int", "(", "\n", "(", "corr_heads", "&", "corr_types", "&", "type_mask", "&", "nopunct_mask", "&", "mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", "\n", ")", "\n", "n_arcs", "=", "int", "(", "(", "type_mask", "&", "mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "n_arcs_nopunct", "=", "int", "(", "(", "type_mask", "&", "nopunct_mask", "&", "mask", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ")", "\n", "\n", "return", "TypeWiseCounts", "(", "\n", "type_idx", ",", "uarcs", ",", "uarcs_nopunct", ",", "larcs", ",", "larcs_nopunct", ",", "n_arcs", ",", "n_arcs_nopunct", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.compute_log_partitions": [[9, 80], ["log_weights.clone.clone", "float", "log_weights.clone.masked_fill_", "torch.eye().to().bool().reshape", "log_weights.clone.masked_fill_", "log_weights.clone.reshape().max", "weights.sum.sum", "weights[].masked_fill_", "matrix_tree.to_laplacian", "to_laplacian.logdet", "log_weights.new_ones().bool.long().sum", "log_weights.clone.dim", "log_weights.clone.size", "log_weights.clone.new_ones().bool", "log_weights.new_ones().bool.reshape", "log_weights.new_ones().bool.reshape", "float", "float", "arc_mask.reshape", "torch.eye().to().bool", "log_weights.clone.reshape", "torch.diag_embed", "log_weights.new_ones().bool.long", "log_weights.clone.new_ones", "mask.long().sum.float", "torch.eye().to", "max_logw.reshape", "torch.eye"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.to_laplacian"], ["def", "compute_log_partitions", "(", "\n", "log_weights", ":", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "BoolTensor", "]", "=", "None", ",", "\n", "multiroot", ":", "bool", "=", "True", ",", "\n", "delta", ":", "float", "=", "1e-8", ",", "\n", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"Compute log partition function with Matrix-Tree Theorem.\n\n    By convention, node with index 0 is assumed to be the (dummy) root. See\n    (McDonald and Satta, 2007; Koo et al., 2007) for reference.\n\n    Args:\n        log_weights: Tensor of shape (B, N, N, L) which contains the log weight of each\n            pair of labeled arcs in the batch.\n        mask: Tensor of shape (B, N) indicating valid positions.\n        multiroot: Whether to compute partition over multi-rooted trees, which means the\n            (dummy) root is allowed to have more than one child. If False, the (dummy) root\n            will have exactly one child.\n        delta: Small positive number to ensure weights are not too small.\n\n    Returns:\n        1-D tensor of length B containing the log partition function values.\n\n    Note:\n        B = batch size, N = sequence length, L = number of dependency labels/types.\n    \"\"\"", "\n", "assert", "log_weights", ".", "dim", "(", ")", "==", "4", "\n", "bsz", ",", "slen", ",", "_", ",", "_", "=", "log_weights", ".", "shape", "\n", "assert", "slen", ">=", "2", ",", "\"number of nodes is at least 2\"", "\n", "assert", "log_weights", ".", "size", "(", "2", ")", "==", "slen", "\n", "assert", "mask", "is", "None", "or", "mask", ".", "shape", "==", "(", "bsz", ",", "slen", ")", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "log_weights", ".", "new_ones", "(", "[", "bsz", ",", "slen", "]", ")", ".", "bool", "(", ")", "# type: ignore", "\n", "", "assert", "mask", "is", "not", "None", "\n", "\n", "# clone to allow in-place operations", "\n", "log_weights", "=", "log_weights", ".", "clone", "(", ")", "\n", "\n", "# mask incoming arcs to root", "\n", "log_weights", "[", ":", ",", ":", ",", "0", "]", "=", "float", "(", "\"-inf\"", ")", "\n", "\n", "# mask invalid arcs", "\n", "arc_mask", "=", "mask", ".", "reshape", "(", "bsz", ",", "1", ",", "slen", ")", "&", "mask", ".", "reshape", "(", "bsz", ",", "slen", ",", "1", ")", "\n", "log_weights", ".", "masked_fill_", "(", "~", "arc_mask", ".", "reshape", "(", "bsz", ",", "slen", ",", "slen", ",", "1", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "# mask self-loops", "\n", "loop_mask", "=", "torch", ".", "eye", "(", "slen", ")", ".", "to", "(", "log_weights", ".", "device", ")", ".", "bool", "(", ")", ".", "reshape", "(", "slen", ",", "slen", ",", "1", ")", "\n", "log_weights", ".", "masked_fill_", "(", "loop_mask", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "# shift log weights to lie in a safe range for exp", "\n", "max_logw", ",", "_", "=", "log_weights", ".", "reshape", "(", "bsz", ",", "-", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "weights", "=", "(", "log_weights", "-", "max_logw", ".", "reshape", "(", "bsz", ",", "1", ",", "1", ",", "1", ")", ")", ".", "exp", "(", ")", "+", "delta", "\n", "weights", "=", "weights", ".", "sum", "(", "dim", "=", "3", ")", "\n", "\n", "# ensure heads of invalid nodes are always node 1, and the arc weights equal one", "\n", "weights", "[", ":", ",", "1", "]", ".", "masked_fill_", "(", "~", "mask", ",", "1", ")", "\n", "\n", "# compute log partition functions via matrix-tree theorem", "\n", "Q", "=", "to_laplacian", "(", "weights", "[", ":", ",", "1", ":", ",", "1", ":", "]", ")", "\n", "if", "not", "multiroot", ":", "\n", "        ", "Q", "[", ":", ",", "0", "]", "=", "weights", "[", ":", ",", "0", ",", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "Q", "=", "Q", "+", "torch", ".", "diag_embed", "(", "weights", "[", ":", ",", "0", ",", "1", ":", "]", ")", "\n", "", "log_partitions", "=", "Q", ".", "logdet", "(", ")", "\n", "\n", "# shift back to correct the result", "\n", "lengths", "=", "mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "log_partitions", "=", "log_partitions", "+", "(", "lengths", ".", "float", "(", ")", "-", "1", ")", "*", "max_logw", "\n", "\n", "return", "log_partitions", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.compute_marginals": [[82, 163], ["log_weights.clone.clone", "float", "log_weights.clone.masked_fill_", "torch.eye().to().bool().reshape", "log_weights.clone.masked_fill_", "log_weights.clone.reshape().max", "weights_.sum", "weights[].masked_fill_", "matrix_tree.to_laplacian", "to_laplacian.inverse", "torch.zeros_like", "diag().reshape().clone", "Q.inverse.transpose().reshape().clone", "log_weights.clone.dim", "log_weights.clone.size", "log_weights.clone.new_ones().bool", "log_weights.new_ones().bool.reshape", "log_weights.new_ones().bool.reshape", "float", "float", "max_logw.reshape", "log_weights.clone.exp", "matrix_tree.diag", "term.unsqueeze", "arc_mask.reshape", "torch.eye().to().bool", "log_weights.clone.reshape", "torch.diag_embed", "diag().reshape", "Q.inverse.transpose().reshape", "log_weights.clone.new_ones", "torch.eye().to", "matrix_tree.diag", "Q.inverse.transpose", "torch.eye"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.to_laplacian", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.diag", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.diag"], ["", "def", "compute_marginals", "(", "\n", "log_weights", ":", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "BoolTensor", "]", "=", "None", ",", "\n", "multiroot", ":", "bool", "=", "True", ",", "\n", "delta", ":", "float", "=", "1e-8", ",", "\n", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"Compute marginal probabilities of all labeled arcs.\n\n    By convention, node with index 0 is assumed to be the (dummy) root. See\n    (McDonald and Satta, 2007; Koo et al., 2007) for reference.\n\n    Args:\n        log_weights: Tensor of shape (B, N, N, L) which contains the log weight of each\n            pair of labeled arcs in the batch.\n        mask: Tensor of shape (B, N) indicating valid positions.\n        multiroot: Whether to compute marginals over multi-rooted trees, which means the\n            (dummy) root is allowed to have more than one child. If False, the (dummy) root\n            will have exactly one child.\n        delta: Small positive number to ensure weights are not too small.\n\n    Returns:\n        Tensor of shape (B, N, N, L) containing the arc marginal probabilities.\n\n    Note:\n        B = batch size, N = sequence length, L = number of dependency labels/types.\n    \"\"\"", "\n", "assert", "log_weights", ".", "dim", "(", ")", "==", "4", "\n", "bsz", ",", "slen", ",", "_", ",", "_", "=", "log_weights", ".", "shape", "\n", "assert", "slen", ">=", "2", ",", "\"number of nodes is at least 2\"", "\n", "assert", "log_weights", ".", "size", "(", "2", ")", "==", "slen", "\n", "assert", "mask", "is", "None", "or", "mask", ".", "shape", "==", "(", "bsz", ",", "slen", ")", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "log_weights", ".", "new_ones", "(", "[", "bsz", ",", "slen", "]", ")", ".", "bool", "(", ")", "# type: ignore", "\n", "", "assert", "mask", "is", "not", "None", "\n", "\n", "# clone to allow in-place operations", "\n", "log_weights", "=", "log_weights", ".", "clone", "(", ")", "\n", "\n", "# mask incoming arcs to root", "\n", "log_weights", "[", ":", ",", ":", ",", "0", "]", "=", "float", "(", "\"-inf\"", ")", "\n", "\n", "# mask invalid arcs", "\n", "arc_mask", "=", "mask", ".", "reshape", "(", "bsz", ",", "1", ",", "slen", ")", "&", "mask", ".", "reshape", "(", "bsz", ",", "slen", ",", "1", ")", "\n", "log_weights", ".", "masked_fill_", "(", "~", "arc_mask", ".", "reshape", "(", "bsz", ",", "slen", ",", "slen", ",", "1", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "# mask self-loops", "\n", "loop_mask", "=", "torch", ".", "eye", "(", "slen", ")", ".", "to", "(", "log_weights", ".", "device", ")", ".", "bool", "(", ")", ".", "reshape", "(", "slen", ",", "slen", ",", "1", ")", "\n", "log_weights", ".", "masked_fill_", "(", "loop_mask", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "# shift log weights to lie in a safe range for exp", "\n", "max_logw", ",", "_", "=", "log_weights", ".", "reshape", "(", "bsz", ",", "-", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "log_weights", "=", "log_weights", "-", "max_logw", ".", "reshape", "(", "bsz", ",", "1", ",", "1", ",", "1", ")", "\n", "weights_", "=", "log_weights", ".", "exp", "(", ")", "+", "delta", "\n", "weights", "=", "weights_", ".", "sum", "(", "dim", "=", "3", ")", "\n", "\n", "# ensure heads of invalid nodes are always node 1, and the arc weights equal one", "\n", "weights", "[", ":", ",", "1", "]", ".", "masked_fill_", "(", "~", "mask", ",", "1", ")", "\n", "\n", "# compute log marginals via matrix-tree theorem", "\n", "Q", "=", "to_laplacian", "(", "weights", "[", ":", ",", "1", ":", ",", "1", ":", "]", ")", "\n", "if", "not", "multiroot", ":", "\n", "        ", "Q", "[", ":", ",", "0", "]", "=", "weights", "[", ":", ",", "0", ",", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "Q", "=", "Q", "+", "torch", ".", "diag_embed", "(", "weights", "[", ":", ",", "0", ",", "1", ":", "]", ")", "\n", "", "Q_inv", "=", "Q", ".", "inverse", "(", ")", "\n", "marginals", "=", "torch", ".", "zeros_like", "(", "log_weights", ")", "\n", "\n", "# arcs outgoing from root", "\n", "term", "=", "diag", "(", "Q_inv", ")", "if", "multiroot", "else", "Q_inv", "[", ":", ",", ":", ",", "0", "]", "\n", "marginals", "[", ":", ",", "0", ",", "1", ":", "]", "=", "weights_", "[", ":", ",", "0", ",", "1", ":", "]", "*", "term", ".", "unsqueeze", "(", "2", ")", "# bc over types", "\n", "\n", "# arcs not involving root", "\n", "term1", "=", "diag", "(", "Q_inv", ")", ".", "reshape", "(", "bsz", ",", "1", ",", "slen", "-", "1", ")", ".", "clone", "(", ")", "\n", "term2", "=", "Q_inv", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "bsz", ",", "slen", "-", "1", ",", "slen", "-", "1", ")", ".", "clone", "(", ")", "\n", "if", "not", "multiroot", ":", "\n", "        ", "term1", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "term2", "[", ":", ",", "0", "]", "=", "0", "\n", "", "marginals", "[", ":", ",", "1", ":", ",", "1", ":", "]", "=", "weights_", "[", ":", ",", "1", ":", ",", "1", ":", "]", "*", "(", "term1", "-", "term2", ")", ".", "unsqueeze", "(", "3", ")", "# bc over types", "\n", "\n", "return", "marginals", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.to_laplacian": [[165, 177], ["weights.masked_fill.size", "weights.masked_fill.masked_fill", "torch.diag_embed", "weights.masked_fill.dim", "weights.masked_fill.size", "weights.masked_fill.size", "torch.eye().bool().to", "weights.masked_fill.sum", "torch.eye().bool", "torch.eye"], "function", ["None"], ["", "def", "to_laplacian", "(", "weights", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# shape: (b, n, n)", "\n", "    ", "assert", "weights", ".", "dim", "(", ")", "==", "3", "\n", "assert", "weights", ".", "size", "(", "1", ")", "==", "weights", ".", "size", "(", "2", ")", "\n", "\n", "n", "=", "weights", ".", "size", "(", "1", ")", "\n", "# zero out weights of self-loops", "\n", "weights", "=", "weights", ".", "masked_fill", "(", "torch", ".", "eye", "(", "n", ")", ".", "bool", "(", ")", ".", "to", "(", "weights", ".", "device", ")", ",", "0", ")", "\n", "# fill diagonals with the correct weights", "\n", "weights", "-=", "torch", ".", "diag_embed", "(", "weights", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n", "return", "-", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.matrix_tree.diag": [[179, 182], ["t.diagonal"], "function", ["None"], ["", "def", "diag", "(", "t", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"Batch version of torch.diag.\"\"\"", "\n", "return", "t", ".", "diagonal", "(", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.cfg": [[14, 28], ["None"], "function", ["None"], ["@", "ing", ".", "config", "\n", "def", "cfg", "(", ")", ":", "\n", "# path to UD directory", "\n", "    ", "ud_path", "=", "\"ud-treebanks-v2.2\"", "\n", "# UD version to use", "\n", "version", "=", "2", "\n", "# language to load", "\n", "lang", "=", "\"en\"", "\n", "# how many portion of samples to read (0-1)", "\n", "portion", "=", "1.0", "\n", "# whether to convert digits to zeros", "\n", "normalize_digits", "=", "False", "\n", "# whether to skip MWEs and empty words", "\n", "skip_mwe_and_empty", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples": [[30, 63], ["_log.info", "readers.UDReader().read_samples", "float", "list", "int", "readers.UDReader", "len", "corpus.prep_for_parsing", "pathlib.Path", "len", "re.sub"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.prep_for_parsing"], ["", "@", "ing", ".", "capture", "\n", "def", "read_samples", "(", "\n", "ud_path", ",", "\n", "_log", ",", "\n", "lang", "=", "\"en\"", ",", "\n", "portion", "=", "1.0", ",", "\n", "normalize_digits", "=", "False", ",", "\n", "which", "=", "\"train\"", ",", "\n", "prep", "=", "True", ",", "\n", "max_length", "=", "None", ",", "\n", "skip_mwe_and_empty", "=", "True", ",", "\n", "version", "=", "2", ",", "\n", ")", ":", "\n", "    ", "if", "max_length", "is", "None", ":", "\n", "        ", "max_length", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "", "_log", ".", "info", "(", "\"Reading %s %s samples from %s\"", ",", "lang", ",", "which", ",", "ud_path", ")", "\n", "samples", "=", "UDReader", "(", "Path", "(", "ud_path", ")", ",", "skip_mwe_and_empty", ",", "version", ")", ".", "read_samples", "(", "\n", "langcode", "=", "lang", ",", "which", "=", "which", "\n", ")", "\n", "if", "portion", "<", "1", ":", "\n", "        ", "samples", "=", "list", "(", "samples", ")", "\n", "n", "=", "int", "(", "len", "(", "samples", ")", "*", "portion", ")", "\n", "samples", "=", "samples", "[", ":", "n", "]", "\n", "\n", "", "for", "s", "in", "samples", ":", "\n", "        ", "if", "len", "(", "s", "[", "\"words\"", "]", ")", ">", "max_length", ":", "\n", "            ", "continue", "\n", "", "if", "normalize_digits", ":", "\n", "            ", "s", "[", "\"words\"", "]", "=", "[", "re", ".", "sub", "(", "r\"\\d\"", ",", "\"0\"", ",", "w", ")", "for", "w", "in", "s", "[", "\"words\"", "]", "]", "\n", "", "if", "prep", ":", "\n", "            ", "s", "=", "prep_for_parsing", "(", "s", ")", "\n", "", "yield", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.print_stats": [[65, 82], ["ing.command", "corpus.get_stats", "print", "print", "print", "print", "print", "print", "corpus.read_samples"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.get_stats", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.read_samples"], ["", "", "@", "ing", ".", "command", "(", "unobserved", "=", "True", ")", "\n", "def", "print_stats", "(", ")", ":", "\n", "    ", "\"\"\"Print corpus statistics.\"\"\"", "\n", "for", "which", "in", "\"train dev test\"", ".", "split", "(", ")", ":", "\n", "        ", "n_sents", ",", "n_toks", ",", "n_toks_nopunct", ",", "n_sents_nonproj", ",", "n_toks_nonproj", "=", "get_stats", "(", "\n", "read_samples", "(", "which", "=", "which", ")", "\n", ")", "\n", "# avoid counting ROOT element", "\n", "n_toks", "-=", "n_sents", "\n", "n_toks_nopunct", "-=", "n_sents", "\n", "n_toks_nonproj", "-=", "n_sents_nonproj", "\n", "print", "(", "f\"** {which}\"", ")", "\n", "print", "(", "f\"   n_sents: {n_sents}\"", ")", "\n", "print", "(", "f\"   n_toks: {n_toks}\"", ")", "\n", "print", "(", "f\"   n_toks_nopunct: {n_toks_nopunct}\"", ")", "\n", "print", "(", "f\"   n_sents_nonproj: {n_sents_nonproj} ({n_sents_nonproj/n_sents:.1%})\"", ")", "\n", "print", "(", "f\"   n_toks_nonproj: {n_toks_nonproj} ({n_toks_nonproj/n_toks:.1%})\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.prep_for_parsing": [[84, 107], ["sample[].insert", "enumerate", "readers.get_proj_edges", "sample[].insert", "t.split", "enumerate"], "function", ["home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.readers.get_proj_edges", "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.None.split_conllu.split"], ["", "", "def", "prep_for_parsing", "(", "sample", ")", ":", "\n", "# Add ROOT element", "\n", "    ", "for", "key", "in", "\"words tags types\"", ".", "split", "(", ")", ":", "\n", "        ", "sample", "[", "key", "]", ".", "insert", "(", "0", ",", "\"<root>\"", ")", "\n", "", "sample", "[", "\"heads\"", "]", ".", "insert", "(", "0", ",", "0", ")", "\n", "\n", "# Get only the main dependency types", "\n", "sample", "[", "\"types\"", "]", "=", "[", "t", ".", "split", "(", "\":\"", ")", "[", "0", "]", "for", "t", "in", "sample", "[", "\"types\"", "]", "]", "\n", "\n", "# Mark punctuations", "\n", "sample", "[", "\"punct?\"", "]", "=", "[", "False", "for", "_", "in", "sample", "[", "\"tags\"", "]", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "sample", "[", "\"tags\"", "]", ")", ":", "\n", "        ", "if", "t", "in", "(", "\"SYM\"", ",", "\"PUNCT\"", ")", ":", "\n", "            ", "sample", "[", "\"punct?\"", "]", "[", "i", "]", "=", "True", "\n", "\n", "# Mark projective arcs", "\n", "", "", "sample", "[", "\"proj?\"", "]", "=", "[", "False", "for", "_", "in", "sample", "[", "\"heads\"", "]", "]", "\n", "sample", "[", "\"proj?\"", "]", "[", "0", "]", "=", "True", "\n", "edges", "=", "[", "(", "h", ",", "d", ")", "for", "d", ",", "h", "in", "enumerate", "(", "sample", "[", "\"heads\"", "]", ")", "if", "d", "!=", "0", "]", "\n", "for", "_", ",", "d", "in", "get_proj_edges", "(", "edges", ")", ":", "\n", "        ", "sample", "[", "\"proj?\"", "]", "[", "d", "]", "=", "True", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kmkurn_ppt-eacl2021.ingredients.corpus.get_stats": [[109, 122], ["tqdm.tqdm", "len", "sum", "all", "len", "len", "len"], "function", ["None"], ["", "def", "get_stats", "(", "samples", ")", ":", "\n", "    ", "n_sents", "=", "n_toks", "=", "n_toks_nopunct", "=", "0", "\n", "n_sents_nonproj", "=", "n_toks_nonproj", "=", "0", "\n", "for", "s", "in", "tqdm", "(", "samples", ",", "leave", "=", "False", ")", ":", "\n", "        ", "n_sents", "+=", "1", "\n", "n_toks", "+=", "len", "(", "s", "[", "\"words\"", "]", ")", "\n", "assert", "len", "(", "s", "[", "\"words\"", "]", ")", "==", "len", "(", "s", "[", "\"tags\"", "]", ")", "\n", "n_toks_nopunct", "+=", "sum", "(", "0", "if", "p", "else", "1", "for", "p", "in", "s", "[", "\"punct?\"", "]", ")", "\n", "is_proj", "=", "all", "(", "s", "[", "\"proj?\"", "]", ")", "\n", "n_sents_nonproj", "+=", "1", "if", "not", "is_proj", "else", "0", "\n", "n_toks_nonproj", "+=", "len", "(", "s", "[", "\"words\"", "]", ")", "if", "not", "is_proj", "else", "0", "\n", "\n", "", "return", "n_sents", ",", "n_toks", ",", "n_toks_nopunct", ",", "n_sents_nonproj", ",", "n_toks_nonproj", "\n", "", ""]]}