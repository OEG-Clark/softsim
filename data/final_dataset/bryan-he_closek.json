{"home.repos.pwc.inspect_result.bryan-he_closek.experiments.main.main": [[26, 231], ["util.get_parser", "util.get_parser.parse_args", "pathlib.Path().mkdir", "util.configure_logger", "logging.getLogger", "logging.getLogger.info", "random.seed", "numpy.random.seed", "torch.manual_seed", "util.load", "util.simulate_data", "enumerate", "pathlib.Path", "torch.nn.SoftMarginLoss", "set().intersection", "logging.getLogger.warning", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "sklearn.decomposition.PCA.transform", "logging.getLogger.info", "numpy.empty", "range", "pathlib.Path().mkdir", "util.render", "logging.getLogger.exception", "os.path.dirname", "util.HingeLoss", "ValueError", "math.log", "torch.cuda.is_available", "numpy.mean", "numpy.maximum", "file_read_backwards.FileReadBackwards", "logging.getLogger.info", "random.seed", "numpy.random.seed", "torch.manual_seed", "list", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "traceback.format_exc", "set", "ValueError", "numpy.std", "util.PolynomialFeature", "torch.Tensor", "next", "int", "logging.getLogger.warning", "util.split", "itertools.product", "logging.getLogger.info", "accuracy[].mean", "accuracy[].std", "pathlib.Path", "sklearn.linear_model.SGDClassifier.fit", "torch.nn.Sequential", "main.train", "pathlib.Path().mkdir", "accuracy[].mean", "str", "list", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression", "sum", "sum", "sum", "logging.getLogger.warning", "open", "pickle.dump", "str", "map", "sklearn.svm.LinearSVC", "sklearn.svm.LinearSVC", "sklearn.svm.LinearSVC", "util.linear_regression", "torch.nn.Linear", "torch.nn.Sequential", "pathlib.Path", "list", "list", "range", "range", "sklearn.naive_bayes.GaussianNB", "sklearn.naive_bayes.GaussianNB", "sklearn.naive_bayes.GaussianNB", "sklearn.linear_model.SGDClassifier.predict", "sklearn.linear_model.SGDClassifier.predict", "sklearn.linear_model.SGDClassifier.predict", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "dense.DenseBlock", "ValueError", "str", "map", "map", "len", "sklearn.linear_model.SGDClassifier", "sklearn.linear_model.SGDClassifier", "sklearn.linear_model.SGDClassifier", "ValueError", "range", "range", "str", "list", "len", "str", "map"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.get_parser", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.configure_logger", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.simulate_data", "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.fit", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.render", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.split", "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.fit", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.main.train", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.linear_regression", "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.predict", "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.predict", "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.predict"], ["def", "main", "(", "args", "=", "None", ")", ":", "\n", "# Parse command line arguments", "\n", "    ", "parser", "=", "util", ".", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Automatically create directory for logfile (if needed)", "\n", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "logfile", ")", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Basic configuration for logging", "\n", "util", ".", "configure_logger", "(", "args", ".", "log", ",", "args", ".", "logfile", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "try", ":", "\n", "        ", "logger", ".", "info", "(", "args", ")", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "if", "args", ".", "loss", "==", "\"logistic\"", ":", "\n", "            ", "loss", "=", "torch", ".", "nn", ".", "SoftMarginLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "", "elif", "args", ".", "loss", "==", "\"hinge\"", ":", "\n", "            ", "loss", "=", "util", ".", "HingeLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Loss \"", "+", "args", ".", "loss", "+", "\" is not recognized\"", ")", "\n", "\n", "# Automatically set threshold if it is needed", "\n", "", "if", "args", ".", "threshold", "is", "None", "and", "set", "(", "[", "\"close\"", ",", "\"close_decay\"", ",", "\"drop\"", "]", ")", ".", "intersection", "(", "args", ".", "mode", ")", ":", "\n", "            ", "if", "args", ".", "loss", "==", "\"logistic\"", ":", "\n", "                ", "args", ".", "threshold", "=", "math", ".", "log", "(", "2", ")", "\n", "", "elif", "args", ".", "loss", "==", "\"hinge\"", ":", "\n", "                ", "args", ".", "threshold", "=", "1", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Loss \"", "+", "mode", "+", "\" is not recognized\"", ")", "\n", "\n", "", "", "if", "args", ".", "gpu", "and", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"GPU is not available.\"", ")", "\n", "args", ".", "gpu", "=", "False", "\n", "\n", "", "X", ",", "y", "=", "util", ".", "load", "(", "args", ".", "dataset", ",", "multi", "=", "args", ".", "multi", ")", "\n", "\n", "if", "args", ".", "normalize", ":", "# Set input to be zero-mean and unit variance", "\n", "            ", "X", "=", "X", "-", "np", ".", "mean", "(", "X", ",", "0", ")", "\n", "# Avoid division-by-zero in special case where one feature is constant", "\n", "X", "=", "X", "/", "np", ".", "maximum", "(", "np", ".", "std", "(", "X", ",", "0", ")", ",", "1e-5", ")", "\n", "\n", "", "X", ",", "y", "=", "util", ".", "simulate_data", "(", "X", ",", "y", ",", "args", ".", "outliers", ",", "args", ".", "dup0", ",", "args", ".", "dup1", ",", "args", ".", "hard0", ",", "args", ".", "hard1", ")", "\n", "\n", "if", "args", ".", "pca", "is", "not", "None", ":", "\n", "# Project onto top principal components", "\n", "            ", "pca", "=", "sklearn", ".", "decomposition", ".", "PCA", "(", "args", ".", "pca", ")", "\n", "pca", ".", "fit", "(", "X", ")", "\n", "X", "=", "pca", ".", "transform", "(", "X", ")", "\n", "\n", "# Use a polynomial feature transform", "\n", "", "X", "=", "util", ".", "PolynomialFeature", "(", "args", ".", "degree", ")", "(", "torch", ".", "Tensor", "(", "X", ")", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "synthetic", ":", "\n", "# Only consider one dimension for synthetic plots", "\n", "            ", "X", ",", "X_remaining", "=", "X", "[", ":", ",", "0", ":", "1", "]", ",", "X", "[", ":", ",", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "X_remaining", "=", "None", "\n", "\n", "", "if", "args", ".", "restart", ":", "\n", "# This checks for an existing log file and determines which was the last completed", "\n", "# trial. The seed and number of trials are set to continue from this point.", "\n", "            ", "with", "file_read_backwards", ".", "FileReadBackwards", "(", "args", ".", "logfile", ")", "as", "f", ":", "\n", "                ", "try", ":", "\n", "# Search for the last line stating a trial number in the log file", "\n", "                    ", "l", "=", "next", "(", "l", "for", "l", "in", "f", "if", "\"Trial #\"", "in", "l", ")", "\n", "trial", "=", "int", "(", "l", "[", "33", ":", "-", "1", "]", ")", "# trial that was killed", "\n", "newseed", "=", "args", ".", "seed", "+", "trial", "-", "1", "\n", "newtrials", "=", "args", ".", "trials", "-", "trial", "+", "1", "\n", "logger", ".", "warning", "(", "\"Detected previous run that failed on trial #%d\\n\"", "\n", "\"Changing seed from %d to %d\\n\"", "\n", "\"Changing trials from %d to %d\"", ",", "\n", "trial", ",", "args", ".", "seed", ",", "newseed", ",", "args", ".", "trials", ",", "newtrials", ")", "\n", "args", ".", "seed", "=", "newseed", "\n", "args", ".", "trials", "=", "newtrials", "\n", "", "except", "StopIteration", ":", "\n", "# No failed run detected", "\n", "                    ", "pass", "\n", "\n", "", "", "", "solution", "=", "[", "None", "for", "_", "in", "args", ".", "mode", "]", "\n", "for", "(", "m", ",", "mode", ")", "in", "enumerate", "(", "args", ".", "mode", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Mode: \"", "+", "mode", ")", "\n", "accuracy", "=", "np", ".", "empty", "(", "args", ".", "trials", ")", "\n", "for", "trial", "in", "range", "(", "args", ".", "trials", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"Trial #\"", "+", "str", "(", "args", ".", "seed", "+", "trial", "+", "1", ")", "+", "\":\"", ")", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", "+", "trial", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", "+", "trial", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", "+", "trial", ")", "\n", "\n", "if", "args", ".", "split", ":", "\n", "                    ", "Xtrain", ",", "ytrain", ",", "Xvalid", ",", "yvalid", ",", "Xtest", ",", "ytest", "=", "util", ".", "split", "(", "X", ",", "y", ")", "\n", "", "else", ":", "\n", "                    ", "Xtrain", ",", "ytrain", ",", "Xvalid", ",", "yvalid", ",", "Xtest", ",", "ytest", "=", "X", ",", "y", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "n", ",", "d", "=", "Xtrain", ".", "shape", "\n", "\n", "# Default regularization parameters", "\n", "if", "args", ".", "reg", "is", "not", "None", ":", "\n", "                    ", "C", "=", "args", ".", "reg", "\n", "", "elif", "mode", "[", ":", "7", "]", "==", "\"sklearn\"", ":", "\n", "                    ", "if", "mode", "==", "\"sklearnnb\"", ":", "\n", "                        ", "C", "=", "[", "None", "]", "\n", "", "elif", "mode", "==", "\"sklearnsgd\"", ":", "\n", "                        ", "C", "=", "[", "0", "]", "+", "list", "(", "map", "(", "lambda", "x", ":", "10", "**", "x", ",", "range", "(", "-", "5", ",", "6", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "C", "=", "list", "(", "map", "(", "lambda", "x", ":", "10", "**", "x", ",", "range", "(", "-", "5", ",", "6", ")", ")", ")", "+", "[", "10", "**", "10", "]", "\n", "", "", "else", ":", "\n", "                    ", "C", "=", "[", "0", "]", "+", "list", "(", "map", "(", "lambda", "x", ":", "10", "**", "x", ",", "range", "(", "-", "5", ",", "6", ")", ")", ")", "\n", "\n", "# Default choices of k", "\n", "", "if", "args", ".", "k", "is", "not", "None", ":", "\n", "                    ", "k", "=", "args", ".", "k", "\n", "", "else", ":", "\n", "                    ", "if", "mode", "in", "[", "\"atk\"", ",", "\"top\"", ",", "\"border\"", ",", "\"close\"", ",", "\"close_decay\"", ",", "\"drop\"", "]", ":", "\n", "# k = range(n + 1)", "\n", "                        ", "k", "=", "(", "[", "10", "**", "i", "for", "i", "in", "range", "(", "len", "(", "str", "(", "n", "-", "1", ")", ")", ")", "]", "+", "[", "n", "]", ")", "\n", "", "else", ":", "\n", "                        ", "k", "=", "[", "None", "]", "\n", "\n", "", "", "hyperparameters", "=", "list", "(", "itertools", ".", "product", "(", "C", ",", "k", ")", ")", "\n", "\n", "best", "=", "None", "\n", "for", "hp", "in", "hyperparameters", ":", "\n", "                    ", "C", ",", "k", "=", "hp", "\n", "\n", "if", "mode", "[", ":", "7", "]", "==", "\"sklearn\"", ":", "\n", "                        ", "if", "mode", "==", "\"sklearnlogistic\"", ":", "\n", "                            ", "model", "=", "sklearn", ".", "linear_model", ".", "LogisticRegression", "(", "\n", "C", "=", "C", ",", "random_state", "=", "args", ".", "seed", ")", "\n", "", "elif", "mode", "==", "\"sklearnsvm\"", ":", "\n", "                            ", "model", "=", "sklearn", ".", "svm", ".", "LinearSVC", "(", "C", "=", "C", ",", "random_state", "=", "args", ".", "seed", ")", "\n", "", "elif", "mode", "==", "\"sklearnnb\"", ":", "\n", "                            ", "model", "=", "sklearn", ".", "naive_bayes", ".", "GaussianNB", "(", ")", "\n", "", "elif", "mode", "==", "\"sklearnsgd\"", ":", "\n", "                            ", "model", "=", "sklearn", ".", "linear_model", ".", "SGDClassifier", "(", "\n", "loss", "=", "args", ".", "loss", "if", "args", ".", "loss", "is", "not", "\"logistic\"", "else", "\"log\"", ",", "\n", "max_iter", "=", "args", ".", "epochs", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "ValueError", "(", "\"mode \"", "+", "mode", "+", "\" is not recognized\"", ")", "\n", "", "model", ".", "fit", "(", "Xtrain", ",", "ytrain", ")", "\n", "res", "=", "{", "}", "\n", "res", "[", "\"train\"", "]", "=", "sum", "(", "ytrain", "==", "model", ".", "predict", "(", "Xtrain", ")", ")", "/", "ytrain", ".", "size", "\n", "res", "[", "\"valid\"", "]", "=", "sum", "(", "yvalid", "==", "model", ".", "predict", "(", "Xvalid", ")", ")", "/", "yvalid", ".", "size", "\n", "res", "[", "\"test\"", "]", "=", "sum", "(", "ytest", "==", "model", ".", "predict", "(", "Xtest", ")", ")", "/", "ytest", ".", "size", "\n", "", "else", ":", "\n", "                        ", "if", "args", ".", "pretrain", "and", "args", ".", "model", "!=", "\"linear\"", ":", "\n", "                            ", "logger", ".", "warning", "(", "\"Pretraining is only compatible with linear models.\"", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "\"linear\"", ":", "\n", "                            ", "if", "args", ".", "pretrain", ":", "\n", "                                ", "model", "=", "util", ".", "linear_regression", "(", "Xtrain", ",", "ytrain", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "                                ", "model", "=", "torch", ".", "nn", ".", "Linear", "(", "d", ",", "1", ")", "\n", "", "", "elif", "args", ".", "model", "==", "\"nn\"", ":", "\n", "                            ", "model", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "d", ",", "2", "*", "d", ")", ",", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "d", ",", "1", ")", ")", "\n", "", "elif", "args", ".", "model", "==", "\"dense\"", ":", "\n", "                            ", "model", "=", "dense", ".", "DenseBlock", "(", "2", ",", "d", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "ValueError", "(", "\"model \"", "+", "args", ".", "model", "+", "\" is not recognized\"", ")", "\n", "\n", "", "model", "=", "torch", ".", "nn", ".", "Sequential", "(", "model", ")", "\n", "\n", "res", "=", "train", "(", "Xtrain", ",", "ytrain", ",", "Xvalid", ",", "yvalid", ",", "Xtest", ",", "ytest", ",", "model", ",", "loss", ",", "\n", "mode", "=", "mode", ",", "threshold", "=", "args", ".", "threshold", ",", "k", "=", "k", ",", "\n", "batch", "=", "args", ".", "batch", ",", "lr", "=", "args", ".", "lr", ",", "epochs", "=", "args", ".", "epochs", ",", "C", "=", "C", ",", "\n", "tol", "=", "args", ".", "tol", ",", "gpu", "=", "args", ".", "gpu", ")", "\n", "", "if", "args", ".", "save", ":", "\n", "                        ", "pathlib", ".", "Path", "(", "args", ".", "logfile", "+", "\"_checkpoints\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "\n", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "args", ".", "logfile", "+", "\"_checkpoints/\"", "+", "\n", "(", "mode", "if", "len", "(", "args", ".", "mode", ")", "!=", "1", "else", "\"\"", ")", "+", "\n", "\"_\"", ".", "join", "(", "[", "str", "(", "args", ".", "seed", "+", "trial", ")", "]", "+", "list", "(", "map", "(", "str", ",", "hp", ")", ")", ")", "+", "\n", "\".pkl\"", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                            ", "pickle", ".", "dump", "(", "model", ",", "f", ")", "\n", "\n", "", "", "if", "best", "is", "None", "or", "(", "(", "res", "[", "\"valid\"", "]", ">=", "best", "[", "\"valid\"", "]", ")", "\n", "if", "(", "\"valid\"", "in", "res", ")", "\n", "else", "(", "res", "[", "\"train\"", "]", ">=", "best", "[", "\"train\"", "]", ")", ")", ":", "\n", "                        ", "best", "=", "res", "\n", "best_model", "=", "model", "\n", "", "logger", ".", "info", "(", "\"        \"", "+", "str", "(", "hp", ")", "+", "\": \"", "+", "str", "(", "res", ")", ")", "\n", "", "accuracy", "[", "trial", "]", "=", "best", "[", "\"test\"", "]", "if", "\"test\"", "in", "best", "else", "best", "[", "\"train\"", "]", "\n", "logger", ".", "info", "(", "\"    Accuracy: %f\"", ",", "accuracy", "[", "trial", "]", ")", "\n", "logger", ".", "info", "(", "\"    Average Accuracy: %f (%f)\"", ",", "\n", "accuracy", "[", ":", "(", "trial", "+", "1", ")", "]", ".", "mean", "(", ")", ",", "accuracy", "[", ":", "(", "trial", "+", "1", ")", "]", ".", "std", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"    Average Error: %f\"", ",", "1", "-", "accuracy", "[", ":", "(", "trial", "+", "1", ")", "]", ".", "mean", "(", ")", ")", "\n", "solution", "[", "m", "]", "=", "(", "mode", ",", "best_model", ")", "\n", "\n", "", "", "if", "args", ".", "render", ":", "\n", "            ", "pathlib", ".", "Path", "(", "\"fig/\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "args", ".", "labels", "is", "None", ":", "\n", "                ", "args", ".", "labels", "=", "args", ".", "mode", "\n", "", "util", ".", "render", "(", "X", ",", "y", ",", "solution", ",", "\"fig/\"", "+", "args", ".", "dataset", ",", "X_remaining", ",", "\n", "labels", "=", "args", ".", "labels", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logger", ".", "exception", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.main.train": [[233, 502], ["torch.Tensor", "torch.Tensor", "logging.getLogger", "torch.optim.SGD", "copy.deepcopy", "range", "len", "ytrain.cuda.unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model.cuda", "Xtrain.cuda.cuda", "ytrain.cuda.cuda", "model.parameters", "model.state_dict", "copy.deepcopy", "model.cpu", "len", "yvalid.cuda.unsqueeze", "len", "ytest.cuda.unsqueeze", "Xvalid.cuda.cuda", "yvalid.cuda.cuda", "Xtest.cuda.cuda", "ytest.cuda.cuda", "p.clone", "all", "model.state_dict", "logging.getLogger.debug", "torch.set_grad_enabled", "logging.getLogger.debug", "math.sqrt", "model.parameters", "map", "range", "float", "logging.getLogger.debug", "logging.getLogger.debug", "logging.getLogger.debug", "logging.getLogger.debug", "float", "sum().detach().cpu().numpy", "logging.getLogger.debug", "p.clone", "str", "min", "model", "torch.sum", "torch.sum().cpu().detach().numpy", "torch.sum().cpu().numpy", "torch.sum.cpu().detach().numpy", "torch.sum.cpu().detach().numpy", "torch.empty", "range", "torch.sum().cpu().detach().numpy", "logging.getLogger.debug", "math.isnan", "math.isnan", "logging.getLogger.debug", "logging.getLogger.debug", "model.load_state_dict", "torch.optim.SGD", "str", "model.parameters", "str", "loss", "torch.optim.SGD.zero_grad", "torch.sum.backward", "torch.optim.SGD.step", "min", "model", "loss", "torch.sum().cpu().detach().numpy", "torch.sum().cpu().numpy", "torch.sort", "torch.sort", "torch.sum.cpu().detach().numpy", "torch.empty", "range", "torch.sum().cpu().detach().numpy", "float", "float", "float", "model.parameters", "sum().detach().cpu", "str", "torch.sum().cpu().detach", "torch.sum().cpu", "torch.sum.cpu().detach", "torch.sum.cpu().detach", "torch.sum().cpu().detach", "torch.sum", "torch.optim.SGD.zero_grad", "torch.sum.backward", "torch.optim.SGD.step", "min", "model", "loss", "torch.sum().cpu().detach().numpy", "torch.sum().cpu().numpy", "torch.sum", "torch.sum.cpu().detach().numpy", "range", "NotImplementedError", "float", "torch.sum().cpu().detach", "torch.sum().cpu", "torch.sum", "torch.sum.cpu().detach", "torch.sum().cpu().detach", "torch.abs", "torch.sort", "torch.sort", "perm.squeeze.squeeze", "torch.optim.SGD.zero_grad", "torch.sum.backward", "torch.optim.SGD.step", "min", "model", "torch.sum", "torch.sum().cpu().detach().numpy", "torch.sum().cpu().numpy", "torch.sum.cpu().detach().numpy", "torch.sum.cpu().detach().numpy", "sum().detach", "str", "torch.sum().cpu", "torch.sum", "torch.sum.cpu", "torch.sum.cpu", "torch.sum().cpu", "torch.sum", "torch.sum().cpu().detach", "torch.sum().cpu", "torch.sum.cpu().detach", "loss().clamp", "torch.optim.SGD.zero_grad", "torch.sum.backward", "torch.optim.SGD.step", "torch.sum().cpu", "torch.sum", "torch.sum", "torch.sum.cpu", "torch.sum().cpu", "round", "torch.sum().cpu().detach", "torch.sum().cpu", "torch.sum.cpu().detach", "torch.sum.cpu().detach", "sum", "str", "torch.sum", "torch.sum", "torch.abs", "torch.sort", "ValueError", "torch.sum().cpu", "torch.sum", "torch.sum.cpu", "loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum().cpu", "torch.sum", "torch.sum.cpu", "torch.sum.cpu", "torch.norm", "max", "torch.isnan", "torch.sum().type", "torch.sum", "zip", "torch.exp", "torch.sum", "model.parameters", "torch.exp", "round", "torch.sum", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "train", "(", "Xtrain", ",", "ytrain", ",", "\n", "Xvalid", ",", "yvalid", ",", "\n", "Xtest", ",", "ytest", ",", "\n", "model", ",", "loss", ",", "\n", "epochs", "=", "100", ",", "\n", "lr", "=", "1e-2", ",", "\n", "momentum", "=", "0.9", ",", "\n", "batch", "=", "1", ",", "\n", "mode", "=", "\"average\"", ",", "\n", "threshold", "=", "None", ",", "\n", "k", "=", "1", ",", "\n", "C", "=", "0", ",", "\n", "tol", "=", "None", ",", "\n", "gpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Trains a model using SGD with momentum.\n\n    This function is used to create Figure 1.\n\n    Args:\n        Xtrain (np.array): training features\n        ytrain (np.array): training classes\n        Xvalid (np.array): validation features\n        yvalid (np.array): validation classes\n        Xtest (np.array): test features\n        ytest (np.array): test classes\n        model (torch.nn.Module): initial model\n        epochs (int): maximum number of epochs\n        lr (float): learning rate\n        momentum (float): momentum for SGD\n        batch (int): batch size\n        mode (str): aggregate loss to train with\n        threshold (float): threshold for close-k\n                           (individual loss corresponding to correct prediction)\n        k (int): number of examples for atk, close-k, and top-k\n        C (float): regularization parameter\n        tol (float): tolerance for stopping (set to None to train for all epochs)\n        gpu (bool) train on GPU\n\n    Returns:\n        dict: training, validation, and test accuracies\n            maps from string (\"train\", \"valid\", or \"test\") to the corresponding accuracy (float)\n    \"\"\"", "\n", "\n", "\n", "# Converting types and shape of data for downstream use", "\n", "Xtrain", "=", "torch", ".", "Tensor", "(", "Xtrain", ")", "\n", "ytrain", "=", "torch", ".", "Tensor", "(", "2", "*", "ytrain", "-", "1", ")", "\n", "if", "len", "(", "ytrain", ".", "shape", ")", "==", "1", ":", "\n", "        ", "ytrain", "=", "ytrain", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "if", "Xvalid", "is", "not", "None", ":", "\n", "        ", "Xvalid", "=", "torch", ".", "Tensor", "(", "Xvalid", ")", "\n", "yvalid", "=", "torch", ".", "Tensor", "(", "2", "*", "yvalid", "-", "1", ")", "\n", "if", "len", "(", "yvalid", ".", "shape", ")", "==", "1", ":", "\n", "            ", "yvalid", "=", "yvalid", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "", "if", "Xtest", "is", "not", "None", ":", "\n", "        ", "Xtest", "=", "torch", ".", "Tensor", "(", "Xtest", ")", "\n", "ytest", "=", "torch", ".", "Tensor", "(", "2", "*", "ytest", "-", "1", ")", "\n", "if", "len", "(", "ytest", ".", "shape", ")", "==", "1", ":", "\n", "            ", "ytest", "=", "ytest", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "", "if", "gpu", ":", "\n", "# Move data to GPU", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "Xtrain", "=", "Xtrain", ".", "cuda", "(", ")", "\n", "ytrain", "=", "ytrain", ".", "cuda", "(", ")", "\n", "if", "Xvalid", "is", "not", "None", ":", "\n", "            ", "Xvalid", "=", "Xvalid", ".", "cuda", "(", ")", "\n", "yvalid", "=", "yvalid", ".", "cuda", "(", ")", "\n", "", "if", "Xtest", "is", "not", "None", ":", "\n", "            ", "Xtest", "=", "Xtest", ".", "cuda", "(", ")", "\n", "ytest", "=", "ytest", ".", "cuda", "(", ")", "\n", "\n", "", "", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "C", ")", "\n", "\n", "res", "=", "{", "}", "\n", "stop", "=", "False", "\n", "if", "tol", "is", "not", "None", ":", "\n", "        ", "prev_param", "=", "[", "p", ".", "clone", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "", "last_reset", "=", "0", "\n", "best_agg", "=", "math", ".", "inf", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_epoch", "=", "-", "1", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "print_diagnostics", "=", "(", "epoch", "-", "last_reset", "<", "5", "or", "\n", "all", "(", "map", "(", "lambda", "x", ":", "x", "==", "\"9\"", ",", "str", "(", "epoch", ")", ")", ")", "or", "\n", "stop", ")", "\n", "\n", "prev_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "if", "print_diagnostics", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Epoch #\"", "+", "str", "(", "epoch", "+", "1", ")", "+", "\":\"", ")", "\n", "\n", "", "run_test", "=", "Xtest", "is", "not", "None", "and", "(", "stop", "or", "epoch", "+", "1", "==", "epochs", ")", "\n", "for", "(", "dataset", ",", "X", ",", "y", ")", "in", "(", "[", "(", "\"train\"", ",", "Xtrain", ",", "ytrain", ")", "]", "+", "\n", "(", "[", "(", "\"valid\"", ",", "Xvalid", ",", "yvalid", ")", "]", "if", "Xvalid", "is", "not", "None", "else", "[", "]", ")", "+", "\n", "(", "[", "(", "\"test\"", ",", "Xtest", ",", "ytest", ")", "]", "if", "run_test", "else", "[", "]", ")", ")", ":", "\n", "\n", "            ", "torch", ".", "set_grad_enabled", "(", "dataset", "==", "\"train\"", ")", "\n", "\n", "total", "=", "0.", "\n", "agg", "=", "0.", "\n", "correct", "=", "0", "\n", "prob", "=", "0.", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "mode", "==", "\"average\"", ":", "\n", "                ", "for", "start", "in", "range", "(", "0", ",", "n", ",", "batch", ")", ":", "\n", "                    ", "end", "=", "min", "(", "n", ",", "start", "+", "batch", ")", "\n", "z", "=", "model", "(", "X", "[", "start", ":", "end", ",", ":", "]", ")", "\n", "pred", "=", "2", "*", "(", "z", ">=", "0", ")", ".", "type", "(", "torch", ".", "float", ")", "-", "1", "\n", "l", "=", "torch", ".", "sum", "(", "loss", "(", "z", ",", "y", "[", "start", ":", "end", "]", ")", ")", "\n", "\n", "prob", "+=", "torch", ".", "sum", "(", "(", "1.", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "y", "[", "start", ":", "end", "]", "*", "z", ")", ")", ")", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", "==", "y", "[", "start", ":", "end", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "total", "+=", "l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "agg", "+=", "l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "dataset", "==", "\"train\"", "and", "epoch", "!=", "0", ":", "\n", "                        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "l", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "", "elif", "mode", "==", "\"atk\"", "or", "mode", "==", "\"top\"", "or", "mode", "==", "\"maximal\"", "or", "mode", "==", "\"border\"", "or", "mode", "==", "\"close\"", "or", "mode", "==", "\"close_decay\"", ":", "\n", "                ", "l", "=", "torch", ".", "empty", "(", "n", ",", "1", ")", "\n", "for", "start", "in", "range", "(", "0", ",", "n", ",", "batch", ")", ":", "\n", "                    ", "end", "=", "min", "(", "n", ",", "start", "+", "batch", ")", "\n", "z", "=", "model", "(", "X", "[", "start", ":", "end", ",", ":", "]", ")", "\n", "pred", "=", "2", "*", "(", "z", ">=", "0", ")", ".", "type", "(", "torch", ".", "float", ")", "-", "1", "\n", "l", "[", "start", ":", "end", "]", "=", "loss", "(", "z", ",", "y", "[", "start", ":", "end", "]", ")", "\n", "\n", "prob", "+=", "torch", ".", "sum", "(", "(", "1.", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "y", "[", "start", ":", "end", "]", "*", "z", ")", ")", ")", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", "==", "y", "[", "start", ":", "end", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "total", "=", "torch", ".", "sum", "(", "l", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "dataset", "==", "\"train\"", ":", "\n", "                    ", "M", "=", "1", "\n", "l", ",", "perm", "=", "torch", ".", "sort", "(", "l", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "p", ",", "_", "=", "torch", ".", "sort", "(", "pred", "==", "y", "[", "start", ":", "end", "]", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "if", "mode", "==", "\"atk\"", ":", "\n", "                        ", "l", "=", "torch", ".", "sum", "(", "l", "[", ":", "k", "]", ")", "\n", "", "elif", "mode", "==", "\"top\"", ":", "\n", "                        ", "l", "=", "torch", ".", "sum", "(", "l", "[", "k", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "\"maximal\"", ":", "\n", "                        ", "l", "=", "torch", ".", "sum", "(", "l", "[", "0", "]", ")", "\n", "", "elif", "mode", "==", "\"border\"", ":", "\n", "                        ", "l", "=", "torch", ".", "sum", "(", "l", "[", "max", "(", "0", ",", "n", "-", "correct", "-", "k", ")", ":", "(", "n", "-", "correct", "+", "k", ")", "]", ")", "\n", "l", "+=", "M", "*", "correct", "\n", "", "elif", "mode", "==", "\"close\"", "or", "mode", "==", "\"close_decay\"", ":", "\n", "                        ", "if", "mode", "==", "\"close\"", ":", "\n", "                            ", "k_", "=", "k", "\n", "", "else", ":", "\n", "                            ", "if", "epoch", "<", "epochs", "//", "3", ":", "\n", "                                ", "k_", "=", "n", "\n", "", "elif", "epoch", "<", "2", "*", "epochs", "//", "3", ":", "\n", "                                ", "k_", "=", "k", "+", "round", "(", "(", "n", "-", "k", ")", "*", "(", "2", "*", "epochs", "//", "3", "-", "epoch", ")", "/", "epochs", "*", "3", ")", "\n", "", "else", ":", "\n", "                                ", "k_", "=", "k", "\n", "", "", "diff", "=", "torch", ".", "abs", "(", "l", "-", "threshold", ")", "\n", "s", ",", "_", "=", "torch", ".", "sort", "(", "diff", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "ind", "=", "(", "(", "(", "diff", "<=", "s", "[", "k_", "-", "1", "]", ")", "+", "torch", ".", "isnan", "(", "l", ")", ")", "!=", "0", ")", "\n", "l", "=", "torch", ".", "sum", "(", "l", "[", "ind", "]", ")", "+", "M", "*", "(", "torch", ".", "sum", "(", "(", "diff", ">", "s", "[", "k_", "-", "1", "]", ")", "*", "(", "l", ">", "threshold", ")", ")", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\"mode \"", "+", "mode", "+", "\" is not recognized\"", ")", "\n", "", "agg", "=", "l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "epoch", "!=", "0", ":", "\n", "                        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "l", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "", "elif", "mode", "==", "\"drop\"", ":", "\n", "                ", "l", "=", "torch", ".", "empty", "(", "n", ",", "1", ")", "\n", "for", "start", "in", "range", "(", "0", ",", "n", ",", "batch", ")", ":", "\n", "                    ", "end", "=", "min", "(", "n", ",", "start", "+", "batch", ")", "\n", "z", "=", "model", "(", "X", "[", "start", ":", "end", ",", ":", "]", ")", "\n", "pred", "=", "2", "*", "(", "z", ">=", "0", ")", ".", "type", "(", "torch", ".", "float", ")", "-", "1", "\n", "l", "[", "start", ":", "end", "]", "=", "loss", "(", "z", ",", "y", "[", "start", ":", "end", "]", ")", "\n", "\n", "prob", "+=", "torch", ".", "sum", "(", "(", "1.", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "y", "[", "start", ":", "end", "]", "*", "z", ")", ")", ")", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", "==", "y", "[", "start", ":", "end", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "total", "=", "torch", ".", "sum", "(", "l", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "dataset", "==", "\"train\"", ":", "\n", "                    ", "if", "epoch", "<", "epochs", "//", "3", ":", "\n", "                        ", "k_", "=", "n", "\n", "", "elif", "epoch", "<", "2", "*", "epochs", "//", "3", ":", "\n", "                        ", "k_", "=", "k", "+", "round", "(", "(", "n", "-", "k", ")", "*", "(", "2", "*", "epochs", "//", "3", "-", "epoch", ")", "/", "epochs", "*", "3", ")", "\n", "", "else", ":", "\n", "                        ", "k_", "=", "k", "\n", "\n", "", "if", "k_", "<", "Xtrain", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "diff", "=", "torch", ".", "abs", "(", "l", "-", "threshold", ")", "\n", "a", ",", "perm", "=", "torch", ".", "sort", "(", "diff", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "perm", ",", "_", "=", "torch", ".", "sort", "(", "perm", "[", ":", "k_", "]", ")", "\n", "perm", "=", "perm", ".", "squeeze", "(", "1", ")", "\n", "Xtrain", "=", "Xtrain", "[", "perm", ",", ":", "]", "\n", "ytrain", "=", "ytrain", "[", "perm", "]", "\n", "\n", "", "l", "=", "torch", ".", "sum", "(", "l", ")", "\n", "\n", "agg", "=", "l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "epoch", "!=", "0", ":", "\n", "                        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "l", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "", "elif", "mode", "==", "\"trunc\"", ":", "\n", "                ", "for", "start", "in", "range", "(", "0", ",", "n", ",", "batch", ")", ":", "\n", "                    ", "end", "=", "min", "(", "n", ",", "start", "+", "batch", ")", "\n", "z", "=", "model", "(", "X", "[", "start", ":", "end", ",", ":", "]", ")", "\n", "pred", "=", "2", "*", "(", "z", ">=", "0", ")", ".", "type", "(", "torch", ".", "float", ")", "-", "1", "\n", "l", "=", "torch", ".", "sum", "(", "loss", "(", "z", ",", "y", "[", "start", ":", "end", "]", ")", ".", "clamp", "(", "max", "=", "2", ")", ")", "\n", "\n", "prob", "+=", "torch", ".", "sum", "(", "(", "1.", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "y", "[", "start", ":", "end", "]", "*", "z", ")", ")", ")", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", "==", "y", "[", "start", ":", "end", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "total", "+=", "l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "agg", "+=", "l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "dataset", "==", "\"train\"", "and", "epoch", "!=", "0", ":", "\n", "                        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "l", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Mode \\\"\"", "+", "mode", "+", "\" is not recognized.\"", ")", "\n", "\n", "", "res", "[", "dataset", "]", "=", "correct", "/", "float", "(", "n", ")", "\n", "\n", "if", "print_diagnostics", ":", "\n", "                ", "logger", ".", "debug", "(", "\"    %s:\"", ",", "dataset", ")", "\n", "logger", ".", "debug", "(", "\"        Cross-entropy: %f\"", ",", "total", "/", "float", "(", "n", ")", ")", "\n", "if", "dataset", "==", "\"train\"", ":", "\n", "                    ", "logger", ".", "debug", "(", "\"        Aggregate:     %f\"", ",", "agg", "/", "float", "(", "n", ")", ")", "\n", "", "logger", ".", "debug", "(", "\"        Accuracy:      %f\"", ",", "correct", "/", "float", "(", "n", ")", ")", "\n", "logger", ".", "debug", "(", "\"        Soft Accuracy: %f\"", ",", "prob", "/", "float", "(", "n", ")", ")", "\n", "\n", "", "if", "dataset", "==", "\"train\"", ":", "\n", "                ", "agg", "/=", "float", "(", "n", ")", "\n", "if", "math", ".", "isnan", "(", "total", ")", "or", "math", ".", "isnan", "(", "agg", ")", "or", "agg", ">", "1.1", "*", "best_agg", ":", "\n", "                    ", "lr", "/=", "2", "\n", "logger", ".", "debug", "(", "\"Resetting and dividing lr by 2 at epoch #%d (new lr=%f)\"", ",", "epoch", "+", "1", ",", "lr", ")", "\n", "logger", ".", "debug", "(", "\"Best model was epoch #%d with %f\"", ",", "best_epoch", ",", "best_agg", ")", "\n", "last_reset", "=", "epoch", "\n", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "C", ")", "\n", "", "elif", "agg", "<", "best_agg", ":", "\n", "                    ", "best_epoch", "=", "epoch", "\n", "best_agg", "=", "agg", "\n", "best_model", "=", "prev_model", "\n", "\n", "", "", "", "if", "stop", ":", "\n", "            ", "break", "\n", "\n", "", "if", "lr", "<", "1e-10", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Learning rate too small at epoch #\"", "+", "str", "(", "epoch", ")", ")", "\n", "stop", "=", "True", "\n", "\n", "", "if", "tol", "is", "not", "None", "and", "last_reset", "+", "5", "<=", "epoch", ":", "\n", "            ", "delta", "=", "math", ".", "sqrt", "(", "sum", "(", "[", "torch", ".", "norm", "(", "u", "-", "v", ")", "for", "(", "u", ",", "v", ")", "in", "zip", "(", "prev_param", ",", "model", ".", "parameters", "(", ")", ")", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "delta", "<", "tol", ":", "\n", "                ", "logger", ".", "debug", "(", "\"Early termination at epoch #\"", "+", "str", "(", "epoch", ")", "+", "\" with change \"", "+", "str", "(", "delta", ")", "+", "\" < \"", "+", "str", "(", "tol", ")", ")", "\n", "stop", "=", "True", "\n", "", "prev_param", "=", "[", "p", ".", "clone", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "", "", "if", "gpu", ":", "\n", "        ", "model", ".", "cpu", "(", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.dense.DenseBlock.__init__": [[7, 13], ["super().__init__", "range", "dense.DenseBlock.add_module", "dense.DenseLayer", "dense.DenseBlock.add_module", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.HingeLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "ninput", ")", ":", "\n", "        ", "super", "(", "DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "DenseLayer", "(", "(", "i", "+", "1", ")", "*", "ninput", ",", "ninput", ")", "\n", "self", ".", "add_module", "(", "\"denselayer%d\"", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "", "self", ".", "add_module", "(", "\"classifier\"", ",", "torch", ".", "nn", ".", "Linear", "(", "(", "num_layers", "+", "1", ")", "*", "ninput", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.dense.DenseLayer.__init__": [[16, 20], ["super().__init__", "dense.DenseLayer.add_module", "dense.DenseLayer.add_module", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.HingeLoss.__init__"], ["def", "__init__", "(", "self", ",", "ninput", ",", "noutput", ")", ":", "\n", "        ", "super", "(", "DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "\"linear\"", ",", "torch", ".", "nn", ".", "Linear", "(", "ninput", ",", "noutput", ")", ")", ",", "\n", "self", ".", "add_module", "(", "\"relu\"", ",", "torch", ".", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.dense.DenseLayer.forward": [[21, 24], ["super().forward", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.HingeLoss.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.main": [[18, 35], ["analysis.summarize_datasets", "analysis.comparison", "analysis.comparison", "analysis.comparison", "analysis.comparison", "analysis.comparison", "analysis.comparison", "analysis.comparison", "analysis.simulation", "analysis.simulation", "analysis.simulation", "analysis.simulation", "analysis.simulation"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.summarize_datasets", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.comparison", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.comparison", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.comparison", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.comparison", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.comparison", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.comparison", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.comparison", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.simulation", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.simulation", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.simulation", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.simulation", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.simulation"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Creates figures and tables in paper.\"\"\"", "\n", "summarize_datasets", "(", "\"fig/summary\"", ")", "\n", "\n", "comparison", "(", "\"log/linear1\"", ",", "figroot", "=", "\"fig/linear1_combined_\"", ",", "dataset", "=", "\"combined\"", ")", "\n", "comparison", "(", "\"log/dense1\"", ",", "figroot", "=", "\"fig/dense1_combined_\"", ",", "dataset", "=", "\"combined\"", ")", "\n", "comparison", "(", "\"log_atk/linear1\"", ",", "figroot", "=", "\"fig/linear1_atk_\"", ",", "dataset", "=", "\"atk\"", ")", "\n", "comparison", "(", "\"log/linear1\"", ",", "figroot", "=", "\"fig/linear1_pmlb_binary_\"", ",", "dataset", "=", "\"pmlb_binary\"", ")", "\n", "comparison", "(", "\"log/dense1\"", ",", "figroot", "=", "\"fig/dense1_pmlb_binary_\"", ",", "dataset", "=", "\"pmlb_binary\"", ")", "\n", "comparison", "(", "\"log/linear1\"", ",", "figroot", "=", "\"fig/linear1_openml_binary_\"", ",", "dataset", "=", "\"openml_binary\"", ")", "\n", "comparison", "(", "\"log/dense1\"", ",", "figroot", "=", "\"fig/dense1_openml_binary_\"", ",", "dataset", "=", "\"openml_binary\"", ")", "\n", "\n", "simulation", "(", "\"simulation/spambase/outliers/\"", ",", "\"Outliers\"", ",", "[", "0", ",", "1", ",", "2", ",", "8", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", "]", ",", "\"fig/outlier_spambase\"", ",", "0.55", ",", "0.95", ")", "\n", "simulation", "(", "\"simulation/spambase/dup0/\"", ",", "\"Duplicates\"", ",", "[", "0", ",", "800", ",", "1600", ",", "3200", ",", "6400", ",", "12800", "]", ",", "\"fig/dup0_spambase\"", ",", "0.85", ",", "1.0", ")", "\n", "simulation", "(", "\"simulation/spambase/dup1/\"", ",", "\"Duplicates\"", ",", "[", "0", ",", "800", ",", "1600", ",", "3200", ",", "6400", ",", "12800", "]", ",", "\"fig/dup1_spambase\"", ")", "\n", "simulation", "(", "\"simulation/spambase/hard0/\"", ",", "\"Ambiguous Examples\"", ",", "[", "0", ",", "100", ",", "200", ",", "400", ",", "800", "]", ",", "\"fig/hard0_spambase\"", ",", "0.7", ",", "0.95", ")", "\n", "simulation", "(", "\"simulation/spambase/hard1/\"", ",", "\"Ambiguous Examples\"", ",", "[", "0", ",", "100", ",", "200", ",", "400", ",", "800", "]", ",", "\"fig/hard1_spambase\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.summarize_datasets": [[37, 117], ["random.seed", "util.pmlb_binary_classification_dataset_names", "numpy.zeros", "numpy.zeros", "enumerate", "util.openml_binary_classification_dataset_names", "numpy.zeros", "numpy.zeros", "enumerate", "util.atk_dataset_names", "numpy.zeros", "numpy.zeros", "enumerate", "util.latexify", "plt.figure", "plt.gca", "plt.gca.scatter", "plt.gca.scatter", "plt.gca.scatter", "plt.gca.set_xscale", "plt.gca.set_yscale", "plt.title", "plt.axis", "plt.xlabel", "plt.ylabel", "plt.legend", "plt.tight_layout", "len", "len", "util.load", "print", "print", "math.exp", "math.exp", "len", "len", "util.load", "print", "print", "math.exp", "math.exp", "len", "len", "util.load", "print", "print", "math.exp", "math.exp", "max", "max", "plt.savefig", "plt.savefig", "plt.show", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "max", "max", "max", "max", "max", "max", "math.log", "math.log"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.pmlb_binary_classification_dataset_names", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.openml_binary_classification_dataset_names", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.atk_dataset_names", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.latexify", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load"], ["", "def", "summarize_datasets", "(", "root", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create plot showing size and dimensions of datasets.\n\n    This creates Figure 2.\n\n    Args:\n        root (str): where to save figure\n    \"\"\"", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "jitter", "=", "0.1", "# small amount of jitter added to avoid overlap", "\n", "scale", "=", "0.25", "\n", "\n", "random", ".", "seed", "(", "0", ")", "\n", "\n", "ds", "=", "util", ".", "pmlb_binary_classification_dataset_names", "(", ")", "\n", "n1", "=", "np", ".", "zeros", "(", "len", "(", "ds", ")", ")", "\n", "d1", "=", "np", ".", "zeros", "(", "len", "(", "ds", ")", ")", "\n", "for", "(", "i", ",", "dataset", ")", "in", "enumerate", "(", "ds", ")", ":", "\n", "        ", "X", ",", "y", "=", "util", ".", "load", "(", "dataset", ")", "\n", "n1", "[", "i", "]", ",", "d1", "[", "i", "]", "=", "X", ".", "shape", "\n", "print", "(", "dataset", ")", "\n", "print", "(", "n1", "[", "i", "]", ",", "d1", "[", "i", "]", ")", "\n", "\n", "n1", "[", "i", "]", "*=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "-", "jitter", ",", "jitter", ")", ")", "\n", "d1", "[", "i", "]", "*=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "-", "jitter", ",", "jitter", ")", ")", "\n", "\n", "", "ds", "=", "util", ".", "openml_binary_classification_dataset_names", "(", ")", "\n", "n2", "=", "np", ".", "zeros", "(", "len", "(", "ds", ")", ")", "\n", "d2", "=", "np", ".", "zeros", "(", "len", "(", "ds", ")", ")", "\n", "for", "(", "i", ",", "dataset", ")", "in", "enumerate", "(", "ds", ")", ":", "\n", "        ", "X", ",", "y", "=", "util", ".", "load", "(", "dataset", ")", "\n", "n2", "[", "i", "]", ",", "d2", "[", "i", "]", "=", "X", ".", "shape", "\n", "print", "(", "dataset", ")", "\n", "print", "(", "n2", "[", "i", "]", ",", "d2", "[", "i", "]", ")", "\n", "\n", "n2", "[", "i", "]", "*=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "-", "jitter", ",", "jitter", ")", ")", "\n", "d2", "[", "i", "]", "*=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "-", "jitter", ",", "jitter", ")", ")", "\n", "\n", "", "ds", "=", "util", ".", "atk_dataset_names", "(", ")", "\n", "n3", "=", "np", ".", "zeros", "(", "len", "(", "ds", ")", ")", "\n", "d3", "=", "np", ".", "zeros", "(", "len", "(", "ds", ")", ")", "\n", "for", "(", "i", ",", "dataset", ")", "in", "enumerate", "(", "ds", ")", ":", "\n", "        ", "X", ",", "y", "=", "util", ".", "load", "(", "dataset", ")", "\n", "n3", "[", "i", "]", ",", "d3", "[", "i", "]", "=", "X", ".", "shape", "\n", "print", "(", "dataset", ")", "\n", "print", "(", "n3", "[", "i", "]", ",", "d3", "[", "i", "]", ")", "\n", "\n", "n3", "[", "i", "]", "*=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "-", "jitter", ",", "jitter", ")", ")", "\n", "d3", "[", "i", "]", "*=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "-", "jitter", ",", "jitter", ")", ")", "\n", "\n", "", "xmin", "=", "1", "\n", "xmax", "=", "max", "(", "max", "(", "n1", ")", ",", "max", "(", "n2", ")", ",", "max", "(", "n3", ")", ")", "*", "2", "\n", "ymin", "=", "1", "\n", "ymax", "=", "max", "(", "max", "(", "d1", ")", ",", "max", "(", "d2", ")", ",", "max", "(", "d3", ")", ")", "*", "2", "\n", "\n", "util", ".", "latexify", "(", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "math", ".", "log", "(", "xmax", "/", "xmin", ")", "*", "scale", ",", "math", ".", "log", "(", "ymax", "/", "ymin", ")", "*", "scale", ")", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "\n", "ax", ".", "scatter", "(", "n1", ",", "d1", ",", "s", "=", "3", ")", "\n", "ax", ".", "scatter", "(", "n2", ",", "d2", ",", "s", "=", "3", ")", "\n", "ax", ".", "scatter", "(", "n3", ",", "d3", ",", "s", "=", "3", ")", "\n", "ax", ".", "set_xscale", "(", "\"log\"", ")", "\n", "ax", ".", "set_yscale", "(", "\"log\"", ")", "\n", "\n", "plt", ".", "title", "(", "\"Summary of Datasets\"", ")", "\n", "plt", ".", "axis", "(", "[", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"\\\\# Data Points\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Dimensions\"", ")", "\n", "plt", ".", "legend", "(", "[", "\"PMLB\"", ",", "\"OpenML\"", ",", "\"Fan et al.\"", "]", ",", "loc", "=", "\"best\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "if", "root", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "root", "+", "\".png\"", ")", "\n", "plt", ".", "savefig", "(", "root", "+", "\".pdf\"", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.comparison": [[119, 489], ["print", "util.latexify", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "enumerate", "plt.figure", "plt.plot", "plt.scatter", "plt.title", "plt.axis", "plt.xlabel", "plt.ylabel", "plt.tight_layout", "plt.figure", "plt.plot", "plt.scatter", "plt.title", "plt.axis", "plt.xlabel", "plt.ylabel", "plt.tight_layout", "plt.figure", "plt.hist", "plt.title", "plt.xlabel", "plt.ylabel", "plt.tight_layout", "plt.figure", "plt.scatter", "plt.title", "plt.xlabel", "plt.ylabel", "plt.tight_layout", "eval", "open", "analysis.header", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "file.write", "file.write", "file.write", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "enumerate", "f.write", "f.write", "f.write", "enumerate", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "print", "util.load", "max", "statistics.mean", "statistics.mean", "statistics.mean", "statistics.mean", "statistics.mean", "statistics.mean", "statistics.mean", "statistics.mean", "analysis.comparison.summarize"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.latexify", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.header", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load"], ["", "", "def", "comparison", "(", "root", "=", "\"log/linear1\"", ",", "epsilon", "=", "0.02", ",", "figroot", "=", "None", ",", "degree", "=", "1", ",", "dataset", "=", "\"pmlb_binary\"", ")", ":", "\n", "    ", "\"\"\"\n    Generates figures and tables comparing the methods.\n\n    This creates Figures 3 and 4, along with all tables (the formatting in the tables require\n    some post-processing).\n\n    Args:\n        root (str): location of logs\n        epsilon (float): threshold for difference in accuracy\n        figroot (str): where to save figure\n        degree (int): degree of polynomial used for experiments\n        dataset (str): name of datasets used\n    \"\"\"", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "total", "=", "0", "\n", "\n", "methods", "=", "[", "\"logistic_close\"", ",", "\"logistic_close_decay\"", ",", "\"logistic_atk\"", ",", "\"logistic_average\"", ",", "\"logistic_top\"", ",", "\"hinge_close\"", ",", "\"hinge_close_decay\"", ",", "\"hinge_atk\"", ",", "\"hinge_average\"", ",", "\"hinge_top\"", "]", "\n", "\n", "if", "dataset", "==", "\"atk\"", ":", "\n", "        ", "dataset_names", "=", "eval", "(", "\"util.\"", "+", "dataset", "+", "\"_dataset_names()\"", ")", "\n", "", "elif", "dataset", "==", "\"combined\"", ":", "\n", "        ", "dataset_names", "=", "util", ".", "pmlb_binary_classification_dataset_names", "(", ")", "+", "util", ".", "openml_binary_classification_dataset_names", "(", ")", "\n", "", "else", ":", "\n", "        ", "dataset_names", "=", "eval", "(", "\"util.\"", "+", "dataset", "+", "\"_classification_dataset_names()\"", ")", "\n", "\n", "", "with", "open", "(", "figroot", "+", "\"acc.tex\"", ",", "\"w\"", ")", "as", "file", ":", "# create table of individual accuracies for each dataset/method (Table 3)", "\n", "        ", "header", "(", "file", ",", "methods", ")", "\n", "\n", "c", "=", "np", ".", "zeros", "(", "(", "len", "(", "methods", ")", ",", "len", "(", "methods", ")", ")", ",", "np", ".", "int64", ")", "\n", "cp", "=", "np", ".", "zeros", "(", "(", "len", "(", "methods", ")", ",", "len", "(", "methods", ")", ")", ",", "np", ".", "int64", ")", "\n", "near_best", "=", "np", ".", "zeros", "(", "(", "len", "(", "methods", ")", ")", ",", "np", ".", "int64", ")", "\n", "near_best_own", "=", "np", ".", "zeros", "(", "(", "len", "(", "methods", ")", ")", ",", "np", ".", "int64", ")", "\n", "result", "=", "{", "}", "\n", "full", "=", "{", "}", "\n", "\n", "for", "dataset", "in", "dataset_names", ":", "\n", "            ", "complete", "=", "True", "\n", "\n", "print", "(", "dataset", ")", "\n", "res", "=", "{", "}", "\n", "f", "=", "{", "}", "\n", "\n", "for", "method", "in", "methods", ":", "\n", "                ", "print", "(", "method", ")", "\n", "res", "[", "method", "]", "=", "load_results", "(", "root", "+", "\"/\"", "+", "dataset", "+", "\"/\"", "+", "method", ")", "\n", "if", "res", "[", "method", "]", "==", "[", "]", ":", "\n", "                    ", "complete", "=", "False", "\n", "continue", "\n", "", "assert", "(", "len", "(", "res", "[", "method", "]", ")", "==", "1", ")", "\n", "res", "[", "method", "]", "=", "res", "[", "method", "]", "[", "0", "]", "\n", "f", "[", "method", "]", "=", "[", "x", "for", "x", "in", "res", "[", "method", "]", "[", "\"trial\"", "]", "if", "\"best\"", "in", "x", "]", "\n", "\n", "res", "[", "method", "]", "=", "[", "x", "[", "\"best\"", "]", "for", "x", "in", "res", "[", "method", "]", "[", "\"trial\"", "]", "if", "\"best\"", "in", "x", "]", "\n", "print", "(", "res", "[", "method", "]", ")", "\n", "if", "res", "[", "method", "]", "!=", "[", "]", ":", "\n", "                    ", "print", "(", "statistics", ".", "mean", "(", "res", "[", "method", "]", ")", ")", "\n", "if", "len", "(", "res", "[", "method", "]", ")", ">", "1", ":", "\n", "                        ", "print", "(", "statistics", ".", "stdev", "(", "res", "[", "method", "]", ")", ")", "\n", "", "", "if", "res", "[", "method", "]", "==", "[", "]", ":", "\n", "                    ", "complete", "=", "False", "\n", "\n", "\n", "", "", "if", "complete", ":", "\n", "                ", "total", "+=", "1", "\n", "best", "=", "max", "(", "[", "statistics", ".", "mean", "(", "r", ")", "for", "r", "in", "res", ".", "values", "(", ")", "]", ")", "\n", "best_by_method", "=", "{", "ind_loss", "(", "m", ")", ":", "-", "1", "for", "m", "in", "methods", "}", "\n", "for", "il", "in", "best_by_method", ".", "keys", "(", ")", ":", "\n", "                    ", "best_by_method", "[", "il", "]", "=", "max", "(", "[", "statistics", ".", "mean", "(", "res", "[", "m", "]", ")", "for", "m", "in", "res", "if", "il", "==", "ind_loss", "(", "m", ")", "]", ")", "\n", "", "for", "(", "i", ",", "mi", ")", "in", "enumerate", "(", "methods", ")", ":", "\n", "                    ", "if", "statistics", ".", "mean", "(", "res", "[", "mi", "]", ")", "+", "epsilon", ">=", "best", ":", "\n", "                        ", "near_best", "[", "i", "]", "+=", "1", "\n", "", "if", "statistics", ".", "mean", "(", "res", "[", "mi", "]", ")", "+", "epsilon", ">=", "best_by_method", "[", "ind_loss", "(", "mi", ")", "]", ":", "\n", "                        ", "near_best_own", "[", "i", "]", "+=", "1", "\n", "", "", "file", ".", "write", "(", "dataset", ")", "\n", "for", "(", "i", ",", "mi", ")", "in", "enumerate", "(", "methods", ")", ":", "\n", "                    ", "file", ".", "write", "(", "\" & {:.2f}\"", ".", "format", "(", "100", "-", "100", "*", "statistics", ".", "mean", "(", "res", "[", "mi", "]", ")", ")", ")", "\n", "", "file", ".", "write", "(", "\" \\\\\\\\\\n\"", ")", "\n", "for", "(", "i", ",", "mi", ")", "in", "enumerate", "(", "methods", ")", ":", "\n", "                    ", "print", "(", "mi", ")", "\n", "for", "(", "j", ",", "mj", ")", "in", "enumerate", "(", "methods", ")", ":", "\n", "                        ", "if", "statistics", ".", "mean", "(", "res", "[", "mi", "]", ")", "-", "epsilon", ">=", "statistics", ".", "mean", "(", "res", "[", "mj", "]", ")", ":", "\n", "                            ", "c", "[", "i", "]", "[", "j", "]", "+=", "1", "\n", "", "ttest", "=", "scipy", ".", "stats", ".", "ttest_ind", "(", "res", "[", "mi", "]", ",", "res", "[", "mj", "]", ")", "\n", "if", "ttest", ".", "statistic", ">", "0", "and", "ttest", ".", "pvalue", "<", "0.05", ":", "\n", "                            ", "cp", "[", "i", "]", "[", "j", "]", "+=", "1", "\n", "\n", "", "", "", "if", "len", "(", "res", "[", "\"logistic_average\"", "]", ")", ">=", "1", "and", "len", "(", "res", "[", "\"logistic_close_decay\"", "]", ")", ">=", "1", ":", "\n", "                    ", "result", "[", "dataset", "]", "=", "res", "\n", "full", "[", "dataset", "]", "=", "f", "\n", "", "if", "len", "(", "result", ")", "==", "1", ":", "\n", "                    ", "pass", "\n", "# break", "\n", "\n", "", "", "print", "(", "c", "/", "total", ")", "\n", "print", "(", "cp", "/", "total", ")", "\n", "\n", "print", "(", ")", "\n", "", "file", ".", "write", "(", "\"\\\\bottomrule\\n\"", ")", "\n", "file", ".", "write", "(", "\"\\\\end{tabular}\\n\"", ")", "\n", "file", ".", "write", "(", "\"\\\\end{center}\\n\"", ")", "\n", "\n", "", "print", "(", "total", ")", "\n", "cepsilon", "=", "c", "/", "total", "\n", "cp", "=", "cp", "/", "total", "\n", "for", "(", "c", ",", "filename", ")", "in", "[", "(", "cepsilon", ",", "\"comparision.tex\"", ")", ",", "(", "cp", ",", "\"comparisonp.tex\"", ")", "]", ":", "\n", "# Create table with pairwise improvement (either by p-value or raw increase in accuracy)", "\n", "# (Tables 1, 2, 4, and 5)", "\n", "        ", "with", "open", "(", "figroot", "+", "filename", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "header", "(", "f", ",", "methods", ")", "\n", "\n", "m", "=", "max", "(", "[", "len", "(", "m", ")", "for", "m", "in", "methods", "]", ")", "\n", "prev", "=", "None", "\n", "for", "(", "i", ",", "mi", ")", "in", "enumerate", "(", "methods", ")", ":", "\n", "                ", "ind", "=", "ind_loss", "(", "mi", ")", "\n", "if", "prev", "is", "not", "None", "and", "ind", "!=", "prev", ":", "\n", "                    ", "f", ".", "write", "(", "\"\\\\midrule\\n\"", ")", "\n", "", "if", "prev", "is", "None", "or", "ind", "!=", "prev", ":", "\n", "                    ", "f", ".", "write", "(", "\"\\\\multirow{?}{*}{Model}\\n\"", ")", "\n", "", "prev", "=", "ind", "\n", "\n", "f", ".", "write", "(", "(", "\"& {:<\"", "+", "str", "(", "m", ")", "+", "\"}\"", ")", ".", "format", "(", "mi", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", ")", ")", "\n", "for", "(", "j", ",", "mj", ")", "in", "enumerate", "(", "methods", ")", ":", "\n", "                    ", "if", "i", "==", "j", ":", "\n", "                        ", "f", ".", "write", "(", "\" &     \"", ")", "\n", "", "else", ":", "\n", "                        ", "f", ".", "write", "(", "\" & {:.2f}\"", ".", "format", "(", "c", "[", "j", "]", "[", "i", "]", ")", ")", "\n", "", "", "f", ".", "write", "(", "\" \\\\\\\\\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"\\\\bottomrule\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\end{tabular}\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\end{center}\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "figroot", "+", "\"near.tex\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "near_best", "=", "near_best", "/", "total", "\n", "near_best_own", "=", "near_best_own", "/", "total", "\n", "f", ".", "write", "(", "\"\\\\begin{center}\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\begin{tabular}{lcc}\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\toprule\\n\"", ")", "\n", "f", ".", "write", "(", "\"& \\\\multicolumn{2}{c}{Compared against} \\\\\\\\\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\cmidrule(lr){2-3}\\n\"", ")", "\n", "f", ".", "write", "(", "\"Method & All  & Own \\\\\\\\\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\midrule\\n\"", ")", "\n", "for", "(", "i", ",", "mi", ")", "in", "enumerate", "(", "methods", ")", ":", "\n", "            ", "f", ".", "write", "(", "(", "\"{:<\"", "+", "str", "(", "m", ")", "+", "\"} & {:.2f} & {:.2f}\\\\\\\\\\n\"", ")", ".", "format", "(", "mi", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", ",", "near_best", "[", "i", "]", ",", "near_best_own", "[", "i", "]", ")", ")", "\n", "", "f", ".", "write", "(", "\"\\\\bottomrule\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\end{tabular}\"", ")", "\n", "f", ".", "write", "(", "\"\\\\end{center}\\n\"", ")", "\n", "\n", "", "util", ".", "latexify", "(", ")", "\n", "\n", "def", "extract", "(", "trials", ")", ":", "\n", "        ", "\"\"\"\n        Returns the best results (by validation score) from a list of trials.\n        \n        Each trial runs a sweep over hyperparemters.\n        \"\"\"", "\n", "temp", "=", "[", "]", "\n", "for", "trial", "in", "trials", ":", "\n", "            ", "best", "=", "None", "\n", "for", "hp", "in", "trial", ":", "\n", "                ", "if", "hp", "==", "\"best\"", ":", "\n", "                    ", "continue", "\n", "", "res", "=", "trial", "[", "hp", "]", "\n", "if", "best", "is", "None", "or", "(", "(", "res", "[", "\"valid\"", "]", ">=", "best", "[", "\"valid\"", "]", ")", "if", "(", "\"valid\"", "in", "res", ")", "else", "(", "res", "[", "\"train\"", "]", ">=", "best", "[", "\"train\"", "]", ")", ")", ":", "\n", "                    ", "best", "=", "res", "\n", "", "", "temp", ".", "append", "(", "best", ")", "\n", "", "return", "temp", "\n", "\n", "", "def", "summarize", "(", "logfile", ",", "trials", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Extracts statistics about the performance of a method.\n\n        Most of these statistics were not actually used in the paper (only for preliminary\n        analysis).\n        \"\"\"", "\n", "potential", "=", "[", "]", "\n", "minority", "=", "[", "]", "\n", "majority", "=", "[", "]", "\n", "hyperparams", "=", "[", "]", "\n", "for", "(", "i", ",", "trial", ")", "in", "enumerate", "(", "trials", ")", ":", "\n", "            ", "best", "=", "None", "\n", "for", "hp", "in", "trial", ":", "\n", "                ", "if", "hp", "==", "\"best\"", ":", "\n", "                    ", "continue", "\n", "", "res", "=", "trial", "[", "hp", "]", "\n", "if", "best", "is", "None", "or", "(", "(", "res", "[", "\"valid\"", "]", ">=", "best", "[", "\"valid\"", "]", ")", "if", "(", "\"valid\"", "in", "res", ")", "else", "(", "res", "[", "\"train\"", "]", ">=", "best", "[", "\"train\"", "]", ")", ")", ":", "\n", "                    ", "best", "=", "res", "\n", "best_hp", "=", "hp", "\n", "# print(best)", "\n", "", "", "model", "=", "load_model", "(", "logfile", ",", "i", ",", "best_hp", ")", "\n", "hyperparams", ".", "append", "(", "best_hp", ")", "\n", "\n", "random", ".", "seed", "(", "i", ")", "\n", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "torch", ".", "manual_seed", "(", "i", ")", "\n", "\n", "Xtrain", ",", "ytrain", ",", "Xvalid", ",", "yvalid", ",", "Xtest", ",", "ytest", "=", "util", ".", "split", "(", "X", ",", "y", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "model", "(", "torch", ".", "Tensor", "(", "Xtest", ")", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "perm", "=", "np", ".", "argsort", "(", "pred", ")", "\n", "pred", "=", "pred", "[", "perm", "]", "\n", "ytest", "=", "ytest", "[", "perm", "]", "\n", "\n", "n", "=", "ytest", ".", "shape", "[", "0", "]", "\n", "correct", "=", "(", "(", "pred", ">", "0", ")", "==", "ytest", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "test", "=", "statistics", ".", "mean", "(", "correct", ")", "\n", "possible", "=", "(", "sum", "(", "ytest", ")", "+", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "cumsum", "(", "1", "-", "2", "*", "ytest", ")", ")", ")", ")", "/", "n", "\n", "ind", "=", "np", ".", "argmax", "(", "possible", ")", "\n", "\n", "thresh", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "[", "-", "np", ".", "inf", "]", ")", ",", "pred", ",", "np", ".", "array", "(", "[", "np", ".", "inf", "]", ")", ")", ")", "\n", "cutoff", "=", "(", "thresh", "[", "ind", "]", "+", "thresh", "[", "ind", "+", "1", "]", ")", "/", "2", "\n", "\n", "minority", ".", "append", "(", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "pred", ">", "0", ",", "ytest", ")", ")", "/", "np", ".", "sum", "(", "ytest", ")", ")", "\n", "majority", ".", "append", "(", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "pred", "<=", "0", ",", "1", "-", "ytest", ")", ")", "/", "np", ".", "sum", "(", "1", "-", "ytest", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "model", "(", "torch", ".", "Tensor", "(", "Xtest", ")", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "", "correct", "=", "(", "(", "pred", ">", "0", ")", "==", "ytest", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "test_acc", "=", "statistics", ".", "mean", "(", "correct", ")", "\n", "\n", "correct", "=", "(", "(", "pred", ">", "cutoff", ")", "==", "ytest", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "best", "=", "statistics", ".", "mean", "(", "correct", ")", "\n", "n", "=", "ytest", ".", "shape", "[", "0", "]", "\n", "\n", "best", "=", "max", "(", "(", "sum", "(", "ytest", ")", "+", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "cumsum", "(", "1", "-", "2", "*", "ytest", ")", ")", ")", ")", "/", "n", ")", "\n", "\n", "potential", ".", "append", "(", "(", "best", "-", "test_acc", ")", "/", "n", ")", "\n", "", "return", "potential", ",", "minority", ",", "majority", ",", "hyperparams", "\n", "\n", "", "test_average", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_average_hinge", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_atk", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_close", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_close_hinge", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_average_std", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_atk_std", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_close_std", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "train_average", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "train_atk", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "train_close", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "train_average_std", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "train_atk_std", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "train_close_std", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "examples", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "dimensions", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "imbalance", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "potential", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "\n", "test_average_minority", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_atk_minority", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_close_minority", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_average_majority", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_atk_majority", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "test_close_majority", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "\n", "selected_k", "=", "np", ".", "empty", "(", "len", "(", "full", ")", ")", "\n", "\n", "improvement_on", "=", "{", "}", "\n", "for", "(", "i", ",", "ds", ")", "in", "enumerate", "(", "full", ")", ":", "\n", "# Accumulate information about each method over all datasets", "\n", "        ", "print", "(", "ds", ")", "\n", "X", ",", "y", "=", "util", ".", "load", "(", "ds", ")", "\n", "n", ",", "d", "=", "X", ".", "shape", "\n", "\n", "X", "=", "X", "-", "np", ".", "mean", "(", "X", ",", "0", ")", "\n", "X", "=", "X", "/", "np", ".", "maximum", "(", "np", ".", "std", "(", "X", ",", "0", ")", ",", "1e-5", ")", "\n", "\n", "X", "=", "util", ".", "PolynomialFeature", "(", "degree", ")", "(", "torch", ".", "Tensor", "(", "X", ")", ")", ".", "numpy", "(", ")", "\n", "examples", "[", "i", "]", ",", "dimensions", "[", "i", "]", "=", "X", ".", "shape", "\n", "larger", "=", "max", "(", "sum", "(", "y", "==", "0", ")", ",", "sum", "(", "y", "==", "1", ")", ")", "\n", "smaller", "=", "examples", "[", "i", "]", "-", "larger", "\n", "imbalance", "[", "i", "]", "=", "larger", "/", "smaller", "\n", "\n", "test_average", "[", "i", "]", "=", "statistics", ".", "mean", "(", "map", "(", "lambda", "t", ":", "t", "[", "\"best\"", "]", ",", "full", "[", "ds", "]", "[", "\"logistic_average\"", "]", ")", ")", "\n", "test_average_hinge", "[", "i", "]", "=", "statistics", ".", "mean", "(", "map", "(", "lambda", "t", ":", "t", "[", "\"best\"", "]", ",", "full", "[", "ds", "]", "[", "\"hinge_average\"", "]", ")", ")", "\n", "test_atk", "[", "i", "]", "=", "statistics", ".", "mean", "(", "map", "(", "lambda", "t", ":", "t", "[", "\"best\"", "]", ",", "full", "[", "ds", "]", "[", "\"logistic_atk\"", "]", ")", ")", "\n", "test_close", "[", "i", "]", "=", "statistics", ".", "mean", "(", "map", "(", "lambda", "t", ":", "t", "[", "\"best\"", "]", ",", "full", "[", "ds", "]", "[", "\"logistic_close_decay\"", "]", ")", ")", "\n", "test_close_hinge", "[", "i", "]", "=", "statistics", ".", "mean", "(", "map", "(", "lambda", "t", ":", "t", "[", "\"best\"", "]", ",", "full", "[", "ds", "]", "[", "\"hinge_close_decay\"", "]", ")", ")", "\n", "try", ":", "\n", "            ", "test_average_std", "[", "i", "]", "=", "statistics", ".", "stdev", "(", "map", "(", "lambda", "t", ":", "t", "[", "\"best\"", "]", ",", "full", "[", "ds", "]", "[", "\"logistic_average\"", "]", ")", ")", "\n", "test_atk_std", "[", "i", "]", "=", "statistics", ".", "stdev", "(", "map", "(", "lambda", "t", ":", "t", "[", "\"best\"", "]", ",", "full", "[", "ds", "]", "[", "\"logistic_atk\"", "]", ")", ")", "\n", "test_close_std", "[", "i", "]", "=", "statistics", ".", "stdev", "(", "map", "(", "lambda", "t", ":", "t", "[", "\"best\"", "]", ",", "full", "[", "ds", "]", "[", "\"logistic_close_decay\"", "]", ")", ")", "\n", "", "except", "statistics", ".", "StatisticsError", ":", "\n", "            ", "pass", "\n", "\n", "", "improvement_on", "[", "ds", "]", "=", "test_close", "[", "i", "]", "-", "test_average", "[", "i", "]", "\n", "\n", "train_average", "[", "i", "]", "=", "statistics", ".", "mean", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"train\"", "]", ",", "extract", "(", "full", "[", "ds", "]", "[", "\"logistic_average\"", "]", ")", ")", ")", "\n", "train_atk", "[", "i", "]", "=", "statistics", ".", "mean", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"train\"", "]", ",", "extract", "(", "full", "[", "ds", "]", "[", "\"logistic_atk\"", "]", ")", ")", ")", "\n", "train_close", "[", "i", "]", "=", "statistics", ".", "mean", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"train\"", "]", ",", "extract", "(", "full", "[", "ds", "]", "[", "\"logistic_close_decay\"", "]", ")", ")", ")", "\n", "try", ":", "\n", "            ", "train_average_std", "[", "i", "]", "=", "statistics", ".", "stdev", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"train\"", "]", ",", "extract", "(", "full", "[", "ds", "]", "[", "\"logistic_average\"", "]", ")", ")", ")", "\n", "train_atk_std", "[", "i", "]", "=", "statistics", ".", "stdev", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"train\"", "]", ",", "extract", "(", "full", "[", "ds", "]", "[", "\"logistic_atk\"", "]", ")", ")", ")", "\n", "train_close_std", "[", "i", "]", "=", "statistics", ".", "stdev", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"train\"", "]", ",", "extract", "(", "full", "[", "ds", "]", "[", "\"logistic_close_decay\"", "]", ")", ")", ")", "\n", "", "except", "statistics", ".", "StatisticsError", ":", "\n", "            ", "pass", "\n", "\n", "", "average_summary", "=", "summarize", "(", "root", "+", "\"/\"", "+", "ds", "+", "\"/logistic_average\"", ",", "full", "[", "ds", "]", "[", "\"logistic_average\"", "]", ",", "X", ",", "y", ")", "\n", "atk_summary", "=", "summarize", "(", "root", "+", "\"/\"", "+", "ds", "+", "\"/logistic_atk\"", ",", "full", "[", "ds", "]", "[", "\"logistic_atk\"", "]", ",", "X", ",", "y", ")", "\n", "close_summary", "=", "summarize", "(", "root", "+", "\"/\"", "+", "ds", "+", "\"/logistic_close\"", ",", "full", "[", "ds", "]", "[", "\"logistic_close\"", "]", ",", "X", ",", "y", ")", "\n", "\n", "potential", "[", "i", "]", "=", "statistics", ".", "mean", "(", "average_summary", "[", "0", "]", ")", "\n", "\n", "test_average_minority", "[", "i", "]", "=", "statistics", ".", "mean", "(", "average_summary", "[", "1", "]", ")", "\n", "test_atk_minority", "[", "i", "]", "=", "statistics", ".", "mean", "(", "atk_summary", "[", "1", "]", ")", "\n", "test_close_minority", "[", "i", "]", "=", "statistics", ".", "mean", "(", "close_summary", "[", "1", "]", ")", "\n", "\n", "test_average_majority", "[", "i", "]", "=", "statistics", ".", "mean", "(", "average_summary", "[", "2", "]", ")", "\n", "test_atk_majority", "[", "i", "]", "=", "statistics", ".", "mean", "(", "atk_summary", "[", "2", "]", ")", "\n", "test_close_majority", "[", "i", "]", "=", "statistics", ".", "mean", "(", "close_summary", "[", "2", "]", ")", "\n", "\n", "selected_k", "[", "i", "]", "=", "statistics", ".", "mean", "(", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "close_summary", "[", "3", "]", ")", ")", ")", "/", "n", "\n", "\n", "", "improvement_on", "=", "[", "(", "ds", ",", "improvement_on", "[", "ds", "]", ")", "for", "ds", "in", "sorted", "(", "improvement_on", ",", "key", "=", "improvement_on", ".", "get", ",", "reverse", "=", "True", ")", "]", "\n", "\n", "# Figure 3a", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "1.7", ",", "1.7", ")", ")", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "color", "=", "\"black\"", ",", "linewidth", "=", "1", ")", "\n", "plt", ".", "scatter", "(", "test_average", ",", "test_close", ",", "s", "=", "1", ")", "\n", "plt", ".", "title", "(", "\"\"", ")", "\n", "plt", ".", "axis", "(", "[", "0.5", ",", "1", ",", "0.5", ",", "1", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"Accuracy of Average\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Accuracy of Algorithm 1\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "figroot", "is", "None", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "savefig", "(", "figroot", "+", "\"logistic_improvement.pdf\"", ")", "\n", "\n", "# Figure 3b", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "1.7", ",", "1.7", ")", ")", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "color", "=", "\"black\"", ",", "linewidth", "=", "1", ")", "\n", "plt", ".", "scatter", "(", "test_average_hinge", ",", "test_close_hinge", ",", "s", "=", "1", ")", "\n", "plt", ".", "title", "(", "\"\"", ")", "\n", "plt", ".", "axis", "(", "[", "0.5", ",", "1", ",", "0.5", ",", "1", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"Accuracy of Average\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Accuracy of Algorithm 1\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "figroot", "is", "None", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "savefig", "(", "figroot", "+", "\"hinge_improvement.pdf\"", ")", "\n", "\n", "\n", "# Figure 4a", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "1.7", ",", "1.7", ")", ")", "\n", "plt", ".", "hist", "(", "selected_k", ",", "bins", "=", "20", ")", "\n", "plt", ".", "title", "(", "\"\"", ")", "\n", "plt", ".", "xlabel", "(", "\"$k^*/n$\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Fraction of Datasets\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "figroot", "is", "None", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "savefig", "(", "figroot", "+", "\"selected_k.pdf\"", ")", "\n", "\n", "# Figure 4b", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "1.7", ",", "1.7", ")", ")", "\n", "plt", ".", "scatter", "(", "selected_k", ",", "test_close", "-", "test_average", ",", "s", "=", "1", ")", "\n", "plt", ".", "title", "(", "\"\"", ")", "\n", "plt", ".", "xlabel", "(", "\"$k^*/n$\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Improvement\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "figroot", "is", "None", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "savefig", "(", "figroot", "+", "\"improvement_vs_k.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.simulation": [[491, 566], ["util.latexify", "plt.figure", "plt.gca", "root.split", "util.load", "sum", "sum", "plt.gca.plot", "h.append", "plt.title", "plt.axis", "plt.xlabel", "plt.ylabel", "plt.tight_layout", "plt.gca.legend", "plt.axis", "plt.axis", "print", "plt.gca.plot", "h.append", "plt.show", "plt.savefig", "plt.savefig", "analysis.load_results", "a.append", "print", "max", "range", "max", "statistics.mean", "len", "os.path.dirname", "str", "ValueError"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.latexify", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.split", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.load_results"], ["", "", "def", "simulation", "(", "root", ",", "xlabel", ",", "params", ",", "figroot", "=", "None", ",", "ymin", "=", "0.5", ",", "ymax", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Creates figures for the simulations (Figure 5).\n\n\n    Args:\n        root (str): location of logs\n        params (list of int): parameters to plot\n        figroot (str): where to save figure\n        ymin (flat): lower limit for y-axis\n        ymax (flat): upper limit for y-axis\n    \"\"\"", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "method", "=", "[", "\"close\"", ",", "\"atk\"", ",", "\"average\"", ",", "\"top\"", "]", "\n", "\n", "util", ".", "latexify", "(", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "1.8", ",", "1.8", ")", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "\n", "h", "=", "[", "]", "\n", "for", "m", "in", "method", ":", "\n", "        ", "a", "=", "[", "]", "\n", "print", "(", "m", ")", "\n", "for", "o", "in", "params", ":", "\n", "            ", "res", "=", "load_results", "(", "root", "+", "\"/\"", "+", "m", "+", "\"_\"", "+", "str", "(", "o", ")", ")", "\n", "a", ".", "append", "(", "statistics", ".", "mean", "(", "[", "x", "[", "\"best\"", "]", "for", "x", "in", "res", "[", "0", "]", "[", "\"trial\"", "]", "if", "\"best\"", "in", "x", "]", ")", ")", "\n", "print", "(", "a", ")", "\n", "", "if", "m", "==", "\"close_decay\"", ":", "\n", "            ", "m", "=", "\"decay\"", "\n", "", "l", ",", "=", "ax", ".", "plot", "(", "params", ",", "a", ",", "linewidth", "=", "1", ",", "label", "=", "m", ")", "\n", "h", ".", "append", "(", "l", ")", "\n", "\n", "", "temp", "=", "root", ".", "split", "(", "\"/\"", ")", "\n", "dataset", "=", "temp", "[", "1", "]", "\n", "mode", "=", "temp", "[", "2", "]", "\n", "X", ",", "y", "=", "util", ".", "load", "(", "dataset", ")", "\n", "n0", "=", "sum", "(", "y", "==", "0", ")", "\n", "n1", "=", "sum", "(", "y", "==", "1", ")", "\n", "if", "mode", "==", "\"outliers\"", ":", "\n", "        ", "n0", "=", "[", "n0", "for", "_", "in", "params", "]", "\n", "n1", "=", "[", "n1", "for", "_", "in", "params", "]", "\n", "", "elif", "mode", "==", "\"dup0\"", ":", "\n", "        ", "n0", "=", "[", "n0", "+", "p", "for", "p", "in", "params", "]", "\n", "n1", "=", "[", "n1", "for", "p", "in", "params", "]", "\n", "", "elif", "mode", "==", "\"dup1\"", ":", "\n", "        ", "n0", "=", "[", "n0", "for", "p", "in", "params", "]", "\n", "n1", "=", "[", "n1", "+", "p", "for", "p", "in", "params", "]", "\n", "", "elif", "mode", "==", "\"hard0\"", ":", "\n", "        ", "n0", "=", "[", "n0", "for", "p", "in", "params", "]", "\n", "n1", "=", "[", "n1", "+", "p", "for", "p", "in", "params", "]", "\n", "", "elif", "mode", "==", "\"hard1\"", ":", "\n", "        ", "n0", "=", "[", "n0", "+", "p", "for", "p", "in", "params", "]", "\n", "n1", "=", "[", "n1", "for", "p", "in", "params", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "a", "=", "[", "max", "(", "n0", "[", "i", "]", ",", "n1", "[", "i", "]", ")", "/", "(", "n0", "[", "i", "]", "+", "n1", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "params", ")", ")", "]", "\n", "l", ",", "=", "ax", ".", "plot", "(", "params", ",", "a", ",", "linewidth", "=", "1", ",", "color", "=", "\"black\"", ",", "linestyle", "=", "\"--\"", ",", "label", "=", "\"majority\"", ")", "\n", "h", ".", "append", "(", "l", ")", "\n", "\n", "plt", ".", "title", "(", "\"\"", ")", "\n", "plt", ".", "axis", "(", "[", "0", ",", "max", "(", "params", ")", ",", "ymin", ",", "ymax", "]", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "plt", ".", "ylabel", "(", "\"Accuracy\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "figroot", "is", "None", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "savefig", "(", "figroot", "+", "\".pdf\"", ")", "\n", "\n", "", "ax", ".", "legend", "(", "loc", "=", "\"center left\"", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "axis", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "if", "figroot", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "dirname", "(", "figroot", ")", "+", "\"/legend.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.ind_loss": [[568, 584], ["None"], "function", ["None"], ["", "", "def", "ind_loss", "(", "method", ")", ":", "\n", "    ", "\"\"\"\n    Extract individual loss from full name of method.\n\n    Args:\n        method (str): full name of method\n\n    Returns:\n        str: individual loss\n    \"\"\"", "\n", "if", "method", "[", ":", "6", "]", "==", "\"hinge_\"", ":", "\n", "        ", "return", "\"Hinge\"", "\n", "", "if", "method", "[", ":", "9", "]", "==", "\"logistic_\"", ":", "\n", "        ", "return", "\"Logistic\"", "\n", "", "if", "method", "[", ":", "7", "]", "==", "\"sklearn\"", ":", "\n", "        ", "return", "\"sklearn\"", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.agg_loss": [[586, 602], ["None"], "function", ["None"], ["", "", "def", "agg_loss", "(", "method", ")", ":", "\n", "    ", "\"\"\"\n    Extract aggregate loss from full name of method.\n\n    Args:\n        method (str): full name of method\n\n    Returns:\n        str: aggregate loss\n    \"\"\"", "\n", "if", "method", "[", ":", "6", "]", "==", "\"hinge_\"", ":", "\n", "        ", "return", "method", "[", "6", ":", "]", "\n", "", "if", "method", "[", ":", "9", "]", "==", "\"logistic_\"", ":", "\n", "        ", "return", "method", "[", "9", ":", "]", "\n", "", "if", "method", "[", ":", "7", "]", "==", "\"sklearn\"", ":", "\n", "        ", "return", "method", "[", "7", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.header": [[604, 651], ["f.write", "f.write", "f.write", "f.write", "enumerate", "f.write", "print", "range", "f.write", "enumerate", "f.write", "f.write", "len", "f.write", "analysis.agg_loss", "f.write", "analysis.ind_loss", "f.write", "count.append", "ind_loss.replace", "len", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.agg_loss", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.ind_loss"], ["", "", "def", "header", "(", "f", ",", "methods", ")", ":", "\n", "    ", "\"\"\"\n    Write header for LaTex tables in paper.\n\n    Some manual manipulation was done for final version.\n\n    Args:\n        f (file): file to write header to\n        methods (list of str): list of full method names\n\n    Returns:\n        str: aggregate loss\n    \"\"\"", "\n", "f", ".", "write", "(", "\"\\\\begin{center}\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\begin{tabular}{ll\"", "+", "len", "(", "methods", ")", "*", "\"r\"", "+", "\"}\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\toprule\\n\"", ")", "\n", "f", ".", "write", "(", "\" & \"", ")", "\n", "prev", "=", "None", "\n", "count", "=", "[", "1", "]", "\n", "for", "(", "j", ",", "mj", ")", "in", "enumerate", "(", "methods", "+", "[", "None", "]", ")", ":", "\n", "        ", "if", "mj", "is", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "mj", "=", "ind_loss", "(", "mj", ")", "\n", "\n", "", "if", "mj", "!=", "prev", ":", "\n", "            ", "if", "prev", "is", "not", "None", ":", "\n", "                ", "f", ".", "write", "(", "\" & \\\\multicolumn{\"", "+", "str", "(", "count", "[", "-", "1", "]", ")", "+", "\"}{c}{\"", "+", "prev", "+", "\"}\"", ")", "\n", "", "prev", "=", "mj", "\n", "if", "mj", "is", "not", "None", ":", "\n", "                ", "count", ".", "append", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "count", "[", "-", "1", "]", "+=", "1", "\n", "", "prev", "=", "mj", "\n", "", "f", ".", "write", "(", "\" \\\\\\\\\\n\"", ")", "\n", "\n", "print", "(", "count", ")", "\n", "start", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "count", ")", ")", ":", "\n", "        ", "start", "+=", "count", "[", "i", "-", "1", "]", "\n", "f", ".", "write", "(", "\"\\\\cmidrule(lr){\"", "+", "str", "(", "start", "+", "1", ")", "+", "\"-\"", "+", "str", "(", "start", "+", "count", "[", "i", "]", ")", "+", "\"}\"", ")", "\n", "", "f", ".", "write", "(", "\" \\n\"", ")", "\n", "for", "(", "j", ",", "mj", ")", "in", "enumerate", "(", "methods", ")", ":", "\n", "        ", "mj", "=", "agg_loss", "(", "mj", ")", "\n", "f", ".", "write", "(", "\" & \"", "+", "mj", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", ")", "\n", "", "f", ".", "write", "(", "\" \\\\\\\\\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\\\midrule\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.load_results": [[653, 704], ["os.path.isfile", "os.path.isfile", "os.path.isfile", "open", "pickle.load", "open", "open", "pickle.dump", "os.path.isfile", "os.path.getctime", "os.path.getctime", "pickle.load.append", "int", "[].append", "float", "len", "len", "l.find", "eval", "eval"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load"], ["", "def", "load_results", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Returns dictionary of parsed results from log file.\n\n    Args:\n        filename (string): name of log file\n\n    Returns:\n        dict: parsed results\n    \"\"\"", "\n", "picklename", "=", "filename", "+", "\".pkl\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", "and", "not", "os", ".", "path", ".", "isfile", "(", "picklename", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "picklename", ")", "and", "(", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", "or", "os", ".", "path", ".", "getctime", "(", "filename", ")", "<", "os", ".", "path", ".", "getctime", "(", "picklename", ")", ")", ":", "\n", "        ", "with", "open", "(", "picklename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "result", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "result", "=", "[", "]", "\n", "f", "=", "[", "l", "[", "26", ":", "]", "for", "l", "in", "f", "if", "l", "[", ":", "4", "]", "==", "\"INFO\"", "or", "\"Namespace\"", "in", "l", "]", "\n", "for", "l", "in", "f", ":", "\n", "                ", "if", "\"Namespace\"", "in", "l", ":", "\n", "                    ", "pass", "\n", "", "elif", "l", "[", ":", "6", "]", "==", "\"Mode: \"", ":", "\n", "                    ", "if", "not", "result", ":", "\n", "                        ", "result", ".", "append", "(", "{", "}", ")", "\n", "result", "[", "-", "1", "]", "[", "\"mode\"", "]", "=", "l", "[", "6", ":", "-", "1", "]", "\n", "result", "[", "-", "1", "]", "[", "\"trial\"", "]", "=", "[", "]", "\n", "", "", "elif", "l", "[", ":", "7", "]", "==", "\"Trial #\"", ":", "\n", "                    ", "trial", "=", "int", "(", "l", "[", "7", ":", "-", "2", "]", ")", "\n", "if", "len", "(", "result", "[", "-", "1", "]", "[", "\"trial\"", "]", ")", "+", "1", "==", "trial", ":", "\n", "                        ", "result", "[", "-", "1", "]", "[", "\"trial\"", "]", ".", "append", "(", "{", "}", ")", "\n", "", "elif", "len", "(", "result", "[", "-", "1", "]", "[", "\"trial\"", "]", ")", "==", "trial", ":", "\n", "                        ", "result", "[", "-", "1", "]", "[", "\"trial\"", "]", "[", "trial", "-", "1", "]", "=", "{", "}", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "", "", "elif", "l", "[", ":", "14", "]", "==", "\"    Accuracy: \"", ":", "\n", "                    ", "result", "[", "-", "1", "]", "[", "\"trial\"", "]", "[", "trial", "-", "1", "]", "[", "\"best\"", "]", "=", "float", "(", "l", "[", "14", ":", "]", ")", "\n", "", "elif", "l", "[", ":", "22", "]", "==", "\"    Average Accuracy: \"", ":", "\n", "                    ", "pass", "\n", "", "elif", "l", "[", ":", "19", "]", "==", "\"    Average Error: \"", ":", "\n", "                    ", "pass", "\n", "", "elif", "l", "[", ":", "28", "]", "==", "\"Early termination at epoch #\"", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "i", "=", "l", ".", "find", "(", "\":\"", ")", "\n", "result", "[", "-", "1", "]", "[", "\"trial\"", "]", "[", "trial", "-", "1", "]", "[", "eval", "(", "l", "[", ":", "i", "]", ")", "]", "=", "eval", "(", "l", "[", "i", "+", "1", ":", "]", ")", "\n", "", "", "", "with", "open", "(", "picklename", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "result", ",", "f", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.analysis.load_model": [[706, 712], ["open", "pickle.load", "list", "str", "map"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load"], ["", "def", "load_model", "(", "logfile", ",", "trial", ",", "hp", ")", ":", "\n", "    ", "\"\"\"\n    Returns the torch.nn.Module from a specific trial and hyperparameter choice.\n    \"\"\"", "\n", "with", "open", "(", "logfile", "+", "\"_checkpoints/\"", "+", "\"_\"", ".", "join", "(", "[", "str", "(", "trial", ")", "]", "+", "list", "(", "map", "(", "str", ",", "hp", ")", ")", ")", "+", "\".pkl\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.MultilineFormatter.format": [[49, 55], ["logging.Formatter.format", "logging.Formatter.format", "logging.Formatter.format", "logging.Formatter.format", "string.replace.replace.split", "string.replace.replace.replace", "len"], "methods", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.MultilineFormatter.format", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.MultilineFormatter.format", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.MultilineFormatter.format", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.MultilineFormatter.format", "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.split"], ["def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"Converts a record to properly formatted string.\"\"\"", "\n", "string", "=", "logging", ".", "Formatter", ".", "format", "(", "self", ",", "record", ")", "\n", "header", ",", "_", "=", "string", ".", "split", "(", "record", ".", "message", ")", "\n", "string", "=", "string", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "header", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.PolynomialFeature.__init__": [[429, 432], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.HingeLoss.__init__"], ["def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "super", "(", "PolynomialFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.PolynomialFeature.forward": [[433, 435], ["torch.cat", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "x", "**", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "self", ".", "degree", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.HingeLoss.__init__": [[439, 441], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.HingeLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "HingeLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.HingeLoss.forward": [[442, 444], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "(", "1", "-", "pred", "*", "target", ")", ".", "clamp", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.loglevel": [[20, 41], ["getattr", "level.upper", "isinstance", "ValueError"], "function", ["None"], ["def", "loglevel", "(", "level", ")", ":", "\n", "    ", "\"\"\"\n    Converts a string representing the logging level to corresponding number.\n\n    This is primarily used as the type of an argument in argparse. See\n    https://docs.python.org/3/library/logging.html#logging-levels for a list\n    of logging levels.\n\n    Args:\n        level (str): logging level\n\n    Returns:\n        int: Numeric logging level\n\n    Raises:\n        ValueError: If `level` is not a recognized logging level.\n    \"\"\"", "\n", "numeric_level", "=", "getattr", "(", "logging", ",", "level", ".", "upper", "(", ")", ",", "None", ")", "\n", "if", "not", "isinstance", "(", "numeric_level", ",", "int", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid log level: %s'", "%", "loglevel", ")", "\n", "", "return", "numeric_level", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.pmlb_binary_classification_dataset_names": [[57, 71], ["pickle.load", "open", "pathlib.Path().mkdir", "pickle.dump", "pmlb.fetch_data", "open", "pathlib.Path", "pickle.load.append", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load"], ["", "", "def", "pmlb_binary_classification_dataset_names", "(", ")", ":", "\n", "    ", "\"\"\"Returns list of binary classification datasets in PMLB.\"\"\"", "\n", "try", ":", "\n", "        ", "name", "=", "pickle", ".", "load", "(", "open", "(", "\".pmlb/bcdn.pkl\"", ",", "\"rb\"", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "pathlib", ".", "Path", "(", "\".pmlb\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "name", "=", "[", "]", "\n", "for", "dataset", "in", "pmlb", ".", "classification_dataset_names", ":", "\n", "            ", "X", ",", "y", "=", "pmlb", ".", "fetch_data", "(", "dataset", ",", "return_X_y", "=", "True", ",", "local_cache_dir", "=", "\".pmlb\"", ")", "\n", "if", "np", ".", "unique", "(", "y", ")", ".", "size", "==", "2", ":", "\n", "                ", "name", ".", "append", "(", "dataset", ")", "\n", "", "", "pickle", ".", "dump", "(", "name", ",", "open", "(", "\".pmlb/bcdn.pkl\"", ",", "\"wb\"", ")", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.pmlb_multiclass_classification_dataset_names": [[73, 87], ["pickle.load", "open", "pathlib.Path().mkdir", "pickle.dump", "pmlb.fetch_data", "open", "pathlib.Path", "pickle.load.append", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load"], ["", "def", "pmlb_multiclass_classification_dataset_names", "(", ")", ":", "\n", "    ", "\"\"\"Returns list of multiclass classification datasets in PMLB.\"\"\"", "\n", "try", ":", "\n", "        ", "name", "=", "pickle", ".", "load", "(", "open", "(", "\".pmlb/mcdn.pkl\"", ",", "\"rb\"", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "pathlib", ".", "Path", "(", "\".pmlb\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "name", "=", "[", "]", "\n", "for", "dataset", "in", "pmlb", ".", "classification_dataset_names", ":", "\n", "            ", "X", ",", "y", "=", "pmlb", ".", "fetch_data", "(", "dataset", ",", "return_X_y", "=", "True", ",", "local_cache_dir", "=", "\".pmlb\"", ")", "\n", "if", "np", ".", "unique", "(", "y", ")", ".", "size", "!=", "2", ":", "\n", "                ", "name", ".", "append", "(", "dataset", ")", "\n", "", "", "pickle", ".", "dump", "(", "name", ",", "open", "(", "\".pmlb/mcdn.pkl\"", ",", "\"wb\"", ")", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.openml_binary_classification_dataset_names": [[89, 105], ["pickle.load", "open", "pathlib.Path().mkdir", "openml.study.get_study", "pickle.dump", "openml.tasks.get_task", "openml.tasks.get_task.get_X_and_y", "open", "pathlib.Path", "pickle.load.append", "numpy.unique", "str"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load"], ["", "def", "openml_binary_classification_dataset_names", "(", ")", ":", "\n", "    ", "\"\"\"Returns list of binary classification datasets in OpenML100.\"\"\"", "\n", "try", ":", "\n", "        ", "name", "=", "pickle", ".", "load", "(", "open", "(", "\".openml/bcdn.pkl\"", ",", "\"rb\"", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "pathlib", ".", "Path", "(", "\".openml\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "name", "=", "[", "]", "\n", "benchmark_suite", "=", "openml", ".", "study", ".", "get_study", "(", "'OpenML100'", ",", "'tasks'", ")", "\n", "for", "task_id", "in", "benchmark_suite", ".", "tasks", ":", "\n", "            ", "task", "=", "openml", ".", "tasks", ".", "get_task", "(", "task_id", ")", "\n", "X", ",", "y", "=", "task", ".", "get_X_and_y", "(", ")", "\n", "if", "np", ".", "unique", "(", "y", ")", ".", "size", "==", "2", ":", "\n", "                ", "name", ".", "append", "(", "str", "(", "task_id", ")", ")", "\n", "", "", "pickle", ".", "dump", "(", "name", ",", "open", "(", "\".openml/bcdn.pkl\"", ",", "\"wb\"", ")", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.openml_multiclass_classification_dataset_names": [[107, 123], ["pickle.load", "open", "pathlib.Path().mkdir", "openml.study.get_study", "pickle.dump", "openml.tasks.get_task", "openml.tasks.get_task.get_X_and_y", "open", "pathlib.Path", "pickle.load.append", "numpy.unique", "str"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load"], ["", "def", "openml_multiclass_classification_dataset_names", "(", ")", ":", "\n", "    ", "\"\"\"Returns list of multiclass classification datasets in OpenML100.\"\"\"", "\n", "try", ":", "\n", "        ", "name", "=", "pickle", ".", "load", "(", "open", "(", "\".openml/mcdn.pkl\"", ",", "\"rb\"", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "pathlib", ".", "Path", "(", "\".openml\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "name", "=", "[", "]", "\n", "benchmark_suite", "=", "openml", ".", "study", ".", "get_study", "(", "'OpenML100'", ",", "'tasks'", ")", "\n", "for", "task_id", "in", "benchmark_suite", ".", "tasks", ":", "\n", "            ", "task", "=", "openml", ".", "tasks", ".", "get_task", "(", "task_id", ")", "\n", "X", ",", "y", "=", "task", ".", "get_X_and_y", "(", ")", "\n", "if", "np", ".", "unique", "(", "y", ")", ".", "size", "!=", "2", ":", "\n", "                ", "name", ".", "append", "(", "str", "(", "task_id", ")", ")", "\n", "", "", "pickle", ".", "dump", "(", "name", ",", "open", "(", "\".openml/mcdn.pkl\"", ",", "\"wb\"", ")", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.atk_dataset_names": [[125, 140], ["None"], "function", ["None"], ["", "def", "atk_dataset_names", "(", ")", ":", "\n", "    ", "\"\"\"Returns list of datasets used by\n    Fan, Yanbo, et al. \"Learning with average top-k loss.\"\n    Advances in Neural Information Processing Systems. 2017.\n    \"\"\"", "\n", "return", "[", "\n", "\"monk3\"", ",", "\n", "\"phoneme\"", ",", "\n", "\"madelon\"", ",", "\n", "\"spambase\"", ",", "\n", "\"titanic\"", ",", "\n", "\"australian\"", ",", "\n", "\"splice3175\"", ",", "\n", "\"german\"", ",", "\n", "\"german-num\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.latexify": [[143, 160], ["matplotlib.rcParams.update"], "function", ["None"], ["", "def", "latexify", "(", ")", ":", "\n", "    ", "\"\"\"\n    Sets `matplotlib` parameters to create figures that match LaTeX fonts.\n\n    Based on https://nipunbatra.github.io/blog/2014/latexify.html.\n    \"\"\"", "\n", "params", "=", "{", "'backend'", ":", "'pdf'", ",", "\n", "'axes.labelsize'", ":", "8", ",", "\n", "'font.size'", ":", "8", ",", "\n", "'legend.fontsize'", ":", "8", ",", "\n", "'xtick.labelsize'", ":", "8", ",", "\n", "'ytick.labelsize'", ":", "8", ",", "\n", "'text.usetex'", ":", "True", ",", "\n", "'font.family'", ":", "'DejaVu Serif'", ",", "\n", "'font.serif'", ":", "'Computer Modern'", ",", "\n", "}", "\n", "matplotlib", ".", "rcParams", ".", "update", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.get_parser": [[162, 245], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_parser", "(", ")", ":", "\n", "    ", "\"\"\"Returns the parser for running experiments from the command line.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"close-k experiments\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"dataset\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"dataset to use\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--trials\"", ",", "\"-t\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"number of folds\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "\"-s\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"seed for RNG\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--degree\"", ",", "\"-d\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"degree of polynomial\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pca\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"number of pca dimensions\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--split\"", ",", "type", "=", "distutils", ".", "util", ".", "strtobool", ",", "default", "=", "True", ",", "\n", "help", "=", "\"whether or not to validate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--render\"", ",", "type", "=", "distutils", ".", "util", ".", "strtobool", ",", "default", "=", "False", ",", "help", "=", "\"render\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--synthetic\"", ",", "type", "=", "distutils", ".", "util", ".", "strtobool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"only use first dim\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--outliers\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of outliers to insert\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dup0\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of times to duplicate 0 class\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dup1\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of times to duplicate 1 class\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--hard0\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of times to flip 0 class\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--hard1\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of times to flip 1 class\"", ")", "\n", "\n", "group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group", ".", "add_argument", "(", "\"--logistic\"", ",", "action", "=", "\"store_const\"", ",", "const", "=", "\"logistic\"", ",", "dest", "=", "\"loss\"", ",", "\n", "default", "=", "\"logistic\"", ",", "help", "=", "\"use logistic loss\"", ")", "\n", "group", ".", "add_argument", "(", "\"--hinge\"", ",", "action", "=", "\"store_const\"", ",", "const", "=", "\"hinge\"", ",", "dest", "=", "\"loss\"", ",", "\n", "help", "=", "\"use hinge loss\"", ")", "\n", "\n", "group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group", ".", "add_argument", "(", "\"--normal\"", ",", "action", "=", "\"store_const\"", ",", "const", "=", "\"normal\"", ",", "dest", "=", "\"multi\"", ",", "\n", "default", "=", "\"normal\"", ",", "help", "=", "\"use multi-class normally\"", ")", "\n", "group", ".", "add_argument", "(", "\"--small\"", ",", "action", "=", "\"store_const\"", ",", "const", "=", "\"small\"", ",", "dest", "=", "\"multi\"", ",", "\n", "help", "=", "\"train multi-class as one-against-smallest\"", ")", "\n", "group", ".", "add_argument", "(", "\"--large\"", ",", "action", "=", "\"store_const\"", ",", "const", "=", "\"large\"", ",", "dest", "=", "\"multi\"", ",", "\n", "help", "=", "\"train multi-class as one-against-largest\"", ")", "\n", "\n", "group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group", ".", "add_argument", "(", "\"--linear\"", ",", "action", "=", "\"store_const\"", ",", "const", "=", "\"linear\"", ",", "dest", "=", "\"model\"", ",", "\n", "default", "=", "\"linear\"", ",", "help", "=", "\"use linear decision\"", ")", "\n", "group", ".", "add_argument", "(", "\"--nn\"", ",", "action", "=", "\"store_const\"", ",", "const", "=", "\"nn\"", ",", "dest", "=", "\"model\"", ",", "\n", "help", "=", "\"use neural net\"", ")", "\n", "group", ".", "add_argument", "(", "\"--dense\"", ",", "action", "=", "\"store_const\"", ",", "const", "=", "\"dense\"", ",", "dest", "=", "\"model\"", ",", "\n", "help", "=", "\"use dense block\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "\"-m\"", ",", "nargs", "=", "\"+\"", ",", "\n", "choices", "=", "[", "\"average\"", ",", "\"atk\"", ",", "\"top\"", ",", "\"maximal\"", ",", "\"trunc\"", ",", "\"border\"", ",", "\"close\"", ",", "\n", "\"close_decay\"", ",", "\"drop\"", ",", "\"sklearnlogistic\"", ",", "\"sklearnsvm\"", ",", "\n", "\"sklearnnb\"", ",", "\"sklearnsgd\"", "]", ",", "\n", "default", "=", "[", "\"average\"", "]", ",", "help", "=", "\"training mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--labels\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "None", ",", "help", "=", "\"labels for figure\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--threshold\"", ",", "default", "=", "None", ",", "type", "=", "float", ",", "help", "=", "\"threshold for close\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "\"-g\"", ",", "nargs", "=", "\"?\"", ",", "const", "=", "True", ",", "type", "=", "distutils", ".", "util", ".", "strtobool", ",", "\n", "default", "=", "False", ",", "help", "=", "\"use GPU\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pretrain\"", ",", "\"-p\"", ",", "type", "=", "distutils", ".", "util", ".", "strtobool", ",", "default", "=", "True", ",", "\n", "help", "=", "\"initialize with linear regression\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--normalize\"", ",", "\"-n\"", ",", "type", "=", "distutils", ".", "util", ".", "strtobool", ",", "default", "=", "True", ",", "\n", "help", "=", "\"normalize features\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "nargs", "=", "\"?\"", ",", "const", "=", "True", ",", "type", "=", "distutils", ".", "util", ".", "strtobool", ",", "\n", "default", "=", "False", ",", "help", "=", "\"save models\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restart\"", ",", "nargs", "=", "\"?\"", ",", "const", "=", "True", ",", "type", "=", "distutils", ".", "util", ".", "strtobool", ",", "\n", "default", "=", "False", ",", "help", "=", "\"restart run\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch\"", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "\"batch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "\"epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--reg\"", ",", "\"-r\"", ",", "type", "=", "float", ",", "nargs", "=", "\"+\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"regularization parameters\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--k\"", ",", "\"-k\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"number of data points\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tol\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "\"tolerance for convergence\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log\"", ",", "\"-l\"", ",", "type", "=", "loglevel", ",", "default", "=", "logging", ".", "DEBUG", ")", "\n", "parser", ".", "add_argument", "(", "\"--logfile\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"log/\"", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S.%f'", ")", ",", "\n", "help", "=", "\"file to store logs\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.configure_logger": [[247, 282], ["dict", "logging.config.dictConfig", "logging.config.dictConfig"], "function", ["None"], ["", "def", "configure_logger", "(", "level", ",", "logfile", ")", ":", "\n", "    ", "\"\"\"\n    Basic configuration for logging format.\n\n    Main settings:\n      - Include time in header\n      - Fix header for multiline messages (see `MultilineFormatter`)\n      - Set logging level\n      - Save log to file\n    \"\"\"", "\n", "cfg", "=", "dict", "(", "\n", "version", "=", "1", ",", "\n", "formatters", "=", "{", "\n", "\"f\"", ":", "{", "\"()\"", ":", "\n", "\"util.MultilineFormatter\"", ",", "\n", "\"format\"", ":", "\n", "\"%(levelname)-8s [%(asctime)s] %(message)s\"", ",", "\n", "\"datefmt\"", ":", "\n", "\"%m/%d %H:%M:%S\"", "}", "\n", "}", ",", "\n", "handlers", "=", "{", "\n", "\"s\"", ":", "{", "\"class\"", ":", "\"logging.StreamHandler\"", ",", "\n", "\"formatter\"", ":", "\"f\"", ",", "\n", "\"level\"", ":", "level", "}", ",", "\n", "\"f\"", ":", "{", "\"class\"", ":", "\"logging.FileHandler\"", ",", "\n", "\"formatter\"", ":", "\"f\"", ",", "\n", "\"level\"", ":", "level", ",", "\n", "\"filename\"", ":", "logfile", "}", "\n", "}", ",", "\n", "root", "=", "{", "\n", "\"handlers\"", ":", "[", "\"s\"", ",", "\"f\"", "]", ",", "\n", "\"level\"", ":", "logging", ".", "NOTSET", "\n", "}", ",", "\n", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.load": [[284, 382], ["numpy.unique", "numpy.array", "pathlib.Path().mkdir", "pmlb.fetch_data", "numpy.bincount", "numpy.argmax", "map", "openml.tasks.get_task", "openml.tasks.get_task.get_X_and_y", "os.path.isfile", "enumerate", "pathlib.Path", "numpy.genfromtxt", "ValueError", "openml.study.get_study", "X[].astype", "numpy.concatenate", "numpy.array", "numpy.concatenate", "numpy.array", "sum", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.isnan", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.array", "ValueError", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "function", ["None"], ["", "def", "load", "(", "dataset", "=", "\"monk3\"", ",", "multi", "=", "\"normal\"", ")", ":", "\n", "    ", "\"\"\"\n    Returns X (features) and y (classes) for a dataset.\n\n    The dataset can be from PMLB, OpenML100, a .dat file in the data/ directory, or one of the\n    synthetic examples from Figure 1.\n\n\n    Args:\n        dataset (str): name of the dataset\n        multi (str): mode for processing multi-class problems\n            There are three valid choices:\n                - \"normal\": return multi-class problems normally\n                - \"small\": convert multi-class problem into a smallest class against all problem\n                - \"large\": convert multi-class problem into a largest class against all problem\n\n    Returns:\n        X (np.array): features the data points\n        y (np.array): classes for the data points\n    \"\"\"", "\n", "\n", "try", ":", "\n", "# PMLB does not provide a simple way to check if a dataset is available", "\n", "# Just attempt to load, and continue through list of datasets if not found", "\n", "        ", "pathlib", ".", "Path", "(", "\".pmlb\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "X", ",", "y", "=", "pmlb", ".", "fetch_data", "(", "dataset", ",", "return_X_y", "=", "True", ",", "local_cache_dir", "=", "\".pmlb\"", ")", "\n", "isPMLB", "=", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "isPMLB", "=", "False", "\n", "\n", "", "if", "isPMLB", ":", "\n", "# PMLB data already loaded", "\n", "        ", "pass", "\n", "", "elif", "dataset", "in", "map", "(", "str", ",", "openml", ".", "study", ".", "get_study", "(", "\"OpenML100\"", ",", "\"tasks\"", ")", ".", "tasks", ")", ":", "\n", "        ", "task", "=", "openml", ".", "tasks", ".", "get_task", "(", "dataset", ")", "\n", "X", ",", "y", "=", "task", ".", "get_X_and_y", "(", ")", "\n", "X", "=", "X", "[", ":", ",", "sum", "(", "np", ".", "isnan", "(", "X", ")", ")", "==", "0", "]", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "\"data/\"", "+", "dataset", "+", "\".dat\"", ")", ":", "\n", "# Datasets not in PMLB or OpenML (load from file)", "\n", "        ", "X", "=", "np", ".", "genfromtxt", "(", "\"data/\"", "+", "dataset", "+", "\".dat\"", ",", "delimiter", "=", "\",\"", ")", "\n", "X", ",", "y", "=", "X", "[", ":", ",", ":", "-", "1", "]", ",", "X", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "", "elif", "dataset", "==", "\"easy\"", ":", "\n", "# Synthetic example for Figure 1a", "\n", "        ", "r1", "=", "225", "\n", "r2", "=", "25", "\n", "b", "=", "250", "\n", "X", "=", "np", ".", "concatenate", "(", "[", "np", ".", "concatenate", "(", "[", "0.10", "*", "np", ".", "random", ".", "rand", "(", "r1", ",", "1", ")", "-", "1.0", ",", "2", "*", "np", ".", "random", ".", "rand", "(", "r1", ",", "1", ")", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "0.25", "*", "np", ".", "random", ".", "rand", "(", "r2", ",", "1", ")", "-", "0.2", ",", "2", "*", "np", ".", "random", ".", "rand", "(", "r2", ",", "1", ")", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "0.10", "*", "np", ".", "random", ".", "rand", "(", "b", ",", "1", ")", "+", "0.0", ",", "2", "*", "np", ".", "random", ".", "rand", "(", "b", ",", "1", ")", "-", "1", "]", ",", "axis", "=", "1", ")", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "(", "r1", "+", "r2", ")", "*", "[", "1", "]", "+", "b", "*", "[", "0", "]", ")", "\n", "", "elif", "dataset", "==", "\"imbalance\"", ":", "\n", "# Synthetic example for Figure 1b", "\n", "        ", "r", "=", "20", "\n", "b", "=", "480", "\n", "X", "=", "np", ".", "concatenate", "(", "[", "np", ".", "concatenate", "(", "[", "1.05", "*", "np", ".", "random", ".", "rand", "(", "r", ",", "1", ")", "-", "1.0", ",", "2", "*", "np", ".", "random", ".", "rand", "(", "r", ",", "1", ")", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "1.00", "*", "np", ".", "random", ".", "rand", "(", "b", ",", "1", ")", "+", "0.0", ",", "2", "*", "np", ".", "random", ".", "rand", "(", "b", ",", "1", ")", "-", "1", "]", ",", "axis", "=", "1", ")", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "r", "*", "[", "1", "]", "+", "b", "*", "[", "0", "]", ")", "\n", "", "elif", "dataset", "==", "\"imbalance+outlier\"", ":", "\n", "# Synthetic example for Figure 1c", "\n", "        ", "r", "=", "20", "\n", "b", "=", "480", "\n", "X", "=", "np", ".", "concatenate", "(", "[", "np", ".", "concatenate", "(", "[", "1", "*", "np", ".", "random", ".", "rand", "(", "r", ",", "1", ")", "-", "1.0", ",", "2", "*", "np", ".", "random", ".", "rand", "(", "r", ",", "1", ")", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "1", "*", "np", ".", "random", ".", "rand", "(", "b", ",", "1", ")", "+", "0.0", ",", "2", "*", "np", ".", "random", ".", "rand", "(", "b", ",", "1", ")", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "-", "1.0", ",", "0.0", "]", "]", ")", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "r", "*", "[", "1", "]", "+", "b", "*", "[", "0", "]", "+", "[", "0", "]", ")", "\n", "", "elif", "dataset", "==", "\"overlap\"", ":", "\n", "# Synthetic example for Figure 1d", "\n", "        ", "r", "=", "250", "\n", "b", "=", "250", "\n", "X", "=", "np", ".", "concatenate", "(", "[", "np", ".", "concatenate", "(", "[", "1", "*", "np", ".", "random", ".", "rand", "(", "r", ",", "1", ")", "-", "1", ",", "2", "*", "np", ".", "random", ".", "rand", "(", "r", ",", "1", ")", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "2", "*", "np", ".", "random", ".", "rand", "(", "b", ",", "1", ")", "-", "1", ",", "2", "*", "np", ".", "random", ".", "rand", "(", "b", ",", "1", ")", "-", "1", "]", ",", "axis", "=", "1", ")", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "r", "*", "[", "1", "]", "+", "b", "*", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Dataset \"", "+", "dataset", "+", "\" is not recognized.\"", ")", "\n", "\n", "# Map classes down to 0 to (number_of_classes - 1)", "\n", "", "unique", "=", "np", ".", "unique", "(", "y", ")", "\n", "new", "=", "{", "old", ":", "new", "for", "(", "new", ",", "old", ")", "in", "enumerate", "(", "unique", ")", "}", "\n", "y", "=", "np", ".", "array", "(", "[", "new", "[", "i", "]", "for", "i", "in", "y", "]", ")", "\n", "\n", "if", "multi", "==", "\"normal\"", ":", "\n", "# Treat multi-class problems normally", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "# Convert multi-class problems to binary", "\n", "        ", "count", "=", "np", ".", "bincount", "(", "y", ")", "\n", "if", "multi", "==", "\"small\"", ":", "\n", "# Smallest class against all", "\n", "            ", "count", "=", "-", "count", "\n", "", "elif", "multi", "==", "\"large\"", ":", "\n", "# Largest class against all", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Multi-class setting \\\"\"", "+", "multi", "+", "\"\\\" not recognized.\"", ")", "\n", "", "ind", "=", "np", ".", "argmax", "(", "count", ")", "\n", "y", "=", "(", "y", "==", "ind", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.split": [[384, 420], ["numpy.arange", "numpy.random.shuffle", "round", "abs", "ValueError", "round"], "function", ["None"], ["", "def", "split", "(", "X", ",", "y", ",", "train", "=", "0.5", ",", "valid", "=", "0.25", ",", "test", "=", "0.25", ")", ":", "\n", "    ", "\"\"\"\n    Split dataset into train, validation, and test folds.\n\n    Args:\n        X (np.array): features for the data points\n        y (np.array): classes for the data points\n        train (float): fraction of points in train fold\n        valid (float): fraction of points in validation fold\n        test (float): fraction of points in test fold\n\n    Returns:\n        Xtrain (np.array): train fold features\n        ytrain (np.array): train fold classes\n        Xvalid (np.array): validation fold features\n        yvalid (np.array): validation fold classes\n        Xtest (np.array): test fold features\n        ytest (np.array): test fold classes\n\n    Raises:\n        ValueError: If `level` is not a recognized logging level.\n    \"\"\"", "\n", "if", "abs", "(", "train", "+", "valid", "+", "test", "-", "1", ")", ">", "1e-5", ":", "\n", "        ", "raise", "ValueError", "(", "\"train, valid, and test must add to approximately 1.\"", ")", "\n", "\n", "", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "index", "=", "np", ".", "arange", "(", "n", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "index", ")", "\n", "\n", "X", "=", "X", "[", "index", ",", ":", "]", "\n", "y", "=", "y", "[", "index", "]", "\n", "\n", "n1", "=", "round", "(", "n", "*", "train", ")", "\n", "n2", "=", "round", "(", "n", "*", "valid", ")", "+", "n1", "\n", "\n", "return", "X", "[", ":", "n1", ",", ":", "]", ",", "y", "[", ":", "n1", "]", ",", "X", "[", "n1", ":", "n2", ",", ":", "]", ",", "y", "[", "n1", ":", "n2", "]", ",", "X", "[", "n2", ":", ",", ":", "]", ",", "y", "[", "n2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.linear_regression": [[447, 485], ["torch.nn.Linear", "all", "torch.Tensor", "numpy.concatenate", "all", "ValueError", "numpy.dot", "numpy.dot", "w[].reshape", "torch.Tensor", "numpy.unique", "numpy.array", "numpy.linalg.pinv", "numpy.linalg.pinv", "numpy.ones", "numpy.unique", "numpy.array", "torch.nn.Linear.weight.numel"], "function", ["None"], ["", "", "def", "linear_regression", "(", "X", ",", "y", ",", "bias", "=", "True", ",", "rcond", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Computes a linear regression model.\n\n    This can be used as the initial parameter when training classifiers with a\n    linear decision boundary. This can help reduce the number of epochs needed.\n\n    Args:\n        X (np.array): features\n        y (np.array): classes\n        bias (bool, optional): whether or not to include bias term\n        rcond (float, optional): cutoff for small singular values (for `np.linalg.pinv`)\n\n    Returns:\n        torch.nn.Linear: Model containing weights from linear regression\n\n    Raises:\n        ValueError: If class labels cannot be are not 0/1 or -1/1.\n    \"\"\"", "\n", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "1", ",", "bias", ")", "\n", "if", "bias", ":", "\n", "        ", "X", "=", "np", ".", "concatenate", "(", "[", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "if", "all", "(", "np", ".", "unique", "(", "y", ")", "==", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ")", ":", "\n", "        ", "y", "=", "2", "*", "y", "-", "1", "\n", "", "if", "not", "all", "(", "np", ".", "unique", "(", "y", ")", "==", "np", ".", "array", "(", "[", "-", "1", ",", "1", "]", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Linear regression initialization encountered unknown class labels.\"", ")", "\n", "\n", "", "if", "rcond", "is", "None", ":", "\n", "        ", "w", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "pinv", "(", "X", ")", ",", "y", ")", "\n", "", "else", ":", "\n", "        ", "w", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "pinv", "(", "X", ",", "rcond", ")", ",", "y", ")", "\n", "\n", "", "linear", ".", "weight", ".", "data", "=", "torch", ".", "Tensor", "(", "w", "[", ":", "linear", ".", "weight", ".", "numel", "(", ")", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "if", "bias", ":", "\n", "        ", "linear", ".", "bias", ".", "data", "=", "torch", ".", "Tensor", "(", "[", "w", "[", "-", "1", "]", "]", ")", "\n", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.simulate_data": [[486, 583], ["numpy.empty", "numpy.empty", "range", "numpy.concatenate", "numpy.concatenate", "numpy.empty", "numpy.empty", "range", "numpy.concatenate", "numpy.concatenate", "numpy.empty", "numpy.empty", "range", "numpy.concatenate", "numpy.concatenate", "numpy.empty", "numpy.empty", "range", "numpy.concatenate", "numpy.concatenate", "numpy.empty", "numpy.empty", "range", "numpy.concatenate", "numpy.concatenate", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "function", ["None"], ["", "def", "simulate_data", "(", "X", ",", "y", ",", "outliers", "=", "0", ",", "dup0", "=", "0", ",", "dup1", "=", "0", ",", "hard0", "=", "0", ",", "hard1", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Simulates variants of a dataset with outliers, class imbalance, or hard examples.\n\n    These simulated variants are used for Figure 5 of the paper. The default\n    arguments for the parameters results in the dataset being returned without\n    modification.\n\n    Args:\n        X (np.array): features\n        y (np.array): classes\n        outliers (int): number of outliers to simulate\n        dup0 (int): number of negative examples to duplicate\n        dup1 (int): number of positive examples to duplicate\n        hard0 (int): number of negative examples to convert into hard examples\n        hard1 (int): number of positive examples to convert into hard examples\n\n    Returns:\n        np.array: features\n        np.array: classes\n    \"\"\"", "\n", "# Options for simulated variants (Figure 5)", "\n", "\n", "if", "outliers", "!=", "0", ":", "\n", "# Add outliers, which are placed very far in the direction of one class,", "\n", "# but given the opposite label", "\n", "        ", "Xextra", "=", "np", ".", "empty", "(", "(", "outliers", ",", "X", ".", "shape", "[", "1", "]", ")", ",", "X", ".", "dtype", ")", "\n", "yextra", "=", "np", ".", "empty", "(", "(", "outliers", ",", ")", ",", "y", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "outliers", ")", ":", "\n", "            ", "while", "True", ":", "# Sample two elements with different classes", "\n", "                ", "j", "=", "random", ".", "randint", "(", "0", ",", "X", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "k", "=", "random", ".", "randint", "(", "0", ",", "X", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "if", "y", "[", "j", "]", "!=", "y", "[", "k", "]", ":", "\n", "                    ", "break", "\n", "# Place the outlier very far in the direction of example k,", "\n", "# but give it the same label as j", "\n", "", "", "alpha", "=", "10", "# Amount placed in direction of example k", "\n", "Xextra", "[", "i", ",", ":", "]", "=", "(", "1", "-", "alpha", ")", "*", "X", "[", "j", ",", ":", "]", "+", "alpha", "*", "X", "[", "k", ",", ":", "]", "\n", "yextra", "[", "i", "]", "=", "y", "[", "j", "]", "\n", "", "X", "=", "np", ".", "concatenate", "(", "[", "X", ",", "Xextra", "]", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "y", ",", "yextra", "]", ")", "\n", "", "if", "dup0", "!=", "0", ":", "\n", "# Add duplicated negative examples (same as one of the existing negatives) to simulate", "\n", "# class imbalance", "\n", "        ", "Xextra", "=", "np", ".", "empty", "(", "(", "dup0", ",", "X", ".", "shape", "[", "1", "]", ")", ",", "X", ".", "dtype", ")", "\n", "yextra", "=", "np", ".", "empty", "(", "(", "dup0", ",", ")", ",", "y", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "dup0", ")", ":", "\n", "            ", "while", "True", ":", "# Sample a negative example", "\n", "                ", "j", "=", "random", ".", "randint", "(", "0", ",", "X", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "if", "y", "[", "j", "]", "==", "0", ":", "\n", "                    ", "break", "\n", "", "", "Xextra", "[", "i", ",", ":", "]", "=", "X", "[", "j", ",", ":", "]", "\n", "yextra", "[", "i", "]", "=", "y", "[", "j", "]", "\n", "", "X", "=", "np", ".", "concatenate", "(", "[", "X", ",", "Xextra", "]", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "y", ",", "yextra", "]", ")", "\n", "", "if", "dup1", "!=", "0", ":", "\n", "# Add duplicated positive examples (same as one of the existing positive) to simulate", "\n", "# class imbalance", "\n", "        ", "Xextra", "=", "np", ".", "empty", "(", "(", "dup1", ",", "X", ".", "shape", "[", "1", "]", ")", ",", "X", ".", "dtype", ")", "\n", "yextra", "=", "np", ".", "empty", "(", "(", "dup1", ",", ")", ",", "y", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "dup1", ")", ":", "\n", "            ", "while", "True", ":", "# Sample a positive example", "\n", "                ", "j", "=", "random", ".", "randint", "(", "0", ",", "X", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "if", "y", "[", "j", "]", "==", "1", ":", "\n", "                    ", "break", "\n", "", "", "Xextra", "[", "i", ",", ":", "]", "=", "X", "[", "j", ",", ":", "]", "\n", "yextra", "[", "i", "]", "=", "y", "[", "j", "]", "\n", "", "X", "=", "np", ".", "concatenate", "(", "[", "X", ",", "Xextra", "]", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "y", ",", "yextra", "]", ")", "\n", "", "if", "hard0", "!=", "0", ":", "\n", "# Add copies of negative examples that are labeled positive, giving hard examples", "\n", "        ", "Xextra", "=", "np", ".", "empty", "(", "(", "hard0", ",", "X", ".", "shape", "[", "1", "]", ")", ",", "X", ".", "dtype", ")", "\n", "yextra", "=", "np", ".", "empty", "(", "(", "hard0", ",", ")", ",", "y", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "hard0", ")", ":", "\n", "            ", "while", "True", ":", "# Sample a negative example", "\n", "                ", "j", "=", "random", ".", "randint", "(", "0", ",", "X", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "if", "y", "[", "j", "]", "==", "0", ":", "\n", "                    ", "break", "\n", "", "", "Xextra", "[", "i", ",", ":", "]", "=", "X", "[", "j", ",", ":", "]", "\n", "yextra", "[", "i", "]", "=", "1", "\n", "", "X", "=", "np", ".", "concatenate", "(", "[", "X", ",", "Xextra", "]", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "y", ",", "yextra", "]", ")", "\n", "", "if", "hard1", "!=", "0", ":", "\n", "# Add copies of positive examples that are labeled negative, giving hard examples", "\n", "        ", "Xextra", "=", "np", ".", "empty", "(", "(", "hard1", ",", "X", ".", "shape", "[", "1", "]", ")", ",", "X", ".", "dtype", ")", "\n", "yextra", "=", "np", ".", "empty", "(", "(", "hard1", ",", ")", ",", "y", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "hard1", ")", ":", "\n", "            ", "while", "True", ":", "# Sample a positive example", "\n", "                ", "j", "=", "random", ".", "randint", "(", "0", ",", "X", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "if", "y", "[", "j", "]", "==", "1", ":", "\n", "                    ", "break", "\n", "", "", "Xextra", "[", "i", ",", ":", "]", "=", "X", "[", "j", ",", ":", "]", "\n", "yextra", "[", "i", "]", "=", "0", "\n", "", "X", "=", "np", ".", "concatenate", "(", "[", "X", ",", "Xextra", "]", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "y", ",", "yextra", "]", ")", "\n", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.render": [[585, 684], ["numpy.arange", "numpy.random.shuffle", "util.latexify", "plt.figure", "sns.color_palette", "plt.title", "plt.axis", "plt.yticks", "plt.tight_layout", "numpy.concatenate", "plt.scatter", "plt.scatter", "numpy.linspace", "numpy.linspace", "torch.Tensor", "enumerate", "plt.savefig", "plt.show", "isinstance", "m().cpu().detach().numpy().reshape", "plt.contour", "zip", "plt.clabel", "numpy.concatenate", "numpy.concatenate", "numpy.repeat().reshape", "numpy.tile().reshape", "m().cpu().detach().numpy", "numpy.repeat().reshape", "numpy.tile().reshape", "numpy.tile().reshape", "numpy.repeat().reshape", "numpy.repeat", "numpy.tile", "m().cpu().detach", "numpy.repeat", "numpy.tile", "numpy.tile", "numpy.repeat", "m().cpu", "m"], "function", ["home.repos.pwc.inspect_result.bryan-he_closek.experiments.util.latexify"], ["", "def", "render", "(", "X", ",", "y", ",", "model", "=", "None", ",", "root", "=", "None", ",", "X_remaining", "=", "None", ",", "transpose", "=", "True", ",", "labels", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Creates figure with scatterplot of data points and decision boundaries of models.\n\n    This function is used to create Figure 1.\n\n    Args:\n        X (np.array): features\n        y (np.array): classes\n        root (str, optional): root for filename (defaults to showing on screen)\n        model (list of tuples (str, torch.nn.module), optional): list of models to be plotted\n        X_remaining (np.array, optional): additional dimensions to plot\n        transpose (bool): transpose the axes in the plot\n        labels (list of str): list of string for labeling contours (defaults to names in `model`)\n    \"\"\"", "\n", "# Conditional import so that rest of code can be run on systems without libraries for plotting", "\n", "import", "seaborn", "as", "sns", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "# Shuffle points (in case points overlap)", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "index", "=", "np", ".", "arange", "(", "n", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "index", ")", "\n", "X", "=", "X", "[", "index", ",", ":", "]", "\n", "y", "=", "y", "[", "index", "]", "\n", "if", "X_remaining", "is", "not", "None", ":", "\n", "        ", "X_remaining", "=", "X_remaining", "[", "index", ",", ":", "]", "\n", "\n", "", "latexify", "(", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "1.65", ",", "1.65", ")", ")", "\n", "\n", "colormap", "=", "sns", ".", "color_palette", "(", "\"pastel\"", ")", "\n", "colormap", "=", "[", "colormap", "[", "0", "]", ",", "colormap", "[", "2", "]", "]", "\n", "color", "=", "[", "colormap", "[", "i", "]", "for", "i", "in", "y", "]", "\n", "\n", "if", "X_remaining", "is", "not", "None", ":", "\n", "        ", "X", "=", "np", ".", "concatenate", "(", "[", "X", ",", "X_remaining", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "xmin", "=", "-", "1.1", "\n", "xmax", "=", "+", "1.1", "\n", "ymin", "=", "-", "1.1", "\n", "ymax", "=", "+", "1.1", "\n", "\n", "if", "transpose", ":", "\n", "        ", "xmin", ",", "ymin", "=", "ymin", ",", "xmin", "\n", "xmax", ",", "ymax", "=", "ymax", ",", "xmax", "\n", "\n", "", "if", "transpose", ":", "\n", "        ", "plt", ".", "scatter", "(", "X", "[", ":", ",", "1", "]", ",", "X", "[", ":", ",", "0", "]", ",", "c", "=", "color", ",", "s", "=", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "scatter", "(", "X", "[", ":", ",", "0", "]", ",", "X", "[", ":", ",", "1", "]", ",", "c", "=", "color", ",", "s", "=", "0.5", ")", "\n", "\n", "", "if", "model", "is", "not", "None", ":", "\n", "        ", "rows", "=", "500", "\n", "cols", "=", "500", "\n", "row", "=", "np", ".", "linspace", "(", "ymin", ",", "ymax", ",", "rows", ")", "\n", "col", "=", "np", ".", "linspace", "(", "xmin", ",", "xmax", ",", "cols", ")", "\n", "\n", "if", "X_remaining", "is", "None", ":", "\n", "            ", "if", "transpose", ":", "\n", "                ", "Xall", "=", "np", ".", "concatenate", "(", "[", "np", ".", "repeat", "(", "row", ",", "cols", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "np", ".", "tile", "(", "col", ",", "rows", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "Xall", "=", "np", ".", "concatenate", "(", "[", "np", ".", "tile", "(", "col", ",", "rows", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "np", ".", "repeat", "(", "row", ",", "cols", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "transpose", ":", "\n", "                ", "Xall", "=", "np", ".", "repeat", "(", "row", ",", "cols", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "Xall", "=", "np", ".", "tile", "(", "col", ",", "rows", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "", "Xall", "=", "torch", ".", "Tensor", "(", "Xall", ")", "\n", "if", "not", "isinstance", "(", "model", ",", "list", ")", ":", "\n", "            ", "model", "=", "[", "model", "]", "\n", "\n", "", "for", "(", "i", ",", "(", "name", ",", "m", ")", ")", "in", "enumerate", "(", "model", ")", ":", "\n", "            ", "d", "=", "m", "(", "Xall", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "rows", ",", "cols", ")", "\n", "\n", "CS", "=", "plt", ".", "contour", "(", "col", ",", "row", ",", "d", ",", "[", "0", "]", ",", "colors", "=", "[", "\"black\"", "]", ",", "linewidths", "=", "1", ")", "\n", "\n", "fmt", "=", "{", "}", "\n", "if", "labels", "is", "None", ":", "\n", "                ", "strs", "=", "[", "name", "]", "\n", "", "else", ":", "\n", "                ", "strs", "=", "[", "labels", "[", "i", "]", "]", "\n", "", "for", "l", ",", "s", "in", "zip", "(", "CS", ".", "levels", ",", "strs", ")", ":", "\n", "                ", "fmt", "[", "l", "]", "=", "s", "\n", "\n", "", "plt", ".", "clabel", "(", "CS", ",", "inline", "=", "True", ",", "fmt", "=", "fmt", ",", "fontsize", "=", "10", ",", "manual", "=", "[", "(", "0", ",", "0", ")", "]", ")", "\n", "\n", "", "", "plt", ".", "title", "(", "\"\"", ")", "\n", "plt", ".", "axis", "(", "[", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "-", "1", ",", "0", ",", "1", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "if", "root", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "root", "+", "\".pdf\"", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.__init__": [[28, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loss", "=", "\"hinge\"", ",", "k", "=", "None", ",", "model", "=", "None", ",", "decay", "=", "True", ",", "\n", "alpha", "=", "0.0001", ",", "max_iter", "=", "1000", ",", "eta0", "=", "1e-1", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "self", ".", "loss", "=", "loss", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "eta0", "=", "eta0", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "fitted", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.fit": [[41, 109], ["torch.Tensor", "torch.Tensor", "torch.optim.SGD", "range", "torch.nn.Linear", "copy.deepcopy", "torch.nn.SoftMarginLoss", "len", "y.unsqueeze.unsqueeze.unsqueeze", "closek.CloseKClassifier.fitted.parameters", "closek.CloseKClassifier.fitted", "HingeLoss.", "torch.sum().cpu().detach().numpy", "torch.abs", "torch.sort", "torch.sum", "torch.optim.SGD.zero_grad", "torch.sum.backward", "torch.optim.SGD.step", "closek.HingeLoss", "math.log", "ValueError", "torch.sum().cpu().detach", "torch.sum().cpu", "round", "torch.sum"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Fits model to the given training data.\n\n        No value is returned; the model is stored internally as `fitted`.\n\n        Args:\n            X (np.array, shape = (n_samples, n_features)): Training features\n            y (np.array, shape = (n_samples) or (n_samples, n_outputs)): Training labels\n        \"\"\"", "\n", "n", ",", "d", "=", "X", ".", "shape", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "# Default to linear model", "\n", "            ", "self", ".", "fitted", "=", "torch", ".", "nn", ".", "Linear", "(", "d", ",", "1", ")", "\n", "", "else", ":", "\n", "# Make fresh copy of model", "\n", "            ", "self", ".", "fitted", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "\n", "", "k", "=", "self", ".", "k", "\n", "if", "k", "is", "None", ":", "\n", "            ", "k", "=", "n", "\n", "", "if", "k", ">", "n", ":", "\n", "            ", "k", "=", "n", "\n", "\n", "# Set loss function", "\n", "", "if", "self", ".", "loss", "==", "\"hinge\"", ":", "\n", "            ", "loss", "=", "torch", ".", "nn", ".", "SoftMarginLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "threshold", "=", "1.", "\n", "", "elif", "self", ".", "loss", "==", "\"log\"", ":", "\n", "            ", "loss", "=", "HingeLoss", "(", ")", "\n", "threshold", "=", "math", ".", "log", "(", "2.", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Loss \\\"\"", "+", "loss", "+", "\"\\\" is not recognized.\"", ")", "\n", "\n", "# Converting types and shape of data for downstream use", "\n", "", "X", "=", "torch", ".", "Tensor", "(", "X", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "2", "*", "y", "-", "1", ")", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", ":", "\n", "            ", "y", "=", "y", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "fitted", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "eta0", "/", "n", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "alpha", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "max_iter", ")", ":", "\n", "            ", "z", "=", "self", ".", "fitted", "(", "X", ")", "\n", "l", "=", "loss", "(", "z", ",", "y", ")", "\n", "\n", "total", "=", "torch", ".", "sum", "(", "l", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "self", ".", "decay", ":", "\n", "                ", "if", "epoch", "<", "self", ".", "max_iter", "//", "3", ":", "\n", "                    ", "k_", "=", "n", "\n", "", "elif", "epoch", "<", "2", "*", "self", ".", "max_iter", "//", "3", ":", "\n", "                    ", "k_", "=", "k", "+", "round", "(", "(", "n", "-", "k", ")", "*", "(", "2", "*", "self", ".", "max_iter", "//", "3", "-", "epoch", ")", "/", "self", ".", "max_iter", "*", "3", ")", "\n", "", "else", ":", "\n", "                    ", "k_", "=", "k", "\n", "", "", "else", ":", "\n", "                ", "k", "=", "self", ".", "k", "\n", "\n", "", "diff", "=", "torch", ".", "abs", "(", "l", "-", "threshold", ")", "\n", "s", ",", "_", "=", "torch", ".", "sort", "(", "diff", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "ind", "=", "(", "diff", "<=", "s", "[", "k_", "-", "1", "]", ")", "\n", "l", "=", "torch", ".", "sum", "(", "l", "[", "ind", "]", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "l", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.predict": [[111, 126], ["NotFittedError", "closek.CloseKClassifier.fitted().detach().numpy().squeeze", "type", "closek.CloseKClassifier.fitted().detach().numpy", "closek.CloseKClassifier.fitted().detach", "closek.CloseKClassifier.fitted", "torch.Tensor"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Predicts labels for test data.\n\n        Args:\n            X (np.array, shape = (n_samples, n_features)): Test features\n\n        Returns\n            np.array, shape = (n_samples) or (n_samples, n_outputs): Prediction for labels\n        \"\"\"", "\n", "if", "self", ".", "fitted", "is", "None", ":", "\n", "            ", "raise", "NotFittedError", "(", "\"This %(name)s instance is not fitted \"", "\n", "\"yet\"", "%", "{", "'name'", ":", "type", "(", "self", ")", ".", "__name__", "}", ")", "\n", "\n", "", "return", "(", "self", ".", "fitted", "(", "torch", ".", "Tensor", "(", "X", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", "1", ")", ">", "0", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.score": [[127, 140], ["numpy.mean", "closek.CloseKClassifier.predict"], "methods", ["home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.predict"], ["", "def", "score", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Returns the mean accuracy on the given test data and labels.\n\n        Args:\n            X (np.array, shape = (n_samples, n_features)): Test features\n            y (np.array, shape = (n_samples) or (n_samples, n_outputs)): Test labels\n\n        Returns:\n        -------\n            float: Accuracy on test set\n        \"\"\"", "\n", "return", "np", ".", "mean", "(", "self", ".", "predict", "(", "X", ")", "==", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.CloseKClassifier.decision_function": [[141, 152], ["closek.CloseKClassifier.fitted().detach().numpy", "closek.CloseKClassifier.fitted().detach", "closek.CloseKClassifier.fitted", "torch.Tensor"], "methods", ["None"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Predicts confidence scores for test data.\n\n        Args:\n            X (np.array, shape = (n_samples, n_features)): Test features\n\n        Returns\n            np.array, shape = (n_samples) or (n_samples, n_outputs): Confidence score for test data\n        \"\"\"", "\n", "return", "self", ".", "fitted", "(", "torch", ".", "Tensor", "(", "X", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.HingeLoss.__init__": [[156, 158], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.HingeLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "HingeLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bryan-he_closek.closek.closek.HingeLoss.forward": [[159, 161], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "(", "1", "-", "pred", "*", "target", ")", ".", "clamp", "(", "0", ")", "\n", "", "", ""]]}