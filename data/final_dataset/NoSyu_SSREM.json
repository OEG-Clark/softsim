{"home.repos.pwc.inspect_result.NoSyu_SSREM.src.train.load_pickle": [[8, 11], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.load"], ["def", "load_pickle", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.src.retrain.load_pickle": [[8, 11], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.load"], ["def", "load_pickle", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.src.configs.Config.__init__": [[33, 71], ["project_dir.joinpath", "project_dir.joinpath.joinpath", "configs.Config.dataset_dir.joinpath", "configs.Config.dataset_dir.joinpath", "configs.Config.dataset_dir.joinpath", "configs.Config.data_dir.joinpath", "configs.Config.data_dir.joinpath", "configs.Config.data_dir.joinpath", "kwargs.items", "datetime.datetime.datetime.now().strftime", "save_dir.joinpath", "str", "os.makedirs", "setattr", "os.path.exists", "os.path.dirname", "str", "datetime.datetime.datetime.now"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Configuration Class: set kwargs as class attributes with setattr\"\"\"", "\n", "if", "kwargs", "is", "not", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "'optimizer'", ":", "\n", "                    ", "value", "=", "optimizer_dict", "[", "value", "]", "\n", "", "if", "key", "==", "'rnn'", ":", "\n", "                    ", "value", "=", "rnn_dict", "[", "value", "]", "\n", "", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n", "", "", "data_dir", "=", "project_dir", ".", "joinpath", "(", "'datasets'", ")", "\n", "\n", "self", ".", "dataset_dir", "=", "data_dir", ".", "joinpath", "(", "self", ".", "data", ")", "\n", "\n", "self", ".", "data_dir", "=", "self", ".", "dataset_dir", ".", "joinpath", "(", "self", ".", "mode", ")", "\n", "self", ".", "word2id_path", "=", "self", ".", "dataset_dir", ".", "joinpath", "(", "'word2id.pkl'", ")", "\n", "self", ".", "id2word_path", "=", "self", ".", "dataset_dir", ".", "joinpath", "(", "'id2word.pkl'", ")", "\n", "\n", "self", ".", "utter_path", "=", "self", ".", "data_dir", ".", "joinpath", "(", "'utters.pkl'", ")", "\n", "self", ".", "utter_length_path", "=", "self", ".", "data_dir", ".", "joinpath", "(", "'utters_length.pkl'", ")", "\n", "self", ".", "utter_scores_path", "=", "self", ".", "data_dir", ".", "joinpath", "(", "'utters_scores.pkl'", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", "and", "self", ".", "checkpoint", "is", "None", ":", "\n", "            ", "time_now", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ")", "\n", "self", ".", "save_path", "=", "save_dir", ".", "joinpath", "(", "self", ".", "data", ",", "self", ".", "model", ",", "time_now", ")", "\n", "self", ".", "logdir", "=", "str", "(", "self", ".", "save_path", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "", "elif", "self", ".", "checkpoint", "is", "not", "None", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "checkpoint", ")", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "dirname", "(", "self", ".", "checkpoint", ")", "\n", "self", ".", "logdir", "=", "str", "(", "self", ".", "save_path", ")", "\n", "\n", "", "self", ".", "pretrained_wv_path", "=", "None", "\n", "\n", "if", "'bert'", "in", "self", ".", "data", ":", "\n", "            ", "self", ".", "embedding_size", "=", "768", "\n", "", "if", "'_25'", "in", "self", ".", "data", ":", "\n", "            ", "self", ".", "embedding_size", "=", "25", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.src.configs.Config.__str__": [[72, 77], ["pprint.pformat"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Pretty-print configurations in alphabetical order\"\"\"", "\n", "config_str", "=", "'Configurations\\n'", "\n", "config_str", "+=", "pprint", ".", "pformat", "(", "self", ".", "__dict__", ")", "\n", "return", "config_str", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.src.configs.str2bool": [[22, 30], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "\"\"\"string to boolean\"\"\"", "\n", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.src.configs.get_config": [[79, 128], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "parser.parse_args.update", "configs.Config", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.parse_known_args"], "function", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.update"], ["", "", "def", "get_config", "(", "parse", "=", "True", ",", "**", "optional_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Get configurations as attributes of class\n    1. Parse configurations with argparse.\n    2. Create Config class initilized with parsed kwargs.\n    3. Return Config class.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'train'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "80", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epoch'", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "1e-12", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'Adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--context_size'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--rnn'", ",", "type", "=", "str", ",", "default", "=", "'gru'", ")", "\n", "parser", ".", "add_argument", "(", "'--rnncell'", ",", "type", "=", "str", ",", "default", "=", "'gru'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding_size'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder_hidden_size'", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "'--bidirectional'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--adem_gamma'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--plot_every_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every_epoch'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'ubuntu'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_wv'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--test_target_ng'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "\n", "# Parse arguments", "\n", "if", "parse", ":", "\n", "        ", "kwargs", "=", "parser", ".", "parse_args", "(", ")", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "parser", ".", "parse_known_args", "(", ")", "[", "0", "]", "\n", "\n", "# Namespace => Dictionary", "\n", "", "kwargs", "=", "vars", "(", "kwargs", ")", "\n", "kwargs", ".", "update", "(", "optional_kwargs", ")", "\n", "\n", "return", "Config", "(", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.NoSyu_SSREM.src.eval1.load_pickle": [[12, 15], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.load"], ["def", "load_pickle", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.tensorboard.TensorboardWriter.__init__": [[5, 14], ["tensorboardX.SummaryWriter.__init__", "tensorboard.TensorboardWriter.file_writer.get_logdir"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.__init__"], ["    ", "def", "__init__", "(", "self", ",", "logdir", ")", ":", "\n", "        ", "\"\"\"\n        Extended SummaryWriter Class from tensorboard-pytorch (tensorbaordX)\n        https://github.com/lanpa/tensorboard-pytorch/blob/master/tensorboardX/writer.py\n\n        Internally calls self.file_writer\n        \"\"\"", "\n", "super", "(", "TensorboardWriter", ",", "self", ")", ".", "__init__", "(", "logdir", ")", "\n", "self", ".", "logdir", "=", "self", ".", "file_writer", ".", "get_logdir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.tensorboard.TensorboardWriter.update_parameters": [[15, 21], ["module.named_parameters", "tensorboard.TensorboardWriter.add_histogram", "param.clone().cpu().data.numpy", "param.clone().cpu", "param.clone"], "methods", ["None"], ["", "def", "update_parameters", "(", "self", ",", "module", ",", "step_i", ")", ":", "\n", "        ", "\"\"\"\n        module: nn.Module\n        \"\"\"", "\n", "for", "name", ",", "param", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "add_histogram", "(", "name", ",", "param", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "step_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.tensorboard.TensorboardWriter.update_loss": [[22, 24], ["tensorboard.TensorboardWriter.add_scalar"], "methods", ["None"], ["", "", "def", "update_loss", "(", "self", ",", "loss", ",", "step_i", ",", "name", "=", "'loss'", ")", ":", "\n", "        ", "self", ".", "add_scalar", "(", "name", ",", "loss", ",", "step_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.tensorboard.TensorboardWriter.update_histogram": [[25, 27], ["tensorboard.TensorboardWriter.add_histogram"], "methods", ["None"], ["", "def", "update_histogram", "(", "self", ",", "values", ",", "step_i", ",", "name", "=", "'hist'", ")", ":", "\n", "        ", "self", ".", "add_histogram", "(", "name", ",", "values", ",", "step_i", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.data_loader.UttersDataset.__init__": [[5, 10], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "utters", ",", "data", "=", "None", ")", ":", "\n", "        ", "self", ".", "utters", "=", "utters", "\n", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "len", "=", "len", "(", "utters", ")", "# total_data_size", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.data_loader.UttersDataset.__getitem__": [[11, 16], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return Single data sentence\"\"\"", "\n", "utter", "=", "self", ".", "utters", "[", "index", "]", "\n", "\n", "return", "utter", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.data_loader.UttersDataset.__len__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.data_loader.get_loader": [[21, 32], ["data_loader.UttersDataset", "torch.utils.data.DataLoader", "zip"], "function", ["None"], ["", "", "def", "get_loader", "(", "utters", ",", "batch_size", "=", "100", ",", "data", "=", "None", ")", ":", "\n", "    ", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "contexts", ",", "res_true", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", "=", "zip", "(", "*", "data", ")", "\n", "\n", "return", "contexts", ",", "res_true", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", "\n", "\n", "", "dataset", "=", "UttersDataset", "(", "utters", ",", "data", "=", "data", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.data_loader.get_loader2": [[34, 45], ["data_loader.UttersDataset", "torch.utils.data.DataLoader", "zip"], "function", ["None"], ["", "def", "get_loader2", "(", "utters", ",", "batch_size", "=", "100", ",", "data", "=", "None", ")", ":", "\n", "    ", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "contexts", ",", "generated_utter", ",", "res_true", "=", "zip", "(", "*", "data", ")", "\n", "\n", "return", "contexts", ",", "generated_utter", ",", "res_true", "\n", "\n", "", "dataset", "=", "UttersDataset", "(", "utters", ",", "data", "=", "data", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var": [[6, 10], ["torch.cuda.is_available", "x.cuda.cuda"], "function", ["None"], ["def", "to_var", "(", "x", ",", "on_cpu", "=", "False", ",", "gpu_id", "=", "None", ",", "async_var", "=", "False", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "on_cpu", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", "gpu_id", ",", "async_var", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_tensor": [[12, 16], ["torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_tensor", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.pad": [[18, 30], ["isinstance", "var.size", "torch.cat", "tensor.size", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "var.size", "tensor.size", "var.size", "tensor.size"], "function", ["None"], ["", "def", "pad", "(", "tensor", ",", "length", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "Variable", ")", ":", "\n", "        ", "var", "=", "tensor", "\n", "if", "length", ">", "var", ".", "size", "(", "0", ")", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "var", ",", "torch", ".", "zeros", "(", "length", "-", "var", ".", "size", "(", "0", ")", ",", "*", "var", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "cuda", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "var", "\n", "", "", "else", ":", "\n", "        ", "if", "length", ">", "tensor", ".", "size", "(", "0", ")", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "tensor", ",", "torch", ".", "zeros", "(", "length", "-", "tensor", ".", "size", "(", "0", ")", ",", "*", "tensor", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "cuda", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.pad_and_pack": [[32, 38], ["max", "torch.stack", "t.size", "convert.pad"], "function", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.pad"], ["", "", "", "def", "pad_and_pack", "(", "tensor_list", ")", ":", "\n", "    ", "length_list", "=", "(", "[", "t", ".", "size", "(", "0", ")", "for", "t", "in", "tensor_list", "]", ")", "\n", "max_len", "=", "max", "(", "length_list", ")", "\n", "padded", "=", "[", "pad", "(", "t", ",", "max_len", ")", "for", "t", "in", "tensor_list", "]", "\n", "packed", "=", "torch", ".", "stack", "(", "padded", ",", "0", ")", "\n", "return", "packed", ",", "length_list", "\n", "", ""]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.load_save.load_pickle": [[5, 8], ["codecs.open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.load"], ["def", "load_pickle", "(", "path", ")", ":", "\n", "    ", "with", "codecs", ".", "open", "(", "path", ",", "'rb'", ")", "as", "input_f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "input_f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.__init__": [[18, 24], ["nltk.FreqDist"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "None", ",", "max_size", "=", "None", ",", "min_freq", "=", "1", ")", ":", "\n", "        ", "\"\"\"Basic Vocabulary object\"\"\"", "\n", "\n", "self", ".", "vocab_size", "=", "0", "\n", "self", ".", "freqdist", "=", "FreqDist", "(", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.update": [[25, 72], ["collections.defaultdict", "vocab.Vocab.word2id.update", "max", "vocab.Vocab.freqdist.copy", "vocab.Vocab.subtract", "sorted", "sorted.sort", "vocab.Vocab.items"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.update"], ["", "def", "update", "(", "self", ",", "max_size", "=", "None", ",", "min_freq", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Initialize id2word & word2id based on self.freqdist\n        max_size include 4 special tokens\n        \"\"\"", "\n", "\n", "# {0: '<pad>', 1: '<unk>', 2: '<sos>', 3: '<eos>'}", "\n", "self", ".", "id2word", "=", "{", "\n", "PAD_ID", ":", "PAD_TOKEN", ",", "UNK_ID", ":", "UNK_TOKEN", ",", "\n", "SOS_ID", ":", "SOS_TOKEN", ",", "EOS_ID", ":", "EOS_TOKEN", "\n", "}", "\n", "# {'<pad>': 0, '<unk>': 1, '<sos>': 2, '<eos>': 3}", "\n", "self", ".", "word2id", "=", "defaultdict", "(", "lambda", ":", "UNK_ID", ")", "# Not in vocab => return UNK", "\n", "self", ".", "word2id", ".", "update", "(", "{", "\n", "PAD_TOKEN", ":", "PAD_ID", ",", "UNK_TOKEN", ":", "UNK_ID", ",", "\n", "SOS_TOKEN", ":", "SOS_ID", ",", "EOS_TOKEN", ":", "EOS_ID", "\n", "}", ")", "\n", "# self.word2id = {", "\n", "#     PAD_TOKEN: PAD_ID, UNK_TOKEN: UNK_ID,", "\n", "#     SOS_TOKEN: SOS_ID, EOS_TOKEN: EOS_ID", "\n", "# }", "\n", "\n", "vocab_size", "=", "4", "\n", "min_freq", "=", "max", "(", "min_freq", ",", "1", ")", "\n", "\n", "# Reset frequencies of special tokens", "\n", "# [...('<eos>', 0), ('<pad>', 0), ('<sos>', 0), ('<unk>', 0)]", "\n", "freqdist", "=", "self", ".", "freqdist", ".", "copy", "(", ")", "\n", "special_freqdist", "=", "{", "token", ":", "freqdist", "[", "token", "]", "\n", "for", "token", "in", "[", "PAD_TOKEN", ",", "UNK_TOKEN", ",", "SOS_TOKEN", ",", "EOS_TOKEN", "]", "}", "\n", "freqdist", ".", "subtract", "(", "special_freqdist", ")", "\n", "\n", "# Sort: by frequency, then alphabetically", "\n", "# Ex) freqdist = { 'a': 4,   'b': 5,   'c': 3 }", "\n", "#  =>   sorted = [('b', 5), ('a', 4), ('c', 3)]", "\n", "sorted_frequency_counter", "=", "sorted", "(", "freqdist", ".", "items", "(", ")", ",", "key", "=", "lambda", "k_v", ":", "k_v", "[", "0", "]", ")", "\n", "sorted_frequency_counter", ".", "sort", "(", "key", "=", "lambda", "k_v", ":", "k_v", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "word", ",", "freq", "in", "sorted_frequency_counter", ":", "\n", "\n", "            ", "if", "freq", "<", "min_freq", "or", "vocab_size", "==", "max_size", ":", "\n", "                ", "break", "\n", "", "self", ".", "id2word", "[", "vocab_size", "]", "=", "word", "\n", "self", ".", "word2id", "[", "word", "]", "=", "vocab_size", "\n", "vocab_size", "+=", "1", "\n", "\n", "", "self", ".", "vocab_size", "=", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "id2word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.load": [[76, 89], ["collections.defaultdict", "vocab.Vocab.word2id.update", "len", "open", "pickle.load", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.update", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.load", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.load"], ["", "def", "load", "(", "self", ",", "word2id_path", "=", "None", ",", "id2word_path", "=", "None", ")", ":", "\n", "        ", "if", "word2id_path", ":", "\n", "            ", "with", "open", "(", "word2id_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "word2id", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# Can't pickle lambda function", "\n", "", "self", ".", "word2id", "=", "defaultdict", "(", "lambda", ":", "UNK_ID", ")", "\n", "self", ".", "word2id", ".", "update", "(", "word2id", ")", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "word2id", ")", "\n", "\n", "", "if", "id2word_path", ":", "\n", "            ", "with", "open", "(", "id2word_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "id2word", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "id2word", "=", "id2word", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.add_word": [[90, 93], ["isinstance", "vocab.Vocab.freqdist.update"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.update"], ["", "", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "assert", "isinstance", "(", "word", ",", "str", ")", ",", "'Input should be str'", "\n", "self", ".", "freqdist", ".", "update", "(", "[", "word", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.add_sentence": [[94, 99], ["vocab.Vocab.tokenizer", "vocab.Vocab.add_word"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.add_word"], ["", "def", "add_sentence", "(", "self", ",", "sentence", ",", "tokenized", "=", "False", ")", ":", "\n", "        ", "if", "not", "tokenized", ":", "\n", "            ", "sentence", "=", "self", ".", "tokenizer", "(", "sentence", ")", "\n", "", "for", "word", "in", "sentence", ":", "\n", "            ", "self", ".", "add_word", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.add_dataframe": [[100, 104], ["vocab.Vocab.add_sentence"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.add_sentence"], ["", "", "def", "add_dataframe", "(", "self", ",", "conversation_df", ",", "tokenized", "=", "True", ")", ":", "\n", "        ", "for", "conversation", "in", "conversation_df", ":", "\n", "            ", "for", "sentence", "in", "conversation", ":", "\n", "                ", "self", ".", "add_sentence", "(", "sentence", ",", "tokenized", "=", "tokenized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.add_utters": [[105, 108], ["vocab.Vocab.add_sentence"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.add_sentence"], ["", "", "", "def", "add_utters", "(", "self", ",", "utters_list", ",", "tokenized", "=", "True", ")", ":", "\n", "        ", "for", "utter", "in", "utters_list", ":", "\n", "            ", "self", ".", "add_sentence", "(", "utter", ",", "tokenized", "=", "tokenized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.pickle": [[109, 115], ["open", "pickle.dump", "open", "pickle.dump", "dict"], "methods", ["None"], ["", "", "def", "pickle", "(", "self", ",", "word2id_path", ",", "id2word_path", ")", ":", "\n", "        ", "with", "open", "(", "word2id_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "dict", "(", "self", ".", "word2id", ")", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "id2word_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "id2word", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.to_list": [[116, 125], ["isinstance", "isinstance", "list", "isinstance", "convert.to_tensor().numpy", "list", "list_like.numpy", "convert.to_tensor"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_tensor"], ["", "", "def", "to_list", "(", "self", ",", "list_like", ")", ":", "\n", "        ", "\"\"\"Convert list-like containers to list\"\"\"", "\n", "if", "isinstance", "(", "list_like", ",", "list", ")", ":", "\n", "            ", "return", "list_like", "\n", "\n", "", "if", "isinstance", "(", "list_like", ",", "Variable", ")", ":", "\n", "            ", "return", "list", "(", "to_tensor", "(", "list_like", ")", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "list_like", ",", "Tensor", ")", ":", "\n", "            ", "return", "list", "(", "list_like", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.id2sent": [[126, 137], ["vocab.Vocab.to_list", "sentence.append"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.to_list"], ["", "", "def", "id2sent", "(", "self", ",", "id_list", ")", ":", "\n", "        ", "\"\"\"list of id => list of tokens (Single sentence)\"\"\"", "\n", "id_list", "=", "self", ".", "to_list", "(", "id_list", ")", "\n", "sentence", "=", "[", "]", "\n", "for", "id", "in", "id_list", ":", "\n", "            ", "word", "=", "self", ".", "id2word", "[", "id", "]", "\n", "if", "word", "not", "in", "[", "EOS_TOKEN", ",", "SOS_TOKEN", ",", "PAD_TOKEN", "]", ":", "\n", "                ", "sentence", ".", "append", "(", "word", ")", "\n", "", "if", "word", "==", "EOS_TOKEN", ":", "\n", "                ", "break", "\n", "", "", "return", "sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.sent2id": [[138, 144], ["convert.to_var", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var"], ["", "def", "sent2id", "(", "self", ",", "sentence", ",", "var", "=", "False", ")", ":", "\n", "        ", "\"\"\"list of tokens => list of id (Single sentence)\"\"\"", "\n", "id_list", "=", "[", "self", ".", "word2id", "[", "word", "]", "for", "word", "in", "sentence", "]", "\n", "if", "var", ":", "\n", "            ", "id_list", "=", "to_var", "(", "torch", ".", "LongTensor", "(", "id_list", ")", ",", "eval", "=", "True", ")", "\n", "", "return", "id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.decode": [[145, 148], ["vocab.Vocab.id2sent"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.id2sent"], ["", "def", "decode", "(", "self", ",", "id_list", ")", ":", "\n", "        ", "sentence", "=", "self", ".", "id2sent", "(", "id_list", ")", "\n", "return", "' '", ".", "join", "(", "sentence", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.__init__": [[8, 16], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ConvScoreSSREM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "mat_M", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "config", ".", "embedding_size", ",", "config", ".", "embedding_size", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "score_active_func", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.forward": [[17, 36], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ssrem.ConvScoreSSREM.logsoftmax", "ssrem.ConvScoreSSREM._score", "ssrem.ConvScoreSSREM._score", "ssrem.ConvScoreSSREM._score", "ssrem.ConvScoreSSREM._score", "ssrem.ConvScoreSSREM._score"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM._score", "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM._score", "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM._score", "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM._score", "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM._score"], ["", "def", "forward", "(", "self", ",", "contexts", ",", "res_pos", ",", "res_neg1", "=", "None", ",", "res_neg2", "=", "None", ",", "res_neg3", "=", "None", ",", "res_neg4", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Forwarding\n        :param contexts: [batch_size, emb_size]\n        :param res_pos: [batch_size, emb_size]\n        :param res_neg1: [batch_size, emb_size]\n        :param res_neg2: [batch_size, emb_size]\n        :param res_neg3: [batch_size, emb_size]\n        :param res_neg4: [batch_size, emb_size]\n        :return: [batch_size]\n        \"\"\"", "\n", "ress", "=", "torch", ".", "cat", "(", "[", "self", ".", "_score", "(", "contexts", ",", "res_pos", ")", ",", "\n", "self", ".", "_score", "(", "contexts", ",", "res_neg1", ")", ",", "\n", "self", ".", "_score", "(", "contexts", ",", "res_neg2", ")", ",", "\n", "self", ".", "_score", "(", "contexts", ",", "res_neg3", ")", ",", "\n", "self", ".", "_score", "(", "contexts", ",", "res_neg4", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "log_ress_softmax", "=", "self", ".", "logsoftmax", "(", "ress", ")", "\n", "return", "log_ress_softmax", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM._score": [[37, 49], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "_score", "(", "self", ",", "contexts", ",", "res", ")", ":", "\n", "        ", "\"\"\"\n        Scoring function\n        :param contexts: [batch_size, emb_size]\n        :param res: [batch_size, emb_size]\n        :return: [batch_size, 1]\n        \"\"\"", "\n", "res_t", "=", "torch", ".", "transpose", "(", "res", ",", "0", ",", "1", ")", "\n", "score_compute_bb", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "contexts", ",", "self", ".", "mat_M", ")", ",", "res_t", ")", "\n", "scores", "=", "torch", ".", "diagonal", "(", "score_compute_bb", ",", "0", ")", "\n", "\n", "return", "torch", ".", "unsqueeze", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.score": [[50, 62], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "ssrem.ConvScoreSSREM.score_active_func", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "contexts", ",", "res", ")", ":", "\n", "        ", "\"\"\"\n        Scoring function\n        :param contexts: [batch_size, emb_size]\n        :param res: [batch_size, emb_size]\n        :return: [batch_size]\n        \"\"\"", "\n", "res_t", "=", "torch", ".", "transpose", "(", "res", ",", "0", ",", "1", ")", "\n", "score_compute_bb", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "contexts", ",", "self", ".", "mat_M", ")", ",", "res_t", ")", "\n", "scores", "=", "torch", ".", "diagonal", "(", "score_compute_bb", ",", "0", ")", "\n", "\n", "return", "self", ".", "score_active_func", "(", "scores", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscorenegv1_solver.SolverConvScoreSSREM.__init__": [[10, 12], ["convscore_solver.SolverConvScore.__init__"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "train_data_loader", ",", "eval_data_loader", ",", "is_train", "=", "True", ",", "model", "=", "None", ")", ":", "\n", "        ", "super", "(", "SolverConvScoreSSREM", ",", "self", ")", ".", "__init__", "(", "config", ",", "train_data_loader", ",", "eval_data_loader", ",", "is_train", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscorenegv1_solver.SolverConvScoreSSREM.train": [[13, 69], ["range", "convscorenegv1_solver.SolverConvScoreSSREM.save_model", "convscorenegv1_solver.SolverConvScoreSSREM.model.train", "enumerate", "numpy.mean", "epoch_loss_history.append", "convscorenegv1_solver.SolverConvScoreSSREM.evaluate", "print", "tqdm.tqdm.tqdm", "utils.to_var", "utils.to_var", "utils.to_var", "utils.to_var", "utils.to_var", "utils.to_var", "convscorenegv1_solver.SolverConvScoreSSREM.optimizer.zero_grad", "convscorenegv1_solver.SolverConvScoreSSREM.model", "batch_loss_history.append", "batch_loss.backward", "torch.nn.utils.clip_grad_norm_", "convscorenegv1_solver.SolverConvScoreSSREM.optimizer.step", "convscorenegv1_solver.SolverConvScoreSSREM.save_model", "convscorenegv1_solver.SolverConvScoreSSREM.write_summary", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.sum", "math.isnan", "batch_loss.item", "tqdm.tqdm.tqdm.write", "convscorenegv1_solver.SolverConvScoreSSREM.model.parameters", "batch_loss.item", "batch_loss.item"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.save_model", "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.train", "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.evaluate", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.save_model", "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.write_summary"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "epoch_loss_history", "=", "[", "]", "\n", "for", "epoch_i", "in", "range", "(", "self", ".", "epoch_i", ",", "self", ".", "config", ".", "n_epoch", ")", ":", "\n", "            ", "self", ".", "epoch_i", "=", "epoch_i", "\n", "batch_loss_history", "=", "[", "]", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "batch_i", ",", "(", "contexts", ",", "res_true", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", ")", "in", "enumerate", "(", "tqdm", "(", "self", ".", "train_data_loader", ",", "ncols", "=", "80", ")", ")", ":", "\n", "                ", "contexts", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "contexts", ")", ")", "\n", "res_trues", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_true", ")", ")", "\n", "res_ns1", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns1", ")", ")", "\n", "res_ns2", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns2", ")", ")", "\n", "res_ns3", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns3", ")", ")", "\n", "res_ns4", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns4", ")", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Call forward function", "\n", "batch_loglikelihood", "=", "self", ".", "model", "(", "contexts", ",", "res_trues", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", ")", "\n", "batch_loss", "=", "-", "torch", ".", "sum", "(", "batch_loglikelihood", ")", "\n", "\n", "assert", "not", "isnan", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "batch_loss_history", ".", "append", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "batch_i", "%", "self", ".", "config", ".", "print_every", "==", "0", ":", "\n", "                    ", "tqdm", ".", "write", "(", "f'Epoch: {epoch_i+1}, iter {batch_i}: loss = {batch_loss.item():.3f}'", ")", "\n", "\n", "# Back-propagation", "\n", "", "batch_loss", ".", "backward", "(", ")", "\n", "\n", "# Gradient cliping", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "config", ".", "clip", ")", "\n", "\n", "# Run optimizer", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "epoch_loss", "=", "np", ".", "mean", "(", "batch_loss_history", ")", "\n", "epoch_loss_history", ".", "append", "(", "epoch_loss", ")", "\n", "self", ".", "epoch_loss", "=", "epoch_loss", "\n", "\n", "if", "epoch_i", "%", "self", ".", "config", ".", "save_every_epoch", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "epoch_i", "+", "1", ")", "\n", "\n", "", "self", ".", "true_scores", ",", "self", ".", "false_scores", ",", "self", ".", "eval_epoch_loss", "=", "self", ".", "evaluate", "(", ")", "\n", "\n", "print_str", "=", "f'Epoch {epoch_i + 1} loss average: {epoch_loss:.3f}, '", "f'True:{self.true_scores:.3f}, False:{self.false_scores:.3f}, '", "f'Validation loss: {self.eval_epoch_loss:.3f}'", "\n", "print", "(", "print_str", ")", "\n", "\n", "if", "epoch_i", "%", "self", ".", "config", ".", "plot_every_epoch", "==", "0", ":", "\n", "                ", "self", ".", "write_summary", "(", "epoch_i", ")", "\n", "\n", "", "", "self", ".", "save_model", "(", "self", ".", "config", ".", "n_epoch", ")", "\n", "\n", "return", "epoch_loss_history", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscorenegv1_solver.SolverConvScoreSSREM.evaluate": [[70, 102], ["convscorenegv1_solver.SolverConvScoreSSREM.model.eval", "list", "list", "list", "enumerate", "numpy.sum", "tqdm.tqdm.tqdm", "convscorenegv1_solver.SolverConvScoreSSREM.model.score", "convscorenegv1_solver.SolverConvScoreSSREM.model.score", "convscorenegv1_solver.SolverConvScoreSSREM.data.cpu().numpy().tolist", "convscorenegv1_solver.SolverConvScoreSSREM.data.cpu().numpy().tolist", "convscorenegv1_solver.SolverConvScoreSSREM.model", "list.append", "numpy.mean", "numpy.mean", "torch.no_grad", "utils.to_var", "utils.to_var", "utils.to_var", "utils.to_var", "utils.to_var", "utils.to_var", "torch.sum", "math.isnan", "batch_loss.item", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "convscorenegv1_solver.SolverConvScoreSSREM.data.cpu().numpy", "convscorenegv1_solver.SolverConvScoreSSREM.data.cpu().numpy", "batch_loss.item", "convscorenegv1_solver.SolverConvScoreSSREM.data.cpu", "convscorenegv1_solver.SolverConvScoreSSREM.data.cpu"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.score", "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.score", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "true_scores_list", "=", "list", "(", ")", "\n", "false_scores_list", "=", "list", "(", ")", "\n", "batch_loss_history", "=", "list", "(", ")", "\n", "for", "batch_i", ",", "(", "contexts", ",", "res_true", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", ")", "in", "enumerate", "(", "tqdm", "(", "self", ".", "eval_data_loader", ",", "ncols", "=", "80", ")", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "contexts", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "contexts", ")", ")", "\n", "res_trues", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_true", ")", ")", "\n", "res_ns1", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns1", ")", ")", "\n", "res_ns2", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns2", ")", ")", "\n", "res_ns3", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns3", ")", ")", "\n", "res_ns4", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns4", ")", ")", "\n", "\n", "# Call forward function", "\n", "", "true_scores", "=", "self", ".", "model", ".", "score", "(", "contexts", ",", "res_trues", ")", "\n", "false_scores", "=", "self", ".", "model", ".", "score", "(", "contexts", ",", "res_ns4", ")", "\n", "\n", "true_scores_list", "+=", "true_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "false_scores_list", "+=", "false_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Call forward function", "\n", "batch_loglikelihood", "=", "self", ".", "model", "(", "contexts", ",", "res_trues", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", ")", "\n", "batch_loss", "=", "-", "torch", ".", "sum", "(", "batch_loglikelihood", ")", "\n", "\n", "assert", "not", "isnan", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "batch_loss_history", ".", "append", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "epoch_loss", "=", "np", ".", "sum", "(", "batch_loss_history", ")", "\n", "\n", "return", "np", ".", "mean", "(", "true_scores_list", ")", ",", "np", ".", "mean", "(", "false_scores_list", ")", ",", "epoch_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.__init__": [[9, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "train_data_loader", ",", "eval_data_loader", ",", "is_train", "=", "True", ",", "model", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "epoch_i", "=", "0", "\n", "self", ".", "train_data_loader", "=", "train_data_loader", "\n", "self", ".", "eval_data_loader", "=", "eval_data_loader", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "writer", "=", "None", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "epoch_loss", "=", "None", "\n", "self", ".", "validation_loss", "=", "None", "\n", "self", ".", "true_scores", "=", "0", "\n", "self", ".", "false_scores", "=", "0", "\n", "self", ".", "eval_epoch_loss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.build": [[24, 38], ["torch.cuda.is_available", "solver.Solver.model.cuda", "solver.Solver.load_model", "utils.TensorboardWriter", "solver.Solver.config.optimizer", "getattr", "filter", "solver.Solver.model.parameters"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.load_model"], ["", "def", "build", "(", "self", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "model", "=", "getattr", "(", "models", ",", "self", ".", "config", ".", "model", ")", "(", "self", ".", "config", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "cuda", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "checkpoint", ":", "\n", "            ", "self", ".", "load_model", "(", "self", ".", "config", ".", "checkpoint", ")", "\n", "\n", "", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "writer", "=", "TensorboardWriter", "(", "self", ".", "config", ".", "logdir", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "config", ".", "optimizer", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.save_model": [[39, 43], ["os.path.join", "print", "torch.save", "solver.Solver.model.state_dict"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "save_path", ",", "f'{epoch}.pkl'", ")", "\n", "print", "(", "f'Save parameters to {ckpt_path}'", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "ckpt_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.load_model": [[44, 49], ["print", "re.match().group", "int", "solver.Solver.model.load_state_dict", "torch.load", "re.match", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.vocab.Vocab.load"], ["", "def", "load_model", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "print", "(", "f'Load parameters from {checkpoint}'", ")", "\n", "epoch", "=", "re", ".", "match", "(", "r\"[0-9]*\"", ",", "os", ".", "path", ".", "basename", "(", "checkpoint", ")", ")", ".", "group", "(", "0", ")", "\n", "self", ".", "epoch_i", "=", "int", "(", "epoch", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "checkpoint", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.write_summary": [[50, 56], ["getattr", "solver.Solver.writer.update_loss"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.tensorboard.TensorboardWriter.update_loss"], ["", "def", "write_summary", "(", "self", ",", "epoch_i", ")", ":", "\n", "        ", "epoch_loss", "=", "getattr", "(", "self", ",", "'epoch_loss'", ",", "None", ")", "\n", "if", "epoch_loss", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "update_loss", "(", "loss", "=", "epoch_loss", ",", "step_i", "=", "epoch_i", "+", "1", ",", "name", "=", "'train_loss'", ")", "\n", "\n", "", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.train": [[57, 59], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.evaluate": [[60, 62], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.test": [[63, 65], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.__init__": [[11, 13], ["solver.Solver.__init__"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "train_data_loader", ",", "eval_data_loader", ",", "is_train", "=", "True", ",", "model", "=", "None", ")", ":", "\n", "        ", "super", "(", "SolverConvScore", ",", "self", ")", ".", "__init__", "(", "config", ",", "train_data_loader", ",", "eval_data_loader", ",", "is_train", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.write_summary": [[14, 30], ["getattr", "getattr", "getattr", "getattr", "convscore_solver.SolverConvScore.writer.update_loss", "convscore_solver.SolverConvScore.writer.update_loss", "convscore_solver.SolverConvScore.writer.update_loss", "convscore_solver.SolverConvScore.writer.update_loss"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.utils.tensorboard.TensorboardWriter.update_loss", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.tensorboard.TensorboardWriter.update_loss", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.tensorboard.TensorboardWriter.update_loss", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.tensorboard.TensorboardWriter.update_loss"], ["", "def", "write_summary", "(", "self", ",", "epoch_i", ")", ":", "\n", "        ", "epoch_loss", "=", "getattr", "(", "self", ",", "'epoch_loss'", ",", "None", ")", "\n", "if", "epoch_loss", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "update_loss", "(", "loss", "=", "epoch_loss", ",", "step_i", "=", "epoch_i", "+", "1", ",", "name", "=", "'train_loss'", ")", "\n", "\n", "", "true_scores", "=", "getattr", "(", "self", ",", "'true_scores'", ",", "None", ")", "\n", "if", "true_scores", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "update_loss", "(", "loss", "=", "true_scores", ",", "step_i", "=", "epoch_i", "+", "1", ",", "name", "=", "'true_scores'", ")", "\n", "\n", "", "false_scores", "=", "getattr", "(", "self", ",", "'false_scores'", ",", "None", ")", "\n", "if", "false_scores", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "update_loss", "(", "loss", "=", "false_scores", ",", "step_i", "=", "epoch_i", "+", "1", ",", "name", "=", "'false_scores'", ")", "\n", "\n", "", "eval_epoch_loss", "=", "getattr", "(", "self", ",", "'eval_epoch_loss'", ",", "None", ")", "\n", "if", "false_scores", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "update_loss", "(", "loss", "=", "eval_epoch_loss", ",", "step_i", "=", "epoch_i", "+", "1", ",", "name", "=", "'eval_epoch_loss'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.train": [[31, 87], ["range", "convscore_solver.SolverConvScore.save_model", "convscore_solver.SolverConvScore.model.train", "enumerate", "numpy.mean", "epoch_loss_history.append", "convscore_solver.SolverConvScore.evaluate", "print", "tqdm.tqdm.tqdm", "utils.to_var", "utils.to_var", "utils.to_var", "convscore_solver.SolverConvScore.optimizer.zero_grad", "utils.to_var.size", "utils.to_var", "convscore_solver.SolverConvScore.model", "torch.sum", "batch_loss_history.append", "torch.sum.backward", "torch.nn.utils.clip_grad_norm_", "convscore_solver.SolverConvScore.optimizer.step", "convscore_solver.SolverConvScore.save_model", "convscore_solver.SolverConvScore.write_summary", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.zeros", "math.isnan", "torch.sum.item", "tqdm.tqdm.tqdm.write", "convscore_solver.SolverConvScore.model.parameters", "torch.sum.item", "torch.sum.item"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.save_model", "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.train", "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.evaluate", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.solver.Solver.save_model", "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.write_summary"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "epoch_loss_history", "=", "[", "]", "\n", "for", "epoch_i", "in", "range", "(", "self", ".", "epoch_i", ",", "self", ".", "config", ".", "n_epoch", ")", ":", "\n", "            ", "self", ".", "epoch_i", "=", "epoch_i", "\n", "batch_loss_history", "=", "[", "]", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "batch_i", ",", "(", "contexts", ",", "res_true", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", ")", "in", "enumerate", "(", "tqdm", "(", "self", ".", "train_data_loader", ",", "ncols", "=", "80", ")", ")", ":", "\n", "                ", "contexts", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "contexts", ")", ")", "\n", "res_trues", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_true", ")", ")", "\n", "res_falses", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns4", ")", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Call forward function", "\n", "batch_size", "=", "contexts", ".", "size", "(", "0", ")", "\n", "zeros", "=", "to_var", "(", "torch", ".", "zeros", "(", "batch_size", ")", ")", "\n", "_", ",", "combine_loss", "=", "self", ".", "model", "(", "contexts", ",", "res_trues", ",", "res_falses", ",", "zeros", ")", "\n", "\n", "batch_loss", "=", "torch", ".", "sum", "(", "-", "combine_loss", ")", "\n", "\n", "assert", "not", "isnan", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "batch_loss_history", ".", "append", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "batch_i", "%", "self", ".", "config", ".", "print_every", "==", "0", ":", "\n", "                    ", "tqdm", ".", "write", "(", "f'Epoch: {epoch_i+1}, iter {batch_i}: loss = {batch_loss.item():.3f}'", ")", "\n", "\n", "# Back-propagation", "\n", "", "batch_loss", ".", "backward", "(", ")", "\n", "\n", "# Gradient cliping", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "config", ".", "clip", ")", "\n", "\n", "# Run optimizer", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "epoch_loss", "=", "np", ".", "mean", "(", "batch_loss_history", ")", "\n", "epoch_loss_history", ".", "append", "(", "epoch_loss", ")", "\n", "self", ".", "epoch_loss", "=", "epoch_loss", "\n", "\n", "if", "epoch_i", "%", "self", ".", "config", ".", "save_every_epoch", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "epoch_i", "+", "1", ")", "\n", "\n", "", "self", ".", "true_scores", ",", "self", ".", "false_scores", ",", "self", ".", "eval_epoch_loss", "=", "self", ".", "evaluate", "(", ")", "\n", "\n", "print_str", "=", "f'Epoch {epoch_i + 1} loss average: {epoch_loss:.3f}, '", "f'True:{self.true_scores:.3f}, False:{self.false_scores:.3f}, '", "f'Validation loss: {self.eval_epoch_loss:.3f}'", "\n", "print", "(", "print_str", ")", "\n", "\n", "if", "epoch_i", "%", "self", ".", "config", ".", "plot_every_epoch", "==", "0", ":", "\n", "                ", "self", ".", "write_summary", "(", "epoch_i", ")", "\n", "\n", "", "", "self", ".", "save_model", "(", "self", ".", "config", ".", "n_epoch", ")", "\n", "\n", "return", "epoch_loss_history", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.evaluate": [[88, 120], ["convscore_solver.SolverConvScore.model.eval", "list", "list", "list", "enumerate", "numpy.sum", "tqdm.tqdm.tqdm", "convscore_solver.SolverConvScore.model.score", "convscore_solver.SolverConvScore.model.score", "convscore_solver.SolverConvScore.data.cpu().numpy().tolist", "convscore_solver.SolverConvScore.data.cpu().numpy().tolist", "utils.to_var.size", "utils.to_var", "convscore_solver.SolverConvScore.model", "torch.sum", "list.append", "numpy.mean", "numpy.mean", "torch.no_grad", "utils.to_var", "utils.to_var", "utils.to_var", "torch.zeros", "math.isnan", "torch.sum.item", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "convscore_solver.SolverConvScore.data.cpu().numpy", "convscore_solver.SolverConvScore.data.cpu().numpy", "torch.sum.item", "convscore_solver.SolverConvScore.data.cpu", "convscore_solver.SolverConvScore.data.cpu"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.score", "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.score", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "true_scores_list", "=", "list", "(", ")", "\n", "false_scores_list", "=", "list", "(", ")", "\n", "batch_loss_history", "=", "list", "(", ")", "\n", "for", "batch_i", ",", "(", "contexts", ",", "res_true", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", ")", "in", "enumerate", "(", "tqdm", "(", "self", ".", "eval_data_loader", ",", "ncols", "=", "80", ")", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "contexts", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "contexts", ")", ")", "\n", "res_trues", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_true", ")", ")", "\n", "res_falses", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns4", ")", ")", "\n", "\n", "# Call forward function", "\n", "", "true_scores", "=", "self", ".", "model", ".", "score", "(", "contexts", ",", "res_trues", ")", "\n", "false_scores", "=", "self", ".", "model", ".", "score", "(", "contexts", ",", "res_falses", ")", "\n", "\n", "true_scores_list", "+=", "true_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "false_scores_list", "+=", "false_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Call forward function", "\n", "batch_size", "=", "contexts", ".", "size", "(", "0", ")", "\n", "zeros", "=", "to_var", "(", "torch", ".", "zeros", "(", "batch_size", ")", ")", "\n", "_", ",", "combine_loss", "=", "self", ".", "model", "(", "contexts", ",", "res_trues", ",", "res_falses", ",", "zeros", ")", "\n", "\n", "# batch_loss, n_words = masked_cross_entropy(sentence_logits, target_sentences, target_sentence_length)", "\n", "batch_loss", "=", "torch", ".", "sum", "(", "-", "combine_loss", ")", "\n", "assert", "not", "isnan", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "batch_loss_history", ".", "append", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "epoch_loss", "=", "np", ".", "sum", "(", "batch_loss_history", ")", "\n", "\n", "return", "np", ".", "mean", "(", "true_scores_list", ")", ",", "np", ".", "mean", "(", "false_scores_list", ")", ",", "epoch_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.test": [[121, 142], ["convscore_solver.SolverConvScore.model.eval", "list", "list", "enumerate", "tqdm.tqdm.tqdm", "convscore_solver.SolverConvScore.model.score", "convscore_solver.SolverConvScore.model.score", "convscore_solver.SolverConvScore.data.cpu().numpy().tolist", "convscore_solver.SolverConvScore.data.cpu().numpy().tolist", "torch.no_grad", "utils.to_var", "utils.to_var", "utils.to_var", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "convscore_solver.SolverConvScore.data.cpu().numpy", "convscore_solver.SolverConvScore.data.cpu().numpy", "convscore_solver.SolverConvScore.data.cpu", "convscore_solver.SolverConvScore.data.cpu"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.score", "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.score", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "true_scores_list", "=", "list", "(", ")", "\n", "false_scores_list", "=", "list", "(", ")", "\n", "for", "batch_i", ",", "(", "contexts", ",", "res_true", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", ")", "in", "enumerate", "(", "tqdm", "(", "self", ".", "eval_data_loader", ",", "ncols", "=", "80", ")", ")", ":", "\n", "            ", "ns_list", "=", "[", "None", ",", "res_ns1", ",", "res_ns2", ",", "res_ns3", ",", "res_ns4", "]", "\n", "res_ns", "=", "ns_list", "[", "self", ".", "config", ".", "test_target_ng", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "contexts", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "contexts", ")", ")", "\n", "res_trues", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_true", ")", ")", "\n", "res_falses", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_ns", ")", ")", "\n", "\n", "# Call forward function", "\n", "", "true_scores", "=", "self", ".", "model", ".", "score", "(", "contexts", ",", "res_trues", ")", "\n", "false_scores", "=", "self", ".", "model", ".", "score", "(", "contexts", ",", "res_falses", ")", "\n", "\n", "true_scores_list", "+=", "true_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "false_scores_list", "+=", "false_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "return", "true_scores_list", ",", "false_scores_list", "\n", "\n"]], "home.repos.pwc.inspect_result.NoSyu_SSREM.solvers.convscore_solver.SolverConvScore.test2": [[143, 161], ["convscore_solver.SolverConvScore.model.eval", "list", "list", "enumerate", "tqdm.tqdm.tqdm", "convscore_solver.SolverConvScore.model.score", "convscore_solver.SolverConvScore.model.score", "convscore_solver.SolverConvScore.data.cpu().numpy().tolist", "convscore_solver.SolverConvScore.data.cpu().numpy().tolist", "torch.no_grad", "utils.to_var", "utils.to_var", "utils.to_var", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "convscore_solver.SolverConvScore.data.cpu().numpy", "convscore_solver.SolverConvScore.data.cpu().numpy", "convscore_solver.SolverConvScore.data.cpu", "convscore_solver.SolverConvScore.data.cpu"], "methods", ["home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.score", "home.repos.pwc.inspect_result.NoSyu_SSREM.models.ssrem.ConvScoreSSREM.score", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var", "home.repos.pwc.inspect_result.NoSyu_SSREM.utils.convert.to_var"], ["", "def", "test2", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "test_scores_list", "=", "list", "(", ")", "\n", "ground_scores_list", "=", "list", "(", ")", "\n", "for", "batch_i", ",", "(", "contexts", ",", "res_tests", ",", "res_grounds", ")", "in", "enumerate", "(", "tqdm", "(", "self", ".", "eval_data_loader", ",", "ncols", "=", "80", ")", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "contexts", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "contexts", ")", ")", "\n", "res_tests", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_tests", ")", ")", "\n", "res_grounds", "=", "to_var", "(", "torch", ".", "FloatTensor", "(", "res_grounds", ")", ")", "\n", "\n", "# Call forward function", "\n", "", "test_scores", "=", "self", ".", "model", ".", "score", "(", "contexts", ",", "res_tests", ")", "\n", "ground_scores", "=", "self", ".", "model", ".", "score", "(", "contexts", ",", "res_grounds", ")", "\n", "\n", "test_scores_list", "+=", "test_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "ground_scores_list", "+=", "ground_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "return", "test_scores_list", ",", "ground_scores_list", "\n", "", "", ""]]}