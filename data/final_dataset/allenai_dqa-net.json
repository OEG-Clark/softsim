{"home.repos.pwc.inspect_result.allenai_dqa-net.None.create_fold.create_linear_fold": [[8, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "set", "list", "int", "print", "json.dump", "sorted", "random.shuffle", "open", "len", "os.path.splitext", "os.listdir", "name.endswith", "len", "os.path.splitext", "os.listdir", "int", "name.endswith"], "function", ["None"], ["def", "create_linear_fold", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"data_dir\"", ")", "\n", "parser", ".", "add_argument", "(", "\"fold_path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ratio\"", ",", "type", "=", "float", ",", "default", "=", "0.8", ")", "\n", "parser", ".", "add_argument", "(", "\"--shuffle\"", ",", "default", "=", "\"False\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "images_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"images\"", ")", "\n", "annotations_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"annotations\"", ")", "\n", "ratio", "=", "args", ".", "ratio", "\n", "shuffle", "=", "args", ".", "shuffle", "==", "'True'", "\n", "fold_path", "=", "args", ".", "fold_path", "\n", "annotation_names", "=", "set", "(", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "0", "]", "for", "name", "in", "os", ".", "listdir", "(", "annotations_dir", ")", "if", "name", ".", "endswith", "(", "\".json\"", ")", ")", "\n", "image_ids", "=", "list", "(", "sorted", "(", "[", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "0", "]", "\n", "for", "name", "in", "os", ".", "listdir", "(", "images_dir", ")", "if", "name", ".", "endswith", "(", "\".png\"", ")", "and", "name", "in", "annotation_names", "]", ",", "\n", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", ")", "\n", "if", "shuffle", ":", "\n", "        ", "random", ".", "shuffle", "(", "image_ids", ")", "\n", "\n", "", "mid", "=", "int", "(", "len", "(", "image_ids", ")", "*", "(", "1", "-", "ratio", ")", ")", "\n", "print", "(", "\"train={}, test={}\"", ".", "format", "(", "len", "(", "image_ids", ")", "-", "mid", ",", "mid", ")", ")", "\n", "fold", "=", "{", "'train'", ":", "image_ids", "[", "mid", ":", "]", ",", "'test'", ":", "image_ids", "[", ":", "mid", "]", "}", "\n", "json", ".", "dump", "(", "fold", ",", "open", "(", "fold_path", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.None.create_fold.create_randomly_categorized_fold": [[36, 69], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "json.load", "collections.defaultdict", "json.load.items", "list", "print", "print", "print", "sorted", "sorted", "json.dump", "open", "os.path.splitext", "ids_dict[].add", "collections.defaultdict.keys", "random.shuffle", "int", "set.union", "set.union", "open", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Memory.add"], ["", "def", "create_randomly_categorized_fold", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"cat_path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"fold_path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_cats\"", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "\"--ratio\"", ",", "type", "=", "float", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "cats_path", "=", "args", ".", "cat_path", "\n", "test_cats", "=", "args", ".", "test_cats", "\n", "cat_dict", "=", "json", ".", "load", "(", "open", "(", "cats_path", ",", "'r'", ")", ")", "\n", "ids_dict", "=", "defaultdict", "(", "set", ")", "\n", "for", "image_name", ",", "cat", "in", "cat_dict", ".", "items", "(", ")", ":", "\n", "        ", "image_id", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "image_name", ")", "\n", "ids_dict", "[", "cat", "]", ".", "add", "(", "image_id", ")", "\n", "\n", "", "cats", "=", "list", "(", "ids_dict", ".", "keys", "(", ")", ")", "\n", "print", "(", "cats", ")", "\n", "if", "test_cats", "is", "None", ":", "\n", "        ", "random", ".", "shuffle", "(", "cats", ")", "\n", "mid", "=", "int", "(", "args", ".", "ratio", "*", "len", "(", "cats", ")", ")", "\n", "train_cats", "=", "cats", "[", ":", "mid", "]", "\n", "test_cats", "=", "cats", "[", "mid", ":", "]", "\n", "", "else", ":", "\n", "        ", "for", "cat", "in", "test_cats", ":", "\n", "            ", "assert", "cat", "in", "ids_dict", ",", "\"%d id not a valid category.\"", "%", "cat", "\n", "", "train_cats", "=", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "not", "in", "test_cats", "]", "\n", "\n", "", "print", "(", "\"train categories: %s\"", "%", "\", \"", ".", "join", "(", "train_cats", ")", ")", "\n", "print", "(", "\"test categories: %s\"", "%", "\", \"", ".", "join", "(", "test_cats", ")", ")", "\n", "train_ids", "=", "sorted", "(", "set", ".", "union", "(", "*", "[", "ids_dict", "[", "cat", "]", "for", "cat", "in", "train_cats", "]", ")", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "test_ids", "=", "sorted", "(", "set", ".", "union", "(", "*", "[", "ids_dict", "[", "cat", "]", "for", "cat", "in", "test_cats", "]", ")", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "fold", "=", "{", "'train'", ":", "train_ids", ",", "'test'", ":", "test_ids", ",", "'trainCats'", ":", "train_cats", ",", "'testCats'", ":", "test_cats", "}", "\n", "json", ".", "dump", "(", "fold", ",", "open", "(", "args", ".", "fold_path", ",", "\"w\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar": [[6, 10], ["isinstance", "progressbar.ProgressBar", "progressbar.Percentage", "progressbar.Bar", "progressbar.ETA"], "function", ["None"], ["def", "get_pbar", "(", "num", ",", "prefix", "=", "\"\"", ")", ":", "\n", "    ", "assert", "isinstance", "(", "prefix", ",", "str", ")", "\n", "pbar", "=", "pb", ".", "ProgressBar", "(", "widgets", "=", "[", "prefix", ",", "pb", ".", "Percentage", "(", ")", ",", "pb", ".", "Bar", "(", ")", ",", "pb", ".", "ETA", "(", ")", "]", ",", "maxval", "=", "num", ")", "\n", "return", "pbar", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.json_pretty_dump": [[12, 14], ["json.dump"], "function", ["None"], ["", "def", "json_pretty_dump", "(", "obj", ",", "fh", ")", ":", "\n", "    ", "return", "json", ".", "dump", "(", "obj", ",", "fh", ",", "sort_keys", "=", "True", ",", "indent", "=", "2", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.__init__": [[13, 25], ["len", "int", "r05.DataSet.reset", "int"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.reset"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "batch_size", ",", "data", ",", "idxs", ",", "idx2id", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "num_epochs_completed", "=", "0", "\n", "self", ".", "idx_in_epoch", "=", "0", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "idxs", "=", "idxs", "\n", "self", ".", "idx2id", "=", "idx2id", "\n", "self", ".", "num_examples", "=", "len", "(", "idxs", ")", "\n", "self", ".", "num_full_batches", "=", "int", "(", "self", ".", "num_examples", "/", "self", ".", "batch_size", ")", "\n", "self", ".", "num_all_batches", "=", "self", ".", "num_full_batches", "+", "int", "(", "self", ".", "num_examples", "%", "self", ".", "batch_size", ">", "0", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.get_num_batches": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_num_batches", "(", "self", ",", "partial", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "num_all_batches", "if", "partial", "else", "self", ".", "num_full_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.get_batch_idxs": [[29, 36], ["r05.DataSet.has_next_batch"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.has_next_batch"], ["", "def", "get_batch_idxs", "(", "self", ",", "partial", "=", "False", ")", ":", "\n", "        ", "assert", "self", ".", "has_next_batch", "(", "partial", "=", "partial", ")", ",", "\"End of data, reset required.\"", "\n", "from_", ",", "to", "=", "self", ".", "idx_in_epoch", ",", "self", ".", "idx_in_epoch", "+", "self", ".", "batch_size", "\n", "if", "partial", "and", "to", ">", "self", ".", "num_examples", ":", "\n", "            ", "to", "=", "self", ".", "num_examples", "\n", "", "cur_idxs", "=", "self", ".", "idxs", "[", "from_", ":", "to", "]", "\n", "return", "cur_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.get_next_labeled_batch": [[37, 42], ["r05.DataSet.get_batch_idxs", "len"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.get_batch_idxs"], ["", "def", "get_next_labeled_batch", "(", "self", ",", "partial", "=", "False", ")", ":", "\n", "        ", "cur_idxs", "=", "self", ".", "get_batch_idxs", "(", "partial", "=", "partial", ")", "\n", "batch", "=", "[", "[", "each", "[", "i", "]", "for", "i", "in", "cur_idxs", "]", "for", "each", "in", "self", ".", "data", "]", "\n", "self", ".", "idx_in_epoch", "+=", "len", "(", "cur_idxs", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.has_next_batch": [[43, 47], ["None"], "methods", ["None"], ["", "def", "has_next_batch", "(", "self", ",", "partial", "=", "False", ")", ":", "\n", "        ", "if", "partial", ":", "\n", "            ", "return", "self", ".", "idx_in_epoch", "<", "self", ".", "num_examples", "\n", "", "return", "self", ".", "idx_in_epoch", "+", "self", ".", "batch_size", "<=", "self", ".", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.complete_epoch": [[48, 51], ["r05.DataSet.reset"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.reset"], ["", "def", "complete_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "self", ".", "num_epochs_completed", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.reset": [[52, 55], ["numpy.random.shuffle"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "idx_in_epoch", "=", "0", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.read_data": [[57, 105], ["print", "json.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "json.load", "json.load", "json.load", "h5py.File", "json.load", "numpy.arange", "r05.DataSet", "print", "open", "open", "open", "open", "open", "enumerate", "len", "Exception", "enumerate", "zip", "sentss.append", "answers.append", "factss.append", "images.append", "idx2id.append"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load"], ["", "", "def", "read_data", "(", "params", ",", "mode", ")", ":", "\n", "    ", "print", "(", "\"loading {} data ... \"", ".", "format", "(", "mode", ")", ")", "\n", "data_dir", "=", "params", ".", "data_dir", "\n", "\n", "fold_path", "=", "params", ".", "fold_path", "\n", "fold", "=", "json", ".", "load", "(", "open", "(", "fold_path", ",", "'r'", ")", ")", "\n", "if", "mode", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "        ", "cur_image_ids", "=", "fold", "[", "mode", "]", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "cur_image_ids", "=", "fold", "[", "'test'", "]", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", ")", "\n", "\n", "", "sents_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"sents.json\"", ")", "\n", "facts_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"facts.json\"", ")", "\n", "answers_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"answers.json\"", ")", "\n", "images_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"images.h5\"", ")", "\n", "image_ids_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"image_ids.json\"", ")", "\n", "\n", "sentss_dict", "=", "json", ".", "load", "(", "open", "(", "sents_path", ",", "\"r\"", ")", ")", "\n", "facts_dict", "=", "json", ".", "load", "(", "open", "(", "facts_path", ",", "\"r\"", ")", ")", "\n", "answers_dict", "=", "json", ".", "load", "(", "open", "(", "answers_path", ",", "\"r\"", ")", ")", "\n", "images_h5", "=", "h5py", ".", "File", "(", "images_path", ",", "'r'", ")", "\n", "all_image_ids", "=", "json", ".", "load", "(", "open", "(", "image_ids_path", ",", "'r'", ")", ")", "\n", "image_id2idx", "=", "{", "id_", ":", "idx", "for", "idx", ",", "id_", "in", "enumerate", "(", "all_image_ids", ")", "}", "\n", "\n", "batch_size", "=", "params", ".", "batch_size", "\n", "sentss", ",", "answers", ",", "factss", ",", "images", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "idx", "=", "0", "\n", "idx2id", "=", "[", "]", "\n", "for", "image_id", "in", "cur_image_ids", ":", "\n", "        ", "if", "image_id", "not", "in", "sentss_dict", "or", "image_id", "not", "in", "facts_dict", ":", "\n", "            ", "continue", "\n", "", "facts", "=", "facts_dict", "[", "image_id", "]", "\n", "image", "=", "images_h5", "[", "'data'", "]", "[", "image_id2idx", "[", "image_id", "]", "]", "\n", "for", "sent_id", ",", "(", "sents", ",", "answer", ")", "in", "enumerate", "(", "zip", "(", "sentss_dict", "[", "image_id", "]", ",", "answers_dict", "[", "image_id", "]", ")", ")", ":", "\n", "            ", "sentss", ".", "append", "(", "sents", ")", "\n", "answers", ".", "append", "(", "answer", ")", "\n", "factss", ".", "append", "(", "facts", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "idx2id", ".", "append", "(", "[", "image_id", ",", "sent_id", "]", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "data", "=", "[", "sentss", ",", "factss", ",", "images", ",", "answers", "]", "\n", "idxs", "=", "np", ".", "arange", "(", "len", "(", "answers", ")", ")", "\n", "data_set", "=", "DataSet", "(", "mode", ",", "batch_size", ",", "data", ",", "idxs", ",", "idx2id", ")", "\n", "print", "(", "\"done\"", ")", "\n", "return", "data_set", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.tensorflow._variable_on_cpu": [[4, 18], ["tensorflow.device", "tensorflow.get_variable"], "function", ["None"], ["def", "_variable_on_cpu", "(", "name", ",", "shape", ",", "initializer", ")", ":", "\n", "    ", "\"\"\"Helper to create a Variable stored on CPU memory.\n\n    Args:\n      name: name of the variable\n      shape: list of ints\n      initializer: initializer for Variable\n\n    Returns:\n      Variable Tensor\n    \"\"\"", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "        ", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "initializer", "=", "initializer", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.tensorflow._variable_with_weight_decay": [[20, 42], ["tensorflow._variable_on_cpu", "tensorflow.truncated_normal_initializer", "tensorflow.mul", "tensorflow.add_to_collection", "tensorflow.nn.l2_loss"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.my.tensorflow._variable_on_cpu"], ["", "def", "_variable_with_weight_decay", "(", "name", ",", "shape", ",", "stddev", ",", "wd", ")", ":", "\n", "    ", "\"\"\"Helper to create an initialized Variable with weight decay.\n\n    Note that the Variable is initialized with a truncated normal distribution.\n    A weight decay is added only if one is specified.\n\n    Args:\n      name: name of the variable\n      shape: list of ints\n      stddev: standard deviation of a truncated Gaussian\n      wd: add L2Loss weight decay multiplied by this float. If None, weight\n          decay is not added for this Variable.\n\n    Returns:\n      Variable Tensor\n    \"\"\"", "\n", "var", "=", "_variable_on_cpu", "(", "name", ",", "shape", ",", "\n", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "if", "wd", ":", "\n", "        ", "weight_decay", "=", "tf", ".", "mul", "(", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", ",", "wd", ",", "name", "=", "'weight_loss'", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "weight_decay", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.tensorflow.average_gradients": [[44, 81], ["zip", "tensorflow.concat", "tensorflow.reduce_mean", "average_grads.append", "tensorflow.expand_dims", "grads.append"], "function", ["None"], ["", "def", "average_gradients", "(", "tower_grads", ")", ":", "\n", "    ", "\"\"\"Calculate the average gradient for each shared variable across all towers.\n\n    Note that this function provides a synchronization point across all towers.\n\n    Args:\n      tower_grads: List of lists of (gradient, variable) tuples. The outer list\n        is over individual gradients. The inner list is over the gradient\n        calculation for each tower.\n    Returns:\n       List of pairs of (gradient, variable) where the gradient has been averaged\n       across all towers.\n    \"\"\"", "\n", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "        ", "grads", "=", "[", "]", "\n", "for", "g", ",", "_", "in", "grad_and_vars", ":", "\n", "# Add 0 dimension to the gradients to represent the tower.", "\n", "            ", "assert", "g", "is", "not", "None", "\n", "expanded_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "0", ")", "\n", "\n", "# Append on a 'tower' dimension which we will average over below.", "\n", "grads", ".", "append", "(", "expanded_g", ")", "\n", "\n", "# Average over the 'tower' dimension.", "\n", "", "grad", "=", "tf", ".", "concat", "(", "0", ",", "grads", ")", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ",", "0", ")", "\n", "\n", "# Keep in mind that the Variables are redundant because they are shared", "\n", "# across towers. So .. we will just return the first tower's pointer to", "\n", "# the Variable.", "\n", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "grad_and_var", "=", "(", "grad", ",", "v", ")", "\n", "average_grads", ".", "append", "(", "grad_and_var", ")", "\n", "", "return", "average_grads", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.rnn_cell.BasicLSTMCell.__init__": [[87, 101], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_units", ",", "forget_bias", "=", "1.0", ",", "input_size", "=", "None", ",", "var_on_cpu", "=", "True", ",", "wd", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Initialize the basic LSTM cell.\n\n        Args:\n          num_units: int, The number of units in the LSTM cell.\n          forget_bias: float, The bias added to forget gates (see above).\n          input_size: int, The dimensionality of the inputs into the LSTM cell,\n            by default equal to num_units.\n        \"\"\"", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_input_size", "=", "num_units", "if", "input_size", "is", "None", "else", "input_size", "\n", "self", ".", "_forget_bias", "=", "forget_bias", "\n", "self", ".", "var_on_cpu", "=", "var_on_cpu", "\n", "self", ".", "wd", "=", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.rnn_cell.BasicLSTMCell.input_size": [[102, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.rnn_cell.BasicLSTMCell.output_size": [[106, 109], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.rnn_cell.BasicLSTMCell.state_size": [[110, 113], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.rnn_cell.BasicLSTMCell.__call__": [[114, 128], ["tensorflow.variable_scope", "tensorflow.split", "rnn_cell.linear", "tensorflow.split", "tensorflow.concat", "tensorflow.tanh", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.tanh", "type"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "name_scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"Long short-term memory cell (LSTM).\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name_scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "# \"BasicLSTMCell\"", "\n", "# Parameters of gates are concatenated into one multiply for efficiency.", "\n", "            ", "c", ",", "h", "=", "tf", ".", "split", "(", "1", ",", "2", ",", "state", ")", "\n", "concat", "=", "linear", "(", "[", "inputs", ",", "h", "]", ",", "4", "*", "self", ".", "_num_units", ",", "True", ",", "var_on_cpu", "=", "self", ".", "var_on_cpu", ",", "wd", "=", "self", ".", "wd", ")", "\n", "\n", "# i = input_gate, j = new_input, f = forget_gate, o = output_gate", "\n", "i", ",", "j", ",", "f", ",", "o", "=", "tf", ".", "split", "(", "1", ",", "4", ",", "concat", ")", "\n", "\n", "new_c", "=", "c", "*", "tf", ".", "sigmoid", "(", "f", "+", "self", ".", "_forget_bias", ")", "+", "tf", ".", "sigmoid", "(", "i", ")", "*", "tf", ".", "tanh", "(", "j", ")", "\n", "new_h", "=", "tf", ".", "tanh", "(", "new_c", ")", "*", "tf", ".", "sigmoid", "(", "o", ")", "\n", "\n", "", "return", "new_h", ",", "tf", ".", "concat", "(", "1", ",", "[", "new_c", ",", "new_h", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.rnn_cell.linear": [[9, 71], ["isinstance", "a.get_shape().as_list", "tensorflow.variable_scope", "len", "ValueError", "ValueError", "tensorflow.get_variable", "tensorflow.mul", "tensorflow.add_to_collection", "len", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.get_variable", "a.get_shape", "tensorflow.device", "tensorflow.get_variable", "tensorflow.nn.l2_loss", "tensorflow.concat", "tensorflow.device", "tensorflow.get_variable", "str", "str", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "function", ["None"], ["def", "linear", "(", "args", ",", "output_size", ",", "bias", ",", "bias_start", "=", "0.0", ",", "scope", "=", "None", ",", "var_on_cpu", "=", "True", ",", "wd", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"Linear map: sum_i(args[i] * W[i]), where W[i] is a variable.\n\n    Args:\n      args: a 2D Tensor or a list of 2D, batch x n, Tensors.\n      output_size: int, second dimension of W[i].\n      bias: boolean, whether to add a bias term or not.\n      bias_start: starting value to initialize the bias; 0 by default.\n      scope: VariableScope for the created subgraph; defaults to \"Linear\".\n      var_on_cpu: if True, put the variables on /cpu:0.\n\n    Returns:\n      A 2D Tensor with shape [batch x output_size] equal to\n      sum_i(args[i] * W[i]), where W[i]s are newly created matrices.\n\n    Raises:\n      ValueError: if some of the arguments has unspecified or wrong shape.\n    \"\"\"", "\n", "assert", "args", "\n", "if", "not", "isinstance", "(", "args", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "args", "=", "[", "args", "]", "\n", "\n", "# Calculate the total size of arguments on dimension 1.", "\n", "", "total_arg_size", "=", "0", "\n", "shapes", "=", "[", "a", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "for", "a", "in", "args", "]", "\n", "for", "shape", "in", "shapes", ":", "\n", "        ", "if", "len", "(", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Linear is expecting 2D arguments: %s\"", "%", "str", "(", "shapes", ")", ")", "\n", "", "if", "not", "shape", "[", "1", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Linear expects shape[1] of arguments: %s\"", "%", "str", "(", "shapes", ")", ")", "\n", "", "else", ":", "\n", "            ", "total_arg_size", "+=", "shape", "[", "1", "]", "\n", "\n", "# Now the computation.", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"Linear\"", ")", ":", "\n", "        ", "if", "var_on_cpu", ":", "\n", "            ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "matrix", "=", "tf", ".", "get_variable", "(", "\"Matrix\"", ",", "[", "total_arg_size", ",", "output_size", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "matrix", "=", "tf", ".", "get_variable", "(", "\"Matrix\"", ",", "[", "total_arg_size", ",", "output_size", "]", ")", "\n", "", "if", "wd", ":", "\n", "            ", "weight_decay", "=", "tf", ".", "mul", "(", "tf", ".", "nn", ".", "l2_loss", "(", "matrix", ")", ",", "wd", ",", "name", "=", "'weight_loss'", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "weight_decay", ")", "\n", "\n", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "res", "=", "tf", ".", "matmul", "(", "args", "[", "0", "]", ",", "matrix", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "1", ",", "args", ")", ",", "matrix", ")", "\n", "", "if", "not", "bias", ":", "\n", "            ", "return", "res", "\n", "\n", "", "if", "var_on_cpu", ":", "\n", "            ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "bias_term", "=", "tf", ".", "get_variable", "(", "\n", "\"Bias\"", ",", "[", "output_size", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias_start", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "bias_term", "=", "tf", ".", "get_variable", "(", "\n", "\"Bias\"", ",", "[", "output_size", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias_start", ")", ")", "\n", "", "", "return", "res", "+", "bias_term", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.softmax_with_mask": [[13, 21], ["tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "functools.reduce"], "function", ["None"], ["def", "softmax_with_mask", "(", "shape", ",", "x", ",", "mask", ",", "name", "=", "None", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "softmax_with_mask", ".", "__name__", "\n", "", "x_masked", "=", "x", "+", "VERY_SMALL_NUMBER", "*", "(", "1.0", "-", "mask", ")", "\n", "x_flat", "=", "tf", ".", "reshape", "(", "x_masked", ",", "[", "reduce", "(", "mul", ",", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ",", "shape", "[", "-", "1", "]", "]", ")", "\n", "p_flat", "=", "tf", ".", "nn", ".", "softmax", "(", "x_flat", ")", "\n", "p", "=", "tf", ".", "reshape", "(", "p_flat", ",", "shape", ",", "name", "=", "name", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.softmax_with_base": [[23, 41], ["tensorflow.tile", "tensorflow.concat", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.sub", "tensorflow.slice", "tensorflow.expand_dims", "len", "functools.reduce", "len"], "function", ["None"], ["", "def", "softmax_with_base", "(", "shape", ",", "base_untiled", ",", "x", ",", "mask", "=", "None", ",", "name", "=", "'sig'", ")", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "        ", "x", "+=", "VERY_SMALL_NUMBER", "*", "(", "1.0", "-", "mask", ")", "\n", "", "base_shape", "=", "shape", "[", ":", "-", "1", "]", "+", "[", "1", "]", "\n", "for", "_", "in", "shape", ":", "\n", "        ", "base_untiled", "=", "tf", ".", "expand_dims", "(", "base_untiled", ",", "-", "1", ")", "\n", "", "base", "=", "tf", ".", "tile", "(", "base_untiled", ",", "base_shape", ")", "\n", "\n", "c_shape", "=", "shape", "[", ":", "-", "1", "]", "+", "[", "shape", "[", "-", "1", "]", "+", "1", "]", "\n", "c", "=", "tf", ".", "concat", "(", "len", "(", "shape", ")", "-", "1", ",", "[", "base", ",", "x", "]", ")", "\n", "c_flat", "=", "tf", ".", "reshape", "(", "c", ",", "[", "reduce", "(", "mul", ",", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ",", "c_shape", "[", "-", "1", "]", "]", ")", "\n", "p_flat", "=", "tf", ".", "nn", ".", "softmax", "(", "c_flat", ")", "\n", "p_cat", "=", "tf", ".", "reshape", "(", "p_flat", ",", "c_shape", ")", "\n", "s_aug", "=", "tf", ".", "slice", "(", "p_cat", ",", "[", "0", "for", "_", "in", "shape", "]", ",", "[", "i", "for", "i", "in", "shape", "[", ":", "-", "1", "]", "]", "+", "[", "1", "]", ")", "\n", "s", "=", "tf", ".", "squeeze", "(", "s_aug", ",", "[", "len", "(", "shape", ")", "-", "1", "]", ")", "\n", "sig", "=", "tf", ".", "sub", "(", "1.0", ",", "s", ",", "name", "=", "\"sig\"", ")", "\n", "p", "=", "tf", ".", "slice", "(", "p_cat", ",", "[", "0", "for", "_", "in", "shape", "[", ":", "-", "1", "]", "]", "+", "[", "1", "]", ",", "shape", ")", "\n", "return", "sig", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.man_sim": [[43, 56], ["tensorflow.reduce_sum", "tensorflow.sub", "tensorflow.abs", "len"], "function", ["None"], ["", "def", "man_sim", "(", "shape", ",", "u", ",", "v", ",", "name", "=", "'man_sim'", ")", ":", "\n", "    ", "\"\"\"\n    Manhattan similarity\n    https://pdfs.semanticscholar.org/6812/fb9ef1c2dad497684a9020d8292041a639ff.pdf\n    :param shape:\n    :param u:\n    :param v:\n    :param name:\n    :return:\n    \"\"\"", "\n", "dist", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "u", "-", "v", ")", ",", "len", "(", "shape", ")", "-", "1", ")", "\n", "sim", "=", "tf", ".", "sub", "(", "0.0", ",", "dist", ",", "name", "=", "name", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear": [[58, 68], ["tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "functools.reduce", "tensorflow.matmul"], "function", ["None"], ["", "def", "linear", "(", "input_shape", ",", "output_dim", ",", "input_", ",", "name", "=", "\"linear\"", ")", ":", "\n", "    ", "a", "=", "input_shape", "[", "-", "1", "]", "\n", "b", "=", "output_dim", "\n", "input_flat", "=", "tf", ".", "reshape", "(", "input_", ",", "[", "reduce", "(", "operator", ".", "mul", ",", "input_shape", "[", ":", "-", "1", "]", ",", "1", ")", ",", "a", "]", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "mat", "=", "tf", ".", "get_variable", "(", "\"mat\"", ",", "shape", "=", "[", "a", ",", "b", "]", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "shape", "=", "[", "b", "]", ")", "\n", "out_flat", "=", "tf", ".", "matmul", "(", "input_flat", ",", "mat", ")", "+", "bias", "\n", "out", "=", "tf", ".", "reshape", "(", "out_flat", ",", "input_shape", "[", ":", "-", "1", "]", "+", "[", "b", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.get_args": [[14, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"first_dir\"", ")", "\n", "parser", ".", "add_argument", "(", "\"second_dir\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.sim_test": [[20, 47], ["os.path.join", "os.path.join", "os.path.join", "json.load", "json.load", "json.load", "collections.defaultdict", "utils.get_pbar().start", "json.load.items", "get_pbar().start.finish", "json.dump", "open", "open", "open", "sim_test.sent_to_text", "min", "sim_test.sent_to_text", "get_pbar().start.update", "open", "json.load.items", "utils.get_pbar", "len", "sim_test.cdiff", "json.load.items", "len"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.sent_to_text", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.sent_to_text", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.cdiff"], ["", "def", "sim_test", "(", "args", ")", ":", "\n", "    ", "first_dir", "=", "args", ".", "first_dir", "\n", "second_dir", "=", "args", ".", "second_dir", "\n", "first_sents_path", "=", "os", ".", "path", ".", "join", "(", "first_dir", ",", "\"sents.json\"", ")", "\n", "second_sents_path", "=", "os", ".", "path", ".", "join", "(", "second_dir", ",", "\"sents.json\"", ")", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "first_dir", ",", "\"vocab.json\"", ")", "\n", "vocab", "=", "json", ".", "load", "(", "open", "(", "vocab_path", ",", "'r'", ")", ")", "\n", "inv_vocab", "=", "{", "idx", ":", "word", "for", "word", ",", "idx", "in", "vocab", ".", "items", "(", ")", "}", "\n", "first_sents", "=", "json", ".", "load", "(", "open", "(", "first_sents_path", ",", "\"r\"", ")", ")", "\n", "second_sents", "=", "json", ".", "load", "(", "open", "(", "second_sents_path", ",", "\"r\"", ")", ")", "\n", "diff_dict", "=", "defaultdict", "(", "int", ")", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "first_sents", ")", ")", ".", "start", "(", ")", "\n", "i", "=", "0", "\n", "for", "first_id", ",", "sents1", "in", "first_sents", ".", "items", "(", ")", ":", "\n", "        ", "text1", "=", "sent_to_text", "(", "inv_vocab", ",", "sents1", "[", "0", "]", ")", "\n", "min_second_id", ",", "diff", "=", "min", "(", "[", "[", "second_id", ",", "cdiff", "(", "sents1", ",", "sents2", ",", "len", "(", "vocab", ")", ")", "]", "for", "second_id", ",", "sents2", "in", "second_sents", ".", "items", "(", ")", "]", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "text2", "=", "sent_to_text", "(", "inv_vocab", ",", "second_sents", "[", "min_second_id", "]", "[", "0", "]", ")", "\n", "diff_dict", "[", "diff", "]", "+=", "1", "\n", "\"\"\"\n        if diff <= 3:\n            print(\"%s, %s, %d\" % (text1, text2, diff))\n        \"\"\"", "\n", "pbar", ".", "update", "(", "i", ")", "\n", "i", "+=", "1", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "json", ".", "dump", "(", "diff_dict", ",", "open", "(", "\"diff_dict.json\"", ",", "\"w\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.sent_to_text": [[48, 50], ["None"], "function", ["None"], ["", "def", "sent_to_text", "(", "vocab", ",", "sent", ")", ":", "\n", "    ", "return", "\" \"", ".", "join", "(", "vocab", "[", "idx", "]", "for", "idx", "in", "sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.sent_to_bow": [[51, 56], ["numpy.zeros"], "function", ["None"], ["", "def", "sent_to_bow", "(", "sent", ",", "l", ")", ":", "\n", "    ", "out", "=", "np", ".", "zeros", "(", "[", "l", "]", ")", "\n", "for", "idx", "in", "sent", ":", "\n", "        ", "out", "[", "idx", "]", "=", "1.0", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.temp": [[57, 61], ["map", "matplotlib.plot", "a.keys"], "function", ["None"], ["", "def", "temp", "(", ")", ":", "\n", "    ", "a", "=", "{", "\"0.0\"", ":", "128", ",", "\"1.0\"", ":", "61", ",", "\"2.0\"", ":", "181", ",", "\"3.0\"", ":", "152", ",", "\"4.0\"", ":", "170", ",", "\"5.0\"", ":", "144", ",", "\"6.0\"", ":", "128", ",", "\"7.0\"", ":", "120", ",", "\"8.0\"", ":", "70", ",", "\"9.0\"", ":", "50", ",", "\"10.0\"", ":", "44", ",", "\"11.0\"", ":", "22", ",", "\"12.0\"", ":", "19", ",", "\"13.0\"", ":", "17", ",", "\"14.0\"", ":", "3", ",", "\"15.0\"", ":", "4", ",", "\"16.0\"", ":", "3", ",", "\"18.0\"", ":", "2", ",", "\"22.0\"", ":", "1", ",", "\"24.0\"", ":", "1", ",", "\"27.0\"", ":", "1", "}", "\n", "keys", "=", "map", "(", "int", ",", "a", ".", "keys", "(", ")", ")", "\n", "plt", ".", "plot", "(", "keys", ",", "[", "a", "[", "key", "]", "for", "key", "in", "keys", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.diff": [[64, 66], ["numpy.sum", "numpy.abs", "sim_test.sent_to_bow", "sim_test.sent_to_bow"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.sent_to_bow", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.sent_to_bow"], ["", "def", "diff", "(", "sent1", ",", "sent2", ",", "l", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "abs", "(", "sent_to_bow", "(", "sent1", ",", "l", ")", "-", "sent_to_bow", "(", "sent2", ",", "l", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.cdiff": [[67, 69], ["min", "sim_test.diff", "itertools.product"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.tmp.sim_test.diff"], ["", "def", "cdiff", "(", "sents1", ",", "sents2", ",", "l", ")", ":", "\n", "    ", "return", "min", "(", "diff", "(", "sent1", ",", "sent2", ",", "l", ")", "for", "sent1", ",", "sent2", "in", "itertools", ".", "product", "(", "sents1", ",", "sents2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._get_args": [[14, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "_get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"data_dir\"", ")", "\n", "parser", ".", "add_argument", "(", "\"fold_path\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._tokenize": [[21, 24], ["re.findall"], "function", ["None"], ["", "def", "_tokenize", "(", "raw", ")", ":", "\n", "    ", "tokens", "=", "re", ".", "findall", "(", "r\"[\\w]+\"", ",", "raw", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._normalize": [[27, 32], ["stemmer.stem.lower", "stemmer.stem"], "function", ["None"], ["def", "_normalize", "(", "word", ")", ":", "\n", "    ", "word", "=", "word", ".", "lower", "(", ")", "\n", "if", "stem", ":", "\n", "        ", "word", "=", "stemmer", ".", "stem", "(", "word", ")", "\n", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.load_all": [[33, 72], ["os.path.join", "os.path.join", "os.path.join", "sorted", "utils.get_pbar().start", "enumerate", "get_pbar().start.finish", "os.path.join", "os.path.join", "get_pbar().start.update", "utils.get_pbar", "os.path.exists", "os.path.exists", "json.load", "json.load", "ques[].items", "os.path.splitext", "os.listdir", "name.endswith", "int", "len", "open", "open", "questions.append", "choicess.append", "answers.append"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load"], ["", "def", "load_all", "(", "data_dir", ")", ":", "\n", "    ", "annos_dir", "=", "path", ".", "join", "(", "data_dir", ",", "'annotations'", ")", "\n", "images_dir", "=", "path", ".", "join", "(", "data_dir", ",", "'images'", ")", "\n", "questions_dir", "=", "path", ".", "join", "(", "data_dir", ",", "'questions'", ")", "\n", "\n", "anno_dict", "=", "{", "}", "\n", "questions_dict", "=", "{", "}", "\n", "choicess_dict", "=", "{", "}", "\n", "answers_dict", "=", "{", "}", "\n", "\n", "image_ids", "=", "sorted", "(", "[", "path", ".", "splitext", "(", "name", ")", "[", "0", "]", "for", "name", "in", "listdir", "(", "images_dir", ")", "if", "name", ".", "endswith", "(", "\".png\"", ")", "]", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "image_ids", ")", ")", ".", "start", "(", ")", "\n", "for", "i", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "        ", "json_name", "=", "\"%s.png.json\"", "%", "image_id", "\n", "anno_path", "=", "path", ".", "join", "(", "annos_dir", ",", "json_name", ")", "\n", "ques_path", "=", "path", ".", "join", "(", "questions_dir", ",", "json_name", ")", "\n", "if", "path", ".", "exists", "(", "anno_path", ")", "and", "path", ".", "exists", "(", "ques_path", ")", ":", "\n", "            ", "anno", "=", "json", ".", "load", "(", "open", "(", "anno_path", ",", "\"r\"", ")", ")", "\n", "ques", "=", "json", ".", "load", "(", "open", "(", "ques_path", ",", "\"r\"", ")", ")", "\n", "\n", "questions", "=", "[", "]", "\n", "choicess", "=", "[", "]", "\n", "answers", "=", "[", "]", "\n", "for", "question", ",", "d", "in", "ques", "[", "'questions'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "d", "[", "'abcLabel'", "]", ":", "\n", "                    ", "choices", "=", "d", "[", "'answerTexts'", "]", "\n", "answer", "=", "d", "[", "'correctAnswer'", "]", "\n", "questions", ".", "append", "(", "question", ")", "\n", "choicess", ".", "append", "(", "choices", ")", "\n", "answers", ".", "append", "(", "answer", ")", "\n", "\n", "", "", "questions_dict", "[", "image_id", "]", "=", "questions", "\n", "choicess_dict", "[", "image_id", "]", "=", "choicess", "\n", "answers_dict", "[", "image_id", "]", "=", "answers", "\n", "anno_dict", "[", "image_id", "]", "=", "anno", "\n", "", "pbar", ".", "update", "(", "i", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "\n", "return", "anno_dict", ",", "questions_dict", ",", "choicess_dict", ",", "answers_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._get_val": [[74, 88], ["simple._normalize", "Exception", "simple._get_val", "len"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._normalize", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._get_val"], ["", "def", "_get_val", "(", "anno", ",", "key", ")", ":", "\n", "    ", "first", "=", "key", "[", "0", "]", "\n", "if", "first", "==", "'T'", ":", "\n", "        ", "val", "=", "anno", "[", "'text'", "]", "[", "key", "]", "[", "'value'", "]", "\n", "val", "=", "_normalize", "(", "val", ")", "\n", "return", "val", "\n", "", "elif", "first", "==", "'O'", ":", "\n", "        ", "d", "=", "anno", "[", "'objects'", "]", "[", "key", "]", "\n", "if", "'text'", "in", "d", "and", "len", "(", "d", "[", "'text'", "]", ")", ">", "0", ":", "\n", "            ", "key", "=", "d", "[", "'text'", "]", "[", "0", "]", "\n", "return", "_get_val", "(", "anno", ",", "key", ")", "\n", "", "return", "None", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.create_graph": [[90, 103], ["networkx.Graph", "d.values", "simple._get_val", "simple._get_val", "nx.Graph.add_edge"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._get_val", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._get_val"], ["", "", "def", "create_graph", "(", "anno", ")", ":", "\n", "    ", "graph", "=", "nx", ".", "Graph", "(", ")", "\n", "try", ":", "\n", "        ", "d", "=", "anno", "[", "'relationships'", "]", "[", "'interObject'", "]", "[", "'linkage'", "]", "\n", "", "except", ":", "\n", "        ", "return", "graph", "\n", "", "for", "dd", "in", "d", ".", "values", "(", ")", ":", "\n", "        ", "if", "dd", "[", "'category'", "]", "==", "'objectToObject'", ":", "\n", "            ", "dest", "=", "_get_val", "(", "anno", ",", "dd", "[", "'destination'", "]", "[", "0", "]", ")", "\n", "orig", "=", "_get_val", "(", "anno", ",", "dd", "[", "'origin'", "]", "[", "0", "]", ")", "\n", "if", "dest", "and", "orig", ":", "\n", "                ", "graph", ".", "add_edge", "(", "dest", ",", "orig", ")", "\n", "", "", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.find_node": [[105, 112], ["simple._tokenize", "simple._normalize", "graph.nodes"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._normalize"], ["", "def", "find_node", "(", "graph", ",", "text", ")", ":", "\n", "    ", "words", "=", "_tokenize", "(", "text", ")", "\n", "words", "=", "[", "_normalize", "(", "word", ")", "for", "word", "in", "words", "]", "\n", "for", "word", "in", "words", ":", "\n", "        ", "if", "word", "in", "graph", ".", "nodes", "(", ")", ":", "\n", "            ", "return", "word", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.guess": [[114, 141], ["simple.find_node", "min", "max", "simple.find_node", "dists.append", "enumerate", "networkx.has_path", "len", "networkx.shortest_path"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.find_node", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.find_node"], ["", "def", "guess", "(", "graph", ",", "question", ",", "choices", ")", ":", "\n", "    ", "MAX", "=", "9999", "\n", "SUBMAX", "=", "999", "\n", "ques_node", "=", "find_node", "(", "graph", ",", "question", ")", "\n", "dists", "=", "[", "]", "\n", "for", "choice", "in", "choices", ":", "\n", "        ", "choice_node", "=", "find_node", "(", "graph", ",", "choice", ")", "\n", "if", "ques_node", "is", "None", "and", "choice_node", "is", "None", ":", "\n", "            ", "dist", "=", "MAX", "\n", "", "elif", "ques_node", "is", "None", "and", "choice_node", "is", "not", "None", ":", "\n", "            ", "dist", "=", "SUBMAX", "\n", "", "elif", "ques_node", "is", "not", "None", "and", "choice_node", "is", "None", ":", "\n", "            ", "dist", "=", "MAX", "\n", "", "else", ":", "\n", "            ", "if", "nx", ".", "has_path", "(", "graph", ",", "ques_node", ",", "choice_node", ")", ":", "\n", "                ", "pl", "=", "len", "(", "nx", ".", "shortest_path", "(", "graph", ",", "ques_node", ",", "choice_node", ")", ")", "\n", "dist", "=", "pl", "\n", "", "else", ":", "\n", "                ", "dist", "=", "MAX", "\n", "", "", "dists", ".", "append", "(", "dist", ")", "\n", "", "answer", ",", "dist", "=", "min", "(", "enumerate", "(", "dists", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "max_dist", "=", "max", "(", "dists", ")", "\n", "if", "dist", "==", "MAX", ":", "\n", "        ", "return", "None", "\n", "", "if", "dist", "==", "max_dist", ":", "\n", "        ", "return", "None", "\n", "", "return", "answer", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.evaluate": [[143, 167], ["utils.get_pbar().start", "enumerate", "get_pbar().start.finish", "print", "print", "anno_dict.items", "simple.create_graph", "zip", "get_pbar().start.update", "utils.get_pbar", "simple.guess", "len"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.create_graph", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.guess"], ["", "def", "evaluate", "(", "anno_dict", ",", "questions_dict", ",", "choicess_dict", ",", "answers_dict", ")", ":", "\n", "    ", "total", "=", "0", "\n", "correct", "=", "0", "\n", "incorrect", "=", "0", "\n", "guessed", "=", "0", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "anno_dict", ")", ")", ".", "start", "(", ")", "\n", "for", "i", ",", "(", "image_id", ",", "anno", ")", "in", "enumerate", "(", "anno_dict", ".", "items", "(", ")", ")", ":", "\n", "        ", "graph", "=", "create_graph", "(", "anno", ")", "\n", "questions", "=", "questions_dict", "[", "image_id", "]", "\n", "choicess", "=", "choicess_dict", "[", "image_id", "]", "\n", "answers", "=", "answers_dict", "[", "image_id", "]", "\n", "for", "question", ",", "choices", ",", "answer", "in", "zip", "(", "questions", ",", "choicess", ",", "answers", ")", ":", "\n", "            ", "total", "+=", "1", "\n", "a", "=", "guess", "(", "graph", ",", "question", ",", "choices", ")", "\n", "if", "a", "is", "None", ":", "\n", "                ", "guessed", "+=", "1", "\n", "", "elif", "answer", "==", "a", ":", "\n", "                ", "correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "incorrect", "+=", "1", "\n", "", "", "pbar", ".", "update", "(", "i", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "print", "(", "\"expected accuracy: (0.25 * %d + %d)/%d = %.4f\"", "%", "(", "guessed", ",", "correct", ",", "total", ",", "(", "0.25", "*", "guessed", "+", "correct", ")", "/", "total", ")", ")", "\n", "print", "(", "\"precision: %d/%d = %.4f\"", "%", "(", "correct", ",", "correct", "+", "incorrect", ",", "correct", "/", "(", "correct", "+", "incorrect", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.select": [[169, 177], ["json.load", "open", "new_all.append"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load"], ["", "def", "select", "(", "fold_path", ",", "*", "all_", ")", ":", "\n", "    ", "fold", "=", "json", ".", "load", "(", "open", "(", "fold_path", ",", "'r'", ")", ")", "\n", "test_ids", "=", "fold", "[", "'test'", "]", "\n", "new_all", "=", "[", "]", "\n", "for", "each", "in", "all_", ":", "\n", "        ", "new_each", "=", "{", "id_", ":", "each", "[", "id_", "]", "for", "id_", "in", "test_ids", "if", "id_", "in", "each", "}", "\n", "new_all", ".", "append", "(", "new_each", ")", "\n", "", "return", "new_all", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.main": [[179, 184], ["simple._get_args", "simple.load_all", "simple.select", "simple.evaluate"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple._get_args", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.load_all", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.select", "home.repos.pwc.inspect_result.allenai_dqa-net.tmp.simple.evaluate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "_get_args", "(", ")", "\n", "all_", "=", "load_all", "(", "args", ".", "data_dir", ")", "\n", "selected", "=", "select", "(", "args", ".", "fold_path", ",", "*", "all_", ")", "\n", "evaluate", "(", "*", "selected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.main.x05.mkdirs": [[65, 111], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.exists", "str().zfill", "str().zfill", "str().zfill", "shutil.rmtree", "os.mkdir", "shutil.rmtree", "os.mkdir", "os.path.exists", "os.mkdir", "os.mkdir", "shutil.rmtree", "os.mkdir", "str", "str", "str"], "function", ["None"], ["def", "mkdirs", "(", "config", ")", ":", "\n", "    ", "evals_dir", "=", "\"evals\"", "\n", "logs_dir", "=", "\"logs\"", "\n", "saves_dir", "=", "\"saves\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "evals_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "evals_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "logs_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "logs_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "saves_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saves_dir", ")", "\n", "\n", "", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "evals_dir", ",", "config", ".", "model_name", ")", "\n", "eval_subdir", "=", "os", ".", "path", ".", "join", "(", "eval_dir", ",", "\"%s\"", "%", "str", "(", "config", ".", "config", ")", ".", "zfill", "(", "2", ")", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "logs_dir", ",", "config", ".", "model_name", ")", "\n", "log_subdir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"%s\"", "%", "str", "(", "config", ".", "config", ")", ".", "zfill", "(", "2", ")", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "saves_dir", ",", "config", ".", "model_name", ")", "\n", "save_subdir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"%s\"", "%", "str", "(", "config", ".", "config", ")", ".", "zfill", "(", "2", ")", ")", "\n", "config", ".", "eval_dir", "=", "eval_subdir", "\n", "config", ".", "log_dir", "=", "log_subdir", "\n", "config", ".", "save_dir", "=", "save_subdir", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "eval_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "eval_dir", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "eval_subdir", ")", ":", "\n", "        ", "if", "config", ".", "train", "and", "not", "config", ".", "load", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "eval_subdir", ")", "\n", "os", ".", "mkdir", "(", "eval_subdir", ")", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "eval_subdir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "log_dir", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "log_subdir", ")", ":", "\n", "        ", "if", "config", ".", "train", "and", "not", "config", ".", "load", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "log_subdir", ")", "\n", "os", ".", "mkdir", "(", "log_subdir", ")", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "log_subdir", ")", "\n", "", "if", "config", ".", "train", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "save_subdir", ")", ":", "\n", "            ", "if", "not", "config", ".", "load", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "save_subdir", ")", "\n", "os", ".", "mkdir", "(", "save_subdir", ")", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_subdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.main.x05.load_meta_data": [[113, 124], ["os.path.join", "json.load", "open"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load"], ["", "", "", "def", "load_meta_data", "(", "config", ")", ":", "\n", "    ", "meta_data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "\"meta_data.json\"", ")", "\n", "meta_data", "=", "json", ".", "load", "(", "open", "(", "meta_data_path", ",", "\"r\"", ")", ")", "\n", "\n", "# Other parameters", "\n", "config", ".", "max_sent_size", "=", "meta_data", "[", "'max_sent_size'", "]", "\n", "config", ".", "max_fact_size", "=", "meta_data", "[", "'max_fact_size'", "]", "\n", "config", ".", "max_num_facts", "=", "meta_data", "[", "'max_num_facts'", "]", "\n", "config", ".", "num_choices", "=", "meta_data", "[", "'num_choices'", "]", "\n", "config", ".", "vocab_size", "=", "meta_data", "[", "'vocab_size'", "]", "\n", "config", ".", "word_size", "=", "meta_data", "[", "'word_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.main.x05.main": [[126, 174], ["x05.load_meta_data", "x05.mkdirs", "os.path.join", "pprint.pprint", "tensorflow.Graph", "tensorflow.Session", "models.m05.Runner", "configs.get_config.get_config", "os.path.join", "configs.get_config.get_config_from_file", "read_data.r05.read_data", "read_data.r05.read_data", "read_data.r05.read_data", "models.m05.Tower", "tf.Graph.as_default", "tensorflow.device", "models.m05.Runner.initialize", "h5py.File", "range", "tensorflow.ConfigProto", "models.m05.Runner.train", "models.m05.Runner.load", "models.m05.Runner.eval", "models.m05.Runner.load"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.main.x05.load_meta_data", "home.repos.pwc.inspect_result.allenai_dqa-net.main.x05.mkdirs", "home.repos.pwc.inspect_result.allenai_dqa-net.configs.get_config.get_config", "home.repos.pwc.inspect_result.allenai_dqa-net.configs.get_config.get_config_from_file", "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.read_data", "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.read_data", "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.read_data", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.initialize", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.train", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.eval", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load"], ["", "def", "main", "(", "_", ")", ":", "\n", "    ", "if", "FLAGS", ".", "config", "==", "\"None\"", ":", "\n", "        ", "config", "=", "get_config", "(", "FLAGS", ".", "__flags", ",", "{", "}", ")", "\n", "", "else", ":", "\n", "        ", "config_path", "=", "os", ".", "path", ".", "join", "(", "\"configs\"", ",", "\"%s%s\"", "%", "(", "FLAGS", ".", "model_name", ",", "FLAGS", ".", "config_ext", ")", ")", "\n", "config", "=", "get_config_from_file", "(", "FLAGS", ".", "__flags", ",", "config_path", ",", "FLAGS", ".", "config", ")", "\n", "\n", "", "load_meta_data", "(", "config", ")", "\n", "mkdirs", "(", "config", ")", "\n", "\n", "# load other files", "\n", "init_emb_mat_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "'init_emb_mat.h5'", ")", "\n", "config", ".", "init_emb_mat", "=", "h5py", ".", "File", "(", "init_emb_mat_path", ",", "'r'", ")", "[", "'data'", "]", "[", ":", "]", "\n", "\n", "if", "config", ".", "train", ":", "\n", "        ", "train_ds", "=", "read_data", "(", "config", ",", "'train'", ")", "\n", "val_ds", "=", "read_data", "(", "config", ",", "'val'", ")", "\n", "", "else", ":", "\n", "        ", "test_ds", "=", "read_data", "(", "config", ",", "'test'", ")", "\n", "\n", "# For quick draft initialize (deubgging).", "\n", "", "if", "config", ".", "draft", ":", "\n", "        ", "config", ".", "train_num_batches", "=", "1", "\n", "config", ".", "val_num_batches", "=", "1", "\n", "config", ".", "test_num_batches", "=", "1", "\n", "config", ".", "num_epochs", "=", "1", "\n", "config", ".", "val_period", "=", "1", "\n", "config", ".", "save_period", "=", "1", "\n", "config", ".", "num_layers", "=", "1", "\n", "config", ".", "rnn_num_layers", "=", "1", "\n", "\n", "", "pprint", "(", "config", ".", "__dict__", ")", "\n", "\n", "eval_tensor_names", "=", "[", "'yp'", ",", "'p'", "]", "\n", "\n", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "towers", "=", "[", "Tower", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "num_devices", ")", "]", "\n", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "graph", ",", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", ")", "\n", "runner", "=", "Runner", "(", "config", ",", "sess", ",", "towers", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ",", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "        ", "runner", ".", "initialize", "(", ")", "\n", "if", "config", ".", "train", ":", "\n", "            ", "if", "config", ".", "load", ":", "\n", "                ", "runner", ".", "load", "(", ")", "\n", "", "runner", ".", "train", "(", "train_ds", ",", "val_ds", ",", "eval_tensor_names", "=", "eval_tensor_names", ")", "\n", "", "else", ":", "\n", "            ", "runner", ".", "load", "(", ")", "\n", "runner", ".", "eval", "(", "test_ds", ",", "eval_tensor_names", "=", "eval_tensor_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Sentence.__init__": [[15, 22], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.expand_dims"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "name", "=", "'sentence'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "shape", ",", "name", "=", "\"%s\"", "%", "name", ")", "\n", "self", ".", "x_mask", "=", "tf", ".", "placeholder", "(", "'float'", ",", "shape", ",", "name", "=", "\"%s_mask\"", "%", "name", ")", "\n", "self", ".", "x_len", "=", "tf", ".", "placeholder", "(", "'int16'", ",", "shape", "[", ":", "-", "1", "]", ",", "name", "=", "\"%s_len\"", "%", "name", ")", "\n", "self", ".", "x_mask_aug", "=", "tf", ".", "expand_dims", "(", "self", ".", "x_mask", ",", "-", "1", ",", "name", "=", "'%s_mask_aug'", "%", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Sentence.add": [[23, 28], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "feed_dict", ",", "*", "batch", ")", ":", "\n", "        ", "x", ",", "x_mask", ",", "x_len", "=", "batch", "\n", "feed_dict", "[", "self", ".", "x", "]", "=", "x", "\n", "feed_dict", "[", "self", ".", "x_mask", "]", "=", "x_mask", "\n", "feed_dict", "[", "self", ".", "x_len", "]", "=", "x_len", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Memory.__init__": [[31, 36], ["m05.Sentence.__init__", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.configs.get_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "name", "=", "'memory'", ")", ":", "\n", "        ", "N", ",", "M", ",", "K", "=", "params", ".", "batch_size", ",", "params", ".", "max_num_facts", ",", "params", ".", "max_fact_size", "\n", "shape", "=", "[", "N", ",", "M", ",", "K", "]", "\n", "super", "(", "Memory", ",", "self", ")", ".", "__init__", "(", "shape", ",", "name", "=", "name", ")", "\n", "self", ".", "m_mask", "=", "tf", ".", "placeholder", "(", "'float'", ",", "[", "N", ",", "M", "]", ",", "name", "=", "'m_mask'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Memory.add": [[37, 41], ["m05.Sentence.add"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Memory.add"], ["", "def", "add", "(", "self", ",", "feed_dict", ",", "*", "batch", ")", ":", "\n", "        ", "x", ",", "x_mask", ",", "x_len", ",", "m_mask", "=", "batch", "\n", "super", "(", "Memory", ",", "self", ")", ".", "add", "(", "feed_dict", ",", "x", ",", "x_mask", ",", "x_len", ")", "\n", "feed_dict", "[", "self", ".", "m_mask", "]", "=", "m_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.PESentenceEncoder.__init__": [[44, 57], ["range", "range", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.tanh", "tensorflow.matmul"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "emb_mat", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "V", ",", "d", ",", "L", ",", "e", "=", "params", ".", "vocab_size", ",", "params", ".", "hidden_size", ",", "params", ".", "rnn_num_layers", ",", "params", ".", "word_size", "\n", "# self.init_emb_mat = tf.get_variable(\"init_emb_mat\", [self.V, self.d])", "\n", "emb_hidden_sizes", "=", "[", "d", "for", "_", "in", "range", "(", "params", ".", "emb_num_layers", ")", "]", "\n", "prev_size", "=", "e", "\n", "for", "layer_idx", "in", "range", "(", "params", ".", "emb_num_layers", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"Ax_%d\"", "%", "layer_idx", ")", ":", "\n", "                ", "cur_size", "=", "emb_hidden_sizes", "[", "layer_idx", "]", "\n", "mat", "=", "tf", ".", "get_variable", "(", "\"mat_%d\"", "%", "layer_idx", ",", "shape", "=", "[", "prev_size", ",", "cur_size", "]", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "\"bias_%d\"", "%", "layer_idx", ",", "shape", "=", "[", "cur_size", "]", ")", "\n", "emb_mat", "=", "tf", ".", "tanh", "(", "tf", ".", "matmul", "(", "emb_mat", ",", "mat", ")", "+", "bias", ")", "\n", "", "", "self", ".", "emb_mat", "=", "emb_mat", "# [V, d]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.PESentenceEncoder.__call__": [[58, 79], ["isinstance", "tensorflow.constant", "isinstance", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "m05.PESentenceEncoder.__call__.g"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sentence", ",", "name", "=", "'u'", ")", ":", "\n", "        ", "assert", "isinstance", "(", "sentence", ",", "Sentence", ")", "\n", "params", "=", "self", ".", "params", "\n", "d", ",", "e", "=", "params", ".", "hidden_size", ",", "params", ".", "word_size", "\n", "J", "=", "sentence", ".", "shape", "[", "-", "1", "]", "\n", "\n", "def", "f", "(", "JJ", ",", "jj", ",", "dd", ",", "kk", ")", ":", "\n", "            ", "return", "(", "1", "-", "float", "(", "jj", ")", "/", "JJ", ")", "-", "(", "float", "(", "kk", ")", "/", "dd", ")", "*", "(", "1", "-", "2.0", "*", "jj", "/", "JJ", ")", "\n", "\n", "", "def", "g", "(", "jj", ")", ":", "\n", "            ", "return", "[", "f", "(", "J", ",", "jj", ",", "d", ",", "k", ")", "for", "k", "in", "range", "(", "d", ")", "]", "\n", "\n", "", "_l", "=", "[", "g", "(", "j", ")", "for", "j", "in", "range", "(", "J", ")", "]", "\n", "self", ".", "l", "=", "tf", ".", "constant", "(", "_l", ",", "shape", "=", "[", "J", ",", "d", "]", ",", "name", "=", "'l'", ")", "\n", "assert", "isinstance", "(", "sentence", ",", "Sentence", ")", "\n", "Ax", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "emb_mat", ",", "sentence", ".", "x", ",", "name", "=", "'Ax'", ")", "\n", "# TODO : dimension transformation", "\n", "lAx", "=", "self", ".", "l", "*", "Ax", "\n", "lAx_masked", "=", "lAx", "*", "tf", ".", "expand_dims", "(", "sentence", ".", "x_mask", ",", "-", "1", ")", "\n", "m", "=", "tf", ".", "reduce_sum", "(", "lAx_masked", ",", "len", "(", "sentence", ".", "shape", ")", "-", "1", ",", "name", "=", "name", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.MeanEncoder.__init__": [[82, 93], ["range", "range", "tensorflow.variable_scope", "tensorflow.tanh", "my.nn.linear", "my.nn.linear", "my.nn.linear", "my.nn.linear"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "emb_mat", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "V", ",", "d", ",", "L", ",", "e", "=", "params", ".", "vocab_size", ",", "params", ".", "hidden_size", ",", "params", ".", "rnn_num_layers", ",", "params", ".", "word_size", "\n", "prev_size", "=", "e", "\n", "hidden_sizes", "=", "[", "d", "for", "_", "in", "range", "(", "params", ".", "emb_num_layers", ")", "]", "\n", "for", "layer_idx", "in", "range", "(", "params", ".", "emb_num_layers", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"emb_%d\"", "%", "layer_idx", ")", ":", "\n", "                ", "cur_hidden_size", "=", "hidden_sizes", "[", "layer_idx", "]", "\n", "emb_mat", "=", "tf", ".", "tanh", "(", "my", ".", "nn", ".", "linear", "(", "[", "V", ",", "prev_size", "]", ",", "cur_hidden_size", ",", "emb_mat", ")", ")", "\n", "prev_size", "=", "cur_hidden_size", "\n", "", "", "self", ".", "emb_mat", "=", "emb_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.MeanEncoder.__call__": [[94, 98], ["isinstance", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_mean", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sentence", ",", "name", "=", "'mean'", ")", ":", "\n", "        ", "assert", "isinstance", "(", "sentence", ",", "Sentence", ")", "\n", "Ax", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "emb_mat", ",", "sentence", ".", "x", ")", "# [N, C, J, e]", "\n", "return", "tf", ".", "reduce_mean", "(", "Ax", "*", "sentence", ".", "x_mask_aug", ",", "len", "(", "sentence", ".", "shape", ")", "-", "1", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.LSTMSentenceEncoder.__init__": [[101, 133], ["range", "tensorflow.nn.rnn_cell.MultiRNNCell", "tensorflow.get_variable_scope", "my.rnn_cell.BasicLSTMCell", "my.rnn_cell.BasicLSTMCell", "my.rnn_cell.BasicLSTMCell", "my.rnn_cell.BasicLSTMCell", "my.rnn_cell.BasicLSTMCell", "my.rnn_cell.BasicLSTMCell", "my.rnn_cell.BasicLSTMCell", "my.rnn_cell.BasicLSTMCell", "tensorflow.nn.rnn_cell.DropoutWrapper", "range", "tensorflow.variable_scope", "tensorflow.tanh", "range", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell", "my.nn.linear", "my.nn.linear", "my.nn.linear", "my.nn.linear", "tensorflow.nn.rnn_cell.GRUCell", "tensorflow.nn.rnn_cell.GRUCell", "Exception"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.linear"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "emb_mat", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "V", ",", "d", ",", "L", ",", "e", "=", "params", ".", "vocab_size", ",", "params", ".", "hidden_size", ",", "params", ".", "rnn_num_layers", ",", "params", ".", "word_size", "\n", "prev_size", "=", "e", "\n", "hidden_sizes", "=", "[", "d", "for", "_", "in", "range", "(", "params", ".", "emb_num_layers", ")", "]", "\n", "for", "layer_idx", "in", "range", "(", "params", ".", "emb_num_layers", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"emb_%d\"", "%", "layer_idx", ")", ":", "\n", "                ", "cur_hidden_size", "=", "hidden_sizes", "[", "layer_idx", "]", "\n", "emb_mat", "=", "tf", ".", "tanh", "(", "my", ".", "nn", ".", "linear", "(", "[", "V", ",", "prev_size", "]", ",", "cur_hidden_size", ",", "emb_mat", ")", ")", "\n", "prev_size", "=", "cur_hidden_size", "\n", "", "", "self", ".", "emb_mat", "=", "emb_mat", "\n", "\n", "self", ".", "emb_hidden_sizes", "=", "[", "d", "for", "_", "in", "range", "(", "params", ".", "emb_num_layers", ")", "]", "\n", "self", ".", "input_size", "=", "self", ".", "emb_hidden_sizes", "[", "-", "1", "]", "if", "self", ".", "emb_hidden_sizes", "else", "e", "\n", "\n", "if", "params", ".", "lstm", "==", "'basic'", ":", "\n", "            ", "self", ".", "first_cell", "=", "my", ".", "rnn_cell", ".", "BasicLSTMCell", "(", "d", ",", "input_size", "=", "self", ".", "input_size", ",", "forget_bias", "=", "params", ".", "forget_bias", ")", "\n", "self", ".", "second_cell", "=", "my", ".", "rnn_cell", ".", "BasicLSTMCell", "(", "d", ",", "forget_bias", "=", "params", ".", "forget_bias", ")", "\n", "", "elif", "params", ".", "lstm", "==", "'regular'", ":", "\n", "            ", "self", ".", "first_cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "d", ",", "self", ".", "input_size", ",", "cell_clip", "=", "params", ".", "cell_clip", ")", "\n", "self", ".", "second_cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "d", ",", "d", ",", "cell_clip", "=", "params", ".", "cell_clip", ")", "\n", "", "elif", "params", ".", "lstm", "==", "'gru'", ":", "\n", "            ", "self", ".", "first_cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "GRUCell", "(", "d", ",", "input_size", "=", "self", ".", "input_size", ")", "\n", "self", ".", "second_cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "GRUCell", "(", "d", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", ")", "\n", "\n", "", "if", "params", ".", "train", "and", "params", ".", "keep_prob", "<", "1.0", ":", "\n", "            ", "self", ".", "first_cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "DropoutWrapper", "(", "self", ".", "first_cell", ",", "input_keep_prob", "=", "params", ".", "keep_prob", ")", "\n", "", "self", ".", "cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "MultiRNNCell", "(", "[", "self", ".", "first_cell", "]", "+", "[", "self", ".", "second_cell", "]", "*", "(", "L", "-", "1", ")", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", "\n", "self", ".", "used", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.LSTMSentenceEncoder.__call__": [[134, 147], ["m05.LSTMSentenceEncoder.get_last_hidden_state", "tensorflow.reshape", "tensorflow.identity", "tensorflow.reshape", "tensorflow.identity", "Exception", "tensorflow.split", "tensorflow.split"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.LSTMSentenceEncoder.get_last_hidden_state"], ["", "def", "__call__", "(", "self", ",", "sentence", ",", "init_hidden_state", "=", "None", ",", "name", "=", "'s'", ")", ":", "\n", "        ", "params", "=", "self", ".", "params", "\n", "L", ",", "d", "=", "params", ".", "rnn_num_layers", ",", "params", ".", "hidden_size", "\n", "h_flat", "=", "self", ".", "get_last_hidden_state", "(", "sentence", ",", "init_hidden_state", "=", "init_hidden_state", ")", "\n", "if", "params", ".", "lstm", "in", "[", "'basic'", ",", "'regular'", "]", ":", "\n", "            ", "h_last", "=", "tf", ".", "reshape", "(", "h_flat", ",", "sentence", ".", "shape", "[", ":", "-", "1", "]", "+", "[", "2", "*", "L", "*", "d", "]", ")", "\n", "s", "=", "tf", ".", "identity", "(", "tf", ".", "split", "(", "2", ",", "2", "*", "L", ",", "h_last", ")", "[", "2", "*", "L", "-", "1", "]", ",", "name", "=", "name", ")", "\n", "", "elif", "params", ".", "lstm", "==", "'gru'", ":", "\n", "            ", "h_last", "=", "tf", ".", "reshape", "(", "h_flat", ",", "sentence", ".", "shape", "[", ":", "-", "1", "]", "+", "[", "L", "*", "d", "]", ")", "\n", "s", "=", "tf", ".", "identity", "(", "tf", ".", "split", "(", "2", ",", "L", ",", "h_last", ")", "[", "L", "-", "1", "]", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.LSTMSentenceEncoder.get_last_hidden_state": [[148, 163], ["isinstance", "tensorflow.variable_scope", "tensorflow.nn.embedding_lookup", "functools.reduce", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.python.ops.rnn.dynamic_rnn", "m05.LSTMSentenceEncoder.cell.zero_state"], "methods", ["None"], ["", "def", "get_last_hidden_state", "(", "self", ",", "sentence", ",", "init_hidden_state", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "sentence", ",", "Sentence", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "self", ".", "used", ")", ":", "\n", "            ", "J", "=", "sentence", ".", "shape", "[", "-", "1", "]", "\n", "Ax", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "emb_mat", ",", "sentence", ".", "x", ")", "# [N, C, J, e]", "\n", "\n", "F", "=", "reduce", "(", "mul", ",", "sentence", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", "\n", "init_hidden_state", "=", "init_hidden_state", "or", "self", ".", "cell", ".", "zero_state", "(", "F", ",", "tf", ".", "float32", ")", "\n", "Ax_flat", "=", "tf", ".", "reshape", "(", "Ax", ",", "[", "F", ",", "J", ",", "self", ".", "input_size", "]", ")", "\n", "x_len_flat", "=", "tf", ".", "reshape", "(", "sentence", ".", "x_len", ",", "[", "F", "]", ")", "\n", "\n", "# Ax_flat_split = [tf.squeeze(x_flat_each, [1]) for x_flat_each in tf.split(1, J, Ax_flat)]", "\n", "o_flat", ",", "h_flat", "=", "rnn", ".", "dynamic_rnn", "(", "self", ".", "cell", ",", "Ax_flat", ",", "x_len_flat", ",", "initial_state", "=", "init_hidden_state", ")", "\n", "self", ".", "used", "=", "True", "\n", "return", "h_flat", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Sim.__init__": [[166, 184], ["encoder", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reduce_max", "tensorflow.expand_dims", "my.nn.softmax_with_mask", "my.nn.softmax_with_mask", "my.nn.softmax_with_mask", "my.nn.softmax_with_mask", "my.nn.man_sim", "my.nn.man_sim", "my.nn.man_sim", "my.nn.man_sim", "tensorflow.reduce_sum", "Exception"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.softmax_with_mask", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.softmax_with_mask", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.softmax_with_mask", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.softmax_with_mask", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.man_sim", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.man_sim", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.man_sim", "home.repos.pwc.inspect_result.allenai_dqa-net.my.nn.man_sim"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "memory", ",", "encoder", ",", "u", ")", ":", "\n", "        ", "N", ",", "C", ",", "R", ",", "d", "=", "params", ".", "batch_size", ",", "params", ".", "num_choices", ",", "params", ".", "max_num_facts", ",", "params", ".", "hidden_size", "\n", "f", "=", "encoder", "(", "memory", ",", "name", "=", "'f'", ")", "\n", "f_aug", "=", "tf", ".", "expand_dims", "(", "f", ",", "1", ")", "# [N, 1, R, d]", "\n", "u_aug", "=", "tf", ".", "expand_dims", "(", "u", ",", "2", ")", "# [N, C, 1, d]", "\n", "u_tiled", "=", "tf", ".", "tile", "(", "u_aug", ",", "[", "1", ",", "1", ",", "R", ",", "1", "]", ")", "\n", "if", "params", ".", "sim_func", "==", "'man_sim'", ":", "\n", "            ", "uf", "=", "my", ".", "nn", ".", "man_sim", "(", "[", "N", ",", "C", ",", "R", ",", "d", "]", ",", "f_aug", ",", "u_tiled", ",", "name", "=", "'uf'", ")", "# [N, C, R]", "\n", "", "elif", "params", ".", "sim_func", "==", "'dot'", ":", "\n", "            ", "uf", "=", "tf", ".", "reduce_sum", "(", "u_tiled", "*", "f_aug", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", ")", "\n", "", "logit", "=", "tf", ".", "reduce_max", "(", "uf", ",", "2", ")", "# [N, C]", "\n", "\n", "f_mask_aug", "=", "tf", ".", "expand_dims", "(", "memory", ".", "m_mask", ",", "1", ")", "\n", "p", "=", "my", ".", "nn", ".", "softmax_with_mask", "(", "[", "N", ",", "C", ",", "R", "]", ",", "uf", ",", "f_mask_aug", ",", "name", "=", "'p'", ")", "\n", "self", ".", "logit", "=", "logit", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower.initialize": [[187, 253], ["tensorflow.name_scope", "m05.Sentence", "m05.Memory", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.variable_scope", "MeanEncoder.", "tensorflow.name_scope", "m05.Sim", "tensorflow.variable_scope", "tensorflow.nn.softmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.add_to_collection", "tensorflow.add_n", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "m05.LSTMSentenceEncoder", "tensorflow.cast", "tensorflow.get_collection", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "tensorflow.cast", "m05.MeanEncoder", "Exception", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.tanh", "tensorflow.expand_dims", "tensorflow.squeeze", "Exception", "tensorflow.batch_matmul", "tensorflow.matmul"], "methods", ["None"], ["    ", "def", "initialize", "(", "self", ",", "scope", ")", ":", "\n", "        ", "params", "=", "self", ".", "params", "\n", "tensors", "=", "self", ".", "tensors", "\n", "placeholders", "=", "self", ".", "placeholders", "\n", "\n", "V", ",", "d", ",", "G", "=", "params", ".", "vocab_size", ",", "params", ".", "hidden_size", ",", "params", ".", "image_size", "\n", "N", ",", "C", ",", "J", "=", "params", ".", "batch_size", ",", "params", ".", "num_choices", ",", "params", ".", "max_sent_size", "\n", "e", "=", "params", ".", "word_size", "\n", "\n", "# initialize self", "\n", "# placeholders", "\n", "with", "tf", ".", "name_scope", "(", "'ph'", ")", ":", "\n", "            ", "s", "=", "Sentence", "(", "[", "N", ",", "C", ",", "J", "]", ",", "'s'", ")", "\n", "f", "=", "Memory", "(", "params", ",", "'f'", ")", "\n", "image", "=", "tf", ".", "placeholder", "(", "'float'", ",", "[", "N", ",", "G", "]", ",", "name", "=", "'i'", ")", "\n", "y", "=", "tf", ".", "placeholder", "(", "'int8'", ",", "[", "N", ",", "C", "]", ",", "name", "=", "'y'", ")", "\n", "init_emb_mat", "=", "tf", ".", "placeholder", "(", "'float'", ",", "shape", "=", "[", "V", ",", "e", "]", ",", "name", "=", "'init_emb_mat'", ")", "\n", "placeholders", "[", "'s'", "]", "=", "s", "\n", "placeholders", "[", "'f'", "]", "=", "f", "\n", "placeholders", "[", "'image'", "]", "=", "image", "\n", "placeholders", "[", "'y'", "]", "=", "y", "\n", "placeholders", "[", "'init_emb_mat'", "]", "=", "init_emb_mat", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "            ", "if", "params", ".", "encoder", "==", "'lstm'", ":", "\n", "                ", "u_encoder", "=", "LSTMSentenceEncoder", "(", "params", ",", "init_emb_mat", ")", "\n", "", "elif", "params", ".", "encoder", "==", "'mean'", ":", "\n", "                ", "u_encoder", "=", "MeanEncoder", "(", "params", ",", "init_emb_mat", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Invalid encoder: {}\"", ".", "format", "(", "params", ".", "encoder", ")", ")", "\n", "# u_encoder = PESentenceEncoder(params, init_emb_mat)", "\n", "", "first_u", "=", "u_encoder", "(", "s", ",", "name", "=", "'first_u'", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"main\"", ")", ":", "\n", "            ", "sim", "=", "Sim", "(", "params", ",", "f", ",", "u_encoder", ",", "first_u", ")", "\n", "tensors", "[", "'p'", "]", "=", "sim", ".", "p", "\n", "if", "params", ".", "mode", "==", "'dqanet'", ":", "\n", "                ", "logit", "=", "sim", ".", "logit", "\n", "", "elif", "params", ".", "mode", "==", "'vqa'", ":", "\n", "                ", "image_trans_mat", "=", "tf", ".", "get_variable", "(", "'I'", ",", "shape", "=", "[", "G", ",", "d", "]", ")", "\n", "image_trans_bias", "=", "tf", ".", "get_variable", "(", "'bI'", ",", "shape", "=", "[", "]", ")", "\n", "g", "=", "tf", ".", "tanh", "(", "tf", ".", "matmul", "(", "image", ",", "image_trans_mat", ")", "+", "image_trans_bias", ",", "name", "=", "'g'", ")", "# [N, d]", "\n", "aug_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "2", ",", "name", "=", "'aug_g'", ")", "# [N, d, 1]", "\n", "logit", "=", "tf", ".", "squeeze", "(", "tf", ".", "batch_matmul", "(", "first_u", ",", "aug_g", ")", ",", "[", "2", "]", ")", "# [N, C]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Invalid mode: {}\"", ".", "format", "(", "params", ".", "mode", ")", ")", "\n", "", "tensors", "[", "'logit'", "]", "=", "logit", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'yp'", ")", ":", "\n", "            ", "yp", "=", "tf", ".", "nn", ".", "softmax", "(", "logit", ",", "name", "=", "'yp'", ")", "# [N, C]", "\n", "tensors", "[", "'yp'", "]", "=", "yp", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'loss'", ")", ":", "\n", "            ", "cross_entropy", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logit", ",", "tf", ".", "cast", "(", "y", ",", "'float'", ")", ",", "name", "=", "'cross_entropy'", ")", "\n", "avg_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "cross_entropy", ",", "0", ",", "name", "=", "'avg_cross_entropy'", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "avg_cross_entropy", ")", "\n", "loss", "=", "tf", ".", "add_n", "(", "tf", ".", "get_collection", "(", "'losses'", ",", "scope", ")", ",", "name", "=", "'loss'", ")", "\n", "tensors", "[", "'loss'", "]", "=", "loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'acc'", ")", ":", "\n", "            ", "correct_vec", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "yp", ",", "1", ")", ",", "tf", ".", "argmax", "(", "y", ",", "1", ")", ")", "\n", "num_corrects", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "correct_vec", ",", "'float'", ")", ",", "name", "=", "'num_corrects'", ")", "\n", "acc", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_vec", ",", "'float'", ")", ",", "name", "=", "'acc'", ")", "\n", "tensors", "[", "'correct'", "]", "=", "correct_vec", "\n", "tensors", "[", "'num_corrects'", "]", "=", "num_corrects", "\n", "tensors", "[", "'acc'", "]", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower.get_feed_dict": [[254, 279], ["m05.Tower._prepro_sents_batch", "m05.Tower._prepro_facts_batch", "m05.Tower._prepro_images_batch", "placeholders[].add", "placeholders[].add", "m05.Tower._prepro_label_batch", "len", "numpy.zeros", "m05.Tower._prepro_label_batch", "Exception", "len"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower._prepro_sents_batch", "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower._prepro_facts_batch", "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower._prepro_images_batch", "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Memory.add", "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Memory.add", "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower._prepro_label_batch", "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower._prepro_label_batch"], ["", "", "def", "get_feed_dict", "(", "self", ",", "batch", ",", "mode", ",", "**", "kwargs", ")", ":", "\n", "        ", "placeholders", "=", "self", ".", "placeholders", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "assert", "mode", "!=", "'train'", ",", "\"Cannot pass empty batch during training, for now.\"", "\n", "sents_batch", ",", "facts_batch", ",", "images_batch", ",", "label_batch", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "            ", "sents_batch", ",", "facts_batch", ",", "images_batch", "=", "batch", "[", ":", "-", "1", "]", "\n", "if", "len", "(", "batch", ")", ">", "3", ":", "\n", "                ", "label_batch", "=", "batch", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "label_batch", "=", "np", ".", "zeros", "(", "[", "len", "(", "sents_batch", ")", "]", ")", "\n", "", "", "s", "=", "self", ".", "_prepro_sents_batch", "(", "sents_batch", ")", "# [N, C, J], [N, C]", "\n", "f", "=", "self", ".", "_prepro_facts_batch", "(", "facts_batch", ")", "\n", "g", "=", "self", ".", "_prepro_images_batch", "(", "images_batch", ")", "\n", "feed_dict", "=", "{", "placeholders", "[", "'image'", "]", ":", "g", ",", "placeholders", "[", "'init_emb_mat'", "]", ":", "self", ".", "params", ".", "init_emb_mat", "}", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "y_batch", "=", "self", ".", "_prepro_label_batch", "(", "label_batch", ")", "\n", "", "elif", "mode", "==", "'eval'", ":", "\n", "            ", "y_batch", "=", "self", ".", "_prepro_label_batch", "(", "label_batch", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", ")", "\n", "", "feed_dict", "[", "placeholders", "[", "'y'", "]", "]", "=", "y_batch", "\n", "placeholders", "[", "'s'", "]", ".", "add", "(", "feed_dict", ",", "*", "s", ")", "\n", "placeholders", "[", "'f'", "]", ".", "add", "(", "feed_dict", ",", "*", "f", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower._prepro_images_batch": [[280, 288], ["numpy.zeros", "len"], "methods", ["None"], ["", "def", "_prepro_images_batch", "(", "self", ",", "images_batch", ")", ":", "\n", "        ", "params", "=", "self", ".", "params", "\n", "N", ",", "G", "=", "params", ".", "batch_size", ",", "params", ".", "image_size", "\n", "g", "=", "np", ".", "zeros", "(", "[", "N", ",", "G", "]", ")", "\n", "if", "images_batch", "is", "None", ":", "\n", "            ", "return", "g", "\n", "", "g", "[", ":", "len", "(", "images_batch", ")", "]", "=", "images_batch", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower._prepro_sents_batch": [[289, 306], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "enumerate", "len"], "methods", ["None"], ["", "def", "_prepro_sents_batch", "(", "self", ",", "sents_batch", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "N", ",", "C", ",", "J", "=", "p", ".", "batch_size", ",", "p", ".", "num_choices", ",", "p", ".", "max_sent_size", "\n", "s_batch", "=", "np", ".", "zeros", "(", "[", "N", ",", "C", ",", "J", "]", ",", "dtype", "=", "'int32'", ")", "\n", "s_mask_batch", "=", "np", ".", "zeros", "(", "[", "N", ",", "C", ",", "J", "]", ",", "dtype", "=", "'float'", ")", "\n", "s_len_batch", "=", "np", ".", "zeros", "(", "[", "N", ",", "C", "]", ",", "dtype", "=", "'int16'", ")", "\n", "out", "=", "s_batch", ",", "s_mask_batch", ",", "s_len_batch", "\n", "if", "sents_batch", "is", "None", ":", "\n", "            ", "return", "out", "\n", "", "for", "n", ",", "sents", "in", "enumerate", "(", "sents_batch", ")", ":", "\n", "            ", "for", "c", ",", "sent", "in", "enumerate", "(", "sents", ")", ":", "\n", "                ", "for", "j", ",", "idx", "in", "enumerate", "(", "sent", ")", ":", "\n", "                    ", "s_batch", "[", "n", ",", "c", ",", "j", "]", "=", "idx", "\n", "s_mask_batch", "[", "n", ",", "c", ",", "j", "]", "=", "1.0", "\n", "", "s_len_batch", "[", "n", ",", "c", "]", "=", "len", "(", "sent", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower._prepro_facts_batch": [[307, 325], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "enumerate", "len"], "methods", ["None"], ["", "def", "_prepro_facts_batch", "(", "self", ",", "facts_batch", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "N", ",", "M", ",", "K", "=", "p", ".", "batch_size", ",", "p", ".", "max_num_facts", ",", "p", ".", "max_fact_size", "\n", "s_batch", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "K", "]", ",", "dtype", "=", "'int32'", ")", "\n", "s_mask_batch", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "K", "]", ",", "dtype", "=", "'float'", ")", "\n", "s_len_batch", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", "]", ",", "dtype", "=", "'int16'", ")", "\n", "m_mask_batch", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", "]", ",", "dtype", "=", "'float'", ")", "\n", "out", "=", "s_batch", ",", "s_mask_batch", ",", "s_len_batch", ",", "m_mask_batch", "\n", "if", "facts_batch", "is", "None", ":", "\n", "            ", "return", "out", "\n", "", "for", "n", ",", "sents", "in", "enumerate", "(", "facts_batch", ")", ":", "\n", "            ", "for", "m", ",", "sent", "in", "enumerate", "(", "sents", ")", ":", "\n", "                ", "for", "k", ",", "idx", "in", "enumerate", "(", "sent", ")", ":", "\n", "                    ", "s_batch", "[", "n", ",", "m", ",", "k", "]", "=", "idx", "\n", "s_mask_batch", "[", "n", ",", "m", ",", "k", "]", "=", "1.0", "\n", "", "s_len_batch", "[", "n", ",", "m", "]", "=", "len", "(", "sent", ")", "\n", "m_mask_batch", "[", "n", ",", "m", "]", "=", "1.0", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Tower._prepro_label_batch": [[326, 341], ["numpy.zeros", "enumerate", "range", "numpy.random.rand", "sum", "numpy.random.rand"], "methods", ["None"], ["", "def", "_prepro_label_batch", "(", "self", ",", "label_batch", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "N", ",", "C", "=", "p", ".", "batch_size", ",", "p", ".", "num_choices", "\n", "y", "=", "np", ".", "zeros", "(", "[", "N", ",", "C", "]", ",", "dtype", "=", "'float'", ")", "\n", "if", "label_batch", "is", "None", ":", "\n", "            ", "return", "y", "\n", "", "for", "i", ",", "label", "in", "enumerate", "(", "label_batch", ")", ":", "\n", "            ", "y", "[", "i", ",", "label", "]", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "self", ".", "params", ".", "rand_y", "\n", "rand_other", "=", "(", "1.0", "-", "self", ".", "params", ".", "rand_y", ")", "/", "(", "C", "-", "1", ")", "\n", "for", "cur", "in", "range", "(", "C", ")", ":", "\n", "                ", "if", "cur", "!=", "label", ":", "\n", "                    ", "y", "[", "i", ",", "cur", "]", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "rand_other", "\n", "", "", "y", "[", "i", "]", "=", "y", "[", "i", "]", "/", "sum", "(", "y", "[", "i", "]", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Runner._get_train_args": [[344, 358], ["int"], "methods", ["None"], ["    ", "def", "_get_train_args", "(", "self", ",", "epoch_idx", ")", ":", "\n", "        ", "params", "=", "self", ".", "params", "\n", "learning_rate", "=", "params", ".", "init_lr", "\n", "\n", "anneal_period", "=", "params", ".", "anneal_period", "\n", "anneal_ratio", "=", "params", ".", "anneal_ratio", "\n", "num_periods", "=", "int", "(", "epoch_idx", "/", "anneal_period", ")", "\n", "factor", "=", "anneal_ratio", "**", "num_periods", "\n", "\n", "if", "params", ".", "opt", "==", "'basic'", ":", "\n", "            ", "learning_rate", "*=", "factor", "\n", "\n", "", "train_args", "=", "{", "'learning_rate'", ":", "learning_rate", "}", "\n", "return", "train_args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.__init__": [[14, 25], ["isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "sess", ",", "towers", ")", ":", "\n", "        ", "assert", "isinstance", "(", "sess", ",", "tf", ".", "Session", ")", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "towers", "=", "towers", "\n", "self", ".", "num_towers", "=", "len", "(", "towers", ")", "\n", "self", ".", "placeholders", "=", "{", "}", "\n", "self", ".", "tensors", "=", "{", "}", "\n", "self", ".", "saver", "=", "None", "\n", "self", ".", "writer", "=", "None", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.initialize": [[26, 98], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.placeholder", "summaries.append", "enumerate", "summaries.append", "tensorflow.trainable_variables", "tensorflow.train.AdagradOptimizer.apply_gradients", "tensorflow.group", "tensorflow.train.Saver", "tensorflow.merge_summary", "tensorflow.initialize_all_variables", "sess.run", "tensorflow.train.SummaryWriter", "tensorflow.scalar_summary", "tensorflow.train.GradientDescentOptimizer", "tensorflow.name_scope", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.scalar_summary", "summaries.append", "tensorflow.all_variables", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.train.AdagradOptimizer", "Exception", "tensorflow.device", "tensorflow.name_scope", "tower.initialize", "tensorflow.get_variable_scope().reuse_variables", "tower.get_loss_tensor", "loss_tensors.append", "tower.get_correct_tensor", "correct_tensors.append", "tensorflow.train.AdagradOptimizer.compute_gradients", "grads_tensors.append", "tensorflow.pack", "tensorflow.name_scope", "my.tensorflow.average_gradients", "summaries.append", "tensorflow.histogram_summary", "tensorflow.histogram_summary", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.initialize", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.get_loss_tensor", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.get_correct_tensor", "home.repos.pwc.inspect_result.allenai_dqa-net.my.tensorflow.average_gradients"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "params", "=", "self", ".", "params", "\n", "sess", "=", "self", ".", "sess", "\n", "device_type", "=", "params", ".", "device_type", "\n", "summaries", "=", "[", "]", "\n", "\n", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "'int32'", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "tensors", "[", "'global_step'", "]", "=", "global_step", "\n", "\n", "epoch", "=", "tf", ".", "get_variable", "(", "'epoch'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "'int32'", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "tensors", "[", "'epoch'", "]", "=", "epoch", "\n", "\n", "learning_rate", "=", "tf", ".", "placeholder", "(", "'float32'", ",", "name", "=", "'learning_rate'", ")", "\n", "summaries", ".", "append", "(", "tf", ".", "scalar_summary", "(", "\"learning_rate\"", ",", "learning_rate", ")", ")", "\n", "self", ".", "placeholders", "[", "'learning_rate'", "]", "=", "learning_rate", "\n", "\n", "if", "params", ".", "opt", "==", "'basic'", ":", "\n", "            ", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", ")", "\n", "", "elif", "params", ".", "opt", "==", "'adagrad'", ":", "\n", "            ", "opt", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "learning_rate", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", ")", "\n", "\n", "", "grads_tensors", "=", "[", "]", "\n", "correct_tensors", "=", "[", "]", "\n", "loss_tensors", "=", "[", "]", "\n", "for", "device_id", ",", "tower", "in", "enumerate", "(", "self", ".", "towers", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "\"/%s:%d\"", "%", "(", "device_type", ",", "device_id", ")", ")", ",", "tf", ".", "name_scope", "(", "\"%s_%d\"", "%", "(", "device_type", ",", "device_id", ")", ")", "as", "scope", ":", "\n", "                ", "tower", ".", "initialize", "(", "scope", ")", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "loss_tensor", "=", "tower", ".", "get_loss_tensor", "(", ")", "\n", "loss_tensors", ".", "append", "(", "loss_tensor", ")", "\n", "correct_tensor", "=", "tower", ".", "get_correct_tensor", "(", ")", "\n", "correct_tensors", ".", "append", "(", "correct_tensor", ")", "\n", "grads_tensor", "=", "opt", ".", "compute_gradients", "(", "loss_tensor", ")", "\n", "grads_tensors", ".", "append", "(", "grads_tensor", ")", "\n", "\n", "", "", "with", "tf", ".", "name_scope", "(", "\"gpu_sync\"", ")", ":", "\n", "            ", "loss_tensor", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "pack", "(", "loss_tensors", ")", ",", "0", ",", "name", "=", "'loss'", ")", "\n", "correct_tensor", "=", "tf", ".", "concat", "(", "0", ",", "correct_tensors", ",", "name", "=", "\"correct\"", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"average_gradients\"", ")", ":", "\n", "                ", "grads_tensor", "=", "average_gradients", "(", "grads_tensors", ")", "\n", "\n", "", "", "self", ".", "tensors", "[", "'loss'", "]", "=", "loss_tensor", "\n", "self", ".", "tensors", "[", "'correct'", "]", "=", "correct_tensor", "\n", "summaries", ".", "append", "(", "tf", ".", "scalar_summary", "(", "loss_tensor", ".", "op", ".", "name", ",", "loss_tensor", ")", ")", "\n", "\n", "for", "grad", ",", "var", "in", "grads_tensor", ":", "\n", "            ", "if", "grad", "is", "not", "None", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "histogram_summary", "(", "var", ".", "op", ".", "name", "+", "'/gradients'", ",", "grad", ")", ")", "\n", "", "", "self", ".", "tensors", "[", "'grads'", "]", "=", "grads_tensor", "\n", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "summaries", ".", "append", "(", "tf", ".", "histogram_summary", "(", "var", ".", "op", ".", "name", ",", "var", ")", ")", "\n", "\n", "", "apply_grads_op", "=", "opt", ".", "apply_gradients", "(", "grads_tensor", ",", "global_step", "=", "global_step", ")", "\n", "\n", "train_op", "=", "tf", ".", "group", "(", "apply_grads_op", ")", "\n", "self", ".", "tensors", "[", "'train'", "]", "=", "train_op", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "all_variables", "(", ")", ")", "\n", "self", ".", "saver", "=", "saver", "\n", "\n", "summary_op", "=", "tf", ".", "merge_summary", "(", "summaries", ")", "\n", "self", ".", "tensors", "[", "'summary'", "]", "=", "summary_op", "\n", "\n", "init_op", "=", "tf", ".", "initialize_all_variables", "(", ")", "\n", "sess", ".", "run", "(", "init_op", ")", "\n", "self", ".", "writer", "=", "tf", ".", "train", ".", "SummaryWriter", "(", "params", ".", "log_dir", ",", "sess", ".", "graph", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner._get_feed_dict": [[99, 109], ["enumerate", "tower.get_feed_dict", "feed_dict.update", "len"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.get_feed_dict"], ["", "def", "_get_feed_dict", "(", "self", ",", "batches", ",", "mode", ",", "**", "kwargs", ")", ":", "\n", "        ", "placeholders", "=", "self", ".", "placeholders", "\n", "learning_rate_ph", "=", "placeholders", "[", "'learning_rate'", "]", "\n", "learning_rate", "=", "kwargs", "[", "'learning_rate'", "]", "if", "mode", "==", "'train'", "else", "0.0", "\n", "feed_dict", "=", "{", "learning_rate_ph", ":", "learning_rate", "}", "\n", "for", "tower_idx", ",", "tower", "in", "enumerate", "(", "self", ".", "towers", ")", ":", "\n", "            ", "batch", "=", "batches", "[", "tower_idx", "]", "if", "tower_idx", "<", "len", "(", "batches", ")", "else", "None", "\n", "cur_feed_dict", "=", "tower", ".", "get_feed_dict", "(", "batch", ",", "mode", ",", "**", "kwargs", ")", "\n", "feed_dict", ".", "update", "(", "cur_feed_dict", ")", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner._train_batches": [[110, 117], ["bm05.BaseRunner._get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner._get_feed_dict"], ["", "def", "_train_batches", "(", "self", ",", "batches", ",", "**", "kwargs", ")", ":", "\n", "        ", "sess", "=", "self", ".", "sess", "\n", "tensors", "=", "self", ".", "tensors", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "batches", ",", "'train'", ",", "**", "kwargs", ")", "\n", "ops", "=", "[", "tensors", "[", "name", "]", "for", "name", "in", "[", "'train'", ",", "'summary'", ",", "'global_step'", "]", "]", "\n", "train", ",", "summary", ",", "global_step", "=", "sess", ".", "run", "(", "ops", ",", "feed_dict", "=", "feed_dict", ")", "\n", "return", "train", ",", "summary", ",", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner._eval_batches": [[118, 133], ["sum", "bm05.BaseRunner._get_feed_dict", "sess.run", "numpy.sum", "len", "len", "sess.run"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner._get_feed_dict"], ["", "def", "_eval_batches", "(", "self", ",", "batches", ",", "eval_tensor_names", "=", "(", ")", ")", ":", "\n", "        ", "sess", "=", "self", ".", "sess", "\n", "tensors", "=", "self", ".", "tensors", "\n", "num_examples", "=", "sum", "(", "len", "(", "batch", "[", "0", "]", ")", "for", "batch", "in", "batches", ")", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "batches", ",", "'eval'", ")", "\n", "ops", "=", "[", "tensors", "[", "name", "]", "for", "name", "in", "[", "'correct'", ",", "'loss'", ",", "'summary'", ",", "'global_step'", "]", "]", "\n", "correct", ",", "loss", ",", "summary", ",", "global_step", "=", "sess", ".", "run", "(", "ops", ",", "feed_dict", "=", "feed_dict", ")", "\n", "num_corrects", "=", "np", ".", "sum", "(", "correct", "[", ":", "num_examples", "]", ")", "\n", "if", "len", "(", "eval_tensor_names", ")", ">", "0", ":", "\n", "            ", "valuess", "=", "[", "sess", ".", "run", "(", "[", "tower", ".", "tensors", "[", "name", "]", "for", "name", "in", "eval_tensor_names", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "for", "tower", "in", "self", ".", "towers", "]", "\n", "", "else", ":", "\n", "            ", "valuess", "=", "[", "[", "]", "]", "\n", "\n", "", "return", "(", "num_corrects", ",", "loss", ",", "summary", ",", "global_step", ")", ",", "valuess", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.train": [[134, 172], ["isinstance", "int", "int", "sess.run", "print", "print", "print", "train_data_set.get_num_batches", "numpy.log10", "bm05.BaseRunner._get_train_args", "utils.get_pbar().start", "range", "utils.get_pbar().start.finish", "train_data_set.complete_epoch", "epoch_op.assign_add", "sess.run", "bm05.BaseRunner._train_batches", "writer.add_summary", "utils.get_pbar().start.update", "bm05.BaseRunner.eval", "bm05.BaseRunner.eval", "bm05.BaseRunner.save", "utils.get_pbar", "train_data_set.get_next_labeled_batch", "range", "str().zfill", "str"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.get_num_batches", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner._get_train_args", "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.complete_epoch", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner._train_batches", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.eval", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.eval", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.save", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.get_next_labeled_batch"], ["", "def", "train", "(", "self", ",", "train_data_set", ",", "val_data_set", "=", "None", ",", "eval_tensor_names", "=", "(", ")", ")", ":", "\n", "        ", "assert", "isinstance", "(", "train_data_set", ",", "DataSet", ")", "\n", "assert", "self", ".", "initialized", ",", "\"Initialize tower before training.\"", "\n", "# TODO : allow partial batch", "\n", "\n", "sess", "=", "self", ".", "sess", "\n", "writer", "=", "self", ".", "writer", "\n", "params", "=", "self", ".", "params", "\n", "num_epochs", "=", "params", ".", "num_epochs", "\n", "num_batches", "=", "params", ".", "train_num_batches", "if", "params", ".", "train_num_batches", ">=", "0", "else", "train_data_set", ".", "get_num_batches", "(", "partial", "=", "False", ")", "\n", "num_iters_per_epoch", "=", "int", "(", "num_batches", "/", "self", ".", "num_towers", ")", "\n", "num_digits", "=", "int", "(", "np", ".", "log10", "(", "num_batches", ")", ")", "\n", "\n", "epoch_op", "=", "self", ".", "tensors", "[", "'epoch'", "]", "\n", "epoch", "=", "sess", ".", "run", "(", "epoch_op", ")", "\n", "print", "(", "\"training %d epochs ... \"", "%", "num_epochs", ")", "\n", "print", "(", "\"num iters per epoch: %d\"", "%", "num_iters_per_epoch", ")", "\n", "print", "(", "\"starting from epoch %d.\"", "%", "(", "epoch", "+", "1", ")", ")", "\n", "while", "epoch", "<", "num_epochs", ":", "\n", "            ", "train_args", "=", "self", ".", "_get_train_args", "(", "epoch", ")", "\n", "pbar", "=", "get_pbar", "(", "num_iters_per_epoch", ",", "\"epoch %s|\"", "%", "str", "(", "epoch", "+", "1", ")", ".", "zfill", "(", "num_digits", ")", ")", ".", "start", "(", ")", "\n", "for", "iter_idx", "in", "range", "(", "num_iters_per_epoch", ")", ":", "\n", "                ", "batches", "=", "[", "train_data_set", ".", "get_next_labeled_batch", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_towers", ")", "]", "\n", "_", ",", "summary", ",", "global_step", "=", "self", ".", "_train_batches", "(", "batches", ",", "**", "train_args", ")", "\n", "writer", ".", "add_summary", "(", "summary", ",", "global_step", ")", "\n", "pbar", ".", "update", "(", "iter_idx", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "train_data_set", ".", "complete_epoch", "(", ")", "\n", "\n", "assign_op", "=", "epoch_op", ".", "assign_add", "(", "1", ")", "\n", "_", ",", "epoch", "=", "sess", ".", "run", "(", "[", "assign_op", ",", "epoch_op", "]", ")", "\n", "\n", "if", "val_data_set", "and", "epoch", "%", "params", ".", "val_period", "==", "0", ":", "\n", "                ", "self", ".", "eval", "(", "train_data_set", ",", "is_val", "=", "True", ",", "eval_tensor_names", "=", "eval_tensor_names", ")", "\n", "self", ".", "eval", "(", "val_data_set", ",", "is_val", "=", "True", ",", "eval_tensor_names", "=", "eval_tensor_names", ")", "\n", "\n", "", "if", "epoch", "%", "params", ".", "save_period", "==", "0", ":", "\n", "                ", "self", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.eval": [[173, 226], ["isinstance", "data_set.get_num_batches", "int", "utils.get_pbar().start", "range", "utils.get_pbar().start.finish", "numpy.mean", "data_set.reset", "sess.run", "print", "os.path.join", "json.dump", "numpy.ceil", "range", "bm05.BaseRunner._eval_batches", "sum", "losses.append", "utils.get_pbar().start.update", "list", "open", "utils.get_pbar", "data_set.has_next_batch", "eval_values.append", "itertools.chain", "zip", "zip", "idxs.extend", "batches.append", "len", "str().zfill", "data_set.get_batch_idxs", "data_set.get_next_labeled_batch", "x.tolist", "float", "str"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.get_num_batches", "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.reset", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner._eval_batches", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.has_next_batch", "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.get_batch_idxs", "home.repos.pwc.inspect_result.allenai_dqa-net.read_data.r05.DataSet.get_next_labeled_batch"], ["", "", "", "def", "eval", "(", "self", ",", "data_set", ",", "is_val", "=", "False", ",", "eval_tensor_names", "=", "(", ")", ")", ":", "\n", "        ", "assert", "isinstance", "(", "data_set", ",", "DataSet", ")", "\n", "assert", "self", ".", "initialized", ",", "\"Initialize tower before training.\"", "\n", "\n", "params", "=", "self", ".", "params", "\n", "sess", "=", "self", ".", "sess", "\n", "epoch_op", "=", "self", ".", "tensors", "[", "'epoch'", "]", "\n", "dn", "=", "data_set", ".", "get_num_batches", "(", "partial", "=", "True", ")", "\n", "if", "is_val", ":", "\n", "            ", "pn", "=", "params", ".", "val_num_batches", "\n", "num_batches", "=", "pn", "if", "0", "<=", "pn", "<=", "dn", "else", "dn", "\n", "", "else", ":", "\n", "            ", "pn", "=", "params", ".", "test_num_batches", "\n", "num_batches", "=", "pn", "if", "0", "<=", "pn", "<=", "dn", "else", "dn", "\n", "", "num_iters", "=", "int", "(", "np", ".", "ceil", "(", "num_batches", "/", "self", ".", "num_towers", ")", ")", "\n", "num_corrects", ",", "total", "=", "0", ",", "0", "\n", "eval_values", "=", "[", "]", "\n", "idxs", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "N", "=", "data_set", ".", "batch_size", "*", "num_batches", "\n", "if", "N", ">", "data_set", ".", "num_examples", ":", "\n", "            ", "N", "=", "data_set", ".", "num_examples", "\n", "", "string", "=", "\"eval on %s, N=%d|\"", "%", "(", "data_set", ".", "name", ",", "N", ")", "\n", "pbar", "=", "get_pbar", "(", "num_iters", ",", "prefix", "=", "string", ")", ".", "start", "(", ")", "\n", "for", "iter_idx", "in", "range", "(", "num_iters", ")", ":", "\n", "            ", "batches", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_towers", ")", ":", "\n", "                ", "if", "data_set", ".", "has_next_batch", "(", "partial", "=", "True", ")", ":", "\n", "                    ", "idxs", ".", "extend", "(", "data_set", ".", "get_batch_idxs", "(", "partial", "=", "True", ")", ")", "\n", "batches", ".", "append", "(", "data_set", ".", "get_next_labeled_batch", "(", "partial", "=", "True", ")", ")", "\n", "", "", "(", "cur_num_corrects", ",", "cur_loss", ",", "_", ",", "global_step", ")", ",", "eval_value_batches", "=", "self", ".", "_eval_batches", "(", "batches", ",", "eval_tensor_names", "=", "eval_tensor_names", ")", "\n", "num_corrects", "+=", "cur_num_corrects", "\n", "total", "+=", "sum", "(", "len", "(", "batch", "[", "0", "]", ")", "for", "batch", "in", "batches", ")", "\n", "for", "eval_value_batch", "in", "eval_value_batches", ":", "\n", "                ", "eval_values", ".", "append", "(", "[", "x", ".", "tolist", "(", ")", "for", "x", "in", "eval_value_batch", "]", ")", "# numpy.array.toList", "\n", "", "losses", ".", "append", "(", "cur_loss", ")", "\n", "pbar", ".", "update", "(", "iter_idx", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "data_set", ".", "reset", "(", ")", "\n", "\n", "epoch", "=", "sess", ".", "run", "(", "epoch_op", ")", "\n", "print", "(", "\"at epoch %d: acc = %.2f%% = %d / %d, loss = %.4f\"", "%", "\n", "(", "epoch", ",", "100", "*", "float", "(", "num_corrects", ")", "/", "total", ",", "num_corrects", ",", "total", ",", "loss", ")", ")", "\n", "\n", "# For outputting eval json files", "\n", "ids", "=", "[", "data_set", ".", "idx2id", "[", "idx", "]", "for", "idx", "in", "idxs", "]", "\n", "zipped_eval_values", "=", "[", "list", "(", "itertools", ".", "chain", "(", "*", "each", ")", ")", "for", "each", "in", "zip", "(", "*", "eval_values", ")", "]", "\n", "values", "=", "{", "name", ":", "values", "for", "name", ",", "values", "in", "zip", "(", "eval_tensor_names", ",", "zipped_eval_values", ")", "}", "\n", "out", "=", "{", "'ids'", ":", "ids", ",", "'values'", ":", "values", "}", "\n", "eval_path", "=", "os", ".", "path", ".", "join", "(", "params", ".", "eval_dir", ",", "\"%s_%s.json\"", "%", "(", "data_set", ".", "name", ",", "str", "(", "epoch", ")", ".", "zfill", "(", "4", ")", ")", ")", "\n", "json", ".", "dump", "(", "out", ",", "open", "(", "eval_path", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner._get_train_args": [[227, 239], ["int"], "methods", ["None"], ["", "def", "_get_train_args", "(", "self", ",", "epoch_idx", ")", ":", "\n", "        ", "params", "=", "self", ".", "params", "\n", "learning_rate", "=", "params", ".", "init_lr", "\n", "\n", "anneal_period", "=", "params", ".", "lr_anneal_period", "\n", "anneal_ratio", "=", "params", ".", "lr_anneal_ratio", "\n", "num_periods", "=", "int", "(", "epoch_idx", "/", "anneal_period", ")", "\n", "factor", "=", "anneal_ratio", "**", "num_periods", "\n", "learning_rate", "*=", "factor", "\n", "\n", "train_args", "=", "{", "'learning_rate'", ":", "learning_rate", "}", "\n", "return", "train_args", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.save": [[240, 252], ["print", "os.path.join", "bm05.BaseRunner.saver.save", "print"], "methods", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.save"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "initialized", ",", "\"Initialize tower before saving.\"", "\n", "\n", "sess", "=", "self", ".", "sess", "\n", "params", "=", "self", ".", "params", "\n", "save_dir", "=", "params", ".", "save_dir", "\n", "name", "=", "params", ".", "model_name", "\n", "global_step", "=", "self", ".", "tensors", "[", "'global_step'", "]", "\n", "print", "(", "\"saving model ...\"", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "name", ")", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "save_path", ",", "global_step", ")", "\n", "print", "(", "\"saving done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load": [[253, 264], ["print", "tensorflow.train.get_checkpoint_state", "bm05.BaseRunner.saver.restore", "print"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "initialized", ",", "\"Initialize tower before loading.\"", "\n", "\n", "sess", "=", "self", ".", "sess", "\n", "params", "=", "self", ".", "params", "\n", "save_dir", "=", "params", ".", "save_dir", "\n", "print", "(", "\"loading model ...\"", ")", "\n", "checkpoint", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "save_dir", ")", "\n", "assert", "checkpoint", "is", "not", "None", ",", "\"Cannot load checkpoint at %s\"", "%", "save_dir", "\n", "self", ".", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ".", "model_checkpoint_path", ")", "\n", "print", "(", "\"loading done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.__init__": [[267, 272], ["tensorflow.random_normal_initializer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "placeholders", "=", "{", "}", "\n", "self", ".", "tensors", "=", "{", "}", "\n", "self", ".", "default_initializer", "=", "tf", ".", "random_normal_initializer", "(", "params", ".", "init_mean", ",", "params", ".", "init_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.initialize": [[273, 277], ["Exception"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "scope", ")", ":", "\n", "# Actual building", "\n", "# Separated so that GPU assignment can be done here.", "\n", "        ", "raise", "Exception", "(", "\"Implement this!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.get_correct_tensor": [[278, 280], ["None"], "methods", ["None"], ["", "def", "get_correct_tensor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tensors", "[", "'correct'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.get_loss_tensor": [[281, 283], ["None"], "methods", ["None"], ["", "def", "get_loss_tensor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tensors", "[", "'loss'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseTower.get_feed_dict": [[284, 286], ["Exception"], "methods", ["None"], ["", "def", "get_feed_dict", "(", "self", ",", "batch", ",", "mode", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"Implment this!\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.get_args": [[17, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "default", "=", "\"/home/anglil/data/dqa/shining3\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target_dir\"", ",", "default", "=", "\"data/s3\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--glove_path\"", ",", "default", "=", "\"/home/anglil/models/glove/glove.6B.300d.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_count\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--vgg_model_path\"", ",", "default", "=", "\"~/models/vgg/vgg-19.caffemodel\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--vgg_proto_path\"", ",", "default", "=", "\"~/models/vgg/vgg-19.prototxt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "default", "=", "'False'", ")", "\n", "parser", ".", "add_argument", "(", "\"--qa2hypo\"", ",", "default", "=", "'True'", ")", "\n", "parser", ".", "add_argument", "(", "\"--qa2hypo_path\"", ",", "default", "=", "\"../dqa/qa2hypo\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--prepro_images\"", ",", "default", "=", "'True'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.qa2hypo": [[32, 41], ["sys.path.insert", "sys.path.insert", "f"], "function", ["None"], ["", "def", "qa2hypo", "(", "question", ",", "answer", ",", "flag", ",", "qa2hypo_path", ")", ":", "\n", "    ", "if", "flag", "==", "'True'", ":", "\n", "# add qa2hypo_path to the Python path at runtime", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "qa2hypo_path", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "qa2hypo_path", "+", "'/stanford-corenlp-python'", ")", "\n", "from", "qa2hypo", "import", "qa2hypo", "as", "f", "\n", "return", "f", "(", "question", ",", "answer", ",", "False", ",", "True", ")", "\n", "# attach the answer to the question", "\n", "", "return", "\"%s %s\"", "%", "(", "question", ",", "answer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize": [[43, 46], ["tuple", "re.findall"], "function", ["None"], ["", "def", "_tokenize", "(", "raw", ")", ":", "\n", "    ", "tokens", "=", "tuple", "(", "re", ".", "findall", "(", "r\"[\\w]+\"", ",", "raw", ")", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._vadd": [[48, 51], ["word.lower.lower"], "function", ["None"], ["", "def", "_vadd", "(", "vocab_counter", ",", "word", ")", ":", "\n", "    ", "word", "=", "word", ".", "lower", "(", ")", "\n", "vocab_counter", "[", "word", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._vget": [[53, 59], ["word.lower.lower"], "function", ["None"], ["", "def", "_vget", "(", "vocab_dict", ",", "word", ")", ":", "\n", "    ", "word", "=", "word", ".", "lower", "(", ")", "\n", "if", "word", "in", "vocab_dict", ":", "\n", "        ", "return", "vocab_dict", "[", "word", "]", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._vlup": [[61, 63], ["tuple", "p05._vget"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._vget"], ["", "", "def", "_vlup", "(", "vocab_dict", ",", "words", ")", ":", "\n", "    ", "return", "tuple", "(", "_vget", "(", "vocab_dict", ",", "word", ")", "for", "word", "in", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get": [[65, 67], ["None"], "function", ["None"], ["", "def", "_get", "(", "id_map", ",", "key", ")", ":", "\n", "    ", "return", "id_map", "[", "key", "]", "if", "key", "in", "id_map", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.rel2text": [[69, 162], ["p05._tokenize", "p05._tokenize", "len", "p05._get", "len", "p05._get", "len", "len", "p05._tokenize", "len", "p05._get", "len", "p05._tokenize", "len", "p05._get", "len", "p05._get", "p05._tokenize", "p05._get", "len", "p05._tokenize", "p05._get", "len", "p05._get", "str", "p05._get"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get"], ["", "def", "rel2text", "(", "id_map", ",", "rel", ")", ":", "\n", "    ", "\"\"\"\n    Obtain text facts from the relation class.\n    :param id_map:\n    :param rel:\n    :return:\n    \"\"\"", "\n", "TEMPLATES", "=", "[", "\"%s links to %s.\"", ",", "\n", "\"there is %s.\"", ",", "\n", "\"the title is %s.\"", ",", "\n", "\"%s describes region.\"", ",", "\n", "\"there are %s %s.\"", ",", "\n", "\"arrows objects regions 0 1 2 3 4 5 6 7 8 9\"", ",", "\n", "\"% s and %s are related.\"", "]", "\n", "MAX_LABEL_SIZE", "=", "3", "\n", "tup", "=", "rel", "[", ":", "3", "]", "\n", "o_keys", ",", "d_keys", "=", "rel", "[", "3", ":", "]", "\n", "if", "tup", "==", "(", "'interObject'", ",", "'linkage'", ",", "'objectToObject'", ")", ":", "\n", "        ", "template", "=", "TEMPLATES", "[", "0", "]", "\n", "o", "=", "_get", "(", "id_map", ",", "o_keys", "[", "0", "]", ")", "if", "len", "(", "o_keys", ")", "else", "None", "\n", "d", "=", "_get", "(", "id_map", ",", "d_keys", "[", "0", "]", ")", "if", "len", "(", "d_keys", ")", "else", "None", "\n", "if", "not", "(", "o", "and", "d", ")", ":", "\n", "            ", "return", "None", "\n", "", "o_words", "=", "_tokenize", "(", "o", ")", "\n", "d_words", "=", "_tokenize", "(", "d", ")", "\n", "if", "len", "(", "o_words", ")", ">", "MAX_LABEL_SIZE", ":", "\n", "            ", "o", "=", "\"object\"", "\n", "", "if", "len", "(", "d_words", ")", ">", "MAX_LABEL_SIZE", ":", "\n", "            ", "d", "=", "\"object\"", "\n", "", "text", "=", "template", "%", "(", "o", ",", "d", ")", "\n", "return", "text", "\n", "\n", "", "elif", "tup", "==", "(", "'intraObject'", ",", "'linkage'", ",", "'regionDescription'", ")", ":", "\n", "        ", "template", "=", "TEMPLATES", "[", "3", "]", "\n", "o", "=", "_get", "(", "id_map", ",", "o_keys", "[", "0", "]", ")", "if", "len", "(", "o_keys", ")", "else", "None", "\n", "o", "=", "o", "or", "\"an object\"", "\n", "o_words", "=", "_tokenize", "(", "o", ")", "\n", "if", "len", "(", "o_words", ")", ">", "MAX_LABEL_SIZE", ":", "\n", "            ", "o", "=", "\"an object\"", "\n", "", "text", "=", "template", "%", "o", "\n", "return", "text", "\n", "\n", "", "elif", "tup", "==", "(", "'unary'", ",", "''", ",", "'regionDescriptionNoArrow'", ")", ":", "\n", "        ", "template", "=", "TEMPLATES", "[", "3", "]", "\n", "o", "=", "_get", "(", "id_map", ",", "o_keys", "[", "0", "]", ")", "if", "len", "(", "o_keys", ")", "else", "None", "\n", "o", "=", "o", "or", "\"an object\"", "\n", "o_words", "=", "_tokenize", "(", "o", ")", "\n", "if", "len", "(", "o_words", ")", ">", "MAX_LABEL_SIZE", ":", "\n", "            ", "o", "=", "\"an object\"", "\n", "", "text", "=", "template", "%", "o", "\n", "return", "text", "\n", "\n", "", "elif", "tup", "[", "0", "]", "==", "'unary'", "and", "tup", "[", "2", "]", "in", "[", "'objectLabel'", ",", "'ownObject'", "]", ":", "\n", "        ", "template", "=", "TEMPLATES", "[", "1", "]", "\n", "val", "=", "_get", "(", "id_map", ",", "o_keys", "[", "0", "]", ")", "\n", "if", "val", "is", "not", "None", ":", "\n", "            ", "words", "=", "_tokenize", "(", "val", ")", "\n", "if", "len", "(", "words", ")", ">", "MAX_LABEL_SIZE", ":", "\n", "                ", "return", "val", "\n", "", "else", ":", "\n", "                ", "return", "template", "%", "val", "\n", "\n", "", "", "", "elif", "tup", "==", "(", "'unary'", ",", "''", ",", "'regionLabel'", ")", ":", "\n", "        ", "template", "=", "TEMPLATES", "[", "1", "]", "\n", "val", "=", "_get", "(", "id_map", ",", "o_keys", "[", "0", "]", ")", "\n", "if", "val", "is", "not", "None", ":", "\n", "            ", "words", "=", "_tokenize", "(", "val", ")", "\n", "if", "len", "(", "words", ")", ">", "MAX_LABEL_SIZE", ":", "\n", "                ", "return", "val", "\n", "", "else", ":", "\n", "                ", "return", "template", "%", "val", "\n", "\n", "", "", "", "elif", "tup", "==", "(", "'unary'", ",", "''", ",", "'imageTitle'", ")", ":", "\n", "        ", "template", "=", "TEMPLATES", "[", "2", "]", "\n", "val", "=", "_get", "(", "id_map", ",", "o_keys", "[", "0", "]", ")", "\n", "return", "template", "%", "val", "\n", "\n", "", "elif", "tup", "==", "(", "'unary'", ",", "''", ",", "'sectionTitle'", ")", ":", "\n", "        ", "template", "=", "TEMPLATES", "[", "2", "]", "\n", "val", "=", "_get", "(", "id_map", ",", "o_keys", "[", "0", "]", ")", "\n", "return", "template", "%", "val", "\n", "\n", "", "elif", "tup", "[", "0", "]", "==", "'count'", ":", "\n", "        ", "template", "=", "TEMPLATES", "[", "4", "]", "\n", "category", "=", "tup", "[", "2", "]", "\n", "num", "=", "str", "(", "o_keys", ")", "\n", "return", "template", "%", "(", "num", ",", "category", ")", "\n", "\n", "", "elif", "tup", "[", "0", "]", "==", "'unary'", ":", "\n", "        ", "val", "=", "_get", "(", "id_map", ",", "o_keys", "[", "0", "]", ")", "\n", "return", "val", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.anno2rels": [[168, 196], ["set", "anno[].items", "anno[].items", "categories.add", "Relation", "rels.append", "rels.append", "rels.append", "d.items", "len", "Relation", "len", "Relation", "dd.items", "len", "len", "Relation", "rels.append", "set.add"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Memory.add", "home.repos.pwc.inspect_result.allenai_dqa-net.models.m05.Memory.add"], ["def", "anno2rels", "(", "anno", ")", ":", "\n", "    ", "types", "=", "set", "(", ")", "\n", "rels", "=", "[", "]", "\n", "# Unary relations", "\n", "for", "text_id", ",", "d", "in", "anno", "[", "'text'", "]", ".", "items", "(", ")", ":", "\n", "        ", "category", "=", "d", "[", "'category'", "]", "if", "'category'", "in", "d", "else", "''", "\n", "categories", ".", "add", "(", "category", ")", "\n", "rel", "=", "Relation", "(", "'unary'", ",", "''", ",", "category", ",", "[", "text_id", "]", ",", "''", ")", "\n", "rels", ".", "append", "(", "rel", ")", "\n", "\n", "# Counting", "\n", "", "if", "'arrows'", "in", "anno", "and", "len", "(", "anno", "[", "'arrows'", "]", ")", ">", "0", ":", "\n", "        ", "rels", ".", "append", "(", "Relation", "(", "'count'", ",", "''", ",", "'stages'", ",", "len", "(", "anno", "[", "'arrows'", "]", ")", ",", "''", ")", ")", "\n", "", "if", "'objects'", "in", "anno", "and", "len", "(", "anno", "[", "'objects'", "]", ")", ">", "0", ":", "\n", "        ", "rels", ".", "append", "(", "Relation", "(", "'count'", ",", "''", ",", "'objects'", ",", "len", "(", "anno", "[", "'objects'", "]", ")", ",", "''", ")", ")", "\n", "\n", "", "if", "'relationships'", "not", "in", "anno", ":", "\n", "        ", "return", "rels", "\n", "", "for", "type_", ",", "d", "in", "anno", "[", "'relationships'", "]", ".", "items", "(", ")", ":", "\n", "        ", "for", "subtype", ",", "dd", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "for", "rel_id", ",", "ddd", "in", "dd", ".", "items", "(", ")", ":", "\n", "                ", "category", "=", "ddd", "[", "'category'", "]", "\n", "origin", "=", "ddd", "[", "'origin'", "]", "if", "'origin'", "in", "ddd", "else", "\"\"", "\n", "destination", "=", "ddd", "[", "'destination'", "]", "if", "'destination'", "in", "ddd", "else", "\"\"", "\n", "rel", "=", "Relation", "(", "type_", ",", "subtype", ",", "category", ",", "origin", ",", "destination", ")", "\n", "rels", ".", "append", "(", "rel", ")", "\n", "types", ".", "add", "(", "(", "type_", ",", "subtype", ",", "category", ")", ")", "\n", "", "", "", "return", "rels", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get_id_map": [[198, 225], ["anno[].items", "anno[].items", "d.items", "len", "origin.startswith", "origin.startswith", "dest.startswith", "dest.startswith"], "function", ["None"], ["", "def", "_get_id_map", "(", "anno", ")", ":", "\n", "    ", "id_map", "=", "{", "}", "\n", "if", "'text'", "in", "anno", ":", "\n", "        ", "for", "key", ",", "d", "in", "anno", "[", "'text'", "]", ".", "items", "(", ")", ":", "\n", "            ", "id_map", "[", "key", "]", "=", "d", "[", "'value'", "]", "\n", "", "", "if", "'objects'", "in", "anno", ":", "\n", "        ", "for", "key", ",", "d", "in", "anno", "[", "'objects'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'text'", "in", "d", "and", "len", "(", "d", "[", "'text'", "]", ")", ">", "0", ":", "\n", "                ", "new_key", "=", "d", "[", "'text'", "]", "[", "0", "]", "\n", "id_map", "[", "key", "]", "=", "id_map", "[", "new_key", "]", "\n", "", "", "", "if", "'relationships'", "in", "anno", ":", "\n", "        ", "d", "=", "anno", "[", "'relationships'", "]", "\n", "if", "'intraOjbect'", "in", "d", ":", "\n", "            ", "d", "=", "d", "[", "'intraOjbect'", "]", "\n", "if", "'label'", "in", "d", ":", "\n", "                ", "d", "=", "d", "[", "'label'", "]", "\n", "for", "_", ",", "dd", "in", "d", ".", "items", "(", ")", ":", "\n", "                    ", "category", "=", "dd", "[", "'category'", "]", "\n", "if", "category", "in", "[", "'arrowHeadTail'", ",", "'arrowDescriptor'", "]", ":", "\n", "                        ", "continue", "\n", "", "origin", "=", "dd", "[", "'origin'", "]", "[", "0", "]", "\n", "dest", "=", "dd", "[", "'destination'", "]", "[", "0", "]", "\n", "if", "origin", ".", "startswith", "(", "\"CT\"", ")", "or", "origin", ".", "startswith", "(", "\"T\"", ")", ":", "\n", "                        ", "id_map", "[", "dest", "]", "=", "id_map", "[", "origin", "]", "\n", "", "elif", "dest", ".", "startswith", "(", "\"CT\"", ")", "or", "dest", ".", "startswith", "(", "\"T\"", ")", ":", "\n", "                        ", "id_map", "[", "origin", "]", "=", "id_map", "[", "dest", "]", "\n", "", "", "", "", "", "return", "id_map", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.prepro_annos": [[227, 287], ["os.path.join", "os.path.join", "json.load", "os.path.join", "utils.get_pbar().start", "enumerate", "get_pbar().start.finish", "print", "print", "print", "print", "json.dump", "json.dump", "print", "os.path.join", "os.path.join", "json.load", "json.load", "open", "os.path.splitext", "os.path.splitext", "os.path.join", "json.load", "p05.anno2rels", "p05._get_id_map", "list", "max", "max", "get_pbar().start.update", "open", "open", "open", "open", "os.listdir", "name.endswith", "utils.get_pbar", "open", "p05.rel2text", "set", "len", "sum", "len", "p05._tokenize", "len", "len", "zip", "facts_dict.values"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.anno2rels", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._get_id_map", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.rel2text", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize"], ["", "def", "prepro_annos", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Transform DQA annotation.json -> a list of tokenized fact sentences for each image in json file\n    The facts are indexed by image id.\n    :param args:\n    :return:\n    \"\"\"", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "target_dir", "=", "args", ".", "target_dir", "\n", "\n", "# For debugging", "\n", "if", "args", ".", "debug", "==", "'True'", ":", "\n", "        ", "sents_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"raw_sents.json\"", ")", "\n", "answers_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"answers.json\"", ")", "\n", "sentss_dict", "=", "json", ".", "load", "(", "open", "(", "sents_path", ",", "'r'", ")", ")", "\n", "answers_dict", "=", "json", ".", "load", "(", "open", "(", "answers_path", ",", "'r'", ")", ")", "\n", "\n", "", "facts_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"raw_facts.json\"", ")", "\n", "meta_data_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"meta_data.json\"", ")", "\n", "meta_data", "=", "json", ".", "load", "(", "open", "(", "meta_data_path", ",", "\"r\"", ")", ")", "\n", "facts_dict", "=", "{", "}", "\n", "annos_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"annotations\"", ")", "\n", "anno_names", "=", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "annos_dir", ")", "if", "name", ".", "endswith", "(", "\".json\"", ")", "]", "\n", "max_num_facts", "=", "0", "\n", "max_fact_size", "=", "0", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "anno_names", ")", ")", ".", "start", "(", ")", "\n", "for", "i", ",", "anno_name", "in", "enumerate", "(", "anno_names", ")", ":", "\n", "        ", "image_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "anno_name", ")", "\n", "image_id", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "image_name", ")", "\n", "anno_path", "=", "os", ".", "path", ".", "join", "(", "annos_dir", ",", "anno_name", ")", "\n", "anno", "=", "json", ".", "load", "(", "open", "(", "anno_path", ",", "'r'", ")", ")", "\n", "rels", "=", "anno2rels", "(", "anno", ")", "\n", "id_map", "=", "_get_id_map", "(", "anno", ")", "\n", "text_facts", "=", "[", "rel2text", "(", "id_map", ",", "rel", ")", "for", "rel", "in", "rels", "]", "\n", "text_facts", "=", "list", "(", "set", "(", "_tokenize", "(", "fact", ")", "for", "fact", "in", "text_facts", "if", "fact", "is", "not", "None", ")", ")", "\n", "max_fact_size", "=", "max", "(", "[", "max_fact_size", "]", "+", "[", "len", "(", "fact", ")", "for", "fact", "in", "text_facts", "]", ")", "\n", "# For debugging only", "\n", "if", "args", ".", "debug", "==", "'True'", ":", "\n", "            ", "if", "image_id", "in", "sentss_dict", ":", "\n", "                ", "correct_sents", "=", "[", "sents", "[", "answer", "]", "for", "sents", ",", "answer", "in", "zip", "(", "sentss_dict", "[", "image_id", "]", ",", "answers_dict", "[", "image_id", "]", ")", "]", "\n", "# indexed_facts.extend(correct_sents)", "\n", "# FIXME : this is very strong prior!", "\n", "text_facts", "=", "correct_sents", "\n", "", "else", ":", "\n", "                ", "text_facts", "=", "[", "]", "\n", "", "", "facts_dict", "[", "image_id", "]", "=", "text_facts", "\n", "max_num_facts", "=", "max", "(", "max_num_facts", ",", "len", "(", "text_facts", ")", ")", "\n", "pbar", ".", "update", "(", "i", ")", "\n", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "\n", "meta_data", "[", "'max_num_facts'", "]", "=", "max_num_facts", "\n", "meta_data", "[", "'max_fact_size'", "]", "=", "max_fact_size", "\n", "print", "(", "\"number of facts: %d\"", "%", "sum", "(", "len", "(", "facts", ")", "for", "facts", "in", "facts_dict", ".", "values", "(", ")", ")", ")", "\n", "print", "(", "\"max num facts per relation: %d\"", "%", "max_num_facts", ")", "\n", "print", "(", "\"max fact size: %d\"", "%", "max_fact_size", ")", "\n", "print", "(", "\"dumping json files ... \"", ")", "\n", "json", ".", "dump", "(", "meta_data", ",", "open", "(", "meta_data_path", ",", "'w'", ")", ")", "\n", "json", ".", "dump", "(", "facts_dict", ",", "open", "(", "facts_path", ",", "'w'", ")", ")", "\n", "print", "(", "\"done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.prepro_questions": [[289, 345], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "json.load", "sorted", "utils.get_pbar().start", "enumerate", "get_pbar().start.finish", "print", "print", "print", "print", "json.dump", "json.dump", "json.dump", "print", "open", "os.path.splitext", "os.path.splitext", "os.path.join", "json.load", "enumerate", "get_pbar().start.update", "open", "open", "open", "utils.get_pbar", "open", "ques[].items", "max", "len", "sentss.append", "answers.append", "os.listdir", "[].endswith", "int", "len", "p05._tokenize", "max", "p05.qa2hypo", "len", "os.path.splitext", "len", "os.path.splitext", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._tokenize", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.qa2hypo"], ["", "def", "prepro_questions", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    transform DQA questions.json files -> single statements json and single answers json.\n    sentences and answers are doubly indexed by image id first and then question number within that image (0 indexed)\n    :param args:\n    :return:\n    \"\"\"", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "target_dir", "=", "args", ".", "target_dir", "\n", "questions_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"questions\"", ")", "\n", "raw_sents_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"raw_sents.json\"", ")", "\n", "answers_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"answers.json\"", ")", "\n", "meta_data_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"meta_data.json\"", ")", "\n", "meta_data", "=", "json", ".", "load", "(", "open", "(", "meta_data_path", ",", "\"r\"", ")", ")", "\n", "\n", "sentss_dict", "=", "{", "}", "\n", "answers_dict", "=", "{", "}", "\n", "\n", "ques_names", "=", "sorted", "(", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "questions_dir", ")", "if", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "1", "]", ".", "endswith", "(", "\".json\"", ")", "]", ",", "\n", "key", "=", "lambda", "x", ":", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "splitext", "(", "x", ")", "[", "0", "]", ")", "[", "0", "]", ")", ")", "\n", "num_choices", "=", "0", "\n", "num_questions", "=", "0", "\n", "max_sent_size", "=", "0", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "ques_names", ")", ")", ".", "start", "(", ")", "\n", "for", "i", ",", "ques_name", "in", "enumerate", "(", "ques_names", ")", ":", "\n", "        ", "image_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "ques_name", ")", "\n", "image_id", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "image_name", ")", "\n", "sentss", "=", "[", "]", "\n", "answers", "=", "[", "]", "\n", "ques_path", "=", "os", ".", "path", ".", "join", "(", "questions_dir", ",", "ques_name", ")", "\n", "ques", "=", "json", ".", "load", "(", "open", "(", "ques_path", ",", "\"r\"", ")", ")", "\n", "for", "ques_id", ",", "(", "ques_text", ",", "d", ")", "in", "enumerate", "(", "ques", "[", "'questions'", "]", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "d", "[", "'abcLabel'", "]", ":", "\n", "                ", "continue", "\n", "", "sents", "=", "[", "_tokenize", "(", "qa2hypo", "(", "ques_text", ",", "choice", ",", "args", ".", "qa2hypo", ",", "args", ".", "qa2hypo_path", ")", ")", "for", "choice", "in", "d", "[", "'answerTexts'", "]", "]", "\n", "max_sent_size", "=", "max", "(", "max_sent_size", ",", "max", "(", "len", "(", "sent", ")", "for", "sent", "in", "sents", ")", ")", "\n", "assert", "not", "num_choices", "or", "num_choices", "==", "len", "(", "sents", ")", ",", "\"number of choices don't match: %s\"", "%", "ques_name", "\n", "num_choices", "=", "len", "(", "sents", ")", "\n", "sentss", ".", "append", "(", "sents", ")", "\n", "answers", ".", "append", "(", "d", "[", "'correctAnswer'", "]", ")", "\n", "num_questions", "+=", "1", "\n", "", "sentss_dict", "[", "image_id", "]", "=", "sentss", "\n", "answers_dict", "[", "image_id", "]", "=", "answers", "\n", "pbar", ".", "update", "(", "i", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "meta_data", "[", "'num_choices'", "]", "=", "num_choices", "\n", "meta_data", "[", "'max_sent_size'", "]", "=", "max_sent_size", "\n", "\n", "print", "(", "\"number of questions: %d\"", "%", "num_questions", ")", "\n", "print", "(", "\"number of choices: %d\"", "%", "num_choices", ")", "\n", "print", "(", "\"max sent size: %d\"", "%", "max_sent_size", ")", "\n", "print", "(", "\"dumping json file ... \"", ")", "\n", "json", ".", "dump", "(", "sentss_dict", ",", "open", "(", "raw_sents_path", ",", "\"w\"", ")", ")", "\n", "json", ".", "dump", "(", "answers_dict", ",", "open", "(", "answers_path", ",", "\"w\"", ")", ")", "\n", "json", ".", "dump", "(", "meta_data", ",", "open", "(", "meta_data_path", ",", "\"w\"", ")", ")", "\n", "print", "(", "\"done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.build_vocab": [[347, 417], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "json.load", "json.load", "os.path.join", "json.load", "collections.defaultdict", "json.load.items", "json.load.items", "zip", "print", "zip", "print", "print", "h5py.File", "h5py.File.create_dataset", "utils.get_pbar().start", "enumerate", "get_pbar().start.finish", "print", "print", "print", "print", "h5py.File.close", "json.dump", "json.dump", "print", "open", "open", "open", "print", "open", "len", "get_pbar().start.update", "open", "open", "sorted", "line.lstrip().rstrip().split", "utils.get_pbar", "len", "p05._vadd", "list", "len", "len", "p05._vadd", "line.lstrip().rstrip", "map", "collections.defaultdict.items", "line.lstrip"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._vadd", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._vadd"], ["", "def", "build_vocab", "(", "args", ")", ":", "\n", "    ", "target_dir", "=", "args", ".", "target_dir", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"vocab.json\"", ")", "\n", "emb_mat_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"init_emb_mat.h5\"", ")", "\n", "raw_sents_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"raw_sents.json\"", ")", "\n", "raw_facts_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"raw_facts.json\"", ")", "\n", "raw_sentss_dict", "=", "json", ".", "load", "(", "open", "(", "raw_sents_path", ",", "'r'", ")", ")", "\n", "raw_facts_dict", "=", "json", ".", "load", "(", "open", "(", "raw_facts_path", ",", "'r'", ")", ")", "\n", "\n", "meta_data_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"meta_data.json\"", ")", "\n", "meta_data", "=", "json", ".", "load", "(", "open", "(", "meta_data_path", ",", "'r'", ")", ")", "\n", "glove_path", "=", "args", ".", "glove_path", "\n", "\n", "word_counter", "=", "defaultdict", "(", "int", ")", "\n", "\n", "for", "image_id", ",", "raw_sentss", "in", "raw_sentss_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "raw_sents", "in", "raw_sentss", ":", "\n", "            ", "for", "raw_sent", "in", "raw_sents", ":", "\n", "                ", "for", "word", "in", "raw_sent", ":", "\n", "                    ", "_vadd", "(", "word_counter", ",", "word", ")", "\n", "\n", "", "", "", "", "for", "image_id", ",", "raw_facts", "in", "raw_facts_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "raw_fact", "in", "raw_facts", ":", "\n", "            ", "for", "word", "in", "raw_fact", ":", "\n", "                ", "_vadd", "(", "word_counter", ",", "word", ")", "\n", "\n", "", "", "", "word_list", ",", "counts", "=", "zip", "(", "*", "sorted", "(", "[", "pair", "for", "pair", "in", "word_counter", ".", "items", "(", ")", "]", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", ")", "\n", "freq", "=", "5", "\n", "print", "(", "\"top %d frequent words:\"", "%", "freq", ")", "\n", "for", "word", ",", "count", "in", "zip", "(", "word_list", "[", ":", "freq", "]", ",", "counts", "[", ":", "freq", "]", ")", ":", "\n", "        ", "print", "(", "\"%r: %d\"", "%", "(", "word", ",", "count", ")", ")", "\n", "\n", "", "features", "=", "{", "}", "\n", "word_size", "=", "0", "\n", "print", "(", "\"reading %s ... \"", "%", "glove_path", ")", "\n", "with", "open", "(", "glove_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "array", "=", "line", ".", "lstrip", "(", ")", ".", "rstrip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "word", "=", "array", "[", "0", "]", "\n", "if", "word", "in", "word_counter", ":", "\n", "                ", "vector", "=", "list", "(", "map", "(", "float", ",", "array", "[", "1", ":", "]", ")", ")", "\n", "features", "[", "word", "]", "=", "vector", "\n", "word_size", "=", "len", "(", "vector", ")", "\n", "", "", "", "print", "(", "\"done\"", ")", "\n", "vocab_word_list", "=", "[", "word", "for", "word", "in", "word_list", "if", "word", "in", "features", "]", "\n", "unknown_word_list", "=", "[", "word", "for", "word", "in", "word_list", "if", "word", "not", "in", "features", "]", "\n", "vocab_size", "=", "len", "(", "features", ")", "+", "1", "\n", "\n", "f", "=", "h5py", ".", "File", "(", "emb_mat_path", ",", "'w'", ")", "\n", "emb_mat", "=", "f", ".", "create_dataset", "(", "'data'", ",", "[", "vocab_size", ",", "word_size", "]", ",", "dtype", "=", "'float'", ")", "\n", "vocab", "=", "{", "}", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "vocab_word_list", ")", ")", ".", "start", "(", ")", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "vocab_word_list", ")", ":", "\n", "        ", "emb_mat", "[", "i", "+", "1", ",", ":", "]", "=", "features", "[", "word", "]", "\n", "vocab", "[", "word", "]", "=", "i", "+", "1", "\n", "pbar", ".", "update", "(", "i", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "vocab", "[", "'UNK'", "]", "=", "0", "\n", "\n", "meta_data", "[", "'vocab_size'", "]", "=", "vocab_size", "\n", "meta_data", "[", "'word_size'", "]", "=", "word_size", "\n", "print", "(", "\"num of distinct words: %d\"", "%", "len", "(", "word_counter", ")", ")", "\n", "print", "(", "\"vocab size: %d\"", "%", "vocab_size", ")", "\n", "print", "(", "\"word size: %d\"", "%", "word_size", ")", "\n", "\n", "print", "(", "\"dumping json file ... \"", ")", "\n", "f", ".", "close", "(", ")", "\n", "json", ".", "dump", "(", "vocab", ",", "open", "(", "vocab_path", ",", "\"w\"", ")", ")", "\n", "json", ".", "dump", "(", "meta_data", ",", "open", "(", "meta_data_path", ",", "\"w\"", ")", ")", "\n", "print", "(", "\"done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.indexing": [[419, 437], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "json.load", "json.load", "json.load", "print", "json.dump", "json.dump", "print", "open", "open", "open", "open", "open", "json.load.items", "p05._vlup", "json.load.items", "p05._vlup"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._vlup", "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05._vlup"], ["", "def", "indexing", "(", "args", ")", ":", "\n", "    ", "target_dir", "=", "args", ".", "target_dir", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"vocab.json\"", ")", "\n", "raw_sents_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"raw_sents.json\"", ")", "\n", "raw_facts_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"raw_facts.json\"", ")", "\n", "sents_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"sents.json\"", ")", "\n", "facts_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"facts.json\"", ")", "\n", "vocab", "=", "json", ".", "load", "(", "open", "(", "vocab_path", ",", "'r'", ")", ")", "\n", "raw_sentss_dict", "=", "json", ".", "load", "(", "open", "(", "raw_sents_path", ",", "'r'", ")", ")", "\n", "raw_facts_dict", "=", "json", ".", "load", "(", "open", "(", "raw_facts_path", ",", "'r'", ")", ")", "\n", "\n", "sentss_dict", "=", "{", "image_id", ":", "[", "[", "_vlup", "(", "vocab", ",", "sent", ")", "for", "sent", "in", "sents", "]", "for", "sents", "in", "sentss", "]", "for", "image_id", ",", "sentss", "in", "raw_sentss_dict", ".", "items", "(", ")", "}", "\n", "facts_dict", "=", "{", "image_id", ":", "[", "_vlup", "(", "vocab", ",", "fact", ")", "for", "fact", "in", "facts", "]", "for", "image_id", ",", "facts", "in", "raw_facts_dict", ".", "items", "(", ")", "}", "\n", "\n", "print", "(", "\"dumping json files ... \"", ")", "\n", "json", ".", "dump", "(", "sentss_dict", ",", "open", "(", "sents_path", ",", "'w'", ")", ")", "\n", "json", ".", "dump", "(", "facts_dict", ",", "open", "(", "facts_path", ",", "'w'", ")", ")", "\n", "print", "(", "\"done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.create_meta_data": [[439, 446], ["os.path.join", "json.dump", "os.path.exists", "os.mkdir", "open"], "function", ["None"], ["", "def", "create_meta_data", "(", "args", ")", ":", "\n", "    ", "target_dir", "=", "args", ".", "target_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "target_dir", ")", "\n", "", "meta_data_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"meta_data.json\"", ")", "\n", "meta_data", "=", "{", "'data_dir'", ":", "args", ".", "data_dir", "}", "\n", "json", ".", "dump", "(", "meta_data", ",", "open", "(", "meta_data_path", ",", "\"w\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.create_image_ids_and_paths": [[448, 466], ["os.path.join", "os.path.join", "os.path.join", "sorted", "print", "json.dump", "json.dump", "print", "print", "os.path.join", "open", "open", "os.listdir", "name.endswith", "os.path.splitext", "int"], "function", ["None"], ["", "def", "create_image_ids_and_paths", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "prepro_images", "==", "'False'", ":", "\n", "        ", "print", "(", "\"Skipping image preprocessing.\"", ")", "\n", "return", "\n", "", "data_dir", "=", "args", ".", "data_dir", "\n", "target_dir", "=", "args", ".", "target_dir", "\n", "images_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"images\"", ")", "\n", "image_ids_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"image_ids.json\"", ")", "\n", "image_paths_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"image_paths.json\"", ")", "\n", "image_names", "=", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "images_dir", ")", "if", "name", ".", "endswith", "(", "\".png\"", ")", "]", "\n", "image_ids", "=", "[", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "0", "]", "for", "name", "in", "image_names", "]", "\n", "ordered_image_ids", "=", "sorted", "(", "image_ids", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "ordered_image_names", "=", "[", "\"%s.png\"", "%", "id_", "for", "id_", "in", "ordered_image_ids", "]", "\n", "print", "(", "\"dumping json files ... \"", ")", "\n", "image_paths", "=", "[", "os", ".", "path", ".", "join", "(", "images_dir", ",", "name", ")", "for", "name", "in", "ordered_image_names", "]", "\n", "json", ".", "dump", "(", "ordered_image_ids", ",", "open", "(", "image_ids_path", ",", "\"w\"", ")", ")", "\n", "json", ".", "dump", "(", "image_paths", ",", "open", "(", "image_paths_path", ",", "\"w\"", ")", ")", "\n", "print", "(", "\"done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.prepro_images": [[468, 478], ["os.path.join", "os.path.join", "os.system", "print"], "function", ["None"], ["", "def", "prepro_images", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "prepro_images", "==", "'False'", ":", "\n", "        ", "print", "(", "\"Skipping image preprocessing.\"", ")", "\n", "return", "\n", "", "model_path", "=", "args", ".", "vgg_model_path", "\n", "proto_path", "=", "args", ".", "vgg_proto_path", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "target_dir", ",", "\"images.h5\"", ")", "\n", "image_paths_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "target_dir", ",", "\"image_paths.json\"", ")", "\n", "os", ".", "system", "(", "\"th prepro_images.lua --image_path_json %s --cnn_proto %s --cnn_model %s --out_path %s\"", "\n", "%", "(", "image_paths_path", ",", "proto_path", ",", "model_path", ",", "out_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.prepro.p05.copy_folds": [[480, 487], ["range", "os.path.join", "os.path.join", "shutil.copy"], "function", ["None"], ["", "def", "copy_folds", "(", "args", ")", ":", "\n", "    ", "data_dir", "=", "args", ".", "data_dir", "\n", "target_dir", "=", "args", ".", "target_dir", "\n", "for", "num", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "from_folds_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"fold%d.json\"", "%", "num", ")", "\n", "to_folds_path", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "\"fold%d.json\"", "%", "num", ")", "\n", "shutil", ".", "copy", "(", "from_folds_path", ",", "to_folds_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.get_config.Config.__init__": [[10, 12], ["get_config.Config.__dict__.update"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "entries", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "entries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.get_config.get_config": [[14, 30], ["copy.deepcopy", "d1.items", "get_config.Config"], "function", ["None"], ["", "", "def", "get_config", "(", "d0", ",", "d1", ",", "priority", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    d1 replaces d0. If priority = 0, then d0 replaces d1\n    :param d0:\n    :param d1:\n    :param name:\n    :param priority:\n    :return:\n    \"\"\"", "\n", "if", "priority", "==", "0", ":", "\n", "        ", "d0", ",", "d1", "=", "d1", ",", "d0", "\n", "", "d", "=", "deepcopy", "(", "d0", ")", "\n", "for", "key", ",", "val", "in", "d1", ".", "items", "(", ")", ":", "\n", "        ", "if", "val", "is", "not", "None", ":", "\n", "            ", "d", "[", "key", "]", "=", "val", "\n", "", "", "return", "Config", "(", "**", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.get_config.get_config_from_file": [[32, 42], ["os.path.splitext", "get_config.get_config", "json.load", "open", "configs.tsv2json.tsv2dict", "Exception"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.configs.get_config.get_config", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.configs.tsv2json.tsv2dict"], ["", "def", "get_config_from_file", "(", "d0", ",", "path", ",", "id_", ",", "priority", "=", "1", ")", ":", "\n", "    ", "_", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "\n", "if", "ext", "==", "'.json'", ":", "\n", "        ", "configs", "=", "json", ".", "load", "(", "open", "(", "path", ",", "'r'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "", "elif", "ext", "==", "'.tsv'", ":", "\n", "        ", "configs", "=", "tsv2dict", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Extension %r is not supported.\"", "%", "ext", ")", "\n", "", "d1", "=", "configs", "[", "id_", "]", "\n", "return", "get_config", "(", "d0", ",", "d1", ",", "priority", "=", "priority", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.tsv2json.get_args": [[9, 14], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"tsv_path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"json_path\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.tsv2json.tsv2json": [[16, 19], ["tsv2json.tsv2dict", "utils.json_pretty_dump", "open"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.configs.tsv2json.tsv2dict", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.json_pretty_dump"], ["", "def", "tsv2json", "(", "tsv_path", ",", "json_path", ")", ":", "\n", "    ", "d", "=", "tsv2dict", "(", "tsv_path", ")", "\n", "json_pretty_dump", "(", "d", ",", "open", "(", "json_path", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.tsv2json.tsv2dict": [[21, 50], ["open", "csv.reader", "next", "next", "list", "map", "collections.OrderedDict", "Exception", "zip", "caster"], "function", ["None"], ["", "def", "tsv2dict", "(", "tsv_path", ")", ":", "\n", "    ", "def", "bool", "(", "string", ")", ":", "\n", "        ", "\"\"\"\n        shadows original bool, which maps 'False' to True\n        \"\"\"", "\n", "if", "string", "==", "'True'", ":", "\n", "            ", "return", "True", "\n", "", "elif", "string", "==", "'False'", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Cannot convert %s to bool\"", "%", "string", ")", "\n", "\n", "", "", "def", "none", "(", "val", ")", ":", "\n", "        ", "return", "val", "\n", "\n", "", "with", "open", "(", "tsv_path", ",", "'r'", ",", "newline", "=", "''", ")", "as", "file", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "'\\t'", ")", "\n", "fields", "=", "next", "(", "reader", ")", "\n", "type_names", "=", "next", "(", "reader", ")", "\n", "casters", "=", "list", "(", "map", "(", "eval", ",", "type_names", ")", ")", "\n", "out_dict", "=", "{", "}", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "cur_dict", "=", "OrderedDict", "(", "\n", "(", "field", ",", "None", "if", "val", "==", "\"None\"", "else", "caster", "(", "val", ")", ")", "\n", "for", "field", ",", "caster", ",", "val", "in", "zip", "(", "fields", ",", "casters", ",", "row", ")", ")", "\n", "id_", "=", "cur_dict", "[", "'id'", "]", "\n", "del", "cur_dict", "[", "'id'", "]", "\n", "out_dict", "[", "id_", "]", "=", "cur_dict", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.tsv2json.main": [[52, 55], ["tsv2json.get_args", "tsv2json.tsv2json"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations.get_args", "home.repos.pwc.inspect_result.allenai_dqa-net.configs.tsv2json.tsv2json"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "tsv2json", "(", "args", ".", "tsv_path", ",", "args", ".", "json_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.json2tsv.get_args": [[7, 12], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"json_path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"tsv_path\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.json2tsv.json2tsv": [[14, 39], ["json.load", "collections.OrderedDict", "json.load.items", "open", "config.items", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerow", "json.load.items", "collections.OrderedDict.keys", "collections.OrderedDict.values", "csv.writer.writerow", "type"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load"], ["", "def", "json2tsv", "(", "json_path", ",", "tsv_path", ")", ":", "\n", "    ", "configs", "=", "json", ".", "load", "(", "open", "(", "json_path", ",", "'r'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "type_dict", "=", "OrderedDict", "(", "[", "(", "'id'", ",", "'str'", ")", "]", ")", "\n", "for", "id_", ",", "config", "in", "configs", ".", "items", "(", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "config", ".", "items", "(", ")", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "if", "key", "not", "in", "type_dict", ":", "\n", "                    ", "type_dict", "[", "key", "]", "=", "'none'", "\n", "", "continue", "\n", "\n", "", "type_name", "=", "type", "(", "val", ")", ".", "__name__", "\n", "if", "key", "in", "type_dict", "and", "type_dict", "[", "key", "]", "!=", "'none'", ":", "\n", "                ", "assert", "type_dict", "[", "key", "]", "==", "type_name", ",", "\"inconsistent param type: %s\"", "%", "key", "\n", "", "else", ":", "\n", "                ", "type_dict", "[", "key", "]", "=", "type_name", "\n", "\n", "", "", "", "with", "open", "(", "tsv_path", ",", "'w'", ",", "newline", "=", "''", ")", "as", "file", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "file", ",", "delimiter", "=", "'\\t'", ")", "\n", "writer", ".", "writerow", "(", "type_dict", ".", "keys", "(", ")", ")", "\n", "writer", ".", "writerow", "(", "type_dict", ".", "values", "(", ")", ")", "\n", "for", "id_", ",", "config", "in", "configs", ".", "items", "(", ")", ":", "\n", "            ", "config", "[", "\"id\"", "]", "=", "id_", "\n", "row", "=", "[", "config", "[", "key", "]", "if", "key", "in", "config", "and", "config", "[", "key", "]", "is", "not", "None", "else", "\"None\"", "\n", "for", "key", "in", "type_dict", "]", "\n", "writer", ".", "writerow", "(", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.configs.json2tsv.main": [[41, 44], ["json2tsv.get_args", "json2tsv.json2tsv"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations.get_args", "home.repos.pwc.inspect_result.allenai_dqa-net.configs.json2tsv.json2tsv"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "json2tsv", "(", "args", ".", "json_path", ",", "args", ".", "tsv_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_results.get_args": [[17, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"model_num\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"config_name\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"data_type\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"epoch\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--start\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--stop\"", ",", "default", "=", "1500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--show_im\"", ",", "default", "=", "'True'", ")", "\n", "parser", ".", "add_argument", "(", "\"--im_width\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--ext\"", ",", "type", "=", "str", ",", "default", "=", "\".png\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--template_name\"", ",", "type", "=", "str", ",", "default", "=", "\"list_results.html\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_im\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--port\"", ",", "type", "=", "int", ",", "default", "=", "8000", ")", "\n", "parser", ".", "add_argument", "(", "\"--host\"", ",", "type", "=", "str", ",", "default", "=", "\"0.0.0.0\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--open\"", ",", "type", "=", "str", ",", "default", "=", "'False'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_results._decode_sent": [[38, 40], ["None"], "function", ["None"], ["", "def", "_decode_sent", "(", "decoder", ",", "sent", ")", ":", "\n", "    ", "return", "\" \"", ".", "join", "(", "decoder", "[", "idx", "]", "for", "idx", "in", "sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_results.list_results": [[43, 175], ["os.path.join", "json.load", "os.path.join", "os.path.join", "json.load", "json.load", "sorted", "os.path.join", "json.load", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "json.load", "json.load", "json.load", "json.load", "os.path.exists", "os.mkdir", "os.path.dirname", "os.path.join", "jinja2.Environment", "jinja2.Environment.get_template", "list", "enumerate", "utils.get_pbar().start", "enumerate", "get_pbar().start.finish", "os.system", "os.chdir", "socketserver.TCPServer", "print", "socketserver.TCPServer.serve_forever", "open", "open", "open", "open", "open", "open", "open", "open", "shutil.rmtree", "os.path.realpath", "evals[].keys", "list", "enumerate", "get_pbar().start.update", "os.system", "str().zfill", "str().zfill", "str().zfill", "list", "jinja2.FileSystemLoader", "evals[].items", "utils.get_pbar", "list_results._decode_sent", "zip", "os.path.join", "os.path.join", "rows.append", "os.path.join", "int", "json.load.items", "tuple", "len", "list", "numpy.argmax", "len", "open", "f.write", "str", "str", "str", "zip", "float", "len", "len", "list_results._decode_sent", "numpy.argmax", "str().zfill", "env.get_template.render().encode", "len", "float", "len", "str", "env.get_template.render"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_sent", "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_sent"], ["", "def", "list_results", "(", "args", ")", ":", "\n", "    ", "model_num", "=", "args", ".", "model_num", "\n", "config_name", "=", "args", ".", "config_name", "\n", "data_type", "=", "args", ".", "data_type", "\n", "epoch", "=", "args", ".", "epoch", "\n", "configs_path", "=", "os", ".", "path", ".", "join", "(", "\"configs\"", ",", "\"m%s.json\"", "%", "str", "(", "model_num", ")", ".", "zfill", "(", "2", ")", ")", "\n", "configs", "=", "json", ".", "load", "(", "open", "(", "configs_path", ",", "'r'", ")", ")", "\n", "config", "=", "configs", "[", "config_name", "]", "\n", "evals_dir", "=", "os", ".", "path", ".", "join", "(", "\"evals\"", ",", "\"m%s\"", "%", "str", "(", "model_num", ")", ".", "zfill", "(", "2", ")", ",", "config_name", ")", "\n", "evals_name", "=", "\"%s_%s.json\"", "%", "(", "data_type", ",", "str", "(", "epoch", ")", ".", "zfill", "(", "4", ")", ")", "\n", "evals_path", "=", "os", ".", "path", ".", "join", "(", "evals_dir", ",", "evals_name", ")", "\n", "evals", "=", "json", ".", "load", "(", "open", "(", "evals_path", ",", "'r'", ")", ")", "\n", "\n", "fold_path", "=", "config", "[", "'fold_path'", "]", "\n", "fold", "=", "json", ".", "load", "(", "open", "(", "fold_path", ",", "'r'", ")", ")", "\n", "fold_data_type", "=", "'test'", "if", "data_type", "==", "'val'", "else", "data_type", "\n", "image_ids", "=", "sorted", "(", "fold", "[", "fold_data_type", "]", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "\n", "prepro_dir", "=", "config", "[", "'data_dir'", "]", "\n", "meta_data_dir", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "\"meta_data.json\"", ")", "\n", "meta_data", "=", "json", ".", "load", "(", "open", "(", "meta_data_dir", ",", "\"r\"", ")", ")", "\n", "data_dir", "=", "meta_data", "[", "'data_dir'", "]", "\n", "_id", "=", "0", "\n", "html_dir", "=", "\"/tmp/list_results%d\"", "%", "_id", "\n", "while", "os", ".", "path", ".", "exists", "(", "html_dir", ")", ":", "\n", "        ", "_id", "+=", "1", "\n", "html_dir", "=", "\"/tmp/list_results%d\"", "%", "_id", "\n", "\n", "", "images_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'images'", ")", "\n", "annos_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'annotations'", ")", "\n", "\n", "sents_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'sents.json'", ")", "\n", "facts_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'facts.json'", ")", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'vocab.json'", ")", "\n", "answers_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'answers.json'", ")", "\n", "sentss_dict", "=", "json", ".", "load", "(", "open", "(", "sents_path", ",", "\"r\"", ")", ")", "\n", "facts_dict", "=", "json", ".", "load", "(", "open", "(", "facts_path", ",", "\"r\"", ")", ")", "\n", "vocab", "=", "json", ".", "load", "(", "open", "(", "vocab_path", ",", "\"r\"", ")", ")", "\n", "answers_dict", "=", "json", ".", "load", "(", "open", "(", "answers_path", ",", "\"r\"", ")", ")", "\n", "decoder", "=", "{", "idx", ":", "word", "for", "word", ",", "idx", "in", "list", "(", "vocab", ".", "items", "(", ")", ")", "}", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "html_dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "html_dir", ")", "\n", "", "os", ".", "mkdir", "(", "html_dir", ")", "\n", "\n", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "templates_dir", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "'templates'", ")", "\n", "env", "=", "Environment", "(", "loader", "=", "FileSystemLoader", "(", "templates_dir", ")", ")", "\n", "template", "=", "env", ".", "get_template", "(", "args", ".", "template_name", ")", "\n", "\n", "eval_names", "=", "list", "(", "evals", "[", "'values'", "]", ".", "keys", "(", ")", ")", "\n", "eval_dd", "=", "{", "}", "\n", "for", "idx", ",", "id_", "in", "enumerate", "(", "evals", "[", "'ids'", "]", ")", ":", "\n", "        ", "eval_d", "=", "{", "}", "\n", "for", "name", ",", "d", "in", "list", "(", "evals", "[", "'values'", "]", ".", "items", "(", ")", ")", ":", "\n", "            ", "eval_d", "[", "name", "]", "=", "d", "[", "idx", "]", "\n", "", "eval_dd", "[", "tuple", "(", "id_", ")", "]", "=", "eval_d", "\n", "\n", "# headers = ['iid', 'qid', 'image', 'sents', 'answer', 'annotations', 'relations'] + eval_names", "\n", "", "headers", "=", "[", "'iid'", ",", "'qid'", ",", "'image'", ",", "'sents'", ",", "'annotations'", ",", "'relations'", ",", "'p'", ",", "'yp'", "]", "\n", "rows", "=", "[", "]", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "sentss_dict", ")", ")", ".", "start", "(", ")", "\n", "for", "i", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "        ", "if", "image_id", "not", "in", "sentss_dict", ":", "\n", "            ", "continue", "\n", "", "sentss", "=", "sentss_dict", "[", "image_id", "]", "\n", "answers", "=", "answers_dict", "[", "image_id", "]", "\n", "facts", "=", "facts_dict", "[", "image_id", "]", "if", "image_id", "in", "facts_dict", "else", "[", "]", "\n", "decoded_facts", "=", "[", "_decode_sent", "(", "decoder", ",", "fact", ")", "for", "fact", "in", "facts", "]", "\n", "for", "question_id", ",", "(", "sents", ",", "answer", ")", "in", "enumerate", "(", "zip", "(", "sentss", ",", "answers", ")", ")", ":", "\n", "            ", "eval_id", "=", "(", "image_id", ",", "question_id", ")", "\n", "eval_d", "=", "eval_dd", "[", "eval_id", "]", "if", "eval_id", "in", "eval_dd", "else", "None", "\n", "\n", "if", "eval_d", ":", "\n", "                ", "p_all", "=", "list", "(", "zip", "(", "*", "eval_d", "[", "'p'", "]", ")", ")", "\n", "p", "=", "p_all", "[", ":", "len", "(", "decoded_facts", ")", "]", "\n", "p", "=", "[", "[", "float", "(", "\"%.3f\"", "%", "x", ")", "for", "x", "in", "y", "]", "for", "y", "in", "p", "]", "\n", "yp", "=", "[", "float", "(", "\"%.3f\"", "%", "x", ")", "for", "x", "in", "eval_d", "[", "'yp'", "]", "]", "\n", "", "else", ":", "\n", "                ", "p", ",", "yp", ",", "sig", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "", "evals", "=", "[", "eval_d", "[", "name", "]", "if", "eval_d", "else", "\"\"", "for", "name", "in", "eval_names", "]", "\n", "image_name", "=", "\"%s.png\"", "%", "image_id", "\n", "json_name", "=", "\"%s.json\"", "%", "image_name", "\n", "image_url", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "image_name", ")", "\n", "anno_url", "=", "os", ".", "path", ".", "join", "(", "'annotations'", ",", "json_name", ")", "\n", "ap", "=", "np", ".", "argmax", "(", "yp", ")", "if", "len", "(", "yp", ")", ">", "0", "else", "0", "\n", "correct", "=", "len", "(", "yp", ")", ">", "0", "and", "ap", "==", "answer", "\n", "row", "=", "{", "'image_id'", ":", "image_id", ",", "\n", "'question_id'", ":", "question_id", ",", "\n", "'image_url'", ":", "image_url", ",", "\n", "'anno_url'", ":", "anno_url", ",", "\n", "'sents'", ":", "[", "_decode_sent", "(", "decoder", ",", "sent", ")", "for", "sent", "in", "sents", "]", ",", "\n", "'answer'", ":", "answer", ",", "\n", "'facts'", ":", "decoded_facts", ",", "\n", "'p'", ":", "p", ",", "\n", "'yp'", ":", "yp", ",", "\n", "'ap'", ":", "np", ".", "argmax", "(", "yp", ")", "if", "len", "(", "yp", ")", ">", "0", "else", "0", ",", "\n", "'correct'", ":", "correct", ",", "\n", "}", "\n", "\n", "rows", ".", "append", "(", "row", ")", "\n", "\n", "", "if", "i", "%", "args", ".", "num_im", "==", "0", ":", "\n", "            ", "html_path", "=", "os", ".", "path", ".", "join", "(", "html_dir", ",", "\"%s.html\"", "%", "str", "(", "image_id", ")", ".", "zfill", "(", "8", ")", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "num_im", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "image_ids", ")", ":", "\n", "            ", "var_dict", "=", "{", "'title'", ":", "\"Question List\"", ",", "\n", "'image_width'", ":", "args", ".", "im_width", ",", "\n", "'headers'", ":", "headers", ",", "\n", "'rows'", ":", "rows", ",", "\n", "'show_im'", ":", "True", "if", "args", ".", "show_im", "==", "'True'", "else", "False", "}", "\n", "with", "open", "(", "html_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "template", ".", "render", "(", "**", "var_dict", ")", ".", "encode", "(", "'UTF-8'", ")", ")", "\n", "", "rows", "=", "[", "]", "\n", "", "pbar", ".", "update", "(", "i", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "\n", "os", ".", "system", "(", "\"ln -s %s/* %s\"", "%", "(", "data_dir", ",", "html_dir", ")", ")", "\n", "os", ".", "chdir", "(", "html_dir", ")", "\n", "port", "=", "args", ".", "port", "\n", "host", "=", "args", ".", "host", "\n", "# Overriding to suppress log message", "\n", "class", "MyHandler", "(", "http", ".", "server", ".", "SimpleHTTPRequestHandler", ")", ":", "\n", "        ", "def", "log_message", "(", "self", ",", "format", ",", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "", "handler", "=", "MyHandler", "\n", "httpd", "=", "socketserver", ".", "TCPServer", "(", "(", "host", ",", "port", ")", ",", "handler", ")", "\n", "if", "args", ".", "open", "==", "'True'", ":", "\n", "        ", "os", ".", "system", "(", "\"open http://%s:%d\"", "%", "(", "args", ".", "host", ",", "args", ".", "port", ")", ")", "\n", "", "print", "(", "(", "\"serving at %s:%d\"", "%", "(", "host", ",", "port", ")", ")", ")", "\n", "httpd", ".", "serve_forever", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_dqa_questions.get_args": [[13, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"data_dir\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--start\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--stop\"", ",", "default", "=", "1500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--show_im\"", ",", "default", "=", "'True'", ")", "\n", "parser", ".", "add_argument", "(", "\"--im_width\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--ext\"", ",", "type", "=", "str", ",", "default", "=", "\".png\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--template_name\"", ",", "type", "=", "str", ",", "default", "=", "\"list_dqa_questions.html\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--port\"", ",", "type", "=", "int", ",", "default", "=", "8000", ")", "\n", "parser", ".", "add_argument", "(", "\"--host\"", ",", "type", "=", "str", ",", "default", "=", "\"0.0.0.0\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_im\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--open\"", ",", "type", "=", "str", ",", "default", "=", "'False'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_dqa_questions.list_dqa_questions": [[30, 105], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.dirname", "os.path.join", "jinja2.Environment", "jinja2.Environment.get_template", "os.path.exists", "os.mkdir", "sorted", "utils.get_pbar().start", "enumerate", "get_pbar().start.finish", "os.system", "os.chdir", "SocketServer.TCPServer", "print", "SocketServer.TCPServer.serve_forever", "os.path.realpath", "shutil.rmtree", "os.path.splitext", "os.path.join", "os.path.join", "os.path.exists", "get_pbar().start.update", "os.system", "jinja2.FileSystemLoader", "os.listdir", "name.endswith", "utils.get_pbar", "json.load", "json.load", "enumerate", "os.path.join", "int", "name.endswith", "len", "open", "open", "question_dict[].iteritems", "rows.append", "len", "open", "f.write", "int", "str", "os.path.join", "os.path.join", "str().zfill", "env.get_template.render().encode", "os.path.splitext", "os.path.splitext", "str", "env.get_template.render"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load"], ["", "def", "list_dqa_questions", "(", "args", ")", ":", "\n", "    ", "data_dir", "=", "args", ".", "data_dir", "\n", "images_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"images\"", ")", "\n", "questions_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"questions\"", ")", "\n", "annos_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"annotations\"", ")", "\n", "_id", "=", "0", "\n", "html_dir", "=", "\"/tmp/list_dqa_questions_%d\"", "%", "_id", "\n", "while", "os", ".", "path", ".", "exists", "(", "html_dir", ")", ":", "\n", "        ", "_id", "+=", "1", "\n", "html_dir", "=", "\"/tmp/list_dqa_questions_%d\"", "%", "_id", "\n", "\n", "", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "templates_dir", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "'templates'", ")", "\n", "env", "=", "Environment", "(", "loader", "=", "FileSystemLoader", "(", "templates_dir", ")", ")", "\n", "template", "=", "env", ".", "get_template", "(", "args", ".", "template_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "html_dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "html_dir", ")", "\n", "", "os", ".", "mkdir", "(", "html_dir", ")", "\n", "\n", "headers", "=", "[", "'image_id'", ",", "'question_id'", ",", "'image'", ",", "'question'", ",", "'choices'", ",", "'answer'", ",", "'annotations'", "]", "\n", "rows", "=", "[", "]", "\n", "image_names", "=", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "images_dir", ")", "if", "name", ".", "endswith", "(", "'png'", ")", "]", "\n", "image_names", "=", "sorted", "(", "image_names", ",", "key", "=", "lambda", "name", ":", "int", "(", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "0", "]", ")", ")", "\n", "image_names", "=", "[", "name", "for", "name", "in", "image_names", "\n", "if", "name", ".", "endswith", "(", "args", ".", "ext", ")", "and", "args", ".", "start", "<=", "int", "(", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "0", "]", ")", "<", "args", ".", "stop", "]", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "image_names", ")", ")", ".", "start", "(", ")", "\n", "for", "i", ",", "image_name", "in", "enumerate", "(", "image_names", ")", ":", "\n", "        ", "image_id", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "image_name", ")", "\n", "json_name", "=", "\"%s.json\"", "%", "image_name", "\n", "anno_path", "=", "os", ".", "path", ".", "join", "(", "annos_dir", ",", "json_name", ")", "\n", "question_path", "=", "os", ".", "path", ".", "join", "(", "questions_dir", ",", "json_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "question_path", ")", ":", "\n", "            ", "question_dict", "=", "json", ".", "load", "(", "open", "(", "question_path", ",", "\"rb\"", ")", ")", "\n", "anno_dict", "=", "json", ".", "load", "(", "open", "(", "anno_path", ",", "\"rb\"", ")", ")", "\n", "for", "j", ",", "(", "question", ",", "d", ")", "in", "enumerate", "(", "question_dict", "[", "'questions'", "]", ".", "iteritems", "(", ")", ")", ":", "\n", "                ", "row", "=", "{", "'image_id'", ":", "image_id", ",", "\n", "'question_id'", ":", "str", "(", "j", ")", ",", "\n", "'image_url'", ":", "os", ".", "path", ".", "join", "(", "\"images\"", "if", "not", "d", "[", "'abcLabel'", "]", "else", "\"imagesReplacedText\"", ",", "image_name", ")", ",", "\n", "'anno_url'", ":", "os", ".", "path", ".", "join", "(", "\"annotations\"", ",", "json_name", ")", ",", "\n", "'question'", ":", "question", ",", "\n", "'choices'", ":", "d", "[", "'answerTexts'", "]", ",", "\n", "'answer'", ":", "d", "[", "'correctAnswer'", "]", "}", "\n", "rows", ".", "append", "(", "row", ")", "\n", "\n", "", "", "if", "i", "%", "args", ".", "num_im", "==", "0", ":", "\n", "            ", "html_path", "=", "os", ".", "path", ".", "join", "(", "html_dir", ",", "\"%s.html\"", "%", "str", "(", "image_id", ")", ".", "zfill", "(", "8", ")", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "num_im", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "image_names", ")", ":", "\n", "            ", "var_dict", "=", "{", "'title'", ":", "\"Question List\"", ",", "\n", "'image_width'", ":", "args", ".", "im_width", ",", "\n", "'headers'", ":", "headers", ",", "\n", "'rows'", ":", "rows", ",", "\n", "'show_im'", ":", "args", ".", "show_im", "}", "\n", "with", "open", "(", "html_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "template", ".", "render", "(", "**", "var_dict", ")", ".", "encode", "(", "'UTF-8'", ")", ")", "\n", "", "rows", "=", "[", "]", "\n", "", "pbar", ".", "update", "(", "i", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "\n", "\n", "os", ".", "system", "(", "\"ln -s %s/* %s\"", "%", "(", "data_dir", ",", "html_dir", ")", ")", "\n", "os", ".", "chdir", "(", "html_dir", ")", "\n", "port", "=", "args", ".", "port", "\n", "host", "=", "args", ".", "host", "\n", "# Overriding to suppress log message", "\n", "class", "MyHandler", "(", "SimpleHTTPServer", ".", "SimpleHTTPRequestHandler", ")", ":", "\n", "        ", "def", "log_message", "(", "self", ",", "format", ",", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "", "handler", "=", "MyHandler", "\n", "httpd", "=", "SocketServer", ".", "TCPServer", "(", "(", "host", ",", "port", ")", ",", "handler", ")", "\n", "if", "args", ".", "open", "==", "'True'", ":", "\n", "        ", "os", ".", "system", "(", "\"open http://%s:%d\"", "%", "(", "args", ".", "host", ",", "args", ".", "port", ")", ")", "\n", "", "print", "(", "\"serving at %s:%d\"", "%", "(", "host", ",", "port", ")", ")", "\n", "httpd", ".", "serve_forever", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_facts.get_args": [[15, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"prepro_dir\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--start\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--stop\"", ",", "default", "=", "1500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--show_im\"", ",", "default", "=", "'True'", ")", "\n", "parser", ".", "add_argument", "(", "\"--im_width\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--ext\"", ",", "type", "=", "str", ",", "default", "=", "\".png\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--template_name\"", ",", "type", "=", "str", ",", "default", "=", "\"list_facts.html\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_im\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--port\"", ",", "type", "=", "int", ",", "default", "=", "8000", ")", "\n", "parser", ".", "add_argument", "(", "\"--host\"", ",", "type", "=", "str", ",", "default", "=", "\"0.0.0.0\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--open\"", ",", "type", "=", "str", ",", "default", "=", "'False'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_facts._decode_sent": [[33, 35], ["None"], "function", ["None"], ["", "def", "_decode_sent", "(", "decoder", ",", "sent", ")", ":", "\n", "    ", "return", "\" \"", ".", "join", "(", "decoder", "[", "idx", "]", "for", "idx", "in", "sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_facts.list_facts": [[38, 123], ["os.path.join", "json.load", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "json.load", "json.load", "json.load", "json.load", "os.path.exists", "os.mkdir", "os.path.dirname", "os.path.join", "jinja2.Environment", "jinja2.Environment.get_template", "utils.get_pbar().start", "sorted", "enumerate", "get_pbar().start.finish", "os.system", "os.chdir", "SocketServer.TCPServer", "print", "SocketServer.TCPServer.serve_forever", "open", "open", "open", "open", "open", "shutil.rmtree", "os.path.realpath", "json.load.keys", "enumerate", "get_pbar().start.update", "os.system", "json.load.items", "jinja2.FileSystemLoader", "utils.get_pbar", "list_facts._decode_sent", "zip", "os.path.join", "os.path.join", "rows.append", "os.path.join", "len", "int", "len", "open", "f.write", "list_facts._decode_sent", "str().zfill", "env.get_template.render().encode", "str", "env.get_template.render"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_sent", "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_sent"], ["", "def", "list_facts", "(", "args", ")", ":", "\n", "    ", "prepro_dir", "=", "args", ".", "prepro_dir", "\n", "meta_data_dir", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "\"meta_data.json\"", ")", "\n", "meta_data", "=", "json", ".", "load", "(", "open", "(", "meta_data_dir", ",", "\"r\"", ")", ")", "\n", "data_dir", "=", "meta_data", "[", "'data_dir'", "]", "\n", "_id", "=", "0", "\n", "html_dir", "=", "\"/tmp/list_facts%d\"", "%", "_id", "\n", "while", "os", ".", "path", ".", "exists", "(", "html_dir", ")", ":", "\n", "        ", "_id", "+=", "1", "\n", "html_dir", "=", "\"/tmp/list_facts%d\"", "%", "_id", "\n", "\n", "", "images_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'images'", ")", "\n", "annos_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'annotations'", ")", "\n", "\n", "sents_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'sents.json'", ")", "\n", "facts_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'facts.json'", ")", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'vocab.json'", ")", "\n", "answers_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'answers.json'", ")", "\n", "sentss_dict", "=", "json", ".", "load", "(", "open", "(", "sents_path", ",", "\"r\"", ")", ")", "\n", "facts_dict", "=", "json", ".", "load", "(", "open", "(", "facts_path", ",", "\"r\"", ")", ")", "\n", "vocab", "=", "json", ".", "load", "(", "open", "(", "vocab_path", ",", "\"r\"", ")", ")", "\n", "answers_dict", "=", "json", ".", "load", "(", "open", "(", "answers_path", ",", "\"r\"", ")", ")", "\n", "decoder", "=", "{", "idx", ":", "word", "for", "word", ",", "idx", "in", "vocab", ".", "items", "(", ")", "}", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "html_dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "html_dir", ")", "\n", "", "os", ".", "mkdir", "(", "html_dir", ")", "\n", "\n", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "templates_dir", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "'templates'", ")", "\n", "env", "=", "Environment", "(", "loader", "=", "FileSystemLoader", "(", "templates_dir", ")", ")", "\n", "template", "=", "env", ".", "get_template", "(", "args", ".", "template_name", ")", "\n", "\n", "headers", "=", "[", "'iid'", ",", "'qid'", ",", "'image'", ",", "'sents'", ",", "'answer'", ",", "'annotations'", ",", "'relations'", "]", "\n", "rows", "=", "[", "]", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "sentss_dict", ")", ")", ".", "start", "(", ")", "\n", "image_ids", "=", "sorted", "(", "sentss_dict", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "for", "i", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "        ", "sentss", "=", "sentss_dict", "[", "image_id", "]", "\n", "answers", "=", "answers_dict", "[", "image_id", "]", "\n", "facts", "=", "facts_dict", "[", "image_id", "]", "if", "image_id", "in", "facts_dict", "else", "[", "]", "\n", "decoded_facts", "=", "[", "_decode_sent", "(", "decoder", ",", "fact", ")", "for", "fact", "in", "facts", "]", "\n", "for", "question_id", ",", "(", "sents", ",", "answer", ")", "in", "enumerate", "(", "zip", "(", "sentss", ",", "answers", ")", ")", ":", "\n", "            ", "image_name", "=", "\"%s.png\"", "%", "image_id", "\n", "json_name", "=", "\"%s.json\"", "%", "image_name", "\n", "image_url", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "image_name", ")", "\n", "anno_url", "=", "os", ".", "path", ".", "join", "(", "'annotations'", ",", "json_name", ")", "\n", "row", "=", "{", "'image_id'", ":", "image_id", ",", "\n", "'question_id'", ":", "question_id", ",", "\n", "'image_url'", ":", "image_url", ",", "\n", "'anno_url'", ":", "anno_url", ",", "\n", "'sents'", ":", "[", "_decode_sent", "(", "decoder", ",", "sent", ")", "for", "sent", "in", "sents", "]", ",", "\n", "'answer'", ":", "answer", ",", "\n", "'facts'", ":", "decoded_facts", "}", "\n", "rows", ".", "append", "(", "row", ")", "\n", "\n", "", "if", "i", "%", "args", ".", "num_im", "==", "0", ":", "\n", "            ", "html_path", "=", "os", ".", "path", ".", "join", "(", "html_dir", ",", "\"%s.html\"", "%", "str", "(", "image_id", ")", ".", "zfill", "(", "8", ")", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "num_im", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "image_ids", ")", ":", "\n", "            ", "var_dict", "=", "{", "'title'", ":", "\"Question List\"", ",", "\n", "'image_width'", ":", "args", ".", "im_width", ",", "\n", "'headers'", ":", "headers", ",", "\n", "'rows'", ":", "rows", ",", "\n", "'show_im'", ":", "True", "if", "args", ".", "show_im", "==", "'True'", "else", "False", "}", "\n", "with", "open", "(", "html_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "template", ".", "render", "(", "**", "var_dict", ")", ".", "encode", "(", "'UTF-8'", ")", ")", "\n", "", "rows", "=", "[", "]", "\n", "", "pbar", ".", "update", "(", "i", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "\n", "os", ".", "system", "(", "\"ln -s %s/* %s\"", "%", "(", "data_dir", ",", "html_dir", ")", ")", "\n", "os", ".", "chdir", "(", "html_dir", ")", "\n", "port", "=", "args", ".", "port", "\n", "host", "=", "args", ".", "host", "\n", "# Overriding to suppress log message", "\n", "class", "MyHandler", "(", "SimpleHTTPServer", ".", "SimpleHTTPRequestHandler", ")", ":", "\n", "        ", "def", "log_message", "(", "self", ",", "format", ",", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "", "handler", "=", "MyHandler", "\n", "httpd", "=", "SocketServer", ".", "TCPServer", "(", "(", "host", ",", "port", ")", ",", "handler", ")", "\n", "if", "args", ".", "open", "==", "'True'", ":", "\n", "        ", "os", ".", "system", "(", "\"open http://%s:%d\"", "%", "(", "args", ".", "host", ",", "args", ".", "port", ")", ")", "\n", "", "print", "(", "\"serving at %s:%d\"", "%", "(", "host", ",", "port", ")", ")", "\n", "httpd", ".", "serve_forever", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_vqa_questions.main": [[26, 60], ["os.path.join", "os.path.join", "os.path.join", "json.load", "json.load", "range", "env.get_template", "env.get_template.render", "os.system", "os.path.join", "open", "open", "open", "f.write", "list_vqa_questions.main._get_image_url"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "root_dir", "=", "args", ".", "root_dir", "\n", "images_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "args", ".", "images_dir", ")", "\n", "questions_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "args", ".", "questions_name", ")", "\n", "annotations_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "args", ".", "annotations_name", ")", "\n", "html_path", "=", "args", ".", "html_path", "\n", "\n", "def", "_get_image_url", "(", "image_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "images_dir", ",", "\"%s%s%s\"", "%", "(", "args", ".", "prefix", ",", "image_id", ".", "zfill", "(", "args", ".", "zfill_width", ")", ",", "args", ".", "ext", ")", ")", "\n", "\n", "", "questions_dict", "=", "json", ".", "load", "(", "open", "(", "questions_path", ",", "\"rb\"", ")", ")", "\n", "annotations_dict", "=", "json", ".", "load", "(", "open", "(", "annotations_path", ",", "\"rb\"", ")", ")", "\n", "\n", "headers", "=", "[", "'image_id'", ",", "'question_id'", ",", "'image'", ",", "'question'", ",", "'choices'", ",", "'answer'", "]", "\n", "row_dict", "=", "{", "question", "[", "'question_id'", "]", ":", "\n", "{", "'image_id'", ":", "question", "[", "'image_id'", "]", ",", "\n", "'question_id'", ":", "question", "[", "'question_id'", "]", ",", "\n", "'image_url'", ":", "_get_image_url", "(", "question", "[", "'image_id'", "]", ")", ",", "\n", "'question'", ":", "question", "[", "'question'", "]", ",", "\n", "'choices'", ":", "question", "[", "'multiple_choices'", "]", ",", "\n", "'answer'", ":", "annotation", "[", "'multiple_choice_answer'", "]", "}", "\n", "for", "question", ",", "annotation", "in", "zip", "(", "questions_dict", "[", "'questions'", "]", ",", "annotations_dict", "[", "'annotations'", "]", ")", "}", "\n", "idxs", "=", "range", "(", "args", ".", "start", ",", "args", ".", "stop", ")", "\n", "rows", "=", "[", "row_dict", "[", "idx", "]", "for", "idx", "in", "idxs", "]", "\n", "template", "=", "env", ".", "get_template", "(", "args", ".", "template_name", ")", "\n", "vars_dict", "=", "{", "'title'", ":", "\"Question List: %d - %d\"", "%", "(", "args", ".", "start", ",", "args", ".", "stop", "-", "1", ")", ",", "\n", "'image_width'", ":", "args", ".", "image_width", ",", "\n", "'headers'", ":", "headers", ",", "\n", "'rows'", ":", "rows", "[", "args", ".", "start", ":", "args", ".", "stop", "]", "}", "\n", "out", "=", "template", ".", "render", "(", "**", "vars_dict", ")", "\n", "with", "open", "(", "html_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "out", ".", "encode", "(", "'UTF-8'", ")", ")", "\n", "\n", "", "os", ".", "system", "(", "\"open %s\"", "%", "html_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations.get_args": [[11, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"prepro_dir\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--start\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--stop\"", ",", "default", "=", "1500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--show_im\"", ",", "default", "=", "'True'", ")", "\n", "parser", ".", "add_argument", "(", "\"--im_width\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--ext\"", ",", "type", "=", "str", ",", "default", "=", "\".png\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--html_path\"", ",", "type", "=", "str", ",", "default", "=", "\"/tmp/list_relations.html\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--template_name\"", ",", "type", "=", "str", ",", "default", "=", "\"list_relations.html\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_sent": [[26, 28], ["None"], "function", ["None"], ["", "def", "_decode_sent", "(", "decoder", ",", "sent", ")", ":", "\n", "    ", "return", "\" \"", ".", "join", "(", "decoder", "[", "idx", "]", "for", "idx", "in", "sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_relation": [[30, 39], ["copy.deepcopy", "list_relations._decode_sent", "list_relations._decode_sent"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_sent", "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_sent"], ["", "def", "_decode_relation", "(", "decoder", ",", "relation", ")", ":", "\n", "    ", "new_relation", "=", "deepcopy", "(", "relation", ")", "\n", "\"\"\"\n    new_relation['a1r'] = _decode_sent(decoder, new_relation['a1r'])\n    new_relation['a2r'] = _decode_sent(decoder, new_relation['a2r'])\n    \"\"\"", "\n", "new_relation", "[", "'a1'", "]", "=", "_decode_sent", "(", "decoder", ",", "new_relation", "[", "'a1'", "]", ")", "\n", "new_relation", "[", "'a2'", "]", "=", "_decode_sent", "(", "decoder", ",", "new_relation", "[", "'a2'", "]", ")", "\n", "return", "new_relation", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations.interpret_relations": [[41, 100], ["os.path.join", "json.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "json.load", "json.load", "json.load", "json.load", "utils.get_pbar().start", "sorted", "enumerate", "get_pbar().start.finish", "os.path.dirname", "os.path.join", "jinja2.Environment", "jinja2.Environment.get_template", "env.get_template.render", "os.system", "open", "open", "open", "open", "open", "json.load.keys", "enumerate", "get_pbar().start.update", "os.path.realpath", "open", "f.write", "json.load.items", "utils.get_pbar", "list_relations._decode_relation", "zip", "os.path.join", "os.path.join", "rows.append", "jinja2.FileSystemLoader", "len", "int", "list_relations._decode_sent"], "function", ["home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.models.bm05.BaseRunner.load", "home.repos.pwc.inspect_result.allenai_dqa-net.None.utils.get_pbar", "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_relation", "home.repos.pwc.inspect_result.allenai_dqa-net.vis.list_relations._decode_sent"], ["", "def", "interpret_relations", "(", "args", ")", ":", "\n", "    ", "prepro_dir", "=", "args", ".", "prepro_dir", "\n", "meta_data_dir", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "\"meta_data.json\"", ")", "\n", "meta_data", "=", "json", ".", "load", "(", "open", "(", "meta_data_dir", ",", "\"r\"", ")", ")", "\n", "data_dir", "=", "meta_data", "[", "'data_dir'", "]", "\n", "\n", "images_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'images'", ")", "\n", "annos_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'annotations'", ")", "\n", "html_path", "=", "args", ".", "html_path", "\n", "\n", "sents_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'sents.json'", ")", "\n", "relations_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'relations.json'", ")", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'vocab.json'", ")", "\n", "answers_path", "=", "os", ".", "path", ".", "join", "(", "prepro_dir", ",", "'answers.json'", ")", "\n", "sentss_dict", "=", "json", ".", "load", "(", "open", "(", "sents_path", ",", "\"r\"", ")", ")", "\n", "relations_dict", "=", "json", ".", "load", "(", "open", "(", "relations_path", ",", "\"r\"", ")", ")", "\n", "vocab", "=", "json", ".", "load", "(", "open", "(", "vocab_path", ",", "\"r\"", ")", ")", "\n", "answers_dict", "=", "json", ".", "load", "(", "open", "(", "answers_path", ",", "\"r\"", ")", ")", "\n", "decoder", "=", "{", "idx", ":", "word", "for", "word", ",", "idx", "in", "vocab", ".", "items", "(", ")", "}", "\n", "\n", "headers", "=", "[", "'iid'", ",", "'qid'", ",", "'image'", ",", "'sents'", ",", "'answer'", ",", "'annotations'", ",", "'relations'", "]", "\n", "rows", "=", "[", "]", "\n", "pbar", "=", "get_pbar", "(", "len", "(", "sentss_dict", ")", ")", ".", "start", "(", ")", "\n", "image_ids", "=", "sorted", "(", "sentss_dict", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "for", "i", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "        ", "sentss", "=", "sentss_dict", "[", "image_id", "]", "\n", "answers", "=", "answers_dict", "[", "image_id", "]", "\n", "relations", "=", "relations_dict", "[", "image_id", "]", "\n", "decoded_relations", "=", "[", "_decode_relation", "(", "decoder", ",", "relation", ")", "for", "relation", "in", "relations", "]", "\n", "for", "question_id", ",", "(", "sents", ",", "answer", ")", "in", "enumerate", "(", "zip", "(", "sentss", ",", "answers", ")", ")", ":", "\n", "            ", "image_name", "=", "\"%s.png\"", "%", "image_id", "\n", "json_name", "=", "\"%s.json\"", "%", "image_name", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "images_dir", ",", "image_name", ")", "\n", "anno_path", "=", "os", ".", "path", ".", "join", "(", "annos_dir", ",", "json_name", ")", "\n", "row", "=", "{", "'image_id'", ":", "image_id", ",", "\n", "'question_id'", ":", "question_id", ",", "\n", "'image_url'", ":", "image_path", ",", "\n", "'anno_url'", ":", "anno_path", ",", "\n", "'sents'", ":", "[", "_decode_sent", "(", "decoder", ",", "sent", ")", "for", "sent", "in", "sents", "]", ",", "\n", "'answer'", ":", "answer", ",", "\n", "'relations'", ":", "decoded_relations", "}", "\n", "rows", ".", "append", "(", "row", ")", "\n", "", "pbar", ".", "update", "(", "i", ")", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "var_dict", "=", "{", "'title'", ":", "\"Question List: %d - %d\"", "%", "(", "args", ".", "start", ",", "args", ".", "stop", "-", "1", ")", ",", "\n", "'image_width'", ":", "args", ".", "im_width", ",", "\n", "'headers'", ":", "headers", ",", "\n", "'rows'", ":", "rows", ",", "\n", "'show_im'", ":", "True", "if", "args", ".", "show_im", "==", "'True'", "else", "False", "}", "\n", "\n", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "templates_dir", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "'templates'", ")", "\n", "env", "=", "Environment", "(", "loader", "=", "FileSystemLoader", "(", "templates_dir", ")", ")", "\n", "template", "=", "env", ".", "get_template", "(", "args", ".", "template_name", ")", "\n", "out", "=", "template", ".", "render", "(", "**", "var_dict", ")", "\n", "with", "open", "(", "html_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "out", ")", "\n", "\n", "", "os", ".", "system", "(", "\"open %s\"", "%", "html_path", ")", "\n", "\n"]]}