{"home.repos.pwc.inspect_result.turoad_scaloss.None.train.train": [[58, 438], ["isinstance", "utils.general.LOGGER.info", "utils.general.init_seeds", "utils.general.check_suffix", "utils.downloads.attempt_download.endswith", "torch.nn.parallel.DistributedDataParallel.named_parameters", "max", "utils.general.check_img_size", "max", "utils.general.LOGGER.info", "torch.nn.parallel.DistributedDataParallel.modules", "torch.optim.SGD.add_param_group", "torch.optim.SGD.add_param_group", "utils.general.LOGGER.info", "torch.optim.lr_scheduler.LambdaLR", "utils.datasets.create_dataloader", "int", "len", "time.time", "max", "numpy.zeros", "torch.cuda.amp.GradScaler", "utils.torch_utils.EarlyStopping", "utils.loss.ComputeLoss", "utils.general.LOGGER.info", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pathlib.Path", "open", "yaml.safe_dump", "open", "yaml.safe_dump", "utils.loggers.Loggers", "utils.general.methods", "utils.torch_utils.torch_distributed_zero_first", "int", "len", "isinstance", "val_path.endswith", "torch.load", "torch.load", "torch.load", "models.yolo.Model().to", "ckpt[].float().state_dict", "utils.general.intersect_dicts", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "utils.general.LOGGER.info", "models.yolo.Model().to", "any", "int", "utils.autobatch.check_train_batch_size", "round", "isinstance", "torch.optim.Adam", "torch.optim.SGD", "utils.general.one_cycle", "utils.torch_utils.ModelEMA", "utils.general.LOGGER.warning", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.SyncBatchNorm.convert_sync_batchnorm().to", "torch.nn.SyncBatchNorm.convert_sync_batchnorm().to", "torch.nn.SyncBatchNorm.convert_sync_batchnorm().to", "utils.general.LOGGER.info", "[].max", "callbacks.run", "torch.nn.parallel.DistributedDataParallel", "utils.general.labels_to_class_weights().to", "round", "torch.nn.parallel.DistributedDataParallel.train", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "utils.general.LOGGER.info", "torch.optim.SGD.zero_grad", "lr_scheduler.LambdaLR.step", "utils.general.LOGGER.info", "callbacks.run", "utils.general.LOGGER.info", "open", "yaml.safe_load", "utils.general.colorstr", "vars", "callbacks.register_action", "utils.general.check_dataset", "len", "utils.torch_utils.torch_distributed_zero_first", "utils.downloads.attempt_download", "torch.nn.parallel.DistributedDataParallel.state_dict", "range", "utils.general.LOGGER.info", "torch.nn.parallel.DistributedDataParallel.stride.max", "hasattr", "isinstance", "g2.append", "g0.append", "torch.optim.SGD.load_state_dict", "torch.load.get", "ema.ema.load_state_dict", "utils.general.LOGGER.info", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "utils.general.colorstr", "utils.datasets.create_dataloader", "numpy.concatenate", "torch.nn.parallel.DistributedDataParallel.half().float", "utils.general.labels_to_image_weights", "random.choices", "train_loader.sampler.set_epoch", "tqdm.tqdm", "amp.GradScaler.scale().backward", "callbacks.run", "ema.update_attr", "utils.metrics.fitness", "callbacks.run", "f.exists", "len", "models.yolo.Model", "ckpt[].float", "models.yolo.Model", "hasattr", "isinstance", "g1.append", "utils.general.colorstr", "len", "len", "len", "ckpt[].float().state_dict", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "utils.plots.plot_labels", "utils.autoanchor.check_anchors", "utils.torch_utils.de_parallel", "utils.general.labels_to_class_weights", "utils.general.colorstr", "range", "nn.functional.interpolate.to().float", "max", "enumerate", "torch.cuda.amp.autocast", "torch.nn.parallel.DistributedDataParallel", "utils.loss.ComputeLoss.", "amp.GradScaler.step", "amp.GradScaler.update", "torch.optim.SGD.zero_grad", "tqdm.tqdm.set_description", "callbacks.run", "val.run", "numpy.array().reshape", "torch.save", "torch.save", "torch.save", "callbacks.run", "utils.torch_utils.EarlyStopping.", "utils.general.strip_optimizer", "getattr", "yaml.safe_load.get", "len", "len", "type", "numpy.concatenate", "utils.general.colorstr", "torch.nn.parallel.DistributedDataParallel.half", "torch.nn.parallel.DistributedDataParallel.class_weights.cpu().numpy", "numpy.interp().round", "numpy.interp", "max", "torch.functional.interpolate", "targets.to", "amp.GradScaler.scale", "ema.update", "list", "list", "copy.deepcopy().half", "copy.deepcopy().half", "torch.optim.SGD.state_dict", "datetime.datetime.now().isoformat", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.general.LOGGER.info", "val.run", "utils.general.colorstr", "yaml.safe_load.items", "yaml.safe_load.get", "torch.nn.parallel.DistributedDataParallel.state_dict", "yaml.safe_load.get", "ckpt[].float", "nn.functional.interpolate.to", "numpy.interp", "random.randrange", "numpy.array", "callbacks.run", "torch.nn.parallel.DistributedDataParallel.class_weights.cpu", "numpy.interp", "math.ceil", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "copy.deepcopy", "copy.deepcopy", "datetime.datetime.now", "time.time", "models.experimental.attempt_load().half", "utils.general.one_cycle.", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "utils.torch_utils.de_parallel", "models.experimental.attempt_load", "list", "list"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.init_seeds", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_suffix", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_img_size", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.create_dataloader", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.methods", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.torch_distributed_zero_first", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.intersect_dicts", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.autobatch.check_train_batch_size", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.one_cycle", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.None.train.train", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.register_action", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_dataset", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.torch_distributed_zero_first", "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.attempt_download", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.create_dataloader", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.labels_to_image_weights", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.ModelEMA.update_attr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.fitness", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_labels", "home.repos.pwc.inspect_result.turoad_scaloss.utils.autoanchor.check_anchors", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.de_parallel", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.labels_to_class_weights", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.update", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.strip_optimizer", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.update", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.de_parallel", "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.attempt_load"], ["def", "train", "(", "hyp", ",", "# path/to/hyp.yaml or hyp dictionary", "\n", "opt", ",", "\n", "device", ",", "\n", "callbacks", "\n", ")", ":", "\n", "    ", "save_dir", ",", "epochs", ",", "batch_size", ",", "weights", ",", "single_cls", ",", "evolve", ",", "data", ",", "cfg", ",", "resume", ",", "noval", ",", "nosave", ",", "workers", ",", "freeze", ",", "=", "Path", "(", "opt", ".", "save_dir", ")", ",", "opt", ".", "epochs", ",", "opt", ".", "batch_size", ",", "opt", ".", "weights", ",", "opt", ".", "single_cls", ",", "opt", ".", "evolve", ",", "opt", ".", "data", ",", "opt", ".", "cfg", ",", "opt", ".", "resume", ",", "opt", ".", "noval", ",", "opt", ".", "nosave", ",", "opt", ".", "workers", ",", "opt", ".", "freeze", "\n", "\n", "# Directories", "\n", "w", "=", "save_dir", "/", "'weights'", "# weights dir", "\n", "(", "w", ".", "parent", "if", "evolve", "else", "w", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make dir", "\n", "last", ",", "best", "=", "w", "/", "'last.pt'", ",", "w", "/", "'best.pt'", "\n", "\n", "# Hyperparameters", "\n", "if", "isinstance", "(", "hyp", ",", "str", ")", ":", "\n", "        ", "with", "open", "(", "hyp", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "            ", "hyp", "=", "yaml", ".", "safe_load", "(", "f", ")", "# load hyps dict", "\n", "", "", "LOGGER", ".", "info", "(", "colorstr", "(", "'hyperparameters: '", ")", "+", "', '", ".", "join", "(", "f'{k}={v}'", "for", "k", ",", "v", "in", "hyp", ".", "items", "(", ")", ")", ")", "\n", "\n", "# Save run settings", "\n", "with", "open", "(", "save_dir", "/", "'hyp.yaml'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "hyp", ",", "f", ",", "sort_keys", "=", "False", ")", "\n", "", "with", "open", "(", "save_dir", "/", "'opt.yaml'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "vars", "(", "opt", ")", ",", "f", ",", "sort_keys", "=", "False", ")", "\n", "", "data_dict", "=", "None", "\n", "\n", "# Loggers", "\n", "if", "RANK", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "loggers", "=", "Loggers", "(", "save_dir", ",", "weights", ",", "opt", ",", "hyp", ",", "LOGGER", ")", "# loggers instance", "\n", "if", "loggers", ".", "wandb", ":", "\n", "            ", "data_dict", "=", "loggers", ".", "wandb", ".", "data_dict", "\n", "if", "resume", ":", "\n", "                ", "weights", ",", "epochs", ",", "hyp", "=", "opt", ".", "weights", ",", "opt", ".", "epochs", ",", "opt", ".", "hyp", "\n", "\n", "# Register actions", "\n", "", "", "for", "k", "in", "methods", "(", "loggers", ")", ":", "\n", "            ", "callbacks", ".", "register_action", "(", "k", ",", "callback", "=", "getattr", "(", "loggers", ",", "k", ")", ")", "\n", "\n", "# Config", "\n", "", "", "plots", "=", "not", "evolve", "# create plots", "\n", "cuda", "=", "device", ".", "type", "!=", "'cpu'", "\n", "init_seeds", "(", "1", "+", "RANK", ")", "\n", "with", "torch_distributed_zero_first", "(", "LOCAL_RANK", ")", ":", "\n", "        ", "data_dict", "=", "data_dict", "or", "check_dataset", "(", "data", ")", "# check if None", "\n", "", "train_path", ",", "val_path", "=", "data_dict", "[", "'train'", "]", ",", "data_dict", "[", "'val'", "]", "\n", "nc", "=", "1", "if", "single_cls", "else", "int", "(", "data_dict", "[", "'nc'", "]", ")", "# number of classes", "\n", "names", "=", "[", "'item'", "]", "if", "single_cls", "and", "len", "(", "data_dict", "[", "'names'", "]", ")", "!=", "1", "else", "data_dict", "[", "'names'", "]", "# class names", "\n", "assert", "len", "(", "names", ")", "==", "nc", ",", "f'{len(names)} names found for nc={nc} dataset in {data}'", "# check", "\n", "is_coco", "=", "isinstance", "(", "val_path", ",", "str", ")", "and", "val_path", ".", "endswith", "(", "'coco/val2017.txt'", ")", "# COCO dataset", "\n", "\n", "# Model", "\n", "check_suffix", "(", "weights", ",", "'.pt'", ")", "# check weights", "\n", "pretrained", "=", "weights", ".", "endswith", "(", "'.pt'", ")", "\n", "if", "pretrained", ":", "\n", "        ", "with", "torch_distributed_zero_first", "(", "LOCAL_RANK", ")", ":", "\n", "            ", "weights", "=", "attempt_download", "(", "weights", ")", "# download if not found locally", "\n", "", "ckpt", "=", "torch", ".", "load", "(", "weights", ",", "map_location", "=", "device", ")", "# load checkpoint", "\n", "model", "=", "Model", "(", "cfg", "or", "ckpt", "[", "'model'", "]", ".", "yaml", ",", "ch", "=", "3", ",", "nc", "=", "nc", ",", "anchors", "=", "hyp", ".", "get", "(", "'anchors'", ")", ")", ".", "to", "(", "device", ")", "# create", "\n", "exclude", "=", "[", "'anchor'", "]", "if", "(", "cfg", "or", "hyp", ".", "get", "(", "'anchors'", ")", ")", "and", "not", "resume", "else", "[", "]", "# exclude keys", "\n", "csd", "=", "ckpt", "[", "'model'", "]", ".", "float", "(", ")", ".", "state_dict", "(", ")", "# checkpoint state_dict as FP32", "\n", "csd", "=", "intersect_dicts", "(", "csd", ",", "model", ".", "state_dict", "(", ")", ",", "exclude", "=", "exclude", ")", "# intersect", "\n", "model", ".", "load_state_dict", "(", "csd", ",", "strict", "=", "False", ")", "# load", "\n", "LOGGER", ".", "info", "(", "f'Transferred {len(csd)}/{len(model.state_dict())} items from {weights}'", ")", "# report", "\n", "", "else", ":", "\n", "        ", "model", "=", "Model", "(", "cfg", ",", "ch", "=", "3", ",", "nc", "=", "nc", ",", "anchors", "=", "hyp", ".", "get", "(", "'anchors'", ")", ")", ".", "to", "(", "device", ")", "# create", "\n", "\n", "# Freeze", "\n", "", "freeze", "=", "[", "f'model.{x}.'", "for", "x", "in", "range", "(", "freeze", ")", "]", "# layers to freeze", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "v", ".", "requires_grad", "=", "True", "# train all layers", "\n", "if", "any", "(", "x", "in", "k", "for", "x", "in", "freeze", ")", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f'freezing {k}'", ")", "\n", "v", ".", "requires_grad", "=", "False", "\n", "\n", "# Image size", "\n", "", "", "gs", "=", "max", "(", "int", "(", "model", ".", "stride", ".", "max", "(", ")", ")", ",", "32", ")", "# grid size (max stride)", "\n", "imgsz", "=", "check_img_size", "(", "opt", ".", "imgsz", ",", "gs", ",", "floor", "=", "gs", "*", "2", ")", "# verify imgsz is gs-multiple", "\n", "\n", "# Batch size", "\n", "if", "RANK", "==", "-", "1", "and", "batch_size", "==", "-", "1", ":", "# single-GPU only, estimate best batch size", "\n", "        ", "batch_size", "=", "check_train_batch_size", "(", "model", ",", "imgsz", ")", "\n", "\n", "# Optimizer", "\n", "", "nbs", "=", "64", "# nominal batch size", "\n", "accumulate", "=", "max", "(", "round", "(", "nbs", "/", "batch_size", ")", ",", "1", ")", "# accumulate loss before optimizing", "\n", "hyp", "[", "'weight_decay'", "]", "*=", "batch_size", "*", "accumulate", "/", "nbs", "# scale weight_decay", "\n", "LOGGER", ".", "info", "(", "f\"Scaled weight_decay = {hyp['weight_decay']}\"", ")", "\n", "\n", "g0", ",", "g1", ",", "g2", "=", "[", "]", ",", "[", "]", ",", "[", "]", "# optimizer parameter groups", "\n", "for", "v", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "v", ",", "'bias'", ")", "and", "isinstance", "(", "v", ".", "bias", ",", "nn", ".", "Parameter", ")", ":", "# bias", "\n", "            ", "g2", ".", "append", "(", "v", ".", "bias", ")", "\n", "", "if", "isinstance", "(", "v", ",", "nn", ".", "BatchNorm2d", ")", ":", "# weight (no decay)", "\n", "            ", "g0", ".", "append", "(", "v", ".", "weight", ")", "\n", "", "elif", "hasattr", "(", "v", ",", "'weight'", ")", "and", "isinstance", "(", "v", ".", "weight", ",", "nn", ".", "Parameter", ")", ":", "# weight (with decay)", "\n", "            ", "g1", ".", "append", "(", "v", ".", "weight", ")", "\n", "\n", "", "", "if", "opt", ".", "adam", ":", "\n", "        ", "optimizer", "=", "Adam", "(", "g0", ",", "lr", "=", "hyp", "[", "'lr0'", "]", ",", "betas", "=", "(", "hyp", "[", "'momentum'", "]", ",", "0.999", ")", ")", "# adjust beta1 to momentum", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "SGD", "(", "g0", ",", "lr", "=", "hyp", "[", "'lr0'", "]", ",", "momentum", "=", "hyp", "[", "'momentum'", "]", ",", "nesterov", "=", "True", ")", "\n", "\n", "", "optimizer", ".", "add_param_group", "(", "{", "'params'", ":", "g1", ",", "'weight_decay'", ":", "hyp", "[", "'weight_decay'", "]", "}", ")", "# add g1 with weight_decay", "\n", "optimizer", ".", "add_param_group", "(", "{", "'params'", ":", "g2", "}", ")", "# add g2 (biases)", "\n", "LOGGER", ".", "info", "(", "f\"{colorstr('optimizer:')} {type(optimizer).__name__} with parameter groups \"", "\n", "f\"{len(g0)} weight, {len(g1)} weight (no decay), {len(g2)} bias\"", ")", "\n", "del", "g0", ",", "g1", ",", "g2", "\n", "\n", "# Scheduler", "\n", "if", "opt", ".", "linear_lr", ":", "\n", "        ", "lf", "=", "lambda", "x", ":", "(", "1", "-", "x", "/", "(", "epochs", "-", "1", ")", ")", "*", "(", "1.0", "-", "hyp", "[", "'lrf'", "]", ")", "+", "hyp", "[", "'lrf'", "]", "# linear", "\n", "", "else", ":", "\n", "        ", "lf", "=", "one_cycle", "(", "1", ",", "hyp", "[", "'lrf'", "]", ",", "epochs", ")", "# cosine 1->hyp['lrf']", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lf", ")", "# plot_lr_scheduler(optimizer, scheduler, epochs)", "\n", "\n", "# EMA", "\n", "ema", "=", "ModelEMA", "(", "model", ")", "if", "RANK", "in", "[", "-", "1", ",", "0", "]", "else", "None", "\n", "\n", "# Resume", "\n", "start_epoch", ",", "best_fitness", "=", "0", ",", "0.0", "\n", "if", "pretrained", ":", "\n", "# Optimizer", "\n", "        ", "if", "ckpt", "[", "'optimizer'", "]", "is", "not", "None", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer'", "]", ")", "\n", "best_fitness", "=", "ckpt", "[", "'best_fitness'", "]", "\n", "\n", "# EMA", "\n", "", "if", "ema", "and", "ckpt", ".", "get", "(", "'ema'", ")", ":", "\n", "            ", "ema", ".", "ema", ".", "load_state_dict", "(", "ckpt", "[", "'ema'", "]", ".", "float", "(", ")", ".", "state_dict", "(", ")", ")", "\n", "ema", ".", "updates", "=", "ckpt", "[", "'updates'", "]", "\n", "\n", "# Epochs", "\n", "", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "+", "1", "\n", "if", "resume", ":", "\n", "            ", "assert", "start_epoch", ">", "0", ",", "f'{weights} training to {epochs} epochs is finished, nothing to resume.'", "\n", "", "if", "epochs", "<", "start_epoch", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f\"{weights} has been trained for {ckpt['epoch']} epochs. Fine-tuning for {epochs} more epochs.\"", ")", "\n", "epochs", "+=", "ckpt", "[", "'epoch'", "]", "# finetune additional epochs", "\n", "\n", "", "del", "ckpt", ",", "csd", "\n", "\n", "# DP mode", "\n", "", "if", "cuda", "and", "RANK", "==", "-", "1", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "LOGGER", ".", "warning", "(", "'WARNING: DP not recommended, use torch.distributed.run for best DDP Multi-GPU results.\\n'", "\n", "'See Multi-GPU Tutorial at https://github.com/ultralytics/yolov5/issues/475 to get started.'", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# SyncBatchNorm", "\n", "", "if", "opt", ".", "sync_bn", "and", "cuda", "and", "RANK", "!=", "-", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", ".", "to", "(", "device", ")", "\n", "LOGGER", ".", "info", "(", "'Using SyncBatchNorm()'", ")", "\n", "\n", "# Trainloader", "\n", "", "train_loader", ",", "dataset", "=", "create_dataloader", "(", "train_path", ",", "imgsz", ",", "batch_size", "//", "WORLD_SIZE", ",", "gs", ",", "single_cls", ",", "\n", "hyp", "=", "hyp", ",", "augment", "=", "True", ",", "cache", "=", "opt", ".", "cache", ",", "rect", "=", "opt", ".", "rect", ",", "rank", "=", "LOCAL_RANK", ",", "\n", "workers", "=", "workers", ",", "image_weights", "=", "opt", ".", "image_weights", ",", "quad", "=", "opt", ".", "quad", ",", "\n", "prefix", "=", "colorstr", "(", "'train: '", ")", ",", "shuffle", "=", "True", ")", "\n", "mlc", "=", "int", "(", "np", ".", "concatenate", "(", "dataset", ".", "labels", ",", "0", ")", "[", ":", ",", "0", "]", ".", "max", "(", ")", ")", "# max label class", "\n", "nb", "=", "len", "(", "train_loader", ")", "# number of batches", "\n", "assert", "mlc", "<", "nc", ",", "f'Label class {mlc} exceeds nc={nc} in {data}. Possible class labels are 0-{nc - 1}'", "\n", "\n", "# Process 0", "\n", "if", "RANK", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "val_loader", "=", "create_dataloader", "(", "val_path", ",", "imgsz", ",", "batch_size", "//", "WORLD_SIZE", "*", "2", ",", "gs", ",", "single_cls", ",", "\n", "hyp", "=", "hyp", ",", "cache", "=", "None", "if", "noval", "else", "opt", ".", "cache", ",", "rect", "=", "True", ",", "rank", "=", "-", "1", ",", "\n", "workers", "=", "workers", ",", "pad", "=", "0.5", ",", "\n", "prefix", "=", "colorstr", "(", "'val: '", ")", ")", "[", "0", "]", "\n", "\n", "if", "not", "resume", ":", "\n", "            ", "labels", "=", "np", ".", "concatenate", "(", "dataset", ".", "labels", ",", "0", ")", "\n", "# c = torch.tensor(labels[:, 0])  # classes", "\n", "# cf = torch.bincount(c.long(), minlength=nc) + 1.  # frequency", "\n", "# model._initialize_biases(cf.to(device))", "\n", "if", "plots", ":", "\n", "                ", "plot_labels", "(", "labels", ",", "names", ",", "save_dir", ")", "\n", "\n", "# Anchors", "\n", "", "if", "not", "opt", ".", "noautoanchor", ":", "\n", "                ", "check_anchors", "(", "dataset", ",", "model", "=", "model", ",", "thr", "=", "hyp", "[", "'anchor_t'", "]", ",", "imgsz", "=", "imgsz", ")", "\n", "", "model", ".", "half", "(", ")", ".", "float", "(", ")", "# pre-reduce anchor precision", "\n", "\n", "", "callbacks", ".", "run", "(", "'on_pretrain_routine_end'", ")", "\n", "\n", "# DDP mode", "\n", "", "if", "cuda", "and", "RANK", "!=", "-", "1", ":", "\n", "        ", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "LOCAL_RANK", "]", ",", "output_device", "=", "LOCAL_RANK", ")", "\n", "\n", "# Model parameters", "\n", "", "nl", "=", "de_parallel", "(", "model", ")", ".", "model", "[", "-", "1", "]", ".", "nl", "# number of detection layers (to scale hyps)", "\n", "hyp", "[", "'box'", "]", "*=", "3", "/", "nl", "# scale to layers", "\n", "hyp", "[", "'cls'", "]", "*=", "nc", "/", "80", "*", "3", "/", "nl", "# scale to classes and layers", "\n", "hyp", "[", "'obj'", "]", "*=", "(", "imgsz", "/", "640", ")", "**", "2", "*", "3", "/", "nl", "# scale to image size and layers", "\n", "hyp", "[", "'label_smoothing'", "]", "=", "opt", ".", "label_smoothing", "\n", "model", ".", "nc", "=", "nc", "# attach number of classes to model", "\n", "model", ".", "hyp", "=", "hyp", "# attach hyperparameters to model", "\n", "model", ".", "class_weights", "=", "labels_to_class_weights", "(", "dataset", ".", "labels", ",", "nc", ")", ".", "to", "(", "device", ")", "*", "nc", "# attach class weights", "\n", "model", ".", "names", "=", "names", "\n", "\n", "# Start training", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "nw", "=", "max", "(", "round", "(", "hyp", "[", "'warmup_epochs'", "]", "*", "nb", ")", ",", "1000", ")", "# number of warmup iterations, max(3 epochs, 1k iterations)", "\n", "# nw = min(nw, (epochs - start_epoch) / 2 * nb)  # limit warmup to < 1/2 of training", "\n", "last_opt_step", "=", "-", "1", "\n", "maps", "=", "np", ".", "zeros", "(", "nc", ")", "# mAP per class", "\n", "results", "=", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", "# P, R, mAP@.5, mAP@.5-.95, val_loss(box, obj, cls)", "\n", "scheduler", ".", "last_epoch", "=", "start_epoch", "-", "1", "# do not move", "\n", "scaler", "=", "amp", ".", "GradScaler", "(", "enabled", "=", "cuda", ")", "\n", "stopper", "=", "EarlyStopping", "(", "patience", "=", "opt", ".", "patience", ")", "\n", "compute_loss", "=", "ComputeLoss", "(", "model", ")", "# init loss class", "\n", "LOGGER", ".", "info", "(", "f'Image sizes {imgsz} train, {imgsz} val\\n'", "\n", "f'Using {train_loader.num_workers * WORLD_SIZE} dataloader workers\\n'", "\n", "f\"Logging results to {colorstr('bold', save_dir)}\\n\"", "\n", "f'Starting training for {epochs} epochs...'", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "epochs", ")", ":", "# epoch ------------------------------------------------------------------", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "# Update image weights (optional, single-GPU only)", "\n", "if", "opt", ".", "image_weights", ":", "\n", "            ", "cw", "=", "model", ".", "class_weights", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "(", "1", "-", "maps", ")", "**", "2", "/", "nc", "# class weights", "\n", "iw", "=", "labels_to_image_weights", "(", "dataset", ".", "labels", ",", "nc", "=", "nc", ",", "class_weights", "=", "cw", ")", "# image weights", "\n", "dataset", ".", "indices", "=", "random", ".", "choices", "(", "range", "(", "dataset", ".", "n", ")", ",", "weights", "=", "iw", ",", "k", "=", "dataset", ".", "n", ")", "# rand weighted idx", "\n", "\n", "# Update mosaic border (optional)", "\n", "# b = int(random.uniform(0.25 * imgsz, 0.75 * imgsz + gs) // gs * gs)", "\n", "# dataset.mosaic_border = [b - imgsz, -b]  # height, width borders", "\n", "\n", "", "mloss", "=", "torch", ".", "zeros", "(", "3", ",", "device", "=", "device", ")", "# mean losses", "\n", "if", "RANK", "!=", "-", "1", ":", "\n", "            ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "pbar", "=", "enumerate", "(", "train_loader", ")", "\n", "LOGGER", ".", "info", "(", "(", "'\\n'", "+", "'%10s'", "*", "7", ")", "%", "(", "'Epoch'", ",", "'gpu_mem'", ",", "'box'", ",", "'obj'", ",", "'cls'", ",", "'labels'", ",", "'img_size'", ")", ")", "\n", "if", "RANK", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "            ", "pbar", "=", "tqdm", "(", "pbar", ",", "total", "=", "nb", ",", "ncols", "=", "NCOLS", ",", "bar_format", "=", "'{l_bar}{bar:10}{r_bar}{bar:-10b}'", ")", "# progress bar", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "i", ",", "(", "imgs", ",", "targets", ",", "paths", ",", "_", ")", "in", "pbar", ":", "# batch -------------------------------------------------------------", "\n", "            ", "ni", "=", "i", "+", "nb", "*", "epoch", "# number integrated batches (since train start)", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "/", "255", "# uint8 to float32, 0-255 to 0.0-1.0", "\n", "\n", "# Warmup", "\n", "if", "ni", "<=", "nw", ":", "\n", "                ", "xi", "=", "[", "0", ",", "nw", "]", "# x interp", "\n", "# compute_loss.gr = np.interp(ni, xi, [0.0, 1.0])  # iou loss ratio (obj_loss = 1.0 or iou)", "\n", "accumulate", "=", "max", "(", "1", ",", "np", ".", "interp", "(", "ni", ",", "xi", ",", "[", "1", ",", "nbs", "/", "batch_size", "]", ")", ".", "round", "(", ")", ")", "\n", "for", "j", ",", "x", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "# bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0", "\n", "                    ", "x", "[", "'lr'", "]", "=", "np", ".", "interp", "(", "ni", ",", "xi", ",", "[", "hyp", "[", "'warmup_bias_lr'", "]", "if", "j", "==", "2", "else", "0.0", ",", "x", "[", "'initial_lr'", "]", "*", "lf", "(", "epoch", ")", "]", ")", "\n", "if", "'momentum'", "in", "x", ":", "\n", "                        ", "x", "[", "'momentum'", "]", "=", "np", ".", "interp", "(", "ni", ",", "xi", ",", "[", "hyp", "[", "'warmup_momentum'", "]", ",", "hyp", "[", "'momentum'", "]", "]", ")", "\n", "\n", "# Multi-scale", "\n", "", "", "", "if", "opt", ".", "multi_scale", ":", "\n", "                ", "sz", "=", "random", ".", "randrange", "(", "imgsz", "*", "0.5", ",", "imgsz", "*", "1.5", "+", "gs", ")", "//", "gs", "*", "gs", "# size", "\n", "sf", "=", "sz", "/", "max", "(", "imgs", ".", "shape", "[", "2", ":", "]", ")", "# scale factor", "\n", "if", "sf", "!=", "1", ":", "\n", "                    ", "ns", "=", "[", "math", ".", "ceil", "(", "x", "*", "sf", "/", "gs", ")", "*", "gs", "for", "x", "in", "imgs", ".", "shape", "[", "2", ":", "]", "]", "# new shape (stretched to gs-multiple)", "\n", "imgs", "=", "nn", ".", "functional", ".", "interpolate", "(", "imgs", ",", "size", "=", "ns", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# Forward", "\n", "", "", "with", "amp", ".", "autocast", "(", "enabled", "=", "cuda", ")", ":", "\n", "                ", "pred", "=", "model", "(", "imgs", ")", "# forward", "\n", "loss", ",", "loss_items", "=", "compute_loss", "(", "pred", ",", "targets", ".", "to", "(", "device", ")", ")", "# loss scaled by batch_size", "\n", "if", "RANK", "!=", "-", "1", ":", "\n", "                    ", "loss", "*=", "WORLD_SIZE", "# gradient averaged between devices in DDP mode", "\n", "", "if", "opt", ".", "quad", ":", "\n", "                    ", "loss", "*=", "4.", "\n", "\n", "# Backward", "\n", "", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "\n", "# Optimize", "\n", "if", "ni", "-", "last_opt_step", ">=", "accumulate", ":", "\n", "                ", "scaler", ".", "step", "(", "optimizer", ")", "# optimizer.step", "\n", "scaler", ".", "update", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "ema", ":", "\n", "                    ", "ema", ".", "update", "(", "model", ")", "\n", "", "last_opt_step", "=", "ni", "\n", "\n", "# Log", "\n", "", "if", "RANK", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                ", "mloss", "=", "(", "mloss", "*", "i", "+", "loss_items", ")", "/", "(", "i", "+", "1", ")", "# update mean losses", "\n", "mem", "=", "f'{torch.cuda.memory_reserved() / 1E9 if torch.cuda.is_available() else 0:.3g}G'", "# (GB)", "\n", "pbar", ".", "set_description", "(", "(", "'%10s'", "*", "2", "+", "'%10.4g'", "*", "5", ")", "%", "(", "\n", "f'{epoch}/{epochs - 1}'", ",", "mem", ",", "*", "mloss", ",", "targets", ".", "shape", "[", "0", "]", ",", "imgs", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "callbacks", ".", "run", "(", "'on_train_batch_end'", ",", "ni", ",", "model", ",", "imgs", ",", "targets", ",", "paths", ",", "plots", ",", "opt", ".", "sync_bn", ")", "\n", "# end batch ------------------------------------------------------------------------------------------------", "\n", "\n", "# Scheduler", "\n", "", "", "lr", "=", "[", "x", "[", "'lr'", "]", "for", "x", "in", "optimizer", ".", "param_groups", "]", "# for loggers", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "RANK", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "# mAP", "\n", "            ", "callbacks", ".", "run", "(", "'on_train_epoch_end'", ",", "epoch", "=", "epoch", ")", "\n", "ema", ".", "update_attr", "(", "model", ",", "include", "=", "[", "'yaml'", ",", "'nc'", ",", "'hyp'", ",", "'names'", ",", "'stride'", ",", "'class_weights'", "]", ")", "\n", "final_epoch", "=", "(", "epoch", "+", "1", "==", "epochs", ")", "or", "stopper", ".", "possible_stop", "\n", "if", "not", "noval", "or", "final_epoch", ":", "# Calculate mAP", "\n", "                ", "results", ",", "maps", ",", "_", "=", "val", ".", "run", "(", "data_dict", ",", "\n", "batch_size", "=", "batch_size", "//", "WORLD_SIZE", "*", "2", ",", "\n", "imgsz", "=", "imgsz", ",", "\n", "model", "=", "ema", ".", "ema", ",", "\n", "single_cls", "=", "single_cls", ",", "\n", "dataloader", "=", "val_loader", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "plots", "=", "False", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "compute_loss", "=", "compute_loss", ")", "\n", "\n", "# Update best mAP", "\n", "", "fi", "=", "fitness", "(", "np", ".", "array", "(", "results", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "# weighted combination of [P, R, mAP@.5, mAP@.5-.95]", "\n", "if", "fi", ">", "best_fitness", ":", "\n", "                ", "best_fitness", "=", "fi", "\n", "", "log_vals", "=", "list", "(", "mloss", ")", "+", "list", "(", "results", ")", "+", "lr", "\n", "callbacks", ".", "run", "(", "'on_fit_epoch_end'", ",", "log_vals", ",", "epoch", ",", "best_fitness", ",", "fi", ")", "\n", "\n", "# Save model", "\n", "if", "(", "not", "nosave", ")", "or", "(", "final_epoch", "and", "not", "evolve", ")", ":", "# if save", "\n", "                ", "ckpt", "=", "{", "'epoch'", ":", "epoch", ",", "\n", "'best_fitness'", ":", "best_fitness", ",", "\n", "'model'", ":", "deepcopy", "(", "de_parallel", "(", "model", ")", ")", ".", "half", "(", ")", ",", "\n", "'ema'", ":", "deepcopy", "(", "ema", ".", "ema", ")", ".", "half", "(", ")", ",", "\n", "'updates'", ":", "ema", ".", "updates", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'wandb_id'", ":", "loggers", ".", "wandb", ".", "wandb_run", ".", "id", "if", "loggers", ".", "wandb", "else", "None", ",", "\n", "'date'", ":", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", "}", "\n", "\n", "# Save last, best and delete", "\n", "torch", ".", "save", "(", "ckpt", ",", "last", ")", "\n", "if", "best_fitness", "==", "fi", ":", "\n", "                    ", "torch", ".", "save", "(", "ckpt", ",", "best", ")", "\n", "", "if", "(", "epoch", ">", "0", ")", "and", "(", "opt", ".", "save_period", ">", "0", ")", "and", "(", "epoch", "%", "opt", ".", "save_period", "==", "0", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "ckpt", ",", "w", "/", "f'epoch{epoch}.pt'", ")", "\n", "", "del", "ckpt", "\n", "callbacks", ".", "run", "(", "'on_model_save'", ",", "last", ",", "epoch", ",", "final_epoch", ",", "best_fitness", ",", "fi", ")", "\n", "\n", "# Stop Single-GPU", "\n", "", "if", "RANK", "==", "-", "1", "and", "stopper", "(", "epoch", "=", "epoch", ",", "fitness", "=", "fi", ")", ":", "\n", "                ", "break", "\n", "\n", "# Stop DDP TODO: known issues shttps://github.com/ultralytics/yolov5/pull/4576", "\n", "# stop = stopper(epoch=epoch, fitness=fi)", "\n", "# if RANK == 0:", "\n", "#    dist.broadcast_object_list([stop], 0)  # broadcast 'stop' to all ranks", "\n", "\n", "# Stop DPP", "\n", "# with torch_distributed_zero_first(RANK):", "\n", "# if stop:", "\n", "#    break  # must break all DDP ranks", "\n", "\n", "# end epoch ----------------------------------------------------------------------------------------------------", "\n", "# end training -----------------------------------------------------------------------------------------------------", "\n", "", "", "", "if", "RANK", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'\\n{epoch - start_epoch + 1} epochs completed in {(time.time() - t0) / 3600:.3f} hours.'", ")", "\n", "for", "f", "in", "last", ",", "best", ":", "\n", "            ", "if", "f", ".", "exists", "(", ")", ":", "\n", "                ", "strip_optimizer", "(", "f", ")", "# strip optimizers", "\n", "if", "f", "is", "best", ":", "\n", "                    ", "LOGGER", ".", "info", "(", "f'\\nValidating {f}...'", ")", "\n", "results", ",", "_", ",", "_", "=", "val", ".", "run", "(", "data_dict", ",", "\n", "batch_size", "=", "batch_size", "//", "WORLD_SIZE", "*", "2", ",", "\n", "imgsz", "=", "imgsz", ",", "\n", "model", "=", "attempt_load", "(", "f", ",", "device", ")", ".", "half", "(", ")", ",", "\n", "iou_thres", "=", "0.65", "if", "is_coco", "else", "0.60", ",", "# best pycocotools results at 0.65", "\n", "single_cls", "=", "single_cls", ",", "\n", "dataloader", "=", "val_loader", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "save_json", "=", "is_coco", ",", "\n", "verbose", "=", "True", ",", "\n", "plots", "=", "True", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "compute_loss", "=", "compute_loss", ")", "# val best model with plots", "\n", "if", "is_coco", ":", "\n", "                        ", "callbacks", ".", "run", "(", "'on_fit_epoch_end'", ",", "list", "(", "mloss", ")", "+", "list", "(", "results", ")", "+", "lr", ",", "epoch", ",", "best_fitness", ",", "fi", ")", "\n", "\n", "", "", "", "", "callbacks", ".", "run", "(", "'on_train_end'", ",", "last", ",", "best", ",", "plots", ",", "epoch", ",", "results", ")", "\n", "LOGGER", ".", "info", "(", "f\"Results saved to {colorstr('bold', save_dir)}\"", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.train.parse_opt": [[440, 483], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["", "def", "parse_opt", "(", "known", "=", "False", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "type", "=", "str", ",", "default", "=", "ROOT", "/", "'yolov3.pt'", ",", "help", "=", "'initial weights path'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'model.yaml path'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "ROOT", "/", "'data/coco128.yaml'", ",", "help", "=", "'dataset.yaml path'", ")", "\n", "parser", ".", "add_argument", "(", "'--hyp'", ",", "type", "=", "str", ",", "default", "=", "ROOT", "/", "'data/hyps/hyp.scratch.yaml'", ",", "help", "=", "'hyperparameters path'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "300", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'total batch size for all GPUs, -1 for autobatch'", ")", "\n", "parser", ".", "add_argument", "(", "'--imgsz'", ",", "'--img'", ",", "'--img-size'", ",", "type", "=", "int", ",", "default", "=", "640", ",", "help", "=", "'train, val image size (pixels)'", ")", "\n", "parser", ".", "add_argument", "(", "'--rect'", ",", "action", "=", "'store_true'", ",", "help", "=", "'rectangular training'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "help", "=", "'resume most recent training'", ")", "\n", "parser", ".", "add_argument", "(", "'--nosave'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only save final checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--noval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only validate final epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--noautoanchor'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable autoanchor check'", ")", "\n", "parser", ".", "add_argument", "(", "'--evolve'", ",", "type", "=", "int", ",", "nargs", "=", "'?'", ",", "const", "=", "300", ",", "help", "=", "'evolve hyperparameters for x generations'", ")", "\n", "parser", ".", "add_argument", "(", "'--bucket'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'gsutil bucket'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache'", ",", "type", "=", "str", ",", "nargs", "=", "'?'", ",", "const", "=", "'ram'", ",", "help", "=", "'--cache images in \"ram\" (default) or \"disk\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--image-weights'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use weighted image selection for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "''", ",", "help", "=", "'cuda device, i.e. 0 or 0,1,2,3 or cpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--multi-scale'", ",", "action", "=", "'store_true'", ",", "help", "=", "'vary img-size +/- 50%%'", ")", "\n", "parser", ".", "add_argument", "(", "'--single-cls'", ",", "action", "=", "'store_true'", ",", "help", "=", "'train multi-class data as single-class'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use torch.optim.Adam() optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--sync-bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use SyncBatchNorm, only available in DDP mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'max dataloader workers (per RANK in DDP mode)'", ")", "\n", "parser", ".", "add_argument", "(", "'--project'", ",", "default", "=", "ROOT", "/", "'runs/train'", ",", "help", "=", "'save to project/name'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "'exp'", ",", "help", "=", "'save to project/name'", ")", "\n", "parser", ".", "add_argument", "(", "'--exist-ok'", ",", "action", "=", "'store_true'", ",", "help", "=", "'existing project/name ok, do not increment'", ")", "\n", "parser", ".", "add_argument", "(", "'--quad'", ",", "action", "=", "'store_true'", ",", "help", "=", "'quad dataloader'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear-lr'", ",", "action", "=", "'store_true'", ",", "help", "=", "'linear LR'", ")", "\n", "parser", ".", "add_argument", "(", "'--label-smoothing'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'Label smoothing epsilon'", ")", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'EarlyStopping patience (epochs without improvement)'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Number of layers to freeze. backbone=10, all=24'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-period'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'Save checkpoint every x epochs (disabled if < 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'DDP parameter, do not modify'", ")", "\n", "\n", "# Weights & Biases arguments", "\n", "parser", ".", "add_argument", "(", "'--entity'", ",", "default", "=", "None", ",", "help", "=", "'W&B: Entity'", ")", "\n", "parser", ".", "add_argument", "(", "'--upload_dataset'", ",", "action", "=", "'store_true'", ",", "help", "=", "'W&B: Upload dataset as artifact table'", ")", "\n", "parser", ".", "add_argument", "(", "'--bbox_interval'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'W&B: Set bounding-box image logging interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--artifact_alias'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'W&B: Version of dataset artifact to use'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_known_args", "(", ")", "[", "0", "]", "if", "known", "else", "parser", ".", "parse_args", "(", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.train.main": [[485, 611], ["utils.callbacks.Callbacks", "utils.torch_utils.select_device", "utils.general.print_args", "utils.general.check_git_status", "utils.general.check_requirements", "os.path.isfile", "utils.general.LOGGER.info", "str", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.device", "torch.init_process_group", "train.train", "range", "utils.plots.plot_evolve", "utils.general.LOGGER.info", "utils.loggers.wandb.wandb_utils.check_wandb_resume", "isinstance", "utils.general.get_latest_run", "open", "argparse.Namespace", "utils.general.check_file", "utils.general.check_yaml", "utils.general.check_yaml", "str", "str", "len", "len", "str", "utils.general.increment_path", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "utils.general.LOGGER.info", "torch.destroy_process_group", "open", "yaml.safe_load", "pathlib.Path", "os.system", "evolve_csv.exists", "meta.items", "train.train", "utils.general.print_mutation", "numpy.loadtxt", "min", "npr.seed", "numpy.array", "len", "numpy.ones", "all", "enumerate", "max", "min", "round", "yaml.safe_load.copy", "yaml.safe_load.copy", "yaml.safe_load", "pathlib.Path", "torch.is_nccl_available", "len", "int", "yaml.safe_load.keys", "float", "utils.general.colorstr", "utils.metrics.fitness", "utils.metrics.fitness().min", "len", "time.time", "pathlib.Path", "numpy.argsort", "w.sum", "yaml.safe_load.keys", "utils.metrics.fitness", "random.choices", "utils.metrics.fitness", "range", "w.reshape", "npr.random", "npr.randn", "npr.random"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.print_args", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_git_status", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.None.train.train", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_evolve", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.check_wandb_resume", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.get_latest_run", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_file", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_yaml", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_yaml", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.increment_path", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.None.train.train", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.print_mutation", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.fitness", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.fitness", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.fitness"], ["", "def", "main", "(", "opt", ",", "callbacks", "=", "Callbacks", "(", ")", ")", ":", "\n", "# Checks", "\n", "    ", "if", "RANK", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "print_args", "(", "FILE", ".", "stem", ",", "opt", ")", "\n", "check_git_status", "(", ")", "\n", "check_requirements", "(", "exclude", "=", "[", "'thop'", "]", ")", "\n", "\n", "# Resume", "\n", "", "if", "opt", ".", "resume", "and", "not", "check_wandb_resume", "(", "opt", ")", "and", "not", "opt", ".", "evolve", ":", "# resume an interrupted run", "\n", "        ", "ckpt", "=", "opt", ".", "resume", "if", "isinstance", "(", "opt", ".", "resume", ",", "str", ")", "else", "get_latest_run", "(", ")", "# specified or most recent path", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "ckpt", ")", ",", "'ERROR: --resume checkpoint does not exist'", "\n", "with", "open", "(", "Path", "(", "ckpt", ")", ".", "parent", ".", "parent", "/", "'opt.yaml'", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "            ", "opt", "=", "argparse", ".", "Namespace", "(", "**", "yaml", ".", "safe_load", "(", "f", ")", ")", "# replace", "\n", "", "opt", ".", "cfg", ",", "opt", ".", "weights", ",", "opt", ".", "resume", "=", "''", ",", "ckpt", ",", "True", "# reinstate", "\n", "LOGGER", ".", "info", "(", "f'Resuming training from {ckpt}'", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "data", ",", "opt", ".", "cfg", ",", "opt", ".", "hyp", ",", "opt", ".", "weights", ",", "opt", ".", "project", "=", "check_file", "(", "opt", ".", "data", ")", ",", "check_yaml", "(", "opt", ".", "cfg", ")", ",", "check_yaml", "(", "opt", ".", "hyp", ")", ",", "str", "(", "opt", ".", "weights", ")", ",", "str", "(", "opt", ".", "project", ")", "# checks", "\n", "assert", "len", "(", "opt", ".", "cfg", ")", "or", "len", "(", "opt", ".", "weights", ")", ",", "'either --cfg or --weights must be specified'", "\n", "if", "opt", ".", "evolve", ":", "\n", "            ", "opt", ".", "project", "=", "str", "(", "ROOT", "/", "'runs/evolve'", ")", "\n", "opt", ".", "exist_ok", ",", "opt", ".", "resume", "=", "opt", ".", "resume", ",", "False", "# pass resume to exist_ok and disable resume", "\n", "", "opt", ".", "save_dir", "=", "str", "(", "increment_path", "(", "Path", "(", "opt", ".", "project", ")", "/", "opt", ".", "name", ",", "exist_ok", "=", "opt", ".", "exist_ok", ")", ")", "\n", "\n", "# DDP mode", "\n", "", "device", "=", "select_device", "(", "opt", ".", "device", ",", "batch_size", "=", "opt", ".", "batch_size", ")", "\n", "if", "LOCAL_RANK", "!=", "-", "1", ":", "\n", "        ", "assert", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "LOCAL_RANK", ",", "'insufficient CUDA devices for DDP command'", "\n", "assert", "opt", ".", "batch_size", "%", "WORLD_SIZE", "==", "0", ",", "'--batch-size must be multiple of CUDA device count'", "\n", "assert", "not", "opt", ".", "image_weights", ",", "'--image-weights argument is not compatible with DDP training'", "\n", "assert", "not", "opt", ".", "evolve", ",", "'--evolve argument is not compatible with DDP training'", "\n", "torch", ".", "cuda", ".", "set_device", "(", "LOCAL_RANK", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ",", "LOCAL_RANK", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", "if", "dist", ".", "is_nccl_available", "(", ")", "else", "\"gloo\"", ")", "\n", "\n", "# Train", "\n", "", "if", "not", "opt", ".", "evolve", ":", "\n", "        ", "train", "(", "opt", ".", "hyp", ",", "opt", ",", "device", ",", "callbacks", ")", "\n", "if", "WORLD_SIZE", ">", "1", "and", "RANK", "==", "0", ":", "\n", "            ", "LOGGER", ".", "info", "(", "'Destroying process group... '", ")", "\n", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n", "# Evolve hyperparameters (optional)", "\n", "", "", "else", ":", "\n", "# Hyperparameter evolution metadata (mutation scale 0-1, lower_limit, upper_limit)", "\n", "        ", "meta", "=", "{", "'lr0'", ":", "(", "1", ",", "1e-5", ",", "1e-1", ")", ",", "# initial learning rate (SGD=1E-2, Adam=1E-3)", "\n", "'lrf'", ":", "(", "1", ",", "0.01", ",", "1.0", ")", ",", "# final OneCycleLR learning rate (lr0 * lrf)", "\n", "'momentum'", ":", "(", "0.3", ",", "0.6", ",", "0.98", ")", ",", "# SGD momentum/Adam beta1", "\n", "'weight_decay'", ":", "(", "1", ",", "0.0", ",", "0.001", ")", ",", "# optimizer weight decay", "\n", "'warmup_epochs'", ":", "(", "1", ",", "0.0", ",", "5.0", ")", ",", "# warmup epochs (fractions ok)", "\n", "'warmup_momentum'", ":", "(", "1", ",", "0.0", ",", "0.95", ")", ",", "# warmup initial momentum", "\n", "'warmup_bias_lr'", ":", "(", "1", ",", "0.0", ",", "0.2", ")", ",", "# warmup initial bias lr", "\n", "'box'", ":", "(", "1", ",", "0.02", ",", "0.2", ")", ",", "# box loss gain", "\n", "'cls'", ":", "(", "1", ",", "0.2", ",", "4.0", ")", ",", "# cls loss gain", "\n", "'cls_pw'", ":", "(", "1", ",", "0.5", ",", "2.0", ")", ",", "# cls BCELoss positive_weight", "\n", "'obj'", ":", "(", "1", ",", "0.2", ",", "4.0", ")", ",", "# obj loss gain (scale with pixels)", "\n", "'obj_pw'", ":", "(", "1", ",", "0.5", ",", "2.0", ")", ",", "# obj BCELoss positive_weight", "\n", "'iou_t'", ":", "(", "0", ",", "0.1", ",", "0.7", ")", ",", "# IoU training threshold", "\n", "'anchor_t'", ":", "(", "1", ",", "2.0", ",", "8.0", ")", ",", "# anchor-multiple threshold", "\n", "'anchors'", ":", "(", "2", ",", "2.0", ",", "10.0", ")", ",", "# anchors per output grid (0 to ignore)", "\n", "'fl_gamma'", ":", "(", "0", ",", "0.0", ",", "2.0", ")", ",", "# focal loss gamma (efficientDet default gamma=1.5)", "\n", "'hsv_h'", ":", "(", "1", ",", "0.0", ",", "0.1", ")", ",", "# image HSV-Hue augmentation (fraction)", "\n", "'hsv_s'", ":", "(", "1", ",", "0.0", ",", "0.9", ")", ",", "# image HSV-Saturation augmentation (fraction)", "\n", "'hsv_v'", ":", "(", "1", ",", "0.0", ",", "0.9", ")", ",", "# image HSV-Value augmentation (fraction)", "\n", "'degrees'", ":", "(", "1", ",", "0.0", ",", "45.0", ")", ",", "# image rotation (+/- deg)", "\n", "'translate'", ":", "(", "1", ",", "0.0", ",", "0.9", ")", ",", "# image translation (+/- fraction)", "\n", "'scale'", ":", "(", "1", ",", "0.0", ",", "0.9", ")", ",", "# image scale (+/- gain)", "\n", "'shear'", ":", "(", "1", ",", "0.0", ",", "10.0", ")", ",", "# image shear (+/- deg)", "\n", "'perspective'", ":", "(", "0", ",", "0.0", ",", "0.001", ")", ",", "# image perspective (+/- fraction), range 0-0.001", "\n", "'flipud'", ":", "(", "1", ",", "0.0", ",", "1.0", ")", ",", "# image flip up-down (probability)", "\n", "'fliplr'", ":", "(", "0", ",", "0.0", ",", "1.0", ")", ",", "# image flip left-right (probability)", "\n", "'mosaic'", ":", "(", "1", ",", "0.0", ",", "1.0", ")", ",", "# image mixup (probability)", "\n", "'mixup'", ":", "(", "1", ",", "0.0", ",", "1.0", ")", ",", "# image mixup (probability)", "\n", "'copy_paste'", ":", "(", "1", ",", "0.0", ",", "1.0", ")", "}", "# segment copy-paste (probability)", "\n", "\n", "with", "open", "(", "opt", ".", "hyp", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "            ", "hyp", "=", "yaml", ".", "safe_load", "(", "f", ")", "# load hyps dict", "\n", "if", "'anchors'", "not", "in", "hyp", ":", "# anchors commented in hyp.yaml", "\n", "                ", "hyp", "[", "'anchors'", "]", "=", "3", "\n", "", "", "opt", ".", "noval", ",", "opt", ".", "nosave", ",", "save_dir", "=", "True", ",", "True", ",", "Path", "(", "opt", ".", "save_dir", ")", "# only val/save final epoch", "\n", "# ei = [isinstance(x, (int, float)) for x in hyp.values()]  # evolvable indices", "\n", "evolve_yaml", ",", "evolve_csv", "=", "save_dir", "/", "'hyp_evolve.yaml'", ",", "save_dir", "/", "'evolve.csv'", "\n", "if", "opt", ".", "bucket", ":", "\n", "            ", "os", ".", "system", "(", "f'gsutil cp gs://{opt.bucket}/evolve.csv {save_dir}'", ")", "# download evolve.csv if exists", "\n", "\n", "", "for", "_", "in", "range", "(", "opt", ".", "evolve", ")", ":", "# generations to evolve", "\n", "            ", "if", "evolve_csv", ".", "exists", "(", ")", ":", "# if evolve.csv exists: select best hyps and mutate", "\n", "# Select parent(s)", "\n", "                ", "parent", "=", "'single'", "# parent selection method: 'single' or 'weighted'", "\n", "x", "=", "np", ".", "loadtxt", "(", "evolve_csv", ",", "ndmin", "=", "2", ",", "delimiter", "=", "','", ",", "skiprows", "=", "1", ")", "\n", "n", "=", "min", "(", "5", ",", "len", "(", "x", ")", ")", "# number of previous results to consider", "\n", "x", "=", "x", "[", "np", ".", "argsort", "(", "-", "fitness", "(", "x", ")", ")", "]", "[", ":", "n", "]", "# top n mutations", "\n", "w", "=", "fitness", "(", "x", ")", "-", "fitness", "(", "x", ")", ".", "min", "(", ")", "+", "1E-6", "# weights (sum > 0)", "\n", "if", "parent", "==", "'single'", "or", "len", "(", "x", ")", "==", "1", ":", "\n", "# x = x[random.randint(0, n - 1)]  # random selection", "\n", "                    ", "x", "=", "x", "[", "random", ".", "choices", "(", "range", "(", "n", ")", ",", "weights", "=", "w", ")", "[", "0", "]", "]", "# weighted selection", "\n", "", "elif", "parent", "==", "'weighted'", ":", "\n", "                    ", "x", "=", "(", "x", "*", "w", ".", "reshape", "(", "n", ",", "1", ")", ")", ".", "sum", "(", "0", ")", "/", "w", ".", "sum", "(", ")", "# weighted combination", "\n", "\n", "# Mutate", "\n", "", "mp", ",", "s", "=", "0.8", ",", "0.2", "# mutation probability, sigma", "\n", "npr", "=", "np", ".", "random", "\n", "npr", ".", "seed", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "g", "=", "np", ".", "array", "(", "[", "meta", "[", "k", "]", "[", "0", "]", "for", "k", "in", "hyp", ".", "keys", "(", ")", "]", ")", "# gains 0-1", "\n", "ng", "=", "len", "(", "meta", ")", "\n", "v", "=", "np", ".", "ones", "(", "ng", ")", "\n", "while", "all", "(", "v", "==", "1", ")", ":", "# mutate until a change occurs (prevent duplicates)", "\n", "                    ", "v", "=", "(", "g", "*", "(", "npr", ".", "random", "(", "ng", ")", "<", "mp", ")", "*", "npr", ".", "randn", "(", "ng", ")", "*", "npr", ".", "random", "(", ")", "*", "s", "+", "1", ")", ".", "clip", "(", "0.3", ",", "3.0", ")", "\n", "", "for", "i", ",", "k", "in", "enumerate", "(", "hyp", ".", "keys", "(", ")", ")", ":", "# plt.hist(v.ravel(), 300)", "\n", "                    ", "hyp", "[", "k", "]", "=", "float", "(", "x", "[", "i", "+", "7", "]", "*", "v", "[", "i", "]", ")", "# mutate", "\n", "\n", "# Constrain to limits", "\n", "", "", "for", "k", ",", "v", "in", "meta", ".", "items", "(", ")", ":", "\n", "                ", "hyp", "[", "k", "]", "=", "max", "(", "hyp", "[", "k", "]", ",", "v", "[", "1", "]", ")", "# lower limit", "\n", "hyp", "[", "k", "]", "=", "min", "(", "hyp", "[", "k", "]", ",", "v", "[", "2", "]", ")", "# upper limit", "\n", "hyp", "[", "k", "]", "=", "round", "(", "hyp", "[", "k", "]", ",", "5", ")", "# significant digits", "\n", "\n", "# Train mutation", "\n", "", "results", "=", "train", "(", "hyp", ".", "copy", "(", ")", ",", "opt", ",", "device", ",", "callbacks", ")", "\n", "\n", "# Write mutation results", "\n", "print_mutation", "(", "results", ",", "hyp", ".", "copy", "(", ")", ",", "save_dir", ",", "opt", ".", "bucket", ")", "\n", "\n", "# Plot results", "\n", "", "plot_evolve", "(", "evolve_csv", ")", "\n", "LOGGER", ".", "info", "(", "f'Hyperparameter evolution finished\\n'", "\n", "f\"Results saved to {colorstr('bold', save_dir)}\\n\"", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.train.run": [[615, 621], ["train.parse_opt", "kwargs.items", "train.main", "setattr"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.None.detect.parse_opt", "home.repos.pwc.inspect_result.turoad_scaloss.None.detect.main"], ["", "", "def", "run", "(", "**", "kwargs", ")", ":", "\n", "# Usage: import train; train.run(data='coco128.yaml', imgsz=320, weights='yolov3.pt')", "\n", "    ", "opt", "=", "parse_opt", "(", "True", ")", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "opt", ",", "k", ",", "v", ")", "\n", "", "main", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.val.save_one_txt": [[37, 45], ["predn.tolist", "torch.tensor", "open", "f.write", "utils.general.xyxy2xywh", "torch.tensor().view", "len", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh"], ["def", "save_one_txt", "(", "predn", ",", "save_conf", ",", "shape", ",", "file", ")", ":", "\n", "# Save one txt result", "\n", "    ", "gn", "=", "torch", ".", "tensor", "(", "shape", ")", "[", "[", "1", ",", "0", ",", "1", ",", "0", "]", "]", "# normalization gain whwh", "\n", "for", "*", "xyxy", ",", "conf", ",", "cls", "in", "predn", ".", "tolist", "(", ")", ":", "\n", "        ", "xywh", "=", "(", "xyxy2xywh", "(", "torch", ".", "tensor", "(", "xyxy", ")", ".", "view", "(", "1", ",", "4", ")", ")", "/", "gn", ")", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "# normalized xywh", "\n", "line", "=", "(", "cls", ",", "*", "xywh", ",", "conf", ")", "if", "save_conf", "else", "(", "cls", ",", "*", "xywh", ")", "# label format", "\n", "with", "open", "(", "file", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "(", "'%g '", "*", "len", "(", "line", ")", ")", ".", "rstrip", "(", ")", "%", "line", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.val.save_one_json": [[47, 57], ["utils.general.xyxy2xywh", "zip", "path.stem.isnumeric", "int", "predn.tolist", "utils.general.xyxy2xywh.tolist", "jdict.append", "round", "round", "int"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist"], ["", "", "", "def", "save_one_json", "(", "predn", ",", "jdict", ",", "path", ",", "class_map", ")", ":", "\n", "# Save one JSON result {\"image_id\": 42, \"category_id\": 18, \"bbox\": [258.15, 41.29, 348.26, 243.78], \"score\": 0.236}", "\n", "    ", "image_id", "=", "int", "(", "path", ".", "stem", ")", "if", "path", ".", "stem", ".", "isnumeric", "(", ")", "else", "path", ".", "stem", "\n", "box", "=", "xyxy2xywh", "(", "predn", "[", ":", ",", ":", "4", "]", ")", "# xywh", "\n", "box", "[", ":", ",", ":", "2", "]", "-=", "box", "[", ":", ",", "2", ":", "]", "/", "2", "# xy center to top-left corner", "\n", "for", "p", ",", "b", "in", "zip", "(", "predn", ".", "tolist", "(", ")", ",", "box", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "jdict", ".", "append", "(", "{", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "class_map", "[", "int", "(", "p", "[", "5", "]", ")", "]", ",", "\n", "'bbox'", ":", "[", "round", "(", "x", ",", "3", ")", "for", "x", "in", "b", "]", ",", "\n", "'score'", ":", "round", "(", "p", "[", "4", "]", ",", "5", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.val.process_batch": [[59, 81], ["torch.zeros", "utils.general.box_iou", "torch.where", "torch.cat().cpu().numpy", "torch.Tensor().to", "torch.cat().cpu", "torch.Tensor", "matches[].long", "torch.cat", "matches[].argsort", "numpy.unique", "numpy.unique", "torch.stack"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.box_iou"], ["", "", "def", "process_batch", "(", "detections", ",", "labels", ",", "iouv", ")", ":", "\n", "    ", "\"\"\"\n    Return correct predictions matrix. Both sets of boxes are in (x1, y1, x2, y2) format.\n    Arguments:\n        detections (Array[N, 6]), x1, y1, x2, y2, conf, class\n        labels (Array[M, 5]), class, x1, y1, x2, y2\n    Returns:\n        correct (Array[N, 10]), for 10 IoU levels\n    \"\"\"", "\n", "correct", "=", "torch", ".", "zeros", "(", "detections", ".", "shape", "[", "0", "]", ",", "iouv", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "iouv", ".", "device", ")", "\n", "iou", "=", "box_iou", "(", "labels", "[", ":", ",", "1", ":", "]", ",", "detections", "[", ":", ",", ":", "4", "]", ")", "\n", "x", "=", "torch", ".", "where", "(", "(", "iou", ">=", "iouv", "[", "0", "]", ")", "&", "(", "labels", "[", ":", ",", "0", ":", "1", "]", "==", "detections", "[", ":", ",", "5", "]", ")", ")", "# IoU above threshold and classes match", "\n", "if", "x", "[", "0", "]", ".", "shape", "[", "0", "]", ":", "\n", "        ", "matches", "=", "torch", ".", "cat", "(", "(", "torch", ".", "stack", "(", "x", ",", "1", ")", ",", "iou", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", "[", ":", ",", "None", "]", ")", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# [label, detection, iou]", "\n", "if", "x", "[", "0", "]", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "matches", "=", "matches", "[", "matches", "[", ":", ",", "2", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "matches", "=", "matches", "[", "np", ".", "unique", "(", "matches", "[", ":", ",", "1", "]", ",", "return_index", "=", "True", ")", "[", "1", "]", "]", "\n", "# matches = matches[matches[:, 2].argsort()[::-1]]", "\n", "matches", "=", "matches", "[", "np", ".", "unique", "(", "matches", "[", ":", ",", "0", "]", ",", "return_index", "=", "True", ")", "[", "1", "]", "]", "\n", "", "matches", "=", "torch", ".", "Tensor", "(", "matches", ")", ".", "to", "(", "iouv", ".", "device", ")", "\n", "correct", "[", "matches", "[", ":", ",", "1", "]", ".", "long", "(", ")", "]", "=", "matches", "[", ":", ",", "2", ":", "3", "]", ">=", "iouv", "\n", "", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.val.run": [[83, 302], ["torch.no_grad", "pathlib.Path", "utils.callbacks.Callbacks", "models.common.DetectMultiBackend.eval", "torch.linspace().to", "torch.linspace().to.numel", "utils.metrics.ConfusionMatrix", "torch.zeros", "tqdm.tqdm", "enumerate", "utils.general.LOGGER.info", "tuple", "models.common.DetectMultiBackend.float", "enumerate", "utils.torch_utils.select_device", "utils.general.increment_path", "models.common.DetectMultiBackend", "utils.general.check_img_size", "utils.general.check_dataset", "isinstance", "data[].endswith", "int", "utils.general.coco80_to_coco91_class", "list", "utils.torch_utils.time_sync", "utils.torch_utils.time_sync", "torch.Tensor().to", "utils.torch_utils.time_sync", "utils.general.non_max_suppression", "enumerate", "numpy.concatenate", "len", "stats[].any", "utils.metrics.ap_per_class", "numpy.bincount", "torch.zeros", "len", "enumerate", "utils.general.LOGGER.info", "utils.metrics.ConfusionMatrix.plot", "callbacks.run", "len", "str", "str", "utils.general.LOGGER.info", "utils.general.LOGGER.info", "numpy.zeros", "models.common.DetectMultiBackend.half", "models.common.DetectMultiBackend.float", "torch.device", "utils.general.LOGGER.info", "utils.general.check_dataset.get", "torch.linspace", "models.common.DetectMultiBackend.", "utils.datasets.create_dataloader", "enumerate", "range", "im.to.to", "targets.to.to", "im.to.half", "im.to.float", "models.common.DetectMultiBackend.", "models.common.DetectMultiBackend.", "utils.torch_utils.time_sync", "utils.torch_utils.time_sync", "len", "anno.loadRes.clone", "utils.general.scale_coords", "stats.append", "callbacks.run", "threading.Thread().start", "threading.Thread().start", "zip", "ap.mean", "p.mean", "r.mean", "ap50.mean", "ap.mean", "stats[].astype", "utils.general.LOGGER.info", "open", "json.dump", "utils.general.check_requirements", "COCO", "COCO.loadRes", "COCOeval", "COCOeval.evaluate", "COCOeval.accumulate", "COCOeval.summarize", "next", "pathlib.Path", "models.common.DetectMultiBackend.model.half", "models.common.DetectMultiBackend.model.float", "torch.zeros().to().type_as", "compute_loss", "torch.Tensor", "labels[].tolist", "pathlib.Path", "len", "utils.general.xywh2xyxy", "utils.general.scale_coords", "torch.cat", "val.process_batch", "torch.zeros", "val.save_one_txt", "val.save_one_json", "torch.zeros.sum", "list", "pathlib.Path", "pathlib.Path", "utils.general.LOGGER.info", "models.common.DetectMultiBackend.parameters", "next", "utils.general.colorstr", "hasattr", "range", "stats.append", "utils.metrics.ConfusionMatrix.process_batch", "torch.zeros.cpu", "pred[].cpu", "pred[].cpu", "threading.Thread", "threading.Thread", "names.values", "utils.general.check_dataset.get", "int", "len", "utils.general.colorstr", "torch.zeros().to", "models.common.DetectMultiBackend.model.parameters", "x.float", "isinstance", "list", "torch.zeros", "torch.Tensor", "torch.Tensor", "pathlib.Path", "utils.general.increment_path.glob", "torch.zeros.cpu", "len", "torch.zeros", "utils.plots.output_to_target"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.increment_path", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_img_size", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_dataset", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.coco80_to_coco91_class", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.non_max_suppression", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ap_per_class", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.create_dataloader", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.scale_coords", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.scale_coords", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.process_batch", "home.repos.pwc.inspect_result.turoad_scaloss.None.val.save_one_txt", "home.repos.pwc.inspect_result.turoad_scaloss.None.val.save_one_json", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.process_batch", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.output_to_target"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "run", "(", "data", ",", "\n", "weights", "=", "None", ",", "# model.pt path(s)", "\n", "batch_size", "=", "32", ",", "# batch size", "\n", "imgsz", "=", "640", ",", "# inference size (pixels)", "\n", "conf_thres", "=", "0.001", ",", "# confidence threshold", "\n", "iou_thres", "=", "0.6", ",", "# NMS IoU threshold", "\n", "task", "=", "'val'", ",", "# train, val, test, speed or study", "\n", "device", "=", "''", ",", "# cuda device, i.e. 0 or 0,1,2,3 or cpu", "\n", "single_cls", "=", "False", ",", "# treat as single-class dataset", "\n", "augment", "=", "False", ",", "# augmented inference", "\n", "verbose", "=", "False", ",", "# verbose output", "\n", "save_txt", "=", "False", ",", "# save results to *.txt", "\n", "save_hybrid", "=", "False", ",", "# save label+prediction hybrid results to *.txt", "\n", "save_conf", "=", "False", ",", "# save confidences in --save-txt labels", "\n", "save_json", "=", "False", ",", "# save a COCO-JSON results file", "\n", "project", "=", "ROOT", "/", "'runs/val'", ",", "# save to project/name", "\n", "name", "=", "'exp'", ",", "# save to project/name", "\n", "exist_ok", "=", "False", ",", "# existing project/name ok, do not increment", "\n", "half", "=", "True", ",", "# use FP16 half-precision inference", "\n", "dnn", "=", "False", ",", "# use OpenCV DNN for ONNX inference", "\n", "model", "=", "None", ",", "\n", "dataloader", "=", "None", ",", "\n", "save_dir", "=", "Path", "(", "''", ")", ",", "\n", "plots", "=", "True", ",", "\n", "callbacks", "=", "Callbacks", "(", ")", ",", "\n", "compute_loss", "=", "None", ",", "\n", ")", ":", "\n", "# Initialize/load model and set device", "\n", "    ", "training", "=", "model", "is", "not", "None", "\n", "if", "training", ":", "# called by train.py", "\n", "        ", "device", ",", "pt", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ",", "True", "# get model device, PyTorch model", "\n", "\n", "half", "&=", "device", ".", "type", "!=", "'cpu'", "# half precision only supported on CUDA", "\n", "model", ".", "half", "(", ")", "if", "half", "else", "model", ".", "float", "(", ")", "\n", "", "else", ":", "# called directly", "\n", "        ", "device", "=", "select_device", "(", "device", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "# Directories", "\n", "save_dir", "=", "increment_path", "(", "Path", "(", "project", ")", "/", "name", ",", "exist_ok", "=", "exist_ok", ")", "# increment run", "\n", "(", "save_dir", "/", "'labels'", "if", "save_txt", "else", "save_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make dir", "\n", "\n", "# Load model", "\n", "model", "=", "DetectMultiBackend", "(", "weights", ",", "device", "=", "device", ",", "dnn", "=", "dnn", ")", "\n", "stride", ",", "pt", "=", "model", ".", "stride", ",", "model", ".", "pt", "\n", "imgsz", "=", "check_img_size", "(", "imgsz", ",", "s", "=", "stride", ")", "# check image size", "\n", "half", "&=", "pt", "and", "device", ".", "type", "!=", "'cpu'", "# half precision only supported by PyTorch on CUDA", "\n", "if", "pt", ":", "\n", "            ", "model", ".", "model", ".", "half", "(", ")", "if", "half", "else", "model", ".", "model", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "half", "=", "False", "\n", "batch_size", "=", "1", "# export.py models default to batch-size 1", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "LOGGER", ".", "info", "(", "f'Forcing --batch-size 1 square inference shape(1,3,{imgsz},{imgsz}) for non-PyTorch backends'", ")", "\n", "\n", "# Data", "\n", "", "data", "=", "check_dataset", "(", "data", ")", "# check", "\n", "\n", "# Configure", "\n", "", "model", ".", "eval", "(", ")", "\n", "is_coco", "=", "isinstance", "(", "data", ".", "get", "(", "'val'", ")", ",", "str", ")", "and", "data", "[", "'val'", "]", ".", "endswith", "(", "'coco/val2017.txt'", ")", "# COCO dataset", "\n", "nc", "=", "1", "if", "single_cls", "else", "int", "(", "data", "[", "'nc'", "]", ")", "# number of classes", "\n", "iouv", "=", "torch", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ".", "to", "(", "device", ")", "# iou vector for mAP@0.5:0.95", "\n", "niou", "=", "iouv", ".", "numel", "(", ")", "\n", "\n", "# Dataloader", "\n", "if", "not", "training", ":", "\n", "        ", "if", "pt", "and", "device", ".", "type", "!=", "'cpu'", ":", "\n", "            ", "model", "(", "torch", ".", "zeros", "(", "1", ",", "3", ",", "imgsz", ",", "imgsz", ")", ".", "to", "(", "device", ")", ".", "type_as", "(", "next", "(", "model", ".", "model", ".", "parameters", "(", ")", ")", ")", ")", "# warmup", "\n", "", "pad", "=", "0.0", "if", "task", "==", "'speed'", "else", "0.5", "\n", "task", "=", "task", "if", "task", "in", "(", "'train'", ",", "'val'", ",", "'test'", ")", "else", "'val'", "# path to train/val/test images", "\n", "dataloader", "=", "create_dataloader", "(", "data", "[", "task", "]", ",", "imgsz", ",", "batch_size", ",", "stride", ",", "single_cls", ",", "pad", "=", "pad", ",", "rect", "=", "pt", ",", "\n", "prefix", "=", "colorstr", "(", "f'{task}: '", ")", ")", "[", "0", "]", "\n", "\n", "", "seen", "=", "0", "\n", "confusion_matrix", "=", "ConfusionMatrix", "(", "nc", "=", "nc", ")", "\n", "names", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "model", ".", "names", "if", "hasattr", "(", "model", ",", "'names'", ")", "else", "model", ".", "module", ".", "names", ")", "}", "\n", "class_map", "=", "coco80_to_coco91_class", "(", ")", "if", "is_coco", "else", "list", "(", "range", "(", "1000", ")", ")", "\n", "s", "=", "(", "'%20s'", "+", "'%11s'", "*", "6", ")", "%", "(", "'Class'", ",", "'Images'", ",", "'Labels'", ",", "'P'", ",", "'R'", ",", "'mAP@.5'", ",", "'mAP@.5:.95'", ")", "\n", "dt", ",", "p", ",", "r", ",", "f1", ",", "mp", ",", "mr", ",", "map50", ",", "map", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "loss", "=", "torch", ".", "zeros", "(", "3", ",", "device", "=", "device", ")", "\n", "jdict", ",", "stats", ",", "ap", ",", "ap_class", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "pbar", "=", "tqdm", "(", "dataloader", ",", "desc", "=", "s", ",", "ncols", "=", "NCOLS", ",", "bar_format", "=", "'{l_bar}{bar:10}{r_bar}{bar:-10b}'", ")", "# progress bar", "\n", "for", "batch_i", ",", "(", "im", ",", "targets", ",", "paths", ",", "shapes", ")", "in", "enumerate", "(", "pbar", ")", ":", "\n", "        ", "t1", "=", "time_sync", "(", ")", "\n", "if", "pt", ":", "\n", "            ", "im", "=", "im", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "", "im", "=", "im", ".", "half", "(", ")", "if", "half", "else", "im", ".", "float", "(", ")", "# uint8 to fp16/32", "\n", "im", "/=", "255", "# 0 - 255 to 0.0 - 1.0", "\n", "nb", ",", "_", ",", "height", ",", "width", "=", "im", ".", "shape", "# batch size, channels, height, width", "\n", "t2", "=", "time_sync", "(", ")", "\n", "dt", "[", "0", "]", "+=", "t2", "-", "t1", "\n", "\n", "# Inference", "\n", "out", ",", "train_out", "=", "model", "(", "im", ")", "if", "training", "else", "model", "(", "im", ",", "augment", "=", "augment", ",", "val", "=", "True", ")", "# inference, loss outputs", "\n", "dt", "[", "1", "]", "+=", "time_sync", "(", ")", "-", "t2", "\n", "\n", "# Loss", "\n", "if", "compute_loss", ":", "\n", "            ", "loss", "+=", "compute_loss", "(", "[", "x", ".", "float", "(", ")", "for", "x", "in", "train_out", "]", ",", "targets", ")", "[", "1", "]", "# box, obj, cls", "\n", "\n", "# NMS", "\n", "", "targets", "[", ":", ",", "2", ":", "]", "*=", "torch", ".", "Tensor", "(", "[", "width", ",", "height", ",", "width", ",", "height", "]", ")", ".", "to", "(", "device", ")", "# to pixels", "\n", "lb", "=", "[", "targets", "[", "targets", "[", ":", ",", "0", "]", "==", "i", ",", "1", ":", "]", "for", "i", "in", "range", "(", "nb", ")", "]", "if", "save_hybrid", "else", "[", "]", "# for autolabelling", "\n", "t3", "=", "time_sync", "(", ")", "\n", "out", "=", "non_max_suppression", "(", "out", ",", "conf_thres", ",", "iou_thres", ",", "labels", "=", "lb", ",", "multi_label", "=", "True", ",", "agnostic", "=", "single_cls", ")", "\n", "dt", "[", "2", "]", "+=", "time_sync", "(", ")", "-", "t3", "\n", "\n", "# Metrics", "\n", "for", "si", ",", "pred", "in", "enumerate", "(", "out", ")", ":", "\n", "            ", "labels", "=", "targets", "[", "targets", "[", ":", ",", "0", "]", "==", "si", ",", "1", ":", "]", "\n", "nl", "=", "len", "(", "labels", ")", "\n", "tcls", "=", "labels", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", "if", "nl", "else", "[", "]", "# target class", "\n", "path", ",", "shape", "=", "Path", "(", "paths", "[", "si", "]", ")", ",", "shapes", "[", "si", "]", "[", "0", "]", "\n", "seen", "+=", "1", "\n", "\n", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "                ", "if", "nl", ":", "\n", "                    ", "stats", ".", "append", "(", "(", "torch", ".", "zeros", "(", "0", ",", "niou", ",", "dtype", "=", "torch", ".", "bool", ")", ",", "torch", ".", "Tensor", "(", ")", ",", "torch", ".", "Tensor", "(", ")", ",", "tcls", ")", ")", "\n", "", "continue", "\n", "\n", "# Predictions", "\n", "", "if", "single_cls", ":", "\n", "                ", "pred", "[", ":", ",", "5", "]", "=", "0", "\n", "", "predn", "=", "pred", ".", "clone", "(", ")", "\n", "scale_coords", "(", "im", "[", "si", "]", ".", "shape", "[", "1", ":", "]", ",", "predn", "[", ":", ",", ":", "4", "]", ",", "shape", ",", "shapes", "[", "si", "]", "[", "1", "]", ")", "# native-space pred", "\n", "\n", "# Evaluate", "\n", "if", "nl", ":", "\n", "                ", "tbox", "=", "xywh2xyxy", "(", "labels", "[", ":", ",", "1", ":", "5", "]", ")", "# target boxes", "\n", "scale_coords", "(", "im", "[", "si", "]", ".", "shape", "[", "1", ":", "]", ",", "tbox", ",", "shape", ",", "shapes", "[", "si", "]", "[", "1", "]", ")", "# native-space labels", "\n", "labelsn", "=", "torch", ".", "cat", "(", "(", "labels", "[", ":", ",", "0", ":", "1", "]", ",", "tbox", ")", ",", "1", ")", "# native-space labels", "\n", "correct", "=", "process_batch", "(", "predn", ",", "labelsn", ",", "iouv", ")", "\n", "if", "plots", ":", "\n", "                    ", "confusion_matrix", ".", "process_batch", "(", "predn", ",", "labelsn", ")", "\n", "", "", "else", ":", "\n", "                ", "correct", "=", "torch", ".", "zeros", "(", "pred", ".", "shape", "[", "0", "]", ",", "niou", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "", "stats", ".", "append", "(", "(", "correct", ".", "cpu", "(", ")", ",", "pred", "[", ":", ",", "4", "]", ".", "cpu", "(", ")", ",", "pred", "[", ":", ",", "5", "]", ".", "cpu", "(", ")", ",", "tcls", ")", ")", "# (correct, conf, pcls, tcls)", "\n", "\n", "# Save/log", "\n", "if", "save_txt", ":", "\n", "                ", "save_one_txt", "(", "predn", ",", "save_conf", ",", "shape", ",", "file", "=", "save_dir", "/", "'labels'", "/", "(", "path", ".", "stem", "+", "'.txt'", ")", ")", "\n", "", "if", "save_json", ":", "\n", "                ", "save_one_json", "(", "predn", ",", "jdict", ",", "path", ",", "class_map", ")", "# append to COCO-JSON dictionary", "\n", "", "callbacks", ".", "run", "(", "'on_val_image_end'", ",", "pred", ",", "predn", ",", "path", ",", "names", ",", "im", "[", "si", "]", ")", "\n", "\n", "# Plot images", "\n", "", "if", "plots", "and", "batch_i", "<", "3", ":", "\n", "            ", "f", "=", "save_dir", "/", "f'val_batch{batch_i}_labels.jpg'", "# labels", "\n", "Thread", "(", "target", "=", "plot_images", ",", "args", "=", "(", "im", ",", "targets", ",", "paths", ",", "f", ",", "names", ")", ",", "daemon", "=", "True", ")", ".", "start", "(", ")", "\n", "f", "=", "save_dir", "/", "f'val_batch{batch_i}_pred.jpg'", "# predictions", "\n", "Thread", "(", "target", "=", "plot_images", ",", "args", "=", "(", "im", ",", "output_to_target", "(", "out", ")", ",", "paths", ",", "f", ",", "names", ")", ",", "daemon", "=", "True", ")", ".", "start", "(", ")", "\n", "\n", "# Compute metrics", "\n", "", "", "stats", "=", "[", "np", ".", "concatenate", "(", "x", ",", "0", ")", "for", "x", "in", "zip", "(", "*", "stats", ")", "]", "# to numpy", "\n", "if", "len", "(", "stats", ")", "and", "stats", "[", "0", "]", ".", "any", "(", ")", ":", "\n", "        ", "p", ",", "r", ",", "ap", ",", "f1", ",", "ap_class", "=", "ap_per_class", "(", "*", "stats", ",", "plot", "=", "plots", ",", "save_dir", "=", "save_dir", ",", "names", "=", "names", ")", "\n", "ap50", ",", "ap", "=", "ap", "[", ":", ",", "0", "]", ",", "ap", ".", "mean", "(", "1", ")", "# AP@0.5, AP@0.5:0.95", "\n", "mp", ",", "mr", ",", "map50", ",", "map", "=", "p", ".", "mean", "(", ")", ",", "r", ".", "mean", "(", ")", ",", "ap50", ".", "mean", "(", ")", ",", "ap", ".", "mean", "(", ")", "\n", "nt", "=", "np", ".", "bincount", "(", "stats", "[", "3", "]", ".", "astype", "(", "np", ".", "int64", ")", ",", "minlength", "=", "nc", ")", "# number of targets per class", "\n", "", "else", ":", "\n", "        ", "nt", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "\n", "# Print results", "\n", "", "pf", "=", "'%20s'", "+", "'%11i'", "*", "2", "+", "'%11.3g'", "*", "4", "# print format", "\n", "LOGGER", ".", "info", "(", "pf", "%", "(", "'all'", ",", "seen", ",", "nt", ".", "sum", "(", ")", ",", "mp", ",", "mr", ",", "map50", ",", "map", ")", ")", "\n", "\n", "# Print results per class", "\n", "if", "(", "verbose", "or", "(", "nc", "<", "50", "and", "not", "training", ")", ")", "and", "nc", ">", "1", "and", "len", "(", "stats", ")", ":", "\n", "        ", "for", "i", ",", "c", "in", "enumerate", "(", "ap_class", ")", ":", "\n", "            ", "LOGGER", ".", "info", "(", "pf", "%", "(", "names", "[", "c", "]", ",", "seen", ",", "nt", "[", "c", "]", ",", "p", "[", "i", "]", ",", "r", "[", "i", "]", ",", "ap50", "[", "i", "]", ",", "ap", "[", "i", "]", ")", ")", "\n", "\n", "# Print speeds", "\n", "", "", "t", "=", "tuple", "(", "x", "/", "seen", "*", "1E3", "for", "x", "in", "dt", ")", "# speeds per image", "\n", "if", "not", "training", ":", "\n", "        ", "shape", "=", "(", "batch_size", ",", "3", ",", "imgsz", ",", "imgsz", ")", "\n", "LOGGER", ".", "info", "(", "f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {shape}'", "%", "t", ")", "\n", "\n", "# Plots", "\n", "", "if", "plots", ":", "\n", "        ", "confusion_matrix", ".", "plot", "(", "save_dir", "=", "save_dir", ",", "names", "=", "list", "(", "names", ".", "values", "(", ")", ")", ")", "\n", "callbacks", ".", "run", "(", "'on_val_end'", ")", "\n", "\n", "# Save JSON", "\n", "", "if", "save_json", "and", "len", "(", "jdict", ")", ":", "\n", "        ", "w", "=", "Path", "(", "weights", "[", "0", "]", "if", "isinstance", "(", "weights", ",", "list", ")", "else", "weights", ")", ".", "stem", "if", "weights", "is", "not", "None", "else", "''", "# weights", "\n", "anno_json", "=", "str", "(", "Path", "(", "data", ".", "get", "(", "'path'", ",", "'../coco'", ")", ")", "/", "'annotations/instances_val2017.json'", ")", "# annotations json", "\n", "pred_json", "=", "str", "(", "save_dir", "/", "f\"{w}_predictions.json\"", ")", "# predictions json", "\n", "LOGGER", ".", "info", "(", "f'\\nEvaluating pycocotools mAP... saving {pred_json}...'", ")", "\n", "with", "open", "(", "pred_json", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "jdict", ",", "f", ")", "\n", "\n", "", "try", ":", "# https://github.com/cocodataset/cocoapi/blob/master/PythonAPI/pycocoEvalDemo.ipynb", "\n", "            ", "check_requirements", "(", "[", "'pycocotools'", "]", ")", "\n", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "from", "pycocotools", ".", "cocoeval", "import", "COCOeval", "\n", "\n", "anno", "=", "COCO", "(", "anno_json", ")", "# init annotations api", "\n", "pred", "=", "anno", ".", "loadRes", "(", "pred_json", ")", "# init predictions api", "\n", "eval", "=", "COCOeval", "(", "anno", ",", "pred", ",", "'bbox'", ")", "\n", "if", "is_coco", ":", "\n", "                ", "eval", ".", "params", ".", "imgIds", "=", "[", "int", "(", "Path", "(", "x", ")", ".", "stem", ")", "for", "x", "in", "dataloader", ".", "dataset", ".", "img_files", "]", "# image IDs to evaluate", "\n", "", "eval", ".", "evaluate", "(", ")", "\n", "eval", ".", "accumulate", "(", ")", "\n", "eval", ".", "summarize", "(", ")", "\n", "map", ",", "map50", "=", "eval", ".", "stats", "[", ":", "2", "]", "# update results (mAP@0.5:0.95, mAP@0.5)", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f'pycocotools unable to run: {e}'", ")", "\n", "\n", "# Return results", "\n", "", "", "model", ".", "float", "(", ")", "# for training", "\n", "if", "not", "training", ":", "\n", "        ", "s", "=", "f\"\\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}\"", "if", "save_txt", "else", "''", "\n", "LOGGER", ".", "info", "(", "f\"Results saved to {colorstr('bold', save_dir)}{s}\"", ")", "\n", "", "maps", "=", "np", ".", "zeros", "(", "nc", ")", "+", "map", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "ap_class", ")", ":", "\n", "        ", "maps", "[", "c", "]", "=", "ap", "[", "i", "]", "\n", "", "return", "(", "mp", ",", "mr", ",", "map50", ",", "map", ",", "*", "(", "loss", ".", "cpu", "(", ")", "/", "len", "(", "dataloader", ")", ")", ".", "tolist", "(", ")", ")", ",", "maps", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.val.parse_opt": [[304, 332], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.general.check_yaml", "parser.parse_args.data.endswith", "utils.general.print_args"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_yaml", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.print_args"], ["", "def", "parse_opt", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "ROOT", "/", "'data/coco128.yaml'", ",", "help", "=", "'dataset.yaml path'", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "default", "=", "ROOT", "/", "'yolov3.pt'", ",", "help", "=", "'model.pt path(s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--imgsz'", ",", "'--img'", ",", "'--img-size'", ",", "type", "=", "int", ",", "default", "=", "640", ",", "help", "=", "'inference size (pixels)'", ")", "\n", "parser", ".", "add_argument", "(", "'--conf-thres'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'confidence threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--iou-thres'", ",", "type", "=", "float", ",", "default", "=", "0.6", ",", "help", "=", "'NMS IoU threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'val'", ",", "help", "=", "'train, val, test, speed or study'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "''", ",", "help", "=", "'cuda device, i.e. 0 or 0,1,2,3 or cpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--single-cls'", ",", "action", "=", "'store_true'", ",", "help", "=", "'treat as single-class dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--augment'", ",", "action", "=", "'store_true'", ",", "help", "=", "'augmented inference'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'report mAP by class'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-txt'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save results to *.txt'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-hybrid'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save label+prediction hybrid results to *.txt'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-conf'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save confidences in --save-txt labels'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-json'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save a COCO-JSON results file'", ")", "\n", "parser", ".", "add_argument", "(", "'--project'", ",", "default", "=", "ROOT", "/", "'runs/val'", ",", "help", "=", "'save to project/name'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "'exp'", ",", "help", "=", "'save to project/name'", ")", "\n", "parser", ".", "add_argument", "(", "'--exist-ok'", ",", "action", "=", "'store_true'", ",", "help", "=", "'existing project/name ok, do not increment'", ")", "\n", "parser", ".", "add_argument", "(", "'--half'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use FP16 half-precision inference'", ")", "\n", "parser", ".", "add_argument", "(", "'--dnn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use OpenCV DNN for ONNX inference'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "data", "=", "check_yaml", "(", "opt", ".", "data", ")", "# check YAML", "\n", "opt", ".", "save_json", "|=", "opt", ".", "data", ".", "endswith", "(", "'coco.yaml'", ")", "\n", "opt", ".", "save_txt", "|=", "opt", ".", "save_hybrid", "\n", "print_args", "(", "FILE", ".", "stem", ",", "opt", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.val.main": [[334, 363], ["utils.general.check_requirements", "val.run", "utils.general.LOGGER.info", "isinstance", "vars", "val.run", "os.system", "utils.plots.plot_val_study", "numpy.savetxt", "vars", "list", "utils.general.LOGGER.info", "val.run", "y.append", "range", "pathlib.Path", "pathlib.Path", "vars"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_val_study", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run"], ["", "def", "main", "(", "opt", ")", ":", "\n", "    ", "check_requirements", "(", "requirements", "=", "ROOT", "/", "'requirements.txt'", ",", "exclude", "=", "(", "'tensorboard'", ",", "'thop'", ")", ")", "\n", "\n", "if", "opt", ".", "task", "in", "(", "'train'", ",", "'val'", ",", "'test'", ")", ":", "# run normally", "\n", "        ", "if", "opt", ".", "conf_thres", ">", "0.001", ":", "# https://github.com/ultralytics/yolov5/issues/1466", "\n", "            ", "LOGGER", ".", "info", "(", "f'WARNING: confidence threshold {opt.conf_thres} >> 0.001 will produce invalid mAP values.'", ")", "\n", "", "run", "(", "**", "vars", "(", "opt", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "weights", "=", "opt", ".", "weights", "if", "isinstance", "(", "opt", ".", "weights", ",", "list", ")", "else", "[", "opt", ".", "weights", "]", "\n", "opt", ".", "half", "=", "True", "# FP16 for fastest results", "\n", "if", "opt", ".", "task", "==", "'speed'", ":", "# speed benchmarks", "\n", "# python val.py --task speed --data coco.yaml --batch 1 --weights yolov3.pt yolov3-spp.pt...", "\n", "            ", "opt", ".", "conf_thres", ",", "opt", ".", "iou_thres", ",", "opt", ".", "save_json", "=", "0.25", ",", "0.45", ",", "False", "\n", "for", "opt", ".", "weights", "in", "weights", ":", "\n", "                ", "run", "(", "**", "vars", "(", "opt", ")", ",", "plots", "=", "False", ")", "\n", "\n", "", "", "elif", "opt", ".", "task", "==", "'study'", ":", "# speed vs mAP benchmarks", "\n", "# python val.py --task study --data coco.yaml --iou 0.7 --weights yolov3.pt yolov3-spp.pt...", "\n", "            ", "for", "opt", ".", "weights", "in", "weights", ":", "\n", "                ", "f", "=", "f'study_{Path(opt.data).stem}_{Path(opt.weights).stem}.txt'", "# filename to save to", "\n", "x", ",", "y", "=", "list", "(", "range", "(", "256", ",", "1536", "+", "128", ",", "128", ")", ")", ",", "[", "]", "# x axis (image sizes), y axis", "\n", "for", "opt", ".", "imgsz", "in", "x", ":", "# img-size", "\n", "                    ", "LOGGER", ".", "info", "(", "f'\\nRunning {f} --imgsz {opt.imgsz}...'", ")", "\n", "r", ",", "_", ",", "t", "=", "run", "(", "**", "vars", "(", "opt", ")", ",", "plots", "=", "False", ")", "\n", "y", ".", "append", "(", "r", "+", "t", ")", "# results and times", "\n", "", "np", ".", "savetxt", "(", "f", ",", "y", ",", "fmt", "=", "'%10.4g'", ")", "# save", "\n", "", "os", ".", "system", "(", "'zip -r study.zip study_*.txt'", ")", "\n", "plot_val_study", "(", "x", "=", "x", ")", "# plot", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_torchscript": [[51, 65], ["utils.general.colorstr", "utils.general.LOGGER.info", "file.with_suffix", "torch.jit.trace", "torch.jit.trace", "utils.general.LOGGER.info", "int", "json.dumps", "utils.general.LOGGER.info", "max", "torch.utils.mobile_optimizer.optimize_for_mobile", "utils.general.file_size"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.file_size"], ["def", "export_torchscript", "(", "model", ",", "im", ",", "file", ",", "optimize", ",", "prefix", "=", "colorstr", "(", "'TorchScript:'", ")", ")", ":", "\n", "#  TorchScript model export", "\n", "    ", "try", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'\\n{prefix} starting export with torch {torch.__version__}...'", ")", "\n", "f", "=", "file", ".", "with_suffix", "(", "'.torchscript.pt'", ")", "\n", "\n", "ts", "=", "torch", ".", "jit", ".", "trace", "(", "model", ",", "im", ",", "strict", "=", "False", ")", "\n", "d", "=", "{", "\"shape\"", ":", "im", ".", "shape", ",", "\"stride\"", ":", "int", "(", "max", "(", "model", ".", "stride", ")", ")", ",", "\"names\"", ":", "model", ".", "names", "}", "\n", "extra_files", "=", "{", "'config.txt'", ":", "json", ".", "dumps", "(", "d", ")", "}", "# torch._C.ExtraFilesMap()", "\n", "(", "optimize_for_mobile", "(", "ts", ")", "if", "optimize", "else", "ts", ")", ".", "save", "(", "f", ",", "_extra_files", "=", "extra_files", ")", "\n", "\n", "LOGGER", ".", "info", "(", "f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'{prefix} export failure: {e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_onnx": [[67, 109], ["utils.general.colorstr", "utils.general.check_requirements", "utils.general.LOGGER.info", "file.with_suffix", "torch.onnx.export", "torch.onnx.export", "onnx.load", "onnx.checker.check_model", "utils.general.LOGGER.info", "utils.general.LOGGER.info", "utils.general.LOGGER.info", "utils.general.check_requirements", "utils.general.LOGGER.info", "onnxsim.simplify", "onnx.save", "utils.general.LOGGER.info", "utils.general.file_size", "list"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.file_size"], ["", "", "def", "export_onnx", "(", "model", ",", "im", ",", "file", ",", "opset", ",", "train", ",", "dynamic", ",", "simplify", ",", "prefix", "=", "colorstr", "(", "'ONNX:'", ")", ")", ":", "\n", "#  ONNX export", "\n", "    ", "try", ":", "\n", "        ", "check_requirements", "(", "(", "'onnx'", ",", ")", ")", "\n", "import", "onnx", "\n", "\n", "LOGGER", ".", "info", "(", "f'\\n{prefix} starting export with onnx {onnx.__version__}...'", ")", "\n", "f", "=", "file", ".", "with_suffix", "(", "'.onnx'", ")", "\n", "\n", "torch", ".", "onnx", ".", "export", "(", "model", ",", "im", ",", "f", ",", "verbose", "=", "False", ",", "opset_version", "=", "opset", ",", "\n", "training", "=", "torch", ".", "onnx", ".", "TrainingMode", ".", "TRAINING", "if", "train", "else", "torch", ".", "onnx", ".", "TrainingMode", ".", "EVAL", ",", "\n", "do_constant_folding", "=", "not", "train", ",", "\n", "input_names", "=", "[", "'images'", "]", ",", "\n", "output_names", "=", "[", "'output'", "]", ",", "\n", "dynamic_axes", "=", "{", "'images'", ":", "{", "0", ":", "'batch'", ",", "2", ":", "'height'", ",", "3", ":", "'width'", "}", ",", "# shape(1,3,640,640)", "\n", "'output'", ":", "{", "0", ":", "'batch'", ",", "1", ":", "'anchors'", "}", "# shape(1,25200,85)", "\n", "}", "if", "dynamic", "else", "None", ")", "\n", "\n", "# Checks", "\n", "model_onnx", "=", "onnx", ".", "load", "(", "f", ")", "# load onnx model", "\n", "onnx", ".", "checker", ".", "check_model", "(", "model_onnx", ")", "# check onnx model", "\n", "# LOGGER.info(onnx.helper.printable_graph(model_onnx.graph))  # print", "\n", "\n", "# Simplify", "\n", "if", "simplify", ":", "\n", "            ", "try", ":", "\n", "                ", "check_requirements", "(", "(", "'onnx-simplifier'", ",", ")", ")", "\n", "import", "onnxsim", "\n", "\n", "LOGGER", ".", "info", "(", "f'{prefix} simplifying with onnx-simplifier {onnxsim.__version__}...'", ")", "\n", "model_onnx", ",", "check", "=", "onnxsim", ".", "simplify", "(", "\n", "model_onnx", ",", "\n", "dynamic_input_shape", "=", "dynamic", ",", "\n", "input_shapes", "=", "{", "'images'", ":", "list", "(", "im", ".", "shape", ")", "}", "if", "dynamic", "else", "None", ")", "\n", "assert", "check", ",", "'assert check failed'", "\n", "onnx", ".", "save", "(", "model_onnx", ",", "f", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "LOGGER", ".", "info", "(", "f'{prefix} simplifier failure: {e}'", ")", "\n", "", "", "LOGGER", ".", "info", "(", "f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)'", ")", "\n", "LOGGER", ".", "info", "(", "f\"{prefix} run --dynamic ONNX model inference with: 'python detect.py --weights {f}'\"", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'{prefix} export failure: {e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_coreml": [[111, 131], ["utils.general.colorstr", "utils.general.check_requirements", "utils.general.LOGGER.info", "file.with_suffix", "model.train", "torch.jit.trace", "torch.jit.trace", "ct.convert", "ct.convert.save", "utils.general.LOGGER.info", "utils.general.LOGGER.info", "ct.ImageType", "utils.general.file_size"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.None.train.train", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.file_size"], ["", "", "def", "export_coreml", "(", "model", ",", "im", ",", "file", ",", "prefix", "=", "colorstr", "(", "'CoreML:'", ")", ")", ":", "\n", "#  CoreML export", "\n", "    ", "ct_model", "=", "None", "\n", "try", ":", "\n", "        ", "check_requirements", "(", "(", "'coremltools'", ",", ")", ")", "\n", "import", "coremltools", "as", "ct", "\n", "\n", "LOGGER", ".", "info", "(", "f'\\n{prefix} starting export with coremltools {ct.__version__}...'", ")", "\n", "f", "=", "file", ".", "with_suffix", "(", "'.mlmodel'", ")", "\n", "\n", "model", ".", "train", "(", ")", "# CoreML exports should be placed in model.train() mode", "\n", "ts", "=", "torch", ".", "jit", ".", "trace", "(", "model", ",", "im", ",", "strict", "=", "False", ")", "# TorchScript model", "\n", "ct_model", "=", "ct", ".", "convert", "(", "ts", ",", "inputs", "=", "[", "ct", ".", "ImageType", "(", "'image'", ",", "shape", "=", "im", ".", "shape", ",", "scale", "=", "1", "/", "255", ",", "bias", "=", "[", "0", ",", "0", ",", "0", "]", ")", "]", ")", "\n", "ct_model", ".", "save", "(", "f", ")", "\n", "\n", "LOGGER", ".", "info", "(", "f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'\\n{prefix} export failure: {e}'", ")", "\n", "\n", "", "return", "ct_model", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_saved_model": [[133, 163], ["utils.general.colorstr", "utils.general.LOGGER.info", "str().replace", "list", "TFModel", "tf.zeros", "TFModel.predict", "keras.Input", "TFModel.predict", "keras.Model", "keras.Model.summary", "keras.Model.save", "utils.general.LOGGER.info", "utils.general.LOGGER.info", "str", "utils.general.file_size"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.file_size"], ["", "def", "export_saved_model", "(", "model", ",", "im", ",", "file", ",", "dynamic", ",", "\n", "tf_nms", "=", "False", ",", "agnostic_nms", "=", "False", ",", "topk_per_class", "=", "100", ",", "topk_all", "=", "100", ",", "iou_thres", "=", "0.45", ",", "\n", "conf_thres", "=", "0.25", ",", "prefix", "=", "colorstr", "(", "'TensorFlow saved_model:'", ")", ")", ":", "\n", "#  TensorFlow saved_model export", "\n", "    ", "keras_model", "=", "None", "\n", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", "import", "keras", "\n", "\n", "from", "models", ".", "tf", "import", "TFDetect", ",", "TFModel", "\n", "\n", "LOGGER", ".", "info", "(", "f'\\n{prefix} starting export with tensorflow {tf.__version__}...'", ")", "\n", "f", "=", "str", "(", "file", ")", ".", "replace", "(", "'.pt'", ",", "'_saved_model'", ")", "\n", "batch_size", ",", "ch", ",", "*", "imgsz", "=", "list", "(", "im", ".", "shape", ")", "# BCHW", "\n", "\n", "tf_model", "=", "TFModel", "(", "cfg", "=", "model", ".", "yaml", ",", "model", "=", "model", ",", "nc", "=", "model", ".", "nc", ",", "imgsz", "=", "imgsz", ")", "\n", "im", "=", "tf", ".", "zeros", "(", "(", "batch_size", ",", "*", "imgsz", ",", "3", ")", ")", "# BHWC order for TensorFlow", "\n", "y", "=", "tf_model", ".", "predict", "(", "im", ",", "tf_nms", ",", "agnostic_nms", ",", "topk_per_class", ",", "topk_all", ",", "iou_thres", ",", "conf_thres", ")", "\n", "inputs", "=", "keras", ".", "Input", "(", "shape", "=", "(", "*", "imgsz", ",", "3", ")", ",", "batch_size", "=", "None", "if", "dynamic", "else", "batch_size", ")", "\n", "outputs", "=", "tf_model", ".", "predict", "(", "inputs", ",", "tf_nms", ",", "agnostic_nms", ",", "topk_per_class", ",", "topk_all", ",", "iou_thres", ",", "conf_thres", ")", "\n", "keras_model", "=", "keras", ".", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "outputs", ")", "\n", "keras_model", ".", "trainable", "=", "False", "\n", "keras_model", ".", "summary", "(", ")", "\n", "keras_model", ".", "save", "(", "f", ",", "save_format", "=", "'tf'", ")", "\n", "\n", "LOGGER", ".", "info", "(", "f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'\\n{prefix} export failure: {e}'", ")", "\n", "\n", "", "return", "keras_model", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_pb": [[165, 183], ["utils.general.colorstr", "utils.general.LOGGER.info", "file.with_suffix", "tf.function", "m.get_concrete_function.get_concrete_function", "convert_variables_to_constants_v2", "convert_variables_to_constants_v2.graph.as_graph_def", "tf.io.write_graph", "utils.general.LOGGER.info", "tf.TensorSpec", "utils.general.LOGGER.info", "keras_model", "str", "utils.general.file_size"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.file_size"], ["", "def", "export_pb", "(", "keras_model", ",", "im", ",", "file", ",", "prefix", "=", "colorstr", "(", "'TensorFlow GraphDef:'", ")", ")", ":", "\n", "#  TensorFlow GraphDef *.pb export https://github.com/leimao/Frozen_Graph_TensorFlow", "\n", "    ", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "convert_to_constants", "import", "convert_variables_to_constants_v2", "\n", "\n", "LOGGER", ".", "info", "(", "f'\\n{prefix} starting export with tensorflow {tf.__version__}...'", ")", "\n", "f", "=", "file", ".", "with_suffix", "(", "'.pb'", ")", "\n", "\n", "m", "=", "tf", ".", "function", "(", "lambda", "x", ":", "keras_model", "(", "x", ")", ")", "# full model", "\n", "m", "=", "m", ".", "get_concrete_function", "(", "tf", ".", "TensorSpec", "(", "keras_model", ".", "inputs", "[", "0", "]", ".", "shape", ",", "keras_model", ".", "inputs", "[", "0", "]", ".", "dtype", ")", ")", "\n", "frozen_func", "=", "convert_variables_to_constants_v2", "(", "m", ")", "\n", "frozen_func", ".", "graph", ".", "as_graph_def", "(", ")", "\n", "tf", ".", "io", ".", "write_graph", "(", "graph_or_graph_def", "=", "frozen_func", ".", "graph", ",", "logdir", "=", "str", "(", "f", ".", "parent", ")", ",", "name", "=", "f", ".", "name", ",", "as_text", "=", "False", ")", "\n", "\n", "LOGGER", ".", "info", "(", "f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'\\n{prefix} export failure: {e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_tflite": [[185, 216], ["utils.general.colorstr", "utils.general.LOGGER.info", "list", "str().replace", "tf.lite.TFLiteConverter.from_keras_model", "tf.lite.TFLiteConverter.from_keras_model.convert", "open().write", "utils.general.LOGGER.info", "utils.datasets.LoadImages", "str().replace", "utils.general.LOGGER.info", "str", "representative_dataset_gen", "open", "utils.general.check_dataset", "str", "utils.general.file_size"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_dataset", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.file_size"], ["", "", "def", "export_tflite", "(", "keras_model", ",", "im", ",", "file", ",", "int8", ",", "data", ",", "ncalib", ",", "prefix", "=", "colorstr", "(", "'TensorFlow Lite:'", ")", ")", ":", "\n", "#  TensorFlow Lite export", "\n", "    ", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "\n", "from", "models", ".", "tf", "import", "representative_dataset_gen", "\n", "\n", "LOGGER", ".", "info", "(", "f'\\n{prefix} starting export with tensorflow {tf.__version__}...'", ")", "\n", "batch_size", ",", "ch", ",", "*", "imgsz", "=", "list", "(", "im", ".", "shape", ")", "# BCHW", "\n", "f", "=", "str", "(", "file", ")", ".", "replace", "(", "'.pt'", ",", "'-fp16.tflite'", ")", "\n", "\n", "converter", "=", "tf", ".", "lite", ".", "TFLiteConverter", ".", "from_keras_model", "(", "keras_model", ")", "\n", "converter", ".", "target_spec", ".", "supported_ops", "=", "[", "tf", ".", "lite", ".", "OpsSet", ".", "TFLITE_BUILTINS", "]", "\n", "converter", ".", "target_spec", ".", "supported_types", "=", "[", "tf", ".", "float16", "]", "\n", "converter", ".", "optimizations", "=", "[", "tf", ".", "lite", ".", "Optimize", ".", "DEFAULT", "]", "\n", "if", "int8", ":", "\n", "            ", "dataset", "=", "LoadImages", "(", "check_dataset", "(", "data", ")", "[", "'train'", "]", ",", "img_size", "=", "imgsz", ",", "auto", "=", "False", ")", "# representative data", "\n", "converter", ".", "representative_dataset", "=", "lambda", ":", "representative_dataset_gen", "(", "dataset", ",", "ncalib", ")", "\n", "converter", ".", "target_spec", ".", "supported_ops", "=", "[", "tf", ".", "lite", ".", "OpsSet", ".", "TFLITE_BUILTINS_INT8", "]", "\n", "converter", ".", "target_spec", ".", "supported_types", "=", "[", "]", "\n", "converter", ".", "inference_input_type", "=", "tf", ".", "uint8", "# or tf.int8", "\n", "converter", ".", "inference_output_type", "=", "tf", ".", "uint8", "# or tf.int8", "\n", "converter", ".", "experimental_new_quantizer", "=", "False", "\n", "f", "=", "str", "(", "file", ")", ".", "replace", "(", "'.pt'", ",", "'-int8.tflite'", ")", "\n", "\n", "", "tflite_model", "=", "converter", ".", "convert", "(", ")", "\n", "open", "(", "f", ",", "\"wb\"", ")", ".", "write", "(", "tflite_model", ")", "\n", "LOGGER", ".", "info", "(", "f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)'", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'\\n{prefix} export failure: {e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_tfjs": [[218, 252], ["utils.general.colorstr", "utils.general.check_requirements", "utils.general.LOGGER.info", "str().replace", "file.with_suffix", "subprocess.run", "open().read", "utils.general.LOGGER.info", "open", "re.sub", "j.write", "utils.general.LOGGER.info", "str", "open", "utils.general.file_size"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.file_size"], ["", "", "def", "export_tfjs", "(", "keras_model", ",", "im", ",", "file", ",", "prefix", "=", "colorstr", "(", "'TensorFlow.js:'", ")", ")", ":", "\n", "#  TensorFlow.js export", "\n", "    ", "try", ":", "\n", "        ", "check_requirements", "(", "(", "'tensorflowjs'", ",", ")", ")", "\n", "import", "re", "\n", "\n", "import", "tensorflowjs", "as", "tfjs", "\n", "\n", "LOGGER", ".", "info", "(", "f'\\n{prefix} starting export with tensorflowjs {tfjs.__version__}...'", ")", "\n", "f", "=", "str", "(", "file", ")", ".", "replace", "(", "'.pt'", ",", "'_web_model'", ")", "# js dir", "\n", "f_pb", "=", "file", ".", "with_suffix", "(", "'.pb'", ")", "# *.pb path", "\n", "f_json", "=", "f", "+", "'/model.json'", "# *.json path", "\n", "\n", "cmd", "=", "f\"tensorflowjs_converter --input_format=tf_frozen_model \"", "f\"--output_node_names='Identity,Identity_1,Identity_2,Identity_3' {f_pb} {f}\"", "\n", "subprocess", ".", "run", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n", "json", "=", "open", "(", "f_json", ")", ".", "read", "(", ")", "\n", "with", "open", "(", "f_json", ",", "'w'", ")", "as", "j", ":", "# sort JSON Identity_* in ascending order", "\n", "            ", "subst", "=", "re", ".", "sub", "(", "\n", "r'{\"outputs\": {\"Identity.?.?\": {\"name\": \"Identity.?.?\"}, '", "\n", "r'\"Identity.?.?\": {\"name\": \"Identity.?.?\"}, '", "\n", "r'\"Identity.?.?\": {\"name\": \"Identity.?.?\"}, '", "\n", "r'\"Identity.?.?\": {\"name\": \"Identity.?.?\"}}}'", ",", "\n", "r'{\"outputs\": {\"Identity\": {\"name\": \"Identity\"}, '", "\n", "r'\"Identity_1\": {\"name\": \"Identity_1\"}, '", "\n", "r'\"Identity_2\": {\"name\": \"Identity_2\"}, '", "\n", "r'\"Identity_3\": {\"name\": \"Identity_3\"}}}'", ",", "\n", "json", ")", "\n", "j", ".", "write", "(", "subst", ")", "\n", "\n", "", "LOGGER", ".", "info", "(", "f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'\\n{prefix} export failure: {e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.run": [[254, 332], ["torch.no_grad", "torch.no_grad", "time.time", "list", "pathlib.Path", "utils.torch_utils.select_device", "models.experimental.attempt_load", "int", "torch.zeros().to", "torch.zeros().to", "export_saved_model.named_modules", "range", "utils.general.LOGGER.info", "any", "utils.general.LOGGER.info", "x.lower", "max", "utils.general.check_img_size", "export_saved_model.train", "export_saved_model.eval", "isinstance", "export_saved_model.", "export.export_torchscript", "export.export_onnx", "export.export_coreml", "export.export_saved_model", "len", "str().startswith", "utils.general.url2file", "torch.zeros", "torch.zeros", "torch.zeros().to.half", "export_saved_model.half", "isinstance", "isinstance", "export.export_pb", "export.export_tflite", "export.export_tfjs", "utils.activations.SiLU", "utils.general.colorstr", "utils.general.file_size", "utils.general.colorstr", "str", "time.time", "pathlib.Path.parent.resolve"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.attempt_load", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_img_size", "home.repos.pwc.inspect_result.turoad_scaloss.None.train.train", "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_torchscript", "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_onnx", "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_coreml", "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_saved_model", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.url2file", "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_pb", "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_tflite", "home.repos.pwc.inspect_result.turoad_scaloss.None.export.export_tfjs", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.file_size", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "run", "(", "data", "=", "ROOT", "/", "'data/coco128.yaml'", ",", "# 'dataset.yaml path'", "\n", "weights", "=", "ROOT", "/", "'yolov3.pt'", ",", "# weights path", "\n", "imgsz", "=", "(", "640", ",", "640", ")", ",", "# image (height, width)", "\n", "batch_size", "=", "1", ",", "# batch size", "\n", "device", "=", "'cpu'", ",", "# cuda device, i.e. 0 or 0,1,2,3 or cpu", "\n", "include", "=", "(", "'torchscript'", ",", "'onnx'", ",", "'coreml'", ")", ",", "# include formats", "\n", "half", "=", "False", ",", "# FP16 half-precision export", "\n", "inplace", "=", "False", ",", "# set  Detect() inplace=True", "\n", "train", "=", "False", ",", "# model.train() mode", "\n", "optimize", "=", "False", ",", "# TorchScript: optimize for mobile", "\n", "int8", "=", "False", ",", "# CoreML/TF INT8 quantization", "\n", "dynamic", "=", "False", ",", "# ONNX/TF: dynamic axes", "\n", "simplify", "=", "False", ",", "# ONNX: simplify model", "\n", "opset", "=", "12", ",", "# ONNX: opset version", "\n", "topk_per_class", "=", "100", ",", "# TF.js NMS: topk per class to keep", "\n", "topk_all", "=", "100", ",", "# TF.js NMS: topk for all classes to keep", "\n", "iou_thres", "=", "0.45", ",", "# TF.js NMS: IoU threshold", "\n", "conf_thres", "=", "0.25", "# TF.js NMS: confidence threshold", "\n", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "include", "=", "[", "x", ".", "lower", "(", ")", "for", "x", "in", "include", "]", "\n", "tf_exports", "=", "list", "(", "x", "in", "include", "for", "x", "in", "(", "'saved_model'", ",", "'pb'", ",", "'tflite'", ",", "'tfjs'", ")", ")", "# TensorFlow exports", "\n", "imgsz", "*=", "2", "if", "len", "(", "imgsz", ")", "==", "1", "else", "1", "# expand", "\n", "file", "=", "Path", "(", "url2file", "(", "weights", ")", "if", "str", "(", "weights", ")", ".", "startswith", "(", "(", "'http:/'", ",", "'https:/'", ")", ")", "else", "weights", ")", "\n", "\n", "# Load PyTorch model", "\n", "device", "=", "select_device", "(", "device", ")", "\n", "assert", "not", "(", "device", ".", "type", "==", "'cpu'", "and", "half", ")", ",", "'--half only compatible with GPU export, i.e. use --device 0'", "\n", "model", "=", "attempt_load", "(", "weights", ",", "map_location", "=", "device", ",", "inplace", "=", "True", ",", "fuse", "=", "True", ")", "# load FP32 model", "\n", "nc", ",", "names", "=", "model", ".", "nc", ",", "model", ".", "names", "# number of classes, class names", "\n", "\n", "# Input", "\n", "gs", "=", "int", "(", "max", "(", "model", ".", "stride", ")", ")", "# grid size (max stride)", "\n", "imgsz", "=", "[", "check_img_size", "(", "x", ",", "gs", ")", "for", "x", "in", "imgsz", "]", "# verify img_size are gs-multiples", "\n", "im", "=", "torch", ".", "zeros", "(", "batch_size", ",", "3", ",", "*", "imgsz", ")", ".", "to", "(", "device", ")", "# image size(1,3,320,192) BCHW iDetection", "\n", "\n", "# Update model", "\n", "if", "half", ":", "\n", "        ", "im", ",", "model", "=", "im", ".", "half", "(", ")", ",", "model", ".", "half", "(", ")", "# to FP16", "\n", "", "model", ".", "train", "(", ")", "if", "train", "else", "model", ".", "eval", "(", ")", "# training mode = no Detect() layer grid construction", "\n", "for", "k", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "Conv", ")", ":", "# assign export-friendly activations", "\n", "            ", "if", "isinstance", "(", "m", ".", "act", ",", "nn", ".", "SiLU", ")", ":", "\n", "                ", "m", ".", "act", "=", "SiLU", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "Detect", ")", ":", "\n", "            ", "m", ".", "inplace", "=", "inplace", "\n", "m", ".", "onnx_dynamic", "=", "dynamic", "\n", "# m.forward = m.forward_export  # assign forward (optional)", "\n", "\n", "", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "y", "=", "model", "(", "im", ")", "# dry runs", "\n", "", "LOGGER", ".", "info", "(", "f\"\\n{colorstr('PyTorch:')} starting from {file} ({file_size(file):.1f} MB)\"", ")", "\n", "\n", "# Exports", "\n", "if", "'torchscript'", "in", "include", ":", "\n", "        ", "export_torchscript", "(", "model", ",", "im", ",", "file", ",", "optimize", ")", "\n", "", "if", "'onnx'", "in", "include", ":", "\n", "        ", "export_onnx", "(", "model", ",", "im", ",", "file", ",", "opset", ",", "train", ",", "dynamic", ",", "simplify", ")", "\n", "", "if", "'coreml'", "in", "include", ":", "\n", "        ", "export_coreml", "(", "model", ",", "im", ",", "file", ")", "\n", "\n", "# TensorFlow Exports", "\n", "", "if", "any", "(", "tf_exports", ")", ":", "\n", "        ", "pb", ",", "tflite", ",", "tfjs", "=", "tf_exports", "[", "1", ":", "]", "\n", "assert", "not", "(", "tflite", "and", "tfjs", ")", ",", "'TFLite and TF.js models must be exported separately, please pass only one type.'", "\n", "model", "=", "export_saved_model", "(", "model", ",", "im", ",", "file", ",", "dynamic", ",", "tf_nms", "=", "tfjs", ",", "agnostic_nms", "=", "tfjs", ",", "\n", "topk_per_class", "=", "topk_per_class", ",", "topk_all", "=", "topk_all", ",", "conf_thres", "=", "conf_thres", ",", "\n", "iou_thres", "=", "iou_thres", ")", "# keras model", "\n", "if", "pb", "or", "tfjs", ":", "# pb prerequisite to tfjs", "\n", "            ", "export_pb", "(", "model", ",", "im", ",", "file", ")", "\n", "", "if", "tflite", ":", "\n", "            ", "export_tflite", "(", "model", ",", "im", ",", "file", ",", "int8", "=", "int8", ",", "data", "=", "data", ",", "ncalib", "=", "100", ")", "\n", "", "if", "tfjs", ":", "\n", "            ", "export_tfjs", "(", "model", ",", "im", ",", "file", ")", "\n", "\n", "# Finish", "\n", "", "", "LOGGER", ".", "info", "(", "f'\\nExport complete ({time.time() - t:.2f}s)'", "\n", "f\"\\nResults saved to {colorstr('bold', file.parent.resolve())}\"", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.parse_opt": [[336, 361], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.general.print_args"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.print_args"], ["", "def", "parse_opt", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "ROOT", "/", "'data/coco128.yaml'", ",", "help", "=", "'dataset.yaml path'", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "type", "=", "str", ",", "default", "=", "ROOT", "/", "'yolov3.pt'", ",", "help", "=", "'weights path'", ")", "\n", "parser", ".", "add_argument", "(", "'--imgsz'", ",", "'--img'", ",", "'--img-size'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "640", ",", "640", "]", ",", "help", "=", "'image (h, w)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cpu'", ",", "help", "=", "'cuda device, i.e. 0 or 0,1,2,3 or cpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--half'", ",", "action", "=", "'store_true'", ",", "help", "=", "'FP16 half-precision export'", ")", "\n", "parser", ".", "add_argument", "(", "'--inplace'", ",", "action", "=", "'store_true'", ",", "help", "=", "'set YOLOv3 Detect() inplace=True'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'model.train() mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimize'", ",", "action", "=", "'store_true'", ",", "help", "=", "'TorchScript: optimize for mobile'", ")", "\n", "parser", ".", "add_argument", "(", "'--int8'", ",", "action", "=", "'store_true'", ",", "help", "=", "'CoreML/TF INT8 quantization'", ")", "\n", "parser", ".", "add_argument", "(", "'--dynamic'", ",", "action", "=", "'store_true'", ",", "help", "=", "'ONNX/TF: dynamic axes'", ")", "\n", "parser", ".", "add_argument", "(", "'--simplify'", ",", "action", "=", "'store_true'", ",", "help", "=", "'ONNX: simplify model'", ")", "\n", "parser", ".", "add_argument", "(", "'--opset'", ",", "type", "=", "int", ",", "default", "=", "13", ",", "help", "=", "'ONNX: opset version'", ")", "\n", "parser", ".", "add_argument", "(", "'--topk-per-class'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'TF.js NMS: topk per class to keep'", ")", "\n", "parser", ".", "add_argument", "(", "'--topk-all'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'TF.js NMS: topk for all classes to keep'", ")", "\n", "parser", ".", "add_argument", "(", "'--iou-thres'", ",", "type", "=", "float", ",", "default", "=", "0.45", ",", "help", "=", "'TF.js NMS: IoU threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--conf-thres'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'TF.js NMS: confidence threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--include'", ",", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "'torchscript'", ",", "'onnx'", "]", ",", "\n", "help", "=", "'available formats are (torchscript, onnx, coreml, saved_model, pb, tflite, tfjs)'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "print_args", "(", "FILE", ".", "stem", ",", "opt", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.export.main": [[363, 365], ["export.run", "vars"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run"], ["", "def", "main", "(", "opt", ")", ":", "\n", "    ", "run", "(", "**", "vars", "(", "opt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.detect.run": [[38, 202], ["torch.no_grad", "torch.no_grad", "str", "utils.general.check_file.lower().startswith", "utils.general.increment_path", "utils.torch_utils.select_device", "models.common.DetectMultiBackend", "utils.general.check_img_size", "tuple", "utils.general.LOGGER.info", "utils.general.check_file.isnumeric", "utils.general.check_file.endswith", "utils.general.check_file", "utils.general.check_imshow", "utils.datasets.LoadStreams", "len", "utils.datasets.LoadImages", "models.common.DetectMultiBackend.", "utils.torch_utils.time_sync", "torch.from_numpy().to", "torch.from_numpy().to", "utils.torch_utils.time_sync", "models.common.DetectMultiBackend.", "utils.torch_utils.time_sync", "utils.general.non_max_suppression", "enumerate", "utils.general.LOGGER.info", "utils.general.strip_optimizer", "utils.general.check_file.endswith", "utils.general.check_file.lower", "pathlib.Path", "models.common.DetectMultiBackend.model.half", "models.common.DetectMultiBackend.model.float", "torch.zeros().to().type_as", "torch.zeros().to().type_as", "torch.from_numpy().to.half", "torch.from_numpy().to.float", "len", "utils.general.increment_path", "utils.torch_utils.time_sync", "pathlib.Path", "str", "utils.plots.Annotator", "len", "utils.general.LOGGER.info", "utils.plots.Annotator.result", "pathlib.Path", "next", "torch.from_numpy", "torch.from_numpy", "str", "torch.tensor", "torch.tensor", "annotator.result.copy", "utils.general.scale_coords().round", "det[].unique", "reversed", "cv2.imshow", "cv2.waitKey", "torch.zeros().to", "torch.zeros().to", "models.common.DetectMultiBackend.model.parameters", "im0s[].copy", "im0s.copy", "getattr", "str", "str", "cv2.imwrite", "vid_writer[].write", "len", "utils.general.colorstr", "pathlib.Path", "utils.general.scale_coords", "int", "utils.plots.Annotator.box_label", "isinstance", "cv2.VideoWriter", "list", "torch.zeros", "torch.zeros", "open", "f.write", "utils.plots.save_one_box", "vid_writer[].release", "vid_cap.get", "int", "int", "cv2.VideoWriter_fourcc", "utils.general.increment_path.glob", "utils.plots.colors", "vid_cap.get", "vid_cap.get", "int", "utils.general.xyxy2xywh", "torch.tensor().view", "torch.tensor().view", "len", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.increment_path", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_img_size", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_file", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_imshow", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.non_max_suppression", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.strip_optimizer", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.increment_path", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.result", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.scale_coords", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.box_label", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.save_one_box", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "run", "(", "weights", "=", "ROOT", "/", "'yolov3.pt'", ",", "# model.pt path(s)", "\n", "source", "=", "ROOT", "/", "'data/images'", ",", "# file/dir/URL/glob, 0 for webcam", "\n", "imgsz", "=", "640", ",", "# inference size (pixels)", "\n", "conf_thres", "=", "0.25", ",", "# confidence threshold", "\n", "iou_thres", "=", "0.45", ",", "# NMS IOU threshold", "\n", "max_det", "=", "1000", ",", "# maximum detections per image", "\n", "device", "=", "''", ",", "# cuda device, i.e. 0 or 0,1,2,3 or cpu", "\n", "view_img", "=", "False", ",", "# show results", "\n", "save_txt", "=", "False", ",", "# save results to *.txt", "\n", "save_conf", "=", "False", ",", "# save confidences in --save-txt labels", "\n", "save_crop", "=", "False", ",", "# save cropped prediction boxes", "\n", "nosave", "=", "False", ",", "# do not save images/videos", "\n", "classes", "=", "None", ",", "# filter by class: --class 0, or --class 0 2 3", "\n", "agnostic_nms", "=", "False", ",", "# class-agnostic NMS", "\n", "augment", "=", "False", ",", "# augmented inference", "\n", "visualize", "=", "False", ",", "# visualize features", "\n", "update", "=", "False", ",", "# update all models", "\n", "project", "=", "ROOT", "/", "'runs/detect'", ",", "# save results to project/name", "\n", "name", "=", "'exp'", ",", "# save results to project/name", "\n", "exist_ok", "=", "False", ",", "# existing project/name ok, do not increment", "\n", "line_thickness", "=", "3", ",", "# bounding box thickness (pixels)", "\n", "hide_labels", "=", "False", ",", "# hide labels", "\n", "hide_conf", "=", "False", ",", "# hide confidences", "\n", "half", "=", "False", ",", "# use FP16 half-precision inference", "\n", "dnn", "=", "False", ",", "# use OpenCV DNN for ONNX inference", "\n", ")", ":", "\n", "    ", "source", "=", "str", "(", "source", ")", "\n", "save_img", "=", "not", "nosave", "and", "not", "source", ".", "endswith", "(", "'.txt'", ")", "# save inference images", "\n", "is_file", "=", "Path", "(", "source", ")", ".", "suffix", "[", "1", ":", "]", "in", "(", "IMG_FORMATS", "+", "VID_FORMATS", ")", "\n", "is_url", "=", "source", ".", "lower", "(", ")", ".", "startswith", "(", "(", "'rtsp://'", ",", "'rtmp://'", ",", "'http://'", ",", "'https://'", ")", ")", "\n", "webcam", "=", "source", ".", "isnumeric", "(", ")", "or", "source", ".", "endswith", "(", "'.txt'", ")", "or", "(", "is_url", "and", "not", "is_file", ")", "\n", "if", "is_url", "and", "is_file", ":", "\n", "        ", "source", "=", "check_file", "(", "source", ")", "# download", "\n", "\n", "# Directories", "\n", "", "save_dir", "=", "increment_path", "(", "Path", "(", "project", ")", "/", "name", ",", "exist_ok", "=", "exist_ok", ")", "# increment run", "\n", "(", "save_dir", "/", "'labels'", "if", "save_txt", "else", "save_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make dir", "\n", "\n", "# Load model", "\n", "device", "=", "select_device", "(", "device", ")", "\n", "model", "=", "DetectMultiBackend", "(", "weights", ",", "device", "=", "device", ",", "dnn", "=", "dnn", ")", "\n", "stride", ",", "names", ",", "pt", ",", "jit", ",", "onnx", "=", "model", ".", "stride", ",", "model", ".", "names", ",", "model", ".", "pt", ",", "model", ".", "jit", ",", "model", ".", "onnx", "\n", "imgsz", "=", "check_img_size", "(", "imgsz", ",", "s", "=", "stride", ")", "# check image size", "\n", "\n", "# Half", "\n", "half", "&=", "pt", "and", "device", ".", "type", "!=", "'cpu'", "# half precision only supported by PyTorch on CUDA", "\n", "if", "pt", ":", "\n", "        ", "model", ".", "model", ".", "half", "(", ")", "if", "half", "else", "model", ".", "model", ".", "float", "(", ")", "\n", "\n", "# Dataloader", "\n", "", "if", "webcam", ":", "\n", "        ", "view_img", "=", "check_imshow", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "# set True to speed up constant image size inference", "\n", "dataset", "=", "LoadStreams", "(", "source", ",", "img_size", "=", "imgsz", ",", "stride", "=", "stride", ",", "auto", "=", "pt", "and", "not", "jit", ")", "\n", "bs", "=", "len", "(", "dataset", ")", "# batch_size", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "LoadImages", "(", "source", ",", "img_size", "=", "imgsz", ",", "stride", "=", "stride", ",", "auto", "=", "pt", "and", "not", "jit", ")", "\n", "bs", "=", "1", "# batch_size", "\n", "", "vid_path", ",", "vid_writer", "=", "[", "None", "]", "*", "bs", ",", "[", "None", "]", "*", "bs", "\n", "\n", "# Run inference", "\n", "if", "pt", "and", "device", ".", "type", "!=", "'cpu'", ":", "\n", "        ", "model", "(", "torch", ".", "zeros", "(", "1", ",", "3", ",", "*", "imgsz", ")", ".", "to", "(", "device", ")", ".", "type_as", "(", "next", "(", "model", ".", "model", ".", "parameters", "(", ")", ")", ")", ")", "# warmup", "\n", "", "dt", ",", "seen", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", ",", "0", "\n", "for", "path", ",", "im", ",", "im0s", ",", "vid_cap", ",", "s", "in", "dataset", ":", "\n", "        ", "t1", "=", "time_sync", "(", ")", "\n", "im", "=", "torch", ".", "from_numpy", "(", "im", ")", ".", "to", "(", "device", ")", "\n", "im", "=", "im", ".", "half", "(", ")", "if", "half", "else", "im", ".", "float", "(", ")", "# uint8 to fp16/32", "\n", "im", "/=", "255", "# 0 - 255 to 0.0 - 1.0", "\n", "if", "len", "(", "im", ".", "shape", ")", "==", "3", ":", "\n", "            ", "im", "=", "im", "[", "None", "]", "# expand for batch dim", "\n", "", "t2", "=", "time_sync", "(", ")", "\n", "dt", "[", "0", "]", "+=", "t2", "-", "t1", "\n", "\n", "# Inference", "\n", "visualize", "=", "increment_path", "(", "save_dir", "/", "Path", "(", "path", ")", ".", "stem", ",", "mkdir", "=", "True", ")", "if", "visualize", "else", "False", "\n", "pred", "=", "model", "(", "im", ",", "augment", "=", "augment", ",", "visualize", "=", "visualize", ")", "\n", "t3", "=", "time_sync", "(", ")", "\n", "dt", "[", "1", "]", "+=", "t3", "-", "t2", "\n", "\n", "# NMS", "\n", "pred", "=", "non_max_suppression", "(", "pred", ",", "conf_thres", ",", "iou_thres", ",", "classes", ",", "agnostic_nms", ",", "max_det", "=", "max_det", ")", "\n", "dt", "[", "2", "]", "+=", "time_sync", "(", ")", "-", "t3", "\n", "\n", "# Second-stage classifier (optional)", "\n", "# pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)", "\n", "\n", "# Process predictions", "\n", "for", "i", ",", "det", "in", "enumerate", "(", "pred", ")", ":", "# per image", "\n", "            ", "seen", "+=", "1", "\n", "if", "webcam", ":", "# batch_size >= 1", "\n", "                ", "p", ",", "im0", ",", "frame", "=", "path", "[", "i", "]", ",", "im0s", "[", "i", "]", ".", "copy", "(", ")", ",", "dataset", ".", "count", "\n", "s", "+=", "f'{i}: '", "\n", "", "else", ":", "\n", "                ", "p", ",", "im0", ",", "frame", "=", "path", ",", "im0s", ".", "copy", "(", ")", ",", "getattr", "(", "dataset", ",", "'frame'", ",", "0", ")", "\n", "\n", "", "p", "=", "Path", "(", "p", ")", "# to Path", "\n", "save_path", "=", "str", "(", "save_dir", "/", "p", ".", "name", ")", "# im.jpg", "\n", "txt_path", "=", "str", "(", "save_dir", "/", "'labels'", "/", "p", ".", "stem", ")", "+", "(", "''", "if", "dataset", ".", "mode", "==", "'image'", "else", "f'_{frame}'", ")", "# im.txt", "\n", "s", "+=", "'%gx%g '", "%", "im", ".", "shape", "[", "2", ":", "]", "# print string", "\n", "gn", "=", "torch", ".", "tensor", "(", "im0", ".", "shape", ")", "[", "[", "1", ",", "0", ",", "1", ",", "0", "]", "]", "# normalization gain whwh", "\n", "imc", "=", "im0", ".", "copy", "(", ")", "if", "save_crop", "else", "im0", "# for save_crop", "\n", "annotator", "=", "Annotator", "(", "im0", ",", "line_width", "=", "line_thickness", ",", "example", "=", "str", "(", "names", ")", ")", "\n", "if", "len", "(", "det", ")", ":", "\n", "# Rescale boxes from img_size to im0 size", "\n", "                ", "det", "[", ":", ",", ":", "4", "]", "=", "scale_coords", "(", "im", ".", "shape", "[", "2", ":", "]", ",", "det", "[", ":", ",", ":", "4", "]", ",", "im0", ".", "shape", ")", ".", "round", "(", ")", "\n", "\n", "# Print results", "\n", "for", "c", "in", "det", "[", ":", ",", "-", "1", "]", ".", "unique", "(", ")", ":", "\n", "                    ", "n", "=", "(", "det", "[", ":", ",", "-", "1", "]", "==", "c", ")", ".", "sum", "(", ")", "# detections per class", "\n", "s", "+=", "f\"{n} {names[int(c)]}{'s' * (n > 1)}, \"", "# add to string", "\n", "\n", "# Write results", "\n", "", "for", "*", "xyxy", ",", "conf", ",", "cls", "in", "reversed", "(", "det", ")", ":", "\n", "                    ", "if", "save_txt", ":", "# Write to file", "\n", "                        ", "xywh", "=", "(", "xyxy2xywh", "(", "torch", ".", "tensor", "(", "xyxy", ")", ".", "view", "(", "1", ",", "4", ")", ")", "/", "gn", ")", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "# normalized xywh", "\n", "line", "=", "(", "cls", ",", "*", "xywh", ",", "conf", ")", "if", "save_conf", "else", "(", "cls", ",", "*", "xywh", ")", "# label format", "\n", "with", "open", "(", "txt_path", "+", "'.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "                            ", "f", ".", "write", "(", "(", "'%g '", "*", "len", "(", "line", ")", ")", ".", "rstrip", "(", ")", "%", "line", "+", "'\\n'", ")", "\n", "\n", "", "", "if", "save_img", "or", "save_crop", "or", "view_img", ":", "# Add bbox to image", "\n", "                        ", "c", "=", "int", "(", "cls", ")", "# integer class", "\n", "label", "=", "None", "if", "hide_labels", "else", "(", "names", "[", "c", "]", "if", "hide_conf", "else", "f'{names[c]} {conf:.2f}'", ")", "\n", "annotator", ".", "box_label", "(", "xyxy", ",", "label", ",", "color", "=", "colors", "(", "c", ",", "True", ")", ")", "\n", "if", "save_crop", ":", "\n", "                            ", "save_one_box", "(", "xyxy", ",", "imc", ",", "file", "=", "save_dir", "/", "'crops'", "/", "names", "[", "c", "]", "/", "f'{p.stem}.jpg'", ",", "BGR", "=", "True", ")", "\n", "\n", "# Print time (inference-only)", "\n", "", "", "", "", "LOGGER", ".", "info", "(", "f'{s}Done. ({t3 - t2:.3f}s)'", ")", "\n", "\n", "# Stream results", "\n", "im0", "=", "annotator", ".", "result", "(", ")", "\n", "if", "view_img", ":", "\n", "                ", "cv2", ".", "imshow", "(", "str", "(", "p", ")", ",", "im0", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "# 1 millisecond", "\n", "\n", "# Save results (image with detections)", "\n", "", "if", "save_img", ":", "\n", "                ", "if", "dataset", ".", "mode", "==", "'image'", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "save_path", ",", "im0", ")", "\n", "", "else", ":", "# 'video' or 'stream'", "\n", "                    ", "if", "vid_path", "[", "i", "]", "!=", "save_path", ":", "# new video", "\n", "                        ", "vid_path", "[", "i", "]", "=", "save_path", "\n", "if", "isinstance", "(", "vid_writer", "[", "i", "]", ",", "cv2", ".", "VideoWriter", ")", ":", "\n", "                            ", "vid_writer", "[", "i", "]", ".", "release", "(", ")", "# release previous video writer", "\n", "", "if", "vid_cap", ":", "# video", "\n", "                            ", "fps", "=", "vid_cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "w", "=", "int", "(", "vid_cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", "\n", "h", "=", "int", "(", "vid_cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", "\n", "", "else", ":", "# stream", "\n", "                            ", "fps", ",", "w", ",", "h", "=", "30", ",", "im0", ".", "shape", "[", "1", "]", ",", "im0", ".", "shape", "[", "0", "]", "\n", "save_path", "+=", "'.mp4'", "\n", "", "vid_writer", "[", "i", "]", "=", "cv2", ".", "VideoWriter", "(", "save_path", ",", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'mp4v'", ")", ",", "fps", ",", "(", "w", ",", "h", ")", ")", "\n", "", "vid_writer", "[", "i", "]", ".", "write", "(", "im0", ")", "\n", "\n", "# Print results", "\n", "", "", "", "", "t", "=", "tuple", "(", "x", "/", "seen", "*", "1E3", "for", "x", "in", "dt", ")", "# speeds per image", "\n", "LOGGER", ".", "info", "(", "f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {(1, 3, *imgsz)}'", "%", "t", ")", "\n", "if", "save_txt", "or", "save_img", ":", "\n", "        ", "s", "=", "f\"\\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}\"", "if", "save_txt", "else", "''", "\n", "LOGGER", ".", "info", "(", "f\"Results saved to {colorstr('bold', save_dir)}{s}\"", ")", "\n", "", "if", "update", ":", "\n", "        ", "strip_optimizer", "(", "weights", ")", "# update model (to fix SourceChangeWarning)", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.detect.parse_opt": [[204, 235], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.general.print_args", "len"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.print_args"], ["", "", "def", "parse_opt", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "default", "=", "ROOT", "/", "'yolov3.pt'", ",", "help", "=", "'model path(s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--source'", ",", "type", "=", "str", ",", "default", "=", "ROOT", "/", "'data/images'", ",", "help", "=", "'file/dir/URL/glob, 0 for webcam'", ")", "\n", "parser", ".", "add_argument", "(", "'--imgsz'", ",", "'--img'", ",", "'--img-size'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "640", "]", ",", "help", "=", "'inference size h,w'", ")", "\n", "parser", ".", "add_argument", "(", "'--conf-thres'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'confidence threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--iou-thres'", ",", "type", "=", "float", ",", "default", "=", "0.45", ",", "help", "=", "'NMS IoU threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-det'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'maximum detections per image'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "''", ",", "help", "=", "'cuda device, i.e. 0 or 0,1,2,3 or cpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--view-img'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-txt'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save results to *.txt'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-conf'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save confidences in --save-txt labels'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-crop'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save cropped prediction boxes'", ")", "\n", "parser", ".", "add_argument", "(", "'--nosave'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save images/videos'", ")", "\n", "parser", ".", "add_argument", "(", "'--classes'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "help", "=", "'filter by class: --classes 0, or --classes 0 2 3'", ")", "\n", "parser", ".", "add_argument", "(", "'--agnostic-nms'", ",", "action", "=", "'store_true'", ",", "help", "=", "'class-agnostic NMS'", ")", "\n", "parser", ".", "add_argument", "(", "'--augment'", ",", "action", "=", "'store_true'", ",", "help", "=", "'augmented inference'", ")", "\n", "parser", ".", "add_argument", "(", "'--visualize'", ",", "action", "=", "'store_true'", ",", "help", "=", "'visualize features'", ")", "\n", "parser", ".", "add_argument", "(", "'--update'", ",", "action", "=", "'store_true'", ",", "help", "=", "'update all models'", ")", "\n", "parser", ".", "add_argument", "(", "'--project'", ",", "default", "=", "ROOT", "/", "'runs/detect'", ",", "help", "=", "'save results to project/name'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "'exp'", ",", "help", "=", "'save results to project/name'", ")", "\n", "parser", ".", "add_argument", "(", "'--exist-ok'", ",", "action", "=", "'store_true'", ",", "help", "=", "'existing project/name ok, do not increment'", ")", "\n", "parser", ".", "add_argument", "(", "'--line-thickness'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "help", "=", "'bounding box thickness (pixels)'", ")", "\n", "parser", ".", "add_argument", "(", "'--hide-labels'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'hide labels'", ")", "\n", "parser", ".", "add_argument", "(", "'--hide-conf'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'hide confidences'", ")", "\n", "parser", ".", "add_argument", "(", "'--half'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use FP16 half-precision inference'", ")", "\n", "parser", ".", "add_argument", "(", "'--dnn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use OpenCV DNN for ONNX inference'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "imgsz", "*=", "2", "if", "len", "(", "opt", ".", "imgsz", ")", "==", "1", "else", "1", "# expand", "\n", "print_args", "(", "FILE", ".", "stem", ",", "opt", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.None.detect.main": [[237, 240], ["utils.general.check_requirements", "detect.run", "vars"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run"], ["", "def", "main", "(", "opt", ")", ":", "\n", "    ", "check_requirements", "(", "exclude", "=", "(", "'tensorboard'", ",", "'thop'", ")", ")", "\n", "run", "(", "**", "vars", "(", "opt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Colors.__init__": [[33, 39], ["len", "plots.Colors.hex2rgb"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Colors.hex2rgb"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# hex = matplotlib.colors.TABLEAU_COLORS.values()", "\n", "        ", "hex", "=", "(", "'FF3838'", ",", "'FF9D97'", ",", "'FF701F'", ",", "'FFB21D'", ",", "'CFD231'", ",", "'48F90A'", ",", "'92CC17'", ",", "'3DDB86'", ",", "'1A9334'", ",", "'00D4BB'", ",", "\n", "'2C99A8'", ",", "'00C2FF'", ",", "'344593'", ",", "'6473FF'", ",", "'0018EC'", ",", "'8438FF'", ",", "'520085'", ",", "'CB38FF'", ",", "'FF95C8'", ",", "'FF37C7'", ")", "\n", "self", ".", "palette", "=", "[", "self", ".", "hex2rgb", "(", "'#'", "+", "c", ")", "for", "c", "in", "hex", "]", "\n", "self", ".", "n", "=", "len", "(", "self", ".", "palette", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Colors.__call__": [[40, 43], ["int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "i", ",", "bgr", "=", "False", ")", ":", "\n", "        ", "c", "=", "self", ".", "palette", "[", "int", "(", "i", ")", "%", "self", ".", "n", "]", "\n", "return", "(", "c", "[", "2", "]", ",", "c", "[", "1", "]", ",", "c", "[", "0", "]", ")", "if", "bgr", "else", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Colors.hex2rgb": [[44, 47], ["tuple", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "hex2rgb", "(", "h", ")", ":", "# rgb order (PIL)", "\n", "        ", "return", "tuple", "(", "int", "(", "h", "[", "1", "+", "i", ":", "1", "+", "i", "+", "2", "]", ",", "16", ")", "for", "i", "in", "(", "0", ",", "2", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.__init__": [[73, 84], ["utils.general.is_chinese", "PIL.ImageDraw.Draw", "plots.check_font", "max", "utils.general.is_ascii", "isinstance", "PIL.Image.fromarray", "round", "utils.general.is_chinese", "max", "round", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_chinese", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.check_font", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_ascii", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_chinese"], ["", "def", "__init__", "(", "self", ",", "im", ",", "line_width", "=", "None", ",", "font_size", "=", "None", ",", "font", "=", "'Arial.ttf'", ",", "pil", "=", "False", ",", "example", "=", "'abc'", ")", ":", "\n", "        ", "assert", "im", ".", "data", ".", "contiguous", ",", "'Image not contiguous. Apply np.ascontiguousarray(im) to Annotator() input images.'", "\n", "self", ".", "pil", "=", "pil", "or", "not", "is_ascii", "(", "example", ")", "or", "is_chinese", "(", "example", ")", "\n", "if", "self", ".", "pil", ":", "# use PIL", "\n", "            ", "self", ".", "im", "=", "im", "if", "isinstance", "(", "im", ",", "Image", ".", "Image", ")", "else", "Image", ".", "fromarray", "(", "im", ")", "\n", "self", ".", "draw", "=", "ImageDraw", ".", "Draw", "(", "self", ".", "im", ")", "\n", "self", ".", "font", "=", "check_font", "(", "font", "=", "'Arial.Unicode.ttf'", "if", "is_chinese", "(", "example", ")", "else", "font", ",", "\n", "size", "=", "font_size", "or", "max", "(", "round", "(", "sum", "(", "self", ".", "im", ".", "size", ")", "/", "2", "*", "0.035", ")", ",", "12", ")", ")", "\n", "", "else", ":", "# use cv2", "\n", "            ", "self", ".", "im", "=", "im", "\n", "", "self", ".", "lw", "=", "line_width", "or", "max", "(", "round", "(", "sum", "(", "im", ".", "shape", ")", "/", "2", "*", "0.003", ")", ",", "2", ")", "# line width", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.box_label": [[85, 109], ["plots.Annotator.draw.rectangle", "cv2.rectangle", "utils.general.is_ascii", "plots.Annotator.font.getsize", "plots.Annotator.draw.rectangle", "plots.Annotator.draw.text", "max", "cv2.rectangle", "cv2.putText", "int", "int", "int", "int", "cv2.getTextSize"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.rectangle", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.rectangle", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_ascii", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.rectangle", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.text", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.rectangle"], ["", "def", "box_label", "(", "self", ",", "box", ",", "label", "=", "''", ",", "color", "=", "(", "128", ",", "128", ",", "128", ")", ",", "txt_color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ":", "\n", "# Add one xyxy box to image with label", "\n", "        ", "if", "self", ".", "pil", "or", "not", "is_ascii", "(", "label", ")", ":", "\n", "            ", "self", ".", "draw", ".", "rectangle", "(", "box", ",", "width", "=", "self", ".", "lw", ",", "outline", "=", "color", ")", "# box", "\n", "if", "label", ":", "\n", "                ", "w", ",", "h", "=", "self", ".", "font", ".", "getsize", "(", "label", ")", "# text width, height", "\n", "outside", "=", "box", "[", "1", "]", "-", "h", ">=", "0", "# label fits outside box", "\n", "self", ".", "draw", ".", "rectangle", "(", "[", "box", "[", "0", "]", ",", "\n", "box", "[", "1", "]", "-", "h", "if", "outside", "else", "box", "[", "1", "]", ",", "\n", "box", "[", "0", "]", "+", "w", "+", "1", ",", "\n", "box", "[", "1", "]", "+", "1", "if", "outside", "else", "box", "[", "1", "]", "+", "h", "+", "1", "]", ",", "fill", "=", "color", ")", "\n", "# self.draw.text((box[0], box[1]), label, fill=txt_color, font=self.font, anchor='ls')  # for PIL>8.0", "\n", "self", ".", "draw", ".", "text", "(", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", "-", "h", "if", "outside", "else", "box", "[", "1", "]", ")", ",", "label", ",", "fill", "=", "txt_color", ",", "font", "=", "self", ".", "font", ")", "\n", "", "", "else", ":", "# cv2", "\n", "            ", "p1", ",", "p2", "=", "(", "int", "(", "box", "[", "0", "]", ")", ",", "int", "(", "box", "[", "1", "]", ")", ")", ",", "(", "int", "(", "box", "[", "2", "]", ")", ",", "int", "(", "box", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "self", ".", "im", ",", "p1", ",", "p2", ",", "color", ",", "thickness", "=", "self", ".", "lw", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "if", "label", ":", "\n", "                ", "tf", "=", "max", "(", "self", ".", "lw", "-", "1", ",", "1", ")", "# font thickness", "\n", "w", ",", "h", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "self", ".", "lw", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "# text width, height", "\n", "outside", "=", "p1", "[", "1", "]", "-", "h", "-", "3", ">=", "0", "# label fits outside box", "\n", "p2", "=", "p1", "[", "0", "]", "+", "w", ",", "p1", "[", "1", "]", "-", "h", "-", "3", "if", "outside", "else", "p1", "[", "1", "]", "+", "h", "+", "3", "\n", "cv2", ".", "rectangle", "(", "self", ".", "im", ",", "p1", ",", "p2", ",", "color", ",", "-", "1", ",", "cv2", ".", "LINE_AA", ")", "# filled", "\n", "cv2", ".", "putText", "(", "self", ".", "im", ",", "label", ",", "(", "p1", "[", "0", "]", ",", "p1", "[", "1", "]", "-", "2", "if", "outside", "else", "p1", "[", "1", "]", "+", "h", "+", "2", ")", ",", "0", ",", "self", ".", "lw", "/", "3", ",", "txt_color", ",", "\n", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.rectangle": [[110, 113], ["plots.Annotator.draw.rectangle"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.rectangle"], ["", "", "", "def", "rectangle", "(", "self", ",", "xy", ",", "fill", "=", "None", ",", "outline", "=", "None", ",", "width", "=", "1", ")", ":", "\n", "# Add rectangle to image (PIL-only)", "\n", "        ", "self", ".", "draw", ".", "rectangle", "(", "xy", ",", "fill", ",", "outline", ",", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.text": [[114, 118], ["plots.Annotator.font.getsize", "plots.Annotator.draw.text"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.text"], ["", "def", "text", "(", "self", ",", "xy", ",", "text", ",", "txt_color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ":", "\n", "# Add text to image (PIL-only)", "\n", "        ", "w", ",", "h", "=", "self", ".", "font", ".", "getsize", "(", "text", ")", "# text width, height", "\n", "self", ".", "draw", ".", "text", "(", "(", "xy", "[", "0", "]", ",", "xy", "[", "1", "]", "-", "h", "+", "1", ")", ",", "text", ",", "fill", "=", "txt_color", ",", "font", "=", "self", ".", "font", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.result": [[119, 122], ["numpy.asarray"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "# Return annotated image as array", "\n", "        ", "return", "np", ".", "asarray", "(", "self", ".", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.check_font": [[52, 66], ["pathlib.Path", "pathlib.Path.exists", "PIL.ImageFont.truetype", "print", "torch.hub.download_url_to_file", "pathlib.Path.exists", "str", "str", "PIL.ImageFont.truetype", "str", "utils.general.check_requirements"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements"], ["def", "check_font", "(", "font", "=", "'Arial.ttf'", ",", "size", "=", "10", ")", ":", "\n", "# Return a PIL TrueType Font, downloading to CONFIG_DIR if necessary", "\n", "    ", "font", "=", "Path", "(", "font", ")", "\n", "font", "=", "font", "if", "font", ".", "exists", "(", ")", "else", "(", "CONFIG_DIR", "/", "font", ".", "name", ")", "\n", "try", ":", "\n", "        ", "return", "ImageFont", ".", "truetype", "(", "str", "(", "font", ")", "if", "font", ".", "exists", "(", ")", "else", "font", ".", "name", ",", "size", ")", "\n", "", "except", "Exception", "as", "e", ":", "# download if missing", "\n", "        ", "url", "=", "\"https://ultralytics.com/assets/\"", "+", "font", ".", "name", "\n", "print", "(", "f'Downloading {url} to {font}...'", ")", "\n", "torch", ".", "hub", ".", "download_url_to_file", "(", "url", ",", "str", "(", "font", ")", ",", "progress", "=", "False", ")", "\n", "try", ":", "\n", "            ", "return", "ImageFont", ".", "truetype", "(", "str", "(", "font", ")", ",", "size", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "check_requirements", "(", "'Pillow>=8.4.0'", ")", "# known issue https://github.com/ultralytics/yolov5/issues/5374", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.feature_visualization": [[124, 149], ["pathlib.Path", "torch.chunk", "min", "matplotlib.subplots", "ax.ravel.ravel", "matplotlib.subplots_adjust", "range", "print", "matplotlib.savefig", "matplotlib.close", "x[].cpu", "math.ceil", "ax[].imshow", "ax[].axis", "blocks[].squeeze", "module_type.split"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "", "def", "feature_visualization", "(", "x", ",", "module_type", ",", "stage", ",", "n", "=", "32", ",", "save_dir", "=", "Path", "(", "'runs/detect/exp'", ")", ")", ":", "\n", "    ", "\"\"\"\n    x:              Features to be visualized\n    module_type:    Module type\n    stage:          Module stage within model\n    n:              Maximum number of feature maps to plot\n    save_dir:       Directory to save results\n    \"\"\"", "\n", "if", "'Detect'", "not", "in", "module_type", ":", "\n", "        ", "batch", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "# batch, channels, height, width", "\n", "if", "height", ">", "1", "and", "width", ">", "1", ":", "\n", "            ", "f", "=", "f\"stage{stage}_{module_type.split('.')[-1]}_features.png\"", "# filename", "\n", "\n", "blocks", "=", "torch", ".", "chunk", "(", "x", "[", "0", "]", ".", "cpu", "(", ")", ",", "channels", ",", "dim", "=", "0", ")", "# select batch index 0, block by channels", "\n", "n", "=", "min", "(", "n", ",", "channels", ")", "# number of plots", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "math", ".", "ceil", "(", "n", "/", "8", ")", ",", "8", ",", "tight_layout", "=", "True", ")", "# 8 rows x n/8 cols", "\n", "ax", "=", "ax", ".", "ravel", "(", ")", "\n", "plt", ".", "subplots_adjust", "(", "wspace", "=", "0.05", ",", "hspace", "=", "0.05", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "ax", "[", "i", "]", ".", "imshow", "(", "blocks", "[", "i", "]", ".", "squeeze", "(", ")", ")", "# cmap='gray'", "\n", "ax", "[", "i", "]", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "print", "(", "f'Saving {save_dir / f}... ({n}/{channels})'", ")", "\n", "plt", ".", "savefig", "(", "save_dir", "/", "f", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.hist2d": [[151, 158], ["numpy.histogram2d", "numpy.clip", "numpy.clip", "numpy.log", "numpy.linspace", "numpy.linspace", "x.min", "x.max", "y.min", "y.max", "numpy.digitize", "numpy.digitize"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log"], ["", "", "", "def", "hist2d", "(", "x", ",", "y", ",", "n", "=", "100", ")", ":", "\n", "# 2d histogram used in labels.png and evolve.png", "\n", "    ", "xedges", ",", "yedges", "=", "np", ".", "linspace", "(", "x", ".", "min", "(", ")", ",", "x", ".", "max", "(", ")", ",", "n", ")", ",", "np", ".", "linspace", "(", "y", ".", "min", "(", ")", ",", "y", ".", "max", "(", ")", ",", "n", ")", "\n", "hist", ",", "xedges", ",", "yedges", "=", "np", ".", "histogram2d", "(", "x", ",", "y", ",", "(", "xedges", ",", "yedges", ")", ")", "\n", "xidx", "=", "np", ".", "clip", "(", "np", ".", "digitize", "(", "x", ",", "xedges", ")", "-", "1", ",", "0", ",", "hist", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "yidx", "=", "np", ".", "clip", "(", "np", ".", "digitize", "(", "y", ",", "yedges", ")", "-", "1", ",", "0", ",", "hist", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "return", "np", ".", "log", "(", "hist", "[", "xidx", ",", "yidx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.butter_lowpass_filtfilt": [[160, 171], ["plots.butter_lowpass_filtfilt.butter_lowpass"], "function", ["None"], ["", "def", "butter_lowpass_filtfilt", "(", "data", ",", "cutoff", "=", "1500", ",", "fs", "=", "50000", ",", "order", "=", "5", ")", ":", "\n", "    ", "from", "scipy", ".", "signal", "import", "butter", ",", "filtfilt", "\n", "\n", "# https://stackoverflow.com/questions/28536191/how-to-filter-smooth-with-scipy-numpy", "\n", "def", "butter_lowpass", "(", "cutoff", ",", "fs", ",", "order", ")", ":", "\n", "        ", "nyq", "=", "0.5", "*", "fs", "\n", "normal_cutoff", "=", "cutoff", "/", "nyq", "\n", "return", "butter", "(", "order", ",", "normal_cutoff", ",", "btype", "=", "'low'", ",", "analog", "=", "False", ")", "\n", "\n", "", "b", ",", "a", "=", "butter_lowpass", "(", "cutoff", ",", "fs", ",", "order", "=", "order", ")", "\n", "return", "filtfilt", "(", "b", ",", "a", ",", "data", ")", "# forward-backward filter", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.output_to_target": [[173, 180], ["enumerate", "numpy.array", "o.cpu().numpy", "targets.append", "o.cpu", "list", "utils.general.xyxy2xywh", "numpy.array"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh"], ["", "def", "output_to_target", "(", "output", ")", ":", "\n", "# Convert model output to target format [batch_id, class_id, x, y, w, h, conf]", "\n", "    ", "targets", "=", "[", "]", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "output", ")", ":", "\n", "        ", "for", "*", "box", ",", "conf", ",", "cls", "in", "o", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "            ", "targets", ".", "append", "(", "[", "i", ",", "cls", ",", "*", "list", "(", "*", "xyxy2xywh", "(", "np", ".", "array", "(", "box", ")", "[", "None", "]", ")", ")", ",", "conf", "]", ")", "\n", "", "", "return", "np", ".", "array", "(", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_images": [[182, 241], ["isinstance", "isinstance", "min", "numpy.ceil", "numpy.full", "enumerate", "int", "plots.Annotator", "range", "Annotator.im.save", "images.cpu().float().numpy.cpu().float().numpy", "targets.cpu().numpy.cpu().numpy", "numpy.max", "im.transpose.transpose", "max", "math.ceil", "math.ceil", "cv2.resize", "plots.Annotator.rectangle", "int", "int", "int", "int", "tuple", "round", "int", "int", "plots.Annotator.text", "len", "ti[].astype", "enumerate", "images.cpu().float().numpy.cpu().float", "targets.cpu().numpy.cpu", "utils.general.xywh2xyxy", "boxes.T.tolist", "colors", "int", "boxes.max", "plots.Annotator.box_label", "images.cpu().float().numpy.cpu", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.rectangle", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.text", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.box_label"], ["", "def", "plot_images", "(", "images", ",", "targets", ",", "paths", "=", "None", ",", "fname", "=", "'images.jpg'", ",", "names", "=", "None", ",", "max_size", "=", "1920", ",", "max_subplots", "=", "16", ")", ":", "\n", "# Plot image grid with labels", "\n", "    ", "if", "isinstance", "(", "images", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "images", "=", "images", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "targets", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "np", ".", "max", "(", "images", "[", "0", "]", ")", "<=", "1", ":", "\n", "        ", "images", "*=", "255", "# de-normalise (optional)", "\n", "", "bs", ",", "_", ",", "h", ",", "w", "=", "images", ".", "shape", "# batch size, _, height, width", "\n", "bs", "=", "min", "(", "bs", ",", "max_subplots", ")", "# limit plot images", "\n", "ns", "=", "np", ".", "ceil", "(", "bs", "**", "0.5", ")", "# number of subplots (square)", "\n", "\n", "# Build Image", "\n", "mosaic", "=", "np", ".", "full", "(", "(", "int", "(", "ns", "*", "h", ")", ",", "int", "(", "ns", "*", "w", ")", ",", "3", ")", ",", "255", ",", "dtype", "=", "np", ".", "uint8", ")", "# init", "\n", "for", "i", ",", "im", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "if", "i", "==", "max_subplots", ":", "# if last batch has fewer images than we expect", "\n", "            ", "break", "\n", "", "x", ",", "y", "=", "int", "(", "w", "*", "(", "i", "//", "ns", ")", ")", ",", "int", "(", "h", "*", "(", "i", "%", "ns", ")", ")", "# block origin", "\n", "im", "=", "im", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "mosaic", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", ",", ":", "]", "=", "im", "\n", "\n", "# Resize (optional)", "\n", "", "scale", "=", "max_size", "/", "ns", "/", "max", "(", "h", ",", "w", ")", "\n", "if", "scale", "<", "1", ":", "\n", "        ", "h", "=", "math", ".", "ceil", "(", "scale", "*", "h", ")", "\n", "w", "=", "math", ".", "ceil", "(", "scale", "*", "w", ")", "\n", "mosaic", "=", "cv2", ".", "resize", "(", "mosaic", ",", "tuple", "(", "int", "(", "x", "*", "ns", ")", "for", "x", "in", "(", "w", ",", "h", ")", ")", ")", "\n", "\n", "# Annotate", "\n", "", "fs", "=", "int", "(", "(", "h", "+", "w", ")", "*", "ns", "*", "0.01", ")", "# font size", "\n", "annotator", "=", "Annotator", "(", "mosaic", ",", "line_width", "=", "round", "(", "fs", "/", "10", ")", ",", "font_size", "=", "fs", ",", "pil", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "        ", "x", ",", "y", "=", "int", "(", "w", "*", "(", "i", "//", "ns", ")", ")", ",", "int", "(", "h", "*", "(", "i", "%", "ns", ")", ")", "# block origin", "\n", "annotator", ".", "rectangle", "(", "[", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", "]", ",", "None", ",", "(", "255", ",", "255", ",", "255", ")", ",", "width", "=", "2", ")", "# borders", "\n", "if", "paths", ":", "\n", "            ", "annotator", ".", "text", "(", "(", "x", "+", "5", ",", "y", "+", "5", "+", "h", ")", ",", "text", "=", "Path", "(", "paths", "[", "i", "]", ")", ".", "name", "[", ":", "40", "]", ",", "txt_color", "=", "(", "220", ",", "220", ",", "220", ")", ")", "# filenames", "\n", "", "if", "len", "(", "targets", ")", ">", "0", ":", "\n", "            ", "ti", "=", "targets", "[", "targets", "[", ":", ",", "0", "]", "==", "i", "]", "# image targets", "\n", "boxes", "=", "xywh2xyxy", "(", "ti", "[", ":", ",", "2", ":", "6", "]", ")", ".", "T", "\n", "classes", "=", "ti", "[", ":", ",", "1", "]", ".", "astype", "(", "'int'", ")", "\n", "labels", "=", "ti", ".", "shape", "[", "1", "]", "==", "6", "# labels if no conf column", "\n", "conf", "=", "None", "if", "labels", "else", "ti", "[", ":", ",", "6", "]", "# check for confidence presence (label vs pred)", "\n", "\n", "if", "boxes", ".", "shape", "[", "1", "]", ":", "\n", "                ", "if", "boxes", ".", "max", "(", ")", "<=", "1.01", ":", "# if normalized with tolerance 0.01", "\n", "                    ", "boxes", "[", "[", "0", ",", "2", "]", "]", "*=", "w", "# scale to pixels", "\n", "boxes", "[", "[", "1", ",", "3", "]", "]", "*=", "h", "\n", "", "elif", "scale", "<", "1", ":", "# absolute coords need scale if image scales", "\n", "                    ", "boxes", "*=", "scale", "\n", "", "", "boxes", "[", "[", "0", ",", "2", "]", "]", "+=", "x", "\n", "boxes", "[", "[", "1", ",", "3", "]", "]", "+=", "y", "\n", "for", "j", ",", "box", "in", "enumerate", "(", "boxes", ".", "T", ".", "tolist", "(", ")", ")", ":", "\n", "                ", "cls", "=", "classes", "[", "j", "]", "\n", "color", "=", "colors", "(", "cls", ")", "\n", "cls", "=", "names", "[", "cls", "]", "if", "names", "else", "cls", "\n", "if", "labels", "or", "conf", "[", "j", "]", ">", "0.25", ":", "# 0.25 conf thresh", "\n", "                    ", "label", "=", "f'{cls}'", "if", "labels", "else", "f'{cls} {conf[j]:.1f}'", "\n", "annotator", ".", "box_label", "(", "box", ",", "label", ",", "color", "=", "color", ")", "\n", "", "", "", "", "annotator", ".", "im", ".", "save", "(", "fname", ")", "# save", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_lr_scheduler": [[243, 258], ["range", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.savefig", "matplotlib.close", "copy.copy", "copy.copy", "scheduler.step", "y.append", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot"], ["", "def", "plot_lr_scheduler", "(", "optimizer", ",", "scheduler", ",", "epochs", "=", "300", ",", "save_dir", "=", "''", ")", ":", "\n", "# Plot LR simulating training for full epochs", "\n", "    ", "optimizer", ",", "scheduler", "=", "copy", "(", "optimizer", ")", ",", "copy", "(", "scheduler", ")", "# do not modify originals", "\n", "y", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "y", ".", "append", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "", "plt", ".", "plot", "(", "y", ",", "'.-'", ",", "label", "=", "'LR'", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'LR'", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "epochs", ")", "\n", "plt", ".", "ylim", "(", "0", ")", "\n", "plt", ".", "savefig", "(", "Path", "(", "save_dir", ")", "/", "'LR.png'", ",", "dpi", "=", "200", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_val_txt": [[260, 275], ["numpy.loadtxt", "utils.general.xyxy2xywh", "matplotlib.subplots", "ax.hist2d", "ax.set_aspect", "matplotlib.savefig", "matplotlib.subplots", "ax[].hist", "ax[].hist", "matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.hist2d"], ["", "def", "plot_val_txt", "(", ")", ":", "# from utils.plots import *; plot_val()", "\n", "# Plot val.txt histograms", "\n", "    ", "x", "=", "np", ".", "loadtxt", "(", "'val.txt'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "box", "=", "xyxy2xywh", "(", "x", "[", ":", ",", ":", "4", "]", ")", "\n", "cx", ",", "cy", "=", "box", "[", ":", ",", "0", "]", ",", "box", "[", ":", ",", "1", "]", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "6", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "ax", ".", "hist2d", "(", "cx", ",", "cy", ",", "bins", "=", "600", ",", "cmax", "=", "10", ",", "cmin", "=", "0", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "plt", ".", "savefig", "(", "'hist2d.png'", ",", "dpi", "=", "300", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "figsize", "=", "(", "12", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "ax", "[", "0", "]", ".", "hist", "(", "cx", ",", "bins", "=", "600", ")", "\n", "ax", "[", "1", "]", ".", "hist", "(", "cy", ",", "bins", "=", "600", ")", "\n", "plt", ".", "savefig", "(", "'hist1d.png'", ",", "dpi", "=", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_targets_txt": [[277, 288], ["matplotlib.subplots", "ax.ravel.ravel", "range", "matplotlib.savefig", "numpy.loadtxt", "ax[].hist", "ax[].legend", "ax[].set_title", "x[].mean", "x[].std"], "function", ["None"], ["", "def", "plot_targets_txt", "(", ")", ":", "# from utils.plots import *; plot_targets_txt()", "\n", "# Plot targets.txt histograms", "\n", "    ", "x", "=", "np", ".", "loadtxt", "(", "'targets.txt'", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "s", "=", "[", "'x targets'", ",", "'y targets'", ",", "'width targets'", ",", "'height targets'", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "2", ",", "figsize", "=", "(", "8", ",", "8", ")", ",", "tight_layout", "=", "True", ")", "\n", "ax", "=", "ax", ".", "ravel", "(", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "ax", "[", "i", "]", ".", "hist", "(", "x", "[", "i", "]", ",", "bins", "=", "100", ",", "label", "=", "f'{x[i].mean():.3g} +/- {x[i].std():.3g}'", ")", "\n", "ax", "[", "i", "]", ".", "legend", "(", ")", "\n", "ax", "[", "i", "]", ".", "set_title", "(", "s", "[", "i", "]", ")", "\n", "", "plt", ".", "savefig", "(", "'targets.jpg'", ",", "dpi", "=", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_val_study": [[290, 325], ["matplotlib.subplots", "sorted", "ax2.plot", "ax2.grid", "ax2.set_yticks", "ax2.set_xlim", "ax2.set_ylim", "ax2.set_xlabel", "ax2.set_ylabel", "ax2.legend", "print", "matplotlib.savefig", "pathlib.Path", "[].ravel", "save_dir.glob", "ax2.plot", "numpy.arange", "pathlib.Path", "numpy.loadtxt", "numpy.arange", "numpy.array", "range", "y[].argmax", "numpy.array", "ax[].plot", "ax[].set_title", "f.stem.replace().replace", "matplotlib.subplots", "f.stem.replace"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot"], ["", "def", "plot_val_study", "(", "file", "=", "''", ",", "dir", "=", "''", ",", "x", "=", "None", ")", ":", "# from utils.plots import *; plot_val_study()", "\n", "# Plot file=study.txt generated by val.py (or plot all study*.txt in dir)", "\n", "    ", "save_dir", "=", "Path", "(", "file", ")", ".", "parent", "if", "file", "else", "Path", "(", "dir", ")", "\n", "plot2", "=", "False", "# plot additional results", "\n", "if", "plot2", ":", "\n", "        ", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "4", ",", "figsize", "=", "(", "10", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "[", "1", "]", ".", "ravel", "(", ")", "\n", "\n", "", "fig2", ",", "ax2", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "4", ")", ",", "tight_layout", "=", "True", ")", "\n", "# for f in [save_dir / f'study_coco_{x}.txt' for x in ['yolov3', 'yolov3-spp', 'yolov3-tiny']]:", "\n", "for", "f", "in", "sorted", "(", "save_dir", ".", "glob", "(", "'study*.txt'", ")", ")", ":", "\n", "        ", "y", "=", "np", ".", "loadtxt", "(", "f", ",", "dtype", "=", "np", ".", "float32", ",", "usecols", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "7", ",", "8", ",", "9", "]", ",", "ndmin", "=", "2", ")", ".", "T", "\n", "x", "=", "np", ".", "arange", "(", "y", ".", "shape", "[", "1", "]", ")", "if", "x", "is", "None", "else", "np", ".", "array", "(", "x", ")", "\n", "if", "plot2", ":", "\n", "            ", "s", "=", "[", "'P'", ",", "'R'", ",", "'mAP@.5'", ",", "'mAP@.5:.95'", ",", "'t_preprocess (ms/img)'", ",", "'t_inference (ms/img)'", ",", "'t_NMS (ms/img)'", "]", "\n", "for", "i", "in", "range", "(", "7", ")", ":", "\n", "                ", "ax", "[", "i", "]", ".", "plot", "(", "x", ",", "y", "[", "i", "]", ",", "'.-'", ",", "linewidth", "=", "2", ",", "markersize", "=", "8", ")", "\n", "ax", "[", "i", "]", ".", "set_title", "(", "s", "[", "i", "]", ")", "\n", "\n", "", "", "j", "=", "y", "[", "3", "]", ".", "argmax", "(", ")", "+", "1", "\n", "ax2", ".", "plot", "(", "y", "[", "5", ",", "1", ":", "j", "]", ",", "y", "[", "3", ",", "1", ":", "j", "]", "*", "1E2", ",", "'.-'", ",", "linewidth", "=", "2", ",", "markersize", "=", "8", ",", "\n", "label", "=", "f", ".", "stem", ".", "replace", "(", "'study_coco_'", ",", "''", ")", ".", "replace", "(", "'yolo'", ",", "'YOLO'", ")", ")", "\n", "\n", "", "ax2", ".", "plot", "(", "1E3", "/", "np", ".", "array", "(", "[", "209", ",", "140", ",", "97", ",", "58", ",", "35", ",", "18", "]", ")", ",", "[", "34.6", ",", "40.5", ",", "43.0", ",", "47.5", ",", "49.7", ",", "51.5", "]", ",", "\n", "'k.-'", ",", "linewidth", "=", "2", ",", "markersize", "=", "8", ",", "alpha", "=", ".25", ",", "label", "=", "'EfficientDet'", ")", "\n", "\n", "ax2", ".", "grid", "(", "alpha", "=", "0.2", ")", "\n", "ax2", ".", "set_yticks", "(", "np", ".", "arange", "(", "20", ",", "60", ",", "5", ")", ")", "\n", "ax2", ".", "set_xlim", "(", "0", ",", "57", ")", "\n", "ax2", ".", "set_ylim", "(", "25", ",", "55", ")", "\n", "ax2", ".", "set_xlabel", "(", "'GPU Speed (ms/img)'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'COCO AP val'", ")", "\n", "ax2", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "f", "=", "save_dir", "/", "'study.png'", "\n", "print", "(", "f'Saving {f}...'", ")", "\n", "plt", ".", "savefig", "(", "f", ",", "dpi", "=", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_labels": [[327, 371], ["utils.general.Timeout", "pathlib.Path", "utils.general.LOGGER.info", "int", "pandas.DataFrame", "seaborn.pairplot", "matplotlib.savefig", "matplotlib.close", "matplotlib.use", "matplotlib.use", "[].ravel", "ax[].hist", "ax[].set_ylabel", "seaborn.histplot", "seaborn.histplot", "PIL.Image.fromarray", "ax[].imshow", "ax[].axis", "matplotlib.savefig", "matplotlib.use", "matplotlib.use", "matplotlib.close", "labels[].transpose", "b.transpose", "len", "ax[].set_xticks", "ax[].set_xticklabels", "ax[].set_xlabel", "utils.general.xywh2xyxy", "PIL.ImageDraw.Draw().rectangle", "c.max", "dict", "dict", "range", "numpy.ones", "ax[].spines[].set_visible", "matplotlib.subplots", "numpy.linspace", "len", "PIL.ImageDraw.Draw", "colors"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.rectangle"], ["", "@", "try_except", "# known issue https://github.com/ultralytics/yolov5/issues/5395", "\n", "@", "Timeout", "(", "30", ")", "# known issue https://github.com/ultralytics/yolov5/issues/5611", "\n", "def", "plot_labels", "(", "labels", ",", "names", "=", "(", ")", ",", "save_dir", "=", "Path", "(", "''", ")", ")", ":", "\n", "# plot dataset labels", "\n", "    ", "LOGGER", ".", "info", "(", "f\"Plotting labels to {save_dir / 'labels.jpg'}... \"", ")", "\n", "c", ",", "b", "=", "labels", "[", ":", ",", "0", "]", ",", "labels", "[", ":", ",", "1", ":", "]", ".", "transpose", "(", ")", "# classes, boxes", "\n", "nc", "=", "int", "(", "c", ".", "max", "(", ")", "+", "1", ")", "# number of classes", "\n", "x", "=", "pd", ".", "DataFrame", "(", "b", ".", "transpose", "(", ")", ",", "columns", "=", "[", "'x'", ",", "'y'", ",", "'width'", ",", "'height'", "]", ")", "\n", "\n", "# seaborn correlogram", "\n", "sn", ".", "pairplot", "(", "x", ",", "corner", "=", "True", ",", "diag_kind", "=", "'auto'", ",", "kind", "=", "'hist'", ",", "diag_kws", "=", "dict", "(", "bins", "=", "50", ")", ",", "plot_kws", "=", "dict", "(", "pmax", "=", "0.9", ")", ")", "\n", "plt", ".", "savefig", "(", "save_dir", "/", "'labels_correlogram.jpg'", ",", "dpi", "=", "200", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# matplotlib labels", "\n", "matplotlib", ".", "use", "(", "'svg'", ")", "# faster", "\n", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "2", ",", "figsize", "=", "(", "8", ",", "8", ")", ",", "tight_layout", "=", "True", ")", "[", "1", "]", ".", "ravel", "(", ")", "\n", "y", "=", "ax", "[", "0", "]", ".", "hist", "(", "c", ",", "bins", "=", "np", ".", "linspace", "(", "0", ",", "nc", ",", "nc", "+", "1", ")", "-", "0.5", ",", "rwidth", "=", "0.8", ")", "\n", "# [y[2].patches[i].set_color([x / 255 for x in colors(i)]) for i in range(nc)]  # update colors bug #3195", "\n", "ax", "[", "0", "]", ".", "set_ylabel", "(", "'instances'", ")", "\n", "if", "0", "<", "len", "(", "names", ")", "<", "30", ":", "\n", "        ", "ax", "[", "0", "]", ".", "set_xticks", "(", "range", "(", "len", "(", "names", ")", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_xticklabels", "(", "names", ",", "rotation", "=", "90", ",", "fontsize", "=", "10", ")", "\n", "", "else", ":", "\n", "        ", "ax", "[", "0", "]", ".", "set_xlabel", "(", "'classes'", ")", "\n", "", "sn", ".", "histplot", "(", "x", ",", "x", "=", "'x'", ",", "y", "=", "'y'", ",", "ax", "=", "ax", "[", "2", "]", ",", "bins", "=", "50", ",", "pmax", "=", "0.9", ")", "\n", "sn", ".", "histplot", "(", "x", ",", "x", "=", "'width'", ",", "y", "=", "'height'", ",", "ax", "=", "ax", "[", "3", "]", ",", "bins", "=", "50", ",", "pmax", "=", "0.9", ")", "\n", "\n", "# rectangles", "\n", "labels", "[", ":", ",", "1", ":", "3", "]", "=", "0.5", "# center", "\n", "labels", "[", ":", ",", "1", ":", "]", "=", "xywh2xyxy", "(", "labels", "[", ":", ",", "1", ":", "]", ")", "*", "2000", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "ones", "(", "(", "2000", ",", "2000", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", ")", "\n", "for", "cls", ",", "*", "box", "in", "labels", "[", ":", "1000", "]", ":", "\n", "        ", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "box", ",", "width", "=", "1", ",", "outline", "=", "colors", "(", "cls", ")", ")", "# plot", "\n", "", "ax", "[", "1", "]", ".", "imshow", "(", "img", ")", "\n", "ax", "[", "1", "]", ".", "axis", "(", "'off'", ")", "\n", "\n", "for", "a", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", ":", "\n", "        ", "for", "s", "in", "[", "'top'", ",", "'right'", ",", "'left'", ",", "'bottom'", "]", ":", "\n", "            ", "ax", "[", "a", "]", ".", "spines", "[", "s", "]", ".", "set_visible", "(", "False", ")", "\n", "\n", "", "", "plt", ".", "savefig", "(", "save_dir", "/", "'labels.jpg'", ",", "dpi", "=", "200", ")", "\n", "matplotlib", ".", "use", "(", "'Agg'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_evolve": [[373, 397], ["pathlib.Path", "pandas.read_csv", "utils.metrics.fitness", "numpy.argmax", "matplotlib.figure", "matplotlib.rc", "matplotlib.rc", "enumerate", "pathlib.Path.with_suffix", "matplotlib.savefig", "matplotlib.close", "print", "x.strip", "matplotlib.subplot", "matplotlib.scatter", "matplotlib.plot", "matplotlib.title", "print", "evolve_csv.with_suffix.max", "matplotlib.yticks", "plots.hist2d"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.fitness", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.hist2d"], ["", "def", "plot_evolve", "(", "evolve_csv", "=", "'path/to/evolve.csv'", ")", ":", "# from utils.plots import *; plot_evolve()", "\n", "# Plot evolve.csv hyp evolution results", "\n", "    ", "evolve_csv", "=", "Path", "(", "evolve_csv", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "evolve_csv", ")", "\n", "keys", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "data", ".", "columns", "]", "\n", "x", "=", "data", ".", "values", "\n", "f", "=", "fitness", "(", "x", ")", "\n", "j", "=", "np", ".", "argmax", "(", "f", ")", "# max fitness index", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "12", ")", ",", "tight_layout", "=", "True", ")", "\n", "matplotlib", ".", "rc", "(", "'font'", ",", "**", "{", "'size'", ":", "8", "}", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "keys", "[", "7", ":", "]", ")", ":", "\n", "        ", "v", "=", "x", "[", ":", ",", "7", "+", "i", "]", "\n", "mu", "=", "v", "[", "j", "]", "# best single result", "\n", "plt", ".", "subplot", "(", "6", ",", "5", ",", "i", "+", "1", ")", "\n", "plt", ".", "scatter", "(", "v", ",", "f", ",", "c", "=", "hist2d", "(", "v", ",", "f", ",", "20", ")", ",", "cmap", "=", "'viridis'", ",", "alpha", "=", ".8", ",", "edgecolors", "=", "'none'", ")", "\n", "plt", ".", "plot", "(", "mu", ",", "f", ".", "max", "(", ")", ",", "'k+'", ",", "markersize", "=", "15", ")", "\n", "plt", ".", "title", "(", "f'{k} = {mu:.3g}'", ",", "fontdict", "=", "{", "'size'", ":", "9", "}", ")", "# limit to 40 characters", "\n", "if", "i", "%", "5", "!=", "0", ":", "\n", "            ", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "", "print", "(", "f'{k:>15}: {mu:.3g}'", ")", "\n", "", "f", "=", "evolve_csv", ".", "with_suffix", "(", "'.png'", ")", "# filename", "\n", "plt", ".", "savefig", "(", "f", ",", "dpi", "=", "200", ")", "\n", "plt", ".", "close", "(", ")", "\n", "print", "(", "f'Saved {f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_results": [[399, 423], ["matplotlib.subplots", "ax.ravel.ravel", "list", "len", "enumerate", "ax[].legend", "fig.savefig", "matplotlib.close", "pathlib.Path", "save_dir.glob", "pathlib.Path", "save_dir.resolve", "pandas.read_csv", "enumerate", "x.strip", "ax[].plot", "ax[].set_title", "print"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "def", "plot_results", "(", "file", "=", "'path/to/results.csv'", ",", "dir", "=", "''", ")", ":", "\n", "# Plot training results.csv. Usage: from utils.plots import *; plot_results('path/to/results.csv')", "\n", "    ", "save_dir", "=", "Path", "(", "file", ")", ".", "parent", "if", "file", "else", "Path", "(", "dir", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "5", ",", "figsize", "=", "(", "12", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "ax", "=", "ax", ".", "ravel", "(", ")", "\n", "files", "=", "list", "(", "save_dir", ".", "glob", "(", "'results*.csv'", ")", ")", "\n", "assert", "len", "(", "files", ")", ",", "f'No results.csv files found in {save_dir.resolve()}, nothing to plot.'", "\n", "for", "fi", ",", "f", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "pd", ".", "read_csv", "(", "f", ")", "\n", "s", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "data", ".", "columns", "]", "\n", "x", "=", "data", ".", "values", "[", ":", ",", "0", "]", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "8", ",", "9", ",", "10", ",", "6", ",", "7", "]", ")", ":", "\n", "                ", "y", "=", "data", ".", "values", "[", ":", ",", "j", "]", "\n", "# y[y == 0] = np.nan  # don't show zero values", "\n", "ax", "[", "i", "]", ".", "plot", "(", "x", ",", "y", ",", "marker", "=", "'.'", ",", "label", "=", "f", ".", "stem", ",", "linewidth", "=", "2", ",", "markersize", "=", "8", ")", "\n", "ax", "[", "i", "]", ".", "set_title", "(", "s", "[", "j", "]", ",", "fontsize", "=", "12", ")", "\n", "# if j in [8, 9, 10]:  # share train and val loss y axes", "\n", "#     ax[i].get_shared_y_axes().join(ax[i], ax[i - 5])", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f'Warning: Plotting error for {f}: {e}'", ")", "\n", "", "", "ax", "[", "1", "]", ".", "legend", "(", ")", "\n", "fig", ".", "savefig", "(", "save_dir", "/", "'results.png'", ",", "dpi", "=", "200", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.profile_idetection": [[425, 454], ["[].ravel", "list", "enumerate", "ax[].legend", "matplotlib.savefig", "pathlib.Path().glob", "numpy.arange", "enumerate", "pathlib.Path", "matplotlib.subplots", "pathlib.Path", "results[].min", "print", "numpy.loadtxt", "min", "len", "a.plot", "a.set_title", "a.set_xlabel", "a.remove", "len", "f.stem.replace", "a.spines[].set_visible"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot"], ["", "def", "profile_idetection", "(", "start", "=", "0", ",", "stop", "=", "0", ",", "labels", "=", "(", ")", ",", "save_dir", "=", "''", ")", ":", "\n", "# Plot iDetection '*.txt' per-image logs. from utils.plots import *; profile_idetection()", "\n", "    ", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "4", ",", "figsize", "=", "(", "12", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "[", "1", "]", ".", "ravel", "(", ")", "\n", "s", "=", "[", "'Images'", ",", "'Free Storage (GB)'", ",", "'RAM Usage (GB)'", ",", "'Battery'", ",", "'dt_raw (ms)'", ",", "'dt_smooth (ms)'", ",", "'real-world FPS'", "]", "\n", "files", "=", "list", "(", "Path", "(", "save_dir", ")", ".", "glob", "(", "'frames*.txt'", ")", ")", "\n", "for", "fi", ",", "f", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "results", "=", "np", ".", "loadtxt", "(", "f", ",", "ndmin", "=", "2", ")", ".", "T", "[", ":", ",", "90", ":", "-", "30", "]", "# clip first and last rows", "\n", "n", "=", "results", ".", "shape", "[", "1", "]", "# number of rows", "\n", "x", "=", "np", ".", "arange", "(", "start", ",", "min", "(", "stop", ",", "n", ")", "if", "stop", "else", "n", ")", "\n", "results", "=", "results", "[", ":", ",", "x", "]", "\n", "t", "=", "(", "results", "[", "0", "]", "-", "results", "[", "0", "]", ".", "min", "(", ")", ")", "# set t0=0s", "\n", "results", "[", "0", "]", "=", "x", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "ax", ")", ":", "\n", "                ", "if", "i", "<", "len", "(", "results", ")", ":", "\n", "                    ", "label", "=", "labels", "[", "fi", "]", "if", "len", "(", "labels", ")", "else", "f", ".", "stem", ".", "replace", "(", "'frames_'", ",", "''", ")", "\n", "a", ".", "plot", "(", "t", ",", "results", "[", "i", "]", ",", "marker", "=", "'.'", ",", "label", "=", "label", ",", "linewidth", "=", "1", ",", "markersize", "=", "5", ")", "\n", "a", ".", "set_title", "(", "s", "[", "i", "]", ")", "\n", "a", ".", "set_xlabel", "(", "'time (s)'", ")", "\n", "# if fi == len(files) - 1:", "\n", "#     a.set_ylim(bottom=0)", "\n", "for", "side", "in", "[", "'top'", ",", "'right'", "]", ":", "\n", "                        ", "a", ".", "spines", "[", "side", "]", ".", "set_visible", "(", "False", ")", "\n", "", "", "else", ":", "\n", "                    ", "a", ".", "remove", "(", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f'Warning: Plotting error for {f}; {e}'", ")", "\n", "", "", "ax", "[", "1", "]", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "Path", "(", "save_dir", ")", "/", "'idetection_profile.png'", ",", "dpi", "=", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.save_one_box": [[456, 470], ["torch.tensor().view", "utils.general.xyxy2xywh", "utils.general.xywh2xyxy().long", "utils.general.clip_coords", "[].unsqueeze", "file.parent.mkdir", "cv2.imwrite", "torch.tensor", "utils.general.xywh2xyxy", "str", "int", "int", "int", "int", "utils.general.increment_path().with_suffix", "b[].max", "utils.general.increment_path"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.clip_coords", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.increment_path"], ["", "def", "save_one_box", "(", "xyxy", ",", "im", ",", "file", "=", "'image.jpg'", ",", "gain", "=", "1.02", ",", "pad", "=", "10", ",", "square", "=", "False", ",", "BGR", "=", "False", ",", "save", "=", "True", ")", ":", "\n", "# Save image crop as {file} with crop size multiple {gain} and {pad} pixels. Save and/or return crop", "\n", "    ", "xyxy", "=", "torch", ".", "tensor", "(", "xyxy", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "b", "=", "xyxy2xywh", "(", "xyxy", ")", "# boxes", "\n", "if", "square", ":", "\n", "        ", "b", "[", ":", ",", "2", ":", "]", "=", "b", "[", ":", ",", "2", ":", "]", ".", "max", "(", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "# attempt rectangle to square", "\n", "", "b", "[", ":", ",", "2", ":", "]", "=", "b", "[", ":", ",", "2", ":", "]", "*", "gain", "+", "pad", "# box wh * gain + pad", "\n", "xyxy", "=", "xywh2xyxy", "(", "b", ")", ".", "long", "(", ")", "\n", "clip_coords", "(", "xyxy", ",", "im", ".", "shape", ")", "\n", "crop", "=", "im", "[", "int", "(", "xyxy", "[", "0", ",", "1", "]", ")", ":", "int", "(", "xyxy", "[", "0", ",", "3", "]", ")", ",", "int", "(", "xyxy", "[", "0", ",", "0", "]", ")", ":", "int", "(", "xyxy", "[", "0", ",", "2", "]", ")", ",", ":", ":", "(", "1", "if", "BGR", "else", "-", "1", ")", "]", "\n", "if", "save", ":", "\n", "        ", "file", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make directory", "\n", "cv2", ".", "imwrite", "(", "str", "(", "increment_path", "(", "file", ")", ".", "with_suffix", "(", "'.jpg'", ")", ")", ",", "crop", ")", "\n", "", "return", "crop", "\n", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.gsutil_getsize": [[18, 22], ["subprocess.check_output().decode", "len", "eval", "subprocess.check_output", "subprocess.check_output().decode.split"], "function", ["None"], ["def", "gsutil_getsize", "(", "url", "=", "''", ")", ":", "\n", "# gs://bucket/file size https://cloud.google.com/storage/docs/gsutil/commands/du", "\n", "    ", "s", "=", "subprocess", ".", "check_output", "(", "f'gsutil du {url}'", ",", "shell", "=", "True", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "return", "eval", "(", "s", ".", "split", "(", "' '", ")", "[", "0", "]", ")", "if", "len", "(", "s", ")", "else", "0", "# bytes", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.safe_download": [[24, 41], ["pathlib.Path", "print", "torch.hub.download_url_to_file", "print", "str", "pathlib.Path.exists", "pathlib.Path.unlink", "print", "os.system", "pathlib.Path.unlink", "print", "pathlib.Path.exists", "pathlib.Path.stat", "pathlib.Path.stat"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "def", "safe_download", "(", "file", ",", "url", ",", "url2", "=", "None", ",", "min_bytes", "=", "1E0", ",", "error_msg", "=", "''", ")", ":", "\n", "# Attempts to download file from url or url2, checks and removes incomplete downloads < min_bytes", "\n", "    ", "file", "=", "Path", "(", "file", ")", "\n", "assert_msg", "=", "f\"Downloaded file '{file}' does not exist or size is < min_bytes={min_bytes}\"", "\n", "try", ":", "# url1", "\n", "        ", "print", "(", "f'Downloading {url} to {file}...'", ")", "\n", "torch", ".", "hub", ".", "download_url_to_file", "(", "url", ",", "str", "(", "file", ")", ")", "\n", "assert", "file", ".", "exists", "(", ")", "and", "file", ".", "stat", "(", ")", ".", "st_size", ">", "min_bytes", ",", "assert_msg", "# check", "\n", "", "except", "Exception", "as", "e", ":", "# url2", "\n", "        ", "file", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove partial downloads", "\n", "print", "(", "f'ERROR: {e}\\nRe-attempting {url2 or url} to {file}...'", ")", "\n", "os", ".", "system", "(", "f\"curl -L '{url2 or url}' -o '{file}' --retry 3 -C -\"", ")", "# curl download, retry and resume on fail", "\n", "", "finally", ":", "\n", "        ", "if", "not", "file", ".", "exists", "(", ")", "or", "file", ".", "stat", "(", ")", ".", "st_size", "<", "min_bytes", ":", "# check", "\n", "            ", "file", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove partial downloads", "\n", "print", "(", "f\"ERROR: {assert_msg}\\n{error_msg}\"", ")", "\n", "", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.attempt_download": [[43, 77], ["pathlib.Path", "str", "str().strip().replace", "pathlib.Path.exists", "str().startswith", "pathlib.Path.parent.mkdir", "pathlib.Path", "str().replace", "downloads.safe_download", "requests.get().json", "downloads.safe_download", "str().strip", "urllib.parse.unquote", "str", "name.split", "str", "str", "requests.get", "str", "subprocess.check_output().decode().split", "subprocess.check_output().decode", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.safe_download", "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.safe_download"], ["", "", "def", "attempt_download", "(", "file", ",", "repo", "=", "'ultralytics/yolov3'", ")", ":", "# from utils.downloads import *; attempt_download()", "\n", "# Attempt file download if does not exist", "\n", "    ", "file", "=", "Path", "(", "str", "(", "file", ")", ".", "strip", "(", ")", ".", "replace", "(", "\"'\"", ",", "''", ")", ")", "\n", "\n", "if", "not", "file", ".", "exists", "(", ")", ":", "\n", "# URL specified", "\n", "        ", "name", "=", "Path", "(", "urllib", ".", "parse", ".", "unquote", "(", "str", "(", "file", ")", ")", ")", ".", "name", "# decode '%2F' to '/' etc.", "\n", "if", "str", "(", "file", ")", ".", "startswith", "(", "(", "'http:/'", ",", "'https:/'", ")", ")", ":", "# download", "\n", "            ", "url", "=", "str", "(", "file", ")", ".", "replace", "(", "':/'", ",", "'://'", ")", "# Pathlib turns :// -> :/", "\n", "name", "=", "name", ".", "split", "(", "'?'", ")", "[", "0", "]", "# parse authentication https://url.com/file.txt?auth...", "\n", "safe_download", "(", "file", "=", "name", ",", "url", "=", "url", ",", "min_bytes", "=", "1E5", ")", "\n", "return", "name", "\n", "\n", "# GitHub assets", "\n", "", "file", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make parent dir (if required)", "\n", "try", ":", "\n", "            ", "response", "=", "requests", ".", "get", "(", "f'https://api.github.com/repos/{repo}/releases/latest'", ")", ".", "json", "(", ")", "# github api", "\n", "assets", "=", "[", "x", "[", "'name'", "]", "for", "x", "in", "response", "[", "'assets'", "]", "]", "# release assets, i.e. ['yolov3.pt'...]", "\n", "tag", "=", "response", "[", "'tag_name'", "]", "# i.e. 'v1.0'", "\n", "", "except", ":", "# fallback plan", "\n", "            ", "assets", "=", "[", "'yolov3.pt'", ",", "'yolov3-spp.pt'", ",", "'yolov3-tiny.pt'", "]", "\n", "try", ":", "\n", "                ", "tag", "=", "subprocess", ".", "check_output", "(", "'git tag'", ",", "shell", "=", "True", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", ".", "decode", "(", ")", ".", "split", "(", ")", "[", "-", "1", "]", "\n", "", "except", ":", "\n", "                ", "tag", "=", "'v9.5.0'", "# current release", "\n", "\n", "", "", "if", "name", "in", "assets", ":", "\n", "            ", "safe_download", "(", "file", ",", "\n", "url", "=", "f'https://github.com/{repo}/releases/download/{tag}/{name}'", ",", "\n", "# url2=f'https://storage.googleapis.com/{repo}/ckpt/{name}',  # backup url (optional)", "\n", "min_bytes", "=", "1E5", ",", "\n", "error_msg", "=", "f'{file} missing, try downloading from https://github.com/{repo}/releases/'", ")", "\n", "\n", "", "", "return", "str", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.gdrive_download": [[79, 112], ["time.time", "pathlib.Path", "pathlib.Path", "print", "pathlib.Path.unlink", "pathlib.Path.unlink", "os.system", "os.path.exists", "os.system", "pathlib.Path.unlink", "print", "pathlib.Path.unlink", "print", "print", "zipfile.ZipFile().extractall", "pathlib.Path.unlink", "platform.system", "downloads.get_token", "zipfile.ZipFile", "time.time"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.get_token"], ["", "def", "gdrive_download", "(", "id", "=", "'16TiPfZj7htmTyhntwcZyEEAejOUxuT6m'", ",", "file", "=", "'tmp.zip'", ")", ":", "\n", "# Downloads a file from Google Drive. from yolov3.utils.downloads import *; gdrive_download()", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "file", "=", "Path", "(", "file", ")", "\n", "cookie", "=", "Path", "(", "'cookie'", ")", "# gdrive cookie", "\n", "print", "(", "f'Downloading https://drive.google.com/uc?export=download&id={id} as {file}... '", ",", "end", "=", "''", ")", "\n", "file", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove existing file", "\n", "cookie", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove existing cookie", "\n", "\n", "# Attempt file download", "\n", "out", "=", "\"NUL\"", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "else", "\"/dev/null\"", "\n", "os", ".", "system", "(", "f'curl -c ./cookie -s -L \"drive.google.com/uc?export=download&id={id}\" > {out}'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "'cookie'", ")", ":", "# large file", "\n", "        ", "s", "=", "f'curl -Lb ./cookie \"drive.google.com/uc?export=download&confirm={get_token()}&id={id}\" -o {file}'", "\n", "", "else", ":", "# small file", "\n", "        ", "s", "=", "f'curl -s -L -o {file} \"drive.google.com/uc?export=download&id={id}\"'", "\n", "", "r", "=", "os", ".", "system", "(", "s", ")", "# execute, capture return", "\n", "cookie", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove existing cookie", "\n", "\n", "# Error check", "\n", "if", "r", "!=", "0", ":", "\n", "        ", "file", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove partial", "\n", "print", "(", "'Download error '", ")", "# raise Exception('Download error')", "\n", "return", "r", "\n", "\n", "# Unzip if archive", "\n", "", "if", "file", ".", "suffix", "==", "'.zip'", ":", "\n", "        ", "print", "(", "'unzipping... '", ",", "end", "=", "''", ")", "\n", "ZipFile", "(", "file", ")", ".", "extractall", "(", "path", "=", "file", ".", "parent", ")", "# unzip", "\n", "file", ".", "unlink", "(", ")", "# remove zip", "\n", "\n", "", "print", "(", "f'Done ({time.time() - t:.1f}s)'", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.get_token": [[114, 120], ["open", "line.split"], "function", ["None"], ["", "def", "get_token", "(", "cookie", "=", "\"./cookie\"", ")", ":", "\n", "    ", "with", "open", "(", "cookie", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "\"download\"", "in", "line", ":", "\n", "                ", "return", "line", ".", "split", "(", ")", "[", "-", "1", "]", "\n", "", "", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.__init__": [[116, 121], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "conf", "=", "0.25", ",", "iou_thres", "=", "0.45", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "np", ".", "zeros", "(", "(", "nc", "+", "1", ",", "nc", "+", "1", ")", ")", "\n", "self", ".", "nc", "=", "nc", "# number of classes", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "iou_thres", "=", "iou_thres", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.process_batch": [[122, 161], ["labels[].int", "detections[].int", "metrics.box_iou", "torch.where", "numpy.zeros.transpose().astype", "enumerate", "torch.cat().cpu().numpy", "numpy.zeros", "enumerate", "numpy.zeros.transpose", "torch.cat().cpu", "sum", "any", "torch.cat", "matches[].argsort", "numpy.unique", "matches[].argsort", "numpy.unique", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.box_iou"], ["", "def", "process_batch", "(", "self", ",", "detections", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Return intersection-over-union (Jaccard index) of boxes.\n        Both sets of boxes are expected to be in (x1, y1, x2, y2) format.\n        Arguments:\n            detections (Array[N, 6]), x1, y1, x2, y2, conf, class\n            labels (Array[M, 5]), class, x1, y1, x2, y2\n        Returns:\n            None, updates confusion matrix accordingly\n        \"\"\"", "\n", "detections", "=", "detections", "[", "detections", "[", ":", ",", "4", "]", ">", "self", ".", "conf", "]", "\n", "gt_classes", "=", "labels", "[", ":", ",", "0", "]", ".", "int", "(", ")", "\n", "detection_classes", "=", "detections", "[", ":", ",", "5", "]", ".", "int", "(", ")", "\n", "iou", "=", "box_iou", "(", "labels", "[", ":", ",", "1", ":", "]", ",", "detections", "[", ":", ",", ":", "4", "]", ")", "\n", "\n", "x", "=", "torch", ".", "where", "(", "iou", ">", "self", ".", "iou_thres", ")", "\n", "if", "x", "[", "0", "]", ".", "shape", "[", "0", "]", ":", "\n", "            ", "matches", "=", "torch", ".", "cat", "(", "(", "torch", ".", "stack", "(", "x", ",", "1", ")", ",", "iou", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", "[", ":", ",", "None", "]", ")", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "x", "[", "0", "]", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                ", "matches", "=", "matches", "[", "matches", "[", ":", ",", "2", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "matches", "=", "matches", "[", "np", ".", "unique", "(", "matches", "[", ":", ",", "1", "]", ",", "return_index", "=", "True", ")", "[", "1", "]", "]", "\n", "matches", "=", "matches", "[", "matches", "[", ":", ",", "2", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "matches", "=", "matches", "[", "np", ".", "unique", "(", "matches", "[", ":", ",", "0", "]", ",", "return_index", "=", "True", ")", "[", "1", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "matches", "=", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", "\n", "\n", "", "n", "=", "matches", ".", "shape", "[", "0", "]", ">", "0", "\n", "m0", ",", "m1", ",", "_", "=", "matches", ".", "transpose", "(", ")", ".", "astype", "(", "np", ".", "int16", ")", "\n", "for", "i", ",", "gc", "in", "enumerate", "(", "gt_classes", ")", ":", "\n", "            ", "j", "=", "m0", "==", "i", "\n", "if", "n", "and", "sum", "(", "j", ")", "==", "1", ":", "\n", "                ", "self", ".", "matrix", "[", "detection_classes", "[", "m1", "[", "j", "]", "]", ",", "gc", "]", "+=", "1", "# correct", "\n", "", "else", ":", "\n", "                ", "self", ".", "matrix", "[", "self", ".", "nc", ",", "gc", "]", "+=", "1", "# background FP", "\n", "\n", "", "", "if", "n", ":", "\n", "            ", "for", "i", ",", "dc", "in", "enumerate", "(", "detection_classes", ")", ":", "\n", "                ", "if", "not", "any", "(", "m1", "==", "i", ")", ":", "\n", "                    ", "self", ".", "matrix", "[", "dc", ",", "self", ".", "nc", "]", "+=", "1", "# background FN", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.matrix": [[162, 164], ["None"], "methods", ["None"], ["", "", "", "", "def", "matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot": [[165, 186], ["matplotlib.figure", "sn.set", "matplotlib.figure.axes[].set_xlabel", "matplotlib.figure.axes[].set_ylabel", "matplotlib.figure.savefig", "matplotlib.close", "warnings.catch_warnings", "warnings.simplefilter", "sn.heatmap().set_facecolor", "metrics.ConfusionMatrix.print"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "def", "plot", "(", "self", ",", "normalize", "=", "True", ",", "save_dir", "=", "''", ",", "names", "=", "(", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "seaborn", "as", "sn", "\n", "\n", "array", "=", "self", ".", "matrix", "/", "(", "(", "self", ".", "matrix", ".", "sum", "(", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "+", "1E-6", ")", "if", "normalize", "else", "1", ")", "# normalize columns", "\n", "array", "[", "array", "<", "0.005", "]", "=", "np", ".", "nan", "# don't annotate (would appear as 0.00)", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "9", ")", ",", "tight_layout", "=", "True", ")", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.0", "if", "self", ".", "nc", "<", "50", "else", "0.8", ")", "# for label size", "\n", "labels", "=", "(", "0", "<", "len", "(", "names", ")", "<", "99", ")", "and", "len", "(", "names", ")", "==", "self", ".", "nc", "# apply names to ticklabels", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "'ignore'", ")", "# suppress empty matrix RuntimeWarning: All-NaN slice encountered", "\n", "sn", ".", "heatmap", "(", "array", ",", "annot", "=", "self", ".", "nc", "<", "30", ",", "annot_kws", "=", "{", "\"size\"", ":", "8", "}", ",", "cmap", "=", "'Blues'", ",", "fmt", "=", "'.2f'", ",", "square", "=", "True", ",", "\n", "xticklabels", "=", "names", "+", "[", "'background FP'", "]", "if", "labels", "else", "\"auto\"", ",", "\n", "yticklabels", "=", "names", "+", "[", "'background FN'", "]", "if", "labels", "else", "\"auto\"", ")", ".", "set_facecolor", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "", "fig", ".", "axes", "[", "0", "]", ".", "set_xlabel", "(", "'True'", ")", "\n", "fig", ".", "axes", "[", "0", "]", ".", "set_ylabel", "(", "'Predicted'", ")", "\n", "fig", ".", "savefig", "(", "Path", "(", "save_dir", ")", "/", "'confusion_matrix.png'", ",", "dpi", "=", "250", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f'WARNING: ConfusionMatrix plot failure: {e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.print": [[187, 190], ["range", "metrics.ConfusionMatrix.print"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "", "def", "print", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "nc", "+", "1", ")", ":", "\n", "            ", "print", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "self", ".", "matrix", "[", "i", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.fitness": [[15, 19], ["None"], "function", ["None"], ["def", "fitness", "(", "x", ")", ":", "\n", "# Model fitness as a weighted combination of metrics", "\n", "    ", "w", "=", "[", "0.0", ",", "0.0", ",", "0.1", ",", "0.9", "]", "# weights for [P, R, mAP@0.5, mAP@0.5:0.95]", "\n", "return", "(", "x", "[", ":", ",", ":", "4", "]", "*", "w", ")", ".", "sum", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ap_per_class": [[21, 84], ["numpy.argsort", "numpy.unique", "enumerate", "f1.mean().argmax", "numpy.linspace", "numpy.zeros", "numpy.zeros", "numpy.zeros", "f1.mean().argmax.sum", "metrics.plot_pr_curve", "metrics.plot_mc_curve", "metrics.plot_mc_curve", "metrics.plot_mc_curve", "np.unique.astype", "tp[].cumsum", "numpy.interp", "numpy.interp", "range", "names.items", "enumerate", "f1.mean", "metrics.compute_ap", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "py.append", "numpy.interp"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.plot_pr_curve", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.plot_mc_curve", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.plot_mc_curve", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.plot_mc_curve", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.compute_ap"], ["", "def", "ap_per_class", "(", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", ",", "plot", "=", "False", ",", "save_dir", "=", "'.'", ",", "names", "=", "(", ")", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Source: https://github.com/rafaelpadilla/Object-Detection-Metrics.\n    # Arguments\n        tp:  True positives (nparray, nx1 or nx10).\n        conf:  Objectness value from 0-1 (nparray).\n        pred_cls:  Predicted object classes (nparray).\n        target_cls:  True object classes (nparray).\n        plot:  Plot precision-recall curve at mAP@0.5\n        save_dir:  Plot save directory\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "\n", "# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n", "unique_classes", "=", "np", ".", "unique", "(", "target_cls", ")", "\n", "nc", "=", "unique_classes", ".", "shape", "[", "0", "]", "# number of classes, number of detections", "\n", "\n", "# Create Precision-Recall curve and compute AP for each class", "\n", "px", ",", "py", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "1000", ")", ",", "[", "]", "# for plotting", "\n", "ap", ",", "p", ",", "r", "=", "np", ".", "zeros", "(", "(", "nc", ",", "tp", ".", "shape", "[", "1", "]", ")", ")", ",", "np", ".", "zeros", "(", "(", "nc", ",", "1000", ")", ")", ",", "np", ".", "zeros", "(", "(", "nc", ",", "1000", ")", ")", "\n", "for", "ci", ",", "c", "in", "enumerate", "(", "unique_classes", ")", ":", "\n", "        ", "i", "=", "pred_cls", "==", "c", "\n", "n_l", "=", "(", "target_cls", "==", "c", ")", ".", "sum", "(", ")", "# number of labels", "\n", "n_p", "=", "i", ".", "sum", "(", ")", "# number of predictions", "\n", "\n", "if", "n_p", "==", "0", "or", "n_l", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "# Accumulate FPs and TPs", "\n", "            ", "fpc", "=", "(", "1", "-", "tp", "[", "i", "]", ")", ".", "cumsum", "(", "0", ")", "\n", "tpc", "=", "tp", "[", "i", "]", ".", "cumsum", "(", "0", ")", "\n", "\n", "# Recall", "\n", "recall", "=", "tpc", "/", "(", "n_l", "+", "1e-16", ")", "# recall curve", "\n", "r", "[", "ci", "]", "=", "np", ".", "interp", "(", "-", "px", ",", "-", "conf", "[", "i", "]", ",", "recall", "[", ":", ",", "0", "]", ",", "left", "=", "0", ")", "# negative x, xp because xp decreases", "\n", "\n", "# Precision", "\n", "precision", "=", "tpc", "/", "(", "tpc", "+", "fpc", ")", "# precision curve", "\n", "p", "[", "ci", "]", "=", "np", ".", "interp", "(", "-", "px", ",", "-", "conf", "[", "i", "]", ",", "precision", "[", ":", ",", "0", "]", ",", "left", "=", "1", ")", "# p at pr_score", "\n", "\n", "# AP from recall-precision curve", "\n", "for", "j", "in", "range", "(", "tp", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "ap", "[", "ci", ",", "j", "]", ",", "mpre", ",", "mrec", "=", "compute_ap", "(", "recall", "[", ":", ",", "j", "]", ",", "precision", "[", ":", ",", "j", "]", ")", "\n", "if", "plot", "and", "j", "==", "0", ":", "\n", "                    ", "py", ".", "append", "(", "np", ".", "interp", "(", "px", ",", "mrec", ",", "mpre", ")", ")", "# precision at mAP@0.5", "\n", "\n", "# Compute F1 (harmonic mean of precision and recall)", "\n", "", "", "", "", "f1", "=", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", "+", "1e-16", ")", "\n", "names", "=", "[", "v", "for", "k", ",", "v", "in", "names", ".", "items", "(", ")", "if", "k", "in", "unique_classes", "]", "# list: only classes that have data", "\n", "names", "=", "{", "i", ":", "v", "for", "i", ",", "v", "in", "enumerate", "(", "names", ")", "}", "# to dict", "\n", "if", "plot", ":", "\n", "        ", "plot_pr_curve", "(", "px", ",", "py", ",", "ap", ",", "Path", "(", "save_dir", ")", "/", "'PR_curve.png'", ",", "names", ")", "\n", "plot_mc_curve", "(", "px", ",", "f1", ",", "Path", "(", "save_dir", ")", "/", "'F1_curve.png'", ",", "names", ",", "ylabel", "=", "'F1'", ")", "\n", "plot_mc_curve", "(", "px", ",", "p", ",", "Path", "(", "save_dir", ")", "/", "'P_curve.png'", ",", "names", ",", "ylabel", "=", "'Precision'", ")", "\n", "plot_mc_curve", "(", "px", ",", "r", ",", "Path", "(", "save_dir", ")", "/", "'R_curve.png'", ",", "names", ",", "ylabel", "=", "'Recall'", ")", "\n", "\n", "", "i", "=", "f1", ".", "mean", "(", "0", ")", ".", "argmax", "(", ")", "# max F1 index", "\n", "return", "p", "[", ":", ",", "i", "]", ",", "r", "[", ":", ",", "i", "]", ",", "ap", ",", "f1", "[", ":", ",", "i", "]", ",", "unique_classes", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.compute_ap": [[86, 112], ["numpy.concatenate", "numpy.concatenate", "numpy.flip", "numpy.maximum.accumulate", "numpy.linspace", "numpy.trapz", "numpy.sum", "numpy.flip", "numpy.interp", "numpy.where"], "function", ["None"], ["", "def", "compute_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves\n    # Arguments\n        recall:    The recall curve (list)\n        precision: The precision curve (list)\n    # Returns\n        Average precision, precision curve, recall curve\n    \"\"\"", "\n", "\n", "# Append sentinel values to beginning and end", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "recall", ",", "[", "1.0", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "1.0", "]", ",", "precision", ",", "[", "0.0", "]", ")", ")", "\n", "\n", "# Compute the precision envelope", "\n", "mpre", "=", "np", ".", "flip", "(", "np", ".", "maximum", ".", "accumulate", "(", "np", ".", "flip", "(", "mpre", ")", ")", ")", "\n", "\n", "# Integrate area under curve", "\n", "method", "=", "'interp'", "# methods: 'continuous', 'interp'", "\n", "if", "method", "==", "'interp'", ":", "\n", "        ", "x", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "101", ")", "# 101-point interp (COCO)", "\n", "ap", "=", "np", ".", "trapz", "(", "np", ".", "interp", "(", "x", ",", "mrec", ",", "mpre", ")", ",", "x", ")", "# integrate", "\n", "", "else", ":", "# 'continuous'", "\n", "        ", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "# points where x axis (recall) changes", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "# area under curve", "\n", "\n", "", "return", "ap", ",", "mpre", ",", "mrec", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.bbox_iou": [[192, 264], ["torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.min", "torch.max", "torch.min", "torch.pow", "torch.pow", "torch.min", "torch.max", "torch.min", "torch.max", "torch.pow", "torch.pow", "torch.pow", "torch.no_grad", "torch.atan", "torch.atan"], "function", ["None"], ["", "", "", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ",", "GIoU", "=", "False", ",", "DIoU", "=", "False", ",", "CIoU", "=", "False", ",", "SCA", "=", "False", ",", "alpha", "=", "1.0", ",", "eps", "=", "1e-7", ")", ":", "\n", "# Returns the IoU of box1 to box2. box1 is 4, box2 is nx4", "\n", "    ", "box2", "=", "box2", ".", "T", "\n", "\n", "# Get the coordinates of bounding boxes", "\n", "if", "x1y1x2y2", ":", "# x1, y1, x2, y2 = box1", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", "0", "]", ",", "box1", "[", "1", "]", ",", "box1", "[", "2", "]", ",", "box1", "[", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", "0", "]", ",", "box2", "[", "1", "]", ",", "box2", "[", "2", "]", ",", "box2", "[", "3", "]", "\n", "", "else", ":", "# transform from xywh to xyxy", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", "0", "]", "-", "box1", "[", "2", "]", "/", "2", ",", "box1", "[", "0", "]", "+", "box1", "[", "2", "]", "/", "2", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", "1", "]", "-", "box1", "[", "3", "]", "/", "2", ",", "box1", "[", "1", "]", "+", "box1", "[", "3", "]", "/", "2", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", "0", "]", "-", "box2", "[", "2", "]", "/", "2", ",", "box2", "[", "0", "]", "+", "box2", "[", "2", "]", "/", "2", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", "1", "]", "-", "box2", "[", "3", "]", "/", "2", ",", "box2", "[", "1", "]", "+", "box2", "[", "3", "]", "/", "2", "\n", "\n", "", "if", "SCA", ":", "\n", "        ", "min_x1", "=", "torch", ".", "max", "(", "b1_x1", ",", "b2_x1", ")", "\n", "min_y1", "=", "torch", ".", "max", "(", "b1_y1", ",", "b2_y1", ")", "\n", "min_x2", "=", "torch", ".", "min", "(", "b1_x2", ",", "b2_x2", ")", "\n", "min_y2", "=", "torch", ".", "min", "(", "b1_y2", ",", "b2_y2", ")", "\n", "\n", "max_x1", "=", "torch", ".", "min", "(", "b1_x1", ",", "b2_x1", ")", "\n", "max_y1", "=", "torch", ".", "min", "(", "b1_y1", ",", "b2_y1", ")", "\n", "max_x2", "=", "torch", ".", "max", "(", "b1_x2", ",", "b2_x2", ")", "\n", "max_y2", "=", "torch", ".", "max", "(", "b1_y2", ",", "b2_y2", ")", "\n", "\n", "min_w", "=", "min_x2", "-", "min_x1", "\n", "min_h", "=", "min_y2", "-", "min_y1", "\n", "max_w", "=", "max_x2", "-", "max_x1", "\n", "max_h", "=", "max_y2", "-", "max_y1", "\n", "SO", "=", "min_w", "/", "max_w", "+", "min_h", "/", "max_h", "\n", "\n", "d_lt", "=", "(", "b1_x1", "-", "b2_x1", "+", "eps", ")", "**", "2", "+", "(", "b1_y1", "-", "b2_y1", "+", "eps", ")", "**", "2", "\n", "d_rb", "=", "(", "b1_x2", "-", "b2_x2", "+", "eps", ")", "**", "2", "+", "(", "b1_y2", "-", "b2_y2", "+", "eps", ")", "**", "2", "\n", "d_diag", "=", "(", "max_x2", "-", "max_x1", "+", "eps", ")", "**", "2", "+", "(", "max_y2", "-", "max_y1", "+", "eps", ")", "**", "2", "\n", "\n", "CD", "=", "(", "torch", ".", "pow", "(", "d_lt", ",", "0.5", ")", "/", "(", "torch", ".", "pow", "(", "d_diag", ",", "0.5", ")", "+", "eps", ")", "+", "torch", ".", "pow", "(", "d_rb", ",", "0.5", ")", "/", "(", "torch", ".", "pow", "(", "d_diag", ",", "0.5", ")", "+", "eps", ")", ")", "*", "alpha", "\n", "\n", "return", "SO", "-", "CD", "-", "1", "\n", "\n", "# Intersection area", "\n", "", "inter", "=", "(", "torch", ".", "min", "(", "b1_x2", ",", "b2_x2", ")", "-", "torch", ".", "max", "(", "b1_x1", ",", "b2_x1", ")", ")", ".", "clamp", "(", "0", ")", "*", "(", "torch", ".", "min", "(", "b1_y2", ",", "b2_y2", ")", "-", "torch", ".", "max", "(", "b1_y1", ",", "b2_y1", ")", ")", ".", "clamp", "(", "0", ")", "\n", "\n", "# Union Area", "\n", "w1", ",", "h1", "=", "b1_x2", "-", "b1_x1", ",", "b1_y2", "-", "b1_y1", "+", "eps", "\n", "w2", ",", "h2", "=", "b2_x2", "-", "b2_x1", ",", "b2_y2", "-", "b2_y1", "+", "eps", "\n", "union", "=", "w1", "*", "h1", "+", "w2", "*", "h2", "-", "inter", "+", "eps", "\n", "\n", "iou", "=", "inter", "/", "union", "\n", "if", "GIoU", "or", "DIoU", "or", "CIoU", ":", "\n", "        ", "cw", "=", "torch", ".", "max", "(", "b1_x2", ",", "b2_x2", ")", "-", "torch", ".", "min", "(", "b1_x1", ",", "b2_x1", ")", "# convex (smallest enclosing box) width", "\n", "ch", "=", "torch", ".", "max", "(", "b1_y2", ",", "b2_y2", ")", "-", "torch", ".", "min", "(", "b1_y1", ",", "b2_y1", ")", "# convex height", "\n", "if", "CIoU", "or", "DIoU", ":", "# Distance or Complete IoU https://arxiv.org/abs/1911.08287v1", "\n", "            ", "c2", "=", "cw", "**", "2", "+", "ch", "**", "2", "+", "eps", "# convex diagonal squared", "\n", "rho2", "=", "(", "(", "b2_x1", "+", "b2_x2", "-", "b1_x1", "-", "b1_x2", ")", "**", "2", "+", "\n", "(", "b2_y1", "+", "b2_y2", "-", "b1_y1", "-", "b1_y2", ")", "**", "2", ")", "/", "4", "# center distance squared", "\n", "if", "DIoU", ":", "\n", "                ", "return", "iou", "-", "rho2", "/", "c2", "# DIoU", "\n", "", "elif", "CIoU", ":", "# https://github.com/Zzh-tju/DIoU-SSD-pytorch/blob/master/utils/box/box_utils.py#L47", "\n", "                ", "v", "=", "(", "4", "/", "math", ".", "pi", "**", "2", ")", "*", "torch", ".", "pow", "(", "torch", ".", "atan", "(", "w2", "/", "h2", ")", "-", "torch", ".", "atan", "(", "w1", "/", "h1", ")", ",", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "alpha", "=", "v", "/", "(", "v", "-", "iou", "+", "(", "1", "+", "eps", ")", ")", "\n", "", "return", "iou", "-", "(", "rho2", "/", "c2", "+", "v", "*", "alpha", ")", "# CIoU", "\n", "", "", "else", ":", "# GIoU https://arxiv.org/pdf/1902.09630.pdf", "\n", "            ", "c_area", "=", "cw", "*", "ch", "+", "eps", "# convex area", "\n", "return", "iou", "-", "(", "c_area", "-", "union", ")", "/", "c_area", "# GIoU", "\n", "", "", "else", ":", "\n", "        ", "return", "iou", "# IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.box_iou": [[266, 289], ["metrics.box_iou.box_area"], "function", ["None"], ["", "", "def", "box_iou", "(", "box1", ",", "box2", ")", ":", "\n", "# https://github.com/pytorch/vision/blob/master/torchvision/ops/boxes.py", "\n", "    ", "\"\"\"\n    Return intersection-over-union (Jaccard index) of boxes.\n    Both sets of boxes are expected to be in (x1, y1, x2, y2) format.\n    Arguments:\n        box1 (Tensor[N, 4])\n        box2 (Tensor[M, 4])\n    Returns:\n        iou (Tensor[N, M]): the NxM matrix containing the pairwise\n            IoU values for every element in boxes1 and boxes2\n    \"\"\"", "\n", "\n", "def", "box_area", "(", "box", ")", ":", "\n", "# box = 4xn", "\n", "        ", "return", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", ")", "\n", "\n", "", "area1", "=", "box_area", "(", "box1", ".", "T", ")", "\n", "area2", "=", "box_area", "(", "box2", ".", "T", ")", "\n", "\n", "# inter(N,M) = (rb(N,M,2) - lt(N,M,2)).clamp(0).prod(2)", "\n", "inter", "=", "(", "torch", ".", "min", "(", "box1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "box2", "[", ":", ",", "2", ":", "]", ")", "-", "torch", ".", "max", "(", "box1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "box2", "[", ":", ",", ":", "2", "]", ")", ")", ".", "clamp", "(", "0", ")", ".", "prod", "(", "2", ")", "\n", "return", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "# iou = inter / (area1 + area2 - inter)", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.bbox_ioa": [[291, 313], ["box2.transpose.transpose", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum"], "function", ["None"], ["", "def", "bbox_ioa", "(", "box1", ",", "box2", ",", "eps", "=", "1E-7", ")", ":", "\n", "    ", "\"\"\" Returns the intersection over box2 area given box1, box2. Boxes are x1y1x2y2\n    box1:       np.array of shape(4)\n    box2:       np.array of shape(nx4)\n    returns:    np.array of shape(n)\n    \"\"\"", "\n", "\n", "box2", "=", "box2", ".", "transpose", "(", ")", "\n", "\n", "# Get the coordinates of bounding boxes", "\n", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", "0", "]", ",", "box1", "[", "1", "]", ",", "box1", "[", "2", "]", ",", "box1", "[", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", "0", "]", ",", "box2", "[", "1", "]", ",", "box2", "[", "2", "]", ",", "box2", "[", "3", "]", "\n", "\n", "# Intersection area", "\n", "inter_area", "=", "(", "np", ".", "minimum", "(", "b1_x2", ",", "b2_x2", ")", "-", "np", ".", "maximum", "(", "b1_x1", ",", "b2_x1", ")", ")", ".", "clip", "(", "0", ")", "*", "(", "np", ".", "minimum", "(", "b1_y2", ",", "b2_y2", ")", "-", "np", ".", "maximum", "(", "b1_y1", ",", "b2_y1", ")", ")", ".", "clip", "(", "0", ")", "\n", "\n", "# box2 area", "\n", "box2_area", "=", "(", "b2_x2", "-", "b2_x1", ")", "*", "(", "b2_y2", "-", "b2_y1", ")", "+", "eps", "\n", "\n", "# Intersection over box2 area", "\n", "return", "inter_area", "/", "box2_area", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.wh_iou": [[315, 321], ["torch.min().prod", "torch.min", "wh1.prod", "wh2.prod"], "function", ["None"], ["", "def", "wh_iou", "(", "wh1", ",", "wh2", ")", ":", "\n", "# Returns the nxm IoU matrix. wh1 is nx2, wh2 is mx2", "\n", "    ", "wh1", "=", "wh1", "[", ":", ",", "None", "]", "# [N,1,2]", "\n", "wh2", "=", "wh2", "[", "None", "]", "# [1,M,2]", "\n", "inter", "=", "torch", ".", "min", "(", "wh1", ",", "wh2", ")", ".", "prod", "(", "2", ")", "# [N,M]", "\n", "return", "inter", "/", "(", "wh1", ".", "prod", "(", "2", ")", "+", "wh2", ".", "prod", "(", "2", ")", "-", "inter", ")", "# iou = inter / (area1 + area2 - inter)", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.plot_pr_curve": [[325, 344], ["matplotlib.subplots", "numpy.stack", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "ax.set_xlim", "ax.set_ylim", "matplotlib.legend", "fig.savefig", "matplotlib.close", "len", "enumerate", "ax.plot", "np.stack.mean", "pathlib.Path", "ax.plot", "ap[].mean"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot"], ["", "def", "plot_pr_curve", "(", "px", ",", "py", ",", "ap", ",", "save_dir", "=", "'pr_curve.png'", ",", "names", "=", "(", ")", ")", ":", "\n", "# Precision-recall curve", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "9", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "py", "=", "np", ".", "stack", "(", "py", ",", "axis", "=", "1", ")", "\n", "\n", "if", "0", "<", "len", "(", "names", ")", "<", "21", ":", "# display per-class legend if < 21 classes", "\n", "        ", "for", "i", ",", "y", "in", "enumerate", "(", "py", ".", "T", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "px", ",", "y", ",", "linewidth", "=", "1", ",", "label", "=", "f'{names[i]} {ap[i, 0]:.3f}'", ")", "# plot(recall, precision)", "\n", "", "", "else", ":", "\n", "        ", "ax", ".", "plot", "(", "px", ",", "py", ",", "linewidth", "=", "1", ",", "color", "=", "'grey'", ")", "# plot(recall, precision)", "\n", "\n", "", "ax", ".", "plot", "(", "px", ",", "py", ".", "mean", "(", "1", ")", ",", "linewidth", "=", "3", ",", "color", "=", "'blue'", ",", "label", "=", "'all classes %.3f mAP@0.5'", "%", "ap", "[", ":", ",", "0", "]", ".", "mean", "(", ")", ")", "\n", "ax", ".", "set_xlabel", "(", "'Recall'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Precision'", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "1.04", ",", "1", ")", ",", "loc", "=", "\"upper left\"", ")", "\n", "fig", ".", "savefig", "(", "Path", "(", "save_dir", ")", ",", "dpi", "=", "250", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.plot_mc_curve": [[346, 365], ["matplotlib.subplots", "py.mean", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "ax.set_xlim", "ax.set_ylim", "matplotlib.legend", "fig.savefig", "matplotlib.close", "len", "enumerate", "ax.plot", "pathlib.Path", "ax.plot", "py.mean.max", "py.mean.argmax"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.ConfusionMatrix.plot"], ["", "def", "plot_mc_curve", "(", "px", ",", "py", ",", "save_dir", "=", "'mc_curve.png'", ",", "names", "=", "(", ")", ",", "xlabel", "=", "'Confidence'", ",", "ylabel", "=", "'Metric'", ")", ":", "\n", "# Metric-confidence curve", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "9", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "\n", "if", "0", "<", "len", "(", "names", ")", "<", "21", ":", "# display per-class legend if < 21 classes", "\n", "        ", "for", "i", ",", "y", "in", "enumerate", "(", "py", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "px", ",", "y", ",", "linewidth", "=", "1", ",", "label", "=", "f'{names[i]}'", ")", "# plot(confidence, metric)", "\n", "", "", "else", ":", "\n", "        ", "ax", ".", "plot", "(", "px", ",", "py", ".", "T", ",", "linewidth", "=", "1", ",", "color", "=", "'grey'", ")", "# plot(confidence, metric)", "\n", "\n", "", "y", "=", "py", ".", "mean", "(", "0", ")", "\n", "ax", ".", "plot", "(", "px", ",", "y", ",", "linewidth", "=", "3", ",", "color", "=", "'blue'", ",", "label", "=", "f'all classes {y.max():.2f} at {px[y.argmax()]:.3f}'", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "1.04", ",", "1", ")", ",", "loc", "=", "\"upper left\"", ")", "\n", "fig", ".", "savefig", "(", "Path", "(", "save_dir", ")", ",", "dpi", "=", "250", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.autobatch.check_train_batch_size": [[16, 20], ["torch.cuda.amp.autocast", "autobatch.autobatch", "copy.deepcopy().train", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.autobatch.autobatch", "home.repos.pwc.inspect_result.turoad_scaloss.None.train.train"], ["def", "check_train_batch_size", "(", "model", ",", "imgsz", "=", "640", ")", ":", "\n", "# Check  training batch size", "\n", "    ", "with", "amp", ".", "autocast", "(", ")", ":", "\n", "        ", "return", "autobatch", "(", "deepcopy", "(", "model", ")", ".", "train", "(", ")", ",", "imgsz", ")", "# compute optimal batch size", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.autobatch.autobatch": [[22, 58], ["utils.general.colorstr", "utils.general.LOGGER.info", "str().upper", "torch.cuda.get_device_properties", "utils.general.LOGGER.info", "numpy.polyfit", "int", "utils.general.LOGGER.info", "next", "utils.general.LOGGER.info", "torch.cuda.memory_reserved", "torch.cuda.memory_allocated", "utils.torch_utils.profile", "model.parameters", "str", "torch.zeros", "utils.general.LOGGER.warning", "len"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.profile"], ["", "", "def", "autobatch", "(", "model", ",", "imgsz", "=", "640", ",", "fraction", "=", "0.9", ",", "batch_size", "=", "16", ")", ":", "\n", "# Automatically estimate best batch size to use `fraction` of available CUDA memory", "\n", "# Usage:", "\n", "#     import torch", "\n", "#     from utils.autobatch import autobatch", "\n", "#     model = torch.hub.load('ultralytics/yolov3', 'yolov3', autoshape=False)", "\n", "#     print(autobatch(model))", "\n", "\n", "    ", "prefix", "=", "colorstr", "(", "'AutoBatch: '", ")", "\n", "LOGGER", ".", "info", "(", "f'{prefix}Computing optimal batch size for --imgsz {imgsz}'", ")", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# get model device", "\n", "if", "device", ".", "type", "==", "'cpu'", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'{prefix}CUDA not detected, using default CPU batch-size {batch_size}'", ")", "\n", "return", "batch_size", "\n", "\n", "", "d", "=", "str", "(", "device", ")", ".", "upper", "(", ")", "# 'CUDA:0'", "\n", "properties", "=", "torch", ".", "cuda", ".", "get_device_properties", "(", "device", ")", "# device properties", "\n", "t", "=", "properties", ".", "total_memory", "/", "1024", "**", "3", "# (GiB)", "\n", "r", "=", "torch", ".", "cuda", ".", "memory_reserved", "(", "device", ")", "/", "1024", "**", "3", "# (GiB)", "\n", "a", "=", "torch", ".", "cuda", ".", "memory_allocated", "(", "device", ")", "/", "1024", "**", "3", "# (GiB)", "\n", "f", "=", "t", "-", "(", "r", "+", "a", ")", "# free inside reserved", "\n", "LOGGER", ".", "info", "(", "f'{prefix}{d} ({properties.name}) {t:.2f}G total, {r:.2f}G reserved, {a:.2f}G allocated, {f:.2f}G free'", ")", "\n", "\n", "batch_sizes", "=", "[", "1", ",", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "try", ":", "\n", "        ", "img", "=", "[", "torch", ".", "zeros", "(", "b", ",", "3", ",", "imgsz", ",", "imgsz", ")", "for", "b", "in", "batch_sizes", "]", "\n", "y", "=", "profile", "(", "img", ",", "model", ",", "n", "=", "3", ",", "device", "=", "device", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "LOGGER", ".", "warning", "(", "f'{prefix}{e}'", ")", "\n", "\n", "", "y", "=", "[", "x", "[", "2", "]", "for", "x", "in", "y", "if", "x", "]", "# memory [2]", "\n", "batch_sizes", "=", "batch_sizes", "[", ":", "len", "(", "y", ")", "]", "\n", "p", "=", "np", ".", "polyfit", "(", "batch_sizes", ",", "y", ",", "deg", "=", "1", ")", "# first degree polynomial fit", "\n", "b", "=", "int", "(", "(", "f", "*", "fraction", "-", "p", "[", "1", "]", ")", "/", "p", "[", "0", "]", ")", "# y intercept (optimal batch size)", "\n", "LOGGER", ".", "info", "(", "f'{prefix}Using batch-size {b} for {d} {t * fraction:.2f}G/{t:.2f}G ({fraction * 100:.0f}%)'", ")", "\n", "return", "b", "\n", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.autoanchor.check_anchor_order": [[18, 26], ["m.anchors.prod().view", "da.sign", "ds.sign", "utils.general.LOGGER.info", "m.anchors.flip", "m.anchors.prod"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["def", "check_anchor_order", "(", "m", ")", ":", "\n", "# Check anchor order against stride order for  Detect() module m, and correct if necessary", "\n", "    ", "a", "=", "m", ".", "anchors", ".", "prod", "(", "-", "1", ")", ".", "view", "(", "-", "1", ")", "# anchor area", "\n", "da", "=", "a", "[", "-", "1", "]", "-", "a", "[", "0", "]", "# delta a", "\n", "ds", "=", "m", ".", "stride", "[", "-", "1", "]", "-", "m", ".", "stride", "[", "0", "]", "# delta s", "\n", "if", "da", ".", "sign", "(", ")", "!=", "ds", ".", "sign", "(", ")", ":", "# same order", "\n", "        ", "LOGGER", ".", "info", "(", "f'{PREFIX}Reversing anchor order'", ")", "\n", "m", ".", "anchors", "[", ":", "]", "=", "m", ".", "anchors", ".", "flip", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.autoanchor.check_anchors": [[28, 63], ["numpy.random.uniform", "torch.tensor().float", "autoanchor.check_anchors.metric"], "function", ["None"], ["", "", "def", "check_anchors", "(", "dataset", ",", "model", ",", "thr", "=", "4.0", ",", "imgsz", "=", "640", ")", ":", "\n", "# Check anchor fit to data, recompute if necessary", "\n", "    ", "m", "=", "model", ".", "module", ".", "model", "[", "-", "1", "]", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ".", "model", "[", "-", "1", "]", "# Detect()", "\n", "shapes", "=", "imgsz", "*", "dataset", ".", "shapes", "/", "dataset", ".", "shapes", ".", "max", "(", "1", ",", "keepdims", "=", "True", ")", "\n", "scale", "=", "np", ".", "random", ".", "uniform", "(", "0.9", ",", "1.1", ",", "size", "=", "(", "shapes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "# augment scale", "\n", "wh", "=", "torch", ".", "tensor", "(", "np", ".", "concatenate", "(", "[", "l", "[", ":", ",", "3", ":", "5", "]", "*", "s", "for", "s", ",", "l", "in", "zip", "(", "shapes", "*", "scale", ",", "dataset", ".", "labels", ")", "]", ")", ")", ".", "float", "(", ")", "# wh", "\n", "\n", "def", "metric", "(", "k", ")", ":", "# compute metric", "\n", "        ", "r", "=", "wh", "[", ":", ",", "None", "]", "/", "k", "[", "None", "]", "\n", "x", "=", "torch", ".", "min", "(", "r", ",", "1", "/", "r", ")", ".", "min", "(", "2", ")", "[", "0", "]", "# ratio metric", "\n", "best", "=", "x", ".", "max", "(", "1", ")", "[", "0", "]", "# best_x", "\n", "aat", "=", "(", "x", ">", "1", "/", "thr", ")", ".", "float", "(", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "# anchors above threshold", "\n", "bpr", "=", "(", "best", ">", "1", "/", "thr", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "# best possible recall", "\n", "return", "bpr", ",", "aat", "\n", "\n", "", "anchors", "=", "m", ".", "anchors", ".", "clone", "(", ")", "*", "m", ".", "stride", ".", "to", "(", "m", ".", "anchors", ".", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "# current anchors", "\n", "bpr", ",", "aat", "=", "metric", "(", "anchors", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", ")", "\n", "s", "=", "f'\\n{PREFIX}{aat:.2f} anchors/target, {bpr:.3f} Best Possible Recall (BPR). '", "\n", "if", "bpr", ">", "0.98", ":", "# threshold to recompute", "\n", "        ", "LOGGER", ".", "info", "(", "emojis", "(", "f'{s}Current anchors are a good fit to dataset \u2705'", ")", ")", "\n", "", "else", ":", "\n", "        ", "LOGGER", ".", "info", "(", "emojis", "(", "f'{s}Anchors are a poor fit to dataset \u26a0\ufe0f, attempting to improve...'", ")", ")", "\n", "na", "=", "m", ".", "anchors", ".", "numel", "(", ")", "//", "2", "# number of anchors", "\n", "try", ":", "\n", "            ", "anchors", "=", "kmean_anchors", "(", "dataset", ",", "n", "=", "na", ",", "img_size", "=", "imgsz", ",", "thr", "=", "thr", ",", "gen", "=", "1000", ",", "verbose", "=", "False", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f'{PREFIX}ERROR: {e}'", ")", "\n", "", "new_bpr", "=", "metric", "(", "anchors", ")", "[", "0", "]", "\n", "if", "new_bpr", ">", "bpr", ":", "# replace anchors", "\n", "            ", "anchors", "=", "torch", ".", "tensor", "(", "anchors", ",", "device", "=", "m", ".", "anchors", ".", "device", ")", ".", "type_as", "(", "m", ".", "anchors", ")", "\n", "m", ".", "anchors", "[", ":", "]", "=", "anchors", ".", "clone", "(", ")", ".", "view_as", "(", "m", ".", "anchors", ")", "/", "m", ".", "stride", ".", "to", "(", "m", ".", "anchors", ".", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "# loss", "\n", "check_anchor_order", "(", "m", ")", "\n", "LOGGER", ".", "info", "(", "f'{PREFIX}New anchors saved to model. Update model *.yaml to use these anchors in the future.'", ")", "\n", "", "else", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f'{PREFIX}Original anchors better than new anchors. Proceeding with original anchors.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.autoanchor.kmean_anchors": [[65, 165], ["isinstance", "numpy.concatenate", "utils.general.LOGGER.info", "torch.tensor.std", "kmeans", "torch.tensor", "torch.tensor", "autoanchor.kmean_anchors.print_results"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["", "", "", "def", "kmean_anchors", "(", "dataset", "=", "'./data/coco128.yaml'", ",", "n", "=", "9", ",", "img_size", "=", "640", ",", "thr", "=", "4.0", ",", "gen", "=", "1000", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\" Creates kmeans-evolved anchors from training dataset\n\n        Arguments:\n            dataset: path to data.yaml, or a loaded dataset\n            n: number of anchors\n            img_size: image size used for training\n            thr: anchor-label wh ratio threshold hyperparameter hyp['anchor_t'] used for training, default=4.0\n            gen: generations to evolve anchors using genetic algorithm\n            verbose: print all results\n\n        Return:\n            k: kmeans evolved anchors\n\n        Usage:\n            from utils.autoanchor import *; _ = kmean_anchors()\n    \"\"\"", "\n", "from", "scipy", ".", "cluster", ".", "vq", "import", "kmeans", "\n", "\n", "thr", "=", "1", "/", "thr", "\n", "\n", "def", "metric", "(", "k", ",", "wh", ")", ":", "# compute metrics", "\n", "        ", "r", "=", "wh", "[", ":", ",", "None", "]", "/", "k", "[", "None", "]", "\n", "x", "=", "torch", ".", "min", "(", "r", ",", "1", "/", "r", ")", ".", "min", "(", "2", ")", "[", "0", "]", "# ratio metric", "\n", "# x = wh_iou(wh, torch.tensor(k))  # iou metric", "\n", "return", "x", ",", "x", ".", "max", "(", "1", ")", "[", "0", "]", "# x, best_x", "\n", "\n", "", "def", "anchor_fitness", "(", "k", ")", ":", "# mutation fitness", "\n", "        ", "_", ",", "best", "=", "metric", "(", "torch", ".", "tensor", "(", "k", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "wh", ")", "\n", "return", "(", "best", "*", "(", "best", ">", "thr", ")", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "# fitness", "\n", "\n", "", "def", "print_results", "(", "k", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "k", "=", "k", "[", "np", ".", "argsort", "(", "k", ".", "prod", "(", "1", ")", ")", "]", "# sort small to large", "\n", "x", ",", "best", "=", "metric", "(", "k", ",", "wh0", ")", "\n", "bpr", ",", "aat", "=", "(", "best", ">", "thr", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "(", "x", ">", "thr", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "*", "n", "# best possible recall, anch > thr", "\n", "s", "=", "f'{PREFIX}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr\\n'", "f'{PREFIX}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, '", "f'past_thr={x[x > thr].mean():.3f}-mean: '", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "k", ")", ":", "\n", "            ", "s", "+=", "'%i,%i, '", "%", "(", "round", "(", "x", "[", "0", "]", ")", ",", "round", "(", "x", "[", "1", "]", ")", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "LOGGER", ".", "info", "(", "s", "[", ":", "-", "2", "]", ")", "\n", "", "return", "k", "\n", "\n", "", "if", "isinstance", "(", "dataset", ",", "str", ")", ":", "# *.yaml file", "\n", "        ", "with", "open", "(", "dataset", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "            ", "data_dict", "=", "yaml", ".", "safe_load", "(", "f", ")", "# model dict", "\n", "", "from", "utils", ".", "datasets", "import", "LoadImagesAndLabels", "\n", "dataset", "=", "LoadImagesAndLabels", "(", "data_dict", "[", "'train'", "]", ",", "augment", "=", "True", ",", "rect", "=", "True", ")", "\n", "\n", "# Get label wh", "\n", "", "shapes", "=", "img_size", "*", "dataset", ".", "shapes", "/", "dataset", ".", "shapes", ".", "max", "(", "1", ",", "keepdims", "=", "True", ")", "\n", "wh0", "=", "np", ".", "concatenate", "(", "[", "l", "[", ":", ",", "3", ":", "5", "]", "*", "s", "for", "s", ",", "l", "in", "zip", "(", "shapes", ",", "dataset", ".", "labels", ")", "]", ")", "# wh", "\n", "\n", "# Filter", "\n", "i", "=", "(", "wh0", "<", "3.0", ")", ".", "any", "(", "1", ")", ".", "sum", "(", ")", "\n", "if", "i", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f'{PREFIX}WARNING: Extremely small objects found. {i} of {len(wh0)} labels are < 3 pixels in size.'", ")", "\n", "", "wh", "=", "wh0", "[", "(", "wh0", ">=", "2.0", ")", ".", "any", "(", "1", ")", "]", "# filter > 2 pixels", "\n", "# wh = wh * (np.random.rand(wh.shape[0], 1) * 0.9 + 0.1)  # multiply by random scale 0-1", "\n", "\n", "# Kmeans calculation", "\n", "LOGGER", ".", "info", "(", "f'{PREFIX}Running kmeans for {n} anchors on {len(wh)} points...'", ")", "\n", "s", "=", "wh", ".", "std", "(", "0", ")", "# sigmas for whitening", "\n", "k", ",", "dist", "=", "kmeans", "(", "wh", "/", "s", ",", "n", ",", "iter", "=", "30", ")", "# points, mean distance", "\n", "assert", "len", "(", "k", ")", "==", "n", ",", "f'{PREFIX}ERROR: scipy.cluster.vq.kmeans requested {n} points but returned only {len(k)}'", "\n", "k", "*=", "s", "\n", "wh", "=", "torch", ".", "tensor", "(", "wh", ",", "dtype", "=", "torch", ".", "float32", ")", "# filtered", "\n", "wh0", "=", "torch", ".", "tensor", "(", "wh0", ",", "dtype", "=", "torch", ".", "float32", ")", "# unfiltered", "\n", "k", "=", "print_results", "(", "k", ",", "verbose", "=", "False", ")", "\n", "\n", "# Plot", "\n", "# k, d = [None] * 20, [None] * 20", "\n", "# for i in tqdm(range(1, 21)):", "\n", "#     k[i-1], d[i-1] = kmeans(wh / s, i)  # points, mean distance", "\n", "# fig, ax = plt.subplots(1, 2, figsize=(14, 7), tight_layout=True)", "\n", "# ax = ax.ravel()", "\n", "# ax[0].plot(np.arange(1, 21), np.array(d) ** 2, marker='.')", "\n", "# fig, ax = plt.subplots(1, 2, figsize=(14, 7))  # plot wh", "\n", "# ax[0].hist(wh[wh[:, 0]<100, 0],400)", "\n", "# ax[1].hist(wh[wh[:, 1]<100, 1],400)", "\n", "# fig.savefig('wh.png', dpi=200)", "\n", "\n", "# Evolve", "\n", "npr", "=", "np", ".", "random", "\n", "f", ",", "sh", ",", "mp", ",", "s", "=", "anchor_fitness", "(", "k", ")", ",", "k", ".", "shape", ",", "0.9", ",", "0.1", "# fitness, generations, mutation prob, sigma", "\n", "pbar", "=", "tqdm", "(", "range", "(", "gen", ")", ",", "desc", "=", "f'{PREFIX}Evolving anchors with Genetic Algorithm:'", ")", "# progress bar", "\n", "for", "_", "in", "pbar", ":", "\n", "        ", "v", "=", "np", ".", "ones", "(", "sh", ")", "\n", "while", "(", "v", "==", "1", ")", ".", "all", "(", ")", ":", "# mutate until a change occurs (prevent duplicates)", "\n", "            ", "v", "=", "(", "(", "npr", ".", "random", "(", "sh", ")", "<", "mp", ")", "*", "random", ".", "random", "(", ")", "*", "npr", ".", "randn", "(", "*", "sh", ")", "*", "s", "+", "1", ")", ".", "clip", "(", "0.3", ",", "3.0", ")", "\n", "", "kg", "=", "(", "k", ".", "copy", "(", ")", "*", "v", ")", ".", "clip", "(", "min", "=", "2.0", ")", "\n", "fg", "=", "anchor_fitness", "(", "kg", ")", "\n", "if", "fg", ">", "f", ":", "\n", "            ", "f", ",", "k", "=", "fg", ",", "kg", ".", "copy", "(", ")", "\n", "pbar", ".", "desc", "=", "f'{PREFIX}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}'", "\n", "if", "verbose", ":", "\n", "                ", "print_results", "(", "k", ",", "verbose", ")", "\n", "\n", "", "", "", "return", "print_results", "(", "k", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.BCEBlurWithLogitsLoss.__init__": [[20, 24], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.05", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_fcn", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "# must be nn.BCEWithLogitsLoss()", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.BCEBlurWithLogitsLoss.forward": [[25, 33], ["loss.BCEBlurWithLogitsLoss.BCEBlurWithLogitsLoss.loss_fcn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss.BCEBlurWithLogitsLoss.BCEBlurWithLogitsLoss.mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "true", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_fcn", "(", "pred", ",", "true", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "pred", ")", "# prob from logits", "\n", "dx", "=", "pred", "-", "true", "# reduce only missing label effects", "\n", "# dx = (pred - true).abs()  # reduce missing label and false label effects", "\n", "alpha_factor", "=", "1", "-", "torch", ".", "exp", "(", "(", "dx", "-", "1", ")", "/", "(", "self", ".", "alpha", "+", "1e-4", ")", ")", "\n", "loss", "*=", "alpha_factor", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.FocalLoss.__init__": [[37, 44], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fcn", ",", "gamma", "=", "1.5", ",", "alpha", "=", "0.25", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_fcn", "=", "loss_fcn", "# must be nn.BCEWithLogitsLoss()", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "reduction", "=", "loss_fcn", ".", "reduction", "\n", "self", ".", "loss_fcn", ".", "reduction", "=", "'none'", "# required to apply FL to each element", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.FocalLoss.forward": [[45, 63], ["loss.FocalLoss.FocalLoss.loss_fcn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss.FocalLoss.FocalLoss.mean", "loss.FocalLoss.FocalLoss.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "true", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_fcn", "(", "pred", ",", "true", ")", "\n", "# p_t = torch.exp(-loss)", "\n", "# loss *= self.alpha * (1.000001 - p_t) ** self.gamma  # non-zero power for gradient stability", "\n", "\n", "# TF implementation https://github.com/tensorflow/addons/blob/v0.7.1/tensorflow_addons/losses/focal_loss.py", "\n", "pred_prob", "=", "torch", ".", "sigmoid", "(", "pred", ")", "# prob from logits", "\n", "p_t", "=", "true", "*", "pred_prob", "+", "(", "1", "-", "true", ")", "*", "(", "1", "-", "pred_prob", ")", "\n", "alpha_factor", "=", "true", "*", "self", ".", "alpha", "+", "(", "1", "-", "true", ")", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "modulating_factor", "=", "(", "1.0", "-", "p_t", ")", "**", "self", ".", "gamma", "\n", "loss", "*=", "alpha_factor", "*", "modulating_factor", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "# 'none'", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.QFocalLoss.__init__": [[67, 74], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fcn", ",", "gamma", "=", "1.5", ",", "alpha", "=", "0.25", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_fcn", "=", "loss_fcn", "# must be nn.BCEWithLogitsLoss()", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "reduction", "=", "loss_fcn", ".", "reduction", "\n", "self", ".", "loss_fcn", ".", "reduction", "=", "'none'", "# required to apply FL to each element", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.QFocalLoss.forward": [[75, 89], ["loss.QFocalLoss.QFocalLoss.loss_fcn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "loss.QFocalLoss.QFocalLoss.mean", "loss.QFocalLoss.QFocalLoss.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "true", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_fcn", "(", "pred", ",", "true", ")", "\n", "\n", "pred_prob", "=", "torch", ".", "sigmoid", "(", "pred", ")", "# prob from logits", "\n", "alpha_factor", "=", "true", "*", "self", ".", "alpha", "+", "(", "1", "-", "true", ")", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "modulating_factor", "=", "torch", ".", "abs", "(", "true", "-", "pred_prob", ")", "**", "self", ".", "gamma", "\n", "loss", "*=", "alpha_factor", "*", "modulating_factor", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "# 'none'", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.ComputeLoss.__init__": [[93, 116], ["torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "loss.smooth_BCE", "next", "utils.torch_utils.is_parallel", "list().index", "setattr", "model.parameters", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "h.get", "loss.FocalLoss", "loss.FocalLoss", "getattr", "list"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.smooth_BCE", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.is_parallel"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "autobalance", "=", "False", ")", ":", "\n", "        ", "self", ".", "sort_obj_iou", "=", "False", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# get model device", "\n", "h", "=", "model", ".", "hyp", "# hyperparameters", "\n", "\n", "# Define criteria", "\n", "BCEcls", "=", "nn", ".", "BCEWithLogitsLoss", "(", "pos_weight", "=", "torch", ".", "tensor", "(", "[", "h", "[", "'cls_pw'", "]", "]", ",", "device", "=", "device", ")", ")", "\n", "BCEobj", "=", "nn", ".", "BCEWithLogitsLoss", "(", "pos_weight", "=", "torch", ".", "tensor", "(", "[", "h", "[", "'obj_pw'", "]", "]", ",", "device", "=", "device", ")", ")", "\n", "\n", "# Class label smoothing https://arxiv.org/pdf/1902.04103.pdf eqn 3", "\n", "self", ".", "cp", ",", "self", ".", "cn", "=", "smooth_BCE", "(", "eps", "=", "h", ".", "get", "(", "'label_smoothing'", ",", "0.0", ")", ")", "# positive, negative BCE targets", "\n", "\n", "# Focal loss", "\n", "g", "=", "h", "[", "'fl_gamma'", "]", "# focal loss gamma", "\n", "if", "g", ">", "0", ":", "\n", "            ", "BCEcls", ",", "BCEobj", "=", "FocalLoss", "(", "BCEcls", ",", "g", ")", ",", "FocalLoss", "(", "BCEobj", ",", "g", ")", "\n", "\n", "", "det", "=", "model", ".", "module", ".", "model", "[", "-", "1", "]", "if", "is_parallel", "(", "model", ")", "else", "model", ".", "model", "[", "-", "1", "]", "# Detect() module", "\n", "self", ".", "balance", "=", "{", "3", ":", "[", "4.0", ",", "1.0", ",", "0.4", "]", "}", ".", "get", "(", "det", ".", "nl", ",", "[", "4.0", ",", "1.0", ",", "0.25", ",", "0.06", ",", "0.02", "]", ")", "# P3-P7", "\n", "self", ".", "ssi", "=", "list", "(", "det", ".", "stride", ")", ".", "index", "(", "16", ")", "if", "autobalance", "else", "0", "# stride 16 index", "\n", "self", ".", "BCEcls", ",", "self", ".", "BCEobj", ",", "self", ".", "gr", ",", "self", ".", "hyp", ",", "self", ".", "autobalance", "=", "BCEcls", ",", "BCEobj", ",", "1.0", ",", "h", ",", "autobalance", "\n", "for", "k", "in", "'na'", ",", "'nc'", ",", "'nl'", ",", "'anchors'", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "getattr", "(", "det", ",", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.ComputeLoss.__call__": [[117, 168], ["loss.ComputeLoss.build_targets", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "loss.ComputeLoss.BCEobj", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.metrics.bbox_iou", "utils.metrics.bbox_iou.detach().clamp().type", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "loss.ComputeLoss.BCEcls", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ps[].sigmoid", "utils.metrics.bbox_iou.detach().clamp", "loss.ComputeLoss.detach().item", "ps[].sigmoid", "utils.metrics.bbox_iou.detach", "range", "loss.ComputeLoss.detach"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.ComputeLoss.build_targets", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.bbox_iou"], ["", "", "def", "__call__", "(", "self", ",", "p", ",", "targets", ")", ":", "# predictions, targets, model", "\n", "        ", "device", "=", "targets", ".", "device", "\n", "lcls", ",", "lbox", ",", "lobj", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "device", ")", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "device", ")", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "device", ")", "\n", "tcls", ",", "tbox", ",", "indices", ",", "anchors", "=", "self", ".", "build_targets", "(", "p", ",", "targets", ")", "# targets", "\n", "\n", "# Losses", "\n", "for", "i", ",", "pi", "in", "enumerate", "(", "p", ")", ":", "# layer index, layer predictions", "\n", "            ", "b", ",", "a", ",", "gj", ",", "gi", "=", "indices", "[", "i", "]", "# image, anchor, gridy, gridx", "\n", "tobj", "=", "torch", ".", "zeros_like", "(", "pi", "[", "...", ",", "0", "]", ",", "device", "=", "device", ")", "# target obj", "\n", "\n", "n", "=", "b", ".", "shape", "[", "0", "]", "# number of targets", "\n", "if", "n", ":", "\n", "                ", "ps", "=", "pi", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "# prediction subset corresponding to targets", "\n", "\n", "# Regression", "\n", "pxy", "=", "ps", "[", ":", ",", ":", "2", "]", ".", "sigmoid", "(", ")", "*", "2", "-", "0.5", "\n", "pwh", "=", "(", "ps", "[", ":", ",", "2", ":", "4", "]", ".", "sigmoid", "(", ")", "*", "2", ")", "**", "2", "*", "anchors", "[", "i", "]", "\n", "pbox", "=", "torch", ".", "cat", "(", "(", "pxy", ",", "pwh", ")", ",", "1", ")", "# predicted box", "\n", "iou", "=", "bbox_iou", "(", "pbox", ".", "T", ",", "tbox", "[", "i", "]", ",", "x1y1x2y2", "=", "False", ",", "CIoU", "=", "False", ",", "SCA", "=", "True", ")", "# iou(prediction, target)", "\n", "lbox", "+=", "(", "1.0", "-", "iou", ")", ".", "mean", "(", ")", "# iou loss", "\n", "\n", "# Objectness", "\n", "score_iou", "=", "iou", ".", "detach", "(", ")", ".", "clamp", "(", "0", ")", ".", "type", "(", "tobj", ".", "dtype", ")", "\n", "if", "self", ".", "sort_obj_iou", ":", "\n", "                    ", "sort_id", "=", "torch", ".", "argsort", "(", "score_iou", ")", "\n", "b", ",", "a", ",", "gj", ",", "gi", ",", "score_iou", "=", "b", "[", "sort_id", "]", ",", "a", "[", "sort_id", "]", ",", "gj", "[", "sort_id", "]", ",", "gi", "[", "sort_id", "]", ",", "score_iou", "[", "sort_id", "]", "\n", "", "tobj", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "(", "1.0", "-", "self", ".", "gr", ")", "+", "self", ".", "gr", "*", "score_iou", "# iou ratio", "\n", "\n", "# Classification", "\n", "if", "self", ".", "nc", ">", "1", ":", "# cls loss (only if multiple classes)", "\n", "                    ", "t", "=", "torch", ".", "full_like", "(", "ps", "[", ":", ",", "5", ":", "]", ",", "self", ".", "cn", ",", "device", "=", "device", ")", "# targets", "\n", "t", "[", "range", "(", "n", ")", ",", "tcls", "[", "i", "]", "]", "=", "self", ".", "cp", "\n", "lcls", "+=", "self", ".", "BCEcls", "(", "ps", "[", ":", ",", "5", ":", "]", ",", "t", ")", "# BCE", "\n", "\n", "# Append targets to text file", "\n", "# with open('targets.txt', 'a') as file:", "\n", "#     [file.write('%11.5g ' * 4 % tuple(x) + '\\n') for x in torch.cat((txy[i], twh[i]), 1)]", "\n", "\n", "", "", "obji", "=", "self", ".", "BCEobj", "(", "pi", "[", "...", ",", "4", "]", ",", "tobj", ")", "\n", "lobj", "+=", "obji", "*", "self", ".", "balance", "[", "i", "]", "# obj loss", "\n", "if", "self", ".", "autobalance", ":", "\n", "                ", "self", ".", "balance", "[", "i", "]", "=", "self", ".", "balance", "[", "i", "]", "*", "0.9999", "+", "0.0001", "/", "obji", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "self", ".", "autobalance", ":", "\n", "            ", "self", ".", "balance", "=", "[", "x", "/", "self", ".", "balance", "[", "self", ".", "ssi", "]", "for", "x", "in", "self", ".", "balance", "]", "\n", "", "lbox", "*=", "self", ".", "hyp", "[", "'box'", "]", "\n", "lobj", "*=", "self", ".", "hyp", "[", "'obj'", "]", "\n", "lcls", "*=", "self", ".", "hyp", "[", "'cls'", "]", "\n", "bs", "=", "tobj", ".", "shape", "[", "0", "]", "# batch size", "\n", "\n", "return", "(", "lbox", "+", "lobj", "+", "lcls", ")", "*", "bs", ",", "torch", ".", "cat", "(", "(", "lbox", ",", "lobj", ",", "lcls", ")", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.ComputeLoss.build_targets": [[169, 223], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange().float().view().repeat", "torch.arange().float().view().repeat", "torch.arange().float().view().repeat", "torch.arange().float().view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "t[].long", "indices.append", "tbox.append", "anch.append", "tcls.append", "torch.arange().float().view", "torch.arange().float().view", "torch.arange().float().view", "torch.arange().float().view", "torch.cat.repeat", "torch.cat.repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "t[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "t.repeat", "gj.clamp_", "gi.clamp_", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.max().max", "torch.max().max", "torch.max().max", "torch.max().max", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "build_targets", "(", "self", ",", "p", ",", "targets", ")", ":", "\n", "# Build targets for compute_loss(), input targets(image,class,x,y,w,h)", "\n", "        ", "na", ",", "nt", "=", "self", ".", "na", ",", "targets", ".", "shape", "[", "0", "]", "# number of anchors, targets", "\n", "tcls", ",", "tbox", ",", "indices", ",", "anch", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "gain", "=", "torch", ".", "ones", "(", "7", ",", "device", "=", "targets", ".", "device", ")", "# normalized to gridspace gain", "\n", "ai", "=", "torch", ".", "arange", "(", "na", ",", "device", "=", "targets", ".", "device", ")", ".", "float", "(", ")", ".", "view", "(", "na", ",", "1", ")", ".", "repeat", "(", "1", ",", "nt", ")", "# same as .repeat_interleave(nt)", "\n", "targets", "=", "torch", ".", "cat", "(", "(", "targets", ".", "repeat", "(", "na", ",", "1", ",", "1", ")", ",", "ai", "[", ":", ",", ":", ",", "None", "]", ")", ",", "2", ")", "# append anchor indices", "\n", "\n", "g", "=", "0.5", "# bias", "\n", "off", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "0", "]", ",", "[", "0", ",", "-", "1", "]", ",", "# j,k,l,m", "\n", "# [1, 1], [1, -1], [-1, 1], [-1, -1],  # jk,jm,lk,lm", "\n", "]", ",", "device", "=", "targets", ".", "device", ")", ".", "float", "(", ")", "*", "g", "# offsets", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nl", ")", ":", "\n", "            ", "anchors", "=", "self", ".", "anchors", "[", "i", "]", "\n", "gain", "[", "2", ":", "6", "]", "=", "torch", ".", "tensor", "(", "p", "[", "i", "]", ".", "shape", ")", "[", "[", "3", ",", "2", ",", "3", ",", "2", "]", "]", "# xyxy gain", "\n", "\n", "# Match targets to anchors", "\n", "t", "=", "targets", "*", "gain", "\n", "if", "nt", ":", "\n", "# Matches", "\n", "                ", "r", "=", "t", "[", ":", ",", ":", ",", "4", ":", "6", "]", "/", "anchors", "[", ":", ",", "None", "]", "# wh ratio", "\n", "j", "=", "torch", ".", "max", "(", "r", ",", "1", "/", "r", ")", ".", "max", "(", "2", ")", "[", "0", "]", "<", "self", ".", "hyp", "[", "'anchor_t'", "]", "# compare", "\n", "# j = wh_iou(anchors, t[:, 4:6]) > model.hyp['iou_t']  # iou(3,n)=wh_iou(anchors(3,2), gwh(n,2))", "\n", "t", "=", "t", "[", "j", "]", "# filter", "\n", "\n", "# Offsets", "\n", "gxy", "=", "t", "[", ":", ",", "2", ":", "4", "]", "# grid xy", "\n", "gxi", "=", "gain", "[", "[", "2", ",", "3", "]", "]", "-", "gxy", "# inverse", "\n", "j", ",", "k", "=", "(", "(", "gxy", "%", "1", "<", "g", ")", "&", "(", "gxy", ">", "1", ")", ")", ".", "T", "\n", "l", ",", "m", "=", "(", "(", "gxi", "%", "1", "<", "g", ")", "&", "(", "gxi", ">", "1", ")", ")", ".", "T", "\n", "j", "=", "torch", ".", "stack", "(", "(", "torch", ".", "ones_like", "(", "j", ")", ",", "j", ",", "k", ",", "l", ",", "m", ")", ")", "\n", "t", "=", "t", ".", "repeat", "(", "(", "5", ",", "1", ",", "1", ")", ")", "[", "j", "]", "\n", "offsets", "=", "(", "torch", ".", "zeros_like", "(", "gxy", ")", "[", "None", "]", "+", "off", "[", ":", ",", "None", "]", ")", "[", "j", "]", "\n", "", "else", ":", "\n", "                ", "t", "=", "targets", "[", "0", "]", "\n", "offsets", "=", "0", "\n", "\n", "# Define", "\n", "", "b", ",", "c", "=", "t", "[", ":", ",", ":", "2", "]", ".", "long", "(", ")", ".", "T", "# image, class", "\n", "gxy", "=", "t", "[", ":", ",", "2", ":", "4", "]", "# grid xy", "\n", "gwh", "=", "t", "[", ":", ",", "4", ":", "6", "]", "# grid wh", "\n", "gij", "=", "(", "gxy", "-", "offsets", ")", ".", "long", "(", ")", "\n", "gi", ",", "gj", "=", "gij", ".", "T", "# grid xy indices", "\n", "\n", "# Append", "\n", "a", "=", "t", "[", ":", ",", "6", "]", ".", "long", "(", ")", "# anchor indices", "\n", "indices", ".", "append", "(", "(", "b", ",", "a", ",", "gj", ".", "clamp_", "(", "0", ",", "gain", "[", "3", "]", "-", "1", ")", ",", "gi", ".", "clamp_", "(", "0", ",", "gain", "[", "2", "]", "-", "1", ")", ")", ")", "# image, anchor, grid indices", "\n", "tbox", ".", "append", "(", "torch", ".", "cat", "(", "(", "gxy", "-", "gij", ",", "gwh", ")", ",", "1", ")", ")", "# box", "\n", "anch", ".", "append", "(", "anchors", "[", "a", "]", ")", "# anchors", "\n", "tcls", ".", "append", "(", "c", ")", "# class", "\n", "\n", "", "return", "tcls", ",", "tbox", ",", "indices", ",", "anch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.loss.smooth_BCE": [[13, 16], ["None"], "function", ["None"], ["def", "smooth_BCE", "(", "eps", "=", "0.1", ")", ":", "# https://github.com/ultralytics/yolov3/issues/238#issuecomment-598028441", "\n", "# return positive, negative label smoothing BCE targets", "\n", "    ", "return", "1.0", "-", "0.5", "*", "eps", ",", "0.5", "*", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.Albumentations.__init__": [[18, 39], ["utils.general.check_version", "A.Compose", "utils.general.LOGGER.info", "utils.general.LOGGER.info", "A.Blur", "A.MedianBlur", "A.ToGray", "A.CLAHE", "A.RandomBrightnessContrast", "A.RandomGamma", "A.ImageCompression", "A.BboxParams", "utils.general.colorstr", "utils.general.colorstr"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_version", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "transform", "=", "None", "\n", "try", ":", "\n", "            ", "import", "albumentations", "as", "A", "\n", "check_version", "(", "A", ".", "__version__", ",", "'1.0.3'", ",", "hard", "=", "True", ")", "# version requirement", "\n", "\n", "self", ".", "transform", "=", "A", ".", "Compose", "(", "[", "\n", "A", ".", "Blur", "(", "p", "=", "0.01", ")", ",", "\n", "A", ".", "MedianBlur", "(", "p", "=", "0.01", ")", ",", "\n", "A", ".", "ToGray", "(", "p", "=", "0.01", ")", ",", "\n", "A", ".", "CLAHE", "(", "p", "=", "0.01", ")", ",", "\n", "A", ".", "RandomBrightnessContrast", "(", "p", "=", "0.0", ")", ",", "\n", "A", ".", "RandomGamma", "(", "p", "=", "0.0", ")", ",", "\n", "A", ".", "ImageCompression", "(", "quality_lower", "=", "75", ",", "p", "=", "0.0", ")", "]", ",", "\n", "bbox_params", "=", "A", ".", "BboxParams", "(", "format", "=", "'yolo'", ",", "label_fields", "=", "[", "'class_labels'", "]", ")", ")", "\n", "\n", "LOGGER", ".", "info", "(", "colorstr", "(", "'albumentations: '", ")", "+", "', '", ".", "join", "(", "f'{x}'", "for", "x", "in", "self", ".", "transform", ".", "transforms", "if", "x", ".", "p", ")", ")", "\n", "", "except", "ImportError", ":", "# package not installed, skip", "\n", "            ", "pass", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "LOGGER", ".", "info", "(", "colorstr", "(", "'albumentations: '", ")", "+", "f'{e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.Albumentations.__call__": [[40, 45], ["augmentations.Albumentations.transform", "random.random", "numpy.array", "zip"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "im", ",", "labels", ",", "p", "=", "1.0", ")", ":", "\n", "        ", "if", "self", ".", "transform", "and", "random", ".", "random", "(", ")", "<", "p", ":", "\n", "            ", "new", "=", "self", ".", "transform", "(", "image", "=", "im", ",", "bboxes", "=", "labels", "[", ":", ",", "1", ":", "]", ",", "class_labels", "=", "labels", "[", ":", ",", "0", "]", ")", "# transformed", "\n", "im", ",", "labels", "=", "new", "[", "'image'", "]", ",", "np", ".", "array", "(", "[", "[", "c", ",", "*", "b", "]", "for", "c", ",", "b", "in", "zip", "(", "new", "[", "'class_labels'", "]", ",", "new", "[", "'bboxes'", "]", ")", "]", ")", "\n", "", "return", "im", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.augment_hsv": [[47, 61], ["cv2.split", "numpy.arange", "numpy.clip().astype", "numpy.clip().astype", "cv2.merge", "cv2.cvtColor", "cv2.cvtColor", "numpy.random.uniform", "numpy.clip", "numpy.clip", "cv2.LUT", "cv2.LUT", "cv2.LUT"], "function", ["None"], ["", "", "def", "augment_hsv", "(", "im", ",", "hgain", "=", "0.5", ",", "sgain", "=", "0.5", ",", "vgain", "=", "0.5", ")", ":", "\n", "# HSV color-space augmentation", "\n", "    ", "if", "hgain", "or", "sgain", "or", "vgain", ":", "\n", "        ", "r", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "3", ")", "*", "[", "hgain", ",", "sgain", ",", "vgain", "]", "+", "1", "# random gains", "\n", "hue", ",", "sat", ",", "val", "=", "cv2", ".", "split", "(", "cv2", ".", "cvtColor", "(", "im", ",", "cv2", ".", "COLOR_BGR2HSV", ")", ")", "\n", "dtype", "=", "im", ".", "dtype", "# uint8", "\n", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "256", ",", "dtype", "=", "r", ".", "dtype", ")", "\n", "lut_hue", "=", "(", "(", "x", "*", "r", "[", "0", "]", ")", "%", "180", ")", ".", "astype", "(", "dtype", ")", "\n", "lut_sat", "=", "np", ".", "clip", "(", "x", "*", "r", "[", "1", "]", ",", "0", ",", "255", ")", ".", "astype", "(", "dtype", ")", "\n", "lut_val", "=", "np", ".", "clip", "(", "x", "*", "r", "[", "2", "]", ",", "0", ",", "255", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "im_hsv", "=", "cv2", ".", "merge", "(", "(", "cv2", ".", "LUT", "(", "hue", ",", "lut_hue", ")", ",", "cv2", ".", "LUT", "(", "sat", ",", "lut_sat", ")", ",", "cv2", ".", "LUT", "(", "val", ",", "lut_val", ")", ")", ")", "\n", "cv2", ".", "cvtColor", "(", "im_hsv", ",", "cv2", ".", "COLOR_HSV2BGR", ",", "dst", "=", "im", ")", "# no return needed", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.hist_equalize": [[63, 72], ["cv2.cvtColor", "cv2.cvtColor", "cv2.createCLAHE", "cv2.createCLAHE.apply", "cv2.equalizeHist"], "function", ["None"], ["", "", "def", "hist_equalize", "(", "im", ",", "clahe", "=", "True", ",", "bgr", "=", "False", ")", ":", "\n", "# Equalize histogram on BGR image 'im' with im.shape(n,m,3) and range 0-255", "\n", "    ", "yuv", "=", "cv2", ".", "cvtColor", "(", "im", ",", "cv2", ".", "COLOR_BGR2YUV", "if", "bgr", "else", "cv2", ".", "COLOR_RGB2YUV", ")", "\n", "if", "clahe", ":", "\n", "        ", "c", "=", "cv2", ".", "createCLAHE", "(", "clipLimit", "=", "2.0", ",", "tileGridSize", "=", "(", "8", ",", "8", ")", ")", "\n", "yuv", "[", ":", ",", ":", ",", "0", "]", "=", "c", ".", "apply", "(", "yuv", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "yuv", "[", ":", ",", ":", ",", "0", "]", "=", "cv2", ".", "equalizeHist", "(", "yuv", "[", ":", ",", ":", ",", "0", "]", ")", "# equalize Y channel histogram", "\n", "", "return", "cv2", ".", "cvtColor", "(", "yuv", ",", "cv2", ".", "COLOR_YUV2BGR", "if", "bgr", "else", "cv2", ".", "COLOR_YUV2RGB", ")", "# convert YUV image to RGB", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.replicate": [[74, 89], ["labels[].astype", "s.argsort", "numpy.append", "round", "int", "int", "random.uniform", "random.uniform"], "function", ["None"], ["", "def", "replicate", "(", "im", ",", "labels", ")", ":", "\n", "# Replicate labels", "\n", "    ", "h", ",", "w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "boxes", "=", "labels", "[", ":", ",", "1", ":", "]", ".", "astype", "(", "int", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "boxes", ".", "T", "\n", "s", "=", "(", "(", "x2", "-", "x1", ")", "+", "(", "y2", "-", "y1", ")", ")", "/", "2", "# side length (pixels)", "\n", "for", "i", "in", "s", ".", "argsort", "(", ")", "[", ":", "round", "(", "s", ".", "size", "*", "0.5", ")", "]", ":", "# smallest indices", "\n", "        ", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "boxes", "[", "i", "]", "\n", "bh", ",", "bw", "=", "y2b", "-", "y1b", ",", "x2b", "-", "x1b", "\n", "yc", ",", "xc", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "h", "-", "bh", ")", ")", ",", "int", "(", "random", ".", "uniform", "(", "0", ",", "w", "-", "bw", ")", ")", "# offset x, y", "\n", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "[", "xc", ",", "yc", ",", "xc", "+", "bw", ",", "yc", "+", "bh", "]", "\n", "im", "[", "y1a", ":", "y2a", ",", "x1a", ":", "x2a", "]", "=", "im", "[", "y1b", ":", "y2b", ",", "x1b", ":", "x2b", "]", "# im4[ymin:ymax, xmin:xmax]", "\n", "labels", "=", "np", ".", "append", "(", "labels", ",", "[", "[", "labels", "[", "i", ",", "0", "]", ",", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "im", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.letterbox": [[91, 122], ["isinstance", "min", "cv2.copyMakeBorder", "min", "int", "int", "cv2.resize", "int", "int", "int", "int", "round", "round", "numpy.mod", "numpy.mod", "round", "round", "round", "round"], "function", ["None"], ["", "def", "letterbox", "(", "im", ",", "new_shape", "=", "(", "640", ",", "640", ")", ",", "color", "=", "(", "114", ",", "114", ",", "114", ")", ",", "auto", "=", "True", ",", "scaleFill", "=", "False", ",", "scaleup", "=", "True", ",", "stride", "=", "32", ")", ":", "\n", "# Resize and pad image while meeting stride-multiple constraints", "\n", "    ", "shape", "=", "im", ".", "shape", "[", ":", "2", "]", "# current shape [height, width]", "\n", "if", "isinstance", "(", "new_shape", ",", "int", ")", ":", "\n", "        ", "new_shape", "=", "(", "new_shape", ",", "new_shape", ")", "\n", "\n", "# Scale ratio (new / old)", "\n", "", "r", "=", "min", "(", "new_shape", "[", "0", "]", "/", "shape", "[", "0", "]", ",", "new_shape", "[", "1", "]", "/", "shape", "[", "1", "]", ")", "\n", "if", "not", "scaleup", ":", "# only scale down, do not scale up (for better val mAP)", "\n", "        ", "r", "=", "min", "(", "r", ",", "1.0", ")", "\n", "\n", "# Compute padding", "\n", "", "ratio", "=", "r", ",", "r", "# width, height ratios", "\n", "new_unpad", "=", "int", "(", "round", "(", "shape", "[", "1", "]", "*", "r", ")", ")", ",", "int", "(", "round", "(", "shape", "[", "0", "]", "*", "r", ")", ")", "\n", "dw", ",", "dh", "=", "new_shape", "[", "1", "]", "-", "new_unpad", "[", "0", "]", ",", "new_shape", "[", "0", "]", "-", "new_unpad", "[", "1", "]", "# wh padding", "\n", "if", "auto", ":", "# minimum rectangle", "\n", "        ", "dw", ",", "dh", "=", "np", ".", "mod", "(", "dw", ",", "stride", ")", ",", "np", ".", "mod", "(", "dh", ",", "stride", ")", "# wh padding", "\n", "", "elif", "scaleFill", ":", "# stretch", "\n", "        ", "dw", ",", "dh", "=", "0.0", ",", "0.0", "\n", "new_unpad", "=", "(", "new_shape", "[", "1", "]", ",", "new_shape", "[", "0", "]", ")", "\n", "ratio", "=", "new_shape", "[", "1", "]", "/", "shape", "[", "1", "]", ",", "new_shape", "[", "0", "]", "/", "shape", "[", "0", "]", "# width, height ratios", "\n", "\n", "", "dw", "/=", "2", "# divide padding into 2 sides", "\n", "dh", "/=", "2", "\n", "\n", "if", "shape", "[", ":", ":", "-", "1", "]", "!=", "new_unpad", ":", "# resize", "\n", "        ", "im", "=", "cv2", ".", "resize", "(", "im", ",", "new_unpad", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "top", ",", "bottom", "=", "int", "(", "round", "(", "dh", "-", "0.1", ")", ")", ",", "int", "(", "round", "(", "dh", "+", "0.1", ")", ")", "\n", "left", ",", "right", "=", "int", "(", "round", "(", "dw", "-", "0.1", ")", ")", ",", "int", "(", "round", "(", "dw", "+", "0.1", ")", ")", "\n", "im", "=", "cv2", ".", "copyMakeBorder", "(", "im", ",", "top", ",", "bottom", ",", "left", ",", "right", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "color", ")", "# add border", "\n", "return", "im", ",", "ratio", ",", "(", "dw", ",", "dh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.random_perspective": [[124, 211], ["numpy.eye", "numpy.eye", "random.uniform", "random.uniform", "numpy.eye", "random.uniform", "random.uniform", "cv2.getRotationMatrix2D", "numpy.eye", "math.tan", "math.tan", "numpy.eye", "len", "random.uniform", "random.uniform", "any", "numpy.zeros", "augmentations.box_candidates", "cv2.warpPerspective", "cv2.warpAffine", "utils.general.resample_segments", "enumerate", "numpy.ones", "targets[].reshape", "new[].clip", "new[].clip", "random.uniform", "random.uniform", "x.any", "numpy.ones", "utils.general.segment2box", "numpy.concatenate().reshape", "numpy.eye", "len", "numpy.concatenate", "x.min", "y.min", "x.max", "y.max"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.box_candidates", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.resample_segments", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.segment2box"], ["", "def", "random_perspective", "(", "im", ",", "targets", "=", "(", ")", ",", "segments", "=", "(", ")", ",", "degrees", "=", "10", ",", "translate", "=", ".1", ",", "scale", "=", ".1", ",", "shear", "=", "10", ",", "perspective", "=", "0.0", ",", "\n", "border", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "# torchvision.transforms.RandomAffine(degrees=(-10, 10), translate=(0.1, 0.1), scale=(0.9, 1.1), shear=(-10, 10))", "\n", "# targets = [cls, xyxy]", "\n", "\n", "    ", "height", "=", "im", ".", "shape", "[", "0", "]", "+", "border", "[", "0", "]", "*", "2", "# shape(h,w,c)", "\n", "width", "=", "im", ".", "shape", "[", "1", "]", "+", "border", "[", "1", "]", "*", "2", "\n", "\n", "# Center", "\n", "C", "=", "np", ".", "eye", "(", "3", ")", "\n", "C", "[", "0", ",", "2", "]", "=", "-", "im", ".", "shape", "[", "1", "]", "/", "2", "# x translation (pixels)", "\n", "C", "[", "1", ",", "2", "]", "=", "-", "im", ".", "shape", "[", "0", "]", "/", "2", "# y translation (pixels)", "\n", "\n", "# Perspective", "\n", "P", "=", "np", ".", "eye", "(", "3", ")", "\n", "P", "[", "2", ",", "0", "]", "=", "random", ".", "uniform", "(", "-", "perspective", ",", "perspective", ")", "# x perspective (about y)", "\n", "P", "[", "2", ",", "1", "]", "=", "random", ".", "uniform", "(", "-", "perspective", ",", "perspective", ")", "# y perspective (about x)", "\n", "\n", "# Rotation and Scale", "\n", "R", "=", "np", ".", "eye", "(", "3", ")", "\n", "a", "=", "random", ".", "uniform", "(", "-", "degrees", ",", "degrees", ")", "\n", "# a += random.choice([-180, -90, 0, 90])  # add 90deg rotations to small rotations", "\n", "s", "=", "random", ".", "uniform", "(", "1", "-", "scale", ",", "1", "+", "scale", ")", "\n", "# s = 2 ** random.uniform(-scale, scale)", "\n", "R", "[", ":", "2", "]", "=", "cv2", ".", "getRotationMatrix2D", "(", "angle", "=", "a", ",", "center", "=", "(", "0", ",", "0", ")", ",", "scale", "=", "s", ")", "\n", "\n", "# Shear", "\n", "S", "=", "np", ".", "eye", "(", "3", ")", "\n", "S", "[", "0", ",", "1", "]", "=", "math", ".", "tan", "(", "random", ".", "uniform", "(", "-", "shear", ",", "shear", ")", "*", "math", ".", "pi", "/", "180", ")", "# x shear (deg)", "\n", "S", "[", "1", ",", "0", "]", "=", "math", ".", "tan", "(", "random", ".", "uniform", "(", "-", "shear", ",", "shear", ")", "*", "math", ".", "pi", "/", "180", ")", "# y shear (deg)", "\n", "\n", "# Translation", "\n", "T", "=", "np", ".", "eye", "(", "3", ")", "\n", "T", "[", "0", ",", "2", "]", "=", "random", ".", "uniform", "(", "0.5", "-", "translate", ",", "0.5", "+", "translate", ")", "*", "width", "# x translation (pixels)", "\n", "T", "[", "1", ",", "2", "]", "=", "random", ".", "uniform", "(", "0.5", "-", "translate", ",", "0.5", "+", "translate", ")", "*", "height", "# y translation (pixels)", "\n", "\n", "# Combined rotation matrix", "\n", "M", "=", "T", "@", "S", "@", "R", "@", "P", "@", "C", "# order of operations (right to left) is IMPORTANT", "\n", "if", "(", "border", "[", "0", "]", "!=", "0", ")", "or", "(", "border", "[", "1", "]", "!=", "0", ")", "or", "(", "M", "!=", "np", ".", "eye", "(", "3", ")", ")", ".", "any", "(", ")", ":", "# image changed", "\n", "        ", "if", "perspective", ":", "\n", "            ", "im", "=", "cv2", ".", "warpPerspective", "(", "im", ",", "M", ",", "dsize", "=", "(", "width", ",", "height", ")", ",", "borderValue", "=", "(", "114", ",", "114", ",", "114", ")", ")", "\n", "", "else", ":", "# affine", "\n", "            ", "im", "=", "cv2", ".", "warpAffine", "(", "im", ",", "M", "[", ":", "2", "]", ",", "dsize", "=", "(", "width", ",", "height", ")", ",", "borderValue", "=", "(", "114", ",", "114", ",", "114", ")", ")", "\n", "\n", "# Visualize", "\n", "# import matplotlib.pyplot as plt", "\n", "# ax = plt.subplots(1, 2, figsize=(12, 6))[1].ravel()", "\n", "# ax[0].imshow(im[:, :, ::-1])  # base", "\n", "# ax[1].imshow(im2[:, :, ::-1])  # warped", "\n", "\n", "# Transform label coordinates", "\n", "", "", "n", "=", "len", "(", "targets", ")", "\n", "if", "n", ":", "\n", "        ", "use_segments", "=", "any", "(", "x", ".", "any", "(", ")", "for", "x", "in", "segments", ")", "\n", "new", "=", "np", ".", "zeros", "(", "(", "n", ",", "4", ")", ")", "\n", "if", "use_segments", ":", "# warp segments", "\n", "            ", "segments", "=", "resample_segments", "(", "segments", ")", "# upsample", "\n", "for", "i", ",", "segment", "in", "enumerate", "(", "segments", ")", ":", "\n", "                ", "xy", "=", "np", ".", "ones", "(", "(", "len", "(", "segment", ")", ",", "3", ")", ")", "\n", "xy", "[", ":", ",", ":", "2", "]", "=", "segment", "\n", "xy", "=", "xy", "@", "M", ".", "T", "# transform", "\n", "xy", "=", "xy", "[", ":", ",", ":", "2", "]", "/", "xy", "[", ":", ",", "2", ":", "3", "]", "if", "perspective", "else", "xy", "[", ":", ",", ":", "2", "]", "# perspective rescale or affine", "\n", "\n", "# clip", "\n", "new", "[", "i", "]", "=", "segment2box", "(", "xy", ",", "width", ",", "height", ")", "\n", "\n", "", "", "else", ":", "# warp boxes", "\n", "            ", "xy", "=", "np", ".", "ones", "(", "(", "n", "*", "4", ",", "3", ")", ")", "\n", "xy", "[", ":", ",", ":", "2", "]", "=", "targets", "[", ":", ",", "[", "1", ",", "2", ",", "3", ",", "4", ",", "1", ",", "4", ",", "3", ",", "2", "]", "]", ".", "reshape", "(", "n", "*", "4", ",", "2", ")", "# x1y1, x2y2, x1y2, x2y1", "\n", "xy", "=", "xy", "@", "M", ".", "T", "# transform", "\n", "xy", "=", "(", "xy", "[", ":", ",", ":", "2", "]", "/", "xy", "[", ":", ",", "2", ":", "3", "]", "if", "perspective", "else", "xy", "[", ":", ",", ":", "2", "]", ")", ".", "reshape", "(", "n", ",", "8", ")", "# perspective rescale or affine", "\n", "\n", "# create new boxes", "\n", "x", "=", "xy", "[", ":", ",", "[", "0", ",", "2", ",", "4", ",", "6", "]", "]", "\n", "y", "=", "xy", "[", ":", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", "\n", "new", "=", "np", ".", "concatenate", "(", "(", "x", ".", "min", "(", "1", ")", ",", "y", ".", "min", "(", "1", ")", ",", "x", ".", "max", "(", "1", ")", ",", "y", ".", "max", "(", "1", ")", ")", ")", ".", "reshape", "(", "4", ",", "n", ")", ".", "T", "\n", "\n", "# clip", "\n", "new", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "new", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "clip", "(", "0", ",", "width", ")", "\n", "new", "[", ":", ",", "[", "1", ",", "3", "]", "]", "=", "new", "[", ":", ",", "[", "1", ",", "3", "]", "]", ".", "clip", "(", "0", ",", "height", ")", "\n", "\n", "# filter candidates", "\n", "", "i", "=", "box_candidates", "(", "box1", "=", "targets", "[", ":", ",", "1", ":", "5", "]", ".", "T", "*", "s", ",", "box2", "=", "new", ".", "T", ",", "area_thr", "=", "0.01", "if", "use_segments", "else", "0.10", ")", "\n", "targets", "=", "targets", "[", "i", "]", "\n", "targets", "[", ":", ",", "1", ":", "5", "]", "=", "new", "[", "i", "]", "\n", "\n", "", "return", "im", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.copy_paste": [[213, 235], ["len", "numpy.zeros", "random.sample", "cv2.bitwise_and", "cv2.flip", "range", "utils.metrics.bbox_ioa", "round", "numpy.concatenate", "segments.append", "cv2.drawContours", "numpy.concatenate", "segments[].astype"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.bbox_ioa"], ["", "def", "copy_paste", "(", "im", ",", "labels", ",", "segments", ",", "p", "=", "0.5", ")", ":", "\n", "# Implement Copy-Paste augmentation https://arxiv.org/abs/2012.07177, labels as nx5 np.array(cls, xyxy)", "\n", "    ", "n", "=", "len", "(", "segments", ")", "\n", "if", "p", "and", "n", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "im", ".", "shape", "# height, width, channels", "\n", "im_new", "=", "np", ".", "zeros", "(", "im", ".", "shape", ",", "np", ".", "uint8", ")", "\n", "for", "j", "in", "random", ".", "sample", "(", "range", "(", "n", ")", ",", "k", "=", "round", "(", "p", "*", "n", ")", ")", ":", "\n", "            ", "l", ",", "s", "=", "labels", "[", "j", "]", ",", "segments", "[", "j", "]", "\n", "box", "=", "w", "-", "l", "[", "3", "]", ",", "l", "[", "2", "]", ",", "w", "-", "l", "[", "1", "]", ",", "l", "[", "4", "]", "\n", "ioa", "=", "bbox_ioa", "(", "box", ",", "labels", "[", ":", ",", "1", ":", "5", "]", ")", "# intersection over area", "\n", "if", "(", "ioa", "<", "0.30", ")", ".", "all", "(", ")", ":", "# allow 30% obscuration of existing labels", "\n", "                ", "labels", "=", "np", ".", "concatenate", "(", "(", "labels", ",", "[", "[", "l", "[", "0", "]", ",", "*", "box", "]", "]", ")", ",", "0", ")", "\n", "segments", ".", "append", "(", "np", ".", "concatenate", "(", "(", "w", "-", "s", "[", ":", ",", "0", ":", "1", "]", ",", "s", "[", ":", ",", "1", ":", "2", "]", ")", ",", "1", ")", ")", "\n", "cv2", ".", "drawContours", "(", "im_new", ",", "[", "segments", "[", "j", "]", ".", "astype", "(", "np", ".", "int32", ")", "]", ",", "-", "1", ",", "(", "255", ",", "255", ",", "255", ")", ",", "cv2", ".", "FILLED", ")", "\n", "\n", "", "", "result", "=", "cv2", ".", "bitwise_and", "(", "src1", "=", "im", ",", "src2", "=", "im_new", ")", "\n", "result", "=", "cv2", ".", "flip", "(", "result", ",", "1", ")", "# augment segments (flip left-right)", "\n", "i", "=", "result", ">", "0", "# pixels to replace", "\n", "# i[:, :] = result.max(2).reshape(h, w, 1)  # act over ch", "\n", "im", "[", "i", "]", "=", "result", "[", "i", "]", "# cv2.imwrite('debug.jpg', im)  # debug", "\n", "\n", "", "return", "im", ",", "labels", ",", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.cutout": [[237, 262], ["random.random", "random.randint", "random.randint", "max", "max", "min", "min", "int", "int", "random.randint", "len", "numpy.array", "utils.metrics.bbox_ioa", "random.randint", "random.randint", "range"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.bbox_ioa"], ["", "def", "cutout", "(", "im", ",", "labels", ",", "p", "=", "0.5", ")", ":", "\n", "# Applies image cutout augmentation https://arxiv.org/abs/1708.04552", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "p", ":", "\n", "        ", "h", ",", "w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "scales", "=", "[", "0.5", "]", "*", "1", "+", "[", "0.25", "]", "*", "2", "+", "[", "0.125", "]", "*", "4", "+", "[", "0.0625", "]", "*", "8", "+", "[", "0.03125", "]", "*", "16", "# image size fraction", "\n", "for", "s", "in", "scales", ":", "\n", "            ", "mask_h", "=", "random", ".", "randint", "(", "1", ",", "int", "(", "h", "*", "s", ")", ")", "# create random masks", "\n", "mask_w", "=", "random", ".", "randint", "(", "1", ",", "int", "(", "w", "*", "s", ")", ")", "\n", "\n", "# box", "\n", "xmin", "=", "max", "(", "0", ",", "random", ".", "randint", "(", "0", ",", "w", ")", "-", "mask_w", "//", "2", ")", "\n", "ymin", "=", "max", "(", "0", ",", "random", ".", "randint", "(", "0", ",", "h", ")", "-", "mask_h", "//", "2", ")", "\n", "xmax", "=", "min", "(", "w", ",", "xmin", "+", "mask_w", ")", "\n", "ymax", "=", "min", "(", "h", ",", "ymin", "+", "mask_h", ")", "\n", "\n", "# apply random color mask", "\n", "im", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "=", "[", "random", ".", "randint", "(", "64", ",", "191", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "\n", "# return unobscured labels", "\n", "if", "len", "(", "labels", ")", "and", "s", ">", "0.03", ":", "\n", "                ", "box", "=", "np", ".", "array", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ioa", "=", "bbox_ioa", "(", "box", ",", "labels", "[", ":", ",", "1", ":", "5", "]", ")", "# intersection over area", "\n", "labels", "=", "labels", "[", "ioa", "<", "0.60", "]", "# remove >60% obscured labels", "\n", "\n", "", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.mixup": [[264, 270], ["numpy.random.beta", "numpy.concatenate"], "function", ["None"], ["", "def", "mixup", "(", "im", ",", "labels", ",", "im2", ",", "labels2", ")", ":", "\n", "# Applies MixUp augmentation https://arxiv.org/pdf/1710.09412.pdf", "\n", "    ", "r", "=", "np", ".", "random", ".", "beta", "(", "32.0", ",", "32.0", ")", "# mixup ratio, alpha=beta=32.0", "\n", "im", "=", "(", "im", "*", "r", "+", "im2", "*", "(", "1", "-", "r", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "(", "labels", ",", "labels2", ")", ",", "0", ")", "\n", "return", "im", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.box_candidates": [[272, 278], ["numpy.maximum"], "function", ["None"], ["", "def", "box_candidates", "(", "box1", ",", "box2", ",", "wh_thr", "=", "2", ",", "ar_thr", "=", "20", ",", "area_thr", "=", "0.1", ",", "eps", "=", "1e-16", ")", ":", "# box1(4,n), box2(4,n)", "\n", "# Compute candidate boxes: box1 before augment, box2 after augment, wh_thr (pixels), aspect_ratio_thr, area_ratio", "\n", "    ", "w1", ",", "h1", "=", "box1", "[", "2", "]", "-", "box1", "[", "0", "]", ",", "box1", "[", "3", "]", "-", "box1", "[", "1", "]", "\n", "w2", ",", "h2", "=", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", ",", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "\n", "ar", "=", "np", ".", "maximum", "(", "w2", "/", "(", "h2", "+", "eps", ")", ",", "h2", "/", "(", "w2", "+", "eps", ")", ")", "# aspect ratio", "\n", "return", "(", "w2", ">", "wh_thr", ")", "&", "(", "h2", ">", "wh_thr", ")", "&", "(", "w2", "*", "h2", "/", "(", "w1", "*", "h1", "+", "eps", ")", ">", "area_thr", ")", "&", "(", "ar", "<", "ar_thr", ")", "# candidates", "\n", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.__init__.notebook_init": [[7, 19], ["print", "display.clear_output", "select_device", "print", "emojis"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.emojis"], ["def", "notebook_init", "(", ")", ":", "\n", "# For  notebooks", "\n", "    ", "print", "(", "'Checking setup...'", ")", "\n", "from", "IPython", "import", "display", "# to display images and clear console output", "\n", "\n", "from", "utils", ".", "general", "import", "emojis", "\n", "from", "utils", ".", "torch_utils", "import", "select_device", "# imports", "\n", "\n", "display", ".", "clear_output", "(", ")", "\n", "select_device", "(", "newline", "=", "False", ")", "\n", "print", "(", "emojis", "(", "'Setup complete \u2705'", ")", ")", "\n", "return", "display", "\n", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.SiLU.forward": [[13, 16], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.Hardswish.forward": [[19, 23], ["torch.hardtanh", "torch.hardtanh", "torch.hardtanh"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "x", ")", ":", "\n", "# return x * F.hardsigmoid(x)  # for torchscript and CoreML", "\n", "        ", "return", "x", "*", "F", ".", "hardtanh", "(", "x", "+", "3", ",", "0.0", ",", "6.0", ")", "/", "6.0", "# for torchscript, CoreML and ONNX", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.Mish.forward": [[27, 30], ["torch.softplus().tanh", "torch.softplus().tanh", "torch.softplus().tanh", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "x", ")", ":", "\n", "        ", "return", "x", "*", "F", ".", "softplus", "(", "x", ")", ".", "tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.MemoryEfficientMish.forward": [[46, 48], ["activations.MemoryEfficientMish.F.apply"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "F", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.FReLU.__init__": [[52, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "k", "=", "3", ")", ":", "# ch_in, kernel", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "c1", ",", "c1", ",", "k", ",", "1", ",", "1", ",", "groups", "=", "c1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "c1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.FReLU.forward": [[57, 59], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "activations.FReLU.bn", "activations.FReLU.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "max", "(", "x", ",", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.AconC.__init__": [[68, 73], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["def", "__init__", "(", "self", ",", "c1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p1", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "c1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "p2", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "c1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "c1", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.AconC.forward": [[74, 77], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "dpx", "=", "(", "self", ".", "p1", "-", "self", ".", "p2", ")", "*", "x", "\n", "return", "dpx", "*", "torch", ".", "sigmoid", "(", "self", ".", "beta", "*", "dpx", ")", "+", "self", ".", "p2", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.MetaAconC.__init__": [[85, 92], ["torch.Module.__init__", "max", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["def", "__init__", "(", "self", ",", "c1", ",", "k", "=", "1", ",", "s", "=", "1", ",", "r", "=", "16", ")", ":", "# ch_in, kernel, stride, r", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c2", "=", "max", "(", "r", ",", "c1", "//", "r", ")", "\n", "self", ".", "p1", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "c1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "p2", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "c1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "c1", ",", "c2", ",", "k", ",", "s", ",", "bias", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "c2", ",", "c1", ",", "k", ",", "s", ",", "bias", "=", "True", ")", "\n", "# self.bn1 = nn.BatchNorm2d(c2)", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.activations.MetaAconC.forward": [[95, 102], ["x.mean().mean", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "activations.MetaAconC.fc2", "x.mean", "activations.MetaAconC.fc1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", ".", "mean", "(", "dim", "=", "2", ",", "keepdims", "=", "True", ")", ".", "mean", "(", "dim", "=", "3", ",", "keepdims", "=", "True", ")", "\n", "# batch-size 1 bug/instabilities https://github.com/ultralytics/yolov5/issues/2891", "\n", "# beta = torch.sigmoid(self.bn2(self.fc2(self.bn1(self.fc1(y)))))  # bug/unstable", "\n", "beta", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc2", "(", "self", ".", "fc1", "(", "y", ")", ")", ")", "# bug patch BN layers removed", "\n", "dpx", "=", "(", "self", ".", "p1", "-", "self", ".", "p2", ")", "*", "x", "\n", "return", "dpx", "*", "torch", ".", "sigmoid", "(", "beta", "*", "dpx", ")", "+", "self", ".", "p2", "*", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.register_action": [[38, 50], ["callable", "callbacks.Callbacks._callbacks[].append"], "methods", ["None"], ["def", "register_action", "(", "self", ",", "hook", ",", "name", "=", "''", ",", "callback", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Register a new action to a callback hook\n\n        Args:\n            hook        The callback hook name to register the action to\n            name        The name of the action for later reference\n            callback    The callback to fire\n        \"\"\"", "\n", "assert", "hook", "in", "self", ".", "_callbacks", ",", "f\"hook '{hook}' not found in callbacks {self._callbacks}\"", "\n", "assert", "callable", "(", "callback", ")", ",", "f\"callback '{callback}' is not callable\"", "\n", "self", ".", "_callbacks", "[", "hook", "]", ".", "append", "(", "{", "'name'", ":", "name", ",", "'callback'", ":", "callback", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.get_registered_actions": [[51, 62], ["None"], "methods", ["None"], ["", "def", "get_registered_actions", "(", "self", ",", "hook", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\n        Returns all the registered actions by callback hook\n\n        Args:\n            hook The name of the hook to check, defaults to all\n        \"\"\"", "\n", "if", "hook", ":", "\n", "            ", "return", "self", ".", "_callbacks", "[", "hook", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_callbacks", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run": [[63, 77], ["None"], "methods", ["None"], ["", "", "def", "run", "(", "self", ",", "hook", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Loop through the registered actions and fire all callbacks\n\n        Args:\n            hook The name of the hook to check, defaults to all\n            args Arguments to receive from\n            kwargs Keyword Arguments to receive from\n        \"\"\"", "\n", "\n", "assert", "hook", "in", "self", ".", "_callbacks", ",", "f\"hook '{hook}' not found in callbacks {self._callbacks}\"", "\n", "\n", "for", "logger", "in", "self", ".", "_callbacks", "[", "hook", "]", ":", "\n", "            ", "logger", "[", "'callback'", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.EarlyStopping.__init__": [[263, 268], ["float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "patience", "=", "30", ")", ":", "\n", "        ", "self", ".", "best_fitness", "=", "0.0", "# i.e. mAP", "\n", "self", ".", "best_epoch", "=", "0", "\n", "self", ".", "patience", "=", "patience", "or", "float", "(", "'inf'", ")", "# epochs to wait after fitness stops improving to stop", "\n", "self", ".", "possible_stop", "=", "False", "# possible stop may occur next epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.EarlyStopping.__call__": [[269, 282], ["utils.general.LOGGER.info"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["", "def", "__call__", "(", "self", ",", "epoch", ",", "fitness", ")", ":", "\n", "        ", "if", "fitness", ">=", "self", ".", "best_fitness", ":", "# >= 0 to allow for early zero-fitness stage of training", "\n", "            ", "self", ".", "best_epoch", "=", "epoch", "\n", "self", ".", "best_fitness", "=", "fitness", "\n", "", "delta", "=", "epoch", "-", "self", ".", "best_epoch", "# epochs without improvement", "\n", "self", ".", "possible_stop", "=", "delta", ">=", "(", "self", ".", "patience", "-", "1", ")", "# possible stop may occur next epoch", "\n", "stop", "=", "delta", ">=", "self", ".", "patience", "# stop training if patience exceeded", "\n", "if", "stop", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f'Stopping training early as no improvement observed in last {self.patience} epochs. '", "\n", "f'Best results observed at epoch {self.best_epoch}, best model saved as best.pt.\\n'", "\n", "f'To update EarlyStopping(patience={self.patience}) pass a new patience value, '", "\n", "f'i.e. `python train.py --patience 300` or use `--patience 0` to disable EarlyStopping.'", ")", "\n", "", "return", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.ModelEMA.__init__": [[294, 303], ["copy.deepcopy().eval", "torch_utils.ModelEMA.ema.parameters", "p.requires_grad_", "copy.deepcopy", "math.exp", "torch_utils.is_parallel"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.is_parallel"], ["def", "__init__", "(", "self", ",", "model", ",", "decay", "=", "0.9999", ",", "updates", "=", "0", ")", ":", "\n", "# Create EMA", "\n", "        ", "self", ".", "ema", "=", "deepcopy", "(", "model", ".", "module", "if", "is_parallel", "(", "model", ")", "else", "model", ")", ".", "eval", "(", ")", "# FP32 EMA", "\n", "# if next(model.parameters()).device.type != 'cpu':", "\n", "#     self.ema.half()  # FP16 EMA", "\n", "self", ".", "updates", "=", "updates", "# number of EMA updates", "\n", "self", ".", "decay", "=", "lambda", "x", ":", "decay", "*", "(", "1", "-", "math", ".", "exp", "(", "-", "x", "/", "2000", ")", ")", "# decay exponential ramp (to help early epochs)", "\n", "for", "p", "in", "self", ".", "ema", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.ModelEMA.update": [[304, 315], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch_utils.ModelEMA.decay", "torch_utils.ModelEMA.ema.state_dict().items", "torch_utils.is_parallel", "model.module.state_dict", "model.state_dict", "torch_utils.ModelEMA.ema.state_dict", "msd[].detach"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.is_parallel"], ["", "", "def", "update", "(", "self", ",", "model", ")", ":", "\n", "# Update EMA parameters", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "updates", "+=", "1", "\n", "d", "=", "self", ".", "decay", "(", "self", ".", "updates", ")", "\n", "\n", "msd", "=", "model", ".", "module", ".", "state_dict", "(", ")", "if", "is_parallel", "(", "model", ")", "else", "model", ".", "state_dict", "(", ")", "# model state_dict", "\n", "for", "k", ",", "v", "in", "self", ".", "ema", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "if", "v", ".", "dtype", ".", "is_floating_point", ":", "\n", "                    ", "v", "*=", "d", "\n", "v", "+=", "(", "1", "-", "d", ")", "*", "msd", "[", "k", "]", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.ModelEMA.update_attr": [[316, 319], ["torch_utils.copy_attr"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.copy_attr"], ["", "", "", "", "def", "update_attr", "(", "self", ",", "model", ",", "include", "=", "(", ")", ",", "exclude", "=", "(", "'process_group'", ",", "'reducer'", ")", ")", ":", "\n", "# Update EMA attributes", "\n", "        ", "copy_attr", "(", "self", ".", "ema", ",", "model", ",", "include", ",", "exclude", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.torch_distributed_zero_first": [[29, 39], ["torch.barrier", "torch.barrier"], "function", ["None"], ["", "@", "contextmanager", "\n", "def", "torch_distributed_zero_first", "(", "local_rank", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Decorator to make all processes in distributed training wait for each local_master to do something.\n    \"\"\"", "\n", "if", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "dist", ".", "barrier", "(", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "", "yield", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "dist", ".", "barrier", "(", "device_ids", "=", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.date_modified": [[41, 45], ["datetime.datetime.fromtimestamp", "pathlib.Path().stat", "pathlib.Path"], "function", ["None"], ["", "", "def", "date_modified", "(", "path", "=", "__file__", ")", ":", "\n", "# return human-readable file modification date, i.e. '2021-3-26'", "\n", "    ", "t", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "Path", "(", "path", ")", ".", "stat", "(", ")", ".", "st_mtime", ")", "\n", "return", "f'{t.year}-{t.month}-{t.day}'", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.git_describe": [[47, 54], ["pathlib.Path", "subprocess.check_output().decode", "subprocess.check_output"], "function", ["None"], ["", "def", "git_describe", "(", "path", "=", "Path", "(", "__file__", ")", ".", "parent", ")", ":", "# path must be a directory", "\n", "# return human-readable git description, i.e. v5.0-5-g3e25f1e https://git-scm.com/docs/git-describe", "\n", "    ", "s", "=", "f'git -C {path} describe --tags --long --always'", "\n", "try", ":", "\n", "        ", "return", "subprocess", ".", "check_output", "(", "s", ",", "shell", "=", "True", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", ".", "decode", "(", ")", "[", ":", "-", "1", "]", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "e", ":", "\n", "        ", "return", "''", "# not a git repository", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.select_device": [[56, 84], ["str().strip().lower().replace", "utils.general.LOGGER.info", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "enumerate", "s.rstrip.rstrip", "str().strip().lower", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str().strip().lower().replace.split", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "s.rstrip.encode().decode", "torch_utils.git_describe", "torch_utils.date_modified", "len", "platform.system", "str().strip", "s.rstrip.encode", "str"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.git_describe", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.date_modified"], ["", "", "def", "select_device", "(", "device", "=", "''", ",", "batch_size", "=", "None", ",", "newline", "=", "True", ")", ":", "\n", "# device = 'cpu' or '0' or '0,1,2,3'", "\n", "    ", "s", "=", "f'YOLOv3 \ud83d\ude80 {git_describe() or date_modified()} torch {torch.__version__} '", "# string", "\n", "device", "=", "str", "(", "device", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", ".", "replace", "(", "'cuda:'", ",", "''", ")", "# to string, 'cuda:0' to '0'", "\n", "cpu", "=", "device", "==", "'cpu'", "\n", "if", "cpu", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'-1'", "# force torch.cuda.is_available() = False", "\n", "", "elif", "device", ":", "# non-cpu device requested", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "device", "# set environment variable", "\n", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "f'CUDA unavailable, invalid device {device} requested'", "# check availability", "\n", "\n", "", "cuda", "=", "not", "cpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "cuda", ":", "\n", "        ", "devices", "=", "device", ".", "split", "(", "','", ")", "if", "device", "else", "'0'", "# range(torch.cuda.device_count())  # i.e. 0,1,6,7", "\n", "n", "=", "len", "(", "devices", ")", "# device count", "\n", "if", "n", ">", "1", "and", "batch_size", ":", "# check batch_size is divisible by device_count", "\n", "            ", "assert", "batch_size", "%", "n", "==", "0", ",", "f'batch-size {batch_size} not multiple of GPU count {n}'", "\n", "", "space", "=", "' '", "*", "(", "len", "(", "s", ")", "+", "1", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "devices", ")", ":", "\n", "            ", "p", "=", "torch", ".", "cuda", ".", "get_device_properties", "(", "i", ")", "\n", "s", "+=", "f\"{'' if i == 0 else space}CUDA:{d} ({p.name}, {p.total_memory / 1024 ** 2:.0f}MiB)\\n\"", "# bytes to MB", "\n", "", "", "else", ":", "\n", "        ", "s", "+=", "'CPU\\n'", "\n", "\n", "", "if", "not", "newline", ":", "\n", "        ", "s", "=", "s", ".", "rstrip", "(", ")", "\n", "", "LOGGER", ".", "info", "(", "s", ".", "encode", "(", ")", ".", "decode", "(", "'ascii'", ",", "'ignore'", ")", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", "else", "s", ")", "# emoji-safe", "\n", "return", "torch", ".", "device", "(", "'cuda:0'", "if", "cuda", "else", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync": [[86, 91], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize"], "function", ["None"], ["", "def", "time_sync", "(", ")", ":", "\n", "# pytorch-accurate time", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "return", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.profile": [[93, 143], ["print", "torch_utils.select_device", "isinstance", "x.to.to", "isinstance", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "hasattr", "m.to", "m.half", "range", "print", "results.append", "hasattr", "isinstance", "torch_utils.time_sync", "m", "torch_utils.time_sync", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "isinstance", "tuple", "isinstance", "tuple", "isinstance", "sum", "print", "results.append", "torch_utils.time_sync", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "list", "thop.profile", "float", "str", "str", "x.to.numel", "m.parameters", "isinstance", "sum", "yi.sum"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.profile"], ["", "def", "profile", "(", "input", ",", "ops", ",", "n", "=", "10", ",", "device", "=", "None", ")", ":", "\n", "#  speed/memory/FLOPs profiler", "\n", "#", "\n", "# Usage:", "\n", "#     input = torch.randn(16, 3, 640, 640)", "\n", "#     m1 = lambda x: x * torch.sigmoid(x)", "\n", "#     m2 = nn.SiLU()", "\n", "#     profile(input, [m1, m2], n=100)  # profile over 100 iterations", "\n", "\n", "    ", "results", "=", "[", "]", "\n", "device", "=", "device", "or", "select_device", "(", ")", "\n", "print", "(", "f\"{'Params':>12s}{'GFLOPs':>12s}{'GPU_mem (GB)':>14s}{'forward (ms)':>14s}{'backward (ms)':>14s}\"", "\n", "f\"{'input':>24s}{'output':>24s}\"", ")", "\n", "\n", "for", "x", "in", "input", "if", "isinstance", "(", "input", ",", "list", ")", "else", "[", "input", "]", ":", "\n", "        ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "x", ".", "requires_grad", "=", "True", "\n", "for", "m", "in", "ops", "if", "isinstance", "(", "ops", ",", "list", ")", "else", "[", "ops", "]", ":", "\n", "            ", "m", "=", "m", ".", "to", "(", "device", ")", "if", "hasattr", "(", "m", ",", "'to'", ")", "else", "m", "# device", "\n", "m", "=", "m", ".", "half", "(", ")", "if", "hasattr", "(", "m", ",", "'half'", ")", "and", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "dtype", "is", "torch", ".", "float16", "else", "m", "\n", "tf", ",", "tb", ",", "t", "=", "0", ",", "0", ",", "[", "0", ",", "0", ",", "0", "]", "# dt forward, backward", "\n", "try", ":", "\n", "                ", "flops", "=", "thop", ".", "profile", "(", "m", ",", "inputs", "=", "(", "x", ",", ")", ",", "verbose", "=", "False", ")", "[", "0", "]", "/", "1E9", "*", "2", "# GFLOPs", "\n", "", "except", ":", "\n", "                ", "flops", "=", "0", "\n", "\n", "", "try", ":", "\n", "                ", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "                    ", "t", "[", "0", "]", "=", "time_sync", "(", ")", "\n", "y", "=", "m", "(", "x", ")", "\n", "t", "[", "1", "]", "=", "time_sync", "(", ")", "\n", "try", ":", "\n", "                        ", "_", "=", "(", "sum", "(", "yi", ".", "sum", "(", ")", "for", "yi", "in", "y", ")", "if", "isinstance", "(", "y", ",", "list", ")", "else", "y", ")", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "t", "[", "2", "]", "=", "time_sync", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "# no backward method", "\n", "# print(e)  # for debug", "\n", "                        ", "t", "[", "2", "]", "=", "float", "(", "'nan'", ")", "\n", "", "tf", "+=", "(", "t", "[", "1", "]", "-", "t", "[", "0", "]", ")", "*", "1000", "/", "n", "# ms per op forward", "\n", "tb", "+=", "(", "t", "[", "2", "]", "-", "t", "[", "1", "]", ")", "*", "1000", "/", "n", "# ms per op backward", "\n", "", "mem", "=", "torch", ".", "cuda", ".", "memory_reserved", "(", ")", "/", "1E9", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "0", "# (GB)", "\n", "s_in", "=", "tuple", "(", "x", ".", "shape", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "'list'", "\n", "s_out", "=", "tuple", "(", "y", ".", "shape", ")", "if", "isinstance", "(", "y", ",", "torch", ".", "Tensor", ")", "else", "'list'", "\n", "p", "=", "sum", "(", "list", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "m", ".", "parameters", "(", ")", ")", ")", "if", "isinstance", "(", "m", ",", "nn", ".", "Module", ")", "else", "0", "# parameters", "\n", "print", "(", "f'{p:12}{flops:12.4g}{mem:>14.3f}{tf:14.4g}{tb:14.4g}{str(s_in):>24s}{str(s_out):>24s}'", ")", "\n", "results", ".", "append", "(", "[", "p", ",", "flops", ",", "mem", ",", "tf", ",", "tb", ",", "s_in", ",", "s_out", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "results", ".", "append", "(", "None", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.is_parallel": [[145, 148], ["type"], "function", ["None"], ["", "def", "is_parallel", "(", "model", ")", ":", "\n", "# Returns True if model is of type DP or DDP", "\n", "    ", "return", "type", "(", "model", ")", "in", "(", "nn", ".", "parallel", ".", "DataParallel", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.de_parallel": [[150, 153], ["torch_utils.is_parallel"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.is_parallel"], ["", "def", "de_parallel", "(", "model", ")", ":", "\n", "# De-parallelize a model: returns single-GPU model if model is of type DP or DDP", "\n", "    ", "return", "model", ".", "module", "if", "is_parallel", "(", "model", ")", "else", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.initialize_weights": [[155, 165], ["model.modules", "type"], "function", ["None"], ["", "def", "initialize_weights", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "t", "=", "type", "(", "m", ")", "\n", "if", "t", "is", "nn", ".", "Conv2d", ":", "\n", "            ", "pass", "# nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "", "elif", "t", "is", "nn", ".", "BatchNorm2d", ":", "\n", "            ", "m", ".", "eps", "=", "1e-3", "\n", "m", ".", "momentum", "=", "0.03", "\n", "", "elif", "t", "in", "[", "nn", ".", "Hardswish", ",", "nn", ".", "LeakyReLU", ",", "nn", ".", "ReLU", ",", "nn", ".", "ReLU6", ",", "nn", ".", "SiLU", "]", ":", "\n", "            ", "m", ".", "inplace", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.find_modules": [[167, 170], ["enumerate", "isinstance"], "function", ["None"], ["", "", "", "def", "find_modules", "(", "model", ",", "mclass", "=", "nn", ".", "Conv2d", ")", ":", "\n", "# Finds layer indices matching module class 'mclass'", "\n", "    ", "return", "[", "i", "for", "i", ",", "m", "in", "enumerate", "(", "model", ".", "module_list", ")", "if", "isinstance", "(", "m", ",", "mclass", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.sparsity": [[172, 179], ["model.parameters", "p.numel"], "function", ["None"], ["", "def", "sparsity", "(", "model", ")", ":", "\n", "# Return global model sparsity", "\n", "    ", "a", ",", "b", "=", "0", ",", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "a", "+=", "p", ".", "numel", "(", ")", "\n", "b", "+=", "(", "p", "==", "0", ")", ".", "sum", "(", ")", "\n", "", "return", "b", "/", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.prune": [[181, 190], ["print", "model.named_modules", "print", "isinstance", "prune.l1_unstructured", "prune.remove", "torch_utils.sparsity"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.sparsity"], ["", "def", "prune", "(", "model", ",", "amount", "=", "0.3", ")", ":", "\n", "# Prune model to requested global sparsity", "\n", "    ", "import", "torch", ".", "nn", ".", "utils", ".", "prune", "as", "prune", "\n", "print", "(", "'Pruning model... '", ",", "end", "=", "''", ")", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "prune", ".", "l1_unstructured", "(", "m", ",", "name", "=", "'weight'", ",", "amount", "=", "amount", ")", "# prune", "\n", "prune", ".", "remove", "(", "m", ",", "'weight'", ")", "# make permanent", "\n", "", "", "print", "(", "' %.3g global sparsity'", "%", "sparsity", "(", "model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.fuse_conv_and_bn": [[192, 213], ["torch.Conv2d().requires_grad_().to", "conv.weight.clone().view", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "nn.Conv2d().requires_grad_().to.weight.copy_", "nn.Conv2d().requires_grad_().to.bias.copy_", "bn.weight.div", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "bn.weight.mul().div", "torch.Conv2d().requires_grad_", "conv.weight.clone", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "conv.weight.size", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mm().reshape", "torch.mm().reshape", "torch.mm().reshape", "torch.mm().reshape", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "bn.weight.mul", "torch.Conv2d", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "b_conv.reshape"], "function", ["None"], ["", "def", "fuse_conv_and_bn", "(", "conv", ",", "bn", ")", ":", "\n", "# Fuse convolution and batchnorm layers https://tehnokv.com/posts/fusing-batchnorm-and-conv/", "\n", "    ", "fusedconv", "=", "nn", ".", "Conv2d", "(", "conv", ".", "in_channels", ",", "\n", "conv", ".", "out_channels", ",", "\n", "kernel_size", "=", "conv", ".", "kernel_size", ",", "\n", "stride", "=", "conv", ".", "stride", ",", "\n", "padding", "=", "conv", ".", "padding", ",", "\n", "groups", "=", "conv", ".", "groups", ",", "\n", "bias", "=", "True", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "conv", ".", "weight", ".", "device", ")", "\n", "\n", "# prepare filters", "\n", "w_conv", "=", "conv", ".", "weight", ".", "clone", "(", ")", ".", "view", "(", "conv", ".", "out_channels", ",", "-", "1", ")", "\n", "w_bn", "=", "torch", ".", "diag", "(", "bn", ".", "weight", ".", "div", "(", "torch", ".", "sqrt", "(", "bn", ".", "eps", "+", "bn", ".", "running_var", ")", ")", ")", "\n", "fusedconv", ".", "weight", ".", "copy_", "(", "torch", ".", "mm", "(", "w_bn", ",", "w_conv", ")", ".", "view", "(", "fusedconv", ".", "weight", ".", "shape", ")", ")", "\n", "\n", "# prepare spatial bias", "\n", "b_conv", "=", "torch", ".", "zeros", "(", "conv", ".", "weight", ".", "size", "(", "0", ")", ",", "device", "=", "conv", ".", "weight", ".", "device", ")", "if", "conv", ".", "bias", "is", "None", "else", "conv", ".", "bias", "\n", "b_bn", "=", "bn", ".", "bias", "-", "bn", ".", "weight", ".", "mul", "(", "bn", ".", "running_mean", ")", ".", "div", "(", "torch", ".", "sqrt", "(", "bn", ".", "running_var", "+", "bn", ".", "eps", ")", ")", "\n", "fusedconv", ".", "bias", ".", "copy_", "(", "torch", ".", "mm", "(", "w_bn", ",", "b_conv", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "reshape", "(", "-", "1", ")", "+", "b_bn", ")", "\n", "\n", "return", "fusedconv", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.model_info": [[215, 237], ["sum", "sum", "utils.general.LOGGER.info", "print", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.numel", "x.numel", "model.named_parameters", "name.replace.replace", "print", "hasattr", "max", "isinstance", "model.parameters", "model.parameters", "int", "model.yaml.get", "len", "model.stride.max", "next", "torch_utils.profile", "list", "p.numel", "list", "p.mean", "p.std", "model.parameters", "copy.deepcopy", "model.modules"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.profile"], ["", "def", "model_info", "(", "model", ",", "verbose", "=", "False", ",", "img_size", "=", "640", ")", ":", "\n", "# Model information. img_size may be int or list, i.e. img_size=640 or img_size=[640, 320]", "\n", "    ", "n_p", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", ")", "# number parameters", "\n", "n_g", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", "if", "x", ".", "requires_grad", ")", "# number gradients", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "f\"{'layer':>5} {'name':>40} {'gradient':>9} {'parameters':>12} {'shape':>20} {'mu':>10} {'sigma':>10}\"", ")", "\n", "for", "i", ",", "(", "name", ",", "p", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "name", "=", "name", ".", "replace", "(", "'module_list.'", ",", "''", ")", "\n", "print", "(", "'%5g %40s %9s %12g %20s %10.3g %10.3g'", "%", "\n", "(", "i", ",", "name", ",", "p", ".", "requires_grad", ",", "p", ".", "numel", "(", ")", ",", "list", "(", "p", ".", "shape", ")", ",", "p", ".", "mean", "(", ")", ",", "p", ".", "std", "(", ")", ")", ")", "\n", "\n", "", "", "try", ":", "# FLOPs", "\n", "        ", "from", "thop", "import", "profile", "\n", "stride", "=", "max", "(", "int", "(", "model", ".", "stride", ".", "max", "(", ")", ")", ",", "32", ")", "if", "hasattr", "(", "model", ",", "'stride'", ")", "else", "32", "\n", "img", "=", "torch", ".", "zeros", "(", "(", "1", ",", "model", ".", "yaml", ".", "get", "(", "'ch'", ",", "3", ")", ",", "stride", ",", "stride", ")", ",", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ")", "# input", "\n", "flops", "=", "profile", "(", "deepcopy", "(", "model", ")", ",", "inputs", "=", "(", "img", ",", ")", ",", "verbose", "=", "False", ")", "[", "0", "]", "/", "1E9", "*", "2", "# stride GFLOPs", "\n", "img_size", "=", "img_size", "if", "isinstance", "(", "img_size", ",", "list", ")", "else", "[", "img_size", ",", "img_size", "]", "# expand if int/float", "\n", "fs", "=", "', %.1f GFLOPs'", "%", "(", "flops", "*", "img_size", "[", "0", "]", "/", "stride", "*", "img_size", "[", "1", "]", "/", "stride", ")", "# 640x640 GFLOPs", "\n", "", "except", "(", "ImportError", ",", "Exception", ")", ":", "\n", "        ", "fs", "=", "''", "\n", "\n", "", "LOGGER", ".", "info", "(", "f\"Model Summary: {len(list(model.modules()))} layers, {n_p} parameters, {n_g} gradients{fs}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.scale_img": [[239, 250], ["torch.interpolate", "torch.pad", "int", "int", "math.ceil"], "function", ["None"], ["", "def", "scale_img", "(", "img", ",", "ratio", "=", "1.0", ",", "same_shape", "=", "False", ",", "gs", "=", "32", ")", ":", "# img(16,3,256,416)", "\n", "# scales img(bs,3,y,x) by ratio constrained to gs-multiple", "\n", "    ", "if", "ratio", "==", "1.0", ":", "\n", "        ", "return", "img", "\n", "", "else", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", "2", ":", "]", "\n", "s", "=", "(", "int", "(", "h", "*", "ratio", ")", ",", "int", "(", "w", "*", "ratio", ")", ")", "# new size", "\n", "img", "=", "F", ".", "interpolate", "(", "img", ",", "size", "=", "s", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "# resize", "\n", "if", "not", "same_shape", ":", "# pad/crop img", "\n", "            ", "h", ",", "w", "=", "(", "math", ".", "ceil", "(", "x", "*", "ratio", "/", "gs", ")", "*", "gs", "for", "x", "in", "(", "h", ",", "w", ")", ")", "\n", "", "return", "F", ".", "pad", "(", "img", ",", "[", "0", ",", "w", "-", "s", "[", "1", "]", ",", "0", ",", "h", "-", "s", "[", "0", "]", "]", ",", "value", "=", "0.447", ")", "# value = imagenet mean", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.copy_attr": [[252, 259], ["b.__dict__.items", "k.startswith", "setattr", "len"], "function", ["None"], ["", "", "def", "copy_attr", "(", "a", ",", "b", ",", "include", "=", "(", ")", ",", "exclude", "=", "(", ")", ")", ":", "\n", "# Copy attributes from b to a, options to only include [...] and to exclude [...]", "\n", "    ", "for", "k", ",", "v", "in", "b", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "(", "len", "(", "include", ")", "and", "k", "not", "in", "include", ")", "or", "k", ".", "startswith", "(", "'_'", ")", "or", "k", "in", "exclude", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "a", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.Profile.__enter__": [[58, 60], ["time.time"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.Profile.__exit__": [[61, 63], ["print", "time.time"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "print", "(", "f'Profile results: {time.time() - self.start:.5f}s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.Timeout.__init__": [[67, 71], ["int", "bool"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seconds", ",", "*", ",", "timeout_msg", "=", "''", ",", "suppress_timeout_errors", "=", "True", ")", ":", "\n", "        ", "self", ".", "seconds", "=", "int", "(", "seconds", ")", "\n", "self", ".", "timeout_message", "=", "timeout_msg", "\n", "self", ".", "suppress", "=", "bool", "(", "suppress_timeout_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.Timeout._timeout_handler": [[72, 74], ["TimeoutError"], "methods", ["None"], ["", "def", "_timeout_handler", "(", "self", ",", "signum", ",", "frame", ")", ":", "\n", "        ", "raise", "TimeoutError", "(", "self", ".", "timeout_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.Timeout.__enter__": [[75, 78], ["signal.signal", "signal.alarm"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGALRM", ",", "self", ".", "_timeout_handler", ")", "# Set handler for SIGALRM", "\n", "signal", ".", "alarm", "(", "self", ".", "seconds", ")", "# start countdown for SIGALRM to be raised", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.Timeout.__exit__": [[79, 83], ["signal.alarm"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "signal", ".", "alarm", "(", "0", ")", "# Cancel SIGALRM if it's scheduled", "\n", "if", "self", ".", "suppress", "and", "exc_type", "is", "TimeoutError", ":", "# Suppress TimeoutError", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.WorkingDirectory.__init__": [[87, 90], ["pathlib.Path.cwd().resolve", "pathlib.Path.cwd"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "new_dir", ")", ":", "\n", "        ", "self", ".", "dir", "=", "new_dir", "# new dir", "\n", "self", ".", "cwd", "=", "Path", ".", "cwd", "(", ")", ".", "resolve", "(", ")", "# current dir", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.WorkingDirectory.__enter__": [[91, 93], ["os.chdir"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "os", ".", "chdir", "(", "self", ".", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.WorkingDirectory.__exit__": [[94, 96], ["os.chdir"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "os", ".", "chdir", "(", "self", ".", "cwd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.set_logging": [[46, 51], ["int", "logging.basicConfig", "logging.getLogger", "os.getenv"], "function", ["None"], ["def", "set_logging", "(", "name", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "# Sets level and returns logger", "\n", "    ", "rank", "=", "int", "(", "os", ".", "getenv", "(", "'RANK'", ",", "-", "1", ")", ")", "# rank in world for Multi-GPU trainings", "\n", "logging", ".", "basicConfig", "(", "format", "=", "\"%(message)s\"", ",", "level", "=", "logging", ".", "INFO", "if", "(", "verbose", "and", "rank", "in", "(", "-", "1", ",", "0", ")", ")", "else", "logging", ".", "WARNING", ")", "\n", "return", "logging", ".", "getLogger", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.try_except": [[98, 107], ["func", "print"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "", "def", "try_except", "(", "func", ")", ":", "\n", "# try-except function. Usage: @try_except decorator", "\n", "    ", "def", "handler", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n", "", "", "return", "handler", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.methods": [[109, 112], ["dir", "callable", "getattr", "f.startswith"], "function", ["None"], ["", "def", "methods", "(", "instance", ")", ":", "\n", "# Get class/instance methods", "\n", "    ", "return", "[", "f", "for", "f", "in", "dir", "(", "instance", ")", "if", "callable", "(", "getattr", "(", "instance", ",", "f", ")", ")", "and", "not", "f", ".", "startswith", "(", "\"__\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.print_args": [[114, 117], ["LOGGER.info", "general.colorstr", "vars().items", "vars"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr"], ["", "def", "print_args", "(", "name", ",", "opt", ")", ":", "\n", "# Print argparser arguments", "\n", "    ", "LOGGER", ".", "info", "(", "colorstr", "(", "f'{name}: '", ")", "+", "', '", ".", "join", "(", "f'{k}={v}'", "for", "k", ",", "v", "in", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.init_seeds": [[119, 127], ["random.seed", "numpy.random.seed", "torch.manual_seed"], "function", ["None"], ["", "def", "init_seeds", "(", "seed", "=", "0", ")", ":", "\n", "# Initialize random number generator (RNG) seeds https://pytorch.org/docs/stable/notes/randomness.html", "\n", "# cudnn seed 0 settings are slower and more reproducible, else faster and less reproducible", "\n", "    ", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "(", "False", ",", "True", ")", "if", "seed", "==", "0", "else", "(", "True", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.intersect_dicts": [[129, 132], ["da.items", "any"], "function", ["None"], ["", "def", "intersect_dicts", "(", "da", ",", "db", ",", "exclude", "=", "(", ")", ")", ":", "\n", "# Dictionary intersection of matching keys and shapes, omitting 'exclude' keys, using da values", "\n", "    ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "da", ".", "items", "(", ")", "if", "k", "in", "db", "and", "not", "any", "(", "x", "in", "k", "for", "x", "in", "exclude", ")", "and", "v", ".", "shape", "==", "db", "[", "k", "]", ".", "shape", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.get_latest_run": [[134, 138], ["glob.glob", "max"], "function", ["None"], ["", "def", "get_latest_run", "(", "search_dir", "=", "'.'", ")", ":", "\n", "# Return path to most recent 'last.pt' in /runs (i.e. to --resume from)", "\n", "    ", "last_list", "=", "glob", ".", "glob", "(", "f'{search_dir}/**/last*.pt'", ",", "recursive", "=", "True", ")", "\n", "return", "max", "(", "last_list", ",", "key", "=", "os", ".", "path", ".", "getctime", ")", "if", "last_list", "else", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.user_config_dir": [[140, 151], ["os.getenv", "pathlib.Path.mkdir", "pathlib.Path", "pathlib.Path.home", "cfg.get", "platform.system", "general.is_writeable", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_writeable"], ["", "def", "user_config_dir", "(", "dir", "=", "'Ultralytics'", ",", "env_var", "=", "'YOLOV3_CONFIG_DIR'", ")", ":", "\n", "# Return path of user configuration directory. Prefer environment variable if exists. Make dir if required.", "\n", "    ", "env", "=", "os", ".", "getenv", "(", "env_var", ")", "\n", "if", "env", ":", "\n", "        ", "path", "=", "Path", "(", "env", ")", "# use environment variable", "\n", "", "else", ":", "\n", "        ", "cfg", "=", "{", "'Windows'", ":", "'AppData/Roaming'", ",", "'Linux'", ":", "'.config'", ",", "'Darwin'", ":", "'Library/Application Support'", "}", "# 3 OS dirs", "\n", "path", "=", "Path", ".", "home", "(", ")", "/", "cfg", ".", "get", "(", "platform", ".", "system", "(", ")", ",", "''", ")", "# OS-specific config dir", "\n", "path", "=", "(", "path", "if", "is_writeable", "(", "path", ")", "else", "Path", "(", "'/tmp'", ")", ")", "/", "dir", "# GCP and AWS lambda fix, only /tmp is writeable", "\n", "", "path", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "# make if required", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_writeable": [[153, 166], ["os.access", "pathlib.Path", "file.unlink", "open"], "function", ["None"], ["", "def", "is_writeable", "(", "dir", ",", "test", "=", "False", ")", ":", "\n", "# Return True if directory has write permissions, test opening a file with write permissions if test=True", "\n", "    ", "if", "test", ":", "# method 1", "\n", "        ", "file", "=", "Path", "(", "dir", ")", "/", "'tmp.txt'", "\n", "try", ":", "\n", "            ", "with", "open", "(", "file", ",", "'w'", ")", ":", "# open file with write permissions", "\n", "                ", "pass", "\n", "", "file", ".", "unlink", "(", ")", "# remove file", "\n", "return", "True", "\n", "", "except", "OSError", ":", "\n", "            ", "return", "False", "\n", "", "", "else", ":", "# method 2", "\n", "        ", "return", "os", ".", "access", "(", "dir", ",", "os", ".", "R_OK", ")", "# possible issues on Windows", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_docker": [[168, 171], ["pathlib.Path().exists", "pathlib.Path"], "function", ["None"], ["", "", "def", "is_docker", "(", ")", ":", "\n", "# Is environment a Docker container?", "\n", "    ", "return", "Path", "(", "'/workspace'", ")", ".", "exists", "(", ")", "# or Path('/.dockerenv').exists()", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_colab": [[173, 180], ["None"], "function", ["None"], ["", "def", "is_colab", "(", ")", ":", "\n", "# Is environment a Google Colab instance?", "\n", "    ", "try", ":", "\n", "        ", "import", "google", ".", "colab", "\n", "return", "True", "\n", "", "except", "ImportError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_pip": [[182, 185], ["pathlib.Path().resolve", "pathlib.Path"], "function", ["None"], ["", "", "def", "is_pip", "(", ")", ":", "\n", "# Is file in a pip package?", "\n", "    ", "return", "'site-packages'", "in", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parts", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_ascii": [[187, 191], ["str", "len", "len", "str.encode().decode", "str.encode"], "function", ["None"], ["", "def", "is_ascii", "(", "s", "=", "''", ")", ":", "\n", "# Is string composed of all ASCII (no UTF) characters? (note str().isascii() introduced in python 3.7)", "\n", "    ", "s", "=", "str", "(", "s", ")", "# convert list, tuple, None, etc. to str", "\n", "return", "len", "(", "s", ".", "encode", "(", ")", ".", "decode", "(", "'ascii'", ",", "'ignore'", ")", ")", "==", "len", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_chinese": [[193, 196], ["re.search"], "function", ["None"], ["", "def", "is_chinese", "(", "s", "=", "'\u4eba\u5de5\u667a\u80fd'", ")", ":", "\n", "# Is string composed of any Chinese characters?", "\n", "    ", "return", "re", ".", "search", "(", "'[\\u4e00-\\u9fff]'", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.emojis": [[198, 201], ["str.encode().decode", "platform.system", "str.encode"], "function", ["None"], ["", "def", "emojis", "(", "str", "=", "''", ")", ":", "\n", "# Return platform-dependent emoji-safe version of string", "\n", "    ", "return", "str", ".", "encode", "(", ")", ".", "decode", "(", "'ascii'", ",", "'ignore'", ")", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", "else", "str", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.file_size": [[203, 212], ["pathlib.Path", "pathlib.Path.is_file", "pathlib.Path.is_dir", "pathlib.Path.stat", "sum", "f.stat", "pathlib.Path.glob", "f.is_file"], "function", ["None"], ["", "def", "file_size", "(", "path", ")", ":", "\n", "# Return file/dir size (MB)", "\n", "    ", "path", "=", "Path", "(", "path", ")", "\n", "if", "path", ".", "is_file", "(", ")", ":", "\n", "        ", "return", "path", ".", "stat", "(", ")", ".", "st_size", "/", "1E6", "\n", "", "elif", "path", ".", "is_dir", "(", ")", ":", "\n", "        ", "return", "sum", "(", "f", ".", "stat", "(", ")", ".", "st_size", "for", "f", "in", "path", ".", "glob", "(", "'**/*'", ")", "if", "f", ".", "is_file", "(", ")", ")", "/", "1E6", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_online": [[214, 222], ["socket.create_connection"], "function", ["None"], ["", "", "def", "check_online", "(", ")", ":", "\n", "# Check internet connectivity", "\n", "    ", "import", "socket", "\n", "try", ":", "\n", "        ", "socket", ".", "create_connection", "(", "(", "\"1.1.1.1\"", ",", "443", ")", ",", "5", ")", "# check host accessibility", "\n", "return", "True", "\n", "", "except", "OSError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_git_status": [[224, 243], ["general.WorkingDirectory", "print", "pathlib.Path().exists", "general.check_online", "subprocess.check_output().decode().strip().rstrip", "subprocess.check_output().decode().strip", "int", "print", "general.colorstr", "general.is_docker", "subprocess.check_output", "general.emojis", "pathlib.Path", "subprocess.check_output().decode().strip", "subprocess.check_output().decode", "subprocess.check_output().decode", "subprocess.check_output", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_online", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_docker", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.emojis"], ["", "", "@", "try_except", "\n", "@", "WorkingDirectory", "(", "ROOT", ")", "\n", "def", "check_git_status", "(", ")", ":", "\n", "# Recommend 'git pull' if code is out of date", "\n", "    ", "msg", "=", "', for updates see https://github.com/ultralytics/yolov3'", "\n", "print", "(", "colorstr", "(", "'github: '", ")", ",", "end", "=", "''", ")", "\n", "assert", "Path", "(", "'.git'", ")", ".", "exists", "(", ")", ",", "'skipping check (not a git repository)'", "+", "msg", "\n", "assert", "not", "is_docker", "(", ")", ",", "'skipping check (Docker image)'", "+", "msg", "\n", "assert", "check_online", "(", ")", ",", "'skipping check (offline)'", "+", "msg", "\n", "\n", "cmd", "=", "'git fetch && git config --get remote.origin.url'", "\n", "url", "=", "check_output", "(", "cmd", ",", "shell", "=", "True", ",", "timeout", "=", "5", ")", ".", "decode", "(", ")", ".", "strip", "(", ")", ".", "rstrip", "(", "'.git'", ")", "# git fetch", "\n", "branch", "=", "check_output", "(", "'git rev-parse --abbrev-ref HEAD'", ",", "shell", "=", "True", ")", ".", "decode", "(", ")", ".", "strip", "(", ")", "# checked out", "\n", "n", "=", "int", "(", "check_output", "(", "f'git rev-list {branch}..origin/master --count'", ",", "shell", "=", "True", ")", ")", "# commits behind", "\n", "if", "n", ">", "0", ":", "\n", "        ", "s", "=", "f\"\u26a0\ufe0f YOLOv3 is out of date by {n} commit{'s' * (n > 1)}. Use `git pull` or `git clone {url}` to update.\"", "\n", "", "else", ":", "\n", "        ", "s", "=", "f'up to date with {url} \u2705'", "\n", "", "print", "(", "emojis", "(", "s", ")", ")", "# emoji-safe", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_python": [[245, 248], ["general.check_version", "platform.python_version"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_version"], ["", "def", "check_python", "(", "minimum", "=", "'3.6.2'", ")", ":", "\n", "# Check current python version vs. required python version", "\n", "    ", "check_version", "(", "platform", ".", "python_version", "(", ")", ",", "minimum", ",", "name", "=", "'Python '", ",", "hard", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_version": [[250, 258], ["pkg_resources.parse_version"], "function", ["None"], ["", "def", "check_version", "(", "current", "=", "'0.0.0'", ",", "minimum", "=", "'0.0.0'", ",", "name", "=", "'version '", ",", "pinned", "=", "False", ",", "hard", "=", "False", ")", ":", "\n", "# Check version vs. required version", "\n", "    ", "current", ",", "minimum", "=", "(", "pkg", ".", "parse_version", "(", "x", ")", "for", "x", "in", "(", "current", ",", "minimum", ")", ")", "\n", "result", "=", "(", "current", "==", "minimum", ")", "if", "pinned", "else", "(", "current", ">=", "minimum", ")", "# bool", "\n", "if", "hard", ":", "# assert min requirements met", "\n", "        ", "assert", "result", ",", "f'{name}{minimum} required by YOLOv3, but {name}{current} is currently installed'", "\n", "", "else", ":", "\n", "        ", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements": [[260, 295], ["general.colorstr", "general.check_python", "isinstance", "pathlib.Path", "pathlib.Path.exists", "print", "pathlib.Path.open", "pkg_resources.require", "pathlib.Path.resolve", "general.emojis", "pathlib.Path.resolve", "locals", "general.colorstr", "pkg_resources.parse_requirements", "print", "print", "general.check_online", "print", "subprocess.check_output().decode", "print", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_python", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.emojis", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_online", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "", "@", "try_except", "\n", "def", "check_requirements", "(", "requirements", "=", "ROOT", "/", "'requirements.txt'", ",", "exclude", "=", "(", ")", ",", "install", "=", "True", ")", ":", "\n", "# Check installed dependencies meet requirements (pass *.txt file or list of packages)", "\n", "    ", "prefix", "=", "colorstr", "(", "'red'", ",", "'bold'", ",", "'requirements:'", ")", "\n", "check_python", "(", ")", "# check python version", "\n", "if", "isinstance", "(", "requirements", ",", "(", "str", ",", "Path", ")", ")", ":", "# requirements.txt file", "\n", "        ", "file", "=", "Path", "(", "requirements", ")", "\n", "assert", "file", ".", "exists", "(", ")", ",", "f\"{prefix} {file.resolve()} not found, check failed.\"", "\n", "with", "file", ".", "open", "(", ")", "as", "f", ":", "\n", "            ", "requirements", "=", "[", "f'{x.name}{x.specifier}'", "for", "x", "in", "pkg", ".", "parse_requirements", "(", "f", ")", "if", "x", ".", "name", "not", "in", "exclude", "]", "\n", "", "", "else", ":", "# list or tuple of packages", "\n", "        ", "requirements", "=", "[", "x", "for", "x", "in", "requirements", "if", "x", "not", "in", "exclude", "]", "\n", "\n", "", "n", "=", "0", "# number of packages updates", "\n", "for", "r", "in", "requirements", ":", "\n", "        ", "try", ":", "\n", "            ", "pkg", ".", "require", "(", "r", ")", "\n", "", "except", "Exception", "as", "e", ":", "# DistributionNotFound or VersionConflict if requirements not met", "\n", "            ", "s", "=", "f\"{prefix} {r} not found and is required by YOLOv3\"", "\n", "if", "install", ":", "\n", "                ", "print", "(", "f\"{s}, attempting auto-update...\"", ")", "\n", "try", ":", "\n", "                    ", "assert", "check_online", "(", ")", ",", "f\"'pip install {r}' skipped (offline)\"", "\n", "print", "(", "check_output", "(", "f\"pip install '{r}'\"", ",", "shell", "=", "True", ")", ".", "decode", "(", ")", ")", "\n", "n", "+=", "1", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "f'{prefix} {e}'", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "f'{s}. Please install and rerun your command.'", ")", "\n", "\n", "", "", "", "if", "n", ":", "# if packages updated", "\n", "        ", "source", "=", "file", ".", "resolve", "(", ")", "if", "'file'", "in", "locals", "(", ")", "else", "requirements", "\n", "s", "=", "f\"{prefix} {n} package{'s' * (n > 1)} updated per {source}\\n\"", "f\"{prefix} \u26a0\ufe0f {colorstr('bold', 'Restart runtime or rerun command for updates to take effect')}\\n\"", "\n", "print", "(", "emojis", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_img_size": [[297, 306], ["isinstance", "max", "print", "general.make_divisible", "max", "int", "general.make_divisible", "int"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.make_divisible", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.make_divisible"], ["", "", "def", "check_img_size", "(", "imgsz", ",", "s", "=", "32", ",", "floor", "=", "0", ")", ":", "\n", "# Verify image size is a multiple of stride s in each dimension", "\n", "    ", "if", "isinstance", "(", "imgsz", ",", "int", ")", ":", "# integer i.e. img_size=640", "\n", "        ", "new_size", "=", "max", "(", "make_divisible", "(", "imgsz", ",", "int", "(", "s", ")", ")", ",", "floor", ")", "\n", "", "else", ":", "# list i.e. img_size=[640, 480]", "\n", "        ", "new_size", "=", "[", "max", "(", "make_divisible", "(", "x", ",", "int", "(", "s", ")", ")", ",", "floor", ")", "for", "x", "in", "imgsz", "]", "\n", "", "if", "new_size", "!=", "imgsz", ":", "\n", "        ", "print", "(", "f'WARNING: --img-size {imgsz} must be multiple of max stride {s}, updating to {new_size}'", ")", "\n", "", "return", "new_size", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_imshow": [[308, 321], ["cv2.imshow", "cv2.waitKey", "cv2.destroyAllWindows", "cv2.waitKey", "general.is_docker", "general.is_colab", "numpy.zeros", "print"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_docker", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.is_colab", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "def", "check_imshow", "(", ")", ":", "\n", "# Check if environment supports image displays", "\n", "    ", "try", ":", "\n", "        ", "assert", "not", "is_docker", "(", ")", ",", "'cv2.imshow() is disabled in Docker environments'", "\n", "assert", "not", "is_colab", "(", ")", ",", "'cv2.imshow() is disabled in Google Colab environments'", "\n", "cv2", ".", "imshow", "(", "'test'", ",", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "3", ")", ")", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "return", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "f'WARNING: Environment does not support cv2.imshow() or PIL Image.show() image displays\\n{e}'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_suffix": [[323, 332], ["isinstance", "isinstance", "pathlib.Path().suffix.lower", "len", "pathlib.Path"], "function", ["None"], ["", "", "def", "check_suffix", "(", "file", "=", "'yolov3.pt'", ",", "suffix", "=", "(", "'.pt'", ",", ")", ",", "msg", "=", "''", ")", ":", "\n", "# Check file(s) for acceptable suffix", "\n", "    ", "if", "file", "and", "suffix", ":", "\n", "        ", "if", "isinstance", "(", "suffix", ",", "str", ")", ":", "\n", "            ", "suffix", "=", "[", "suffix", "]", "\n", "", "for", "f", "in", "file", "if", "isinstance", "(", "file", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "file", "]", ":", "\n", "            ", "s", "=", "Path", "(", "f", ")", ".", "suffix", ".", "lower", "(", ")", "# file suffix", "\n", "if", "len", "(", "s", ")", ":", "\n", "                ", "assert", "s", "in", "suffix", ",", "f\"{msg}{f} acceptable suffix is {suffix}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_yaml": [[334, 337], ["general.check_file"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_file"], ["", "", "", "", "def", "check_yaml", "(", "file", ",", "suffix", "=", "(", "'.yaml'", ",", "'.yml'", ")", ")", ":", "\n", "# Search/download YAML file (if necessary) and return path, checking suffix", "\n", "    ", "return", "check_file", "(", "file", ",", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_file": [[339, 362], ["general.check_suffix", "str", "pathlib.Path().is_file", "str.startswith", "str().replace", "pathlib.Path().is_file", "len", "pathlib.Path", "pathlib.Path", "print", "print", "torch.hub.download_url_to_file", "files.extend", "len", "str", "pathlib.Path", "pathlib.Path().exists", "glob.glob", "pathlib.Path", "urllib.parse.unquote().split", "str", "pathlib.Path", "pathlib.Path().stat", "urllib.parse.unquote", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_suffix", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "def", "check_file", "(", "file", ",", "suffix", "=", "''", ")", ":", "\n", "# Search/download file (if necessary) and return path", "\n", "    ", "check_suffix", "(", "file", ",", "suffix", ")", "# optional", "\n", "file", "=", "str", "(", "file", ")", "# convert to str()", "\n", "if", "Path", "(", "file", ")", ".", "is_file", "(", ")", "or", "file", "==", "''", ":", "# exists", "\n", "        ", "return", "file", "\n", "", "elif", "file", ".", "startswith", "(", "(", "'http:/'", ",", "'https:/'", ")", ")", ":", "# download", "\n", "        ", "url", "=", "str", "(", "Path", "(", "file", ")", ")", ".", "replace", "(", "':/'", ",", "'://'", ")", "# Pathlib turns :// -> :/", "\n", "file", "=", "Path", "(", "urllib", ".", "parse", ".", "unquote", "(", "file", ")", ".", "split", "(", "'?'", ")", "[", "0", "]", ")", ".", "name", "# '%2F' to '/', split https://url.com/file.txt?auth", "\n", "if", "Path", "(", "file", ")", ".", "is_file", "(", ")", ":", "\n", "            ", "print", "(", "f'Found {url} locally at {file}'", ")", "# file already exists", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Downloading {url} to {file}...'", ")", "\n", "torch", ".", "hub", ".", "download_url_to_file", "(", "url", ",", "file", ")", "\n", "assert", "Path", "(", "file", ")", ".", "exists", "(", ")", "and", "Path", "(", "file", ")", ".", "stat", "(", ")", ".", "st_size", ">", "0", ",", "f'File download failed: {url}'", "# check", "\n", "", "return", "file", "\n", "", "else", ":", "# search", "\n", "        ", "files", "=", "[", "]", "\n", "for", "d", "in", "'data'", ",", "'models'", ",", "'utils'", ":", "# search directories", "\n", "            ", "files", ".", "extend", "(", "glob", ".", "glob", "(", "str", "(", "ROOT", "/", "d", "/", "'**'", "/", "file", ")", ",", "recursive", "=", "True", ")", ")", "# find file", "\n", "", "assert", "len", "(", "files", ")", ",", "f'File not found: {file}'", "# assert file was found", "\n", "assert", "len", "(", "files", ")", "==", "1", ",", "f\"Multiple files match '{file}', specify exact path: {files}\"", "# assert unique", "\n", "return", "files", "[", "0", "]", "# return file", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_dataset": [[364, 414], ["isinstance", "isinstance", "str().endswith", "general.download", "next", "pathlib.Path", "yaml.safe_load.get", "yaml.safe_load.get", "open", "yaml.safe_load", "pathlib.Path().resolve", "all", "print", "str", "yaml.safe_load.get", "isinstance", "str", "range", "print", "Exception", "str", "pathlib.Path", "isinstance", "x.exists", "s.startswith", "s.endswith", "print", "torch.hub.download_url_to_file", "pathlib.Path().mkdir", "zipfile.ZipFile().extractall", "pathlib.Path().unlink", "s.startswith", "pathlib.Path", "str", "pathlib.Path", "print", "os.system", "exec", "pathlib.Path", "pathlib.Path", "zipfile.ZipFile", "pathlib.Path", "x.exists"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.download", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "", "def", "check_dataset", "(", "data", ",", "autodownload", "=", "True", ")", ":", "\n", "# Download and/or unzip dataset if not found locally", "\n", "# Usage: https://github.com/ultralytics/yolov5/releases/download/v1.0/coco128_with_yaml.zip", "\n", "\n", "# Download (optional)", "\n", "    ", "extract_dir", "=", "''", "\n", "if", "isinstance", "(", "data", ",", "(", "str", ",", "Path", ")", ")", "and", "str", "(", "data", ")", ".", "endswith", "(", "'.zip'", ")", ":", "# i.e. gs://bucket/dir/coco128.zip", "\n", "        ", "download", "(", "data", ",", "dir", "=", "'../datasets'", ",", "unzip", "=", "True", ",", "delete", "=", "False", ",", "curl", "=", "False", ",", "threads", "=", "1", ")", "\n", "data", "=", "next", "(", "(", "Path", "(", "'../datasets'", ")", "/", "Path", "(", "data", ")", ".", "stem", ")", ".", "rglob", "(", "'*.yaml'", ")", ")", "\n", "extract_dir", ",", "autodownload", "=", "data", ".", "parent", ",", "False", "\n", "\n", "# Read yaml (optional)", "\n", "", "if", "isinstance", "(", "data", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "with", "open", "(", "data", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "safe_load", "(", "f", ")", "# dictionary", "\n", "\n", "# Parse yaml", "\n", "", "", "path", "=", "extract_dir", "or", "Path", "(", "data", ".", "get", "(", "'path'", ")", "or", "''", ")", "# optional 'path' default to '.'", "\n", "for", "k", "in", "'train'", ",", "'val'", ",", "'test'", ":", "\n", "        ", "if", "data", ".", "get", "(", "k", ")", ":", "# prepend path", "\n", "            ", "data", "[", "k", "]", "=", "str", "(", "path", "/", "data", "[", "k", "]", ")", "if", "isinstance", "(", "data", "[", "k", "]", ",", "str", ")", "else", "[", "str", "(", "path", "/", "x", ")", "for", "x", "in", "data", "[", "k", "]", "]", "\n", "\n", "", "", "assert", "'nc'", "in", "data", ",", "\"Dataset 'nc' key missing.\"", "\n", "if", "'names'", "not", "in", "data", ":", "\n", "        ", "data", "[", "'names'", "]", "=", "[", "f'class{i}'", "for", "i", "in", "range", "(", "data", "[", "'nc'", "]", ")", "]", "# assign class names if missing", "\n", "", "train", ",", "val", ",", "test", ",", "s", "=", "(", "data", ".", "get", "(", "x", ")", "for", "x", "in", "(", "'train'", ",", "'val'", ",", "'test'", ",", "'download'", ")", ")", "\n", "if", "val", ":", "\n", "        ", "val", "=", "[", "Path", "(", "x", ")", ".", "resolve", "(", ")", "for", "x", "in", "(", "val", "if", "isinstance", "(", "val", ",", "list", ")", "else", "[", "val", "]", ")", "]", "# val path", "\n", "if", "not", "all", "(", "x", ".", "exists", "(", ")", "for", "x", "in", "val", ")", ":", "\n", "            ", "print", "(", "'\\nWARNING: Dataset not found, nonexistent paths: %s'", "%", "[", "str", "(", "x", ")", "for", "x", "in", "val", "if", "not", "x", ".", "exists", "(", ")", "]", ")", "\n", "if", "s", "and", "autodownload", ":", "# download script", "\n", "                ", "root", "=", "path", ".", "parent", "if", "'path'", "in", "data", "else", "'..'", "# unzip directory i.e. '../'", "\n", "if", "s", ".", "startswith", "(", "'http'", ")", "and", "s", ".", "endswith", "(", "'.zip'", ")", ":", "# URL", "\n", "                    ", "f", "=", "Path", "(", "s", ")", ".", "name", "# filename", "\n", "print", "(", "f'Downloading {s} to {f}...'", ")", "\n", "torch", ".", "hub", ".", "download_url_to_file", "(", "s", ",", "f", ")", "\n", "Path", "(", "root", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# create root", "\n", "ZipFile", "(", "f", ")", ".", "extractall", "(", "path", "=", "root", ")", "# unzip", "\n", "Path", "(", "f", ")", ".", "unlink", "(", ")", "# remove zip", "\n", "r", "=", "None", "# success", "\n", "", "elif", "s", ".", "startswith", "(", "'bash '", ")", ":", "# bash script", "\n", "                    ", "print", "(", "f'Running {s} ...'", ")", "\n", "r", "=", "os", ".", "system", "(", "s", ")", "\n", "", "else", ":", "# python script", "\n", "                    ", "r", "=", "exec", "(", "s", ",", "{", "'yaml'", ":", "data", "}", ")", "# return None", "\n", "", "print", "(", "f\"Dataset autodownload {f'success, saved to {root}' if r in (0, None) else 'failure'}\\n\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Dataset not found.'", ")", "\n", "\n", "", "", "", "return", "data", "# dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.url2file": [[416, 421], ["str().replace", "pathlib.Path().name.split", "str", "pathlib.Path", "pathlib.Path", "urllib.parse.unquote"], "function", ["None"], ["", "def", "url2file", "(", "url", ")", ":", "\n", "# Convert URL to filename, i.e. https://url.com/file.txt?auth -> file.txt", "\n", "    ", "url", "=", "str", "(", "Path", "(", "url", ")", ")", ".", "replace", "(", "':/'", ",", "'://'", ")", "# Pathlib turns :// -> :/", "\n", "file", "=", "Path", "(", "urllib", ".", "parse", ".", "unquote", "(", "url", ")", ")", ".", "name", ".", "split", "(", "'?'", ")", "[", "0", "]", "# '%2F' to '/', split https://url.com/file.txt?auth", "\n", "return", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.download": [[423, 455], ["pathlib.Path", "pathlib.Path.mkdir", "pathlib.Path().is_file", "multiprocessing.pool.ThreadPool", "multiprocessing.pool.ThreadPool.imap", "multiprocessing.pool.ThreadPool.close", "multiprocessing.pool.ThreadPool.join", "pathlib.Path().rename", "print", "zip", "isinstance", "general.download.download_one"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "def", "download", "(", "url", ",", "dir", "=", "'.'", ",", "unzip", "=", "True", ",", "delete", "=", "True", ",", "curl", "=", "False", ",", "threads", "=", "1", ")", ":", "\n", "# Multi-threaded file download and unzip function, used in data.yaml for autodownload", "\n", "    ", "def", "download_one", "(", "url", ",", "dir", ")", ":", "\n", "# Download 1 file", "\n", "        ", "f", "=", "dir", "/", "Path", "(", "url", ")", ".", "name", "# filename", "\n", "if", "Path", "(", "url", ")", ".", "is_file", "(", ")", ":", "# exists in current path", "\n", "            ", "Path", "(", "url", ")", ".", "rename", "(", "f", ")", "# move to dir", "\n", "", "elif", "not", "f", ".", "exists", "(", ")", ":", "\n", "            ", "print", "(", "f'Downloading {url} to {f}...'", ")", "\n", "if", "curl", ":", "\n", "                ", "os", ".", "system", "(", "f\"curl -L '{url}' -o '{f}' --retry 9 -C -\"", ")", "# curl download, retry and resume on fail", "\n", "", "else", ":", "\n", "                ", "torch", ".", "hub", ".", "download_url_to_file", "(", "url", ",", "f", ",", "progress", "=", "True", ")", "# torch download", "\n", "", "", "if", "unzip", "and", "f", ".", "suffix", "in", "(", "'.zip'", ",", "'.gz'", ")", ":", "\n", "            ", "print", "(", "f'Unzipping {f}...'", ")", "\n", "if", "f", ".", "suffix", "==", "'.zip'", ":", "\n", "                ", "ZipFile", "(", "f", ")", ".", "extractall", "(", "path", "=", "dir", ")", "# unzip", "\n", "", "elif", "f", ".", "suffix", "==", "'.gz'", ":", "\n", "                ", "os", ".", "system", "(", "f'tar xfz {f} --directory {f.parent}'", ")", "# unzip", "\n", "", "if", "delete", ":", "\n", "                ", "f", ".", "unlink", "(", ")", "# remove zip", "\n", "\n", "", "", "", "dir", "=", "Path", "(", "dir", ")", "\n", "dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make directory", "\n", "if", "threads", ">", "1", ":", "\n", "        ", "pool", "=", "ThreadPool", "(", "threads", ")", "\n", "pool", ".", "imap", "(", "lambda", "x", ":", "download_one", "(", "*", "x", ")", ",", "zip", "(", "url", ",", "repeat", "(", "dir", ")", ")", ")", "# multi-threaded", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "", "else", ":", "\n", "        ", "for", "u", "in", "[", "url", "]", "if", "isinstance", "(", "url", ",", "(", "str", ",", "Path", ")", ")", "else", "url", ":", "\n", "            ", "download_one", "(", "u", ",", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.make_divisible": [[457, 460], ["math.ceil"], "function", ["None"], ["", "", "", "def", "make_divisible", "(", "x", ",", "divisor", ")", ":", "\n", "# Returns x evenly divisible by divisor", "\n", "    ", "return", "math", ".", "ceil", "(", "x", "/", "divisor", ")", "*", "divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.clean_str": [[462, 465], ["re.sub"], "function", ["None"], ["", "def", "clean_str", "(", "s", ")", ":", "\n", "# Cleans a string by replacing special characters with underscore _", "\n", "    ", "return", "re", ".", "sub", "(", "pattern", "=", "\"[|@#!\u00a1\u00b7$\u20ac%&()=?\u00bf^*;:,\u00a8\u00b4><+]\"", ",", "repl", "=", "\"_\"", ",", "string", "=", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.one_cycle": [[467, 470], ["math.cos"], "function", ["None"], ["", "def", "one_cycle", "(", "y1", "=", "0.0", ",", "y2", "=", "1.0", ",", "steps", "=", "100", ")", ":", "\n", "# lambda function for sinusoidal ramp from y1 to y2 https://arxiv.org/pdf/1812.01187.pdf", "\n", "    ", "return", "lambda", "x", ":", "(", "(", "1", "-", "math", ".", "cos", "(", "x", "*", "math", ".", "pi", "/", "steps", ")", ")", "/", "2", ")", "*", "(", "y2", "-", "y1", ")", "+", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr": [[472, 495], ["len"], "function", ["None"], ["", "def", "colorstr", "(", "*", "input", ")", ":", "\n", "# Colors a string https://en.wikipedia.org/wiki/ANSI_escape_code, i.e.  colorstr('blue', 'hello world')", "\n", "    ", "*", "args", ",", "string", "=", "input", "if", "len", "(", "input", ")", ">", "1", "else", "(", "'blue'", ",", "'bold'", ",", "input", "[", "0", "]", ")", "# color arguments, string", "\n", "colors", "=", "{", "'black'", ":", "'\\033[30m'", ",", "# basic colors", "\n", "'red'", ":", "'\\033[31m'", ",", "\n", "'green'", ":", "'\\033[32m'", ",", "\n", "'yellow'", ":", "'\\033[33m'", ",", "\n", "'blue'", ":", "'\\033[34m'", ",", "\n", "'magenta'", ":", "'\\033[35m'", ",", "\n", "'cyan'", ":", "'\\033[36m'", ",", "\n", "'white'", ":", "'\\033[37m'", ",", "\n", "'bright_black'", ":", "'\\033[90m'", ",", "# bright colors", "\n", "'bright_red'", ":", "'\\033[91m'", ",", "\n", "'bright_green'", ":", "'\\033[92m'", ",", "\n", "'bright_yellow'", ":", "'\\033[93m'", ",", "\n", "'bright_blue'", ":", "'\\033[94m'", ",", "\n", "'bright_magenta'", ":", "'\\033[95m'", ",", "\n", "'bright_cyan'", ":", "'\\033[96m'", ",", "\n", "'bright_white'", ":", "'\\033[97m'", ",", "\n", "'end'", ":", "'\\033[0m'", ",", "# misc", "\n", "'bold'", ":", "'\\033[1m'", ",", "\n", "'underline'", ":", "'\\033[4m'", "}", "\n", "return", "''", ".", "join", "(", "colors", "[", "x", "]", "for", "x", "in", "args", ")", "+", "f'{string}'", "+", "colors", "[", "'end'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.labels_to_class_weights": [[497, 514], ["numpy.concatenate", "labels[].astype", "numpy.bincount", "np.bincount.sum", "torch.from_numpy", "torch.Tensor"], "function", ["None"], ["", "def", "labels_to_class_weights", "(", "labels", ",", "nc", "=", "80", ")", ":", "\n", "# Get class weights (inverse frequency) from training labels", "\n", "    ", "if", "labels", "[", "0", "]", "is", "None", ":", "# no labels loaded", "\n", "        ", "return", "torch", ".", "Tensor", "(", ")", "\n", "\n", "", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "0", ")", "# labels.shape = (866643, 5) for COCO", "\n", "classes", "=", "labels", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "# labels = [class xywh]", "\n", "weights", "=", "np", ".", "bincount", "(", "classes", ",", "minlength", "=", "nc", ")", "# occurrences per class", "\n", "\n", "# Prepend gridpoint count (for uCE training)", "\n", "# gpi = ((320 / 32 * np.array([1, 2, 4])) ** 2 * 3).sum()  # gridpoints per image", "\n", "# weights = np.hstack([gpi * len(labels)  - weights.sum() * 9, weights * 9]) ** 0.5  # prepend gridpoints to start", "\n", "\n", "weights", "[", "weights", "==", "0", "]", "=", "1", "# replace empty bins with 1", "\n", "weights", "=", "1", "/", "weights", "# number of targets per class", "\n", "weights", "/=", "weights", ".", "sum", "(", ")", "# normalize", "\n", "return", "torch", ".", "from_numpy", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.labels_to_image_weights": [[516, 522], ["numpy.ones", "numpy.array", "numpy.bincount", "x[].astype", "class_weights.reshape"], "function", ["None"], ["", "def", "labels_to_image_weights", "(", "labels", ",", "nc", "=", "80", ",", "class_weights", "=", "np", ".", "ones", "(", "80", ")", ")", ":", "\n", "# Produces image weights based on class_weights and image contents", "\n", "    ", "class_counts", "=", "np", ".", "array", "(", "[", "np", ".", "bincount", "(", "x", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "minlength", "=", "nc", ")", "for", "x", "in", "labels", "]", ")", "\n", "image_weights", "=", "(", "class_weights", ".", "reshape", "(", "1", ",", "nc", ")", "*", "class_counts", ")", ".", "sum", "(", "1", ")", "\n", "# index = random.choices(range(n), weights=image_weights, k=1)  # weight image sample", "\n", "return", "image_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.coco80_to_coco91_class": [[524, 534], ["None"], "function", ["None"], ["", "def", "coco80_to_coco91_class", "(", ")", ":", "# converts 80-index (val2014) to 91-index (paper)", "\n", "# https://tech.amikelive.com/node-718/what-object-categories-labels-are-in-coco-dataset/", "\n", "# a = np.loadtxt('data/coco.names', dtype='str', delimiter='\\n')", "\n", "# b = np.loadtxt('data/coco_paper.names', dtype='str', delimiter='\\n')", "\n", "# x1 = [list(a[i] == b).index(True) + 1 for i in range(80)]  # darknet to coco", "\n", "# x2 = [list(b[i] == a).index(True) if any(b[i] == a) else None for i in range(91)]  # coco to darknet", "\n", "    ", "x", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "34", ",", "\n", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", ",", "44", ",", "46", ",", "47", ",", "48", ",", "49", ",", "50", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", ",", "62", ",", "63", ",", "\n", "64", ",", "65", ",", "67", ",", "70", ",", "72", ",", "73", ",", "74", ",", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", "82", ",", "84", ",", "85", ",", "86", ",", "87", ",", "88", ",", "89", ",", "90", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh": [[536, 544], ["isinstance", "x.clone", "numpy.copy"], "function", ["None"], ["", "def", "xyxy2xywh", "(", "x", ")", ":", "\n", "# Convert nx4 boxes from [x1, y1, x2, y2] to [x, y, w, h] where xy1=top-left, xy2=bottom-right", "\n", "    ", "y", "=", "x", ".", "clone", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", "# x center", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", ")", "/", "2", "# y center", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", "# width", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", "# height", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywh2xyxy": [[546, 554], ["isinstance", "x.clone", "numpy.copy"], "function", ["None"], ["", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "# Convert nx4 boxes from [x, y, w, h] to [x1, y1, x2, y2] where xy1=top-left, xy2=bottom-right", "\n", "    ", "y", "=", "x", ".", "clone", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", "# top left x", "\n", "y", "[", ":", ",", "1", "]", "=", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", "# top left y", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", "# bottom right x", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", "# bottom right y", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywhn2xyxy": [[556, 564], ["isinstance", "x.clone", "numpy.copy"], "function", ["None"], ["", "def", "xywhn2xyxy", "(", "x", ",", "w", "=", "640", ",", "h", "=", "640", ",", "padw", "=", "0", ",", "padh", "=", "0", ")", ":", "\n", "# Convert nx4 boxes from [x, y, w, h] normalized to [x1, y1, x2, y2] where xy1=top-left, xy2=bottom-right", "\n", "    ", "y", "=", "x", ".", "clone", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "w", "*", "(", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", ")", "+", "padw", "# top left x", "\n", "y", "[", ":", ",", "1", "]", "=", "h", "*", "(", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", ")", "+", "padh", "# top left y", "\n", "y", "[", ":", ",", "2", "]", "=", "w", "*", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", ")", "+", "padw", "# bottom right x", "\n", "y", "[", ":", ",", "3", "]", "=", "h", "*", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", ")", "+", "padh", "# bottom right y", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywhn": [[566, 576], ["general.clip_coords", "isinstance", "x.clone", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.clip_coords"], ["", "def", "xyxy2xywhn", "(", "x", ",", "w", "=", "640", ",", "h", "=", "640", ",", "clip", "=", "False", ",", "eps", "=", "0.0", ")", ":", "\n", "# Convert nx4 boxes from [x1, y1, x2, y2] to [x, y, w, h] normalized where xy1=top-left, xy2=bottom-right", "\n", "    ", "if", "clip", ":", "\n", "        ", "clip_coords", "(", "x", ",", "(", "h", "-", "eps", ",", "w", "-", "eps", ")", ")", "# warning: inplace clip", "\n", "", "y", "=", "x", ".", "clone", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", ")", "/", "w", "# x center", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", ")", "/", "2", ")", "/", "h", "# y center", "\n", "y", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", ")", "/", "w", "# width", "\n", "y", "[", ":", ",", "3", "]", "=", "(", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", ")", "/", "h", "# height", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyn2xy": [[578, 584], ["isinstance", "x.clone", "numpy.copy"], "function", ["None"], ["", "def", "xyn2xy", "(", "x", ",", "w", "=", "640", ",", "h", "=", "640", ",", "padw", "=", "0", ",", "padh", "=", "0", ")", ":", "\n", "# Convert normalized segments into pixel segments, shape (n,2)", "\n", "    ", "y", "=", "x", ".", "clone", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "w", "*", "x", "[", ":", ",", "0", "]", "+", "padw", "# top left x", "\n", "y", "[", ":", ",", "1", "]", "=", "h", "*", "x", "[", ":", ",", "1", "]", "+", "padh", "# top left y", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.segment2box": [[586, 592], ["any", "numpy.array", "numpy.zeros", "x.min", "y.min", "x.max", "y.max"], "function", ["None"], ["", "def", "segment2box", "(", "segment", ",", "width", "=", "640", ",", "height", "=", "640", ")", ":", "\n", "# Convert 1 segment label to 1 box label, applying inside-image constraint, i.e. (xy1, xy2, ...) to (xyxy)", "\n", "    ", "x", ",", "y", "=", "segment", ".", "T", "# segment xy", "\n", "inside", "=", "(", "x", ">=", "0", ")", "&", "(", "y", ">=", "0", ")", "&", "(", "x", "<=", "width", ")", "&", "(", "y", "<=", "height", ")", "\n", "x", ",", "y", ",", "=", "x", "[", "inside", "]", ",", "y", "[", "inside", "]", "\n", "return", "np", ".", "array", "(", "[", "x", ".", "min", "(", ")", ",", "y", ".", "min", "(", ")", ",", "x", ".", "max", "(", ")", ",", "y", ".", "max", "(", ")", "]", ")", "if", "any", "(", "x", ")", "else", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ")", "# xyxy", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.segments2boxes": [[594, 601], ["general.xyxy2xywh", "boxes.append", "numpy.array", "x.min", "y.min", "x.max", "y.max"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh"], ["", "def", "segments2boxes", "(", "segments", ")", ":", "\n", "# Convert segment labels to box labels, i.e. (cls, xy1, xy2, ...) to (cls, xywh)", "\n", "    ", "boxes", "=", "[", "]", "\n", "for", "s", "in", "segments", ":", "\n", "        ", "x", ",", "y", "=", "s", ".", "T", "# segment xy", "\n", "boxes", ".", "append", "(", "[", "x", ".", "min", "(", ")", ",", "y", ".", "min", "(", ")", ",", "x", ".", "max", "(", ")", ",", "y", ".", "max", "(", ")", "]", ")", "# cls, xyxy", "\n", "", "return", "xyxy2xywh", "(", "np", ".", "array", "(", "boxes", ")", ")", "# cls, xywh", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.resample_segments": [[603, 610], ["enumerate", "numpy.linspace", "numpy.arange", "len", "numpy.concatenate().reshape", "len", "numpy.concatenate", "numpy.interp", "range"], "function", ["None"], ["", "def", "resample_segments", "(", "segments", ",", "n", "=", "1000", ")", ":", "\n", "# Up-sample an (n,2) segment", "\n", "    ", "for", "i", ",", "s", "in", "enumerate", "(", "segments", ")", ":", "\n", "        ", "x", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "s", ")", "-", "1", ",", "n", ")", "\n", "xp", "=", "np", ".", "arange", "(", "len", "(", "s", ")", ")", "\n", "segments", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "np", ".", "interp", "(", "x", ",", "xp", ",", "s", "[", ":", ",", "i", "]", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", ".", "reshape", "(", "2", ",", "-", "1", ")", ".", "T", "# segment xy", "\n", "", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.scale_coords": [[612, 626], ["general.clip_coords", "min"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.clip_coords"], ["", "def", "scale_coords", "(", "img1_shape", ",", "coords", ",", "img0_shape", ",", "ratio_pad", "=", "None", ")", ":", "\n", "# Rescale coords (xyxy) from img1_shape to img0_shape", "\n", "    ", "if", "ratio_pad", "is", "None", ":", "# calculate from img0_shape", "\n", "        ", "gain", "=", "min", "(", "img1_shape", "[", "0", "]", "/", "img0_shape", "[", "0", "]", ",", "img1_shape", "[", "1", "]", "/", "img0_shape", "[", "1", "]", ")", "# gain  = old / new", "\n", "pad", "=", "(", "img1_shape", "[", "1", "]", "-", "img0_shape", "[", "1", "]", "*", "gain", ")", "/", "2", ",", "(", "img1_shape", "[", "0", "]", "-", "img0_shape", "[", "0", "]", "*", "gain", ")", "/", "2", "# wh padding", "\n", "", "else", ":", "\n", "        ", "gain", "=", "ratio_pad", "[", "0", "]", "[", "0", "]", "\n", "pad", "=", "ratio_pad", "[", "1", "]", "\n", "\n", "", "coords", "[", ":", ",", "[", "0", ",", "2", "]", "]", "-=", "pad", "[", "0", "]", "# x padding", "\n", "coords", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "pad", "[", "1", "]", "# y padding", "\n", "coords", "[", ":", ",", ":", "4", "]", "/=", "gain", "\n", "clip_coords", "(", "coords", ",", "img0_shape", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.clip_coords": [[628, 638], ["isinstance", "boxes[].clamp_", "boxes[].clamp_", "boxes[].clamp_", "boxes[].clamp_", "boxes[].clip", "boxes[].clip"], "function", ["None"], ["", "def", "clip_coords", "(", "boxes", ",", "shape", ")", ":", "\n", "# Clip bounding xyxy bounding boxes to image shape (height, width)", "\n", "    ", "if", "isinstance", "(", "boxes", ",", "torch", ".", "Tensor", ")", ":", "# faster individually", "\n", "        ", "boxes", "[", ":", ",", "0", "]", ".", "clamp_", "(", "0", ",", "shape", "[", "1", "]", ")", "# x1", "\n", "boxes", "[", ":", ",", "1", "]", ".", "clamp_", "(", "0", ",", "shape", "[", "0", "]", ")", "# y1", "\n", "boxes", "[", ":", ",", "2", "]", ".", "clamp_", "(", "0", ",", "shape", "[", "1", "]", ")", "# x2", "\n", "boxes", "[", ":", ",", "3", "]", ".", "clamp_", "(", "0", ",", "shape", "[", "0", "]", ")", "# y2", "\n", "", "else", ":", "# np.array (faster grouped)", "\n", "        ", "boxes", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "boxes", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "clip", "(", "0", ",", "shape", "[", "1", "]", ")", "# x1, x2", "\n", "boxes", "[", ":", ",", "[", "1", ",", "3", "]", "]", "=", "boxes", "[", ":", ",", "[", "1", ",", "3", "]", "]", ".", "clip", "(", "0", ",", "shape", "[", "0", "]", ")", "# y1, y2", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.non_max_suppression": [[640, 732], ["time.time", "enumerate", "general.xywh2xyxy", "torchvision.ops.nms", "torch.zeros", "len", "torch.zeros", "torch.cat", "torch.cat", "x[].max", "print", "torch.cat", "utils.metrics.box_iou", "torch.mm().float", "weights.sum", "time.time", "len", "j[].float", "range", "j.float", "conf.view", "torch.mm", "len", "l[].long", "x[].argsort", "iou.sum", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.box_iou"], ["", "", "def", "non_max_suppression", "(", "prediction", ",", "conf_thres", "=", "0.25", ",", "iou_thres", "=", "0.45", ",", "classes", "=", "None", ",", "agnostic", "=", "False", ",", "multi_label", "=", "False", ",", "\n", "labels", "=", "(", ")", ",", "max_det", "=", "300", ")", ":", "\n", "    ", "\"\"\"Runs Non-Maximum Suppression (NMS) on inference results\n\n    Returns:\n         list of detections, on (n,6) tensor per image [xyxy, conf, cls]\n    \"\"\"", "\n", "\n", "nc", "=", "prediction", ".", "shape", "[", "2", "]", "-", "5", "# number of classes", "\n", "xc", "=", "prediction", "[", "...", ",", "4", "]", ">", "conf_thres", "# candidates", "\n", "\n", "# Checks", "\n", "assert", "0", "<=", "conf_thres", "<=", "1", ",", "f'Invalid Confidence threshold {conf_thres}, valid values are between 0.0 and 1.0'", "\n", "assert", "0", "<=", "iou_thres", "<=", "1", ",", "f'Invalid IoU {iou_thres}, valid values are between 0.0 and 1.0'", "\n", "\n", "# Settings", "\n", "min_wh", ",", "max_wh", "=", "2", ",", "4096", "# (pixels) minimum and maximum box width and height", "\n", "max_nms", "=", "30000", "# maximum number of boxes into torchvision.ops.nms()", "\n", "time_limit", "=", "10.0", "# seconds to quit after", "\n", "redundant", "=", "True", "# require redundant detections", "\n", "multi_label", "&=", "nc", ">", "1", "# multiple labels per box (adds 0.5ms/img)", "\n", "merge", "=", "False", "# use merge-NMS", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "[", "torch", ".", "zeros", "(", "(", "0", ",", "6", ")", ",", "device", "=", "prediction", ".", "device", ")", "]", "*", "prediction", ".", "shape", "[", "0", "]", "\n", "for", "xi", ",", "x", "in", "enumerate", "(", "prediction", ")", ":", "# image index, image inference", "\n", "# Apply constraints", "\n", "# x[((x[..., 2:4] < min_wh) | (x[..., 2:4] > max_wh)).any(1), 4] = 0  # width-height", "\n", "        ", "x", "=", "x", "[", "xc", "[", "xi", "]", "]", "# confidence", "\n", "\n", "# Cat apriori labels if autolabelling", "\n", "if", "labels", "and", "len", "(", "labels", "[", "xi", "]", ")", ":", "\n", "            ", "l", "=", "labels", "[", "xi", "]", "\n", "v", "=", "torch", ".", "zeros", "(", "(", "len", "(", "l", ")", ",", "nc", "+", "5", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "v", "[", ":", ",", ":", "4", "]", "=", "l", "[", ":", ",", "1", ":", "5", "]", "# box", "\n", "v", "[", ":", ",", "4", "]", "=", "1.0", "# conf", "\n", "v", "[", "range", "(", "len", "(", "l", ")", ")", ",", "l", "[", ":", ",", "0", "]", ".", "long", "(", ")", "+", "5", "]", "=", "1.0", "# cls", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "v", ")", ",", "0", ")", "\n", "\n", "# If none remain process next image", "\n", "", "if", "not", "x", ".", "shape", "[", "0", "]", ":", "\n", "            ", "continue", "\n", "\n", "# Compute conf", "\n", "", "x", "[", ":", ",", "5", ":", "]", "*=", "x", "[", ":", ",", "4", ":", "5", "]", "# conf = obj_conf * cls_conf", "\n", "\n", "# Box (center x, center y, width, height) to (x1, y1, x2, y2)", "\n", "box", "=", "xywh2xyxy", "(", "x", "[", ":", ",", ":", "4", "]", ")", "\n", "\n", "# Detections matrix nx6 (xyxy, conf, cls)", "\n", "if", "multi_label", ":", "\n", "            ", "i", ",", "j", "=", "(", "x", "[", ":", ",", "5", ":", "]", ">", "conf_thres", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "T", "\n", "x", "=", "torch", ".", "cat", "(", "(", "box", "[", "i", "]", ",", "x", "[", "i", ",", "j", "+", "5", ",", "None", "]", ",", "j", "[", ":", ",", "None", "]", ".", "float", "(", ")", ")", ",", "1", ")", "\n", "", "else", ":", "# best class only", "\n", "            ", "conf", ",", "j", "=", "x", "[", ":", ",", "5", ":", "]", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "box", ",", "conf", ",", "j", ".", "float", "(", ")", ")", ",", "1", ")", "[", "conf", ".", "view", "(", "-", "1", ")", ">", "conf_thres", "]", "\n", "\n", "# Filter by class", "\n", "", "if", "classes", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "[", "(", "x", "[", ":", ",", "5", ":", "6", "]", "==", "torch", ".", "tensor", "(", "classes", ",", "device", "=", "x", ".", "device", ")", ")", ".", "any", "(", "1", ")", "]", "\n", "\n", "# Apply finite constraint", "\n", "# if not torch.isfinite(x).all():", "\n", "#     x = x[torch.isfinite(x).all(1)]", "\n", "\n", "# Check shape", "\n", "", "n", "=", "x", ".", "shape", "[", "0", "]", "# number of boxes", "\n", "if", "not", "n", ":", "# no boxes", "\n", "            ", "continue", "\n", "", "elif", "n", ">", "max_nms", ":", "# excess boxes", "\n", "            ", "x", "=", "x", "[", "x", "[", ":", ",", "4", "]", ".", "argsort", "(", "descending", "=", "True", ")", "[", ":", "max_nms", "]", "]", "# sort by confidence", "\n", "\n", "# Batched NMS", "\n", "", "c", "=", "x", "[", ":", ",", "5", ":", "6", "]", "*", "(", "0", "if", "agnostic", "else", "max_wh", ")", "# classes", "\n", "boxes", ",", "scores", "=", "x", "[", ":", ",", ":", "4", "]", "+", "c", ",", "x", "[", ":", ",", "4", "]", "# boxes (offset by class), scores", "\n", "i", "=", "torchvision", ".", "ops", ".", "nms", "(", "boxes", ",", "scores", ",", "iou_thres", ")", "# NMS", "\n", "if", "i", ".", "shape", "[", "0", "]", ">", "max_det", ":", "# limit detections", "\n", "            ", "i", "=", "i", "[", ":", "max_det", "]", "\n", "", "if", "merge", "and", "(", "1", "<", "n", "<", "3E3", ")", ":", "# Merge NMS (boxes merged using weighted mean)", "\n", "# update boxes as boxes(i,4) = weights(i,n) * boxes(n,4)", "\n", "            ", "iou", "=", "box_iou", "(", "boxes", "[", "i", "]", ",", "boxes", ")", ">", "iou_thres", "# iou matrix", "\n", "weights", "=", "iou", "*", "scores", "[", "None", "]", "# box weights", "\n", "x", "[", "i", ",", ":", "4", "]", "=", "torch", ".", "mm", "(", "weights", ",", "x", "[", ":", ",", ":", "4", "]", ")", ".", "float", "(", ")", "/", "weights", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "# merged boxes", "\n", "if", "redundant", ":", "\n", "                ", "i", "=", "i", "[", "iou", ".", "sum", "(", "1", ")", ">", "1", "]", "# require redundancy", "\n", "\n", "", "", "output", "[", "xi", "]", "=", "x", "[", "i", "]", "\n", "if", "(", "time", ".", "time", "(", ")", "-", "t", ")", ">", "time_limit", ":", "\n", "            ", "print", "(", "f'WARNING: NMS time limit {time_limit}s exceeded'", ")", "\n", "break", "# time limit exceeded", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.strip_optimizer": [[734, 748], ["torch.load", "torch.load.get", "x[].half", "x[].parameters", "torch.save", "print", "os.path.getsize", "torch.device"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print"], ["", "def", "strip_optimizer", "(", "f", "=", "'best.pt'", ",", "s", "=", "''", ")", ":", "# from utils.general import *; strip_optimizer()", "\n", "# Strip optimizer from 'f' to finalize training, optionally save as 's'", "\n", "    ", "x", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "if", "x", ".", "get", "(", "'ema'", ")", ":", "\n", "        ", "x", "[", "'model'", "]", "=", "x", "[", "'ema'", "]", "# replace model with ema", "\n", "", "for", "k", "in", "'optimizer'", ",", "'training_results'", ",", "'wandb_id'", ",", "'ema'", ",", "'updates'", ":", "# keys", "\n", "        ", "x", "[", "k", "]", "=", "None", "\n", "", "x", "[", "'epoch'", "]", "=", "-", "1", "\n", "x", "[", "'model'", "]", ".", "half", "(", ")", "# to FP16", "\n", "for", "p", "in", "x", "[", "'model'", "]", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "torch", ".", "save", "(", "x", ",", "s", "or", "f", ")", "\n", "mb", "=", "os", ".", "path", ".", "getsize", "(", "s", "or", "f", ")", "/", "1E6", "# filesize", "\n", "print", "(", "f\"Optimizer stripped from {f},{(' saved as %s,' % s) if s else ''} {mb:.1f}MB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.print_mutation": [[750, 787], ["tuple", "len", "print", "print", "tuple", "tuple", "evolve_csv.exists", "open", "f.write", "open", "pandas.read_csv", "data.rename.rename", "numpy.argmax", "f.write", "yaml.safe_dump", "os.system", "hyp.keys", "x.strip", "hyp.values", "utils.downloads.gsutil_getsize", "os.system", "general.colorstr", "general.colorstr", "utils.metrics.fitness", "os.path.exists", "os.path.getsize", "x.strip", "x.strip", "len", "x.strip"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.gsutil_getsize", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.metrics.fitness"], ["", "def", "print_mutation", "(", "results", ",", "hyp", ",", "save_dir", ",", "bucket", ")", ":", "\n", "    ", "evolve_csv", ",", "results_csv", ",", "evolve_yaml", "=", "save_dir", "/", "'evolve.csv'", ",", "save_dir", "/", "'results.csv'", ",", "save_dir", "/", "'hyp_evolve.yaml'", "\n", "keys", "=", "(", "'metrics/precision'", ",", "'metrics/recall'", ",", "'metrics/mAP_0.5'", ",", "'metrics/mAP_0.5:0.95'", ",", "\n", "'val/box_loss'", ",", "'val/obj_loss'", ",", "'val/cls_loss'", ")", "+", "tuple", "(", "hyp", ".", "keys", "(", ")", ")", "# [results + hyps]", "\n", "keys", "=", "tuple", "(", "x", ".", "strip", "(", ")", "for", "x", "in", "keys", ")", "\n", "vals", "=", "results", "+", "tuple", "(", "hyp", ".", "values", "(", ")", ")", "\n", "n", "=", "len", "(", "keys", ")", "\n", "\n", "# Download (optional)", "\n", "if", "bucket", ":", "\n", "        ", "url", "=", "f'gs://{bucket}/evolve.csv'", "\n", "if", "gsutil_getsize", "(", "url", ")", ">", "(", "os", ".", "path", ".", "getsize", "(", "evolve_csv", ")", "if", "os", ".", "path", ".", "exists", "(", "evolve_csv", ")", "else", "0", ")", ":", "\n", "            ", "os", ".", "system", "(", "f'gsutil cp {url} {save_dir}'", ")", "# download evolve.csv if larger than local", "\n", "\n", "# Log to evolve.csv", "\n", "", "", "s", "=", "''", "if", "evolve_csv", ".", "exists", "(", ")", "else", "(", "(", "'%20s,'", "*", "n", "%", "keys", ")", ".", "rstrip", "(", "','", ")", "+", "'\\n'", ")", "# add header", "\n", "with", "open", "(", "evolve_csv", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "s", "+", "(", "'%20.5g,'", "*", "n", "%", "vals", ")", ".", "rstrip", "(", "','", ")", "+", "'\\n'", ")", "\n", "\n", "# Print to screen", "\n", "", "print", "(", "colorstr", "(", "'evolve: '", ")", "+", "', '", ".", "join", "(", "f'{x.strip():>20s}'", "for", "x", "in", "keys", ")", ")", "\n", "print", "(", "colorstr", "(", "'evolve: '", ")", "+", "', '", ".", "join", "(", "f'{x:20.5g}'", "for", "x", "in", "vals", ")", ",", "end", "=", "'\\n\\n\\n'", ")", "\n", "\n", "# Save yaml", "\n", "with", "open", "(", "evolve_yaml", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pd", ".", "read_csv", "(", "evolve_csv", ")", "\n", "data", "=", "data", ".", "rename", "(", "columns", "=", "lambda", "x", ":", "x", ".", "strip", "(", ")", ")", "# strip keys", "\n", "i", "=", "np", ".", "argmax", "(", "fitness", "(", "data", ".", "values", "[", ":", ",", ":", "7", "]", ")", ")", "#", "\n", "f", ".", "write", "(", "'# YOLOv3 Hyperparameter Evolution Results\\n'", "+", "\n", "f'# Best generation: {i}\\n'", "+", "\n", "f'# Last generation: {len(data)}\\n'", "+", "\n", "'# '", "+", "', '", ".", "join", "(", "f'{x.strip():>20s}'", "for", "x", "in", "keys", "[", ":", "7", "]", ")", "+", "'\\n'", "+", "\n", "'# '", "+", "', '", ".", "join", "(", "f'{x:>20.5g}'", "for", "x", "in", "data", ".", "values", "[", "i", ",", ":", "7", "]", ")", "+", "'\\n\\n'", ")", "\n", "yaml", ".", "safe_dump", "(", "hyp", ",", "f", ",", "sort_keys", "=", "False", ")", "\n", "\n", "", "if", "bucket", ":", "\n", "        ", "os", ".", "system", "(", "f'gsutil cp {evolve_csv} {evolve_yaml} gs://{bucket}'", ")", "# upload", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.apply_classifier": [[789, 823], ["enumerate", "isinstance", "len", "d.clone.clone", "general.xyxy2xywh", "[].unsqueeze", "xywh2xyxy().long", "general.scale_coords", "d[].long", "enumerate", "model().argmax", "cv2.resize", "im[].transpose", "numpy.ascontiguousarray", "ims.append", "general.xywh2xyxy", "model", "b[].max", "torch.Tensor().to", "int", "int", "int", "int", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.scale_coords", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywh2xyxy"], ["", "", "def", "apply_classifier", "(", "x", ",", "model", ",", "img", ",", "im0", ")", ":", "\n", "# Apply a second stage classifier to YOLO outputs", "\n", "# Example model = torchvision.models.__dict__['efficientnet_b0'](pretrained=True).to(device).eval()", "\n", "    ", "im0", "=", "[", "im0", "]", "if", "isinstance", "(", "im0", ",", "np", ".", "ndarray", ")", "else", "im0", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "x", ")", ":", "# per image", "\n", "        ", "if", "d", "is", "not", "None", "and", "len", "(", "d", ")", ":", "\n", "            ", "d", "=", "d", ".", "clone", "(", ")", "\n", "\n", "# Reshape and pad cutouts", "\n", "b", "=", "xyxy2xywh", "(", "d", "[", ":", ",", ":", "4", "]", ")", "# boxes", "\n", "b", "[", ":", ",", "2", ":", "]", "=", "b", "[", ":", ",", "2", ":", "]", ".", "max", "(", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "# rectangle to square", "\n", "b", "[", ":", ",", "2", ":", "]", "=", "b", "[", ":", ",", "2", ":", "]", "*", "1.3", "+", "30", "# pad", "\n", "d", "[", ":", ",", ":", "4", "]", "=", "xywh2xyxy", "(", "b", ")", ".", "long", "(", ")", "\n", "\n", "# Rescale boxes from img_size to im0 size", "\n", "scale_coords", "(", "img", ".", "shape", "[", "2", ":", "]", ",", "d", "[", ":", ",", ":", "4", "]", ",", "im0", "[", "i", "]", ".", "shape", ")", "\n", "\n", "# Classes", "\n", "pred_cls1", "=", "d", "[", ":", ",", "5", "]", ".", "long", "(", ")", "\n", "ims", "=", "[", "]", "\n", "for", "j", ",", "a", "in", "enumerate", "(", "d", ")", ":", "# per item", "\n", "                ", "cutout", "=", "im0", "[", "i", "]", "[", "int", "(", "a", "[", "1", "]", ")", ":", "int", "(", "a", "[", "3", "]", ")", ",", "int", "(", "a", "[", "0", "]", ")", ":", "int", "(", "a", "[", "2", "]", ")", "]", "\n", "im", "=", "cv2", ".", "resize", "(", "cutout", ",", "(", "224", ",", "224", ")", ")", "# BGR", "\n", "# cv2.imwrite('example%i.jpg' % j, cutout)", "\n", "\n", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# BGR to RGB, to 3x416x416", "\n", "im", "=", "np", ".", "ascontiguousarray", "(", "im", ",", "dtype", "=", "np", ".", "float32", ")", "# uint8 to float32", "\n", "im", "/=", "255", "# 0 - 255 to 0.0 - 1.0", "\n", "ims", ".", "append", "(", "im", ")", "\n", "\n", "", "pred_cls2", "=", "model", "(", "torch", ".", "Tensor", "(", "ims", ")", ".", "to", "(", "d", ".", "device", ")", ")", ".", "argmax", "(", "1", ")", "# classifier prediction", "\n", "x", "[", "i", "]", "=", "x", "[", "i", "]", "[", "pred_cls1", "==", "pred_cls2", "]", "# retain matching class detections", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.increment_path": [[825, 838], ["pathlib.Path", "pathlib.Path.exists", "glob.glob", "pathlib.Path", "pathlib.Path.mkdir", "pathlib.Path.is_file", "re.search", "int", "pathlib.Path.with_suffix", "max", "m.groups"], "function", ["None"], ["", "def", "increment_path", "(", "path", ",", "exist_ok", "=", "False", ",", "sep", "=", "''", ",", "mkdir", "=", "False", ")", ":", "\n", "# Increment file or directory path, i.e. runs/exp --> runs/exp{sep}2, runs/exp{sep}3, ... etc.", "\n", "    ", "path", "=", "Path", "(", "path", ")", "# os-agnostic", "\n", "if", "path", ".", "exists", "(", ")", "and", "not", "exist_ok", ":", "\n", "        ", "path", ",", "suffix", "=", "(", "path", ".", "with_suffix", "(", "''", ")", ",", "path", ".", "suffix", ")", "if", "path", ".", "is_file", "(", ")", "else", "(", "path", ",", "''", ")", "\n", "dirs", "=", "glob", ".", "glob", "(", "f\"{path}{sep}*\"", ")", "# similar paths", "\n", "matches", "=", "[", "re", ".", "search", "(", "rf\"%s{sep}(\\d+)\"", "%", "path", ".", "stem", ",", "d", ")", "for", "d", "in", "dirs", "]", "\n", "i", "=", "[", "int", "(", "m", ".", "groups", "(", ")", "[", "0", "]", ")", "for", "m", "in", "matches", "if", "m", "]", "# indices", "\n", "n", "=", "max", "(", "i", ")", "+", "1", "if", "i", "else", "2", "# increment number", "\n", "path", "=", "Path", "(", "f\"{path}{sep}{n}{suffix}\"", ")", "# increment path", "\n", "", "if", "mkdir", ":", "\n", "        ", "path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make directory", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.InfiniteDataLoader.__init__": [[131, 135], ["torch.utils.data.dataloader.DataLoader.__init__", "object.__setattr__", "torch.utils.data.dataloader.DataLoader.__iter__", "datasets._RepeatSampler"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.__iter__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "object", ".", "__setattr__", "(", "self", ",", "'batch_sampler'", ",", "_RepeatSampler", "(", "self", ".", "batch_sampler", ")", ")", "\n", "self", ".", "iterator", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.InfiniteDataLoader.__len__": [[136, 138], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batch_sampler", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.InfiniteDataLoader.__iter__": [[139, 142], ["range", "len", "next"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "next", "(", "self", ".", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets._RepeatSampler.__init__": [[151, 153], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets._RepeatSampler.__iter__": [[154, 157], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "from", "iter", "(", "self", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImages.__init__": [[161, 188], ["str", "any", "pathlib.Path().resolve", "sorted", "os.path.isdir", "len", "len", "datasets.LoadImages.new_video", "glob.glob", "sorted", "os.path.isfile", "pathlib.Path", "glob.glob", "Exception", "[].lower", "[].lower", "os.path.join", "x.split", "x.split"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImages.new_video"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "img_size", "=", "640", ",", "stride", "=", "32", ",", "auto", "=", "True", ")", ":", "\n", "        ", "p", "=", "str", "(", "Path", "(", "path", ")", ".", "resolve", "(", ")", ")", "# os-agnostic absolute path", "\n", "if", "'*'", "in", "p", ":", "\n", "            ", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "p", ",", "recursive", "=", "True", ")", ")", "# glob", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "p", ")", ":", "\n", "            ", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "p", ",", "'*.*'", ")", ")", ")", "# dir", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "p", ")", ":", "\n", "            ", "files", "=", "[", "p", "]", "# files", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'ERROR: {p} does not exist'", ")", "\n", "\n", "", "images", "=", "[", "x", "for", "x", "in", "files", "if", "x", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ".", "lower", "(", ")", "in", "IMG_FORMATS", "]", "\n", "videos", "=", "[", "x", "for", "x", "in", "files", "if", "x", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ".", "lower", "(", ")", "in", "VID_FORMATS", "]", "\n", "ni", ",", "nv", "=", "len", "(", "images", ")", ",", "len", "(", "videos", ")", "\n", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "files", "=", "images", "+", "videos", "\n", "self", ".", "nf", "=", "ni", "+", "nv", "# number of files", "\n", "self", ".", "video_flag", "=", "[", "False", "]", "*", "ni", "+", "[", "True", "]", "*", "nv", "\n", "self", ".", "mode", "=", "'image'", "\n", "self", ".", "auto", "=", "auto", "\n", "if", "any", "(", "videos", ")", ":", "\n", "            ", "self", ".", "new_video", "(", "videos", "[", "0", "]", ")", "# new video", "\n", "", "else", ":", "\n", "            ", "self", ".", "cap", "=", "None", "\n", "", "assert", "self", ".", "nf", ">", "0", ",", "f'No images or videos found in {p}. '", "f'Supported formats are:\\nimages: {IMG_FORMATS}\\nvideos: {VID_FORMATS}'", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImages.__iter__": [[190, 193], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImages.__next__": [[194, 231], ["numpy.ascontiguousarray", "datasets.LoadImages.cap.read", "cv2.imread", "utils.augmentations.letterbox", "numpy.ascontiguousarray.transpose", "datasets.LoadImages.cap.release", "datasets.LoadImages.new_video", "datasets.LoadImages.cap.read"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.letterbox", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImages.new_video"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "count", "==", "self", ".", "nf", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "path", "=", "self", ".", "files", "[", "self", ".", "count", "]", "\n", "\n", "if", "self", ".", "video_flag", "[", "self", ".", "count", "]", ":", "\n", "# Read video", "\n", "            ", "self", ".", "mode", "=", "'video'", "\n", "ret_val", ",", "img0", "=", "self", ".", "cap", ".", "read", "(", ")", "\n", "if", "not", "ret_val", ":", "\n", "                ", "self", ".", "count", "+=", "1", "\n", "self", ".", "cap", ".", "release", "(", ")", "\n", "if", "self", ".", "count", "==", "self", ".", "nf", ":", "# last video", "\n", "                    ", "raise", "StopIteration", "\n", "", "else", ":", "\n", "                    ", "path", "=", "self", ".", "files", "[", "self", ".", "count", "]", "\n", "self", ".", "new_video", "(", "path", ")", "\n", "ret_val", ",", "img0", "=", "self", ".", "cap", ".", "read", "(", ")", "\n", "\n", "", "", "self", ".", "frame", "+=", "1", "\n", "s", "=", "f'video {self.count + 1}/{self.nf} ({self.frame}/{self.frames}) {path}: '", "\n", "\n", "", "else", ":", "\n", "# Read image", "\n", "            ", "self", ".", "count", "+=", "1", "\n", "img0", "=", "cv2", ".", "imread", "(", "path", ")", "# BGR", "\n", "assert", "img0", "is", "not", "None", ",", "f'Image Not Found {path}'", "\n", "s", "=", "f'image {self.count}/{self.nf} {path}: '", "\n", "\n", "# Padded resize", "\n", "", "img", "=", "letterbox", "(", "img0", ",", "self", ".", "img_size", ",", "stride", "=", "self", ".", "stride", ",", "auto", "=", "self", ".", "auto", ")", "[", "0", "]", "\n", "\n", "# Convert", "\n", "img", "=", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ":", "-", "1", "]", "# HWC to CHW, BGR to RGB", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "return", "path", ",", "img", ",", "img0", ",", "self", ".", "cap", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImages.new_video": [[232, 236], ["cv2.VideoCapture", "int", "datasets.LoadImages.cap.get"], "methods", ["None"], ["", "def", "new_video", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "frame", "=", "0", "\n", "self", ".", "cap", "=", "cv2", ".", "VideoCapture", "(", "path", ")", "\n", "self", ".", "frames", "=", "int", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImages.__len__": [[237, 239], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nf", "# number of files", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadWebcam.__init__": [[243, 249], ["cv2.VideoCapture", "datasets.LoadWebcam.cap.set", "pipe.isnumeric", "eval"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pipe", "=", "'0'", ",", "img_size", "=", "640", ",", "stride", "=", "32", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "pipe", "=", "eval", "(", "pipe", ")", "if", "pipe", ".", "isnumeric", "(", ")", "else", "pipe", "\n", "self", ".", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "pipe", ")", "# video capture object", "\n", "self", ".", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_BUFFERSIZE", ",", "3", ")", "# set buffer size", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadWebcam.__iter__": [[250, 253], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "-", "1", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadWebcam.__next__": [[254, 278], ["datasets.LoadWebcam.cap.read", "cv2.flip", "numpy.ascontiguousarray", "cv2.waitKey", "ord", "datasets.LoadWebcam.cap.release", "cv2.destroyAllWindows", "utils.augmentations.letterbox", "numpy.ascontiguousarray.transpose"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.letterbox"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "+=", "1", "\n", "if", "cv2", ".", "waitKey", "(", "1", ")", "==", "ord", "(", "'q'", ")", ":", "# q to quit", "\n", "            ", "self", ".", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "# Read frame", "\n", "", "ret_val", ",", "img0", "=", "self", ".", "cap", ".", "read", "(", ")", "\n", "img0", "=", "cv2", ".", "flip", "(", "img0", ",", "1", ")", "# flip left-right", "\n", "\n", "# Print", "\n", "assert", "ret_val", ",", "f'Camera Error {self.pipe}'", "\n", "img_path", "=", "'webcam.jpg'", "\n", "s", "=", "f'webcam {self.count}: '", "\n", "\n", "# Padded resize", "\n", "img", "=", "letterbox", "(", "img0", ",", "self", ".", "img_size", ",", "stride", "=", "self", ".", "stride", ")", "[", "0", "]", "\n", "\n", "# Convert", "\n", "img", "=", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ":", "-", "1", "]", "# HWC to CHW, BGR to RGB", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "return", "img_path", ",", "img", ",", "img0", ",", "None", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadWebcam.__len__": [[279, 281], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.__init__": [[285, 326], ["os.path.isfile", "len", "enumerate", "utils.general.LOGGER.info", "numpy.stack", "utils.general.clean_str", "cv2.VideoCapture", "cv2.VideoCapture.isOpened", "int", "int", "cv2.VideoCapture.read", "threading.Thread", "utils.general.LOGGER.info", "datasets.LoadStreams.threads[].start", "utils.general.LOGGER.warning", "open", "utils.general.check_requirements", "numpy.stack.isnumeric", "eval", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "max", "max", "float", "x.strip", "pafy.new().getbest", "int", "numpy.unique", "f.read().strip().splitlines", "len", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "utils.augmentations.letterbox", "x.strip", "pafy.new", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.clean_str", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.letterbox"], ["    ", "def", "__init__", "(", "self", ",", "sources", "=", "'streams.txt'", ",", "img_size", "=", "640", ",", "stride", "=", "32", ",", "auto", "=", "True", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'stream'", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "sources", ")", ":", "\n", "            ", "with", "open", "(", "sources", ")", "as", "f", ":", "\n", "                ", "sources", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "splitlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "sources", "=", "[", "sources", "]", "\n", "\n", "", "n", "=", "len", "(", "sources", ")", "\n", "self", ".", "imgs", ",", "self", ".", "fps", ",", "self", ".", "frames", ",", "self", ".", "threads", "=", "[", "None", "]", "*", "n", ",", "[", "0", "]", "*", "n", ",", "[", "0", "]", "*", "n", ",", "[", "None", "]", "*", "n", "\n", "self", ".", "sources", "=", "[", "clean_str", "(", "x", ")", "for", "x", "in", "sources", "]", "# clean source names for later", "\n", "self", ".", "auto", "=", "auto", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sources", ")", ":", "# index, source", "\n", "# Start thread to read frames from video stream", "\n", "            ", "st", "=", "f'{i + 1}/{n}: {s}... '", "\n", "if", "'youtube.com/'", "in", "s", "or", "'youtu.be/'", "in", "s", ":", "# if source is YouTube video", "\n", "                ", "check_requirements", "(", "(", "'pafy'", ",", "'youtube_dl'", ")", ")", "\n", "import", "pafy", "\n", "s", "=", "pafy", ".", "new", "(", "s", ")", ".", "getbest", "(", "preftype", "=", "\"mp4\"", ")", ".", "url", "# YouTube URL", "\n", "", "s", "=", "eval", "(", "s", ")", "if", "s", ".", "isnumeric", "(", ")", "else", "s", "# i.e. s = '0' local webcam", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "s", ")", "\n", "assert", "cap", ".", "isOpened", "(", ")", ",", "f'{st}Failed to open {s}'", "\n", "w", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", "\n", "h", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", "\n", "self", ".", "fps", "[", "i", "]", "=", "max", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "%", "100", ",", "0", ")", "or", "30.0", "# 30 FPS fallback", "\n", "self", ".", "frames", "[", "i", "]", "=", "max", "(", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", ",", "0", ")", "or", "float", "(", "'inf'", ")", "# infinite stream fallback", "\n", "\n", "_", ",", "self", ".", "imgs", "[", "i", "]", "=", "cap", ".", "read", "(", ")", "# guarantee first frame", "\n", "self", ".", "threads", "[", "i", "]", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", "[", "i", ",", "cap", ",", "s", "]", ")", ",", "daemon", "=", "True", ")", "\n", "LOGGER", ".", "info", "(", "f\"{st} Success ({self.frames[i]} frames {w}x{h} at {self.fps[i]:.2f} FPS)\"", ")", "\n", "self", ".", "threads", "[", "i", "]", ".", "start", "(", ")", "\n", "", "LOGGER", ".", "info", "(", "''", ")", "# newline", "\n", "\n", "# check for common shapes", "\n", "s", "=", "np", ".", "stack", "(", "[", "letterbox", "(", "x", ",", "self", ".", "img_size", ",", "stride", "=", "self", ".", "stride", ",", "auto", "=", "self", ".", "auto", ")", "[", "0", "]", ".", "shape", "for", "x", "in", "self", ".", "imgs", "]", ")", "\n", "self", ".", "rect", "=", "np", ".", "unique", "(", "s", ",", "axis", "=", "0", ")", ".", "shape", "[", "0", "]", "==", "1", "# rect inference if all shapes equal", "\n", "if", "not", "self", ".", "rect", ":", "\n", "            ", "LOGGER", ".", "warning", "(", "'WARNING: Stream shapes differ. For optimal performance supply similarly-shaped streams.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.update": [[327, 343], ["cap.isOpened", "cap.grab", "time.sleep", "cap.retrieve", "utils.general.LOGGER.warning", "cap.open"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "i", ",", "cap", ",", "stream", ")", ":", "\n", "# Read stream `i` frames in daemon thread", "\n", "        ", "n", ",", "f", ",", "read", "=", "0", ",", "self", ".", "frames", "[", "i", "]", ",", "1", "# frame number, frame array, inference every 'read' frame", "\n", "while", "cap", ".", "isOpened", "(", ")", "and", "n", "<", "f", ":", "\n", "            ", "n", "+=", "1", "\n", "# _, self.imgs[index] = cap.read()", "\n", "cap", ".", "grab", "(", ")", "\n", "if", "n", "%", "read", "==", "0", ":", "\n", "                ", "success", ",", "im", "=", "cap", ".", "retrieve", "(", ")", "\n", "if", "success", ":", "\n", "                    ", "self", ".", "imgs", "[", "i", "]", "=", "im", "\n", "", "else", ":", "\n", "                    ", "LOGGER", ".", "warning", "(", "'WARNING: Video stream unresponsive, please check your IP camera connection.'", ")", "\n", "self", ".", "imgs", "[", "i", "]", "*=", "0", "\n", "cap", ".", "open", "(", "stream", ")", "# re-open stream if signal was lost", "\n", "", "", "time", ".", "sleep", "(", "1", "/", "self", ".", "fps", "[", "i", "]", ")", "# wait time", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.__iter__": [[344, 347], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "-", "1", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.__next__": [[348, 366], ["datasets.LoadStreams.imgs.copy", "numpy.stack", "img[].transpose", "numpy.ascontiguousarray", "cv2.destroyAllWindows", "all", "cv2.waitKey", "ord", "utils.augmentations.letterbox", "x.is_alive"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.letterbox"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "+=", "1", "\n", "if", "not", "all", "(", "x", ".", "is_alive", "(", ")", "for", "x", "in", "self", ".", "threads", ")", "or", "cv2", ".", "waitKey", "(", "1", ")", "==", "ord", "(", "'q'", ")", ":", "# q to quit", "\n", "            ", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "# Letterbox", "\n", "", "img0", "=", "self", ".", "imgs", ".", "copy", "(", ")", "\n", "img", "=", "[", "letterbox", "(", "x", ",", "self", ".", "img_size", ",", "stride", "=", "self", ".", "stride", ",", "auto", "=", "self", ".", "rect", "and", "self", ".", "auto", ")", "[", "0", "]", "for", "x", "in", "img0", "]", "\n", "\n", "# Stack", "\n", "img", "=", "np", ".", "stack", "(", "img", ",", "0", ")", "\n", "\n", "# Convert", "\n", "img", "=", "img", "[", "...", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "# BGR to RGB, BHWC to BCHW", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "return", "self", ".", "sources", ",", "img", ",", "img0", ",", "None", ",", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.__len__": [[367, 369], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sources", ")", "# 1E12 frames = 32 streams at 30 FPS for 30 years", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImagesAndLabels.__init__": [[381, 507], ["datasets.img2label_paths", "cache.pop", "zip", "list", "numpy.array", "list", "datasets.img2label_paths", "len", "numpy.floor().astype", "range", "numpy.array().reshape", "enumerate", "utils.augmentations.Albumentations", "sorted", "tqdm.tqdm.tqdm", "cache.pop", "cache.keys", "cache.keys", "zip", "ar.argsort", "range", "multiprocessing.pool.ThreadPool().imap", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.close", "isinstance", "pathlib.Path", "pathlib.Path.is_dir", "Exception", "numpy.load().item", "datasets.get_hash", "utils.general.LOGGER.info", "cache.values", "numpy.floor", "numpy.array", "numpy.ceil().astype", "pathlib.Path", "datasets.LoadImagesAndLabels.im_cache_dir.mkdir", "zip", "enumerate", "glob.glob", "pathlib.Path.is_file", "x.replace", "pathlib.Path.is_file", "datasets.LoadImagesAndLabels.cache_labels", "ari.min", "ari.max", "multiprocessing.pool.ThreadPool", "datasets.load_image", "itertools.repeat", "range", "str", "Exception", "pathlib.Path", "numpy.load", "numpy.arange", "numpy.ceil", "pathlib.Path().parent.as_posix", "datasets.LoadImagesAndLabels.img_npy[].exists", "numpy.save", "datasets.LoadImagesAndLabels.img_npy[].stat", "open", "t.read().strip().splitlines.read().strip().splitlines.read().strip().splitlines", "[].lower", "pathlib.Path().with_suffix", "datasets.LoadImagesAndLabels.img_npy[].as_posix", "str", "t.read().strip().splitlines.read().strip().splitlines.read().strip", "x.startswith", "x.replace", "pathlib.Path", "pathlib.Path", "x.split", "numpy.array", "t.read().strip().splitlines.read().strip().splitlines.read"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.img2label_paths", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.img2label_paths", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.get_hash", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImagesAndLabels.cache_labels", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.load_image", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save"], ["def", "__init__", "(", "self", ",", "path", ",", "img_size", "=", "640", ",", "batch_size", "=", "16", ",", "augment", "=", "False", ",", "hyp", "=", "None", ",", "rect", "=", "False", ",", "image_weights", "=", "False", ",", "\n", "cache_images", "=", "False", ",", "single_cls", "=", "False", ",", "stride", "=", "32", ",", "pad", "=", "0.0", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "hyp", "=", "hyp", "\n", "self", ".", "image_weights", "=", "image_weights", "\n", "self", ".", "rect", "=", "False", "if", "image_weights", "else", "rect", "\n", "self", ".", "mosaic", "=", "self", ".", "augment", "and", "not", "self", ".", "rect", "# load 4 images at a time into a mosaic (only during training)", "\n", "self", ".", "mosaic_border", "=", "[", "-", "img_size", "//", "2", ",", "-", "img_size", "//", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "albumentations", "=", "Albumentations", "(", ")", "if", "augment", "else", "None", "\n", "\n", "try", ":", "\n", "            ", "f", "=", "[", "]", "# image files", "\n", "for", "p", "in", "path", "if", "isinstance", "(", "path", ",", "list", ")", "else", "[", "path", "]", ":", "\n", "                ", "p", "=", "Path", "(", "p", ")", "# os-agnostic", "\n", "if", "p", ".", "is_dir", "(", ")", ":", "# dir", "\n", "                    ", "f", "+=", "glob", ".", "glob", "(", "str", "(", "p", "/", "'**'", "/", "'*.*'", ")", ",", "recursive", "=", "True", ")", "\n", "# f = list(p.rglob('*.*'))  # pathlib", "\n", "", "elif", "p", ".", "is_file", "(", ")", ":", "# file", "\n", "                    ", "with", "open", "(", "p", ")", "as", "t", ":", "\n", "                        ", "t", "=", "t", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "splitlines", "(", ")", "\n", "parent", "=", "str", "(", "p", ".", "parent", ")", "+", "os", ".", "sep", "\n", "f", "+=", "[", "x", ".", "replace", "(", "'./'", ",", "parent", ")", "if", "x", ".", "startswith", "(", "'./'", ")", "else", "x", "for", "x", "in", "t", "]", "# local to global path", "\n", "# f += [p.parent / x.lstrip(os.sep) for x in t]  # local to global path (pathlib)", "\n", "", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "f'{prefix}{p} does not exist'", ")", "\n", "", "", "self", ".", "img_files", "=", "sorted", "(", "x", ".", "replace", "(", "'/'", ",", "os", ".", "sep", ")", "for", "x", "in", "f", "if", "x", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ".", "lower", "(", ")", "in", "IMG_FORMATS", ")", "\n", "# self.img_files = sorted([x for x in f if x.suffix[1:].lower() in IMG_FORMATS])  # pathlib", "\n", "assert", "self", ".", "img_files", ",", "f'{prefix}No images found'", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "Exception", "(", "f'{prefix}Error loading data from {path}: {e}\\nSee {HELP_URL}'", ")", "\n", "\n", "# Check cache", "\n", "", "self", ".", "label_files", "=", "img2label_paths", "(", "self", ".", "img_files", ")", "# labels", "\n", "cache_path", "=", "(", "p", "if", "p", ".", "is_file", "(", ")", "else", "Path", "(", "self", ".", "label_files", "[", "0", "]", ")", ".", "parent", ")", ".", "with_suffix", "(", "'.cache'", ")", "\n", "try", ":", "\n", "            ", "cache", ",", "exists", "=", "np", ".", "load", "(", "cache_path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", ",", "True", "# load dict", "\n", "assert", "cache", "[", "'version'", "]", "==", "self", ".", "cache_version", "# same version", "\n", "assert", "cache", "[", "'hash'", "]", "==", "get_hash", "(", "self", ".", "label_files", "+", "self", ".", "img_files", ")", "# same hash", "\n", "", "except", ":", "\n", "            ", "cache", ",", "exists", "=", "self", ".", "cache_labels", "(", "cache_path", ",", "prefix", ")", ",", "False", "# cache", "\n", "\n", "# Display cache", "\n", "", "nf", ",", "nm", ",", "ne", ",", "nc", ",", "n", "=", "cache", ".", "pop", "(", "'results'", ")", "# found, missing, empty, corrupted, total", "\n", "if", "exists", ":", "\n", "            ", "d", "=", "f\"Scanning '{cache_path}' images and labels... {nf} found, {nm} missing, {ne} empty, {nc} corrupted\"", "\n", "tqdm", "(", "None", ",", "desc", "=", "prefix", "+", "d", ",", "total", "=", "n", ",", "initial", "=", "n", ")", "# display cache results", "\n", "if", "cache", "[", "'msgs'", "]", ":", "\n", "                ", "LOGGER", ".", "info", "(", "'\\n'", ".", "join", "(", "cache", "[", "'msgs'", "]", ")", ")", "# display warnings", "\n", "", "", "assert", "nf", ">", "0", "or", "not", "augment", ",", "f'{prefix}No labels in {cache_path}. Can not train without labels. See {HELP_URL}'", "\n", "\n", "# Read cache", "\n", "[", "cache", ".", "pop", "(", "k", ")", "for", "k", "in", "(", "'hash'", ",", "'version'", ",", "'msgs'", ")", "]", "# remove items", "\n", "labels", ",", "shapes", ",", "self", ".", "segments", "=", "zip", "(", "*", "cache", ".", "values", "(", ")", ")", "\n", "self", ".", "labels", "=", "list", "(", "labels", ")", "\n", "self", ".", "shapes", "=", "np", ".", "array", "(", "shapes", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "img_files", "=", "list", "(", "cache", ".", "keys", "(", ")", ")", "# update", "\n", "self", ".", "label_files", "=", "img2label_paths", "(", "cache", ".", "keys", "(", ")", ")", "# update", "\n", "n", "=", "len", "(", "shapes", ")", "# number of images", "\n", "bi", "=", "np", ".", "floor", "(", "np", ".", "arange", "(", "n", ")", "/", "batch_size", ")", ".", "astype", "(", "np", ".", "int", ")", "# batch index", "\n", "nb", "=", "bi", "[", "-", "1", "]", "+", "1", "# number of batches", "\n", "self", ".", "batch", "=", "bi", "# batch index of image", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "indices", "=", "range", "(", "n", ")", "\n", "\n", "# Update labels", "\n", "include_class", "=", "[", "]", "# filter labels to include only these classes (optional)", "\n", "include_class_array", "=", "np", ".", "array", "(", "include_class", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "for", "i", ",", "(", "label", ",", "segment", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "labels", ",", "self", ".", "segments", ")", ")", ":", "\n", "            ", "if", "include_class", ":", "\n", "                ", "j", "=", "(", "label", "[", ":", ",", "0", ":", "1", "]", "==", "include_class_array", ")", ".", "any", "(", "1", ")", "\n", "self", ".", "labels", "[", "i", "]", "=", "label", "[", "j", "]", "\n", "if", "segment", ":", "\n", "                    ", "self", ".", "segments", "[", "i", "]", "=", "segment", "[", "j", "]", "\n", "", "", "if", "single_cls", ":", "# single-class training, merge all classes into 0", "\n", "                ", "self", ".", "labels", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "if", "segment", ":", "\n", "                    ", "self", ".", "segments", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "\n", "# Rectangular Training", "\n", "", "", "", "if", "self", ".", "rect", ":", "\n", "# Sort by aspect ratio", "\n", "            ", "s", "=", "self", ".", "shapes", "# wh", "\n", "ar", "=", "s", "[", ":", ",", "1", "]", "/", "s", "[", ":", ",", "0", "]", "# aspect ratio", "\n", "irect", "=", "ar", ".", "argsort", "(", ")", "\n", "self", ".", "img_files", "=", "[", "self", ".", "img_files", "[", "i", "]", "for", "i", "in", "irect", "]", "\n", "self", ".", "label_files", "=", "[", "self", ".", "label_files", "[", "i", "]", "for", "i", "in", "irect", "]", "\n", "self", ".", "labels", "=", "[", "self", ".", "labels", "[", "i", "]", "for", "i", "in", "irect", "]", "\n", "self", ".", "shapes", "=", "s", "[", "irect", "]", "# wh", "\n", "ar", "=", "ar", "[", "irect", "]", "\n", "\n", "# Set training image shapes", "\n", "shapes", "=", "[", "[", "1", ",", "1", "]", "]", "*", "nb", "\n", "for", "i", "in", "range", "(", "nb", ")", ":", "\n", "                ", "ari", "=", "ar", "[", "bi", "==", "i", "]", "\n", "mini", ",", "maxi", "=", "ari", ".", "min", "(", ")", ",", "ari", ".", "max", "(", ")", "\n", "if", "maxi", "<", "1", ":", "\n", "                    ", "shapes", "[", "i", "]", "=", "[", "maxi", ",", "1", "]", "\n", "", "elif", "mini", ">", "1", ":", "\n", "                    ", "shapes", "[", "i", "]", "=", "[", "1", ",", "1", "/", "mini", "]", "\n", "\n", "", "", "self", ".", "batch_shapes", "=", "np", ".", "ceil", "(", "np", ".", "array", "(", "shapes", ")", "*", "img_size", "/", "stride", "+", "pad", ")", ".", "astype", "(", "np", ".", "int", ")", "*", "stride", "\n", "\n", "# Cache images into memory for faster training (WARNING: large datasets may exceed system RAM)", "\n", "", "self", ".", "imgs", ",", "self", ".", "img_npy", "=", "[", "None", "]", "*", "n", ",", "[", "None", "]", "*", "n", "\n", "if", "cache_images", ":", "\n", "            ", "if", "cache_images", "==", "'disk'", ":", "\n", "                ", "self", ".", "im_cache_dir", "=", "Path", "(", "Path", "(", "self", ".", "img_files", "[", "0", "]", ")", ".", "parent", ".", "as_posix", "(", ")", "+", "'_npy'", ")", "\n", "self", ".", "img_npy", "=", "[", "self", ".", "im_cache_dir", "/", "Path", "(", "f", ")", ".", "with_suffix", "(", "'.npy'", ")", ".", "name", "for", "f", "in", "self", ".", "img_files", "]", "\n", "self", ".", "im_cache_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "gb", "=", "0", "# Gigabytes of cached images", "\n", "self", ".", "img_hw0", ",", "self", ".", "img_hw", "=", "[", "None", "]", "*", "n", ",", "[", "None", "]", "*", "n", "\n", "results", "=", "ThreadPool", "(", "NUM_THREADS", ")", ".", "imap", "(", "lambda", "x", ":", "load_image", "(", "*", "x", ")", ",", "zip", "(", "repeat", "(", "self", ")", ",", "range", "(", "n", ")", ")", ")", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "results", ")", ",", "total", "=", "n", ")", "\n", "for", "i", ",", "x", "in", "pbar", ":", "\n", "                ", "if", "cache_images", "==", "'disk'", ":", "\n", "                    ", "if", "not", "self", ".", "img_npy", "[", "i", "]", ".", "exists", "(", ")", ":", "\n", "                        ", "np", ".", "save", "(", "self", ".", "img_npy", "[", "i", "]", ".", "as_posix", "(", ")", ",", "x", "[", "0", "]", ")", "\n", "", "gb", "+=", "self", ".", "img_npy", "[", "i", "]", ".", "stat", "(", ")", ".", "st_size", "\n", "", "else", ":", "\n", "                    ", "self", ".", "imgs", "[", "i", "]", ",", "self", ".", "img_hw0", "[", "i", "]", ",", "self", ".", "img_hw", "[", "i", "]", "=", "x", "# im, hw_orig, hw_resized = load_image(self, i)", "\n", "gb", "+=", "self", ".", "imgs", "[", "i", "]", ".", "nbytes", "\n", "", "pbar", ".", "desc", "=", "f'{prefix}Caching images ({gb / 1E9:.1f}GB {cache_images})'", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImagesAndLabels.cache_labels": [[508, 543], ["pathlib.Path", "tqdm.tqdm.tqdm.close", "datasets.get_hash", "multiprocessing.pool.Pool", "tqdm.tqdm.tqdm", "utils.general.LOGGER.info", "utils.general.LOGGER.warning", "len", "numpy.save", "path.with_suffix().rename", "utils.general.LOGGER.info", "pool.imap", "utils.general.LOGGER.warning", "zip", "len", "msgs.append", "path.with_suffix", "itertools.repeat"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.get_hash", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["", "", "def", "cache_labels", "(", "self", ",", "path", "=", "Path", "(", "'./labels.cache'", ")", ",", "prefix", "=", "''", ")", ":", "\n", "# Cache dataset labels, check images and read shapes", "\n", "        ", "x", "=", "{", "}", "# dict", "\n", "nm", ",", "nf", ",", "ne", ",", "nc", ",", "msgs", "=", "0", ",", "0", ",", "0", ",", "0", ",", "[", "]", "# number missing, found, empty, corrupt, messages", "\n", "desc", "=", "f\"{prefix}Scanning '{path.parent / path.stem}' images and labels...\"", "\n", "with", "Pool", "(", "NUM_THREADS", ")", "as", "pool", ":", "\n", "            ", "pbar", "=", "tqdm", "(", "pool", ".", "imap", "(", "verify_image_label", ",", "zip", "(", "self", ".", "img_files", ",", "self", ".", "label_files", ",", "repeat", "(", "prefix", ")", ")", ")", ",", "\n", "desc", "=", "desc", ",", "total", "=", "len", "(", "self", ".", "img_files", ")", ")", "\n", "for", "im_file", ",", "l", ",", "shape", ",", "segments", ",", "nm_f", ",", "nf_f", ",", "ne_f", ",", "nc_f", ",", "msg", "in", "pbar", ":", "\n", "                ", "nm", "+=", "nm_f", "\n", "nf", "+=", "nf_f", "\n", "ne", "+=", "ne_f", "\n", "nc", "+=", "nc_f", "\n", "if", "im_file", ":", "\n", "                    ", "x", "[", "im_file", "]", "=", "[", "l", ",", "shape", ",", "segments", "]", "\n", "", "if", "msg", ":", "\n", "                    ", "msgs", ".", "append", "(", "msg", ")", "\n", "", "pbar", ".", "desc", "=", "f\"{desc}{nf} found, {nm} missing, {ne} empty, {nc} corrupted\"", "\n", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "if", "msgs", ":", "\n", "            ", "LOGGER", ".", "info", "(", "'\\n'", ".", "join", "(", "msgs", ")", ")", "\n", "", "if", "nf", "==", "0", ":", "\n", "            ", "LOGGER", ".", "warning", "(", "f'{prefix}WARNING: No labels found in {path}. See {HELP_URL}'", ")", "\n", "", "x", "[", "'hash'", "]", "=", "get_hash", "(", "self", ".", "label_files", "+", "self", ".", "img_files", ")", "\n", "x", "[", "'results'", "]", "=", "nf", ",", "nm", ",", "ne", ",", "nc", ",", "len", "(", "self", ".", "img_files", ")", "\n", "x", "[", "'msgs'", "]", "=", "msgs", "# warnings", "\n", "x", "[", "'version'", "]", "=", "self", ".", "cache_version", "# cache version", "\n", "try", ":", "\n", "            ", "np", ".", "save", "(", "path", ",", "x", ")", "# save cache for next time", "\n", "path", ".", "with_suffix", "(", "'.cache.npy'", ")", ".", "rename", "(", "path", ")", "# remove .npy suffix", "\n", "LOGGER", ".", "info", "(", "f'{prefix}New cache created: {path}'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "LOGGER", ".", "warning", "(", "f'{prefix}WARNING: Cache directory {path.parent} is not writeable: {e}'", ")", "# not writeable", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImagesAndLabels.__len__": [[544, 546], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImagesAndLabels.__getitem__": [[553, 624], ["len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.ascontiguousarray", "datasets.load_mosaic", "datasets.load_image", "utils.augmentations.letterbox", "datasets.LoadImagesAndLabels.labels[].copy", "utils.general.xyxy2xywhn", "datasets.LoadImagesAndLabels.albumentations", "len", "utils.augmentations.augment_hsv", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.fliplr.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.random", "random.random", "utils.augmentations.mixup", "utils.general.xywhn2xyxy", "utils.augmentations.random_perspective", "random.random", "numpy.flipud", "random.random", "numpy.fliplr", "datasets.load_mosaic", "random.randint"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.load_mosaic", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.load_image", "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.letterbox", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywhn", "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.augment_hsv", "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.mixup", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywhn2xyxy", "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.random_perspective", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.load_mosaic"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "self", ".", "indices", "[", "index", "]", "# linear, shuffled, or image_weights", "\n", "\n", "hyp", "=", "self", ".", "hyp", "\n", "mosaic", "=", "self", ".", "mosaic", "and", "random", ".", "random", "(", ")", "<", "hyp", "[", "'mosaic'", "]", "\n", "if", "mosaic", ":", "\n", "# Load mosaic", "\n", "            ", "img", ",", "labels", "=", "load_mosaic", "(", "self", ",", "index", ")", "\n", "shapes", "=", "None", "\n", "\n", "# MixUp augmentation", "\n", "if", "random", ".", "random", "(", ")", "<", "hyp", "[", "'mixup'", "]", ":", "\n", "                ", "img", ",", "labels", "=", "mixup", "(", "img", ",", "labels", ",", "*", "load_mosaic", "(", "self", ",", "random", ".", "randint", "(", "0", ",", "self", ".", "n", "-", "1", ")", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "# Load image", "\n", "            ", "img", ",", "(", "h0", ",", "w0", ")", ",", "(", "h", ",", "w", ")", "=", "load_image", "(", "self", ",", "index", ")", "\n", "\n", "# Letterbox", "\n", "shape", "=", "self", ".", "batch_shapes", "[", "self", ".", "batch", "[", "index", "]", "]", "if", "self", ".", "rect", "else", "self", ".", "img_size", "# final letterboxed shape", "\n", "img", ",", "ratio", ",", "pad", "=", "letterbox", "(", "img", ",", "shape", ",", "auto", "=", "False", ",", "scaleup", "=", "self", ".", "augment", ")", "\n", "shapes", "=", "(", "h0", ",", "w0", ")", ",", "(", "(", "h", "/", "h0", ",", "w", "/", "w0", ")", ",", "pad", ")", "# for COCO mAP rescaling", "\n", "\n", "labels", "=", "self", ".", "labels", "[", "index", "]", ".", "copy", "(", ")", "\n", "if", "labels", ".", "size", ":", "# normalized xywh to pixel xyxy format", "\n", "                ", "labels", "[", ":", ",", "1", ":", "]", "=", "xywhn2xyxy", "(", "labels", "[", ":", ",", "1", ":", "]", ",", "ratio", "[", "0", "]", "*", "w", ",", "ratio", "[", "1", "]", "*", "h", ",", "padw", "=", "pad", "[", "0", "]", ",", "padh", "=", "pad", "[", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "augment", ":", "\n", "                ", "img", ",", "labels", "=", "random_perspective", "(", "img", ",", "labels", ",", "\n", "degrees", "=", "hyp", "[", "'degrees'", "]", ",", "\n", "translate", "=", "hyp", "[", "'translate'", "]", ",", "\n", "scale", "=", "hyp", "[", "'scale'", "]", ",", "\n", "shear", "=", "hyp", "[", "'shear'", "]", ",", "\n", "perspective", "=", "hyp", "[", "'perspective'", "]", ")", "\n", "\n", "", "", "nl", "=", "len", "(", "labels", ")", "# number of labels", "\n", "if", "nl", ":", "\n", "            ", "labels", "[", ":", ",", "1", ":", "5", "]", "=", "xyxy2xywhn", "(", "labels", "[", ":", ",", "1", ":", "5", "]", ",", "w", "=", "img", ".", "shape", "[", "1", "]", ",", "h", "=", "img", ".", "shape", "[", "0", "]", ",", "clip", "=", "True", ",", "eps", "=", "1E-3", ")", "\n", "\n", "", "if", "self", ".", "augment", ":", "\n", "# Albumentations", "\n", "            ", "img", ",", "labels", "=", "self", ".", "albumentations", "(", "img", ",", "labels", ")", "\n", "nl", "=", "len", "(", "labels", ")", "# update after albumentations", "\n", "\n", "# HSV color-space", "\n", "augment_hsv", "(", "img", ",", "hgain", "=", "hyp", "[", "'hsv_h'", "]", ",", "sgain", "=", "hyp", "[", "'hsv_s'", "]", ",", "vgain", "=", "hyp", "[", "'hsv_v'", "]", ")", "\n", "\n", "# Flip up-down", "\n", "if", "random", ".", "random", "(", ")", "<", "hyp", "[", "'flipud'", "]", ":", "\n", "                ", "img", "=", "np", ".", "flipud", "(", "img", ")", "\n", "if", "nl", ":", "\n", "                    ", "labels", "[", ":", ",", "2", "]", "=", "1", "-", "labels", "[", ":", ",", "2", "]", "\n", "\n", "# Flip left-right", "\n", "", "", "if", "random", ".", "random", "(", ")", "<", "hyp", "[", "'fliplr'", "]", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "if", "nl", ":", "\n", "                    ", "labels", "[", ":", ",", "1", "]", "=", "1", "-", "labels", "[", ":", ",", "1", "]", "\n", "\n", "# Cutouts", "\n", "# labels = cutout(img, labels, p=0.5)", "\n", "\n", "", "", "", "labels_out", "=", "torch", ".", "zeros", "(", "(", "nl", ",", "6", ")", ")", "\n", "if", "nl", ":", "\n", "            ", "labels_out", "[", ":", ",", "1", ":", "]", "=", "torch", ".", "from_numpy", "(", "labels", ")", "\n", "\n", "# Convert", "\n", "", "img", "=", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ":", "-", "1", "]", "# HWC to CHW, BGR to RGB", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "img", ")", ",", "labels_out", ",", "self", ".", "img_files", "[", "index", "]", ",", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImagesAndLabels.collate_fn": [[625, 631], ["zip", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "batch", ")", ":", "\n", "        ", "img", ",", "label", ",", "path", ",", "shapes", "=", "zip", "(", "*", "batch", ")", "# transposed", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "label", ")", ":", "\n", "            ", "l", "[", ":", ",", "0", "]", "=", "i", "# add target image index for build_targets()", "\n", "", "return", "torch", ".", "stack", "(", "img", ",", "0", ")", ",", "torch", ".", "cat", "(", "label", ",", "0", ")", ",", "path", ",", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadImagesAndLabels.collate_fn4": [[632, 657], ["zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "enumerate", "len", "img4.append", "label4.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "random.random", "[].type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "img[].type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "img[].unsqueeze().float", "img[].unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn4", "(", "batch", ")", ":", "\n", "        ", "img", ",", "label", ",", "path", ",", "shapes", "=", "zip", "(", "*", "batch", ")", "# transposed", "\n", "n", "=", "len", "(", "shapes", ")", "//", "4", "\n", "img4", ",", "label4", ",", "path4", ",", "shapes4", "=", "[", "]", ",", "[", "]", ",", "path", "[", ":", "n", "]", ",", "shapes", "[", ":", "n", "]", "\n", "\n", "ho", "=", "torch", ".", "tensor", "(", "[", "[", "0.0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "wo", "=", "torch", ".", "tensor", "(", "[", "[", "0.0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "s", "=", "torch", ".", "tensor", "(", "[", "[", "1", ",", "1", ",", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", "]", ")", "# scale", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "# zidane torch.zeros(16,3,720,1280)  # BCHW", "\n", "            ", "i", "*=", "4", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "im", "=", "F", ".", "interpolate", "(", "img", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "scale_factor", "=", "2.0", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "\n", "0", "]", ".", "type", "(", "img", "[", "i", "]", ".", "type", "(", ")", ")", "\n", "l", "=", "label", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "im", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "img", "[", "i", "]", ",", "img", "[", "i", "+", "1", "]", ")", ",", "1", ")", ",", "torch", ".", "cat", "(", "(", "img", "[", "i", "+", "2", "]", ",", "img", "[", "i", "+", "3", "]", ")", ",", "1", ")", ")", ",", "2", ")", "\n", "l", "=", "torch", ".", "cat", "(", "(", "label", "[", "i", "]", ",", "label", "[", "i", "+", "1", "]", "+", "ho", ",", "label", "[", "i", "+", "2", "]", "+", "wo", ",", "label", "[", "i", "+", "3", "]", "+", "ho", "+", "wo", ")", ",", "0", ")", "*", "s", "\n", "", "img4", ".", "append", "(", "im", ")", "\n", "label4", ".", "append", "(", "l", ")", "\n", "\n", "", "for", "i", ",", "l", "in", "enumerate", "(", "label4", ")", ":", "\n", "            ", "l", "[", ":", ",", "0", "]", "=", "i", "# add target image index for build_targets()", "\n", "\n", "", "return", "torch", ".", "stack", "(", "img4", ",", "0", ")", ",", "torch", ".", "cat", "(", "label4", ",", "0", ")", ",", "path4", ",", "shapes4", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.get_hash": [[46, 52], ["sum", "hashlib.md5", "hashlib.md5.update", "hashlib.md5.hexdigest", "str().encode", "os.path.getsize", "os.path.exists", "str"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.update"], ["", "", "def", "get_hash", "(", "paths", ")", ":", "\n", "# Returns a single hash value of a list of paths (files or dirs)", "\n", "    ", "size", "=", "sum", "(", "os", ".", "path", ".", "getsize", "(", "p", ")", "for", "p", "in", "paths", "if", "os", ".", "path", ".", "exists", "(", "p", ")", ")", "# sizes", "\n", "h", "=", "hashlib", ".", "md5", "(", "str", "(", "size", ")", ".", "encode", "(", ")", ")", "# hash sizes", "\n", "h", ".", "update", "(", "''", ".", "join", "(", "paths", ")", ".", "encode", "(", ")", ")", "# hash paths", "\n", "return", "h", ".", "hexdigest", "(", ")", "# return hash", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.exif_size": [[54, 67], ["dict", "img._getexif().items", "img._getexif"], "function", ["None"], ["", "def", "exif_size", "(", "img", ")", ":", "\n", "# Returns exif-corrected PIL size", "\n", "    ", "s", "=", "img", ".", "size", "# (width, height)", "\n", "try", ":", "\n", "        ", "rotation", "=", "dict", "(", "img", ".", "_getexif", "(", ")", ".", "items", "(", ")", ")", "[", "orientation", "]", "\n", "if", "rotation", "==", "6", ":", "# rotation 270", "\n", "            ", "s", "=", "(", "s", "[", "1", "]", ",", "s", "[", "0", "]", ")", "\n", "", "elif", "rotation", "==", "8", ":", "# rotation 90", "\n", "            ", "s", "=", "(", "s", "[", "1", "]", ",", "s", "[", "0", "]", ")", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.exif_transpose": [[69, 93], ["image.transpose.getexif", "image.getexif.get", "image.transpose.transpose", "image.getexif.tobytes"], "function", ["None"], ["", "def", "exif_transpose", "(", "image", ")", ":", "\n", "    ", "\"\"\"\n    Transpose a PIL image accordingly if it has an EXIF Orientation tag.\n    Inplace version of https://github.com/python-pillow/Pillow/blob/master/src/PIL/ImageOps.py exif_transpose()\n\n    :param image: The image to transpose.\n    :return: An image.\n    \"\"\"", "\n", "exif", "=", "image", ".", "getexif", "(", ")", "\n", "orientation", "=", "exif", ".", "get", "(", "0x0112", ",", "1", ")", "# default 1", "\n", "if", "orientation", ">", "1", ":", "\n", "        ", "method", "=", "{", "2", ":", "Image", ".", "FLIP_LEFT_RIGHT", ",", "\n", "3", ":", "Image", ".", "ROTATE_180", ",", "\n", "4", ":", "Image", ".", "FLIP_TOP_BOTTOM", ",", "\n", "5", ":", "Image", ".", "TRANSPOSE", ",", "\n", "6", ":", "Image", ".", "ROTATE_270", ",", "\n", "7", ":", "Image", ".", "TRANSVERSE", ",", "\n", "8", ":", "Image", ".", "ROTATE_90", ",", "\n", "}", ".", "get", "(", "orientation", ")", "\n", "if", "method", "is", "not", "None", ":", "\n", "            ", "image", "=", "image", ".", "transpose", "(", "method", ")", "\n", "del", "exif", "[", "0x0112", "]", "\n", "image", ".", "info", "[", "\"exif\"", "]", "=", "exif", ".", "tobytes", "(", ")", "\n", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.create_dataloader": [[95, 123], ["min", "min", "utils.general.LOGGER.warning", "utils.torch_utils.torch_distributed_zero_first", "datasets.LoadImagesAndLabels", "len", "torch.utils.data.distributed.DistributedSampler", "loader", "int", "os.cpu_count"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.torch_distributed_zero_first"], ["", "def", "create_dataloader", "(", "path", ",", "imgsz", ",", "batch_size", ",", "stride", ",", "single_cls", "=", "False", ",", "hyp", "=", "None", ",", "augment", "=", "False", ",", "cache", "=", "False", ",", "pad", "=", "0.0", ",", "\n", "rect", "=", "False", ",", "rank", "=", "-", "1", ",", "workers", "=", "8", ",", "image_weights", "=", "False", ",", "quad", "=", "False", ",", "prefix", "=", "''", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "if", "rect", "and", "shuffle", ":", "\n", "        ", "LOGGER", ".", "warning", "(", "'WARNING: --rect is incompatible with DataLoader shuffle, setting shuffle=False'", ")", "\n", "shuffle", "=", "False", "\n", "", "with", "torch_distributed_zero_first", "(", "rank", ")", ":", "# init dataset *.cache only once if DDP", "\n", "        ", "dataset", "=", "LoadImagesAndLabels", "(", "path", ",", "imgsz", ",", "batch_size", ",", "\n", "augment", "=", "augment", ",", "# augmentation", "\n", "hyp", "=", "hyp", ",", "# hyperparameters", "\n", "rect", "=", "rect", ",", "# rectangular batches", "\n", "cache_images", "=", "cache", ",", "\n", "single_cls", "=", "single_cls", ",", "\n", "stride", "=", "int", "(", "stride", ")", ",", "\n", "pad", "=", "pad", ",", "\n", "image_weights", "=", "image_weights", ",", "\n", "prefix", "=", "prefix", ")", "\n", "\n", "", "batch_size", "=", "min", "(", "batch_size", ",", "len", "(", "dataset", ")", ")", "\n", "nw", "=", "min", "(", "[", "os", ".", "cpu_count", "(", ")", "//", "WORLD_SIZE", ",", "batch_size", "if", "batch_size", ">", "1", "else", "0", ",", "workers", "]", ")", "# number of workers", "\n", "sampler", "=", "None", "if", "rank", "==", "-", "1", "else", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "loader", "=", "DataLoader", "if", "image_weights", "else", "InfiniteDataLoader", "# only DataLoader allows for attribute updates", "\n", "return", "loader", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", "and", "sampler", "is", "None", ",", "\n", "num_workers", "=", "nw", ",", "\n", "sampler", "=", "sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "LoadImagesAndLabels", ".", "collate_fn4", "if", "quad", "else", "LoadImagesAndLabels", ".", "collate_fn", ")", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.img2label_paths": [[371, 375], ["sb.join().rsplit", "sb.join", "x.rsplit"], "function", ["None"], ["", "", "def", "img2label_paths", "(", "img_paths", ")", ":", "\n", "# Define label paths as a function of image paths", "\n", "    ", "sa", ",", "sb", "=", "os", ".", "sep", "+", "'images'", "+", "os", ".", "sep", ",", "os", ".", "sep", "+", "'labels'", "+", "os", ".", "sep", "# /images/, /labels/ substrings", "\n", "return", "[", "sb", ".", "join", "(", "x", ".", "rsplit", "(", "sa", ",", "1", ")", ")", ".", "rsplit", "(", "'.'", ",", "1", ")", "[", "0", "]", "+", "'.txt'", "for", "x", "in", "img_paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.load_image": [[660, 679], ["npy.exists", "numpy.load", "cv2.imread", "max", "cv2.resize", "int", "int"], "function", ["None"], ["", "", "def", "load_image", "(", "self", ",", "i", ")", ":", "\n", "# loads 1 image from dataset index 'i', returns im, original hw, resized hw", "\n", "    ", "im", "=", "self", ".", "imgs", "[", "i", "]", "\n", "if", "im", "is", "None", ":", "# not cached in ram", "\n", "        ", "npy", "=", "self", ".", "img_npy", "[", "i", "]", "\n", "if", "npy", "and", "npy", ".", "exists", "(", ")", ":", "# load npy", "\n", "            ", "im", "=", "np", ".", "load", "(", "npy", ")", "\n", "", "else", ":", "# read image", "\n", "            ", "path", "=", "self", ".", "img_files", "[", "i", "]", "\n", "im", "=", "cv2", ".", "imread", "(", "path", ")", "# BGR", "\n", "assert", "im", "is", "not", "None", ",", "f'Image Not Found {path}'", "\n", "", "h0", ",", "w0", "=", "im", ".", "shape", "[", ":", "2", "]", "# orig hw", "\n", "r", "=", "self", ".", "img_size", "/", "max", "(", "h0", ",", "w0", ")", "# ratio", "\n", "if", "r", "!=", "1", ":", "# if sizes are not equal", "\n", "            ", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "int", "(", "w0", "*", "r", ")", ",", "int", "(", "h0", "*", "r", ")", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_AREA", "if", "r", "<", "1", "and", "not", "self", ".", "augment", "else", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "return", "im", ",", "(", "h0", ",", "w0", ")", ",", "im", ".", "shape", "[", ":", "2", "]", "# im, hw_original, hw_resized", "\n", "", "else", ":", "\n", "        ", "return", "self", ".", "imgs", "[", "i", "]", ",", "self", ".", "img_hw0", "[", "i", "]", ",", "self", ".", "img_hw", "[", "i", "]", "# im, hw_original, hw_resized", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.load_mosaic": [[681, 736], ["random.shuffle", "enumerate", "numpy.concatenate", "utils.augmentations.copy_paste", "utils.augmentations.random_perspective", "int", "random.choices", "datasets.load_image", "np.concatenate.append", "segments4.extend", "numpy.clip", "random.uniform", "numpy.full", "datasets..labels[].copy", "datasets..segments[].copy", "utils.general.xywhn2xyxy", "max", "max", "utils.general.xyn2xy", "max", "min", "min", "max", "min", "min", "min", "min", "min", "min"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.copy_paste", "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.random_perspective", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.load_image", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywhn2xyxy", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyn2xy"], ["", "", "def", "load_mosaic", "(", "self", ",", "index", ")", ":", "\n", "#  4-mosaic loader. Loads 1 image + 3 random images into a 4-image mosaic", "\n", "    ", "labels4", ",", "segments4", "=", "[", "]", ",", "[", "]", "\n", "s", "=", "self", ".", "img_size", "\n", "yc", ",", "xc", "=", "(", "int", "(", "random", ".", "uniform", "(", "-", "x", ",", "2", "*", "s", "+", "x", ")", ")", "for", "x", "in", "self", ".", "mosaic_border", ")", "# mosaic center x, y", "\n", "indices", "=", "[", "index", "]", "+", "random", ".", "choices", "(", "self", ".", "indices", ",", "k", "=", "3", ")", "# 3 additional image indices", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "indices", ")", ":", "\n", "# Load image", "\n", "        ", "img", ",", "_", ",", "(", "h", ",", "w", ")", "=", "load_image", "(", "self", ",", "index", ")", "\n", "\n", "# place img in img4", "\n", "if", "i", "==", "0", ":", "# top left", "\n", "            ", "img4", "=", "np", ".", "full", "(", "(", "s", "*", "2", ",", "s", "*", "2", ",", "img", ".", "shape", "[", "2", "]", ")", ",", "114", ",", "dtype", "=", "np", ".", "uint8", ")", "# base image with 4 tiles", "\n", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "max", "(", "xc", "-", "w", ",", "0", ")", ",", "max", "(", "yc", "-", "h", ",", "0", ")", ",", "xc", ",", "yc", "# xmin, ymin, xmax, ymax (large image)", "\n", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "w", "-", "(", "x2a", "-", "x1a", ")", ",", "h", "-", "(", "y2a", "-", "y1a", ")", ",", "w", ",", "h", "# xmin, ymin, xmax, ymax (small image)", "\n", "", "elif", "i", "==", "1", ":", "# top right", "\n", "            ", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "xc", ",", "max", "(", "yc", "-", "h", ",", "0", ")", ",", "min", "(", "xc", "+", "w", ",", "s", "*", "2", ")", ",", "yc", "\n", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "0", ",", "h", "-", "(", "y2a", "-", "y1a", ")", ",", "min", "(", "w", ",", "x2a", "-", "x1a", ")", ",", "h", "\n", "", "elif", "i", "==", "2", ":", "# bottom left", "\n", "            ", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "max", "(", "xc", "-", "w", ",", "0", ")", ",", "yc", ",", "xc", ",", "min", "(", "s", "*", "2", ",", "yc", "+", "h", ")", "\n", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "w", "-", "(", "x2a", "-", "x1a", ")", ",", "0", ",", "w", ",", "min", "(", "y2a", "-", "y1a", ",", "h", ")", "\n", "", "elif", "i", "==", "3", ":", "# bottom right", "\n", "            ", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "xc", ",", "yc", ",", "min", "(", "xc", "+", "w", ",", "s", "*", "2", ")", ",", "min", "(", "s", "*", "2", ",", "yc", "+", "h", ")", "\n", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "0", ",", "0", ",", "min", "(", "w", ",", "x2a", "-", "x1a", ")", ",", "min", "(", "y2a", "-", "y1a", ",", "h", ")", "\n", "\n", "", "img4", "[", "y1a", ":", "y2a", ",", "x1a", ":", "x2a", "]", "=", "img", "[", "y1b", ":", "y2b", ",", "x1b", ":", "x2b", "]", "# img4[ymin:ymax, xmin:xmax]", "\n", "padw", "=", "x1a", "-", "x1b", "\n", "padh", "=", "y1a", "-", "y1b", "\n", "\n", "# Labels", "\n", "labels", ",", "segments", "=", "self", ".", "labels", "[", "index", "]", ".", "copy", "(", ")", ",", "self", ".", "segments", "[", "index", "]", ".", "copy", "(", ")", "\n", "if", "labels", ".", "size", ":", "\n", "            ", "labels", "[", ":", ",", "1", ":", "]", "=", "xywhn2xyxy", "(", "labels", "[", ":", ",", "1", ":", "]", ",", "w", ",", "h", ",", "padw", ",", "padh", ")", "# normalized xywh to pixel xyxy format", "\n", "segments", "=", "[", "xyn2xy", "(", "x", ",", "w", ",", "h", ",", "padw", ",", "padh", ")", "for", "x", "in", "segments", "]", "\n", "", "labels4", ".", "append", "(", "labels", ")", "\n", "segments4", ".", "extend", "(", "segments", ")", "\n", "\n", "# Concat/clip labels", "\n", "", "labels4", "=", "np", ".", "concatenate", "(", "labels4", ",", "0", ")", "\n", "for", "x", "in", "(", "labels4", "[", ":", ",", "1", ":", "]", ",", "*", "segments4", ")", ":", "\n", "        ", "np", ".", "clip", "(", "x", ",", "0", ",", "2", "*", "s", ",", "out", "=", "x", ")", "# clip when using random_perspective()", "\n", "# img4, labels4 = replicate(img4, labels4)  # replicate", "\n", "\n", "# Augment", "\n", "", "img4", ",", "labels4", ",", "segments4", "=", "copy_paste", "(", "img4", ",", "labels4", ",", "segments4", ",", "p", "=", "self", ".", "hyp", "[", "'copy_paste'", "]", ")", "\n", "img4", ",", "labels4", "=", "random_perspective", "(", "img4", ",", "labels4", ",", "segments4", ",", "\n", "degrees", "=", "self", ".", "hyp", "[", "'degrees'", "]", ",", "\n", "translate", "=", "self", ".", "hyp", "[", "'translate'", "]", ",", "\n", "scale", "=", "self", ".", "hyp", "[", "'scale'", "]", ",", "\n", "shear", "=", "self", ".", "hyp", "[", "'shear'", "]", ",", "\n", "perspective", "=", "self", ".", "hyp", "[", "'perspective'", "]", ",", "\n", "border", "=", "self", ".", "mosaic_border", ")", "# border to remove", "\n", "\n", "return", "img4", ",", "labels4", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.load_mosaic9": [[738, 810], ["random.shuffle", "enumerate", "numpy.concatenate", "numpy.array", "utils.augmentations.random_perspective", "random.choices", "datasets.load_image", "np.concatenate.append", "segments9.extend", "int", "numpy.clip", "numpy.full", "max", "datasets..labels[].copy", "datasets..segments[].copy", "utils.general.xywhn2xyxy", "random.uniform", "utils.general.xyn2xy"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.random_perspective", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.load_image", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywhn2xyxy", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyn2xy"], ["", "def", "load_mosaic9", "(", "self", ",", "index", ")", ":", "\n", "#  9-mosaic loader. Loads 1 image + 8 random images into a 9-image mosaic", "\n", "    ", "labels9", ",", "segments9", "=", "[", "]", ",", "[", "]", "\n", "s", "=", "self", ".", "img_size", "\n", "indices", "=", "[", "index", "]", "+", "random", ".", "choices", "(", "self", ".", "indices", ",", "k", "=", "8", ")", "# 8 additional image indices", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "indices", ")", ":", "\n", "# Load image", "\n", "        ", "img", ",", "_", ",", "(", "h", ",", "w", ")", "=", "load_image", "(", "self", ",", "index", ")", "\n", "\n", "# place img in img9", "\n", "if", "i", "==", "0", ":", "# center", "\n", "            ", "img9", "=", "np", ".", "full", "(", "(", "s", "*", "3", ",", "s", "*", "3", ",", "img", ".", "shape", "[", "2", "]", ")", ",", "114", ",", "dtype", "=", "np", ".", "uint8", ")", "# base image with 4 tiles", "\n", "h0", ",", "w0", "=", "h", ",", "w", "\n", "c", "=", "s", ",", "s", ",", "s", "+", "w", ",", "s", "+", "h", "# xmin, ymin, xmax, ymax (base) coordinates", "\n", "", "elif", "i", "==", "1", ":", "# top", "\n", "            ", "c", "=", "s", ",", "s", "-", "h", ",", "s", "+", "w", ",", "s", "\n", "", "elif", "i", "==", "2", ":", "# top right", "\n", "            ", "c", "=", "s", "+", "wp", ",", "s", "-", "h", ",", "s", "+", "wp", "+", "w", ",", "s", "\n", "", "elif", "i", "==", "3", ":", "# right", "\n", "            ", "c", "=", "s", "+", "w0", ",", "s", ",", "s", "+", "w0", "+", "w", ",", "s", "+", "h", "\n", "", "elif", "i", "==", "4", ":", "# bottom right", "\n", "            ", "c", "=", "s", "+", "w0", ",", "s", "+", "hp", ",", "s", "+", "w0", "+", "w", ",", "s", "+", "hp", "+", "h", "\n", "", "elif", "i", "==", "5", ":", "# bottom", "\n", "            ", "c", "=", "s", "+", "w0", "-", "w", ",", "s", "+", "h0", ",", "s", "+", "w0", ",", "s", "+", "h0", "+", "h", "\n", "", "elif", "i", "==", "6", ":", "# bottom left", "\n", "            ", "c", "=", "s", "+", "w0", "-", "wp", "-", "w", ",", "s", "+", "h0", ",", "s", "+", "w0", "-", "wp", ",", "s", "+", "h0", "+", "h", "\n", "", "elif", "i", "==", "7", ":", "# left", "\n", "            ", "c", "=", "s", "-", "w", ",", "s", "+", "h0", "-", "h", ",", "s", ",", "s", "+", "h0", "\n", "", "elif", "i", "==", "8", ":", "# top left", "\n", "            ", "c", "=", "s", "-", "w", ",", "s", "+", "h0", "-", "hp", "-", "h", ",", "s", ",", "s", "+", "h0", "-", "hp", "\n", "\n", "", "padx", ",", "pady", "=", "c", "[", ":", "2", "]", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "(", "max", "(", "x", ",", "0", ")", "for", "x", "in", "c", ")", "# allocate coords", "\n", "\n", "# Labels", "\n", "labels", ",", "segments", "=", "self", ".", "labels", "[", "index", "]", ".", "copy", "(", ")", ",", "self", ".", "segments", "[", "index", "]", ".", "copy", "(", ")", "\n", "if", "labels", ".", "size", ":", "\n", "            ", "labels", "[", ":", ",", "1", ":", "]", "=", "xywhn2xyxy", "(", "labels", "[", ":", ",", "1", ":", "]", ",", "w", ",", "h", ",", "padx", ",", "pady", ")", "# normalized xywh to pixel xyxy format", "\n", "segments", "=", "[", "xyn2xy", "(", "x", ",", "w", ",", "h", ",", "padx", ",", "pady", ")", "for", "x", "in", "segments", "]", "\n", "", "labels9", ".", "append", "(", "labels", ")", "\n", "segments9", ".", "extend", "(", "segments", ")", "\n", "\n", "# Image", "\n", "img9", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "img", "[", "y1", "-", "pady", ":", ",", "x1", "-", "padx", ":", "]", "# img9[ymin:ymax, xmin:xmax]", "\n", "hp", ",", "wp", "=", "h", ",", "w", "# height, width previous", "\n", "\n", "# Offset", "\n", "", "yc", ",", "xc", "=", "(", "int", "(", "random", ".", "uniform", "(", "0", ",", "s", ")", ")", "for", "_", "in", "self", ".", "mosaic_border", ")", "# mosaic center x, y", "\n", "img9", "=", "img9", "[", "yc", ":", "yc", "+", "2", "*", "s", ",", "xc", ":", "xc", "+", "2", "*", "s", "]", "\n", "\n", "# Concat/clip labels", "\n", "labels9", "=", "np", ".", "concatenate", "(", "labels9", ",", "0", ")", "\n", "labels9", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "xc", "\n", "labels9", "[", ":", ",", "[", "2", ",", "4", "]", "]", "-=", "yc", "\n", "c", "=", "np", ".", "array", "(", "[", "xc", ",", "yc", "]", ")", "# centers", "\n", "segments9", "=", "[", "x", "-", "c", "for", "x", "in", "segments9", "]", "\n", "\n", "for", "x", "in", "(", "labels9", "[", ":", ",", "1", ":", "]", ",", "*", "segments9", ")", ":", "\n", "        ", "np", ".", "clip", "(", "x", ",", "0", ",", "2", "*", "s", ",", "out", "=", "x", ")", "# clip when using random_perspective()", "\n", "# img9, labels9 = replicate(img9, labels9)  # replicate", "\n", "\n", "# Augment", "\n", "", "img9", ",", "labels9", "=", "random_perspective", "(", "img9", ",", "labels9", ",", "segments9", ",", "\n", "degrees", "=", "self", ".", "hyp", "[", "'degrees'", "]", ",", "\n", "translate", "=", "self", ".", "hyp", "[", "'translate'", "]", ",", "\n", "scale", "=", "self", ".", "hyp", "[", "'scale'", "]", ",", "\n", "shear", "=", "self", ".", "hyp", "[", "'shear'", "]", ",", "\n", "perspective", "=", "self", ".", "hyp", "[", "'perspective'", "]", ",", "\n", "border", "=", "self", ".", "mosaic_border", ")", "# border to remove", "\n", "\n", "return", "img9", ",", "labels9", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.create_folder": [[812, 817], ["os.path.exists", "os.makedirs", "shutil.rmtree"], "function", ["None"], ["", "def", "create_folder", "(", "path", "=", "'./new'", ")", ":", "\n", "# Create folder", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "path", ")", "# delete output folder", "\n", "", "os", ".", "makedirs", "(", "path", ")", "# make new output folder", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.flatten_recursive": [[819, 825], ["pathlib.Path", "datasets.create_folder", "tqdm.tqdm", "glob.glob", "shutil.copyfile", "str", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.create_folder"], ["", "def", "flatten_recursive", "(", "path", "=", "'../datasets/coco128'", ")", ":", "\n", "# Flatten a recursive directory by bringing all files to top level", "\n", "    ", "new_path", "=", "Path", "(", "path", "+", "'_flat'", ")", "\n", "create_folder", "(", "new_path", ")", "\n", "for", "file", "in", "tqdm", "(", "glob", ".", "glob", "(", "str", "(", "Path", "(", "path", ")", ")", "+", "'/**/*.*'", ",", "recursive", "=", "True", ")", ")", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "file", ",", "new_path", "/", "Path", "(", "file", ")", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.extract_boxes": [[827, 859], ["pathlib.Path", "list", "len", "tqdm.tqdm", "shutil.rmtree", "pathlib.Path.rglob", "pathlib.Path", "pathlib.Path().exists", "cv2.imread", "enumerate", "str", "datasets.img2label_paths", "pathlib.Path", "open", "numpy.array", "int", "utils.general.xywh2xyxy().ravel().astype", "numpy.clip", "numpy.clip", "cv2.imwrite", "f.parent.is_dir", "f.parent.mkdir", "str", "str", "x.split", "utils.general.xywh2xyxy().ravel", "f.read().strip().splitlines", "utils.general.xywh2xyxy", "f.read().strip", "xywh2xyxy().ravel().astype.reshape", "f.read"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.img2label_paths", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywh2xyxy"], ["", "", "def", "extract_boxes", "(", "path", "=", "'../datasets/coco128'", ")", ":", "# from utils.datasets import *; extract_boxes()", "\n", "# Convert detection dataset into classification dataset, with one directory per class", "\n", "    ", "path", "=", "Path", "(", "path", ")", "# images dir", "\n", "shutil", ".", "rmtree", "(", "path", "/", "'classifier'", ")", "if", "(", "path", "/", "'classifier'", ")", ".", "is_dir", "(", ")", "else", "None", "# remove existing", "\n", "files", "=", "list", "(", "path", ".", "rglob", "(", "'*.*'", ")", ")", "\n", "n", "=", "len", "(", "files", ")", "# number of files", "\n", "for", "im_file", "in", "tqdm", "(", "files", ",", "total", "=", "n", ")", ":", "\n", "        ", "if", "im_file", ".", "suffix", "[", "1", ":", "]", "in", "IMG_FORMATS", ":", "\n", "# image", "\n", "            ", "im", "=", "cv2", ".", "imread", "(", "str", "(", "im_file", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "# BGR to RGB", "\n", "h", ",", "w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# labels", "\n", "lb_file", "=", "Path", "(", "img2label_paths", "(", "[", "str", "(", "im_file", ")", "]", ")", "[", "0", "]", ")", "\n", "if", "Path", "(", "lb_file", ")", ".", "exists", "(", ")", ":", "\n", "                ", "with", "open", "(", "lb_file", ")", "as", "f", ":", "\n", "                    ", "lb", "=", "np", ".", "array", "(", "[", "x", ".", "split", "(", ")", "for", "x", "in", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "splitlines", "(", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# labels", "\n", "\n", "", "for", "j", ",", "x", "in", "enumerate", "(", "lb", ")", ":", "\n", "                    ", "c", "=", "int", "(", "x", "[", "0", "]", ")", "# class", "\n", "f", "=", "(", "path", "/", "'classifier'", ")", "/", "f'{c}'", "/", "f'{path.stem}_{im_file.stem}_{j}.jpg'", "# new filename", "\n", "if", "not", "f", ".", "parent", ".", "is_dir", "(", ")", ":", "\n", "                        ", "f", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "b", "=", "x", "[", "1", ":", "]", "*", "[", "w", ",", "h", ",", "w", ",", "h", "]", "# box", "\n", "# b[2:] = b[2:].max()  # rectangle to square", "\n", "b", "[", "2", ":", "]", "=", "b", "[", "2", ":", "]", "*", "1.2", "+", "3", "# pad", "\n", "b", "=", "xywh2xyxy", "(", "b", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", ".", "ravel", "(", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "b", "[", "[", "0", ",", "2", "]", "]", "=", "np", ".", "clip", "(", "b", "[", "[", "0", ",", "2", "]", "]", ",", "0", ",", "w", ")", "# clip boxes outside of image", "\n", "b", "[", "[", "1", ",", "3", "]", "]", "=", "np", ".", "clip", "(", "b", "[", "[", "1", ",", "3", "]", "]", ",", "0", ",", "h", ")", "\n", "assert", "cv2", ".", "imwrite", "(", "str", "(", "f", ")", ",", "im", "[", "b", "[", "1", "]", ":", "b", "[", "3", "]", ",", "b", "[", "0", "]", ":", "b", "[", "2", "]", "]", ")", ",", "f'box failure in {f}'", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.autosplit": [[861, 883], ["pathlib.Path", "sorted", "len", "random.seed", "random.choices", "print", "tqdm.tqdm", "zip", "pathlib.Path().exists", "pathlib.Path.rglob", "open", "f.write", "x.suffix[].lower", "pathlib.Path", "datasets.img2label_paths", "img.relative_to().as_posix", "str", "img.relative_to"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.img2label_paths"], ["", "", "", "", "", "def", "autosplit", "(", "path", "=", "'../datasets/coco128/images'", ",", "weights", "=", "(", "0.9", ",", "0.1", ",", "0.0", ")", ",", "annotated_only", "=", "False", ")", ":", "\n", "    ", "\"\"\" Autosplit a dataset into train/val/test splits and save path/autosplit_*.txt files\n    Usage: from utils.datasets import *; autosplit()\n    Arguments\n        path:            Path to images directory\n        weights:         Train, val, test weights (list, tuple)\n        annotated_only:  Only use images with an annotated txt file\n    \"\"\"", "\n", "path", "=", "Path", "(", "path", ")", "# images dir", "\n", "files", "=", "sorted", "(", "x", "for", "x", "in", "path", ".", "rglob", "(", "'*.*'", ")", "if", "x", ".", "suffix", "[", "1", ":", "]", ".", "lower", "(", ")", "in", "IMG_FORMATS", ")", "# image files only", "\n", "n", "=", "len", "(", "files", ")", "# number of files", "\n", "random", ".", "seed", "(", "0", ")", "# for reproducibility", "\n", "indices", "=", "random", ".", "choices", "(", "[", "0", ",", "1", ",", "2", "]", ",", "weights", "=", "weights", ",", "k", "=", "n", ")", "# assign each image to a split", "\n", "\n", "txt", "=", "[", "'autosplit_train.txt'", ",", "'autosplit_val.txt'", ",", "'autosplit_test.txt'", "]", "# 3 txt files", "\n", "[", "(", "path", ".", "parent", "/", "x", ")", ".", "unlink", "(", "missing_ok", "=", "True", ")", "for", "x", "in", "txt", "]", "# remove existing", "\n", "\n", "print", "(", "f'Autosplitting images from {path}'", "+", "', using *.txt labeled images only'", "*", "annotated_only", ")", "\n", "for", "i", ",", "img", "in", "tqdm", "(", "zip", "(", "indices", ",", "files", ")", ",", "total", "=", "n", ")", ":", "\n", "        ", "if", "not", "annotated_only", "or", "Path", "(", "img2label_paths", "(", "[", "str", "(", "img", ")", "]", ")", "[", "0", "]", ")", ".", "exists", "(", ")", ":", "# check label", "\n", "            ", "with", "open", "(", "path", ".", "parent", "/", "txt", "[", "i", "]", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "'./'", "+", "img", ".", "relative_to", "(", "path", ".", "parent", ")", ".", "as_posix", "(", ")", "+", "'\\n'", ")", "# add image to txt file", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.verify_image_label": [[885, 935], ["PIL.Image.open", "Image.open.verify", "datasets.exif_size", "os.path.isfile", "Image.open.format.lower", "Image.open.format.lower", "len", "numpy.zeros", "open", "f.seek", "open", "any", "numpy.array", "numpy.unique", "numpy.zeros", "f.read", "PIL.ImageOps.exif_transpose().save", "x.split", "numpy.array", "numpy.concatenate", "len", "f.read().strip().splitlines", "len", "numpy.array().reshape", "PIL.ImageOps.exif_transpose", "len", "np.array.reshape", "utils.general.segments2boxes", "PIL.Image.open", "f.read().strip", "numpy.array", "len", "f.read"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.exif_size", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.exif_transpose", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.segments2boxes"], ["", "", "", "", "def", "verify_image_label", "(", "args", ")", ":", "\n", "# Verify one image-label pair", "\n", "    ", "im_file", ",", "lb_file", ",", "prefix", "=", "args", "\n", "nm", ",", "nf", ",", "ne", ",", "nc", ",", "msg", ",", "segments", "=", "0", ",", "0", ",", "0", ",", "0", ",", "''", ",", "[", "]", "# number (missing, found, empty, corrupt), message, segments", "\n", "try", ":", "\n", "# verify images", "\n", "        ", "im", "=", "Image", ".", "open", "(", "im_file", ")", "\n", "im", ".", "verify", "(", ")", "# PIL verify", "\n", "shape", "=", "exif_size", "(", "im", ")", "# image size", "\n", "assert", "(", "shape", "[", "0", "]", ">", "9", ")", "&", "(", "shape", "[", "1", "]", ">", "9", ")", ",", "f'image size {shape} <10 pixels'", "\n", "assert", "im", ".", "format", ".", "lower", "(", ")", "in", "IMG_FORMATS", ",", "f'invalid image format {im.format}'", "\n", "if", "im", ".", "format", ".", "lower", "(", ")", "in", "(", "'jpg'", ",", "'jpeg'", ")", ":", "\n", "            ", "with", "open", "(", "im_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "f", ".", "seek", "(", "-", "2", ",", "2", ")", "\n", "if", "f", ".", "read", "(", ")", "!=", "b'\\xff\\xd9'", ":", "# corrupt JPEG", "\n", "                    ", "ImageOps", ".", "exif_transpose", "(", "Image", ".", "open", "(", "im_file", ")", ")", ".", "save", "(", "im_file", ",", "'JPEG'", ",", "subsampling", "=", "0", ",", "quality", "=", "100", ")", "\n", "msg", "=", "f'{prefix}WARNING: {im_file}: corrupt JPEG restored and saved'", "\n", "\n", "# verify labels", "\n", "", "", "", "if", "os", ".", "path", ".", "isfile", "(", "lb_file", ")", ":", "\n", "            ", "nf", "=", "1", "# label found", "\n", "with", "open", "(", "lb_file", ")", "as", "f", ":", "\n", "                ", "l", "=", "[", "x", ".", "split", "(", ")", "for", "x", "in", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "splitlines", "(", ")", "if", "len", "(", "x", ")", "]", "\n", "if", "any", "(", "[", "len", "(", "x", ")", ">", "8", "for", "x", "in", "l", "]", ")", ":", "# is segment", "\n", "                    ", "classes", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "l", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "segments", "=", "[", "np", ".", "array", "(", "x", "[", "1", ":", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "for", "x", "in", "l", "]", "# (cls, xy1...)", "\n", "l", "=", "np", ".", "concatenate", "(", "(", "classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "segments2boxes", "(", "segments", ")", ")", ",", "1", ")", "# (cls, xywh)", "\n", "", "l", "=", "np", ".", "array", "(", "l", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "nl", "=", "len", "(", "l", ")", "\n", "if", "nl", ":", "\n", "                ", "assert", "l", ".", "shape", "[", "1", "]", "==", "5", ",", "f'labels require 5 columns, {l.shape[1]} columns detected'", "\n", "assert", "(", "l", ">=", "0", ")", ".", "all", "(", ")", ",", "f'negative label values {l[l < 0]}'", "\n", "assert", "(", "l", "[", ":", ",", "1", ":", "]", "<=", "1", ")", ".", "all", "(", ")", ",", "f'non-normalized or out of bounds coordinates {l[:, 1:][l[:, 1:] > 1]}'", "\n", "_", ",", "i", "=", "np", ".", "unique", "(", "l", ",", "axis", "=", "0", ",", "return_index", "=", "True", ")", "\n", "if", "len", "(", "i", ")", "<", "nl", ":", "# duplicate row check", "\n", "                    ", "l", "=", "l", "[", "i", "]", "# remove duplicates", "\n", "if", "segments", ":", "\n", "                        ", "segments", "=", "segments", "[", "i", "]", "\n", "", "msg", "=", "f'{prefix}WARNING: {im_file}: {nl - len(i)} duplicate labels removed'", "\n", "", "", "else", ":", "\n", "                ", "ne", "=", "1", "# label empty", "\n", "l", "=", "np", ".", "zeros", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "            ", "nm", "=", "1", "# label missing", "\n", "l", "=", "np", ".", "zeros", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "return", "im_file", ",", "l", ",", "shape", ",", "segments", ",", "nm", ",", "nf", ",", "ne", ",", "nc", ",", "msg", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "nc", "=", "1", "\n", "msg", "=", "f'{prefix}WARNING: {im_file}: ignoring corrupt image/label: {e}'", "\n", "return", "[", "None", ",", "None", ",", "None", ",", "None", ",", "nm", ",", "nf", ",", "ne", ",", "nc", ",", "msg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.dataset_stats": [[937, 1037], ["datasets.dataset_stats.unzip"], "function", ["None"], ["", "", "def", "dataset_stats", "(", "path", "=", "'coco128.yaml'", ",", "autodownload", "=", "False", ",", "verbose", "=", "False", ",", "profile", "=", "False", ",", "hub", "=", "False", ")", ":", "\n", "    ", "\"\"\" Return dataset statistics dictionary with images and instances counts per split per class\n    To run in parent directory: export PYTHONPATH=\"$PWD/yolov3\"\n    Usage1: from utils.datasets import *; dataset_stats('coco128.yaml', autodownload=True)\n    Usage2: from utils.datasets import *; dataset_stats('../datasets/coco128_with_yaml.zip')\n    Arguments\n        path:           Path to data.yaml or data.zip (with data.yaml inside data.zip)\n        autodownload:   Attempt to download dataset if not found locally\n        verbose:        Print stats dictionary\n    \"\"\"", "\n", "\n", "def", "round_labels", "(", "labels", ")", ":", "\n", "# Update labels to integer class and 6 decimal place floats", "\n", "        ", "return", "[", "[", "int", "(", "c", ")", ",", "*", "(", "round", "(", "x", ",", "4", ")", "for", "x", "in", "points", ")", "]", "for", "c", ",", "*", "points", "in", "labels", "]", "\n", "\n", "", "def", "unzip", "(", "path", ")", ":", "\n", "# Unzip data.zip TODO: CONSTRAINT: path/to/abc.zip MUST unzip to 'path/to/abc/'", "\n", "        ", "if", "str", "(", "path", ")", ".", "endswith", "(", "'.zip'", ")", ":", "# path is data.zip", "\n", "            ", "assert", "Path", "(", "path", ")", ".", "is_file", "(", ")", ",", "f'Error unzipping {path}, file not found'", "\n", "ZipFile", "(", "path", ")", ".", "extractall", "(", "path", "=", "path", ".", "parent", ")", "# unzip", "\n", "dir", "=", "path", ".", "with_suffix", "(", "''", ")", "# dataset directory == zip name", "\n", "return", "True", ",", "str", "(", "dir", ")", ",", "next", "(", "dir", ".", "rglob", "(", "'*.yaml'", ")", ")", "# zipped, data_dir, yaml_path", "\n", "", "else", ":", "# path is data.yaml", "\n", "            ", "return", "False", ",", "None", ",", "path", "\n", "\n", "", "", "def", "hub_ops", "(", "f", ",", "max_dim", "=", "1920", ")", ":", "\n", "# HUB ops for 1 image 'f': resize and save at reduced quality in /dataset-hub for web/app viewing", "\n", "        ", "f_new", "=", "im_dir", "/", "Path", "(", "f", ")", ".", "name", "# dataset-hub image filename", "\n", "try", ":", "# use PIL", "\n", "            ", "im", "=", "Image", ".", "open", "(", "f", ")", "\n", "r", "=", "max_dim", "/", "max", "(", "im", ".", "height", ",", "im", ".", "width", ")", "# ratio", "\n", "if", "r", "<", "1.0", ":", "# image too large", "\n", "                ", "im", "=", "im", ".", "resize", "(", "(", "int", "(", "im", ".", "width", "*", "r", ")", ",", "int", "(", "im", ".", "height", "*", "r", ")", ")", ")", "\n", "", "im", ".", "save", "(", "f_new", ",", "'JPEG'", ",", "quality", "=", "75", ",", "optimize", "=", "True", ")", "# save", "\n", "", "except", "Exception", "as", "e", ":", "# use OpenCV", "\n", "            ", "print", "(", "f'WARNING: HUB ops PIL failure {f}: {e}'", ")", "\n", "im", "=", "cv2", ".", "imread", "(", "f", ")", "\n", "im_height", ",", "im_width", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "r", "=", "max_dim", "/", "max", "(", "im_height", ",", "im_width", ")", "# ratio", "\n", "if", "r", "<", "1.0", ":", "# image too large", "\n", "                ", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "int", "(", "im_width", "*", "r", ")", ",", "int", "(", "im_height", "*", "r", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "cv2", ".", "imwrite", "(", "str", "(", "f_new", ")", ",", "im", ")", "\n", "\n", "", "", "zipped", ",", "data_dir", ",", "yaml_path", "=", "unzip", "(", "Path", "(", "path", ")", ")", "\n", "with", "open", "(", "check_yaml", "(", "yaml_path", ")", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "        ", "data", "=", "yaml", ".", "safe_load", "(", "f", ")", "# data dict", "\n", "if", "zipped", ":", "\n", "            ", "data", "[", "'path'", "]", "=", "data_dir", "# TODO: should this be dir.resolve()?", "\n", "", "", "check_dataset", "(", "data", ",", "autodownload", ")", "# download dataset if missing", "\n", "hub_dir", "=", "Path", "(", "data", "[", "'path'", "]", "+", "(", "'-hub'", "if", "hub", "else", "''", ")", ")", "\n", "stats", "=", "{", "'nc'", ":", "data", "[", "'nc'", "]", ",", "'names'", ":", "data", "[", "'names'", "]", "}", "# statistics dictionary", "\n", "for", "split", "in", "'train'", ",", "'val'", ",", "'test'", ":", "\n", "        ", "if", "data", ".", "get", "(", "split", ")", "is", "None", ":", "\n", "            ", "stats", "[", "split", "]", "=", "None", "# i.e. no test set", "\n", "continue", "\n", "", "x", "=", "[", "]", "\n", "dataset", "=", "LoadImagesAndLabels", "(", "data", "[", "split", "]", ")", "# load dataset", "\n", "for", "label", "in", "tqdm", "(", "dataset", ".", "labels", ",", "total", "=", "dataset", ".", "n", ",", "desc", "=", "'Statistics'", ")", ":", "\n", "            ", "x", ".", "append", "(", "np", ".", "bincount", "(", "label", "[", ":", ",", "0", "]", ".", "astype", "(", "int", ")", ",", "minlength", "=", "data", "[", "'nc'", "]", ")", ")", "\n", "", "x", "=", "np", ".", "array", "(", "x", ")", "# shape(128x80)", "\n", "stats", "[", "split", "]", "=", "{", "'instance_stats'", ":", "{", "'total'", ":", "int", "(", "x", ".", "sum", "(", ")", ")", ",", "'per_class'", ":", "x", ".", "sum", "(", "0", ")", ".", "tolist", "(", ")", "}", ",", "\n", "'image_stats'", ":", "{", "'total'", ":", "dataset", ".", "n", ",", "'unlabelled'", ":", "int", "(", "np", ".", "all", "(", "x", "==", "0", ",", "1", ")", ".", "sum", "(", ")", ")", ",", "\n", "'per_class'", ":", "(", "x", ">", "0", ")", ".", "sum", "(", "0", ")", ".", "tolist", "(", ")", "}", ",", "\n", "'labels'", ":", "[", "{", "str", "(", "Path", "(", "k", ")", ".", "name", ")", ":", "round_labels", "(", "v", ".", "tolist", "(", ")", ")", "}", "for", "k", ",", "v", "in", "\n", "zip", "(", "dataset", ".", "img_files", ",", "dataset", ".", "labels", ")", "]", "}", "\n", "\n", "if", "hub", ":", "\n", "            ", "im_dir", "=", "hub_dir", "/", "'images'", "\n", "im_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "for", "_", "in", "tqdm", "(", "ThreadPool", "(", "NUM_THREADS", ")", ".", "imap", "(", "hub_ops", ",", "dataset", ".", "img_files", ")", ",", "total", "=", "dataset", ".", "n", ",", "desc", "=", "'HUB Ops'", ")", ":", "\n", "                ", "pass", "\n", "\n", "# Profile", "\n", "", "", "", "stats_path", "=", "hub_dir", "/", "'stats.json'", "\n", "if", "profile", ":", "\n", "        ", "for", "_", "in", "range", "(", "1", ")", ":", "\n", "            ", "file", "=", "stats_path", ".", "with_suffix", "(", "'.npy'", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "np", ".", "save", "(", "file", ",", "stats", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "x", "=", "np", ".", "load", "(", "file", ",", "allow_pickle", "=", "True", ")", "\n", "print", "(", "f'stats.npy times: {time.time() - t2:.3f}s read, {t2 - t1:.3f}s write'", ")", "\n", "\n", "file", "=", "stats_path", ".", "with_suffix", "(", "'.json'", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "with", "open", "(", "file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "stats", ",", "f", ")", "# save stats *.json", "\n", "", "t2", "=", "time", ".", "time", "(", ")", "\n", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "                ", "x", "=", "json", ".", "load", "(", "f", ")", "# load hyps dict", "\n", "", "print", "(", "f'stats.json times: {time.time() - t2:.3f}s read, {t2 - t1:.3f}s write'", ")", "\n", "\n", "# Save, print and return", "\n", "", "", "if", "hub", ":", "\n", "        ", "print", "(", "f'Saving {stats_path.resolve()}...'", ")", "\n", "with", "open", "(", "stats_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "stats", ",", "f", ")", "# save stats.json", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "json", ".", "dumps", "(", "stats", ",", "indent", "=", "2", ",", "sort_keys", "=", "False", ")", ")", "\n", "", "return", "stats", "\n", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.loggers.__init__.Loggers.__init__": [[39, 75], ["setattr", "utils.general.colorstr", "print", "utils.general.colorstr", "__init__.Loggers.logger.info", "torch.utils.tensorboard.SummaryWriter", "utils.loggers.wandb.wandb_utils.WandbLogger", "utils.general.emojis", "str", "isinstance", "__init__.Loggers.opt.resume.startswith", "torch.load().get", "torch.load"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.emojis"], []], "home.repos.pwc.inspect_result.turoad_scaloss.loggers.__init__.Loggers.on_pretrain_routine_end": [[76, 81], ["__init__.Loggers.save_dir.glob", "__init__.Loggers.wandb.log", "wandb.Image", "str"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log"], []], "home.repos.pwc.inspect_result.turoad_scaloss.loggers.__init__.Loggers.on_train_batch_end": [[82, 96], ["threading.Thread().start", "sorted", "__init__.Loggers.wandb.log", "__init__.Loggers.save_dir.glob", "warnings.catch_warnings", "warnings.simplefilter", "__init__.Loggers.tb.add_graph", "threading.Thread", "torch.jit.trace", "wandb.Image", "utils.torch_utils.de_parallel", "str", "f.exists"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.de_parallel"], []], "home.repos.pwc.inspect_result.turoad_scaloss.loggers.__init__.Loggers.on_train_epoch_end": [[97, 101], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.turoad_scaloss.loggers.__init__.Loggers.on_val_image_end": [[102, 106], ["__init__.Loggers.wandb.val_one_image"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.val_one_image"], []], "home.repos.pwc.inspect_result.turoad_scaloss.loggers.__init__.Loggers.on_val_end": [[107, 112], ["sorted", "__init__.Loggers.wandb.log", "__init__.Loggers.save_dir.glob", "wandb.Image", "str"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log"], []], "home.repos.pwc.inspect_result.turoad_scaloss.loggers.__init__.Loggers.on_fit_epoch_end": [[113, 130], ["x.items", "__init__.Loggers.wandb.log", "__init__.Loggers.wandb.end_epoch", "zip", "len", "file.exists", "open", "f.write", "__init__.Loggers.tb.add_scalar", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.end_epoch"], []], "home.repos.pwc.inspect_result.turoad_scaloss.loggers.__init__.Loggers.on_model_save": [[131, 136], ["__init__.Loggers.wandb.log_model"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log_model"], []], "home.repos.pwc.inspect_result.turoad_scaloss.loggers.__init__.Loggers.on_train_end": [[137, 160], ["utils.plots.plot_results", "__init__.Loggers.wandb.log", "__init__.Loggers.tb.add_image", "wandb.log_artifact", "__init__.Loggers.wandb.finish_run", "__init__.Loggers.wandb.finish_run", "utils.loggers.wandb.wandb_utils.WandbLogger", "str", "cv2.imread", "wandb.Image", "str", "str", "best.exists"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.plot_results", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.finish_run", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.finish_run"], []], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.__init__": [[121, 191], ["isinstance", "opt.resume.startswith", "wandb_utils.get_run_info", "wandb.init", "wandb_utils.WandbLogger.setup_training", "wandb_utils.WandbLogger.check_and_upload_dataset", "wandb.init", "wandb_utils.check_wandb_dataset", "wandb_utils.WandbLogger.wandb_run.config.update", "wandb_utils.WandbLogger.check_and_upload_dataset", "isinstance", "opt.resume.startswith", "dict", "wandb_utils.check_wandb_dataset", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.get_run_info", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.setup_training", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.check_and_upload_dataset", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.check_wandb_dataset", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.update", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.check_and_upload_dataset", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.check_wandb_dataset"], ["def", "__init__", "(", "self", ",", "opt", ",", "run_id", "=", "None", ",", "job_type", "=", "'Training'", ")", ":", "\n", "        ", "\"\"\"\n        - Initialize WandbLogger instance\n        - Upload dataset if opt.upload_dataset is True\n        - Setup trainig processes if job_type is 'Training'\n\n        arguments:\n        opt (namespace) -- Commandline arguments for this run\n        run_id (str) -- Run ID of W&B run to be resumed\n        job_type (str) -- To set the job_type for this run\n\n       \"\"\"", "\n", "# Pre-training routine --", "\n", "self", ".", "job_type", "=", "job_type", "\n", "self", ".", "wandb", ",", "self", ".", "wandb_run", "=", "wandb", ",", "None", "if", "not", "wandb", "else", "wandb", ".", "run", "\n", "self", ".", "val_artifact", ",", "self", ".", "train_artifact", "=", "None", ",", "None", "\n", "self", ".", "train_artifact_path", ",", "self", ".", "val_artifact_path", "=", "None", ",", "None", "\n", "self", ".", "result_artifact", "=", "None", "\n", "self", ".", "val_table", ",", "self", ".", "result_table", "=", "None", ",", "None", "\n", "self", ".", "bbox_media_panel_images", "=", "[", "]", "\n", "self", ".", "val_table_path_map", "=", "None", "\n", "self", ".", "max_imgs_to_log", "=", "16", "\n", "self", ".", "wandb_artifact_data_dict", "=", "None", "\n", "self", ".", "data_dict", "=", "None", "\n", "# It's more elegant to stick to 1 wandb.init call,", "\n", "#  but useful config data is overwritten in the WandbLogger's wandb.init call", "\n", "if", "isinstance", "(", "opt", ".", "resume", ",", "str", ")", ":", "# checks resume from artifact", "\n", "            ", "if", "opt", ".", "resume", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "                ", "entity", ",", "project", ",", "run_id", ",", "model_artifact_name", "=", "get_run_info", "(", "opt", ".", "resume", ")", "\n", "model_artifact_name", "=", "WANDB_ARTIFACT_PREFIX", "+", "model_artifact_name", "\n", "assert", "wandb", ",", "'install wandb to resume wandb runs'", "\n", "# Resume wandb-artifact:// runs here| workaround for not overwriting wandb.config", "\n", "self", ".", "wandb_run", "=", "wandb", ".", "init", "(", "id", "=", "run_id", ",", "\n", "project", "=", "project", ",", "\n", "entity", "=", "entity", ",", "\n", "resume", "=", "'allow'", ",", "\n", "allow_val_change", "=", "True", ")", "\n", "opt", ".", "resume", "=", "model_artifact_name", "\n", "", "", "elif", "self", ".", "wandb", ":", "\n", "            ", "self", ".", "wandb_run", "=", "wandb", ".", "init", "(", "config", "=", "opt", ",", "\n", "resume", "=", "\"allow\"", ",", "\n", "project", "=", "'YOLOv3'", "if", "opt", ".", "project", "==", "'runs/train'", "else", "Path", "(", "opt", ".", "project", ")", ".", "stem", ",", "\n", "entity", "=", "opt", ".", "entity", ",", "\n", "name", "=", "opt", ".", "name", "if", "opt", ".", "name", "!=", "'exp'", "else", "None", ",", "\n", "job_type", "=", "job_type", ",", "\n", "id", "=", "run_id", ",", "\n", "allow_val_change", "=", "True", ")", "if", "not", "wandb", ".", "run", "else", "wandb", ".", "run", "\n", "", "if", "self", ".", "wandb_run", ":", "\n", "            ", "if", "self", ".", "job_type", "==", "'Training'", ":", "\n", "                ", "if", "opt", ".", "upload_dataset", ":", "\n", "                    ", "if", "not", "opt", ".", "resume", ":", "\n", "                        ", "self", ".", "wandb_artifact_data_dict", "=", "self", ".", "check_and_upload_dataset", "(", "opt", ")", "\n", "\n", "", "", "if", "opt", ".", "resume", ":", "\n", "# resume from artifact", "\n", "                    ", "if", "isinstance", "(", "opt", ".", "resume", ",", "str", ")", "and", "opt", ".", "resume", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "                        ", "self", ".", "data_dict", "=", "dict", "(", "self", ".", "wandb_run", ".", "config", ".", "data_dict", ")", "\n", "", "else", ":", "# local resume", "\n", "                        ", "self", ".", "data_dict", "=", "check_wandb_dataset", "(", "opt", ".", "data", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "data_dict", "=", "check_wandb_dataset", "(", "opt", ".", "data", ")", "\n", "self", ".", "wandb_artifact_data_dict", "=", "self", ".", "wandb_artifact_data_dict", "or", "self", ".", "data_dict", "\n", "\n", "# write data_dict to config. useful for resuming from artifacts. Do this only when not resuming.", "\n", "self", ".", "wandb_run", ".", "config", ".", "update", "(", "{", "'data_dict'", ":", "self", ".", "wandb_artifact_data_dict", "}", ",", "\n", "allow_val_change", "=", "True", ")", "\n", "", "self", ".", "setup_training", "(", "opt", ")", "\n", "\n", "", "if", "self", ".", "job_type", "==", "'Dataset Creation'", ":", "\n", "                ", "self", ".", "data_dict", "=", "self", ".", "check_and_upload_dataset", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.check_and_upload_dataset": [[192, 210], ["wandb_utils.WandbLogger.log_dataset_artifact", "utils.general.LOGGER.info", "open", "yaml.safe_load", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log_dataset_artifact", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["", "", "", "def", "check_and_upload_dataset", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"\n        Check if the dataset format is compatible and upload it as W&B artifact\n\n        arguments:\n        opt (namespace)-- Commandline arguments for current run\n\n        returns:\n        Updated dataset info dictionary where local dataset paths are replaced by WAND_ARFACT_PREFIX links.\n        \"\"\"", "\n", "assert", "wandb", ",", "'Install wandb to upload dataset'", "\n", "config_path", "=", "self", ".", "log_dataset_artifact", "(", "opt", ".", "data", ",", "\n", "opt", ".", "single_cls", ",", "\n", "'YOLOv3'", "if", "opt", ".", "project", "==", "'runs/train'", "else", "Path", "(", "opt", ".", "project", ")", ".", "stem", ")", "\n", "LOGGER", ".", "info", "(", "f\"Created dataset config file {config_path}\"", ")", "\n", "with", "open", "(", "config_path", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "            ", "wandb_data_dict", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "return", "wandb_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.setup_training": [[211, 258], ["isinstance", "wandb_utils.WandbLogger.download_model_artifact", "wandb_utils.WandbLogger.download_dataset_artifact", "wandb_utils.WandbLogger.download_dataset_artifact", "str", "str", "wandb.Artifact", "wandb.Table", "wandb_utils.WandbLogger.val_artifact.get", "data_dict.get", "data_dict.get", "pathlib.Path", "pathlib.Path", "wandb_utils.WandbLogger.map_val_table_path", "pathlib.Path", "str"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.download_model_artifact", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.download_dataset_artifact", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.download_dataset_artifact", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.map_val_table_path"], ["", "def", "setup_training", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"\n        Setup the necessary processes for training YOLO models:\n          - Attempt to download model checkpoint and dataset artifacts if opt.resume stats with WANDB_ARTIFACT_PREFIX\n          - Update data_dict, to contain info of previous run if resumed and the paths of dataset artifact if downloaded\n          - Setup log_dict, initialize bbox_interval\n\n        arguments:\n        opt (namespace) -- commandline arguments for this run\n\n        \"\"\"", "\n", "self", ".", "log_dict", ",", "self", ".", "current_epoch", "=", "{", "}", ",", "0", "\n", "self", ".", "bbox_interval", "=", "opt", ".", "bbox_interval", "\n", "if", "isinstance", "(", "opt", ".", "resume", ",", "str", ")", ":", "\n", "            ", "modeldir", ",", "_", "=", "self", ".", "download_model_artifact", "(", "opt", ")", "\n", "if", "modeldir", ":", "\n", "                ", "self", ".", "weights", "=", "Path", "(", "modeldir", ")", "/", "\"last.pt\"", "\n", "config", "=", "self", ".", "wandb_run", ".", "config", "\n", "opt", ".", "weights", ",", "opt", ".", "save_period", ",", "opt", ".", "batch_size", ",", "opt", ".", "bbox_interval", ",", "opt", ".", "epochs", ",", "opt", ".", "hyp", "=", "str", "(", "\n", "self", ".", "weights", ")", ",", "config", ".", "save_period", ",", "config", ".", "batch_size", ",", "config", ".", "bbox_interval", ",", "config", ".", "epochs", ",", "config", ".", "hyp", "\n", "", "", "data_dict", "=", "self", ".", "data_dict", "\n", "if", "self", ".", "val_artifact", "is", "None", ":", "# If --upload_dataset is set, use the existing artifact, don't download", "\n", "            ", "self", ".", "train_artifact_path", ",", "self", ".", "train_artifact", "=", "self", ".", "download_dataset_artifact", "(", "data_dict", ".", "get", "(", "'train'", ")", ",", "\n", "opt", ".", "artifact_alias", ")", "\n", "self", ".", "val_artifact_path", ",", "self", ".", "val_artifact", "=", "self", ".", "download_dataset_artifact", "(", "data_dict", ".", "get", "(", "'val'", ")", ",", "\n", "opt", ".", "artifact_alias", ")", "\n", "\n", "", "if", "self", ".", "train_artifact_path", "is", "not", "None", ":", "\n", "            ", "train_path", "=", "Path", "(", "self", ".", "train_artifact_path", ")", "/", "'data/images/'", "\n", "data_dict", "[", "'train'", "]", "=", "str", "(", "train_path", ")", "\n", "", "if", "self", ".", "val_artifact_path", "is", "not", "None", ":", "\n", "            ", "val_path", "=", "Path", "(", "self", ".", "val_artifact_path", ")", "/", "'data/images/'", "\n", "data_dict", "[", "'val'", "]", "=", "str", "(", "val_path", ")", "\n", "\n", "", "if", "self", ".", "val_artifact", "is", "not", "None", ":", "\n", "            ", "self", ".", "result_artifact", "=", "wandb", ".", "Artifact", "(", "\"run_\"", "+", "wandb", ".", "run", ".", "id", "+", "\"_progress\"", ",", "\"evaluation\"", ")", "\n", "self", ".", "result_table", "=", "wandb", ".", "Table", "(", "[", "\"epoch\"", ",", "\"id\"", ",", "\"ground truth\"", ",", "\"prediction\"", ",", "\"avg_confidence\"", "]", ")", "\n", "self", ".", "val_table", "=", "self", ".", "val_artifact", ".", "get", "(", "\"val\"", ")", "\n", "if", "self", ".", "val_table_path_map", "is", "None", ":", "\n", "                ", "self", ".", "map_val_table_path", "(", ")", "\n", "", "", "if", "opt", ".", "bbox_interval", "==", "-", "1", ":", "\n", "            ", "self", ".", "bbox_interval", "=", "opt", ".", "bbox_interval", "=", "(", "opt", ".", "epochs", "//", "10", ")", "if", "opt", ".", "epochs", ">", "10", "else", "1", "\n", "", "train_from_artifact", "=", "self", ".", "train_artifact_path", "is", "not", "None", "and", "self", ".", "val_artifact_path", "is", "not", "None", "\n", "# Update the the data_dict to point to local artifacts dir", "\n", "if", "train_from_artifact", ":", "\n", "            ", "self", ".", "data_dict", "=", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.download_dataset_artifact": [[259, 278], ["isinstance", "path.startswith", "pathlib.Path", "wandb.use_artifact", "wandb.use_artifact.download", "pathlib.Path.as_posix().replace", "wandb_utils.remove_prefix", "pathlib.Path.as_posix"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.download", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.remove_prefix"], ["", "", "def", "download_dataset_artifact", "(", "self", ",", "path", ",", "alias", ")", ":", "\n", "        ", "\"\"\"\n        download the model checkpoint artifact if the path starts with WANDB_ARTIFACT_PREFIX\n\n        arguments:\n        path -- path of the dataset to be used for training\n        alias (str)-- alias of the artifact to be download/used for training\n\n        returns:\n        (str, wandb.Artifact) -- path of the downladed dataset and it's corresponding artifact object if dataset\n        is found otherwise returns (None, None)\n        \"\"\"", "\n", "if", "isinstance", "(", "path", ",", "str", ")", "and", "path", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "            ", "artifact_path", "=", "Path", "(", "remove_prefix", "(", "path", ",", "WANDB_ARTIFACT_PREFIX", ")", "+", "\":\"", "+", "alias", ")", "\n", "dataset_artifact", "=", "wandb", ".", "use_artifact", "(", "artifact_path", ".", "as_posix", "(", ")", ".", "replace", "(", "\"\\\\\"", ",", "\"/\"", ")", ")", "\n", "assert", "dataset_artifact", "is", "not", "None", ",", "\"'Error: W&B dataset artifact doesn\\'t exist'\"", "\n", "datadir", "=", "dataset_artifact", ".", "download", "(", ")", "\n", "return", "datadir", ",", "dataset_artifact", "\n", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.download_model_artifact": [[279, 296], ["opt.resume.startswith", "wandb.use_artifact", "wandb.use_artifact.download", "wandb.use_artifact.metadata.get", "wandb.use_artifact.metadata.get", "wandb_utils.remove_prefix"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.download", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.remove_prefix"], ["", "def", "download_model_artifact", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"\n        download the model checkpoint artifact if the resume path starts with WANDB_ARTIFACT_PREFIX\n\n        arguments:\n        opt (namespace) -- Commandline arguments for this run\n        \"\"\"", "\n", "if", "opt", ".", "resume", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "            ", "model_artifact", "=", "wandb", ".", "use_artifact", "(", "remove_prefix", "(", "opt", ".", "resume", ",", "WANDB_ARTIFACT_PREFIX", ")", "+", "\":latest\"", ")", "\n", "assert", "model_artifact", "is", "not", "None", ",", "'Error: W&B model artifact doesn\\'t exist'", "\n", "modeldir", "=", "model_artifact", ".", "download", "(", ")", "\n", "epochs_trained", "=", "model_artifact", ".", "metadata", ".", "get", "(", "'epochs_trained'", ")", "\n", "total_epochs", "=", "model_artifact", ".", "metadata", ".", "get", "(", "'total_epochs'", ")", "\n", "is_finished", "=", "total_epochs", "is", "None", "\n", "assert", "not", "is_finished", ",", "'training is finished, can only resume incomplete runs.'", "\n", "return", "modeldir", ",", "model_artifact", "\n", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log_model": [[297, 320], ["wandb.Artifact", "wandb.Artifact.add_file", "wandb.log_artifact", "utils.general.LOGGER.info", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["", "def", "log_model", "(", "self", ",", "path", ",", "opt", ",", "epoch", ",", "fitness_score", ",", "best_model", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Log the model checkpoint as W&B artifact\n\n        arguments:\n        path (Path)   -- Path of directory containing the checkpoints\n        opt (namespace) -- Command line arguments for this run\n        epoch (int)  -- Current epoch number\n        fitness_score (float) -- fitness score for current epoch\n        best_model (boolean) -- Boolean representing if the current checkpoint is the best yet.\n        \"\"\"", "\n", "model_artifact", "=", "wandb", ".", "Artifact", "(", "'run_'", "+", "wandb", ".", "run", ".", "id", "+", "'_model'", ",", "type", "=", "'model'", ",", "metadata", "=", "{", "\n", "'original_url'", ":", "str", "(", "path", ")", ",", "\n", "'epochs_trained'", ":", "epoch", "+", "1", ",", "\n", "'save period'", ":", "opt", ".", "save_period", ",", "\n", "'project'", ":", "opt", ".", "project", ",", "\n", "'total_epochs'", ":", "opt", ".", "epochs", ",", "\n", "'fitness_score'", ":", "fitness_score", "\n", "}", ")", "\n", "model_artifact", ".", "add_file", "(", "str", "(", "path", "/", "'last.pt'", ")", ",", "name", "=", "'last.pt'", ")", "\n", "wandb", ".", "log_artifact", "(", "model_artifact", ",", "\n", "aliases", "=", "[", "'latest'", ",", "'last'", ",", "'epoch '", "+", "str", "(", "self", ".", "current_epoch", ")", ",", "'best'", "if", "best_model", "else", "''", "]", ")", "\n", "LOGGER", ".", "info", "(", "f\"Saving model artifact on epoch {epoch + 1}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log_dataset_artifact": [[321, 364], ["utils.general.check_dataset", "dict", "dict.get", "dict.get", "dict.pop", "dict.pop", "dict.get", "wandb_utils.WandbLogger.create_dataset_table", "dict.get", "wandb_utils.WandbLogger.create_dataset_table", "pathlib.Path", "open", "yaml.safe_dump", "wandb_utils.WandbLogger.wandb_run.use_artifact", "wandb_utils.WandbLogger.wandb_run.use_artifact", "wandb_utils.WandbLogger.val_artifact.wait", "wandb_utils.WandbLogger.val_artifact.get", "wandb_utils.WandbLogger.map_val_table_path", "wandb_utils.WandbLogger.wandb_run.log_artifact", "wandb_utils.WandbLogger.wandb_run.log_artifact", "int", "enumerate", "utils.datasets.LoadImagesAndLabels", "utils.datasets.LoadImagesAndLabels", "str", "str", "pathlib.Path", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_dataset", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.create_dataset_table", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.create_dataset_table", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.map_val_table_path"], ["", "def", "log_dataset_artifact", "(", "self", ",", "data_file", ",", "single_cls", ",", "project", ",", "overwrite_config", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Log the dataset as W&B artifact and return the new data file with W&B links\n\n        arguments:\n        data_file (str) -- the .yaml file with information about the dataset like - path, classes etc.\n        single_class (boolean)  -- train multi-class data as single-class\n        project (str) -- project name. Used to construct the artifact path\n        overwrite_config (boolean) -- overwrites the data.yaml file if set to true otherwise creates a new\n        file with _wandb postfix. Eg -> data_wandb.yaml\n\n        returns:\n        the new .yaml file with artifact links. it can be used to start training directly from artifacts\n        \"\"\"", "\n", "self", ".", "data_dict", "=", "check_dataset", "(", "data_file", ")", "# parse and check", "\n", "data", "=", "dict", "(", "self", ".", "data_dict", ")", "\n", "nc", ",", "names", "=", "(", "1", ",", "[", "'item'", "]", ")", "if", "single_cls", "else", "(", "int", "(", "data", "[", "'nc'", "]", ")", ",", "data", "[", "'names'", "]", ")", "\n", "names", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "names", ")", "}", "# to index dictionary", "\n", "self", ".", "train_artifact", "=", "self", ".", "create_dataset_table", "(", "LoadImagesAndLabels", "(", "\n", "data", "[", "'train'", "]", ",", "rect", "=", "True", ",", "batch_size", "=", "1", ")", ",", "names", ",", "name", "=", "'train'", ")", "if", "data", ".", "get", "(", "'train'", ")", "else", "None", "\n", "self", ".", "val_artifact", "=", "self", ".", "create_dataset_table", "(", "LoadImagesAndLabels", "(", "\n", "data", "[", "'val'", "]", ",", "rect", "=", "True", ",", "batch_size", "=", "1", ")", ",", "names", ",", "name", "=", "'val'", ")", "if", "data", ".", "get", "(", "'val'", ")", "else", "None", "\n", "if", "data", ".", "get", "(", "'train'", ")", ":", "\n", "            ", "data", "[", "'train'", "]", "=", "WANDB_ARTIFACT_PREFIX", "+", "str", "(", "Path", "(", "project", ")", "/", "'train'", ")", "\n", "", "if", "data", ".", "get", "(", "'val'", ")", ":", "\n", "            ", "data", "[", "'val'", "]", "=", "WANDB_ARTIFACT_PREFIX", "+", "str", "(", "Path", "(", "project", ")", "/", "'val'", ")", "\n", "", "path", "=", "Path", "(", "data_file", ")", ".", "stem", "\n", "path", "=", "(", "path", "if", "overwrite_config", "else", "path", "+", "'_wandb'", ")", "+", "'.yaml'", "# updated data.yaml path", "\n", "data", ".", "pop", "(", "'download'", ",", "None", ")", "\n", "data", ".", "pop", "(", "'path'", ",", "None", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "safe_dump", "(", "data", ",", "f", ")", "\n", "\n", "", "if", "self", ".", "job_type", "==", "'Training'", ":", "# builds correct artifact pipeline graph", "\n", "            ", "self", ".", "wandb_run", ".", "use_artifact", "(", "self", ".", "val_artifact", ")", "\n", "self", ".", "wandb_run", ".", "use_artifact", "(", "self", ".", "train_artifact", ")", "\n", "self", ".", "val_artifact", ".", "wait", "(", ")", "\n", "self", ".", "val_table", "=", "self", ".", "val_artifact", ".", "get", "(", "'val'", ")", "\n", "self", ".", "map_val_table_path", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "wandb_run", ".", "log_artifact", "(", "self", ".", "train_artifact", ")", "\n", "self", ".", "wandb_run", ".", "log_artifact", "(", "self", ".", "val_artifact", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.map_val_table_path": [[365, 374], ["utils.general.LOGGER.info", "enumerate", "tqdm.tqdm.tqdm"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["", "def", "map_val_table_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Map the validation dataset Table like name of file -> it's id in the W&B Table.\n        Useful for - referencing artifacts for evaluation.\n        \"\"\"", "\n", "self", ".", "val_table_path_map", "=", "{", "}", "\n", "LOGGER", ".", "info", "(", "\"Mapping dataset\"", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "self", ".", "val_table", ".", "data", ")", ")", ":", "\n", "            ", "self", ".", "val_table_path_map", "[", "data", "[", "3", "]", "]", "=", "data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.create_dataset_table": [[375, 416], ["wandb.Artifact", "wandb.Table", "wandb.Classes", "enumerate", "wandb.Artifact.add", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "pathlib.Path().is_dir", "tqdm.tqdm.tqdm", "labels[].tolist", "wandb.Table.add_data", "isinstance", "pathlib.Path().is_dir", "wandb.Artifact.add_dir", "wandb.Artifact.add_dir", "wandb.Artifact.add_file", "pathlib.Path", "int", "box_data.append", "wandb.Image", "list", "pathlib.Path", "dataset.path.rsplit", "pathlib.Path.exists", "wandb.Artifact.add_file", "class_to_id.items", "img_classes.values", "pathlib.Path", "pathlib.Path", "utils.datasets.img2label_paths", "str", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.img2label_paths"], ["", "", "def", "create_dataset_table", "(", "self", ",", "dataset", ":", "LoadImagesAndLabels", ",", "class_to_id", ":", "Dict", "[", "int", ",", "str", "]", ",", "name", ":", "str", "=", "'dataset'", ")", ":", "\n", "        ", "\"\"\"\n        Create and return W&B artifact containing W&B Table of the dataset.\n\n        arguments:\n        dataset -- instance of LoadImagesAndLabels class used to iterate over the data to build Table\n        class_to_id -- hash map that maps class ids to labels\n        name -- name of the artifact\n\n        returns:\n        dataset artifact to be logged or used\n        \"\"\"", "\n", "# TODO: Explore multiprocessing to slpit this loop parallely| This is essential for speeding up the the logging", "\n", "artifact", "=", "wandb", ".", "Artifact", "(", "name", "=", "name", ",", "type", "=", "\"dataset\"", ")", "\n", "img_files", "=", "tqdm", "(", "[", "dataset", ".", "path", "]", ")", "if", "isinstance", "(", "dataset", ".", "path", ",", "str", ")", "and", "Path", "(", "dataset", ".", "path", ")", ".", "is_dir", "(", ")", "else", "None", "\n", "img_files", "=", "tqdm", "(", "dataset", ".", "img_files", ")", "if", "not", "img_files", "else", "img_files", "\n", "for", "img_file", "in", "img_files", ":", "\n", "            ", "if", "Path", "(", "img_file", ")", ".", "is_dir", "(", ")", ":", "\n", "                ", "artifact", ".", "add_dir", "(", "img_file", ",", "name", "=", "'data/images'", ")", "\n", "labels_path", "=", "'labels'", ".", "join", "(", "dataset", ".", "path", ".", "rsplit", "(", "'images'", ",", "1", ")", ")", "\n", "artifact", ".", "add_dir", "(", "labels_path", ",", "name", "=", "'data/labels'", ")", "\n", "", "else", ":", "\n", "                ", "artifact", ".", "add_file", "(", "img_file", ",", "name", "=", "'data/images/'", "+", "Path", "(", "img_file", ")", ".", "name", ")", "\n", "label_file", "=", "Path", "(", "img2label_paths", "(", "[", "img_file", "]", ")", "[", "0", "]", ")", "\n", "artifact", ".", "add_file", "(", "str", "(", "label_file", ")", ",", "\n", "name", "=", "'data/labels/'", "+", "label_file", ".", "name", ")", "if", "label_file", ".", "exists", "(", ")", "else", "None", "\n", "", "", "table", "=", "wandb", ".", "Table", "(", "columns", "=", "[", "\"id\"", ",", "\"train_image\"", ",", "\"Classes\"", ",", "\"name\"", "]", ")", "\n", "class_set", "=", "wandb", ".", "Classes", "(", "[", "{", "'id'", ":", "id", ",", "'name'", ":", "name", "}", "for", "id", ",", "name", "in", "class_to_id", ".", "items", "(", ")", "]", ")", "\n", "for", "si", ",", "(", "img", ",", "labels", ",", "paths", ",", "shapes", ")", "in", "enumerate", "(", "tqdm", "(", "dataset", ")", ")", ":", "\n", "            ", "box_data", ",", "img_classes", "=", "[", "]", ",", "{", "}", "\n", "for", "cls", ",", "*", "xywh", "in", "labels", "[", ":", ",", "1", ":", "]", ".", "tolist", "(", ")", ":", "\n", "                ", "cls", "=", "int", "(", "cls", ")", "\n", "box_data", ".", "append", "(", "{", "\"position\"", ":", "{", "\"middle\"", ":", "[", "xywh", "[", "0", "]", ",", "xywh", "[", "1", "]", "]", ",", "\"width\"", ":", "xywh", "[", "2", "]", ",", "\"height\"", ":", "xywh", "[", "3", "]", "}", ",", "\n", "\"class_id\"", ":", "cls", ",", "\n", "\"box_caption\"", ":", "\"%s\"", "%", "(", "class_to_id", "[", "cls", "]", ")", "}", ")", "\n", "img_classes", "[", "cls", "]", "=", "class_to_id", "[", "cls", "]", "\n", "", "boxes", "=", "{", "\"ground_truth\"", ":", "{", "\"box_data\"", ":", "box_data", ",", "\"class_labels\"", ":", "class_to_id", "}", "}", "# inference-space", "\n", "table", ".", "add_data", "(", "si", ",", "wandb", ".", "Image", "(", "paths", ",", "classes", "=", "class_set", ",", "boxes", "=", "boxes", ")", ",", "list", "(", "img_classes", ".", "values", "(", ")", ")", ",", "\n", "Path", "(", "paths", ")", ".", "name", ")", "\n", "", "artifact", ".", "add", "(", "table", ",", "name", ")", "\n", "return", "artifact", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log_training_progress": [[417, 445], ["wandb.Classes", "predn.tolist", "wandb_utils.WandbLogger.result_table.add_data", "wandb.Image", "box_data.append", "max", "names.items", "pathlib.Path", "len", "int"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist"], ["", "def", "log_training_progress", "(", "self", ",", "predn", ",", "path", ",", "names", ")", ":", "\n", "        ", "\"\"\"\n        Build evaluation Table. Uses reference from validation dataset table.\n\n        arguments:\n        predn (list): list of predictions in the native space in the format - [xmin, ymin, xmax, ymax, confidence, class]\n        path (str): local path of the current evaluation image\n        names (dict(int, str)): hash map that maps class ids to labels\n        \"\"\"", "\n", "class_set", "=", "wandb", ".", "Classes", "(", "[", "{", "'id'", ":", "id", ",", "'name'", ":", "name", "}", "for", "id", ",", "name", "in", "names", ".", "items", "(", ")", "]", ")", "\n", "box_data", "=", "[", "]", "\n", "total_conf", "=", "0", "\n", "for", "*", "xyxy", ",", "conf", ",", "cls", "in", "predn", ".", "tolist", "(", ")", ":", "\n", "            ", "if", "conf", ">=", "0.25", ":", "\n", "                ", "box_data", ".", "append", "(", "\n", "{", "\"position\"", ":", "{", "\"minX\"", ":", "xyxy", "[", "0", "]", ",", "\"minY\"", ":", "xyxy", "[", "1", "]", ",", "\"maxX\"", ":", "xyxy", "[", "2", "]", ",", "\"maxY\"", ":", "xyxy", "[", "3", "]", "}", ",", "\n", "\"class_id\"", ":", "int", "(", "cls", ")", ",", "\n", "\"box_caption\"", ":", "f\"{names[cls]} {conf:.3f}\"", ",", "\n", "\"scores\"", ":", "{", "\"class_score\"", ":", "conf", "}", ",", "\n", "\"domain\"", ":", "\"pixel\"", "}", ")", "\n", "total_conf", "+=", "conf", "\n", "", "", "boxes", "=", "{", "\"predictions\"", ":", "{", "\"box_data\"", ":", "box_data", ",", "\"class_labels\"", ":", "names", "}", "}", "# inference-space", "\n", "id", "=", "self", ".", "val_table_path_map", "[", "Path", "(", "path", ")", ".", "name", "]", "\n", "self", ".", "result_table", ".", "add_data", "(", "self", ".", "current_epoch", ",", "\n", "id", ",", "\n", "self", ".", "val_table", ".", "data", "[", "id", "]", "[", "1", "]", ",", "\n", "wandb", ".", "Image", "(", "self", ".", "val_table", ".", "data", "[", "id", "]", "[", "1", "]", ",", "boxes", "=", "boxes", ",", "classes", "=", "class_set", ")", ",", "\n", "total_conf", "/", "max", "(", "1", ",", "len", "(", "box_data", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.val_one_image": [[447, 468], ["wandb_utils.WandbLogger.log_training_progress", "len", "wandb_utils.WandbLogger.bbox_media_panel_images.append", "wandb.Image", "int", "pred.tolist"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log_training_progress", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist"], ["", "def", "val_one_image", "(", "self", ",", "pred", ",", "predn", ",", "path", ",", "names", ",", "im", ")", ":", "\n", "        ", "\"\"\"\n        Log validation data for one image. updates the result Table if validation dataset is uploaded and log bbox media panel\n\n        arguments:\n        pred (list): list of scaled predictions in the format - [xmin, ymin, xmax, ymax, confidence, class]\n        predn (list): list of predictions in the native space - [xmin, ymin, xmax, ymax, confidence, class]\n        path (str): local path of the current evaluation image\n        \"\"\"", "\n", "if", "self", ".", "val_table", "and", "self", ".", "result_table", ":", "# Log Table if Val dataset is uploaded as artifact", "\n", "            ", "self", ".", "log_training_progress", "(", "predn", ",", "path", ",", "names", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "bbox_media_panel_images", ")", "<", "self", ".", "max_imgs_to_log", "and", "self", ".", "current_epoch", ">", "0", ":", "\n", "            ", "if", "self", ".", "current_epoch", "%", "self", ".", "bbox_interval", "==", "0", ":", "\n", "                ", "box_data", "=", "[", "{", "\"position\"", ":", "{", "\"minX\"", ":", "xyxy", "[", "0", "]", ",", "\"minY\"", ":", "xyxy", "[", "1", "]", ",", "\"maxX\"", ":", "xyxy", "[", "2", "]", ",", "\"maxY\"", ":", "xyxy", "[", "3", "]", "}", ",", "\n", "\"class_id\"", ":", "int", "(", "cls", ")", ",", "\n", "\"box_caption\"", ":", "f\"{names[cls]} {conf:.3f}\"", ",", "\n", "\"scores\"", ":", "{", "\"class_score\"", ":", "conf", "}", ",", "\n", "\"domain\"", ":", "\"pixel\"", "}", "for", "*", "xyxy", ",", "conf", ",", "cls", "in", "pred", ".", "tolist", "(", ")", "]", "\n", "boxes", "=", "{", "\"predictions\"", ":", "{", "\"box_data\"", ":", "box_data", ",", "\"class_labels\"", ":", "names", "}", "}", "# inference-space", "\n", "self", ".", "bbox_media_panel_images", ".", "append", "(", "wandb", ".", "Image", "(", "im", ",", "boxes", "=", "boxes", ",", "caption", "=", "path", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log": [[469, 479], ["log_dict.items"], "methods", ["None"], ["", "", "", "def", "log", "(", "self", ",", "log_dict", ")", ":", "\n", "        ", "\"\"\"\n        save the metrics to the logging dictionary\n\n        arguments:\n        log_dict (Dict) -- metrics/media to be logged in current step\n        \"\"\"", "\n", "if", "self", ".", "wandb_run", ":", "\n", "            ", "for", "key", ",", "value", "in", "log_dict", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "log_dict", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.end_epoch": [[480, 508], ["wandb_utils.all_logging_disabled", "wandb_utils.WandbLogger.result_artifact.add", "wandb.log_artifact", "wandb.log", "wandb.Table", "wandb.Artifact", "wandb.log", "utils.general.LOGGER.info", "wandb_utils.WandbLogger.wandb_run.finish", "str"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.all_logging_disabled", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["", "", "", "def", "end_epoch", "(", "self", ",", "best_result", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        commit the log_dict, model artifacts and Tables to W&B and flush the log_dict.\n\n        arguments:\n        best_result (boolean): Boolean representing if the result of this evaluation is best or not\n        \"\"\"", "\n", "if", "self", ".", "wandb_run", ":", "\n", "            ", "with", "all_logging_disabled", "(", ")", ":", "\n", "                ", "if", "self", ".", "bbox_media_panel_images", ":", "\n", "                    ", "self", ".", "log_dict", "[", "\"BoundingBoxDebugger\"", "]", "=", "self", ".", "bbox_media_panel_images", "\n", "", "try", ":", "\n", "                    ", "wandb", ".", "log", "(", "self", ".", "log_dict", ")", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "                    ", "LOGGER", ".", "info", "(", "f\"An error occurred in wandb logger. The training will proceed without interruption. More info\\n{e}\"", ")", "\n", "self", ".", "wandb_run", ".", "finish", "(", ")", "\n", "self", ".", "wandb_run", "=", "None", "\n", "\n", "", "self", ".", "log_dict", "=", "{", "}", "\n", "self", ".", "bbox_media_panel_images", "=", "[", "]", "\n", "", "if", "self", ".", "result_artifact", ":", "\n", "                ", "self", ".", "result_artifact", ".", "add", "(", "self", ".", "result_table", ",", "'result'", ")", "\n", "wandb", ".", "log_artifact", "(", "self", ".", "result_artifact", ",", "aliases", "=", "[", "'latest'", ",", "'last'", ",", "'epoch '", "+", "str", "(", "self", ".", "current_epoch", ")", ",", "\n", "(", "'best'", "if", "best_result", "else", "''", ")", "]", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "\"evaluation\"", ":", "self", ".", "result_table", "}", ")", "\n", "self", ".", "result_table", "=", "wandb", ".", "Table", "(", "[", "\"epoch\"", ",", "\"id\"", ",", "\"ground truth\"", ",", "\"prediction\"", ",", "\"avg_confidence\"", "]", ")", "\n", "self", ".", "result_artifact", "=", "wandb", ".", "Artifact", "(", "\"run_\"", "+", "wandb", ".", "run", ".", "id", "+", "\"_progress\"", ",", "\"evaluation\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.finish_run": [[509, 518], ["wandb.run.finish", "wandb_utils.all_logging_disabled", "wandb.log"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.all_logging_disabled", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log"], ["", "", "", "def", "finish_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Log metrics if any and finish the current W&B run\n        \"\"\"", "\n", "if", "self", ".", "wandb_run", ":", "\n", "            ", "if", "self", ".", "log_dict", ":", "\n", "                ", "with", "all_logging_disabled", "(", ")", ":", "\n", "                    ", "wandb", ".", "log", "(", "self", ".", "log_dict", ")", "\n", "", "", "wandb", ".", "run", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.remove_prefix": [[33, 35], ["len"], "function", ["None"], ["def", "remove_prefix", "(", "from_string", ",", "prefix", "=", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "    ", "return", "from_string", "[", "len", "(", "prefix", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.check_wandb_config_file": [[37, 42], ["pathlib.Path().is_file", "data_config_file.rsplit", "pathlib.Path"], "function", ["None"], ["", "def", "check_wandb_config_file", "(", "data_config_file", ")", ":", "\n", "    ", "wandb_config", "=", "'_wandb.'", ".", "join", "(", "data_config_file", ".", "rsplit", "(", "'.'", ",", "1", ")", ")", "# updated data.yaml path", "\n", "if", "Path", "(", "wandb_config", ")", ".", "is_file", "(", ")", ":", "\n", "        ", "return", "wandb_config", "\n", "", "return", "data_config_file", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.check_wandb_dataset": [[44, 58], ["utils.general.check_file", "data_file.endswith", "utils.general.check_dataset", "open", "yaml.safe_load", "isinstance", "data_dict[].startswith", "isinstance", "data_dict[].startswith"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_file", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_dataset"], ["", "def", "check_wandb_dataset", "(", "data_file", ")", ":", "\n", "    ", "is_trainset_wandb_artifact", "=", "False", "\n", "is_valset_wandb_artifact", "=", "False", "\n", "if", "check_file", "(", "data_file", ")", "and", "data_file", ".", "endswith", "(", "'.yaml'", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "            ", "data_dict", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "is_trainset_wandb_artifact", "=", "(", "isinstance", "(", "data_dict", "[", "'train'", "]", ",", "str", ")", "and", "\n", "data_dict", "[", "'train'", "]", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ")", "\n", "is_valset_wandb_artifact", "=", "(", "isinstance", "(", "data_dict", "[", "'val'", "]", ",", "str", ")", "and", "\n", "data_dict", "[", "'val'", "]", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ")", "\n", "", "if", "is_trainset_wandb_artifact", "or", "is_valset_wandb_artifact", ":", "\n", "        ", "return", "data_dict", "\n", "", "else", ":", "\n", "        ", "return", "check_dataset", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.get_run_info": [[60, 67], ["pathlib.Path", "wandb_utils.remove_prefix"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.remove_prefix"], ["", "", "def", "get_run_info", "(", "run_path", ")", ":", "\n", "    ", "run_path", "=", "Path", "(", "remove_prefix", "(", "run_path", ",", "WANDB_ARTIFACT_PREFIX", ")", ")", "\n", "run_id", "=", "run_path", ".", "stem", "\n", "project", "=", "run_path", ".", "parent", ".", "stem", "\n", "entity", "=", "run_path", ".", "parent", ".", "parent", ".", "stem", "\n", "model_artifact_name", "=", "'run_'", "+", "run_id", "+", "'_model'", "\n", "return", "entity", ",", "project", ",", "run_id", ",", "model_artifact_name", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.check_wandb_resume": [[69, 81], ["isinstance", "wandb_utils.process_wandb_config_ddp_mode", "opt.resume.startswith", "wandb_utils.get_run_info", "wandb.Api", "wandb.Api.artifact", "api.artifact.download", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.process_wandb_config_ddp_mode", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.get_run_info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.download"], ["", "def", "check_wandb_resume", "(", "opt", ")", ":", "\n", "    ", "process_wandb_config_ddp_mode", "(", "opt", ")", "if", "RANK", "not", "in", "[", "-", "1", ",", "0", "]", "else", "None", "\n", "if", "isinstance", "(", "opt", ".", "resume", ",", "str", ")", ":", "\n", "        ", "if", "opt", ".", "resume", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "            ", "if", "RANK", "not", "in", "[", "-", "1", ",", "0", "]", ":", "# For resuming DDP runs", "\n", "                ", "entity", ",", "project", ",", "run_id", ",", "model_artifact_name", "=", "get_run_info", "(", "opt", ".", "resume", ")", "\n", "api", "=", "wandb", ".", "Api", "(", ")", "\n", "artifact", "=", "api", ".", "artifact", "(", "entity", "+", "'/'", "+", "project", "+", "'/'", "+", "model_artifact_name", "+", "':latest'", ")", "\n", "modeldir", "=", "artifact", ".", "download", "(", ")", "\n", "opt", ".", "weights", "=", "str", "(", "Path", "(", "modeldir", ")", "/", "\"last.pt\"", ")", "\n", "", "return", "True", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.process_wandb_config_ddp_mode": [[83, 105], ["open", "yaml.safe_load", "isinstance", "data_dict[].startswith", "wandb.Api", "wandb.Api.artifact", "api.artifact.download", "str", "isinstance", "data_dict[].startswith", "wandb.Api", "wandb.Api.artifact", "api.artifact.download", "str", "str", "utils.general.check_file", "pathlib.Path", "pathlib.Path", "open", "yaml.safe_dump", "pathlib.Path", "wandb_utils.remove_prefix", "wandb_utils.remove_prefix"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.download", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.download", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_file", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.remove_prefix", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.remove_prefix"], ["", "def", "process_wandb_config_ddp_mode", "(", "opt", ")", ":", "\n", "    ", "with", "open", "(", "check_file", "(", "opt", ".", "data", ")", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "        ", "data_dict", "=", "yaml", ".", "safe_load", "(", "f", ")", "# data dict", "\n", "", "train_dir", ",", "val_dir", "=", "None", ",", "None", "\n", "if", "isinstance", "(", "data_dict", "[", "'train'", "]", ",", "str", ")", "and", "data_dict", "[", "'train'", "]", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "        ", "api", "=", "wandb", ".", "Api", "(", ")", "\n", "train_artifact", "=", "api", ".", "artifact", "(", "remove_prefix", "(", "data_dict", "[", "'train'", "]", ")", "+", "':'", "+", "opt", ".", "artifact_alias", ")", "\n", "train_dir", "=", "train_artifact", ".", "download", "(", ")", "\n", "train_path", "=", "Path", "(", "train_dir", ")", "/", "'data/images/'", "\n", "data_dict", "[", "'train'", "]", "=", "str", "(", "train_path", ")", "\n", "\n", "", "if", "isinstance", "(", "data_dict", "[", "'val'", "]", ",", "str", ")", "and", "data_dict", "[", "'val'", "]", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "        ", "api", "=", "wandb", ".", "Api", "(", ")", "\n", "val_artifact", "=", "api", ".", "artifact", "(", "remove_prefix", "(", "data_dict", "[", "'val'", "]", ")", "+", "':'", "+", "opt", ".", "artifact_alias", ")", "\n", "val_dir", "=", "val_artifact", ".", "download", "(", ")", "\n", "val_path", "=", "Path", "(", "val_dir", ")", "/", "'data/images/'", "\n", "data_dict", "[", "'val'", "]", "=", "str", "(", "val_path", ")", "\n", "", "if", "train_dir", "or", "val_dir", ":", "\n", "        ", "ddp_data_path", "=", "str", "(", "Path", "(", "val_dir", ")", "/", "'wandb_local_data.yaml'", ")", "\n", "with", "open", "(", "ddp_data_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "safe_dump", "(", "data_dict", ",", "f", ")", "\n", "", "opt", ".", "data", "=", "ddp_data_path", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.all_logging_disabled": [[520, 533], ["logging.disable", "logging.disable"], "function", ["None"], ["", "", "", "@", "contextmanager", "\n", "def", "all_logging_disabled", "(", "highest_level", "=", "logging", ".", "CRITICAL", ")", ":", "\n", "    ", "\"\"\" source - https://gist.github.com/simon-weber/7853144\n    A context manager that will prevent any logging messages triggered during the body from being processed.\n    :param highest_level: the maximum logging level in use.\n      This would only need to be changed if a custom level greater than CRITICAL is defined.\n    \"\"\"", "\n", "previous_level", "=", "logging", ".", "root", ".", "manager", ".", "disable", "\n", "logging", ".", "disable", "(", "highest_level", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "logging", ".", "disable", "(", "previous_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.sweep.sweep": [[17, 38], ["wandb.init", "vars().get", "train.parse_opt", "vars().get.get", "str", "vars().get.get", "vars().get.get", "str", "str", "str", "str", "str", "utils.torch_utils.select_device", "train.train", "utils.general.increment_path", "vars", "utils.callbacks.Callbacks", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.None.detect.parse_opt", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.turoad_scaloss.None.train.train", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.increment_path"], ["def", "sweep", "(", ")", ":", "\n", "    ", "wandb", ".", "init", "(", ")", "\n", "# Get hyp dict from sweep agent", "\n", "hyp_dict", "=", "vars", "(", "wandb", ".", "config", ")", ".", "get", "(", "\"_items\"", ")", "\n", "\n", "# Workaround: get necessary opt args", "\n", "opt", "=", "parse_opt", "(", "known", "=", "True", ")", "\n", "opt", ".", "batch_size", "=", "hyp_dict", ".", "get", "(", "\"batch_size\"", ")", "\n", "opt", ".", "save_dir", "=", "str", "(", "increment_path", "(", "Path", "(", "opt", ".", "project", ")", "/", "opt", ".", "name", ",", "exist_ok", "=", "opt", ".", "exist_ok", "or", "opt", ".", "evolve", ")", ")", "\n", "opt", ".", "epochs", "=", "hyp_dict", ".", "get", "(", "\"epochs\"", ")", "\n", "opt", ".", "nosave", "=", "True", "\n", "opt", ".", "data", "=", "hyp_dict", ".", "get", "(", "\"data\"", ")", "\n", "opt", ".", "weights", "=", "str", "(", "opt", ".", "weights", ")", "\n", "opt", ".", "cfg", "=", "str", "(", "opt", ".", "cfg", ")", "\n", "opt", ".", "data", "=", "str", "(", "opt", ".", "data", ")", "\n", "opt", ".", "hyp", "=", "str", "(", "opt", ".", "hyp", ")", "\n", "opt", ".", "project", "=", "str", "(", "opt", ".", "project", ")", "\n", "device", "=", "select_device", "(", "opt", ".", "device", ",", "batch_size", "=", "opt", ".", "batch_size", ")", "\n", "\n", "# train", "\n", "train", "(", "hyp_dict", ",", "opt", ",", "device", ",", "callbacks", "=", "Callbacks", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.wandb.log_dataset.create_dataset_artifact": [[10, 14], ["wandb_utils.WandbLogger", "utils.general.LOGGER.info"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["def", "create_dataset_artifact", "(", "opt", ")", ":", "\n", "    ", "logger", "=", "WandbLogger", "(", "opt", ",", "None", ",", "job_type", "=", "'Dataset Creation'", ")", "# TODO: return value unused", "\n", "if", "not", "logger", ".", "wandb", ":", "\n", "        ", "LOGGER", ".", "info", "(", "\"install wandb using `pip install wandb` to log the dataset\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Conv.__init__": [[38, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "common.autopad", "torch.SiLU", "torch.SiLU", "isinstance", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.autopad"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "p", "=", "None", ",", "g", "=", "1", ",", "act", "=", "True", ")", ":", "# ch_in, ch_out, kernel, stride, padding, groups", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "c1", ",", "c2", ",", "k", ",", "s", ",", "autopad", "(", "k", ",", "p", ")", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "c2", ")", "\n", "self", ".", "act", "=", "nn", ".", "SiLU", "(", ")", "if", "act", "is", "True", "else", "(", "act", "if", "isinstance", "(", "act", ",", "nn", ".", "Module", ")", "else", "nn", ".", "Identity", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Conv.forward": [[44, 46], ["common.Conv.act", "common.Conv.bn", "common.Conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Conv.forward_fuse": [[47, 49], ["common.Conv.act", "common.Conv.conv"], "methods", ["None"], ["", "def", "forward_fuse", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.DWConv.__init__": [[53, 55], ["common.Conv.__init__", "math.gcd"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "act", "=", "True", ")", ":", "# ch_in, ch_out, kernel, stride, padding, groups", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "c1", ",", "c2", ",", "k", ",", "s", ",", "g", "=", "math", ".", "gcd", "(", "c1", ",", "c2", ")", ",", "act", "=", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.TransformerLayer.__init__": [[59, 67], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ",", "num_heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "self", ".", "ma", "=", "nn", ".", "MultiheadAttention", "(", "embed_dim", "=", "c", ",", "num_heads", "=", "num_heads", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.TransformerLayer.forward": [[68, 72], ["common.TransformerLayer.fc2", "common.TransformerLayer.ma", "common.TransformerLayer.fc1", "common.TransformerLayer.q", "common.TransformerLayer.k", "common.TransformerLayer.v"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "ma", "(", "self", ".", "q", "(", "x", ")", ",", "self", ".", "k", "(", "x", ")", ",", "self", ".", "v", "(", "x", ")", ")", "[", "0", "]", "+", "x", "\n", "x", "=", "self", ".", "fc2", "(", "self", ".", "fc1", "(", "x", ")", ")", "+", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.TransformerBlock.__init__": [[76, 84], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "common.Conv", "common.TransformerLayer", "range"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "num_heads", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "None", "\n", "if", "c1", "!=", "c2", ":", "\n", "            ", "self", ".", "conv", "=", "Conv", "(", "c1", ",", "c2", ")", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "c2", ",", "c2", ")", "# learnable position embedding", "\n", "self", ".", "tr", "=", "nn", ".", "Sequential", "(", "*", "(", "TransformerLayer", "(", "c2", ",", "num_heads", ")", "for", "_", "in", "range", "(", "num_layers", ")", ")", ")", "\n", "self", ".", "c2", "=", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.TransformerBlock.forward": [[85, 91], ["common.TransformerBlock.flatten().unsqueeze().transpose().squeeze", "common.TransformerBlock.tr().unsqueeze().transpose().reshape", "common.TransformerBlock.conv", "common.TransformerBlock.flatten().unsqueeze().transpose", "common.TransformerBlock.tr().unsqueeze().transpose", "common.TransformerBlock.flatten().unsqueeze", "common.TransformerBlock.tr().unsqueeze", "common.TransformerBlock.flatten", "common.TransformerBlock.tr", "common.TransformerBlock.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "conv", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "b", ",", "_", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "p", "=", "x", ".", "flatten", "(", "2", ")", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "0", ",", "3", ")", ".", "squeeze", "(", "3", ")", "\n", "return", "self", ".", "tr", "(", "p", "+", "self", ".", "linear", "(", "p", ")", ")", ".", "unsqueeze", "(", "3", ")", ".", "transpose", "(", "0", ",", "3", ")", ".", "reshape", "(", "b", ",", "self", ".", "c2", ",", "w", ",", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Bottleneck.__init__": [[95, 101], ["torch.Module.__init__", "int", "common.Conv", "common.Conv"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "# ch_in, ch_out, shortcut, groups, expansion", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c_", ",", "c2", ",", "3", ",", "1", ",", "g", "=", "g", ")", "\n", "self", ".", "add", "=", "shortcut", "and", "c1", "==", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Bottleneck.forward": [[102, 104], ["common.Bottleneck.cv2", "common.Bottleneck.cv2", "common.Bottleneck.cv1", "common.Bottleneck.cv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "cv2", "(", "self", ".", "cv1", "(", "x", ")", ")", "if", "self", ".", "add", "else", "self", ".", "cv2", "(", "self", ".", "cv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.BottleneckCSP.__init__": [[108, 118], ["torch.Module.__init__", "int", "common.Conv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "common.Conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.SiLU", "torch.SiLU", "torch.Sequential", "torch.Sequential", "common.Bottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "n", "=", "1", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "# ch_in, ch_out, number, shortcut, groups, expansion", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv2", "=", "nn", ".", "Conv2d", "(", "c1", ",", "c_", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "cv3", "=", "nn", ".", "Conv2d", "(", "c_", ",", "c_", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "cv4", "=", "Conv", "(", "2", "*", "c_", ",", "c2", ",", "1", ",", "1", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "2", "*", "c_", ")", "# applied to cat(cv2, cv3)", "\n", "self", ".", "act", "=", "nn", ".", "SiLU", "(", ")", "\n", "self", ".", "m", "=", "nn", ".", "Sequential", "(", "*", "(", "Bottleneck", "(", "c_", ",", "c_", ",", "shortcut", ",", "g", ",", "e", "=", "1.0", ")", "for", "_", "in", "range", "(", "n", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.BottleneckCSP.forward": [[119, 123], ["common.BottleneckCSP.cv3", "common.BottleneckCSP.cv2", "common.BottleneckCSP.cv4", "common.BottleneckCSP.m", "common.BottleneckCSP.act", "common.BottleneckCSP.cv1", "common.BottleneckCSP.bn", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "cv3", "(", "self", ".", "m", "(", "self", ".", "cv1", "(", "x", ")", ")", ")", "\n", "y2", "=", "self", ".", "cv2", "(", "x", ")", "\n", "return", "self", ".", "cv4", "(", "self", ".", "act", "(", "self", ".", "bn", "(", "torch", ".", "cat", "(", "(", "y1", ",", "y2", ")", ",", "dim", "=", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.C3.__init__": [[127, 134], ["torch.Module.__init__", "int", "common.Conv", "common.Conv", "common.Conv", "torch.Sequential", "torch.Sequential", "common.Bottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "n", "=", "1", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "# ch_in, ch_out, number, shortcut, groups, expansion", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv3", "=", "Conv", "(", "2", "*", "c_", ",", "c2", ",", "1", ")", "# act=FReLU(c2)", "\n", "self", ".", "m", "=", "nn", ".", "Sequential", "(", "*", "(", "Bottleneck", "(", "c_", ",", "c_", ",", "shortcut", ",", "g", ",", "e", "=", "1.0", ")", "for", "_", "in", "range", "(", "n", ")", ")", ")", "\n", "# self.m = nn.Sequential(*[CrossConv(c_, c_, 3, 1, g, 1.0, shortcut) for _ in range(n)])", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.C3.forward": [[136, 138], ["common.C3.cv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.C3.m", "common.C3.cv2", "common.C3.cv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "cv3", "(", "torch", ".", "cat", "(", "(", "self", ".", "m", "(", "self", ".", "cv1", "(", "x", ")", ")", ",", "self", ".", "cv2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.C3TR.__init__": [[142, 146], ["common.C3.__init__", "int", "common.TransformerBlock"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "n", "=", "1", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "c1", ",", "c2", ",", "n", ",", "shortcut", ",", "g", ",", "e", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "\n", "self", ".", "m", "=", "TransformerBlock", "(", "c_", ",", "c_", ",", "4", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.C3SPP.__init__": [[150, 154], ["common.C3.__init__", "int", "common.SPP"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "(", "5", ",", "9", ",", "13", ")", ",", "n", "=", "1", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "c1", ",", "c2", ",", "n", ",", "shortcut", ",", "g", ",", "e", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "\n", "self", ".", "m", "=", "SPP", "(", "c_", ",", "c_", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.C3Ghost.__init__": [[158, 162], ["common.C3.__init__", "int", "torch.Sequential", "torch.Sequential", "common.GhostBottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "n", "=", "1", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "c1", ",", "c2", ",", "n", ",", "shortcut", ",", "g", ",", "e", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "# hidden channels", "\n", "self", ".", "m", "=", "nn", ".", "Sequential", "(", "*", "(", "GhostBottleneck", "(", "c_", ",", "c_", ")", "for", "_", "in", "range", "(", "n", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.SPP.__init__": [[166, 172], ["torch.Module.__init__", "common.Conv", "common.Conv", "torch.ModuleList", "torch.ModuleList", "torch.MaxPool2d", "torch.MaxPool2d", "len"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "(", "5", ",", "9", ",", "13", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "c1", "//", "2", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c_", "*", "(", "len", "(", "k", ")", "+", "1", ")", ",", "c2", ",", "1", ",", "1", ")", "\n", "self", ".", "m", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "x", ",", "stride", "=", "1", ",", "padding", "=", "x", "//", "2", ")", "for", "x", "in", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.SPP.forward": [[173, 178], ["common.SPP.cv1", "warnings.catch_warnings", "warnings.simplefilter", "common.SPP.cv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "m"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cv1", "(", "x", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "'ignore'", ")", "# suppress torch 1.9.0 max_pool2d() warning", "\n", "return", "self", ".", "cv2", "(", "torch", ".", "cat", "(", "[", "x", "]", "+", "[", "m", "(", "x", ")", "for", "m", "in", "self", ".", "m", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.SPPF.__init__": [[182, 188], ["torch.Module.__init__", "common.Conv", "common.Conv", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "5", ")", ":", "# equivalent to SPP(k=(5, 9, 13))", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "c1", "//", "2", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c_", "*", "4", ",", "c2", ",", "1", ",", "1", ")", "\n", "self", ".", "m", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "k", ",", "stride", "=", "1", ",", "padding", "=", "k", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.SPPF.forward": [[189, 196], ["common.SPPF.cv1", "warnings.catch_warnings", "warnings.simplefilter", "common.SPPF.m", "common.SPPF.m", "common.SPPF.cv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.SPPF.m"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cv1", "(", "x", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "'ignore'", ")", "# suppress torch 1.9.0 max_pool2d() warning", "\n", "y1", "=", "self", ".", "m", "(", "x", ")", "\n", "y2", "=", "self", ".", "m", "(", "y1", ")", "\n", "return", "self", ".", "cv2", "(", "torch", ".", "cat", "(", "[", "x", ",", "y1", ",", "y2", ",", "self", ".", "m", "(", "y2", ")", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Focus.__init__": [[200, 203], ["torch.Module.__init__", "common.Conv"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "p", "=", "None", ",", "g", "=", "1", ",", "act", "=", "True", ")", ":", "# ch_in, ch_out, kernel, stride, padding, groups", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv", "(", "c1", "*", "4", ",", "c2", ",", "k", ",", "s", ",", "p", ",", "g", ",", "act", ")", "\n", "# self.contract = Contract(gain=2)", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Focus.forward": [[205, 207], ["common.Focus.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# x(b,c,w,h) -> y(b,4c,w/2,h/2)", "\n", "        ", "return", "self", ".", "conv", "(", "torch", ".", "cat", "(", "[", "x", "[", "...", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "x", "[", "...", ",", "1", ":", ":", "2", ",", ":", ":", "2", "]", ",", "x", "[", "...", ",", ":", ":", "2", ",", "1", ":", ":", "2", "]", ",", "x", "[", "...", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "]", ",", "1", ")", ")", "\n", "# return self.conv(self.contract(x))", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.GhostConv.__init__": [[212, 217], ["torch.Module.__init__", "common.Conv", "common.Conv"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "g", "=", "1", ",", "act", "=", "True", ")", ":", "# ch_in, ch_out, kernel, stride, groups", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "c2", "//", "2", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "k", ",", "s", ",", "None", ",", "g", ",", "act", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c_", ",", "c_", ",", "5", ",", "1", ",", "None", ",", "c_", ",", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.GhostConv.forward": [[218, 221], ["common.GhostConv.cv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.GhostConv.cv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "cv1", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y", ",", "self", ".", "cv2", "(", "y", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.GhostBottleneck.__init__": [[225, 233], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "common.GhostConv", "common.GhostConv", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "common.DWConv", "torch.Identity", "torch.Identity", "common.DWConv", "common.Conv"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "3", ",", "s", "=", "1", ")", ":", "# ch_in, ch_out, kernel, stride", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "c2", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "GhostConv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", ",", "# pw", "\n", "DWConv", "(", "c_", ",", "c_", ",", "k", ",", "s", ",", "act", "=", "False", ")", "if", "s", "==", "2", "else", "nn", ".", "Identity", "(", ")", ",", "# dw", "\n", "GhostConv", "(", "c_", ",", "c2", ",", "1", ",", "1", ",", "act", "=", "False", ")", ")", "# pw-linear", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "DWConv", "(", "c1", ",", "c1", ",", "k", ",", "s", ",", "act", "=", "False", ")", ",", "\n", "Conv", "(", "c1", ",", "c2", ",", "1", ",", "1", ",", "act", "=", "False", ")", ")", "if", "s", "==", "2", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.GhostBottleneck.forward": [[234, 236], ["common.GhostBottleneck.conv", "common.GhostBottleneck.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Contract.__init__": [[240, 243], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gain", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gain", "=", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Contract.forward": [[244, 250], ["x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "# assert (h / s == 0) and (W / s == 0), 'Indivisible gain'", "\n", "s", "=", "self", ".", "gain", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", "//", "s", ",", "s", ",", "w", "//", "s", ",", "s", ")", "# x(1,64,40,2,40,2)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# x(1,2,2,64,40,40)", "\n", "return", "x", ".", "view", "(", "b", ",", "c", "*", "s", "*", "s", ",", "h", "//", "s", ",", "w", "//", "s", ")", "# x(1,256,40,40)", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Expand.__init__": [[254, 257], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gain", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gain", "=", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Expand.forward": [[258, 264], ["x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "# assert C / s ** 2 == 0, 'Indivisible gain'", "\n", "s", "=", "self", ".", "gain", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "s", ",", "s", ",", "c", "//", "s", "**", "2", ",", "h", ",", "w", ")", "# x(1,2,2,16,80,80)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "5", ",", "2", ")", ".", "contiguous", "(", ")", "# x(1,16,80,2,80,2)", "\n", "return", "x", ".", "view", "(", "b", ",", "c", "//", "s", "**", "2", ",", "h", "*", "s", ",", "w", "*", "s", ")", "# x(1,16,160,160)", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Concat.__init__": [[268, 271], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimension", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "dimension", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Concat.forward": [[272, 274], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "x", ",", "self", ".", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.DetectMultiBackend.__init__": [[278, 350], ["torch.Module.__init__", "str", "utils.general.check_suffix", "common.DetectMultiBackend.__dict__.update", "pathlib.Path().suffix.lower", "utils.general.LOGGER.info", "torch.jit.load", "torch.jit.load", "torch.jit.load", "torch.jit.load", "locals", "isinstance", "str.lower", "json.loads", "int", "range", "int", "torch.jit.load", "torch.jit.load", "torch.jit.load", "torch.jit.load", "attempt_load", "tf.keras.models.load_model.stride.max", "hasattr", "ct.models.MLModel", "pathlib.Path", "utils.general.LOGGER.info", "utils.general.check_requirements", "cv2.dnn.readNetFromONNX", "utils.general.LOGGER.info", "utils.general.check_requirements", "onnxruntime.InferenceSession", "utils.general.LOGGER.info", "tf.Graph().as_graph_def", "tf.Graph().as_graph_def.ParseFromString", "common.DetectMultiBackend.__init__.wrap_frozen_graph"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_suffix", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.LoadStreams.update", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.attempt_load", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_requirements", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["    ", "def", "__init__", "(", "self", ",", "weights", "=", "'yolov3.pt'", ",", "device", "=", "None", ",", "dnn", "=", "True", ")", ":", "\n", "# Usage:", "\n", "#   PyTorch:      weights = *.pt", "\n", "#   TorchScript:            *.torchscript.pt", "\n", "#   CoreML:                 *.mlmodel", "\n", "#   TensorFlow:             *_saved_model", "\n", "#   TensorFlow:             *.pb", "\n", "#   TensorFlow Lite:        *.tflite", "\n", "#   ONNX Runtime:           *.onnx", "\n", "#   OpenCV DNN:             *.onnx with dnn=True", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "w", "=", "str", "(", "weights", "[", "0", "]", "if", "isinstance", "(", "weights", ",", "list", ")", "else", "weights", ")", "\n", "suffix", ",", "suffixes", "=", "Path", "(", "w", ")", ".", "suffix", ".", "lower", "(", ")", ",", "[", "'.pt'", ",", "'.onnx'", ",", "'.tflite'", ",", "'.pb'", ",", "''", ",", "'.mlmodel'", "]", "\n", "check_suffix", "(", "w", ",", "suffixes", ")", "# check weights have acceptable suffix", "\n", "pt", ",", "onnx", ",", "tflite", ",", "pb", ",", "saved_model", ",", "coreml", "=", "(", "suffix", "==", "x", "for", "x", "in", "suffixes", ")", "# backend booleans", "\n", "jit", "=", "pt", "and", "'torchscript'", "in", "w", ".", "lower", "(", ")", "\n", "stride", ",", "names", "=", "64", ",", "[", "f'class{i}'", "for", "i", "in", "range", "(", "1000", ")", "]", "# assign defaults", "\n", "\n", "if", "jit", ":", "# TorchScript", "\n", "            ", "LOGGER", ".", "info", "(", "f'Loading {w} for TorchScript inference...'", ")", "\n", "extra_files", "=", "{", "'config.txt'", ":", "''", "}", "# model metadata", "\n", "model", "=", "torch", ".", "jit", ".", "load", "(", "w", ",", "_extra_files", "=", "extra_files", ")", "\n", "if", "extra_files", "[", "'config.txt'", "]", ":", "\n", "                ", "d", "=", "json", ".", "loads", "(", "extra_files", "[", "'config.txt'", "]", ")", "# extra_files dict", "\n", "stride", ",", "names", "=", "int", "(", "d", "[", "'stride'", "]", ")", ",", "d", "[", "'names'", "]", "\n", "", "", "elif", "pt", ":", "# PyTorch", "\n", "            ", "from", "models", ".", "experimental", "import", "attempt_load", "# scoped to avoid circular import", "\n", "model", "=", "torch", ".", "jit", ".", "load", "(", "w", ")", "if", "'torchscript'", "in", "w", "else", "attempt_load", "(", "weights", ",", "map_location", "=", "device", ")", "\n", "stride", "=", "int", "(", "model", ".", "stride", ".", "max", "(", ")", ")", "# model stride", "\n", "names", "=", "model", ".", "module", ".", "names", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ".", "names", "# get class names", "\n", "", "elif", "coreml", ":", "# CoreML *.mlmodel", "\n", "            ", "import", "coremltools", "as", "ct", "\n", "model", "=", "ct", ".", "models", ".", "MLModel", "(", "w", ")", "\n", "", "elif", "dnn", ":", "# ONNX OpenCV DNN", "\n", "            ", "LOGGER", ".", "info", "(", "f'Loading {w} for ONNX OpenCV DNN inference...'", ")", "\n", "check_requirements", "(", "(", "'opencv-python>=4.5.4'", ",", ")", ")", "\n", "net", "=", "cv2", ".", "dnn", ".", "readNetFromONNX", "(", "w", ")", "\n", "", "elif", "onnx", ":", "# ONNX Runtime", "\n", "            ", "LOGGER", ".", "info", "(", "f'Loading {w} for ONNX Runtime inference...'", ")", "\n", "check_requirements", "(", "(", "'onnx'", ",", "'onnxruntime-gpu'", "if", "torch", ".", "has_cuda", "else", "'onnxruntime'", ")", ")", "\n", "import", "onnxruntime", "\n", "session", "=", "onnxruntime", ".", "InferenceSession", "(", "w", ",", "None", ")", "\n", "", "else", ":", "# TensorFlow model (TFLite, pb, saved_model)", "\n", "            ", "import", "tensorflow", "as", "tf", "\n", "if", "pb", ":", "# https://www.tensorflow.org/guide/migrate#a_graphpb_or_graphpbtxt", "\n", "                ", "def", "wrap_frozen_graph", "(", "gd", ",", "inputs", ",", "outputs", ")", ":", "\n", "                    ", "x", "=", "tf", ".", "compat", ".", "v1", ".", "wrap_function", "(", "lambda", ":", "tf", ".", "compat", ".", "v1", ".", "import_graph_def", "(", "gd", ",", "name", "=", "\"\"", ")", ",", "[", "]", ")", "# wrapped", "\n", "return", "x", ".", "prune", "(", "tf", ".", "nest", ".", "map_structure", "(", "x", ".", "graph", ".", "as_graph_element", ",", "inputs", ")", ",", "\n", "tf", ".", "nest", ".", "map_structure", "(", "x", ".", "graph", ".", "as_graph_element", ",", "outputs", ")", ")", "\n", "\n", "", "LOGGER", ".", "info", "(", "f'Loading {w} for TensorFlow *.pb inference...'", ")", "\n", "graph_def", "=", "tf", ".", "Graph", "(", ")", ".", "as_graph_def", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "open", "(", "w", ",", "'rb'", ")", ".", "read", "(", ")", ")", "\n", "frozen_func", "=", "wrap_frozen_graph", "(", "gd", "=", "graph_def", ",", "inputs", "=", "\"x:0\"", ",", "outputs", "=", "\"Identity:0\"", ")", "\n", "", "elif", "saved_model", ":", "\n", "                ", "LOGGER", ".", "info", "(", "f'Loading {w} for TensorFlow saved_model inference...'", ")", "\n", "model", "=", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "w", ")", "\n", "", "elif", "tflite", ":", "# https://www.tensorflow.org/lite/guide/python#install_tensorflow_lite_for_python", "\n", "                ", "if", "'edgetpu'", "in", "w", ".", "lower", "(", ")", ":", "\n", "                    ", "LOGGER", ".", "info", "(", "f'Loading {w} for TensorFlow Edge TPU inference...'", ")", "\n", "import", "tflite_runtime", ".", "interpreter", "as", "tfli", "\n", "delegate", "=", "{", "'Linux'", ":", "'libedgetpu.so.1'", ",", "# install https://coral.ai/software/#edgetpu-runtime", "\n", "'Darwin'", ":", "'libedgetpu.1.dylib'", ",", "\n", "'Windows'", ":", "'edgetpu.dll'", "}", "[", "platform", ".", "system", "(", ")", "]", "\n", "interpreter", "=", "tfli", ".", "Interpreter", "(", "model_path", "=", "w", ",", "experimental_delegates", "=", "[", "tfli", ".", "load_delegate", "(", "delegate", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "LOGGER", ".", "info", "(", "f'Loading {w} for TensorFlow Lite inference...'", ")", "\n", "interpreter", "=", "tf", ".", "lite", ".", "Interpreter", "(", "model_path", "=", "w", ")", "# load TFLite model", "\n", "", "interpreter", ".", "allocate_tensors", "(", ")", "# allocate", "\n", "input_details", "=", "interpreter", ".", "get_input_details", "(", ")", "# inputs", "\n", "output_details", "=", "interpreter", ".", "get_output_details", "(", ")", "# outputs", "\n", "", "", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "# assign all variables to self", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.DetectMultiBackend.forward": [[351, 396], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "common.DetectMultiBackend.model", "common.DetectMultiBackend.model", "im.permute().cpu().numpy.permute().cpu().numpy.permute().cpu().numpy", "PIL.Image.fromarray", "common.DetectMultiBackend.model.predict", "utils.general.xywh2xyxy", "numpy.concatenate", "y[].max", "y[].argmax().astype", "im.permute().cpu().numpy.permute().cpu().numpy.cpu().numpy", "im.permute().cpu().numpy.permute().cpu().numpy.permute().cpu().numpy", "im.permute().cpu().numpy.permute().cpu().numpy.permute().cpu", "conf.reshape", "cls.reshape", "common.DetectMultiBackend.net.setInput", "common.DetectMultiBackend.net.forward", "common.DetectMultiBackend.frozen_func().numpy", "y[].argmax", "im.permute().cpu().numpy.permute().cpu().numpy.cpu", "common.DetectMultiBackend.session.run", "im.permute().cpu().numpy.permute().cpu().numpy.permute().cpu", "common.DetectMultiBackend.model().numpy", "im.permute().cpu().numpy.permute().cpu().numpy.permute", "common.DetectMultiBackend.frozen_func", "common.DetectMultiBackend.interpreter.set_tensor", "common.DetectMultiBackend.interpreter.invoke", "common.DetectMultiBackend.interpreter.get_tensor", "im.permute().cpu().numpy.permute().cpu().numpy.permute", "common.DetectMultiBackend.model", "common.DetectMultiBackend.tf.constant", "common.DetectMultiBackend.session.get_outputs", "common.DetectMultiBackend.session.get_inputs", "common.DetectMultiBackend.astype"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.forward", "home.repos.pwc.inspect_result.turoad_scaloss.utils.callbacks.Callbacks.run"], ["", "def", "forward", "(", "self", ",", "im", ",", "augment", "=", "False", ",", "visualize", "=", "False", ",", "val", "=", "False", ")", ":", "\n", "#  MultiBackend inference", "\n", "        ", "b", ",", "ch", ",", "h", ",", "w", "=", "im", ".", "shape", "# batch, channel, height, width", "\n", "if", "self", ".", "pt", ":", "# PyTorch", "\n", "            ", "y", "=", "self", ".", "model", "(", "im", ")", "if", "self", ".", "jit", "else", "self", ".", "model", "(", "im", ",", "augment", "=", "augment", ",", "visualize", "=", "visualize", ")", "\n", "return", "y", "if", "val", "else", "y", "[", "0", "]", "\n", "", "elif", "self", ".", "coreml", ":", "# CoreML *.mlmodel", "\n", "            ", "im", "=", "im", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# torch BCHW to numpy BHWC shape(1,320,192,3)", "\n", "im", "=", "Image", ".", "fromarray", "(", "(", "im", "[", "0", "]", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", ")", "\n", "# im = im.resize((192, 320), Image.ANTIALIAS)", "\n", "y", "=", "self", ".", "model", ".", "predict", "(", "{", "'image'", ":", "im", "}", ")", "# coordinates are xywh normalized", "\n", "box", "=", "xywh2xyxy", "(", "y", "[", "'coordinates'", "]", "*", "[", "[", "w", ",", "h", ",", "w", ",", "h", "]", "]", ")", "# xyxy pixels", "\n", "conf", ",", "cls", "=", "y", "[", "'confidence'", "]", ".", "max", "(", "1", ")", ",", "y", "[", "'confidence'", "]", ".", "argmax", "(", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "box", ",", "conf", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "cls", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "onnx", ":", "# ONNX", "\n", "            ", "im", "=", "im", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# torch to numpy", "\n", "if", "self", ".", "dnn", ":", "# ONNX OpenCV DNN", "\n", "                ", "self", ".", "net", ".", "setInput", "(", "im", ")", "\n", "y", "=", "self", ".", "net", ".", "forward", "(", ")", "\n", "", "else", ":", "# ONNX Runtime", "\n", "                ", "y", "=", "self", ".", "session", ".", "run", "(", "[", "self", ".", "session", ".", "get_outputs", "(", ")", "[", "0", "]", ".", "name", "]", ",", "{", "self", ".", "session", ".", "get_inputs", "(", ")", "[", "0", "]", ".", "name", ":", "im", "}", ")", "[", "0", "]", "\n", "", "", "else", ":", "# TensorFlow model (TFLite, pb, saved_model)", "\n", "            ", "im", "=", "im", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# torch BCHW to numpy BHWC shape(1,320,192,3)", "\n", "if", "self", ".", "pb", ":", "\n", "                ", "y", "=", "self", ".", "frozen_func", "(", "x", "=", "self", ".", "tf", ".", "constant", "(", "im", ")", ")", ".", "numpy", "(", ")", "\n", "", "elif", "self", ".", "saved_model", ":", "\n", "                ", "y", "=", "self", ".", "model", "(", "im", ",", "training", "=", "False", ")", ".", "numpy", "(", ")", "\n", "", "elif", "self", ".", "tflite", ":", "\n", "                ", "input", ",", "output", "=", "self", ".", "input_details", "[", "0", "]", ",", "self", ".", "output_details", "[", "0", "]", "\n", "int8", "=", "input", "[", "'dtype'", "]", "==", "np", ".", "uint8", "# is TFLite quantized uint8 model", "\n", "if", "int8", ":", "\n", "                    ", "scale", ",", "zero_point", "=", "input", "[", "'quantization'", "]", "\n", "im", "=", "(", "im", "/", "scale", "+", "zero_point", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# de-scale", "\n", "", "self", ".", "interpreter", ".", "set_tensor", "(", "input", "[", "'index'", "]", ",", "im", ")", "\n", "self", ".", "interpreter", ".", "invoke", "(", ")", "\n", "y", "=", "self", ".", "interpreter", ".", "get_tensor", "(", "output", "[", "'index'", "]", ")", "\n", "if", "int8", ":", "\n", "                    ", "scale", ",", "zero_point", "=", "output", "[", "'quantization'", "]", "\n", "y", "=", "(", "y", ".", "astype", "(", "np", ".", "float32", ")", "-", "zero_point", ")", "*", "scale", "# re-scale", "\n", "", "", "y", "[", "...", ",", "0", "]", "*=", "w", "# x", "\n", "y", "[", "...", ",", "1", "]", "*=", "h", "# y", "\n", "y", "[", "...", ",", "2", "]", "*=", "w", "# w", "\n", "y", "[", "...", ",", "3", "]", "*=", "h", "# h", "\n", "", "y", "=", "torch", ".", "tensor", "(", "y", ")", "\n", "return", "(", "y", ",", "[", "]", ")", "if", "val", "else", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.AutoShape.__init__": [[406, 409], ["torch.Module.__init__", "model.eval"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.AutoShape.autoshape": [[410, 413], ["utils.general.LOGGER.info"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["", "def", "autoshape", "(", "self", ")", ":", "\n", "        ", "LOGGER", ".", "info", "(", "'AutoShape already enabled, skipping... '", ")", "# model already converted to model.autoshape()", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.AutoShape._apply": [[414, 423], ["super()._apply", "fn", "list", "isinstance", "map", "list", "map"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._apply"], ["", "def", "_apply", "(", "self", ",", "fn", ")", ":", "\n", "# Apply to(), cpu(), cuda(), half() to model tensors that are not parameters or registered buffers", "\n", "        ", "self", "=", "super", "(", ")", ".", "_apply", "(", "fn", ")", "\n", "m", "=", "self", ".", "model", ".", "model", "[", "-", "1", "]", "# Detect()", "\n", "m", ".", "stride", "=", "fn", "(", "m", ".", "stride", ")", "\n", "m", ".", "grid", "=", "list", "(", "map", "(", "fn", ",", "m", ".", "grid", ")", ")", "\n", "if", "isinstance", "(", "m", ".", "anchor_grid", ",", "list", ")", ":", "\n", "            ", "m", ".", "anchor_grid", "=", "list", "(", "map", "(", "fn", ",", "m", ".", "anchor_grid", ")", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.AutoShape.forward": [[424, 480], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "next", "isinstance", "enumerate", "numpy.ascontiguousarray", "t.append", "utils.torch_utils.time_sync", "common.AutoShape.model.parameters", "isinstance", "isinstance", "files.append", "shape0.append", "shape1.append", "utils.general.make_divisible", "numpy.stack", "numpy.ascontiguousarray.transpose", "torch.from_numpy().to().type_as", "torch.from_numpy().to().type_as", "torch.from_numpy().to().type_as", "torch.from_numpy().to().type_as", "utils.torch_utils.time_sync", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "t.append", "utils.general.non_max_suppression", "range", "t.append", "common.Detections", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "common.AutoShape.model", "len", "numpy.asarray", "isinstance", "im.transpose.transpose.transpose", "numpy.tile", "max", "numpy.ascontiguousarray", "int", "numpy.stack().max", "utils.datasets.letterbox", "common.AutoShape.model", "utils.torch_utils.time_sync", "utils.general.scale_coords", "utils.torch_utils.time_sync", "imgs.to().type_as", "PIL.Image.open", "utils.datasets.exif_transpose", "pathlib.Path().with_suffix", "common.AutoShape.stride.max", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "numpy.asarray", "numpy.stack", "imgs.to", "str().startswith", "utils.datasets.exif_transpose", "getattr", "pathlib.Path", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "requests.get", "str"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.make_divisible", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.non_max_suppression", "home.repos.pwc.inspect_result.turoad_scaloss.utils.augmentations.letterbox", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.scale_coords", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.exif_transpose", "home.repos.pwc.inspect_result.turoad_scaloss.utils.datasets.exif_transpose"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "imgs", ",", "size", "=", "640", ",", "augment", "=", "False", ",", "profile", "=", "False", ")", ":", "\n", "# Inference from various sources. For height=640, width=1280, RGB images example inputs are:", "\n", "#   file:       imgs = 'data/images/zidane.jpg'  # str or PosixPath", "\n", "#   URI:             = 'https://ultralytics.com/images/zidane.jpg'", "\n", "#   OpenCV:          = cv2.imread('image.jpg')[:,:,::-1]  # HWC BGR to RGB x(640,1280,3)", "\n", "#   PIL:             = Image.open('image.jpg') or ImageGrab.grab()  # HWC x(640,1280,3)", "\n", "#   numpy:           = np.zeros((640,1280,3))  # HWC", "\n", "#   torch:           = torch.zeros(16,3,320,640)  # BCHW (scaled to size=640, 0-1 values)", "\n", "#   multiple:        = [Image.open('image1.jpg'), Image.open('image2.jpg'), ...]  # list of images", "\n", "\n", "        ", "t", "=", "[", "time_sync", "(", ")", "]", "\n", "p", "=", "next", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "# for device and type", "\n", "if", "isinstance", "(", "imgs", ",", "torch", ".", "Tensor", ")", ":", "# torch", "\n", "            ", "with", "amp", ".", "autocast", "(", "enabled", "=", "p", ".", "device", ".", "type", "!=", "'cpu'", ")", ":", "\n", "                ", "return", "self", ".", "model", "(", "imgs", ".", "to", "(", "p", ".", "device", ")", ".", "type_as", "(", "p", ")", ",", "augment", ",", "profile", ")", "# inference", "\n", "\n", "# Pre-process", "\n", "", "", "n", ",", "imgs", "=", "(", "len", "(", "imgs", ")", ",", "imgs", ")", "if", "isinstance", "(", "imgs", ",", "list", ")", "else", "(", "1", ",", "[", "imgs", "]", ")", "# number of images, list of images", "\n", "shape0", ",", "shape1", ",", "files", "=", "[", "]", ",", "[", "]", ",", "[", "]", "# image and inference shapes, filenames", "\n", "for", "i", ",", "im", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "f", "=", "f'image{i}'", "# filename", "\n", "if", "isinstance", "(", "im", ",", "(", "str", ",", "Path", ")", ")", ":", "# filename or uri", "\n", "                ", "im", ",", "f", "=", "Image", ".", "open", "(", "requests", ".", "get", "(", "im", ",", "stream", "=", "True", ")", ".", "raw", "if", "str", "(", "im", ")", ".", "startswith", "(", "'http'", ")", "else", "im", ")", ",", "im", "\n", "im", "=", "np", ".", "asarray", "(", "exif_transpose", "(", "im", ")", ")", "\n", "", "elif", "isinstance", "(", "im", ",", "Image", ".", "Image", ")", ":", "# PIL Image", "\n", "                ", "im", ",", "f", "=", "np", ".", "asarray", "(", "exif_transpose", "(", "im", ")", ")", ",", "getattr", "(", "im", ",", "'filename'", ",", "f", ")", "or", "f", "\n", "", "files", ".", "append", "(", "Path", "(", "f", ")", ".", "with_suffix", "(", "'.jpg'", ")", ".", "name", ")", "\n", "if", "im", ".", "shape", "[", "0", "]", "<", "5", ":", "# image in CHW", "\n", "                ", "im", "=", "im", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "# reverse dataloader .transpose(2, 0, 1)", "\n", "", "im", "=", "im", "[", "...", ",", ":", "3", "]", "if", "im", ".", "ndim", "==", "3", "else", "np", ".", "tile", "(", "im", "[", "...", ",", "None", "]", ",", "3", ")", "# enforce 3ch input", "\n", "s", "=", "im", ".", "shape", "[", ":", "2", "]", "# HWC", "\n", "shape0", ".", "append", "(", "s", ")", "# image shape", "\n", "g", "=", "(", "size", "/", "max", "(", "s", ")", ")", "# gain", "\n", "shape1", ".", "append", "(", "[", "y", "*", "g", "for", "y", "in", "s", "]", ")", "\n", "imgs", "[", "i", "]", "=", "im", "if", "im", ".", "data", ".", "contiguous", "else", "np", ".", "ascontiguousarray", "(", "im", ")", "# update", "\n", "", "shape1", "=", "[", "make_divisible", "(", "x", ",", "int", "(", "self", ".", "stride", ".", "max", "(", ")", ")", ")", "for", "x", "in", "np", ".", "stack", "(", "shape1", ",", "0", ")", ".", "max", "(", "0", ")", "]", "# inference shape", "\n", "x", "=", "[", "letterbox", "(", "im", ",", "new_shape", "=", "shape1", ",", "auto", "=", "False", ")", "[", "0", "]", "for", "im", "in", "imgs", "]", "# pad", "\n", "x", "=", "np", ".", "stack", "(", "x", ",", "0", ")", "if", "n", ">", "1", "else", "x", "[", "0", "]", "[", "None", "]", "# stack", "\n", "x", "=", "np", ".", "ascontiguousarray", "(", "x", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "# BHWC to BCHW", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "to", "(", "p", ".", "device", ")", ".", "type_as", "(", "p", ")", "/", "255", "# uint8 to fp16/32", "\n", "t", ".", "append", "(", "time_sync", "(", ")", ")", "\n", "\n", "with", "amp", ".", "autocast", "(", "enabled", "=", "p", ".", "device", ".", "type", "!=", "'cpu'", ")", ":", "\n", "# Inference", "\n", "            ", "y", "=", "self", ".", "model", "(", "x", ",", "augment", ",", "profile", ")", "[", "0", "]", "# forward", "\n", "t", ".", "append", "(", "time_sync", "(", ")", ")", "\n", "\n", "# Post-process", "\n", "y", "=", "non_max_suppression", "(", "y", ",", "self", ".", "conf", ",", "iou_thres", "=", "self", ".", "iou", ",", "classes", "=", "self", ".", "classes", ",", "\n", "multi_label", "=", "self", ".", "multi_label", ",", "max_det", "=", "self", ".", "max_det", ")", "# NMS", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "scale_coords", "(", "shape1", ",", "y", "[", "i", "]", "[", ":", ",", ":", "4", "]", ",", "shape0", "[", "i", "]", ")", "\n", "\n", "", "t", ".", "append", "(", "time_sync", "(", ")", ")", "\n", "return", "Detections", "(", "imgs", ",", "y", ",", "files", ",", "t", ",", "self", ".", "names", ",", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.__init__": [[484, 499], ["super().__init__", "len", "tuple", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "utils.general.xyxy2xywh", "zip", "zip", "range"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.xyxy2xywh"], ["    ", "def", "__init__", "(", "self", ",", "imgs", ",", "pred", ",", "files", ",", "times", "=", "None", ",", "names", "=", "None", ",", "shape", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "d", "=", "pred", "[", "0", "]", ".", "device", "# device", "\n", "gn", "=", "[", "torch", ".", "tensor", "(", "[", "*", "(", "im", ".", "shape", "[", "i", "]", "for", "i", "in", "[", "1", ",", "0", ",", "1", ",", "0", "]", ")", ",", "1", ",", "1", "]", ",", "device", "=", "d", ")", "for", "im", "in", "imgs", "]", "# normalizations", "\n", "self", ".", "imgs", "=", "imgs", "# list of images as numpy arrays", "\n", "self", ".", "pred", "=", "pred", "# list of tensors pred[0] = (xyxy, conf, cls)", "\n", "self", ".", "names", "=", "names", "# class names", "\n", "self", ".", "files", "=", "files", "# image filenames", "\n", "self", ".", "xyxy", "=", "pred", "# xyxy pixels", "\n", "self", ".", "xywh", "=", "[", "xyxy2xywh", "(", "x", ")", "for", "x", "in", "pred", "]", "# xywh pixels", "\n", "self", ".", "xyxyn", "=", "[", "x", "/", "g", "for", "x", ",", "g", "in", "zip", "(", "self", ".", "xyxy", ",", "gn", ")", "]", "# xyxy normalized", "\n", "self", ".", "xywhn", "=", "[", "x", "/", "g", "for", "x", ",", "g", "in", "zip", "(", "self", ".", "xywh", ",", "gn", ")", "]", "# xywh normalized", "\n", "self", ".", "n", "=", "len", "(", "self", ".", "pred", ")", "# number of images (batch size)", "\n", "self", ".", "t", "=", "tuple", "(", "(", "times", "[", "i", "+", "1", "]", "-", "times", "[", "i", "]", ")", "*", "1000", "/", "self", ".", "n", "for", "i", "in", "range", "(", "3", ")", ")", "# timestamps (ms)", "\n", "self", ".", "s", "=", "shape", "# inference BCHW shape", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.display": [[500, 538], ["pathlib.Path", "enumerate", "zip", "pred[].unique", "isinstance", "PIL.Image.fromarray", "utils.general.LOGGER.info", "im.show", "im.save", "numpy.asarray", "utils.general.LOGGER.info", "len", "utils.plots.Annotator", "reversed", "im.astype", "s.rstrip", "utils.general.LOGGER.info", "str", "crops.append", "utils.plots.Annotator.box_label", "utils.general.colorstr", "int", "utils.plots.save_one_box", "utils.plots.colors", "int", "int"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.show", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.Annotator.box_label", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.colorstr", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.save_one_box"], ["", "def", "display", "(", "self", ",", "pprint", "=", "False", ",", "show", "=", "False", ",", "save", "=", "False", ",", "crop", "=", "False", ",", "render", "=", "False", ",", "save_dir", "=", "Path", "(", "''", ")", ")", ":", "\n", "        ", "crops", "=", "[", "]", "\n", "for", "i", ",", "(", "im", ",", "pred", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "imgs", ",", "self", ".", "pred", ")", ")", ":", "\n", "            ", "s", "=", "f'image {i + 1}/{len(self.pred)}: {im.shape[0]}x{im.shape[1]} '", "# string", "\n", "if", "pred", ".", "shape", "[", "0", "]", ":", "\n", "                ", "for", "c", "in", "pred", "[", ":", ",", "-", "1", "]", ".", "unique", "(", ")", ":", "\n", "                    ", "n", "=", "(", "pred", "[", ":", ",", "-", "1", "]", "==", "c", ")", ".", "sum", "(", ")", "# detections per class", "\n", "s", "+=", "f\"{n} {self.names[int(c)]}{'s' * (n > 1)}, \"", "# add to string", "\n", "", "if", "show", "or", "save", "or", "render", "or", "crop", ":", "\n", "                    ", "annotator", "=", "Annotator", "(", "im", ",", "example", "=", "str", "(", "self", ".", "names", ")", ")", "\n", "for", "*", "box", ",", "conf", ",", "cls", "in", "reversed", "(", "pred", ")", ":", "# xyxy, confidence, class", "\n", "                        ", "label", "=", "f'{self.names[int(cls)]} {conf:.2f}'", "\n", "if", "crop", ":", "\n", "                            ", "file", "=", "save_dir", "/", "'crops'", "/", "self", ".", "names", "[", "int", "(", "cls", ")", "]", "/", "self", ".", "files", "[", "i", "]", "if", "save", "else", "None", "\n", "crops", ".", "append", "(", "{", "'box'", ":", "box", ",", "'conf'", ":", "conf", ",", "'cls'", ":", "cls", ",", "'label'", ":", "label", ",", "\n", "'im'", ":", "save_one_box", "(", "box", ",", "im", ",", "file", "=", "file", ",", "save", "=", "save", ")", "}", ")", "\n", "", "else", ":", "# all others", "\n", "                            ", "annotator", ".", "box_label", "(", "box", ",", "label", ",", "color", "=", "colors", "(", "cls", ")", ")", "\n", "", "", "im", "=", "annotator", ".", "im", "\n", "", "", "else", ":", "\n", "                ", "s", "+=", "'(no detections)'", "\n", "\n", "", "im", "=", "Image", ".", "fromarray", "(", "im", ".", "astype", "(", "np", ".", "uint8", ")", ")", "if", "isinstance", "(", "im", ",", "np", ".", "ndarray", ")", "else", "im", "# from np", "\n", "if", "pprint", ":", "\n", "                ", "LOGGER", ".", "info", "(", "s", ".", "rstrip", "(", "', '", ")", ")", "\n", "", "if", "show", ":", "\n", "                ", "im", ".", "show", "(", "self", ".", "files", "[", "i", "]", ")", "# show", "\n", "", "if", "save", ":", "\n", "                ", "f", "=", "self", ".", "files", "[", "i", "]", "\n", "im", ".", "save", "(", "save_dir", "/", "f", ")", "# save", "\n", "if", "i", "==", "self", ".", "n", "-", "1", ":", "\n", "                    ", "LOGGER", ".", "info", "(", "f\"Saved {self.n} image{'s' * (self.n > 1)} to {colorstr('bold', save_dir)}\"", ")", "\n", "", "", "if", "render", ":", "\n", "                ", "self", ".", "imgs", "[", "i", "]", "=", "np", ".", "asarray", "(", "im", ")", "\n", "", "", "if", "crop", ":", "\n", "            ", "if", "save", ":", "\n", "                ", "LOGGER", ".", "info", "(", "f'Saved results to {save_dir}\\n'", ")", "\n", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print": [[539, 543], ["common.Detections.display", "utils.general.LOGGER.info", "tuple"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.display", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info"], ["", "", "def", "print", "(", "self", ")", ":", "\n", "        ", "self", ".", "display", "(", "pprint", "=", "True", ")", "# print results", "\n", "LOGGER", ".", "info", "(", "f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {tuple(self.s)}'", "%", "\n", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.show": [[544, 546], ["common.Detections.display"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.display"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "self", ".", "display", "(", "show", "=", "True", ")", "# show results", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.save": [[547, 550], ["utils.general.increment_path", "common.Detections.display"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.increment_path", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.display"], ["", "def", "save", "(", "self", ",", "save_dir", "=", "'runs/detect/exp'", ")", ":", "\n", "        ", "save_dir", "=", "increment_path", "(", "save_dir", ",", "exist_ok", "=", "save_dir", "!=", "'runs/detect/exp'", ",", "mkdir", "=", "True", ")", "# increment save_dir", "\n", "self", ".", "display", "(", "save", "=", "True", ",", "save_dir", "=", "save_dir", ")", "# save results", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.crop": [[551, 554], ["common.Detections.display", "utils.general.increment_path"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.display", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.increment_path"], ["", "def", "crop", "(", "self", ",", "save", "=", "True", ",", "save_dir", "=", "'runs/detect/exp'", ")", ":", "\n", "        ", "save_dir", "=", "increment_path", "(", "save_dir", ",", "exist_ok", "=", "save_dir", "!=", "'runs/detect/exp'", ",", "mkdir", "=", "True", ")", "if", "save", "else", "None", "\n", "return", "self", ".", "display", "(", "crop", "=", "True", ",", "save", "=", "save", ",", "save_dir", "=", "save_dir", ")", "# crop results", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.render": [[555, 558], ["common.Detections.display"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.display"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "self", ".", "display", "(", "render", "=", "True", ")", "# render results", "\n", "return", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.pandas": [[559, 568], ["copy.copy.copy", "zip", "setattr", "getattr", "pandas.DataFrame", "x.tolist", "int", "int"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist"], ["", "def", "pandas", "(", "self", ")", ":", "\n", "# return detections as pandas DataFrames, i.e. print(results.pandas().xyxy[0])", "\n", "        ", "new", "=", "copy", "(", "self", ")", "# return copy", "\n", "ca", "=", "'xmin'", ",", "'ymin'", ",", "'xmax'", ",", "'ymax'", ",", "'confidence'", ",", "'class'", ",", "'name'", "# xyxy columns", "\n", "cb", "=", "'xcenter'", ",", "'ycenter'", ",", "'width'", ",", "'height'", ",", "'confidence'", ",", "'class'", ",", "'name'", "# xywh columns", "\n", "for", "k", ",", "c", "in", "zip", "(", "[", "'xyxy'", ",", "'xyxyn'", ",", "'xywh'", ",", "'xywhn'", "]", ",", "[", "ca", ",", "ca", ",", "cb", ",", "cb", "]", ")", ":", "\n", "            ", "a", "=", "[", "[", "x", "[", ":", "5", "]", "+", "[", "int", "(", "x", "[", "5", "]", ")", ",", "self", ".", "names", "[", "int", "(", "x", "[", "5", "]", ")", "]", "]", "for", "x", "in", "x", ".", "tolist", "(", ")", "]", "for", "x", "in", "getattr", "(", "self", ",", "k", ")", "]", "# update", "\n", "setattr", "(", "new", ",", "k", ",", "[", "pd", ".", "DataFrame", "(", "x", ",", "columns", "=", "c", ")", "for", "x", "in", "a", "]", ")", "\n", "", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist": [[569, 576], ["common.Detections", "range", "setattr", "getattr"], "methods", ["None"], ["", "def", "tolist", "(", "self", ")", ":", "\n", "# return a list of Detections objects, i.e. 'for result in results.tolist():'", "\n", "        ", "x", "=", "[", "Detections", "(", "[", "self", ".", "imgs", "[", "i", "]", "]", ",", "[", "self", ".", "pred", "[", "i", "]", "]", ",", "self", ".", "names", ",", "self", ".", "s", ")", "for", "i", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "d", "in", "x", ":", "\n", "            ", "for", "k", "in", "[", "'imgs'", ",", "'pred'", ",", "'xyxy'", ",", "'xyxyn'", ",", "'xywh'", ",", "'xywhn'", "]", ":", "\n", "                ", "setattr", "(", "d", ",", "k", ",", "getattr", "(", "d", ",", "k", ")", "[", "0", "]", ")", "# pop out of list", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.__len__": [[577, 579], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Classify.__init__": [[583, 588], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Flatten", "torch.Flatten", "common.autopad"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.autopad"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "p", "=", "None", ",", "g", "=", "1", ")", ":", "# ch_in, ch_out, kernel, stride, padding, groups", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "# to x(b,c1,1,1)", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "c1", ",", "c2", ",", "k", ",", "s", ",", "autopad", "(", "k", ",", "p", ")", ",", "groups", "=", "g", ")", "# to x(b,c2,1,1)", "\n", "self", ".", "flat", "=", "nn", ".", "Flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Classify.forward": [[589, 592], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.Classify.flat", "common.Classify.conv", "common.Classify.aap", "isinstance"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "torch", ".", "cat", "(", "[", "self", ".", "aap", "(", "y", ")", "for", "y", "in", "(", "x", "if", "isinstance", "(", "x", ",", "list", ")", "else", "[", "x", "]", ")", "]", ",", "1", ")", "# cat if list", "\n", "return", "self", ".", "flat", "(", "self", ".", "conv", "(", "z", ")", ")", "# flatten to x(b,c2)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.models.common.autopad": [[29, 34], ["isinstance"], "function", ["None"], ["def", "autopad", "(", "k", ",", "p", "=", "None", ")", ":", "# kernel, padding", "\n", "# Pad to 'same'", "\n", "    ", "if", "p", "is", "None", ":", "\n", "        ", "p", "=", "k", "//", "2", "if", "isinstance", "(", "k", ",", "int", ")", "else", "[", "x", "//", "2", "for", "x", "in", "k", "]", "# auto-pad", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.CrossConv.__init__": [[17, 24], ["torch.Module.__init__", "int", "models.common.Conv", "models.common.Conv"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "3", ",", "s", "=", "1", ",", "g", "=", "1", ",", "e", "=", "1.0", ",", "shortcut", "=", "False", ")", ":", "\n", "# ch_in, ch_out, kernel, stride, groups, expansion, shortcut", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "(", "1", ",", "k", ")", ",", "(", "1", ",", "s", ")", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c_", ",", "c2", ",", "(", "k", ",", "1", ")", ",", "(", "s", ",", "1", ")", ",", "g", "=", "g", ")", "\n", "self", ".", "add", "=", "shortcut", "and", "c1", "==", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.CrossConv.forward": [[25, 27], ["experimental.CrossConv.cv2", "experimental.CrossConv.cv2", "experimental.CrossConv.cv1", "experimental.CrossConv.cv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "cv2", "(", "self", ".", "cv1", "(", "x", ")", ")", "if", "self", ".", "add", "else", "self", ".", "cv2", "(", "self", ".", "cv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.Sum.__init__": [[31, 37], ["torch.Module.__init__", "range", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "weight", "=", "False", ")", ":", "# n: number of inputs", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "# apply weights boolean", "\n", "self", ".", "iter", "=", "range", "(", "n", "-", "1", ")", "# iter object", "\n", "if", "weight", ":", "\n", "            ", "self", ".", "w", "=", "nn", ".", "Parameter", "(", "-", "torch", ".", "arange", "(", "1.0", ",", "n", ")", "/", "2", ",", "requires_grad", "=", "True", ")", "# layer weights", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.Sum.forward": [[38, 48], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "[", "0", "]", "# no weight", "\n", "if", "self", ".", "weight", ":", "\n", "            ", "w", "=", "torch", ".", "sigmoid", "(", "self", ".", "w", ")", "*", "2", "\n", "for", "i", "in", "self", ".", "iter", ":", "\n", "                ", "y", "=", "y", "+", "x", "[", "i", "+", "1", "]", "*", "w", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "self", ".", "iter", ":", "\n", "                ", "y", "=", "y", "+", "x", "[", "i", "+", "1", "]", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.MixConv2d.__init__": [[52, 70], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.SiLU", "torch.SiLU", "torch.linspace().floor", "torch.linspace().floor", "torch.linspace().floor", "torch.linspace().floor", "numpy.eye", "numpy.roll", "[].round", "numpy.array", "torch.Conv2d", "torch.Conv2d", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "range", "int", "zip", "numpy.linalg.lstsq", "math.gcd", "int"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "(", "1", ",", "3", ")", ",", "s", "=", "1", ",", "equal_ch", "=", "True", ")", ":", "# ch_in, ch_out, kernel, stride, ch_strategy", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "n", "=", "len", "(", "k", ")", "# number of convolutions", "\n", "if", "equal_ch", ":", "# equal c_ per group", "\n", "            ", "i", "=", "torch", ".", "linspace", "(", "0", ",", "n", "-", "1E-6", ",", "c2", ")", ".", "floor", "(", ")", "# c2 indices", "\n", "c_", "=", "[", "(", "i", "==", "g", ")", ".", "sum", "(", ")", "for", "g", "in", "range", "(", "n", ")", "]", "# intermediate channels", "\n", "", "else", ":", "# equal weight.numel() per group", "\n", "            ", "b", "=", "[", "c2", "]", "+", "[", "0", "]", "*", "n", "\n", "a", "=", "np", ".", "eye", "(", "n", "+", "1", ",", "n", ",", "k", "=", "-", "1", ")", "\n", "a", "-=", "np", ".", "roll", "(", "a", ",", "1", ",", "axis", "=", "1", ")", "\n", "a", "*=", "np", ".", "array", "(", "k", ")", "**", "2", "\n", "a", "[", "0", "]", "=", "1", "\n", "c_", "=", "np", ".", "linalg", ".", "lstsq", "(", "a", ",", "b", ",", "rcond", "=", "None", ")", "[", "0", "]", ".", "round", "(", ")", "# solve for equal weight indices, ax = b", "\n", "\n", "", "self", ".", "m", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Conv2d", "(", "c1", ",", "int", "(", "c_", ")", ",", "k", ",", "s", ",", "k", "//", "2", ",", "groups", "=", "math", ".", "gcd", "(", "c1", ",", "int", "(", "c_", ")", ")", ",", "bias", "=", "False", ")", "for", "k", ",", "c_", "in", "zip", "(", "k", ",", "c_", ")", "]", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "c2", ")", "\n", "self", ".", "act", "=", "nn", ".", "SiLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.MixConv2d.forward": [[71, 73], ["experimental.MixConv2d.act", "experimental.MixConv2d.bn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "m"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act", "(", "self", ".", "bn", "(", "torch", ".", "cat", "(", "[", "m", "(", "x", ")", "for", "m", "in", "self", ".", "m", "]", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.Ensemble.__init__": [[77, 79], ["torch.ModuleList.__init__"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.Ensemble.forward": [[80, 88], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "augment", "=", "False", ",", "profile", "=", "False", ",", "visualize", "=", "False", ")", ":", "\n", "        ", "y", "=", "[", "]", "\n", "for", "module", "in", "self", ":", "\n", "            ", "y", ".", "append", "(", "module", "(", "x", ",", "augment", ",", "profile", ",", "visualize", ")", "[", "0", "]", ")", "\n", "# y = torch.stack(y).max(0)[0]  # max ensemble", "\n", "# y = torch.stack(y).mean(0)  # mean ensemble", "\n", "", "y", "=", "torch", ".", "cat", "(", "y", ",", "1", ")", "# nms ensemble", "\n", "return", "y", ",", "None", "# inference, train output", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.experimental.attempt_load": [[90, 121], ["experimental.Ensemble", "Ensemble.modules", "isinstance", "torch.load", "torch.load", "len", "print", "utils.downloads.attempt_download", "Ensemble.append", "Ensemble.append", "type", "setattr", "ckpt[].float().fuse().eval", "ckpt[].float().eval", "type", "type", "set", "getattr", "isinstance", "delattr", "setattr", "torch.argmax().int", "torch.argmax().int", "ckpt[].float().fuse", "ckpt[].float", "torch.argmax", "torch.argmax", "ckpt[].float", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "m.stride.max", "torch.load.get", "torch.load.get"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.print", "home.repos.pwc.inspect_result.turoad_scaloss.utils.downloads.attempt_download", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.fuse"], ["", "", "def", "attempt_load", "(", "weights", ",", "map_location", "=", "None", ",", "inplace", "=", "True", ",", "fuse", "=", "True", ")", ":", "\n", "    ", "from", "models", ".", "yolo", "import", "Detect", ",", "Model", "\n", "\n", "# Loads an ensemble of models weights=[a,b,c] or a single model weights=[a] or weights=a", "\n", "model", "=", "Ensemble", "(", ")", "\n", "for", "w", "in", "weights", "if", "isinstance", "(", "weights", ",", "list", ")", "else", "[", "weights", "]", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "attempt_download", "(", "w", ")", ",", "map_location", "=", "map_location", ")", "# load", "\n", "if", "fuse", ":", "\n", "            ", "model", ".", "append", "(", "ckpt", "[", "'ema'", "if", "ckpt", ".", "get", "(", "'ema'", ")", "else", "'model'", "]", ".", "float", "(", ")", ".", "fuse", "(", ")", ".", "eval", "(", ")", ")", "# FP32 model", "\n", "", "else", ":", "\n", "            ", "model", ".", "append", "(", "ckpt", "[", "'ema'", "if", "ckpt", ".", "get", "(", "'ema'", ")", "else", "'model'", "]", ".", "float", "(", ")", ".", "eval", "(", ")", ")", "# without layer fuse", "\n", "\n", "# Compatibility updates", "\n", "", "", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "type", "(", "m", ")", "in", "[", "nn", ".", "Hardswish", ",", "nn", ".", "LeakyReLU", ",", "nn", ".", "ReLU", ",", "nn", ".", "ReLU6", ",", "nn", ".", "SiLU", ",", "Detect", ",", "Model", "]", ":", "\n", "            ", "m", ".", "inplace", "=", "inplace", "# pytorch 1.7.0 compatibility", "\n", "if", "type", "(", "m", ")", "is", "Detect", ":", "\n", "                ", "if", "not", "isinstance", "(", "m", ".", "anchor_grid", ",", "list", ")", ":", "# new Detect Layer compatibility", "\n", "                    ", "delattr", "(", "m", ",", "'anchor_grid'", ")", "\n", "setattr", "(", "m", ",", "'anchor_grid'", ",", "[", "torch", ".", "zeros", "(", "1", ")", "]", "*", "m", ".", "nl", ")", "\n", "", "", "", "elif", "type", "(", "m", ")", "is", "Conv", ":", "\n", "            ", "m", ".", "_non_persistent_buffers_set", "=", "set", "(", ")", "# pytorch 1.6.0 compatibility", "\n", "\n", "", "", "if", "len", "(", "model", ")", "==", "1", ":", "\n", "        ", "return", "model", "[", "-", "1", "]", "# return model", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Ensemble created with {weights}\\n'", ")", "\n", "for", "k", "in", "[", "'names'", "]", ":", "\n", "            ", "setattr", "(", "model", ",", "k", ",", "getattr", "(", "model", "[", "-", "1", "]", ",", "k", ")", ")", "\n", "", "model", ".", "stride", "=", "model", "[", "torch", ".", "argmax", "(", "torch", ".", "tensor", "(", "[", "m", ".", "stride", ".", "max", "(", ")", "for", "m", "in", "model", "]", ")", ")", ".", "int", "(", ")", "]", ".", "stride", "# max stride", "\n", "return", "model", "# return ensemble", "\n", "", "", ""]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Detect.__init__": [[38, 49], ["nn.Module.__init__", "len", "yolo.Detect.register_buffer", "nn.ModuleList", "len", "torch.tensor().float().view", "torch.zeros", "torch.zeros", "nn.Conv2d", "torch.tensor().float", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__"], ["def", "__init__", "(", "self", ",", "nc", "=", "80", ",", "anchors", "=", "(", ")", ",", "ch", "=", "(", ")", ",", "inplace", "=", "True", ")", ":", "# detection layer", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nc", "=", "nc", "# number of classes", "\n", "self", ".", "no", "=", "nc", "+", "5", "# number of outputs per anchor", "\n", "self", ".", "nl", "=", "len", "(", "anchors", ")", "# number of detection layers", "\n", "self", ".", "na", "=", "len", "(", "anchors", "[", "0", "]", ")", "//", "2", "# number of anchors", "\n", "self", ".", "grid", "=", "[", "torch", ".", "zeros", "(", "1", ")", "]", "*", "self", ".", "nl", "# init grid", "\n", "self", ".", "anchor_grid", "=", "[", "torch", ".", "zeros", "(", "1", ")", "]", "*", "self", ".", "nl", "# init anchor grid", "\n", "self", ".", "register_buffer", "(", "'anchors'", ",", "torch", ".", "tensor", "(", "anchors", ")", ".", "float", "(", ")", ".", "view", "(", "self", ".", "nl", ",", "-", "1", ",", "2", ")", ")", "# shape(nl,na,2)", "\n", "self", ".", "m", "=", "nn", ".", "ModuleList", "(", "nn", ".", "Conv2d", "(", "x", ",", "self", ".", "no", "*", "self", ".", "na", ",", "1", ")", "for", "x", "in", "ch", ")", "# output conv", "\n", "self", ".", "inplace", "=", "inplace", "# use in-place ops (e.g. slice assignment)", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Detect.forward": [[50, 72], ["range", "x[].view().permute().contiguous", "x[].sigmoid", "z.append", "torch.cat", "x[].view().permute", "yolo.Detect._make_grid", "torch.cat", "torch.cat.view", "x[].view"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Detect._make_grid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "[", "]", "# inference output", "\n", "for", "i", "in", "range", "(", "self", ".", "nl", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "m", "[", "i", "]", "(", "x", "[", "i", "]", ")", "# conv", "\n", "bs", ",", "_", ",", "ny", ",", "nx", "=", "x", "[", "i", "]", ".", "shape", "# x(bs,255,20,20) to x(bs,3,20,20,85)", "\n", "x", "[", "i", "]", "=", "x", "[", "i", "]", ".", "view", "(", "bs", ",", "self", ".", "na", ",", "self", ".", "no", ",", "ny", ",", "nx", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "# inference", "\n", "                ", "if", "self", ".", "onnx_dynamic", "or", "self", ".", "grid", "[", "i", "]", ".", "shape", "[", "2", ":", "4", "]", "!=", "x", "[", "i", "]", ".", "shape", "[", "2", ":", "4", "]", ":", "\n", "                    ", "self", ".", "grid", "[", "i", "]", ",", "self", ".", "anchor_grid", "[", "i", "]", "=", "self", ".", "_make_grid", "(", "nx", ",", "ny", ",", "i", ")", "\n", "\n", "", "y", "=", "x", "[", "i", "]", ".", "sigmoid", "(", ")", "\n", "if", "self", ".", "inplace", ":", "\n", "                    ", "y", "[", "...", ",", "0", ":", "2", "]", "=", "(", "y", "[", "...", ",", "0", ":", "2", "]", "*", "2", "-", "0.5", "+", "self", ".", "grid", "[", "i", "]", ")", "*", "self", ".", "stride", "[", "i", "]", "# xy", "\n", "y", "[", "...", ",", "2", ":", "4", "]", "=", "(", "y", "[", "...", ",", "2", ":", "4", "]", "*", "2", ")", "**", "2", "*", "self", ".", "anchor_grid", "[", "i", "]", "# wh", "\n", "", "else", ":", "# for  on AWS Inferentia https://github.com/ultralytics/yolov5/pull/2953", "\n", "                    ", "xy", "=", "(", "y", "[", "...", ",", "0", ":", "2", "]", "*", "2", "-", "0.5", "+", "self", ".", "grid", "[", "i", "]", ")", "*", "self", ".", "stride", "[", "i", "]", "# xy", "\n", "wh", "=", "(", "y", "[", "...", ",", "2", ":", "4", "]", "*", "2", ")", "**", "2", "*", "self", ".", "anchor_grid", "[", "i", "]", "# wh", "\n", "y", "=", "torch", ".", "cat", "(", "(", "xy", ",", "wh", ",", "y", "[", "...", ",", "4", ":", "]", ")", ",", "-", "1", ")", "\n", "", "z", ".", "append", "(", "y", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "no", ")", ")", "\n", "\n", "", "", "return", "x", "if", "self", ".", "training", "else", "(", "torch", ".", "cat", "(", "z", ",", "1", ")", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Detect._make_grid": [[73, 83], ["utils.general.check_version", "torch.stack().expand().float", "torch.meshgrid", "torch.meshgrid", "torch.stack().expand", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.stack", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "yolo.Detect.anchors[].clone"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.general.check_version"], ["", "def", "_make_grid", "(", "self", ",", "nx", "=", "20", ",", "ny", "=", "20", ",", "i", "=", "0", ")", ":", "\n", "        ", "d", "=", "self", ".", "anchors", "[", "i", "]", ".", "device", "\n", "if", "check_version", "(", "torch", ".", "__version__", ",", "'1.10.0'", ")", ":", "# torch>=1.10.0 meshgrid workaround for torch>=0.7 compatibility", "\n", "            ", "yv", ",", "xv", "=", "torch", ".", "meshgrid", "(", "[", "torch", ".", "arange", "(", "ny", ")", ".", "to", "(", "d", ")", ",", "torch", ".", "arange", "(", "nx", ")", ".", "to", "(", "d", ")", "]", ",", "indexing", "=", "'ij'", ")", "\n", "", "else", ":", "\n", "            ", "yv", ",", "xv", "=", "torch", ".", "meshgrid", "(", "[", "torch", ".", "arange", "(", "ny", ")", ".", "to", "(", "d", ")", ",", "torch", ".", "arange", "(", "nx", ")", ".", "to", "(", "d", ")", "]", ")", "\n", "", "grid", "=", "torch", ".", "stack", "(", "(", "xv", ",", "yv", ")", ",", "2", ")", ".", "expand", "(", "(", "1", ",", "self", ".", "na", ",", "ny", ",", "nx", ",", "2", ")", ")", ".", "float", "(", ")", "\n", "anchor_grid", "=", "(", "self", ".", "anchors", "[", "i", "]", ".", "clone", "(", ")", "*", "self", ".", "stride", "[", "i", "]", ")", ".", "view", "(", "(", "1", ",", "self", ".", "na", ",", "1", ",", "1", ",", "2", ")", ")", ".", "expand", "(", "(", "1", ",", "self", ".", "na", ",", "ny", ",", "nx", ",", "2", ")", ")", ".", "float", "(", ")", "\n", "return", "grid", ",", "anchor_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__": [[86, 123], ["nn.Module.__init__", "isinstance", "yolo.Model.yaml.get", "yolo.parse_model", "yolo.Model.yaml.get", "isinstance", "utils.torch_utils.initialize_weights", "yolo.Model.info", "utils.general.LOGGER.info", "utils.general.LOGGER.info", "utils.general.LOGGER.info", "round", "copy.deepcopy", "str", "torch.tensor", "m.stride.view", "utils.autoanchor.check_anchor_order", "yolo.Model._initialize_biases", "pathlib.Path", "open", "yaml.safe_load", "range", "yolo.Model.forward", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.parse_model", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.initialize_weights", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.autoanchor.check_anchor_order", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._initialize_biases", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.forward"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "'yolov3.yaml'", ",", "ch", "=", "3", ",", "nc", "=", "None", ",", "anchors", "=", "None", ")", ":", "# model, input channels, number of classes", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "cfg", ",", "dict", ")", ":", "\n", "            ", "self", ".", "yaml", "=", "cfg", "# model dict", "\n", "", "else", ":", "# is *.yaml", "\n", "            ", "import", "yaml", "# for torch hub", "\n", "self", ".", "yaml_file", "=", "Path", "(", "cfg", ")", ".", "name", "\n", "with", "open", "(", "cfg", ",", "encoding", "=", "'ascii'", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "                ", "self", ".", "yaml", "=", "yaml", ".", "safe_load", "(", "f", ")", "# model dict", "\n", "\n", "# Define model", "\n", "", "", "ch", "=", "self", ".", "yaml", "[", "'ch'", "]", "=", "self", ".", "yaml", ".", "get", "(", "'ch'", ",", "ch", ")", "# input channels", "\n", "if", "nc", "and", "nc", "!=", "self", ".", "yaml", "[", "'nc'", "]", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f\"Overriding model.yaml nc={self.yaml['nc']} with nc={nc}\"", ")", "\n", "self", ".", "yaml", "[", "'nc'", "]", "=", "nc", "# override yaml value", "\n", "", "if", "anchors", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f'Overriding model.yaml anchors with anchors={anchors}'", ")", "\n", "self", ".", "yaml", "[", "'anchors'", "]", "=", "round", "(", "anchors", ")", "# override yaml value", "\n", "", "self", ".", "model", ",", "self", ".", "save", "=", "parse_model", "(", "deepcopy", "(", "self", ".", "yaml", ")", ",", "ch", "=", "[", "ch", "]", ")", "# model, savelist", "\n", "self", ".", "names", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "yaml", "[", "'nc'", "]", ")", "]", "# default names", "\n", "self", ".", "inplace", "=", "self", ".", "yaml", ".", "get", "(", "'inplace'", ",", "True", ")", "\n", "\n", "# Build strides, anchors", "\n", "m", "=", "self", ".", "model", "[", "-", "1", "]", "# Detect()", "\n", "if", "isinstance", "(", "m", ",", "Detect", ")", ":", "\n", "            ", "s", "=", "256", "# 2x min stride", "\n", "m", ".", "inplace", "=", "self", ".", "inplace", "\n", "m", ".", "stride", "=", "torch", ".", "tensor", "(", "[", "s", "/", "x", ".", "shape", "[", "-", "2", "]", "for", "x", "in", "self", ".", "forward", "(", "torch", ".", "zeros", "(", "1", ",", "ch", ",", "s", ",", "s", ")", ")", "]", ")", "# forward", "\n", "m", ".", "anchors", "/=", "m", ".", "stride", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "check_anchor_order", "(", "m", ")", "\n", "self", ".", "stride", "=", "m", ".", "stride", "\n", "self", ".", "_initialize_biases", "(", ")", "# only run once", "\n", "\n", "# Init weights, biases", "\n", "", "initialize_weights", "(", "self", ")", "\n", "self", ".", "info", "(", ")", "\n", "LOGGER", ".", "info", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.forward": [[124, 128], ["yolo.Model._forward_once", "yolo.Model._forward_augment"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._forward_once", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._forward_augment"], ["", "def", "forward", "(", "self", ",", "x", ",", "augment", "=", "False", ",", "profile", "=", "False", ",", "visualize", "=", "False", ")", ":", "\n", "        ", "if", "augment", ":", "\n", "            ", "return", "self", ".", "_forward_augment", "(", "x", ")", "# augmented inference, None", "\n", "", "return", "self", ".", "_forward_once", "(", "x", ",", "profile", ",", "visualize", ")", "# single-scale inference, train", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._forward_augment": [[129, 142], ["zip", "yolo.Model._clip_augmented", "utils.torch_utils.scale_img", "yolo.Model._descale_pred", "yolo.Model.append", "torch.cat", "yolo.Model._forward_once", "x.flip", "int", "yolo.Model.stride.max"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._clip_augmented", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.scale_img", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._descale_pred", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._forward_once"], ["", "def", "_forward_augment", "(", "self", ",", "x", ")", ":", "\n", "        ", "img_size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "# height, width", "\n", "s", "=", "[", "1", ",", "0.83", ",", "0.67", "]", "# scales", "\n", "f", "=", "[", "None", ",", "3", ",", "None", "]", "# flips (2-ud, 3-lr)", "\n", "y", "=", "[", "]", "# outputs", "\n", "for", "si", ",", "fi", "in", "zip", "(", "s", ",", "f", ")", ":", "\n", "            ", "xi", "=", "scale_img", "(", "x", ".", "flip", "(", "fi", ")", "if", "fi", "else", "x", ",", "si", ",", "gs", "=", "int", "(", "self", ".", "stride", ".", "max", "(", ")", ")", ")", "\n", "yi", "=", "self", ".", "_forward_once", "(", "xi", ")", "[", "0", "]", "# forward", "\n", "# cv2.imwrite(f'img_{si}.jpg', 255 * xi[0].cpu().numpy().transpose((1, 2, 0))[:, :, ::-1])  # save", "\n", "yi", "=", "self", ".", "_descale_pred", "(", "yi", ",", "fi", ",", "si", ",", "img_size", ")", "\n", "y", ".", "append", "(", "yi", ")", "\n", "", "y", "=", "self", ".", "_clip_augmented", "(", "y", ")", "# clip augmented tails", "\n", "return", "torch", ".", "cat", "(", "y", ",", "1", ")", ",", "None", "# augmented inference, train", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._forward_once": [[143, 155], ["m", "y.append", "yolo.Model._profile_one_layer", "utils.plots.feature_visualization", "isinstance"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._profile_one_layer", "home.repos.pwc.inspect_result.turoad_scaloss.utils.plots.feature_visualization"], ["", "def", "_forward_once", "(", "self", ",", "x", ",", "profile", "=", "False", ",", "visualize", "=", "False", ")", ":", "\n", "        ", "y", ",", "dt", "=", "[", "]", ",", "[", "]", "# outputs", "\n", "for", "m", "in", "self", ".", "model", ":", "\n", "            ", "if", "m", ".", "f", "!=", "-", "1", ":", "# if not from previous layer", "\n", "                ", "x", "=", "y", "[", "m", ".", "f", "]", "if", "isinstance", "(", "m", ".", "f", ",", "int", ")", "else", "[", "x", "if", "j", "==", "-", "1", "else", "y", "[", "j", "]", "for", "j", "in", "m", ".", "f", "]", "# from earlier layers", "\n", "", "if", "profile", ":", "\n", "                ", "self", ".", "_profile_one_layer", "(", "m", ",", "x", ",", "dt", ")", "\n", "", "x", "=", "m", "(", "x", ")", "# run", "\n", "y", ".", "append", "(", "x", "if", "m", ".", "i", "in", "self", ".", "save", "else", "None", ")", "# save output", "\n", "if", "visualize", ":", "\n", "                ", "feature_visualization", "(", "x", ",", "m", ".", "type", ",", "m", ".", "i", ",", "save_dir", "=", "visualize", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._descale_pred": [[156, 172], ["torch.cat"], "methods", ["None"], ["", "def", "_descale_pred", "(", "self", ",", "p", ",", "flips", ",", "scale", ",", "img_size", ")", ":", "\n", "# de-scale predictions following augmented inference (inverse operation)", "\n", "        ", "if", "self", ".", "inplace", ":", "\n", "            ", "p", "[", "...", ",", ":", "4", "]", "/=", "scale", "# de-scale", "\n", "if", "flips", "==", "2", ":", "\n", "                ", "p", "[", "...", ",", "1", "]", "=", "img_size", "[", "0", "]", "-", "p", "[", "...", ",", "1", "]", "# de-flip ud", "\n", "", "elif", "flips", "==", "3", ":", "\n", "                ", "p", "[", "...", ",", "0", "]", "=", "img_size", "[", "1", "]", "-", "p", "[", "...", ",", "0", "]", "# de-flip lr", "\n", "", "", "else", ":", "\n", "            ", "x", ",", "y", ",", "wh", "=", "p", "[", "...", ",", "0", ":", "1", "]", "/", "scale", ",", "p", "[", "...", ",", "1", ":", "2", "]", "/", "scale", ",", "p", "[", "...", ",", "2", ":", "4", "]", "/", "scale", "# de-scale", "\n", "if", "flips", "==", "2", ":", "\n", "                ", "y", "=", "img_size", "[", "0", "]", "-", "y", "# de-flip ud", "\n", "", "elif", "flips", "==", "3", ":", "\n", "                ", "x", "=", "img_size", "[", "1", "]", "-", "x", "# de-flip lr", "\n", "", "p", "=", "torch", ".", "cat", "(", "(", "x", ",", "y", ",", "wh", ",", "p", "[", "...", ",", "4", ":", "]", ")", ",", "-", "1", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._clip_augmented": [[173, 183], ["sum", "sum", "sum", "range", "range", "range"], "methods", ["None"], ["", "def", "_clip_augmented", "(", "self", ",", "y", ")", ":", "\n", "# Clip  augmented inference tails", "\n", "        ", "nl", "=", "self", ".", "model", "[", "-", "1", "]", ".", "nl", "# number of detection layers (P3-P5)", "\n", "g", "=", "sum", "(", "4", "**", "x", "for", "x", "in", "range", "(", "nl", ")", ")", "# grid points", "\n", "e", "=", "1", "# exclude layer count", "\n", "i", "=", "(", "y", "[", "0", "]", ".", "shape", "[", "1", "]", "//", "g", ")", "*", "sum", "(", "4", "**", "x", "for", "x", "in", "range", "(", "e", ")", ")", "# indices", "\n", "y", "[", "0", "]", "=", "y", "[", "0", "]", "[", ":", ",", ":", "-", "i", "]", "# large", "\n", "i", "=", "(", "y", "[", "-", "1", "]", ".", "shape", "[", "1", "]", "//", "g", ")", "*", "sum", "(", "4", "**", "(", "nl", "-", "1", "-", "x", ")", "for", "x", "in", "range", "(", "e", ")", ")", "# indices", "\n", "y", "[", "-", "1", "]", "=", "y", "[", "-", "1", "]", "[", ":", ",", "i", ":", "]", "# small", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._profile_one_layer": [[184, 196], ["isinstance", "utils.torch_utils.time_sync", "range", "dt.append", "utils.general.LOGGER.info", "m", "utils.general.LOGGER.info", "utils.general.LOGGER.info", "x.copy", "utils.torch_utils.time_sync", "thop.profile", "sum", "x.copy"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.time_sync", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.profile"], ["", "def", "_profile_one_layer", "(", "self", ",", "m", ",", "x", ",", "dt", ")", ":", "\n", "        ", "c", "=", "isinstance", "(", "m", ",", "Detect", ")", "# is final layer, copy input as inplace fix", "\n", "o", "=", "thop", ".", "profile", "(", "m", ",", "inputs", "=", "(", "x", ".", "copy", "(", ")", "if", "c", "else", "x", ",", ")", ",", "verbose", "=", "False", ")", "[", "0", "]", "/", "1E9", "*", "2", "if", "thop", "else", "0", "# FLOPs", "\n", "t", "=", "time_sync", "(", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "m", "(", "x", ".", "copy", "(", ")", "if", "c", "else", "x", ")", "\n", "", "dt", ".", "append", "(", "(", "time_sync", "(", ")", "-", "t", ")", "*", "100", ")", "\n", "if", "m", "==", "self", ".", "model", "[", "0", "]", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f\"{'time (ms)':>10s} {'GFLOPs':>10s} {'params':>10s}  {'module'}\"", ")", "\n", "", "LOGGER", ".", "info", "(", "f'{dt[-1]:10.2f} {o:10.2f} {m.np:10.0f}  {m.type}'", ")", "\n", "if", "c", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f\"{sum(dt):10.2f} {'-':>10s} {'-':>10s}  Total\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._initialize_biases": [[197, 206], ["zip", "mi.bias.view", "math.log", "torch.nn.Parameter", "math.log", "torch.log", "mi.bias.view.view", "cf.sum"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.turoad_scaloss.wandb.wandb_utils.WandbLogger.log"], ["", "", "def", "_initialize_biases", "(", "self", ",", "cf", "=", "None", ")", ":", "# initialize biases into Detect(), cf is class frequency", "\n", "# https://arxiv.org/abs/1708.02002 section 3.3", "\n", "# cf = torch.bincount(torch.tensor(np.concatenate(dataset.labels, 0)[:, 0]).long(), minlength=nc) + 1.", "\n", "        ", "m", "=", "self", ".", "model", "[", "-", "1", "]", "# Detect() module", "\n", "for", "mi", ",", "s", "in", "zip", "(", "m", ".", "m", ",", "m", ".", "stride", ")", ":", "# from", "\n", "            ", "b", "=", "mi", ".", "bias", ".", "view", "(", "m", ".", "na", ",", "-", "1", ")", "# conv.bias(255) to (3,85)", "\n", "b", ".", "data", "[", ":", ",", "4", "]", "+=", "math", ".", "log", "(", "8", "/", "(", "640", "/", "s", ")", "**", "2", ")", "# obj (8 objects per 640 image)", "\n", "b", ".", "data", "[", ":", ",", "5", ":", "]", "+=", "math", ".", "log", "(", "0.6", "/", "(", "m", ".", "nc", "-", "0.999999", ")", ")", "if", "cf", "is", "None", "else", "torch", ".", "log", "(", "cf", "/", "cf", ".", "sum", "(", ")", ")", "# cls", "\n", "mi", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "b", ".", "view", "(", "-", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._print_biases": [[207, 213], ["utils.general.LOGGER.info", "mi.bias.detach().view", "mi.bias.detach", "b[].mean", "b[].mean().tolist", "b[].mean"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.common.Detections.tolist"], ["", "", "def", "_print_biases", "(", "self", ")", ":", "\n", "        ", "m", "=", "self", ".", "model", "[", "-", "1", "]", "# Detect() module", "\n", "for", "mi", "in", "m", ".", "m", ":", "# from", "\n", "            ", "b", "=", "mi", ".", "bias", ".", "detach", "(", ")", ".", "view", "(", "m", ".", "na", ",", "-", "1", ")", ".", "T", "# conv.bias(255) to (3,85)", "\n", "LOGGER", ".", "info", "(", "\n", "(", "'%6g Conv2d.bias:'", "+", "'%10.3g'", "*", "6", ")", "%", "(", "mi", ".", "weight", ".", "shape", "[", "1", "]", ",", "*", "b", "[", ":", "5", "]", ".", "mean", "(", "1", ")", ".", "tolist", "(", ")", ",", "b", "[", "5", ":", "]", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.fuse": [[219, 228], ["utils.general.LOGGER.info", "yolo.Model.model.modules", "yolo.Model.info", "isinstance", "hasattr", "utils.torch_utils.fuse_conv_and_bn", "delattr"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.fuse_conv_and_bn"], ["", "", "def", "fuse", "(", "self", ")", ":", "# fuse model Conv2d() + BatchNorm2d() layers", "\n", "        ", "LOGGER", ".", "info", "(", "'Fusing layers... '", ")", "\n", "for", "m", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "Conv", ",", "DWConv", ")", ")", "and", "hasattr", "(", "m", ",", "'bn'", ")", ":", "\n", "                ", "m", ".", "conv", "=", "fuse_conv_and_bn", "(", "m", ".", "conv", ",", "m", ".", "bn", ")", "# update conv", "\n", "delattr", "(", "m", ",", "'bn'", ")", "# remove batchnorm", "\n", "m", ".", "forward", "=", "m", ".", "forward_fuse", "# update forward", "\n", "", "", "self", ".", "info", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.autoshape": [[229, 234], ["utils.general.LOGGER.info", "AutoShape", "utils.torch_utils.copy_attr"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.copy_attr"], ["", "def", "autoshape", "(", "self", ")", ":", "# add AutoShape module", "\n", "        ", "LOGGER", ".", "info", "(", "'Adding AutoShape... '", ")", "\n", "m", "=", "AutoShape", "(", "self", ")", "# wrap model", "\n", "copy_attr", "(", "m", ",", "self", ",", "include", "=", "(", "'yaml'", ",", "'nc'", ",", "'hyp'", ",", "'names'", ",", "'stride'", ")", ",", "exclude", "=", "(", ")", ")", "# copy attributes", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info": [[235, 237], ["utils.torch_utils.model_info"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.utils.torch_utils.model_info"], ["", "def", "info", "(", "self", ",", "verbose", "=", "False", ",", "img_size", "=", "640", ")", ":", "# print model information", "\n", "        ", "model_info", "(", "self", ",", "verbose", ",", "img_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._apply": [[238, 248], ["super()._apply", "isinstance", "fn", "list", "isinstance", "map", "list", "map"], "methods", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model._apply"], ["", "def", "_apply", "(", "self", ",", "fn", ")", ":", "\n", "# Apply to(), cpu(), cuda(), half() to model tensors that are not parameters or registered buffers", "\n", "        ", "self", "=", "super", "(", ")", ".", "_apply", "(", "fn", ")", "\n", "m", "=", "self", ".", "model", "[", "-", "1", "]", "# Detect()", "\n", "if", "isinstance", "(", "m", ",", "Detect", ")", ":", "\n", "            ", "m", ".", "stride", "=", "fn", "(", "m", ".", "stride", ")", "\n", "m", ".", "grid", "=", "list", "(", "map", "(", "fn", ",", "m", ".", "grid", ")", ")", "\n", "if", "isinstance", "(", "m", ".", "anchor_grid", ",", "list", ")", ":", "\n", "                ", "m", ".", "anchor_grid", "=", "list", "(", "map", "(", "fn", ",", "m", ".", "anchor_grid", ")", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.parse_model": [[250, 302], ["utils.general.LOGGER.info", "enumerate", "isinstance", "enumerate", "[].replace", "sum", "utils.general.LOGGER.info", "save.extend", "layers.append", "ch.append", "nn.Sequential", "sorted", "len", "isinstance", "eval", "max", "nn.Sequential", "m", "round", "utils.general.make_divisible", "args.insert", "x.numel", "isinstance", "eval", "sum", "str", "m_.parameters", "str", "str", "args.append", "isinstance", "m", "isinstance", "range", "len", "list", "range"], "function", ["home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.models.yolo.Model.info", "home.repos.pwc.inspect_result.turoad_scaloss.utils.general.make_divisible"], ["", "", "def", "parse_model", "(", "d", ",", "ch", ")", ":", "# model_dict, input_channels(3)", "\n", "    ", "LOGGER", ".", "info", "(", "f\"\\n{'':>3}{'from':>18}{'n':>3}{'params':>10}  {'module':<40}{'arguments':<30}\"", ")", "\n", "anchors", ",", "nc", ",", "gd", ",", "gw", "=", "d", "[", "'anchors'", "]", ",", "d", "[", "'nc'", "]", ",", "d", "[", "'depth_multiple'", "]", ",", "d", "[", "'width_multiple'", "]", "\n", "na", "=", "(", "len", "(", "anchors", "[", "0", "]", ")", "//", "2", ")", "if", "isinstance", "(", "anchors", ",", "list", ")", "else", "anchors", "# number of anchors", "\n", "no", "=", "na", "*", "(", "nc", "+", "5", ")", "# number of outputs = anchors * (classes + 5)", "\n", "\n", "layers", ",", "save", ",", "c2", "=", "[", "]", ",", "[", "]", ",", "ch", "[", "-", "1", "]", "# layers, savelist, ch out", "\n", "for", "i", ",", "(", "f", ",", "n", ",", "m", ",", "args", ")", "in", "enumerate", "(", "d", "[", "'backbone'", "]", "+", "d", "[", "'head'", "]", ")", ":", "# from, number, module, args", "\n", "        ", "m", "=", "eval", "(", "m", ")", "if", "isinstance", "(", "m", ",", "str", ")", "else", "m", "# eval strings", "\n", "for", "j", ",", "a", "in", "enumerate", "(", "args", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "args", "[", "j", "]", "=", "eval", "(", "a", ")", "if", "isinstance", "(", "a", ",", "str", ")", "else", "a", "# eval strings", "\n", "", "except", "NameError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "n", "=", "n_", "=", "max", "(", "round", "(", "n", "*", "gd", ")", ",", "1", ")", "if", "n", ">", "1", "else", "n", "# depth gain", "\n", "if", "m", "in", "[", "Conv", ",", "GhostConv", ",", "Bottleneck", ",", "GhostBottleneck", ",", "SPP", ",", "SPPF", ",", "DWConv", ",", "MixConv2d", ",", "Focus", ",", "CrossConv", ",", "\n", "BottleneckCSP", ",", "C3", ",", "C3TR", ",", "C3SPP", ",", "C3Ghost", "]", ":", "\n", "            ", "c1", ",", "c2", "=", "ch", "[", "f", "]", ",", "args", "[", "0", "]", "\n", "if", "c2", "!=", "no", ":", "# if not output", "\n", "                ", "c2", "=", "make_divisible", "(", "c2", "*", "gw", ",", "8", ")", "\n", "\n", "", "args", "=", "[", "c1", ",", "c2", ",", "*", "args", "[", "1", ":", "]", "]", "\n", "if", "m", "in", "[", "BottleneckCSP", ",", "C3", ",", "C3TR", ",", "C3Ghost", "]", ":", "\n", "                ", "args", ".", "insert", "(", "2", ",", "n", ")", "# number of repeats", "\n", "n", "=", "1", "\n", "", "", "elif", "m", "is", "nn", ".", "BatchNorm2d", ":", "\n", "            ", "args", "=", "[", "ch", "[", "f", "]", "]", "\n", "", "elif", "m", "is", "Concat", ":", "\n", "            ", "c2", "=", "sum", "(", "ch", "[", "x", "]", "for", "x", "in", "f", ")", "\n", "", "elif", "m", "is", "Detect", ":", "\n", "            ", "args", ".", "append", "(", "[", "ch", "[", "x", "]", "for", "x", "in", "f", "]", ")", "\n", "if", "isinstance", "(", "args", "[", "1", "]", ",", "int", ")", ":", "# number of anchors", "\n", "                ", "args", "[", "1", "]", "=", "[", "list", "(", "range", "(", "args", "[", "1", "]", "*", "2", ")", ")", "]", "*", "len", "(", "f", ")", "\n", "", "", "elif", "m", "is", "Contract", ":", "\n", "            ", "c2", "=", "ch", "[", "f", "]", "*", "args", "[", "0", "]", "**", "2", "\n", "", "elif", "m", "is", "Expand", ":", "\n", "            ", "c2", "=", "ch", "[", "f", "]", "//", "args", "[", "0", "]", "**", "2", "\n", "", "else", ":", "\n", "            ", "c2", "=", "ch", "[", "f", "]", "\n", "\n", "", "m_", "=", "nn", ".", "Sequential", "(", "*", "(", "m", "(", "*", "args", ")", "for", "_", "in", "range", "(", "n", ")", ")", ")", "if", "n", ">", "1", "else", "m", "(", "*", "args", ")", "# module", "\n", "t", "=", "str", "(", "m", ")", "[", "8", ":", "-", "2", "]", ".", "replace", "(", "'__main__.'", ",", "''", ")", "# module type", "\n", "np", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "m_", ".", "parameters", "(", ")", ")", "# number params", "\n", "m_", ".", "i", ",", "m_", ".", "f", ",", "m_", ".", "type", ",", "m_", ".", "np", "=", "i", ",", "f", ",", "t", ",", "np", "# attach index, 'from' index, type, number params", "\n", "LOGGER", ".", "info", "(", "f'{i:>3}{str(f):>18}{n_:>3}{np:10.0f}  {t:<40}{str(args):<30}'", ")", "# print", "\n", "save", ".", "extend", "(", "x", "%", "i", "for", "x", "in", "(", "[", "f", "]", "if", "isinstance", "(", "f", ",", "int", ")", "else", "f", ")", "if", "x", "!=", "-", "1", ")", "# append to savelist", "\n", "layers", ".", "append", "(", "m_", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "ch", "=", "[", "]", "\n", "", "ch", ".", "append", "(", "c2", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", ",", "sorted", "(", "save", ")", "\n", "\n"]]}