{"home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.None.main.main": [[20, 259], ["torch.utils.tensorboard.SummaryWriter", "src.utils.write_flush", "torch.cuda.is_available", "torch.cuda.is_available", "src.models.Generator().to", "src.models.Discriminator().to", "src.models.Discriminator_Gauss().to", "src.utils.write_flush", "src.utils.write_flush", "src.utils.write_flush", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.randn().to", "torch.randn().to", "range", "torch.utils.tensorboard.SummaryWriter.close", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "str", "src.utils.write_flush", "src.utils.load_data", "src.utils.write_flush", "src.utils.data_generator", "src.utils.data_generator", "torchvision.transforms.Compose", "src.utils.CRCDataset", "src.utils.CRCDataset", "src.utils.write_flush", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "src.utils.infinite_data_loader", "src.utils.infinite_data_loader", "models.Generator().to.parameters", "models.Discriminator().to.parameters", "models.Discriminator_Gauss().to.parameters", "torch.load", "torch.load", "models.Generator().to.encoder.eval", "src.utils.write_flush", "range", "src.utils.write_flush", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "str", "os.path.join", "os.path.join", "len", "src.models.Generator", "src.models.Discriminator", "src.models.Discriminator_Gauss", "src.utils.count_params", "src.utils.count_params", "src.utils.count_params", "torch.randn", "torch.randn", "src.utils.scale_generator", "src.utils.scale_generator", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.randn().to", "torch.randn().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.optim.Adam.zero_grad", "models.Generator().to.", "g_loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "d_loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "models.Generator().to.encode", "d_gauss_loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "d_gauss_loss.backward", "torch.optim.Adam.step", "models.Generator().to.eval", "next", "src.utils.scale_generator", "models.Generator().to.", "src.utils.create_mosaique", "skimage.io.imsave", "torch.utils.tensorboard.SummaryWriter.add_image", "src.utils.create_mosaique", "torch.utils.tensorboard.SummaryWriter.add_image", "src.utils.create_mosaique", "skimage.io.imsave", "torch.utils.tensorboard.SummaryWriter.add_image", "models.Generator().to.decode", "src.utils.create_mosaique", "skimage.io.imsave", "torch.utils.tensorboard.SummaryWriter.add_image", "models.Generator().to.train", "torch.save", "torch.save", "g_loss.item", "d_loss.item", "d_gauss_loss.item", "torch.cuda.device_count", "torch.cuda.device_count", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "min", "data[].to", "data[].to", "data[].to", "data[].to", "torch.MSELoss", "models.Discriminator().to.", "max", "torch.MSELoss", "models.Discriminator().to.", "torch.MSELoss", "models.Discriminator().to.", "torch.MSELoss", "models.Discriminator_Gauss().to.", "torch.MSELoss", "models.Discriminator_Gauss().to.", "torch.MSELoss", "models.Discriminator_Gauss().to.", "data[].to", "gen_imgs.detach().cpu", "numpy.moveaxis", "numpy.moveaxis", "numpy.moveaxis", "generator.decode.detach().cpu", "numpy.moveaxis", "next", "next", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.nn.L1Loss", "torch.nn.L1Loss", "gen_imgs.detach", "generator.encode.detach", "d_loss.item", "d_gauss_loss.item", "g_loss.item", "gen_imgs.detach", "generator.decode.detach"], "function", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.load_data", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.data_generator", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.data_generator", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.infinite_data_loader", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.infinite_data_loader", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.count_params", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.count_params", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.count_params", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.scale_generator", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.scale_generator", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.encode", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.scale_generator", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.create_mosaique", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.create_mosaique", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.create_mosaique", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.decode", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.create_mosaique"], ["def", "main", "(", "args", ",", "config", ")", ":", "\n", "\n", "    ", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "config", ".", "tensorboard_dir", ",", "'./pathgan/%s'", "%", "args", ".", "job_number", ")", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "write_flush", "(", "str", "(", "device", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "write_flush", "(", "'Available devices: %d'", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "\n", "", "if", "'CAMELYON'", "in", "config", ".", "data_dir", ":", "\n", "\n", "        ", "x_train", ",", "y_train", ",", "x_valid", ",", "y_valid", ",", "x_test", ",", "y_test", "=", "utils", ".", "load_data", "(", "config", ".", "data_dir", ")", "\n", "write_flush", "(", "str", "(", "x_train", ".", "shape", ")", ")", "\n", "\n", "train_loader", "=", "utils", ".", "data_generator", "(", "x_train", ",", "y_train", ",", "config", ".", "nb_batch", ")", "\n", "''' \n        validation set comprises separate patient batch with differing tissue types,\n        using train data for monitoring outputs give slightly nicer visualisations\n        '''", "\n", "#val_loader = utils.data_generator(x_valid, y_valid, 32)", "\n", "val_loader", "=", "utils", ".", "data_generator", "(", "x_train", ",", "y_train", ",", "32", ")", "\n", "\n", "", "else", ":", "# CRC", "\n", "\n", "        ", "T", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomVerticalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "train_ds", "=", "utils", ".", "CRCDataset", "(", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "'NCT-CRC-HE-100K'", ")", ",", "T", ")", "\n", "val_ds", "=", "utils", ".", "CRCDataset", "(", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "'CRC-VAL-HE-7K'", ")", ",", "T", ")", "\n", "\n", "write_flush", "(", "len", "(", "train_ds", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_ds", ",", "batch_size", "=", "16", ",", "drop_last", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "16", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "val_ds", ",", "batch_size", "=", "32", ",", "drop_last", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "16", ")", "\n", "\n", "train_loader", "=", "utils", ".", "infinite_data_loader", "(", "train_loader", ")", "\n", "val_loader", "=", "utils", ".", "infinite_data_loader", "(", "val_loader", ")", "\n", "\n", "# -------------------", "\n", "#  Initialise models", "\n", "# -------------------", "\n", "", "backbone", "=", "True", "\n", "generator", "=", "models", ".", "Generator", "(", "64", ",", "config", ".", "x_dim", ",", "config", ".", "z_dim", ",", "backbone", "=", "backbone", ")", ".", "to", "(", "device", ")", "\n", "\n", "discriminator", "=", "models", ".", "Discriminator", "(", "64", ")", ".", "to", "(", "device", ")", "\n", "discriminator_gauss", "=", "models", ".", "Discriminator_Gauss", "(", "config", ".", "z_dim", ")", ".", "to", "(", "device", ")", "\n", "\n", "write_flush", "(", "'#params gen. %d'", "%", "utils", ".", "count_params", "(", "generator", ")", ")", "\n", "write_flush", "(", "'#params disc. %d'", "%", "utils", ".", "count_params", "(", "discriminator", ")", ")", "\n", "write_flush", "(", "'#params disc gauss. %d'", "%", "utils", ".", "count_params", "(", "discriminator_gauss", ")", ")", "\n", "\n", "optimiser_G", "=", "Adam", "(", "generator", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0", ",", "0.999", ")", ")", "\n", "optimiser_D", "=", "Adam", "(", "discriminator", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0", ",", "0.999", ")", ")", "\n", "optimiser_D_gauss", "=", "Adam", "(", "discriminator_gauss", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0", ",", "0.999", ")", ")", "\n", "\n", "init_epoch", "=", "1", "\n", "total_iterations", "=", "config", ".", "total_iterations", "# iteration over which to progress", "\n", "iteration", "=", "0", "\n", "step", "=", "1", "# lowest resolution", "\n", "max_steps", "=", "5", "\n", "iterations_per_step", "=", "total_iterations", "//", "max_steps", "\n", "alpha", "=", "0", "\n", "init_size", "=", "14", "\n", "\n", "nb_epochs", "=", "1250", "\n", "steps_per_epoch", "=", "total_iterations", "//", "nb_epochs", "\n", "\n", "z_sample", "=", "torch", ".", "randn", "(", "(", "32", ",", "config", ".", "z_dim", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "config", ".", "ckpt", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", ".", "ckpt", ")", "\n", "generator", "=", "checkpoint", "[", "'generator'", "]", "\n", "discriminator", "=", "checkpoint", "[", "'discriminator'", "]", "\n", "discriminator_gauss", "=", "checkpoint", "[", "'discriminator_gauss'", "]", "\n", "optimiser_G", "=", "checkpoint", "[", "'optimiser_G'", "]", "\n", "optimiser_D", "=", "checkpoint", "[", "'optimiser_D'", "]", "\n", "optimiser_D_gauss", "=", "checkpoint", "[", "'optimiser_D_gauss'", "]", "\n", "init_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "# start of next epoch", "\n", "iteration", "=", "checkpoint", "[", "'iteration'", "]", "\n", "step", "=", "checkpoint", "[", "'step'", "]", "\n", "z_sample", "=", "checkpoint", "[", "'z_sample'", "]", "\n", "\n", "", "if", "backbone", "and", "init_epoch", "==", "1", ":", "\n", "        ", "generator", ".", "encoder", ".", "eval", "(", ")", "\n", "write_flush", "(", "'Encoder frozen for initial epoch'", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "init_epoch", ",", "nb_epochs", "+", "1", ")", ":", "\n", "\n", "        ", "for", "batch_i", "in", "range", "(", "steps_per_epoch", ")", ":", "\n", "\n", "            ", "if", "iteration", "==", "iterations_per_step", "and", "not", "step", "==", "max_steps", ":", "\n", "                ", "iteration", "=", "0", "# reset counter", "\n", "alpha", "=", "0", "\n", "step", "+=", "1", "\n", "", "else", ":", "\n", "                ", "alpha", "=", "min", "(", "1", ",", "2", "/", "iterations_per_step", "*", "iteration", ")", "\n", "\n", "", "iteration", "+=", "1", "\n", "\n", "data", "=", "utils", ".", "scale_generator", "(", "*", "next", "(", "train_loader", ")", ",", "init_size", "*", "2", "**", "(", "step", "-", "1", ")", ",", "alpha", ",", "config", ".", "x_dim", ")", "\n", "fake_inputs", ",", "fake_targets", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "data", "=", "utils", ".", "scale_generator", "(", "*", "next", "(", "train_loader", ")", ",", "init_size", "*", "2", "**", "(", "step", "-", "1", ")", ",", "alpha", ",", "config", ".", "x_dim", ")", "\n", "_", ",", "real_targets", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "disc_patch", "=", "(", "1", ",", "4", ",", "4", ")", "\n", "fake", "=", "torch", ".", "zeros", "(", "(", "config", ".", "nb_batch", ",", ")", "+", "disc_patch", ")", ".", "to", "(", "device", ")", "\n", "valid", "=", "torch", ".", "ones", "(", "(", "config", ".", "nb_batch", ",", ")", "+", "disc_patch", ")", ".", "to", "(", "device", ")", "\n", "\n", "real_noise", "=", "torch", ".", "randn", "(", "config", ".", "nb_batch", ",", "config", ".", "z_dim", ")", ".", "to", "(", "device", ")", "\n", "fake_gauss", "=", "torch", ".", "zeros", "(", "(", "config", ".", "nb_batch", ")", ")", ".", "to", "(", "device", ")", "\n", "real_gauss", "=", "torch", ".", "ones", "(", "(", "config", ".", "nb_batch", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "# -----------------", "\n", "#  Train Generator", "\n", "# -----------------", "\n", "\n", "optimiser_G", ".", "zero_grad", "(", ")", "\n", "\n", "_", ",", "gen_imgs", "=", "generator", "(", "fake_inputs", ",", "step", ",", "alpha", ")", "\n", "\n", "if", "config", ".", "masked", ":", "\n", "                ", "top", ",", "left", "=", "2", "*", "[", "gen_imgs", ".", "shape", "[", "2", "]", "//", "4", "]", "\n", "bottom", ",", "right", "=", "2", "*", "[", "gen_imgs", ".", "shape", "[", "2", "]", "-", "(", "gen_imgs", ".", "shape", "[", "2", "]", "//", "2", "-", "gen_imgs", ".", "shape", "[", "2", "]", "//", "4", ")", "]", "\n", "\n", "reg_loss", "=", "L1Loss", "(", ")", "(", "gen_imgs", "[", ":", ",", ":", ",", "top", ":", "bottom", ",", "left", ":", "right", "]", ",", "fake_targets", "[", ":", ",", ":", ",", "top", ":", "bottom", ",", "left", ":", "right", "]", ")", "\n", "\n", "", "else", ":", "\n", "                ", "reg_loss", "=", "L1Loss", "(", ")", "(", "gen_imgs", ",", "fake_targets", ")", "\n", "\n", "", "d_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "discriminator", "(", "gen_imgs", ",", "step", ",", "alpha", ")", ",", "valid", ")", "\n", "\n", "t", "=", "(", "epoch", "-", "1", ")", "*", "steps_per_epoch", "+", "batch_i", "\n", "reg_weight", "=", "config", ".", "lambda_l1", "*", "max", "(", "0.5", ",", "(", "1", "-", "(", "0.5", "*", "t", "/", "total_iterations", ")", ")", ")", "\n", "\n", "g_loss", "=", "d_loss", "+", "reg_weight", "*", "reg_loss", "\n", "\n", "g_loss", ".", "backward", "(", ")", "\n", "optimiser_G", ".", "step", "(", ")", "\n", "\n", "# ---------------------", "\n", "#  Train Discriminator", "\n", "# ---------------------", "\n", "\n", "optimiser_D", ".", "zero_grad", "(", ")", "\n", "\n", "real_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "discriminator", "(", "real_targets", ",", "step", ",", "alpha", ")", ",", "valid", ")", "\n", "fake_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "discriminator", "(", "gen_imgs", ".", "detach", "(", ")", ",", "step", ",", "alpha", ")", ",", "fake", ")", "\n", "\n", "d_loss", "=", "0.5", "*", "(", "real_loss", "+", "fake_loss", ")", "\n", "\n", "d_loss", ".", "backward", "(", ")", "\n", "optimiser_D", ".", "step", "(", ")", "\n", "\n", "# ----------------------------------", "\n", "#  Train Generator - Regularisation", "\n", "# ----------------------------------", "\n", "\n", "optimiser_G", ".", "zero_grad", "(", ")", "\n", "\n", "gen_noise", "=", "generator", ".", "encode", "(", "fake_inputs", ")", "\n", "\n", "d_gauss_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "discriminator_gauss", "(", "gen_noise", ")", ",", "real_gauss", ")", "\n", "\n", "d_gauss_loss", ".", "backward", "(", ")", "\n", "optimiser_G", ".", "step", "(", ")", "\n", "\n", "# --------------------------------------", "\n", "#  Train Discriminator - Regularisation", "\n", "# --------------------------------------", "\n", "\n", "optimiser_D_gauss", ".", "zero_grad", "(", ")", "\n", "\n", "real_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "discriminator_gauss", "(", "real_noise", ")", ",", "real_gauss", ")", "\n", "fake_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "discriminator_gauss", "(", "gen_noise", ".", "detach", "(", ")", ")", ",", "fake_gauss", ")", "\n", "d_gauss_loss", "=", "0.5", "*", "(", "real_loss", "+", "fake_loss", ")", "\n", "\n", "d_gauss_loss", ".", "backward", "(", ")", "\n", "optimiser_D_gauss", ".", "step", "(", ")", "\n", "\n", "", "if", "epoch", "%", "5", "==", "1", ":", "\n", "\n", "            ", "generator", ".", "eval", "(", ")", "\n", "x_batch", ",", "y_batch", "=", "next", "(", "val_loader", ")", "\n", "\n", "data", "=", "utils", ".", "scale_generator", "(", "x_batch", ",", "y_batch", ",", "init_size", "*", "2", "**", "(", "step", "-", "1", ")", ",", "alpha", ",", "config", ".", "x_dim", ")", "\n", "_", ",", "gen_imgs", "=", "generator", "(", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "step", ",", "alpha", ")", "\n", "\n", "mosaique", "=", "utils", ".", "create_mosaique", "(", "gen_imgs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "nrows", "=", "4", ",", "ncols", "=", "8", ")", "\n", "imsave", "(", "'%s/generated_%04d.png'", "%", "(", "config", ".", "outputs_dir", ",", "epoch", ")", ",", "mosaique", ")", "\n", "writer", ".", "add_image", "(", "'generated'", ",", "np", ".", "moveaxis", "(", "mosaique", ",", "2", ",", "0", ")", ",", "epoch", ")", "\n", "\n", "mosaique", "=", "utils", ".", "create_mosaique", "(", "data", "[", "0", "]", ",", "nrows", "=", "4", ",", "ncols", "=", "8", ")", "\n", "writer", ".", "add_image", "(", "'inputs'", ",", "np", ".", "moveaxis", "(", "mosaique", ",", "2", ",", "0", ")", ",", "epoch", ")", "\n", "\n", "mosaique", "=", "utils", ".", "create_mosaique", "(", "data", "[", "1", "]", ",", "nrows", "=", "4", ",", "ncols", "=", "8", ")", "\n", "imsave", "(", "'%s/original_%04d.png'", "%", "(", "config", ".", "outputs_dir", ",", "epoch", ")", ",", "mosaique", ")", "\n", "writer", ".", "add_image", "(", "'targets'", ",", "np", ".", "moveaxis", "(", "mosaique", ",", "2", ",", "0", ")", ",", "epoch", ")", "\n", "\n", "samples", "=", "generator", ".", "decode", "(", "z_sample", ",", "step", ",", "alpha", ")", "\n", "mosaique", "=", "utils", ".", "create_mosaique", "(", "samples", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "nrows", "=", "4", ",", "ncols", "=", "8", ")", "\n", "imsave", "(", "'%s/samples_%04d.png'", "%", "(", "config", ".", "outputs_dir", ",", "epoch", ")", ",", "mosaique", ")", "\n", "writer", ".", "add_image", "(", "'samples'", ",", "np", ".", "moveaxis", "(", "mosaique", ",", "2", ",", "0", ")", ",", "epoch", ")", "\n", "\n", "generator", ".", "train", "(", ")", "\n", "\n", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "\n", "            ", "checkpoint", "=", "{", "'generator'", ":", "generator", ",", "\n", "'discriminator'", ":", "discriminator", ",", "\n", "'discriminator_gauss'", ":", "discriminator_gauss", ",", "\n", "'optimiser_G'", ":", "optimiser_G", ",", "\n", "'optimiser_D'", ":", "optimiser_D", ",", "\n", "'optimiser_D_gauss'", ":", "optimiser_D_gauss", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'iteration'", ":", "iteration", ",", "\n", "'step'", ":", "step", ",", "\n", "'z_sample'", ":", "z_sample", "}", "\n", "\n", "torch", ".", "save", "(", "checkpoint", ",", "'%s/%04d.ckpt'", "%", "(", "config", ".", "outputs_dir", ",", "epoch", ")", ")", "\n", "\n", "", "write_flush", "(", "'[Epoch %d/%d] [Batch %d/%d] [DP loss: %.02f] [DG loss %.02f] [G loss: %.02f] [Res: %d] [A: %.02f] [Reg: %.02f]'", "\n", "%", "(", "epoch", ",", "nb_epochs", ",", "batch_i", ",", "steps_per_epoch", ",", "d_loss", ".", "item", "(", ")", ",", "d_gauss_loss", ".", "item", "(", ")", ",", "g_loss", ".", "item", "(", ")", ",", "init_size", "*", "2", "**", "(", "step", "-", "1", ")", ",", "alpha", ",", "reg_weight", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'G loss'", ",", "g_loss", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'DP loss'", ",", "d_loss", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'DG loss'", ",", "d_gauss_loss", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Alpha'", ",", "alpha", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Reg weight'", ",", "reg_weight", ",", "epoch", ")", "\n", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.PixelNorm.__init__": [[12, 14], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PixelNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.PixelNorm.forward": [[15, 17], ["torch.sqrt", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "/", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.EqualConv2d.__init__": [[26, 38], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "models.EqualConv2d.conv.weight.data.normal_", "models.EqualConv2d.conv.bias.data.zero_", "math.sqrt", "models.EqualConv2d.conv.weight.data.size", "[].numel"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EqualConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# initialise weights", "\n", "self", ".", "conv", ".", "weight", ".", "data", ".", "normal_", "(", ")", "\n", "self", ".", "conv", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# compute learning rate multiplier", "\n", "fan_in", "=", "self", ".", "conv", ".", "weight", ".", "data", ".", "size", "(", "1", ")", "*", "self", ".", "conv", ".", "weight", ".", "data", "[", "0", "]", "[", "0", "]", ".", "numel", "(", ")", "\n", "self", ".", "lr_mul", "=", "sqrt", "(", "2", "/", "fan_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.EqualConv2d.forward": [[39, 42], ["models.EqualConv2d.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "lr_mul", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.ConvBlock.__init__": [[46, 62], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "models.EqualConv2d", "models.PixelNorm", "torch.nn.LeakyReLU", "models.EqualConv2d", "models.PixelNorm", "torch.nn.LeakyReLU", "models.EqualConv2d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "norm", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "norm", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "EqualConv2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "PixelNorm", "(", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", ",", "\n", "EqualConv2d", "(", "out_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "PixelNorm", "(", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "EqualConv2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.ConvBlock.forward": [[63, 66], ["models.ConvBlock.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Upsample.__init__": [[69, 71], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Upsample.forward": [[72, 74], ["torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Downsample.__init__": [[77, 81], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "0.5", ",", "size", "=", "None", ")", ":", "\n", "        ", "super", "(", "Downsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Downsample.forward": [[82, 84], ["torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "'bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.ResnetFeatures.__init__": [[88, 117], ["torch.nn.Module.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "models.ResnetFeatures.register_buffer", "models.ResnetFeatures.register_buffer", "torch.nn.Sequential", "layer.parameters", "torch.tensor().view", "torch.tensor().view", "models.EqualConv2d", "models.PixelNorm", "torch.nn.LeakyReLU", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bottleneck_filters", ")", ":", "\n", "\n", "        ", "super", "(", "ResnetFeatures", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resnet", "=", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "\n", "resnet", ".", "bn1", ",", "\n", "resnet", ".", "relu", ",", "\n", "resnet", ".", "maxpool", ",", "\n", "resnet", ".", "layer1", ",", "\n", "resnet", ".", "layer2", ",", "\n", "resnet", ".", "layer3", ",", "\n", "resnet", ".", "layer4", ")", "\n", "\n", "for", "layer", "in", "self", ".", "features", "[", ":", "-", "1", "]", ":", "# freeze initial layers", "\n", "            ", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "register_buffer", "(", "'means'", ",", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "'stds'", ",", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "#self.conv = ConvBlock(512, bottleneck_filters, norm=True)", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "EqualConv2d", "(", "512", ",", "bottleneck_filters", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "PixelNorm", "(", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.ResnetFeatures.forward": [[118, 127], ["models.ResnetFeatures.features", "models.ResnetFeatures.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "(", "x", "+", "1", ")", "/", "2", "# [0, 1]", "\n", "x", "=", "(", "x", "-", "self", ".", "means", ")", "/", "self", ".", "stds", "# normalise as per imagenet inputs", "\n", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.__init__": [[131, 170], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ModuleList", "models.ResnetFeatures", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.LeakyReLU", "models.Upsample", "models.ConvBlock", "models.Upsample", "models.ConvBlock", "models.Upsample", "models.ConvBlock", "models.Upsample", "models.ConvBlock", "models.Upsample", "models.ConvBlock", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.Downsample", "models.EqualConv2d", "models.EqualConv2d", "models.EqualConv2d", "models.EqualConv2d", "models.EqualConv2d", "models.EqualConv2d"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_filters", ",", "x_dim", ",", "z_dim", ",", "backbone", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nb_filters", "=", "nb_filters", "\n", "self", ".", "bottleneck_res", "=", "4", "\n", "self", ".", "bottleneck_filters", "=", "256", "\n", "\n", "if", "backbone", ":", "\n", "\n", "            ", "self", ".", "encoder", "=", "ResnetFeatures", "(", "self", ".", "bottleneck_filters", ")", "\n", "\n", "", "else", ":", "# no backbone - symmetric encoder", "\n", "\n", "            ", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "3", ",", "2", "*", "nb_filters", ",", "norm", "=", "True", ")", ",", "Downsample", "(", ")", ",", "\n", "ConvBlock", "(", "2", "*", "nb_filters", ",", "4", "*", "nb_filters", ",", "norm", "=", "True", ")", ",", "Downsample", "(", ")", ",", "\n", "ConvBlock", "(", "4", "*", "nb_filters", ",", "8", "*", "nb_filters", ",", "norm", "=", "True", ")", ",", "Downsample", "(", ")", ",", "\n", "ConvBlock", "(", "8", "*", "nb_filters", ",", "8", "*", "nb_filters", ",", "norm", "=", "True", ")", ",", "Downsample", "(", ")", ",", "\n", "ConvBlock", "(", "8", "*", "nb_filters", ",", "4", "*", "nb_filters", ",", "norm", "=", "True", ")", ",", "Downsample", "(", "scale_factor", "=", "None", ",", "size", "=", "4", ")", ")", "\n", "\n", "", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "self", ".", "bottleneck_res", "**", "2", "*", "self", ".", "bottleneck_filters", ",", "z_dim", ")", "\n", "self", ".", "deproj", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "z_dim", ",", "nb_filters", "*", "7", "*", "7", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "Upsample", "(", ")", ",", "ConvBlock", "(", "1", "*", "nb_filters", ",", "8", "*", "nb_filters", ",", "norm", "=", "True", ")", ",", "\n", "Upsample", "(", ")", ",", "ConvBlock", "(", "8", "*", "nb_filters", ",", "8", "*", "nb_filters", ",", "norm", "=", "True", ")", ",", "\n", "Upsample", "(", ")", ",", "ConvBlock", "(", "8", "*", "nb_filters", ",", "4", "*", "nb_filters", ",", "norm", "=", "True", ")", ",", "\n", "Upsample", "(", ")", ",", "ConvBlock", "(", "4", "*", "nb_filters", ",", "2", "*", "nb_filters", ",", "norm", "=", "True", ")", ",", "\n", "Upsample", "(", ")", ",", "ConvBlock", "(", "2", "*", "nb_filters", ",", "1", "*", "nb_filters", ",", "norm", "=", "True", ")", ")", "\n", "\n", "self", ".", "to_rgb", "=", "nn", ".", "ModuleList", "(", "[", "\n", "EqualConv2d", "(", "1", "*", "nb_filters", ",", "3", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "8", "*", "nb_filters", ",", "3", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "8", "*", "nb_filters", ",", "3", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "4", "*", "nb_filters", ",", "3", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "2", "*", "nb_filters", ",", "3", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "1", "*", "nb_filters", ",", "3", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.fade_out": [[171, 177], ["rgb_1", "rgb_2", "layer"], "methods", ["None"], ["", "def", "fade_out", "(", "self", ",", "outputs", ",", "layer", ",", "rgb_1", ",", "rgb_2", ",", "alpha", ")", ":", "\n", "\n", "        ", "skip_rgb", "=", "rgb_1", "(", "outputs", ")", "\n", "outputs", "=", "rgb_2", "(", "layer", "(", "outputs", ")", ")", "\n", "\n", "return", "(", "1", "-", "alpha", ")", "*", "skip_rgb", "+", "alpha", "*", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.encode": [[178, 185], ["models.Generator.encoder", "x.view.view.view", "models.Generator.proj"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "bottleneck_res", "**", "2", "*", "self", ".", "bottleneck_filters", ")", "\n", "z", "=", "self", ".", "proj", "(", "x", ")", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.decode": [[186, 198], ["models.Generator.deproj", "models.Generator.view", "models.Generator.fade_out", "torch.nn.Tanh", "int"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.fade_out"], ["", "def", "decode", "(", "self", ",", "z", ",", "step", ",", "alpha", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "deproj", "(", "z", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "nb_filters", ",", "7", ",", "7", ")", "\n", "\n", "idx", "=", "2", "*", "int", "(", "step", ")", "-", "1", "\n", "x", "=", "self", ".", "decoder", "[", ":", "idx", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "fade_out", "(", "x", ",", "self", ".", "decoder", "[", "idx", "]", ",", "self", ".", "to_rgb", "[", "step", "-", "1", "]", ",", "self", ".", "to_rgb", "[", "step", "]", ",", "alpha", ")", "\n", "\n", "x", "=", "nn", ".", "Tanh", "(", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.forward": [[199, 205], ["models.Generator.encode", "models.Generator.decode"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.encode", "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Generator.decode"], ["", "def", "forward", "(", "self", ",", "x", ",", "step", ",", "alpha", ")", ":", "\n", "\n", "        ", "z", "=", "self", ".", "encode", "(", "x", ")", "\n", "x", "=", "self", ".", "decode", "(", "z", ",", "step", ",", "alpha", ")", "\n", "\n", "return", "z", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Discriminator.__init__": [[209, 231], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Sequential", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.Downsample", "models.ConvBlock", "models.EqualConv2d", "models.EqualConv2d", "models.EqualConv2d", "models.EqualConv2d", "models.EqualConv2d", "models.EqualConv2d"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_filters", "=", "64", ")", ":", "\n", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "max_steps", "=", "5", "\n", "\n", "self", ".", "from_rgb", "=", "nn", ".", "ModuleList", "(", "[", "\n", "EqualConv2d", "(", "3", ",", "8", "*", "nb_filters", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "3", ",", "8", "*", "nb_filters", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "3", ",", "8", "*", "nb_filters", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "3", ",", "4", "*", "nb_filters", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "3", ",", "2", "*", "nb_filters", ",", "1", ")", ",", "\n", "EqualConv2d", "(", "3", ",", "1", "*", "nb_filters", ",", "1", ")", "]", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "1", "*", "nb_filters", ",", "2", "*", "nb_filters", ",", "norm", "=", "False", ")", ",", "Downsample", "(", ")", ",", "\n", "ConvBlock", "(", "2", "*", "nb_filters", ",", "4", "*", "nb_filters", ",", "norm", "=", "False", ")", ",", "Downsample", "(", ")", ",", "\n", "ConvBlock", "(", "4", "*", "nb_filters", ",", "8", "*", "nb_filters", ",", "norm", "=", "False", ")", ",", "Downsample", "(", ")", ",", "\n", "ConvBlock", "(", "8", "*", "nb_filters", ",", "8", "*", "nb_filters", ",", "norm", "=", "False", ")", ",", "Downsample", "(", ")", ",", "\n", "ConvBlock", "(", "8", "*", "nb_filters", ",", "8", "*", "nb_filters", ",", "norm", "=", "False", ")", ",", "Downsample", "(", ")", ",", "\n", "ConvBlock", "(", "8", "*", "nb_filters", ",", "8", "*", "nb_filters", ",", "norm", "=", "False", ")", ",", "Downsample", "(", "scale_factor", "=", "None", ",", "size", "=", "4", ")", ",", "\n", "ConvBlock", "(", "8", "*", "nb_filters", ",", "1", ",", "norm", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Discriminator.fade_in": [[232, 237], ["rgb_1", "models.Downsample", "layer", "models.Downsample", "rgb_2"], "methods", ["None"], ["", "def", "fade_in", "(", "self", ",", "inputs", ",", "layer", ",", "rgb_1", ",", "rgb_2", ",", "alpha", ")", ":", "\n", "\n", "        ", "skip_rgb", "=", "rgb_1", "(", "Downsample", "(", ")", "(", "inputs", ")", ")", "\n", "inputs", "=", "Downsample", "(", ")", "(", "layer", "(", "rgb_2", "(", "inputs", ")", ")", ")", "\n", "return", "(", "1", "-", "alpha", ")", "*", "skip_rgb", "+", "alpha", "*", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Discriminator.forward": [[238, 246], ["models.Discriminator.fade_in"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.fade_in"], ["", "def", "forward", "(", "self", ",", "x", ",", "step", ",", "alpha", ")", ":", "\n", "\n", "        ", "idx", "=", "2", "*", "(", "self", ".", "max_steps", "-", "step", ")", "\n", "\n", "x", "=", "self", ".", "fade_in", "(", "x", ",", "self", ".", "encoder", "[", "idx", "]", ",", "self", ".", "from_rgb", "[", "step", "-", "1", "]", ",", "self", ".", "from_rgb", "[", "step", "]", ",", "alpha", ")", "\n", "x", "=", "self", ".", "encoder", "[", "idx", "+", "2", ":", "]", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Discriminator_Gauss.__init__": [[250, 261], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ")", ":", "\n", "\n", "        ", "super", "(", "Discriminator_Gauss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "validity", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "z_dim", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.models.Discriminator_Gauss.forward": [[262, 264], ["models.Discriminator_Gauss.validity().squeeze", "models.Discriminator_Gauss.validity"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "validity", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__init__": [[82, 99], ["os.listdir", "os.path.join", "os.listdir", "utils.CRCDataset.files.extend", "utils.CRCDataset.classes.extend", "os.path.join", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "transform", "=", "None", ",", "crop_size", "=", "112", ")", ":", "\n", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "categories", "=", "os", ".", "listdir", "(", "self", ".", "root_dir", ")", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "classes", "=", "[", "]", "\n", "\n", "for", "category", "in", "categories", ":", "\n", "            ", "cat_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "category", ")", "\n", "file_names", "=", "os", ".", "listdir", "(", "cat_path", ")", "\n", "self", ".", "files", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "cat_path", ",", "file_name", ")", "\n", "for", "file_name", "in", "file_names", "]", ")", "\n", "self", ".", "classes", ".", "extend", "(", "len", "(", "file_names", ")", "*", "[", "category", "]", ")", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__len__": [[100, 102], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.CRCDataset.__getitem__": [[103, 114], ["PIL.Image.open", "utils.CRCDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "file_path", "=", "self", ".", "files", "[", "idx", "]", "\n", "image_class", "=", "self", ".", "classes", "[", "idx", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "file_path", ")", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "return", "image", ",", "image_class", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.write_flush": [[19, 23], ["stream.write", "stream.flush", "map"], "function", ["None"], ["def", "write_flush", "(", "*", "text_args", ",", "stream", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "stream", ".", "write", "(", "', '", ".", "join", "(", "map", "(", "str", ",", "text_args", ")", ")", "+", "'\\n'", ")", "\n", "stream", ".", "flush", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.count_params": [[25, 30], ["net.parameters", "functools.reduce"], "function", ["None"], ["", "def", "count_params", "(", "net", ")", ":", "\n", "    ", "nb_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "nb_params", "+=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "param", ".", "shape", ")", "\n", "", "return", "nb_params", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.load_data": [[35, 52], ["h5py.File", "h5py.File", "[].squeeze", "h5py.File", "h5py.File", "[].squeeze", "h5py.File", "h5py.File", "[].squeeze", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "load_data", "(", "root_dir", ")", ":", "\n", "    ", "data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'./camelyonpatch_level_2_split_train_x.h5'", ")", ",", "'r'", ")", "\n", "x_train", "=", "data", "[", "'x'", "]", "[", "(", ")", "]", "\n", "data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'./camelyonpatch_level_2_split_train_y.h5'", ")", ",", "'r'", ")", "\n", "y_train", "=", "data", "[", "'y'", "]", "[", "(", ")", "]", ".", "squeeze", "(", ")", "\n", "\n", "data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'./camelyonpatch_level_2_split_valid_x.h5'", ")", ",", "'r'", ")", "\n", "x_valid", "=", "data", "[", "'x'", "]", "[", "(", ")", "]", "\n", "data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'./camelyonpatch_level_2_split_valid_y.h5'", ")", ",", "'r'", ")", "\n", "y_valid", "=", "data", "[", "'y'", "]", "[", "(", ")", "]", ".", "squeeze", "(", ")", "\n", "\n", "data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'./camelyonpatch_level_2_split_test_x.h5'", ")", ",", "'r'", ")", "\n", "x_test", "=", "data", "[", "'x'", "]", "[", "(", ")", "]", "\n", "data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'./camelyonpatch_level_2_split_test_y.h5'", ")", ",", "'r'", ")", "\n", "y_test", "=", "data", "[", "'y'", "]", "[", "(", ")", "]", ".", "squeeze", "(", ")", "\n", "\n", "return", "x_train", ",", "y_train", ",", "x_valid", ",", "y_valid", ",", "x_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.data_generator": [[53, 70], ["torch.arange", "torch.arange", "torch.Tensor().long", "torch.Tensor().long", "numpy.moveaxis().copy", "torch.Tensor", "torch.Tensor", "torch.randint", "torch.randint", "sorted", "sorted", "torch.Tensor", "torch.Tensor", "numpy.moveaxis", "torch.Tensor().long.squeeze"], "function", ["None"], ["", "def", "data_generator", "(", "x_data", ",", "y_data", ",", "nb_batch", "=", "32", ")", ":", "\n", "\n", "    ", "while", "True", ":", "\n", "\n", "# Pytorch randint trick (1000x faster than torch.randperm):", "\n", "        ", "x", "=", "torch", ".", "arange", "(", "x_data", ".", "shape", "[", "0", "]", ")", "\n", "idx", "=", "x", "[", "torch", ".", "randint", "(", "0", ",", "x", ".", "shape", "[", "0", "]", ",", "(", "nb_batch", ",", ")", ")", "]", "\n", "\n", "x_batch", "=", "x_data", "[", "sorted", "(", "idx", ")", "]", "\n", "y_batch", "=", "y_data", "[", "sorted", "(", "idx", ")", "]", "\n", "y_batch", "=", "torch", ".", "Tensor", "(", "y_batch", ".", "squeeze", "(", ")", ")", ".", "long", "(", ")", "\n", "# normalise", "\n", "x_batch", "=", "np", ".", "moveaxis", "(", "x_batch", ",", "3", ",", "1", ")", ".", "copy", "(", ")", "\n", "x_batch", "=", "torch", ".", "Tensor", "(", "x_batch", ")", "\n", "x_batch", "=", "x_batch", "/", "127.5", "-", "1", "# range [-1, 1]", "\n", "# data augment", "\n", "yield", "x_batch", ",", "y_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.infinite_data_loader": [[75, 79], ["None"], "function", ["None"], ["", "", "def", "infinite_data_loader", "(", "data_loader", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "x_batch", ",", "y_batch", "in", "data_loader", ":", "\n", "            ", "yield", "x_batch", ",", "y_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.fade_in": [[115, 124], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "function", ["None"], ["", "", "def", "fade_in", "(", "x", ",", "size", ",", "alpha", ")", ":", "\n", "    ", "x_high", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "x_low", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", "//", "2", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "x_low", "=", "F", ".", "interpolate", "(", "x_low", ",", "size", "=", "size", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "return", "alpha", "*", "x_high", "+", "(", "1", "-", "alpha", ")", "*", "x_low", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.scale_generator": [[125, 138], ["torch.interpolate", "utils.fade_in"], "function", ["home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.fade_in"], ["", "def", "scale_generator", "(", "x_batch", ",", "y_batch", ",", "size", ",", "alpha", ",", "x_dim", ",", "rescale_size", "=", "224", ")", ":", "\n", "\n", "    ", "x_batch", "=", "F", ".", "interpolate", "(", "x_batch", ",", "size", "=", "rescale_size", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "margin", "=", "(", "rescale_size", "-", "x_dim", ")", "//", "2", "\n", "x_crop", "=", "x_batch", "[", ":", ",", ":", ",", "margin", ":", "rescale_size", "-", "margin", ",", "margin", ":", "rescale_size", "-", "margin", "]", "\n", "\n", "## Hack for autoencoder:", "\n", "#x_target = fade_in(x_batch[:, :, margin:rescale_size-margin, margin:rescale_size-margin], size, alpha)", "\n", "x_target", "=", "fade_in", "(", "x_batch", ",", "size", ",", "alpha", ")", "# alpha = 1 => no fade", "\n", "\n", "return", "x_crop", ",", "x_target", ",", "y_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.create_mosaique": [[143, 154], ["x_batch.permute().squeeze.permute().squeeze", "torch.empty", "torch.empty", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_batch.permute().squeeze.permute", "list"], "function", ["None"], ["", "def", "create_mosaique", "(", "x_batch", ",", "nrows", ",", "ncols", ")", ":", "\n", "\n", "    ", "x_batch", "=", "x_batch", ".", "permute", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "mosaique", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "nrows", ")", ":", "\n", "        ", "row", "=", "torch", ".", "cat", "(", "list", "(", "x_batch", "[", "i", "*", "ncols", ":", "(", "i", "+", "1", ")", "*", "ncols", "]", ")", ",", "axis", "=", "1", ")", "\n", "mosaique", "=", "torch", ".", "cat", "(", "[", "mosaique", ",", "row", "]", ")", "\n", "\n", "", "return", "(", "127.5", "*", "(", "mosaique", "+", "1", ")", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcboyd_cdpath21-gan.src.utils.plot_tiles": [[155, 198], ["emb.copy", "numpy.min", "numpy.max", "numpy.ones", "range", "range", "len", "imgs[].permute", "skimage.transform.resize", "numpy.arange"], "function", ["None"], ["", "def", "plot_tiles", "(", "imgs", ",", "emb", ",", "grid_units", "=", "50", ",", "pad", "=", "1", ")", ":", "\n", "\n", "# roughly 1000 x 1000 canvas", "\n", "    ", "cell_width", "=", "1000", "//", "grid_units", "\n", "s", "=", "grid_units", "*", "cell_width", "\n", "\n", "nb_imgs", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "\n", "embedding", "=", "emb", ".", "copy", "(", ")", "\n", "\n", "# rescale axes to make things easier", "\n", "min_x", ",", "min_y", "=", "np", ".", "min", "(", "embedding", ",", "axis", "=", "0", ")", "\n", "max_x", ",", "max_y", "=", "np", ".", "max", "(", "embedding", ",", "axis", "=", "0", ")", "\n", "\n", "embedding", "[", ":", ",", "0", "]", "=", "s", "*", "(", "embedding", "[", ":", ",", "0", "]", "-", "min_x", ")", "/", "(", "max_x", "-", "min_x", ")", "\n", "embedding", "[", ":", ",", "1", "]", "=", "s", "*", "(", "embedding", "[", ":", ",", "1", "]", "-", "min_y", ")", "/", "(", "max_y", "-", "min_y", ")", "\n", "\n", "canvas", "=", "np", ".", "ones", "(", "(", "s", ",", "s", ",", "3", ")", ")", "\n", "\n", "img_idx_dict", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "grid_units", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "grid_units", ")", ":", "\n", "\n", "            ", "idx_x", "=", "(", "j", "*", "cell_width", "<=", "embedding", "[", ":", ",", "1", "]", ")", "&", "(", "embedding", "[", ":", ",", "1", "]", "<", "(", "j", "+", "1", ")", "*", "cell_width", ")", "\n", "idx_y", "=", "(", "i", "*", "cell_width", "<=", "embedding", "[", ":", ",", "0", "]", ")", "&", "(", "embedding", "[", ":", ",", "0", "]", "<", "(", "i", "+", "1", ")", "*", "cell_width", ")", "\n", "\n", "points", "=", "embedding", "[", "idx_y", "&", "idx_x", "]", "\n", "\n", "if", "len", "(", "points", ")", ">", "0", ":", "\n", "\n", "                ", "img_idx", "=", "np", ".", "arange", "(", "nb_imgs", ")", "[", "idx_y", "&", "idx_x", "]", "[", "0", "]", "# take first available img in bin", "\n", "tile", "=", "imgs", "[", "img_idx", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "resized_tile", "=", "resize", "(", "tile", ",", "output_shape", "=", "(", "cell_width", "-", "2", "*", "pad", ",", "cell_width", "-", "2", "*", "pad", ",", "3", ")", ")", "\n", "\n", "y", "=", "j", "*", "cell_width", "\n", "x", "=", "i", "*", "cell_width", "\n", "\n", "canvas", "[", "s", "-", "y", "-", "cell_width", "+", "pad", ":", "s", "-", "y", "-", "pad", ",", "x", "+", "pad", ":", "x", "+", "cell_width", "-", "pad", "]", "=", "resized_tile", "\n", "img_idx_dict", "[", "img_idx", "]", "=", "(", "x", ",", "x", "+", "cell_width", ",", "s", "-", "y", "-", "cell_width", ",", "s", "-", "y", ")", "\n", "\n", "", "", "", "return", "canvas", ",", "img_idx_dict", "\n", "", ""]]}