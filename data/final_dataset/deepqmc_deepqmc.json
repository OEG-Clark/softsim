{"home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.fit.LossEnergy.forward": [[47, 51], ["len"], "methods", ["None"], ["def", "forward", "(", "self", ",", "Es_loc", ",", "log_psis", ",", "ws", ")", ":", "\n", "        ", "assert", "Es_loc", ".", "grad_fn", "is", "None", "\n", "self", ".", "weights", "=", "2", "*", "(", "Es_loc", "-", "(", "ws", "*", "Es_loc", ")", ".", "mean", "(", ")", ")", "/", "len", "(", "Es_loc", ")", "\n", "return", "(", "self", ".", "weights", "*", "ws", "*", "log_psis", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.fit.log_clipped_outliers": [[53, 62], ["torch.where.detach", "torch.where.median", "torch.where", "torch.where.abs().mean", "torch.where.abs", "torch.where.abs", "torch.where.sign", "torch.log", "torch.where.abs"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean"], ["", "", "def", "log_clipped_outliers", "(", "x", ",", "q", ")", ":", "\n", "    ", "x", "=", "x", ".", "detach", "(", ")", "\n", "median", "=", "x", ".", "median", "(", ")", "\n", "x", "=", "x", "-", "median", "\n", "a", "=", "q", "*", "x", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "x", "=", "torch", ".", "where", "(", "\n", "x", ".", "abs", "(", ")", "<=", "a", ",", "x", ",", "x", ".", "sign", "(", ")", "*", "a", "*", "(", "1", "+", "torch", ".", "log", "(", "(", "1", "+", "(", "x", ".", "abs", "(", ")", "/", "a", ")", "**", "2", ")", "/", "2", ")", ")", "\n", ")", "\n", "return", "median", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.fit.fit_wf": [[64, 200], ["log.debug", "zip", "wf.zero_grad", "len", "torch.utils.data.DataLoader", "torch.isnan().any", "any", "loss_func.sum", "torchext.weighted_mean_var", "torch.sqrt", "opt.step", "torch.utils.data.TensorDataset", "physics.local_energy", "loss_func", "loss_func.backward", "subbatches.append", "torch.cat", "errors.NanError", "errors.NanError", "torch.nn.utils.clip_grad_norm_", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torchext.weighted_mean_var", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cat", "writer.add_scalar", "wf.tracked_parameters", "writer.add_scalar", "writer.add_scalar", "Es_loc.where.cpu().numpy", "Es_loc_loss.cpu().numpy", "log_psis.cpu().numpy", "sign_psis.cpu().numpy", "log_ws.cpu().numpy", "log_ws.isneginf", "mask.all", "log.warning", "Es_loc.where.where", "fit.log_clipped_outliers", "torchext.exp_normalize_mean", "len", "zip", "torch.isnan", "torch.isnan().any", "wf.parameters", "len", "Es_loc.where.min", "Es_loc.where.max", "torch.cat.norm", "writer.add_scalar", "len", "uncertainties.ufloat", "log_psis.detach", "Es_loc.where.new_tensor", "loss_func.detach().view", "Es_loc.where.detach", "Es_loc_loss.detach", "log_psis.detach", "sign_psis.detach", "wf.parameters", "opt.state_dict", "log_ws.var", "p.grad.flatten", "Es_loc.where.cpu", "Es_loc_loss.cpu", "log_psis.cpu", "sign_psis.cpu", "log_ws.cpu", "E_loc_mean.item", "torch.sqrt.item", "torch.isnan", "wf.parameters", "loss_func.detach"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.Debuggable.debug", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.weighted_mean_var", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.step", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.local_energy", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetDoubleBackward.backward", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.weighted_mean_var", "home.repos.pwc.inspect_result.deepqmc_deepqmc.wf.base.WaveFunction.tracked_parameters", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.fit.log_clipped_outliers", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.exp_normalize_mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.state_dict", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.var"], ["", "def", "fit_wf", "(", "# noqa: C901", "\n", "wf", ",", "\n", "loss_func", ",", "\n", "opt", ",", "\n", "sampler", ",", "\n", "steps", ",", "\n", "writer", "=", "None", ",", "\n", "log_dict", "=", "None", ",", "\n", "require_energy_gradient", "=", "False", ",", "\n", "require_psi_gradient", "=", "True", ",", "\n", "subbatch_size", "=", "None", ",", "\n", "*", ",", "\n", "clip_outliers", "=", "True", ",", "\n", "q", "=", "5", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Fit a wave function using the variational principle and gradient descent.\n\n    This is a low-level interface, see :func:`~deepqmc.train` for a high-level\n    interface. This iterator iteratively draws samples from the sampler, evaluates\n    the local energy, processes outliers, calculates the loss function, and updates\n    the wave function model parameters using a gradient of the loss and an\n    optimizer. Diagnostics is written into the Tensorboard writer, and finally\n    at the end of each iteration the step index is yielded, so that the caller\n    can do some additional processing such as learning rate scheduling.\n\n    Args:\n        wf (:class:`~deepqmc.wf.WaveFunction`): wave function model to be fitted\n        loss_func (:class:`WaveFunctionLoss`): loss function that accepts local\n            energy and wave function values\n        opt (:class:`torch.optim.Optimizer`): optimizer\n        sampler (iterator): yields batches of electron coordinate samples\n        steps (iterator): yields step indexes\n        writer (:class:`torch.utils.tensorboard.writer.SummaryWriter`):\n            Tensorboard writer\n        log_dict (dict-like): batch data will be stored in this dictionary if given\n        require_energy_gradient (bool): whether the loss function requires\n            gradients of the local energy\n        require_psi_gradient (bool): whether the loss function requires\n            gradients of the wave function\n        subbatch_size (int): number of samples for a single vectorized loss evaluation.\n            If None and on a GPU, subbatch_size is estimated, else if None and on a CPU,\n            no subbatching is done.\n        max_memory (float): maximum amount of allocated GPU memory (MiB) to be\n            considered if automatically estimating the subbatch_size. If :data:`None`\n            and subbatch_size is estimated, the maximum memory is set to the total\n            free GPU memory. When training on CPU always set to :data:`None`.\n        clip_outliers (bool): whether to clip local energy outliers\n        q (float): multiple of MAE defining outliers\n        max_grad_norm (float): maximum gradient norm passed to\n            :func:`torch.nn.utils.clip_grad_norm_`\n    \"\"\"", "\n", "log", ".", "debug", "(", "'Entering training loop'", ")", "\n", "for", "step", ",", "(", "rs", ",", "log_psi0s", ",", "_", ",", "log_ws", ")", "in", "zip", "(", "steps", ",", "sampler", ")", ":", "\n", "        ", "rs_batch", "=", "rs", "\n", "wf", ".", "zero_grad", "(", ")", "\n", "batch_size", "=", "len", "(", "rs", ")", "\n", "subbatch_size", "=", "subbatch_size", "or", "batch_size", "\n", "subbatches", "=", "[", "]", "\n", "for", "rs", ",", "log_psi0s", ",", "log_ws", "in", "DataLoader", "(", "# noqa: B020", "\n", "TensorDataset", "(", "rs", ",", "log_psi0s", ",", "log_ws", ")", ",", "batch_size", "=", "subbatch_size", "\n", ")", ":", "\n", "            ", "Es_loc", ",", "log_psis", ",", "sign_psis", "=", "local_energy", "(", "\n", "rs", ",", "\n", "wf", ",", "\n", "create_graph", "=", "require_energy_gradient", ",", "\n", "keep_graph", "=", "require_psi_gradient", ",", "\n", ")", "\n", "# weights maintained by the sampler take into account all", "\n", "# wavefunction density ratios apart from the last one;", "\n", "# we add that final ratio here", "\n", "log_ws", "+=", "2", "*", "log_psis", ".", "detach", "(", ")", "-", "2", "*", "log_psi0s", "\n", "# mask out samples with zero weight to increase code stability", "\n", "mask", "=", "~", "log_ws", ".", "isneginf", "(", ")", "\n", "if", "not", "mask", ".", "all", "(", ")", ":", "\n", "                ", "log", ".", "warning", "(", "'Masking local energies where psi = 0'", ")", "\n", "Es_loc", "=", "Es_loc", ".", "where", "(", "mask", ",", "Es_loc", ".", "new_tensor", "(", "0", ")", ")", "\n", "", "Es_loc_loss", "=", "log_clipped_outliers", "(", "Es_loc", ",", "q", ")", "if", "clip_outliers", "else", "Es_loc", "\n", "loss", "=", "loss_func", "(", "Es_loc_loss", ",", "log_psis", ",", "exp_normalize_mean", "(", "log_ws", ")", ")", "\n", "# The convention is that `loss_func` returns an *average* loss over", "\n", "# all the inputs. We scale it so that it works with subbatching.", "\n", "loss", "*=", "len", "(", "rs", ")", "/", "batch_size", "\n", "loss", ".", "backward", "(", ")", "\n", "subbatches", ".", "append", "(", "\n", "(", "\n", "loss", ".", "detach", "(", ")", ".", "view", "(", "1", ")", ",", "\n", "Es_loc", ".", "detach", "(", ")", ",", "\n", "Es_loc_loss", ".", "detach", "(", ")", ",", "\n", "log_psis", ".", "detach", "(", ")", ",", "\n", "sign_psis", ".", "detach", "(", ")", ",", "\n", "log_ws", ",", "\n", ")", "\n", ")", "\n", "", "loss", ",", "Es_loc", ",", "Es_loc_loss", ",", "log_psis", ",", "sign_psis", ",", "log_ws", "=", "(", "\n", "torch", ".", "cat", "(", "xs", ")", "for", "xs", "in", "zip", "(", "*", "subbatches", ")", "\n", ")", "\n", "if", "torch", ".", "isnan", "(", "loss", ")", ".", "any", "(", ")", ":", "\n", "            ", "raise", "NanError", "(", "rs_batch", ")", "\n", "", "if", "any", "(", "\n", "torch", ".", "isnan", "(", "p", ".", "grad", ")", ".", "any", "(", ")", "for", "p", "in", "wf", ".", "parameters", "(", ")", "if", "p", ".", "grad", "is", "not", "None", "\n", ")", ":", "\n", "            ", "raise", "NanError", "(", "rs_batch", ")", "\n", "", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "if", "max_grad_norm", "is", "not", "None", ":", "\n", "            ", "clip_grad_norm_", "(", "wf", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "", "E_loc_mean", ",", "E_loc_var", "=", "weighted_mean_var", "(", "Es_loc", ",", "log_ws", ")", "\n", "E_loc_err", "=", "torch", ".", "sqrt", "(", "E_loc_var", "/", "len", "(", "Es_loc", ")", ")", "\n", "lr", "=", "opt", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", "\n", "if", "writer", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'E_loc/mean'", ",", "E_loc_mean", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'E_loc/var'", ",", "E_loc_var", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'E_loc/min'", ",", "Es_loc", ".", "min", "(", ")", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'E_loc/max'", ",", "Es_loc", ".", "max", "(", ")", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'E_loc/err'", ",", "E_loc_err", ",", "step", ")", "\n", "E_loc_loss_mean", ",", "E_loc_loss_var", "=", "weighted_mean_var", "(", "Es_loc_loss", ",", "log_ws", ")", "\n", "writer", ".", "add_scalar", "(", "'E_loc_loss/mean'", ",", "E_loc_loss_mean", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'E_loc_loss/var'", ",", "E_loc_loss_var", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'log_weights/KLvar'", ",", "log_ws", ".", "var", "(", ")", "/", "2", ",", "step", ")", "\n", "grads", "=", "torch", ".", "cat", "(", "\n", "[", "p", ".", "grad", ".", "flatten", "(", ")", "for", "p", "in", "wf", ".", "parameters", "(", ")", "if", "p", ".", "grad", "is", "not", "None", "]", "\n", ")", "\n", "writer", ".", "add_scalar", "(", "'grad/norm'", ",", "grads", ".", "norm", "(", ")", ",", "step", ")", "\n", "for", "label", ",", "value", "in", "wf", ".", "tracked_parameters", "(", ")", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "f'param/{label}'", ",", "value", ",", "step", ")", "\n", "", "writer", ".", "add_scalar", "(", "'misc/learning_rate'", ",", "lr", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'misc/batch_size'", ",", "len", "(", "Es_loc", ")", ",", "step", ")", "\n", "", "if", "log_dict", "is", "not", "None", ":", "\n", "            ", "log_dict", "[", "'E_loc'", "]", "=", "Es_loc", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "log_dict", "[", "'E_loc_loss'", "]", "=", "Es_loc_loss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "log_dict", "[", "'log_psis'", "]", "=", "log_psis", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "log_dict", "[", "'sign_psis'", "]", "=", "sign_psis", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "log_dict", "[", "'log_ws'", "]", "=", "log_ws", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "log_dict", "[", "'learning_rate'", "]", "=", "lr", "\n", "", "opt", ".", "step", "(", ")", "\n", "yield", "step", ",", "ufloat", "(", "E_loc_mean", ".", "item", "(", ")", ",", "E_loc_err", ".", "item", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.__init__": [[13, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "init", "=", "5", ",", "outlier", "=", "3", ",", "outlier_maxlen", "=", "3", ",", "max_alpha", "=", "0.999", ",", "decay_alpha", "=", "10", "\n", ")", ":", "\n", "        ", "self", ".", "step", "=", "0", "\n", "self", ".", "_init", "=", "init", "\n", "self", ".", "_outlier", "=", "outlier", "\n", "self", ".", "_outlier_maxlen", "=", "outlier_maxlen", "\n", "self", ".", "_max_alpha", "=", "max_alpha", "\n", "self", ".", "_decay_alpha", "=", "decay_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage._alpha": [[23, 25], ["min"], "methods", ["None"], ["", "def", "_alpha", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "min", "(", "self", ".", "_max_alpha", ",", "1", "-", "1", "/", "(", "2", "+", "n", "/", "self", ".", "_decay_alpha", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean": [[26, 29], ["uncertainties.unumpy.uarray", "numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "unp", ".", "uarray", "(", "self", ".", "_mean", ",", "np", ".", "sqrt", "(", "self", ".", "_sqerr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.var": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_var", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.std": [[34, 37], ["numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "self", ".", "_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.update": [[38, 63], ["numpy.array", "ewm.EWMAverage._alpha", "numpy.zeros_like", "numpy.isnan", "numpy.array.copy", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.abs", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage._alpha"], ["", "def", "update", "(", "self", ",", "x", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "a", "=", "alpha", "if", "alpha", "is", "not", "None", "else", "self", ".", "_alpha", "(", "self", ".", "step", ")", "\n", "is_outlier", "=", "(", "\n", "(", "np", ".", "abs", "(", "x", "-", "self", ".", "_mean", ")", ">", "self", ".", "_outlier", "*", "np", ".", "sqrt", "(", "self", ".", "_var", ")", ")", "\n", "&", "(", "self", ".", "_n_outlier", "<=", "self", ".", "_outlier_maxlen", ")", "\n", "if", "self", ".", "step", ">=", "self", ".", "_init", "\n", "else", "np", ".", "zeros_like", "(", "x", ",", "dtype", "=", "bool", ")", "\n", ")", "\n", "no_update", "=", "is_outlier", "|", "np", ".", "isnan", "(", "x", ")", "\n", "if", "self", ".", "step", "==", "0", ":", "\n", "            ", "self", ".", "_mean", "=", "x", ".", "copy", "(", ")", "\n", "self", ".", "_var", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "self", ".", "_sqerr", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "self", ".", "_n_outlier", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "var", "=", "(", "1", "-", "a", ")", "*", "(", "x", "-", "self", ".", "_mean", ")", "**", "2", "+", "a", "*", "self", ".", "_var", "\n", "mean", "=", "(", "1", "-", "a", ")", "*", "x", "+", "a", "*", "self", ".", "_mean", "\n", "sqerr", "=", "(", "1", "-", "a", ")", "**", "2", "*", "self", ".", "_var", "+", "a", "**", "2", "*", "self", ".", "_sqerr", "\n", "self", ".", "_var", "=", "np", ".", "where", "(", "no_update", ",", "self", ".", "_var", ",", "var", ")", "\n", "self", ".", "_mean", "=", "np", ".", "where", "(", "no_update", ",", "self", ".", "_mean", ",", "mean", ")", "\n", "self", ".", "_sqerr", "=", "np", ".", "where", "(", "no_update", ",", "self", ".", "_sqerr", ",", "sqerr", ")", "\n", "self", ".", "_n_outlier", "=", "np", ".", "where", "(", "is_outlier", ",", "self", ".", "_n_outlier", "+", "1", ",", "0", ")", "\n", "", "self", ".", "step", "+=", "1", "\n", "return", "is_outlier", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMMonitor.__init__": [[69, 77], ["ewm.EWMAverage.__init__", "math.erf", "range", "math.sqrt", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["def", "__init__", "(", "self", ",", "stat_outlier", "=", "6", ",", "blowup_maxlen", "=", "25", ",", "blowup_thre", "=", "0.5", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "max_alpha", "=", "1", ",", "**", "kwargs", ")", "\n", "self", ".", "blowup", "=", "{", "}", "\n", "self", ".", "_stat_outlier", "=", "stat_outlier", "\n", "self", ".", "_blowup_maxlen", "=", "blowup_maxlen", "\n", "self", ".", "_blowup_thre", "=", "blowup_thre", "\n", "percentiles", "=", "[", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2", ")", ")", "for", "x", "in", "range", "(", "-", "3", ",", "4", ")", "]", "\n", "self", ".", "_PERCENTILES", "=", "100", "*", "(", "1", "+", "np", ".", "array", "(", "percentiles", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMMonitor.mean_of": [[78, 81], ["uncertainties.ufloat", "numpy.sqrt"], "methods", ["None"], ["", "def", "mean_of", "(", "self", ",", "label", ")", ":", "\n", "        ", "i", "=", "self", ".", "I", "[", "label", "]", "\n", "return", "ufloat", "(", "self", ".", "_mean", "[", "i", "]", ",", "np", ".", "sqrt", "(", "self", ".", "_sqerr", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMMonitor.update": [[82, 109], ["numpy.empty", "numpy.empty_like", "numpy.percentile", "x.mean", "ewm.EWMMonitor._alpha", "min", "min", "ewm.EWMAverage.update", "len", "is_outlier[].sum", "len", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage._alpha", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "I", "=", "self", ".", "I", "\n", "stat", "=", "np", ".", "empty", "(", "len", "(", "self", ".", "I", ")", ")", "\n", "a", "=", "np", ".", "empty_like", "(", "stat", ")", "\n", "stat", "[", ":", "len", "(", "self", ".", "_PERCENTILES", ")", "]", "=", "np", ".", "percentile", "(", "x", ",", "self", ".", "_PERCENTILES", ")", "\n", "stat", "[", "I", "[", "'mean'", "]", ":", "]", "=", "x", ".", "mean", "(", ")", "\n", "alpha", "=", "self", ".", "_alpha", "(", "self", ".", "step", ")", "\n", "a", "[", ":", "I", "[", "'mean_slow'", "]", "]", "=", "min", "(", "0.96", ",", "alpha", ")", "\n", "a", "[", "I", "[", "'mean_slow'", "]", "]", "=", "min", "(", "0.999", ",", "alpha", ")", "\n", "is_outlier", "=", "super", "(", ")", ".", "update", "(", "stat", ",", "a", ")", "\n", "if", "is_outlier", "[", ":", "I", "[", "'mean_slow'", "]", "]", ".", "sum", "(", ")", ">=", "self", ".", "_stat_outlier", ":", "\n", "            ", "if", "not", "self", ".", "blowup", ":", "\n", "                ", "self", ".", "blowup", "=", "{", "\n", "'init'", ":", "self", ".", "step", ",", "\n", "'step'", ":", "self", ".", "step", ",", "\n", "'start'", ":", "self", ".", "_mean", "[", "I", "[", "'mean'", "]", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "                ", "self", ".", "blowup", "[", "'step'", "]", "=", "self", ".", "step", "\n", "", "", "if", "self", ".", "blowup", "and", "self", ".", "step", "-", "self", ".", "blowup", "[", "'step'", "]", ">", "self", ".", "_blowup_maxlen", ":", "\n", "            ", "self", ".", "blowup", "=", "{", "}", "\n", "", "if", "self", ".", "blowup", ":", "\n", "            ", "self", ".", "blowup", "[", "'indicator'", "]", "=", "(", "\n", "self", ".", "_mean", "[", "I", "[", "'mean'", "]", "]", "-", "self", ".", "blowup", "[", "'start'", "]", "\n", ")", "/", "np", ".", "sqrt", "(", "self", ".", "_var", "[", "I", "[", "'mean'", "]", "]", ")", "\n", "self", ".", "blowup", "[", "'in_blowup'", "]", "=", "self", ".", "blowup", "[", "'indicator'", "]", ">", "self", ".", "_blowup_thre", "\n", "", "return", "is_outlier", ",", "stat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.TqdmStream.write": [[88, 90], ["tqdm.tqdm.tqdm.write"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.TqdmStream.write"], ["    ", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "tqdm", ".", "write", "(", "msg", ",", "end", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.CLI.list_commands": [[93, 95], ["cli.CLI.commands.keys"], "methods", ["None"], ["    ", "def", "list_commands", "(", "self", ",", "ctx", ")", ":", "\n", "        ", "return", "self", ".", "commands", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.CLI.get_command": [[96, 106], ["name.startswith", "super().get_command", "dir", "name.split", "getattr", "isinstance"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.CLI.get_command"], ["", "def", "get_command", "(", "self", ",", "ctx", ",", "name", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'extra:'", ")", ":", "\n", "            ", "from", ".", "extra", "import", "cli", "as", "extra_cli", "\n", "\n", "name", "=", "name", ".", "split", "(", "':'", ",", "1", ")", "[", "1", "]", "\n", "for", "attr", "in", "dir", "(", "extra_cli", ")", ":", "\n", "                ", "cmd", "=", "getattr", "(", "extra_cli", ",", "attr", ")", "\n", "if", "isinstance", "(", "cmd", ",", "click", ".", "core", ".", "Command", ")", "and", "cmd", ".", "name", "==", "name", ":", "\n", "                    ", "return", "cmd", "\n", "", "", "", "return", "super", "(", ")", ".", "get_command", "(", "ctx", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli._get_subkwargs": [[37, 53], ["isinstance", "tomlkit.table", "isinstance", "cli.collect_kwarg_defaults", "isinstance", "cli.collect_kwarg_defaults", "target.items"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.collect_kwarg_defaults", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.collect_kwarg_defaults", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items"], ["def", "_get_subkwargs", "(", "func", ",", "name", ",", "mapping", ")", ":", "\n", "    ", "target", "=", "mapping", "[", "func", ",", "name", "]", "\n", "if", "not", "target", ":", "\n", "        ", "return", "tomlkit", ".", "table", "(", ")", "\n", "", "target", ",", "override", "=", "target", "if", "isinstance", "(", "target", ",", "tuple", ")", "else", "(", "target", ",", "[", "]", ")", "\n", "if", "isinstance", "(", "target", ",", "dict", ")", ":", "\n", "        ", "sub_kwargs", "=", "{", "k", ":", "collect_kwarg_defaults", "(", "v", ",", "mapping", ")", "for", "k", ",", "v", "in", "target", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "sub_kwargs", "=", "collect_kwarg_defaults", "(", "target", ",", "mapping", ")", "\n", "", "for", "x", "in", "override", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "            ", "key", ",", "val", "=", "x", "\n", "sub_kwargs", "[", "key", "]", "=", "val", "\n", "", "else", ":", "\n", "            ", "del", "sub_kwargs", "[", "x", "]", "\n", "", "", "return", "sub_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.collect_kwarg_defaults": [[55, 85], ["tomlkit.table", "inspect.signature().parameters.values", "cli._get_subkwargs", "p.name.endswith", "inspect.signature", "tomlkit.table.add", "mapping.get", "cli._get_subkwargs", "tomlkit.table.add", "tomlkit.items.Comment", "tomlkit.items.Trivia", "print", "train.train", "evaluate.evaluate"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli._get_subkwargs", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli._get_subkwargs", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.train.train", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.evaluate.evaluate"], ["", "def", "collect_kwarg_defaults", "(", "func", ",", "mapping", ")", ":", "\n", "    ", "kwargs", "=", "tomlkit", ".", "table", "(", ")", "\n", "for", "p", "in", "inspect", ".", "signature", "(", "func", ")", ".", "parameters", ".", "values", "(", ")", ":", "\n", "        ", "if", "p", ".", "kind", "is", "inspect", ".", "Parameter", ".", "POSITIONAL_OR_KEYWORD", ":", "\n", "            ", "continue", "\n", "", "if", "p", ".", "name", "==", "'kwargs'", ":", "\n", "            ", "assert", "p", ".", "default", "is", "p", ".", "empty", "\n", "assert", "p", ".", "kind", "is", "inspect", ".", "Parameter", ".", "VAR_KEYWORD", "\n", "sub_kwargs", "=", "_get_subkwargs", "(", "func", ",", "'kwargs'", ",", "mapping", ")", "\n", "for", "item", "in", "sub_kwargs", ".", "value", ".", "body", ":", "\n", "                ", "kwargs", ".", "add", "(", "*", "item", ")", "\n", "", "", "elif", "p", ".", "name", ".", "endswith", "(", "'_kwargs'", ")", ":", "\n", "            ", "if", "mapping", ".", "get", "(", "(", "func", ",", "p", ".", "name", ")", ")", "is", "True", ":", "\n", "                ", "kwargs", "[", "p", ".", "name", "]", "=", "p", ".", "default", "\n", "", "else", ":", "\n", "                ", "assert", "p", ".", "default", "is", "None", "\n", "assert", "p", ".", "kind", "is", "inspect", ".", "Parameter", ".", "KEYWORD_ONLY", "\n", "sub_kwargs", "=", "_get_subkwargs", "(", "func", ",", "p", ".", "name", ",", "mapping", ")", "\n", "kwargs", "[", "p", ".", "name", "]", "=", "sub_kwargs", "\n", "", "", "else", ":", "\n", "            ", "assert", "p", ".", "kind", "is", "inspect", ".", "Parameter", ".", "KEYWORD_ONLY", "\n", "if", "p", ".", "default", "is", "None", ":", "\n", "                ", "kwargs", ".", "add", "(", "Comment", "(", "Trivia", "(", "comment", "=", "f'#: {p.name} = ...'", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "kwargs", "[", "p", ".", "name", "]", "=", "p", ".", "default", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print", "(", "func", ",", "p", ".", "name", ",", "p", ".", "kind", ",", "p", ".", "default", ")", "\n", "raise", "\n", "", "", "", "", "return", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.cli": [[108, 125], ["click.group", "click.option", "click.option", "logging.basicConfig", "logging.getLogger().setLevel", "cli.TqdmStream", "logging.getLogger"], "function", ["None"], ["", "", "@", "click", ".", "group", "(", "cls", "=", "CLI", ")", "\n", "@", "click", ".", "option", "(", "'-v'", ",", "'--verbose'", ",", "count", "=", "True", ",", "help", "=", "'Increase verbosity.'", ")", "\n", "@", "click", ".", "option", "(", "'-q'", ",", "'--quiet'", ",", "is_flag", "=", "True", ",", "help", "=", "'Suppres all output.'", ")", "\n", "def", "cli", "(", "verbose", ",", "quiet", ")", ":", "# noqa: D403", "\n", "    ", "\"\"\"DeepQMC runs quantum Monte Carlo with deep neural networks.\"\"\"", "\n", "assert", "not", "(", "quiet", "and", "verbose", ")", "\n", "logging", ".", "basicConfig", "(", "\n", "style", "=", "'{'", ",", "\n", "format", "=", "'[{asctime}.{msecs:03.0f}] {levelname}:{name}: {message}'", ",", "\n", "datefmt", "=", "'%H:%M:%S'", ",", "\n", "stream", "=", "TqdmStream", "(", ")", ",", "\n", ")", "\n", "if", "quiet", ":", "\n", "        ", "level", "=", "logging", ".", "ERROR", "\n", "", "else", ":", "\n", "        ", "level", "=", "[", "logging", ".", "WARNING", ",", "logging", ".", "INFO", ",", "logging", ".", "DEBUG", "]", "[", "verbose", "]", "\n", "", "logging", ".", "getLogger", "(", "'deepqmc'", ")", ".", "setLevel", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.defaults": [[127, 146], ["cli.command", "click.option", "tomlkit.table", "cli.collect_kwarg_defaults", "cli.collect_kwarg_defaults", "wf.ANSATZES.items", "tomlkit.dumps().split", "click.echo", "cli.collect_kwarg_defaults", "tomlkit.dumps"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.collect_kwarg_defaults", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.collect_kwarg_defaults", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.collect_kwarg_defaults"], ["", "@", "cli", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--commented'", ",", "'-c'", ",", "is_flag", "=", "True", ",", "help", "=", "'Comment out all hyperparameters.'", "\n", ")", "\n", "def", "defaults", "(", "commented", ")", ":", "\n", "    ", "\"\"\"Print all hyperparameters and their default values.\n\n    The hyperparameters are printed in the TOML format that is expected by other\n    deepqmc commands.\n    \"\"\"", "\n", "table", "=", "tomlkit", ".", "table", "(", ")", "\n", "table", "[", "'train_kwargs'", "]", "=", "collect_kwarg_defaults", "(", "train", ",", "DEEPQMC_DEFAULTS", ")", "\n", "table", "[", "'evaluate_kwargs'", "]", "=", "collect_kwarg_defaults", "(", "evaluate", ",", "DEEPQMC_DEFAULTS", ")", "\n", "for", "label", ",", "ansatz", "in", "ANSATZES", ".", "items", "(", ")", ":", "\n", "        ", "table", "[", "f'{label}_kwargs'", "]", "=", "collect_kwarg_defaults", "(", "ansatz", ".", "entry", ",", "ansatz", ".", "defaults", ")", "\n", "", "lines", "=", "tomlkit", ".", "dumps", "(", "table", ")", ".", "split", "(", "'\\n'", ")", "\n", "if", "commented", ":", "\n", "        ", "lines", "=", "[", "'# '", "+", "l", "if", "' = '", "in", "l", "and", "l", "[", "0", "]", "!=", "'#'", "else", "l", "for", "l", "in", "lines", "]", "\n", "", "click", ".", "echo", "(", "'\\n'", ".", "join", "(", "lines", ")", ",", "nl", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.train_at": [[148, 210], ["cli.command", "click.argument", "click.option", "click.option", "click.option", "click.option", "pathlib.Path().resolve", "range", "log.info", "sys.path.append", "log.info", "io.wf_from_file", "click.Path", "pathlib.Path", "str", "log.info", "wf.cuda", "log.info", "train.train", "log.warning", "params.get", "log.error", "log.warning", "log.warning"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.io.wf_from_file", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.train.train"], ["", "@", "cli", ".", "command", "(", "'train'", ")", "\n", "@", "click", ".", "argument", "(", "'workdir'", ",", "type", "=", "click", ".", "Path", "(", "exists", "=", "True", ")", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--save-every'", ",", "\n", "default", "=", "100", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "'Frequency in steps of saving the curent state of the optimization.'", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--cuda/--no-cuda'", ",", "\n", "default", "=", "True", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "'Toggle training on a GPU.'", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--max-restarts'", ",", "\n", "default", "=", "3", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "'Maximum number of attempted restarts before aborting.'", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "'--hook'", ",", "is_flag", "=", "True", ",", "help", "=", "'Import a deepqmc hook from WORKDIR.'", ")", "\n", "def", "train_at", "(", "workdir", ",", "save_every", ",", "cuda", ",", "max_restarts", ",", "hook", ")", ":", "\n", "    ", "\"\"\"Train an ansatz with variational quantum Monte Carlo.\n\n    The calculation details must be specified in a \"param.toml\" file in WORKDIR,\n    which must contain at least the keywords \"system\" and \"ansatz\", and\n    optionally any keywords printed by the \"defaults\" command.\n    \"\"\"", "\n", "workdir", "=", "Path", "(", "workdir", ")", ".", "resolve", "(", ")", "\n", "if", "hook", ":", "\n", "        ", "log", ".", "info", "(", "'Importing a dlqmc hook'", ")", "\n", "sys", ".", "path", ".", "append", "(", "str", "(", "workdir", ")", ")", "\n", "import", "dlqmc_hook", "# noqa: F401", "\n", "", "state", "=", "None", "\n", "for", "attempt", "in", "range", "(", "max_restarts", "+", "1", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Initializing a new wave function'", ")", "\n", "wf", ",", "params", ",", "state_from_file", "=", "wf_from_file", "(", "workdir", ")", "\n", "state", "=", "state", "or", "state_from_file", "\n", "if", "cuda", ":", "\n", "            ", "log", ".", "info", "(", "'Moving to GPU...'", ")", "\n", "wf", ".", "cuda", "(", ")", "\n", "log", ".", "info", "(", "'Moved to GPU'", ")", "\n", "", "try", ":", "\n", "            ", "train", "(", "\n", "wf", ",", "\n", "workdir", "=", "workdir", ",", "\n", "state", "=", "state", ",", "\n", "save_every", "=", "save_every", ",", "\n", "**", "params", ".", "get", "(", "'train_kwargs'", ",", "{", "}", ")", ",", "\n", ")", "\n", "", "except", "TrainingCrash", "as", "e", ":", "\n", "            ", "log", ".", "warning", "(", "f'Caught exception: {e.__cause__!r}'", ")", "\n", "state", "=", "e", ".", "state", "\n", "if", "attempt", "==", "max_restarts", ":", "\n", "                ", "log", ".", "error", "(", "'Maximum number of restarts reached'", ")", "\n", "break", "\n", "", "if", "state", ":", "\n", "                ", "log", ".", "warning", "(", "f'Restarting from step {state[\"step\"]}'", ")", "\n", "", "else", ":", "\n", "                ", "log", ".", "warning", "(", "'Restarting from beginning'", ")", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.cli.evaluate_at": [[212, 250], ["cli.command", "click.argument", "click.option", "click.option", "click.option", "pathlib.Path().resolve", "io.wf_from_file", "evaluate.evaluate", "sys.path.append", "wf.load_state_dict", "wf.cuda", "click.Path", "pathlib.Path", "str", "params.get"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.io.wf_from_file", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.evaluate.evaluate", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.load_state_dict"], ["", "", "", "@", "cli", ".", "command", "(", "'evaluate'", ")", "\n", "@", "click", ".", "argument", "(", "'workdir'", ",", "type", "=", "click", ".", "Path", "(", "exists", "=", "True", ")", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--cuda/--no-cuda'", ",", "\n", "default", "=", "True", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "'Toggle training on a GPU.'", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--store-steps/--no-store-steps'", ",", "\n", "default", "=", "False", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "'Toggle storing of individual sampling steps.'", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "'--hook'", ",", "is_flag", "=", "True", ")", "\n", "def", "evaluate_at", "(", "workdir", ",", "cuda", ",", "store_steps", ",", "hook", ")", ":", "\n", "    ", "\"\"\"Estimate total energy of an ansatz via Monte Carlo sampling.\n\n    The calculation details must be specified in a \"param.toml\" file in WORKDIR,\n    which must contain at least the keywords \"system\" and \"ansatz\", and\n    optionally any keywords printed by the \"defaults\" command. The wave function\n    ansatz must be stored in a \"state.pt\" file in WORKDIR, which was generated\n    with the \"train\" command.\n    \"\"\"", "\n", "workdir", "=", "Path", "(", "workdir", ")", ".", "resolve", "(", ")", "\n", "if", "hook", ":", "\n", "        ", "sys", ".", "path", ".", "append", "(", "str", "(", "workdir", ")", ")", "\n", "import", "dlqmc_hook", "# noqa: F401", "\n", "", "wf", ",", "params", ",", "state", "=", "wf_from_file", "(", "workdir", ")", "\n", "if", "state", ":", "\n", "        ", "wf", ".", "load_state_dict", "(", "state", "[", "'wf'", "]", ")", "\n", "", "if", "cuda", ":", "\n", "        ", "wf", ".", "cuda", "(", ")", "\n", "", "evaluate", "(", "\n", "wf", ",", "\n", "store_steps", "=", "store_steps", ",", "\n", "workdir", "=", "workdir", ",", "\n", "**", "params", ".", "get", "(", "'evaluate_kwargs'", ",", "{", "}", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.TqdmStream.write": [[138, 145], ["len", "tqdm.auto.tqdm.auto.tqdm.write", "sys.stderr.write"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.TqdmStream.write", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.TqdmStream.write"], ["    ", "def", "write", "(", "self", ",", "msg", ":", "str", ")", "->", "int", ":", "\n", "        ", "try", ":", "\n", "            ", "tqdm", ".", "write", "(", "msg", ",", "end", "=", "''", ")", "\n", "", "except", "BrokenPipeError", ":", "\n", "            ", "sys", ".", "stderr", ".", "write", "(", "msg", ")", "\n", "return", "0", "\n", "", "return", "len", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.eval_resolver": [[27, 29], ["eval"], "function", ["None"], ["def", "eval_resolver", "(", "x", ")", ":", "\n", "    ", "return", "eval", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.ansatz_from_name": [[36, 47], ["kwargs.items", "omegaconf.OmegaConf.to_object", "hydra.utils.instantiate", "hydra.initialize", "hydra.compose", "omegaconf.OmegaConf.set_struct", "omegaconf.OmegaConf.update", "mol.charges.tolist"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update"], ["def", "ansatz_from_name", "(", "name", ",", "mol", ",", "force", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "initialize", "(", "'conf/ansatz'", ")", ":", "\n", "        ", "ansatz", "=", "compose", "(", "config_name", "=", "name", ")", "\n", "", "if", "force", ":", "\n", "        ", "OmegaConf", ".", "set_struct", "(", "ansatz", ",", "False", ")", "\n", "", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "        ", "OmegaConf", ".", "update", "(", "ansatz", ",", "k", ",", "v", ")", "\n", "", "ansatz", ".", "mol", "=", "{", "'charges'", ":", "mol", ".", "charges", ".", "tolist", "(", ")", "}", "\n", "ansatz", "=", "OmegaConf", ".", "to_object", "(", "ansatz", ")", "\n", "ansatz", "[", "'mol'", "]", "=", "mol", "\n", "return", "instantiate", "(", "ansatz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.mol_from_name": [[49, 55], ["kwargs.items", "hydra.utils.instantiate", "hydra.initialize", "hydra.compose", "omegaconf.OmegaConf.update"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update"], ["", "def", "mol_from_name", "(", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "initialize", "(", "'conf/system'", ")", ":", "\n", "        ", "system", "=", "compose", "(", "config_name", "=", "name", ")", "\n", "", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "        ", "OmegaConf", ".", "update", "(", "system", ",", "k", ",", "v", ")", "\n", "", "return", "instantiate", "(", "system", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.ansatz_from_workdir": [[57, 64], ["pathlib.Path", "app.from_workdir", "app.instantiate_wf"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.from_workdir", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.instantiate_wf"], ["", "def", "ansatz_from_workdir", "(", "workdir", ",", "state", "=", "'LAST'", ")", ":", "\n", "    ", "workdir", "=", "Path", "(", "workdir", ")", "\n", "cfg", ",", "state", "=", "from_workdir", "(", "workdir", ",", "state", ")", "\n", "cfg", ".", "workdir", "=", "None", "\n", "del", "cfg", ".", "task", ".", "state", "\n", "cfg", "=", "instantiate_wf", "(", "cfg", ",", "workdir", ",", "state", ")", "\n", "return", "cfg", "[", "'task'", "]", "[", "'wf'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.from_workdir": [[66, 75], ["omegaconf.OmegaConf.load", "str", "sorted", "workdir.glob"], "function", ["None"], ["", "def", "from_workdir", "(", "workdir", ",", "state", ")", ":", "\n", "    ", "cfg", "=", "OmegaConf", ".", "load", "(", "workdir", "/", "'.hydra/config.yaml'", ")", "\n", "if", "'workdir'", "in", "cfg", ".", "ansatz", ":", "\n", "        ", "cfg", ".", "ansatz", ".", "workdir", "=", "str", "(", "workdir", ")", "\n", "", "if", "state", "==", "'LAST'", ":", "\n", "        ", "state", "=", "sorted", "(", "workdir", ".", "glob", "(", "'**/state-*.pt'", ")", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "state", "=", "workdir", "/", "state", "\n", "", "return", "cfg", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.instantiate_wf": [[77, 90], ["omegaconf.OmegaConf.to_object", "hydra.utils.instantiate", "log.info", "torch.load", "log.info", "[].load_state_dict"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.load_state_dict"], ["", "def", "instantiate_wf", "(", "cfg", ",", "fromdir", ",", "state", ")", ":", "\n", "    ", "cfg", "=", "OmegaConf", ".", "to_object", "(", "cfg", ")", "\n", "cfg", "[", "'task'", "]", "[", "'wf'", "]", "=", "instantiate", "(", "cfg", "[", "'task'", "]", "[", "'wf'", "]", ")", "\n", "if", "fromdir", ":", "\n", "        ", "log", ".", "info", "(", "f'Loading state from {state}...'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "state", ")", "\n", "log", ".", "info", "(", "'State loaded'", ")", "\n", "if", "'state'", "in", "cfg", "[", "'task'", "]", ":", "\n", "            ", "assert", "cfg", "[", "'task'", "]", "[", "'state'", "]", "is", "None", "\n", "cfg", "[", "'task'", "]", "[", "'state'", "]", "=", "state_dict", "\n", "", "else", ":", "\n", "            ", "cfg", "[", "'task'", "]", "[", "'wf'", "]", ".", "load_state_dict", "(", "state_dict", "[", "'wf'", "]", ")", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.print_conf": [[92, 105], ["enumerate", "zip", "print"], "function", ["None"], ["", "def", "print_conf", "(", "wf", ",", "brackets", "=", "None", ")", ":", "\n", "    ", "if", "not", "wf", ".", "conf_strs", ":", "\n", "        ", "return", "\n", "", "for", "i", ",", "(", "s", ",", "c", ")", "in", "enumerate", "(", "zip", "(", "wf", ".", "conf_strs", ",", "wf", ".", "conf_coeff", ".", "weight", "[", "0", "]", ")", ")", ":", "\n", "        ", "if", "brackets", ":", "\n", "            ", "x", "=", "''", "\n", "for", "b", "in", "brackets", ":", "\n", "                ", "if", "not", "s", ":", "\n", "                    ", "break", "\n", "", "x", ",", "s", "=", "x", "+", "(", "'|'", "if", "x", "else", "''", ")", "+", "s", "[", ":", "b", "]", ",", "s", "[", "b", ":", "]", "\n", "", "x", "+=", "s", "\n", "s", "=", "x", "\n", "", "print", "(", "f'{i + 1:4d}  {c:14.10f}  {s}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.cli": [[107, 135], ["hydra.main", "hydra.main", "log.info", "str", "omegaconf.OmegaConf.select", "pathlib.Path.cwd", "pathlib.Path", "app.from_workdir", "omegaconf.OmegaConf.masked_copy", "omegaconf.OmegaConf.merge", "app.instantiate_wf", "log.info", "[].to", "log.info", "hydra.utils.call", "hydra.utils.to_absolute_path", "log.info", "torch.manual_seed", "torch.autograd.set_detect_anomaly", "log.warn", "log.warning", "OmegaConf.masked_copy.keys", "instantiate_wf.keys"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.from_workdir", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.instantiate_wf"], ["", "", "@", "hydra", ".", "main", "(", "config_path", "=", "'conf'", ",", "config_name", "=", "'config'", ")", "\n", "def", "cli", "(", "cfg", ")", ":", "\n", "    ", "log", ".", "info", "(", "'Entering application'", ")", "\n", "cfg", ".", "workdir", "=", "str", "(", "Path", ".", "cwd", "(", ")", ")", "\n", "fromdir", "=", "OmegaConf", ".", "select", "(", "cfg", ",", "'fromdir'", ",", "throw_on_missing", "=", "True", ")", "\n", "state", "=", "None", "\n", "if", "fromdir", ":", "\n", "        ", "fromdir", "=", "Path", "(", "to_absolute_path", "(", "fromdir", ")", ")", "\n", "cfg_orig", ",", "state", "=", "from_workdir", "(", "fromdir", ",", "cfg", ".", "state", ")", "\n", "cfg_orig", "=", "OmegaConf", ".", "masked_copy", "(", "cfg_orig", ",", "cfg_orig", ".", "keys", "(", ")", "-", "cfg", ".", "keys", "(", ")", ")", "\n", "cfg", "=", "OmegaConf", ".", "merge", "(", "cfg_orig", ",", "cfg", ")", "\n", "", "try", ":", "\n", "        ", "if", "cfg", ".", "seed", "is", "not", "None", ":", "\n", "            ", "log", ".", "info", "(", "f'Setting random seed: {cfg.seed}'", ")", "\n", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "", "device", "=", "cfg", ".", "device", "\n", "if", "cfg", ".", "anomaly", ":", "\n", "            ", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "log", ".", "warn", "(", "'Setting anomaly detection on'", ")", "\n", "", "cfg", "=", "instantiate_wf", "(", "cfg", ",", "fromdir", ",", "state", ")", "\n", "log", ".", "info", "(", "f'Moving to {device}...'", ")", "\n", "cfg", "[", "'task'", "]", "[", "'wf'", "]", ".", "to", "(", "device", ")", "\n", "log", ".", "info", "(", "f'Moved to {device}'", ")", "\n", "call", "(", "cfg", "[", "'task'", "]", ",", "_convert_", "=", "'all'", ")", "\n", "", "except", "hydra", ".", "errors", ".", "InstantiationException", "as", "e", ":", "\n", "        ", "raise", "e", ".", "__cause__", "from", "None", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "log", ".", "warning", "(", "'Interrupted!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.io.validate_params": [[16, 26], ["set", "errors.TomlError", "errors.TomlError"], "function", ["None"], ["def", "validate_params", "(", "params", ")", ":", "\n", "    ", "REQUIRED", "=", "{", "'system'", ",", "'ansatz'", "}", "\n", "OPTIONAL", "=", "{", "'train_kwargs'", ",", "'evaluate_kwargs'", "}", "|", "{", "f'{a}_kwargs'", "for", "a", "in", "ANSATZES", "}", "\n", "params", "=", "set", "(", "params", ")", "\n", "missing", "=", "REQUIRED", "-", "params", "\n", "if", "missing", ":", "\n", "        ", "raise", "TomlError", "(", "f'Missing keywords: {missing}'", ")", "\n", "", "unknown", "=", "params", "-", "REQUIRED", "-", "OPTIONAL", "\n", "if", "unknown", ":", "\n", "        ", "raise", "TomlError", "(", "f'Unknown keywords: {unknown}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.io.import_fullname": [[28, 32], ["fullname.split", "importlib.import_module", "getattr"], "function", ["None"], ["", "", "def", "import_fullname", "(", "fullname", ")", ":", "\n", "    ", "module_name", ",", "qualname", "=", "fullname", ".", "split", "(", "':'", ")", "\n", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "return", "getattr", "(", "module", ",", "qualname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.io.wf_from_file": [[34, 60], ["toml.loads", "io.validate_params", "toml.loads.pop", "isinstance", "toml.loads.pop", "toml.loads.pop", "params.pop.entry", "state_file.is_file", "torch.load", "log.info", "params.pop.pop", "molecule.Molecule", "molecule.Molecule.from_name", "io.import_fullname"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.io.validate_params", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.from_name", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.io.import_fullname"], ["", "def", "wf_from_file", "(", "workdir", ")", ":", "\n", "    ", "params", "=", "toml", ".", "loads", "(", "(", "workdir", "/", "'param.toml'", ")", ".", "read_text", "(", ")", ")", "\n", "validate_params", "(", "params", ")", "\n", "state_file", "=", "workdir", "/", "'state.pt'", "\n", "state", "=", "torch", ".", "load", "(", "state_file", ")", "if", "state_file", ".", "is_file", "(", ")", "else", "None", "\n", "if", "state", ":", "\n", "        ", "log", ".", "info", "(", "f'State loaded from {state_file}'", ")", "\n", "", "system", "=", "params", ".", "pop", "(", "'system'", ")", "\n", "if", "isinstance", "(", "system", ",", "str", ")", ":", "\n", "        ", "name", ",", "system", "=", "system", ",", "{", "}", "\n", "", "else", ":", "\n", "        ", "name", "=", "system", ".", "pop", "(", "'name'", ",", "None", ")", "\n", "", "if", "name", "is", "None", ":", "\n", "        ", "mol", "=", "Molecule", "(", "**", "system", ")", "\n", "", "elif", "':'", "in", "name", ":", "\n", "        ", "mol", "=", "import_fullname", "(", "name", ")", "(", "**", "system", ")", "\n", "", "else", ":", "\n", "        ", "mol", "=", "Molecule", ".", "from_name", "(", "name", ",", "**", "system", ")", "\n", "", "ansatz", "=", "params", ".", "pop", "(", "'ansatz'", ")", "\n", "ansatz", "=", "ANSATZES", "[", "ansatz", "]", "\n", "kwargs", "=", "params", ".", "pop", "(", "f'{ansatz.name}_kwargs'", ",", "{", "}", ")", "\n", "if", "ansatz", ".", "uses_workdir", ":", "\n", "        ", "assert", "'workdir'", "not", "in", "kwargs", "\n", "kwargs", "[", "'workdir'", "]", "=", "workdir", "\n", "", "wf", "=", "ansatz", ".", "entry", "(", "mol", ",", "**", "kwargs", ")", "\n", "return", "wf", ",", "params", ",", "state", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.evaluate.evaluate": [[21, 113], ["functools.partial.", "tqdm.auto.tqdm", "pathlib.Path", "torch.utils.tensorboard.SummaryWriter", "h5py.File", "utils.H5LogTable", "utils.H5LogTable", "functools.partial", "itertools.count", "log.info", "sampling.sample_wf", "tqdm.auto.tqdm.close", "log.info", "h5py.File.require_group", "h5py.File.require_group", "sampler_factory.iter_with_info", "torch.utils.tensorboard.SummaryWriter.close", "h5py.File.close", "tqdm.auto.tqdm.set_description", "log.info", "tqdm.auto.tqdm.set_postfix", "h5py.File.flush", "len", "len", "numpy.stack", "uncertainties.unumpy.nominal_values", "uncertainties.unumpy.std_devs"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.sample_wf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.iter_with_info"], ["def", "evaluate", "(", "\n", "wf", ",", "\n", "store_steps", "=", "False", ",", "\n", "workdir", "=", "None", ",", "\n", "log_dict", "=", "None", ",", "\n", "sampler_factory", "=", "None", ",", "\n", "*", ",", "\n", "n_steps", "=", "500", ",", "\n", "sample_size", "=", "1_000", ",", "\n", "sample_kwargs", "=", "None", ",", "\n", "sampler_kwargs", "=", "None", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Evaluate a wave function model.\n\n    This is a top-level API function that rigorously evaluates a trained wave\n    function model. It initializes a :class:`~deepqmc.sampling.LangevinSampler`,\n    sets up a Tensorboard writer, and calls :func:`~deepqmc.sampling.sample_wf`.\n\n    Args:\n        wf (:class:`~deepqmc.wf.WaveFunction`): wave function model to be evaluated\n        store_steps (bool): whether to store individual sampled electron configuraitons\n        workdir (str): path where to store Tensorboard event file and HDF5 file with\n            sampling block energies\n        log_dict (dict-like): dictionary to store the step data\n        n_steps (int): number of sampling steps\n        sample_size (int): number of Markov-chain walkers\n        sample_kwargs (dict): extra arguments passed to\n            :func:`~deepqmc.sampling.sample_wf`\n        sampler_kwargs (dict): extra arguments passed to\n            :class:`~deepqmc.sampling.LangevinSampler`\n\n    Returns:\n        dict: Expectation values with standard errors.\n    \"\"\"", "\n", "if", "workdir", ":", "\n", "        ", "workdir", "=", "Path", "(", "workdir", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "workdir", ",", "flush_secs", "=", "15", ")", "\n", "h5file", "=", "h5py", ".", "File", "(", "workdir", "/", "'sample.h5'", ",", "'a'", ",", "libver", "=", "'v110'", ")", "\n", "h5file", ".", "swmr_mode", "=", "True", "\n", "table_blocks", "=", "H5LogTable", "(", "h5file", ".", "require_group", "(", "'blocks'", ")", ")", "\n", "table_steps", "=", "H5LogTable", "(", "h5file", ".", "require_group", "(", "'steps'", ")", ")", "\n", "", "else", ":", "\n", "        ", "writer", "=", "None", "\n", "", "if", "not", "sampler_factory", ":", "\n", "        ", "sampler_factory", "=", "partial", "(", "\n", "LangevinSampler", ".", "from_wf", ",", "\n", "sample_size", "=", "sample_size", ",", "\n", "n_discard", "=", "0", ",", "\n", "**", "{", "'n_decorrelate'", ":", "4", ",", "'n_first_certain'", ":", "0", ",", "**", "(", "sampler_kwargs", "or", "{", "}", ")", "}", ",", "\n", ")", "\n", "", "sampler", "=", "sampler_factory", "(", "wf", ",", "writer", "=", "writer", ")", "\n", "steps", "=", "tqdm", "(", "count", "(", ")", ",", "desc", "=", "'equilibrating'", ",", "disable", "=", "None", ")", "\n", "blocks", "=", "[", "]", "\n", "try", ":", "\n", "        ", "log", ".", "info", "(", "'Equilibrating...'", ")", "\n", "for", "step", ",", "energy", "in", "sample_wf", "(", "\n", "wf", ",", "\n", "sampler", ".", "iter_with_info", "(", ")", ",", "\n", "steps", ",", "\n", "blocks", "=", "blocks", ",", "\n", "log_dict", "=", "log_dict", "\n", "if", "log_dict", "is", "not", "None", "\n", "else", "table_steps", ".", "row", "\n", "if", "workdir", "and", "store_steps", "\n", "else", "None", ",", "\n", "writer", "=", "writer", ",", "\n", "**", "(", "sample_kwargs", "or", "{", "}", ")", ",", "\n", ")", ":", "\n", "            ", "if", "energy", "==", "'eq'", ":", "\n", "                ", "steps", ".", "total", "=", "step", "+", "n_steps", "\n", "steps", ".", "set_description", "(", "'evaluating'", ")", "\n", "log", ".", "info", "(", "'Equilibrated...'", ")", "\n", "continue", "\n", "", "if", "energy", "is", "not", "None", ":", "\n", "                ", "steps", ".", "set_postfix", "(", "E", "=", "f'{energy:S}'", ")", "\n", "", "if", "workdir", ":", "\n", "                ", "if", "len", "(", "blocks", ")", ">", "len", "(", "table_blocks", "[", "'energy'", "]", ")", ":", "\n", "                    ", "block", "=", "blocks", "[", "-", "1", "]", "\n", "table_blocks", ".", "row", "[", "'energy'", "]", "=", "np", ".", "stack", "(", "\n", "[", "unp", ".", "nominal_values", "(", "block", ")", ",", "unp", ".", "std_devs", "(", "block", ")", "]", ",", "-", "1", "\n", ")", "\n", "", "h5file", ".", "flush", "(", ")", "\n", "", "if", "step", ">=", "(", "steps", ".", "total", "or", "n_steps", ")", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "", "finally", ":", "\n", "        ", "steps", ".", "close", "(", ")", "\n", "if", "workdir", ":", "\n", "            ", "writer", ".", "close", "(", ")", "\n", "h5file", ".", "close", "(", ")", "\n", "", "", "if", "energy", ":", "\n", "        ", "log", ".", "info", "(", "f'Final energy: {energy:S}'", ")", "\n", "", "return", "{", "'energy'", ":", "energy", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.train.InverseLR": [[51, 53], ["torch.optim.lr_scheduler.LambdaLR"], "function", ["None"], ["def", "InverseLR", "(", "opt", ",", "decay_rate", ")", ":", "\n", "    ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "opt", ",", "lambda", "n", ":", "1", "/", "(", "1", "+", "n", "/", "decay_rate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.train.ScanLR": [[55, 58], ["torch.optim.lr_scheduler.LambdaLR"], "function", ["None"], ["", "def", "ScanLR", "(", "opt", ",", "eq_steps", ",", "start", ",", "rate", ")", ":", "\n", "    ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "opt", ",", "lambda", "n", ":", "1.0", "if", "n", "<", "eq_steps", "else", "start", "*", "rate", "**", "(", "n", "-", "eq_steps", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.train.train": [[61, 320], ["tqdm.auto.trange", "wf.mol.data.get", "log.info", "optimizer_factory", "getattr.", "wf.load_state_dict", "optimizer_factory.load_state_dict", "log.info", "ewm.EWMMonitor", "log.info", "pathlib.Path", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter.add_text", "chkpts_dir.mkdir", "sampler_factory", "log.info", "log.info", "log.debug", "h5py.File", "utils.H5LogTable", "utils.H5LogTable.resize", "h5py.File.flush", "log.debug", "functools.partial", "functools.partial.", "tqdm.auto.trange.close", "wf.parameters", "log.info", "log.info", "log.info", "scheduler_factory.load_state_dict", "log.info", "log.info", "sampling.LangevinSampler.from_wf", "tqdm.auto.tqdm", "next", "fit.LossEnergy", "LangevinSampler.from_wf.iter_batches", "ewm.EWMMonitor.update", "ewm.EWMMonitor.blowup.get", "ewm.EWMMonitor.mean_of", "chkpts.append", "log.warning", "log.debug", "enumerate", "sorted", "log.debug", "errors.TrainingCrash", "torch.utils.tensorboard.SummaryWriter.close", "h5py.File.close", "wf.parameters", "OPTIMIZER_KWARGS.get", "optimizer_kwargs.get", "getattr", "wf.parameters", "log.info", "lr_scheduler[].islower", "getattr.", "itertools.count", "sampling.sample_wf", "ewm.EWMMonitor.blowup.get", "log.info", "tqdm.auto.trange.set_postfix", "time.time", "wf.state_dict", "optimizer_factory.state_dict", "copy.deepcopy", "scheduler_factory.step", "scheduler_factory.state_dict", "h5py.File.flush", "isinstance", "datetime.datetime.now().isoformat", "torch.save", "log.info", "reversed", "chkpts_dir.glob", "int", "SCHEDULER_KWARGS.get", "lr_scheduler_kwargs.get", "getattr", "ewm.EWMMonitor.mean_of", "LangevinSampler.from_wf.iter_with_info", "errors.TrainingBlowup", "log.warning", "log.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.save", "log.info", "torchext.is_cuda", "wf.state_dict", "log.debug", "errors.TrainingCrash", "log.debug", "errors.TrainingCrash", "locals().items", "functools.partial", "repr", "log.debug", "datetime.datetime.now", "state_file.stem.split", "torch.load", "math.log10", "locals", "torch.cuda.memory_summary().strip", "torch.cuda.memory_summary"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.load_state_dict", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.load_state_dict", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.Debuggable.debug", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils.H5LogTable.resize", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.Debuggable.debug", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.load_state_dict", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.from_wf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.iter_batches", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMMonitor.mean_of", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.Debuggable.debug", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.Debuggable.debug", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.sample_wf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.state_dict", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.state_dict", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.step", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.state_dict", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMMonitor.mean_of", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.iter_with_info", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.is_cuda", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.state_dict", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.Debuggable.debug", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.Debuggable.debug", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.Debuggable.debug"], ["", "def", "train", "(", "# noqa: C901", "\n", "wf", ",", "\n", "workdir", "=", "None", ",", "\n", "save_every", "=", "None", ",", "\n", "state", "=", "None", ",", "\n", "min_rewind", "=", "10", ",", "\n", "blowup_threshold", "=", "0.5", ",", "\n", "raise_blowup", "=", "True", ",", "\n", "return_every", "=", "None", ",", "\n", "chkpts", "=", "None", ",", "\n", "fit", "=", "None", ",", "\n", "optimizer_factory", "=", "None", ",", "\n", "scheduler_factory", "=", "None", ",", "\n", "sampler_factory", "=", "None", ",", "\n", "*", ",", "\n", "n_steps", "=", "10_000", ",", "\n", "batch_size", "=", "10_000", ",", "\n", "epoch_size", "=", "100", ",", "\n", "optimizer", "=", "'AdamW'", ",", "\n", "learning_rate", "=", "0.01", ",", "\n", "optimizer_kwargs", "=", "OPTIMIZER_KWARGS", ",", "\n", "lr_scheduler", "=", "'CyclicLR'", ",", "\n", "lr_scheduler_kwargs", "=", "SCHEDULER_KWARGS", ",", "\n", "equilibrate", "=", "True", ",", "\n", "fit_kwargs", "=", "None", ",", "\n", "sampler_kwargs", "=", "None", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Train a wave function model.\n\n    This is the main top-level entry point of the DeepQMC package. This function\n    initializes a :class:`~deepqmc.sampling.LangevinSampler`, an optimizer, a\n    learning rate scheduler, optionally restores a previously stored training\n    state, sets up a Tensorboard writer, and calls :func:`~deepqmc.fit.fit_wf`.\n\n    Args:\n        wf (:class:`~deepqmc.wf.WaveFunction`): wave function model to be trained\n        workdir (str): path where to store Tensorboard event file, intermediate\n            parameter states, and HDF5 file with the fit trajectory\n        save_every (int): number of steps between storing current parameter state\n        state (dict): restore optimizer and scheduler states from a stored state\n        n_steps (int): number of optimization steps\n        batch_size (int): number of samples used in a single step\n        epoch_size (int): number of steps between sampling from the wave function\n        optimizer (str): name of the optimizer from :mod:`torch.optim`\n        learning_rate (float): learning rate for gradient-descent optimizers\n        optimizer_kwargs (dict): extra arguments passed to the optimizers, organized\n            by optimizer name\n        lr_scheduler (str): name of the learning rate scheduling scheme\n\n            - :data:`None` -- no learning rate scheduling\n            - uppercase name -- name from :mod:`torch.optim.lr_scheduler`\n            - ``'inverse'`` -- :math:`\\mathrm{lr}(n):=1/(1+n/r)`, where *r*\n              is decay rate\n            - ``'scan'`` -- :math:`\\mathrm{lr})(n):=sr^{n-n_0}`\n        lr_scheduler_kwargs (dict): extra arguments passed to the scheduler,\n            organized by scheduler name\n        equilibrate (bool): whether to equilibrate sampler before training\n        fit_kwargs (dict): arguments passed to :func:`~deepqmc.fit.fit_wf`\n        sampler_kwargs (dict): arguments passed to\n            :class:`~deepqmc.sampling.LangevinSampler`\n    \"\"\"", "\n", "if", "optimizer_factory", ":", "\n", "        ", "opt", "=", "optimizer_factory", "(", "wf", ".", "parameters", "(", ")", ")", "\n", "", "elif", "'optimizer_factory'", "in", "PLUGINS", ":", "\n", "        ", "log", ".", "info", "(", "'Using a plugin for optimizer_factory'", ")", "\n", "opt", "=", "PLUGINS", "[", "'optimizer_factory'", "]", "(", "wf", ".", "parameters", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_kwargs", "=", "{", "\n", "**", "OPTIMIZER_KWARGS", ".", "get", "(", "optimizer", ",", "{", "}", ")", ",", "\n", "**", "optimizer_kwargs", ".", "get", "(", "optimizer", ",", "{", "}", ")", ",", "\n", "}", "\n", "log", ".", "info", "(", "\n", "f'Using {optimizer} optimizer, '", "\n", "f'lr = {learning_rate}, params = {optimizer_kwargs!r}'", "\n", ")", "\n", "opt", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer", ")", "(", "\n", "wf", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ",", "**", "optimizer_kwargs", "\n", ")", "\n", "", "if", "scheduler_factory", ":", "\n", "        ", "scheduler", "=", "scheduler_factory", "(", "opt", ")", "\n", "", "elif", "'scheduler_factory'", "in", "PLUGINS", ":", "\n", "        ", "log", ".", "info", "(", "'Using a plugin for scheduler_factory'", ")", "\n", "scheduler", "=", "PLUGINS", "[", "'scheduler_factory'", "]", "(", "opt", ")", "\n", "", "elif", "lr_scheduler", ":", "\n", "        ", "scheduler_kwargs", "=", "{", "\n", "**", "SCHEDULER_KWARGS", ".", "get", "(", "lr_scheduler", ",", "{", "}", ")", ",", "\n", "**", "lr_scheduler_kwargs", ".", "get", "(", "lr_scheduler", ",", "{", "}", ")", ",", "\n", "}", "\n", "log", ".", "info", "(", "f'Using {lr_scheduler} scheduler, params = {scheduler_kwargs!r}'", ")", "\n", "if", "lr_scheduler", "[", "0", "]", ".", "islower", "(", ")", ":", "\n", "            ", "scheduler_factory", "=", "{", "'inverse'", ":", "InverseLR", ",", "'scan'", ":", "ScanLR", "}", "[", "lr_scheduler", "]", "\n", "", "else", ":", "\n", "            ", "scheduler_factory", "=", "getattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "lr_scheduler", ")", "\n", "", "scheduler", "=", "scheduler_factory", "(", "opt", ",", "**", "scheduler_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "None", "\n", "# The convention here is that states/steps are numbered as slices/elements", "\n", "# in a Python list. For example, step 0 takes state 0 to state 1. The", "\n", "# progress bar really displays states, not steps, as it goes from 0 to", "\n", "# n_steps, that is, it goes through n_steps+1 states.", "\n", "", "if", "state", ":", "\n", "        ", "init_step", "=", "state", "[", "'step'", "]", "\n", "wf", ".", "load_state_dict", "(", "state", "[", "'wf'", "]", ")", "\n", "opt", ".", "load_state_dict", "(", "state", "[", "'opt'", "]", ")", "\n", "if", "scheduler", ":", "\n", "            ", "scheduler", ".", "load_state_dict", "(", "state", "[", "'scheduler'", "]", ")", "\n", "", "monitor", "=", "state", "[", "'monitor'", "]", "\n", "log", ".", "info", "(", "\n", "f'Restored from a state at step {init_step}, '", "\n", "f'energy {monitor.mean_of(\"mean_slow\"):S}'", "\n", ")", "\n", "", "else", ":", "\n", "        ", "init_step", "=", "0", "\n", "monitor", "=", "EWMMonitor", "(", "blowup_thre", "=", "blowup_threshold", ")", "\n", "", "if", "workdir", ":", "\n", "        ", "log", ".", "info", "(", "f'Will work in {workdir}'", ")", "\n", "workdir", "=", "Path", "(", "workdir", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "workdir", ",", "flush_secs", "=", "15", ",", "purge_step", "=", "init_step", "-", "1", ")", "\n", "writer", ".", "add_text", "(", "\n", "'hyperparameters'", ",", "\n", "''", ".", "join", "(", "f'**{key}** = {val}  \\n'", "for", "key", ",", "val", "in", "locals", "(", ")", ".", "items", "(", ")", ")", ",", "\n", ")", "\n", "chkpts_dir", "=", "workdir", "/", "'chkpts'", "\n", "chkpts_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "writer", "=", "None", "\n", "log_dict", "=", "{", "}", "\n", "", "if", "sampler_factory", ":", "\n", "        ", "sampler", "=", "sampler_factory", "(", "wf", ",", "writer", "=", "writer", ")", "\n", "", "elif", "'sampler_factory'", "in", "PLUGINS", ":", "\n", "        ", "log", ".", "info", "(", "'Using a plugin for sampler_factory'", ")", "\n", "sampler", "=", "PLUGINS", "[", "'sampler_factory'", "]", "(", "wf", ",", "writer", "=", "writer", ")", "\n", "", "else", ":", "\n", "        ", "log", ".", "info", "(", "f'Using LangevinSampler, params = {sampler_kwargs!r}'", ")", "\n", "sampler", "=", "LangevinSampler", ".", "from_wf", "(", "wf", ",", "writer", "=", "writer", ",", "**", "(", "sampler_kwargs", "or", "{", "}", ")", ")", "\n", "", "if", "equilibrate", ":", "\n", "        ", "log", ".", "info", "(", "'Equilibrating...'", ")", "\n", "with", "tqdm", "(", "count", "(", ")", ",", "desc", "=", "'equilibrating'", ",", "disable", "=", "None", ")", "as", "steps", ":", "\n", "            ", "next", "(", "\n", "sample_wf", "(", "wf", ",", "sampler", ".", "iter_with_info", "(", ")", ",", "steps", ",", "equilibrate", "=", "equilibrate", ")", "\n", ")", "\n", "", "log", ".", "info", "(", "'Equilibrated'", ")", "\n", "", "steps", "=", "trange", "(", "\n", "init_step", ",", "\n", "n_steps", ",", "\n", "initial", "=", "init_step", ",", "\n", "total", "=", "n_steps", ",", "\n", "desc", "=", "'training'", ",", "\n", "disable", "=", "None", ",", "\n", ")", "\n", "if", "workdir", ":", "\n", "        ", "log", ".", "debug", "(", "'Setting up HDF5 file...'", ")", "\n", "h5file", "=", "h5py", ".", "File", "(", "workdir", "/", "'fit.h5'", ",", "'a'", ",", "libver", "=", "'v110'", ")", "\n", "h5file", ".", "swmr_mode", "=", "True", "\n", "table", "=", "H5LogTable", "(", "h5file", ")", "\n", "table", ".", "resize", "(", "init_step", ")", "\n", "h5file", ".", "flush", "(", ")", "\n", "log", ".", "debug", "(", "'Done'", ")", "\n", "", "ref_ene", "=", "wf", ".", "mol", ".", "data", ".", "get", "(", "'ref_energies'", ")", "\n", "log", ".", "info", "(", "'Initializing training'", ")", "\n", "chkpts", "=", "chkpts", "if", "chkpts", "is", "not", "None", "else", "[", "]", "\n", "last_log", "=", "0", "\n", "if", "not", "fit", ":", "\n", "        ", "fit", "=", "partial", "(", "fit_wf", ",", "**", "(", "fit_kwargs", "or", "{", "}", ")", ")", "\n", "", "try", ":", "\n", "        ", "for", "step", ",", "_", "in", "fit", "(", "\n", "wf", ",", "\n", "LossEnergy", "(", ")", ",", "\n", "opt", ",", "\n", "sampler", ".", "iter_batches", "(", "\n", "batch_size", "=", "batch_size", ",", "\n", "epoch_size", "=", "epoch_size", ",", "\n", "range", "=", "partial", "(", "trange", ",", "desc", "=", "'sampling'", ",", "leave", "=", "False", ",", "disable", "=", "None", ")", "\n", "if", "epoch_size", ">", "1", "\n", "else", "range", ",", "\n", ")", ",", "\n", "steps", ",", "\n", "log_dict", "=", "table", ".", "row", "if", "workdir", "else", "log_dict", ",", "\n", "writer", "=", "writer", ",", "\n", ")", ":", "\n", "# at this point, the wf model and optimizer are already at state step+1", "\n", "            ", "monitor", ".", "update", "(", "table", "[", "'E_loc'", "]", "[", "-", "1", "]", "if", "workdir", "else", "log_dict", "[", "'E_loc'", "]", ")", "\n", "if", "monitor", ".", "blowup", ".", "get", "(", "'step'", ")", "==", "monitor", ".", "step", "-", "1", ":", "\n", "                ", "log", ".", "info", "(", "f'Detected EWM outlier in step {step}'", ")", "\n", "# now monitor is at state `step+1`. if blowup was detected, the", "\n", "# blowup is reported to occur at step `step`.", "\n", "", "if", "monitor", ".", "blowup", ".", "get", "(", "'in_blowup'", ")", ":", "\n", "                ", "if", "raise_blowup", ":", "\n", "                    ", "raise", "TrainingBlowup", "(", "repr", "(", "monitor", ".", "blowup", ")", ")", "\n", "", "else", ":", "\n", "                    ", "log", ".", "warning", "(", "f'Detected training blowup in step {step}'", ")", "\n", "", "", "energy", "=", "monitor", ".", "mean_of", "(", "'mean_slow'", ")", "\n", "if", "energy", ".", "std_dev", ">", "0", ":", "\n", "                ", "steps", ".", "set_postfix", "(", "E", "=", "f'{energy:S}'", ")", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "if", "(", "now", "-", "last_log", ")", ">", "60", ":", "\n", "                    ", "log", ".", "info", "(", "f'Progress: {step + 1}/{n_steps}, energy = {energy:S}'", ")", "\n", "last_log", "=", "now", "\n", "", "", "state", "=", "{", "\n", "'step'", ":", "step", "+", "1", ",", "\n", "'wf'", ":", "wf", ".", "state_dict", "(", ")", ",", "\n", "'opt'", ":", "opt", ".", "state_dict", "(", ")", ",", "\n", "'monitor'", ":", "deepcopy", "(", "monitor", ")", ",", "\n", "}", "\n", "if", "scheduler", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "state", "[", "'scheduler'", "]", "=", "scheduler", ".", "state_dict", "(", ")", "\n", "", "chkpts", ".", "append", "(", "(", "step", "+", "1", ",", "state", ")", ")", "\n", "chkpts", "=", "chkpts", "[", "-", "100", ":", "]", "\n", "if", "workdir", ":", "\n", "                ", "if", "ref_ene", ":", "\n", "                    ", "corr_ene", "=", "(", "energy", ".", "n", "-", "ref_ene", "[", "0", "]", ")", "/", "(", "ref_ene", "[", "1", "]", "-", "ref_ene", "[", "0", "]", ")", "\n", "writer", ".", "add_scalar", "(", "'corr_energy/error'", ",", "1", "-", "corr_ene", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "'corr_energy/logstep'", ",", "1", "-", "corr_ene", ",", "100", "*", "log10", "(", "step", "+", "1", ")", "\n", ")", "\n", "", "table", ".", "row", "[", "'E_ewm'", "]", "=", "energy", ".", "n", "\n", "h5file", ".", "flush", "(", ")", "\n", "if", "save_every", "and", "(", "step", "+", "1", ")", "%", "save_every", "==", "0", ":", "\n", "                    ", "state_file", "=", "chkpts_dir", "/", "f'state-{step + 1:05d}.pt'", "\n", "torch", ".", "save", "(", "state", ",", "state_file", ")", "\n", "log", ".", "info", "(", "f'Saved state in {state_file}'", ")", "\n", "if", "is_cuda", "(", "wf", ")", ":", "\n", "                        ", "log", ".", "debug", "(", "\n", "'\\n'", "+", "torch", ".", "cuda", ".", "memory_summary", "(", "abbreviated", "=", "True", ")", ".", "strip", "(", ")", "\n", ")", "\n", "", "", "", "if", "return_every", "and", "(", "step", "+", "1", ")", "%", "return_every", "==", "0", ":", "\n", "                ", "return", "True", "\n", "", "", "", "except", "(", "NanError", ",", "TrainingBlowup", ")", "as", "e", ":", "\n", "        ", "step", "=", "steps", ".", "n", "\n", "log", ".", "warning", "(", "f'Caught exception in step {step}: {e!r}'", ")", "\n", "if", "isinstance", "(", "e", ",", "NanError", ")", "and", "workdir", ":", "\n", "            ", "dump", "=", "{", "'wf'", ":", "wf", ".", "state_dict", "(", ")", ",", "'rs'", ":", "e", ".", "rs", "}", "\n", "now", "=", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", "timespec", "=", "'seconds'", ")", "\n", "torch", ".", "save", "(", "dump", ",", "workdir", "/", "f'nanerror-{step:05d}-{now}.pt'", ")", "\n", "", "if", "monitor", ".", "blowup", ":", "\n", "            ", "log", ".", "info", "(", "'Exception while in blowup detection mode'", ")", "\n", "blowup_step", "=", "monitor", ".", "blowup", "[", "'init'", "]", "\n", "", "else", ":", "\n", "            ", "blowup_step", "=", "step", "\n", "", "target_step", "=", "blowup_step", "-", "min_rewind", "\n", "log", ".", "debug", "(", "f'Need to rewind at least to: {target_step}'", ")", "\n", "for", "i", ",", "(", "step", ",", "state", ")", "in", "enumerate", "(", "reversed", "(", "chkpts", ")", ")", ":", "\n", "            ", "if", "step", "<=", "target_step", ":", "\n", "                ", "log", ".", "debug", "(", "f'Found a restart step in memory: {step}'", ")", "\n", "chkpts", "=", "chkpts", "[", ":", "-", "i", "]", "\n", "raise", "TrainingCrash", "(", "state", ",", "chkpts", ")", "from", "e", "\n", "", "", "for", "state_file", "in", "sorted", "(", "chkpts_dir", ".", "glob", "(", "'state-*.pt'", ")", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "step", "=", "int", "(", "state_file", ".", "stem", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "if", "step", "<=", "target_step", ":", "\n", "                ", "log", ".", "debug", "(", "f'Found a restart step on disk: {step}'", ")", "\n", "raise", "TrainingCrash", "(", "torch", ".", "load", "(", "state_file", ")", ")", "from", "e", "\n", "", "", "log", ".", "debug", "(", "'Found no restart step'", ")", "\n", "raise", "TrainingCrash", "(", ")", "from", "e", "\n", "", "finally", ":", "\n", "        ", "steps", ".", "close", "(", ")", "\n", "if", "workdir", ":", "\n", "            ", "writer", ".", "close", "(", ")", "\n", "h5file", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.errors.InfoException.__init__": [[5, 8], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "self", ".", "info", "=", "info", "or", "{", "}", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.errors.NanError.__init__": [[15, 18], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rs", "=", "rs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.errors.TrainingCrash.__init__": [[25, 29], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "state", "=", "None", ",", "chkpts", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "chkpts", "=", "chkpts", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_distance": [[10, 12], ["None"], "function", ["None"], ["def", "pairwise_distance", "(", "coords1", ",", "coords2", ")", ":", "\n", "    ", "return", "(", "coords1", "[", "...", ",", ":", ",", "None", ",", ":", "]", "-", "coords2", "[", "...", ",", "None", ",", ":", ",", ":", "]", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_self_distance": [[14, 23], ["numpy.triu_indices", "diffs[].norm", "diffs.new_zeros"], "function", ["None"], ["", "def", "pairwise_self_distance", "(", "coords", ",", "full", "=", "False", ")", ":", "\n", "    ", "i", ",", "j", "=", "np", ".", "triu_indices", "(", "coords", ".", "shape", "[", "-", "2", "]", ",", "k", "=", "1", ")", "\n", "diffs", "=", "coords", "[", "...", ",", ":", ",", "None", ",", ":", "]", "-", "coords", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", "dists", "=", "diffs", "[", "...", ",", "i", ",", "j", ",", ":", "]", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "if", "full", ":", "\n", "        ", "dists_full", "=", "diffs", ".", "new_zeros", "(", "diffs", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "dists_full", "[", "...", ",", "i", ",", "j", "]", "=", "dists_full", "[", "...", ",", "j", ",", "i", "]", "=", "dists", "\n", "dists", "=", "dists_full", "\n", "", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_diffs": [[25, 30], ["torch.cat", "physics.offset_from_axes"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.offset_from_axes"], ["", "def", "pairwise_diffs", "(", "coords1", ",", "coords2", ",", "axes_offset", "=", "True", ")", ":", "\n", "    ", "diffs", "=", "coords1", "[", "...", ",", ":", ",", "None", ",", ":", "]", "-", "coords2", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", "if", "axes_offset", ":", "\n", "        ", "diffs", "=", "offset_from_axes", "(", "diffs", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "diffs", ",", "(", "diffs", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.diffs_to_nearest_nuc": [[32, 36], ["physics.pairwise_diffs", "zs[].min", "torch.arange", "len"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_diffs"], ["", "def", "diffs_to_nearest_nuc", "(", "rs", ",", "coords", ")", ":", "\n", "    ", "zs", "=", "pairwise_diffs", "(", "rs", ",", "coords", ")", "\n", "idxs", "=", "zs", "[", "...", ",", "-", "1", "]", ".", "min", "(", "dim", "=", "-", "1", ")", ".", "indices", "\n", "return", "zs", "[", "torch", ".", "arange", "(", "len", "(", "rs", ")", ")", ",", "idxs", "]", ",", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.offset_from_axes": [[38, 42], ["rs.new_tensor", "torch.where", "torch.where", "rs.abs", "torch.finfo"], "function", ["None"], ["", "def", "offset_from_axes", "(", "rs", ")", ":", "\n", "    ", "eps", "=", "rs", ".", "new_tensor", "(", "100", "*", "torch", ".", "finfo", "(", "rs", ".", "dtype", ")", ".", "eps", ")", "\n", "offset", "=", "torch", ".", "where", "(", "rs", "<", "0", ",", "-", "eps", ",", "eps", ")", "\n", "return", "torch", ".", "where", "(", "rs", ".", "abs", "(", ")", "<", "eps", ",", "rs", "+", "offset", ",", "rs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.nuclear_energy": [[44, 48], ["coulombs.triu().sum", "coulombs.triu"], "function", ["None"], ["", "def", "nuclear_energy", "(", "mol", ")", ":", "\n", "    ", "coords", ",", "charges", "=", "mol", ".", "coords", ",", "mol", ".", "charges", "\n", "coulombs", "=", "charges", "[", ":", ",", "None", "]", "*", "charges", "/", "(", "coords", "[", ":", ",", "None", "]", "-", "coords", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "return", "coulombs", ".", "triu", "(", "1", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.nuclear_potential": [[50, 53], ["None"], "function", ["None"], ["", "def", "nuclear_potential", "(", "rs", ",", "mol", ")", ":", "\n", "    ", "dists", "=", "(", "rs", "[", ":", ",", ":", ",", "None", "]", "-", "mol", ".", "coords", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "return", "-", "(", "mol", ".", "charges", "/", "dists", ")", ".", "sum", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.electronic_potential": [[55, 59], ["numpy.triu_indices", "[].norm"], "function", ["None"], ["", "def", "electronic_potential", "(", "rs", ")", ":", "\n", "    ", "i", ",", "j", "=", "np", ".", "triu_indices", "(", "rs", ".", "shape", "[", "-", "2", "]", ",", "k", "=", "1", ")", "\n", "dists", "=", "(", "rs", "[", ":", ",", ":", ",", "None", "]", "-", "rs", "[", ":", ",", "None", ",", ":", "]", ")", "[", ":", ",", "i", ",", "j", "]", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "return", "(", "1", "/", "dists", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.quantum_force": [[61, 66], ["grad.grad", "torch.isnan().any", "errors.NanError", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad"], ["", "def", "quantum_force", "(", "rs", ",", "wf", ")", ":", "\n", "    ", "forces", ",", "psis", "=", "grad", "(", "rs", ",", "wf", ")", "\n", "if", "torch", ".", "isnan", "(", "psis", "[", "0", "]", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "NanError", "(", "rs", ")", "\n", "", "return", "forces", ",", "psis", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.crossover_parameter": [[77, 84], ["fs.new_tensor", "torch.finfo", "zs.norm", "fs.norm().clamp", "fs.norm"], "function", ["None"], ["", "def", "crossover_parameter", "(", "zs", ",", "fs", ",", "charges", ")", ":", "\n", "    ", "zs", ",", "zs_2", "=", "zs", "[", "...", ",", ":", "3", "]", ",", "zs", "[", "...", ",", "3", "]", "\n", "eps", "=", "fs", ".", "new_tensor", "(", "torch", ".", "finfo", "(", "fs", ".", "dtype", ")", ".", "tiny", ")", "\n", "zs_unit", "=", "zs", "/", "zs", ".", "norm", "(", "dim", "=", "-", "1", ")", "[", "...", ",", "None", "]", "\n", "fs_unit", "=", "fs", "/", "fs", ".", "norm", "(", "dim", "=", "-", "1", ")", ".", "clamp", "(", "eps", ",", "None", ")", "[", "...", ",", "None", "]", "\n", "Z2z2", "=", "charges", "**", "2", "*", "zs_2", "\n", "return", "(", "1", "+", "(", "fs_unit", "*", "zs_unit", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "/", "2", "+", "Z2z2", "/", "(", "10", "*", "(", "4", "+", "Z2z2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.clean_force": [[86, 105], ["physics.diffs_to_nearest_nuc", "zs.view.view", "crossover_parameter().view", "rs.new_tensor", "torch.min", "rs.flatten", "len", "len", "zs.view.new_tensor", "physics.crossover_parameter", "torch.sqrt", "torch.finfo", "zs[].sqrt", "zs.view.flatten", "forces.flatten", "forces.norm().clamp", "forces.norm"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.diffs_to_nearest_nuc", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.crossover_parameter"], ["", "def", "clean_force", "(", "forces", ",", "rs", ",", "mol", ",", "*", ",", "tau", ",", "return_a", "=", "False", ")", ":", "\n", "    ", "zs", ",", "idxs", "=", "diffs_to_nearest_nuc", "(", "rs", ".", "flatten", "(", "end_dim", "=", "1", ")", ",", "mol", ".", "coords", ")", "\n", "zs", "=", "zs", ".", "view", "(", "len", "(", "rs", ")", ",", "-", "1", ",", "4", ")", "\n", "a", "=", "crossover_parameter", "(", "\n", "zs", ".", "flatten", "(", "end_dim", "=", "1", ")", ",", "forces", ".", "flatten", "(", "end_dim", "=", "1", ")", ",", "mol", ".", "charges", "[", "idxs", "]", "\n", ")", ".", "view", "(", "len", "(", "rs", ")", ",", "-", "1", ")", "\n", "av2tau", "=", "a", "*", "(", "forces", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "*", "tau", "\n", "# av2tau can be small or zero, so the following expression must handle that", "\n", "factors", "=", "2", "/", "(", "torch", ".", "sqrt", "(", "1", "+", "2", "*", "av2tau", ")", "+", "1", ")", "\n", "forces", "=", "factors", "[", "...", ",", "None", "]", "*", "forces", "\n", "eps", "=", "rs", ".", "new_tensor", "(", "torch", ".", "finfo", "(", "rs", ".", "dtype", ")", ".", "eps", ")", "\n", "norm_factors", "=", "torch", ".", "min", "(", "\n", "zs", ".", "new_tensor", "(", "1.0", ")", ",", "\n", "zs", "[", "...", ",", "-", "1", "]", ".", "sqrt", "(", ")", "/", "(", "tau", "*", "forces", ".", "norm", "(", "dim", "=", "-", "1", ")", ".", "clamp", "(", "eps", ",", "None", ")", ")", ",", "\n", ")", "\n", "forces", "=", "forces", "*", "norm_factors", "[", "...", ",", "None", "]", "\n", "if", "return_a", ":", "\n", "        ", "return", "forces", ",", "a", "\n", "", "return", "forces", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.local_energy": [[107, 129], ["physics.nuclear_energy", "physics.nuclear_potential", "physics.electronic_potential", "grad.laplacian", "torch.isnan().any", "errors.NanError", "torch.isnan", "log_psis.detach"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.nuclear_energy", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.nuclear_potential", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.electronic_potential", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.laplacian"], ["", "def", "local_energy", "(", "\n", "rs", ",", "wf", ",", "mol", "=", "None", ",", "create_graph", "=", "False", ",", "keep_graph", "=", "None", ",", "return_grad", "=", "False", "\n", ")", ":", "\n", "    ", "mol", "=", "mol", "or", "wf", ".", "mol", "\n", "Es_nuc", "=", "nuclear_energy", "(", "mol", ")", "\n", "Vs_nuc", "=", "nuclear_potential", "(", "rs", ",", "mol", ")", "\n", "Vs_el", "=", "electronic_potential", "(", "rs", ")", "\n", "lap_log_psis", ",", "(", "log_psis", ",", "sign_psis", ")", ",", "quantum_force", "=", "laplacian", "(", "\n", "rs", ",", "wf", ",", "create_graph", "=", "create_graph", ",", "keep_graph", "=", "keep_graph", ",", "return_grad", "=", "True", "\n", ")", "\n", "if", "torch", ".", "isnan", "(", "log_psis", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "NanError", "(", "rs", ")", "\n", "", "Es_loc", "=", "(", "\n", "-", "0.5", "*", "(", "lap_log_psis", "+", "(", "quantum_force", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ")", ")", "\n", "+", "Vs_nuc", "\n", "+", "Vs_el", "\n", "+", "Es_nuc", "\n", ")", "\n", "result", "=", "Es_loc", ",", "log_psis", "if", "keep_graph", "else", "log_psis", ".", "detach", "(", ")", ",", "sign_psis", "\n", "if", "return_grad", ":", "\n", "        ", "result", "+=", "(", "quantum_force", ",", ")", "\n", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad": [[6, 16], ["f", "torch.autograd.grad", "xs.detach().requires_grad_", "isinstance", "torch.ones_like", "isinstance", "f.detach", "xs.detach", "ys_g.detach"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad"], ["def", "grad", "(", "xs", ",", "f", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "xs", "=", "xs", "if", "xs", ".", "requires_grad", "else", "xs", ".", "detach", "(", ")", ".", "requires_grad_", "(", ")", "\n", "ys", "=", "f", "(", "xs", ")", "\n", "(", "ys_g", ",", "*", "other", ")", "=", "ys", "if", "isinstance", "(", "ys", ",", "tuple", ")", "else", "(", "ys", ",", "(", ")", ")", "\n", "(", "grad_ys", ",", ")", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "ys_g", ",", "xs", ",", "torch", ".", "ones_like", "(", "ys_g", ")", ",", "create_graph", "=", "create_graph", "\n", ")", "\n", "if", "not", "create_graph", ":", "\n", "        ", "ys", "=", "(", "ys_g", ".", "detach", "(", ")", ",", "*", "other", ")", "if", "isinstance", "(", "ys", ",", "tuple", ")", "else", "ys", ".", "detach", "(", ")", "\n", "", "return", "grad_ys", ",", "ys", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.laplacian": [[18, 37], ["torch.stack", "f", "torch.ones_like", "torch.autograd.grad", "sum", "xi.requires_grad_", "torch.stack.view_as", "isinstance", "xs.flatten().t", "isinstance", "f.detach", "dy_dxs.detach().view_as", "torch.autograd.grad", "zip", "ys_g.detach", "xs.flatten", "dy_dxs.detach", "range", "len"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad"], ["", "def", "laplacian", "(", "xs", ",", "f", ",", "create_graph", "=", "False", ",", "keep_graph", "=", "None", ",", "return_grad", "=", "False", ")", ":", "\n", "    ", "xis", "=", "[", "xi", ".", "requires_grad_", "(", ")", "for", "xi", "in", "xs", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "t", "(", ")", "]", "\n", "xs_flat", "=", "torch", ".", "stack", "(", "xis", ",", "dim", "=", "1", ")", "\n", "ys", "=", "f", "(", "xs_flat", ".", "view_as", "(", "xs", ")", ")", "\n", "(", "ys_g", ",", "*", "other", ")", "=", "ys", "if", "isinstance", "(", "ys", ",", "tuple", ")", "else", "(", "ys", ",", "(", ")", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "ys_g", ")", "\n", "(", "dy_dxs", ",", ")", "=", "torch", ".", "autograd", ".", "grad", "(", "ys_g", ",", "xs_flat", ",", "ones", ",", "create_graph", "=", "True", ")", "\n", "lap_ys", "=", "sum", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "\n", "dy_dxi", ",", "xi", ",", "ones", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "create_graph", "\n", ")", "[", "0", "]", "\n", "for", "xi", ",", "dy_dxi", "in", "zip", "(", "xis", ",", "(", "dy_dxs", "[", "...", ",", "i", "]", "for", "i", "in", "range", "(", "len", "(", "xis", ")", ")", ")", ")", "\n", ")", "\n", "if", "not", "(", "create_graph", "if", "keep_graph", "is", "None", "else", "keep_graph", ")", ":", "\n", "        ", "ys", "=", "(", "ys_g", ".", "detach", "(", ")", ",", "*", "other", ")", "if", "isinstance", "(", "ys", ",", "tuple", ")", "else", "ys", ".", "detach", "(", ")", "\n", "", "result", "=", "lap_ys", ",", "ys", "\n", "if", "return_grad", ":", "\n", "        ", "result", "+=", "(", "dy_dxs", ".", "detach", "(", ")", ".", "view_as", "(", "xs", ")", ",", ")", "\n", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.__init__": [[57, 66], ["torch.nn.Module.__init__", "molecule.Molecule.register_buffer", "molecule.Molecule.register_buffer", "len", "len", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["def", "__init__", "(", "self", ",", "coords", ",", "charges", ",", "charge", ",", "spin", ",", "unit", "=", "'bohr'", ",", "data", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "coords", ")", "==", "len", "(", "charges", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "unit_multiplier", "=", "{", "'bohr'", ":", "1.0", ",", "'angstrom'", ":", "angstrom", "}", "[", "unit", "]", "\n", "self", ".", "register_buffer", "(", "'coords'", ",", "unit_multiplier", "*", "torch", ".", "as_tensor", "(", "coords", ")", ")", "\n", "self", ".", "register_buffer", "(", "'charges'", ",", "1.0", "*", "torch", ".", "as_tensor", "(", "charges", ")", ")", "\n", "self", ".", "charge", "=", "charge", "\n", "self", ".", "spin", "=", "spin", "\n", "self", ".", "data", "=", "data", "or", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "charges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.__iter__": [[70, 72], ["zip"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "yield", "from", "zip", "(", "self", ".", "coords", ",", "self", ".", "charges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.__repr__": [[73, 76], ["molecule.Molecule.coords.cpu().numpy", "molecule.Molecule.charges.cpu().numpy", "molecule.Molecule.coords.cpu", "molecule.Molecule.charges.cpu"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "'Molecule(coords=\\n'", "\n", "f'{self.coords.cpu().numpy()},\\n'", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.as_pyscf": [[82, 86], ["str", "coord.cpu().numpy", "int", "charge.cpu().numpy", "coord.cpu", "charge.cpu"], "methods", ["None"], ["", "def", "as_pyscf", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "str", "(", "int", "(", "charge", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ",", "coord", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "coord", ",", "charge", "in", "self", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.from_name": [[88, 101], ["copy.deepcopy.pop", "cls", "copy.deepcopy", "copy.deepcopy.update"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update"], ["", "@", "classmethod", "\n", "def", "from_name", "(", "cls", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Create a molecule from a database of named molecules.\n\n        The available names are in :attr:`Molecule.all_names`.\n        \"\"\"", "\n", "if", "name", "in", "_SYSTEMS", ":", "\n", "            ", "system", "=", "deepcopy", "(", "_SYSTEMS", "[", "name", "]", ")", "\n", "system", ".", "update", "(", "kwargs", ")", "\n", "", "elif", "name", "in", "_SYSTEM_FACTORIES", ":", "\n", "            ", "system", "=", "_SYSTEM_FACTORIES", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "", "coords", "=", "system", ".", "pop", "(", "'coords'", ")", "\n", "return", "cls", "(", "coords", ",", "**", "system", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils.H5LogTable.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "group", ")", ":", "\n", "        ", "self", ".", "_group", "=", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils.H5LogTable.__getitem__": [[11, 13], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "_group", "[", "label", "]", "if", "label", "in", "self", ".", "_group", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils.H5LogTable.resize": [[14, 17], ["utils.H5LogTable._group.values", "ds.resize"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils.H5LogTable.resize"], ["", "def", "resize", "(", "self", ",", "size", ")", ":", "\n", "        ", "for", "ds", "in", "self", ".", "_group", ".", "values", "(", ")", ":", "\n", "            ", "ds", ".", "resize", "(", "size", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils.H5LogTable.row": [[19, 42], ["Appender", "isinstance", "ds.resize", "isinstance", "isinstance", "utils.H5LogTable._group.create_dataset", "isinstance"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils.H5LogTable.resize"], ["", "", "@", "property", "\n", "def", "row", "(", "self", ")", ":", "\n", "        ", "class", "Appender", ":", "\n", "            ", "def", "__setitem__", "(", "_", ",", "label", ",", "row", ")", ":", "# noqa: B902, N805", "\n", "                ", "if", "isinstance", "(", "row", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "shape", "=", "row", ".", "shape", "\n", "", "elif", "isinstance", "(", "row", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "                    ", "shape", "=", "(", ")", "\n", "", "if", "label", "not", "in", "self", ".", "_group", ":", "\n", "                    ", "if", "isinstance", "(", "row", ",", "np", ".", "ndarray", ")", ":", "\n", "                        ", "dtype", "=", "row", ".", "dtype", "\n", "", "elif", "isinstance", "(", "row", ",", "float", ")", ":", "\n", "                        ", "dtype", "=", "float", "\n", "", "else", ":", "\n", "                        ", "dtype", "=", "None", "\n", "", "self", ".", "_group", ".", "create_dataset", "(", "\n", "label", ",", "(", "0", ",", "*", "shape", ")", ",", "maxshape", "=", "(", "None", ",", "*", "shape", ")", ",", "dtype", "=", "dtype", "\n", ")", "\n", "", "ds", "=", "self", ".", "_group", "[", "label", "]", "\n", "ds", ".", "resize", "(", "ds", ".", "shape", "[", "0", "]", "+", "1", ",", "axis", "=", "0", ")", "\n", "ds", "[", "-", "1", ",", "...", "]", "=", "row", "\n", "\n", "", "", "return", "Appender", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils._EnergyOffset.__call__": [[47, 51], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "offset", ")", ":", "\n", "        ", "assert", "self", ".", "value", "is", "None", "\n", "self", ".", "value", "=", "offset", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils._EnergyOffset.__enter__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils._EnergyOffset.__exit__": [[55, 59], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "assert", "self", ".", "value", "is", "not", "None", "\n", "self", ".", "value", "=", "None", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils._EnergyOffset.__rsub__": [[60, 62], ["None"], "methods", ["None"], ["", "def", "__rsub__", "(", "self", ",", "base", ")", ":", "\n", "        ", "return", "base", "-", "self", ".", "value", "if", "self", ".", "value", "else", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils.apply_resampling": [[67, 73], ["len", "torch.multinomial", "ValueError"], "function", ["None"], ["def", "apply_resampling", "(", "weights", ":", "torch", ".", "Tensor", ",", "strategy", ":", "str", ")", ":", "\n", "    ", "num_samples", "=", "len", "(", "weights", ")", "\n", "if", "strategy", "==", "'multinomial'", ":", "\n", "        ", "return", "torch", ".", "multinomial", "(", "weights", ",", "num_samples", ",", "replacement", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown resampling strategy {strategy}.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.__init__": [[127, 129], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.state_dict": [[130, 132], ["sampling.Sampler.state.copy"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.load_state_dict": [[133, 141], ["sampling.Sampler.state.items", "isinstance", "value.to.to.is_floating_point", "value.to.to.to", "value.to.to.to"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "state", ".", "items", "(", ")", ":", "\n", "            ", "value", "=", "state_dict", "[", "name", "]", "\n", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "if", "value", ".", "is_floating_point", "(", ")", ":", "\n", "                    ", "value", "=", "value", ".", "to", "(", "param", ".", "dtype", ")", "\n", "", "value", "=", "value", ".", "to", "(", "param", ".", "device", ")", "\n", "", "self", ".", "state", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.__init__": [[172, 213], ["sampling.Sampler.__init__", "rs.clone", "rs.new_zeros", "sampling.MetropolisSampler.recompute_psi", "torch.zeros_like", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.recompute_psi"], ["def", "__init__", "(", "\n", "self", ",", "\n", "wf", ",", "\n", "rs", ",", "\n", "writer", "=", "None", ",", "\n", "*", ",", "\n", "tau", "=", "0.1", ",", "\n", "n_first_certain", "=", "3", ",", "\n", "target_acceptance", "=", "0.57", ",", "\n", "n_discard", "=", "50", ",", "\n", "n_decorrelate", "=", "1", ",", "\n", "keep_walker_weights", "=", "False", ",", "\n", "resampling_frequency", "=", "None", ",", "\n", "max_age", "=", "None", ",", "\n", "log_psi_threshold", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "n_first_certain", ">", "0", "and", "n_discard", "<=", "n_first_certain", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Setting n_first_certain > 0 and n_discard <= n_first_certain would'", "\n", "' make some of the returned samples very noisy.'", "\n", ")", "\n", "", "if", "not", "keep_walker_weights", "and", "resampling_frequency", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot use resampling if walker weights are turned off.'", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wf", "=", "wf", "\n", "self", ".", "max_age", "=", "max_age", "\n", "self", ".", "n_first_certain", "=", "n_first_certain", "\n", "self", ".", "log_psi_threshold", "=", "log_psi_threshold", "\n", "self", ".", "target_acceptance", "=", "target_acceptance", "\n", "self", ".", "n_discard", "=", "n_discard", "\n", "self", ".", "n_decorrelate", "=", "n_decorrelate", "\n", "self", ".", "keep_walker_weights", "=", "keep_walker_weights", "\n", "self", ".", "resampling_frequency", "=", "resampling_frequency", "\n", "self", ".", "state", "[", "'rs'", "]", "=", "rs", ".", "clone", "(", ")", "\n", "self", ".", "state", "[", "'log_weights'", "]", "=", "rs", ".", "new_zeros", "(", "rs", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "state", "[", "'tau'", "]", "=", "tau", "\n", "self", ".", "state", "[", "'step'", "]", "=", "0", "\n", "self", ".", "recompute_psi", "(", ")", "\n", "self", ".", "state", "[", "'ages'", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "log_psis", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "_step_writer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.rs": [[214, 217], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "'rs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.log_psis": [[218, 221], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_psis", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "'log_psis'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.sign_psis": [[222, 225], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sign_psis", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "'sign_psis'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.log_weights": [[226, 229], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "'log_weights'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler._ages": [[230, 233], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_ages", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "'ages'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.tau": [[234, 237], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tau", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "'tau'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler._walker_state_keys": [[238, 241], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_walker_state_keys", "(", "self", ")", ":", "\n", "        ", "return", "[", "'rs'", ",", "'log_psis'", ",", "'sign_psis'", ",", "'ages'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.proposal": [[242, 244], ["torch.randn_like"], "methods", ["None"], ["", "def", "proposal", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rs", "+", "torch", ".", "randn_like", "(", "self", ".", "rs", ")", "*", "self", ".", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.acceptance_prob": [[245, 252], ["torch.exp", "sampling.MetropolisSampler.wf"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf"], ["", "def", "acceptance_prob", "(", "self", ",", "rs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", ":", "\n", "            ", "log_psis", ",", "sign_psis", "=", "self", ".", "wf", "(", "rs", ")", "\n", "", "Ps_acc", "=", "torch", ".", "exp", "(", "2", "*", "(", "log_psis", "-", "self", ".", "log_psis", ")", ")", "\n", "# Ps_acc might become 0 or inf, however this does not affect", "\n", "# the stability of the remaining code", "\n", "return", "Ps_acc", ",", "log_psis", ",", "sign_psis", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.extra_writer": [[253, 255], ["None"], "methods", ["None"], ["", "def", "extra_writer", "(", "self", ")", ":", "\n", "        ", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.__len__": [[256, 258], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "rs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.__repr__": [[259, 262], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f'<{self.__class__.__name__} sample_size={self.rs.shape[0]} '", "\n", "'n_electrons={self.rs.shape[1]} tau={self.tau}>'", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.from_wf": [[265, 280], ["sampling.rand_from_mol", "cls", "wf.pop_charges"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.rand_from_mol", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.pop_charges"], ["", "@", "classmethod", "\n", "def", "from_wf", "(", "cls", ",", "wf", ",", "*", ",", "sample_size", "=", "2_000", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initialize a sampler with random initial walker positions.\n\n        The walker positions are sampled from Gaussians centered on atoms, with\n        charge distribution optionally supplied by the wave function ansatz,\n        otherwise taken from the nuclear charges.\n\n        Args:\n            wf (:class:`~deepqmc.wf.WaveFunction`): wave function to be sampled from\n            sample_size (int): number of Markov-chain walkers\n            kwargs: all other arguments are passed to the constructor\n        \"\"\"", "\n", "rs", "=", "rand_from_mol", "(", "wf", ".", "mol", ",", "sample_size", ",", "wf", ".", "pop_charges", "(", ")", ")", "\n", "return", "cls", "(", "wf", ",", "rs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.step": [[281, 339], ["sampling.MetropolisSampler.proposal", "sampling.MetropolisSampler.acceptance_prob", "torch.rand_like", "torch.ones_like", "torch.ones_like.type().sum().item", "sampling.MetropolisSampler._ages.cpu().numpy", "torch.zeros_like", "sampling.MetropolisSampler.writer.add_scalar", "sampling.MetropolisSampler.writer.add_scalar", "sampling.MetropolisSampler.writer.add_scalar", "sampling.MetropolisSampler.writer.add_scalar", "sampling.MetropolisSampler.writer.add_scalar", "sampling.MetropolisSampler.writer.add_scalar", "sampling.MetropolisSampler.extra_writer", "sampling.MetropolisSampler.rs.clone", "sampling.MetropolisSampler.log_psis.clone", "sampling.MetropolisSampler.sign_psis.clone", "sampling.MetropolisSampler.log_weights.clone", "max", "sampling.MetropolisSampler.log_psis.mean", "sampling.MetropolisSampler.mean", "info[].max", "numpy.sqrt", "torch.ones_like.type().sum", "sampling.MetropolisSampler._ages.cpu", "sampling.MetropolisSampler.", "torch.ones_like.type"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.proposal", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.acceptance_prob", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.extra_writer", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "rs", "=", "self", ".", "proposal", "(", ")", "\n", "Ps_acc", ",", "log_psis", ",", "sign_psis", ",", "extra_vars", "=", "self", ".", "acceptance_prob", "(", "rs", ")", "\n", "accepted", "=", "Ps_acc", ">", "torch", ".", "rand_like", "(", "Ps_acc", ")", "\n", "if", "self", ".", "log_psi_threshold", "is", "not", "None", ":", "\n", "            ", "accepted", "=", "accepted", "&", "(", "log_psis", ">", "self", ".", "log_psi_threshold", ")", "|", "(", "\n", "(", "self", ".", "log_psis", "<", "self", ".", "log_psi_threshold", ")", "&", "(", "log_psis", ">", "self", ".", "log_psis", ")", "\n", ")", "\n", "", "if", "self", ".", "max_age", "is", "not", "None", ":", "\n", "            ", "accepted", "=", "accepted", "|", "(", "self", ".", "_ages", ">=", "self", ".", "max_age", ")", "\n", "", "if", "self", ".", "state", "[", "'step'", "]", "<", "self", ".", "n_first_certain", ":", "\n", "            ", "accepted", "=", "torch", ".", "ones_like", "(", "accepted", ")", "\n", "", "self", ".", "_ages", "[", "~", "accepted", "]", "+=", "1", "\n", "acceptance", "=", "accepted", ".", "type", "(", "torch", ".", "int", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "self", ".", "rs", ".", "shape", "[", "0", "]", "\n", "info", "=", "{", "\n", "'acceptance'", ":", "acceptance", ",", "\n", "'age'", ":", "self", ".", "_ages", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'tau'", ":", "self", ".", "tau", ",", "\n", "}", "\n", "state", "=", "{", "\n", "'rs'", ":", "rs", ",", "\n", "'log_psis'", ":", "log_psis", ",", "\n", "'sign_psis'", ":", "sign_psis", ",", "\n", "'ages'", ":", "torch", ".", "zeros_like", "(", "self", ".", "_ages", ")", ",", "\n", "**", "extra_vars", ",", "\n", "}", "\n", "for", "k", "in", "self", ".", "_walker_state_keys", ":", "\n", "            ", "self", ".", "state", "[", "k", "]", "[", "accepted", "]", "=", "state", "[", "k", "]", "[", "accepted", "]", "\n", "", "if", "self", ".", "target_acceptance", ":", "\n", "            ", "self", ".", "state", "[", "'tau'", "]", "/=", "self", ".", "target_acceptance", "/", "max", "(", "acceptance", ",", "0.05", ")", "\n", "", "self", ".", "state", "[", "'step'", "]", "+=", "1", "\n", "self", ".", "_step_writer", "+=", "1", "\n", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "\n", "'sampling/log_psis/mean'", ",", "self", ".", "log_psis", ".", "mean", "(", ")", ",", "self", ".", "_step_writer", "\n", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "'sampling/dists/mean'", ",", "\n", "pairwise_self_distance", "(", "self", ".", "rs", ")", ".", "mean", "(", ")", ",", "\n", "self", ".", "_step_writer", ",", "\n", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'sampling/acceptance'", ",", "acceptance", ",", "self", ".", "_step_writer", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'sampling/tau'", ",", "self", ".", "tau", ",", "self", ".", "_step_writer", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "'sampling/age/max'", ",", "info", "[", "'age'", "]", ".", "max", "(", ")", ",", "self", ".", "_step_writer", "\n", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "'sampling/age/rms'", ",", "\n", "np", ".", "sqrt", "(", "(", "info", "[", "'age'", "]", "**", "2", ")", ".", "mean", "(", ")", ")", ",", "\n", "self", ".", "_step_writer", ",", "\n", ")", "\n", "self", ".", "extra_writer", "(", ")", "\n", "", "return", "(", "\n", "self", ".", "rs", ".", "clone", "(", ")", ",", "\n", "self", ".", "log_psis", ".", "clone", "(", ")", ",", "\n", "self", ".", "sign_psis", ".", "clone", "(", ")", ",", "\n", "self", ".", "log_weights", ".", "clone", "(", ")", ",", "\n", "info", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.iter_with_info": [[341, 346], ["itertools.count", "sampling.MetropolisSampler.step"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.step"], ["", "def", "iter_with_info", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "count", "(", "-", "self", ".", "n_discard", ")", ":", "\n", "            ", "sample", "=", "self", ".", "step", "(", ")", "\n", "if", "i", ">=", "0", "and", "i", "%", "(", "self", ".", "n_decorrelate", "+", "1", ")", "==", "0", ":", "\n", "                ", "yield", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.__iter__": [[347, 350], ["sampling.MetropolisSampler.iter_with_info"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.iter_with_info"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "*", "sample", ",", "_", "in", "self", ".", "iter_with_info", "(", ")", ":", "\n", "            ", "yield", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.iter_batches": [[351, 376], ["math.ceil", "itertools.count", "sampling.samples_from", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "sampling.MetropolisSampler.restart", "len", "range", "sampling.MetropolisSampler.resample_walkers", "x.flatten"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.samples_from", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.restart", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.resample_walkers"], ["", "", "def", "iter_batches", "(", "self", ",", "*", ",", "epoch_size", ",", "batch_size", ",", "range", "=", "range", ")", ":", "\n", "        ", "\"\"\"Iterate over buffered batches sampled in epochs.\n\n        Each epoch, the wave function is sampled in one shot, the samples\n        are buffered, and used to form all batches within a given epoch, entirely\n        shuffled.\n\n        Args:\n            epoch_size (int): number of batches per epoch\n            batch_size (int): number of samples in a batch\n            range (callable): alternative to :class:`range`\n        \"\"\"", "\n", "n_total", "=", "epoch_size", "*", "batch_size", "\n", "n_steps", "=", "math", ".", "ceil", "(", "n_total", "/", "len", "(", "self", ")", ")", "\n", "for", "epoch_id", "in", "count", "(", "1", ")", ":", "\n", "            ", "xs", "=", "samples_from", "(", "self", ",", "range", "(", "n_steps", ")", ")", "\n", "samples_ds", "=", "TensorDataset", "(", "*", "(", "x", ".", "flatten", "(", "end_dim", "=", "1", ")", "[", ":", "n_total", "]", "for", "x", "in", "xs", ")", ")", "\n", "rs_dl", "=", "DataLoader", "(", "samples_ds", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "yield", "from", "rs_dl", "\n", "self", ".", "restart", "(", ")", "\n", "if", "(", "\n", "self", ".", "resampling_frequency", "is", "not", "None", "\n", "and", "epoch_id", "%", "self", ".", "resampling_frequency", "==", "0", "\n", ")", ":", "\n", "                ", "self", ".", "resample_walkers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.recompute_psi": [[377, 379], ["sampling.MetropolisSampler.wf"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf"], ["", "", "", "def", "recompute_psi", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "[", "'log_psis'", "]", ",", "self", ".", "state", "[", "'sign_psis'", "]", "=", "self", ".", "wf", "(", "self", ".", "rs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.resample_walkers": [[380, 386], ["sampling.MetropolisSampler.state[].exp", "utils.apply_resampling", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.utils.apply_resampling"], ["", "def", "resample_walkers", "(", "self", ")", ":", "\n", "        ", "weights", "=", "self", ".", "state", "[", "'log_weights'", "]", ".", "exp", "(", ")", "\n", "ids", "=", "apply_resampling", "(", "weights", "=", "weights", ",", "strategy", "=", "'multinomial'", ")", "\n", "for", "key", "in", "self", ".", "_walker_state_keys", ":", "\n", "            ", "self", ".", "state", "[", "key", "]", "=", "self", ".", "state", "[", "key", "]", "[", "ids", "]", "\n", "", "self", ".", "state", "[", "'log_weights'", "]", "=", "torch", ".", "zeros_like", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.restart": [[387, 397], ["sampling.MetropolisSampler.recompute_psi", "torch.zeros_like", "sampling.MetropolisSampler.log_psis.detach", "sampling.MetropolisSampler.log_psis.detach"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.recompute_psi"], ["", "def", "restart", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "[", "'step'", "]", "=", "0", "\n", "if", "self", ".", "keep_walker_weights", ":", "\n", "# record the denominator of the ratio of wavefunctions", "\n", "            ", "self", ".", "state", "[", "'log_weights'", "]", "-=", "2", "*", "self", ".", "log_psis", ".", "detach", "(", ")", "\n", "", "self", ".", "recompute_psi", "(", ")", "\n", "if", "self", ".", "keep_walker_weights", ":", "\n", "# record the numerator", "\n", "            ", "self", ".", "state", "[", "'log_weights'", "]", "+=", "2", "*", "self", ".", "log_psis", ".", "detach", "(", ")", "\n", "", "self", ".", "state", "[", "'ages'", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "_ages", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.propagate_all": [[398, 401], ["sampling.MetropolisSampler.proposal", "sampling.MetropolisSampler.restart"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.proposal", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.restart"], ["", "def", "propagate_all", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "[", "'rs'", "]", "=", "self", ".", "proposal", "(", ")", "\n", "self", ".", "restart", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.forces": [[468, 471], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "forces", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "[", "'forces'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler._walker_state_keys": [[472, 475], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_walker_state_keys", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "_walker_state_keys", "+", "[", "'forces'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.proposal": [[476, 481], ["torch.randn_like", "numpy.sqrt"], "methods", ["None"], ["", "def", "proposal", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "rs", "\n", "+", "self", ".", "forces", "*", "self", ".", "tau", "\n", "+", "torch", ".", "randn_like", "(", "self", ".", "rs", ")", "*", "np", ".", "sqrt", "(", "self", ".", "tau", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.acceptance_prob": [[483, 493], ["sampling.LangevinSampler.qforce", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.qforce"], ["", "def", "acceptance_prob", "(", "self", ",", "rs", ")", ":", "\n", "        ", "forces", ",", "(", "log_psis", ",", "sign_psis", ")", "=", "self", ".", "qforce", "(", "rs", ")", "\n", "log_G_ratios", "=", "(", "\n", "(", "self", ".", "forces", "+", "forces", ")", "\n", "*", "(", "(", "self", ".", "rs", "-", "rs", ")", "+", "self", ".", "tau", "/", "2", "*", "(", "self", ".", "forces", "-", "forces", ")", ")", "\n", ")", ".", "sum", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "Ps_acc", "=", "torch", ".", "exp", "(", "log_G_ratios", "+", "2", "*", "(", "log_psis", "-", "self", ".", "log_psis", ")", ")", "\n", "# Ps_acc might become 0 or inf, however this does not affect", "\n", "# the stability of the remaining code", "\n", "return", "Ps_acc", ",", "log_psis", ",", "sign_psis", ",", "{", "'forces'", ":", "forces", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.qforce": [[494, 507], ["physics.clean_force", "physics.quantum_force", "mask.all", "log.warning", "forces.where.where.where", "log_psis.isneginf", "forces.where.where.new_tensor"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.clean_force", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.quantum_force"], ["", "def", "qforce", "(", "self", ",", "rs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "forces", ",", "(", "log_psis", ",", "sign_psis", ")", "=", "quantum_force", "(", "rs", ",", "self", ".", "wf", ")", "\n", "", "except", "LUFactError", "as", "e", ":", "\n", "            ", "e", ".", "info", "[", "'rs'", "]", "=", "rs", "[", "e", ".", "info", "[", "'idxs'", "]", "]", "\n", "raise", "\n", "# mask out nan forces to increase code stability", "\n", "", "mask", "=", "~", "log_psis", ".", "isneginf", "(", ")", "[", ":", ",", "None", ",", "None", "]", "\n", "if", "not", "mask", ".", "all", "(", ")", ":", "\n", "            ", "log", ".", "warning", "(", "'Masking forces where psi = 0'", ")", "\n", "forces", "=", "forces", ".", "where", "(", "mask", ",", "forces", ".", "new_tensor", "(", "0", ")", ")", "\n", "", "forces", "=", "clean_force", "(", "forces", ",", "rs", ",", "self", ".", "wf", ".", "mol", ",", "tau", "=", "self", ".", "tau", ")", "\n", "return", "forces", ",", "(", "log_psis", ",", "sign_psis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.extra_writer": [[508, 511], ["sampling.LangevinSampler.writer.add_scalar", "sampling.LangevinSampler.forces.norm().mean", "sampling.LangevinSampler.forces.norm"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean"], ["", "def", "extra_writer", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "\n", "'sampling/forces'", ",", "self", ".", "forces", ".", "norm", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", ",", "self", ".", "_step_writer", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.recompute_psi": [[513, 518], ["sampling.LangevinSampler.qforce"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.LangevinSampler.qforce"], ["", "def", "recompute_psi", "(", "self", ")", ":", "\n", "        ", "(", "\n", "self", ".", "state", "[", "'forces'", "]", ",", "\n", "(", "self", ".", "state", "[", "'log_psis'", "]", ",", "self", ".", "state", "[", "'sign_psis'", "]", ")", ",", "\n", ")", "=", "self", ".", "qforce", "(", "self", ".", "rs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.sample_wf": [[28, 117], ["zip", "dist_means[].clone", "sampling..mean", "rs.new_zeros", "torch.stack.append", "sampling..", "type", "physics.local_energy", "rs.cpu().numpy", "Es_loc.cpu().numpy", "log_psis.cpu().numpy", "len", "torch.stack", "uncertainties.unumpy.uarray", "blocks.append", "uncertainties.unumpy.nominal_values", "uncertainties.ufloat", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.stack.mean().cpu", "numpy.stack", "unp.nominal_values.mean().std", "numpy.sqrt", "unp.nominal_values.mean", "Es_loc.var", "Es_loc.min", "Es_loc.max", "writer.add_scalar", "writer.add_scalar", "dist_means[].std", "dist_means[].std", "rs.cpu", "Es_loc.cpu", "log_psis.cpu", "torch.stack.std().cpu", "numpy.sqrt", "len", "Es_loc.mean", "torch.stack.mean", "len", "unp.nominal_values.mean", "torch.stack.std"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.local_energy", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.std", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.var", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.std", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.std", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.std"], ["def", "sample_wf", "(", "# noqa: C901", "\n", "wf", ",", "\n", "sampler", ",", "\n", "steps", ",", "\n", "writer", "=", "None", ",", "\n", "log_dict", "=", "None", ",", "\n", "blocks", "=", "None", ",", "\n", "*", ",", "\n", "block_size", "=", "10", ",", "\n", "equilibrate", "=", "True", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Sample a wave function and accumulate expectation values.\n\n    This is a low-level interface, see :func:`~deepqmc.evaluate` for a high-level\n    interface. This iterator iteratively draws samples from the sampler, detects\n    when equilibrium is reached, and starts calculating and accumulating\n    local energies to get an estimate of the energy. Diagnostics is written into\n    the Tensorboard writer, and every full block, the step index, the current\n    estimate of the energy, and the sampled electron coordinates are yielded.\n\n    Args:\n        wf (:class:`~deepqmc.wf.WaveFunction`): wave function model to be sampled\n        sampler (iterator): yields batches of electron coordinate samples\n        steps (iterator): yields step indexes\n        writer (:class:`torch.utils.tensorboard.writer.SummaryWriter`):\n            Tensorboard writer\n        log_dict (dict-like): step data will be stored in this dictionary if given\n        blocks (list): used as storage of blocks. If not given, the iterator\n            uses a local storage.\n        block_size (int): size of a block (a sequence of samples)\n        equilibrate (bool or int): if false, local energies are calculated and\n            accumulated from the first sampling step, if true equilibrium is\n            detected automatically, if integer argument, specifies number of\n            equilibration steps\n    \"\"\"", "\n", "blocks", "=", "blocks", "if", "blocks", "is", "not", "None", "else", "[", "]", "\n", "calculating_energy", "=", "not", "equilibrate", "\n", "buffer", "=", "[", "]", "\n", "energy", "=", "None", "\n", "for", "step", ",", "(", "rs", ",", "log_psis", ",", "_", ",", "_", ",", "_", ")", "in", "zip", "(", "steps", ",", "sampler", ")", ":", "\n", "        ", "if", "step", "==", "0", ":", "\n", "            ", "dist_means", "=", "rs", ".", "new_zeros", "(", "5", "*", "block_size", ")", "\n", "if", "not", "equilibrate", ":", "\n", "                ", "yield", "0", ",", "'eq'", "\n", "", "", "dist_means", "[", ":", "-", "1", "]", "=", "dist_means", "[", "1", ":", "]", ".", "clone", "(", ")", "\n", "dist_means", "[", "-", "1", "]", "=", "pairwise_self_distance", "(", "rs", ")", ".", "mean", "(", ")", "\n", "if", "not", "calculating_energy", ":", "\n", "            ", "if", "type", "(", "equilibrate", ")", "is", "int", ":", "\n", "                ", "if", "step", ">=", "equilibrate", ":", "\n", "                    ", "calculating_energy", "=", "True", "\n", "", "", "elif", "dist_means", "[", "0", "]", ">", "0", ":", "\n", "                ", "if", "dist_means", "[", ":", "block_size", "]", ".", "std", "(", ")", "<", "dist_means", "[", "-", "block_size", ":", "]", ".", "std", "(", ")", ":", "\n", "                    ", "calculating_energy", "=", "True", "\n", "", "", "if", "calculating_energy", ":", "\n", "                ", "yield", "step", ",", "'eq'", "\n", "", "", "if", "calculating_energy", ":", "\n", "            ", "Es_loc", "=", "local_energy", "(", "rs", ",", "wf", ",", "keep_graph", "=", "False", ")", "[", "0", "]", "\n", "buffer", ".", "append", "(", "Es_loc", ")", "\n", "if", "log_dict", "is", "not", "None", ":", "\n", "                ", "log_dict", "[", "'coords'", "]", "=", "rs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "log_dict", "[", "'E_loc'", "]", "=", "Es_loc", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "log_dict", "[", "'log_psis'", "]", "=", "log_psis", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "'sample_plugin'", "in", "PLUGINS", ":", "\n", "                ", "PLUGINS", "[", "'sample_plugin'", "]", "(", "wf", ",", "rs", ",", "log_dict", ")", "\n", "", "if", "len", "(", "buffer", ")", "==", "block_size", ":", "\n", "                ", "buffer", "=", "torch", ".", "stack", "(", "buffer", ")", "\n", "block", "=", "unp", ".", "uarray", "(", "\n", "buffer", ".", "mean", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", ",", "\n", "buffer", ".", "std", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", "/", "np", ".", "sqrt", "(", "len", "(", "buffer", ")", ")", ",", "\n", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "buffer", "=", "[", "]", "\n", "", "if", "not", "buffer", ":", "\n", "                ", "blocks_arr", "=", "unp", ".", "nominal_values", "(", "np", ".", "stack", "(", "blocks", ",", "-", "1", ")", ")", "\n", "err", "=", "blocks_arr", ".", "mean", "(", "-", "1", ")", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "len", "(", "blocks_arr", ")", ")", "\n", "energy", "=", "ufloat", "(", "blocks_arr", ".", "mean", "(", ")", ",", "err", ")", "\n", "", "", "if", "writer", ":", "\n", "            ", "if", "calculating_energy", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'E_loc/mean'", ",", "Es_loc", ".", "mean", "(", ")", "-", "energy_offset", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'E_loc/var'", ",", "Es_loc", ".", "var", "(", ")", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'E_loc/min'", ",", "Es_loc", ".", "min", "(", ")", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'E_loc/max'", ",", "Es_loc", ".", "max", "(", ")", ",", "step", ")", "\n", "if", "not", "buffer", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "\n", "'E/value'", ",", "energy", ".", "nominal_value", "-", "energy_offset", ",", "step", "\n", ")", "\n", "writer", ".", "add_scalar", "(", "'E/error'", ",", "energy", ".", "std_dev", ",", "step", ")", "\n", "", "", "", "if", "calculating_energy", ":", "\n", "            ", "yield", "step", ",", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.samples_from": [[119, 123], ["zip", "tuple", "isinstance", "torch.stack", "zip"], "function", ["None"], ["", "", "", "def", "samples_from", "(", "sampler", ",", "steps", ")", ":", "\n", "    ", "xs", "=", "zip", "(", "*", "(", "xs", "for", "_", ",", "xs", "in", "zip", "(", "steps", ",", "sampler", ")", ")", ")", "\n", "return", "tuple", "(", "\n", "torch", ".", "stack", "(", "x", ",", "dim", "=", "1", ")", "if", "isinstance", "(", "x", "[", "0", "]", ",", "torch", ".", "Tensor", ")", "else", "x", "for", "x", "in", "xs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.sort_nucleus_indices": [[403, 433], ["idx.bincount", "len", "torch.tensor", "range", "range", "torchext.shuffle_tensor", "torchext.shuffle_tensor", "torch.cat", "physics.pairwise_distance().sort", "sum", "torch.tensor", "torch.tensor", "torch.cat", "torchext.shuffle_tensor", "torchext.shuffle_tensor", "torch.cat", "torch.cat", "len", "len", "int", "sum().item", "torch.cat", "int", "available.max", "len", "physics.pairwise_distance", "torchext.argmax_random_choice", "available.sum", "sum", "torch.ones", "torch.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.shuffle_tensor", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.shuffle_tensor", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.shuffle_tensor", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.shuffle_tensor", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_distance", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.argmax_random_choice"], ["", "", "def", "sort_nucleus_indices", "(", "idx", ",", "mol", ")", ":", "\n", "# this heuristic takes nuclear indices for placing electrons and sorts them", "\n", "# such that the local spin of the electrons is minimized", "\n", "    ", "dev", "=", "idx", ".", "device", "\n", "selection", "=", "idx", ".", "bincount", "(", "minlength", "=", "len", "(", "mol", ".", "charges", ")", ")", "\n", "available", "=", "selection", "\n", "n_down", "=", "(", "len", "(", "idx", ")", "-", "mol", ".", "spin", ")", "//", "2", "\n", "n_nuclei", "=", "len", "(", "available", ")", "\n", "assigned", "=", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "dev", ")", "\n", "# assign core electron pairs to all nuclei with more than one electron", "\n", "for", "j", "in", "range", "(", "int", "(", "available", ".", "max", "(", ")", ")", "//", "2", ")", ":", "\n", "        ", "mask", "=", "selection", ">=", "2", "*", "(", "j", "+", "1", ")", "\n", "if", "sum", "(", "mask", ")", ".", "item", "(", ")", "<=", "n_down", "-", "len", "(", "assigned", ")", ":", "\n", "            ", "assigned", "=", "torch", ".", "cat", "(", "(", "assigned", ",", "torch", ".", "arange", "(", "n_nuclei", ",", "device", "=", "dev", ")", "[", "mask", "]", ")", ")", "\n", "available", "-=", "torch", ".", "ones", "(", "n_nuclei", ",", "device", "=", "dev", ",", "dtype", "=", "torch", ".", "long", ")", "*", "2", "*", "mask", "\n", "# order remaining nuclear indices by subsequent closest distances", "\n", "", "", "dist", "=", "pairwise_distance", "(", "mol", ".", "coords", ",", "mol", ".", "coords", ")", ".", "sort", "(", ")", "[", "1", "]", "\n", "path", "=", "(", "\n", "torch", ".", "tensor", "(", "[", "argmax_random_choice", "(", "available", ")", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "dev", ")", "\n", "if", "sum", "(", "available", ")", "\n", "else", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "dev", ")", "\n", ")", "\n", "for", "_", "in", "range", "(", "int", "(", "available", ".", "sum", "(", ")", ")", "-", "1", ")", ":", "\n", "        ", "available", "[", "path", "[", "-", "1", "]", "]", "-=", "1", "\n", "path", "=", "torch", ".", "cat", "(", "(", "path", ",", "dist", "[", "path", "[", "-", "1", "]", "]", "[", "available", "[", "dist", "[", "path", "[", "-", "1", "]", "]", "]", ">", "0", "]", "[", ":", "1", "]", ")", ")", "\n", "# assign remaining electrons alternatingly along the path of closest distance", "\n", "", "even", ",", "odd", "=", "shuffle_tensor", "(", "path", "[", "0", ":", ":", "2", "]", ")", ",", "shuffle_tensor", "(", "path", "[", "1", ":", ":", "2", "]", ")", "\n", "up", "=", "shuffle_tensor", "(", "torch", ".", "cat", "(", "(", "assigned", ",", "even", ",", "odd", "[", "n_down", "-", "len", "(", "assigned", ")", ":", "]", ")", ")", ")", "\n", "down", "=", "shuffle_tensor", "(", "torch", ".", "cat", "(", "(", "assigned", ",", "odd", "[", ":", "n_down", "-", "len", "(", "assigned", ")", "]", ")", ")", ")", "\n", "return", "torch", ".", "cat", "(", "(", "up", ",", "down", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.rand_from_mol": [[435, 460], ["len", "cs.floor", "[].repeat", "int", "torch.repeat_interleave().view", "torch.stack", "torch.multinomial", "cs.floor.sum", "rem.expand", "torch.repeat_interleave", "sampling.sort_nucleus_indices", "torch.randn_like", "len", "cs.floor.to", "torch.arange().expand", "[].repeat.flatten", "torch.arange().expand().t", "charges.sum", "torch.arange", "torch.arange().expand", "torch.arange"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.sort_nucleus_indices"], ["", "def", "rand_from_mol", "(", "mol", ",", "bs", ",", "pop_charges", "=", "None", ",", "elec_std", "=", "1.0", ")", ":", "\n", "    ", "n_atoms", "=", "len", "(", "mol", ")", "\n", "charges", "=", "mol", ".", "charges", "\n", "n_electrons", "=", "(", "charges", ".", "sum", "(", ")", "-", "mol", ".", "charge", ")", ".", "type", "(", "torch", ".", "int", ")", ".", "item", "(", ")", "\n", "cs", "=", "charges", "\n", "if", "pop_charges", "is", "not", "None", ":", "\n", "        ", "cs", "=", "cs", "-", "pop_charges", "\n", "", "else", ":", "\n", "        ", "cs", "=", "cs", "-", "mol", ".", "charge", "/", "len", "(", "charges", ")", "\n", "", "base", "=", "cs", ".", "floor", "(", ")", "\n", "repeats", "=", "base", ".", "to", "(", "torch", ".", "long", ")", "[", "None", ",", ":", "]", ".", "repeat", "(", "bs", ",", "1", ")", "\n", "rem", "=", "cs", "-", "base", "\n", "rem_size", "=", "int", "(", "n_electrons", "-", "base", ".", "sum", "(", ")", ")", "\n", "if", "rem_size", ">", "0", ":", "\n", "        ", "samples", "=", "torch", ".", "multinomial", "(", "rem", ".", "expand", "(", "bs", ",", "-", "1", ")", ",", "rem_size", ")", "\n", "repeats", "[", "\n", "torch", ".", "arange", "(", "bs", ",", "dtype", "=", "torch", ".", "long", ")", ".", "expand", "(", "rem_size", ",", "-", "1", ")", ".", "t", "(", ")", ",", "samples", "\n", "]", "+=", "1", "\n", "", "idxs", "=", "torch", ".", "repeat_interleave", "(", "\n", "torch", ".", "arange", "(", "n_atoms", ",", "device", "=", "cs", ".", "device", ")", ".", "expand", "(", "bs", ",", "-", "1", ")", ",", "repeats", ".", "flatten", "(", ")", "\n", ")", ".", "view", "(", "bs", ",", "n_electrons", ")", "\n", "idxs", "=", "torch", ".", "stack", "(", "[", "sort_nucleus_indices", "(", "idx", ",", "mol", ")", "for", "idx", "in", "idxs", "]", ")", "\n", "centers", "=", "mol", ".", "coords", "[", "idxs", "]", "\n", "rs", "=", "centers", "+", "elec_std", "*", "torch", ".", "randn_like", "(", "centers", ")", "\n", "return", "rs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.wf.base.WaveFunction.__init__": [[14, 20], ["torch.nn.Module.__init__", "int", "mol.charges.sum"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["def", "__init__", "(", "self", ",", "mol", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mol", "=", "mol", "\n", "n_elec", "=", "int", "(", "mol", ".", "charges", ".", "sum", "(", ")", "-", "mol", ".", "charge", ")", "\n", "self", ".", "n_up", "=", "(", "n_elec", "+", "mol", ".", "spin", ")", "//", "2", "\n", "self", ".", "n_down", "=", "(", "n_elec", "-", "mol", ".", "spin", ")", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.wf.base.WaveFunction.tracked_parameters": [[21, 23], ["None"], "methods", ["None"], ["", "def", "tracked_parameters", "(", "self", ")", ":", "\n", "        ", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.wf.base.WaveFunction.spin_slices": [[24, 27], ["slice", "slice"], "methods", ["None"], ["", "@", "property", "\n", "def", "spin_slices", "(", "self", ")", ":", "\n", "        ", "return", "slice", "(", "None", ",", "self", ".", "n_up", ")", ",", "slice", "(", "self", ".", "n_up", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.wf.base.WaveFunction.pop_charges": [[28, 30], ["torch.zeros_like", "len"], "methods", ["None"], ["", "def", "pop_charges", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "zeros_like", "(", "self", ".", "mol", ".", "charges", ")", "+", "self", ".", "mol", ".", "charge", "/", "len", "(", "self", ".", "mol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.wf.base.WaveFunction.forward": [[31, 33], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "rs", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.Jastrow.__init__": [[49, 55], ["kwargs.setdefault", "kwargs.setdefault", "torch.nn.Module.__init__", "deepqmc.torchext.get_mlp"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_mlp"], ["def", "__init__", "(", "self", ",", "embedding_dim", ",", "*", ",", "n_layers", "=", "3", ",", "sum_first", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "'activation'", ",", "SSP", ")", "\n", "kwargs", ".", "setdefault", "(", "'hidden_layers'", ",", "(", "'log'", ",", "n_layers", ")", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "get_mlp", "(", "embedding_dim", ",", "1", ",", "**", "kwargs", ")", "\n", "self", ".", "sum_first", "=", "sum_first", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.Jastrow.forward": [[56, 62], ["omni.Jastrow.squeeze", "omni.Jastrow.net", "omni.Jastrow.net().sum", "omni.Jastrow.sum", "omni.Jastrow.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xs", ")", ":", "\n", "        ", "if", "self", ".", "sum_first", ":", "\n", "            ", "xs", "=", "self", ".", "net", "(", "xs", ".", "sum", "(", "dim", "=", "-", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "xs", "=", "self", ".", "net", "(", "xs", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "", "return", "xs", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.Backflow.__init__": [[93, 119], ["kwargs.setdefault", "kwargs.setdefault", "kwargs.setdefault", "torch.nn.Module.__init__", "torch.nn.ModuleList", "kwargs.pop", "torch.nn.Sequential", "deepqmc.torchext.get_mlp", "deepqmc.torchext.get_mlp", "torch.nn.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_mlp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_mlp"], ["def", "__init__", "(", "\n", "self", ",", "\n", "embedding_dim", ",", "\n", "n_orbitals", ",", "\n", "n_backflows", ",", "\n", "multi_head", "=", "True", ",", "\n", "*", ",", "\n", "n_layers", "=", "3", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "'activation'", ",", "SSP", ")", "\n", "kwargs", ".", "setdefault", "(", "'hidden_layers'", ",", "(", "'log'", ",", "n_layers", ")", ")", "\n", "kwargs", ".", "setdefault", "(", "'last_bias'", ",", "True", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multi_head", "=", "multi_head", "\n", "if", "multi_head", ":", "\n", "            ", "mlps", "=", "[", "\n", "get_mlp", "(", "embedding_dim", ",", "n_orbitals", ",", "**", "kwargs", ")", "for", "_", "in", "range", "(", "n_backflows", ")", "\n", "]", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", "mlps", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_orbitals", "=", "n_orbitals", "\n", "hidden_layers", "=", "kwargs", ".", "pop", "(", "'hidden_layers'", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "get_mlp", "(", "embedding_dim", ",", "hidden_layers", "[", "-", "1", "]", ",", "hidden_layers", "[", ":", "-", "1", "]", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_layers", "[", "-", "1", "]", ",", "n_backflows", "*", "n_orbitals", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.Backflow.forward": [[121, 129], ["torch.stack", "omni.Backflow.mlp", "xs.transpose.transpose.unflatten", "xs.transpose.transpose.transpose", "net"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xs", ")", ":", "\n", "        ", "if", "self", ".", "multi_head", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "[", "net", "(", "xs", ")", "for", "net", "in", "self", ".", "mlps", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "xs", "=", "self", ".", "mlp", "(", "xs", ")", "\n", "xs", "=", "xs", ".", "unflatten", "(", "-", "1", ",", "(", "-", "1", ",", "self", ".", "n_orbitals", ")", ")", "\n", "xs", "=", "xs", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.RealSpaceBackflow.__init__": [[132, 139], ["torch.nn.Module.__init__", "torch.nn.ModuleDict", "omni.RealSpaceBackflow.register_buffer", "torch.tensor", "deepqmc.torchext.get_mlp"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_mlp"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "nuc_charges", ",", "decay_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decay_type", "=", "decay_type", "\n", "if", "nuc_charges", "is", "not", "None", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'nuc_charges'", ",", "torch", ".", "tensor", "(", "nuc_charges", ")", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "ModuleDict", "(", "\n", "{", "l", ":", "get_mlp", "(", "embedding_dim", ",", "1", ",", "**", "kwargs", ")", "for", "l", "in", "[", "'el'", ",", "'nuc'", "]", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.RealSpaceBackflow.forward": [[141, 166], ["torch.cat", "torch.cat", "deepqmc.torchext.idx_perm", "deepqmc.physics.pairwise_diffs", "torch.cat", "torch.cat", "ps.sum.sum.sum", "len", "torch.where", "embeddings.expand", "embeddings.expand", "R.new_tensor", "numpy.exp", "deepqmc.physics.pairwise_diffs", "diffs_nuc[].sqrt().min", "diffs_nuc[].sqrt"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.idx_perm", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_diffs", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_diffs"], ["", "def", "forward", "(", "self", ",", "rs", ",", "coords", ",", "messages", ",", "embeddings", ")", ":", "\n", "        ", "n_elec", ",", "n_nuc", "=", "rs", ".", "shape", "[", "-", "2", "]", ",", "len", "(", "coords", ")", "\n", "messages_el", ",", "messages_nuc", "=", "messages", "\n", "embeddings", "=", "embeddings", "[", "'many-body'", "]", "[", ":", ",", ":", ",", "None", "]", "\n", "f_el", "=", "torch", ".", "cat", "(", "\n", "[", "embeddings", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "n_elec", "-", "1", ",", "-", "1", ")", ",", "messages_el", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "f_nuc", "=", "torch", ".", "cat", "(", "[", "embeddings", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "n_nuc", ",", "-", "1", ")", ",", "messages_nuc", "]", ",", "dim", "=", "-", "1", ")", "\n", "i", ",", "j", "=", "idx_perm", "(", "n_elec", ",", "2", ",", "rs", ".", "device", ")", "\n", "diffs_nuc", "=", "pairwise_diffs", "(", "rs", ",", "coords", ")", "\n", "diffs", "=", "torch", ".", "cat", "(", "[", "pairwise_diffs", "(", "-", "rs", ",", "-", "rs", ")", "[", ":", ",", "i", ",", "j", "]", ",", "diffs_nuc", "]", ",", "dim", "=", "-", "2", ")", "\n", "f", "=", "torch", ".", "cat", "(", "[", "self", ".", "mlp", "[", "'el'", "]", "(", "f_el", ")", ",", "self", ".", "mlp", "[", "'nuc'", "]", "(", "f_nuc", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "ps", "=", "f", "*", "diffs", "[", "...", ",", ":", "3", "]", "/", "(", "1", "+", "diffs", "[", "...", ",", "3", ":", "]", "**", "(", "3", "/", "2", ")", ")", "\n", "ps", "=", "ps", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "if", "self", ".", "decay_type", "==", "'rios'", ":", "\n", "            ", "R", "=", "diffs_nuc", "[", "...", ",", "-", "1", "]", ".", "sqrt", "(", ")", ".", "min", "(", "dim", "=", "-", "1", ")", ".", "values", "/", "0.5", "\n", "decay", "=", "torch", ".", "where", "(", "\n", "R", "<", "1", ",", "R", "**", "2", "*", "(", "6", "-", "8", "*", "R", "+", "3", "*", "R", "**", "2", ")", ",", "R", ".", "new_tensor", "(", "1", ")", "\n", ")", "\n", "", "elif", "self", ".", "decay_type", "==", "'deeperwin'", ":", "\n", "            ", "decay", "=", "(", "\n", "(", "diffs_nuc", "[", "...", ",", "-", "1", "]", "/", "(", "0.5", "/", "self", ".", "nuc_charges", ")", "**", "2", ")", ".", "tanh", "(", ")", ".", "prod", "(", "dim", "=", "-", "1", ")", "\n", ")", "\n", "", "ps", "=", "np", ".", "exp", "(", "-", "3.5", ")", "*", "decay", "[", "...", ",", "None", "]", "*", "ps", "\n", "return", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.SchNetMeanFieldLayer.__init__": [[169, 173], ["torch.nn.Module.__init__", "factory.w_subnet", "factory.g_subnet"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.w_subnet", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.g_subnet"], ["    ", "def", "__init__", "(", "self", ",", "factory", ",", "n_up", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w", "=", "factory", ".", "w_subnet", "(", ")", "\n", "self", ".", "g", "=", "factory", ".", "g_subnet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.SchNetMeanFieldLayer.forward": [[174, 177], ["omni.SchNetMeanFieldLayer.g", "omni.SchNetMeanFieldLayer.w"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "Y", ",", "edges_elec", ",", "edges_nuc", ")", ":", "\n", "        ", "z_nuc", "=", "(", "self", ".", "w", "(", "edges_nuc", ")", "*", "Y", "[", "...", ",", "None", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "return", "self", ".", "g", "(", "z_nuc", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.MeanFieldElectronicSchNet.__init__": [[191, 193], ["schnet.ElectronicSchNet.__init__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "version", "=", "'mean-field'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.MeanFieldElectronicSchNet.forward": [[194, 198], ["dists_nuc.new_empty", "super().forward"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.forward"], ["", "def", "forward", "(", "self", ",", "dists_nuc", ")", ":", "\n", "        ", "*", "batch_dims", ",", "n_elec", "=", "dists_nuc", ".", "shape", "[", ":", "-", "1", "]", "\n", "dists_elec_dummy", "=", "dists_nuc", ".", "new_empty", "(", "*", "batch_dims", ",", "n_elec", ",", "n_elec", ")", "\n", "return", "super", "(", ")", ".", "forward", "(", "dists_elec_dummy", ",", "dists_nuc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.OmniSchNet.__init__": [[261, 349], ["torch.nn.Module.__init__", "functools.partial", "functools.partial.", "omni.MeanFieldElectronicSchNet", "functools.partial.", "functools.partial", "torch.nn.ModuleDict", "functools.partial.", "functools.partial", "isinstance", "functools.partial.", "torch.nn.ModuleDict", "functools.partial", "functools.partial", "functools.partial", "functools.partial.", "functools.partial.", "zip"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_atoms", ",", "\n", "n_up", ",", "\n", "n_down", ",", "\n", "n_orbitals", ",", "\n", "n_backflows", ",", "\n", "schnet_factory", "=", "None", ",", "\n", "jastrow_factory", "=", "None", ",", "\n", "backflow_factory", "=", "None", ",", "\n", "rs_backflow_factory", "=", "None", ",", "\n", "*", ",", "\n", "embedding_dim", "=", "128", ",", "\n", "jastrow", "=", "'many-body'", ",", "\n", "jastrow_kwargs", "=", "None", ",", "\n", "backflow", "=", "'many-body'", ",", "\n", "backflow_kwargs", "=", "None", ",", "\n", "rs_backflow", "=", "None", ",", "\n", "rs_backflow_kwargs", "=", "None", ",", "\n", "schnet_kwargs", "=", "None", ",", "\n", "subnet_kwargs", "=", "None", ",", "\n", "mf_embedding_dim", "=", "128", ",", "\n", "mf_schnet_kwargs", "=", "None", ",", "\n", "mf_subnet_kwargs", "=", "None", ",", "\n", "spin_jastrow", "=", "False", ",", "\n", ")", ":", "\n", "        ", "assert", "not", "jastrow", "or", "jastrow", "in", "[", "'mean-field'", ",", "'many-body'", "]", "\n", "assert", "not", "backflow", "or", "backflow", "in", "[", "'mean-field'", ",", "'many-body'", "]", "\n", "assert", "not", "rs_backflow", "or", "rs_backflow", "in", "[", "'many-body'", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_up", "=", "n_up", "\n", "if", "not", "schnet_factory", ":", "\n", "            ", "schnet_factory", "=", "partial", "(", "\n", "ElectronicSchNet", ",", "\n", "subnet_metafactory", "=", "partial", "(", "SubnetFactory", ",", "**", "(", "subnet_kwargs", "or", "{", "}", ")", ")", ",", "\n", "**", "(", "schnet_kwargs", "or", "{", "}", ")", ",", "\n", ")", "\n", "", "self", ".", "schnet", "=", "(", "\n", "schnet_factory", "(", "n_up", ",", "n_down", ",", "n_atoms", ",", "embedding_dim", ")", "\n", "if", "'many-body'", "in", "[", "jastrow", ",", "backflow", "]", "\n", "else", "None", "\n", ")", "\n", "self", ".", "mf_schnet", "=", "(", "\n", "MeanFieldElectronicSchNet", "(", "\n", "n_up", ",", "\n", "n_down", ",", "\n", "n_atoms", ",", "\n", "mf_embedding_dim", ",", "\n", "subnet_metafactory", "=", "partial", "(", "SubnetFactory", ",", "**", "(", "mf_subnet_kwargs", "or", "{", "}", ")", ")", ",", "\n", "**", "(", "mf_schnet_kwargs", "or", "{", "}", ")", ",", "\n", ")", "\n", "if", "'mean-field'", "in", "[", "jastrow", ",", "backflow", "]", "\n", "else", "None", "\n", ")", "\n", "embedding_dim", "=", "{", "'mean-field'", ":", "mf_embedding_dim", ",", "'many-body'", ":", "embedding_dim", "}", "\n", "self", ".", "jastrow_type", "=", "jastrow", "\n", "if", "jastrow", ":", "\n", "            ", "if", "not", "jastrow_factory", ":", "\n", "                ", "jastrow_factory", "=", "partial", "(", "Jastrow", ",", "**", "(", "jastrow_kwargs", "or", "{", "}", ")", ")", "\n", "", "self", ".", "jastrow", "=", "(", "\n", "nn", ".", "ModuleDict", "(", "\n", "{", "l", ":", "jastrow_factory", "(", "embedding_dim", "[", "jastrow", "]", ")", "for", "l", "in", "[", "'up'", ",", "'down'", "]", "}", "\n", ")", "\n", "if", "spin_jastrow", "\n", "else", "jastrow_factory", "(", "embedding_dim", "[", "jastrow", "]", ")", "\n", ")", "\n", "", "self", ".", "backflow_type", "=", "backflow", "\n", "if", "backflow", ":", "\n", "            ", "if", "not", "backflow_factory", ":", "\n", "                ", "backflow_factory", "=", "partial", "(", "Backflow", ",", "**", "(", "backflow_kwargs", "or", "{", "}", ")", ")", "\n", "", "self", ".", "backflow", "=", "(", "\n", "backflow_factory", "(", "embedding_dim", "[", "backflow", "]", ",", "n_orbitals", ",", "n_backflows", ")", "\n", "if", "isinstance", "(", "n_orbitals", ",", "int", ")", "\n", "else", "nn", ".", "ModuleDict", "(", "\n", "{", "\n", "l", ":", "backflow_factory", "(", "embedding_dim", "[", "backflow", "]", ",", "n", ",", "n_backflows", ")", "\n", "for", "l", ",", "n", "in", "zip", "(", "[", "'up'", ",", "'down'", "]", ",", "n_orbitals", ")", "\n", "}", "\n", ")", "\n", ")", "\n", "", "self", ".", "rs_backflow_type", "=", "rs_backflow", "\n", "if", "rs_backflow", ":", "\n", "            ", "if", "not", "rs_backflow_factory", ":", "\n", "                ", "rs_backflow_factory", "=", "partial", "(", "\n", "RealSpaceBackflow", ",", "**", "(", "rs_backflow_kwargs", "or", "{", "}", ")", "\n", ")", "\n", "", "self", ".", "rs_backflow", "=", "rs_backflow_factory", "(", "\n", "embedding_dim", "[", "rs_backflow", "]", "+", "self", ".", "schnet", ".", "kernel_dim", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.omni.OmniSchNet.forward": [[351, 392], ["omni.OmniSchNet.", "deepqmc.physics.pairwise_distance", "omni.OmniSchNet.mf_schnet", "omni.OmniSchNet.schnet", "isinstance", "omni.OmniSchNet.rs_backflow", "omni.OmniSchNet.jastrow", "isinstance", "omni.OmniSchNet.backflow"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_distance"], ["", "", "def", "forward", "(", "self", ",", "rs", ",", "coords", ")", ":", "\n", "        ", "dists_elec", "=", "pairwise_self_distance", "(", "rs", ",", "full", "=", "True", ")", "\n", "dists_nuc", "=", "pairwise_distance", "(", "rs", ",", "coords", ")", "\n", "embeddings", "=", "{", "}", "\n", "if", "self", ".", "mf_schnet", ":", "\n", "            ", "embeddings", "[", "'mean-field'", "]", ",", "_", "=", "self", ".", "mf_schnet", "(", "dists_nuc", ")", "\n", "", "if", "self", ".", "schnet", ":", "\n", "            ", "embeddings", "[", "'many-body'", "]", ",", "messages", "=", "self", ".", "schnet", "(", "dists_elec", ",", "dists_nuc", ")", "\n", "", "if", "self", ".", "jastrow_type", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "jastrow", ",", "nn", ".", "ModuleDict", ")", ":", "\n", "                ", "j_up", "=", "self", ".", "jastrow", "[", "'up'", "]", "(", "\n", "embeddings", "[", "self", ".", "jastrow_type", "]", "[", "...", ",", ":", "self", ".", "n_up", ",", ":", "]", "\n", ")", "\n", "j_down", "=", "self", ".", "jastrow", "[", "'down'", "]", "(", "\n", "embeddings", "[", "self", ".", "jastrow_type", "]", "[", "...", ",", "self", ".", "n_up", ":", ",", ":", "]", "\n", ")", "\n", "jastrow", "=", "(", "j_up", "+", "j_down", ")", "/", "2", "\n", "", "else", ":", "\n", "                ", "jastrow", "=", "self", ".", "jastrow", "(", "embeddings", "[", "self", ".", "jastrow_type", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "jastrow", "=", "None", "\n", "", "backflow", "=", "(", "\n", "None", "\n", "if", "not", "self", ".", "backflow_type", "\n", "else", "(", "\n", "self", ".", "backflow", "[", "'up'", "]", "(", "\n", "embeddings", "[", "self", ".", "backflow_type", "]", "[", "...", ",", ":", "self", ".", "n_up", ",", ":", "]", "\n", ")", ",", "\n", "self", ".", "backflow", "[", "'down'", "]", "(", "\n", "embeddings", "[", "self", ".", "backflow_type", "]", "[", "...", ",", "self", ".", "n_up", ":", ",", ":", "]", "\n", ")", ",", "\n", ")", "\n", "if", "isinstance", "(", "self", ".", "backflow", ",", "nn", ".", "ModuleDict", ")", "\n", "else", "self", ".", "backflow", "(", "embeddings", "[", "self", ".", "backflow_type", "]", ")", "\n", ")", "\n", "ps", "=", "(", "\n", "self", ".", "rs_backflow", "(", "rs", ",", "coords", ",", "messages", ",", "embeddings", ")", "\n", "if", "self", ".", "rs_backflow_type", "\n", "else", "None", "\n", ")", "\n", "return", "jastrow", ",", "backflow", ",", "ps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOShell.__init__": [[48, 56], ["torch.nn.Module.__init__", "torch.tensor", "gto.GTOShell.register_buffer", "gto.GTOShell.register_buffer", "gto.GTOShell.register_buffer", "gto.get_cartesian_angulars", "numpy.sqrt", "deepqmc.torchext.fp_tensor", "scipy.special.factorial2().prod", "scipy.special.factorial2"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.get_cartesian_angulars", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.fp_tensor"], ["def", "__init__", "(", "self", ",", "l", ",", "coeffs", ",", "zetas", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ls", "=", "torch", ".", "tensor", "(", "get_cartesian_angulars", "(", "l", ")", ")", "\n", "anorms", "=", "1.0", "/", "np", ".", "sqrt", "(", "factorial2", "(", "2", "*", "self", ".", "ls", "-", "1", ")", ".", "prod", "(", "-", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "'anorms'", ",", "fp_tensor", "(", "anorms", ")", ")", "\n", "rnorms", "=", "(", "2", "*", "zetas", "/", "np", ".", "pi", ")", "**", "(", "3", "/", "4", ")", "*", "(", "4", "*", "zetas", ")", "**", "(", "l", "/", "2", ")", "\n", "self", ".", "register_buffer", "(", "'coeffs'", ",", "rnorms", "*", "coeffs", ")", "\n", "self", ".", "register_buffer", "(", "'zetas'", ",", "zetas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOShell.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOShell.l": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "l", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ls", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOShell.extra_repr": [[64, 66], ["len"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'l={self.l}, n_primitive={len(self.zetas)}'", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOShell.get_cusp_info": [[67, 76], ["torch.exp", "gto.GTOShell.coeffs.sum", "torch.stack", "czes.sum"], "methods", ["None"], ["", "def", "get_cusp_info", "(", "self", ",", "rc", ")", ":", "\n", "        ", "assert", "self", ".", "l", "==", "0", "\n", "exps", "=", "torch", ".", "exp", "(", "-", "self", ".", "zetas", "*", "rc", "**", "2", ")", "\n", "phi_0", "=", "self", ".", "coeffs", ".", "sum", "(", ")", "\n", "phi_rc", "=", "(", "self", ".", "coeffs", "*", "exps", ")", ".", "sum", "(", ")", "\n", "czes", "=", "self", ".", "coeffs", "*", "self", ".", "zetas", "*", "exps", "\n", "dphi_rc_dr", "=", "-", "2", "*", "rc", "*", "czes", ".", "sum", "(", ")", "\n", "d2phi_rc_dr2", "=", "2", "*", "(", "czes", "*", "(", "2", "*", "self", ".", "zetas", "*", "rc", "**", "2", "-", "1", ")", ")", ".", "sum", "(", ")", "\n", "return", "torch", ".", "stack", "(", "[", "phi_0", ",", "phi_rc", ",", "dphi_rc_dr", ",", "d2phi_rc_dr2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOShell.forward": [[77, 84], ["deepqmc.torchext.pow_int().prod", "torch.exp", "deepqmc.torchext.pow_int"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.pow_int"], ["", "def", "forward", "(", "self", ",", "rs", ")", ":", "\n", "        ", "rs", ",", "rs_2", "=", "rs", "[", "...", ",", ":", "3", "]", ",", "rs", "[", "...", ",", "3", "]", "\n", "angulars", "=", "pow_int", "(", "rs", "[", ":", ",", "None", ",", ":", "]", ",", "self", ".", "ls", ")", ".", "prod", "(", "dim", "=", "-", "1", ")", "\n", "exps", "=", "torch", ".", "exp", "(", "-", "self", ".", "zetas", "*", "rs_2", "[", ":", ",", "None", "]", ")", "\n", "radials", "=", "(", "self", ".", "coeffs", "*", "exps", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "phis", "=", "self", ".", "anorms", "*", "angulars", "*", "radials", "[", ":", ",", "None", "]", "\n", "return", "phis", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.__init__": [[106, 118], ["torch.nn.Module.__init__", "gto.GTOBasis.register_buffer", "zip", "torch.nn.ModuleList", "torch.tensor", "torch.cat", "gto.GTOBasis.items", "len"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items"], ["def", "__init__", "(", "self", ",", "centers", ",", "shells", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'centers'", ",", "centers", ")", "\n", "self", ".", "center_idxs", ",", "shells", "=", "zip", "(", "*", "shells", ")", "\n", "self", ".", "shells", "=", "nn", ".", "ModuleList", "(", "shells", ")", "\n", "self", ".", "s_center_idxs", "=", "torch", ".", "tensor", "(", "\n", "[", "idx", "for", "idx", ",", "sh", "in", "self", ".", "items", "(", ")", "if", "sh", ".", "l", "==", "0", "]", "\n", ")", "\n", "self", ".", "is_s_type", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "(", "torch", ".", "ones", "if", "sh", ".", "l", "==", "0", "else", "torch", ".", "zeros", ")", "(", "len", "(", "sh", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "for", "sh", "in", "self", ".", "shells", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.__len__": [[121, 123], ["sum", "map"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "map", "(", "len", ",", "self", ".", "shells", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items": [[124, 126], ["zip"], "methods", ["None"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "zip", "(", "self", ".", "center_idxs", ",", "self", ".", "shells", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.get_cusp_info": [[127, 130], ["torch.stack", "sh.get_cusp_info", "gto.GTOBasis.items"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.get_cusp_info", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items"], ["", "def", "get_cusp_info", "(", "self", ",", "rcs", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "\n", "[", "sh", ".", "get_cusp_info", "(", "rcs", "[", "idx", "]", ")", "for", "idx", ",", "sh", "in", "self", ".", "items", "(", ")", "if", "sh", ".", "l", "==", "0", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.from_pyscf": [[132, 151], ["deepqmc.torchext.fp_tensor", "range", "cls", "deepqmc.errors.DeepQMCError", "mol.atom_coords", "mol.bas_angular", "mol.bas_atom", "deepqmc.torchext.fp_tensor", "deepqmc.torchext.fp_tensor", "mol.bas_exp", "shells.append", "mol.bas_ctr_coeff", "gto.GTOShell"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.fp_tensor", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.fp_tensor", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.fp_tensor"], ["", "@", "classmethod", "\n", "def", "from_pyscf", "(", "cls", ",", "mol", ")", ":", "\n", "        ", "\"\"\"Construct the basis from a PySCF molecule object.\n\n        Args:\n            mol (:class:`pyscf.gto.mole.Mole`): a molecule\n        \"\"\"", "\n", "if", "not", "mol", ".", "cart", ":", "\n", "            ", "raise", "DeepQMCError", "(", "'GTOBasis supports only Cartesian basis sets'", ")", "\n", "", "centers", "=", "fp_tensor", "(", "mol", ".", "atom_coords", "(", ")", ")", "\n", "shells", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "mol", ".", "nbas", ")", ":", "\n", "            ", "l", "=", "mol", ".", "bas_angular", "(", "i", ")", "\n", "i_atom", "=", "mol", ".", "bas_atom", "(", "i", ")", "\n", "zetas", "=", "fp_tensor", "(", "mol", ".", "bas_exp", "(", "i", ")", ")", "\n", "coeff_sets", "=", "fp_tensor", "(", "mol", ".", "bas_ctr_coeff", "(", "i", ")", ".", "T", ")", "\n", "for", "coeffs", "in", "coeff_sets", ":", "\n", "                ", "shells", ".", "append", "(", "(", "i_atom", ",", "GTOShell", "(", "l", ",", "coeffs", ",", "zetas", ")", ")", ")", "\n", "", "", "return", "cls", "(", "centers", ",", "shells", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.forward": [[152, 155], ["torch.cat", "sh", "gto.GTOBasis.items"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items"], ["", "def", "forward", "(", "self", ",", "diffs", ")", ":", "\n", "        ", "shells", "=", "[", "sh", "(", "diffs", "[", ":", ",", "idx", "]", ")", "for", "idx", ",", "sh", "in", "self", ".", "items", "(", ")", "]", "\n", "return", "torch", ".", "cat", "(", "shells", ",", "dim", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.get_cartesian_angulars": [[15, 19], ["functools.lru_cache", "range", "range"], "function", ["None"], ["@", "lru_cache", "(", "maxsize", "=", "16", ")", "\n", "def", "get_cartesian_angulars", "(", "l", ")", ":", "\n", "    ", "return", "[", "\n", "(", "lx", ",", "ly", ",", "l", "-", "lx", "-", "ly", ")", "for", "lx", "in", "range", "(", "l", ",", "-", "1", ",", "-", "1", ")", "for", "ly", "in", "range", "(", "l", "-", "lx", ",", "-", "1", ",", "-", "1", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.eval_ao_normed": [[21, 26], ["pyscf.dft.numint.eval_ao", "numpy.sqrt", "numpy.diag", "mol.intor"], "function", ["None"], ["def", "eval_ao_normed", "(", "mol", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "aos", "=", "dft", ".", "numint", ".", "eval_ao", "(", "mol", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "mol", ".", "cart", ":", "\n", "        ", "aos", "/=", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "mol", ".", "intor", "(", "'int1e_ovlp_cart'", ")", ")", ")", "\n", "", "return", "aos", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.electron_density_of": [[28, 31], ["pyscfext.eval_ao_normed", "pyscf.dft.numint.eval_rho2"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.eval_ao_normed"], ["", "def", "electron_density_of", "(", "mf", ",", "rs", ")", ":", "\n", "    ", "aos", "=", "eval_ao_normed", "(", "mf", ".", "mol", ",", "rs", ")", "\n", "return", "dft", ".", "numint", ".", "eval_rho2", "(", "mf", ".", "mol", ",", "aos", ",", "mf", ".", "mo_coeff", ",", "mf", ".", "mo_occ", ",", "xctype", "=", "'LDA'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.pyscf_from_mol": [[33, 68], ["pyscf.gto.M", "log.info", "pyscf.scf.RHF", "pyscf.scf.RHF.kernel", "pathlib.Path", "chkfile.is_file", "log.info", "pyscf.mcscf.CASSCF", "pyscf.mcscf.CASSCF.kernel", "shutil.copy", "pyscfext.pyscf_from_file", "log.info", "gto.M.as_pyscf", "pyscf.dump", "pyscf.dump", "sum"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.pyscf_from_file", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.as_pyscf"], ["", "def", "pyscf_from_mol", "(", "mol", ",", "basis", ",", "cas", "=", "None", ",", "workdir", "=", "None", ")", ":", "\n", "    ", "if", "workdir", ":", "\n", "        ", "workdir", "=", "Path", "(", "workdir", ")", "\n", "chkfile", "=", "workdir", "/", "PYSCF_CHKFILE", "\n", "if", "chkfile", ".", "is_file", "(", ")", ":", "\n", "            ", "mf", ",", "mc", "=", "pyscf_from_file", "(", "chkfile", ")", "\n", "log", ".", "info", "(", "f'Restored PySCF object from {chkfile}'", ")", "\n", "assert", "mf", ".", "mol", ".", "basis", "==", "basis", "\n", "assert", "(", "\n", "not", "mc", "and", "not", "cas", "or", "(", "mc", ".", "ncas", "==", "cas", "[", "0", "]", "and", "sum", "(", "mc", ".", "nelecas", ")", "==", "cas", "[", "1", "]", ")", "\n", ")", "\n", "return", "mf", ",", "mc", "\n", "", "", "mol", "=", "gto", ".", "M", "(", "\n", "atom", "=", "mol", ".", "as_pyscf", "(", ")", ",", "\n", "unit", "=", "'bohr'", ",", "\n", "basis", "=", "basis", ",", "\n", "charge", "=", "mol", ".", "charge", ",", "\n", "spin", "=", "mol", ".", "spin", ",", "\n", "cart", "=", "True", ",", "\n", "parse_arg", "=", "False", ",", "\n", ")", "\n", "log", ".", "info", "(", "'Running HF...'", ")", "\n", "mf", "=", "RHF", "(", "mol", ")", "\n", "mf", ".", "kernel", "(", ")", "\n", "if", "cas", ":", "\n", "        ", "log", ".", "info", "(", "'Running MCSCF...'", ")", "\n", "mc", "=", "CASSCF", "(", "mf", ",", "*", "cas", ")", "\n", "mc", ".", "kernel", "(", ")", "\n", "if", "workdir", ":", "\n", "# mf and mc use the same chkfile", "\n", "            ", "chk", ".", "dump", "(", "mc", ".", "chkfile", ",", "'ci'", ",", "mc", ".", "ci", ")", "\n", "chk", ".", "dump", "(", "mc", ".", "chkfile", ",", "'nelecas'", ",", "mc", ".", "nelecas", ")", "\n", "", "", "if", "workdir", ":", "\n", "        ", "shutil", ".", "copy", "(", "mf", ".", "chkfile", ",", "chkfile", ")", "\n", "", "return", "mf", ",", "mc", "if", "cas", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.pyscf_from_file": [[70, 83], ["pyscf.load_mol", "pyscf.scf.RHF", "pyscf.scf.RHF.__dict__.update", "pyscf.load", "pyscf.load", "pyscf.load", "tuple", "pyscf.mcscf.CASSCF", "pyscf.mcscf.CASSCF.__dict__.update", "map", "pyscf.load"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update"], ["", "def", "pyscf_from_file", "(", "chkfile", ")", ":", "\n", "    ", "mol", "=", "chk", ".", "load_mol", "(", "chkfile", ")", "\n", "mf", "=", "RHF", "(", "mol", ")", "\n", "mf", ".", "__dict__", ".", "update", "(", "chk", ".", "load", "(", "chkfile", ",", "'scf'", ")", ")", "\n", "mc_dict", "=", "chk", ".", "load", "(", "chkfile", ",", "'mcscf'", ")", "\n", "if", "mc_dict", ":", "\n", "        ", "mc_dict", "[", "'ci'", "]", "=", "chk", ".", "load", "(", "chkfile", ",", "'ci'", ")", "\n", "mc_dict", "[", "'nelecas'", "]", "=", "tuple", "(", "map", "(", "int", ",", "chk", ".", "load", "(", "chkfile", ",", "'nelecas'", ")", ")", ")", "\n", "mc", "=", "CASSCF", "(", "mf", ",", "0", ",", "0", ")", "\n", "mc", ".", "__dict__", ".", "update", "(", "mc_dict", ")", "\n", "", "else", ":", "\n", "        ", "mc", "=", "None", "\n", "", "return", "mf", ",", "mc", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.confs_from_mc": [[85, 102], ["zip", "numpy.zeros", "range", "numpy.concatenate", "sorted", "numpy.concatenate", "[].view", "TRAIL_ZEROS.sub", "zip", "mc.fcisolver.large_ci", "numpy.tile", "len", "len", "numpy.arange", "numpy.array", "len", "numpy.array", "numpy.arange", "len"], "function", ["None"], ["", "def", "confs_from_mc", "(", "mc", ",", "tol", "=", "0", ")", ":", "\n", "    ", "conf_coeff", ",", "*", "confs", "=", "zip", "(", "\n", "*", "mc", ".", "fcisolver", ".", "large_ci", "(", "mc", ".", "ci", ",", "mc", ".", "ncas", ",", "mc", ".", "nelecas", ",", "tol", "=", "tol", ",", "return_strs", "=", "False", ")", "\n", ")", "\n", "confs", "=", "[", "\n", "[", "np", ".", "tile", "(", "np", ".", "arange", "(", "mc", ".", "ncore", ")", ",", "(", "len", "(", "conf_coeff", ")", ",", "1", ")", ")", ",", "np", ".", "array", "(", "cfs", ")", "+", "mc", ".", "ncore", "]", "\n", "for", "cfs", "in", "confs", "\n", "]", "\n", "confs", "=", "[", "np", ".", "concatenate", "(", "cfs", ",", "axis", "=", "-", "1", ")", "for", "cfs", "in", "confs", "]", "\n", "strs", "=", "np", ".", "zeros", "(", "(", "len", "(", "confs", "[", "0", "]", ")", ",", "len", "(", "mc", ".", "mo_energy", ")", ")", ",", "dtype", "=", "'i1'", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "strs", ".", "flat", "[", "confs", "[", "i", "]", "+", "(", "np", ".", "arange", "(", "len", "(", "strs", ")", ")", "*", "strs", ".", "shape", "[", "-", "1", "]", ")", "[", ":", ",", "None", "]", "]", "+=", "i", "+", "1", "\n", "", "strs", "=", "np", ".", "array", "(", "[", "'0'", ",", "'a'", ",", "'b'", ",", "'2'", "]", ")", "[", "strs", "]", ".", "view", "(", "f'U{strs.shape[-1]}'", ")", "[", ":", ",", "0", "]", "\n", "strs", "=", "[", "TRAIL_ZEROS", ".", "sub", "(", "''", ",", "s", ")", "for", "s", "in", "strs", "]", "\n", "confs", "=", "np", ".", "concatenate", "(", "confs", ",", "axis", "=", "-", "1", ")", "\n", "confs", "=", "sorted", "(", "zip", "(", "strs", ",", "conf_coeff", ",", "confs", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", "**", "2", ")", "\n", "return", "confs", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.distbasis.DistanceBasis.__init__": [[26, 50], ["torch.nn.Module.__init__", "torch.linspace", "distbasis.DistanceBasis.register_buffer", "distbasis.DistanceBasis.register_buffer", "distbasis.DistanceBasis.register_buffer", "len", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dist_feat_dim", ",", "\n", "cutoff", "=", "10.0", ",", "\n", "envelope", "=", "'physnet'", ",", "\n", "smooth", "=", "None", ",", "\n", "offset", "=", "True", ",", "\n", "powers", "=", "None", ",", "\n", "eps", "=", "1e-2", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "powers", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'powers'", ",", "torch", ".", "tensor", "(", "powers", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "dist_feat_dim", "-=", "len", "(", "powers", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "powers", "=", "None", "\n", "", "delta", "=", "1", "/", "(", "2", "*", "dist_feat_dim", ")", "if", "offset", "else", "0", "\n", "qs", "=", "torch", ".", "linspace", "(", "delta", ",", "1", "-", "delta", ",", "dist_feat_dim", ")", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "self", ".", "envelope", "=", "envelope", "\n", "self", ".", "register_buffer", "(", "'mus'", ",", "cutoff", "*", "qs", "**", "2", ")", "\n", "self", ".", "register_buffer", "(", "'sigmas'", ",", "(", "1", "+", "cutoff", "*", "qs", ")", "/", "7", ")", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.distbasis.DistanceBasis.forward": [[51, 78], ["torch.where", "torch.exp", "torch.where", "torch.cat", "dists.new_zeros", "AssertionError", "torch.log", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dists", ")", ":", "\n", "        ", "if", "self", ".", "smooth", "is", "not", "None", ":", "\n", "            ", "dists", "=", "dists", "+", "1", "/", "self", ".", "smooth", "*", "torch", ".", "log", "(", "\n", "1", "+", "torch", ".", "exp", "(", "-", "2", "*", "self", ".", "smooth", "*", "dists", ")", "\n", ")", "\n", "", "if", "self", ".", "envelope", "==", "'physnet'", ":", "\n", "            ", "dists_rel", "=", "dists", "/", "self", ".", "cutoff", "\n", "envelope", "=", "torch", ".", "where", "(", "\n", "dists_rel", ">", "1", ",", "\n", "dists", ".", "new_zeros", "(", "1", ")", ",", "\n", "1", "-", "6", "*", "dists_rel", "**", "5", "+", "15", "*", "dists_rel", "**", "4", "-", "10", "*", "dists_rel", "**", "3", ",", "\n", ")", "\n", "", "elif", "self", ".", "envelope", "==", "'nocusp'", ":", "\n", "            ", "envelope", "=", "dists", "**", "2", "*", "torch", ".", "exp", "(", "-", "dists", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AssertionError", "(", ")", "\n", "", "x", "=", "envelope", "[", "...", ",", "None", "]", "*", "torch", ".", "exp", "(", "\n", "-", "(", "(", "dists", "[", "...", ",", "None", "]", "-", "self", ".", "mus", ")", "**", "2", ")", "/", "self", ".", "sigmas", "**", "2", "\n", ")", "\n", "if", "self", ".", "powers", "is", "not", "None", ":", "\n", "            ", "powers", "=", "torch", ".", "where", "(", "\n", "self", ".", "powers", ">", "0", ",", "\n", "dists", "[", "...", ",", "None", "]", "**", "self", ".", "powers", ",", "\n", "1", "/", "(", "dists", "[", "...", ",", "None", "]", "**", "(", "-", "self", ".", "powers", ")", "+", "self", ".", "eps", ")", ",", "\n", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "powers", ",", "x", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.distbasis.DistanceBasis.extra_repr": [[79, 86], ["len"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "', '", ".", "join", "(", "\n", "f'{lbl}={val!r}'", "\n", "for", "lbl", ",", "val", "in", "[", "\n", "(", "'dist_feat_dim'", ",", "len", "(", "self", ".", "mus", ")", ")", ",", "\n", "(", "'cutoff'", ",", "self", ".", "cutoff", ")", ",", "\n", "(", "'envelope'", ",", "self", ".", "envelope", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.BackflowOp.__init__": [[38, 43], ["torch.nn.Module.__init__", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mult_act", "=", "None", ",", "add_act", "=", "None", ",", "with_envelope", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mult_act", "=", "mult_act", "or", "(", "lambda", "x", ":", "1", "+", "2", "*", "torch", ".", "tanh", "(", "x", "/", "4", ")", ")", "\n", "self", ".", "add_act", "=", "add_act", "or", "(", "lambda", "x", ":", "0.1", "*", "torch", ".", "tanh", "(", "x", "/", "4", ")", ")", "\n", "self", ".", "with_envelope", "=", "with_envelope", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.BackflowOp.forward": [[44, 60], ["torch.where", "paulinet.BackflowOp.mult_act", "R.new_tensor", "slice", "slice", "dists_nuc.min", "paulinet.BackflowOp.add_act", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xs", ",", "fs_mult", ",", "fs_add", ",", "dists_nuc", ")", ":", "\n", "        ", "if", "fs_add", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "with_envelope", ":", "\n", "                ", "envel", "=", "(", "xs", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "", "else", ":", "\n", "                ", "envel", "=", "1", "\n", "", "", "if", "fs_mult", "is", "not", "None", ":", "\n", "            ", "xs", "=", "xs", "*", "self", ".", "mult_act", "(", "fs_mult", ")", "\n", "", "if", "fs_add", "is", "not", "None", ":", "\n", "            ", "R", "=", "dists_nuc", ".", "min", "(", "dim", "=", "-", "1", ")", ".", "values", "/", "0.5", "\n", "cutoff", "=", "torch", ".", "where", "(", "\n", "R", "<", "1", ",", "R", "**", "2", "*", "(", "6", "-", "8", "*", "R", "+", "3", "*", "R", "**", "2", ")", ",", "R", ".", "new_tensor", "(", "1", ")", "\n", ")", "\n", "idx", "=", "(", "slice", "(", "None", ")", ",", "*", "(", "[", "None", "]", "*", "(", "len", "(", "xs", ".", "shape", ")", "-", "3", ")", ")", ",", "slice", "(", "None", ")", ",", "None", ")", "\n", "xs", "=", "xs", "+", "cutoff", "[", "idx", "]", "*", "envel", "*", "self", ".", "add_act", "(", "fs_add", ")", "\n", "", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.__init__": [[131, 217], ["deepqmc.wf.WaveFunction.__init__", "paulinet.PauliNet.register_buffer", "molorb.MolecularOrbital", "paulinet.PauliNet.register_buffer", "max", "torch.tensor", "torch.nn.Linear", "torch.nn.Identity", "paulinet.BackflowOp", "torch.tensor", "log.info", "isinstance", "omni_factory", "paulinet.PauliNet.requires_grad_embeddings_", "len", "sum", "cusp.ElectronicAsymptotic", "list", "list", "range", "len", "len", "range", "range", "[].tolist", "len", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.requires_grad_embeddings_"], ["def", "__init__", "(", "\n", "self", ",", "\n", "mol", ",", "\n", "basis", ",", "\n", "n_configurations", "=", "1", ",", "\n", "n_orbitals", "=", "None", ",", "\n", "use_sloglindet", "=", "True", ",", "\n", "backflow_op", "=", "None", ",", "\n", "dummy_coords", "=", "None", ",", "\n", "*", ",", "\n", "full_determinant", "=", "False", ",", "\n", "cusp_correction", "=", "True", ",", "\n", "cusp_electrons", "=", "True", ",", "\n", "backflow_type", "=", "'orbital'", ",", "\n", "backflow_channels", "=", "1", ",", "\n", "backflow_transform", "=", "'mult'", ",", "\n", "rc_scaling", "=", "1.0", ",", "\n", "cusp_alpha", "=", "10.0", ",", "\n", "freeze_embed", "=", "False", ",", "\n", "omni_factory", "=", "'omni_schnet'", ",", "\n", "omni_kwargs", "=", "None", ",", "\n", ")", ":", "\n", "        ", "assert", "not", "full_determinant", "or", "backflow_type", "==", "'det'", "\n", "super", "(", ")", ".", "__init__", "(", "mol", ")", "\n", "n_up", ",", "n_down", "=", "self", ".", "n_up", ",", "self", ".", "n_down", "\n", "n_orbitals", "=", "n_orbitals", "or", "max", "(", "n_up", ",", "n_down", ")", "\n", "confs", "=", "[", "list", "(", "range", "(", "n_up", ")", ")", "+", "list", "(", "range", "(", "n_down", ")", ")", "]", "+", "[", "\n", "sum", "(", "(", "torch", ".", "randperm", "(", "n_orbitals", ")", "[", ":", "n", "]", ".", "tolist", "(", ")", "for", "n", "in", "(", "n_up", ",", "n_down", ")", ")", ",", "[", "]", ")", "\n", "for", "_", "in", "range", "(", "n_configurations", "-", "1", ")", "\n", "]", "\n", "self", ".", "register_buffer", "(", "'confs'", ",", "torch", ".", "tensor", "(", "confs", ")", ")", "\n", "self", ".", "conf_coeff", "=", "(", "\n", "nn", ".", "Linear", "(", "n_configurations", ",", "1", ",", "bias", "=", "False", ")", "\n", "if", "n_configurations", ">", "1", "\n", "else", "nn", ".", "Identity", "(", ")", "\n", ")", "\n", "self", ".", "mo", "=", "MolecularOrbital", "(", "\n", "mol", ",", "\n", "basis", ",", "\n", "n_orbitals", ",", "\n", "cusp_correction", "=", "cusp_correction", ",", "\n", "rc_scaling", "=", "rc_scaling", ",", "\n", ")", "\n", "self", ".", "cusp_same", ",", "self", ".", "cusp_anti", "=", "(", "\n", "(", "ElectronicAsymptotic", "(", "cusp", "=", "cusp", ",", "alpha", "=", "cusp_alpha", ")", "for", "cusp", "in", "(", "0.25", ",", "0.5", ")", ")", "\n", "if", "cusp_electrons", "\n", "else", "(", "None", ",", "None", ")", "\n", ")", "\n", "backflow_spec", "=", "{", "\n", "'orbital'", ":", "[", "n_orbitals", ",", "backflow_channels", "]", ",", "\n", "'det'", ":", "[", "\n", "n_up", "+", "n_down", "if", "full_determinant", "else", "(", "n_up", ",", "n_down", ")", ",", "\n", "len", "(", "self", ".", "confs", ")", "*", "backflow_channels", ",", "\n", "]", ",", "\n", "}", "[", "backflow_type", "]", "\n", "if", "backflow_transform", "==", "'both'", ":", "\n", "            ", "backflow_spec", "[", "1", "]", "*=", "2", "\n", "", "self", ".", "backflow_type", "=", "backflow_type", "\n", "self", ".", "backflow_transform", "=", "backflow_transform", "\n", "self", ".", "backflow_op", "=", "backflow_op", "or", "BackflowOp", "(", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'dummy_coords'", ",", "torch", ".", "tensor", "(", "[", "]", "if", "dummy_coords", "is", "None", "else", "dummy_coords", ")", "\n", ")", "\n", "if", "'paulinet.omni_factory'", "in", "PLUGINS", ":", "\n", "            ", "log", ".", "info", "(", "'Using a plugin for paulinet.omni_factory'", ")", "\n", "omni_factory", "=", "PLUGINS", "[", "'paulinet.omni_factory'", "]", "\n", "", "elif", "isinstance", "(", "omni_factory", ",", "str", ")", ":", "\n", "            ", "if", "omni_kwargs", ":", "\n", "                ", "omni_kwargs", "=", "omni_kwargs", "[", "omni_factory", "]", "\n", "", "omni_factory", "=", "self", ".", "OMNI_FACTORIES", "[", "omni_factory", "]", "\n", "", "self", ".", "omni", "=", "(", "\n", "omni_factory", "(", "\n", "len", "(", "mol", ".", "coords", ")", "+", "len", "(", "self", ".", "dummy_coords", ")", ",", "\n", "n_up", ",", "\n", "n_down", ",", "\n", "*", "backflow_spec", ",", "\n", "**", "(", "omni_kwargs", "or", "{", "}", ")", ",", "\n", ")", "\n", "if", "omni_factory", "\n", "else", "None", "\n", ")", "\n", "if", "freeze_embed", ":", "\n", "            ", "self", ".", "requires_grad_embeddings_", "(", "False", ")", "\n", "", "self", ".", "n_determinants", "=", "len", "(", "self", ".", "confs", ")", "*", "backflow_channels", "\n", "self", ".", "use_sloglindet", "=", "use_sloglindet", "\n", "self", ".", "full_determinant", "=", "full_determinant", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.requires_grad_classes_": [[218, 224], ["paulinet.PauliNet.modules", "isinstance", "m.parameters", "p.requires_grad_"], "methods", ["None"], ["", "def", "requires_grad_classes_", "(", "self", ",", "classes", ",", "requires_grad", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "classes", ")", ":", "\n", "                ", "for", "p", "in", "m", ".", "parameters", "(", "recurse", "=", "False", ")", ":", "\n", "                    ", "p", ".", "requires_grad_", "(", "requires_grad", ")", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.requires_grad_cusps_": [[225, 227], ["paulinet.PauliNet.requires_grad_classes_"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.requires_grad_classes_"], ["", "def", "requires_grad_cusps_", "(", "self", ",", "requires_grad", ")", ":", "\n", "        ", "return", "self", ".", "requires_grad_classes_", "(", "CuspCorrection", ",", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.requires_grad_embeddings_": [[228, 230], ["paulinet.PauliNet.requires_grad_classes_"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.requires_grad_classes_"], ["", "def", "requires_grad_embeddings_", "(", "self", ",", "requires_grad", ")", ":", "\n", "        ", "return", "self", ".", "requires_grad_classes_", "(", "nn", ".", "Embedding", ",", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.requires_grad_nets_": [[231, 233], ["paulinet.PauliNet.requires_grad_classes_"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.requires_grad_classes_"], ["", "def", "requires_grad_nets_", "(", "self", ",", "requires_grad", ")", ":", "\n", "        ", "return", "self", ".", "requires_grad_classes_", "(", "nn", ".", "Linear", ",", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.DEFAULTS": [[234, 253], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "DEFAULTS", "(", "cls", ")", ":", "\n", "        ", "from", ".", "omni", "import", "Backflow", ",", "Jastrow", "\n", "from", ".", "schnet", "import", "ElectronicSchNet", ",", "SubnetFactory", "\n", "\n", "return", "{", "\n", "(", "cls", ".", "from_hf", ",", "'kwargs'", ")", ":", "cls", ".", "from_pyscf", ",", "\n", "(", "cls", ".", "from_pyscf", ",", "'kwargs'", ")", ":", "cls", ",", "\n", "(", "cls", ",", "'omni_kwargs'", ")", ":", "cls", ".", "OMNI_FACTORIES", ",", "\n", "(", "OmniSchNet", ",", "'schnet_kwargs'", ")", ":", "ElectronicSchNet", ",", "\n", "(", "OmniSchNet", ",", "'mf_schnet_kwargs'", ")", ":", "(", "ElectronicSchNet", ",", "[", "'version'", "]", ")", ",", "\n", "(", "OmniSchNet", ",", "'subnet_kwargs'", ")", ":", "SubnetFactory", ",", "\n", "(", "OmniSchNet", ",", "'mf_subnet_kwargs'", ")", ":", "SubnetFactory", ",", "\n", "(", "OmniSchNet", ",", "'jastrow_kwargs'", ")", ":", "Jastrow", ",", "\n", "(", "OmniSchNet", ",", "'backflow_kwargs'", ")", ":", "Backflow", ",", "\n", "(", "OmniSchNet", ",", "'rs_backflow_kwargs'", ")", ":", "None", ",", "\n", "(", "Jastrow", ",", "'kwargs'", ")", ":", "None", ",", "\n", "(", "Backflow", ",", "'kwargs'", ")", ":", "None", ",", "\n", "(", "SubnetFactory", ",", "'kwargs'", ")", ":", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.from_pyscf": [[255, 330], ["hasattr", "deepqmc.Molecule", "gto.GTOBasis.from_pyscf", "cls", "pyscfext.confs_from_mc", "zip", "torch.tensor", "torch.tensor", "log.info", "len", "mf.mol.atom_coords().astype", "mf.mol.atom_charges", "cls.mo.init_from_pyscf", "set", "numpy.array", "torch.tensor.max().item", "cls.confs.detach().copy_", "abs", "mf.mol.atom_coords", "len", "cls.conf_coeff.weight.detach().copy_", "cls.conf_coeff.weight.requires_grad_", "len", "torch.tensor.max", "cls.confs.detach", "abs", "cls.conf_coeff.weight.detach"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.from_pyscf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.confs_from_mc", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital.init_from_pyscf"], ["", "@", "classmethod", "\n", "def", "from_pyscf", "(", "\n", "cls", ",", "\n", "mf", ",", "\n", "*", ",", "\n", "init_weights", "=", "True", ",", "\n", "freeze_mos", "=", "True", ",", "\n", "freeze_confs", "=", "False", ",", "\n", "conf_cutoff", "=", "1e-2", ",", "\n", "conf_limit", "=", "None", ",", "\n", "conf_strs", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"Construct a :class:`PauliNet` instance from a finished PySCF_ calculation.\n\n        Args:\n            mf (:class:`pyscf.scf.hf.RHF` | :class:`pyscf.mcscf.mc1step.CASSCF`):\n                restricted (multireference) HF calculation\n            init_weights (bool): whether molecular orbital coefficients and\n                configuration coefficients are initialized from the HF calculation\n            freeze_mos (bool): whether the MO coefficients are frozen for\n                gradient optimization\n            freeze_confs (bool): whether the configuration coefficients are\n                frozen for gradient optimization\n            conf_cutoff (float): determinants with a linear coefficient above\n                this threshold are included in the determinant expansion\n            conf_limit (int): if given, at maximum the given number of configurations\n                with the largest linear coefficients are used in the ansatz\n            kwargs: all other arguments are passed to the :class:`PauliNet`\n                constructor\n\n        .. _PySCF: http://pyscf.org\n        \"\"\"", "\n", "assert", "not", "(", "set", "(", "kwargs", ")", "&", "{", "'n_configurations'", ",", "'n_orbitals'", "}", ")", "\n", "assert", "not", "conf_strs", "or", "not", "conf_limit", "\n", "n_up", ",", "n_down", "=", "mf", ".", "mol", ".", "nelec", "\n", "if", "hasattr", "(", "mf", ",", "'fcisolver'", ")", ":", "\n", "            ", "confs", "=", "confs_from_mc", "(", "mf", ")", "\n", "if", "conf_limit", ":", "\n", "                ", "if", "abs", "(", "confs", "[", "conf_limit", "-", "1", "]", "[", "1", "]", "-", "confs", "[", "conf_limit", "]", "[", "1", "]", ")", "<", "1e-10", ":", "\n", "                    ", "conf_limit", "-=", "1", "\n", "", "confs", "=", "confs", "[", ":", "conf_limit", "]", "\n", "", "if", "conf_strs", ":", "\n", "                ", "confs", "=", "{", "c", "[", "0", "]", ":", "c", "for", "c", "in", "confs", "}", "\n", "confs", "=", "[", "confs", "[", "s", "]", "for", "s", "in", "conf_strs", "]", "\n", "", "if", "not", "conf_limit", "and", "not", "conf_strs", ":", "\n", "                ", "confs", "=", "[", "c", "for", "c", "in", "confs", "if", "abs", "(", "c", "[", "1", "]", ")", ">=", "conf_cutoff", "]", "\n", "assert", "confs", "\n", "", "conf_strs", ",", "conf_coeff", ",", "confs", "=", "zip", "(", "*", "confs", ")", "\n", "conf_coeff", "=", "torch", ".", "tensor", "(", "conf_coeff", ")", "\n", "confs", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "confs", ")", ")", "\n", "log", ".", "info", "(", "f'Will use {len(confs)} electron configurations'", ")", "\n", "kwargs", "[", "'n_configurations'", "]", "=", "len", "(", "confs", ")", "\n", "kwargs", "[", "'n_orbitals'", "]", "=", "confs", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "confs", "=", "None", "\n", "conf_strs", "=", "None", "\n", "", "mol", "=", "Molecule", "(", "\n", "mf", ".", "mol", ".", "atom_coords", "(", ")", ".", "astype", "(", "'float32'", ")", ",", "\n", "mf", ".", "mol", ".", "atom_charges", "(", ")", ",", "\n", "mf", ".", "mol", ".", "charge", ",", "\n", "mf", ".", "mol", ".", "spin", ",", "\n", ")", "\n", "basis", "=", "GTOBasis", ".", "from_pyscf", "(", "mf", ".", "mol", ")", "\n", "wf", "=", "cls", "(", "mol", ",", "basis", ",", "**", "kwargs", ")", "\n", "wf", ".", "conf_strs", "=", "conf_strs", "\n", "if", "init_weights", ":", "\n", "            ", "wf", ".", "mo", ".", "init_from_pyscf", "(", "mf", ",", "freeze_mos", "=", "freeze_mos", ")", "\n", "if", "confs", "is", "not", "None", ":", "\n", "                ", "wf", ".", "confs", ".", "detach", "(", ")", ".", "copy_", "(", "confs", ")", "\n", "if", "len", "(", "confs", ")", ">", "1", ":", "\n", "                    ", "wf", ".", "conf_coeff", ".", "weight", ".", "detach", "(", ")", ".", "copy_", "(", "conf_coeff", ")", "\n", "", "if", "freeze_confs", ":", "\n", "                    ", "wf", ".", "conf_coeff", ".", "weight", ".", "requires_grad_", "(", "False", ")", "\n", "", "", "", "return", "wf", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.from_hf": [[331, 353], ["pyscfext.pyscf_from_mol", "paulinet.PauliNet.from_pyscf", "bool", "bool"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.pyscf_from_mol", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.from_pyscf"], ["", "@", "classmethod", "\n", "def", "from_hf", "(", "cls", ",", "mol", ",", "workdir", "=", "None", ",", "*", ",", "basis", "=", "'6-311g'", ",", "cas", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Construct a :class:`PauliNet` instance by running a HF calculation.\n\n        This is the top-level interface.\n\n        Args:\n            mol (:class:`~deepqmc.Molecule`): molecule whose wave function\n                is represented\n            basis (str): basis of the internal HF calculation\n            cas ((int, int)): tuple of the number of active orbitals and number of\n                active electrons for a complete active space multireference\n                HF calculation\n            workdir (str): path where PySCF calculations are cached\n            kwargs: all other arguments are passed to :func:`PauliNet.from_pyscf`\n        \"\"\"", "\n", "mf", ",", "mc", "=", "pyscf_from_mol", "(", "mol", ",", "basis", ",", "cas", ",", "workdir", ")", "\n", "assert", "bool", "(", "cas", ")", "==", "bool", "(", "mc", ")", "\n", "wf", "=", "PauliNet", ".", "from_pyscf", "(", "mc", "or", "mf", ",", "**", "kwargs", ")", "\n", "wf", ".", "mf", "=", "mf", "\n", "wf", ".", "mol", ".", "data", "=", "mol", ".", "data", "\n", "return", "wf", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.pop_charges": [[354, 360], ["paulinet.PauliNet.mol.charges.new", "super().pop_charges", "mf.pop"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.pop_charges"], ["", "def", "pop_charges", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "mf", "=", "self", ".", "mf", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "super", "(", ")", ".", "pop_charges", "(", ")", "\n", "", "return", "self", ".", "mol", ".", "charges", ".", "new", "(", "mf", ".", "pop", "(", "verbose", "=", "0", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet._backflow_op": [[361, 369], ["paulinet.PauliNet.backflow_op"], "methods", ["None"], ["", "def", "_backflow_op", "(", "self", ",", "xs", ",", "fs", ",", "dists_nuc", ")", ":", "\n", "        ", "if", "self", ".", "backflow_transform", "==", "'mult'", ":", "\n", "            ", "fs_mult", ",", "fs_add", "=", "fs", ",", "None", "\n", "", "elif", "self", ".", "backflow_transform", "==", "'add'", ":", "\n", "            ", "fs_mult", ",", "fs_add", "=", "None", ",", "fs", "\n", "", "elif", "self", ".", "backflow_transform", "==", "'both'", ":", "\n", "            ", "fs_mult", ",", "fs_add", "=", "fs", "[", ":", ",", ":", "fs", ".", "shape", "[", "1", "]", "//", "2", "]", ",", "fs", "[", ":", ",", "fs", ".", "shape", "[", "1", "]", "//", "2", ":", "]", "\n", "", "return", "self", ".", "backflow_op", "(", "xs", ",", "fs_mult", ",", "fs_add", ",", "dists_nuc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.forward": [[370, 449], ["paulinet.PauliNet.", "deepqmc.physics.pairwise_diffs", "paulinet.PauliNet.mo", "paulinet.PauliNet.view", "xs[].transpose", "xs[].transpose", "paulinet.PauliNet.omni", "torch.cat", "diffs_nuc[].sqrt().view", "paulinet.PauliNet._backflow_op", "len", "isinstance", "paulinet.PauliNet.flatten().contiguous", "paulinet.PauliNet.flatten().contiguous", "deepqmc.torchext.sloglindet", "sign.detach.detach.detach", "paulinet.eval_log_slater", "paulinet.eval_log_slater", "xs_shift.where.where.where", "paulinet.PauliNet.conf_coeff().squeeze().mean", "paulinet.PauliNet.cusp_same", "paulinet.PauliNet.cusp_anti", "torch.cat", "fs.unflatten.unflatten.unflatten", "fs.unflatten.unflatten.new_zeros", "paulinet.PauliNet._backflow_op", "fs.unflatten.unflatten.new_empty", "paulinet.PauliNet._backflow_op", "paulinet.PauliNet._backflow_op", "paulinet.PauliNet.new_ones", "paulinet.PauliNet.new_ones.expand().flatten", "paulinet.PauliNet.flatten().max", "xs_shift.where.where.new_tensor", "torch.exp", "paulinet.PauliNet.sign().detach", "torch.cat", "dists_elec[].flatten", "rs.flatten", "diffs_nuc[].sqrt", "fs[].unflatten", "fs[].unflatten", "paulinet.PauliNet.flatten", "paulinet.PauliNet.flatten", "torch.isinf", "paulinet.PauliNet.conf_coeff().squeeze", "paulinet.PauliNet.abs().log", "paulinet.PauliNet.new_ones.expand", "paulinet.PauliNet.flatten", "paulinet.PauliNet.sign", "deepqmc.torchext.triu_flat", "paulinet.PauliNet.conf_coeff", "paulinet.PauliNet.abs", "len"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_diffs", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet._backflow_op", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.eval_log_slater", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.eval_log_slater", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet._backflow_op", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet._backflow_op", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet._backflow_op", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.triu_flat"], ["", "def", "forward", "(", "self", ",", "rs", ")", ":", "# noqa: C901", "\n", "        ", "batch_dim", ",", "n_elec", "=", "rs", ".", "shape", "[", ":", "2", "]", "\n", "assert", "n_elec", "==", "self", ".", "confs", ".", "shape", "[", "1", "]", "\n", "dists_elec", "=", "pairwise_self_distance", "(", "rs", ",", "full", "=", "True", ")", "\n", "# get jastrow J, backflow fs (as [bs, q, i, mu/nu]), and real-space", "\n", "# backflow ps (as [bs, i, 3])", "\n", "coords", "=", "self", ".", "mol", ".", "coords", "\n", "J", ",", "fs", ",", "ps", "=", "(", "\n", "self", ".", "omni", "(", "rs", ",", "torch", ".", "cat", "(", "[", "self", ".", "mol", ".", "coords", ",", "self", ".", "dummy_coords", "]", ",", "dim", "=", "0", ")", ")", "\n", "if", "self", ".", "omni", "\n", "else", "(", "None", ",", "None", ",", "None", ")", "\n", ")", "\n", "if", "ps", "is", "not", "None", ":", "\n", "            ", "rs", "=", "rs", "+", "ps", "\n", "", "diffs_nuc", "=", "pairwise_diffs", "(", "torch", ".", "cat", "(", "[", "coords", ",", "rs", ".", "flatten", "(", "end_dim", "=", "1", ")", "]", ")", ",", "coords", ")", "\n", "if", "self", ".", "omni", ":", "\n", "            ", "dists_nuc", "=", "(", "\n", "diffs_nuc", "[", "len", "(", "coords", ")", ":", ",", ":", ",", "-", "1", "]", ".", "sqrt", "(", ")", ".", "view", "(", "batch_dim", ",", "n_elec", ",", "-", "1", ")", "\n", ")", "\n", "", "xs", "=", "self", ".", "mo", "(", "diffs_nuc", ")", "\n", "# get orbitals as [bs, 1, i, mu]", "\n", "xs", "=", "xs", ".", "view", "(", "batch_dim", ",", "1", ",", "n_elec", ",", "-", "1", ")", "\n", "if", "fs", "is", "not", "None", "and", "self", ".", "backflow_type", "==", "'orbital'", ":", "\n", "            ", "xs", "=", "self", ".", "_backflow_op", "(", "xs", ",", "fs", ",", "dists_nuc", ")", "\n", "# form dets as [bs, q, p, i, nu]", "\n", "", "n_up", "=", "self", ".", "n_up", "\n", "conf_up", ",", "conf_down", "=", "self", ".", "confs", "[", ":", ",", ":", "n_up", "]", ",", "self", ".", "confs", "[", ":", ",", "n_up", ":", "]", "\n", "det_up", "=", "xs", "[", ":", ",", ":", ",", ":", "n_up", ",", "conf_up", "]", ".", "transpose", "(", "-", "3", ",", "-", "2", ")", "\n", "det_down", "=", "xs", "[", ":", ",", ":", ",", "n_up", ":", ",", "conf_down", "]", ".", "transpose", "(", "-", "3", ",", "-", "2", ")", "\n", "if", "fs", "is", "not", "None", "and", "self", ".", "backflow_type", "==", "'det'", ":", "\n", "            ", "n_conf", "=", "len", "(", "self", ".", "confs", ")", "\n", "if", "self", ".", "full_determinant", ":", "\n", "                ", "fs", "=", "fs", ".", "unflatten", "(", "1", ",", "(", "fs", ".", "shape", "[", "1", "]", "//", "n_conf", ",", "n_conf", ")", ")", "\n", "det_full", "=", "fs", ".", "new_zeros", "(", "(", "*", "det_up", ".", "shape", "[", ":", "3", "]", ",", "n_elec", ",", "n_elec", ")", ")", "\n", "det_full", "[", "...", ",", ":", "n_up", ",", ":", "n_up", "]", "=", "det_up", "\n", "det_full", "[", "...", ",", "n_up", ":", ",", "n_up", ":", "]", "=", "det_down", "\n", "det_up", "=", "det_full", "=", "self", ".", "_backflow_op", "(", "det_full", ",", "fs", ",", "dists_nuc", ")", "\n", "det_down", "=", "fs", ".", "new_empty", "(", "(", "*", "det_down", ".", "shape", "[", ":", "3", "]", ",", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "fs", "=", "(", "\n", "fs", "[", "0", "]", ".", "unflatten", "(", "1", ",", "(", "fs", "[", "0", "]", ".", "shape", "[", "1", "]", "//", "n_conf", ",", "n_conf", ")", ")", ",", "\n", "fs", "[", "1", "]", ".", "unflatten", "(", "1", ",", "(", "fs", "[", "1", "]", ".", "shape", "[", "1", "]", "//", "n_conf", ",", "n_conf", ")", ")", ",", "\n", ")", "\n", "det_up", "=", "self", ".", "_backflow_op", "(", "det_up", ",", "fs", "[", "0", "]", ",", "dists_nuc", "[", ":", ",", ":", "n_up", "]", ")", "\n", "det_down", "=", "self", ".", "_backflow_op", "(", "det_down", ",", "fs", "[", "1", "]", ",", "dists_nuc", "[", ":", ",", "n_up", ":", "]", ")", "\n", "", "", "if", "self", ".", "use_sloglindet", ":", "\n", "            ", "bf_dim", "=", "det_up", ".", "shape", "[", "-", "4", "]", "\n", "if", "isinstance", "(", "self", ".", "conf_coeff", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "conf_coeff", "=", "self", ".", "conf_coeff", ".", "weight", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "conf_coeff", "=", "det_up", ".", "new_ones", "(", "1", ")", "\n", "", "conf_coeff", "=", "conf_coeff", ".", "expand", "(", "bf_dim", ",", "-", "1", ")", ".", "flatten", "(", ")", "/", "bf_dim", "\n", "det_up", "=", "det_up", ".", "flatten", "(", "start_dim", "=", "-", "4", ",", "end_dim", "=", "-", "3", ")", ".", "contiguous", "(", ")", "\n", "det_down", "=", "det_down", ".", "flatten", "(", "start_dim", "=", "-", "4", ",", "end_dim", "=", "-", "3", ")", ".", "contiguous", "(", ")", "\n", "sign", ",", "psi", "=", "sloglindet", "(", "conf_coeff", ",", "det_up", ",", "det_down", ")", "\n", "sign", "=", "sign", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "sign_up", ",", "det_up", "=", "eval_log_slater", "(", "det_up", ")", "\n", "sign_down", ",", "det_down", "=", "eval_log_slater", "(", "det_down", ")", "\n", "xs", "=", "det_up", "+", "det_down", "\n", "xs_shift", "=", "xs", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "max", "(", "dim", "=", "-", "1", ")", ".", "values", "\n", "# the exp-normalize trick, to avoid over/underflow of the exponential", "\n", "xs_shift", "=", "xs_shift", ".", "where", "(", "~", "torch", ".", "isinf", "(", "xs_shift", ")", ",", "xs_shift", ".", "new_tensor", "(", "0", ")", ")", "\n", "# replace -inf shifts, to avoid running into nans (see sloglindet)", "\n", "xs", "=", "sign_up", "*", "sign_down", "*", "torch", ".", "exp", "(", "xs", "-", "xs_shift", "[", ":", ",", "None", ",", "None", "]", ")", "\n", "psi", "=", "self", ".", "conf_coeff", "(", "xs", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "psi", ",", "sign", "=", "psi", ".", "abs", "(", ")", ".", "log", "(", ")", "+", "xs_shift", ",", "psi", ".", "sign", "(", ")", ".", "detach", "(", ")", "\n", "", "if", "self", ".", "cusp_same", ":", "\n", "            ", "cusp_same", "=", "self", ".", "cusp_same", "(", "\n", "torch", ".", "cat", "(", "\n", "[", "triu_flat", "(", "dists_elec", "[", ":", ",", "idxs", ",", "idxs", "]", ")", "for", "idxs", "in", "self", ".", "spin_slices", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", ")", "\n", "cusp_anti", "=", "self", ".", "cusp_anti", "(", "dists_elec", "[", ":", ",", ":", "n_up", ",", "n_up", ":", "]", ".", "flatten", "(", "start_dim", "=", "1", ")", ")", "\n", "psi", "=", "psi", "+", "cusp_same", "+", "cusp_anti", "\n", "", "if", "J", "is", "not", "None", ":", "\n", "            ", "psi", "=", "psi", "+", "J", "\n", "", "return", "psi", ",", "sign", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.eval_slater": [[25, 29], ["torch.det", "xs.new_ones", "xs.contiguous"], "function", ["None"], ["def", "eval_slater", "(", "xs", ")", ":", "\n", "    ", "if", "xs", ".", "shape", "[", "-", "1", "]", "==", "0", ":", "\n", "        ", "return", "xs", ".", "new_ones", "(", "xs", ".", "shape", "[", ":", "-", "2", "]", ")", "\n", "", "return", "torch", ".", "det", "(", "xs", ".", "contiguous", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.eval_log_slater": [[31, 35], ["xs.contiguous().slogdet", "xs.new_ones", "xs.new_zeros", "xs.contiguous"], "function", ["None"], ["", "def", "eval_log_slater", "(", "xs", ")", ":", "\n", "    ", "if", "xs", ".", "shape", "[", "-", "1", "]", "==", "0", ":", "\n", "        ", "return", "xs", ".", "new_ones", "(", "xs", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "xs", ".", "new_zeros", "(", "xs", ".", "shape", "[", ":", "-", "2", "]", ")", "\n", "", "return", "xs", ".", "contiguous", "(", ")", ".", "slogdet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.ElectronicAsymptotic.__init__": [[27, 31], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "cusp", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cusp", "=", "cusp", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.ElectronicAsymptotic.forward": [[32, 34], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dists", ")", ":", "\n", "        ", "return", "-", "(", "self", ".", "cusp", "/", "(", "self", ".", "alpha", "*", "(", "1", "+", "self", ".", "alpha", "*", "dists", ")", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.ElectronicAsymptotic.extra_repr": [[35, 37], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'cusp={self.cusp}, alpha={self.alpha}'", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.CuspCorrection.__init__": [[101, 108], ["torch.nn.Module.__init__", "cusp.CuspCorrection.register_buffer", "torch.nn.Parameter", "cusp.CuspCorrection.register_buffer", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["def", "__init__", "(", "self", ",", "charges", ",", "n_orbitals", ",", "rc", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'charges'", ",", "charges", ")", "\n", "self", ".", "shifts", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "len", "(", "charges", ")", ",", "n_orbitals", ")", ")", "\n", "self", ".", "register_buffer", "(", "'rc'", ",", "rc", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "cusp_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.CuspCorrection.set_cusp_params": [[109, 114], ["torch.nn.Module", "torch.nn.Module.register_buffer", "torch.nn.Module.register_buffer", "torch.nn.Module.register_buffer", "cusp.CuspCorrection.rc.new_tensor", "cusp.CuspCorrection.rc.new_tensor", "cusp.CuspCorrection.rc.new_tensor"], "methods", ["None"], ["", "def", "set_cusp_params", "(", "self", ",", "*", ",", "C", ",", "sgn", ",", "alphas", ")", ":", "\n", "        ", "self", ".", "cusp_params", "=", "cp", "=", "nn", ".", "Module", "(", ")", "\n", "cp", ".", "register_buffer", "(", "'C'", ",", "self", ".", "rc", ".", "new_tensor", "(", "C", ")", ")", "\n", "cp", ".", "register_buffer", "(", "'sgn'", ",", "self", ".", "rc", ".", "new_tensor", "(", "sgn", ")", ")", "\n", "cp", ".", "register_buffer", "(", "'alphas'", ",", "self", ".", "rc", ".", "new_tensor", "(", "alphas", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.CuspCorrection._fit_cusp_poly": [[115, 139], ["phi0.sign", "torch.where", "torch.log", "torch.log", "phi_gto_boundary[].abs", "x[].expand_as", "torch.abs", "torch.abs", "cusp.fit_cusp_poly", "phi.sign", "phi0.abs", "phi.abs"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.fit_cusp_poly"], ["", "def", "_fit_cusp_poly", "(", "self", ",", "phi_gto_boundary", ",", "mos0", ")", ":", "\n", "        ", "has_s_part", "=", "phi_gto_boundary", "[", "0", "]", ".", "abs", "(", ")", ">", "self", ".", "eps", "\n", "charges", ",", "rc", "=", "(", "\n", "x", "[", ":", ",", "None", "]", ".", "expand_as", "(", "has_s_part", ")", "for", "x", "in", "(", "self", ".", "charges", ",", "self", ".", "rc", ")", "\n", ")", "\n", "phi_gto_boundary", ",", "mos0", ",", "shifts", ",", "charges", ",", "rc", "=", "(", "\n", "x", "[", "...", ",", "has_s_part", "]", "\n", "for", "x", "in", "(", "phi_gto_boundary", ",", "mos0", ",", "self", ".", "shifts", ",", "charges", ",", "rc", ")", "\n", ")", "\n", "phi0", ",", "phi", ",", "dphi", ",", "d2phi", "=", "phi_gto_boundary", "\n", "phi0", "=", "phi0", "*", "(", "1", "+", "shifts", ")", "\n", "sgn", "=", "phi0", ".", "sign", "(", ")", "\n", "C", "=", "torch", ".", "where", "(", "\n", "(", "sgn", "==", "phi", ".", "sign", "(", ")", ")", "&", "(", "phi0", ".", "abs", "(", ")", "<", "phi", ".", "abs", "(", ")", ")", ",", "\n", "2", "*", "phi0", "-", "phi", ",", "\n", "2", "*", "phi", "-", "phi0", ",", "\n", ")", "\n", "phi_m_C", "=", "phi", "-", "C", "\n", "X1", "=", "torch", ".", "log", "(", "torch", ".", "abs", "(", "phi_m_C", ")", ")", "\n", "X2", "=", "dphi", "/", "phi_m_C", "\n", "X3", "=", "d2phi", "/", "phi_m_C", "\n", "X4", "=", "-", "charges", "*", "(", "mos0", "+", "phi0", "*", "shifts", ")", "/", "(", "phi0", "-", "C", ")", "\n", "X5", "=", "torch", ".", "log", "(", "torch", ".", "abs", "(", "phi0", "-", "C", ")", ")", "\n", "return", "C", ",", "sgn", ",", "fit_cusp_poly", "(", "rc", ",", "X1", ",", "X2", ",", "X3", ",", "X4", ",", "X5", ")", ",", "has_s_part", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.CuspCorrection.forward": [[140, 166], ["rs_2.min", "rs_2_nearest[].sqrt", "torch.empty_like", "torch.arange", "cusp.CuspCorrection._fit_cusp_poly", "has_s_part.sum", "[].expand", "torch.stack", "phi_gto_boundary[].abs", "cusp.eval_cusp_poly", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.CuspCorrection._fit_cusp_poly", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.eval_cusp_poly"], ["", "def", "forward", "(", "self", ",", "rs_2", ",", "phi_gto_boundary", ",", "mos0", ")", ":", "\n", "# TODO the indexing here is far from desirable, but I don't have time to", "\n", "# clean it up now", "\n", "        ", "if", "self", ".", "cusp_params", ":", "\n", "            ", "C", "=", "self", ".", "cusp_params", ".", "C", "\n", "sgn", "=", "self", ".", "cusp_params", ".", "sgn", "\n", "alphas", "=", "self", ".", "cusp_params", ".", "alphas", "\n", "has_s_part", "=", "phi_gto_boundary", "[", "0", "]", ".", "abs", "(", ")", ">", "self", ".", "eps", "\n", "", "else", ":", "\n", "            ", "C", ",", "sgn", ",", "alphas", ",", "has_s_part", "=", "self", ".", "_fit_cusp_poly", "(", "phi_gto_boundary", ",", "mos0", ")", "\n", "", "rs_2_nearest", ",", "center_idx", "=", "rs_2", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "maybe_corrected", "=", "rs_2_nearest", "<", "self", ".", "rc", "[", "center_idx", "]", "**", "2", "\n", "rs_1", "=", "rs_2_nearest", "[", "maybe_corrected", "]", ".", "sqrt", "(", ")", "\n", "corrected", "=", "maybe_corrected", "[", ":", ",", "None", "]", "&", "has_s_part", "[", "center_idx", "]", "\n", "params_idx", "=", "torch", ".", "empty_like", "(", "has_s_part", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "params_idx", "[", "has_s_part", "]", "=", "torch", ".", "arange", "(", "\n", "has_s_part", ".", "sum", "(", ")", ",", "device", "=", "params_idx", ".", "device", "\n", ")", "\n", "rs_1_idx", "=", "torch", ".", "arange", "(", "len", "(", "rs_1", ")", ")", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "mos0", ".", "shape", "[", "-", "1", "]", ")", "[", "\n", "corrected", "[", "maybe_corrected", "]", "\n", "]", "\n", "C", ",", "sgn", ",", "*", "alphas", "=", "torch", ".", "stack", "(", "[", "C", ",", "sgn", ",", "*", "alphas", "]", ")", "[", "\n", ":", ",", "params_idx", "[", "center_idx", "]", "[", "corrected", "]", "\n", "]", "\n", "phi_cusped", "=", "C", "+", "sgn", "*", "eval_cusp_poly", "(", "rs_1", "[", "rs_1_idx", "]", ",", "*", "alphas", ")", "\n", "return", "corrected", ",", "center_idx", ",", "phi_cusped", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.fit_cusp_poly": [[168, 178], ["None"], "function", ["None"], ["", "", "def", "fit_cusp_poly", "(", "rc", ",", "X1", ",", "X2", ",", "X3", ",", "X4", ",", "X5", ")", ":", "\n", "    ", "X1_m_X5", "=", "X1", "-", "X5", "\n", "X2_2_m_X3", "=", "X2", "**", "2", "-", "X3", "\n", "rc_2", ",", "rc_3", ",", "rc_4", "=", "rc", "**", "2", ",", "rc", "**", "3", ",", "rc", "**", "4", "\n", "a0", "=", "X5", "\n", "a1", "=", "X4", "\n", "a2", "=", "-", "X2_2_m_X3", "/", "2", "-", "3", "*", "(", "X2", "+", "X4", ")", "/", "rc", "+", "6", "*", "X1_m_X5", "/", "rc_2", "\n", "a3", "=", "X2_2_m_X3", "/", "rc", "+", "(", "5", "*", "X2", "+", "3", "*", "X4", ")", "/", "rc_2", "-", "8", "*", "X1_m_X5", "/", "rc_3", "\n", "a4", "=", "-", "X2_2_m_X3", "/", "(", "2", "*", "rc_2", ")", "-", "(", "2", "*", "X2", "+", "X4", ")", "/", "rc_3", "+", "3", "*", "X1_m_X5", "/", "rc_4", "\n", "return", "a0", ",", "a1", ",", "a2", ",", "a3", ",", "a4", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.cusp.eval_cusp_poly": [[180, 182], ["torch.exp"], "function", ["None"], ["", "def", "eval_cusp_poly", "(", "rs", ",", "a0", ",", "a1", ",", "a2", ",", "a3", ",", "a4", ")", ":", "\n", "    ", "return", "torch", ".", "exp", "(", "a0", "+", "a1", "*", "rs", "+", "a2", "*", "rs", "**", "2", "+", "a3", "*", "rs", "**", "3", "+", "a4", "*", "rs", "**", "4", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital.__init__": [[57, 83], ["torch.nn.Module.__init__", "len", "torch.nn.Linear", "len", "deepqmc.physics.pairwise_distance", "torch.eye", "cusp.CuspCorrection", "molorb.MolecularOrbital.register_buffer", "len", "log.warning", "basis.get_cusp_info().t", "torch.empty_like", "basis.get_cusp_info"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_distance", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.get_cusp_info"], ["def", "__init__", "(", "\n", "self", ",", "\n", "mol", ",", "\n", "basis", ",", "\n", "n_orbitals", ",", "\n", "cusp_correction", "=", "True", ",", "\n", "rc_scaling", "=", "1.0", ",", "\n", "eps", "=", "1e-6", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_atoms", "=", "len", "(", "mol", ")", "\n", "self", ".", "n_orbitals", "=", "n_orbitals", "\n", "self", ".", "basis", "=", "basis", "\n", "self", ".", "mo_coeff", "=", "nn", ".", "Linear", "(", "len", "(", "basis", ")", ",", "n_orbitals", ",", "bias", "=", "False", ")", "\n", "if", "cusp_correction", ":", "\n", "            ", "rc", "=", "rc_scaling", "/", "mol", ".", "charges", "\n", "dists", "=", "pairwise_distance", "(", "mol", ".", "coords", ",", "mol", ".", "coords", ")", "\n", "eye", "=", "torch", ".", "eye", "(", "len", "(", "mol", ")", ",", "out", "=", "torch", ".", "empty_like", "(", "dists", ")", ")", "\n", "factors", "=", "(", "eye", "+", "dists", "/", "(", "rc", "+", "rc", "[", ":", ",", "None", "]", ")", ")", ".", "min", "(", "dim", "=", "-", "1", ")", ".", "values", "\n", "if", "(", "factors", "<", "0.99", ")", ".", "any", "(", ")", ":", "\n", "                ", "log", ".", "warning", "(", "'Reducing cusp-correction cutoffs due to overlaps'", ")", "\n", "", "rc", "=", "rc", "*", "factors", "\n", "self", ".", "cusp_corr", "=", "CuspCorrection", "(", "mol", ".", "charges", ",", "n_orbitals", ",", "rc", ",", "eps", "=", "eps", ")", "\n", "self", ".", "register_buffer", "(", "'basis_cusp_info'", ",", "basis", ".", "get_cusp_info", "(", "rc", ")", ".", "t", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cusp_corr", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital.init_from_pyscf": [[84, 100], ["mf.mo_coeff.copy", "molorb.MolecularOrbital.mo_coeff.weight.detach().copy_", "torch.from_numpy", "molorb.MolecularOrbital.mo_coeff.weight.requires_grad_", "numpy.sqrt", "molorb.MolecularOrbital.mo_coeff.weight.detach", "numpy.diag", "mf.mol.intor"], "methods", ["None"], ["", "", "def", "init_from_pyscf", "(", "self", ",", "mf", ",", "freeze_mos", "=", "False", ")", ":", "\n", "        ", "\"\"\"Reinitialize the MO coefficient from a PySCF calculation object.\n\n        Args:\n            mf (:class:`pyscf.scf.hf.RHF` | :class:`pyscf.mcscf.mc1step.CASSCF`):\n                restricted (multireference) HF calculation\n            freeze_mos (bool): whether the MO coefficients should be frozen\n        \"\"\"", "\n", "mo_coeff", "=", "mf", ".", "mo_coeff", ".", "copy", "(", ")", "\n", "if", "mf", ".", "mol", ".", "cart", ":", "\n", "            ", "mo_coeff", "*=", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "mf", ".", "mol", ".", "intor", "(", "'int1e_ovlp_cart'", ")", ")", ")", "[", ":", ",", "None", "]", "\n", "", "self", ".", "mo_coeff", ".", "weight", ".", "detach", "(", ")", ".", "copy_", "(", "\n", "torch", ".", "from_numpy", "(", "mo_coeff", "[", ":", ",", ":", "self", ".", "n_orbitals", "]", ".", "T", ")", "\n", ")", "\n", "if", "freeze_mos", ":", "\n", "            ", "self", ".", "mo_coeff", ".", "weight", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital.forward_from_rs": [[101, 104], ["deepqmc.physics.pairwise_diffs", "molorb.MolecularOrbital.", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_diffs"], ["", "", "def", "forward_from_rs", "(", "self", ",", "rs", ",", "coords", ")", ":", "\n", "        ", "diffs_nuc", "=", "pairwise_diffs", "(", "torch", ".", "cat", "(", "[", "coords", ",", "rs", "]", ")", ",", "coords", ")", "\n", "return", "self", "(", "diffs_nuc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital.forward": [[105, 137], ["molorb.MolecularOrbital.basis", "molorb.MolecularOrbital.mo_coeff", "torch.stack", "molorb.MolecularOrbital.cusp_corr", "torch.empty_like", "range", "deepqmc.torchext.merge_tensors", "molorb.MolecularOrbital._mo_coeff_s_type_at", "molorb.MolecularOrbital._mo_coeff_s_type_at", "molorb.MolecularOrbital._basis_cusp_info_at", "range"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.merge_tensors", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital._mo_coeff_s_type_at", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital._mo_coeff_s_type_at", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital._basis_cusp_info_at"], ["", "def", "forward", "(", "self", ",", "diffs", ")", ":", "\n", "# first n_atoms rows of diffs correspond to electrons on nuclei", "\n", "        ", "n_atoms", "=", "self", ".", "n_atoms", "\n", "aos", "=", "self", ".", "basis", "(", "diffs", ")", "\n", "mos", "=", "self", ".", "mo_coeff", "(", "aos", ")", "\n", "mos", ",", "mos0", "=", "mos", "[", "n_atoms", ":", "]", ",", "mos", "[", ":", "n_atoms", "]", "\n", "if", "self", ".", "cusp_corr", ":", "\n", "            ", "dists_2_nuc", ",", "aos", "=", "diffs", "[", "n_atoms", ":", ",", ":", ",", "3", "]", ",", "aos", "[", "n_atoms", ":", "]", "\n", "phi_gto_boundary", "=", "torch", ".", "stack", "(", "# boundary values for s-type parts of MOs", "\n", "[", "\n", "self", ".", "_mo_coeff_s_type_at", "(", "idx", ",", "self", ".", "_basis_cusp_info_at", "(", "idx", ")", ")", "\n", "for", "idx", "in", "range", "(", "n_atoms", ")", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "corrected", ",", "center_idx", ",", "phi_cusped", "=", "self", ".", "cusp_corr", "(", "\n", "dists_2_nuc", ",", "phi_gto_boundary", ",", "mos0", "\n", ")", "\n", "aos", "=", "aos", "[", ":", ",", "self", ".", "basis", ".", "is_s_type", "]", "\n", "phi_gto", "=", "torch", ".", "empty_like", "(", "mos", ")", "\n", "for", "idx", "in", "range", "(", "n_atoms", ")", ":", "\n", "                ", "if", "not", "(", "center_idx", "==", "idx", ")", ".", "any", "(", ")", ":", "\n", "                    ", "continue", "\n", "", "phi_gto", "[", "center_idx", "==", "idx", "]", "=", "self", ".", "_mo_coeff_s_type_at", "(", "\n", "idx", ",", "aos", "[", "center_idx", "==", "idx", "]", "[", ":", ",", "self", ".", "basis", ".", "s_center_idxs", "==", "idx", "]", "\n", ")", "\n", "", "mos", "=", "merge_tensors", "(", "\n", "corrected", ",", "\n", "mos", "[", "corrected", "]", "+", "phi_cusped", "-", "phi_gto", "[", "corrected", "]", ",", "\n", "mos", "[", "~", "corrected", "]", ",", "\n", ")", "\n", "", "return", "mos", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital._mo_coeff_s_type_at": [[138, 142], ["molorb.MolecularOrbital.mo_coeff.weight.t"], "methods", ["None"], ["", "def", "_mo_coeff_s_type_at", "(", "self", ",", "idx", ",", "xs", ")", ":", "\n", "        ", "mo_coeff", "=", "self", ".", "mo_coeff", ".", "weight", ".", "t", "(", ")", "\n", "mo_coeff_at", "=", "mo_coeff", "[", "self", ".", "basis", ".", "is_s_type", "]", "[", "self", ".", "basis", ".", "s_center_idxs", "==", "idx", "]", "\n", "return", "xs", "@", "mo_coeff_at", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.molorb.MolecularOrbital._basis_cusp_info_at": [[143, 145], ["None"], "methods", ["None"], ["", "def", "_basis_cusp_info_at", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "basis_cusp_info", "[", ":", ",", "self", ".", "basis", ".", "s_center_idxs", "==", "idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.__init__": [[29, 58], ["kwargs.setdefault"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dist_feat_dim", ",", "\n", "kernel_dim", ",", "\n", "embedding_dim", ",", "\n", "w_subnet", "=", "None", ",", "\n", "h_subnet", "=", "None", ",", "\n", "g_subnet", "=", "None", ",", "\n", "*", ",", "\n", "n_layers_w", "=", "2", ",", "\n", "n_layers_h", "=", "1", ",", "\n", "n_layers_g", "=", "1", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "'activation'", ",", "SSP", ")", "\n", "self", ".", "dist_feat_dim", "=", "dist_feat_dim", "\n", "self", ".", "kernel_dim", "=", "kernel_dim", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "kwargs_w", "=", "{", "\n", "**", "kwargs", ",", "\n", "**", "(", "w_subnet", "or", "{", "'hidden_layers'", ":", "(", "'log'", ",", "n_layers_w", ")", "}", ")", ",", "\n", "}", "\n", "self", ".", "kwargs_h", "=", "{", "\n", "**", "kwargs", ",", "\n", "**", "(", "h_subnet", "or", "{", "'hidden_layers'", ":", "(", "'log'", ",", "n_layers_h", ")", "}", ")", ",", "\n", "}", "\n", "self", ".", "kwargs_g", "=", "{", "\n", "**", "kwargs", ",", "\n", "**", "(", "g_subnet", "or", "{", "'hidden_layers'", ":", "(", "'log'", ",", "n_layers_g", ")", "}", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.w_subnet": [[60, 63], ["deepqmc.torchext.get_mlp"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_mlp"], ["", "def", "w_subnet", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Create the :math:`\\mathbf w` network.\"\"\"", "\n", "return", "get_mlp", "(", "self", ".", "dist_feat_dim", ",", "self", ".", "kernel_dim", ",", "**", "self", ".", "kwargs_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.h_subnet": [[64, 67], ["deepqmc.torchext.get_mlp"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_mlp"], ["", "def", "h_subnet", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Create the :math:`\\mathbf h` network.\"\"\"", "\n", "return", "get_mlp", "(", "self", ".", "embedding_dim", ",", "self", ".", "kernel_dim", ",", "**", "self", ".", "kwargs_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.g_subnet": [[68, 71], ["deepqmc.torchext.get_mlp"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_mlp"], ["", "def", "g_subnet", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Create the :math:`\\mathbf g` network.\"\"\"", "\n", "return", "get_mlp", "(", "self", ".", "kernel_dim", ",", "self", ".", "embedding_dim", ",", "**", "self", ".", "kwargs_g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SchNetLayer.__init__": [[74, 79], ["torch.nn.Module.__init__", "factory.w_subnet", "factory.g_subnet", "factory.h_subnet"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.w_subnet", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.g_subnet", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.h_subnet"], ["    ", "def", "__init__", "(", "self", ",", "factory", ",", "n_up", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w", "=", "factory", ".", "w_subnet", "(", ")", "\n", "self", ".", "g", "=", "factory", ".", "g_subnet", "(", ")", "\n", "self", ".", "h", "=", "factory", ".", "h_subnet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SchNetLayer.forward": [[80, 87], ["schnet.SchNetLayer.h", "deepqmc.torchext.idx_perm", "schnet.SchNetLayer.g", "schnet.SchNetLayer.w", "schnet.SchNetLayer.w"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.idx_perm"], ["", "def", "forward", "(", "self", ",", "x", ",", "Y", ",", "edges_elec", ",", "edges_nuc", ")", ":", "\n", "        ", "*", "batch_dims", ",", "n_elec", "=", "edges_nuc", ".", "shape", "[", ":", "-", "2", "]", "\n", "h", "=", "self", ".", "h", "(", "x", ")", "\n", "i", ",", "j", "=", "idx_perm", "(", "n_elec", ",", "2", ",", "x", ".", "device", ")", "\n", "z_elec", "=", "(", "self", ".", "w", "(", "edges_elec", "[", "...", ",", "i", ",", "j", ",", ":", "]", ")", "*", "h", "[", "...", ",", "j", ",", ":", "]", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "z_nuc", "=", "(", "self", ".", "w", "(", "edges_nuc", ")", "*", "Y", "[", "...", ",", "None", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "return", "self", ".", "g", "(", "z_elec", "+", "z_nuc", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SchNetSpinLayer.__init__": [[103, 120], ["torch.nn.Module.__init__", "torch.nn.ModuleDict", "factory.g_subnet", "torch.nn.ModuleDict", "factory.h_subnet", "torch.nn.ModuleDict", "factory.w_subnet", "factory.g_subnet", "factory.h_subnet"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.g_subnet", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.h_subnet", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.w_subnet", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.g_subnet", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SubnetFactory.h_subnet"], ["    ", "def", "__init__", "(", "self", ",", "factory", ",", "n_up", ",", "shared_g", "=", "False", ",", "shared_h", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shared_g", "=", "shared_g", "\n", "self", ".", "shared_h", "=", "shared_h", "\n", "labels", "=", "[", "'same'", ",", "'anti'", ",", "'n'", "]", "\n", "self", ".", "w", "=", "nn", ".", "ModuleDict", "(", "(", "lbl", ",", "factory", ".", "w_subnet", "(", ")", ")", "for", "lbl", "in", "labels", ")", "\n", "self", ".", "g", "=", "(", "\n", "factory", ".", "g_subnet", "(", ")", "\n", "if", "shared_g", "\n", "else", "nn", ".", "ModuleDict", "(", "(", "lbl", ",", "factory", ".", "g_subnet", "(", ")", ")", "for", "lbl", "in", "labels", ")", "\n", ")", "\n", "self", ".", "h", "=", "(", "\n", "factory", ".", "h_subnet", "(", ")", "\n", "if", "shared_h", "\n", "else", "nn", ".", "ModuleDict", "(", "(", "lbl", ",", "factory", ".", "h_subnet", "(", ")", ")", "for", "lbl", "in", "labels", "[", ":", "2", "]", ")", "\n", ")", "\n", "self", ".", "n_up", "=", "n_up", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.SchNetSpinLayer.forward": [[121, 153], ["torch.cat", "torch.cat", "torch.cat", "messages_nuc.sum", "m.sum", "schnet.SchNetSpinLayer.g", "schnet.idx_pair_spin", "torch.cat", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.idx_pair_spin"], ["", "def", "forward", "(", "self", ",", "x", ",", "Y", ",", "edges_elec", ",", "edges_nuc", ")", ":", "\n", "        ", "*", "batch_dims", ",", "n_elec", "=", "edges_nuc", ".", "shape", "[", ":", "-", "2", "]", "\n", "n_up", ",", "n_down", "=", "self", ".", "n_up", ",", "n_elec", "-", "self", ".", "n_up", "\n", "messages_el", "=", "[", "\n", "(", "\n", "self", ".", "w", "[", "l", "]", "(", "edges_elec", "[", "...", ",", "i", ",", "j", ",", ":", "]", ")", "\n", "*", "(", "self", ".", "h", "if", "self", ".", "shared_h", "else", "self", ".", "h", "[", "l", "]", ")", "(", "x", ")", "[", "...", ",", "j", ",", ":", "]", "\n", ")", "\n", "for", "l", ",", "(", "i", ",", "j", ")", "in", "idx_pair_spin", "(", "n_up", ",", "n_down", ",", "x", ".", "device", ")", "\n", "]", "\n", "z_elec_uu", ",", "z_elec_ud", ",", "z_elec_du", ",", "z_elec_dd", "=", "(", "\n", "m", ".", "sum", "(", "dim", "=", "-", "2", ")", "for", "m", "in", "messages_el", "\n", ")", "\n", "messages_el", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "cat", "(", "messages_el", "[", "idx", "]", ",", "dim", "=", "-", "2", ")", "\n", "for", "idx", "in", "(", "slice", "(", "None", ",", "2", ")", ",", "slice", "(", "2", ",", "None", ")", ")", "\n", "]", ",", "\n", "dim", "=", "-", "3", ",", "\n", ")", "\n", "z_elec_same", "=", "torch", ".", "cat", "(", "[", "z_elec_uu", ",", "z_elec_dd", "]", ",", "dim", "=", "-", "2", ")", "\n", "z_elec_anti", "=", "torch", ".", "cat", "(", "[", "z_elec_ud", ",", "z_elec_du", "]", ",", "dim", "=", "-", "2", ")", "\n", "messages_nuc", "=", "self", ".", "w", "[", "'n'", "]", "(", "edges_nuc", ")", "*", "Y", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", "z_nuc", "=", "messages_nuc", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "update", "=", "(", "\n", "self", ".", "g", "(", "z_elec_same", "+", "z_elec_anti", "+", "z_nuc", ")", "\n", "if", "self", ".", "shared_g", "\n", "else", "self", ".", "g", "[", "'same'", "]", "(", "z_elec_same", ")", "\n", "+", "self", ".", "g", "[", "'anti'", "]", "(", "z_elec_anti", ")", "\n", "+", "self", ".", "g", "[", "'n'", "]", "(", "z_nuc", ")", "\n", ")", "\n", "return", "update", ",", "(", "messages_el", ",", "messages_nuc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.NuclearEmbedding.__init__": [[156, 161], ["torch.nn.Module.__init__", "deepqmc.torchext.get_mlp", "schnet.NuclearEmbedding.register_buffer", "len", "deepqmc.torchext.fp_tensor"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_mlp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.fp_tensor"], ["    ", "def", "__init__", "(", "self", ",", "n_nuclei", ",", "kernel_dim", ",", "charges", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "charges", ")", "==", "n_nuclei", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "get_mlp", "(", "1", ",", "kernel_dim", ",", "**", "kwargs", ")", "\n", "self", ".", "register_buffer", "(", "'charges'", ",", "fp_tensor", "(", "charges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.NuclearEmbedding.forward": [[162, 164], ["schnet.NuclearEmbedding.mlp", "schnet.NuclearEmbedding.charges[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "idxs", ")", ":", "\n", "        ", "return", "self", ".", "mlp", "(", "self", ".", "charges", "[", "idxs", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.ElectronicSchNet.__init__": [[254, 301], ["subnet_metafactory", "torch.nn.Module.__init__", "functools.partial.", "nuc_embedding", "torch.nn.Embedding", "torch.nn.ModuleList", "torch.tensor", "schnet.ElectronicSchNet.register_buffer", "schnet.ElectronicSchNet.register_buffer", "functools.partial", "schnet.ElectronicSchNet.X.weight.detach().fill_", "torch.nn.ModuleList", "torch.arange", "schnet.ElectronicSchNet.X.weight.detach", "range", "torch.nn.LayerNorm", "range", "range"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_up", ",", "\n", "n_down", ",", "\n", "n_nuclei", ",", "\n", "embedding_dim", ",", "\n", "subnet_metafactory", "=", "None", ",", "\n", "dist_basis", "=", "None", ",", "\n", "layer_kwargs", "=", "None", ",", "\n", "nuc_embedding", "=", "nn", ".", "Embedding", ",", "\n", "init_embed_one", "=", "False", ",", "\n", "resnet", "=", "True", ",", "\n", "*", ",", "\n", "dist_feat_dim", "=", "32", ",", "\n", "dist_feat_cutoff", "=", "10.0", ",", "\n", "n_interactions", "=", "3", ",", "\n", "kernel_dim", "=", "64", ",", "\n", "version", "=", "2", ",", "\n", "layer_norm", "=", "False", ",", "\n", ")", ":", "\n", "        ", "assert", "version", "in", "self", ".", "LAYER_FACTORIES", "\n", "subnet_metafactory", "=", "subnet_metafactory", "or", "SubnetFactory", "\n", "subnet_factory", "=", "subnet_metafactory", "(", "dist_feat_dim", ",", "kernel_dim", ",", "embedding_dim", ")", "\n", "if", "not", "dist_basis", ":", "\n", "            ", "dist_basis", "=", "partial", "(", "DistanceBasis", ",", "envelope", "=", "'nocusp'", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "resnet", "\n", "self", ".", "kernel_dim", "=", "kernel_dim", "\n", "self", ".", "dist_basis", "=", "dist_basis", "(", "dist_feat_dim", ",", "dist_feat_cutoff", ")", "\n", "self", ".", "Y", "=", "nuc_embedding", "(", "n_nuclei", ",", "kernel_dim", ")", "\n", "self", ".", "X", "=", "nn", ".", "Embedding", "(", "1", "if", "n_up", "==", "n_down", "else", "2", ",", "embedding_dim", ")", "\n", "if", "init_embed_one", ":", "\n", "            ", "self", ".", "X", ".", "weight", ".", "detach", "(", ")", ".", "fill_", "(", "1.0", ")", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "self", ".", "LAYER_FACTORIES", "[", "version", "]", "(", "subnet_factory", ",", "n_up", ",", "**", "(", "layer_kwargs", "or", "{", "}", ")", ")", "\n", "for", "_", "in", "range", "(", "n_interactions", ")", "\n", ")", "\n", "self", ".", "layer_norms", "=", "(", "\n", "nn", ".", "ModuleList", "(", "nn", ".", "LayerNorm", "(", "embedding_dim", ")", "for", "_", "in", "range", "(", "n_interactions", ")", ")", "\n", "if", "layer_norm", "\n", "else", "[", "None", "for", "_", "in", "range", "(", "n_interactions", ")", "]", "\n", ")", "\n", "spin_idxs", "=", "torch", ".", "tensor", "(", "\n", "(", "n_up", "+", "n_down", ")", "*", "[", "0", "]", "if", "n_up", "==", "n_down", "else", "n_up", "*", "[", "0", "]", "+", "n_down", "*", "[", "1", "]", "\n", ")", "\n", "self", ".", "register_buffer", "(", "'spin_idxs'", ",", "spin_idxs", ")", "\n", "self", ".", "register_buffer", "(", "'nuclei_idxs'", ",", "torch", ".", "arange", "(", "n_nuclei", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.ElectronicSchNet.forward": [[302, 316], ["schnet.ElectronicSchNet.dist_basis", "schnet.ElectronicSchNet.dist_basis", "schnet.ElectronicSchNet.X", "schnet.ElectronicSchNet.Y", "zip", "len", "schnet.ElectronicSchNet.spin_idxs.expand", "schnet.ElectronicSchNet.nuclei_idxs.expand", "layer", "norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dists_elec", ",", "dists_nuc", ")", ":", "\n", "        ", "*", "batch_dims", ",", "n_elec", ",", "n_nuclei", "=", "dists_nuc", ".", "shape", "\n", "assert", "dists_elec", ".", "shape", "==", "(", "*", "batch_dims", ",", "n_elec", ",", "n_elec", ")", "\n", "assert", "n_elec", "==", "len", "(", "self", ".", "spin_idxs", ")", "\n", "edges_nuc", "=", "self", ".", "dist_basis", "(", "dists_nuc", ")", "\n", "edges_elec", "=", "self", ".", "dist_basis", "(", "dists_elec", ")", "\n", "x", "=", "self", ".", "X", "(", "self", ".", "spin_idxs", ".", "expand", "(", "*", "batch_dims", ",", "-", "1", ")", ")", "\n", "Y", "=", "self", ".", "Y", "(", "self", ".", "nuclei_idxs", ".", "expand", "(", "*", "batch_dims", ",", "-", "1", ")", ")", "\n", "for", "layer", ",", "norm", "in", "zip", "(", "self", ".", "layers", ",", "self", ".", "layer_norms", ")", ":", "\n", "            ", "z", ",", "messages", "=", "layer", "(", "x", ",", "Y", ",", "edges_elec", ",", "edges_nuc", ")", "\n", "if", "norm", ":", "\n", "                ", "z", "=", "0.1", "*", "norm", "(", "z", ")", "\n", "", "x", "=", "x", "+", "z", "if", "self", ".", "resnet", "else", "z", "\n", "", "return", "x", ",", "messages", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.schnet.idx_pair_spin": [[89, 99], ["functools.lru_cache", "torch.device", "deepqmc.torchext.idx_perm", "ij[].view", "ij[].view", "ij[].view", "ij[].view", "max", "max"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.idx_perm"], ["", "", "@", "lru_cache", "(", ")", "\n", "def", "idx_pair_spin", "(", "n_up", ",", "n_down", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "# noqa: B008", "\n", "# indexes for up-up, up-down, down-up, down-down", "\n", "    ", "ij", "=", "idx_perm", "(", "n_up", "+", "n_down", ",", "2", ",", "device", "=", "device", ")", "\n", "mask", "=", "ij", "<", "n_up", "\n", "return", "[", "\n", "(", "'same'", ",", "ij", "[", ":", ",", "mask", "[", "0", "]", "&", "mask", "[", "1", "]", "]", ".", "view", "(", "2", ",", "n_up", ",", "max", "(", "n_up", "-", "1", ",", "0", ")", ")", ")", ",", "\n", "(", "'anti'", ",", "ij", "[", ":", ",", "mask", "[", "0", "]", "&", "~", "mask", "[", "1", "]", "]", ".", "view", "(", "2", ",", "n_up", ",", "n_down", ")", ")", ",", "\n", "(", "'anti'", ",", "ij", "[", ":", ",", "~", "mask", "[", "0", "]", "&", "mask", "[", "1", "]", "]", ".", "view", "(", "2", ",", "n_down", ",", "n_up", ")", ")", ",", "\n", "(", "'same'", ",", "ij", "[", ":", ",", "~", "mask", "[", "0", "]", "&", "~", "mask", "[", "1", "]", "]", ".", "view", "(", "2", ",", "n_down", ",", "max", "(", "n_down", "-", "1", ",", "0", ")", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.SLogLinearDet.forward": [[75, 97], ["A1.slogdet", "A2.slogdet", "sloglindet.slog_fn_exp", "ctx.save_for_backward", "len", "len", "len", "sloglindet._slogcof", "sloglindet._slogcof"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._slogcof", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._slogcof"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "c", ",", "A1", ",", "A2", ")", ":", "\n", "        ", "assert", "len", "(", "c", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "A1", ".", "shape", ")", ">=", "3", "\n", "assert", "len", "(", "A2", ".", "shape", ")", ">=", "3", "\n", "assert", "A1", ".", "shape", "[", "-", "3", "]", "==", "A2", ".", "shape", "[", "-", "3", "]", "==", "c", ".", "shape", "[", "0", "]", "\n", "assert", "A1", ".", "shape", "[", ":", "-", "3", "]", "==", "A2", ".", "shape", "[", ":", "-", "3", "]", "\n", "assert", "A1", ".", "shape", "[", "-", "1", "]", "==", "A1", ".", "shape", "[", "-", "2", "]", "\n", "assert", "A2", ".", "shape", "[", "-", "1", "]", "==", "A2", ".", "shape", "[", "-", "2", "]", "\n", "sl_D1", "=", "A1", ".", "slogdet", "(", ")", "\n", "sl_D2", "=", "A2", ".", "slogdet", "(", ")", "\n", "sl_D", "=", "sl_D1", "[", "0", "]", "*", "sl_D2", "[", "0", "]", ",", "sl_D1", "[", "1", "]", "+", "sl_D2", "[", "1", "]", "\n", "sl_Psi", "=", "slog_fn_exp", "(", "lambda", "D", ":", "(", "c", "*", "D", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "sl_D", ",", "dim", "=", "-", "1", ")", "\n", "# The cofactor matrices are calculated here, because their calculation", "\n", "# in the backward pass would be a bottleneck when evaluating the", "\n", "# backward pass repeatedly which happens in the Laplacian evaluation.", "\n", "# This solution is hugely suboptimal if only forward pass is needed (by", "\n", "# ~1.5 order of magnitude), but that never happens in normal use of our code", "\n", "ctx", ".", "save_for_backward", "(", "\n", "c", ",", "A1", ",", "A2", ",", "*", "_slogcof", "(", "A1", ")", ",", "*", "_slogcof", "(", "A2", ")", ",", "*", "sl_Psi", ",", "*", "sl_D", ",", "*", "sl_D1", ",", "*", "sl_D2", "\n", ")", "\n", "return", "sl_Psi", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.SLogLinearDet.backward": [[98, 102], ["SLogLinearDetBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "_", ",", "Pb", ")", ":", "\n", "        ", "cb", ",", "A1b", ",", "A2b", "=", "SLogLinearDetBackward", ".", "apply", "(", "Pb", ",", "*", "ctx", ".", "saved_tensors", ")", "\n", "return", "cb", ",", "A1b", ",", "A2b", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.SLogLinearDetBackward.forward": [[120, 142], ["zip", "sloglindet.slog", "sloglindet._backward_sloglin", "sloglindet._backward_det", "sloglindet._backward_det", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._backward_sloglin", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._backward_det", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._backward_det"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "Pb", ",", "*", "args", ")", ":", "\n", "        ", "c", ",", "A1", ",", "A2", ",", "*", "args", "=", "args", "\n", "*", "sl_C1", ",", "U1", ",", "s1", ",", "V1", ",", "sgn_UV1", "=", "args", "[", ":", "6", "]", "\n", "*", "sl_C2", ",", "U2", ",", "s2", ",", "V2", ",", "sgn_UV2", "=", "args", "[", "6", ":", "12", "]", "\n", "sl_Psi", ",", "sl_D", ",", "sl_D1", ",", "sl_D2", "=", "zip", "(", "args", "[", "12", ":", ":", "2", "]", ",", "args", "[", "13", ":", ":", "2", "]", ")", "\n", "sl_c", "=", "slog", "(", "c", ")", "\n", "cb", ",", "sl_Db", "=", "_backward_sloglin", "(", "Pb", ",", "sl_c", ",", "sl_Psi", ",", "sl_D", ")", "\n", "# backward through D = D1 * D2", "\n", "sl_D1b", "=", "sl_Db", "[", "0", "]", "*", "sl_D2", "[", "0", "]", ",", "sl_Db", "[", "1", "]", "+", "sl_D2", "[", "1", "]", "\n", "sl_D2b", "=", "sl_Db", "[", "0", "]", "*", "sl_D1", "[", "0", "]", ",", "sl_Db", "[", "1", "]", "+", "sl_D1", "[", "1", "]", "\n", "A1b", "=", "_backward_det", "(", "sl_D1b", ",", "sl_C1", ")", "\n", "A2b", "=", "_backward_det", "(", "sl_D2b", ",", "sl_C2", ")", "\n", "ctx", ".", "save_for_backward", "(", "\n", "Pb", ",", "\n", "*", "(", "U1", ",", "V1", ",", "s1", ",", "sgn_UV1", ")", ",", "\n", "*", "(", "U2", ",", "V2", ",", "s2", ",", "sgn_UV2", ")", ",", "\n", "*", "(", "*", "sl_Db", ",", "*", "sl_Psi", ",", "*", "sl_D", ",", "*", "sl_c", ")", ",", "\n", "*", "(", "*", "sl_C1", ",", "*", "sl_D1", ",", "*", "sl_D1b", ")", ",", "\n", "*", "(", "*", "sl_C2", ",", "*", "sl_D2", ",", "*", "sl_D2b", ")", ",", "\n", ")", "\n", "return", "cb", ",", "A1b", ",", "A2b", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.SLogLinearDetBackward.backward": [[143, 149], ["SLogLinearDetDoubleBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "cbt", ",", "A1bt", ",", "A2bt", ")", ":", "\n", "        ", "Pbt", ",", "ct", ",", "A1t", ",", "A2t", "=", "SLogLinearDetDoubleBackward", ".", "apply", "(", "\n", "cbt", ",", "A1bt", ",", "A2bt", ",", "*", "ctx", ".", "saved_tensors", "\n", ")", "\n", "return", "(", "Pbt", ",", "ct", ",", "A1t", ",", "A2t", ",", "*", "(", "20", "*", "[", "None", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.SLogLinearDetDoubleBackward.forward": [[219, 249], ["zip", "sloglindet._double_backward_det", "sloglindet._double_backward_det", "sloglindet.slog_fn_exp", "sloglindet._double_backward_sloglin", "sloglindet.slog_fn_exp", "sloglindet.slog_fn_exp", "x.sum", "x.sum", "x.sum"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._double_backward_det", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._double_backward_det", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._double_backward_sloglin", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "cbt", ",", "A1bt", ",", "A2bt", ",", "*", "args", ")", ":", "\n", "        ", "Pb", ",", "U1", ",", "V1", ",", "s1", ",", "sgn_UV1", ",", "U2", ",", "V2", ",", "s2", ",", "sgn_UV2", ",", "*", "args", "=", "args", "\n", "sl_Db", ",", "sl_Psi", ",", "sl_D", ",", "sl_c", ",", "sl_C1", ",", "sl_D1", ",", "sl_D1b", ",", "sl_C2", ",", "sl_D2", ",", "sl_D2b", "=", "zip", "(", "\n", "args", "[", ":", ":", "2", "]", ",", "args", "[", "1", ":", ":", "2", "]", "\n", ")", "\n", "sl_D1bt", ",", "A1t", "=", "_double_backward_det", "(", "A1bt", ",", "U1", ",", "V1", ",", "sgn_UV1", ",", "s1", ",", "sl_C1", ",", "sl_D1b", ")", "\n", "sl_D2bt", ",", "A2t", "=", "_double_backward_det", "(", "A2bt", ",", "U2", ",", "V2", ",", "sgn_UV2", ",", "s2", ",", "sl_C2", ",", "sl_D2b", ")", "\n", "# double backward through D = D1 * D2", "\n", "sl_Dbt", "=", "slog_fn_exp", "(", "\n", "lambda", "x", ":", "x", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "\n", "(", "sl_D2", "[", "0", "]", "*", "sl_D1bt", "[", "0", "]", ",", "sl_D2", "[", "1", "]", "+", "sl_D1bt", "[", "1", "]", ")", ",", "\n", "(", "sl_D1", "[", "0", "]", "*", "sl_D2bt", "[", "0", "]", ",", "sl_D1", "[", "1", "]", "+", "sl_D2bt", "[", "1", "]", ")", ",", "\n", ")", "\n", "sl_D1t", "=", "sl_Db", "[", "0", "]", "*", "sl_D2bt", "[", "0", "]", ",", "sl_Db", "[", "1", "]", "+", "sl_D2bt", "[", "1", "]", "\n", "sl_D2t", "=", "sl_Db", "[", "0", "]", "*", "sl_D1bt", "[", "0", "]", ",", "sl_Db", "[", "1", "]", "+", "sl_D1bt", "[", "1", "]", "\n", "Pbt", ",", "ct", ",", "sl_Dt", "=", "_double_backward_sloglin", "(", "cbt", ",", "sl_Dbt", ",", "sl_D", ",", "sl_Psi", ",", "sl_c", ",", "Pb", ")", "\n", "# reverse to collect inputs-tilde", "\n", "# reverse through D = D1 * D2", "\n", "sl_D1t", "=", "slog_fn_exp", "(", "\n", "lambda", "x", ":", "x", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "sl_D1t", ",", "(", "sl_D2", "[", "0", "]", "*", "sl_Dt", "[", "0", "]", ",", "sl_D2", "[", "1", "]", "+", "sl_Dt", "[", "1", "]", ")", "\n", ")", "\n", "sl_D2t", "=", "slog_fn_exp", "(", "\n", "lambda", "x", ":", "x", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "sl_D2t", ",", "(", "sl_D1", "[", "0", "]", "*", "sl_Dt", "[", "0", "]", ",", "sl_D1", "[", "1", "]", "+", "sl_Dt", "[", "1", "]", ")", "\n", ")", "\n", "# reverse through Di = det Ai", "\n", "idx", "=", "...", ",", "None", ",", "None", "\n", "A1t", "=", "A1t", "+", "sl_D1t", "[", "0", "]", "[", "idx", "]", "*", "sl_C1", "[", "0", "]", "*", "(", "sl_D1t", "[", "1", "]", "[", "idx", "]", "+", "sl_C1", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", "A2t", "=", "A2t", "+", "sl_D2t", "[", "0", "]", "[", "idx", "]", "*", "sl_C2", "[", "0", "]", "*", "(", "sl_D2t", "[", "1", "]", "[", "idx", "]", "+", "sl_C2", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", "return", "Pbt", ",", "ct", ",", "A1t", ",", "A2t", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog": [[8, 10], ["x.sign", "x.abs().log", "x.abs"], "function", ["None"], ["def", "slog", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "sign", "(", ")", ",", "x", ".", "abs", "(", ")", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp": [[12, 38], ["isinstance", "shift.squeeze.where", "sorted", "fn", "sloglindet.slog", "len", "zip", "shift.squeeze.new_tensor", "shift.squeeze.squeeze", "torch.stack", "torch.stack", "shift.squeeze.max", "torch.isinf"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog"], ["", "def", "slog_fn_exp", "(", "fn", ",", "*", "args", ",", "dim", "=", "None", ",", "idx", "=", "None", ")", ":", "\n", "    ", "if", "len", "(", "args", ")", ">", "1", ":", "\n", "        ", "assert", "dim", "is", "None", "\n", "dim", "=", "-", "1", "\n", "sgn", ",", "x", "=", "zip", "(", "*", "args", ")", "\n", "sgn", ",", "x", "=", "torch", ".", "stack", "(", "sgn", ",", "dim", "=", "dim", ")", ",", "torch", ".", "stack", "(", "x", ",", "dim", "=", "dim", ")", "\n", "", "else", ":", "\n", "        ", "assert", "dim", "is", "not", "None", "\n", "sgn", ",", "x", "=", "args", "[", "0", "]", "\n", "", "if", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "dim", "=", "[", "dim", "]", "\n", "", "shift", "=", "x", "\n", "for", "d", "in", "dim", ":", "\n", "        ", "shift", "=", "shift", ".", "max", "(", "dim", "=", "d", ",", "keepdim", "=", "True", ")", ".", "values", "\n", "", "shift", "=", "shift", ".", "where", "(", "~", "torch", ".", "isinf", "(", "shift", ")", ",", "shift", ".", "new_tensor", "(", "0", ")", ")", "\n", "x", "=", "(", "x", "-", "shift", ")", ".", "exp", "(", ")", "\n", "if", "sgn", "is", "not", "None", ":", "\n", "        ", "x", "=", "sgn", "*", "x", "\n", "", "for", "d", "in", "sorted", "(", "dim", ")", ":", "\n", "        ", "shift", "=", "shift", ".", "squeeze", "(", "dim", "=", "d", ")", "\n", "", "x", "=", "fn", "(", "x", ")", "\n", "sgn", ",", "x", "=", "slog", "(", "x", ")", "\n", "if", "idx", "is", "not", "None", ":", "\n", "        ", "shift", "=", "shift", "[", "idx", "]", "\n", "", "x", "=", "x", "+", "shift", "\n", "return", "sgn", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.log_gamma": [[40, 43], ["s[].log().sum", "utils.idx_perm", "s[].log"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.idx_perm"], ["", "def", "log_gamma", "(", "s", ")", ":", "\n", "    ", "idx", "=", "idx_perm", "(", "s", ".", "shape", "[", "-", "1", "]", ",", "2", ",", "s", ".", "device", ")", "[", "-", "1", "]", "\n", "return", "s", "[", "...", ",", "idx", "]", ".", "log", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.log_rho": [[45, 50], ["s[].log().sum", "s.new_zeros", "utils.idx_perm", "s[].log"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.idx_perm"], ["", "def", "log_rho", "(", "s", ")", ":", "\n", "    ", "if", "s", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "return", "s", ".", "new_zeros", "(", "*", "s", ".", "shape", ",", "1", ")", "\n", "", "idx", "=", "idx_perm", "(", "s", ".", "shape", "[", "-", "1", "]", ",", "3", ",", "s", ".", "device", ")", "[", "-", "1", "]", "\n", "return", "s", "[", "...", ",", "idx", "]", ".", "log", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._slogcof": [[52, 67], ["A.svd", "U.det().sign", "V.det().sign", "sloglindet.log_gamma", "sloglindet.slog_fn_exp", "torch.ones_like", "torch.zeros_like", "U.det", "V.det", "V.transpose", "g.diag_embed"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.log_gamma", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp"], ["", "def", "_slogcof", "(", "A", ")", ":", "\n", "    ", "U", ",", "s", ",", "V", "=", "A", ".", "svd", "(", ")", "\n", "sgn_UV", "=", "U", ".", "det", "(", ")", ".", "sign", "(", ")", "*", "V", ".", "det", "(", ")", ".", "sign", "(", ")", "\n", "if", "A", ".", "shape", "[", "-", "1", "]", "<=", "1", ":", "\n", "        ", "sl_C", "=", "torch", ".", "ones_like", "(", "A", ")", ",", "torch", ".", "zeros_like", "(", "A", ")", "\n", "", "else", ":", "\n", "        ", "log_g", "=", "log_gamma", "(", "s", ")", "\n", "idx", "=", "...", ",", "None", ",", "None", "\n", "sl_C", "=", "slog_fn_exp", "(", "\n", "lambda", "g", ":", "sgn_UV", "[", "idx", "]", "*", "U", "@", "g", ".", "diag_embed", "(", ")", "@", "V", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "\n", "(", "None", ",", "log_g", ")", ",", "\n", "dim", "=", "-", "1", ",", "\n", "idx", "=", "idx", ",", "\n", ")", "\n", "", "return", "(", "*", "sl_C", ",", "U", ",", "s", ",", "V", ",", "sgn_UV", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._sloglindet_ref": [[69, 72], ["Psi.sign", "Psi.abs().log", "A2.det", "Psi.abs", "A1.det"], "function", ["None"], ["", "def", "_sloglindet_ref", "(", "c", ",", "A1", ",", "A2", ")", ":", "\n", "    ", "Psi", "=", "(", "c", "*", "A1", ".", "det", "(", ")", "*", "A2", ".", "det", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "return", "Psi", ".", "sign", "(", ")", ",", "Psi", ".", "abs", "(", ")", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._backward_sloglin": [[104, 111], ["sloglindet.slog"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog"], ["", "", "def", "_backward_sloglin", "(", "Pb", ",", "sl_c", ",", "sl_Psi", ",", "sl_D", ")", ":", "\n", "    ", "sl_Pb", "=", "slog", "(", "Pb", ")", "\n", "idx", "=", "...", ",", "None", "\n", "sl_PbPsi", "=", "sl_Pb", "[", "0", "]", "*", "sl_Psi", "[", "0", "]", ",", "sl_Pb", "[", "1", "]", "-", "sl_Psi", "[", "1", "]", "\n", "cb", "=", "sl_PbPsi", "[", "0", "]", "[", "idx", "]", "*", "sl_D", "[", "0", "]", "*", "(", "sl_PbPsi", "[", "1", "]", "[", "idx", "]", "+", "sl_D", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", "sl_Db", "=", "sl_PbPsi", "[", "0", "]", "[", "idx", "]", "*", "sl_c", "[", "0", "]", ",", "sl_PbPsi", "[", "1", "]", "[", "idx", "]", "+", "sl_c", "[", "1", "]", "\n", "return", "cb", ",", "sl_Db", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._backward_det": [[113, 117], ["None"], "function", ["None"], ["", "def", "_backward_det", "(", "sl_Db", ",", "sl_C", ")", ":", "\n", "    ", "idx", "=", "...", ",", "None", ",", "None", "\n", "Ab", "=", "sl_Db", "[", "0", "]", "[", "idx", "]", "*", "sl_C", "[", "0", "]", "*", "(", "sl_Db", "[", "1", "]", "[", "idx", "]", "+", "sl_C", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", "return", "Ab", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._double_backward_det": [[151, 183], ["sloglindet.slog", "sloglindet.slog_fn_exp", "sloglindet.slog", "sloglindet.log_rho", "utils.idx_perm", "sloglindet.slog_fn_exp", "sloglindet.slog_fn_exp", "torch.empty_like", "torch.empty_like", "torch.zeros_like", "sloglindet.slog", "torch.zeros_like", "CAbt.sum", "V.transpose", "Abt.transpose", "utils.bdiag", "utils.bdiag", "Mr.sum", "torch.zeros_like", "torch.zeros_like", "utils.bdiag", "V.transpose", "utils.bdiag"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.log_rho", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.idx_perm", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.bdiag", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.bdiag", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.bdiag", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.bdiag"], ["", "", "def", "_double_backward_det", "(", "Abt", ",", "U", ",", "V", ",", "sgn_UV", ",", "s", ",", "sl_C", ",", "sl_Db", ")", ":", "\n", "    ", "if", "Abt", ".", "shape", "[", "-", "1", "]", "==", "0", ":", "\n", "        ", "return", "(", "torch", ".", "zeros_like", "(", "sgn_UV", ")", ",", "torch", ".", "zeros_like", "(", "sgn_UV", ")", ")", ",", "torch", ".", "zeros_like", "(", "U", ")", "\n", "", "if", "Abt", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "return", "slog", "(", "Abt", "[", "...", ",", "0", ",", "0", "]", ")", ",", "torch", ".", "zeros_like", "(", "U", ")", "\n", "", "sl_Abt", "=", "slog", "(", "Abt", ")", "\n", "sl_Dbt", "=", "slog_fn_exp", "(", "\n", "lambda", "CAbt", ":", "CAbt", ".", "sum", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", ",", "\n", "(", "sl_C", "[", "0", "]", "*", "sl_Abt", "[", "0", "]", ",", "sl_C", "[", "1", "]", "+", "sl_Abt", "[", "1", "]", ")", ",", "\n", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ",", "\n", ")", "\n", "M", "=", "V", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "@", "Abt", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "@", "U", "\n", "sl_M", "=", "slog", "(", "M", ")", "\n", "log_r", "=", "log_rho", "(", "s", ")", "\n", "sl_Xi", "=", "torch", ".", "empty_like", "(", "M", ")", ",", "torch", ".", "empty_like", "(", "M", ")", "\n", "i", ",", "j", "=", "idx_perm", "(", "M", ".", "shape", "[", "-", "1", "]", ",", "2", ",", "M", ".", "device", ")", "\n", "sl_Xi", "[", "0", "]", "[", "...", ",", "i", ",", "j", "]", "=", "-", "sl_M", "[", "0", "]", "[", "...", ",", "i", ",", "j", "]", "\n", "sl_Xi", "[", "1", "]", "[", "...", ",", "i", ",", "j", "]", "=", "sl_M", "[", "1", "]", "[", "...", ",", "i", ",", "j", "]", "+", "log_r", "\n", "bdiag", "(", "sl_Xi", "[", "0", "]", ")", "[", "...", "]", ",", "bdiag", "(", "sl_Xi", "[", "1", "]", ")", "[", "...", "]", "=", "slog_fn_exp", "(", "\n", "lambda", "Mr", ":", "Mr", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "\n", "(", "bdiag", "(", "sl_M", "[", "0", "]", ")", "[", "...", ",", "j", "]", ",", "bdiag", "(", "sl_M", "[", "1", "]", ")", "[", "...", ",", "j", "]", "+", "log_r", ")", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "idx", "=", "...", ",", "None", ",", "None", "\n", "sl_Y", "=", "slog_fn_exp", "(", "\n", "lambda", "Xi", ":", "sgn_UV", "[", "idx", "]", "*", "U", "@", "Xi", "@", "V", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "\n", "sl_Xi", ",", "\n", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ",", "\n", "idx", "=", "idx", ",", "\n", ")", "\n", "At", "=", "sl_Db", "[", "0", "]", "[", "idx", "]", "*", "sl_Y", "[", "0", "]", "*", "(", "sl_Db", "[", "1", "]", "[", "idx", "]", "+", "sl_Y", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", "return", "sl_Dbt", ",", "At", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet._double_backward_sloglin": [[185, 216], ["sloglindet.slog", "sloglindet.slog_fn_exp", "sloglindet.slog_fn_exp", "sloglindet.slog_fn_exp", "Dcbt.sum", "cDbt.sum", "x.sum"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.sloglindet.slog_fn_exp"], ["", "def", "_double_backward_sloglin", "(", "cbt", ",", "sl_Dbt", ",", "sl_D", ",", "sl_Psi", ",", "sl_c", ",", "Pb", ")", ":", "\n", "    ", "sl_cbt", "=", "slog", "(", "cbt", ")", "\n", "sl_Dcbt", "=", "slog_fn_exp", "(", "\n", "lambda", "Dcbt", ":", "Dcbt", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "\n", "(", "sl_D", "[", "0", "]", "*", "sl_cbt", "[", "0", "]", ",", "sl_D", "[", "1", "]", "+", "sl_cbt", "[", "1", "]", ")", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "sl_cDbt", "=", "slog_fn_exp", "(", "\n", "lambda", "cDbt", ":", "cDbt", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "\n", "(", "sl_c", "[", "0", "]", "*", "sl_Dbt", "[", "0", "]", ",", "sl_c", "[", "1", "]", "+", "sl_Dbt", "[", "1", "]", ")", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "Pbt", "=", "(", "\n", "sl_Psi", "[", "0", "]", "*", "sl_Dcbt", "[", "0", "]", "*", "(", "-", "sl_Psi", "[", "1", "]", "+", "sl_Dcbt", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", "+", "sl_Psi", "[", "0", "]", "*", "sl_cDbt", "[", "0", "]", "*", "(", "-", "sl_Psi", "[", "1", "]", "+", "sl_cDbt", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", ")", "\n", "sl_Psi2Dcbt", "=", "-", "sl_Dcbt", "[", "0", "]", ",", "-", "2", "*", "sl_Psi", "[", "1", "]", "+", "sl_Dcbt", "[", "1", "]", "\n", "sl_Psi2cDbt", "=", "-", "sl_cDbt", "[", "0", "]", ",", "-", "2", "*", "sl_Psi", "[", "1", "]", "+", "sl_cDbt", "[", "1", "]", "\n", "idx", "=", "...", ",", "None", "\n", "ct", "=", "Pb", "[", "idx", "]", "*", "(", "\n", "sl_Psi2Dcbt", "[", "0", "]", "[", "idx", "]", "*", "sl_D", "[", "0", "]", "*", "(", "sl_Psi2Dcbt", "[", "1", "]", "[", "idx", "]", "+", "sl_D", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", "+", "sl_Psi2cDbt", "[", "0", "]", "[", "idx", "]", "*", "sl_D", "[", "0", "]", "*", "(", "sl_Psi2cDbt", "[", "1", "]", "[", "idx", "]", "+", "sl_D", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", "+", "sl_Psi", "[", "0", "]", "[", "idx", "]", "*", "sl_Dbt", "[", "0", "]", "*", "(", "-", "sl_Psi", "[", "1", "]", "[", "idx", "]", "+", "sl_Dbt", "[", "1", "]", ")", ".", "exp", "(", ")", "\n", ")", "\n", "sl_Dt", "=", "slog_fn_exp", "(", "\n", "lambda", "x", ":", "Pb", "[", "idx", "]", "*", "x", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "\n", "(", "sl_Psi2Dcbt", "[", "0", "]", "[", "idx", "]", "*", "sl_c", "[", "0", "]", ",", "sl_Psi2Dcbt", "[", "1", "]", "[", "idx", "]", "+", "sl_c", "[", "1", "]", ")", ",", "\n", "(", "sl_Psi2cDbt", "[", "0", "]", "[", "idx", "]", "*", "sl_c", "[", "0", "]", ",", "sl_Psi2cDbt", "[", "1", "]", "[", "idx", "]", "+", "sl_c", "[", "1", "]", ")", ",", "\n", "(", "sl_Psi", "[", "0", "]", "[", "idx", "]", "*", "sl_cbt", "[", "0", "]", ",", "-", "sl_Psi", "[", "1", "]", "[", "idx", "]", "+", "sl_cbt", "[", "1", "]", ")", ",", "\n", ")", "\n", "return", "Pbt", ",", "ct", ",", "sl_Dt", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.cuda.unused_cuda_memory": [[6, 14], ["subprocess.run().stdout.decode", "sum", "torch.cuda.get_device_properties", "int", "subprocess.run", "subprocess.run().stdout.decode.split", "l.split"], "function", ["None"], ["def", "unused_cuda_memory", "(", ")", ":", "\n", "    ", "import", "subprocess", "\n", "\n", "mem_total", "=", "torch", ".", "cuda", ".", "get_device_properties", "(", "0", ")", ".", "total_memory", "/", "1e6", "\n", "out", "=", "subprocess", ".", "run", "(", "[", "'nvidia-smi'", ",", "'-q'", "]", ",", "capture_output", "=", "True", ")", ".", "stdout", ".", "decode", "(", ")", "\n", "mem_used", "=", "sum", "(", "int", "(", "l", ".", "split", "(", ")", "[", "4", "]", ")", "for", "l", "in", "out", ".", "split", "(", "'\\n'", ")", "if", "'Used GPU Memory'", "in", "l", ")", "\n", "mem_used", "*=", "1024", "**", "2", "/", "1e6", "\n", "return", "mem_total", "-", "mem_used", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.SSP.forward": [[106, 108], ["utils.ssp"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.ssp"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.is_cuda": [[16, 18], ["next", "net.parameters"], "function", ["None"], ["            ", "ds", ".", "resize", "(", "size", ",", "axis", "=", "0", ")", "\n", "\n", "# mimicking Pytables API", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.state_dict_copy": [[20, 22], ["val.cpu", "net.state_dict().items", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.Sampler.state_dict"], ["def", "row", "(", "self", ")", ":", "\n", "        ", "class", "Appender", ":", "\n", "            ", "def", "__setitem__", "(", "_", ",", "label", ",", "row", ")", ":", "# noqa: B902, N805", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.normalize_mean": [[24, 26], ["x.mean"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean"], ["                    ", "shape", "=", "row", ".", "shape", "\n", "", "elif", "isinstance", "(", "row", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "                    ", "shape", "=", "(", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.exp_normalize_mean": [[28, 31], ["x.max", "x_shifted.exp", "x_shifted.exp().mean", "x_shifted.exp"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean"], ["                    ", "if", "isinstance", "(", "row", ",", "np", ".", "ndarray", ")", ":", "\n", "                        ", "dtype", "=", "row", ".", "dtype", "\n", "", "elif", "isinstance", "(", "row", ",", "float", ")", ":", "\n", "                        ", "dtype", "=", "float", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.weighted_mean_var": [[33, 37], ["utils.exp_normalize_mean"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.exp_normalize_mean"], ["                        ", "dtype", "=", "None", "\n", "", "self", ".", "_group", ".", "create_dataset", "(", "\n", "label", ",", "(", "0", ",", "*", "shape", ")", ",", "maxshape", "=", "(", "None", ",", "*", "shape", ")", ",", "dtype", "=", "dtype", "\n", ")", "\n", "", "ds", "=", "self", ".", "_group", "[", "label", "]", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.merge_tensors": [[39, 44], ["torch.empty_like", "torch.empty_like"], "function", ["None"], ["ds", "[", "-", "1", ",", "...", "]", "=", "row", "\n", "\n", "", "", "return", "Appender", "(", ")", "\n", "\n", "\n", "", "", "class", "_EnergyOffset", ":", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.fp_tensor": [[46, 48], ["torch.tensor", "torch.tensor", "torch.get_default_dtype", "torch.get_default_dtype"], "function", ["None"], ["\n", "def", "__call__", "(", "self", ",", "offset", ")", ":", "\n", "        ", "assert", "self", ".", "value", "is", "None", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.number_of_parameters": [[50, 52], ["sum", "p.numel", "net.parameters"], "function", ["None"], ["return", "self", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.shuffle_tensor": [[54, 56], ["torch.randperm", "torch.randperm", "len"], "function", ["None"], ["\n", "", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "assert", "self", ".", "value", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.triu_flat": [[58, 61], ["torch.triu_indices", "torch.triu_indices"], "function", ["None"], ["return", "None", "\n", "\n", "", "def", "__rsub__", "(", "self", ",", "base", ")", ":", "\n", "        ", "return", "base", "-", "self", ".", "value", "if", "self", ".", "value", "else", "base", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.bdiag": [[63, 65], ["A.diagonal"], "function", ["None"], ["\n", "", "", "energy_offset", "=", "_EnergyOffset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.pow_int": [[67, 75], ["xs.new_zeros", "xs.expand_as", "exps.unique", "exp.item", "len"], "function", ["None"], ["def", "apply_resampling", "(", "weights", ":", "torch", ".", "Tensor", ",", "strategy", ":", "str", ")", ":", "\n", "    ", "num_samples", "=", "len", "(", "weights", ")", "\n", "if", "strategy", "==", "'multinomial'", ":", "\n", "        ", "return", "torch", ".", "multinomial", "(", "weights", ",", "num_samples", ",", "replacement", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown resampling strategy {strategy}.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.batch_eval": [[77, 79], ["torch.cat", "torch.cat", "func"], "function", ["None"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.batch_eval_tuple": [[81, 84], ["list", "tuple", "zip", "torch.cat", "torch.cat", "func"], "function", ["None"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.idx_perm": [[86, 92], ["functools.lru_cache", "torch.device", "torch.device", "list", "torch.tensor().t", "torch.tensor().t", "idx.view.view", "itertools.permutations", "range", "torch.tensor", "torch.tensor", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.idx_comb": [[94, 99], ["functools.lru_cache", "torch.device", "torch.device", "list", "torch.tensor().t", "torch.tensor().t", "itertools.combinations", "range", "torch.tensor", "torch.tensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.ssp": [[101, 103], ["torch.softplus", "numpy.log"], "function", ["None"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_log_dnn": [[110, 114], ["utils.get_custom_dnn", "int", "range", "numpy.round"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_custom_dnn"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_custom_dnn": [[116, 131], ["range", "len", "torch.nn.Linear", "activation_factory", "modules.append", "torch.nn.Sequential", "torch.nn.Sequential", "modules.append", "collections.OrderedDict"], "function", ["None"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.get_mlp": [[133, 151], ["range", "torch.nn.Sequential", "torch.nn.Linear", "modules.append", "collections.OrderedDict", "len", "int", "len", "len", "modules.append", "range", "numpy.round", "activation"], "function", ["None"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.argmax_random_choice": [[153, 157], ["torch.randint", "torch.randint", "[].item", "x.max", "sum", "torch.arange", "torch.arange", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDet.forward": [[10, 25], ["Xs.lu", "is_fail.any", "torch.arange().to", "lus.diagonal().prod", "torch.where", "ctx.save_for_backward", "errors.LUFactError", "torch.where.clone", "torch.arange", "torch.arange", "lus.diagonal", "len", "list", "map"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "Xs", ")", ":", "\n", "        ", "lus", ",", "pivots", ",", "is_fail", "=", "Xs", ".", "lu", "(", "get_infos", "=", "True", ")", "\n", "is_fail", "=", "is_fail", "==", "1", "\n", "if", "is_fail", ".", "any", "(", ")", ":", "\n", "            ", "idxs", "=", "torch", ".", "arange", "(", "len", "(", "Xs", ")", ")", "[", "is_fail", "]", "\n", "raise", "LUFactError", "(", "{", "'idxs'", ":", "idxs", ",", "'dets'", ":", "list", "(", "map", "(", "torch", ".", "det", ",", "Xs", "[", "idxs", "]", ")", ")", "}", ")", "\n", "", "idx", "=", "torch", ".", "arange", "(", "1", ",", "Xs", ".", "shape", "[", "-", "1", "]", "+", "1", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "to", "(", "pivots", ".", "device", ")", "\n", "changed_sign", "=", "(", "pivots", "!=", "idx", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "%", "2", "==", "1", "\n", "udets", "=", "lus", ".", "diagonal", "(", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "prod", "(", "dim", "=", "-", "1", ")", "\n", "dets", "=", "torch", ".", "where", "(", "changed_sign", ",", "-", "udets", ",", "udets", ")", "\n", "# the need for clone() is probably related to", "\n", "# https://github.com/pytorch/pytorch/issues/18619", "\n", "ctx", ".", "save_for_backward", "(", "Xs", ",", "dets", ".", "clone", "(", ")", ")", "\n", "return", "dets", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDet.backward": [[26, 30], ["BDetBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "vs", ")", ":", "\n", "        ", "Xs", ",", "ys", "=", "ctx", ".", "saved_tensors", "\n", "return", "BDetBackward", ".", "apply", "(", "Xs", ",", "vs", ",", "ys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetBackward.forward": [[33, 40], ["utils.batch_eval", "ctx.save_for_backward", "Xs.split", "utils.batch_eval.transpose", "x.inverse"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.batch_eval"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "Xs", ",", "vs", ",", "ys", ")", ":", "\n", "        ", "vys", "=", "vs", "*", "ys", "\n", "# inverse() seems to be limited in batch dimension on CUDA", "\n", "Ks", "=", "batch_eval", "(", "lambda", "x", ":", "x", ".", "inverse", "(", ")", ",", "Xs", ".", "split", "(", "2", "**", "16", "-", "1", ")", ")", "\n", "ctx", ".", "save_for_backward", "(", "Xs", ",", "Ks", ",", "ys", ",", "vys", ")", "\n", "return", "vys", "[", "...", ",", "None", ",", "None", "]", "*", "Ks", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetBackward.backward": [[41, 48], ["BDetDoubleBackward.apply", "Ks.transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "Vps", ")", ":", "\n", "        ", "Xs", ",", "Ks", ",", "ys", ",", "vys", "=", "ctx", ".", "saved_tensors", "\n", "TrKVps", "=", "(", "Ks", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "*", "Vps", ")", ".", "sum", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "grad_Xs", "=", "BDetDoubleBackward", ".", "apply", "(", "Xs", ",", "Vps", ",", "Ks", ",", "vys", ",", "TrKVps", ")", "\n", "grad_vs", "=", "ys", "*", "TrKVps", "\n", "return", "grad_Xs", ",", "grad_vs", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetDoubleBackward.forward": [[51, 59], ["ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "Xs", ",", "Vps", ",", "Ks", ",", "vys", ",", "TrKVps", ")", ":", "\n", "        ", "vyKs", "=", "vys", "[", "...", ",", "None", ",", "None", "]", "*", "Ks", "\n", "KVps", "=", "Ks", "@", "Vps", "\n", "ctx", ".", "save_for_backward", "(", "Xs", ",", "Vps", ",", "Ks", ",", "vys", ",", "TrKVps", ",", "vyKs", ",", "KVps", ")", "\n", "tmp1", "=", "vyKs", "*", "TrKVps", "[", "...", ",", "None", ",", "None", "]", "\n", "tmp2", "=", "KVps", "@", "vyKs", "\n", "return", "(", "tmp1", "-", "tmp2", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetDoubleBackward.backward": [[60, 71], ["BDetTripleBackward.apply", "grad_Vps.transpose.transpose.transpose", "Ks.transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "Vpps", ")", ":", "\n", "        ", "Xs", ",", "Vps", ",", "Ks", ",", "vys", ",", "TrKVps", ",", "vyKs", ",", "KVps", "=", "ctx", ".", "saved_tensors", "\n", "TrKVpps", "=", "(", "Ks", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "*", "Vpps", ")", ".", "sum", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "KVpps", "=", "Ks", "@", "Vpps", "\n", "grad_Xs", "=", "BDetTripleBackward", ".", "apply", "(", "\n", "Xs", ",", "Vpps", ",", "Ks", ",", "vys", ",", "Vps", ",", "TrKVps", ",", "TrKVpps", ",", "KVps", ",", "KVpps", ",", "vyKs", "\n", ")", "\n", "grad_Vps", "=", "vyKs", "*", "TrKVpps", "[", "...", ",", "None", ",", "None", "]", "-", "KVpps", "@", "vyKs", "\n", "grad_Vps", "=", "grad_Vps", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "return", "grad_Xs", ",", "grad_Vps", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetTripleBackward.forward": [[74, 87], ["KVps.transpose"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "Xs", ",", "Vpps", ",", "Ks", ",", "vys", ",", "Vps", ",", "TrKVps", ",", "TrKVpps", ",", "KVps", ",", "KVpps", ",", "vyKs", ")", ":", "\n", "        ", "TrKVpKVpps", "=", "(", "KVps", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "*", "KVpps", ")", ".", "sum", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "contractions", "=", "(", "\n", "KVps", "@", "KVpps", "\n", "+", "KVpps", "@", "KVps", "\n", "-", "KVps", "*", "TrKVpps", "[", "...", ",", "None", ",", "None", "]", "\n", "-", "KVpps", "*", "TrKVps", "[", "...", ",", "None", ",", "None", "]", "\n", ")", "\n", "return", "(", "\n", "vyKs", "*", "(", "TrKVps", "*", "TrKVpps", "-", "TrKVpKVpps", ")", "[", "...", ",", "None", ",", "None", "]", "\n", "+", "contractions", "@", "vyKs", "\n", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.fit.LossVariance.forward": [[7, 11], ["None"], "methods", ["None"], ["from", "uncertainties", "import", "ufloat", "\n", "\n", "from", ".", "errors", "import", "NanError", "\n", "from", ".", "physics", "import", "local_energy", "\n", "from", ".", "torchext", "import", "exp_normalize_mean", ",", "weighted_mean_var", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.fit.loss_least_squares": [[13, 15], ["None"], "function", ["None"], ["__version__", "=", "'0.1.0'", "\n", "__all__", "=", "[", "'fit_wf'", ",", "'WaveFunctionLoss'", ",", "'LossEnergy'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.fit.outlier_mask": [[17, 26], ["x.detach.detach", "x.detach.kthvalue", "x.detach.kthvalue", "int", "int"], "function", ["None"], ["\n", "\n", "class", "WaveFunctionLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.fit.fit_wf_supervised": [[29, 56], ["enumerate", "fit_net", "true_net", "loss_func", "loss_func.backward", "writer.add_scalar", "fit_net.tracked_parameters", "opt.step", "fit_net.zero_grad", "scheduler.step", "writer.add_scalar"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetDoubleBackward.backward", "home.repos.pwc.inspect_result.deepqmc_deepqmc.wf.base.WaveFunction.tracked_parameters", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.step", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.MetropolisSampler.step"], ["\n", "\n", "pass", "\n", "\n", "\n", "", "class", "LossEnergy", "(", "WaveFunctionLoss", ")", ":", "\n", "    ", "r\"\"\"Total energy loss function.\n\n    .. math::\n        L:=2\\mathbb E\\big[(E_\\text{loc}-\\mathbb E[E_\\text{loc}])\\ln|\\psi|\\big]\n\n    Taking a derivative of only the logarithm, the resulting gradient is equivalent,\n    thanks to the Hermitian property of the Hamiltonian, to the gradient of the\n    plain total energy loss function, :math:`\\mathbb E[E_\\text{loc}]`.\n    \"\"\"", "\n", "\n", "def", "forward", "(", "self", ",", "Es_loc", ",", "log_psis", ",", "ws", ")", ":", "\n", "        ", "assert", "Es_loc", ".", "grad_fn", "is", "None", "\n", "self", ".", "weights", "=", "2", "*", "(", "Es_loc", "-", "(", "ws", "*", "Es_loc", ")", ".", "mean", "(", ")", ")", "/", "len", "(", "Es_loc", ")", "\n", "return", "(", "self", ".", "weights", "*", "ws", "*", "log_psis", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "", "", "def", "log_clipped_outliers", "(", "x", ",", "q", ")", ":", "\n", "    ", "x", "=", "x", ".", "detach", "(", ")", "\n", "median", "=", "x", ".", "median", "(", ")", "\n", "x", "=", "x", "-", "median", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.cli.train_multi_at": [[22, 134], ["click.command", "click.argument", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "pathlib.Path().resolve", "int", "itertools.count", "log.info", "sys.path.append", "range", "time.time", "click.Path", "pathlib.Path", "str", "log.info", "io.wf_from_file", "time.time", "root.glob", "len", "len", "log.info", "log.info", "all_states.sort", "log.info", "log.info", "wf.cuda", "log.info", "train.train", "list", "int", "int", "log.info", "time.sleep", "log.info", "time.sleep", "log.error", "log.warning", "log.warning", "root.glob", "root.glob", "root.glob", "torch.load", "all_states.values", "params.get", "log.warning", "log.warning", "log.warning", "len", "[].mean_of", "len", "traceback.format_exc().strip", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.io.wf_from_file", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.train.train", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMMonitor.mean_of"], ["\n", "DEEPQMC_DEFAULTS", "=", "{", "\n", "(", "train", ",", "'sampler_kwargs'", ")", ":", "LangevinSampler", ".", "from_wf", ",", "\n", "(", "train", ",", "'fit_kwargs'", ")", ":", "fit_wf", ",", "\n", "(", "train", ",", "'optimizer_kwargs'", ")", ":", "True", ",", "\n", "(", "train", ",", "'lr_scheduler_kwargs'", ")", ":", "True", ",", "\n", "(", "LangevinSampler", ".", "from_wf", ",", "'kwargs'", ")", ":", "LangevinSampler", ",", "\n", "(", "evaluate", ",", "'sampler_kwargs'", ")", ":", "(", "\n", "LangevinSampler", ".", "from_wf", ",", "\n", "[", "(", "'n_decorrelate'", ",", "4", ")", ",", "'n_discard'", ",", "'sample_size'", "]", ",", "\n", ")", ",", "\n", "(", "evaluate", ",", "'sample_kwargs'", ")", ":", "sample_wf", ",", "\n", "}", "\n", "\n", "\n", "def", "_get_subkwargs", "(", "func", ",", "name", ",", "mapping", ")", ":", "\n", "    ", "target", "=", "mapping", "[", "func", ",", "name", "]", "\n", "if", "not", "target", ":", "\n", "        ", "return", "tomlkit", ".", "table", "(", ")", "\n", "", "target", ",", "override", "=", "target", "if", "isinstance", "(", "target", ",", "tuple", ")", "else", "(", "target", ",", "[", "]", ")", "\n", "if", "isinstance", "(", "target", ",", "dict", ")", ":", "\n", "        ", "sub_kwargs", "=", "{", "k", ":", "collect_kwarg_defaults", "(", "v", ",", "mapping", ")", "for", "k", ",", "v", "in", "target", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "sub_kwargs", "=", "collect_kwarg_defaults", "(", "target", ",", "mapping", ")", "\n", "", "for", "x", "in", "override", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "            ", "key", ",", "val", "=", "x", "\n", "sub_kwargs", "[", "key", "]", "=", "val", "\n", "", "else", ":", "\n", "            ", "del", "sub_kwargs", "[", "x", "]", "\n", "", "", "return", "sub_kwargs", "\n", "\n", "\n", "", "def", "collect_kwarg_defaults", "(", "func", ",", "mapping", ")", ":", "\n", "    ", "kwargs", "=", "tomlkit", ".", "table", "(", ")", "\n", "for", "p", "in", "inspect", ".", "signature", "(", "func", ")", ".", "parameters", ".", "values", "(", ")", ":", "\n", "        ", "if", "p", ".", "kind", "is", "inspect", ".", "Parameter", ".", "POSITIONAL_OR_KEYWORD", ":", "\n", "            ", "continue", "\n", "", "if", "p", ".", "name", "==", "'kwargs'", ":", "\n", "            ", "assert", "p", ".", "default", "is", "p", ".", "empty", "\n", "assert", "p", ".", "kind", "is", "inspect", ".", "Parameter", ".", "VAR_KEYWORD", "\n", "sub_kwargs", "=", "_get_subkwargs", "(", "func", ",", "'kwargs'", ",", "mapping", ")", "\n", "for", "item", "in", "sub_kwargs", ".", "value", ".", "body", ":", "\n", "                ", "kwargs", ".", "add", "(", "*", "item", ")", "\n", "", "", "elif", "p", ".", "name", ".", "endswith", "(", "'_kwargs'", ")", ":", "\n", "            ", "if", "mapping", ".", "get", "(", "(", "func", ",", "p", ".", "name", ")", ")", "is", "True", ":", "\n", "                ", "kwargs", "[", "p", ".", "name", "]", "=", "p", ".", "default", "\n", "", "else", ":", "\n", "                ", "assert", "p", ".", "default", "is", "None", "\n", "assert", "p", ".", "kind", "is", "inspect", ".", "Parameter", ".", "KEYWORD_ONLY", "\n", "sub_kwargs", "=", "_get_subkwargs", "(", "func", ",", "p", ".", "name", ",", "mapping", ")", "\n", "kwargs", "[", "p", ".", "name", "]", "=", "sub_kwargs", "\n", "", "", "else", ":", "\n", "            ", "assert", "p", ".", "kind", "is", "inspect", ".", "Parameter", ".", "KEYWORD_ONLY", "\n", "if", "p", ".", "default", "is", "None", ":", "\n", "                ", "kwargs", ".", "add", "(", "Comment", "(", "Trivia", "(", "comment", "=", "f'#: {p.name} = ...'", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "kwargs", "[", "p", ".", "name", "]", "=", "p", ".", "default", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print", "(", "func", ",", "p", ".", "name", ",", "p", ".", "kind", ",", "p", ".", "default", ")", "\n", "raise", "\n", "", "", "", "", "return", "kwargs", "\n", "\n", "\n", "", "class", "TqdmStream", ":", "\n", "    ", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "tqdm", ".", "write", "(", "msg", ",", "end", "=", "''", ")", "\n", "\n", "\n", "", "", "class", "CLI", "(", "click", ".", "Group", ")", ":", "\n", "    ", "def", "list_commands", "(", "self", ",", "ctx", ")", ":", "\n", "        ", "return", "self", ".", "commands", ".", "keys", "(", ")", "\n", "\n", "", "def", "get_command", "(", "self", ",", "ctx", ",", "name", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'extra:'", ")", ":", "\n", "            ", "from", ".", "extra", "import", "cli", "as", "extra_cli", "\n", "\n", "name", "=", "name", ".", "split", "(", "':'", ",", "1", ")", "[", "1", "]", "\n", "for", "attr", "in", "dir", "(", "extra_cli", ")", ":", "\n", "                ", "cmd", "=", "getattr", "(", "extra_cli", ",", "attr", ")", "\n", "if", "isinstance", "(", "cmd", ",", "click", ".", "core", ".", "Command", ")", "and", "cmd", ".", "name", "==", "name", ":", "\n", "                    ", "return", "cmd", "\n", "", "", "", "return", "super", "(", ")", ".", "get_command", "(", "ctx", ",", "name", ")", "\n", "\n", "\n", "", "", "@", "click", ".", "group", "(", "cls", "=", "CLI", ")", "\n", "@", "click", ".", "option", "(", "'-v'", ",", "'--verbose'", ",", "count", "=", "True", ",", "help", "=", "'Increase verbosity.'", ")", "\n", "@", "click", ".", "option", "(", "'-q'", ",", "'--quiet'", ",", "is_flag", "=", "True", ",", "help", "=", "'Suppres all output.'", ")", "\n", "def", "cli", "(", "verbose", ",", "quiet", ")", ":", "# noqa: D403", "\n", "    ", "\"\"\"DeepQMC runs quantum Monte Carlo with deep neural networks.\"\"\"", "\n", "assert", "not", "(", "quiet", "and", "verbose", ")", "\n", "logging", ".", "basicConfig", "(", "\n", "style", "=", "'{'", ",", "\n", "format", "=", "'[{asctime}.{msecs:03.0f}] {levelname}:{name}: {message}'", ",", "\n", "datefmt", "=", "'%H:%M:%S'", ",", "\n", "stream", "=", "TqdmStream", "(", ")", ",", "\n", ")", "\n", "if", "quiet", ":", "\n", "        ", "level", "=", "logging", ".", "ERROR", "\n", "", "else", ":", "\n", "        ", "level", "=", "[", "logging", ".", "WARNING", ",", "logging", ".", "INFO", ",", "logging", ".", "DEBUG", "]", "[", "verbose", "]", "\n", "", "logging", ".", "getLogger", "(", "'deepqmc'", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "\n", "", "@", "cli", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--commented'", ",", "'-c'", ",", "is_flag", "=", "True", ",", "help", "=", "'Comment out all hyperparameters.'", "\n", ")", "\n", "def", "defaults", "(", "commented", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.cli.get_status": [[136, 149], ["pathlib.Path().resolve", "time.strftime", "Path().resolve.open", "f.readlines", "time.localtime", "line.strip", "pathlib.Path", "Path().resolve.stat"], "function", ["None"], ["\n", "table", "=", "tomlkit", ".", "table", "(", ")", "\n", "table", "[", "'train_kwargs'", "]", "=", "collect_kwarg_defaults", "(", "train", ",", "DEEPQMC_DEFAULTS", ")", "\n", "table", "[", "'evaluate_kwargs'", "]", "=", "collect_kwarg_defaults", "(", "evaluate", ",", "DEEPQMC_DEFAULTS", ")", "\n", "for", "label", ",", "ansatz", "in", "ANSATZES", ".", "items", "(", ")", ":", "\n", "        ", "table", "[", "f'{label}_kwargs'", "]", "=", "collect_kwarg_defaults", "(", "ansatz", ".", "entry", ",", "ansatz", ".", "defaults", ")", "\n", "", "lines", "=", "tomlkit", ".", "dumps", "(", "table", ")", ".", "split", "(", "'\\n'", ")", "\n", "if", "commented", ":", "\n", "        ", "lines", "=", "[", "'# '", "+", "l", "if", "' = '", "in", "l", "and", "l", "[", "0", "]", "!=", "'#'", "else", "l", "for", "l", "in", "lines", "]", "\n", "", "click", ".", "echo", "(", "'\\n'", ".", "join", "(", "lines", ")", ",", "nl", "=", "False", ")", "\n", "\n", "\n", "", "@", "cli", ".", "command", "(", "'train'", ")", "\n", "@", "click", ".", "argument", "(", "'workdir'", ",", "type", "=", "click", ".", "Path", "(", "exists", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.cli.get_status_multi": [[151, 155], ["sorted", "pathlib.Path", "cli.get_status"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.cli.get_status"], ["'--save-every'", ",", "\n", "default", "=", "100", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "'Frequency in steps of saving the curent state of the optimization.'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.cli.status": [[157, 162], ["click.command", "click.argument", "cli.get_status_multi", "click.echo", "click.Path"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.cli.get_status_multi"], ["'--cuda/--no-cuda'", ",", "\n", "default", "=", "True", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "'Toggle training on a GPU.'", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.cli.draw_hlines": [[164, 180], ["click.command", "click.argument", "click.argument", "click.argument", "click.option", "click.option", "pathlib.Path", "click.Path", "float", "fractions.split", "torch.utils.tensorboard.SummaryWriter", "range", "writer.add_scalar", "writer.add_scalar"], "function", ["None"], ["default", "=", "3", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "'Maximum number of attempted restarts before aborting.'", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "'--hook'", ",", "is_flag", "=", "True", ",", "help", "=", "'Import a deepqmc hook from WORKDIR.'", ")", "\n", "def", "train_at", "(", "workdir", ",", "save_every", ",", "cuda", ",", "max_restarts", ",", "hook", ")", ":", "\n", "    ", "\"\"\"Train an ansatz with variational quantum Monte Carlo.\n\n    The calculation details must be specified in a \"param.toml\" file in WORKDIR,\n    which must contain at least the keywords \"system\" and \"ansatz\", and\n    optionally any keywords printed by the \"defaults\" command.\n    \"\"\"", "\n", "workdir", "=", "Path", "(", "workdir", ")", ".", "resolve", "(", ")", "\n", "if", "hook", ":", "\n", "        ", "log", ".", "info", "(", "'Importing a dlqmc hook'", ")", "\n", "sys", ".", "path", ".", "append", "(", "str", "(", "workdir", ")", ")", "\n", "import", "dlqmc_hook", "# noqa: F401", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnergyTransform.transform_non_affine": [[27, 29], ["mplext.corr_ene_tf"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_tf"], ["def", "transform_non_affine", "(", "self", ",", "a", ")", ":", "\n", "        ", "return", "corr_ene_tf", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnergyTransform.inverted": [[30, 32], ["mplext.InvertedCorrelationEnergyTransform"], "methods", ["None"], ["", "def", "inverted", "(", "self", ")", ":", "\n", "        ", "return", "InvertedCorrelationEnergyTransform", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.InvertedCorrelationEnergyTransform.transform_non_affine": [[40, 42], ["mplext.corr_ene_inv_tf"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_inv_tf"], ["def", "transform_non_affine", "(", "self", ",", "a", ")", ":", "\n", "        ", "return", "corr_ene_inv_tf", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.InvertedCorrelationEnergyTransform.inverted": [[43, 45], ["mplext.CorrelationEnergyTransform"], "methods", ["None"], ["", "def", "inverted", "(", "self", ")", ":", "\n", "        ", "return", "CorrelationEnergyTransform", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnergyLocator.__init__": [[48, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "subs", "=", "1", ")", ":", "\n", "        ", "self", ".", "subs", "=", "subs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnergyLocator.__call__": [[51, 54], ["mplext.CorrelationEnergyLocator.axis.get_view_interval", "mplext.CorrelationEnergyLocator.tick_values"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnergyLocator.tick_values"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "vmin", ",", "vmax", "=", "self", ".", "axis", ".", "get_view_interval", "(", ")", "\n", "return", "self", ".", "tick_values", "(", "vmin", ",", "vmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnergyLocator.tick_values": [[55, 67], ["numpy.floor", "numpy.ceil", "numpy.arange", "mplext.corr_ene_inv_tf", "numpy.concatenate", "mplext.corr_ene_tf", "mplext.corr_ene_tf", "numpy.arange", "range", "len"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_inv_tf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_tf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_tf"], ["", "def", "tick_values", "(", "self", ",", "vmin", ",", "vmax", ")", ":", "\n", "        ", "vmin", "=", "np", ".", "floor", "(", "corr_ene_tf", "(", "vmin", ")", ")", "\n", "vmax", "=", "np", ".", "ceil", "(", "corr_ene_tf", "(", "vmax", ")", ")", "\n", "bases", "=", "np", ".", "arange", "(", "vmin", ",", "vmax", "+", "1e-10", ")", "\n", "decades", "=", "corr_ene_inv_tf", "(", "bases", ")", "\n", "ticks", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "np", ".", "arange", "(", "decades", "[", "i", "]", ",", "decades", "[", "i", "+", "1", "]", ",", "10", "**", "-", "bases", "[", "i", "]", "/", "self", ".", "subs", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "decades", ")", "-", "1", ")", "\n", "]", "\n", ")", "\n", "return", "ticks", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnergyLocator.view_limits": [[68, 73], ["mplext.corr_ene_tf", "numpy.array", "tuple", "numpy.array", "mplext.corr_ene_inv_tf"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_tf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_inv_tf"], ["", "def", "view_limits", "(", "self", ",", "vmin", ",", "vmax", ")", ":", "\n", "        ", "lims", "=", "corr_ene_tf", "(", "np", ".", "array", "(", "[", "vmin", ",", "vmax", "]", ")", ")", "\n", "rng", "=", "lims", "[", "1", "]", "-", "lims", "[", "0", "]", "\n", "lims", "=", "np", ".", "array", "(", "[", "lims", "[", "0", "]", "-", "0.05", "*", "rng", ",", "lims", "[", "1", "]", "+", "0.05", "*", "rng", "]", ")", "\n", "return", "tuple", "(", "corr_ene_inv_tf", "(", "lims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnergyFormatter.__call__": [[76, 79], ["max", "int", "numpy.round", "mplext.corr_ene_tf"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_tf"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "pos", "=", "None", ")", ":", "\n", "        ", "acc", "=", "max", "(", "0", ",", "int", "(", "np", ".", "round", "(", "corr_ene_tf", "(", "x", ")", ")", ")", "-", "2", ")", "\n", "return", "f'{100 * x:.{acc}f}%'", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnegryScale.__init__": [[84, 86], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "axis", ",", "subs", "=", "10", ")", ":", "\n", "        ", "self", ".", "subs", "=", "subs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnegryScale.get_transform": [[87, 89], ["mplext.CorrelationEnergyTransform"], "methods", ["None"], ["", "def", "get_transform", "(", "self", ")", ":", "\n", "        ", "return", "CorrelationEnergyTransform", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnegryScale.set_default_locators_and_formatters": [[90, 94], ["axis.set_major_locator", "axis.set_minor_locator", "axis.set_major_formatter", "mplext.CorrelationEnergyLocator", "mplext.CorrelationEnergyLocator", "mplext.CorrelationEnergyFormatter"], "methods", ["None"], ["", "def", "set_default_locators_and_formatters", "(", "self", ",", "axis", ")", ":", "\n", "        ", "axis", ".", "set_major_locator", "(", "CorrelationEnergyLocator", "(", ")", ")", "\n", "axis", ".", "set_minor_locator", "(", "CorrelationEnergyLocator", "(", "self", ".", "subs", ")", ")", "\n", "axis", ".", "set_major_formatter", "(", "CorrelationEnergyFormatter", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.CorrelationEnegryScale.limit_range_for_scale": [[95, 97], ["min", "min"], "methods", ["None"], ["", "def", "limit_range_for_scale", "(", "self", ",", "vmin", ",", "vmax", ",", "minpos", ")", ":", "\n", "        ", "return", "min", "(", "vmin", ",", "1", "-", "1e-10", ")", ",", "min", "(", "vmax", ",", "1", "-", "1e-10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_tf": [[10, 15], ["numpy.errstate", "numpy.where", "numpy.log10"], "function", ["None"], ["def", "corr_ene_tf", "(", "a", ")", ":", "\n", "    ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "out", "=", "-", "np", ".", "log10", "(", "1", "-", "a", ")", "\n", "out", "=", "np", ".", "where", "(", "a", ">=", "1", ",", "10", ",", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.mplext.corr_ene_inv_tf": [[17, 19], ["None"], "function", ["None"], ["", "", "def", "corr_ene_inv_tf", "(", "a", ")", ":", "\n", "    ", "return", "1", "-", "10", "**", "(", "-", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.GaussianKDEstimator.__init__": [[12, 22], ["len", "numpy.sqrt", "int", "len", "xs.nelement", "xs.element_size"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "xs", ",", "ys", "=", "None", ",", "weights", "=", "None", ",", "normed", "=", "False", ",", "max_memory", "=", "1.0", ",", "*", ",", "bw", ")", ":", "\n", "        ", "assert", "len", "(", "xs", ".", "shape", ")", "==", "2", "\n", "if", "ys", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "ys", ".", "shape", ")", "==", "1", "\n", "", "self", ".", "_xs", "=", "xs", "\n", "self", ".", "_ys", "=", "ys", "\n", "self", ".", "_weights", "=", "weights", "if", "weights", "is", "not", "None", "else", "None", "\n", "self", ".", "_normed", "=", "normed", "\n", "self", ".", "_width", "=", "np", ".", "sqrt", "(", "2", ")", "*", "bw", "\n", "self", ".", "_bs", "=", "int", "(", "2", "**", "30", "*", "max_memory", ")", "//", "(", "xs", ".", "nelement", "(", ")", "*", "xs", ".", "element_size", "(", ")", "or", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.GaussianKDEstimator.__call__": [[23, 41], ["len", "len", "torchext.batch_eval", "torch.exp", "basis.mean", "iter", "basis.mean", "xs.split", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.batch_eval", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean"], ["", "def", "__call__", "(", "self", ",", "xs", ",", "normed", "=", "None", ",", "dens_only", "=", "False", ",", "iter", "=", "iter", ")", ":", "\n", "        ", "assert", "len", "(", "xs", ".", "shape", ")", "==", "2", "\n", "if", "len", "(", "xs", ")", ">", "self", ".", "_bs", ":", "\n", "            ", "return", "batch_eval", "(", "\n", "self", ",", "iter", "(", "xs", ".", "split", "(", "self", ".", "_bs", ")", ")", ",", "normed", "=", "normed", ",", "dens_only", "=", "dens_only", "\n", ")", "\n", "", "kernel", "=", "(", "(", "xs", "[", ":", ",", "None", "]", "-", "self", ".", "_xs", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "self", ".", "_width", "**", "2", "\n", "norm", "=", "1", "/", "(", "(", "np", ".", "sqrt", "(", "np", ".", "pi", ")", "*", "self", ".", "_width", ")", "**", "xs", ".", "shape", "[", "1", "]", ")", "\n", "basis", "=", "norm", "*", "torch", ".", "exp", "(", "-", "kernel", ")", "\n", "if", "self", ".", "_weights", "is", "not", "None", ":", "\n", "            ", "basis", "=", "self", ".", "_weights", "*", "basis", "\n", "", "if", "self", ".", "_ys", "is", "not", "None", "and", "not", "dens_only", ":", "\n", "            ", "dens", "=", "(", "self", ".", "_ys", "*", "basis", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "dens", "=", "basis", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "", "if", "normed", "if", "normed", "is", "not", "None", "else", "self", ".", "_normed", ":", "\n", "            ", "dens", "=", "dens", "/", "basis", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "", "return", "dens", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.blocking": [[43, 60], ["xs.std", "range", "torch.tensor", "int", "sigmas_B.append", "numpy.log2", "xs[].view().mean().std().mean", "numpy.sqrt", "xs[].view().mean().std", "xs[].view().mean", "xs[].view"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.std", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.std", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean"], ["", "", "def", "blocking", "(", "xs", ",", "max_B", "=", "None", ")", ":", "\n", "    ", "N", "=", "xs", ".", "shape", "[", "1", "]", "\n", "x_sigma", "=", "xs", ".", "std", "(", ")", "\n", "max_B", "=", "max_B", "or", "int", "(", "np", ".", "log2", "(", "N", ")", ")", "\n", "sigmas_B", "=", "[", "]", "\n", "for", "log_B", "in", "range", "(", "0", ",", "max_B", ")", ":", "\n", "        ", "B", "=", "2", "**", "log_B", "\n", "sigmas_B", ".", "append", "(", "\n", "xs", "[", ":", ",", "-", "(", "N", "//", "B", "*", "B", ")", ":", "]", "\n", ".", "view", "(", "xs", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "B", ")", "\n", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", ".", "std", "(", "dim", "=", "-", "1", ")", "\n", ".", "mean", "(", ")", "\n", "*", "np", ".", "sqrt", "(", "B", ")", "\n", "/", "x_sigma", "\n", ")", "\n", "", "return", "torch", ".", "tensor", "(", "sigmas_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.autocorr_coeff": [[62, 71], ["xs.mean", "xs.var", "torch.tensor", "Cs.append"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.mean", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.ewm.EWMAverage.var"], ["", "def", "autocorr_coeff", "(", "ks", ",", "xs", ")", ":", "\n", "    ", "x_mean", "=", "xs", ".", "mean", "(", ")", "\n", "x_var", "=", "xs", ".", "var", "(", ")", "\n", "Cs", "=", "[", "]", "\n", "for", "k", "in", "ks", ":", "\n", "        ", "end", "=", "-", "k", "or", "xs", ".", "shape", "[", "1", "]", "\n", "x_autocov", "=", "(", "(", "xs", "[", ":", ",", ":", "end", "]", "-", "x_mean", ")", "*", "(", "xs", "[", ":", ",", "k", ":", "]", "-", "x_mean", ")", ")", ".", "mean", "(", ")", "\n", "Cs", ".", "append", "(", "x_autocov", "/", "x_var", ")", "\n", "", "return", "torch", ".", "tensor", "(", "Cs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.pair_correlations_from_samples": [[73, 84], ["analysis..flatten", "analysis..flatten", "physics.pairwise_distance().flatten", "torchext.shuffle_tensor().view", "analysis..", "analysis.GaussianKDEstimator", "analysis.GaussianKDEstimator", "analysis.GaussianKDEstimator", "analysis.GaussianKDEstimator", "analysis..", "analysis..", "physics.pairwise_distance", "torchext.shuffle_tensor", "rs.view"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_distance", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.shuffle_tensor"], ["", "def", "pair_correlations_from_samples", "(", "rs", ",", "n_up", ",", "bw", "=", "0.1", ")", ":", "\n", "    ", "R_uu", "=", "pairwise_self_distance", "(", "rs", "[", ":", ",", ":", "n_up", "]", ")", ".", "flatten", "(", ")", "\n", "R_dd", "=", "pairwise_self_distance", "(", "rs", "[", ":", ",", "n_up", ":", "]", ")", ".", "flatten", "(", ")", "\n", "R_ud", "=", "pairwise_distance", "(", "rs", "[", ":", ",", ":", "n_up", "]", ",", "rs", "[", ":", ",", "n_up", ":", "]", ")", ".", "flatten", "(", ")", "\n", "rs_decorr", "=", "shuffle_tensor", "(", "rs", ".", "view", "(", "-", "1", ",", "3", ")", ")", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "R_decorr", "=", "pairwise_self_distance", "(", "rs_decorr", ")", "[", ":", ",", "0", "]", "\n", "return", "{", "\n", "'uu'", ":", "GaussianKDEstimator", "(", "R_uu", "[", ":", ",", "None", "]", ",", "bw", "=", "bw", ")", ",", "\n", "'dd'", ":", "GaussianKDEstimator", "(", "R_dd", "[", ":", ",", "None", "]", ",", "bw", "=", "bw", ")", ",", "\n", "'ud'", ":", "GaussianKDEstimator", "(", "R_ud", "[", ":", ",", "None", "]", ",", "bw", "=", "bw", ")", ",", "\n", "'decorr'", ":", "GaussianKDEstimator", "(", "R_decorr", "[", ":", ",", "None", "]", ",", "bw", "=", "bw", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.ewm": [[87, 100], ["numpy.zeros_like", "numpy.exp", "numpy.sqrt", "uncertainties.unumpy.uarray", "numpy.log", "np.zeros_like.sum", "numpy.log"], "function", ["None"], ["", "def", "ewm", "(", "x", ",", "X", ",", "Y", ",", "alpha", ",", "thre", "=", "1e-10", ",", "with_err", "=", "False", ")", ":", "\n", "    ", "if", "x", "is", "None", ":", "\n", "        ", "x", "=", "X", "\n", "", "deltas", "=", "-", "np", ".", "log", "(", "alpha", ")", "*", "(", "x", "[", ":", ",", "None", "]", "-", "X", ")", "\n", "mask", "=", "(", "0", "<=", "deltas", ")", "&", "(", "deltas", "<", "-", "np", ".", "log", "(", "thre", ")", ")", "\n", "ws", "=", "np", ".", "zeros_like", "(", "deltas", ")", "\n", "ws", "[", "mask", "]", "=", "np", ".", "exp", "(", "-", "deltas", "[", "mask", "]", ")", "\n", "ws", "=", "ws", "/", "ws", ".", "sum", "(", "axis", "=", "-", "1", ")", "[", ":", ",", "None", "]", "\n", "mean", "=", "(", "ws", "*", "Y", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "if", "not", "with_err", ":", "\n", "        ", "return", "mean", "\n", "", "err", "=", "np", ".", "sqrt", "(", "(", "ws", "**", "2", "*", "(", "mean", "[", ":", ",", "None", "]", "-", "Y", ")", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "\n", "return", "unp", ".", "uarray", "(", "mean", ",", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.get_flat_mesh": [[102, 106], ["torch.meshgrid", "torch.linspace", "torch.stack().flatten().t", "zip", "torch.stack().flatten", "torch.stack"], "function", ["None"], ["", "def", "get_flat_mesh", "(", "bounds", ",", "npts", ",", "device", "=", "None", ")", ":", "\n", "    ", "edges", "=", "[", "torch", ".", "linspace", "(", "*", "b", ",", "n", ",", "device", "=", "device", ")", "for", "b", ",", "n", "in", "zip", "(", "bounds", ",", "npts", ")", "]", "\n", "grids", "=", "torch", ".", "meshgrid", "(", "*", "edges", ")", "\n", "return", "torch", ".", "stack", "(", "grids", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "t", "(", ")", ",", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.integrate_on_mesh": [[108, 113], ["numpy.array().prod", "int", "analysis.get_flat_mesh", "sum", "numpy.array", "func().sum", "mesh.chunk", "func"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.get_flat_mesh"], ["", "def", "integrate_on_mesh", "(", "func", ",", "bounds", ",", "density", "=", "0.02", ")", ":", "\n", "    ", "ns_pts", "=", "[", "int", "(", "(", "bs", "[", "1", "]", "-", "bs", "[", "0", "]", ")", "/", "density", ")", "for", "bs", "in", "bounds", "]", "\n", "vol", "=", "np", ".", "array", "(", "[", "bs", "[", "1", "]", "-", "bs", "[", "0", "]", "for", "bs", "in", "bounds", "]", ")", ".", "prod", "(", ")", "\n", "mesh", "=", "get_flat_mesh", "(", "bounds", ",", "ns_pts", ")", "[", "0", "]", "\n", "return", "sum", "(", "func", "(", "x", ")", ".", "sum", "(", ")", "for", "x", "in", "mesh", ".", "chunk", "(", "100", ")", ")", "*", "(", "vol", "/", "mesh", ".", "shape", "[", "0", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugContainer.__init__": [[14, 17], ["collections.UserDict.__init__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_levels", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugContainer.cd": [[18, 25], ["debug.DebugContainer._levels.append", "debug.DebugContainer._levels.pop"], "methods", ["None"], ["", "@", "contextmanager", "\n", "def", "cd", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "_levels", ".", "append", "(", "label", ")", "\n", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "assert", "label", "==", "self", ".", "_levels", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugContainer._getkey": [[26, 30], ["isinstance", "str"], "methods", ["None"], ["", "", "def", "_getkey", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "isinstance", "(", "key", ",", "int", ")", "and", "not", "self", ".", "_levels", ":", "\n", "            ", "return", "key", "\n", "", "return", "'.'", ".", "join", "(", "[", "*", "self", ".", "_levels", ",", "str", "(", "key", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugContainer.__getitem__": [[31, 39], ["debug.DebugContainer._getkey", "collections.UserDict.__getitem__", "debug.DebugContainer.__class__", "debug.DebugContainer.__setitem__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugContainer._getkey", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugLogTable.__getitem__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__setitem__"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "key", "=", "self", ".", "_getkey", "(", "key", ")", "\n", "try", ":", "\n", "            ", "val", "=", "super", "(", ")", ".", "__getitem__", "(", "key", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "val", "=", "self", ".", "__class__", "(", ")", "\n", "self", ".", "__setitem__", "(", "key", ",", "val", ")", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugContainer.__setitem__": [[40, 44], ["isinstance", "super().__setitem__", "val.detach().cpu.detach().cpu.detach().cpu", "debug.DebugContainer._getkey", "val.detach().cpu.detach().cpu.detach"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__setitem__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugContainer._getkey"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "val", "=", "val", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "super", "(", ")", ".", "__setitem__", "(", "self", ".", "_getkey", "(", "key", ")", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugContainer.result": [[45, 48], ["super().__setitem__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__setitem__"], ["", "def", "result", "(", "self", ",", "val", ")", ":", "\n", "        ", "super", "(", ")", ".", "__setitem__", "(", "'.'", ".", "join", "(", "self", ".", "_levels", ")", ",", "val", ")", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug._NullDebug.__setitem__": [[51, 53], ["None"], "methods", ["None"], ["    ", "def", "__setitem__", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug._NullDebug.result": [[54, 56], ["None"], "methods", ["None"], ["", "def", "result", "(", "self", ",", "val", ")", ":", "\n", "        ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.Debuggable.debug": [[72, 74], ["debug.debugged"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.debugged"], ["    ", "def", "debug", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "debugged", "(", "self", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__init__": [[86, 90], ["dict.__init__", "debug.NestedDict.update"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update"], ["    ", "def", "__init__", "(", "self", ",", "dct", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "dct", ":", "\n", "            ", "self", ".", "update", "(", "dct", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict._split_key": [[91, 94], ["key.split"], "methods", ["None"], ["", "", "def", "_split_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "key", ",", "*", "nested_key", "=", "key", ".", "split", "(", "'.'", ",", "1", ")", "\n", "return", "(", "key", ",", "nested_key", "[", "0", "]", ")", "if", "nested_key", "else", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__getitem__": [[95, 105], ["debug.NestedDict._split_key", "dict.__getitem__", "debug.NestedDict", "super().__setitem__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict._split_key", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugLogTable.__getitem__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__setitem__"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "key", ",", "nested_key", "=", "self", ".", "_split_key", "(", "key", ")", "\n", "try", ":", "\n", "            ", "val", "=", "super", "(", ")", ".", "__getitem__", "(", "key", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "val", "=", "NestedDict", "(", ")", "\n", "super", "(", ")", ".", "__setitem__", "(", "key", ",", "val", ")", "\n", "", "if", "nested_key", ":", "\n", "            ", "return", "val", "[", "nested_key", "]", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__setitem__": [[106, 112], ["debug.NestedDict._split_key", "super().__setitem__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict._split_key", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "key", ",", "nested_key", "=", "self", ".", "_split_key", "(", "key", ")", "\n", "if", "nested_key", ":", "\n", "            ", "self", "[", "key", "]", "[", "nested_key", "]", "=", "val", "\n", "", "else", ":", "\n", "            ", "super", "(", ")", ".", "__setitem__", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__delitem__": [[113, 119], ["debug.NestedDict._split_key", "super().__delitem__", "dict.__getitem__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict._split_key", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__delitem__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugLogTable.__getitem__"], ["", "", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "key", ",", "nested_key", "=", "self", ".", "_split_key", "(", "key", ")", "\n", "if", "nested_key", ":", "\n", "            ", "del", "super", "(", ")", ".", "__getitem__", "(", "key", ")", "[", "nested_key", "]", "\n", "", "else", ":", "\n", "            ", "super", "(", ")", ".", "__delitem__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update": [[120, 131], ["other.items", "isinstance", "super().__getitem__().update", "super().__setitem__", "isinstance", "isinstance", "debug.NestedDict", "debug.NestedDict", "dict.__getitem__"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.update", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.NestedDict.__setitem__", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugLogTable.__getitem__"], ["", "", "def", "update", "(", "self", ",", "other", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "other", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "dict", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "self", "[", "key", "]", ",", "NestedDict", ")", ":", "\n", "                    ", "if", "isinstance", "(", "self", "[", "key", "]", ",", "dict", ")", ":", "\n", "                        ", "self", "[", "key", "]", "=", "NestedDict", "(", "self", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "                        ", "self", "[", "key", "]", "=", "NestedDict", "(", ")", "\n", "", "", "super", "(", ")", ".", "__getitem__", "(", "key", ")", ".", "update", "(", "val", ")", "\n", "", "else", ":", "\n", "                ", "super", "(", ")", ".", "__setitem__", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugLogTable.__init__": [[134, 136], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_data", "=", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugLogTable.__getitem__": [[137, 139], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.DebugLogTable.row": [[140, 147], ["Appender", "debug.DebugLogTable._data[].append"], "methods", ["None"], ["", "@", "property", "\n", "def", "row", "(", "self", ")", ":", "\n", "        ", "class", "Appender", ":", "\n", "            ", "def", "__setitem__", "(", "_", ",", "label", ",", "row", ")", ":", "# noqa: B902, N805", "\n", "                ", "self", ".", "_data", "[", "label", "]", ".", "append", "(", "row", ")", "\n", "\n", "", "", "return", "Appender", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.debugged": [[61, 69], ["functools.wraps", "debug.DebugContainer", "func"], "function", ["None"], ["def", "debugged", "(", "func", ",", "label", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "wrapped", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "debug", "=", "DebugContainer", "(", ")", "\n", "func", "(", "*", "args", ",", "**", "kwargs", ",", "debug", "=", "debug", ")", "\n", "return", "debug", "[", "label", "]", "\n", "\n", "", "return", "wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.debug.timer": [[76, 83], ["numpy.array", "time.time", "time.time"], "function", ["None"], ["", "", "@", "contextmanager", "\n", "def", "timer", "(", ")", ":", "\n", "    ", "now", "=", "np", ".", "array", "(", "time", ".", "time", "(", ")", ")", "\n", "try", ":", "\n", "        ", "yield", "now", "\n", "", "finally", ":", "\n", "        ", "now", "[", "...", "]", "=", "time", ".", "time", "(", ")", "-", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.r_backflow.Backflow.__init__": [[15, 26], ["torch.nn.Module.__init__", "r_backflow.Backflow.__init__.subnets_factory"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mol", ",", "embedding_dim", ",", "subnets_factory", "=", "None", ")", ":", "\n", "        ", "if", "not", "subnets_factory", ":", "\n", "\n", "            ", "def", "subnets_factory", "(", "embedding_dim", ")", ":", "\n", "                ", "return", "(", "\n", "get_log_dnn", "(", "embedding_dim", ",", "1", ",", "SSP", ",", "n_layers", "=", "3", ")", ",", "\n", "get_log_dnn", "(", "embedding_dim", ",", "len", "(", "mol", ")", ",", "SSP", ",", "n_layers", "=", "3", ")", ",", "\n", ")", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bf_elec", ",", "self", ".", "bf_nuc", "=", "subnets_factory", "(", "embedding_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.r_backflow.Backflow.forward": [[27, 39], ["deepqmc.torchext.idx_perm", "backflow_cutoff().prod", "r_backflow.backflow_cutoff", "diffs_nuc.norm", "r_backflow.Backflow.bf_elec().squeeze", "r_backflow.Backflow.bf_nuc", "r_backflow.Backflow.bf_elec"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.idx_perm", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.r_backflow.backflow_cutoff"], ["", "def", "forward", "(", "self", ",", "rs", ",", "xs", ")", ":", "\n", "        ", "batch_dim", ",", "n_elec", "=", "rs", ".", "shape", "[", ":", "2", "]", "\n", "i", ",", "j", "=", "idx_perm", "(", "n_elec", ",", "2", ",", "rs", ".", "device", ")", "\n", "diffs_elec", "=", "rs", "[", "...", ",", "i", ",", ":", "]", "-", "rs", "[", "...", ",", "j", ",", ":", "]", "\n", "bf_elec", "=", "(", "\n", "self", ".", "bf_elec", "(", "xs", "[", "...", ",", "i", ",", ":", "]", "*", "xs", "[", "...", ",", "j", ",", ":", "]", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "[", "...", ",", "None", "]", "\n", "*", "diffs_elec", "\n", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "diffs_nuc", "=", "rs", "[", "...", ",", ":", ",", "None", ",", ":", "]", "-", "self", ".", "mol", ".", "coords", "\n", "bf_nuc", "=", "(", "self", ".", "bf_nuc", "(", "xs", ")", "[", "...", ",", "None", "]", "*", "diffs_nuc", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "cutoff", "=", "backflow_cutoff", "(", "diffs_nuc", ".", "norm", "(", "dim", "=", "-", "1", ")", ")", ".", "prod", "(", "dim", "=", "-", "1", ")", "\n", "return", "rs", "+", "1e-4", "*", "cutoff", "[", "...", ",", "None", "]", "*", "(", "bf_elec", "+", "bf_nuc", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.r_backflow.backflow_cutoff": [[9, 12], ["torch.where", "r.new_ones"], "function", ["None"], ["def", "backflow_cutoff", "(", "r", ",", "L", "=", "0.5", ")", ":", "\n", "    ", "r", "=", "r", "/", "L", "\n", "return", "torch", ".", "where", "(", "r", "<", "L", ",", "r", "**", "2", "*", "(", "6", "-", "8", "*", "r", "+", "3", "*", "r", "**", "2", ")", ",", "r", ".", "new_ones", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.plot.plot_func": [[12, 45], ["int", "torch.linspace", "func", "plt.gca.plot", "plt.gca", "torch.cat", "x.double.numpy", "x.double.cpu().numpy", "y.detach().cpu().numpy.detach().cpu().numpy", "x.double.to", "x.double.double", "x.double.new_zeros", "x.double.cpu", "y.detach().cpu().numpy.detach().cpu", "y.detach().cpu().numpy.detach"], "function", ["None"], ["def", "plot_func", "(", "\n", "func", ",", "\n", "bounds", ",", "\n", "density", "=", "0.02", ",", "\n", "x_line", "=", "False", ",", "\n", "is_torch", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "double", "=", "False", ",", "\n", "ax", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    ", "if", "not", "ax", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "", "n_pts", "=", "int", "(", "(", "bounds", "[", "1", "]", "-", "bounds", "[", "0", "]", ")", "/", "density", ")", "\n", "x", "=", "torch", ".", "linspace", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ",", "n_pts", ")", "\n", "if", "x_line", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", "None", "]", ",", "x", ".", "new_zeros", "(", "(", "n_pts", ",", "2", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "not", "is_torch", ":", "\n", "        ", "x", "=", "x", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "device", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "", "if", "double", ":", "\n", "            ", "x", "=", "x", ".", "double", "(", ")", "\n", "", "", "y", "=", "func", "(", "x", ")", "\n", "if", "is_torch", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y", "=", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "x_line", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", "0", "]", "\n", "", "return", "ax", ".", "plot", "(", "x", ",", "y", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.plot.plot_func_2d": [[47, 72], ["analysis.get_flat_mesh", "plt.gca.set_aspect", "plt.gca", "int", "torch.cat", "getattr", "func().detach().view().cpu().numpy", "torch.cat.new_zeros", "z.cpu().numpy", "len", "func().detach().view().cpu", "z.cpu", "func().detach().view", "len", "func().detach", "func"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.get_flat_mesh"], ["", "def", "plot_func_2d", "(", "\n", "func", ",", "\n", "bounds", ",", "\n", "density", "=", "0.02", ",", "\n", "xy_plane", "=", "False", ",", "\n", "device", "=", "None", ",", "\n", "ax", "=", "None", ",", "\n", "plot", "=", "'contour'", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    ", "if", "not", "ax", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "", "ns_pts", "=", "[", "int", "(", "(", "bs", "[", "1", "]", "-", "bs", "[", "0", "]", ")", "/", "density", ")", "for", "bs", "in", "bounds", "]", "\n", "xy", ",", "x_y", "=", "get_flat_mesh", "(", "bounds", ",", "ns_pts", ",", "device", "=", "device", ")", "\n", "if", "xy_plane", ":", "\n", "        ", "xy", "=", "torch", ".", "cat", "(", "[", "xy", ",", "xy", ".", "new_zeros", "(", "len", "(", "xy", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "res", "=", "getattr", "(", "ax", ",", "plot", ")", "(", "\n", "*", "(", "z", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "z", "in", "x_y", ")", ",", "\n", "func", "(", "xy", ")", ".", "detach", "(", ")", ".", "view", "(", "len", "(", "x_y", "[", "0", "]", ")", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "T", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "ax", ".", "set_aspect", "(", "1", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.plot.rs_mesh": [[78, 84], ["analysis.get_flat_mesh", "cut.repeat", "cut.repeat.view", "cut.flatten", "torch.randn", "len"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.get_flat_mesh"], ["def", "rs_mesh", "(", "n_electrons", ",", "dims", ",", "bounds", ",", "steps", ",", "cut", "=", "None", ")", ":", "\n", "    ", "flat_mesh", ",", "_", "=", "get_flat_mesh", "(", "bounds", ",", "steps", ")", "\n", "cut", "=", "cut", ".", "flatten", "(", ")", "if", "cut", "is", "not", "None", "else", "torch", ".", "randn", "(", "3", "*", "n_electrons", ")", "\n", "rs", "=", "cut", ".", "repeat", "(", "len", "(", "flat_mesh", ")", ",", "1", ")", "\n", "rs", "[", ":", ",", "dims", "]", "=", "flat_mesh", "\n", "return", "rs", ".", "view", "(", "*", "steps", ",", "n_electrons", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.plot.extract_nodes": [[86, 96], ["torch.no_grad", "x.view", "torch.nn.functional.conv2d", "wf", "torch.ones", "torch.nn.functional.conv3d", "mesh.flatten", "torch.ones"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_nodes", "(", "wf", ",", "mesh", ",", "dim", ")", ":", "\n", "    ", "assert", "dim", "in", "[", "2", ",", "3", "]", "\n", "steps", "=", "mesh", ".", "shape", "[", ":", "-", "2", "]", "\n", "psis", ",", "signs", "=", "(", "x", ".", "view", "(", "1", ",", "1", ",", "*", "steps", ")", "for", "x", "in", "wf", "(", "mesh", ".", "flatten", "(", "end_dim", "=", "-", "3", ")", ")", ")", "\n", "if", "dim", "==", "2", ":", "\n", "        ", "surf", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "signs", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "2", ",", "2", ")", ")", "\n", "", "elif", "dim", "==", "3", ":", "\n", "        ", "surf", "=", "torch", ".", "nn", ".", "functional", ".", "conv3d", "(", "signs", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "2", ",", "2", ",", "2", ")", ")", "\n", "", "return", "surf", "[", "0", ",", "0", "]", ",", "psis", ",", "signs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.plot.plot_nodal_surface": [[98, 155], ["int", "plot.rs_mesh", "plot.extract_nodes", "[].t", "fig.add_trace", "all", "zip", "len", "torch.tensor", "torch.tensor", "bounds.repeat", "steps.repeat", "make_subplots", "bounds.tolist", "steps.tolist", "Isosurface", "enumerate", "ri.unsqueeze().numpy", "fig.add_scatter3d", "len", "len", "deepqmc.sampling.rand_from_mol", "sum", "analysis.get_flat_mesh", "surf.flatten", "torch.tensor", "rs_mesh.flatten", "ri.unsqueeze().numpy", "fig.add_scatter3d", "ri.unsqueeze", "bounds.tolist", "torch.tensor", "ri.unsqueeze", "zi.item"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.plot.rs_mesh", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.plot.extract_nodes", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.rand_from_mol", "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.analysis.get_flat_mesh"], ["", "def", "plot_nodal_surface", "(", "\n", "wf", ",", "\n", "mol", ",", "\n", "dimensions", ",", "\n", "bounds", ",", "\n", "steps", ",", "\n", "cut", "=", "None", ",", "\n", "fig", "=", "None", ",", "\n", "plot_kwargs", "=", "None", ",", "\n", ")", ":", "\n", "    ", "from", "plotly", ".", "graph_objects", "import", "Isosurface", "\n", "from", "plotly", ".", "subplots", "import", "make_subplots", "\n", "\n", "assert", "len", "(", "dimensions", ")", "==", "3", "\n", "bounds", ",", "steps", "=", "torch", ".", "tensor", "(", "bounds", ")", ",", "torch", ".", "tensor", "(", "steps", ")", "\n", "bounds", "=", "bounds", ".", "repeat", "(", "3", ",", "1", ")", "if", "len", "(", "bounds", ".", "shape", ")", "==", "1", "else", "bounds", "\n", "steps", "=", "steps", ".", "repeat", "(", "3", ")", "if", "not", "len", "(", "steps", ".", "shape", ")", "else", "steps", "\n", "cut", "=", "rand_from_mol", "(", "mol", ",", "1", ")", "[", "0", "]", "if", "cut", "is", "None", "else", "cut", "\n", "fig", "=", "fig", "or", "make_subplots", "(", ")", "\n", "plot_kwargs", "=", "{", "\n", "'isomin'", ":", "0", ",", "\n", "'isomax'", ":", "0", ",", "\n", "'colorscale'", ":", "'oranges'", ",", "\n", "'surface_count'", ":", "1", ",", "\n", "'opacity'", ":", "0.4", ",", "\n", "**", "(", "plot_kwargs", "or", "{", "}", ")", ",", "\n", "}", "\n", "n_el", "=", "int", "(", "sum", "(", "mol", ".", "charges", ")", "-", "mol", ".", "charge", ")", "\n", "mesh", "=", "rs_mesh", "(", "n_el", ",", "dimensions", ",", "bounds", ".", "tolist", "(", ")", ",", "steps", ".", "tolist", "(", ")", ",", "cut", ")", "\n", "surf", ",", "_", ",", "_", "=", "extract_nodes", "(", "wf", ",", "mesh", ",", "3", ")", "\n", "x", ",", "y", ",", "z", "=", "get_flat_mesh", "(", "bounds", ".", "tolist", "(", ")", ",", "(", "steps", "-", "1", ")", ".", "tolist", "(", ")", ")", "[", "0", "]", ".", "t", "(", ")", "\n", "fig", ".", "add_trace", "(", "\n", "Isosurface", "(", "x", "=", "x", ",", "y", "=", "y", ",", "z", "=", "z", ",", "value", "=", "surf", ".", "flatten", "(", ")", ",", "showscale", "=", "False", ",", "**", "plot_kwargs", ")", "\n", ")", "\n", "if", "all", "(", "torch", ".", "tensor", "(", "dimensions", ")", "//", "3", "==", "dimensions", "[", "0", "]", "//", "3", ")", ":", "\n", "        ", "for", "i", ",", "ri", "in", "enumerate", "(", "mesh", ".", "flatten", "(", "end_dim", "=", "-", "3", ")", "[", "0", "]", ")", ":", "\n", "            ", "if", "i", "not", "in", "torch", ".", "tensor", "(", "dimensions", ")", "//", "3", ":", "\n", "                ", "x", ",", "y", ",", "z", "=", "ri", ".", "unsqueeze", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "fig", ".", "add_scatter3d", "(", "\n", "x", "=", "x", ",", "\n", "y", "=", "y", ",", "\n", "z", "=", "z", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "{", "'size'", ":", "4", "}", ",", "\n", "name", "=", "f'electron #{i+1}'", ",", "\n", ")", "\n", "", "", "", "for", "ri", ",", "zi", "in", "zip", "(", "mol", ".", "coords", ",", "mol", ".", "charges", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "ri", ".", "unsqueeze", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "fig", ".", "add_scatter3d", "(", "\n", "x", "=", "x", ",", "\n", "y", "=", "y", ",", "\n", "z", "=", "z", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "{", "'size'", ":", "zi", ".", "item", "(", ")", "+", "4", ",", "'color'", ":", "[", "-", "1", "]", ",", "'colorscale'", ":", "'greys'", "}", ",", "\n", "name", "=", "f'nucleus Z={zi}'", ",", "\n", ")", "\n", "", "return", "fig", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.grad.jacobian": [[6, 15], ["out.new_zeros", "torch.empty_like", "range", "out.numel", "inp.numel", "out.numel", "[].flatten", "torch.empty_like.zero_().flatten", "torch.empty_like.zero_", "torch.autograd.grad"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad"], ["def", "grad", "(", "xs", ",", "f", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "xs", "=", "xs", "if", "xs", ".", "requires_grad", "else", "xs", ".", "detach", "(", ")", ".", "requires_grad_", "(", ")", "\n", "ys", "=", "f", "(", "xs", ")", "\n", "(", "ys_g", ",", "*", "other", ")", "=", "ys", "if", "isinstance", "(", "ys", ",", "tuple", ")", "else", "(", "ys", ",", "(", ")", ")", "\n", "(", "grad_ys", ",", ")", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "ys_g", ",", "xs", ",", "torch", ".", "ones_like", "(", "ys_g", ")", ",", "create_graph", "=", "create_graph", "\n", ")", "\n", "if", "not", "create_graph", ":", "\n", "        ", "ys", "=", "(", "ys_g", ".", "detach", "(", ")", ",", "*", "other", ")", "if", "isinstance", "(", "ys", ",", "tuple", ")", "else", "ys", ".", "detach", "(", ")", "\n", "", "return", "grad_ys", ",", "ys", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.grad.numjacobian": [[17, 38], ["f", "f.new_zeros", "torch.empty_like", "range", "f.numel", "inp.numel", "f.flatten", "inp.numel", "range", "f().flatten", "out.new_zeros.new_tensor", "torch.empty_like.copy_().flatten", "f", "torch.empty_like.copy_"], "function", ["None"], ["\n", "", "def", "laplacian", "(", "xs", ",", "f", ",", "create_graph", "=", "False", ",", "keep_graph", "=", "None", ",", "return_grad", "=", "False", ")", ":", "\n", "    ", "xis", "=", "[", "xi", ".", "requires_grad_", "(", ")", "for", "xi", "in", "xs", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "t", "(", ")", "]", "\n", "xs_flat", "=", "torch", ".", "stack", "(", "xis", ",", "dim", "=", "1", ")", "\n", "ys", "=", "f", "(", "xs_flat", ".", "view_as", "(", "xs", ")", ")", "\n", "(", "ys_g", ",", "*", "other", ")", "=", "ys", "if", "isinstance", "(", "ys", ",", "tuple", ")", "else", "(", "ys", ",", "(", ")", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "ys_g", ")", "\n", "(", "dy_dxs", ",", ")", "=", "torch", ".", "autograd", ".", "grad", "(", "ys_g", ",", "xs_flat", ",", "ones", ",", "create_graph", "=", "True", ")", "\n", "lap_ys", "=", "sum", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "\n", "dy_dxi", ",", "xi", ",", "ones", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "create_graph", "\n", ")", "[", "0", "]", "\n", "for", "xi", ",", "dy_dxi", "in", "zip", "(", "xis", ",", "(", "dy_dxs", "[", "...", ",", "i", "]", "for", "i", "in", "range", "(", "len", "(", "xis", ")", ")", ")", ")", "\n", ")", "\n", "if", "not", "(", "create_graph", "if", "keep_graph", "is", "None", "else", "keep_graph", ")", ":", "\n", "        ", "ys", "=", "(", "ys_g", ".", "detach", "(", ")", ",", "*", "other", ")", "if", "isinstance", "(", "ys", ",", "tuple", ")", "else", "ys", ".", "detach", "(", ")", "\n", "", "result", "=", "lap_ys", ",", "ys", "\n", "if", "return_grad", ":", "\n", "        ", "result", "+=", "(", "dy_dxs", ".", "detach", "(", ")", ".", "view_as", "(", "xs", ")", ",", ")", "\n", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.grad.laplacian_fd": [[40, 73], ["torch.cat.detach().requires_grad_", "f", "torch.ones_like", "torch.autograd.grad", "torch.cat", "f.view", "isinstance", "torch.no_grad", "f", "isinstance", "torch.cat.detach", "torch.cat.flatten", "o.view", "isinstance", "f.detach", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "ys_g.detach", "ys_g.detach", "torch.eye().view", "torch.eye().view", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.grad.laplacian_stochastic": [[75, 92], ["torch.stack", "f", "torch.randn_like", "torch.autograd.grad", "torch.autograd.grad", "xi.requires_grad_", "torch.stack.view_as", "isinstance", "ys_g.sum", "xs.flatten().t", "isinstance", "f.detach", "dy_dxs.detach().view_as", "ys_g.detach", "xs.flatten", "dy_dxs.detach"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad"], []], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.memory.get_children": [[11, 24], ["UNKNWON_CLASSES.add", "type", "obj.items", "isinstance", "type", "obj.__dict__.items", "str", "type", "type", "enumerate"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items"], ["def", "get_children", "(", "obj", ")", ":", "\n", "    ", "if", "type", "(", "obj", ")", "in", "(", "dict", ",", "collections", ".", "defaultdict", ")", ":", "\n", "        ", "return", "obj", ".", "items", "(", ")", "\n", "", "if", "type", "(", "obj", ")", "is", "list", "or", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "        ", "return", "(", "(", "i", ",", "v", ")", "for", "i", ",", "v", "in", "enumerate", "(", "obj", ")", ")", "\n", "", "if", "type", "(", "obj", ")", "in", "(", "set", ",", "frozenset", ",", "collections", ".", "deque", ")", ":", "\n", "        ", "return", "(", "(", "'?'", ",", "v", ")", "for", "v", "in", "obj", ")", "\n", "", "try", ":", "\n", "        ", "return", "obj", ".", "__dict__", ".", "items", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "pass", "\n", "", "UNKNWON_CLASSES", ".", "add", "(", "str", "(", "type", "(", "obj", ")", ")", ")", "\n", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.memory.find_large_cuda_tensors": [[26, 37], ["set", "collections.deque", "collections.deque.append", "set.add", "collections.deque.extend", "collections.deque.pop", "collections.deque.popleft", "id", "torch.is_tensor", "print", "n.numel", "type", "memory.get_children", "id"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.extra.memory.get_children"], ["", "def", "find_large_cuda_tensors", "(", "obj", ",", "depth", "=", "False", ",", "threshold", "=", "1e6", ")", ":", "\n", "    ", "visited", "=", "set", "(", ")", "\n", "queue", "=", "collections", ".", "deque", "(", ")", "\n", "queue", ".", "append", "(", "(", "obj", ",", "''", ")", ")", "\n", "while", "queue", ":", "\n", "        ", "n", ",", "addr", "=", "queue", ".", "pop", "(", ")", "if", "depth", "else", "queue", ".", "popleft", "(", ")", "\n", "visited", ".", "add", "(", "id", "(", "n", ")", ")", "\n", "if", "torch", ".", "is_tensor", "(", "n", ")", "and", "n", ".", "is_cuda", "and", "n", ".", "numel", "(", ")", ">", "threshold", ":", "\n", "            ", "print", "(", "addr", ",", "type", "(", "n", ")", ",", "n", ".", "shape", ")", "\n", "", "queue", ".", "extend", "(", "\n", "(", "v", ",", "f'{addr}.{k}'", ")", "for", "k", ",", "v", "in", "get_children", "(", "n", ")", "if", "id", "(", "v", ")", "not", "in", "visited", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_regression.mol": [[11, 14], ["deepqmc.Molecule.from_name"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.from_name"], ["@", "pytest", ".", "fixture", "\n", "def", "mol", "(", ")", ":", "\n", "    ", "return", "Molecule", ".", "from_name", "(", "'LiH'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_regression.rs": [[16, 20], ["torch.manual_seed", "deepqmc.sampling.rand_from_mol", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.rand_from_mol"], ["", "@", "pytest", ".", "fixture", "\n", "def", "rs", "(", "mol", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "return", "rand_from_mol", "(", "mol", ",", "1", ",", "torch", ".", "tensor", "(", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_regression.test": [[22, 91], ["pytest.mark.parametrize", "deepqmc.app.ansatz_from_name", "torch.manual_seed", "sorted", "deepqmc.app.ansatz_from_name.", "psi.backward", "torch.stack().norm", "num_regression.check", "k.replace().replace().replace().replace().replace", "deepqmc.app.ansatz_from_name.named_parameters", "kwargs.items", "pathlib.Path", "str", "torch.nn.init.normal_", "torch.stack", "psi.detach", "sign.detach", "k.replace().replace().replace().replace", "isinstance", "p.grad.norm", "k.replace().replace().replace", "deepqmc.app.ansatz_from_name.parameters", "x.items", "k.replace().replace", "k.replace"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.app.ansatz_from_name", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetDoubleBackward.backward", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.gto.GTOBasis.items"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "'ansatz,kwargs'", ",", "\n", "[", "\n", "(", "'paulinet'", ",", "{", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'cas'", ":", "(", "2", ",", "2", ")", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'cas'", ":", "(", "2", ",", "2", ")", ",", "'conf_cutoff'", ":", "0.7", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'cas'", ":", "(", "2", ",", "2", ")", ",", "'conf_limit'", ":", "2", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'cas'", ":", "(", "2", ",", "2", ")", ",", "'backflow_type'", ":", "'det'", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'basis'", ":", "'6-31g'", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'init_weights'", ":", "False", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'freeze_mos'", ":", "False", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'cusp_correction'", ":", "False", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'cusp_electrons'", ":", "False", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'backflow_channels'", ":", "2", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'backflow_transform'", ":", "'add'", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'backflow_transform'", ":", "'both'", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'rc_scaling'", ":", "5", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'cusp_alpha'", ":", "1.0", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'freeze_embed'", ":", "True", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.embedding_dim'", ":", "64", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.jastrow'", ":", "'mean-field'", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.backflow'", ":", "'mean-field'", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.jastrow_kwargs.n_layers'", ":", "2", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.jastrow_kwargs.sum_first'", ":", "False", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.backflow_kwargs.n_layers'", ":", "2", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.schnet_kwargs.dist_feat_dim'", ":", "16", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.schnet_kwargs.dist_feat_cutoff'", ":", "3.0", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.schnet_kwargs.n_interactions'", ":", "2", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.schnet_kwargs.kernel_dim'", ":", "32", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.subnet_kwargs.n_layers_w'", ":", "3", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.subnet_kwargs.n_layers_h'", ":", "2", "}", ")", ",", "\n", "(", "'paulinet'", ",", "{", "'omni_kwargs.omni_schnet.subnet_kwargs.n_layers_g'", ":", "2", "}", ")", ",", "\n", "]", ",", "\n", "ids", "=", "lambda", "x", ":", "','", ".", "join", "(", "f'{k}={v}'", "for", "k", ",", "v", "in", "x", ".", "items", "(", ")", ")", "\n", "if", "isinstance", "(", "x", ",", "dict", ")", "\n", "else", "x", ",", "\n", ")", "\n", "def", "test", "(", "ansatz", ",", "kwargs", ",", "mol", ",", "rs", ",", "num_regression", ",", "request", ")", ":", "\n", "    ", "kwargs", "=", "{", "\n", "k", ".", "replace", "(", "'omni_kwargs.omni_schnet'", ",", "'omni_factory'", ")", "\n", ".", "replace", "(", "'schnet_kwargs'", ",", "'schnet_factory'", ")", "\n", ".", "replace", "(", "'jastrow_kwargs'", ",", "'jastrow_factory'", ")", "\n", ".", "replace", "(", "'backflow_kwargs'", ",", "'backflow_factory'", ")", "\n", ".", "replace", "(", "'subnet_kwargs'", ",", "'schnet_factory.subnet_metafactory'", ")", ":", "v", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "\n", "}", "\n", "workdir", "=", "(", "\n", "Path", "(", "request", ".", "fspath", ".", "dirname", ")", "\n", "/", "'workdirs'", "\n", "/", "(", "\n", "'with-cas'", "\n", "if", "'cas'", "in", "kwargs", "\n", "else", "kwargs", "[", "'basis'", "]", "\n", "if", "'basis'", "in", "kwargs", "\n", "else", "'default'", "\n", ")", "\n", ")", "\n", "wf", "=", "ansatz_from_name", "(", "ansatz", ",", "mol", ",", "workdir", "=", "str", "(", "workdir", ")", ",", "**", "kwargs", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "for", "_", ",", "p", "in", "sorted", "(", "wf", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "p", ",", "std", "=", "1e-1", ")", "\n", "", "", "(", "psi", ",", ")", ",", "(", "sign", ",", ")", "=", "wf", "(", "rs", ")", "\n", "psi", ".", "backward", "(", ")", "\n", "grad_norm", "=", "torch", ".", "stack", "(", "\n", "[", "p", ".", "grad", ".", "norm", "(", ")", "for", "p", "in", "wf", ".", "parameters", "(", ")", "if", "p", ".", "grad", "is", "not", "None", "]", "\n", ")", ".", "norm", "(", ")", "\n", "num_regression", ".", "check", "(", "\n", "{", "'psi'", ":", "psi", ".", "detach", "(", ")", ",", "'sign'", ":", "sign", ".", "detach", "(", ")", ",", "'grad_norm'", ":", "grad_norm", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__": [[33, 47], ["torch.nn.Module.__init__", "deepqmc.wf.paulinet.distbasis.DistanceBasis", "deepqmc.wf.paulinet.schnet.ElectronicSchNet", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_atoms", ",", "n_up", ",", "n_down", ",", "n_orbitals", ",", "n_backflows", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dist_basis", "=", "DistanceBasis", "(", "4", ",", "envelope", "=", "'nocusp'", ")", "\n", "self", ".", "schnet", "=", "ElectronicSchNet", "(", "\n", "n_up", ",", "\n", "n_down", ",", "\n", "n_atoms", ",", "\n", "dist_feat_dim", "=", "4", ",", "\n", "n_interactions", "=", "2", ",", "\n", "kernel_dim", "=", "8", ",", "\n", "embedding_dim", "=", "16", ",", "\n", "version", "=", "1", ",", "\n", ")", "\n", "self", ".", "orbital", "=", "nn", ".", "Linear", "(", "16", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.OmniNet.forward": [[48, 53], ["deepqmc.physics.pairwise_distance", "deepqmc.physics.pairwise_distance", "test_wf.OmniNet.schnet", "test_wf.OmniNet.orbital().squeeze().sum", "test_wf.OmniNet.orbital().squeeze", "test_wf.OmniNet.orbital"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_distance", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_distance"], ["", "def", "forward", "(", "self", ",", "rs", ",", "coords", ")", ":", "\n", "        ", "dists_elec", "=", "pairwise_distance", "(", "rs", ",", "rs", ")", "\n", "dists_nuc", "=", "pairwise_distance", "(", "rs", ",", "coords", ")", "\n", "xs", ",", "_", "=", "self", ".", "schnet", "(", "dists_elec", ",", "dists_nuc", ")", "\n", "return", "self", ".", "orbital", "(", "xs", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.assert_alltrue_named": [[14, 17], ["dict"], "function", ["None"], ["def", "assert_alltrue_named", "(", "items", ")", ":", "\n", "    ", "dct", "=", "dict", "(", "items", ")", "\n", "assert", "dct", "==", "{", "k", ":", "True", "for", "k", "in", "dct", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.rs": [[19, 22], ["torch.randn"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "\n", "def", "rs", "(", ")", ":", "\n", "    ", "return", "torch", ".", "randn", "(", "5", ",", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.mol": [[24, 30], ["deepqmc.Molecule.from_name"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.from_name"], ["", "@", "pytest", ".", "fixture", "\n", "def", "mol", "(", ")", ":", "\n", "    ", "mol", "=", "Molecule", ".", "from_name", "(", "'H2'", ")", "\n", "mol", ".", "charge", "=", "-", "1", "\n", "mol", ".", "spin", "=", "3", "\n", "return", "mol", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf": [[55, 68], ["pytest.fixture", "ansatz.entry", "test_wf.rs", "test_wf.rs", "test_wf.rs", "test_wf.rs", "test_wf.rs"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.rs", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.rs", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.rs", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.rs", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.rs"], ["", "", "@", "pytest", ".", "fixture", "(", "\n", "params", "=", "[", "\n", "(", "\n", "'paulinet'", ",", "\n", "{", "'omni_factory'", ":", "OmniNet", ",", "'freeze_mos'", ":", "False", ",", "'use_sloglindet'", ":", "False", "}", ",", "\n", ")", "\n", "]", ",", "\n", "ids", "=", "[", "'PauliNet(small)'", "]", ",", "\n", ")", "\n", "def", "wf", "(", "request", ",", "mol", ")", ":", "\n", "    ", "ansatz", ",", "kwargs", "=", "request", ".", "param", "\n", "ansatz", "=", "ANSATZES", "[", "ansatz", "]", "\n", "return", "ansatz", ".", "entry", "(", "mol", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.test_batching": [[70, 74], ["test_wf.assert_alltrue_named", "torch.allclose", "enumerate", "test_wf.wf", "test_wf.wf"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.assert_alltrue_named", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf"], ["", "def", "test_batching", "(", "wf", ",", "rs", ")", ":", "\n", "    ", "assert_alltrue_named", "(", "\n", "(", "name", ",", "torch", ".", "allclose", "(", "wf", "(", "rs", "[", ":", "2", "]", ")", "[", "i", "]", ",", "wf", "(", "rs", ")", "[", "i", "]", "[", ":", "2", "]", ",", "atol", "=", "0", ")", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "[", "'log(abs(psi))'", ",", "'sign(psi)'", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.test_antisymmetry": [[77, 81], ["test_wf.assert_alltrue_named", "torch.allclose", "enumerate", "test_wf.wf", "test_wf.wf"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.assert_alltrue_named", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf"], ["", "def", "test_antisymmetry", "(", "wf", ",", "rs", ")", ":", "\n", "    ", "assert_alltrue_named", "(", "\n", "(", "name", ",", "torch", ".", "allclose", "(", "wf", "(", "rs", "[", ":", ",", "[", "0", ",", "2", ",", "1", "]", "]", ")", "[", "i", "]", ",", "(", "-", "1", ")", "**", "i", "*", "wf", "(", "rs", ")", "[", "i", "]", ")", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "[", "'log(abs(psi))'", ",", "'sign(psi)'", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.test_antisymmetry_trained": [[84, 92], ["deepqmc.sampling.LangevinSampler", "deepqmc.fit.fit_wf", "test_wf.assert_alltrue_named", "torch.rand_like", "deepqmc.fit.LossEnergy", "torch.optim.Adam", "range", "wf.parameters", "torch.allclose", "enumerate", "test_wf.wf", "test_wf.wf"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.fit.fit_wf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.assert_alltrue_named", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf"], ["", "def", "test_antisymmetry_trained", "(", "wf", ",", "rs", ")", ":", "\n", "    ", "sampler", "=", "LangevinSampler", "(", "wf", ",", "torch", ".", "rand_like", "(", "rs", ")", ",", "tau", "=", "0.1", ")", "\n", "fit_wf", "(", "\n", "wf", ",", "LossEnergy", "(", ")", ",", "torch", ".", "optim", ".", "Adam", "(", "wf", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", ",", "sampler", ",", "range", "(", "10", ")", "\n", ")", "\n", "assert_alltrue_named", "(", "\n", "(", "name", ",", "torch", ".", "allclose", "(", "wf", "(", "rs", "[", ":", ",", "[", "0", ",", "2", ",", "1", "]", "]", ")", "[", "i", "]", ",", "(", "-", "1", ")", "**", "i", "*", "wf", "(", "rs", ")", "[", "i", "]", ")", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "[", "'log(abs(psi))'", ",", "'sign(psi)'", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.test_backprop": [[95, 103], ["[].sum().backward", "test_wf.assert_alltrue_named", "test_wf.assert_alltrue_named", "[].sum", "wf.named_parameters", "wf.named_parameters", "test_wf.wf", "param.grad.sum().abs().item", "param.grad.sum().abs", "param.grad.sum"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetDoubleBackward.backward", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.assert_alltrue_named", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.assert_alltrue_named", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf"], ["", "def", "test_backprop", "(", "wf", ",", "rs", ")", ":", "\n", "    ", "wf", "(", "rs", ")", "[", "0", "]", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "assert_alltrue_named", "(", "\n", "(", "name", ",", "param", ".", "grad", "is", "not", "None", ")", "for", "name", ",", "param", "in", "wf", ".", "named_parameters", "(", ")", "\n", ")", "\n", "assert_alltrue_named", "(", "\n", "(", "name", ",", "(", "param", ".", "grad", ".", "sum", "(", ")", ".", "abs", "(", ")", ".", "item", "(", ")", ">", "0", "or", "name", "==", "'mo.cusp_corr.shifts'", ")", ")", "\n", "for", "name", ",", "param", "in", "wf", ".", "named_parameters", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.test_grad": [[107, 111], ["rs.requires_grad_", "[].sum().backward", "rs.grad.sum().abs().item", "[].sum", "rs.grad.sum().abs", "test_wf.wf", "rs.grad.sum"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetDoubleBackward.backward", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.wf"], ["", "def", "test_grad", "(", "wf", ",", "rs", ")", ":", "\n", "    ", "rs", ".", "requires_grad_", "(", ")", "\n", "wf", "(", "rs", ")", "[", "0", "]", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "assert", "rs", ".", "grad", ".", "sum", "(", ")", ".", "abs", "(", ")", ".", "item", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.test_loc_ene_backprop": [[113, 120], ["rs.requires_grad_", "deepqmc.physics.local_energy", "Es_loc.sum().backward", "test_wf.assert_alltrue_named", "Es_loc.sum", "wf.named_parameters", "param.grad.sum().abs().item", "param.grad.sum().abs", "param.grad.sum"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.local_energy", "home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.bdet.BDetDoubleBackward.backward", "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_wf.assert_alltrue_named"], ["", "def", "test_loc_ene_backprop", "(", "wf", ",", "rs", ")", ":", "\n", "    ", "rs", ".", "requires_grad_", "(", ")", "\n", "Es_loc", ",", "_", ",", "_", "=", "local_energy", "(", "rs", ",", "wf", ",", "create_graph", "=", "True", ")", "\n", "Es_loc", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "assert_alltrue_named", "(", "\n", "(", "name", ",", "(", "param", ".", "grad", ".", "sum", "(", ")", ".", "abs", "(", ")", ".", "item", "(", ")", ">", "0", "or", "name", "==", "'mo.cusp_corr.shifts'", ")", ")", "\n", "for", "name", ",", "param", "in", "wf", ".", "named_parameters", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_cli.test_defaults": [[20, 24], ["toml.loads", "runner.isolated_filesystem", "runner.invoke"], "function", ["None"], ["def", "test_defaults", "(", ")", ":", "\n", "    ", "with", "runner", ".", "isolated_filesystem", "(", ")", ":", "\n", "        ", "result", "=", "runner", ".", "invoke", "(", "cli", ",", "[", "'defaults'", "]", ",", "catch_exceptions", "=", "False", ")", "\n", "", "assert", "toml", ".", "loads", "(", "result", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_cli.test_train": [[26, 37], ["any", "runner.isolated_filesystem", "runner.invoke", "os.listdir", "open", "toml.dump", "f.startswith"], "function", ["None"], ["", "def", "test_train", "(", ")", ":", "\n", "    ", "with", "runner", ".", "isolated_filesystem", "(", ")", ":", "\n", "        ", "with", "open", "(", "'param.toml'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "toml", ".", "dump", "(", "PARAM_H2", ",", "f", ")", "\n", "", "result", "=", "runner", ".", "invoke", "(", "cli", ",", "[", "'train'", ",", "'.'", ",", "'--no-cuda'", "]", ",", "catch_exceptions", "=", "False", ")", "\n", "files", "=", "os", ".", "listdir", "(", ")", "\n", "", "assert", "'fit.h5'", "in", "files", "\n", "assert", "'pyscf.chk'", "in", "files", "\n", "assert", "'chkpts'", "in", "files", "\n", "assert", "any", "(", "f", ".", "startswith", "(", "'events.out.tfevents.'", ")", "for", "f", "in", "files", ")", "\n", "assert", "'converged SCF energy'", "in", "result", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_cli.test_pyscf_reload": [[39, 49], ["runner.isolated_filesystem", "runner.invoke", "runner.invoke", "open", "toml.dump"], "function", ["None"], ["", "def", "test_pyscf_reload", "(", ")", ":", "\n", "    ", "with", "runner", ".", "isolated_filesystem", "(", ")", ":", "\n", "        ", "with", "open", "(", "'param.toml'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "toml", ".", "dump", "(", "{", "**", "PARAM_H2", ",", "'paulinet_kwargs'", ":", "{", "'cas'", ":", "[", "2", ",", "2", "]", "}", "}", ",", "f", ")", "\n", "", "result", "=", "runner", ".", "invoke", "(", "cli", ",", "[", "'train'", ",", "'.'", ",", "'--no-cuda'", "]", ",", "catch_exceptions", "=", "False", ")", "\n", "result_repeated", "=", "runner", ".", "invoke", "(", "\n", "cli", ",", "[", "'train'", ",", "'.'", ",", "'--no-cuda'", "]", ",", "catch_exceptions", "=", "False", "\n", ")", "\n", "", "assert", "'converged SCF energy'", "in", "result", ".", "output", "\n", "assert", "not", "result_repeated", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_cli.test_evaluate": [[51, 63], ["any", "runner.isolated_filesystem", "runner.invoke", "os.listdir", "open", "toml.dump", "f.startswith"], "function", ["None"], ["", "def", "test_evaluate", "(", ")", ":", "\n", "    ", "with", "runner", ".", "isolated_filesystem", "(", ")", ":", "\n", "        ", "with", "open", "(", "'param.toml'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "toml", ".", "dump", "(", "PARAM_H2", ",", "f", ")", "\n", "", "result", "=", "runner", ".", "invoke", "(", "\n", "cli", ",", "[", "'evaluate'", ",", "'.'", ",", "'--no-cuda'", "]", ",", "catch_exceptions", "=", "False", "\n", ")", "\n", "files", "=", "os", ".", "listdir", "(", ")", "\n", "", "assert", "'sample.h5'", "in", "files", "\n", "assert", "'pyscf.chk'", "in", "files", "\n", "assert", "any", "(", "f", ".", "startswith", "(", "'events.out.tfevents.'", ")", "for", "f", "in", "files", ")", "\n", "assert", "'converged SCF energy'", "in", "result", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_cli.test_validity_check": [[65, 75], ["runner.isolated_filesystem", "open", "pytest.raises", "runner.invoke", "open", "toml.dump", "pytest.raises", "runner.invoke"], "function", ["None"], ["", "def", "test_validity_check", "(", ")", ":", "\n", "    ", "with", "runner", ".", "isolated_filesystem", "(", ")", ":", "\n", "        ", "with", "open", "(", "'param.toml'", ",", "'w'", ")", ":", "\n", "            ", "pass", "\n", "", "with", "pytest", ".", "raises", "(", "TomlError", ")", ":", "\n", "            ", "runner", ".", "invoke", "(", "cli", ",", "[", "'train'", ",", "'.'", ",", "'--no-cuda'", "]", ",", "catch_exceptions", "=", "False", ")", "\n", "", "with", "open", "(", "'param.toml'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "toml", ".", "dump", "(", "{", "**", "PARAM_H2", ",", "'foo'", ":", "'bar'", "}", ",", "f", ")", "\n", "", "with", "pytest", ".", "raises", "(", "TomlError", ")", ":", "\n", "            ", "runner", ".", "invoke", "(", "cli", ",", "[", "'train'", ",", "'.'", ",", "'--no-cuda'", "]", ",", "catch_exceptions", "=", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_app.test_train": [[7, 20], ["subprocess.run", "os.listdir", "any", "subprocess.run.stdout.decode", "f.startswith"], "function", ["None"], ["def", "test_train", "(", "tmpdir", ")", ":", "\n", "    ", "result", "=", "subprocess", ".", "run", "(", "\n", "[", "*", "ARGS", ",", "'task.n_steps=0'", ",", "'task.equilibrate=false'", "]", ",", "\n", "cwd", "=", "tmpdir", ",", "\n", "capture_output", "=", "True", ",", "\n", "check", "=", "True", ",", "\n", ")", "\n", "files", "=", "os", ".", "listdir", "(", "tmpdir", ")", "\n", "assert", "'fit.h5'", "in", "files", "\n", "assert", "'pyscf.chk'", "in", "files", "\n", "assert", "'chkpts'", "in", "files", "\n", "assert", "any", "(", "f", ".", "startswith", "(", "'events.out.tfevents.'", ")", "for", "f", "in", "files", ")", "\n", "assert", "'Initializing training'", "in", "result", ".", "stdout", ".", "decode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_app.test_evaluate": [[22, 42], ["subprocess.run", "os.listdir", "any", "subprocess.run.stdout.decode", "f.startswith"], "function", ["None"], ["", "def", "test_evaluate", "(", "tmpdir", ")", ":", "\n", "    ", "result", "=", "subprocess", ".", "run", "(", "\n", "[", "\n", "*", "ARGS", ",", "\n", "'task=evaluate'", ",", "\n", "'fromdir=null'", ",", "\n", "'state=null'", ",", "\n", "'ansatz=paulinet'", ",", "\n", "'task.n_steps=0'", ",", "\n", "'task.sample_kwargs.equilibrate=false'", ",", "\n", "]", ",", "\n", "cwd", "=", "tmpdir", ",", "\n", "capture_output", "=", "True", ",", "\n", "check", "=", "True", ",", "\n", ")", "\n", "files", "=", "os", ".", "listdir", "(", "tmpdir", ")", "\n", "assert", "'sample.h5'", "in", "files", "\n", "assert", "'pyscf.chk'", "in", "files", "\n", "assert", "any", "(", "f", ".", "startswith", "(", "'events.out.tfevents.'", ")", "for", "f", "in", "files", ")", "\n", "assert", "'Moved to cpu'", "in", "result", ".", "stdout", ".", "decode", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_paulinet.mol": [[13, 16], ["pytest.fixture", "pyscf.gto.M"], "function", ["None"], ["@", "pytest", ".", "fixture", "(", "scope", "=", "'module'", ")", "\n", "def", "mol", "(", ")", ":", "\n", "    ", "return", "gto", ".", "M", "(", "atom", "=", "'H 0 0 0'", ",", "basis", "=", "'cc-pvqz'", ",", "cart", "=", "True", ",", "spin", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_paulinet.grids": [[18, 21], ["pytest.fixture", "pyscf.dft.gen_grid.Grids().build", "pyscf.dft.gen_grid.Grids"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", "scope", "=", "'module'", ")", "\n", "def", "grids", "(", "mol", ")", ":", "\n", "    ", "return", "dft", ".", "gen_grid", ".", "Grids", "(", "mol", ")", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_paulinet.mf": [[23, 29], ["pytest.fixture", "pyscf.scf.RHF", "scf.RHF.kernel"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", "scope", "=", "'module'", ")", "\n", "def", "mf", "(", "mol", ")", ":", "\n", "    ", "mf", "=", "scf", ".", "RHF", "(", "mol", ")", "\n", "mf", ".", "verbose", "=", "0", "\n", "mf", ".", "kernel", "(", ")", "\n", "return", "mf", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_paulinet.gtowf": [[31, 35], ["deepqmc.wf.PauliNet.from_pyscf().double", "deepqmc.wf.PauliNet.from_pyscf"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.from_pyscf"], ["", "@", "pytest", ".", "fixture", "\n", "def", "gtowf", "(", "mf", ")", ":", "\n", "    ", "return", "PauliNet", ".", "from_pyscf", "(", "\n", "mf", ",", "omni_factory", "=", "None", ",", "cusp_correction", "=", "False", ",", "cusp_electrons", "=", "False", "\n", ")", ".", "double", "(", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_paulinet.test_eval_ao_normed": [[38, 41], ["numpy.max", "numpy.abs", "deepqmc.wf.paulinet.pyscfext.eval_ao_normed"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.pyscfext.eval_ao_normed"], ["", "def", "test_eval_ao_normed", "(", "mol", ",", "grids", ")", ":", "\n", "    ", "ovlps", "=", "(", "eval_ao_normed", "(", "mol", ",", "grids", ".", "coords", ")", "**", "2", "*", "grids", ".", "weights", "[", ":", ",", "None", "]", ")", ".", "sum", "(", "0", ")", "\n", "assert", "np", ".", "max", "(", "np", ".", "abs", "(", "ovlps", "-", "1", ")", ")", "<", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_paulinet.test_torch_gto_aos": [[43, 49], ["map", "torch.testing.assert_allclose", "torch.ones_like", "gtowf.mo.basis", "deepqmc.physics.pairwise_diffs"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.physics.pairwise_diffs"], ["", "def", "test_torch_gto_aos", "(", "gtowf", ",", "grids", ")", ":", "\n", "    ", "coords", ",", "weights", "=", "map", "(", "torch", ".", "tensor", ",", "(", "grids", ".", "coords", ",", "grids", ".", "weights", ")", ")", "\n", "ovlps", "=", "(", "\n", "gtowf", ".", "mo", ".", "basis", "(", "pairwise_diffs", "(", "coords", ",", "gtowf", ".", "mol", ".", "coords", ")", ")", "**", "2", "*", "weights", "[", ":", ",", "None", "]", "\n", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "assert_allclose", "(", "ovlps", ",", "torch", ".", "ones_like", "(", "ovlps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_paulinet.test_torch_gto_density": [[51, 55], ["map", "n_elec.item", "pytest.approx", "torch.exp", "test_paulinet.gtowf"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_paulinet.gtowf"], ["", "def", "test_torch_gto_density", "(", "gtowf", ",", "grids", ")", ":", "\n", "    ", "coords", ",", "weights", "=", "map", "(", "torch", ".", "tensor", ",", "(", "grids", ".", "coords", ",", "grids", ".", "weights", ")", ")", "\n", "n_elec", "=", "(", "torch", ".", "exp", "(", "2", "*", "gtowf", "(", "coords", "[", ":", ",", "None", ",", ":", "]", ")", "[", "0", "]", ")", "*", "weights", ")", ".", "sum", "(", ")", "\n", "assert", "n_elec", ".", "item", "(", ")", "==", "approx", "(", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_train.test_simple_example": [[11, 71], ["pytest.mark.parametrize", "deepqmc.Molecule.from_name", "deepqmc.wf.PauliNet.from_hf", "deepqmc.train", "deepqmc.train", "deepqmc.evaluate", "deepqmc.evaluate"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.from_name", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.from_hf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.train.train", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.train.train", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.evaluate.evaluate", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.evaluate.evaluate"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'with_resampling'", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_simple_example", "(", "tmp_path", ",", "with_resampling", ")", ":", "\n", "    ", "mol", "=", "Molecule", ".", "from_name", "(", "'LiH'", ")", "\n", "net", "=", "PauliNet", ".", "from_hf", "(", "mol", ",", "cas", "=", "(", "4", ",", "2", ")", ",", "conf_limit", "=", "2", ")", "\n", "if", "with_resampling", ":", "\n", "        ", "resampling_kwargs", "=", "{", "\n", "'keep_walker_weights'", ":", "True", ",", "\n", "'resampling_frequency'", ":", "1", ",", "\n", "}", "\n", "", "else", ":", "\n", "        ", "resampling_kwargs", "=", "{", "}", "\n", "", "chkpts", "=", "[", "]", "\n", "train", "(", "\n", "net", ",", "\n", "n_steps", "=", "4", ",", "\n", "batch_size", "=", "5", ",", "\n", "save_every", "=", "2", ",", "\n", "epoch_size", "=", "3", ",", "\n", "equilibrate", "=", "1", ",", "\n", "chkpts", "=", "chkpts", ",", "\n", "workdir", "=", "tmp_path", ",", "\n", "fit_kwargs", "=", "{", "'subbatch_size'", ":", "5", "}", ",", "\n", "sampler_kwargs", "=", "{", "\n", "'sample_size'", ":", "15", ",", "\n", "'n_discard'", ":", "0", ",", "\n", "'n_decorrelate'", ":", "0", ",", "\n", "'n_first_certain'", ":", "0", ",", "\n", "**", "resampling_kwargs", ",", "\n", "}", ",", "\n", ")", "\n", "train", "(", "\n", "net", ",", "\n", "n_steps", "=", "1", ",", "\n", "batch_size", "=", "5", ",", "\n", "epoch_size", "=", "1", ",", "\n", "state", "=", "chkpts", "[", "-", "1", "]", "[", "1", "]", ",", "\n", "equilibrate", "=", "False", ",", "\n", "fit_kwargs", "=", "{", "'subbatch_size'", ":", "5", "}", ",", "\n", "sampler_kwargs", "=", "{", "\n", "'sample_size'", ":", "5", ",", "\n", "'n_discard'", ":", "0", ",", "\n", "'n_decorrelate'", ":", "0", ",", "\n", "'n_first_certain'", ":", "0", ",", "\n", "}", ",", "\n", ")", "\n", "evaluate", "(", "\n", "net", ",", "\n", "n_steps", "=", "1", ",", "\n", "sample_size", "=", "5", ",", "\n", "log_dict", "=", "{", "}", ",", "\n", "sample_kwargs", "=", "{", "'equilibrate'", ":", "1", ",", "'block_size'", ":", "1", "}", ",", "\n", "sampler_kwargs", "=", "{", "'n_decorrelate'", ":", "0", ",", "'n_first_certain'", ":", "0", "}", ",", "\n", ")", "\n", "evaluate", "(", "\n", "net", ",", "\n", "n_steps", "=", "1", ",", "\n", "workdir", "=", "tmp_path", ",", "\n", "sample_size", "=", "5", ",", "\n", "sample_kwargs", "=", "{", "'equilibrate'", ":", "False", ",", "'block_size'", ":", "1", "}", ",", "\n", "sampler_kwargs", "=", "{", "'n_decorrelate'", ":", "0", ",", "'n_first_certain'", ":", "0", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_train.test_invariance_to_subbatch_size": [[74, 114], ["deepqmc.Molecule.from_name", "deepqmc.wf.PauliNet.from_hf().cpu", "copy.deepcopy", "copy.deepcopy", "test_train.test_invariance_to_subbatch_size.get_total_gradient_norm"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.from_name"], ["", "def", "test_invariance_to_subbatch_size", "(", "tmp_path", ")", ":", "\n", "    ", "batch_size", "=", "1000", "\n", "\n", "# For determinism we work on CPU and compute the Hartree-Fock solution once.", "\n", "mol", "=", "Molecule", ".", "from_name", "(", "'LiH'", ")", "\n", "net", "=", "PauliNet", ".", "from_hf", "(", "mol", ",", "cas", "=", "(", "4", ",", "2", ")", ",", "conf_limit", "=", "2", ")", ".", "cpu", "(", ")", "\n", "\n", "state", "=", "copy", ".", "deepcopy", "(", "net", ".", "state_dict", "(", ")", ")", "\n", "params_orig", "=", "copy", ".", "deepcopy", "(", "list", "(", "net", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "def", "get_total_gradient_norm", "(", "subbatch_size", ":", "int", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "net", ".", "load_state_dict", "(", "state", ")", "\n", "\n", "train", "(", "\n", "net", ",", "\n", "n_steps", "=", "1", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "epoch_size", "=", "1", ",", "\n", "optimizer", "=", "'SGD'", ",", "# Loss scale variance would be hidden with Adam.", "\n", "equilibrate", "=", "False", ",", "\n", "workdir", "=", "tmp_path", ",", "\n", "fit_kwargs", "=", "{", "'subbatch_size'", ":", "subbatch_size", "}", ",", "\n", "sampler_kwargs", "=", "{", "\n", "'sample_size'", ":", "batch_size", ",", "\n", "'n_discard'", ":", "0", ",", "\n", "'n_decorrelate'", ":", "0", ",", "\n", "'n_first_certain'", ":", "0", ",", "\n", "}", ",", "\n", ")", "\n", "\n", "params", "=", "list", "(", "net", ".", "parameters", "(", ")", ")", "\n", "return", "sum", "(", "(", "p1", "-", "p2", ")", ".", "norm", "(", ")", "for", "p1", ",", "p2", "in", "zip", "(", "params", ",", "params_orig", ")", ")", "\n", "\n", "", "grad_norm_1", "=", "get_total_gradient_norm", "(", "subbatch_size", "=", "50", ")", "\n", "grad_norm_2", "=", "get_total_gradient_norm", "(", "subbatch_size", "=", "1000", ")", "\n", "\n", "# We accept relative variation up to a factor of 5. If the loss/gradients", "\n", "# scaled with subbatch size instead, then the expected ratio would be 20.", "\n", "assert", "torch", ".", "isclose", "(", "grad_norm_1", ",", "grad_norm_2", ",", "rtol", "=", "5.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_train.test_reproducibility": [[116, 147], ["deepqmc.Molecule.from_name", "deepqmc.wf.PauliNet.from_hf", "copy.deepcopy", "deepqmc.sampling.rand_from_mol", "test_train.test_reproducibility.get_output_after_training"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.molecule.Molecule.from_name", "home.repos.pwc.inspect_result.deepqmc_deepqmc.paulinet.paulinet.PauliNet.from_hf", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.sampling.rand_from_mol"], ["", "def", "test_reproducibility", "(", ")", ":", "\n", "\n", "    ", "mol", "=", "Molecule", ".", "from_name", "(", "'LiH'", ")", "\n", "net", "=", "PauliNet", ".", "from_hf", "(", "mol", ",", "cas", "=", "(", "4", ",", "2", ")", ",", "conf_limit", "=", "2", ")", "\n", "state", "=", "copy", ".", "deepcopy", "(", "net", ".", "state_dict", "(", ")", ")", "\n", "rs", "=", "rand_from_mol", "(", "mol", ",", "100", ")", "\n", "\n", "def", "get_output_after_training", "(", ")", ":", "\n", "        ", "net", ".", "load_state_dict", "(", "state", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "train", "(", "\n", "net", ",", "\n", "n_steps", "=", "1", ",", "\n", "batch_size", "=", "100", ",", "\n", "epoch_size", "=", "1", ",", "\n", "optimizer", "=", "'AdamW'", ",", "\n", "equilibrate", "=", "False", ",", "\n", "workdir", "=", "None", ",", "\n", "sampler_kwargs", "=", "{", "\n", "'sample_size'", ":", "100", ",", "\n", "'n_discard'", ":", "0", ",", "\n", "'n_decorrelate'", ":", "0", ",", "\n", "'n_first_certain'", ":", "0", ",", "\n", "}", ",", "\n", ")", "\n", "return", "net", "(", "rs", ")", "\n", "\n", "", "output1", "=", "get_output_after_training", "(", ")", "\n", "output2", "=", "get_output_after_training", "(", ")", "\n", "\n", "assert", "torch", ".", "all", "(", "torch", ".", "isclose", "(", "output1", "[", "0", "]", ",", "output2", "[", "0", "]", ",", "rtol", "=", "0", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestDet.xs": [[10, 13], ["torch.randn().double().requires_grad_", "torch.randn().double", "torch.randn"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "\n", "def", "xs", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "randn", "(", "10", ",", "4", ",", "4", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestDet.test_1st_deriv": [[14, 16], ["torch.autograd.gradcheck"], "methods", ["None"], ["", "def", "test_1st_deriv", "(", "self", ",", "xs", ")", ":", "\n", "        ", "assert", "torch", ".", "autograd", ".", "gradcheck", "(", "torchext", ".", "bdet", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestDet.test_2nd_deriv": [[17, 19], ["torch.autograd.gradgradcheck"], "methods", ["None"], ["", "def", "test_2nd_deriv", "(", "self", ",", "xs", ")", ":", "\n", "        ", "assert", "torch", ".", "autograd", ".", "gradgradcheck", "(", "torchext", ".", "bdet", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestDet.test_3rd_deriv": [[20, 30], ["torch.autograd.gradcheck", "deepqmc.torchext.bdet", "torch.autograd.grad", "torch.autograd.grad", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad", "home.repos.pwc.inspect_result.deepqmc_deepqmc.deepqmc.grad.grad"], ["", "def", "test_3rd_deriv", "(", "self", ",", "xs", ")", ":", "\n", "        ", "def", "func", "(", "xs", ")", ":", "\n", "            ", "ys", "=", "torchext", ".", "bdet", "(", "xs", ")", "\n", "(", "dys", ",", ")", "=", "torch", ".", "autograd", ".", "grad", "(", "ys", ",", "xs", ",", "torch", ".", "ones_like", "(", "ys", ")", ",", "create_graph", "=", "True", ")", "\n", "(", "ddys", ",", ")", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "dys", ",", "xs", ",", "torch", ".", "ones_like", "(", "xs", ")", ",", "create_graph", "=", "True", "\n", ")", "\n", "return", "(", "ddys", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "assert", "torch", ".", "autograd", ".", "gradcheck", "(", "func", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestSloglindet.xs": [[33, 39], ["torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "\n", "def", "xs", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "torch", ".", "randn", "(", "10", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", ",", "\n", "torch", ".", "randn", "(", "10", ",", "3", ",", "3", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", ",", "\n", "torch", ".", "randn", "(", "10", ",", "2", ",", "2", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestSloglindet.test_1st_deriv": [[41, 43], ["torch.autograd.gradcheck"], "methods", ["None"], ["", "def", "test_1st_deriv", "(", "self", ",", "xs", ")", ":", "\n", "        ", "assert", "torch", ".", "autograd", ".", "gradcheck", "(", "torchext", ".", "sloglindet", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestSloglindet.test_2nd_deriv": [[44, 46], ["torch.autograd.gradgradcheck"], "methods", ["None"], ["", "def", "test_2nd_deriv", "(", "self", ",", "xs", ")", ":", "\n", "        ", "assert", "torch", ".", "autograd", ".", "gradgradcheck", "(", "torchext", ".", "sloglindet", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestSloglindet1.xs": [[49, 55], ["torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "\n", "def", "xs", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "torch", ".", "randn", "(", "10", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", ",", "\n", "torch", ".", "randn", "(", "10", ",", "2", ",", "2", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", ",", "\n", "torch", ".", "randn", "(", "10", ",", "1", ",", "1", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestSloglindet1.test_1st_deriv": [[57, 59], ["torch.autograd.gradcheck"], "methods", ["None"], ["", "def", "test_1st_deriv", "(", "self", ",", "xs", ")", ":", "\n", "        ", "assert", "torch", ".", "autograd", ".", "gradcheck", "(", "torchext", ".", "sloglindet", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestSloglindet1.test_2nd_deriv": [[60, 62], ["torch.autograd.gradgradcheck"], "methods", ["None"], ["", "def", "test_2nd_deriv", "(", "self", ",", "xs", ")", ":", "\n", "        ", "assert", "torch", ".", "autograd", ".", "gradgradcheck", "(", "torchext", ".", "sloglindet", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestSloglindet0.xs": [[65, 71], ["torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "\n", "def", "xs", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "torch", ".", "randn", "(", "10", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", ",", "\n", "torch", ".", "randn", "(", "10", ",", "2", ",", "2", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", ",", "\n", "torch", ".", "randn", "(", "10", ",", "0", ",", "0", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestSloglindet0.test_1st_deriv": [[73, 75], ["torch.autograd.gradcheck"], "methods", ["None"], ["", "def", "test_1st_deriv", "(", "self", ",", "xs", ")", ":", "\n", "        ", "assert", "torch", ".", "autograd", ".", "gradcheck", "(", "torchext", ".", "sloglindet", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.TestSloglindet0.test_2nd_deriv": [[76, 78], ["torch.autograd.gradgradcheck"], "methods", ["None"], ["", "def", "test_2nd_deriv", "(", "self", ",", "xs", ")", ":", "\n", "        ", "assert", "torch", ".", "autograd", ".", "gradgradcheck", "(", "torchext", ".", "sloglindet", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepqmc_deepqmc.tests.test_torchext.test_pow_int": [[80, 84], ["torch.randn", "torch.tensor", "torch.testing.assert_allclose", "deepqmc.torchext.pow_int", "torch.tensor.float"], "function", ["home.repos.pwc.inspect_result.deepqmc_deepqmc.torchext.utils.pow_int"], ["", "", "def", "test_pow_int", "(", ")", ":", "\n", "    ", "xs", "=", "torch", ".", "randn", "(", "4", ",", "3", ")", "\n", "exps", "=", "torch", ".", "tensor", "(", "[", "(", "1", ",", "2", ",", "3", ")", ",", "(", "0", ",", "1", ",", "2", ")", "]", ")", "\n", "assert_allclose", "(", "pow_int", "(", "xs", "[", ":", ",", "None", ",", ":", "]", ",", "exps", ")", ",", "xs", "[", ":", ",", "None", ",", ":", "]", "**", "exps", ".", "float", "(", ")", ")", "\n", "", ""]]}