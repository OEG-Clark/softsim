{"home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.GlobalAttention.__init__": [[80, 100], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "attn_type", "=", "\"dot\"", ")", ":", "\n", "        ", "super", "(", "GlobalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "assert", "(", "self", ".", "attn_type", "in", "[", "\"dot\"", ",", "\"general\"", ",", "\"mlp\"", "]", ")", ",", "(", "\n", "\"Please select a valid attention type.\"", ")", "\n", "\n", "if", "self", ".", "attn_type", "==", "\"general\"", ":", "\n", "            ", "self", ".", "linear_in", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "\"mlp\"", ":", "\n", "            ", "self", ".", "linear_context", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear_query", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "# mlp wants it with bias", "\n", "", "out_bias", "=", "self", ".", "attn_type", "==", "\"mlp\"", "\n", "self", ".", "linear_out", "=", "nn", ".", "Linear", "(", "dim", "*", "2", ",", "dim", ",", "bias", "=", "out_bias", ")", "\n", "\n", "self", ".", "sm", "=", "nn", ".", "Softmax", "(", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.GlobalAttention.score": [[101, 143], ["h_s.size", "GlobalAttention.GlobalAttention.view.size", "GlobalAttention.aeq", "GlobalAttention.aeq", "GlobalAttention.aeq", "h_s.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "GlobalAttention.GlobalAttention.linear_query", "wq.expand.expand.view", "wq.expand.expand.expand", "GlobalAttention.GlobalAttention.linear_context", "uh.expand.expand.view", "uh.expand.expand.expand", "GlobalAttention.GlobalAttention.tanh", "GlobalAttention.GlobalAttention.v().view", "GlobalAttention.GlobalAttention.view.view", "GlobalAttention.GlobalAttention.linear_in", "GlobalAttention.GlobalAttention.view", "GlobalAttention.GlobalAttention.view.view", "h_s.contiguous().view", "GlobalAttention.GlobalAttention.v", "h_s.contiguous", "GlobalAttention.GlobalAttention.view"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq"], ["", "def", "score", "(", "self", ",", "h_t", ",", "h_s", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          h_t (`FloatTensor`): sequence of queries `[batch x tgt_len x dim]`\n          h_s (`FloatTensor`): sequence of sources `[batch x src_len x dim]`\n\n        Returns:\n          :obj:`FloatTensor`:\n           raw attention scores (unnormalized) for each src index\n          `[batch x tgt_len x src_len]`\n\n        \"\"\"", "\n", "\n", "# Check input sizes", "\n", "src_batch", ",", "src_len", ",", "src_dim", "=", "h_s", ".", "size", "(", ")", "\n", "tgt_batch", ",", "tgt_len", ",", "tgt_dim", "=", "h_t", ".", "size", "(", ")", "\n", "aeq", "(", "src_batch", ",", "tgt_batch", ")", "\n", "aeq", "(", "src_dim", ",", "tgt_dim", ")", "\n", "aeq", "(", "self", ".", "dim", ",", "src_dim", ")", "\n", "\n", "if", "self", ".", "attn_type", "in", "[", "\"general\"", ",", "\"dot\"", "]", ":", "\n", "            ", "if", "self", ".", "attn_type", "==", "\"general\"", ":", "\n", "                ", "h_t_", "=", "h_t", ".", "view", "(", "tgt_batch", "*", "tgt_len", ",", "tgt_dim", ")", "\n", "h_t_", "=", "self", ".", "linear_in", "(", "h_t_", ")", "\n", "h_t", "=", "h_t_", ".", "view", "(", "tgt_batch", ",", "tgt_len", ",", "tgt_dim", ")", "\n", "", "h_s_", "=", "h_s", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# (batch, t_len, d) x (batch, d, s_len) --> (batch, t_len, s_len)", "\n", "return", "torch", ".", "bmm", "(", "h_t", ",", "h_s_", ")", "\n", "", "else", ":", "\n", "            ", "dim", "=", "self", ".", "dim", "\n", "wq", "=", "self", ".", "linear_query", "(", "h_t", ".", "view", "(", "-", "1", ",", "dim", ")", ")", "\n", "wq", "=", "wq", ".", "view", "(", "tgt_batch", ",", "tgt_len", ",", "1", ",", "dim", ")", "\n", "wq", "=", "wq", ".", "expand", "(", "tgt_batch", ",", "tgt_len", ",", "src_len", ",", "dim", ")", "\n", "\n", "uh", "=", "self", ".", "linear_context", "(", "h_s", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "dim", ")", ")", "\n", "uh", "=", "uh", ".", "view", "(", "src_batch", ",", "1", ",", "src_len", ",", "dim", ")", "\n", "uh", "=", "uh", ".", "expand", "(", "src_batch", ",", "tgt_len", ",", "src_len", ",", "dim", ")", "\n", "\n", "# (batch, t_len, s_len, d)", "\n", "wquh", "=", "self", ".", "tanh", "(", "wq", "+", "uh", ")", "\n", "\n", "return", "self", ".", "v", "(", "wquh", ".", "view", "(", "-", "1", ",", "dim", ")", ")", ".", "view", "(", "tgt_batch", ",", "tgt_len", ",", "src_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.GlobalAttention.forward": [[144, 221], ["memory_bank.size", "input.unsqueeze.unsqueeze.size", "GlobalAttention.aeq", "GlobalAttention.aeq", "GlobalAttention.aeq", "GlobalAttention.GlobalAttention.score", "GlobalAttention.GlobalAttention.sm", "align_vectors.transpose().contiguous.transpose().contiguous.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "GlobalAttention.GlobalAttention.linear_out().view", "input.unsqueeze.unsqueeze.dim", "input.unsqueeze.unsqueeze.unsqueeze", "GlobalAttention.sequence_mask", "mask.unsqueeze.unsqueeze.unsqueeze", "GlobalAttention.GlobalAttention.data.masked_fill_", "GlobalAttention.GlobalAttention.view", "GlobalAttention.GlobalAttention.tanh", "attn_h.transpose().contiguous.transpose().contiguous.squeeze", "align_vectors.transpose().contiguous.transpose().contiguous.squeeze", "attn_h.transpose().contiguous.transpose().contiguous.size", "GlobalAttention.aeq", "GlobalAttention.aeq", "align_vectors.transpose().contiguous.transpose().contiguous.size", "GlobalAttention.aeq", "GlobalAttention.aeq", "attn_h.transpose().contiguous.transpose().contiguous.transpose().contiguous", "align_vectors.transpose().contiguous.transpose().contiguous.transpose().contiguous", "attn_h.transpose().contiguous.transpose().contiguous.size", "GlobalAttention.aeq", "GlobalAttention.aeq", "GlobalAttention.aeq", "align_vectors.transpose().contiguous.transpose().contiguous.size", "GlobalAttention.aeq", "GlobalAttention.aeq", "GlobalAttention.aeq", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "GlobalAttention.GlobalAttention.linear_out", "float", "attn_h.transpose().contiguous.transpose().contiguous.transpose", "align_vectors.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.GlobalAttention.score", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.sequence_mask", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "memory_bank", ",", "memory_lengths", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n          input (`FloatTensor`): query vectors `[batch x tgt_len x dim]`\n          memory_bank (`FloatTensor`): source vectors `[batch x src_len x dim]`\n          memory_lengths (`LongTensor`): the source context lengths `[batch]`\n\n        Returns:\n          (`FloatTensor`, `FloatTensor`):\n\n          * Computed vector `[tgt_len x batch x dim]`\n          * Attention distribtutions for each query\n             `[tgt_len x batch x src_len]`\n        \"\"\"", "\n", "\n", "# one step input", "\n", "if", "input", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "one_step", "=", "True", "\n", "input", "=", "input", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "one_step", "=", "False", "\n", "\n", "", "batch", ",", "sourceL", ",", "dim", "=", "memory_bank", ".", "size", "(", ")", "\n", "batch_", ",", "targetL", ",", "dim_", "=", "input", ".", "size", "(", ")", "\n", "aeq", "(", "batch", ",", "batch_", ")", "\n", "aeq", "(", "dim", ",", "dim_", ")", "\n", "aeq", "(", "self", ".", "dim", ",", "dim", ")", "\n", "\n", "# compute attention scores, as in Luong et al.", "\n", "align", "=", "self", ".", "score", "(", "input", ",", "memory_bank", ")", "\n", "\n", "if", "memory_lengths", "is", "not", "None", ":", "\n", "            ", "mask", "=", "sequence_mask", "(", "memory_lengths", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "# Make it broadcastable.", "\n", "align", ".", "data", ".", "masked_fill_", "(", "1", "-", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# Softmax to normalize attention weights", "\n", "", "align_vectors", "=", "self", ".", "sm", "(", "align", ".", "view", "(", "batch", "*", "targetL", ",", "sourceL", ")", ")", "\n", "align_vectors", "=", "align_vectors", ".", "view", "(", "batch", ",", "targetL", ",", "sourceL", ")", "\n", "\n", "# each context vector c_t is the weighted average", "\n", "# over all the source hidden states", "\n", "c", "=", "torch", ".", "bmm", "(", "align_vectors", ",", "memory_bank", ")", "\n", "\n", "# concatenate", "\n", "concat_c", "=", "torch", ".", "cat", "(", "[", "c", ",", "input", "]", ",", "2", ")", ".", "view", "(", "batch", "*", "targetL", ",", "dim", "*", "2", ")", "\n", "attn_h", "=", "self", ".", "linear_out", "(", "concat_c", ")", ".", "view", "(", "batch", ",", "targetL", ",", "dim", ")", "\n", "if", "self", ".", "attn_type", "in", "[", "\"general\"", ",", "\"dot\"", "]", ":", "\n", "            ", "attn_h", "=", "self", ".", "tanh", "(", "attn_h", ")", "\n", "\n", "", "if", "one_step", ":", "\n", "            ", "attn_h", "=", "attn_h", ".", "squeeze", "(", "1", ")", "\n", "align_vectors", "=", "align_vectors", ".", "squeeze", "(", "1", ")", "\n", "\n", "# Check output sizes", "\n", "batch_", ",", "dim_", "=", "attn_h", ".", "size", "(", ")", "\n", "aeq", "(", "batch", ",", "batch_", ")", "\n", "aeq", "(", "dim", ",", "dim_", ")", "\n", "batch_", ",", "sourceL_", "=", "align_vectors", ".", "size", "(", ")", "\n", "aeq", "(", "batch", ",", "batch_", ")", "\n", "aeq", "(", "sourceL", ",", "sourceL_", ")", "\n", "", "else", ":", "\n", "            ", "attn_h", "=", "attn_h", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "align_vectors", "=", "align_vectors", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Check output sizes", "\n", "targetL_", ",", "batch_", ",", "dim_", "=", "attn_h", ".", "size", "(", ")", "\n", "aeq", "(", "targetL", ",", "targetL_", ")", "\n", "aeq", "(", "batch", ",", "batch_", ")", "\n", "aeq", "(", "dim", ",", "dim_", ")", "\n", "targetL_", ",", "batch_", ",", "sourceL_", "=", "align_vectors", ".", "size", "(", ")", "\n", "aeq", "(", "targetL", ",", "targetL_", ")", "\n", "aeq", "(", "batch", ",", "batch_", ")", "\n", "aeq", "(", "sourceL", ",", "sourceL_", ")", "\n", "\n", "", "return", "attn_h", ",", "align_vectors", "\n", "", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq": [[5, 13], ["next", "all", "str"], "function", ["None"], ["def", "aeq", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"\n    Assert all arguments have the same value\n    \"\"\"", "\n", "arguments", "=", "(", "arg", "for", "arg", "in", "args", ")", "\n", "first", "=", "next", "(", "arguments", ")", "\n", "assert", "all", "(", "arg", "==", "first", "for", "arg", "in", "arguments", ")", ",", "\"Not all arguments have the same value: \"", "+", "str", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.sequence_mask": [[15, 25], ["lengths.numel", "torch.arange().type_as().repeat().lt", "torch.arange().type_as().repeat().lt", "lengths.max", "lengths.unsqueeze", "torch.arange().type_as().repeat", "torch.arange().type_as().repeat", "torch.arange().type_as", "torch.arange().type_as", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "sequence_mask", "(", "lengths", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Creates a boolean mask from sequence lengths.\n    \"\"\"", "\n", "batch_size", "=", "lengths", ".", "numel", "(", ")", "\n", "max_len", "=", "max_len", "or", "lengths", ".", "max", "(", ")", "\n", "return", "(", "torch", ".", "arange", "(", "0", ",", "max_len", ")", "\n", ".", "type_as", "(", "lengths", ")", "\n", ".", "repeat", "(", "batch_size", ",", "1", ")", "\n", ".", "lt", "(", "lengths", ".", "unsqueeze", "(", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.config.get_preprocess_args": [[6, 60], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "eval", "eval", "eval", "eval", "eval", "eval"], "function", ["None"], ["def", "get_preprocess_args", "(", ")", ":", "\n", "    ", "\"\"\"Data Preprocessing Options\"\"\"", "\n", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "'Pre-process Options'", ")", "\n", "parser", ".", "add_argument", "(", "'--vocab_size'", ",", "type", "=", "int", ",", "default", "=", "80000", ",", "\n", "help", "=", "'Vocabulary size of source language'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_tok'", ",", "dest", "=", "'tok'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "set_defaults", "(", "tok", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--max_seq_length'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'maximum sequence length'", ")", "\n", "parser", ".", "add_argument", "(", "'--input'", ",", "'-i'", ",", "type", "=", "str", ",", "\n", "default", "=", "'data'", ",", "\n", "help", "=", "'Input directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "'-o'", ",", "type", "=", "str", ",", "\n", "default", "=", "'temp'", ",", "\n", "help", "=", "'Output directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_data'", ",", "type", "=", "str", ",", "\n", "default", "=", "'demo'", ",", "\n", "help", "=", "'Output file for the prepared data'", ")", "\n", "parser", ".", "add_argument", "(", "'--addndata'", ",", "type", "=", "str", ",", "\n", "default", "=", "'data/covid19/'", ",", "\n", "help", "=", "'For Tweet and User Features'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--covid19_dev'", ",", "\n", "default", "=", "'covid19/test.txt'", ",", "\n", "type", "=", "str", ")", "# No dev set, test and dev set are the same", "\n", "parser", ".", "add_argument", "(", "'--covid19_test'", ",", "\n", "default", "=", "'covid19/test.txt'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--covid19_train'", ",", "\n", "default", "=", "'covid19/train.txt'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--covid19_unlabel'", ",", "\n", "default", "=", "'covid19/unlabel.txt'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--covid19_ek'", ",", "\n", "default", "=", "'covid19/train_exter.txt'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--covid19_ekt'", ",", "\n", "default", "=", "'covid19/test_exter.txt'", ",", "\n", "type", "=", "str", ")", "\n", "\n", "# Corpus Name", "\n", "parser", ".", "add_argument", "(", "'--corpus'", ",", "default", "=", "'covid19'", ",", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "train_filename", "=", "eval", "(", "\"args.\"", "+", "args", ".", "corpus", "+", "\"_train\"", ")", "\n", "args", ".", "dev_filename", "=", "eval", "(", "\"args.\"", "+", "args", ".", "corpus", "+", "\"_dev\"", ")", "\n", "args", ".", "test_filename", "=", "eval", "(", "\"args.\"", "+", "args", ".", "corpus", "+", "\"_test\"", ")", "\n", "args", ".", "unlabel_filename", "=", "eval", "(", "\"args.\"", "+", "args", ".", "corpus", "+", "\"_unlabel\"", ")", "\n", "args", ".", "ek_filename", "=", "eval", "(", "\"args.\"", "+", "args", ".", "corpus", "+", "\"_ek\"", ")", "\n", "args", ".", "ekt_filename", "=", "eval", "(", "\"args.\"", "+", "args", ".", "corpus", "+", "\"_ekt\"", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.config.get_train_args": [[61, 221], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "datetime.datetime.utcnow().strftime", "random.randint", "os.path.join", "datetime.datetime.utcnow"], "function", ["None"], ["", "def", "get_train_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Text Classification'", ")", "\n", "\n", "# Model", "\n", "parser", ".", "add_argument", "(", "'--use_addn'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Whether to use additional features or not'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--attention'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'To use attention or not'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'WordLstm'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--d_units'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'Number of units in the embedding layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_proj'", ",", "type", "=", "int", ",", "default", "=", "768", ",", "\n", "help", "=", "'Number of units in the projection layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_hidden'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'Number of units in the hidden layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--addn_dim'", ",", "type", "=", "int", ",", "default", "=", "19", ",", "\n", "help", "=", "'Number of units in the addn data'", ")", "\n", "parser", ".", "add_argument", "(", "'--projection'", ",", "dest", "=", "'projection'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"projection layer after word embeddings\"", ")", "\n", "parser", ".", "set_defaults", "(", "projection", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--d_down_proj'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'Number of units in the down projection layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--down_projection'", ",", "dest", "=", "'down_projection'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"down projection layer after encoder\"", ")", "\n", "parser", ".", "set_defaults", "(", "down_projection", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_discriminator_layers'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'Number of discriminative layers'", ")", "\n", "\n", "# Option for forward LSTM or BiLSTM", "\n", "parser", ".", "add_argument", "(", "'--frnn'", ",", "dest", "=", "'brnn'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "set_defaults", "(", "brnn", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--timedistributed'", ",", "dest", "=", "'timedistributed'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'option to get all the hidden states of LSTM'", ")", "\n", "parser", ".", "set_defaults", "(", "timedistributed", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--init_scalar'", ",", "default", "=", "0.05", ",", "type", "=", "float", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--unif'", ",", "help", "=", "'Initializer bounds for embeddings'", ",", "\n", "default", "=", "0.25", ")", "\n", "\n", "# Multi-GPU", "\n", "parser", ".", "add_argument", "(", "'--multi_gpu'", ",", "dest", "=", "'multi_gpu'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "multi_gpu", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "# Gradient Clipping", "\n", "parser", ".", "add_argument", "(", "'--gradient_clipping'", ",", "dest", "=", "'gradient_clipping'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_gradient_clipping'", ",", "dest", "=", "'gradient_clipping'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "set_defaults", "(", "gradient_clipping", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--max_norm'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "# parser.add_argument('--max_len', default=200, type=int)", "\n", "\n", "# Weight Decay", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "\n", "# Evaluation and Checkpoint", "\n", "parser", ".", "add_argument", "(", "'--load_checkpoint'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "\n", "# Pre-trained word embeddings path", "\n", "parser", ".", "add_argument", "(", "'--use_pretrained_embeddings'", ",", "\n", "dest", "=", "'use_pretrained_embeddings'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "use_pretrained_embeddings", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--train_embeddings'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive_dropout'", ",", "dest", "=", "'adaptive_dropout'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--finetune'", ",", "dest", "=", "'finetune'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "finetune", "=", "False", ")", "\n", "\n", "home", "=", "os", ".", "environ", "[", "'HOME'", "]", "\n", "\n", "parser", ".", "add_argument", "(", "'--max_iter'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--nepochs'", ",", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--word_dropout'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lstm_dropout'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--locked_dropout'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--nepoch_no_imprv'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--nchkp_no_imprv'", ",", "default", "=", "30", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_size'", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--subsampling'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--class_weight'", ",", "default", "=", "'uniform'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "'adam'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_steps'", ",", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "\n", "# Optimizer Params", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "0.001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "# Paper: https://arxiv.org/pdf/1707.05589.pdf (Beta1 is set to 0)", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "default", "=", "0.999", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "default", "=", "1e-8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler'", ",", "default", "=", "'ReduceLROnPlateau'", ",", "\n", "type", "=", "str", ",", "help", "=", "'ReduceLROnPlateau|ExponentialLR'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "default", "=", "0.99995", ",", "type", "=", "float", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--pool_type'", ",", "default", "=", "'max_pool'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--dynamic_pool_size'", ",", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--wbatchsize'", ",", "default", "=", "3000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--wbatchsize_unlabel'", ",", "default", "=", "12000", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda_clf'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_ae'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_at'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_vat'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_entropy'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--inc_unlabeled_loss'", ",", "dest", "=", "'inc_unlabeled_loss'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "inc_unlabeled_loss", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--unlabeled_loss_type'", ",", "default", "=", "'AvgTrainUnlabel'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--perturb_norm_length'", ",", "default", "=", "5.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--max_embedding_norm'", ",", "default", "=", "None", ",", "type", "=", "float", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--normalize_embedding'", ",", "dest", "=", "'normalize_embedding'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "normalize_embedding", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--add_noise'", ",", "dest", "=", "'add_noise'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "add_noise", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--random_permutation'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "\n", "# Debug Mode", "\n", "# In debug mode, print progress bar, otherwise not", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "dest", "=", "'debug'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "debug", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--report_every'", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--input'", ",", "'-i'", ",", "type", "=", "str", ",", "\n", "default", "=", "'temp'", ",", "\n", "help", "=", "'Input directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_data'", ",", "type", "=", "str", ",", "\n", "default", "=", "'demo'", ",", "\n", "help", "=", "'Prefix for the prepared data'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--addndata'", ",", "type", "=", "str", ",", "\n", "default", "=", "'data/covid19/'", ",", "\n", "help", "=", "'For Tweet and User Features'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output_path'", ",", "default", "=", "\"results/clf/\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "\n", "# Corpus Name", "\n", "parser", ".", "add_argument", "(", "'--corpus'", ",", "default", "=", "'sst'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "model_file", "=", "args", ".", "exp_name", "+", "\".pt\"", "\n", "now", "=", "datetime", ".", "utcnow", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ")", "\n", "random_num", "=", "random", ".", "randint", "(", "1", ",", "1000", ")", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "\"log_{}_time-{}_rand_{}.txt\"", ".", "format", "(", "now", ",", "\n", "args", ".", "exp_name", ",", "\n", "random_num", ")", ")", "\n", "args", ".", "log_path", "=", "log_path", "\n", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.RNNDecoderBase.__init__": [[60, 81], ["torch.nn.Module.__init__", "torch.nn.Dropout", "rnn_decoder.RNNDecoderBase._build_rnn", "GlobalAttention.GlobalAttention.GlobalAttention"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.StdRNNDecoder._build_rnn"], ["def", "__init__", "(", "self", ",", "rnn_type", ",", "bidirectional_encoder", ",", "num_layers", ",", "\n", "hidden_size", ",", "attn_type", "=", "\"general\"", ",", "dropout", "=", "0.0", ",", "\n", "embeddings", "=", "None", ")", ":", "\n", "        ", "super", "(", "RNNDecoderBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Basic attributes.", "\n", "self", ".", "decoder_type", "=", "'rnn'", "\n", "self", ".", "bidirectional_encoder", "=", "bidirectional_encoder", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "# Build the RNN.", "\n", "self", ".", "rnn", "=", "self", ".", "_build_rnn", "(", "rnn_type", ",", "\n", "input_size", "=", "self", ".", "_input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "dropout", "=", "dropout", ")", "\n", "self", ".", "attn", "=", "GlobalAttention", "(", "hidden_size", ",", "\n", "attn_type", "=", "attn_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.RNNDecoderBase.forward": [[82, 125], ["isinstance", "tgt.size", "memory_bank.size", "GlobalAttention.GlobalAttention.aeq", "rnn_decoder.RNNDecoderBase._run_forward_pass", "state.update_state", "torch.stack", "[].unsqueeze", "final_output.unsqueeze", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.StdRNNDecoder._run_forward_pass", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.RNNDecoderState.update_state"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory_bank", ",", "state", ",", "memory_lengths", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tgt (`LongTensor`): sequences of padded tokens\n                                `[tgt_len x batch x nfeats]`.\n            memory_bank (`FloatTensor`): vectors from the encoder\n                 `[src_len x batch x hidden]`.\n            state (:obj:`onmt.Models.DecoderState`):\n                 decoder state object to initialize the decoder\n            memory_lengths (`LongTensor`): the padded source lengths\n                `[batch]`.\n        Returns:\n            (`FloatTensor`,:obj:`onmt.Models.DecoderState`,`FloatTensor`):\n                * decoder_outputs: output from the decoder (after attn)\n                         `[tgt_len x batch x hidden]`.\n                * decoder_state: final hidden state from the decoder\n                * attns: distribution over src at each tgt\n                        `[tgt_len x batch x src_len]`.\n        \"\"\"", "\n", "# Check", "\n", "assert", "isinstance", "(", "state", ",", "RNNDecoderState", ")", "\n", "tgt_len", ",", "tgt_batch", "=", "tgt", ".", "size", "(", ")", "\n", "_", ",", "memory_batch", ",", "_", "=", "memory_bank", ".", "size", "(", ")", "\n", "aeq", "(", "tgt_batch", ",", "memory_batch", ")", "\n", "# END", "\n", "\n", "# Run the forward pass of the RNN.", "\n", "decoder_final", ",", "decoder_outputs", ",", "attns", "=", "self", ".", "_run_forward_pass", "(", "\n", "tgt", ",", "memory_bank", ",", "state", ",", "memory_lengths", "=", "memory_lengths", ")", "\n", "\n", "# Update the state with the result.", "\n", "final_output", "=", "decoder_outputs", "[", "-", "1", "]", "\n", "coverage", "=", "None", "\n", "if", "\"coverage\"", "in", "attns", ":", "\n", "            ", "coverage", "=", "attns", "[", "\"coverage\"", "]", "[", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "state", ".", "update_state", "(", "decoder_final", ",", "final_output", ".", "unsqueeze", "(", "0", ")", ",", "coverage", ")", "\n", "\n", "# Concatenates sequence of tensors along a new dimension.", "\n", "decoder_outputs", "=", "torch", ".", "stack", "(", "decoder_outputs", ")", "\n", "for", "k", "in", "attns", ":", "\n", "            ", "attns", "[", "k", "]", "=", "torch", ".", "stack", "(", "attns", "[", "k", "]", ")", "\n", "\n", "", "return", "decoder_outputs", ",", "state", ",", "attns", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.RNNDecoderBase.init_decoder_state": [[126, 141], ["isinstance", "rnn_decoder.RNNDecoderState", "rnn_decoder.RNNDecoderState", "torch.cat", "tuple", "rnn_decoder.RNNDecoderBase.init_decoder_state._fix_enc_hidden"], "methods", ["None"], ["", "def", "init_decoder_state", "(", "self", ",", "encoder_final", ")", ":", "\n", "        ", "def", "_fix_enc_hidden", "(", "h", ")", ":", "\n", "# The encoder hidden is  (layers*directions) x batch x dim.", "\n", "# We need to convert it to layers x batch x (directions*dim).", "\n", "            ", "if", "self", ".", "bidirectional_encoder", ":", "\n", "                ", "h", "=", "torch", ".", "cat", "(", "[", "h", "[", "0", ":", "h", ".", "size", "(", "0", ")", ":", "2", "]", ",", "h", "[", "1", ":", "h", ".", "size", "(", "0", ")", ":", "2", "]", "]", ",", "2", ")", "\n", "", "return", "h", "\n", "\n", "", "if", "isinstance", "(", "encoder_final", ",", "tuple", ")", ":", "# LSTM", "\n", "            ", "return", "RNNDecoderState", "(", "self", ".", "hidden_size", ",", "\n", "tuple", "(", "[", "_fix_enc_hidden", "(", "enc_hid", ")", "\n", "for", "enc_hid", "in", "encoder_final", "]", ")", ")", "\n", "", "else", ":", "# GRU", "\n", "            ", "return", "RNNDecoderState", "(", "self", ".", "hidden_size", ",", "\n", "_fix_enc_hidden", "(", "encoder_final", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.StdRNNDecoder._run_forward_pass": [[158, 205], ["rnn_decoder.StdRNNDecoder.embeddings", "isinstance", "tgt.size", "rnn_output.size", "GlobalAttention.GlobalAttention.aeq", "GlobalAttention.GlobalAttention.aeq", "rnn_decoder.StdRNNDecoder.attn", "rnn_decoder.StdRNNDecoder.dropout", "rnn_decoder.StdRNNDecoder.rnn", "rnn_decoder.StdRNNDecoder.rnn", "rnn_output.transpose().contiguous", "memory_bank.transpose", "rnn_output.transpose"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.aeq"], ["def", "_run_forward_pass", "(", "self", ",", "tgt", ",", "memory_bank", ",", "state", ",", "memory_lengths", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Private helper for running the specific RNN forward pass.\n        Must be overriden by all subclasses.\n        Args:\n            tgt (LongTensor): a sequence of input tokens tensors\n                                 [len x batch x nfeats].\n            memory_bank (FloatTensor): output(tensor sequence) from the encoder\n                        RNN of size (src_len x batch x hidden_size).\n            state (FloatTensor): hidden state from the encoder RNN for\n                                 initializing the decoder.\n            memory_lengths (LongTensor): the source memory_bank lengths.\n        Returns:\n            decoder_final (Variable): final hidden state from the decoder.\n            decoder_outputs ([FloatTensor]): an array of output of every time\n                                     step from the decoder.\n            attns (dict of (str, [FloatTensor]): a dictionary of different\n                            type of attention Tensor array of every time\n                            step from the decoder.\n        \"\"\"", "\n", "# Initialize local and return variables.", "\n", "attns", "=", "{", "}", "\n", "emb", "=", "self", ".", "embeddings", "(", "tgt", ")", "\n", "\n", "# Run the forward pass of the RNN.", "\n", "if", "isinstance", "(", "self", ".", "rnn", ",", "nn", ".", "GRU", ")", ":", "\n", "            ", "rnn_output", ",", "decoder_final", "=", "self", ".", "rnn", "(", "emb", ",", "state", ".", "hidden", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "rnn_output", ",", "decoder_final", "=", "self", ".", "rnn", "(", "emb", ",", "state", ".", "hidden", ")", "\n", "\n", "# Check", "\n", "", "tgt_len", ",", "tgt_batch", "=", "tgt", ".", "size", "(", ")", "\n", "output_len", ",", "output_batch", ",", "_", "=", "rnn_output", ".", "size", "(", ")", "\n", "aeq", "(", "tgt_len", ",", "output_len", ")", "\n", "aeq", "(", "tgt_batch", ",", "output_batch", ")", "\n", "# END", "\n", "\n", "# Calculate the attention.", "\n", "decoder_outputs", ",", "p_attn", "=", "self", ".", "attn", "(", "\n", "rnn_output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ",", "\n", "memory_bank", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "memory_lengths", "=", "memory_lengths", "\n", ")", "\n", "attns", "[", "\"std\"", "]", "=", "p_attn", "\n", "\n", "decoder_outputs", "=", "self", ".", "dropout", "(", "decoder_outputs", ")", "\n", "return", "decoder_final", ",", "decoder_outputs", ",", "attns", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.StdRNNDecoder._build_rnn": [[206, 209], ["rnn_decoder.rnn_factory"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.rnn_factory"], ["", "def", "_build_rnn", "(", "self", ",", "rnn_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "rnn", ",", "_", "=", "rnn_factory", "(", "rnn_type", ",", "**", "kwargs", ")", "\n", "return", "rnn", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.StdRNNDecoder._input_size": [[210, 216], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_input_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Private helper returning the number of expected features.\n        \"\"\"", "\n", "return", "self", ".", "embeddings", ".", "embedding_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.DecoderState.detach": [[226, 230], ["h.detach_"], "methods", ["None"], ["def", "detach", "(", "self", ")", ":", "\n", "        ", "for", "h", "in", "self", ".", "_all", ":", "\n", "            ", "if", "h", "is", "not", "None", ":", "\n", "                ", "h", ".", "detach_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.DecoderState.beam_update": [[231, 246], ["e.size", "sent_states.data.copy_", "len", "sent_states.data.index_select", "e.view", "e.view"], "methods", ["None"], ["", "", "", "def", "beam_update", "(", "self", ",", "idx", ",", "positions", ",", "beam_size", ")", ":", "\n", "        ", "for", "e", "in", "self", ".", "_all", ":", "\n", "            ", "sizes", "=", "e", ".", "size", "(", ")", "\n", "br", "=", "sizes", "[", "1", "]", "\n", "if", "len", "(", "sizes", ")", "==", "3", ":", "\n", "                ", "sent_states", "=", "e", ".", "view", "(", "sizes", "[", "0", "]", ",", "beam_size", ",", "br", "//", "beam_size", ",", "\n", "sizes", "[", "2", "]", ")", "[", ":", ",", ":", ",", "idx", "]", "\n", "", "else", ":", "\n", "                ", "sent_states", "=", "e", ".", "view", "(", "sizes", "[", "0", "]", ",", "beam_size", ",", "\n", "br", "//", "beam_size", ",", "\n", "sizes", "[", "2", "]", ",", "\n", "sizes", "[", "3", "]", ")", "[", ":", ",", ":", ",", "idx", "]", "\n", "\n", "", "sent_states", ".", "data", ".", "copy_", "(", "\n", "sent_states", ".", "data", ".", "index_select", "(", "1", ",", "positions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.RNNDecoderState.__init__": [[249, 267], ["rnn_decoder.RNNDecoderState.hidden[].size", "torch.autograd.Variable().unsqueeze", "isinstance", "torch.autograd.Variable", "rnn_decoder.RNNDecoderState.hidden[].data.new().zero_", "rnn_decoder.RNNDecoderState.hidden[].data.new"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "rnnstate", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            hidden_size (int): the size of hidden layer of the decoder.\n            rnnstate: final hidden state from the encoder.\n                transformed to shape: layers x batch x (directions*dim).\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "rnnstate", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "hidden", "=", "(", "rnnstate", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "hidden", "=", "rnnstate", "\n", "", "self", ".", "coverage", "=", "None", "\n", "\n", "# Init the input feed.", "\n", "batch_size", "=", "self", ".", "hidden", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "h_size", "=", "(", "batch_size", ",", "hidden_size", ")", "\n", "self", ".", "input_feed", "=", "Variable", "(", "self", ".", "hidden", "[", "0", "]", ".", "data", ".", "new", "(", "*", "h_size", ")", ".", "zero_", "(", ")", ",", "\n", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.RNNDecoderState._all": [[268, 271], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_all", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hidden", "+", "(", "self", ".", "input_feed", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.RNNDecoderState.update_state": [[272, 279], ["isinstance"], "methods", ["None"], ["", "def", "update_state", "(", "self", ",", "rnnstate", ",", "input_feed", ",", "coverage", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "rnnstate", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "hidden", "=", "(", "rnnstate", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "hidden", "=", "rnnstate", "\n", "", "self", ".", "input_feed", "=", "input_feed", "\n", "self", ".", "coverage", "=", "coverage", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.RNNDecoderState.repeat_beam_size_times": [[280, 286], ["tuple", "torch.autograd.Variable", "e.data.repeat"], "methods", ["None"], ["", "def", "repeat_beam_size_times", "(", "self", ",", "beam_size", ")", ":", "\n", "        ", "\"\"\" Repeat beam_size times along batch dimension. \"\"\"", "\n", "vars", "=", "[", "Variable", "(", "e", ".", "data", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ")", ",", "volatile", "=", "True", ")", "\n", "for", "e", "in", "self", ".", "_all", "]", "\n", "self", ".", "hidden", "=", "tuple", "(", "vars", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "input_feed", "=", "vars", "[", "-", "1", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.rnn_factory": [[7, 12], ["getattr"], "function", ["None"], ["def", "rnn_factory", "(", "rnn_type", ",", "**", "kwargs", ")", ":", "\n", "# Use pytorch version when available.", "\n", "    ", "no_pack_padded_seq", "=", "False", "\n", "rnn", "=", "getattr", "(", "nn", ",", "rnn_type", ")", "(", "**", "kwargs", ")", "\n", "return", "rnn", ",", "no_pack_padded_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelReader.__init__": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelReader.build_vocab": [[31, 33], ["None"], "methods", ["None"], ["", "def", "build_vocab", "(", "self", ",", "files", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelReader.load": [[34, 36], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "filename", ",", "index", ",", "batchsz", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.__init__": [[39, 47], ["data_utils.SeqLabelReader.__init__"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mxlen", "=", "1000", ",", "mxfiltsz", "=", "0", ",", "vec_alloc", "=", "np", ".", "zeros", ")", ":", "\n", "        ", "super", "(", "TSVSeqLabelReader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab", "=", "None", "\n", "self", ".", "label2index", "=", "{", "}", "\n", "self", ".", "mxlen", "=", "mxlen", "\n", "self", ".", "mxfiltsz", "=", "mxfiltsz", "\n", "self", ".", "vec_alloc", "=", "vec_alloc", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.splits": [[48, 51], ["text.lower().split", "text.lower"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "splits", "(", "text", ")", ":", "\n", "        ", "return", "text", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.label_and_sentence": [[52, 59], ["line.strip().lower().split", "line.strip().lower", "line.strip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "label_and_sentence", "(", "line", ")", ":", "\n", "        ", "label_text", "=", "line", ".", "strip", "(", ")", ".", "lower", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "label", "=", "label_text", "[", "0", "]", "\n", "text", "=", "label_text", "[", "1", ":", "]", "\n", "text", "=", "' '", ".", "join", "(", "text", ")", "\n", "return", "label", ",", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.build_vocab": [[60, 99], ["len", "list", "collections.Counter", "type", "os.path.isdir", "kwargs.get", "sklearn.utils.compute_class_weight", "data_utils.TSVSeqLabelReader.get_labels", "filter", "io.open", "tqdm.tqdm.tqdm", "list", "data_utils.TSVSeqLabelReader.label_and_sentence", "data_utils.TSVSeqLabelReader.splits", "list.append", "data_utils.TSVSeqLabelReader.label2index.values", "os.path.join", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.get_labels", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.label_and_sentence", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.splits"], ["", "def", "build_vocab", "(", "self", ",", "files", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Take a directory (as a string), or an array of files and build a vocabulary\n\n        Take in a directory or an array of individual files (as a list).  If the argument is\n        a string, it may be a directory, in which case, all files in the directory will be loaded\n        to form a vocabulary.\n\n        :param files: Either a directory (str), or an array of individual files\n        :return:\n        \"\"\"", "\n", "label_idx", "=", "len", "(", "self", ".", "label2index", ")", "\n", "if", "type", "(", "files", ")", "==", "str", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "files", ")", ":", "\n", "                ", "base", "=", "files", "\n", "files", "=", "filter", "(", "os", ".", "path", ".", "isfile", ",", "[", "os", ".", "path", ".", "join", "(", "base", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "base", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "files", "=", "[", "files", "]", "\n", "\n", "", "", "y", "=", "list", "(", ")", "\n", "vocab", "=", "Counter", "(", ")", "\n", "for", "file", "in", "files", ":", "\n", "            ", "if", "file", "is", "None", ":", "\n", "                ", "continue", "\n", "", "with", "io", ".", "open", "(", "file", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "tqdm", "(", "f", ")", ":", "\n", "                    ", "label", ",", "text", "=", "TSVSeqLabelReader", ".", "label_and_sentence", "(", "line", ")", "\n", "if", "label", "not", "in", "self", ".", "label2index", ":", "\n", "                        ", "self", ".", "label2index", "[", "label", "]", "=", "label_idx", "\n", "label_idx", "+=", "1", "\n", "", "for", "w", "in", "TSVSeqLabelReader", ".", "splits", "(", "text", ")", ":", "\n", "                        ", "vocab", "[", "w", "]", "+=", "1", "\n", "", "y", ".", "append", "(", "self", ".", "label2index", "[", "label", "]", ")", "\n", "\n", "", "", "", "if", "kwargs", ".", "get", "(", "\"class_weight\"", ")", "==", "\"balanced\"", ":", "\n", "            ", "class_weight", "=", "compute_class_weight", "(", "\"balanced\"", ",", "list", "(", "self", ".", "label2index", ".", "values", "(", ")", ")", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "class_weight", "=", "None", "\n", "\n", "", "return", "vocab", ",", "self", ".", "get_labels", "(", ")", ",", "class_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.get_labels": [[100, 105], ["data_utils.TSVSeqLabelReader.label2index.items", "len"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "labels", "=", "[", "''", "]", "*", "len", "(", "self", ".", "label2index", ")", "\n", "for", "label", ",", "index", "in", "self", ".", "label2index", ".", "items", "(", ")", ":", "\n", "            ", "labels", "[", "index", "]", "=", "label", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load": [[106, 133], ["data_utils.SeqLabelDataFeed", "io.open", "enumerate", "data_utils.SeqLabelExamples", "tqdm.tqdm.tqdm", "data_utils.TSVSeqLabelReader.label_and_sentence", "data_utils.TSVSeqLabelReader.splits", "min", "data_utils.TSVSeqLabelReader.vec_alloc", "range", "examples.append", "len", "len", "index.get"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.label_and_sentence", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.splits"], ["", "def", "load", "(", "self", ",", "filename", ",", "index", ",", "batchsz", ",", "**", "kwargs", ")", ":", "\n", "        ", "PAD", "=", "index", "[", "'<PAD>'", "]", "\n", "#         shuffle = kwargs.get('shuffle', False)", "\n", "shuffle", "=", "False", "\n", "halffiltsz", "=", "self", ".", "mxfiltsz", "//", "2", "\n", "nozplen", "=", "self", ".", "mxlen", "-", "2", "*", "halffiltsz", "\n", "\n", "examples", "=", "[", "]", "\n", "with", "io", ".", "open", "(", "filename", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "            ", "for", "offset", ",", "line", "in", "enumerate", "(", "tqdm", "(", "f", ")", ")", ":", "\n", "                ", "label", ",", "text", "=", "TSVSeqLabelReader", ".", "label_and_sentence", "(", "line", ")", "\n", "y", "=", "self", ".", "label2index", "[", "label", "]", "\n", "toks", "=", "TSVSeqLabelReader", ".", "splits", "(", "text", ")", "\n", "mx", "=", "min", "(", "len", "(", "toks", ")", ",", "nozplen", ")", "\n", "toks", "=", "toks", "[", ":", "mx", "]", "\n", "x", "=", "self", ".", "vec_alloc", "(", "self", ".", "mxlen", ",", "dtype", "=", "int", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "toks", ")", ")", ":", "\n", "                    ", "w", "=", "toks", "[", "j", "]", "\n", "key", "=", "index", ".", "get", "(", "w", ",", "PAD", ")", "\n", "x", "[", "j", "+", "halffiltsz", "]", "=", "key", "\n", "", "examples", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "", "", "return", "SeqLabelDataFeed", "(", "SeqLabelExamples", "(", "examples", ")", ",", "\n", "batchsz", "=", "batchsz", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "vec_alloc", "=", "self", ".", "vec_alloc", ",", "\n", "src_vec_trans", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelExamples.__init__": [[143, 147], ["random.shuffle"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "example_list", ",", "do_shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "example_list", "=", "example_list", "\n", "if", "do_shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "example_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelExamples.__getitem__": [[148, 156], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"Get a single example\n\n        :param i: (``int``) simple index\n        :return: an example\n        \"\"\"", "\n", "ex", "=", "self", ".", "example_list", "[", "i", "]", "\n", "return", "ex", "[", "SeqLabelExamples", ".", "SEQ", "]", ",", "ex", "[", "SeqLabelExamples", ".", "LABEL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelExamples.__len__": [[157, 163], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of examples\n\n        :return: (``int``) length of data\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "example_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelExamples.width": [[164, 171], ["len"], "methods", ["None"], ["", "def", "width", "(", "self", ")", ":", "\n", "        ", "\"\"\" Width of the temporal signal\n\n        :return: (``int``) length\n        \"\"\"", "\n", "x", ",", "y", "=", "self", ".", "example_list", "[", "0", "]", "\n", "return", "len", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelExamples.batch": [[172, 195], ["data_utils.SeqLabelExamples.width", "vec_alloc", "vec_alloc", "len", "range"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelExamples.width"], ["", "def", "batch", "(", "self", ",", "start", ",", "batchsz", ",", "vec_alloc", "=", "np", ".", "empty", ")", ":", "\n", "        ", "\"\"\"Get a batch of data\n\n        :param start: The step index\n        :param batchsz: The batch size\n        :param vec_alloc: A vector allocator, defaults to `numpy.empty`\n        :return: batched x vector, batched y vector\n        \"\"\"", "\n", "siglen", "=", "self", ".", "width", "(", ")", "\n", "xb", "=", "vec_alloc", "(", "(", "batchsz", ",", "siglen", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "yb", "=", "vec_alloc", "(", "(", "batchsz", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "sz", "=", "len", "(", "self", ".", "example_list", ")", "\n", "idx", "=", "start", "*", "batchsz", "\n", "for", "i", "in", "range", "(", "batchsz", ")", ":", "\n", "            ", "if", "idx", ">=", "sz", ":", "\n", "# idx = 0", "\n", "                ", "batchsz", "=", "i", "\n", "break", "\n", "", "x", ",", "y", "=", "self", ".", "example_list", "[", "idx", "]", "\n", "xb", "[", "i", "]", "=", "x", "\n", "yb", "[", "i", "]", "=", "y", "\n", "idx", "+=", "1", "\n", "", "return", "xb", "[", ":", "batchsz", "]", ",", "yb", "[", ":", "batchsz", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelExamples.valid_split": [[196, 209], ["len", "int", "math.floor", "data_utils.SeqLabelExamples", "data_utils.SeqLabelExamples"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "valid_split", "(", "data", ",", "splitfrac", "=", "0.15", ")", ":", "\n", "        ", "\"\"\"Function to produce a split of data based on a fraction\n\n        :param data: Data to split\n        :param splitfrac: (``float``) fraction of data to hold out\n        :return: Two sets of label examples\n        \"\"\"", "\n", "numinst", "=", "len", "(", "data", ".", "examples", ")", "\n", "heldout", "=", "int", "(", "math", ".", "floor", "(", "numinst", "*", "(", "1", "-", "splitfrac", ")", ")", ")", "\n", "heldout_ex", "=", "data", ".", "example_list", "[", "1", ":", "heldout", "]", "\n", "rest_ex", "=", "data", ".", "example_list", "[", "heldout", ":", "]", "\n", "return", "SeqLabelExamples", "(", "heldout_ex", ")", ",", "SeqLabelExamples", "(", "rest_ex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.DataFeed.__init__": [[219, 222], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "steps", "=", "0", "\n", "self", ".", "shuffle", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.DataFeed._batch": [[223, 225], ["None"], "methods", ["None"], ["", "def", "_batch", "(", "self", ",", "i", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.DataFeed.__getitem__": [[226, 228], ["data_utils.DataFeed._batch"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelDataFeed._batch"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "_batch", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.DataFeed.__iter__": [[229, 235], ["range", "numpy.random.permutation", "numpy.arange", "numpy.arange", "data_utils.DataFeed._batch"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelDataFeed._batch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "shuffle", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "self", ".", "steps", ")", ")", "if", "self", ".", "shuffle", "else", "np", ".", "arange", "(", "self", ".", "steps", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "steps", ")", ":", "\n", "            ", "si", "=", "shuffle", "[", "i", "]", "\n", "yield", "self", ".", "_batch", "(", "si", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.DataFeed.__len__": [[236, 238], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.ExampleDataFeed.__init__": [[245, 275], ["data_utils.DataFeed.__init__", "bool", "kwargs.get", "kwargs.get", "kwargs.get", "int", "bool", "kwargs.get", "math.ceil", "kwargs.get", "len", "float"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["def", "__init__", "(", "self", ",", "examples", ",", "batchsz", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructor from a list of examples\n\n        Use the examples requested to provide data.  Options for batching and shuffling are supported,\n        along with some optional processing function pointers\n\n        :param examples: A list of examples\n        :param batchsz: Batch size per step\n        :param kwargs: See below\n\n        :Keyword Arguments:\n            * *shuffle* -- Shuffle the data per epoch? Defaults to `False`\n            * *vec_alloc* -- Allocate a new tensor.  Defaults to ``numpy.zeros``\n            * *vec_shape* -- Function to retrieve tensor shape.  Defaults to ``numpy.shape``\n            * *trim* -- Trim batches to the maximum length seen in the batch (defaults to `False`)\n                This can lead to batches being shorter than the maximum length provided to the system.\n                Not supported in all frameworks.\n            * *src_vec_trans* -- A transform function to use on the source tensor (`None`)\n        \"\"\"", "\n", "super", "(", "ExampleDataFeed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "examples", "=", "examples", "\n", "self", ".", "batchsz", "=", "batchsz", "\n", "self", ".", "shuffle", "=", "bool", "(", "kwargs", ".", "get", "(", "'shuffle'", ",", "False", ")", ")", "\n", "self", ".", "vec_alloc", "=", "kwargs", ".", "get", "(", "'vec_alloc'", ",", "np", ".", "zeros", ")", "\n", "self", ".", "vec_shape", "=", "kwargs", ".", "get", "(", "'vec_shape'", ",", "np", ".", "shape", ")", "\n", "self", ".", "src_vec_trans", "=", "kwargs", ".", "get", "(", "'src_vec_trans'", ",", "None", ")", "\n", "# self.steps = int(math.floor(len(self.examples) / float(batchsz)))", "\n", "self", ".", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "examples", ")", "/", "float", "(", "batchsz", ")", ")", ")", "\n", "self", ".", "trim", "=", "bool", "(", "kwargs", ".", "get", "(", "'trim'", ",", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelDataFeed.__init__": [[280, 282], ["data_utils.ExampleDataFeed.__init__"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["def", "__init__", "(", "self", ",", "examples", ",", "batchsz", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SeqLabelDataFeed", ",", "self", ")", ".", "__init__", "(", "examples", ",", "batchsz", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelDataFeed._batch": [[283, 293], ["data_utils.SeqLabelDataFeed.examples.batch", "data_utils.SeqLabelDataFeed.src_vec_trans"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.SeqLabelExamples.batch"], ["", "def", "_batch", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Get a batch of data at step `i`\n        :param i: (``int``) step index\n        :return: A batch tensor x, batch tensor y\n        \"\"\"", "\n", "x", ",", "y", "=", "self", ".", "examples", ".", "batch", "(", "i", ",", "self", ".", "batchsz", ",", "self", ".", "vec_alloc", ")", "\n", "if", "self", ".", "src_vec_trans", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "src_vec_trans", "(", "x", ")", "\n", "", "return", "x", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.long_0_tensor_alloc": [[15, 19], ["data_utils.long_tensor_alloc", "long_tensor_alloc.zero_"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.long_tensor_alloc"], ["def", "long_0_tensor_alloc", "(", "nelements", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "lt", "=", "long_tensor_alloc", "(", "nelements", ")", "\n", "lt", ".", "zero_", "(", ")", "\n", "return", "lt", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.long_tensor_alloc": [[21, 25], ["torch.LongTensor", "torch.LongTensor", "type", "len"], "function", ["None"], ["", "def", "long_tensor_alloc", "(", "dims", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "if", "type", "(", "dims", ")", "==", "int", "or", "len", "(", "dims", ")", "==", "1", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "dims", ")", "\n", "", "return", "torch", ".", "LongTensor", "(", "*", "dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.PrettyMetrics.__repr__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"%0.2f\"", "%", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.__init__": [[17, 30], ["len", "numpy.zeros", "type", "range", "len", "metrics.ConfusionMatrix.labels.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Constructor with input labels\n\n        :param labels: Either a dictionary (`k=int,v=str`) or an array of labels\n        \"\"\"", "\n", "if", "type", "(", "labels", ")", "is", "dict", ":", "\n", "            ", "self", ".", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                ", "self", ".", "labels", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "labels", "=", "labels", "\n", "", "nc", "=", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "_cm", "=", "np", ".", "zeros", "(", "(", "nc", ",", "nc", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.add": [[31, 39], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "truth", ",", "guess", ")", ":", "\n", "        ", "\"\"\"Add a single value to the confusion matrix based off `truth` and `guess`\n\n        :param truth: The real `y` value (or ground truth label)\n        :param guess: The guess for `y` value (or assertion)\n        \"\"\"", "\n", "\n", "self", ".", "_cm", "[", "truth", ",", "guess", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.__str__": [[40, 53], ["max", "enumerate", "enumerate", "range", "max", "len", "len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "values", "=", "[", "]", "\n", "width", "=", "max", "(", "8", ",", "max", "(", "len", "(", "x", ")", "for", "x", "in", "self", ".", "labels", ")", "+", "1", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "[", "''", "]", "+", "self", ".", "labels", ")", ":", "\n", "            ", "values", "+=", "[", "\"{:>{width}}\"", ".", "format", "(", "label", ",", "width", "=", "width", "+", "1", ")", "]", "\n", "", "values", "+=", "[", "'\\n'", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", ":", "\n", "            ", "values", "+=", "[", "\"{:>{width}}\"", ".", "format", "(", "label", ",", "width", "=", "width", "+", "1", ")", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "labels", ")", ")", ":", "\n", "                ", "values", "+=", "[", "\"{:{width}d}\"", ".", "format", "(", "self", ".", "_cm", "[", "i", ",", "j", "]", ",", "width", "=", "width", "+", "1", ")", "]", "\n", "", "values", "+=", "[", "'\\n'", "]", "\n", "", "values", "+=", "[", "'\\n'", "]", "\n", "return", "''", ".", "join", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.reset": [[54, 58], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the matrix\n        \"\"\"", "\n", "self", ".", "_cm", "*=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_correct": [[59, 65], ["metrics.ConfusionMatrix._cm.diagonal().sum", "metrics.ConfusionMatrix._cm.diagonal"], "methods", ["None"], ["", "def", "get_correct", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the diagonals of the confusion matrix\n\n        :return: (``int``) Number of correct classifications\n        \"\"\"", "\n", "return", "self", ".", "_cm", ".", "diagonal", "(", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_total": [[66, 72], ["metrics.ConfusionMatrix._cm.sum"], "methods", ["None"], ["", "def", "get_total", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get total classifications\n\n        :return: (``int``) total classifications\n        \"\"\"", "\n", "return", "self", ".", "_cm", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_acc": [[73, 79], ["float", "metrics.ConfusionMatrix.get_total", "metrics.ConfusionMatrix.get_correct"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_total", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_correct"], ["", "def", "get_acc", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the accuracy\n\n        :return: (``float``) accuracy\n        \"\"\"", "\n", "return", "float", "(", "self", ".", "get_correct", "(", ")", ")", "/", "self", ".", "get_total", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_recall": [[80, 87], ["numpy.sum", "numpy.diag"], "methods", ["None"], ["", "def", "get_recall", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the recall\n\n        :return: (``float``) recall\n        \"\"\"", "\n", "total", "=", "np", ".", "sum", "(", "self", ".", "_cm", ",", "axis", "=", "1", ")", "+", "0.0000001", "\n", "return", "np", ".", "diag", "(", "self", ".", "_cm", ")", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_precision": [[88, 95], ["numpy.sum", "numpy.diag"], "methods", ["None"], ["", "def", "get_precision", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the precision\n        :return: (``float``) precision\n        \"\"\"", "\n", "\n", "total", "=", "np", ".", "sum", "(", "self", ".", "_cm", ",", "axis", "=", "0", ")", "+", "0.0000001", "\n", "return", "np", ".", "diag", "(", "self", ".", "_cm", ")", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_mean_precision": [[96, 102], ["numpy.mean", "metrics.ConfusionMatrix.get_precision"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_precision"], ["", "def", "get_mean_precision", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the mean precision across labels\n\n        :return: (``float``) mean precision\n        \"\"\"", "\n", "return", "np", ".", "mean", "(", "self", ".", "get_precision", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_mean_recall": [[103, 109], ["numpy.mean", "metrics.ConfusionMatrix.get_recall"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_recall"], ["", "def", "get_mean_recall", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the mean recall across labels\n\n        :return: (``float``) mean recall\n        \"\"\"", "\n", "return", "np", ".", "mean", "(", "self", ".", "get_recall", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_macro_f": [[110, 121], ["metrics.ConfusionMatrix.get_mean_precision", "metrics.ConfusionMatrix.get_mean_recall", "Exception"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_mean_precision", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_mean_recall"], ["", "def", "get_macro_f", "(", "self", ",", "beta", "=", "1", ")", ":", "\n", "        ", "\"\"\"Get the macro F_b, with adjustable beta (defaulting to F1)\n\n        :param beta: (``float``) defaults to 1 (F1)\n        :return: (``float``) macro F_b\n        \"\"\"", "\n", "p", "=", "self", ".", "get_mean_precision", "(", ")", "\n", "r", "=", "self", ".", "get_mean_recall", "(", ")", "\n", "if", "beta", "<", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Beta must be greater than 0'", ")", "\n", "", "return", "(", "beta", "*", "beta", "+", "1", ")", "*", "p", "*", "r", "/", "(", "beta", "*", "beta", "*", "p", "+", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_f": [[122, 133], ["metrics.ConfusionMatrix.get_precision", "metrics.ConfusionMatrix.get_recall", "Exception"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_precision", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_recall"], ["", "def", "get_f", "(", "self", ",", "beta", "=", "1", ")", ":", "\n", "        ", "\"\"\"Get 2 class F_b, with adjustable beta (defaulting to F1)\n\n        :param beta: (``float``) defaults to 1 (F1)\n        :return: (``float``) 2-class F_b\n        \"\"\"", "\n", "p", "=", "self", ".", "get_precision", "(", ")", "[", "1", "]", "\n", "r", "=", "self", ".", "get_recall", "(", ")", "[", "1", "]", "\n", "if", "beta", "<", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Beta must be greater than 0'", ")", "\n", "", "return", "(", "beta", "*", "beta", "+", "1", ")", "*", "p", "*", "r", "/", "(", "beta", "*", "beta", "*", "p", "+", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_all_metrics": [[134, 153], ["metrics.PrettyMetrics", "metrics.PrettyMetrics", "metrics.PrettyMetrics", "metrics.ConfusionMatrix.get_correct", "metrics.ConfusionMatrix.get_total", "len", "metrics.PrettyMetrics", "metrics.PrettyMetrics", "metrics.PrettyMetrics", "metrics.PrettyMetrics", "metrics.PrettyMetrics", "metrics.PrettyMetrics", "metrics.ConfusionMatrix.get_acc", "metrics.ConfusionMatrix.get_f", "metrics.ConfusionMatrix.get_mean_precision", "metrics.ConfusionMatrix.get_mean_recall", "metrics.ConfusionMatrix.get_macro_f", "metrics.ConfusionMatrix.get_precision", "metrics.ConfusionMatrix.get_recall"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_correct", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_total", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_acc", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_f", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_mean_precision", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_mean_recall", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_macro_f", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_precision", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_recall"], ["", "def", "get_all_metrics", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make a map of metrics suitable for reporting, keyed by metric name\n\n        :return: (``dict``) Map of metrics keyed by metric names\n        \"\"\"", "\n", "metrics", "=", "{", "}", "\n", "metrics", "[", "'acc'", "]", "=", "PrettyMetrics", "(", "self", ".", "get_acc", "(", ")", "*", "100", ")", "\n", "metrics", "[", "'correct'", "]", "=", "PrettyMetrics", "(", "self", ".", "get_correct", "(", ")", ")", "\n", "metrics", "[", "'total'", "]", "=", "PrettyMetrics", "(", "self", ".", "get_total", "(", ")", ")", "\n", "# If 2 class, assume second class is positive AKA 1", "\n", "if", "len", "(", "self", ".", "labels", ")", "==", "2", ":", "\n", "            ", "metrics", "[", "'precision'", "]", "=", "PrettyMetrics", "(", "self", ".", "get_precision", "(", ")", "[", "1", "]", "*", "100", ")", "\n", "metrics", "[", "'recall'", "]", "=", "PrettyMetrics", "(", "self", ".", "get_recall", "(", ")", "[", "1", "]", "*", "100", ")", "\n", "metrics", "[", "'f1'", "]", "=", "PrettyMetrics", "(", "self", ".", "get_f", "(", "1", ")", "*", "100", ")", "\n", "", "else", ":", "\n", "            ", "metrics", "[", "'mean_precision'", "]", "=", "PrettyMetrics", "(", "self", ".", "get_mean_precision", "(", ")", "*", "100", ")", "\n", "metrics", "[", "'mean_recall'", "]", "=", "PrettyMetrics", "(", "self", ".", "get_mean_recall", "(", ")", "*", "100", ")", "\n", "metrics", "[", "'macro_f1'", "]", "=", "PrettyMetrics", "(", "self", ".", "get_macro_f", "(", "1", ")", "*", "100", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.add_batch": [[154, 163], ["zip", "metrics.ConfusionMatrix.add"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.Progbar.add"], ["", "def", "add_batch", "(", "self", ",", "truth", ",", "guess", ")", ":", "\n", "        ", "\"\"\"Add a batch of data to the confusion matrix\n\n        :param truth: The truth tensor\n        :param guess: The guess tensor\n        :return:\n        \"\"\"", "\n", "for", "truth_i", ",", "guess_i", "in", "zip", "(", "truth", ",", "guess", ")", ":", "\n", "            ", "self", ".", "add", "(", "truth_i", ",", "guess_i", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.AdaptiveDropout.__init__": [[7, 9], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AdaptiveDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.AdaptiveDropout.forward": [[10, 19], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.autograd.Variable.type_as", "torch.autograd.Variable.type_as", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.mul.size", "torch.mul.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "p", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "p", "=", "1.", "-", "p", ".", "data", "\n", "temp", "=", "torch", ".", "rand", "(", "input", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "<", "p", "\n", "temp", "=", "torch", ".", "autograd", ".", "Variable", "(", "temp", ".", "type_as", "(", "p", ")", "/", "p", ")", "\n", "input", "=", "torch", ".", "mul", "(", "input", ",", "temp", ")", "\n", "return", "input", "\n", "", "else", ":", "\n", "            ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.LockedDropout.__init__": [[22, 25], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "LockedDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.LockedDropout.forward": [[26, 34], ["x.data.new().bernoulli_", "mask.expand_as.expand_as.expand_as", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.data.new", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "not", "self", ".", "dropout", ":", "\n", "            ", "return", "x", "\n", "", "m", "=", "x", ".", "data", ".", "new", "(", "1", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", ".", "bernoulli_", "(", "1", "-", "self", ".", "dropout", ")", "\n", "mask", "=", "torch", ".", "autograd", ".", "Variable", "(", "m", ",", "requires_grad", "=", "False", ")", "/", "(", "\n", "1", "-", "self", ".", "dropout", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "x", ")", "\n", "return", "mask", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.WeightDrop.__init__": [[93, 100], ["super().__init__", "layers.WeightDrop._setup"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.WeightDrop._setup"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "weights", ",", "dropout", "=", "0", ",", "variational", "=", "False", ")", ":", "\n", "        ", "super", "(", "WeightDrop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "variational", "=", "variational", "\n", "self", ".", "_setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.WeightDrop.widget_demagnetizer_y2k_edition": [[101, 107], ["None"], "methods", ["None"], ["", "def", "widget_demagnetizer_y2k_edition", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# We need to replace flatten_parameters with a nothing function", "\n", "# It must be a function rather than a lambda as otherwise pickling explodes", "\n", "# We can't write boring code though, so ... WIDGET DEMAGNETIZER Y2K EDITION!", "\n", "# (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.WeightDrop._setup": [[108, 120], ["issubclass", "type", "print", "getattr", "layers.WeightDrop.module.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter"], "methods", ["None"], ["", "def", "_setup", "(", "self", ")", ":", "\n", "# Terrible temporary solution to an issue regarding compacting weights re: CUDNN RNN", "\n", "        ", "if", "issubclass", "(", "type", "(", "self", ".", "module", ")", ",", "torch", ".", "nn", ".", "RNNBase", ")", ":", "\n", "            ", "self", ".", "module", ".", "flatten_parameters", "=", "self", ".", "widget_demagnetizer_y2k_edition", "\n", "\n", "", "for", "name_w", "in", "self", ".", "weights", ":", "\n", "            ", "print", "(", "\n", "'Applying weight drop of {} to {}'", ".", "format", "(", "self", ".", "dropout", ",", "name_w", ")", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "name_w", ")", "\n", "del", "self", ".", "module", ".", "_parameters", "[", "name_w", "]", "\n", "self", ".", "module", ".", "register_parameter", "(", "name_w", "+", "'_raw'", ",", "\n", "torch", ".", "nn", ".", "Parameter", "(", "w", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.WeightDrop._setweights": [[121, 135], ["getattr", "setattr", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.cuda.cuda.cuda", "mask.cuda.cuda.expand_as", "getattr.size"], "methods", ["None"], ["", "", "def", "_setweights", "(", "self", ")", ":", "\n", "        ", "for", "name_w", "in", "self", ".", "weights", ":", "\n", "            ", "raw_w", "=", "getattr", "(", "self", ".", "module", ",", "name_w", "+", "'_raw'", ")", "\n", "w", "=", "None", "\n", "if", "self", ".", "variational", ":", "\n", "                ", "mask", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "ones", "(", "raw_w", ".", "size", "(", "0", ")", ",", "1", ")", ")", "\n", "if", "raw_w", ".", "is_cuda", ":", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "mask", "=", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "mask", ",", "p", "=", "self", ".", "dropout", ",", "\n", "training", "=", "True", ")", "\n", "w", "=", "mask", ".", "expand_as", "(", "raw_w", ")", "*", "raw_w", "\n", "", "else", ":", "\n", "                ", "w", "=", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "raw_w", ",", "p", "=", "self", ".", "dropout", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "setattr", "(", "self", ".", "module", ",", "name_w", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.WeightDrop.forward": [[136, 139], ["layers.WeightDrop._setweights", "layers.WeightDrop.module.forward"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.WeightDrop._setweights", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.AEModel.forward"], ["", "", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "_setweights", "(", ")", "\n", "return", "self", ".", "module", ".", "forward", "(", "*", "args", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.embedded_dropout": [[36, 61], ["torch.embedding", "torch.autograd.Variable", "torch.autograd.Variable", "embed.weight.data.new().resize_().bernoulli_().expand_as", "scale.expand_as", "embed.weight.data.new().resize_().bernoulli_", "embed.weight.data.new().resize_", "embed.weight.data.new", "embed.weight.size"], "function", ["None"], ["", "", "def", "embedded_dropout", "(", "embed", ",", "words", ",", "dropout", "=", "0.1", ",", "scale", "=", "None", ")", ":", "\n", "    ", "if", "dropout", ":", "\n", "        ", "mask", "=", "embed", ".", "weight", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "\n", "(", "embed", ".", "weight", ".", "size", "(", "0", ")", ",", "1", ")", ")", ".", "bernoulli_", "(", "1", "-", "dropout", ")", ".", "expand_as", "(", "\n", "embed", ".", "weight", ")", "/", "(", "1", "-", "dropout", ")", "\n", "mask", "=", "torch", ".", "autograd", ".", "Variable", "(", "mask", ")", "\n", "masked_embed_weight", "=", "mask", "*", "embed", ".", "weight", "\n", "", "else", ":", "\n", "        ", "masked_embed_weight", "=", "embed", ".", "weight", "\n", "", "if", "scale", ":", "\n", "        ", "masked_embed_weight", "=", "scale", ".", "expand_as", "(", "\n", "masked_embed_weight", ")", "*", "masked_embed_weight", "\n", "\n", "", "padding_idx", "=", "embed", ".", "padding_idx", "\n", "if", "padding_idx", "is", "None", ":", "\n", "        ", "padding_idx", "=", "-", "1", "\n", "\n", "", "X", "=", "F", ".", "embedding", "(", "words", ",", "\n", "masked_embed_weight", ",", "\n", "padding_idx", ",", "\n", "embed", ".", "max_norm", ",", "\n", "embed", ".", "norm_type", ",", "\n", "embed", ".", "scale_grad_by_freq", ",", "\n", "embed", ".", "sparse", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.embedded_adaptive_dropout": [[63, 90], ["embed._backend.Embedding.apply", "embed.weight.data.new().resize_().bernoulli_", "torch.autograd.Variable", "torch.autograd.Variable", "scale.expand_as", "embed.weight.data.new().resize_", "torch.unsqueeze", "torch.unsqueeze", "embed.weight.data.new", "embed.weight.size"], "function", ["None"], ["", "def", "embedded_adaptive_dropout", "(", "embed", ",", "words", ",", "dropout", "=", "0.1", ",", "scale", "=", "None", ",", "\n", "is_training", "=", "True", ")", ":", "\n", "    ", "if", "is_training", ":", "\n", "        ", "mask", "=", "embed", ".", "weight", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "\n", "(", "embed", ".", "weight", ".", "size", "(", "0", ")", ",", "1", ")", ")", ".", "bernoulli_", "(", "1", "-", "dropout", ")", "\n", "mask", "=", "(", "mask", "/", "torch", ".", "unsqueeze", "(", "(", "1", "-", "dropout", ")", ",", "-", "1", ")", ")", ".", "expand_as", "(", "\n", "embed", ".", "weight", ")", "\n", "mask", "=", "torch", ".", "autograd", ".", "Variable", "(", "mask", ")", "\n", "masked_embed_weight", "=", "mask", "*", "embed", ".", "weight", "\n", "", "else", ":", "\n", "        ", "masked_embed_weight", "=", "embed", ".", "weight", "\n", "", "if", "scale", ":", "\n", "        ", "masked_embed_weight", "=", "scale", ".", "expand_as", "(", "\n", "masked_embed_weight", ")", "*", "masked_embed_weight", "\n", "\n", "", "padding_idx", "=", "embed", ".", "padding_idx", "\n", "if", "padding_idx", "is", "None", ":", "\n", "        ", "padding_idx", "=", "-", "1", "\n", "\n", "", "X", "=", "embed", ".", "_backend", ".", "Embedding", ".", "apply", "(", "words", ",", "\n", "masked_embed_weight", ",", "\n", "padding_idx", ",", "\n", "embed", ".", "max_norm", ",", "\n", "embed", ".", "norm_type", ",", "\n", "embed", ".", "scale_grad_by_freq", ",", "\n", "embed", ".", "sparse", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.w2v.load_pretrained_embeddings": [[10, 29], ["gensim.models.KeyedVectors.load_word2vec_format", "range", "print", "numpy.array", "len", "word_vectors.append", "numpy.random.uniform", "unknown_vocab.append", "float", "len"], "function", ["None"], ["def", "load_pretrained_embeddings", "(", "filename", ",", "known_vocab", "=", "None", ",", "unif_weight", "=", "None", ")", ":", "\n", "    ", "uw", "=", "0.0", "if", "unif_weight", "is", "None", "else", "unif_weight", "\n", "word_vectors", "=", "[", "]", "\n", "count", "=", "0", "\n", "unknown_vocab", "=", "[", "]", "\n", "embeddings", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "filename", ",", "binary", "=", "False", ",", "unicode_errors", "=", "'ignore'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "known_vocab", ")", ")", ":", "\n", "        ", "word", "=", "known_vocab", "[", "i", "]", "\n", "try", ":", "\n", "            ", "word_vec", "=", "embeddings", ".", "vectors", "[", "embeddings", ".", "vocab", "[", "word", "]", ".", "index", "]", "\n", "count", "+=", "1", "\n", "", "except", "KeyError", ":", "\n", "            ", "word_vec", "=", "np", ".", "random", ".", "uniform", "(", "-", "uw", ",", "uw", ",", "embeddings", ".", "vector_size", ")", "\n", "unknown_vocab", ".", "append", "(", "word", ")", "\n", "", "word_vectors", ".", "append", "(", "word_vec", ")", "\n", "\n", "", "print", "(", "\"Percentage of Pre-trained word vectors: {}\"", ".", "\n", "format", "(", "count", "/", "float", "(", "len", "(", "known_vocab", ")", ")", "*", "100", ")", ")", "\n", "return", "np", ".", "array", "(", "word_vectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.split_sentence": [[24, 37], ["s.replace.strip().split", "s.replace.lower", "s.replace.replace", "s.replace.strip", "words.extend", "words.append", "split_pattern.split"], "function", ["None"], ["def", "split_sentence", "(", "s", ",", "tok", "=", "False", ")", ":", "\n", "    ", "if", "tok", ":", "\n", "        ", "s", "=", "s", ".", "lower", "(", ")", "\n", "s", "=", "s", ".", "replace", "(", "'\\u2019'", ",", "\"'\"", ")", "\n", "# s = digit_pattern.sub('0', s)", "\n", "", "words", "=", "[", "]", "\n", "for", "word", "in", "s", ".", "strip", "(", ")", ".", "split", "(", ")", ":", "\n", "        ", "if", "tok", ":", "\n", "            ", "words", ".", "extend", "(", "split_pattern", ".", "split", "(", "word", ")", ")", "\n", "", "else", ":", "\n", "            ", "words", ".", "append", "(", "word", ")", "\n", "", "", "words", "=", "[", "w", "for", "w", "in", "words", "if", "w", "]", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.open_file": [[39, 41], ["io.open"], "function", ["None"], ["", "def", "open_file", "(", "path", ")", ":", "\n", "    ", "return", "io", ".", "open", "(", "path", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "'ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.count_lines": [[43, 46], ["preprocess.open_file", "sum"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.open_file"], ["", "def", "count_lines", "(", "path", ")", ":", "\n", "    ", "with", "open_file", "(", "path", ")", "as", "f", ":", "\n", "        ", "return", "sum", "(", "[", "1", "for", "_", "in", "f", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.read_file": [[48, 62], ["preprocess.count_lines", "progressbar.ProgressBar", "preprocess.open_file", "progressbar.ProgressBar.", "line.strip().split", "preprocess.split_sentence", "line.strip"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.count_lines", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.open_file", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.split_sentence"], ["", "", "def", "read_file", "(", "path", ",", "tok", "=", "False", ",", "ek", "=", "False", ")", ":", "\n", "    ", "n_lines", "=", "count_lines", "(", "path", ")", "\n", "bar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "with", "open_file", "(", "path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "bar", "(", "f", ",", "max_value", "=", "n_lines", ")", ":", "\n", "            ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "(", "not", "ek", ")", ":", "\n", "                ", "label", "=", "tokens", "[", "0", "]", "\n", "text", "=", "' '", ".", "join", "(", "tokens", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "label", "=", "-", "1", "\n", "text", "=", "' '", ".", "join", "(", "tokens", ")", "\n", "", "words", "=", "split_sentence", "(", "text", ",", "tok", ")", "\n", "yield", "label", ",", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.count_words": [[64, 71], ["collections.Counter", "preprocess.read_file", "collections.Counter.most_common"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.read_file"], ["", "", "", "def", "count_words", "(", "path", ",", "max_vocab_size", "=", "40000", ",", "tok", "=", "False", ",", "ek", "=", "False", ")", ":", "\n", "    ", "counts", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "_", ",", "words", "in", "read_file", "(", "path", ",", "tok", ",", "ek", ")", ":", "\n", "        ", "for", "word", "in", "words", ":", "\n", "            ", "counts", "[", "word", "]", "+=", "1", "\n", "", "", "vocab", "=", "[", "word", "for", "(", "word", ",", "_", ")", "in", "counts", ".", "most_common", "(", "max_vocab_size", ")", "]", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.get_label_vocab": [[73, 78], ["set", "preprocess.read_file", "sorted", "set.add", "list"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.read_file", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.Progbar.add"], ["", "def", "get_label_vocab", "(", "path", ",", "tok", "=", "False", ")", ":", "\n", "    ", "vocab_label", "=", "set", "(", ")", "\n", "for", "label", ",", "_", "in", "read_file", "(", "path", ",", "tok", ")", ":", "\n", "        ", "vocab_label", ".", "add", "(", "label", ")", "\n", "", "return", "sorted", "(", "list", "(", "vocab_label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.make_dataset": [[80, 95], ["preprocess.read_file", "print", "print", "labels.append", "preprocess.make_array", "dataset.append"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.read_file", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.make_array"], ["", "def", "make_dataset", "(", "path", ",", "w2id", ",", "tok", "=", "False", ",", "ek", "=", "False", ")", ":", "\n", "    ", "labels", "=", "[", "]", "\n", "dataset", "=", "[", "]", "\n", "token_count", "=", "0", "\n", "unknown_count", "=", "0", "\n", "for", "label", ",", "words", "in", "read_file", "(", "path", ",", "tok", ",", "ek", ")", ":", "\n", "        ", "labels", ".", "append", "(", "label", ")", "\n", "array", "=", "make_array", "(", "w2id", ",", "words", ")", "\n", "dataset", ".", "append", "(", "array", ")", "\n", "token_count", "+=", "array", ".", "size", "\n", "unknown_count", "+=", "(", "array", "==", "Vocab_Pad", ".", "UNK", ")", ".", "sum", "(", ")", "\n", "", "print", "(", "'# of tokens: %d'", "%", "token_count", ")", "\n", "print", "(", "'# of unknown: %d (%.2f %%)'", "%", "(", "unknown_count", ",", "\n", "100.", "*", "unknown_count", "/", "token_count", ")", ")", "\n", "return", "labels", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.preprocess.make_array": [[97, 100], ["numpy.array", "word_id.get"], "function", ["None"], ["", "def", "make_array", "(", "word_id", ",", "words", ")", ":", "\n", "    ", "ids", "=", "[", "word_id", ".", "get", "(", "word", ",", "Vocab_Pad", ".", "UNK", ")", "for", "word", "in", "words", "]", "\n", "return", "np", ".", "array", "(", "ids", ",", "'i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.SequenceCriteria.__init__": [[38, 41], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_weight", ")", ":", "\n", "        ", "super", "(", "SequenceCriteria", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criteria", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "class_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.SequenceCriteria.forward": [[42, 46], ["model.SequenceCriteria.criteria"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "# This is BxT, which is what we want!", "\n", "        ", "loss", "=", "self", ".", "criteria", "(", "inputs", ",", "targets", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.LSTMEncoder.__init__": [[81, 96], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "model.Encoder", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "LSTMEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "dropout", ")", "\n", "if", "config", ".", "projection", ":", "\n", "            ", "self", ".", "projection", "=", "nn", ".", "Linear", "(", "config", ".", "d_units", ",", "config", ".", "d_proj", ")", "\n", "self", ".", "act1", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "config", ".", "encoder_input_size", "=", "config", ".", "d_proj", "if", "config", ".", "projection", "else", "config", ".", "d_units", "\n", "\n", "self", ".", "lstm_encoder", "=", "Encoder", "(", "config", ")", "\n", "seq_in_size", "=", "config", ".", "d_hidden", "\n", "if", "config", ".", "brnn", ":", "\n", "            ", "seq_in_size", "*=", "2", "\n", "", "self", ".", "lstm_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "lstm_dropout", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.LSTMEncoder.encode_sent": [[97, 104], ["model.LSTMEncoder.act1", "model.LstmPadding", "model.LSTMEncoder.projection"], "methods", ["None"], ["", "def", "encode_sent", "(", "self", ",", "embedded", ",", "sent_len", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "projection", ":", "\n", "            ", "embedded", "=", "self", ".", "act1", "(", "self", ".", "projection", "(", "embedded", ")", ")", "\n", "", "memory_bank", ",", "encoder_final", "=", "LstmPadding", "(", "embedded", ",", "\n", "sent_len", ",", "\n", "self", ".", "config", ")", "(", "self", ".", "lstm_encoder", ")", "\n", "return", "memory_bank", ",", "encoder_final", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.LSTMEncoder.forward": [[105, 110], ["model.LSTMEncoder.encode_sent", "model.LSTMEncoder.lstm_dropout"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.LSTMEncoder.encode_sent"], ["", "def", "forward", "(", "self", ",", "embedded", ",", "batch", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "memory_bank", ",", "encoder_final", "=", "self", ".", "encode_sent", "(", "embedded", ",", "\n", "batch", ".", "sent_len", ")", "\n", "memory_bank", "=", "self", ".", "lstm_dropout", "(", "memory_bank", ")", "\n", "return", "memory_bank", ",", "encoder_final", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Classifier.__init__": [[113, 165], ["torch.Module.__init__", "model._linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model._linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model._linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "model._linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model._linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "model._linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model._linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "model._linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "model._linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model._linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "seq_in_size", "=", "config", ".", "d_hidden", "\n", "if", "config", ".", "brnn", ":", "\n", "            ", "seq_in_size", "*=", "2", "\n", "", "if", "self", ".", "config", ".", "use_addn", "or", "True", ":", "\n", "            ", "layers1", "=", "[", "_linear", "(", "config", ".", "addn_dim", "-", "5", ",", "64", ",", "config", ".", "init_scalar", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", ",", "\n", "_linear", "(", "64", ",", "256", ",", "config", ".", "init_scalar", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "]", "\n", "layers2", "=", "[", "_linear", "(", "config", ".", "addn_dim", "-", "14", ",", "64", ",", "config", ".", "init_scalar", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", ",", "\n", "_linear", "(", "64", ",", "256", ",", "config", ".", "init_scalar", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "]", "\n", "#             layers2 = [_linear(256, 256, config.init_scalar),", "\n", "#                       nn.ReLU()]", "\n", "layers3", "=", "[", "_linear", "(", "1024", ",", "1024", ",", "config", ".", "init_scalar", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "]", "\n", "\n", "layers4", "=", "[", "_linear", "(", "1024", "+", "256", ",", "1024", ",", "config", ".", "init_scalar", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "]", "\n", "\n", "layers5", "=", "[", "_linear", "(", "256", ",", "256", ",", "config", ".", "init_scalar", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "]", "\n", "\n", "layers6", "=", "[", "_linear", "(", "300", ",", "300", ",", "config", ".", "init_scalar", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "]", "\n", "\n", "self", ".", "addn_model1", "=", "nn", ".", "Sequential", "(", "*", "layers1", ")", "\n", "self", ".", "addn_model2", "=", "nn", ".", "Sequential", "(", "*", "layers2", ")", "\n", "self", ".", "addn_model3", "=", "nn", ".", "Sequential", "(", "*", "layers3", ")", "\n", "self", ".", "addn_model4", "=", "nn", ".", "Sequential", "(", "*", "layers4", ")", "\n", "self", ".", "addn_model5", "=", "nn", ".", "Sequential", "(", "*", "layers5", ")", "\n", "self", ".", "ext_model1", "=", "nn", ".", "Sequential", "(", "*", "layers6", ")", "\n", "\n", "seq_in_size", "+=", "256", "+", "300", "\n", "\n", "", "if", "config", ".", "down_projection", ":", "\n", "            ", "self", ".", "down_projection", "=", "_linear", "(", "seq_in_size", ",", "\n", "config", ".", "d_down_proj", ",", "\n", "config", ".", "init_scalar", ")", "\n", "self", ".", "act", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "seq_in_size", "=", "config", ".", "d_down_proj", "\n", "\n", "", "self", ".", "clf", "=", "_linear", "(", "seq_in_size", ",", "\n", "config", ".", "num_classes", ",", "\n", "config", ".", "init_scalar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Classifier.attention_net": [[166, 172], ["torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "b.reshape().squeeze().unsqueeze", "a.transpose", "b.reshape().squeeze", "b.reshape"], "methods", ["None"], ["", "def", "attention_net", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "self", ".", "weights1", "=", "torch", ".", "bmm", "(", "a", ",", "\n", "b", ".", "reshape", "(", "1", ",", "-", "1", ",", "\n", "self", ".", "config", ".", "d_hidden", "*", "2", ")", ".", "squeeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "self", ".", "weights2", "=", "F", ".", "softmax", "(", "self", ".", "weights1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "return", "torch", ".", "bmm", "(", "a", ".", "transpose", "(", "1", ",", "2", ")", ",", "self", ".", "weights2", ")", ".", "squeeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Classifier.forward": [[173, 215], ["y.float.float.float", "model.Classifier.addn_model1", "model.Classifier.addn_model2", "model.apply_cross_stitch", "model.Classifier.addn_model3", "model.Classifier.transpose().contiguous", "model.Classifier.transpose().contiguous", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "model.Classifier.ext_model1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Classifier.addn_model4", "model.Classifier.addn_model5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Classifier.clf", "model.Classifier.attention_net", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "x.transpose().contiguous.transpose().contiguous.transpose().contiguous", "numpy.sqrt", "model.Classifier.act", "model.Classifier.transpose", "model.Classifier.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.Classifier.down_projection", "x.transpose().contiguous.transpose().contiguous.transpose", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "numpy.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.apply_cross_stitch", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Classifier.attention_net"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "z", ",", "final_state", ")", ":", "\n", "        ", "if", "True", ":", "\n", "            ", "sent_output", "=", "self", ".", "attention_net", "(", "x", ",", "final_state", "[", "0", "]", ")", "\n", "#             print(self.weights1, self.weights2)", "\n", "#             num = np.random.ranint(1,50000)", "\n", "torch", ".", "save", "(", "self", ".", "weights1", ",", "'attention_weights/attnWeights.pth'", ")", "\n", "torch", ".", "save", "(", "self", ".", "weights2", ",", "'attention_weights/attnWeights-2.pth'", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "self", ".", "config", ".", "pool_type", "==", "\"max_pool\"", ":", "\n", "                ", "sent_output", "=", "torch", ".", "max", "(", "x", ",", "2", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "config", ".", "pool_type", "==", "\"avg_pool\"", ":", "\n", "                ", "normalize", "=", "1.", "/", "np", ".", "sqrt", "(", "self", ".", "max_sent_len", ")", "\n", "sent_output", "=", "torch", ".", "sum", "(", "x", ",", "2", ")", ".", "mul_", "(", "normalize", ")", "\n", "\n", "", "", "y", "=", "y", ".", "float", "(", ")", "\n", "\n", "y1", "=", "self", ".", "addn_model1", "(", "y", "[", ":", ",", ":", "14", "]", ")", "\n", "y2", "=", "self", ".", "addn_model2", "(", "y", "[", ":", ",", "14", ":", "]", ")", "\n", "\n", "y1", ",", "y2", "=", "apply_cross_stitch", "(", "y1", ",", "y2", ")", "\n", "sent_output", "=", "self", ".", "addn_model3", "(", "sent_output", ")", "\n", "z", "=", "z", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "z", "=", "z", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "normalize", "=", "1.", "/", "np", ".", "sqrt", "(", "10", ")", "\n", "z", "=", "torch", ".", "sum", "(", "z", ",", "2", ")", ".", "mul_", "(", "normalize", ")", "\n", "\n", "z", "=", "self", ".", "ext_model1", "(", "z", ")", "\n", "\n", "sent_output", "=", "torch", ".", "cat", "(", "(", "sent_output", ",", "y1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "sent_output", "=", "self", ".", "addn_model4", "(", "sent_output", ")", "\n", "\n", "y2", "=", "self", ".", "addn_model5", "(", "y2", ")", "\n", "\n", "sent_output", "=", "torch", ".", "cat", "(", "(", "sent_output", ",", "y2", ",", "z", ")", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "config", ".", "down_projection", ":", "\n", "            ", "sent_output", "=", "self", ".", "act", "(", "self", ".", "down_projection", "(", "sent_output", ")", ")", "\n", "\n", "", "logits", "=", "self", ".", "clf", "(", "sent_output", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.LstmPadding.__init__": [[218, 234], ["len", "max", "numpy.argsort", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "sent.index_select.index_select.index_select", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "numpy.argsort", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "sent_len.copy", "numpy.sort", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sent", ",", "sent_len", ",", "config", ")", ":", "\n", "# sent_len: [max_len, ..., min_len] (bsize)", "\n", "# sent: Variable(seqlen x bsize x worddim)", "\n", "\n", "# Sort by length (keep idx)", "\n", "        ", "self", ".", "batch_size", "=", "len", "(", "sent_len", ")", "\n", "self", ".", "max_sent_len", "=", "max", "(", "sent_len", ")", "\n", "sent_len", ",", "idx_sort", "=", "np", ".", "sort", "(", "sent_len", ")", "[", ":", ":", "-", "1", "]", ",", "np", ".", "argsort", "(", "-", "sent_len", ")", "\n", "self", ".", "idx_unsort", "=", "np", ".", "argsort", "(", "idx_sort", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "idx_sort", "=", "torch", ".", "from_numpy", "(", "idx_sort", ")", ".", "type", "(", "batch_utils", ".", "LONG_TYPE", ")", "\n", "sent", "=", "sent", ".", "index_select", "(", "1", ",", "Variable", "(", "idx_sort", ")", ")", "\n", "\n", "# Handling padding in Recurrent Networks", "\n", "self", ".", "sent_packed", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "sent", ",", "sent_len", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.LstmPadding.__call__": [[235, 249], ["torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "lstm_enc_func", "memory_bank.transpose().contiguous.transpose().contiguous.index_select", "memory_bank.transpose().contiguous.transpose().contiguous.transpose().contiguous", "enc_final[].index_select", "enc_final[].index_select", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "memory_bank.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "lstm_enc_func", ")", ":", "\n", "# Un-sort by length", "\n", "        ", "idx_unsort", "=", "torch", ".", "from_numpy", "(", "self", ".", "idx_unsort", ")", ".", "type", "(", "batch_utils", ".", "LONG_TYPE", ")", "\n", "memory_bank", ",", "enc_final", "=", "lstm_enc_func", "(", "self", ".", "sent_packed", ",", "\n", "self", ".", "batch_size", ")", "\n", "\n", "enc_final", "=", "enc_final", "[", "0", "]", ".", "index_select", "(", "1", ",", "Variable", "(", "idx_unsort", ")", ")", ",", "enc_final", "[", "1", "]", ".", "index_select", "(", "1", ",", "Variable", "(", "idx_unsort", ")", ")", "\n", "\n", "memory_bank", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "memory_bank", ")", "[", "0", "]", "\n", "memory_bank", "=", "memory_bank", ".", "index_select", "(", "1", ",", "Variable", "(", "idx_unsort", ")", ")", "\n", "memory_bank", "=", "memory_bank", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "return", "memory_bank", ",", "enc_final", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Encoder.__init__": [[252, 260], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "input_size", "=", "config", ".", "encoder_input_size", ",", "\n", "hidden_size", "=", "config", ".", "d_hidden", ",", "\n", "num_layers", "=", "config", ".", "num_layers", ",", "\n", "dropout", "=", "config", ".", "lstm_dropout", ",", "\n", "bidirectional", "=", "config", ".", "brnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Encoder.forward": [[261, 264], ["model.Encoder.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "batch_size", ")", ":", "\n", "        ", "memory_bank", ",", "encoder_final", "=", "self", ".", "rnn", "(", "inputs", ")", "\n", "return", "memory_bank", ",", "encoder_final", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Embedder.__init__": [[267, 285], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "print", "numpy.load().astype", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "layers.LockedDropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Embedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "embedder", "=", "nn", ".", "Embedding", "(", "config", ".", "n_vocab", ",", "\n", "config", ".", "d_units", ",", "\n", "padding_idx", "=", "preprocess", ".", "Vocab_Pad", ".", "PAD", ")", "\n", "# max_norm=config.max_embedding_norm)", "\n", "if", "config", ".", "use_pretrained_embeddings", "and", "False", ":", "\n", "            ", "print", "(", "\"Loading pre-trained word vectors\"", ")", "\n", "embeddings", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "input", ",", "\n", "config", ".", "save_data", "+", "\n", "\".word_vectors.npy\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "embedder", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ",", "\n", "requires_grad", "=", "config", ".", "train_embeddings", ")", "\n", "", "if", "config", ".", "adaptive_dropout", ":", "\n", "            ", "self", ".", "word_dropout", "=", "LockedDropout", "(", "dropout", "=", "config", ".", "locked_dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "word_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "word_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Embedder._normalize": [[286, 293], ["weights.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "", "def", "_normalize", "(", "self", ",", "emb", ")", ":", "\n", "        ", "weights", "=", "self", ".", "vocab_freqs", "/", "torch", ".", "sum", "(", "self", ".", "vocab_freqs", ")", "\n", "weights", "=", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "mean", "=", "torch", ".", "sum", "(", "weights", "*", "emb", ",", "0", ",", "keepdim", "=", "True", ")", "\n", "var", "=", "torch", ".", "sum", "(", "weights", "*", "torch", ".", "pow", "(", "emb", "-", "mean", ",", "2.", ")", ",", "0", ",", "keepdim", "=", "True", ")", "\n", "stddev", "=", "torch", ".", "sqrt", "(", "1e-6", "+", "var", ")", "\n", "return", "(", "emb", "-", "mean", ")", "/", "stddev", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Embedder.forward": [[294, 309], ["model.Embedder._normalize", "layers.embedded_dropout", "model.Embedder.word_dropout().transpose().contiguous", "model.Embedder.embedder", "model.Embedder.word_dropout", "model.Embedder.word_dropout().transpose", "model.Embedder.word_dropout", "model.Embedder.transpose().contiguous", "model.Embedder.transpose"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.Embedder._normalize", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.layers.embedded_dropout"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "# Normalize word embedding params", "\n", "        ", "if", "self", ".", "config", ".", "normalize_embedding", ":", "\n", "            ", "self", ".", "embedder", ".", "weight", ".", "data", "=", "self", ".", "_normalize", "(", "self", ".", "embedder", ".", "weight", ".", "data", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "adaptive_dropout", ":", "\n", "            ", "word_embedding", "=", "embedded_dropout", "(", "self", ".", "embedder", ",", "\n", "batch", ".", "word_ids", ",", "\n", "dropout", "=", "self", ".", "config", ".", "word_dropout", "\n", "if", "self", ".", "training", "else", "0", ")", "\n", "dropped", "=", "self", ".", "word_dropout", "(", "word_embedding", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "word_embedding", "=", "self", ".", "embedder", "(", "batch", ".", "word_ids", ")", "\n", "dropped", "=", "self", ".", "word_dropout", "(", "word_embedding", ")", "\n", "", "return", "dropped", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.AEModel.__init__": [[328, 348], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "rnn_decoder.StdRNNDecoder", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AEModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "config", ".", "n_vocab", ",", "\n", "config", ".", "d_units", ",", "\n", "padding_idx", "=", "preprocess", ".", "Vocab_Pad", ".", "PAD", ")", "\n", "self", ".", "decoder", "=", "StdRNNDecoder", "(", "rnn_type", "=", "'LSTM'", ",", "\n", "bidirectional_encoder", "=", "True", ",", "\n", "num_layers", "=", "1", ",", "\n", "hidden_size", "=", "512", ",", "\n", "dropout", "=", "0.2", ",", "\n", "embeddings", "=", "self", ".", "embed", ",", "\n", "attn_type", "=", "\"general\"", ")", "\n", "self", ".", "affine", "=", "nn", ".", "Linear", "(", "512", ",", "\n", "config", ".", "n_vocab", ",", "\n", "bias", "=", "True", ")", "\n", "weight", "=", "torch", ".", "ones", "(", "config", ".", "n_vocab", ")", "\n", "weight", "[", "preprocess", ".", "Vocab_Pad", ".", "PAD", "]", "=", "0", "\n", "self", ".", "criterion", "=", "nn", ".", "NLLLoss", "(", "weight", ",", "\n", "size_average", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.AEModel.output_and_loss": [[349, 366], ["model.seq_func", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "t_block.view", "model.AEModel.criterion", "model.AEModel.sum", "weights.sum"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.seq_func"], ["", "def", "output_and_loss", "(", "self", ",", "h_block", ",", "t_block", ")", ":", "\n", "        ", "batch", ",", "length", ",", "units", "=", "h_block", ".", "shape", "\n", "# shape : (batch * sequence_length, num_classes)", "\n", "logits_flat", "=", "seq_func", "(", "self", ".", "affine", ",", "\n", "h_block", ",", "\n", "reconstruct_shape", "=", "False", ")", "\n", "# shape : (batch * sequence_length, num_classes)", "\n", "log_probs_flat", "=", "F", ".", "log_softmax", "(", "logits_flat", ",", "\n", "dim", "=", "-", "1", ")", "\n", "rebatch", ",", "_", "=", "logits_flat", ".", "shape", "\n", "concat_t_block", "=", "t_block", ".", "view", "(", "rebatch", ")", "\n", "weights", "=", "(", "concat_t_block", ">=", "1", ")", ".", "float", "(", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "log_probs_flat", ",", "\n", "concat_t_block", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "/", "(", "weights", ".", "sum", "(", ")", "+", "1e-13", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.AEModel.forward": [[367, 384], ["batch_utils.seq2seq_pad_concat", "tgt_in_block.transpose().contiguous.transpose().contiguous.transpose().contiguous", "memory_bank.transpose().contiguous.transpose().contiguous.transpose().contiguous", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "model.AEModel.decoder.init_decoder_state", "model.AEModel.decoder", "decoder_outputs.transpose().contiguous.transpose().contiguous.transpose().contiguous", "model.AEModel.output_and_loss", "tgt_in_block.transpose().contiguous.transpose().contiguous.transpose", "memory_bank.transpose().contiguous.transpose().contiguous.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "decoder_outputs.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.rnn_decoder.RNNDecoderBase.init_decoder_state", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.AEModel.output_and_loss"], ["", "def", "forward", "(", "self", ",", "memory_bank", ",", "enc_final", ",", "lengths", ",", "ly_batch_raw", ",", "\n", "dec_state", "=", "None", ")", ":", "\n", "        ", "tgt_in_block", ",", "tgt_out_block", "=", "batch_utils", ".", "seq2seq_pad_concat", "(", "\n", "ly_batch_raw", ",", "-", "1", ")", "\n", "tgt_in_block", "=", "tgt_in_block", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# tgt = tgt[:-1]  # exclude last target from inputs", "\n", "memory_bank", "=", "memory_bank", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "lengths", "=", "torch", ".", "from_numpy", "(", "lengths", ")", ".", "type", "(", "batch_utils", ".", "LONG_TYPE", ")", "\n", "enc_state", "=", "self", ".", "decoder", ".", "init_decoder_state", "(", "enc_final", ")", "\n", "decoder_outputs", ",", "dec_state", ",", "attns", "=", "self", ".", "decoder", "(", "tgt_in_block", ",", "\n", "memory_bank", ",", "\n", "enc_state", "if", "dec_state", "is", "None", "\n", "else", "dec_state", ",", "\n", "memory_lengths", "=", "lengths", ")", "\n", "decoder_outputs", "=", "decoder_outputs", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "loss", "=", "self", ".", "output_and_loss", "(", "decoder_outputs", ",", "tgt_out_block", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._sequence_mask": [[19, 34], ["torch.autograd.Variable", "torch.autograd.Variable.size", "torch.range().long", "torch.range().long", "torch.range().long", "torch.range().long", "torch.range().long.unsqueeze().expand", "torch.autograd.Variable", "torch.autograd.Variable.unsqueeze().expand_as", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.autograd.Variable.data.max", "seq_range_expand.cuda.cuda", "torch.range", "torch.range", "torch.range", "torch.range", "torch.range().long.unsqueeze", "torch.autograd.Variable.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "_sequence_mask", "(", "sequence_length", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "sequence_length", "=", "Variable", "(", "\n", "torch", ".", "from_numpy", "(", "sequence_length", ")", ".", "type", "(", "batch_utils", ".", "LONG_TYPE", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "if", "max_len", "is", "None", ":", "\n", "        ", "max_len", "=", "sequence_length", ".", "data", ".", "max", "(", ")", "\n", "", "batch_size", "=", "sequence_length", ".", "size", "(", "0", ")", "\n", "seq_range", "=", "torch", ".", "range", "(", "0", ",", "max_len", "-", "1", ")", ".", "long", "(", ")", "\n", "seq_range_expand", "=", "seq_range", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", "seq_range_expand", "=", "Variable", "(", "seq_range_expand", ",", "requires_grad", "=", "False", ")", "\n", "if", "sequence_length", ".", "is_cuda", ":", "\n", "        ", "seq_range_expand", "=", "seq_range_expand", ".", "cuda", "(", ")", "\n", "", "seq_length_expand", "=", "(", "sequence_length", ".", "unsqueeze", "(", "1", ")", "\n", ".", "expand_as", "(", "seq_range_expand", ")", ")", "\n", "return", "seq_range_expand", "<", "seq_length_expand", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear": [[48, 53], ["torch.Linear", "torch.xavier_uniform"], "function", ["None"], ["", "", "def", "_linear", "(", "in_sz", ",", "out_sz", ",", "unif", ")", ":", "\n", "\n", "    ", "l", "=", "nn", ".", "Linear", "(", "in_sz", ",", "out_sz", ")", "\n", "weight_init", ".", "xavier_uniform", "(", "l", ".", "weight", ".", "data", ")", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._append2seq": [[55, 58], ["seq.add_module", "str"], "function", ["None"], ["", "def", "_append2seq", "(", "seq", ",", "modules", ")", ":", "\n", "    ", "for", "module_", "in", "modules", ":", "\n", "        ", "seq", ".", "add_module", "(", "str", "(", "module_", ")", ",", "module_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.binary_cross_entropy": [[60, 67], ["y.float.float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.log", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.log", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.log", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.log", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.log", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.log", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.log", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.log"], ["", "", "def", "binary_cross_entropy", "(", "x", ",", "y", ",", "smoothing", "=", "0.", ",", "epsilon", "=", "1e-12", ")", ":", "\n", "    ", "y", "=", "y", ".", "float", "(", ")", "\n", "if", "smoothing", ">", "0", ":", "\n", "        ", "smoothing", "*=", "2", "\n", "y", "=", "y", "*", "(", "1", "-", "smoothing", ")", "+", "0.5", "*", "smoothing", "\n", "", "return", "-", "torch", ".", "mean", "(", "\n", "torch", ".", "log", "(", "x", "+", "epsilon", ")", "*", "y", "+", "torch", ".", "log", "(", "1.0", "-", "x", "+", "epsilon", ")", "*", "(", "1", "-", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.apply_cross_stitch": [[68, 79], ["torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "_linear().cuda", "_linear().cuda.cuda", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model._linear", "_linear().cuda."], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model._linear"], ["", "def", "apply_cross_stitch", "(", "input_1", ",", "input_2", ")", ":", "\n", "    ", "input_", "=", "torch", ".", "cat", "(", "(", "input_1", ",", "input_2", ")", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "cross_stitch", "=", "_linear", "(", "input_", ".", "shape", "[", "1", "]", ",", "input_", ".", "shape", "[", "1", "]", ",", "1.0", ")", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "cross_stitch", "(", "input_", ")", ".", "cuda", "(", ")", "\n", "\n", "output1", "=", "torch", ".", "reshape", "(", "out", "[", ":", ",", ":", "input_1", ".", "shape", "[", "1", "]", "]", ",", "input_1", ".", "shape", ")", "\n", "output2", "=", "torch", ".", "reshape", "(", "out", "[", ":", ",", "input_1", ".", "shape", "[", "1", "]", ":", "]", ",", "input_2", ".", "shape", ")", "\n", "\n", "return", "output1", ",", "output2", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.seq_func": [[311, 325], ["x.view", "func", "pad_remover.restore.view", "pad_remover.remove", "pad_remover.restore"], "function", ["None"], ["", "", "def", "seq_func", "(", "func", ",", "x", ",", "reconstruct_shape", "=", "True", ",", "pad_remover", "=", "None", ")", ":", "\n", "    ", "batch", ",", "length", ",", "units", "=", "x", ".", "shape", "\n", "e", "=", "x", ".", "view", "(", "batch", "*", "length", ",", "units", ")", "\n", "if", "pad_remover", ":", "\n", "        ", "e", "=", "pad_remover", ".", "remove", "(", "e", ")", "\n", "", "e", "=", "func", "(", "e", ")", "\n", "if", "pad_remover", ":", "\n", "        ", "e", "=", "pad_remover", ".", "restore", "(", "e", ")", "\n", "", "if", "not", "reconstruct_shape", ":", "\n", "        ", "return", "e", "\n", "", "out_units", "=", "e", ".", "shape", "[", "1", "]", "\n", "e", "=", "e", ".", "view", "(", "batch", ",", "length", ",", "out_units", ")", "\n", "assert", "(", "e", ".", "shape", "==", "(", "batch", ",", "length", ",", "out_units", ")", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.at_loss": [[386, 403], ["embedder", "embedder", "embedder.retain_grad", "encoder", "torch.cross_entropy", "F.cross_entropy.backward", "embedder.grad.data.transpose().contiguous", "model.get_normalized_vector", "d.transpose().contiguous.transpose().contiguous", "encoder", "torch.cross_entropy", "clf", "embedder", "clf", "embedder.grad.data.transpose", "d.transpose().contiguous.transpose", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.get_normalized_vector"], ["", "", "def", "at_loss", "(", "embedder", ",", "encoder", ",", "clf", ",", "batch", ",", "addn_batch", ",", "ext_batch", ",", "perturb_norm_length", "=", "5.0", ")", ":", "\n", "    ", "embedded", "=", "embedder", "(", "batch", ")", "\n", "ext_embed", "=", "embedder", "(", "batch", ")", "\n", "embedded", ".", "retain_grad", "(", ")", "\n", "#     ext_embed.retain_grad()", "\n", "one", ",", "two", "=", "encoder", "(", "embedded", ",", "batch", ")", "\n", "ce", "=", "F", ".", "cross_entropy", "(", "(", "clf", "(", "one", ",", "addn_batch", ",", "ext_embed", ",", "two", ")", ")", ",", "batch", ".", "labels", ")", "\n", "ce", ".", "backward", "(", ")", "\n", "\n", "d", "=", "embedded", ".", "grad", ".", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "d", "=", "get_normalized_vector", "(", "d", ")", "\n", "d", "=", "d", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "d", "=", "embedder", "(", "batch", ")", "+", "(", "perturb_norm_length", "*", "Variable", "(", "d", ")", ")", "\n", "one", ",", "two", "=", "encoder", "(", "d", ",", "batch", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "clf", "(", "one", ",", "addn_batch", ",", "ext_embed", ",", "two", ")", ",", "batch", ".", "labels", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.get_normalized_vector": [[405, 415], ["d.view.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "d.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "get_normalized_vector", "(", "d", ")", ":", "\n", "    ", "B", ",", "T", ",", "D", "=", "d", ".", "shape", "\n", "d", "=", "d", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "d", "/=", "(", "1e-12", "+", "torch", ".", "max", "(", "torch", ".", "abs", "(", "d", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", "\n", "# d /= (1e-12 + torch.max(torch.abs(d), dim=1, keepdim=True)[0])", "\n", "\n", "d", "/=", "torch", ".", "sqrt", "(", "1e-6", "+", "torch", ".", "sum", "(", "d", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "# d /= torch.sqrt(1e-6 + torch.sum(d**2, dim=1, keepdim=True))", "\n", "d", "=", "d", ".", "view", "(", "B", ",", "T", ",", "D", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.kl_categorical": [[417, 422], ["torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log_softmax", "torch.log_softmax"], "function", ["None"], ["", "def", "kl_categorical", "(", "p_logit", ",", "q_logit", ")", ":", "\n", "    ", "p", "=", "F", ".", "softmax", "(", "p_logit", ",", "dim", "=", "-", "1", ")", "\n", "_kl", "=", "torch", ".", "sum", "(", "p", "*", "(", "F", ".", "log_softmax", "(", "p_logit", ",", "dim", "=", "-", "1", ")", "-", "\n", "F", ".", "log_softmax", "(", "q_logit", ",", "dim", "=", "-", "1", ")", ")", ",", "1", ")", "\n", "return", "torch", ".", "mean", "(", "_kl", ")", "# F.sum(_kl) / xp.prod(xp.array(_kl.shape))", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.vat_loss": [[424, 446], ["embedder", "embedder", "torch.randn().type", "torch.randn().type", "torch.randn().type", "torch.randn().type", "get_normalized_vector().transpose().contiguous.transpose().contiguous", "get_normalized_vector().transpose().contiguous", "range", "encoder", "clf", "model.kl_categorical", "torch.autograd.Variable", "torch.autograd.Variable.retain_grad", "encoder", "clf", "model.kl_categorical", "kl_categorical.backward", "torch.autograd.Variable.grad.data.transpose().contiguous", "get_normalized_vector().transpose().contiguous", "torch.autograd.Variable", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "get_normalized_vector().transpose().contiguous.transpose", "get_normalized_vector().transpose", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.grad.data.transpose", "get_normalized_vector().transpose", "model.get_normalized_vector", "model.get_normalized_vector"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.kl_categorical", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.kl_categorical", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.get_normalized_vector", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.get_normalized_vector"], ["", "def", "vat_loss", "(", "embedder", ",", "encoder", ",", "clf", ",", "batch", ",", "addn_batch", ",", "ext_batch", ",", "perturb_norm_length", "=", "5.0", ",", "\n", "small_constant_for_finite_diff", "=", "1e-1", ",", "Ip", "=", "1", ",", "p_logit", "=", "None", ")", ":", "\n", "    ", "embedded", "=", "embedder", "(", "batch", ")", "\n", "ext_embed", "=", "embedder", "(", "ext_batch", ")", "\n", "#     ext_embed.retain_grad()", "\n", "d", "=", "torch", ".", "randn", "(", "embedded", ".", "shape", ")", ".", "type", "(", "batch_utils", ".", "FLOAT_TYPE", ")", "\n", "d", "=", "d", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "d", "=", "get_normalized_vector", "(", "d", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "for", "ip", "in", "range", "(", "Ip", ")", ":", "\n", "        ", "x_d", "=", "Variable", "(", "embedded", ".", "data", "+", "(", "small_constant_for_finite_diff", "*", "d", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "x_d", ".", "retain_grad", "(", ")", "\n", "one", ",", "two", "=", "encoder", "(", "x_d", ",", "batch", ")", "\n", "p_d_logit", "=", "clf", "(", "one", ",", "addn_batch", ",", "ext_embed", ",", "two", ")", "\n", "kl_loss", "=", "kl_categorical", "(", "Variable", "(", "p_logit", ".", "data", ")", ",", "p_d_logit", ")", "\n", "kl_loss", ".", "backward", "(", ")", "\n", "d", "=", "x_d", ".", "grad", ".", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "d", "=", "get_normalized_vector", "(", "d", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "x_adv", "=", "embedded", "+", "(", "perturb_norm_length", "*", "Variable", "(", "d", ")", ")", "\n", "one", ",", "two", "=", "encoder", "(", "x_adv", ",", "batch", ")", "\n", "p_adv_logit", "=", "clf", "(", "one", ",", "addn_batch", ",", "ext_embed", ",", "two", ")", "\n", "return", "kl_categorical", "(", "Variable", "(", "p_logit", ".", "data", ")", ",", "p_adv_logit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.entropy_loss": [[448, 451], ["torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "p_logit.size", "torch.log_softmax"], "function", ["None"], ["", "def", "entropy_loss", "(", "p_logit", ")", ":", "\n", "    ", "p", "=", "F", ".", "softmax", "(", "p_logit", ",", "dim", "=", "-", "1", ")", "\n", "return", "-", "1", "*", "torch", ".", "sum", "(", "p", "*", "F", ".", "log_softmax", "(", "p_logit", ",", "dim", "=", "-", "1", ")", ")", "/", "p_logit", ".", "size", "(", ")", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training.__init__": [[85, 137], ["list", "model.Embedder", "model.LSTMEncoder", "model.Classifier", "model.SequenceCriteria", "tensorboardX.SummaryWriter", "torch.optim.Adam", "torch.optim.Adam", "training.Training._init_or_load_model", "exp_moving_avg.ExponentialMovingAverage", "training.Training.ema_embedder.register", "exp_moving_avg.ExponentialMovingAverage", "training.Training.ema_encoder.register", "exp_moving_avg.ExponentialMovingAverage", "training.Training.ema_clf.register", "time.time.time", "logging.getLogger", "logging.getLogger.setLevel", "logging.basicConfig", "config.id2label.keys", "model.AEModel", "training.Training._get_trainabe_modules", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "training.Training.embedder.cuda", "training.Training.encoder.cuda", "training.Training.clf.cuda", "training.Training.clf_loss.cuda", "training.Training.embedder.state_dict", "training.Training.encoder.state_dict", "training.Training.clf.state_dict", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "training.Training.ae.cuda"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._init_or_load_model", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._get_trainabe_modules"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "logger", "=", "None", ")", ":", "\n", "        ", "if", "logger", "is", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "'logger'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(message)s'", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n", "", "self", ".", "logger", "=", "logger", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "classes", "=", "list", "(", "config", ".", "id2label", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_classes", "=", "config", ".", "num_classes", "\n", "\n", "self", ".", "embedder", "=", "Embedder", "(", "self", ".", "config", ")", "\n", "self", ".", "encoder", "=", "LSTMEncoder", "(", "self", ".", "config", ")", "\n", "self", ".", "clf", "=", "Classifier", "(", "self", ".", "config", ")", "\n", "self", ".", "clf_loss", "=", "SequenceCriteria", "(", "class_weight", "=", "None", ")", "\n", "if", "self", ".", "config", ".", "lambda_ae", ">", "0", ":", "self", ".", "ae", "=", "AEModel", "(", "self", ".", "config", ")", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "\"TFBoardSummary\"", ")", "\n", "self", ".", "global_steps", "=", "0", "\n", "self", ".", "enc_clf_opt", "=", "Adam", "(", "self", ".", "_get_trainabe_modules", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "lr", ",", "\n", "betas", "=", "(", "config", ".", "beta1", ",", "\n", "config", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ",", "\n", "eps", "=", "config", ".", "eps", ")", "\n", "\n", "if", "config", ".", "scheduler", "==", "\"ReduceLROnPlateau\"", ":", "\n", "            ", "self", ".", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "self", ".", "enc_clf_opt", ",", "\n", "mode", "=", "'max'", ",", "\n", "factor", "=", "config", ".", "lr_decay", ",", "\n", "patience", "=", "config", ".", "patience", ",", "\n", "verbose", "=", "True", ")", "\n", "", "elif", "config", ".", "scheduler", "==", "\"ExponentialLR\"", ":", "\n", "            ", "self", ".", "scheduler", "=", "lr_scheduler", ".", "ExponentialLR", "(", "self", ".", "enc_clf_opt", ",", "\n", "gamma", "=", "config", ".", "gamma", ")", "\n", "\n", "", "self", ".", "_init_or_load_model", "(", ")", "\n", "if", "config", ".", "multi_gpu", ":", "\n", "            ", "self", ".", "embedder", ".", "cuda", "(", ")", "\n", "self", ".", "encoder", ".", "cuda", "(", ")", "\n", "self", ".", "clf", ".", "cuda", "(", ")", "\n", "self", ".", "clf_loss", ".", "cuda", "(", ")", "\n", "if", "self", ".", "config", ".", "lambda_ae", ">", "0", ":", "self", ".", "ae", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "ema_embedder", "=", "ExponentialMovingAverage", "(", "decay", "=", "0.999", ")", "\n", "self", ".", "ema_embedder", ".", "register", "(", "self", ".", "embedder", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "ema_encoder", "=", "ExponentialMovingAverage", "(", "decay", "=", "0.999", ")", "\n", "self", ".", "ema_encoder", ".", "register", "(", "self", ".", "encoder", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "ema_clf", "=", "ExponentialMovingAverage", "(", "decay", "=", "0.999", ")", "\n", "self", ".", "ema_clf", ".", "register", "(", "self", ".", "clf", ".", "state_dict", "(", ")", ")", "\n", "\n", "self", ".", "time_s", "=", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._get_trainabe_modules": [[138, 145], ["list", "list", "list", "list", "training.Training.clf.parameters", "training.Training.ae.parameters", "training.Training.embedder.parameters", "training.Training.encoder.parameters"], "methods", ["None"], ["", "def", "_get_trainabe_modules", "(", "self", ")", ":", "\n", "        ", "param_list", "=", "list", "(", "self", ".", "embedder", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "encoder", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "clf", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "config", ".", "lambda_ae", ">", "0", ":", "\n", "            ", "param_list", "+=", "list", "(", "self", ".", "ae", ".", "parameters", "(", ")", ")", "\n", "", "return", "param_list", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._get_l2_norm_loss": [[146, 152], ["training.Training._get_trainabe_modules", "p.data.norm"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._get_trainabe_modules"], ["", "def", "_get_l2_norm_loss", "(", "self", ")", ":", "\n", "        ", "total_norm", "=", "0.", "\n", "for", "p", "in", "self", ".", "_get_trainabe_modules", "(", ")", ":", "\n", "            ", "param_norm", "=", "p", ".", "data", ".", "norm", "(", "p", "=", "2", ")", "\n", "total_norm", "+=", "param_norm", "# ** 2", "\n", "", "return", "total_norm", "# / 2.", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._init_or_load_model": [[153, 158], ["helpers.ensure_directory.ensure_directory"], "methods", ["None"], ["", "def", "_init_or_load_model", "(", "self", ")", ":", "\n", "# if not self._load_model():", "\n", "        ", "ensure_directory", "(", "self", ".", "config", ".", "output_path", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "best_accuracy", "=", "-", "np", ".", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._compute_vocab_freq": [[159, 169], ["collections.Counter", "numpy.zeros", "collections.Counter.items", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "collections.Counter.update", "collections.Counter.update", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.Progbar.update", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.Progbar.update"], ["", "def", "_compute_vocab_freq", "(", "self", ",", "train_", ",", "dev_", ")", ":", "\n", "        ", "counter", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "_", ",", "ids_", "in", "train_", ":", "\n", "            ", "counter", ".", "update", "(", "ids_", ")", "\n", "", "for", "_", ",", "ids_", "in", "dev_", ":", "\n", "            ", "counter", ".", "update", "(", "ids_", ")", "\n", "", "word_freq", "=", "np", ".", "zeros", "(", "self", ".", "config", ".", "n_vocab", ")", "\n", "for", "index_", ",", "freq_", "in", "counter", ".", "items", "(", ")", ":", "\n", "            ", "word_freq", "[", "index_", "]", "=", "freq_", "\n", "", "return", "torch", ".", "from_numpy", "(", "word_freq", ")", ".", "type", "(", "batch_utils", ".", "FLOAT_TYPE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._save_model": [[170, 181], ["torch.save", "torch.save", "torch.save", "torch.save", "os.path.join"], "methods", ["None"], ["", "def", "_save_model", "(", "self", ")", ":", "\n", "        ", "state", "=", "{", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'state_dict_encoder'", ":", "self", ".", "ema_encoder", ".", "shadow_variable_dict", ",", "\n", "# self.encoder.state_dict(),", "\n", "'state_dict_embedder'", ":", "self", ".", "ema_embedder", ".", "shadow_variable_dict", ",", "\n", "# self.embedder.state_dict(),", "\n", "'state_dict_clf'", ":", "self", ".", "ema_clf", ".", "shadow_variable_dict", ",", "\n", "# self.clf.state_dict(),", "\n", "'best_accuracy'", ":", "self", ".", "best_accuracy", "}", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_path", ",", "\n", "self", ".", "config", ".", "model_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._load_model": [[182, 197], ["os.path.join", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "training.Training.encoder.load_state_dict", "training.Training.clf.load_state_dict", "training.Training.logger.info"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load"], ["", "def", "_load_model", "(", "self", ")", ":", "\n", "        ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_path", ",", "\n", "self", ".", "config", ".", "model_file", ")", "\n", "if", "self", ".", "config", ".", "load_checkpoint", "and", "os", ".", "path", ".", "isfile", "(", "checkpoint_path", ")", ":", "\n", "# Code taken from here: https://github.com/pytorch/examples/blob/master/imagenet/main.py", "\n", "            ", "dict_", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "self", ".", "epoch", "=", "dict_", "[", "'epoch'", "]", "\n", "self", ".", "best_accuracy", "=", "dict_", "[", "'best_accuracy'", "]", "\n", "#             self.embedder.load_state_dict(dict_['state_dict_embedder'])", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "dict_", "[", "'state_dict_encoder'", "]", ")", "\n", "self", ".", "clf", ".", "load_state_dict", "(", "dict_", "[", "'state_dict_clf'", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "checkpoint_path", ",", "\n", "self", ".", "epoch", ")", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training.__call__": [[198, 214], ["training.Training.logger.info", "training.Training._train", "training.Training._evaluate", "torch.load", "torch.load", "torch.load", "torch.load", "training.Training.embedder.load_state_dict", "training.Training.encoder.load_state_dict", "training.Training.clf.load_state_dict", "training.Training.encoder.eval", "training.Training.clf.eval", "training.Training.encoder", "training.Training.clf", "training.Training.get_accuracy", "training.Training.embedder"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._train", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._evaluate", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.data_utils.TSVSeqLabelReader.load", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training.get_accuracy"], ["", "", "def", "__call__", "(", "self", ",", "train", ",", "dev", ",", "test", ",", "unlabel", ",", "addn", ",", "addn_un", ",", "addn_test", ",", "ext_train", ",", "ext_test", ",", "mode", "=", "\"train\"", ",", "checkPth", "=", "None", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Start training'", ")", "\n", "if", "(", "mode", "==", "\"train\"", ")", ":", "\n", "            ", "self", ".", "_train", "(", "train", ",", "dev", ",", "unlabel", ",", "addn", ",", "addn_un", ",", "addn_test", ",", "ext_train", ",", "ext_test", ")", "\n", "self", ".", "_evaluate", "(", "test", ",", "addn_test", ",", "ext_test", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "load", "(", "checkPth", ")", "\n", "self", ".", "embedder", ".", "load_state_dict", "(", "model", "[", "'state_dict_embedder'", "]", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "model", "[", "'state_dict_encoder'", "]", ")", "\n", "self", ".", "clf", ".", "load_state_dict", "(", "model", "[", "'state_dict_clf'", "]", ")", "\n", "#             self._evaluate(test, addn_test, model)", "\n", "self", ".", "encoder", ".", "eval", "(", ")", "\n", "self", ".", "clf", ".", "eval", "(", ")", "\n", "one", ",", "two", "=", "self", ".", "encoder", "(", "self", ".", "embedder", "(", "batch", ")", ",", "batch", ")", "\n", "pred", "=", "self", ".", "clf", "(", "one", ",", "addn_batch", ",", "two", ")", "\n", "accuracy", "=", "self", ".", "get_accuracy", "(", "cm", ",", "pred", ".", "data", ",", "batch", ".", "labels", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._create_iter": [[215, 224], ["torchtext.data.iterator.pool", "len"], "methods", ["None"], ["", "", "def", "_create_iter", "(", "self", ",", "data_", ",", "wbatchsize", ",", "\n", "random_shuffler", "=", "None", ")", ":", "\n", "        ", "iter_", "=", "data", ".", "iterator", ".", "pool", "(", "data_", ",", "\n", "wbatchsize", ",", "\n", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", ")", ",", "\n", "batch_size_fn", "=", "batch_size_fn", ",", "\n", "random_shuffler", "=", "None", "\n", ")", "\n", "return", "iter_", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._run_epoch": [[225, 437], ["addn_dev.cuda", "utils.Statistics", "metrics.ConfusionMatrix", "list", "len", "training.Training.encoder.train", "training.Training.clf.train", "training.Training._create_iter", "training.Training._create_iter", "enumerate", "training.Training._run_evaluate", "training.Training.logger.info", "pprint.pprint", "training.Training._run_evaluate", "training.Training.logger.info", "pprint.pprint", "training.Training.writer.add_scalars", "zip", "list", "zip", "zip", "len", "batch_utils.seq_pad_concat", "training.Training.embedder", "training.Training.encoder", "retAddnBatch().cuda", "batch_utils.seq_pad_concat", "training.Training.embedder", "training.Training.clf", "training.Training.get_accuracy", "training.Training.clf_loss", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "training.Training.data.cpu().numpy", "model.at_loss.data.cpu().numpy", "torch.autograd.Variable.data.cpu().numpy", "torch.autograd.Variable.data.cpu().numpy", "training.Training.data.cpu().numpy", "torch.autograd.Variable.data.cpu().numpy", "torch.autograd.Variable.data.cpu().numpy", "len", "training.Training.enc_clf_opt.zero_grad", "ltotal.backward", "training.Training._get_trainabe_modules", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "training.Training.enc_clf_opt.step", "training.Training.ema_embedder.apply", "training.Training.ema_encoder.apply", "training.Training.ema_clf.apply", "training.report_func", "metrics.ConfusionMatrix.get_all_metrics", "metrics.ConfusionMatrix.get_all_metrics", "itertools.chain.from_iterable", "list", "list", "training.add_noise", "batch_utils.seq_pad_concat", "training.Training.embedder", "training.Training.encoder", "retAddnBatch().cuda", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "model.at_loss", "model.vat_loss", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "model.entropy_loss", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "training.Training.ae", "list", "training.Training.scheduler.step", "training.Training.embedder.named_parameters", "training.Training.encoder.named_parameters", "training.Training.clf.named_parameters", "training.Training._run_evaluate", "training.Training.logger.info", "training.Training.writer.add_scalar", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training.Training.writer.add_pr_curve", "pprint.pprint", "pprint.pprint", "training.Training.encoder.train", "training.Training.clf.train", "zip", "itertools.chain.from_iterable", "next", "training.add_noise", "training.retAddnBatch", "model.vat_loss", "model.entropy_loss", "training.Training.data.cpu", "model.at_loss.data.cpu", "torch.autograd.Variable.data.cpu", "torch.autograd.Variable.data.cpu", "training.Training.data.cpu", "torch.autograd.Variable.data.cpu", "torch.autograd.Variable.data.cpu", "training.Training.embedder.parameters", "cm_.get_all_metrics", "training.Training.logger.info", "training.Training._save_model", "training.Training.scheduler.step", "print", "training.Training._create_iter", "next", "training.retAddnBatch", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "training.Training.clf", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "training.Training.clf", "training.Training._get_l2_norm_loss"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._create_iter", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._create_iter", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._run_evaluate", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._run_evaluate", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training.get_accuracy", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._get_trainabe_modules", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.report_func", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_all_metrics", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_all_metrics", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.add_noise", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.at_loss", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.vat_loss", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.entropy_loss", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._run_evaluate", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.add_noise", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.retAddnBatch", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.vat_loss", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.model.entropy_loss", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.get_all_metrics", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._save_model", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._create_iter", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.retAddnBatch", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._get_l2_norm_loss"], ["", "def", "_run_epoch", "(", "self", ",", "train_data", ",", "dev_data", ",", "unlabel_data", ",", "addn_data", ",", "addn_data_unlab", ",", "addn_dev", ",", "ext_train", ",", "ext_test", ")", ":", "\n", "        ", "addn_dev", ".", "cuda", "(", ")", "\n", "report_stats", "=", "utils", ".", "Statistics", "(", ")", "\n", "cm", "=", "ConfusionMatrix", "(", "self", ".", "classes", ")", "\n", "_", ",", "seq_data", "=", "list", "(", "zip", "(", "*", "train_data", ")", ")", "\n", "total_seq_words", "=", "len", "(", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "seq_data", ")", ")", ")", "\n", "iter_per_epoch", "=", "(", "1.5", "*", "total_seq_words", ")", "//", "self", ".", "config", ".", "wbatchsize", "\n", "\n", "self", ".", "encoder", ".", "train", "(", ")", "\n", "self", ".", "clf", ".", "train", "(", ")", "\n", "#         self.embedder.train()", "\n", "#         print(addn_data)", "\n", "#         print(addn_data.shape)", "\n", "#         print(train_data[:5])", "\n", "train_iter", "=", "self", ".", "_create_iter", "(", "zip", "(", "train_data", ",", "ext_train", ")", ",", "self", ".", "config", ".", "wbatchsize", ")", "\n", "\n", "unlabel_iter", "=", "self", ".", "_create_iter", "(", "unlabel_data", ",", "\n", "self", ".", "config", ".", "wbatchsize_unlabel", ")", "\n", "\n", "sofar", "=", "0", "\n", "sofar_1", "=", "0", "\n", "for", "batch_index", ",", "batch_raw", "in", "enumerate", "(", "train_iter", ")", ":", "\n", "            ", "train_batch_raw", ",", "ext_batch", "=", "zip", "(", "*", "batch_raw", ")", "\n", "seq_iter", "=", "list", "(", "zip", "(", "*", "train_batch_raw", ")", ")", "[", "1", "]", "\n", "seq_words", "=", "len", "(", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "seq_iter", ")", ")", ")", "\n", "report_stats", ".", "n_words", "+=", "seq_words", "\n", "self", ".", "global_steps", "+=", "1", "\n", "\n", "# self.enc_clf_opt.zero_grad()", "\n", "if", "self", ".", "config", ".", "add_noise", ":", "\n", "                ", "train_batch_raw", "=", "add_noise", "(", "train_batch_raw", ",", "\n", "self", ".", "config", ".", "noise_dropout", ",", "\n", "self", ".", "config", ".", "random_permutation", ")", "\n", "", "train_batch", "=", "batch_utils", ".", "seq_pad_concat", "(", "train_batch_raw", ",", "-", "1", ")", "\n", "\n", "#             print(train_batch.shape)", "\n", "\n", "train_embedded", "=", "self", ".", "embedder", "(", "train_batch", ")", "\n", "memory_bank_train", ",", "enc_final_train", "=", "self", ".", "encoder", "(", "train_embedded", ",", "\n", "train_batch", ")", "\n", "\n", "if", "self", ".", "config", ".", "lambda_vat", ">", "0", "or", "self", ".", "config", ".", "lambda_ae", ">", "0", "or", "self", ".", "config", ".", "lambda_entropy", ":", "\n", "                ", "try", ":", "\n", "                    ", "unlabel_batch_raw", "=", "next", "(", "unlabel_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "unlabel_iter", "=", "self", ".", "_create_iter", "(", "unlabel_data", ",", "\n", "self", ".", "config", ".", "wbatchsize_unlabel", ")", "\n", "unlabel_batch_raw", "=", "next", "(", "unlabel_iter", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "add_noise", ":", "\n", "                    ", "unlabel_batch_raw", "=", "add_noise", "(", "unlabel_batch_raw", ",", "\n", "self", ".", "config", ".", "noise_dropout", ",", "\n", "self", ".", "config", ".", "random_permutation", ")", "\n", "", "unlabel_batch", "=", "batch_utils", ".", "seq_pad_concat", "(", "unlabel_batch_raw", ",", "\n", "-", "1", ")", "\n", "unlabel_embedded", "=", "self", ".", "embedder", "(", "unlabel_batch", ")", "\n", "memory_bank_unlabel", ",", "enc_final_unlabel", "=", "self", ".", "encoder", "(", "\n", "unlabel_embedded", ",", "\n", "unlabel_batch", ")", "\n", "\n", "\n", "#             print(memory_bank_unlabel.shape[0])", "\n", "addn_batch_unlab", "=", "retAddnBatch", "(", "addn_data_unlab", ",", "memory_bank_unlabel", ".", "shape", "[", "0", "]", ",", "sofar_1", ")", ".", "cuda", "(", ")", "\n", "sofar_1", "+=", "addn_batch_unlab", ".", "shape", "[", "0", "]", "\n", "#             print(addn_batch_unlab.shape)", "\n", "#             print(memory_bank_train.shape[0])", "\n", "", "addn_batch", "=", "retAddnBatch", "(", "addn_data", ",", "memory_bank_train", ".", "shape", "[", "0", "]", ",", "sofar", ")", ".", "cuda", "(", ")", "\n", "ext_batch", "=", "batch_utils", ".", "seq_pad_concat", "(", "ext_batch", ",", "-", "1", ")", "\n", "\n", "sofar", "+=", "addn_batch", ".", "shape", "[", "0", "]", "\n", "#             print(addn_batch.shape)", "\n", "ext_embedded", "=", "self", ".", "embedder", "(", "ext_batch", ")", "\n", "#             ext_embedded = concat_emb(ext_embedded)", "\n", "\n", "pred", "=", "self", ".", "clf", "(", "memory_bank_train", ",", "addn_batch", ",", "ext_embedded", ",", "enc_final_train", ")", "\n", "#             print(pred)", "\n", "accuracy", "=", "self", ".", "get_accuracy", "(", "cm", ",", "pred", ".", "data", ",", "train_batch", ".", "labels", ".", "data", ")", "\n", "lclf", "=", "self", ".", "clf_loss", "(", "pred", ",", "train_batch", ".", "labels", ")", "\n", "\n", "lat", "=", "Variable", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "-", "1.", "]", ")", ".", "type", "(", "batch_utils", ".", "FLOAT_TYPE", ")", ")", "\n", "lvat", "=", "Variable", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "-", "1.", "]", ")", ".", "type", "(", "batch_utils", ".", "FLOAT_TYPE", ")", ")", "\n", "if", "self", ".", "config", ".", "lambda_at", ">", "0", ":", "\n", "                ", "lat", "=", "at_loss", "(", "self", ".", "embedder", ",", "\n", "self", ".", "encoder", ",", "\n", "self", ".", "clf", ",", "\n", "train_batch", ",", "\n", "addn_batch", ",", "\n", "ext_batch", ",", "\n", "perturb_norm_length", "=", "self", ".", "config", ".", "perturb_norm_length", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "lambda_vat", ">", "0", ":", "\n", "                ", "lvat_train", "=", "vat_loss", "(", "self", ".", "embedder", ",", "\n", "self", ".", "encoder", ",", "\n", "self", ".", "clf", ",", "\n", "train_batch", ",", "\n", "addn_batch", ",", "\n", "ext_batch", ",", "\n", "p_logit", "=", "pred", ",", "\n", "perturb_norm_length", "=", "self", ".", "config", ".", "perturb_norm_length", ")", "\n", "if", "self", ".", "config", ".", "inc_unlabeled_loss", ":", "\n", "                    ", "lvat_unlabel", "=", "vat_loss", "(", "self", ".", "embedder", ",", "\n", "self", ".", "encoder", ",", "\n", "self", ".", "clf", ",", "\n", "unlabel_batch", ",", "\n", "addn_batch_unlab", ",", "\n", "p_logit", "=", "self", ".", "clf", "(", "memory_bank_unlabel", ",", "addn_batch_unlab", ",", "enc_final_unlabel", ")", ",", "\n", "perturb_norm_length", "=", "self", ".", "config", ".", "perturb_norm_length", ")", "\n", "if", "self", ".", "config", ".", "unlabeled_loss_type", "==", "\"AvgTrainUnlabel\"", ":", "\n", "                        ", "lvat", "=", "0.5", "*", "(", "lvat_train", "+", "lvat_unlabel", ")", "\n", "", "elif", "self", ".", "config", ".", "unlabeled_loss_type", "==", "\"Unlabel\"", ":", "\n", "                        ", "lvat", "=", "lvat_unlabel", "\n", "", "", "else", ":", "\n", "                    ", "lvat", "=", "lvat_train", "\n", "\n", "", "", "lentropy", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "-", "1.", "]", ")", ".", "type", "(", "batch_utils", ".", "FLOAT_TYPE", ")", ")", "\n", "if", "self", ".", "config", ".", "lambda_entropy", ">", "0", ":", "\n", "                ", "lentropy_train", "=", "entropy_loss", "(", "pred", ")", "\n", "if", "self", ".", "config", ".", "inc_unlabeled_loss", ":", "\n", "                    ", "lentropy_unlabel", "=", "entropy_loss", "(", "self", ".", "clf", "(", "memory_bank_unlabel", ",", "addn_batch_unlab", ",", "enc_final_unlabel", ")", ")", "\n", "if", "self", ".", "config", ".", "unlabeled_loss_type", "==", "\"AvgTrainUnlabel\"", ":", "\n", "                        ", "lentropy", "=", "0.5", "*", "(", "lentropy_train", "+", "lentropy_unlabel", ")", "\n", "", "elif", "self", ".", "config", ".", "unlabeled_loss_type", "==", "\"Unlabel\"", ":", "\n", "                        ", "lentropy", "=", "lentropy_unlabel", "\n", "", "", "else", ":", "\n", "                    ", "lentropy", "=", "lentropy_train", "\n", "\n", "", "", "lae", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "-", "1.", "]", ")", ".", "type", "(", "batch_utils", ".", "FLOAT_TYPE", ")", ")", "\n", "if", "self", ".", "config", ".", "lambda_ae", ">", "0", ":", "\n", "                ", "lae", "=", "self", ".", "ae", "(", "memory_bank_unlabel", ",", "\n", "enc_final_unlabel", ",", "\n", "unlabel_batch", ".", "sent_len", ",", "\n", "unlabel_batch_raw", ")", "\n", "\n", "", "ltotal", "=", "(", "self", ".", "config", ".", "lambda_clf", "*", "lclf", ")", "+", "(", "self", ".", "config", ".", "lambda_ae", "*", "lae", ")", "+", "(", "self", ".", "config", ".", "lambda_at", "*", "lat", ")", "+", "(", "self", ".", "config", ".", "lambda_vat", "*", "lvat", ")", "+", "(", "self", ".", "config", ".", "lambda_entropy", "*", "lentropy", ")", "\n", "\n", "report_stats", ".", "clf_loss", "+=", "lclf", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "report_stats", ".", "at_loss", "+=", "lat", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "report_stats", ".", "vat_loss", "+=", "lvat", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "report_stats", ".", "ae_loss", "+=", "lae", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "report_stats", ".", "entropy_loss", "+=", "lentropy", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "report_stats", ".", "n_sent", "+=", "len", "(", "pred", ")", "\n", "report_stats", ".", "n_correct", "+=", "accuracy", "\n", "self", ".", "enc_clf_opt", ".", "zero_grad", "(", ")", "\n", "ltotal", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "params_list", "=", "self", ".", "_get_trainabe_modules", "(", ")", "\n", "# Excluding embedder form norm constraint when AT or VAT", "\n", "if", "not", "self", ".", "config", ".", "normalize_embedding", ":", "\n", "                ", "params_list", "+=", "list", "(", "self", ".", "embedder", ".", "parameters", "(", ")", ")", "\n", "\n", "", "norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "params_list", ",", "\n", "self", ".", "config", ".", "max_norm", ")", "\n", "report_stats", ".", "grad_norm", "+=", "norm", "\n", "self", ".", "enc_clf_opt", ".", "step", "(", ")", "\n", "if", "self", ".", "config", ".", "scheduler", "==", "\"ExponentialLR\"", ":", "\n", "                ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "", "self", ".", "ema_embedder", ".", "apply", "(", "self", ".", "embedder", ".", "named_parameters", "(", ")", ")", "\n", "self", ".", "ema_encoder", ".", "apply", "(", "self", ".", "encoder", ".", "named_parameters", "(", ")", ")", "\n", "self", ".", "ema_clf", ".", "apply", "(", "self", ".", "clf", ".", "named_parameters", "(", ")", ")", "\n", "\n", "report_func", "(", "self", ".", "epoch", ",", "\n", "batch_index", ",", "\n", "iter_per_epoch", ",", "\n", "self", ".", "time_s", ",", "\n", "report_stats", ",", "\n", "self", ".", "config", ".", "report_every", ",", "\n", "self", ".", "logger", ")", "\n", "\n", "if", "self", ".", "global_steps", "%", "self", ".", "config", ".", "eval_steps", "==", "0", ":", "\n", "                ", "cm_", ",", "accuracy", ",", "prc_dev", "=", "self", ".", "_run_evaluate", "(", "dev_data", ",", "addn_dev", ",", "ext_test", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"- dev accuracy {} | best dev accuracy {} \"", ".", "format", "(", "accuracy", ",", "self", ".", "best_accuracy", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Dev_Accuracy\"", ",", "accuracy", ",", "\n", "self", ".", "global_steps", ")", "\n", "pred_", ",", "lab_", "=", "zip", "(", "*", "prc_dev", ")", "\n", "pred_", "=", "torch", ".", "cat", "(", "pred_", ")", "\n", "lab_", "=", "torch", ".", "cat", "(", "lab_", ")", "\n", "self", ".", "writer", ".", "add_pr_curve", "(", "\"Dev PR-Curve\"", ",", "lab_", ",", "\n", "pred_", ",", "\n", "self", ".", "global_steps", ")", "\n", "pprint", ".", "pprint", "(", "cm_", ")", "\n", "pprint", ".", "pprint", "(", "cm_", ".", "get_all_metrics", "(", ")", ")", "\n", "if", "accuracy", ">", "self", ".", "best_accuracy", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"- new best score!\"", ")", "\n", "self", ".", "best_accuracy", "=", "accuracy", "\n", "self", ".", "_save_model", "(", ")", "\n", "", "if", "self", ".", "config", ".", "scheduler", "==", "\"ReduceLROnPlateau\"", ":", "\n", "                    ", "self", ".", "scheduler", ".", "step", "(", "accuracy", ")", "\n", "", "self", ".", "encoder", ".", "train", "(", ")", "\n", "#                 self.embedder.train()", "\n", "self", ".", "clf", ".", "train", "(", ")", "\n", "\n", "if", "self", ".", "config", ".", "weight_decay", ">", "0", ":", "\n", "                    ", "print", "(", "\">> Square Norm: %1.4f \"", "%", "self", ".", "_get_l2_norm_loss", "(", ")", ")", "\n", "\n", "", "", "", "cm", ",", "train_accuracy", ",", "_", "=", "self", ".", "_run_evaluate", "(", "train_data", ",", "addn_data", ",", "ext_train", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"- Train accuracy  {}\"", ".", "format", "(", "train_accuracy", ")", ")", "\n", "pprint", ".", "pprint", "(", "cm", ".", "get_all_metrics", "(", ")", ")", "\n", "\n", "cm", ",", "dev_accuracy", ",", "_", "=", "self", ".", "_run_evaluate", "(", "dev_data", ",", "addn_dev", ",", "ext_test", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"- Dev accuracy  {} | best dev accuracy {}\"", ".", "format", "(", "dev_accuracy", ",", "self", ".", "best_accuracy", ")", ")", "\n", "pprint", ".", "pprint", "(", "cm", ".", "get_all_metrics", "(", ")", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "\"Overall_Accuracy\"", ",", "\n", "{", "\"Train_Accuracy\"", ":", "train_accuracy", ",", "\n", "\"Dev_Accuracy\"", ":", "dev_accuracy", "}", ",", "\n", "self", ".", "global_steps", ")", "\n", "return", "dev_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training.get_accuracy": [[438, 449], ["output.size", "[].type_as", "[].type_as.eq", "correct.cpu.cpu.float", "correct.cpu.cpu.sum", "cm.add_batch", "hasattr", "correct.cpu.cpu.cpu", "target.cpu().numpy", "[].type_as.cpu().numpy", "output.max", "target.cpu", "[].type_as.cpu"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.metrics.ConfusionMatrix.add_batch"], ["", "@", "staticmethod", "\n", "def", "get_accuracy", "(", "cm", ",", "output", ",", "target", ")", ":", "\n", "        ", "batch_size", "=", "output", ".", "size", "(", "0", ")", "\n", "predictions", "=", "output", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "type_as", "(", "target", ")", "\n", "correct", "=", "predictions", ".", "eq", "(", "target", ")", "\n", "correct", "=", "correct", ".", "float", "(", ")", "\n", "if", "not", "hasattr", "(", "correct", ",", "'sum'", ")", ":", "\n", "            ", "correct", "=", "correct", ".", "cpu", "(", ")", "\n", "", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "cm", ".", "add_batch", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._predict_batch": [[450, 458], ["training.Training.encoder.eval", "training.Training.clf.eval", "training.Training.encoder", "training.Training.clf", "training.Training.get_accuracy", "training.Training.embedder", "training.Training.embedder"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training.get_accuracy"], ["", "def", "_predict_batch", "(", "self", ",", "cm", ",", "batch", ",", "addn_batch", ",", "ext_batch", ")", ":", "\n", "#         self.embedder.eval()", "\n", "        ", "self", ".", "encoder", ".", "eval", "(", ")", "\n", "self", ".", "clf", ".", "eval", "(", ")", "\n", "one", ",", "two", "=", "self", ".", "encoder", "(", "self", ".", "embedder", "(", "batch", ")", ",", "batch", ")", "\n", "pred", "=", "self", ".", "clf", "(", "one", ",", "addn_batch", ",", "self", ".", "embedder", "(", "ext_batch", ")", ",", "two", ")", "\n", "accuracy", "=", "self", ".", "get_accuracy", "(", "cm", ",", "pred", ".", "data", ",", "batch", ".", "labels", ".", "data", ")", "\n", "return", "pred", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training.chunks": [[459, 463], ["range", "len"], "methods", ["None"], ["", "def", "chunks", "(", "self", ",", "l", ",", "n", "=", "15", ")", ":", "\n", "        ", "\"\"\"Yield successive n-sized chunks from l.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "            ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._run_evaluate": [[464, 487], ["metrics.ConfusionMatrix", "training.Training.chunks", "training.Training.chunks", "enumerate", "next", "batch_utils.seq_pad_concat", "batch_utils.seq_pad_concat", "training.Training._predict_batch", "accuracy_list.append", "pr_curve_data.append", "sum", "len", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training.chunks", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training.chunks", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._predict_batch"], ["", "", "def", "_run_evaluate", "(", "self", ",", "test_data", ",", "addn_test", ",", "ext_test", ")", ":", "\n", "        ", "pr_curve_data", "=", "[", "]", "\n", "cm", "=", "ConfusionMatrix", "(", "self", ".", "classes", ")", "\n", "accuracy_list", "=", "[", "]", "\n", "test_iter", "=", "self", ".", "chunks", "(", "test_data", ")", "\n", "ext_iter", "=", "self", ".", "chunks", "(", "ext_test", ")", "\n", "\n", "for", "batch_index", ",", "test_batch", "in", "enumerate", "(", "test_iter", ")", ":", "\n", "            ", "ext_batch", "=", "next", "(", "ext_iter", ")", "\n", "addn_batch", "=", "addn_test", "[", "batch_index", "*", "15", ":", "(", "batch_index", "+", "1", ")", "*", "15", "]", "\n", "#             ext_batch = ext_test[batch_index*15:(batch_index+1)*15]", "\n", "test_batch", "=", "batch_utils", ".", "seq_pad_concat", "(", "test_batch", ",", "-", "1", ")", "\n", "ext_batch", "=", "batch_utils", ".", "seq_pad_concat", "(", "ext_batch", ",", "-", "1", ")", "\n", "#             print(addn_batch.shape)", "\n", "#             try:", "\n", "pred", ",", "acc", "=", "self", ".", "_predict_batch", "(", "cm", ",", "test_batch", ",", "addn_batch", ",", "ext_batch", ")", "\n", "#             except:", "\n", "#                 continue", "\n", "accuracy_list", ".", "append", "(", "acc", ")", "\n", "pr_curve_data", ".", "append", "(", "\n", "(", "F", ".", "softmax", "(", "pred", ",", "-", "1", ")", "[", ":", ",", "1", "]", ".", "data", ",", "test_batch", ".", "labels", ".", "data", ")", ")", "\n", "", "accuracy", "=", "100", "*", "(", "sum", "(", "accuracy_list", ")", "/", "len", "(", "test_data", ")", ")", "\n", "return", "cm", ",", "accuracy", ",", "pr_curve_data", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._train": [[488, 517], ["addn_data.cuda.cuda.cuda", "addn_data_unlab.cuda.cuda.cuda", "addn_dev.cuda.cuda.cuda", "range", "training.Training.logger.info", "training.Training._run_epoch", "training.Training.logger.info", "training.Training._save_model", "training.Training.scheduler.step", "training.Training.logger.info"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._run_epoch", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._save_model"], ["", "def", "_train", "(", "self", ",", "train_data", ",", "dev_data", ",", "unlabel_data", ",", "addn_data", ",", "addn_data_unlab", ",", "addn_dev", ",", "ext_train", ",", "ext_test", ")", ":", "\n", "        ", "addn_data", "=", "addn_data", ".", "cuda", "(", ")", "\n", "addn_data_unlab", "=", "addn_data_unlab", ".", "cuda", "(", ")", "\n", "addn_dev", "=", "addn_dev", ".", "cuda", "(", ")", "\n", "# for early stopping", "\n", "nepoch_no_imprv", "=", "0", "\n", "\n", "epoch_start", "=", "self", ".", "epoch", "+", "1", "\n", "epoch_end", "=", "self", ".", "epoch", "+", "self", ".", "config", ".", "nepochs", "+", "1", "\n", "for", "self", ".", "epoch", "in", "range", "(", "epoch_start", ",", "epoch_end", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "\"Epoch {:} out of {:}\"", ".", "format", "(", "self", ".", "epoch", ",", "self", ".", "config", ".", "nepochs", ")", ")", "\n", "accuracy", "=", "self", ".", "_run_epoch", "(", "train_data", ",", "dev_data", ",", "unlabel_data", ",", "addn_data", ",", "addn_data_unlab", ",", "addn_dev", ",", "ext_train", ",", "ext_test", ")", "\n", "\n", "# early stopping and saving best parameters", "\n", "if", "accuracy", ">", "self", ".", "best_accuracy", ":", "\n", "                ", "nepoch_no_imprv", "=", "0", "\n", "self", ".", "best_accuracy", "=", "accuracy", "\n", "self", ".", "logger", ".", "info", "(", "\"- new best score!\"", ")", "\n", "self", ".", "_save_model", "(", ")", "\n", "", "else", ":", "\n", "                ", "nepoch_no_imprv", "+=", "1", "\n", "if", "nepoch_no_imprv", ">=", "self", ".", "config", ".", "nepoch_no_imprv", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\n", "\"- early stopping {} epochs without improvement\"", ".", "format", "(", "\n", "nepoch_no_imprv", ")", ")", "\n", "break", "\n", "", "", "if", "self", ".", "config", ".", "scheduler", "==", "\"ReduceLROnPlateau\"", ":", "\n", "                ", "self", ".", "scheduler", ".", "step", "(", "accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._evaluate": [[518, 533], ["addn_test.cuda.cuda.cuda", "training.Training.logger.info", "training.Training._run_evaluate", "zip", "torch.cat().cpu().tolist", "torch.cat().cpu().tolist", "torch.cat().cpu().tolist", "torch.cat().cpu().tolist", "torch.cat().cpu().tolist", "torch.cat().cpu().tolist", "torch.cat().cpu().tolist", "torch.cat().cpu().tolist", "os.path.join", "training.Training.logger.info", "training.Training._load_model", "open", "zip", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "fp.write", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._run_evaluate", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.Training._load_model"], ["", "", "", "def", "_evaluate", "(", "self", ",", "test_data", ",", "addn_test", ",", "ext_test", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "addn_test", "=", "addn_test", ".", "cuda", "(", ")", "\n", "#         ext_test = ext_test.cuda()", "\n", "self", ".", "logger", ".", "info", "(", "\"Evaluating model over test set\"", ")", "\n", "if", "(", "mode", "==", "\"train\"", ")", ":", "\n", "            ", "self", ".", "_load_model", "(", ")", "\n", "", "_", ",", "accuracy", ",", "prc_test", "=", "self", ".", "_run_evaluate", "(", "test_data", ",", "addn_test", ",", "ext_test", ")", "\n", "pred_", ",", "lab_", "=", "zip", "(", "*", "prc_test", ")", "\n", "pred_", "=", "torch", ".", "cat", "(", "pred_", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "lab_", "=", "torch", ".", "cat", "(", "lab_", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "path_", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_path", ",", "\"{}_pred_gt.tsv\"", ".", "format", "(", "self", ".", "config", ".", "exp_name", ")", ")", "\n", "with", "open", "(", "path_", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "for", "p", ",", "l", "in", "zip", "(", "pred_", ",", "lab_", ")", ":", "\n", "                ", "fp", ".", "write", "(", "str", "(", "p", ")", "+", "'\\t'", "+", "str", "(", "l", ")", "+", "'\\n'", ")", "\n", "", "", "self", ".", "logger", ".", "info", "(", "\"- test accuracy {}\"", ".", "format", "(", "accuracy", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.add_noise_python": [[32, 53], ["training.add_noise_python._drop_words"], "function", ["None"], ["def", "add_noise_python", "(", "words", ",", "dropout", "=", "0.1", ",", "k", "=", "3", ")", ":", "\n", "    ", "def", "_drop_words", "(", "words", ",", "probability", ")", ":", "\n", "        ", "length", "=", "len", "(", "words", ")", "\n", "keep_prob", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "length", ")", "\n", "keep", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "length", ")", ">", "probability", "\n", "if", "np", ".", "count_nonzero", "(", "keep", ")", "==", "0", ":", "\n", "            ", "ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "length", ")", "\n", "keep", "[", "ind", "]", "=", "True", "\n", "", "words", "=", "np", ".", "take", "(", "words", ",", "keep", ".", "nonzero", "(", ")", ")", "[", "0", "]", "\n", "return", "words", "\n", "\n", "", "def", "_rand_perm_with_constraint", "(", "words", ",", "k", ")", ":", "\n", "        ", "length", "=", "len", "(", "words", ")", "\n", "offset", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "length", ")", "*", "(", "k", "+", "1", ")", "\n", "new_pos", "=", "np", ".", "arange", "(", "length", ")", "+", "offset", "\n", "return", "np", ".", "take", "(", "words", ",", "np", ".", "argsort", "(", "new_pos", ")", ")", "\n", "\n", "", "words", "=", "_drop_words", "(", "words", ",", "dropout", ")", "\n", "if", "k", ">", "0", ":", "\n", "        ", "words", "=", "_rand_perm_with_constraint", "(", "words", ",", "k", ")", "\n", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.add_noise": [[55, 65], ["training.add_noise_python", "len", "add_noise_python.append", "training.add_noise._add_noise_single"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.add_noise_python"], ["", "def", "add_noise", "(", "ids", ",", "noise_dropout", "=", "0.1", ",", "random_permutation", "=", "3", ")", ":", "\n", "    ", "def", "_add_noise_single", "(", "ids", ")", ":", "\n", "        ", "noisy_ids", "=", "add_noise_python", "(", "ids", ",", "noise_dropout", ",", "random_permutation", ")", "\n", "noisy_sequence_length", "=", "len", "(", "noisy_ids", ")", "\n", "return", "noisy_ids", "\n", "\n", "", "noisy_ids", "=", "[", "]", "\n", "for", "l", ",", "id_", "in", "ids", ":", "\n", "        ", "noisy_ids", ".", "append", "(", "(", "l", ",", "_add_noise_single", "(", "id_", ")", ")", ")", "\n", "", "return", "noisy_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.batch_size_fn": [[67, 74], ["max", "len"], "function", ["None"], ["", "def", "batch_size_fn", "(", "new", ",", "count", ",", "sofar", ")", ":", "\n", "    ", "global", "max_src_in_batch", "\n", "if", "count", "==", "1", ":", "\n", "        ", "max_src_in_batch", "=", "0", "\n", "", "max_src_in_batch", "=", "max", "(", "max_src_in_batch", ",", "len", "(", "new", "[", "1", "]", ")", "+", "2", ")", "\n", "src_elements", "=", "count", "*", "max_src_in_batch", "\n", "return", "src_elements", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.retAddnBatch": [[75, 77], ["None"], "function", ["None"], ["", "def", "retAddnBatch", "(", "addn_data", ",", "b_sz", ",", "sofar", ")", ":", "\n", "    ", "return", "addn_data", "[", "sofar", ":", "sofar", "+", "b_sz", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.training.report_func": [[78, 82], ["report_stats.output"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.output"], ["", "def", "report_func", "(", "epoch", ",", "batch", ",", "num_batches", ",", "start_time", ",", "report_stats", ",", "\n", "report_every", ",", "logger", ")", ":", "\n", "    ", "if", "batch", "%", "report_every", "==", "-", "1", "%", "report_every", ":", "\n", "        ", "report_stats", ".", "output", "(", "epoch", ",", "batch", "+", "1", ",", "num_batches", ",", "start_time", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.hydrate_tweet": [[56, 73], ["tweepy.OAuthHandler", "tweepy.OAuthHandler.set_access_token", "tweepy.API", "tweepy.API.get_status", "open", "json.dump", "json.dump", "str"], "function", ["None"], ["def", "hydrate_tweet", "(", "tweet_id", ",", "save_dir", ")", ":", "\n", "##### Add your API credentials here  #####", "\n", "    ", "CONSUMER_KEY", "=", "' '", "\n", "CONSUMER_SECRET", "=", "' '", "\n", "OAUTH_TOKEN", "=", "' '", "\n", "OAUTH_TOKEN_SECRET", "=", "' '", "\n", "auth", "=", "tweepy", ".", "OAuthHandler", "(", "CONSUMER_KEY", ",", "CONSUMER_SECRET", ")", "\n", "auth", ".", "set_access_token", "(", "OAUTH_TOKEN", ",", "OAUTH_TOKEN_SECRET", ")", "\n", "api", "=", "tweepy", ".", "API", "(", "auth", ")", "\n", "\n", "try", ":", "\n", "        ", "tweet", "=", "api", ".", "get_status", "(", "tweet_id", ")", ".", "_json", "\n", "with", "open", "(", "downloaded_tweets", "+", "save_dir", "+", "\"/\"", "+", "str", "(", "tweet_id", ")", "+", "'.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "tweet", ",", "f", ")", "\n", "", "return", "tweet", "\n", "", "except", ":", "\n", "        ", "return", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.get_tweet_text": [[74, 76], ["None"], "function", ["None"], ["", "", "def", "get_tweet_text", "(", "tweet_object", ")", ":", "\n", "    ", "return", "tweet_object", "[", "'text'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.get_processed_text": [[77, 82], ["re.sub", "re.sub", "re.sub().lower", "re.sub().lower", "re.sub", "re.sub", "w_tokenizer.tokenize"], "function", ["None"], ["", "def", "get_processed_text", "(", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "r'http\\S+'", ",", "' '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'[^a-zA-Z@]'", ",", "' '", ",", "text", ")", ".", "lower", "(", ")", "\n", "tokens", "=", "[", "w", "for", "w", "in", "w_tokenizer", ".", "tokenize", "(", "text", ")", "if", "w", "not", "in", "stop_words", "and", "w", "[", "0", "]", "!=", "'@'", "]", "\n", "return", "' '", ".", "join", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.tweet_extra_features": [[83, 96], ["sentiment_analysis.score", "nltk.word_tokenize", "nltk.pos_tag", "collections.Counter", "int", "int", "text.lower", "nltk.Text", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.GlobalAttention.score"], ["", "def", "tweet_extra_features", "(", "text", ")", ":", "\n", "    ", "senti_score", "=", "sentiment_analysis", ".", "score", "(", "text", ")", "\n", "tokens", "=", "nltk", ".", "word_tokenize", "(", "text", ".", "lower", "(", ")", ")", "\n", "tags", "=", "nltk", ".", "pos_tag", "(", "nltk", ".", "Text", "(", "tokens", ")", ")", "\n", "counter_", "=", "Counter", "(", "tag", "for", "word", ",", "tag", "in", "tags", ")", "\n", "prp", "=", "int", "(", "counter_", "[", "'PRP'", "]", ")", "# personal pronoun\tI, he, she", "\n", "prp_", "=", "int", "(", "counter_", "[", "'PRP$'", "]", ")", "# possessive pronoun\tmy, his, hers", "\n", "pronouns", "=", "prp", "+", "prp_", "\n", "adjectives", "=", "int", "(", "counter_", "[", "'JJ'", "]", ")", "+", "int", "(", "counter_", "[", "'JJR'", "]", ")", "+", "int", "(", "counter_", "[", "'JJS'", "]", ")", "# adjective", "\n", "nouns", "=", "int", "(", "counter_", "[", "'NN'", "]", ")", "+", "int", "(", "counter_", "[", "'NNS'", "]", ")", "+", "int", "(", "counter_", "[", "'NNP'", "]", ")", "+", "int", "(", "counter_", "[", "'NNPS'", "]", ")", "# nouns", "\n", "vb", "=", "int", "(", "counter_", "[", "'VB'", "]", ")", "+", "int", "(", "counter_", "[", "'VBD'", "]", ")", "+", "int", "(", "counter_", "[", "'VBG'", "]", ")", "+", "int", "(", "counter_", "[", "'VBN'", "]", ")", "+", "int", "(", "\n", "counter_", "[", "'VBP'", "]", ")", "+", "int", "(", "counter_", "[", "'VBZ'", "]", ")", "# verbs", "\n", "return", "[", "senti_score", ",", "nouns", ",", "adjectives", ",", "pronouns", ",", "vb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.tweet_special_chars": [[97, 108], ["char.isalnum"], "function", ["None"], ["", "def", "tweet_special_chars", "(", "text", ")", ":", "\n", "    ", "num_special", "=", "0", "\n", "for", "char", "in", "text", ":", "\n", "        ", "if", "not", "char", ".", "isalnum", "(", ")", ":", "\n", "            ", "num_special", "+=", "1", "\n", "\n", "#     if num_special < 0:", "\n", "#         print(\"ERROR: Okay something went really wrong here...\")", "\n", "#         num_special = 0", "\n", "\n", "", "", "return", "num_special", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.tweet_all_features": [[109, 137], ["len", "len", "len", "flask_sean.tweet_special_chars", "flask_sean.get_tweet_text", "len", "flask_sean.tweet_extra_features", "len"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.tweet_special_chars", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.get_tweet_text", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.tweet_extra_features"], ["", "def", "tweet_all_features", "(", "tweet", ")", ":", "\n", "    ", "num_user_mentions", "=", "len", "(", "tweet", "[", "'entities'", "]", "[", "'user_mentions'", "]", ")", "\n", "num_hashtags", "=", "len", "(", "tweet", "[", "'entities'", "]", "[", "'hashtags'", "]", ")", "\n", "num_urls", "=", "len", "(", "tweet", "[", "'entities'", "]", "[", "'urls'", "]", ")", "\n", "num_favs", "=", "tweet", "[", "'favorite_count'", "]", "\n", "num_rts", "=", "tweet", "[", "'retweet_count'", "]", "\n", "\n", "if", "'media'", "in", "tweet", "[", "'entities'", "]", ":", "\n", "        ", "num_media", "=", "len", "(", "tweet", "[", "'entities'", "]", "[", "'media'", "]", ")", "\n", "", "else", ":", "\n", "        ", "num_media", "=", "0", "\n", "\n", "", "is_reply", "=", "0", "\n", "if", "tweet", "[", "'in_reply_to_status_id'", "]", ":", "\n", "        ", "is_reply", "=", "1", "\n", "\n", "", "num_special_chars", "=", "tweet_special_chars", "(", "tweet", ")", "\n", "text", "=", "get_tweet_text", "(", "tweet", ")", "\n", "tweet_length", "=", "len", "(", "text", ")", "\n", "extra_features", "=", "tweet_extra_features", "(", "text", ")", "\n", "\n", "verified", "=", "tweet", "[", "'user'", "]", "[", "'verified'", "]", "\n", "followers_count", "=", "tweet", "[", "'user'", "]", "[", "'followers_count'", "]", "\n", "friends_count", "=", "tweet", "[", "'user'", "]", "[", "'friends_count'", "]", "\n", "favourites_count", "=", "tweet", "[", "'user'", "]", "[", "'favourites_count'", "]", "\n", "statuses_count", "=", "tweet", "[", "'user'", "]", "[", "'statuses_count'", "]", "\n", "return", "[", "num_user_mentions", ",", "num_hashtags", ",", "num_urls", ",", "num_favs", ",", "num_rts", ",", "num_media", ",", "is_reply", ",", "\n", "num_special_chars", ",", "tweet_length", "]", "+", "extra_features", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.user_all_features": [[138, 146], ["None"], "function", ["None"], ["", "def", "user_all_features", "(", "tweet", ")", ":", "\n", "    ", "verified", "=", "tweet", "[", "'user'", "]", "[", "'verified'", "]", "\n", "followers_count", "=", "tweet", "[", "'user'", "]", "[", "'followers_count'", "]", "\n", "friends_count", "=", "tweet", "[", "'user'", "]", "[", "'friends_count'", "]", "\n", "favourites_count", "=", "tweet", "[", "'user'", "]", "[", "'favourites_count'", "]", "\n", "statuses_count", "=", "tweet", "[", "'user'", "]", "[", "'statuses_count'", "]", "\n", "\n", "return", "[", "verified", ",", "followers_count", ",", "friends_count", ",", "favourites_count", ",", "statuses_count", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.process": [[147, 160], ["flask_sean.hydrate_tweet", "flask_sean.get_tweet_text", "flask_sean.get_processed_text", "flask_sean.tweet_all_features", "flask_sean.user_all_features", "cross_sean.predict"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.hydrate_tweet", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.get_tweet_text", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.get_processed_text", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.tweet_all_features", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.user_all_features"], ["", "def", "process", "(", "tweet_id", ",", "save_dir", ")", ":", "\n", "    ", "tweet_object", "=", "hydrate_tweet", "(", "tweet_id", ",", "save_dir", ")", "\n", "\n", "if", "tweet_object", "==", "-", "2", ":", "\n", "        ", "return", "-", "2", "\n", "", "else", ":", "\n", "        ", "tweet_text", "=", "get_tweet_text", "(", "tweet_object", ")", "\n", "processed_text", "=", "get_processed_text", "(", "tweet_text", ")", "\n", "tweet_features", "=", "tweet_all_features", "(", "tweet_object", ")", "#", "\n", "user_features", "=", "user_all_features", "(", "tweet_object", ")", "\n", "\n", "return_data", "=", "cross_sean", ".", "predict", "(", "processed_text", ",", "tweet_features", ",", "user_features", ")", "\n", "return", "return_data", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.predict_tweet": [[163, 174], ["app.route", "flask.request.args.get", "print", "flask_sean.process", "print"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.process"], ["@", "app", ".", "route", "(", "'/predict_tweet'", ")", "\n", "def", "predict_tweet", "(", ")", ":", "\n", "    ", "save_dir", "=", "\"all\"", "\n", "\n", "tweet_id", "=", "request", ".", "args", ".", "get", "(", "\"data\"", ",", "\"\"", ")", "\n", "print", "(", "\"check_tweet: tweet_id\"", ",", "tweet_id", ")", "\n", "\n", "return_data", "=", "process", "(", "tweet_id", ",", "save_dir", ")", "\n", "print", "(", "return_data", ")", "\n", "\n", "return", "return_data", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.report_fake": [[175, 185], ["app.route", "flask.request.args.get", "print", "flask_sean.hydrate_tweet"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.hydrate_tweet"], ["", "@", "app", ".", "route", "(", "'/report_fake'", ")", "\n", "def", "report_fake", "(", ")", ":", "\n", "    ", "save_dir", "=", "\"fake\"", "\n", "tweet_id", "=", "request", ".", "args", ".", "get", "(", "\"data\"", ",", "\"\"", ")", "\n", "print", "(", "\"tweet_id\"", ",", "tweet_id", ")", "\n", "\n", "return_data", "=", "hydrate_tweet", "(", "tweet_id", ",", "save_dir", ")", "\n", "if", "return_data", "!=", "-", "2", ":", "\n", "        ", "return", "{", "'response'", ":", "True", "}", "\n", "", "return", "{", "'response'", ":", "False", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.report_genuine": [[186, 196], ["app.route", "flask.request.args.get", "print", "flask_sean.hydrate_tweet"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.hydrate_tweet"], ["", "@", "app", ".", "route", "(", "'/report_genuine'", ")", "\n", "def", "report_genuine", "(", ")", ":", "\n", "    ", "save_dir", "=", "\"genuine\"", "\n", "tweet_id", "=", "request", ".", "args", ".", "get", "(", "\"data\"", ",", "\"\"", ")", "\n", "print", "(", "\"tweet_id\"", ",", "tweet_id", ")", "\n", "\n", "return_data", "=", "hydrate_tweet", "(", "tweet_id", ",", "save_dir", ")", "\n", "if", "return_data", "!=", "-", "2", ":", "\n", "        ", "return", "{", "'response'", ":", "True", "}", "\n", "", "return", "{", "'response'", ":", "False", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.read_tweet": [[197, 210], ["app.route", "flask.request.args.get", "print", "flask_sean.hydrate_tweet", "flask_sean.get_tweet_text", "sentiment_analysis.score"], "function", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.hydrate_tweet", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.flask_sean.get_tweet_text", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.GlobalAttention.GlobalAttention.score"], ["", "@", "app", ".", "route", "(", "'/read_tweet'", ")", "\n", "def", "read_tweet", "(", ")", ":", "\n", "    ", "save_dir", "=", "\"all\"", "\n", "tweet_id", "=", "request", ".", "args", ".", "get", "(", "\"data\"", ",", "\"\"", ")", "\n", "print", "(", "\"tweet_id\"", ",", "tweet_id", ")", "\n", "\n", "return_data", "=", "hydrate_tweet", "(", "tweet_id", ",", "save_dir", ")", "\n", "if", "return_data", "!=", "-", "2", ":", "\n", "        ", "tweet_id", "=", "return_data", "[", "'id'", "]", "\n", "tweet_text", "=", "get_tweet_text", "(", "return_data", ")", "\n", "tweet_sentiment", "=", "sentiment_analysis", ".", "score", "(", "tweet_text", ")", "\n", "return", "{", "'tweet_id'", ":", "tweet_id", ",", "'tweet_text'", ":", "tweet_text", ",", "'tweet_sentiment'", ":", "tweet_sentiment", "}", "\n", "", "return", "False", "", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.Progbar.__init__": [[45, 54], ["time.time"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "target", ",", "width", "=", "30", ",", "verbose", "=", "1", ")", ":", "\n", "        ", "self", ".", "width", "=", "width", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "sum_values", "=", "{", "}", "\n", "self", ".", "unique_values", "=", "[", "]", "\n", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "total_width", "=", "0", "\n", "self", ".", "seen_so_far", "=", "0", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.Progbar.update": [[55, 139], ["time.time", "sys.stdout.write", "sys.stdout.write", "int", "sys.stdout.write", "len", "len", "sys.stdout.write", "sys.stdout.flush", "general_utils.Progbar.unique_values.append", "general_utils.Progbar.unique_values.append", "general_utils.Progbar.unique_values.append", "int", "float", "sys.stdout.write", "sys.stdout.write", "numpy.floor", "type", "numpy.log10", "max", "max"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "current", ",", "values", "=", "[", "]", ",", "exact", "=", "[", "]", ",", "strict", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Updates the progress bar.\n        # Arguments\n            current: Index of current step.\n            values: List of tuples (name, value_for_last_step).\n                The progress bar will display averages for these values.\n            exact: List of tuples (name, value_for_last_step).\n                The progress bar will display these values directly.\n        \"\"\"", "\n", "\n", "for", "k", ",", "v", "in", "values", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "sum_values", ":", "\n", "                ", "self", ".", "sum_values", "[", "k", "]", "=", "[", "v", "*", "(", "current", "-", "self", ".", "seen_so_far", ")", ",", "current", "-", "self", ".", "seen_so_far", "]", "\n", "self", ".", "unique_values", ".", "append", "(", "k", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "sum_values", "[", "k", "]", "[", "0", "]", "+=", "v", "*", "(", "current", "-", "self", ".", "seen_so_far", ")", "\n", "self", ".", "sum_values", "[", "k", "]", "[", "1", "]", "+=", "(", "current", "-", "self", ".", "seen_so_far", ")", "\n", "", "", "for", "k", ",", "v", "in", "exact", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "sum_values", ":", "\n", "                ", "self", ".", "unique_values", ".", "append", "(", "k", ")", "\n", "", "self", ".", "sum_values", "[", "k", "]", "=", "[", "v", ",", "1", "]", "\n", "\n", "", "for", "k", ",", "v", "in", "strict", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "sum_values", ":", "\n", "                ", "self", ".", "unique_values", ".", "append", "(", "k", ")", "\n", "", "self", ".", "sum_values", "[", "k", "]", "=", "v", "\n", "\n", "", "self", ".", "seen_so_far", "=", "current", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "verbose", "==", "1", ":", "\n", "            ", "prev_total_width", "=", "self", ".", "total_width", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\b\"", "*", "prev_total_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\r\"", ")", "\n", "\n", "numdigits", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "log10", "(", "self", ".", "target", ")", ")", ")", "+", "1", "\n", "barstr", "=", "'%%%dd/%%%dd ['", "%", "(", "numdigits", ",", "numdigits", ")", "\n", "bar", "=", "barstr", "%", "(", "current", ",", "self", ".", "target", ")", "\n", "prog", "=", "float", "(", "current", ")", "/", "self", ".", "target", "\n", "prog_width", "=", "int", "(", "self", ".", "width", "*", "prog", ")", "\n", "if", "prog_width", ">", "0", ":", "\n", "                ", "bar", "+=", "(", "'='", "*", "(", "prog_width", "-", "1", ")", ")", "\n", "if", "current", "<", "self", ".", "target", ":", "\n", "                    ", "bar", "+=", "'>'", "\n", "", "else", ":", "\n", "                    ", "bar", "+=", "'='", "\n", "", "", "bar", "+=", "(", "'.'", "*", "(", "self", ".", "width", "-", "prog_width", ")", ")", "\n", "bar", "+=", "']'", "\n", "sys", ".", "stdout", ".", "write", "(", "bar", ")", "\n", "self", ".", "total_width", "=", "len", "(", "bar", ")", "\n", "\n", "if", "current", ":", "\n", "                ", "time_per_unit", "=", "(", "now", "-", "self", ".", "start", ")", "/", "current", "\n", "", "else", ":", "\n", "                ", "time_per_unit", "=", "0", "\n", "", "eta", "=", "time_per_unit", "*", "(", "self", ".", "target", "-", "current", ")", "\n", "info", "=", "''", "\n", "if", "current", "<", "self", ".", "target", ":", "\n", "                ", "info", "+=", "' - ETA: %ds'", "%", "eta", "\n", "", "else", ":", "\n", "                ", "info", "+=", "' - %ds'", "%", "(", "now", "-", "self", ".", "start", ")", "\n", "", "for", "k", "in", "self", ".", "unique_values", ":", "\n", "                ", "if", "type", "(", "self", ".", "sum_values", "[", "k", "]", ")", "is", "list", ":", "\n", "                    ", "info", "+=", "' - %s: %.4f'", "%", "(", "k", ",", "self", ".", "sum_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "sum_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "info", "+=", "' - %s: %s'", "%", "(", "k", ",", "self", ".", "sum_values", "[", "k", "]", ")", "\n", "\n", "", "", "self", ".", "total_width", "+=", "len", "(", "info", ")", "\n", "if", "prev_total_width", ">", "self", ".", "total_width", ":", "\n", "                ", "info", "+=", "(", "(", "prev_total_width", "-", "self", ".", "total_width", ")", "*", "\" \"", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "info", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "current", ">=", "self", ".", "target", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "if", "self", ".", "verbose", "==", "2", ":", "\n", "            ", "if", "current", ">=", "self", ".", "target", ":", "\n", "                ", "info", "=", "'%ds'", "%", "(", "now", "-", "self", ".", "start", ")", "\n", "for", "k", "in", "self", ".", "unique_values", ":", "\n", "                    ", "info", "+=", "' - %s: %.4f'", "%", "(", "k", ",", "self", ".", "sum_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "sum_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "info", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.Progbar.add": [[140, 142], ["general_utils.Progbar.update"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.Progbar.update"], ["", "", "", "def", "add", "(", "self", ",", "n", ",", "values", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "update", "(", "self", ".", "seen_so_far", "+", "n", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.print_sentence": [[7, 22], ["data.iteritems", "max", "zip", "logger.info", "range", "len", "len", "data.itervalues", "len", "data.keys"], "function", ["None"], ["def", "print_sentence", "(", "logger", ",", "data", ")", ":", "\n", "    ", "\"\"\"Adapted from Assignment 3 of CS224N\n\n    Args:\n        logger: logger instance\n        data: dict d[\"x\"] = [\"I\", \"live\", ...]\n    \"\"\"", "\n", "spacings", "=", "[", "max", "(", "[", "len", "(", "seq", "[", "i", "]", ")", "for", "seq", "in", "data", ".", "itervalues", "(", ")", "]", ")", "for", "i", "in", "range", "(", "len", "(", "data", "[", "data", ".", "keys", "(", ")", "[", "0", "]", "]", ")", ")", "]", "\n", "# Compute the word spacing", "\n", "for", "key", ",", "seq", "in", "data", ".", "iteritems", "(", ")", ":", "\n", "# logger.info(\"{} : \".format(key))", "\n", "        ", "to_print", "=", "\"\"", "\n", "for", "token", ",", "spacing", "in", "zip", "(", "seq", ",", "spacings", ")", ":", "\n", "            ", "to_print", "+=", "token", "+", "\" \"", "*", "(", "spacing", "-", "len", "(", "token", ")", "+", "1", ")", "\n", "", "logger", ".", "info", "(", "to_print", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.general_utils.get_logger": [[24, 33], ["logging.getLogger", "logging.getLogger.setLevel", "logging.basicConfig", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger().addHandler", "logging.Formatter", "logging.getLogger"], "function", ["None"], ["", "", "def", "get_logger", "(", "filename", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'logger'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(message)s'", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "handler", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(asctime)s:%(levelname)s: %(message)s'", ")", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.__init__": [[20, 31], ["time.time"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "clf_loss", "=", "0", "\n", "self", ".", "ae_loss", "=", "0.", "\n", "self", ".", "at_loss", "=", "0.", "\n", "self", ".", "vat_loss", "=", "0.", "\n", "self", ".", "entropy_loss", "=", "0.", "\n", "self", ".", "n_words", "=", "0", "\n", "self", ".", "n_correct", "=", "0", "\n", "self", ".", "n_sent", "=", "0", "\n", "self", ".", "grad_norm", "=", "0", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.accuracy": [[32, 34], ["None"], "methods", ["None"], ["", "def", "accuracy", "(", "self", ")", ":", "\n", "        ", "return", "100", "*", "(", "self", ".", "n_correct", "/", "self", ".", "n_sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.elapsed_time": [[35, 37], ["time.time"], "methods", ["None"], ["", "def", "elapsed_time", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.output": [[38, 70], ["utils.Statistics.elapsed_time", "logger.info", "sys.stdout.flush", "utils.Statistics.accuracy", "time.time"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.elapsed_time", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.accuracy"], ["", "def", "output", "(", "self", ",", "epoch", ",", "batch", ",", "n_batches", ",", "start", ",", "logger", ")", ":", "\n", "        ", "\"\"\"Write out statistics to stdout.\n        Args:\n           epoch (int): current epoch\n           batch (int): current batch\n           n_batch (int): total batches\n           start (int): start time of epoch.\n        \"\"\"", "\n", "t", "=", "self", ".", "elapsed_time", "(", ")", "\n", "logger", ".", "info", "(", "(", "\"Epoch %2d, %5d/%5d; \"", "\n", "\"acc: %6.2f; \"", "\n", "\"clf_loss: %1.4f; \"", "\n", "\"at_loss: %1.4f; \"", "\n", "\"vat_loss: %1.4f; \"", "\n", "\"entropy_loss: %1.4f; \"", "\n", "\"ae_loss: %1.4f; \"", "\n", "\"norm: %2.4f; \"", "\n", "\"%3.0f tok/s; \"", "\n", "\"%6.0f s elapsed\"", ")", "%", "\n", "(", "epoch", ",", "\n", "batch", ",", "\n", "n_batches", ",", "\n", "self", ".", "accuracy", "(", ")", ",", "\n", "self", ".", "clf_loss", "/", "(", "batch", "+", "1", ")", ",", "\n", "self", ".", "at_loss", "/", "(", "batch", "+", "1", ")", ",", "\n", "self", ".", "vat_loss", "/", "(", "batch", "+", "1", ")", ",", "\n", "self", ".", "entropy_loss", "/", "(", "batch", "+", "1", ")", ",", "\n", "self", ".", "ae_loss", "/", "(", "batch", "+", "1", ")", ",", "\n", "self", ".", "grad_norm", "/", "(", "batch", "+", "1", ")", ",", "\n", "self", ".", "n_words", "/", "(", "t", "+", "1e-5", ")", ",", "\n", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.log": [[71, 76], ["utils.Statistics.elapsed_time", "experiment.add_scalar_value", "experiment.add_scalar_value", "experiment.add_scalar_value", "utils.Statistics.accuracy"], "methods", ["home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.elapsed_time", "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.Statistics.accuracy"], ["", "def", "log", "(", "self", ",", "prefix", ",", "experiment", ",", "lr", ")", ":", "\n", "        ", "t", "=", "self", ".", "elapsed_time", "(", ")", "\n", "experiment", ".", "add_scalar_value", "(", "prefix", "+", "\"_accuracy\"", ",", "self", ".", "accuracy", "(", ")", ")", "\n", "experiment", ".", "add_scalar_value", "(", "prefix", "+", "\"_tgtper\"", ",", "self", ".", "n_words", "/", "t", ")", "\n", "experiment", ".", "add_scalar_value", "(", "prefix", "+", "\"_lr\"", ",", "lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.williamscott701_Cross-SEAN.Cross-SEAN.utils.identity_fun": [[5, 7], ["None"], "function", ["None"], ["def", "identity_fun", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]]}