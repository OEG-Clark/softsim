{"home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.None.infer_train.FaissKNeighbors.__init__": [[21, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "5", ")", ":", "\n", "        ", "self", ".", "index", "=", "None", "\n", "self", ".", "y", "=", "None", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.None.infer_train.FaissKNeighbors.fit": [[26, 30], ["faiss.IndexFlatIP", "infer_train.FaissKNeighbors.index.add", "X.astype"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "self", ".", "index", "=", "faiss", ".", "IndexFlatIP", "(", "X", ".", "shape", "[", "1", "]", ")", "\n", "self", ".", "index", ".", "add", "(", "X", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "self", ".", "y", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.None.infer_train.FaissKNeighbors.predict": [[31, 36], ["infer_train.FaissKNeighbors.index.search", "numpy.array", "X.astype", "numpy.argmax", "numpy.bincount"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "distances", ",", "indices", "=", "self", ".", "index", ".", "search", "(", "X", ".", "astype", "(", "np", ".", "float32", ")", ",", "k", "=", "self", ".", "k", ")", "\n", "votes", "=", "self", ".", "y", "[", "indices", "]", "\n", "predictions", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "np", ".", "bincount", "(", "x", ")", ")", "for", "x", "in", "votes", "]", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.notebooks.script.levenshtein": [[5, 29], ["numpy.zeros", "range", "range", "range", "len", "len", "range", "min", "min"], "function", ["None"], ["def", "levenshtein", "(", "seq1", ",", "seq2", ")", ":", "\n", "    ", "size_x", "=", "len", "(", "seq1", ")", "+", "1", "\n", "size_y", "=", "len", "(", "seq2", ")", "+", "1", "\n", "matrix", "=", "np", ".", "zeros", "(", "(", "size_x", ",", "size_y", ")", ")", "\n", "for", "x", "in", "range", "(", "size_x", ")", ":", "\n", "        ", "matrix", "[", "x", ",", "0", "]", "=", "x", "\n", "", "for", "y", "in", "range", "(", "size_y", ")", ":", "\n", "        ", "matrix", "[", "0", ",", "y", "]", "=", "y", "\n", "\n", "", "for", "x", "in", "range", "(", "1", ",", "size_x", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "1", ",", "size_y", ")", ":", "\n", "            ", "if", "seq1", "[", "x", "-", "1", "]", "==", "seq2", "[", "y", "-", "1", "]", ":", "\n", "                ", "matrix", "[", "x", ",", "y", "]", "=", "min", "(", "\n", "matrix", "[", "x", "-", "1", ",", "y", "]", "+", "1", ",", "\n", "matrix", "[", "x", "-", "1", ",", "y", "-", "1", "]", ",", "\n", "matrix", "[", "x", ",", "y", "-", "1", "]", "+", "1", "\n", ")", "\n", "", "else", ":", "\n", "                ", "matrix", "[", "x", ",", "y", "]", "=", "min", "(", "\n", "matrix", "[", "x", "-", "1", ",", "y", "]", "+", "1", ",", "\n", "matrix", "[", "x", "-", "1", ",", "y", "-", "1", "]", "+", "1", ",", "\n", "matrix", "[", "x", ",", "y", "-", "1", "]", "+", "1", "\n", ")", "\n", "", "", "", "return", "(", "matrix", "[", "size_x", "-", "1", ",", "size_y", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.notebooks.script.get_similarity": [[46, 63], ["advas.phonetics.Phonetics", "advas.phonetics.Phonetics", "advas.phonetics.Phonetics.phoneticCode", "advas.phonetics.Phonetics.phoneticCode", "script.levenshtein"], "function", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.phoneticCode", "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.phoneticCode", "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.notebooks.script.levenshtein"], ["def", "get_similarity", "(", "word1", ",", "word2", ")", ":", "\n", "    ", "word1", "=", "Phonetics", "(", "word1", ")", "\n", "word2", "=", "Phonetics", "(", "word2", ")", "\n", "\n", "codeList1", "=", "word1", ".", "phoneticCode", "(", ")", "\n", "codeList2", "=", "word2", ".", "phoneticCode", "(", ")", "\n", "total", "=", "0.0", "\n", "for", "entry", "in", "algorithms", ":", "\n", "        ", "code1", "=", "codeList1", "[", "entry", "]", "\n", "code2", "=", "codeList2", "[", "entry", "]", "\n", "lev", "=", "levenshtein", "(", "code1", ",", "code2", ")", "\n", "currentWeight", "=", "weight", "[", "entry", "]", "\n", "# print(\"comparing %s with %s for %s (%0.2f: weight %0.2f)\" % (code1, code2, entry, lev, currentWeight))", "\n", "subtotal", "=", "lev", "*", "currentWeight", "\n", "total", "+=", "subtotal", "\n", "\n", "", "return", "total", "\n", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.__init__": [[19, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "term", ")", ":", "\n", "        ", "self", ".", "term", "=", "term", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.setText": [[23, 26], ["None"], "methods", ["None"], ["", "def", "setText", "(", "self", ",", "term", ")", ":", "\n", "        ", "self", ".", "term", "=", "term", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.getText": [[27, 29], ["None"], "methods", ["None"], ["", "def", "getText", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "term", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.phoneticCode": [[32, 44], ["phonetics.Phonetics.soundex", "phonetics.Phonetics.metaphone", "phonetics.Phonetics.nysiis", "phonetics.Phonetics.caverphone"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.soundex", "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.metaphone", "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.nysiis", "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.caverphone"], ["", "def", "phoneticCode", "(", "self", ")", ":", "\n", "        ", "\"returns the term's phonetic code using different methods\"", "\n", "\n", "# build an array to hold the phonetic code for each method", "\n", "phoneticCodeList", "=", "{", "\n", "\"soundex\"", ":", "self", ".", "soundex", "(", ")", ",", "\n", "\"metaphone\"", ":", "self", ".", "metaphone", "(", ")", ",", "\n", "\"nysiis\"", ":", "self", ".", "nysiis", "(", ")", ",", "\n", "\"caverphone\"", ":", "self", ".", "caverphone", "(", ")", "\n", "}", "\n", "\n", "return", "phoneticCodeList", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.soundex": [[47, 93], ["str.maketrans", "str.upper", "str.translate", "str.replace", "len"], "methods", ["None"], ["", "def", "soundex", "(", "self", ")", ":", "\n", "        ", "\"Return the soundex value to a given string.\"", "\n", "\n", "# Create and compare soundex codes of English words.", "\n", "#", "\n", "# Soundex is an algorithm that hashes English strings into", "\n", "# alpha-numerical value that represents what the word sounds", "\n", "# like. For more information on soundex and some notes on the", "\n", "# differences in implemenations visit:", "\n", "# http://www.bluepoof.com/Soundex/info.html", "\n", "#", "\n", "# This version modified by Nathan Heagy at Front Logic Inc., to be", "\n", "# compatible with php's soundexing and much faster.", "\n", "#", "\n", "# eAndroid / Nathan Heagy / Jul 29 2000", "\n", "# changes by Frank Hofmann / Jan 02 2005, Sep 9 2012", "\n", "\n", "# generate translation table only once. used to translate into soundex numbers", "\n", "# table = string.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', '0123012002245501262301020201230120022455012623010202')", "\n", "table", "=", "str", ".", "maketrans", "(", "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'", ",", "'01230120022455012623010202'", ")", "\n", "\n", "# check parameter", "\n", "if", "not", "self", ".", "term", ":", "\n", "            ", "return", "\"0000\"", "# could be Z000 for compatibility with other implementations", "\n", "\n", "# convert into uppercase letters", "\n", "", "term", "=", "str", ".", "upper", "(", "self", ".", "term", ")", "\n", "firstChar", "=", "term", "[", "0", "]", "\n", "\n", "# translate the string into soundex code according to the table above", "\n", "term", "=", "str", ".", "translate", "(", "term", "[", "1", ":", "]", ",", "table", ")", "\n", "\n", "# remove all 0s", "\n", "term", "=", "str", ".", "replace", "(", "term", ",", "\"0\"", ",", "\"\"", ")", "\n", "\n", "# remove duplicate numbers in-a-row", "\n", "str2", "=", "firstChar", "\n", "for", "x", "in", "term", ":", "\n", "            ", "if", "x", "!=", "str2", "[", "-", "1", "]", ":", "\n", "                ", "str2", "=", "str2", "+", "x", "\n", "\n", "# pad with zeros", "\n", "", "", "str2", "=", "str2", "+", "\"0\"", "*", "len", "(", "str2", ")", "\n", "\n", "# return the first four letters", "\n", "return", "str2", "[", ":", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.metaphone": [[94, 310], ["len", "str.lower", "re.sub", "len", "len", "re.search", "table.keys", "len", "re.search", "re.search", "re.search", "re.search", "re.search", "re.search", "re.search", "re.search", "re.search", "re.search"], "methods", ["None"], ["", "def", "metaphone", "(", "self", ")", ":", "\n", "        ", "\"returns metaphone code for a given string\"", "\n", "\n", "# implementation of the original algorithm from Lawrence Philips", "\n", "# extended/rewritten by M. Kuhn", "\n", "# improvements with thanks to John Machin <sjmachin@lexicon.net>", "\n", "\n", "# define return value", "\n", "code", "=", "\"\"", "\n", "\n", "i", "=", "0", "\n", "termLength", "=", "len", "(", "self", ".", "term", ")", "\n", "\n", "if", "(", "termLength", "==", "0", ")", ":", "\n", "# empty string ?", "\n", "            ", "return", "code", "\n", "\n", "# extension #1 (added 2005-01-28)", "\n", "# convert to lowercase", "\n", "", "term", "=", "str", ".", "lower", "(", "self", ".", "term", ")", "\n", "\n", "# extension #2 (added 2005-01-28)", "\n", "# remove all non-english characters, first", "\n", "term", "=", "re", ".", "sub", "(", "r'[^a-z]'", ",", "''", ",", "term", ")", "\n", "if", "len", "(", "term", ")", "==", "0", ":", "\n", "# nothing left", "\n", "            ", "return", "code", "\n", "\n", "# extension #3 (added 2005-01-24)", "\n", "# conflate repeated letters", "\n", "", "firstChar", "=", "term", "[", "0", "]", "\n", "str2", "=", "firstChar", "\n", "for", "x", "in", "term", ":", "\n", "            ", "if", "x", "!=", "str2", "[", "-", "1", "]", ":", "\n", "                ", "str2", "=", "str2", "+", "x", "\n", "\n", "# extension #4 (added 2005-01-24)", "\n", "# remove any vowels unless a vowel is the first letter", "\n", "", "", "firstChar", "=", "str2", "[", "0", "]", "\n", "str3", "=", "firstChar", "\n", "for", "x", "in", "str2", "[", "1", ":", "]", ":", "\n", "            ", "if", "(", "re", ".", "search", "(", "r'[^aeiou]'", ",", "x", ")", ")", ":", "\n", "                ", "str3", "=", "str3", "+", "x", "\n", "\n", "", "", "term", "=", "str3", "\n", "termLength", "=", "len", "(", "term", ")", "\n", "if", "termLength", "==", "0", ":", "\n", "# nothing left", "\n", "            ", "return", "code", "\n", "\n", "# check for exceptions", "\n", "", "if", "(", "termLength", ">", "1", ")", ":", "\n", "# get first two characters", "\n", "            ", "firstChars", "=", "term", "[", "0", ":", "2", "]", "\n", "\n", "# build translation table", "\n", "table", "=", "{", "\n", "\"ae\"", ":", "\"e\"", ",", "\n", "\"gn\"", ":", "\"n\"", ",", "\n", "\"kn\"", ":", "\"n\"", ",", "\n", "\"pn\"", ":", "\"n\"", ",", "\n", "\"wr\"", ":", "\"n\"", ",", "\n", "\"wh\"", ":", "\"w\"", "\n", "}", "\n", "\n", "if", "firstChars", "in", "table", ".", "keys", "(", ")", ":", "\n", "                ", "term", "=", "term", "[", "2", ":", "]", "\n", "code", "=", "table", "[", "firstChars", "]", "\n", "termLength", "=", "len", "(", "term", ")", "\n", "\n", "", "", "elif", "(", "term", "[", "0", "]", "==", "\"x\"", ")", ":", "\n", "            ", "term", "=", "\"\"", "\n", "code", "=", "\"s\"", "\n", "termLength", "=", "0", "\n", "\n", "# define standard translation table", "\n", "", "stTrans", "=", "{", "\n", "\"b\"", ":", "\"b\"", ",", "\n", "\"c\"", ":", "\"k\"", ",", "\n", "\"d\"", ":", "\"t\"", ",", "\n", "\"g\"", ":", "\"k\"", ",", "\n", "\"h\"", ":", "\"h\"", ",", "\n", "\"k\"", ":", "\"k\"", ",", "\n", "\"p\"", ":", "\"p\"", ",", "\n", "\"q\"", ":", "\"k\"", ",", "\n", "\"s\"", ":", "\"s\"", ",", "\n", "\"t\"", ":", "\"t\"", ",", "\n", "\"v\"", ":", "\"f\"", ",", "\n", "\"w\"", ":", "\"w\"", ",", "\n", "\"x\"", ":", "\"ks\"", ",", "\n", "\"y\"", ":", "\"y\"", ",", "\n", "\"z\"", ":", "\"s\"", "\n", "}", "\n", "\n", "i", "=", "0", "\n", "while", "(", "i", "<", "termLength", ")", ":", "\n", "# init character to add, init basic patterns", "\n", "            ", "add_char", "=", "\"\"", "\n", "part_n_2", "=", "\"\"", "\n", "part_n_3", "=", "\"\"", "\n", "part_n_4", "=", "\"\"", "\n", "part_c_2", "=", "\"\"", "\n", "part_c_3", "=", "\"\"", "\n", "\n", "# extract a number of patterns, if possible", "\n", "if", "(", "i", "<", "(", "termLength", "-", "1", ")", ")", ":", "\n", "                ", "part_n_2", "=", "term", "[", "i", ":", "i", "+", "2", "]", "\n", "\n", "if", "(", "i", ">", "0", ")", ":", "\n", "                    ", "part_c_2", "=", "term", "[", "i", "-", "1", ":", "i", "+", "1", "]", "\n", "part_c_3", "=", "term", "[", "i", "-", "1", ":", "i", "+", "2", "]", "\n", "\n", "", "", "if", "(", "i", "<", "(", "termLength", "-", "2", ")", ")", ":", "\n", "                ", "part_n_3", "=", "term", "[", "i", ":", "i", "+", "3", "]", "\n", "\n", "", "if", "(", "i", "<", "(", "termLength", "-", "3", ")", ")", ":", "\n", "                ", "part_n_4", "=", "term", "[", "i", ":", "i", "+", "4", "]", "\n", "\n", "# use table with conditions for translations", "\n", "", "if", "(", "term", "[", "i", "]", "==", "\"b\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"b\"", "]", "\n", "if", "(", "i", "==", "(", "termLength", "-", "1", ")", ")", ":", "\n", "                    ", "if", "(", "i", ">", "0", ")", ":", "\n", "                        ", "if", "(", "term", "[", "i", "-", "1", "]", "==", "\"m\"", ")", ":", "\n", "                            ", "addChar", "=", "\"\"", "\n", "", "", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"c\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"c\"", "]", "\n", "if", "(", "part_n_2", "==", "\"ch\"", ")", ":", "\n", "                    ", "addChar", "=", "\"x\"", "\n", "", "elif", "(", "re", ".", "search", "(", "r'c[iey]'", ",", "part_n_2", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"s\"", "\n", "\n", "", "if", "(", "part_n_3", "==", "\"cia\"", ")", ":", "\n", "                    ", "addChar", "=", "\"x\"", "\n", "\n", "", "if", "(", "re", ".", "search", "(", "r'sc[iey]'", ",", "part_c_3", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "\n", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"d\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"d\"", "]", "\n", "if", "(", "re", ".", "search", "(", "r'dg[eyi]'", ",", "part_n_3", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"j\"", "\n", "\n", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"g\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"g\"", "]", "\n", "\n", "if", "(", "part_n_2", "==", "\"gh\"", ")", ":", "\n", "                    ", "if", "(", "i", "==", "(", "termLength", "-", "2", ")", ")", ":", "\n", "                        ", "addChar", "=", "\"\"", "\n", "", "", "elif", "(", "re", ".", "search", "(", "r'gh[aeiouy]'", ",", "part_n_3", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "", "elif", "(", "part_n_2", "==", "\"gn\"", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "", "elif", "(", "part_n_4", "==", "\"gned\"", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "", "elif", "(", "re", ".", "search", "(", "r'dg[eyi]'", ",", "part_c_3", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "", "elif", "(", "part_n_2", "==", "\"gi\"", ")", ":", "\n", "                    ", "if", "(", "part_c_3", "!=", "\"ggi\"", ")", ":", "\n", "                        ", "addChar", "=", "\"j\"", "\n", "", "", "elif", "(", "part_n_2", "==", "\"ge\"", ")", ":", "\n", "                    ", "if", "(", "part_c_3", "!=", "\"gge\"", ")", ":", "\n", "                        ", "addChar", "=", "\"j\"", "\n", "", "", "elif", "(", "part_n_2", "==", "\"gy\"", ")", ":", "\n", "                    ", "if", "(", "part_c_3", "!=", "\"ggy\"", ")", ":", "\n", "                        ", "addChar", "=", "\"j\"", "\n", "", "", "elif", "(", "part_n_2", "==", "\"gg\"", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"h\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"h\"", "]", "\n", "if", "(", "re", ".", "search", "(", "r'[aeiouy]h[^aeiouy]'", ",", "part_c_3", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "", "elif", "(", "re", ".", "search", "(", "r'[csptg]h'", ",", "part_c_2", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"k\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"k\"", "]", "\n", "if", "(", "part_c_2", "==", "\"ck\"", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"p\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"p\"", "]", "\n", "if", "(", "part_n_2", "==", "\"ph\"", ")", ":", "\n", "                    ", "addChar", "=", "\"f\"", "\n", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"q\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"q\"", "]", "\n", "", "elif", "(", "term", "[", "i", "]", "==", "\"s\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"s\"", "]", "\n", "if", "(", "part_n_2", "==", "\"sh\"", ")", ":", "\n", "                    ", "addChar", "=", "\"x\"", "\n", "", "if", "(", "re", ".", "search", "(", "r'si[ao]'", ",", "part_n_3", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"x\"", "\n", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"t\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"t\"", "]", "\n", "if", "(", "part_n_2", "==", "\"th\"", ")", ":", "\n", "                    ", "addChar", "=", "\"0\"", "\n", "", "if", "(", "re", ".", "search", "(", "r'ti[ao]'", ",", "part_n_3", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"x\"", "\n", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"v\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"v\"", "]", "\n", "", "elif", "(", "term", "[", "i", "]", "==", "\"w\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"w\"", "]", "\n", "if", "(", "re", ".", "search", "(", "r'w[^aeiouy]'", ",", "part_n_2", ")", ")", ":", "\n", "                    ", "addChar", "=", "\"\"", "\n", "", "", "elif", "(", "term", "[", "i", "]", "==", "\"x\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"x\"", "]", "\n", "", "elif", "(", "term", "[", "i", "]", "==", "\"y\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"y\"", "]", "\n", "", "elif", "(", "term", "[", "i", "]", "==", "\"z\"", ")", ":", "\n", "                ", "addChar", "=", "stTrans", "[", "\"z\"", "]", "\n", "", "else", ":", "\n", "# alternative", "\n", "                ", "addChar", "=", "term", "[", "i", "]", "\n", "", "code", "=", "code", "+", "addChar", "\n", "i", "+=", "1", "\n", "# end while", "\n", "\n", "", "return", "code", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.nysiis": [[311, 421], ["len", "table.keys", "table.keys", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.findall", "re.findall", "re.sub", "re.sub", "re.sub", "len", "len", "re.sub", "re.match", "re.match", "re.sub"], "methods", ["None"], ["", "def", "nysiis", "(", "self", ")", ":", "\n", "        ", "\"returns New York State Identification and Intelligence Algorithm (NYSIIS) code for the given term\"", "\n", "\n", "code", "=", "\"\"", "\n", "\n", "i", "=", "0", "\n", "term", "=", "self", ".", "term", "\n", "termLength", "=", "len", "(", "term", ")", "\n", "\n", "if", "(", "termLength", "==", "0", ")", ":", "\n", "# empty string ?", "\n", "            ", "return", "code", "\n", "\n", "# build translation table for the first characters", "\n", "", "table", "=", "{", "\n", "\"mac\"", ":", "\"mcc\"", ",", "\n", "\"ph\"", ":", "\"ff\"", ",", "\n", "\"kn\"", ":", "\"nn\"", ",", "\n", "\"pf\"", ":", "\"ff\"", ",", "\n", "\"k\"", ":", "\"c\"", ",", "\n", "\"sch\"", ":", "\"sss\"", "\n", "}", "\n", "\n", "for", "tableEntry", "in", "table", ".", "keys", "(", ")", ":", "\n", "            ", "tableValue", "=", "table", "[", "tableEntry", "]", "# get table value", "\n", "tableValueLen", "=", "len", "(", "tableValue", ")", "# calculate its length", "\n", "firstChars", "=", "term", "[", "0", ":", "tableValueLen", "]", "\n", "if", "(", "firstChars", "==", "tableEntry", ")", ":", "\n", "                ", "term", "=", "tableValue", "+", "term", "[", "tableValueLen", ":", "]", "\n", "break", "\n", "\n", "# build translation table for the last characters", "\n", "", "", "table", "=", "{", "\n", "\"ee\"", ":", "\"y\"", ",", "\n", "\"ie\"", ":", "\"y\"", ",", "\n", "\"dt\"", ":", "\"d\"", ",", "\n", "\"rt\"", ":", "\"d\"", ",", "\n", "\"rd\"", ":", "\"d\"", ",", "\n", "\"nt\"", ":", "\"d\"", ",", "\n", "\"nd\"", ":", "\"d\"", ",", "\n", "}", "\n", "\n", "for", "tableEntry", "in", "table", ".", "keys", "(", ")", ":", "\n", "            ", "tableValue", "=", "table", "[", "tableEntry", "]", "# get table value", "\n", "tableEntryLen", "=", "len", "(", "tableEntry", ")", "# calculate its length", "\n", "lastChars", "=", "term", "[", "(", "0", "-", "tableEntryLen", ")", ":", "]", "\n", "# print lastChars, \", \", tableEntry, \", \", tableValue", "\n", "if", "(", "lastChars", "==", "tableEntry", ")", ":", "\n", "                ", "term", "=", "term", "[", ":", "(", "0", "-", "tableValueLen", "+", "1", ")", "]", "+", "tableValue", "\n", "break", "\n", "\n", "# initialize code", "\n", "", "", "code", "=", "term", "\n", "\n", "# transform ev->af", "\n", "code", "=", "re", ".", "sub", "(", "r'ev'", ",", "r'af'", ",", "code", ")", "\n", "\n", "# transform a,e,i,o,u->a", "\n", "code", "=", "re", ".", "sub", "(", "r'[aeiouy]'", ",", "r'a'", ",", "code", ")", "\n", "\n", "# transform q->g", "\n", "code", "=", "re", ".", "sub", "(", "r'q'", ",", "r'g'", ",", "code", ")", "\n", "\n", "# transform z->s", "\n", "code", "=", "re", ".", "sub", "(", "r'z'", ",", "r's'", ",", "code", ")", "\n", "\n", "# transform m->n", "\n", "code", "=", "re", ".", "sub", "(", "r'm'", ",", "r'n'", ",", "code", ")", "\n", "\n", "# transform kn->n", "\n", "code", "=", "re", ".", "sub", "(", "r'kn'", ",", "r'n'", ",", "code", ")", "\n", "\n", "# transform k->c", "\n", "code", "=", "re", ".", "sub", "(", "r'k'", ",", "r'c'", ",", "code", ")", "\n", "\n", "# transform sch->sss", "\n", "code", "=", "re", ".", "sub", "(", "r'sch'", ",", "r'sss'", ",", "code", ")", "\n", "\n", "# transform ph->ff", "\n", "code", "=", "re", ".", "sub", "(", "r'ph'", ",", "r'ff'", ",", "code", ")", "\n", "\n", "# transform h-> if previous or next is nonvowel -> previous", "\n", "occur", "=", "re", ".", "findall", "(", "r'([a-z]{0,1}?)h([a-z]{0,1}?)'", ",", "code", ")", "\n", "# print occur", "\n", "for", "occurGroup", "in", "occur", ":", "\n", "            ", "occurItemPrevious", "=", "occurGroup", "[", "0", "]", "\n", "occurItemNext", "=", "occurGroup", "[", "1", "]", "\n", "\n", "if", "(", "(", "re", ".", "match", "(", "r'[^aeiouy]'", ",", "occurItemPrevious", ")", ")", "or", "(", "re", ".", "match", "(", "r'[^aeiouy]'", ",", "occurItemNext", ")", ")", ")", ":", "\n", "                ", "if", "(", "occurItemPrevious", "!=", "\"\"", ")", ":", "\n", "# make substitution", "\n", "                    ", "code", "=", "re", ".", "sub", "(", "occurItemPrevious", "+", "\"h\"", ",", "occurItemPrevious", "*", "2", ",", "code", ",", "1", ")", "\n", "\n", "# transform w-> if previous is vowel -> previous", "\n", "", "", "", "occur", "=", "re", ".", "findall", "(", "r'([aeiouy]{1}?)w'", ",", "code", ")", "\n", "# print occur", "\n", "for", "occurGroup", "in", "occur", ":", "\n", "            ", "occurItemPrevious", "=", "occurGroup", "[", "0", "]", "\n", "# make substitution", "\n", "code", "=", "re", ".", "sub", "(", "occurItemPrevious", "+", "\"w\"", ",", "occurItemPrevious", "*", "2", ",", "code", ",", "1", ")", "\n", "\n", "# check last character", "\n", "# -s, remove", "\n", "", "code", "=", "re", ".", "sub", "(", "r's$'", ",", "r''", ",", "code", ")", "\n", "# -ay, replace by -y", "\n", "code", "=", "re", ".", "sub", "(", "r'ay$'", ",", "r'y'", ",", "code", ")", "\n", "# -a, remove", "\n", "code", "=", "re", ".", "sub", "(", "r'a$'", ",", "r''", ",", "code", ")", "\n", "\n", "return", "code", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.caverphone": [[422, 576], ["len", "str.lower", "re.sub", "str.upper().join.endswith", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.split", "str.upper().join", "str.upper"], "methods", ["None"], ["", "def", "caverphone", "(", "self", ")", ":", "\n", "        ", "\"returns the language key using the caverphone algorithm 2.0\"", "\n", "\n", "# Developed at the University of Otago, New Zealand.", "\n", "# Project: Caversham Project (http://caversham.otago.ac.nz)", "\n", "# Developer: David Hood, University of Otago, New Zealand", "\n", "# Contact: caversham@otago.ac.nz", "\n", "# Project Technical Paper: http://caversham.otago.ac.nz/files/working/ctp150804.pdf", "\n", "# Version 2.0 (2004-08-15)", "\n", "\n", "code", "=", "\"\"", "\n", "\n", "i", "=", "0", "\n", "term", "=", "self", ".", "term", "\n", "termLength", "=", "len", "(", "term", ")", "\n", "\n", "if", "(", "termLength", "==", "0", ")", ":", "\n", "# empty string ?", "\n", "            ", "return", "code", "\n", "\n", "# convert to lowercase", "\n", "", "code", "=", "str", ".", "lower", "(", "term", ")", "\n", "\n", "# remove anything not in the standard alphabet (a-z)", "\n", "code", "=", "re", ".", "sub", "(", "r'[^a-z]'", ",", "''", ",", "code", ")", "\n", "\n", "# remove final e", "\n", "if", "code", ".", "endswith", "(", "\"e\"", ")", ":", "\n", "            ", "code", "=", "code", "[", ":", "-", "1", "]", "\n", "\n", "# if the name starts with cough, rough, tough, enough or trough -> cou2f (rou2f, tou2f, enou2f, trough)", "\n", "", "code", "=", "re", ".", "sub", "(", "r'^([crt]|(en)|(tr))ough'", ",", "r'\\1ou2f'", ",", "code", ")", "\n", "\n", "# if the name starts with gn -> 2n", "\n", "code", "=", "re", ".", "sub", "(", "r'^gn'", ",", "r'2n'", ",", "code", ")", "\n", "\n", "# if the name ends with mb -> m2", "\n", "code", "=", "re", ".", "sub", "(", "r'mb$'", ",", "r'm2'", ",", "code", ")", "\n", "\n", "# replace cq -> 2q", "\n", "code", "=", "re", ".", "sub", "(", "r'cq'", ",", "r'2q'", ",", "code", ")", "\n", "\n", "# replace c[i,e,y] -> s[i,e,y]", "\n", "code", "=", "re", ".", "sub", "(", "r'c([iey])'", ",", "r's\\1'", ",", "code", ")", "\n", "\n", "# replace tch -> 2ch", "\n", "code", "=", "re", ".", "sub", "(", "r'tch'", ",", "r'2ch'", ",", "code", ")", "\n", "\n", "# replace c,q,x -> k", "\n", "code", "=", "re", ".", "sub", "(", "r'[cqx]'", ",", "r'k'", ",", "code", ")", "\n", "\n", "# replace v -> f", "\n", "code", "=", "re", ".", "sub", "(", "r'v'", ",", "r'f'", ",", "code", ")", "\n", "\n", "# replace dg -> 2g", "\n", "code", "=", "re", ".", "sub", "(", "r'dg'", ",", "r'2g'", ",", "code", ")", "\n", "\n", "# replace ti[o,a] -> si[o,a]", "\n", "code", "=", "re", ".", "sub", "(", "r'ti([oa])'", ",", "r'si\\1'", ",", "code", ")", "\n", "\n", "# replace d -> t", "\n", "code", "=", "re", ".", "sub", "(", "r'd'", ",", "r't'", ",", "code", ")", "\n", "\n", "# replace ph -> fh", "\n", "code", "=", "re", ".", "sub", "(", "r'ph'", ",", "r'fh'", ",", "code", ")", "\n", "\n", "# replace b -> p", "\n", "code", "=", "re", ".", "sub", "(", "r'b'", ",", "r'p'", ",", "code", ")", "\n", "\n", "# replace sh -> s2", "\n", "code", "=", "re", ".", "sub", "(", "r'sh'", ",", "r's2'", ",", "code", ")", "\n", "\n", "# replace z -> s", "\n", "code", "=", "re", ".", "sub", "(", "r'z'", ",", "r's'", ",", "code", ")", "\n", "\n", "# replace initial vowel [aeiou] -> A", "\n", "code", "=", "re", ".", "sub", "(", "r'^[aeiou]'", ",", "r'A'", ",", "code", ")", "\n", "\n", "# replace all other vowels [aeiou] -> 3", "\n", "code", "=", "re", ".", "sub", "(", "r'[aeiou]'", ",", "r'3'", ",", "code", ")", "\n", "\n", "# replace j -> y", "\n", "code", "=", "re", ".", "sub", "(", "r'j'", ",", "r'y'", ",", "code", ")", "\n", "\n", "# replace an initial y3 -> Y3", "\n", "code", "=", "re", ".", "sub", "(", "r'^y3'", ",", "r'Y3'", ",", "code", ")", "\n", "\n", "# replace an initial y -> A", "\n", "code", "=", "re", ".", "sub", "(", "r'^y'", ",", "r'A'", ",", "code", ")", "\n", "\n", "# replace y -> 3", "\n", "code", "=", "re", ".", "sub", "(", "r'y'", ",", "r'3'", ",", "code", ")", "\n", "\n", "# replace 3gh3 -> 3kh3", "\n", "code", "=", "re", ".", "sub", "(", "r'3gh3'", ",", "r'3kh3'", ",", "code", ")", "\n", "\n", "# replace gh -> 22", "\n", "code", "=", "re", ".", "sub", "(", "r'gh'", ",", "r'22'", ",", "code", ")", "\n", "\n", "# replace g -> k", "\n", "code", "=", "re", ".", "sub", "(", "r'g'", ",", "r'k'", ",", "code", ")", "\n", "\n", "# replace groups of s,t,p,k,f,m,n by its single, upper-case equivalent", "\n", "for", "singleLetter", "in", "[", "\"s\"", ",", "\"t\"", ",", "\"p\"", ",", "\"k\"", ",", "\"f\"", ",", "\"m\"", ",", "\"n\"", "]", ":", "\n", "            ", "otherParts", "=", "re", ".", "split", "(", "singleLetter", "+", "\"+\"", ",", "code", ")", "\n", "code", "=", "str", ".", "upper", "(", "singleLetter", ")", ".", "join", "(", "otherParts", ")", "\n", "\n", "# replace w[3,h3] by W[3,h3]", "\n", "", "code", "=", "re", ".", "sub", "(", "r'w(h?3)'", ",", "r'W\\1'", ",", "code", ")", "\n", "\n", "# replace final w with 3", "\n", "code", "=", "re", ".", "sub", "(", "r'w$'", ",", "r'3'", ",", "code", ")", "\n", "\n", "# replace w -> 2", "\n", "code", "=", "re", ".", "sub", "(", "r'w'", ",", "r'2'", ",", "code", ")", "\n", "\n", "# replace h at the beginning with an A", "\n", "code", "=", "re", ".", "sub", "(", "r'^h'", ",", "r'A'", ",", "code", ")", "\n", "\n", "# replace all other occurrences of h with a 2", "\n", "code", "=", "re", ".", "sub", "(", "r'h'", ",", "r'2'", ",", "code", ")", "\n", "\n", "# replace r3 with R3", "\n", "code", "=", "re", ".", "sub", "(", "r'r3'", ",", "r'R3'", ",", "code", ")", "\n", "\n", "# replace final r -> 3", "\n", "code", "=", "re", ".", "sub", "(", "r'r$'", ",", "r'3'", ",", "code", ")", "\n", "\n", "# replace r with 2", "\n", "code", "=", "re", ".", "sub", "(", "r'r'", ",", "r'2'", ",", "code", ")", "\n", "\n", "# replace l3 with L3", "\n", "code", "=", "re", ".", "sub", "(", "r'l3'", ",", "r'L3'", ",", "code", ")", "\n", "\n", "# replace final l -> 3", "\n", "code", "=", "re", ".", "sub", "(", "r'l$'", ",", "r'3'", ",", "code", ")", "\n", "\n", "# replace l with 2", "\n", "code", "=", "re", ".", "sub", "(", "r'l'", ",", "r'2'", ",", "code", ")", "\n", "\n", "# remove all 2's", "\n", "code", "=", "re", ".", "sub", "(", "r'2'", ",", "r''", ",", "code", ")", "\n", "\n", "# replace the final 3 -> A", "\n", "code", "=", "re", ".", "sub", "(", "r'3$'", ",", "r'A'", ",", "code", ")", "\n", "\n", "# remove all 3's", "\n", "code", "=", "re", ".", "sub", "(", "r'3'", ",", "r''", ",", "code", ")", "\n", "\n", "# extend the code by 10 '1' (one)", "\n", "code", "+=", "'1'", "*", "10", "\n", "\n", "# return the first 10 characters", "\n", "return", "code", "[", ":", "10", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.calcSuccVariety": [[577, 600], ["ngram.Ngram", "ngram.Ngram.deriveNgrams", "set", "ngram.Ngram.getNgrams", "varietyList.has_key", "items.append"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.ngram.Ngram.deriveNgrams", "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.ngram.Ngram.getNgrams"], ["", "def", "calcSuccVariety", "(", "self", ")", ":", "\n", "\n", "# derive two-letter combinations", "\n", "        ", "ngramObject", "=", "Ngram", "(", "self", ".", "term", ",", "2", ")", "\n", "ngramObject", ".", "deriveNgrams", "(", ")", "\n", "ngramSet", "=", "set", "(", "ngramObject", ".", "getNgrams", "(", ")", ")", "\n", "\n", "# count appearances of the second letter", "\n", "varietyList", "=", "{", "}", "\n", "for", "entry", "in", "ngramSet", ":", "\n", "            ", "letter1", "=", "entry", "[", "0", "]", "\n", "letter2", "=", "entry", "[", "1", "]", "\n", "if", "varietyList", ".", "has_key", "(", "letter1", ")", ":", "\n", "                ", "items", "=", "varietyList", "[", "letter1", "]", "\n", "if", "not", "letter2", "in", "items", ":", "\n", "# extend the existing one", "\n", "                    ", "items", ".", "append", "(", "letter2", ")", "\n", "varietyList", "[", "letter1", "]", "=", "items", "\n", "", "", "else", ":", "\n", "# create a new one", "\n", "                ", "varietyList", "[", "letter1", "]", "=", "[", "letter2", "]", "\n", "\n", "", "", "return", "varietyList", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.calcSuccVarietyCount": [[601, 607], ["len"], "methods", ["None"], ["", "def", "calcSuccVarietyCount", "(", "self", ",", "varietyList", ")", ":", "\n", "# save the number of matches, only", "\n", "        ", "for", "entry", "in", "varietyList", ":", "\n", "            ", "items", "=", "len", "(", "varietyList", "[", "entry", "]", ")", "\n", "varietyList", "[", "entry", "]", "=", "items", "\n", "", "return", "varietyList", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.calcSuccVarietyList": [[608, 616], ["phonetics.Phonetics.setText", "phonetics.Phonetics.calcSuccVariety"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.setText", "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.calcSuccVariety"], ["", "def", "calcSuccVarietyList", "(", "self", ",", "wordList", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "for", "item", "in", "wordList", ":", "\n", "            ", "self", ".", "setText", "(", "item", ")", "\n", "varietyList", "=", "self", ".", "calcSuccVariety", "(", ")", "\n", "result", "[", "item", "]", "=", "varietyList", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.phonetics.Phonetics.calcSuccVarietyMerge": [[617, 626], ["varietyList.values", "item.keys", "list", "result.keys", "set", "set"], "methods", ["None"], ["", "def", "calcSuccVarietyMerge", "(", "self", ",", "varietyList", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "for", "item", "in", "varietyList", ".", "values", "(", ")", ":", "\n", "            ", "for", "letter", "in", "item", ".", "keys", "(", ")", ":", "\n", "                ", "if", "not", "letter", "in", "result", ".", "keys", "(", ")", ":", "\n", "                    ", "result", "[", "letter", "]", "=", "item", "[", "letter", "]", "\n", "", "else", ":", "\n", "                    ", "result", "[", "letter", "]", "=", "list", "(", "set", "(", "result", "[", "letter", "]", ")", "|", "set", "(", "item", "[", "letter", "]", ")", ")", "\n", "", "", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.ngram.Ngram.__init__": [[15, 20], ["ngram.Ngram.setNgramSize"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.ngram.Ngram.setNgramSize"], ["    ", "def", "__init__", "(", "self", ",", "term", ",", "size", ")", ":", "\n", "        ", "self", ".", "term", "=", "term", "\n", "self", ".", "setNgramSize", "(", "size", ")", "\n", "self", ".", "ngrams", "=", "[", "]", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.ngram.Ngram.getNgramSize": [[21, 23], ["None"], "methods", ["None"], ["", "def", "getNgramSize", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ngramSize", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.ngram.Ngram.setNgramSize": [[24, 27], ["None"], "methods", ["None"], ["", "def", "setNgramSize", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "ngramSize", "=", "size", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.ngram.Ngram.getNgrams": [[28, 30], ["None"], "methods", ["None"], ["", "def", "getNgrams", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ngrams", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.advas.ngram.Ngram.deriveNgrams": [[31, 56], ["len", "ngram.Ngram.ngrams.append"], "methods", ["None"], ["", "def", "deriveNgrams", "(", "self", ")", ":", "\n", "        ", "\"derive n-grams of size n\"", "\n", "\n", "termLength", "=", "len", "(", "self", ".", "term", ")", "\n", "\n", "if", "(", "self", ".", "ngramSize", ">", "termLength", ")", ":", "\n", "# we cannot form any n-grams - term too small for given size", "\n", "            ", "self", ".", "ngrams", "=", "[", "]", "\n", "return", "False", "\n", "\n", "# define left and right boundaries", "\n", "", "left", "=", "0", "\n", "right", "=", "left", "+", "self", ".", "ngramSize", "\n", "\n", "while", "(", "right", "<=", "termLength", ")", ":", "\n", "# extract slice and append to the list", "\n", "            ", "ngram", "=", "self", ".", "term", "[", "left", ":", "right", "]", "\n", "if", "not", "ngram", "in", "self", ".", "ngrams", ":", "\n", "                ", "self", ".", "ngrams", ".", "append", "(", "ngram", ")", "\n", "\n", "# move slice to the right", "\n", "", "left", "=", "left", "+", "1", "\n", "right", "=", "right", "+", "1", "\n", "\n", "", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.classify_callback.RunClassifierCallback.__init__": [[14, 37], ["nemo.core.callbacks.ActionCallback.__init__", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "eval_step", "=", "1", ",", "\n", "eval_epoch", "=", "None", ",", "\n", "name", "=", "'test'", ",", "\n", "num_classes", "=", "35", ",", "\n", "gpu", "=", "1", ",", "\n", "hidden_size", "=", "64", ",", "\n", "manifest", "=", "'100'", ",", "\n", "model", "=", "'Res8'", "\n", ")", ":", "\n", "        ", "if", "eval_step", "is", "None", "and", "eval_epoch", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Either eval_step or eval_epoch must be set. \"", "f\"But got: {eval_step} and {eval_epoch}\"", ")", "\n", "", "if", "(", "eval_step", "is", "not", "None", "and", "eval_step", "<=", "0", ")", "or", "(", "eval_epoch", "is", "not", "None", "and", "eval_epoch", "<=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Eval_step and eval_epoch must be > 0.\"", "f\"But got: {eval_step} and {eval_epoch}\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_eval_frequency", "=", "eval_step", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "manifest", "=", "manifest", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.classify_callback.RunClassifierCallback.start_classification": [[38, 41], ["os.system", "str"], "methods", ["None"], ["", "def", "start_classification", "(", "self", ",", "step", ",", "manifest", ")", ":", "\n", "        ", "os", ".", "system", "(", "\n", "f\"python TripletClassifier.py --enc_name={self.name} --enc_step={step} --name={self.name + '_classifier' + str(step)} --num_classes={self.num_classes} --gpu={self.gpu} --hidden_size={self.hidden_size} --manifest={manifest} --model={self.model}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.classify_callback.RunClassifierCallback.on_iteration_end": [[42, 49], ["classify_callback.RunClassifierCallback.start_classification", "logging.info"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.classify_callback.RunClassifierCallback.start_classification"], ["", "def", "on_iteration_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "step", "==", "0", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "step", "%", "self", ".", "_eval_frequency", "==", "0", ":", "\n", "            ", "if", "self", ".", "global_rank", "==", "0", "or", "self", ".", "global_rank", "is", "None", ":", "\n", "                ", "logging", ".", "info", "(", "'Starting classification '", "+", "'.'", "*", "30", ")", "\n", "", "self", ".", "start_classification", "(", "self", ".", "step", ",", "self", ".", "manifest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.classify_callback.RunClassifierCallback.on_action_end": [[50, 55], ["classify_callback.RunClassifierCallback.start_classification", "logging.info"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.classify_callback.RunClassifierCallback.start_classification"], ["", "", "def", "on_action_end", "(", "self", ")", ":", "\n", "        ", "step", "=", "self", ".", "step", "\n", "if", "self", ".", "global_rank", "==", "0", "or", "self", ".", "global_rank", "is", "None", ":", "\n", "            ", "logging", ".", "info", "(", "'Final Classification '", "+", "'.'", "*", "30", ")", "\n", "", "self", ".", "start_classification", "(", "step", ",", "self", ".", "manifest", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.helper.monitor_classification_triplet_training_progress": [[9, 43], ["logging.info", "logging.info", "zip", "type", "torch.no_grad", "nemo.collections.asr.metrics.classification_accuracy", "logging.info", "tb_logger.add_scalar", "tag.format", "tag.format"], "function", ["None"], ["def", "monitor_classification_triplet_training_progress", "(", "tensors", ":", "list", ",", "eval_metric", "=", "None", ",", "tb_logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Computes the top k classification accuracy of the model being trained.\n    Prints sample to screen, computes and  and logs a list of top k accuracies\n    to console and (optionally) Tensorboard\n    Args:\n      tensors: A list of 3 tensors (loss, logits, targets)\n      eval_metric: An optional list of integers detailing Top@`k`\n        in the range [1, max_classes]. Defaults to [1] if not set.\n      tb_logger: Tensorboard logging object\n    Returns:\n      None\n    \"\"\"", "\n", "if", "eval_metric", "is", "None", ":", "\n", "        ", "eval_metric", "=", "[", "1", "]", "\n", "\n", "", "if", "type", "(", "eval_metric", ")", "not", "in", "(", "list", ",", "tuple", ")", ":", "\n", "        ", "eval_metric", "=", "[", "eval_metric", "]", "\n", "\n", "", "top_k", "=", "eval_metric", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "logits", ",", "targets", "=", "tensors", "[", "1", ":", "3", "]", "\n", "topk_acc", "=", "classification_accuracy", "(", "logits", ",", "targets", ",", "top_k", "=", "top_k", ")", "\n", "\n", "", "tag", "=", "'training_batch_top@{0}'", "\n", "logging", ".", "info", "(", "f'Loss: {tensors[0]}'", ")", "\n", "logging", ".", "info", "(", "f'Triplet Loss: {tensors[-1]}'", ")", "\n", "\n", "for", "k", ",", "acc", "in", "zip", "(", "top_k", ",", "topk_acc", ")", ":", "\n", "        ", "if", "tb_logger", "is", "not", "None", ":", "\n", "            ", "tb_logger", ".", "add_scalar", "(", "tag", ".", "format", "(", "k", ")", ",", "acc", ")", "\n", "\n", "", "logging", ".", "info", "(", "f\"{tag.format(k)}: {acc * 100.: 3.4f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.helper.monitor_triplet_encoder_training_progress": [[45, 59], ["logging.info"], "function", ["None"], ["", "", "def", "monitor_triplet_encoder_training_progress", "(", "tensors", ":", "list", ",", "eval_metric", "=", "None", ",", "tb_logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Computes the top k classification accuracy of the model being trained.\n    Prints sample to screen, computes and  and logs a list of top k accuracies\n    to console and (optionally) Tensorboard\n    Args:\n      tensors: A list of 3 tensors (loss, logits, targets)\n      eval_metric: An optional list of integers detailing Top@`k`\n        in the range [1, max_classes]. Defaults to [1] if not set.\n      tb_logger: Tensorboard logging object\n    Returns:\n      None\n    \"\"\"", "\n", "logging", ".", "info", "(", "f'Triplet Loss: {tensors[0]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.helper.__gather_losses": [[61, 63], ["torch.mean", "torch.stack"], "function", ["None"], ["", "def", "__gather_losses", "(", "losses_list", ":", "list", ")", "->", "list", ":", "\n", "    ", "return", "[", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "losses_list", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.helper.process_encoder_evaluation_batch": [[65, 94], ["tensors.items", "torch.cat.size", "global_vars.keys", "global_vars.keys", "global_vars.keys", "global_vars.keys", "kv.startswith", "helper.__gather_losses", "kv.startswith", "torch.cat", "torch.cat", "len", "embeds.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.helper.__gather_losses"], ["", "def", "process_encoder_evaluation_batch", "(", "tensors", ":", "dict", ",", "global_vars", ":", "dict", ")", ":", "\n", "    ", "\"\"\"\n    Creates a dictionary holding the results from a batch of samples\n    \"\"\"", "\n", "if", "'EvalLoss'", "not", "in", "global_vars", ".", "keys", "(", ")", ":", "\n", "        ", "global_vars", "[", "'EvalLoss'", "]", "=", "[", "]", "\n", "", "if", "'batchsize'", "not", "in", "global_vars", ".", "keys", "(", ")", ":", "\n", "        ", "global_vars", "[", "'batchsize'", "]", "=", "[", "]", "\n", "\n", "", "if", "'embeds'", "not", "in", "global_vars", ".", "keys", "(", ")", ":", "\n", "        ", "global_vars", "[", "'embeds'", "]", "=", "[", "]", "\n", "\n", "", "if", "'labels'", "not", "in", "global_vars", ".", "keys", "(", ")", ":", "\n", "        ", "global_vars", "[", "'labels'", "]", "=", "[", "]", "\n", "\n", "", "for", "kv", ",", "v", "in", "tensors", ".", "items", "(", ")", ":", "\n", "        ", "if", "kv", ".", "startswith", "(", "'loss'", ")", ":", "\n", "            ", "global_vars", "[", "'EvalLoss'", "]", "+=", "__gather_losses", "(", "v", ")", "\n", "", "elif", "kv", ".", "startswith", "(", "'label'", ")", ":", "\n", "            ", "labels", "=", "torch", ".", "cat", "(", "v", ",", "0", ")", "# if len(v) > 1 else v", "\n", "", "elif", "'output'", "in", "kv", ":", "\n", "            ", "embeds", "=", "torch", ".", "cat", "(", "v", ",", "0", ")", "\n", "if", "len", "(", "embeds", ".", "shape", ")", "==", "2", ":", "\n", "                ", "embeds", "=", "embeds", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "", "", "batch_size", "=", "labels", ".", "size", "(", "0", ")", "\n", "global_vars", "[", "'batchsize'", "]", "+=", "[", "batch_size", "]", "\n", "global_vars", "[", "'embeds'", "]", "+=", "[", "embeds", "]", "\n", "global_vars", "[", "'labels'", "]", "+=", "[", "labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.helper.process_encoder_evaluation_epoch": [[96, 113], ["torch.mean().item", "torch.tensor().sum().float", "logging.info", "torch.mean", "torch.tensor().sum", "torch.stack", "torch.tensor"], "function", ["None"], ["", "def", "process_encoder_evaluation_epoch", "(", "global_vars", ":", "dict", ",", "tag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the aggregated loss and WER across the entire evaluation dataset\n    \"\"\"", "\n", "\n", "eloss", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "global_vars", "[", "'EvalLoss'", "]", ")", ")", ".", "item", "(", ")", "\n", "batch_sizes", "=", "global_vars", "[", "'batchsize'", "]", "\n", "total_num_samples", "=", "torch", ".", "tensor", "(", "batch_sizes", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n", "if", "tag", "is", "None", ":", "\n", "        ", "tag", "=", "''", "\n", "\n", "", "logs", "=", "{", "f\"Evaluation_Loss {tag}\"", ":", "eloss", "}", "\n", "\n", "logging", ".", "info", "(", "f\"==========>>>>>>Evaluation Loss {tag}: {eloss}\"", ")", "\n", "\n", "return", "logs", "\n", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.l2.L2Regularizer.input_ports": [[13, 20], ["nemo.utils.decorators.add_port_docs", "NeuralType", "AcousticEncodedRepresentation"], "methods", ["None"], ["@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "input_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module input ports.\n        \"\"\"", "\n", "return", "{", "\n", "\"embeds\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "AcousticEncodedRepresentation", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.l2.L2Regularizer.output_ports": [[22, 27], ["nemo.utils.decorators.add_port_docs", "NeuralType", "AcousticEncodedRepresentation"], "methods", ["None"], ["", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "output_ports", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"l2_output\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "AcousticEncodedRepresentation", "(", ")", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.l2.L2Regularizer.__init__": [[30, 33], ["nemo.backends.pytorch.NonTrainableNM.__init__", "nemo.logging.info"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "logging", ".", "info", "(", "\"{}: L2 regularization\"", ".", "format", "(", "self", ".", "__class__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.l2.L2Regularizer.regularize": [[34, 39], ["torch.normalize"], "methods", ["None"], ["", "def", "regularize", "(", "self", ",", "embeds", ")", ":", "\n", "        ", "l2_embeds", "=", "F", ".", "normalize", "(", "embeds", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "# l2_embeds.requires_grad = True      <==== uncomment this if you run into var has no gradient problem", "\n", "\n", "return", "l2_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.l2.L2Regularizer.forward": [[40, 43], ["l2.L2Regularizer.regularize"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.l2.L2Regularizer.regularize"], ["", "def", "forward", "(", "self", ",", "embeds", ")", ":", "\n", "        ", "l2_signal", "=", "self", ".", "regularize", "(", "embeds", ")", "\n", "return", "l2_signal", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedBatchSampler.__init__": [[22, 45], ["torch.tensor", "list", "len", "set", "numpy.random.shuffle", "datalayer.BalancedBatchSampler.labels.numpy", "numpy.where", "datalayer.BalancedBatchSampler.labels.numpy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "labels", ",", "n_classes", ",", "n_samples", ",", "class_dists", ",", "class_probs", ",", "probs_num", ")", ":", "\n", "        ", "self", ".", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", "\n", "self", ".", "labels_set", "=", "list", "(", "set", "(", "self", ".", "labels", ".", "numpy", "(", ")", ")", ")", "\n", "self", ".", "label_to_indices", "=", "{", "label", ":", "np", ".", "where", "(", "self", ".", "labels", ".", "numpy", "(", ")", "==", "label", ")", "[", "0", "]", "\n", "for", "label", "in", "self", ".", "labels_set", "}", "\n", "for", "l", "in", "self", ".", "labels_set", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "label_to_indices", "[", "l", "]", ")", "\n", "", "self", ".", "used_label_indices_count", "=", "{", "label", ":", "0", "for", "label", "in", "self", ".", "labels_set", "}", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "n_dataset", "=", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "batch_size", "=", "self", ".", "n_samples", "*", "self", ".", "n_classes", "\n", "self", ".", "class_dists", "=", "class_dists", "\n", "self", ".", "class_probs", "=", "class_probs", "\n", "self", ".", "probs", "=", "[", "[", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", "]", ",", "\n", "[", "0.5", ",", "0.5", ",", "0.", "]", ",", "\n", "[", "0.5", ",", "0.", ",", "0.5", "]", ",", "\n", "[", "0.", ",", "0.5", ",", "0.5", "]", ",", "\n", "[", "0.33", ",", "0.33", ",", "0.33", "]", "]", "\n", "self", ".", "probs", "=", "self", ".", "probs", "[", "probs_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedBatchSampler.pick_nearby": [[46, 56], ["torch.no_grad", "numpy.random.choice", "numpy.concatenate", "numpy.array", "numpy.random.randint", "second_labels.append"], "methods", ["None"], ["", "def", "pick_nearby", "(", "self", ",", "label_set", ",", "n_classes", ",", "class_dists", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "first_labels", "=", "np", ".", "random", ".", "choice", "(", "label_set", ",", "n_classes", "//", "2", ",", "replace", "=", "False", ")", "\n", "second_labels", "=", "[", "]", "\n", "for", "label", "in", "first_labels", ":", "\n", "                ", "for", "sec_label", "in", "class_dists", "[", "label", "]", "[", "np", ".", "random", ".", "randint", "(", "3", ")", ":", "]", ":", "\n", "                    ", "if", "sec_label", "in", "label_set", ":", "\n", "                        ", "second_labels", ".", "append", "(", "sec_label", ")", "\n", "break", "\n", "", "", "", "return", "np", ".", "concatenate", "(", "[", "first_labels", ",", "np", ".", "array", "(", "second_labels", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedBatchSampler.pick_probs": [[57, 59], ["numpy.random.choice", "numpy.sum"], "methods", ["None"], ["", "", "def", "pick_probs", "(", "self", ",", "label_set", ",", "n_classes", ",", "class_probs", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "label_set", ",", "n_classes", ",", "p", "=", "class_probs", "[", "label_set", "]", "/", "np", ".", "sum", "(", "class_probs", "[", "label_set", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedBatchSampler.__iter__": [[60, 84], ["numpy.random.rand", "torch.tensor", "numpy.random.choice", "torch.tensor.extend", "list", "datalayer.BalancedBatchSampler.pick_nearby", "datalayer.BalancedBatchSampler.pick_probs", "len", "numpy.random.shuffle", "map"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedBatchSampler.pick_nearby", "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedBatchSampler.pick_probs"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "while", "self", ".", "count", "+", "self", ".", "batch_size", "<", "self", ".", "n_dataset", ":", "\n", "\n", "            ", "chance", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "chance", "<", "self", ".", "probs", "[", "0", "]", ":", "\n", "                ", "classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "labels_set", ",", "self", ".", "n_classes", ",", "replace", "=", "False", ")", "\n", "", "elif", "chance", "<", "self", ".", "probs", "[", "0", "]", "+", "self", ".", "probs", "[", "1", "]", ":", "\n", "                ", "classes", "=", "self", ".", "pick_nearby", "(", "self", ".", "labels_set", ",", "self", ".", "n_classes", ",", "self", ".", "class_dists", ")", "\n", "", "else", ":", "\n", "                ", "classes", "=", "self", ".", "pick_probs", "(", "self", ".", "labels_set", ",", "self", ".", "n_classes", ",", "self", ".", "class_probs", ")", "\n", "\n", "", "indices", "=", "[", "]", "\n", "for", "class_", "in", "classes", ":", "\n", "                ", "indices", ".", "extend", "(", "self", ".", "label_to_indices", "[", "class_", "]", "[", "\n", "self", ".", "used_label_indices_count", "[", "class_", "]", ":", "self", ".", "used_label_indices_count", "[", "\n", "class_", "]", "+", "self", ".", "n_samples", "]", ")", "\n", "self", ".", "used_label_indices_count", "[", "class_", "]", "+=", "self", ".", "n_samples", "\n", "if", "self", ".", "used_label_indices_count", "[", "class_", "]", "+", "self", ".", "n_samples", ">", "len", "(", "self", ".", "label_to_indices", "[", "class_", "]", ")", ":", "\n", "                    ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "label_to_indices", "[", "class_", "]", ")", "\n", "self", ".", "used_label_indices_count", "[", "class_", "]", "=", "0", "\n", "", "", "indices", "=", "torch", ".", "tensor", "(", "list", "(", "map", "(", "int", ",", "indices", ")", ")", ")", "\n", "yield", "indices", "\n", "self", ".", "count", "+=", "self", ".", "n_classes", "*", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedBatchSampler.__len__": [[85, 87], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_dataset", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedAudioToSpeechLabelDataLayer.output_ports": [[146, 155], ["NeuralType", "NeuralType", "NeuralType", "NeuralType", "AudioSignal", "tuple", "LengthsType", "tuple", "LabelsType", "tuple", "LengthsType"], "methods", ["None"], ["@", "property", "\n", "def", "output_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module output ports.\n        \"\"\"", "\n", "return", "{", "\n", "'audio_signal'", ":", "NeuralType", "(", "(", "'B'", ",", "'T'", ")", ",", "AudioSignal", "(", "freq", "=", "self", ".", "_sample_rate", ")", ")", ",", "\n", "'a_sig_length'", ":", "NeuralType", "(", "tuple", "(", "'B'", ")", ",", "LengthsType", "(", ")", ")", ",", "\n", "'label'", ":", "NeuralType", "(", "tuple", "(", "'B'", ")", ",", "LabelsType", "(", ")", ")", ",", "\n", "'label_length'", ":", "NeuralType", "(", "tuple", "(", "'B'", ")", ",", "LengthsType", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedAudioToSpeechLabelDataLayer.__init__": [[157, 209], ["nemo.backends.pytorch.DataLayerNM.__init__", "nemo.collections.asr.parts.features.WaveformFeaturizer", "nemo.collections.asr.parts.dataset.AudioLabelDataset", "torch.utils.data.DataLoader", "datalayer.BalancedAudioToSpeechLabelDataLayer._process_augmentations", "labels.append", "datalayer.BalancedBatchSampler", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__", "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedAudioToSpeechLabelDataLayer._process_augmentations"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "manifest_filepath", ":", "str", ",", "\n", "labels", ":", "List", "[", "str", "]", ",", "\n", "batch_size", ":", "int", ",", "\n", "sample_rate", ":", "int", "=", "16000", ",", "\n", "int_values", ":", "bool", "=", "False", ",", "\n", "num_workers", ":", "int", "=", "0", ",", "\n", "shuffle", ":", "bool", "=", "True", ",", "\n", "min_duration", ":", "Optional", "[", "float", "]", "=", "0.1", ",", "\n", "max_duration", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "trim_silence", ":", "bool", "=", "False", ",", "\n", "drop_last", ":", "bool", "=", "False", ",", "\n", "load_audio", ":", "bool", "=", "True", ",", "\n", "augmentor", ":", "Optional", "[", "Union", "[", "AudioAugmentor", ",", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", "]", "]", "=", "None", ",", "\n", "num_classes", ":", "int", "=", "35", ",", "\n", "class_dists", "=", "None", ",", "\n", "class_probs", "=", "None", ",", "\n", "probs_num", "=", "0", "\n", ")", ":", "\n", "        ", "super", "(", "BalancedAudioToSpeechLabelDataLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_manifest_filepath", "=", "manifest_filepath", "\n", "self", ".", "_labels", "=", "labels", "\n", "self", ".", "_sample_rate", "=", "sample_rate", "\n", "\n", "if", "augmentor", "is", "not", "None", ":", "\n", "            ", "augmentor", "=", "self", ".", "_process_augmentations", "(", "augmentor", ")", "\n", "\n", "", "self", ".", "_featurizer", "=", "WaveformFeaturizer", "(", "sample_rate", "=", "sample_rate", ",", "int_values", "=", "int_values", ",", "augmentor", "=", "augmentor", ")", "\n", "\n", "dataset_params", "=", "{", "\n", "'manifest_filepath'", ":", "manifest_filepath", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'featurizer'", ":", "self", ".", "_featurizer", ",", "\n", "'max_duration'", ":", "max_duration", ",", "\n", "'min_duration'", ":", "min_duration", ",", "\n", "'trim'", ":", "trim_silence", ",", "\n", "'load_audio'", ":", "load_audio", ",", "\n", "}", "\n", "self", ".", "_dataset", "=", "AudioLabelDataset", "(", "**", "dataset_params", ")", "\n", "labels", "=", "[", "]", "\n", "for", "sample", "in", "self", ".", "_dataset", ".", "collection", ":", "\n", "            ", "labels", ".", "append", "(", "self", ".", "_dataset", ".", "label2id", "[", "sample", ".", "label", "]", ")", "\n", "", "self", ".", "_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "_dataset", ",", "\n", "batch_sampler", "=", "BalancedBatchSampler", "(", "labels", ",", "n_classes", "=", "num_classes", ",", "n_samples", "=", "batch_size", "//", "num_classes", ",", "\n", "class_dists", "=", "class_dists", ",", "class_probs", "=", "class_probs", ",", "probs_num", "=", "probs_num", ")", ",", "\n", "# TODO replace with kwargs", "\n", "collate_fn", "=", "partial", "(", "seq_collate_fn", ",", "token_pad_value", "=", "0", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedAudioToSpeechLabelDataLayer.__len__": [[211, 213], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedAudioToSpeechLabelDataLayer._process_augmentations": [[214, 236], ["nemo.collections.asr.parts.perturb.AudioAugmentor.items", "nemo.collections.asr.parts.perturb.AudioAugmentor", "augment_kwargs.get", "nemo.logging.error", "augment_kwargs.pop", "augmentations.append", "nemo.logging.error", "nemo.collections.asr.parts.perturb.perturbation_types.keys"], "methods", ["None"], ["", "def", "_process_augmentations", "(", "self", ",", "augmentor", ")", "->", "AudioAugmentor", ":", "\n", "        ", "augmentations", "=", "[", "]", "\n", "for", "augment_name", ",", "augment_kwargs", "in", "augmentor", ".", "items", "(", ")", ":", "\n", "            ", "prob", "=", "augment_kwargs", ".", "get", "(", "'prob'", ",", "None", ")", "\n", "\n", "if", "prob", "is", "None", ":", "\n", "                ", "logging", ".", "error", "(", "\n", "f'Augmentation \"{augment_name}\" will not be applied as '", "\n", "f'keyword argument \"prob\" was not defined for this augmentation.'", "\n", ")", "\n", "\n", "", "else", ":", "\n", "                ", "_", "=", "augment_kwargs", ".", "pop", "(", "'prob'", ")", "\n", "\n", "try", ":", "\n", "                    ", "augmentation", "=", "perturbation_types", "[", "augment_name", "]", "(", "**", "augment_kwargs", ")", "\n", "augmentations", ".", "append", "(", "[", "prob", ",", "augmentation", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "logging", ".", "error", "(", "f\"Invalid perturbation name. Allowed values : {perturbation_types.keys()}\"", ")", "\n", "\n", "", "", "", "augmentor", "=", "AudioAugmentor", "(", "perturbations", "=", "augmentations", ")", "\n", "return", "augmentor", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedAudioToSpeechLabelDataLayer.dataset": [[237, 240], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.datalayer.BalancedAudioToSpeechLabelDataLayer.data_iterator": [[241, 244], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataloader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.__init__": [[27, 61], ["nemo.core.callbacks.ActionCallback.__init__", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "eval_tensors", ",", "\n", "user_iter_callback", ",", "\n", "user_epochs_done_callback", ",", "\n", "tb_writer", "=", "None", ",", "\n", "tb_writer_func", "=", "None", ",", "\n", "eval_step", "=", "1", ",", "\n", "eval_epoch", "=", "None", ",", "\n", "wandb_name", "=", "None", ",", "\n", "wandb_project", "=", "None", ",", "\n", "eval_at_start", "=", "True", ",", "\n", ")", ":", "\n", "# TODO: Eval_epoch currently does nothing", "\n", "        ", "if", "eval_step", "is", "None", "and", "eval_epoch", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Either eval_step or eval_epoch must be set. \"", "f\"But got: {eval_step} and {eval_epoch}\"", ")", "\n", "", "if", "(", "eval_step", "is", "not", "None", "and", "eval_step", "<=", "0", ")", "or", "(", "eval_epoch", "is", "not", "None", "and", "eval_epoch", "<=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Eval_step and eval_epoch must be > 0.\"", "f\"But got: {eval_step} and {eval_epoch}\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_eval_tensors", "=", "eval_tensors", "\n", "self", ".", "_swriter", "=", "tb_writer", "\n", "self", ".", "_tb_writer_func", "=", "tb_writer_func", "\n", "self", ".", "_eval_frequency", "=", "eval_step", "\n", "self", ".", "_eval_at_start", "=", "eval_at_start", "\n", "# will be passed to callbacks below", "\n", "self", ".", "_global_var_dict", "=", "{", "}", "\n", "\n", "# Callbacks", "\n", "self", ".", "user_iter_callback", "=", "user_iter_callback", "\n", "self", ".", "user_done_callback", "=", "user_epochs_done_callback", "\n", "\n", "# Weights and biases", "\n", "self", ".", "_wandb_project", "=", "wandb_project", "\n", "self", ".", "_wandb_name", "=", "wandb_name", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.eval_tensors": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "eval_tensors", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_eval_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.tb_writer_func": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tb_writer_func", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tb_writer_func", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.swriter": [[70, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "swriter", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_swriter", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.on_epoch_end": [[74, 76], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.on_iteration_end": [[77, 91], ["time.time", "embedding_callback.EmbeddingEvaluatorCallback.action._eval", "torch.cat", "embedding_callback.EmbeddingEvaluatorCallback._swriter.add_embedding", "logging.info", "time.time", "logging.info", "torch.cat"], "methods", ["None"], ["", "def", "on_iteration_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "step", "==", "0", "and", "not", "self", ".", "_eval_at_start", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "step", "%", "self", ".", "_eval_frequency", "==", "0", ":", "\n", "            ", "if", "self", ".", "global_rank", "==", "0", "or", "self", ".", "global_rank", "is", "None", ":", "\n", "                ", "logging", ".", "info", "(", "'Doing Evaluation '", "+", "'.'", "*", "30", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "action", ".", "_eval", "(", "self", ".", "_eval_tensors", ",", "self", ",", "self", ".", "step", ")", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "if", "self", ".", "global_rank", "==", "0", "or", "self", ".", "global_rank", "is", "None", ":", "\n", "                ", "logging", ".", "info", "(", "f'Evaluation time: {elapsed_time} seconds'", ")", "\n", "", "embeds", "=", "torch", ".", "cat", "(", "self", ".", "_global_var_dict", "[", "'embeds'", "]", ",", "0", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "labels", "=", "torch", ".", "cat", "(", "self", ".", "_global_var_dict", "[", "'labels'", "]", ",", "0", ")", "\n", "self", ".", "_swriter", ".", "add_embedding", "(", "embeds", ",", "metadata", "=", "labels", ",", "global_step", "=", "self", ".", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.on_action_start": [[92, 104], ["wandb.init", "logging.info", "logging.error", "logging.info"], "methods", ["None"], ["", "", "def", "on_action_start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "is", "None", "or", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "if", "self", ".", "_wandb_name", "is", "not", "None", "or", "self", ".", "_wandb_project", "is", "not", "None", ":", "\n", "                ", "if", "_WANDB_AVAILABLE", "and", "wandb", ".", "run", "is", "None", ":", "\n", "                    ", "wandb", ".", "init", "(", "name", "=", "self", ".", "_wandb_name", ",", "project", "=", "self", ".", "_wandb_project", ")", "\n", "", "elif", "_WANDB_AVAILABLE", "and", "wandb", ".", "run", "is", "not", "None", ":", "\n", "                    ", "logging", ".", "info", "(", "\"Re-using wandb session\"", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "error", "(", "\"Could not import wandb. Did you install it (pip install --upgrade wandb)?\"", ")", "\n", "logging", ".", "info", "(", "\"Will not log data to weights and biases.\"", ")", "\n", "self", ".", "_wandb_name", "=", "None", "\n", "self", ".", "_wandb_project", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.on_action_end": [[105, 114], ["time.time", "embedding_callback.EmbeddingEvaluatorCallback.action._eval", "logging.info", "time.time", "logging.info"], "methods", ["None"], ["", "", "", "", "def", "on_action_end", "(", "self", ")", ":", "\n", "        ", "step", "=", "self", ".", "step", "\n", "if", "self", ".", "global_rank", "==", "0", "or", "self", ".", "global_rank", "is", "None", ":", "\n", "            ", "logging", ".", "info", "(", "'Final Evaluation '", "+", "'.'", "*", "30", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "action", ".", "_eval", "(", "self", ".", "_eval_tensors", ",", "self", ",", "step", ")", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "if", "self", ".", "global_rank", "==", "0", "or", "self", ".", "global_rank", "is", "None", ":", "\n", "            ", "logging", ".", "info", "(", "f'Evaluation time: {elapsed_time} seconds'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.clear_global_var_dict": [[115, 117], ["None"], "methods", ["None"], ["", "", "def", "clear_global_var_dict", "(", "self", ")", ":", "\n", "        ", "self", ".", "_global_var_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.layers.embedding_callback.EmbeddingEvaluatorCallback.wandb_log": [[118, 121], ["wandb.log"], "methods", ["None"], ["", "def", "wandb_log", "(", "self", ",", "tensors_logged", ")", ":", "\n", "        ", "if", "self", ".", "_wandb_name", "is", "not", "None", "and", "_WANDB_AVAILABLE", ":", "\n", "            ", "wandb", ".", "log", "(", "tensors_logged", ",", "step", "=", "self", ".", "step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.att_mh.Att_rnn.input_ports": [[9, 16], ["nemo.utils.decorators.add_port_docs", "NeuralType", "SpectrogramType"], "methods", ["None"], ["    ", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "input_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module input ports.\n        \"\"\"", "\n", "return", "{", "\n", "\"audio_signal\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "SpectrogramType", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.att_mh.Att_rnn.output_ports": [[18, 25], ["nemo.utils.decorators.add_port_docs", "NeuralType", "AcousticEncodedRepresentation"], "methods", ["None"], ["", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "output_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module output ports.\n        \"\"\"", "\n", "return", "{", "\n", "\"outputs\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "AcousticEncodedRepresentation", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.att_mh.Att_rnn.__init__": [[27, 58], ["nemo.backends.pytorch.TrainableNM.__init__", "torch.nn.ZeroPad2d", "torch.nn.Conv2d", "torch.nn.ZeroPad2d", "torch.nn.Conv2d", "torch.nn.GRU", "torch.nn.GRU", "range", "att_mh.Att_rnn.multiheads.append", "torch.nn.Linear().cuda", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "zero_pad1", "=", "torch", ".", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "0", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "32", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "# self.bn1 = torch.nn.BatchNorm2d(10)", "\n", "self", ".", "zero_pad2", "=", "torch", ".", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "0", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "\n", "out_channels", "=", "1", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# self.bn2 = torch.nn.BatchNorm2d(1)", "\n", "\n", "self", ".", "gru1", "=", "torch", ".", "nn", ".", "GRU", "(", "input_size", "=", "64", ",", "\n", "hidden_size", "=", "128", ",", "\n", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "gru2", "=", "torch", ".", "nn", ".", "GRU", "(", "input_size", "=", "256", ",", "\n", "hidden_size", "=", "16", ",", "\n", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "multiheads", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "multiheads", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "32", ")", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.att_mh.Att_rnn.forward": [[59, 86], ["audio_signal.unsqueeze.unsqueeze.permute", "audio_signal.unsqueeze.unsqueeze.unsqueeze", "att_mh.Att_rnn.zero_pad1", "att_mh.Att_rnn.conv1", "torch.nn.functional.relu", "att_mh.Att_rnn.zero_pad2", "att_mh.Att_rnn.conv2", "torch.nn.functional.relu", "x.squeeze.squeeze.squeeze", "att_mh.Att_rnn.gru1", "att_mh.Att_rnn.gru2", "torch.cat().unsqueeze", "head", "torch.einsum", "torch.nn.functional.softmax", "multiheads.append", "torch.einsum", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "audio_signal", ")", ":", "\n", "\n", "        ", "audio_signal", "=", "audio_signal", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "audio_signal", "=", "audio_signal", ".", "unsqueeze", "(", "1", ")", "\n", "x", "=", "self", ".", "zero_pad1", "(", "audio_signal", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "# x = self.bn1(x)", "\n", "\n", "x", "=", "self", ".", "zero_pad2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "# x = self.bn2(x)", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "x", ",", "h_n", "=", "self", ".", "gru1", "(", "x", ")", "\n", "\n", "x", ",", "h_n", "=", "self", ".", "gru2", "(", "x", ")", "\n", "middle", "=", "x", ".", "shape", "[", "1", "]", "//", "2", "\n", "mid_feature", "=", "x", "[", ":", ",", "middle", ",", ":", "]", "\n", "multiheads", "=", "[", "]", "\n", "for", "head", "in", "self", ".", "multiheads", ":", "\n", "            ", "y", "=", "head", "(", "mid_feature", ")", "\n", "att_weigths", "=", "torch", ".", "einsum", "(", "'bt,bft->bf'", ",", "y", ",", "x", ")", "\n", "att_weigths", "=", "F", ".", "softmax", "(", "att_weigths", ")", "\n", "multiheads", ".", "append", "(", "torch", ".", "einsum", "(", "'bf, bft->bt'", ",", "att_weigths", ",", "x", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "multiheads", ",", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.fc.LinearLayer.input_ports": [[11, 24], ["NeuralType", "AcousticEncodedRepresentation"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "input_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module input ports.\n\n        encoder_output:\n            0: AxisType(BatchTag)\n\n            1: AxisType(EncodedRepresentationTag)\n\n            2: AxisType(ProcessedTimeTag)\n        \"\"\"", "\n", "\n", "return", "{", "\"encoder_output\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "AcousticEncodedRepresentation", "(", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.fc.LinearLayer.output_ports": [[25, 35], ["NeuralType", "AcousticEncodedRepresentation"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module output ports.        \n                \n        embs: \n            0: AxisType(BatchTag)\n            1: AxisType(EncodedRepresentationTah) \n        \"\"\"", "\n", "return", "{", "\n", "\"embs\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "AcousticEncodedRepresentation", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.fc.LinearLayer.__init__": [[37, 43], ["nemo.backends.pytorch.nm.TrainableNM.__init__", "torch.Linear", "torch.Linear", "fc.LinearLayer.apply", "fc.LinearLayer.to", "nemo.collections.asr.parts.jasper.init_weights"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["", "def", "__init__", "(", "self", ",", "feat_in", "=", "128", "*", "8", ",", "emb_size", "=", "128", ",", "init_mode", "=", "\"xavier_uniform\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "feat_in", ",", "emb_size", ")", "\n", "self", ".", "apply", "(", "lambda", "x", ":", "init_weights", "(", "x", ",", "mode", "=", "init_mode", ")", ")", "\n", "self", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.fc.LinearLayer.forward": [[44, 49], ["encoder_output.flatten().float.flatten().float.flatten().float", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "fc.LinearLayer.linear", "encoder_output.flatten().float.flatten().float.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoder_output", ")", ":", "\n", "        ", "encoder_output", "=", "encoder_output", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "float", "(", ")", "\n", "out", "=", "torch", ".", "reshape", "(", "self", ".", "linear", "(", "encoder_output", ")", ",", "(", "-", "1", ",", "1", ",", "self", ".", "emb_size", ")", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Swish.forward": [[10, 15], ["ctx.save_for_backward", "torch.sigmoid"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "i", ")", ":", "\n", "        ", "result", "=", "i", "*", "torch", ".", "sigmoid", "(", "i", ")", "\n", "ctx", ".", "save_for_backward", "(", "i", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Swish.backward": [[16, 21], ["torch.sigmoid"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "i", "=", "ctx", ".", "saved_variables", "[", "0", "]", "\n", "sigmoid_i", "=", "torch", ".", "sigmoid", "(", "i", ")", "\n", "return", "grad_output", "*", "(", "sigmoid_i", "*", "(", "1", "+", "i", "*", "(", "1", "-", "sigmoid_i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.CustomSwish.forward": [[24, 26], ["Swish.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "return", "Swish", ".", "apply", "(", "input_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Res15.input_ports": [[29, 37], ["nemo.utils.decorators.add_port_docs", "NeuralType", "NeuralType", "SpectrogramType", "tuple", "LengthsType"], "methods", ["None"], ["    ", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "input_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module input ports.\n        \"\"\"", "\n", "return", "{", "\n", "\"audio_signal\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "SpectrogramType", "(", ")", ")", ",", "\n", "\"length\"", ":", "NeuralType", "(", "tuple", "(", "'B'", ")", ",", "LengthsType", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Res15.output_ports": [[39, 47], ["nemo.utils.decorators.add_port_docs", "NeuralType", "NeuralType", "AcousticEncodedRepresentation", "tuple", "LengthsType"], "methods", ["None"], ["", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "output_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module output ports.\n        \"\"\"", "\n", "return", "{", "\n", "\"outputs\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "AcousticEncodedRepresentation", "(", ")", ")", ",", "\n", "\"encoded_lengths\"", ":", "NeuralType", "(", "tuple", "(", "'B'", ")", ",", "LengthsType", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Res15.__init__": [[49, 64], ["nemo.backends.pytorch.TrainableNM.__init__", "torch.nn.Conv2d", "enumerate", "resnet.Res15.add_module", "resnet.Res15.add_module", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "range", "range", "int", "int"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["", "def", "__init__", "(", "self", ",", "n_maps", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "n_maps", "=", "n_maps", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "1", ",", "n_maps", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "n_layers", "=", "n_layers", "=", "13", "\n", "dilation", "=", "True", "\n", "if", "dilation", ":", "\n", "            ", "self", ".", "convs", "=", "[", "nn", ".", "Conv2d", "(", "n_maps", ",", "n_maps", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "int", "(", "2", "**", "(", "i", "//", "3", ")", ")", ",", "dilation", "=", "int", "(", "2", "**", "(", "i", "//", "3", ")", ")", ",", "\n", "bias", "=", "False", ")", "for", "i", "in", "range", "(", "n_layers", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "convs", "=", "[", "nn", ".", "Conv2d", "(", "n_maps", ",", "n_maps", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", "\n", "", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"bn{}\"", ".", "format", "(", "i", "+", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "n_maps", ",", "affine", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "\"conv{}\"", ".", "format", "(", "i", "+", "1", ")", ",", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Res15.forward": [[65, 83], ["audio_signal.unsqueeze", "range", "torch.mean.view", "torch.mean", "torch.nn.functional.relu", "torch.mean.size", "torch.mean.size", "torch.mean.unsqueeze", "hasattr", "getattr", "resnet.Res15.pool", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "audio_signal", ",", "length", "=", "None", ")", ":", "\n", "        ", "x", "=", "audio_signal", ".", "unsqueeze", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", "+", "1", ")", ":", "\n", "            ", "y", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "\"conv{}\"", ".", "format", "(", "i", ")", ")", "(", "x", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "\"pool\"", ")", ":", "\n", "                    ", "y", "=", "self", ".", "pool", "(", "y", ")", "\n", "", "old_x", "=", "y", "\n", "", "if", "i", ">", "0", "and", "i", "%", "2", "==", "0", ":", "\n", "                ", "x", "=", "y", "+", "old_x", "\n", "old_x", "=", "x", "\n", "", "else", ":", "\n", "                ", "x", "=", "y", "\n", "", "if", "i", ">", "0", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ",", "\"bn{}\"", ".", "format", "(", "i", ")", ")", "(", "x", ")", "\n", "", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# shape: (batch, feats, o3)", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "2", ")", "\n", "return", "x", ".", "unsqueeze", "(", "-", "2", ")", ",", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Res8.input_ports": [[86, 94], ["nemo.utils.decorators.add_port_docs", "NeuralType", "NeuralType", "SpectrogramType", "tuple", "LengthsType"], "methods", ["None"], ["    ", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "input_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module input ports.\n        \"\"\"", "\n", "return", "{", "\n", "\"audio_signal\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "SpectrogramType", "(", ")", ")", ",", "\n", "\"length\"", ":", "NeuralType", "(", "tuple", "(", "'B'", ")", ",", "LengthsType", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Res8.output_ports": [[96, 104], ["nemo.utils.decorators.add_port_docs", "NeuralType", "NeuralType", "AcousticEncodedRepresentation", "tuple", "LengthsType"], "methods", ["None"], ["", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "output_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module output ports.\n        \"\"\"", "\n", "return", "{", "\n", "\"outputs\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "AcousticEncodedRepresentation", "(", ")", ")", ",", "\n", "\"encoded_lengths\"", ":", "NeuralType", "(", "tuple", "(", "'B'", ")", ",", "LengthsType", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Res8.__init__": [[106, 117], ["nemo.backends.pytorch.TrainableNM.__init__", "torch.nn.Conv2d", "torch.nn.AvgPool2d", "enumerate", "torch.nn.Conv2d", "resnet.Res8.add_module", "resnet.Res8.add_module", "range", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["", "def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "n_maps", "=", "hidden_size", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "1", ",", "n_maps", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "(", "3", ",", "4", ")", ")", "# flipped -- better for 80 log-Mels", "\n", "\n", "self", ".", "n_layers", "=", "n_layers", "=", "6", "\n", "self", ".", "convs", "=", "[", "nn", ".", "Conv2d", "(", "n_maps", ",", "n_maps", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "f'bn{i + 1}'", ",", "nn", ".", "BatchNorm2d", "(", "n_maps", ",", "affine", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "f'conv{i + 1}'", ",", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.resnet.Res8.forward": [[118, 137], ["audio_signal.unsqueeze", "torch.mean.permute().contiguous", "range", "torch.mean.view", "torch.mean", "torch.nn.functional.relu", "torch.mean.size", "torch.mean.size", "torch.mean.unsqueeze", "torch.mean.permute", "hasattr", "getattr", "resnet.Res8.pool", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "audio_signal", ",", "length", "=", "None", ")", ":", "\n", "        ", "x", "=", "audio_signal", ".", "unsqueeze", "(", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "# Original res8 uses (time, frequency) format", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", "+", "1", ")", ":", "\n", "            ", "y", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "f'conv{i}'", ")", "(", "x", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "'pool'", ")", ":", "\n", "                    ", "y", "=", "self", ".", "pool", "(", "y", ")", "\n", "", "old_x", "=", "y", "\n", "", "if", "i", ">", "0", "and", "i", "%", "2", "==", "0", ":", "\n", "                ", "x", "=", "y", "+", "old_x", "\n", "old_x", "=", "x", "\n", "", "else", ":", "\n", "                ", "x", "=", "y", "\n", "", "if", "i", ">", "0", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ",", "f'bn{i}'", ")", "(", "x", ")", "\n", "", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# shape: (batch, feats, o3)", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "2", ")", "\n", "return", "x", ".", "unsqueeze", "(", "-", "2", ")", ",", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.classifier.ClassificationNet.input_ports": [[10, 17], ["nemo.utils.decorators.add_port_docs", "NeuralType", "AcousticEncodedRepresentation"], "methods", ["None"], ["    ", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "input_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module input ports.\n        \"\"\"", "\n", "return", "{", "\n", "\"embeddings\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "AcousticEncodedRepresentation", "(", ")", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.classifier.ClassificationNet.output_ports": [[20, 26], ["nemo.utils.decorators.add_port_docs", "NeuralType", "LogitsType"], "methods", ["None"], ["", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "output_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module output ports.\n        \"\"\"", "\n", "return", "{", "\"logits\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ")", ",", "LogitsType", "(", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.classifier.ClassificationNet.__init__": [[27, 33], ["nemo.backends.pytorch.nm.TrainableNM.__init__", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_embed", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "nonlinear", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "n_embed", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.models.classifier.ClassificationNet.forward": [[34, 39], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "classifier.ClassificationNet.nonlinear", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "classifier.ClassificationNet.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "embeddings", "=", "torch", ".", "flatten", "(", "embeddings", ",", "start_dim", "=", "-", "2", ")", "\n", "output", "=", "self", ".", "nonlinear", "(", "embeddings", ")", "\n", "scores", "=", "F", ".", "log_softmax", "(", "self", ".", "fc1", "(", "output", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.triplet.OnlineTripletLoss.input_ports": [[16, 24], ["nemo.utils.decorators.add_port_docs", "NeuralType", "NeuralType", "AcousticEncodedRepresentation", "LabelsType"], "methods", ["None"], ["@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "input_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module input ports.\n        \"\"\"", "\n", "return", "{", "\n", "\"embeds\"", ":", "NeuralType", "(", "(", "'B'", ",", "'D'", ",", "'T'", ")", ",", "AcousticEncodedRepresentation", "(", ")", ")", ",", "\n", "\"targets\"", ":", "NeuralType", "(", "'B'", ",", "LabelsType", "(", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.triplet.OnlineTripletLoss.output_ports": [[26, 34], ["nemo.utils.decorators.add_port_docs", "NeuralType", "LossType"], "methods", ["None"], ["", "@", "property", "\n", "@", "add_port_docs", "(", ")", "\n", "def", "output_ports", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns definitions of module output ports.\n        loss:\n            NeuralType(LossType)\n        \"\"\"", "\n", "return", "{", "\"loss\"", ":", "NeuralType", "(", "elements_type", "=", "LossType", "(", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.triplet.OnlineTripletLoss.__init__": [[35, 39], ["nemo.backends.pytorch.nm.LossNM.__init__"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["", "def", "__init__", "(", "self", ",", "margin", ",", "triplet_selector", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "triplet_selector", "=", "triplet_selector", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.triplet.OnlineTripletLoss._loss": [[40, 52], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "triplet.OnlineTripletLoss.triplet_selector.get_triplets", "torch.relu", "torch.relu", "torch.relu.mean", "triplets.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.get_triplets"], ["", "def", "_loss", "(", "self", ",", "embeddings", ",", "target", ")", ":", "\n", "        ", "embeddings", "=", "torch", ".", "flatten", "(", "embeddings", ",", "start_dim", "=", "-", "2", ")", "\n", "triplets", "=", "self", ".", "triplet_selector", ".", "get_triplets", "(", "embeddings", ",", "target", ")", "\n", "\n", "if", "embeddings", ".", "is_cuda", ":", "\n", "            ", "triplets", "=", "triplets", ".", "cuda", "(", ")", "\n", "\n", "", "ap_distances", "=", "(", "embeddings", "[", "triplets", "[", ":", ",", "0", "]", "]", "-", "embeddings", "[", "triplets", "[", ":", ",", "1", "]", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "# .pow(.5)", "\n", "an_distances", "=", "(", "embeddings", "[", "triplets", "[", ":", ",", "0", "]", "]", "-", "embeddings", "[", "triplets", "[", ":", ",", "2", "]", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "# .pow(.5)", "\n", "losses", "=", "F", ".", "relu", "(", "ap_distances", "-", "an_distances", "+", "self", ".", "margin", ")", "\n", "\n", "return", "losses", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.triplet.OnlineTripletLoss._loss_function": [[53, 55], ["triplet.OnlineTripletLoss._loss", "kwargs.values"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.triplet.OnlineTripletLoss._loss"], ["", "def", "_loss_function", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_loss", "(", "*", "(", "kwargs", ".", "values", "(", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.PairSelector.__init__": [[20, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.PairSelector.get_pairs": [[23, 25], ["None"], "methods", ["None"], ["", "def", "get_pairs", "(", "self", ",", "embeddings", ",", "labels", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.AllPositivePairSelector.__init__": [[33, 36], ["utils.PairSelector.__init__"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["def", "__init__", "(", "self", ",", "balance", "=", "True", ")", ":", "\n", "        ", "super", "(", "AllPositivePairSelector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "balance", "=", "balance", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.AllPositivePairSelector.get_pairs": [[37, 47], ["labels.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "numpy.array", "torch.LongTensor", "list", "itertools.combinations", "labels.cpu().data.numpy.cpu().data.numpy.cpu", "range", "len", "torch.randperm", "len", "len"], "methods", ["None"], ["", "def", "get_pairs", "(", "self", ",", "embeddings", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "all_pairs", "=", "np", ".", "array", "(", "list", "(", "combinations", "(", "range", "(", "len", "(", "labels", ")", ")", ",", "2", ")", ")", ")", "\n", "all_pairs", "=", "torch", ".", "LongTensor", "(", "all_pairs", ")", "\n", "positive_pairs", "=", "all_pairs", "[", "(", "labels", "[", "all_pairs", "[", ":", ",", "0", "]", "]", "==", "labels", "[", "all_pairs", "[", ":", ",", "1", "]", "]", ")", ".", "nonzero", "(", ")", "]", "\n", "negative_pairs", "=", "all_pairs", "[", "(", "labels", "[", "all_pairs", "[", ":", ",", "0", "]", "]", "!=", "labels", "[", "all_pairs", "[", ":", ",", "1", "]", "]", ")", ".", "nonzero", "(", ")", "]", "\n", "if", "self", ".", "balance", ":", "\n", "            ", "negative_pairs", "=", "negative_pairs", "[", "torch", ".", "randperm", "(", "len", "(", "negative_pairs", ")", ")", "[", ":", "len", "(", "positive_pairs", ")", "]", "]", "\n", "\n", "", "return", "positive_pairs", ",", "negative_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.HardNegativePairSelector.__init__": [[55, 58], ["utils.PairSelector.__init__"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["def", "__init__", "(", "self", ",", "cpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "HardNegativePairSelector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cpu", "=", "cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.HardNegativePairSelector.get_pairs": [[59, 76], ["utils.pdist", "labels.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "numpy.array", "torch.LongTensor", "negative_distances.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "embeddings.cpu.cpu.cpu", "list", "numpy.argpartition", "itertools.combinations", "len", "len", "torch.LongTensor", "labels.cpu().data.numpy.cpu().data.numpy.cpu", "range", "negative_distances.cpu().data.numpy.cpu().data.numpy.cpu", "len"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.pdist"], ["", "def", "get_pairs", "(", "self", ",", "embeddings", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "cpu", ":", "\n", "            ", "embeddings", "=", "embeddings", ".", "cpu", "(", ")", "\n", "", "distance_matrix", "=", "pdist", "(", "embeddings", ")", "\n", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "all_pairs", "=", "np", ".", "array", "(", "list", "(", "combinations", "(", "range", "(", "len", "(", "labels", ")", ")", ",", "2", ")", ")", ")", "\n", "all_pairs", "=", "torch", ".", "LongTensor", "(", "all_pairs", ")", "\n", "positive_pairs", "=", "all_pairs", "[", "(", "labels", "[", "all_pairs", "[", ":", ",", "0", "]", "]", "==", "labels", "[", "all_pairs", "[", ":", ",", "1", "]", "]", ")", ".", "nonzero", "(", ")", "]", "\n", "negative_pairs", "=", "all_pairs", "[", "(", "labels", "[", "all_pairs", "[", ":", ",", "0", "]", "]", "!=", "labels", "[", "all_pairs", "[", ":", ",", "1", "]", "]", ")", ".", "nonzero", "(", ")", "]", "\n", "\n", "negative_distances", "=", "distance_matrix", "[", "negative_pairs", "[", ":", ",", "0", "]", ",", "negative_pairs", "[", ":", ",", "1", "]", "]", "\n", "negative_distances", "=", "negative_distances", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "top_negatives", "=", "np", ".", "argpartition", "(", "negative_distances", ",", "len", "(", "positive_pairs", ")", ")", "[", ":", "len", "(", "positive_pairs", ")", "]", "\n", "top_negative_pairs", "=", "negative_pairs", "[", "torch", ".", "LongTensor", "(", "top_negatives", ")", "]", "\n", "\n", "return", "positive_pairs", ",", "top_negative_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.TripletSelector.__init__": [[84, 86], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.TripletSelector.get_triplets": [[87, 89], ["None"], "methods", ["None"], ["", "def", "get_triplets", "(", "self", ",", "embeddings", ",", "labels", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.AllTripletSelector.__init__": [[97, 99], ["utils.TripletSelector.__init__"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AllTripletSelector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.AllTripletSelector.get_triplets": [[100, 117], ["labels.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "set", "torch.LongTensor", "list", "numpy.array", "numpy.where", "len", "numpy.where", "itertools.combinations", "labels.cpu().data.numpy.cpu().data.numpy.cpu", "numpy.logical_not"], "methods", ["None"], ["", "def", "get_triplets", "(", "self", ",", "embeddings", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "triplets", "=", "[", "]", "\n", "for", "label", "in", "set", "(", "labels", ")", ":", "\n", "            ", "label_mask", "=", "(", "labels", "==", "label", ")", "\n", "label_indices", "=", "np", ".", "where", "(", "label_mask", ")", "[", "0", "]", "\n", "if", "len", "(", "label_indices", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "", "negative_indices", "=", "np", ".", "where", "(", "np", ".", "logical_not", "(", "label_mask", ")", ")", "[", "0", "]", "\n", "anchor_positives", "=", "list", "(", "combinations", "(", "label_indices", ",", "2", ")", ")", "# All anchor-positive pairs", "\n", "\n", "# Add all negatives for all positive pairs", "\n", "temp_triplets", "=", "[", "[", "anchor_positive", "[", "0", "]", ",", "anchor_positive", "[", "1", "]", ",", "neg_ind", "]", "for", "anchor_positive", "in", "anchor_positives", "\n", "for", "neg_ind", "in", "negative_indices", "]", "\n", "triplets", "+=", "temp_triplets", "\n", "\n", "", "return", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "triplets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__": [[143, 148], ["utils.TripletSelector.__init__"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.__init__"], ["def", "__init__", "(", "self", ",", "margin", ",", "negative_selection_fn", ",", "cpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "FunctionNegativeTripletSelector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cpu", "=", "cpu", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "negative_selection_fn", "=", "negative_selection_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.FunctionNegativeTripletSelector.get_triplets": [[149, 183], ["utils.pdist", "distance_matrix.cpu.cpu.cpu", "labels.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "set", "numpy.array", "torch.LongTensor", "embeddings.cpu.cpu.cpu", "list", "numpy.array", "zip", "len", "numpy.array.append", "numpy.where", "len", "numpy.where", "itertools.combinations", "loss_values.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "utils.FunctionNegativeTripletSelector.negative_selection_fn", "labels.cpu().data.numpy.cpu().data.numpy.cpu", "numpy.logical_not", "numpy.array.append", "loss_values.data.cpu().numpy.data.cpu().numpy.data.cpu", "torch.LongTensor", "torch.LongTensor", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.pdist"], ["", "def", "get_triplets", "(", "self", ",", "embeddings", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "cpu", ":", "\n", "            ", "embeddings", "=", "embeddings", ".", "cpu", "(", ")", "\n", "", "distance_matrix", "=", "pdist", "(", "embeddings", ")", "\n", "distance_matrix", "=", "distance_matrix", ".", "cpu", "(", ")", "\n", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "triplets", "=", "[", "]", "\n", "\n", "for", "label", "in", "set", "(", "labels", ")", ":", "\n", "            ", "label_mask", "=", "(", "labels", "==", "label", ")", "\n", "label_indices", "=", "np", ".", "where", "(", "label_mask", ")", "[", "0", "]", "\n", "if", "len", "(", "label_indices", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "", "negative_indices", "=", "np", ".", "where", "(", "np", ".", "logical_not", "(", "label_mask", ")", ")", "[", "0", "]", "\n", "anchor_positives", "=", "list", "(", "combinations", "(", "label_indices", ",", "2", ")", ")", "# All anchor-positive pairs", "\n", "anchor_positives", "=", "np", ".", "array", "(", "anchor_positives", ")", "\n", "\n", "ap_distances", "=", "distance_matrix", "[", "anchor_positives", "[", ":", ",", "0", "]", ",", "anchor_positives", "[", ":", ",", "1", "]", "]", "\n", "for", "anchor_positive", ",", "ap_distance", "in", "zip", "(", "anchor_positives", ",", "ap_distances", ")", ":", "\n", "                ", "loss_values", "=", "ap_distance", "-", "distance_matrix", "[", "\n", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "[", "anchor_positive", "[", "0", "]", "]", ")", ")", ",", "torch", ".", "LongTensor", "(", "negative_indices", ")", "]", "+", "self", ".", "margin", "\n", "loss_values", "=", "loss_values", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "hard_negative", "=", "self", ".", "negative_selection_fn", "(", "loss_values", ")", "\n", "if", "hard_negative", "is", "not", "None", ":", "\n", "                    ", "hard_negative", "=", "negative_indices", "[", "hard_negative", "]", "\n", "triplets", ".", "append", "(", "[", "anchor_positive", "[", "0", "]", ",", "anchor_positive", "[", "1", "]", ",", "hard_negative", "]", ")", "\n", "\n", "", "", "", "if", "len", "(", "triplets", ")", "==", "0", ":", "\n", "            ", "triplets", ".", "append", "(", "[", "anchor_positive", "[", "0", "]", ",", "anchor_positive", "[", "1", "]", ",", "negative_indices", "[", "0", "]", "]", ")", "\n", "\n", "", "triplets", "=", "np", ".", "array", "(", "triplets", ")", "\n", "\n", "return", "torch", ".", "LongTensor", "(", "triplets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.pdist": [[7, 11], ["vectors.pow().sum().view", "vectors.pow().sum().view", "vectors.mm", "vectors.pow().sum", "torch.t", "vectors.pow().sum", "vectors.pow", "vectors.pow"], "function", ["None"], ["def", "pdist", "(", "vectors", ")", ":", "\n", "    ", "distance_matrix", "=", "-", "2", "*", "vectors", ".", "mm", "(", "torch", ".", "t", "(", "vectors", ")", ")", "+", "vectors", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "+", "vectors", ".", "pow", "(", "2", ")", ".", "sum", "(", "\n", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "distance_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.hardest_negative": [[119, 122], ["numpy.argmax"], "function", ["None"], ["", "", "def", "hardest_negative", "(", "loss_values", ")", ":", "\n", "    ", "hard_negative", "=", "np", ".", "argmax", "(", "loss_values", ")", "\n", "return", "hard_negative", "if", "loss_values", "[", "hard_negative", "]", ">", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.random_hard_negative": [[124, 127], ["numpy.where", "numpy.random.choice", "len"], "function", ["None"], ["", "def", "random_hard_negative", "(", "loss_values", ")", ":", "\n", "    ", "hard_negatives", "=", "np", ".", "where", "(", "loss_values", ">", "0", ")", "[", "0", "]", "\n", "return", "np", ".", "random", ".", "choice", "(", "hard_negatives", ")", "if", "len", "(", "hard_negatives", ")", ">", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.semihard_negative": [[129, 133], ["numpy.where", "numpy.random.choice", "len", "numpy.logical_and", "len"], "function", ["None"], ["", "def", "semihard_negative", "(", "loss_values", ",", "margin", ")", ":", "\n", "    ", "semihard_negatives", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "loss_values", "<", "margin", ",", "loss_values", ">", "0", ")", ")", "[", "0", "]", "\n", "hardest_negative", "=", "np", ".", "random", ".", "choice", "(", "semihard_negatives", ")", "if", "len", "(", "semihard_negatives", ")", ">", "0", "else", "None", "\n", "return", "hardest_negative", ",", "len", "(", "semihard_negatives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.HardestNegativeTripletSelector": [[185, 188], ["utils.FunctionNegativeTripletSelector"], "function", ["None"], ["", "", "def", "HardestNegativeTripletSelector", "(", "margin", ",", "cpu", "=", "False", ")", ":", "return", "FunctionNegativeTripletSelector", "(", "margin", "=", "margin", ",", "\n", "negative_selection_fn", "=", "hardest_negative", ",", "\n", "cpu", "=", "cpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.RandomNegativeTripletSelector": [[190, 193], ["utils.FunctionNegativeTripletSelector"], "function", ["None"], ["def", "RandomNegativeTripletSelector", "(", "margin", ",", "cpu", "=", "False", ")", ":", "return", "FunctionNegativeTripletSelector", "(", "margin", "=", "margin", ",", "\n", "negative_selection_fn", "=", "random_hard_negative", ",", "\n", "cpu", "=", "cpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.SemihardNegativeTripletSelector": [[195, 200], ["utils.FunctionNegativeTripletSelector", "utils.semihard_negative"], "function", ["home.repos.pwc.inspect_result.roman-vygon_triplet_loss_kws.loss.utils.semihard_negative"], ["def", "SemihardNegativeTripletSelector", "(", "margin", ",", "cpu", "=", "False", ")", ":", "return", "FunctionNegativeTripletSelector", "(", "margin", "=", "margin", ",", "\n", "negative_selection_fn", "=", "lambda", "\n", "x", ":", "semihard_negative", "(", "\n", "x", ",", "margin", ")", ",", "\n", "cpu", "=", "cpu", ")", "\n", ""]]}