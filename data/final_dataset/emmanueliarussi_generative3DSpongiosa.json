{"home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.trabecuar_dataset.BonesPatchDataset.__init__": [[18, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "file_list", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "file_list", "=", "file_list", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.trabecuar_dataset.BonesPatchDataset.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.trabecuar_dataset.BonesPatchDataset.__getitem__": [[26, 43], ["os.path.join", "torch.load", "utils3d.normalize_volume", "torch.clamp", "trabecuar_dataset.BonesPatchDataset.unsqueeze", "trabecuar_dataset.BonesPatchDataset.type", "trabecuar_dataset.BonesPatchDataset.transform"], "methods", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.normalize_volume"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# load volume", "\n", "        ", "vol_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "file_list", "[", "idx", "]", ")", "\n", "vol", "=", "torch", ".", "load", "(", "vol_name", ")", "\n", "\n", "# normalize [-350,1100] h-units to [-1,1] range", "\n", "vol", "=", "normalize_volume", "(", "vol", ")", "\n", "\n", "# transform to tensor", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "vol", "=", "self", ".", "transform", "(", "vol", ")", "\n", "\n", "# clamp in range -1,1 (just in case some outlier is out of the range)", "\n", "", "vol", "=", "torch", ".", "clamp", "(", "vol", ",", "-", "1.", ",", "1.", ")", "\n", "vol", "=", "vol", ".", "unsqueeze", "(", "0", ")", "\n", "vol", "=", "vol", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "return", "vol", "\n", "", "", ""]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.progressive_model3d.Generator.__init__": [[14, 53], ["nn.LeakyReLU", "nn.Module.__init__", "nn.ModuleList", "range", "nn.ModuleList", "progressive_model3d.Generator.blocks.append", "range", "progressive_model3d.Generator.modules", "progressive_model3d.Generator.toRGBs.append", "nn.Sequential", "int", "int", "progressive_model3d.Generator.blocks.append", "layers.PixelNormLayer", "isinstance", "layers.conv", "OrderedDict", "nn.Sequential", "isinstance", "int", "OrderedDict", "nn.init.normal_", "nn.init.kaiming_normal_", "nn.init.constant_", "nn.init.constant_", "nn.init.constant_", "layers.conv", "layers.conv", "max", "max", "layers.conv", "layers.conv", "max"], "methods", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.GradientPenalty.__init__", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv"], ["    ", "def", "__init__", "(", "self", ",", "max_res", "=", "8", ",", "nch", "=", "16", ",", "nc", "=", "3", ",", "bn", "=", "False", ",", "ws", "=", "False", ",", "pn", "=", "False", ",", "activ", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# resolution of output as 4 * 2^max_res: 0 -> 4x4, 1 -> 8x8, ..., 8 -> 1024x1024", "\n", "self", ".", "max_res", "=", "max_res", "\n", "\n", "# output convolutions", "\n", "self", ".", "toRGBs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "max_res", "+", "1", ")", ":", "\n", "# max of nch * 32 feature maps as in the original article (with nch=16, 512 feature maps at max)", "\n", "            ", "self", ".", "toRGBs", ".", "append", "(", "conv", "(", "int", "(", "nch", "*", "2", "**", "(", "8", "-", "max", "(", "3", ",", "i", ")", ")", ")", ",", "nc", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "\n", "ws", "=", "ws", ",", "activ", "=", "None", ",", "gainWS", "=", "1", ")", ")", "\n", "\n", "# convolutional blocks", "\n", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# first block, always present", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "conv", "(", "nch", "*", "32", ",", "nch", "*", "32", ",", "kernel_size", "=", "4", ",", "padding", "=", "3", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "pn", "=", "pn", ",", "activ", "=", "activ", ")", ")", ",", "\n", "(", "'conv1'", ",", "conv", "(", "nch", "*", "32", ",", "nch", "*", "32", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "pn", "=", "pn", ",", "activ", "=", "activ", ")", ")", "\n", "]", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "max_res", ")", ":", "\n", "            ", "nin", "=", "int", "(", "nch", "*", "2", "**", "(", "8", "-", "max", "(", "3", ",", "i", ")", ")", ")", "\n", "nout", "=", "int", "(", "nch", "*", "2", "**", "(", "8", "-", "max", "(", "3", ",", "i", "+", "1", ")", ")", ")", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "conv", "(", "nin", ",", "nout", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "pn", "=", "pn", ",", "activ", "=", "activ", ")", ")", ",", "\n", "(", "'conv1'", ",", "conv", "(", "nout", ",", "nout", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "pn", "=", "pn", ",", "activ", "=", "activ", ")", ")", "\n", "]", ")", ")", ")", "\n", "\n", "", "self", ".", "pn", "=", "None", "\n", "if", "pn", ":", "\n", "            ", "self", ".", "pn", "=", "PixelNormLayer", "(", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "1", ")", "if", "ws", "else", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.progressive_model3d.Generator.forward": [[54, 85], ["range", "torch.tanh", "min", "int", "progressive_model3d.Generator.pn", "int", "torch.interpolate", "math.ceil", "int", "math.ceil", "int"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ",", "x", "=", "None", ")", ":", "\n", "# value driving the number of layers used in generation", "\n", "        ", "if", "x", "is", "None", ":", "\n", "            ", "progress", "=", "self", ".", "max_res", "\n", "", "else", ":", "\n", "            ", "progress", "=", "min", "(", "x", ",", "self", ".", "max_res", ")", "\n", "\n", "", "alpha", "=", "progress", "-", "int", "(", "progress", ")", "\n", "\n", "norm_input", "=", "self", ".", "pn", "(", "input", ")", "if", "self", ".", "pn", "else", "input", "\n", "\n", "# generating image of size corresponding to progress", "\n", "# Example : for progress going from 0 + epsilon to 1 excluded :", "\n", "# the output will be of size 8x8 as sum of 4x4 upsampled and output of convolution", "\n", "y1", "=", "self", ".", "blocks", "[", "0", "]", "(", "norm_input", ")", "\n", "y0", "=", "y1", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "int", "(", "ceil", "(", "progress", ")", "+", "1", ")", ")", ":", "\n", "            ", "y1", "=", "F", ".", "interpolate", "(", "y1", ",", "scale_factor", "=", "2", ")", "\n", "y0", "=", "y1", "\n", "y1", "=", "self", ".", "blocks", "[", "i", "]", "(", "y0", ")", "\n", "\n", "# converting to RGB", "\n", "", "y", "=", "self", ".", "toRGBs", "[", "int", "(", "ceil", "(", "progress", ")", ")", "]", "(", "y1", ")", "\n", "\n", "# adding upsampled image from previous layer if transitioning, i.e. when progress is not int", "\n", "if", "progress", "%", "1", "!=", "0", ":", "\n", "            ", "y0", "=", "self", ".", "toRGBs", "[", "int", "(", "progress", ")", "]", "(", "y0", ")", "\n", "y", "=", "alpha", "*", "y", "+", "(", "1", "-", "alpha", ")", "*", "y0", "\n", "\n", "", "return", "torch", ".", "tanh", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.progressive_model3d.Discriminator.__init__": [[88, 127], ["nn.LeakyReLU", "nn.Module.__init__", "nn.ModuleList", "range", "nn.ModuleList", "progressive_model3d.Discriminator.blocks.append", "range", "progressive_model3d.Discriminator.modules", "progressive_model3d.Discriminator.fromRGBs.append", "nn.Sequential", "int", "int", "progressive_model3d.Discriminator.blocks.append", "isinstance", "layers.conv", "OrderedDict", "nn.Sequential", "isinstance", "int", "OrderedDict", "nn.init.normal_", "nn.init.kaiming_normal_", "nn.init.constant_", "nn.init.constant_", "nn.init.constant_", "layers.conv", "layers.conv", "layers.conv", "max", "max", "layers.conv", "layers.conv", "max"], "methods", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.GradientPenalty.__init__", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv"], ["    ", "def", "__init__", "(", "self", ",", "max_res", "=", "8", ",", "nch", "=", "16", ",", "nc", "=", "3", ",", "bn", "=", "False", ",", "ws", "=", "False", ",", "activ", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "out_act", "=", "False", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# resolution of output as 4 * 2^maxRes: 0 -> 4x4, 1 -> 8x8, ..., 8 -> 1024x1024", "\n", "self", ".", "max_res", "=", "max_res", "\n", "\n", "# input convolutions", "\n", "self", ".", "fromRGBs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "max_res", "+", "1", ")", ":", "\n", "            ", "self", ".", "fromRGBs", ".", "append", "(", "conv", "(", "nc", ",", "int", "(", "nch", "*", "2", "**", "(", "8", "-", "max", "(", "3", ",", "i", ")", ")", ")", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "\n", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "activ", "=", "activ", ")", ")", "\n", "\n", "# convolutional blocks", "\n", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# last block", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv_std'", ",", "conv", "(", "nch", "*", "32", "+", "1", ",", "nch", "*", "32", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "activ", "=", "activ", ")", ")", ",", "\n", "(", "'conv_pool'", ",", "conv", "(", "nch", "*", "32", ",", "nch", "*", "32", ",", "kernel_size", "=", "4", ",", "padding", "=", "0", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "activ", "=", "activ", ")", ")", ",", "\n", "(", "'conv_class'", ",", "conv", "(", "nch", "*", "32", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "ws", "=", "ws", ",", "gainWS", "=", "1", ",", "activ", "=", "None", ")", ")", "\n", "]", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_res", ")", ":", "\n", "            ", "nin", "=", "int", "(", "nch", "*", "2", "**", "(", "8", "-", "max", "(", "3", ",", "i", "+", "1", ")", ")", ")", "\n", "nout", "=", "int", "(", "nch", "*", "2", "**", "(", "8", "-", "max", "(", "3", ",", "i", ")", ")", ")", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "conv", "(", "nin", ",", "nin", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "activ", "=", "activ", ")", ")", ",", "\n", "(", "'conv1'", ",", "conv", "(", "nin", ",", "nout", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "activ", "=", "activ", ")", ")", "\n", "]", ")", ")", ")", "\n", "\n", "", "self", ".", "out_act", "=", "out_act", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "1", ")", "if", "ws", "else", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.progressive_model3d.Discriminator.minibatchstd": [[128, 131], ["input.var"], "methods", ["None"], ["", "", "", "def", "minibatchstd", "(", "self", ",", "input", ")", ":", "\n", "# must add 1e-8 in std for stability", "\n", "        ", "return", "(", "input", ".", "var", "(", "dim", "=", "0", ")", "+", "1e-8", ")", ".", "sqrt", "(", ")", ".", "mean", "(", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.progressive_model3d.Discriminator.forward": [[132, 158], ["range", "min", "int", "torch.avg_pool3d", "int", "torch.avg_pool3d", "torch.cat", "torch.sigmoid", "y.squeeze", "y.squeeze", "int", "torch.avg_pool3d", "progressive_model3d.Discriminator.minibatchstd().expand_as", "math.ceil", "int", "int", "y0[].unsqueeze", "math.ceil", "progressive_model3d.Discriminator.minibatchstd"], "methods", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.progressive_model3d.Discriminator.minibatchstd"], ["", "def", "forward", "(", "self", ",", "input", ",", "x", "=", "None", ")", ":", "\n", "        ", "if", "x", "is", "None", ":", "\n", "            ", "progress", "=", "self", ".", "max_res", "\n", "", "else", ":", "\n", "            ", "progress", "=", "min", "(", "x", ",", "self", ".", "max_res", ")", "\n", "\n", "", "alpha", "=", "progress", "-", "int", "(", "progress", ")", "\n", "\n", "y0", "=", "self", ".", "fromRGBs", "[", "int", "(", "ceil", "(", "progress", ")", ")", "]", "(", "input", ")", "\n", "\n", "if", "progress", "%", "1", "!=", "0", ":", "\n", "            ", "y1", "=", "F", ".", "avg_pool3d", "(", "input", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "y1", "=", "self", ".", "fromRGBs", "[", "int", "(", "progress", ")", "]", "(", "y1", ")", "\n", "y0", "=", "self", ".", "blocks", "[", "int", "(", "ceil", "(", "progress", ")", ")", "]", "(", "y0", ")", "\n", "y0", "=", "alpha", "*", "F", ".", "avg_pool3d", "(", "y0", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "+", "(", "1", "-", "alpha", ")", "*", "y1", "\n", "\n", "", "for", "i", "in", "range", "(", "int", "(", "progress", ")", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "y0", "=", "self", ".", "blocks", "[", "i", "]", "(", "y0", ")", "\n", "y0", "=", "F", ".", "avg_pool3d", "(", "y0", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "y", "=", "self", ".", "blocks", "[", "0", "]", "(", "torch", ".", "cat", "(", "(", "y0", ",", "self", ".", "minibatchstd", "(", "y0", ")", ".", "expand_as", "(", "y0", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "if", "(", "self", ".", "out_act", ")", ":", "\n", "            ", "return", "torch", ".", "sigmoid", "(", "y", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "y", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.synthesize_random_samples.synthesize": [[52, 93], ["print", "progressive_model3d.Generator().to", "Generator().to.load_state_dict", "Generator().to.eval", "range", "os.path.exists", "os.makedirs", "torch.device", "torch.device", "torch.device", "torch.load", "torch.load", "torch.load", "utils3d.hypersphere", "Generator().to.", "sp.VCNoSD().flatten", "print", "print", "print", "print", "os.path.join", "torch.save", "torch.save", "torch.save", "progressive_model3d.Generator", "torch.randn", "torch.randn", "torch.randn", "netGs.detach().squeeze().cpu().numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "sp.VCNoSD", "utils3d.denormalize_volume", "netGs.detach().squeeze().cpu", "netGs.detach", "netGs.detach().squeeze", "netGs.detach"], "function", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.hypersphere", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp.VCNoSD", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.denormalize_volume"], ["def", "synthesize", "(", "opt", ")", ":", "\n", "\n", "    ", "print", "(", "\"Starting to synthesize.. \"", ")", "\n", "\n", "# output dir for synthetic samples", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "output_dir", ")", "\n", "\n", "# hyperparameters", "\n", "", "if", "(", "opt", ".", "device", "==", "'cuda'", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "# Generator Network", "\n", "", "max_res", "=", "opt", ".", "max_res", "\n", "nch", "=", "opt", ".", "in_nch", "# number of channels", "\n", "bn", "=", "opt", ".", "use_batch_norm", "# batchnorm", "\n", "ws", "=", "opt", ".", "use_weight_scale", "# weightscale", "\n", "pn", "=", "opt", ".", "use_pixel_norm", "# pixelnorm", "\n", "\n", "# Load pretrained model", "\n", "netGs", "=", "Generator", "(", "max_res", "=", "max_res", ",", "nch", "=", "nch", ",", "nc", "=", "1", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "pn", "=", "pn", ")", ".", "to", "(", "device", ")", "\n", "netGs", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "model_path", ")", ")", "\n", "netGs", ".", "eval", "(", ")", "\n", "\n", "# Generate samples", "\n", "for", "sample_inx", "in", "range", "(", "0", ",", "opt", ".", "num_samples", ")", ":", "\n", "# Sample random z", "\n", "        ", "z_ini", "=", "hypersphere", "(", "torch", ".", "randn", "(", "16", ",", "nch", "*", "32", ",", "1", ",", "1", ",", "1", ",", "device", "=", "device", ")", ")", "\n", "# Generate bone volume", "\n", "sample_vol", "=", "netGs", "(", "z_ini", ")", "\n", "# Compute its parameters        ", "\n", "params", "=", "sp", ".", "VCNoSD", "(", "denormalize_volume", "(", "sample_vol", ".", "detach", "(", ")", ")", ")", ".", "flatten", "(", ")", "\n", "print", "(", "\"Sample {} stats:\"", ".", "format", "(", "sample_inx", ")", ")", "\n", "print", "(", "\" => BMD:{:.4f}\"", ".", "format", "(", "params", "[", "0", "]", ")", ")", "\n", "print", "(", "\" => BV/TV:{:.4f}\"", ".", "format", "(", "params", "[", "1", "]", ")", ")", "\n", "print", "(", "\" => TMD:{:.4f}\"", ".", "format", "(", "params", "[", "2", "]", ")", ")", "\n", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "\"synth_sample_{}.pt\"", ".", "format", "(", "sample_inx", ")", ")", "\n", "torch", ".", "save", "(", "sample_vol", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.train.saveTensorBatch": [[60, 72], ["matplotlib.figure", "range", "matplotlib.savefig", "plt.figure.add_subplot", "fig.add_subplot.imshow", "str().zfill", "str().zfill", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "str", "str"], "function", ["None"], ["def", "saveTensorBatch", "(", "aTensor", ",", "vals", "=", "None", ",", "epoch", "=", "0", ",", "iterat", "=", "0", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "        ", "sub", "=", "fig", ".", "add_subplot", "(", "4", ",", "4", ",", "i", "+", "1", ")", "\n", "#sub.set_title(str(i))", "\n", "if", "vals", "is", "not", "None", ":", "\n", "            ", "if", "vals", "[", "i", "]", ">", "0", ":", "\n", "                ", "sub", ".", "set_title", "(", "\"Real\"", ")", "\n", "", "else", ":", "\n", "                ", "sub", ".", "set_title", "(", "\"Fake\"", ")", "\n", "", "", "sub", ".", "imshow", "(", "aTensor", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "", "plt", ".", "savefig", "(", "'../out/epoch_{}_iter_{}.png'", ".", "format", "(", "str", "(", "epoch", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "iterat", ")", ".", "zfill", "(", "4", ")", ")", ",", "dpi", "=", "150", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.train.train": [[74, 247], ["torchvision.Compose", "print", "os.listdir", "trabecuar_dataset.BonesPatchDataset", "print", "torch.utils.data.DataLoader", "progressive_model3d.Generator().to", "progressive_model3d.Discriminator().to", "copy.deepcopy", "print", "sum", "print", "sum", "print", "utils3d.GradientPenalty", "len", "numpy.array", "numpy.array", "numpy.array", "utils3d.Progress", "utils3d.Progress.progress", "torch.Adam", "torch.Adam", "utils3d.hypersphere", "Generator().to.", "train.saveTensorBatch", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torch.device", "torch.device", "torch.device", "Generator().to.parameters", "Discriminator().to.parameters", "torch.randn", "torch.randn", "torch.randn", "Generator().to.train", "utils3d.Progress.progress", "enumerate", "copy.deepcopy.", "train.saveTensorBatch", "print", "torchvision.ToTensor", "len", "progressive_model3d.Generator", "progressive_model3d.Discriminator", "p.numel", "p.numel", "netG.detach().cpu().numpy().squeeze", "utils3d.Progress.progress", "P.resize.to", "utils3d.Progress.resize", "Discriminator().to.zero_grad", "utils3d.hypersphere", "Discriminator().to.", "netD.mean", "Discriminator().to.", "netD.mean", "utils3d.GradientPenalty.", "d_loss_W.backward", "optim.Adam.step", "lossEpochD.append", "lossEpochD_W.append", "Generator().to.zero_grad", "utils3d.hypersphere", "Generator().to.", "Discriminator().to.", "netD.mean", "g_loss.backward", "optim.Adam.step", "lossEpochG.append", "utils3d.exp_mov_avg", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Generator().to.parameters", "Discriminator().to.parameters", "torch.randn", "torch.randn", "torch.randn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Generator().to.", "d_loss.item", "d_loss_W.item", "torch.randn", "torch.randn", "torch.randn", "g_loss.item", "netG.detach().cpu().numpy().squeeze", "numpy.mean", "numpy.mean", "Generator().to.state_dict", "os.path.join", "Discriminator().to.state_dict", "os.path.join", "copy.deepcopy.state_dict", "os.path.join", "netG.detach().cpu().numpy", "netG.detach().cpu().numpy", "netG.detach().cpu", "netG.detach().cpu", "netG.detach", "netG.detach"], "function", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.Progress.progress", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.hypersphere", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.train.saveTensorBatch", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.train.train", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.Progress.progress", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.train.saveTensorBatch", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.Progress.progress", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.Progress.resize", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.hypersphere", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.hypersphere", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.exp_mov_avg"], ["", "def", "train", "(", "opt", ")", ":", "\n", "\n", "# options", "\n", "\n", "# data path", "\n", "    ", "data_path", "=", "opt", ".", "data_path", "\n", "\n", "# output dir (checkpoints) and for imgs", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'../model_checkpoints'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'../model_checkpoints'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'../out'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'../out'", ")", "\n", "\n", "# hyperparameters", "\n", "", "if", "(", "opt", ".", "device", "==", "'cuda'", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "", "num_epochs", "=", "opt", ".", "epochs", "\n", "batch_size", "=", "opt", ".", "batch_size", "\n", "learning_rate", "=", "opt", ".", "lr", "\n", "savemodel", "=", "opt", ".", "model_checkpoints", "\n", "max_res", "=", "opt", ".", "max_res", "\n", "nch", "=", "opt", ".", "in_nch", "# number of channels", "\n", "bn", "=", "opt", ".", "use_batch_norm", "# batchnorm", "\n", "ws", "=", "opt", ".", "use_weight_scale", "# weightscale", "\n", "pn", "=", "opt", ".", "use_pixel_norm", "# pixelnorm", "\n", "batchSizes", "=", "opt", ".", "batch_sizes", "# list of batch sizes during the training", "\n", "lambdaGP", "=", "opt", ".", "lambda_gradient_penalty", "# lambda for gradient penalty", "\n", "gamma", "=", "opt", ".", "gamma_gradient_penalty", "# gamma for gradient penalty", "\n", "n_iter", "=", "opt", ".", "n_iter", "# number of epochs to train before changing the progress", "\n", "e_drift", "=", "opt", ".", "epsilon_drift", "# epsilon drift for discriminator loss", "\n", "\n", "# transforms (no rotations yet)", "\n", "img_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "# dataset", "\n", "print", "(", "\"Loading data set..\"", ")", "\n", "\n", "file_list", "=", "os", ".", "listdir", "(", "data_path", ")", "\n", "train_dataset", "=", "BonesPatchDataset", "(", "data_path", ",", "file_list", ",", "transform", "=", "img_transform", ")", "\n", "print", "(", "'train ({}), test ({}), val ({})'", ".", "format", "(", "len", "(", "train_dataset", ")", ",", "0", ",", "0", ")", ")", "\n", "\n", "# dataloader", "\n", "bone_train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "# networks", "\n", "netG", "=", "Generator", "(", "max_res", "=", "max_res", ",", "nch", "=", "nch", ",", "nc", "=", "1", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "pn", "=", "pn", ")", ".", "to", "(", "device", ")", "\n", "netD", "=", "Discriminator", "(", "max_res", "=", "max_res", ",", "nch", "=", "nch", ",", "nc", "=", "1", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ")", ".", "to", "(", "device", ")", "\n", "netGs", "=", "copy", ".", "deepcopy", "(", "netG", ")", "\n", "\n", "# params count", "\n", "print", "(", "\"Creating Network..\"", ")", "\n", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "netG", ".", "parameters", "(", ")", ")", "\n", "print", "(", "'Generator has'", ",", "pytorch_total_params", ",", "'parameters'", ")", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "netD", ".", "parameters", "(", ")", ")", "\n", "print", "(", "'Discriminator has'", ",", "pytorch_total_params", ",", "'parameters'", ")", "\n", "\n", "# gradient penalty", "\n", "GP", "=", "GradientPenalty", "(", "batchSizes", "[", "0", "]", ",", "lambdaGP", ",", "gamma", ",", "device", "=", "device", ")", "\n", "\n", "epoch", "=", "0", "\n", "global_step", "=", "0", "\n", "total", "=", "len", "(", "bone_train_dataloader", ")", "\n", "d_losses", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "d_losses_W", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "g_losses", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "# training progress", "\n", "P", "=", "Progress", "(", "n_iter", ",", "max_res", ",", "batchSizes", ")", "\n", "P", ".", "progress", "(", "epoch", ",", "1", ",", "total", ")", "\n", "GP", ".", "batchSize", "=", "P", ".", "batchSize", "\n", "\n", "# adam optimizers", "\n", "optimizerG", "=", "optim", ".", "Adam", "(", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0", ",", "0.99", ")", ")", "\n", "optimizerD", "=", "optim", ".", "Adam", "(", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0", ",", "0.99", ")", ")", "\n", "\n", "# training progress sample", "\n", "z_fixed", "=", "hypersphere", "(", "torch", ".", "randn", "(", "batch_size", ",", "nch", "*", "32", ",", "1", ",", "1", ",", "1", ",", "device", "=", "device", ")", ")", "\n", "fake_images", "=", "netG", "(", "z_fixed", ")", "\n", "saveTensorBatch", "(", "fake_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "[", ":", ",", "16", ",", ":", ",", ":", "]", ")", "\n", "\n", "print", "(", "\"Starting trianing..\"", ")", "\n", "\n", "# training loop", "\n", "while", "epoch", "<", "num_epochs", ":", "\n", "        ", "lossEpochG", "=", "[", "]", "\n", "lossEpochD", "=", "[", "]", "\n", "lossEpochD_W", "=", "[", "]", "\n", "\n", "netG", ".", "train", "(", ")", "\n", "P", ".", "progress", "(", "epoch", ",", "1", ",", "total", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "bone_train_dataloader", ")", ":", "\n", "            ", "P", ".", "progress", "(", "epoch", ",", "i", "+", "1", ",", "total", "+", "1", ")", "\n", "global_step", "+=", "1", "\n", "\n", "# build mini-batch", "\n", "batch", "=", "batch", ".", "to", "(", "device", ")", "\n", "batch_original", "=", "batch", "\n", "batch", "=", "P", ".", "resize", "(", "batch", ")", "\n", "\n", "# ============= Train the discriminator =============#", "\n", "# zeroing gradients in D", "\n", "netD", ".", "zero_grad", "(", ")", "\n", "\n", "# compute fake images with G", "\n", "z", "=", "hypersphere", "(", "torch", ".", "randn", "(", "P", ".", "batchSize", ",", "nch", "*", "32", ",", "1", ",", "1", ",", "1", ",", "device", "=", "device", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_images", "=", "netG", "(", "z", ",", "P", ".", "p", ")", "\n", "\n", "# compute scores for real images", "\n", "", "D_real", "=", "netD", "(", "batch", ",", "P", ".", "p", ")", "\n", "D_realm", "=", "D_real", ".", "mean", "(", ")", "\n", "\n", "# compute scores for fake images", "\n", "D_fake", "=", "netD", "(", "fake_images", ",", "P", ".", "p", ")", "\n", "D_fakem", "=", "D_fake", ".", "mean", "(", ")", "\n", "\n", "# compute gradient penalty for WGAN-GP ", "\n", "gradient_penalty", "=", "GP", "(", "netD", ",", "batch", ".", "data", ",", "fake_images", ".", "data", ",", "P", ".", "p", ")", "\n", "\n", "# prevent D_real from drifting too much from 0", "\n", "drift", "=", "(", "D_real", "**", "2", ")", ".", "mean", "(", ")", "*", "e_drift", "\n", "\n", "# backprop + optimize", "\n", "d_loss", "=", "D_fakem", "-", "D_realm", "\n", "d_loss_W", "=", "d_loss", "+", "gradient_penalty", "+", "drift", "\n", "d_loss_W", ".", "backward", "(", ")", "\n", "optimizerD", ".", "step", "(", ")", "\n", "\n", "lossEpochD", ".", "append", "(", "d_loss", ".", "item", "(", ")", ")", "\n", "lossEpochD_W", ".", "append", "(", "d_loss_W", ".", "item", "(", ")", ")", "\n", "\n", "# =============== Train the generator ===============#", "\n", "# zeroing gradients in G", "\n", "netG", ".", "zero_grad", "(", ")", "\n", "\n", "# compute fake images with G", "\n", "z", "=", "hypersphere", "(", "torch", ".", "randn", "(", "P", ".", "batchSize", ",", "nch", "*", "32", ",", "1", ",", "1", ",", "1", ",", "device", "=", "device", ")", ")", "\n", "fake_images", "=", "netG", "(", "z", ",", "P", ".", "p", ")", "\n", "\n", "# compute scores with new fake images", "\n", "G_fake", "=", "netD", "(", "fake_images", ",", "P", ".", "p", ")", "\n", "G_fakem", "=", "G_fake", ".", "mean", "(", ")", "\n", "\n", "# no need to compute D_real as it does not affect G", "\n", "g_loss", "=", "-", "G_fakem", "\n", "\n", "# optimize", "\n", "g_loss", ".", "backward", "(", ")", "\n", "optimizerG", ".", "step", "(", ")", "\n", "\n", "lossEpochG", ".", "append", "(", "g_loss", ".", "item", "(", ")", ")", "\n", "\n", "# update Gs with exponential moving average", "\n", "exp_mov_avg", "(", "netGs", ",", "netG", ",", "alpha", "=", "0.999", ",", "global_step", "=", "global_step", ")", "\n", "\n", "", "fake_images", "=", "netGs", "(", "z_fixed", ")", "\n", "saveTensorBatch", "(", "fake_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "[", ":", ",", "16", ",", ":", ",", ":", "]", ",", "epoch", "=", "epoch", ",", "iterat", "=", "i", ")", "\n", "print", "(", "\"epoch [{}] - d_loss:{} - d_loss_W: {} - progress:{}\"", ".", "format", "(", "epoch", ",", "np", ".", "mean", "(", "lossEpochD", ")", ",", "np", ".", "mean", "(", "lossEpochD_W", ")", ",", "P", ".", "p", ")", ")", "\n", "\n", "# save status ", "\n", "if", "P", ".", "p", ">=", "P", ".", "pmax", "and", "not", "epoch", "%", "savemodel", ":", "\n", "            ", "torch", ".", "save", "(", "netG", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "'../model_checkpoints'", ",", "'g_nch-{}_epoch-{}.pth'", ".", "format", "(", "nch", ",", "epoch", ")", ")", ")", "\n", "torch", ".", "save", "(", "netD", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "'../model_checkpoints'", ",", "'d_nch-{}_epoch-{}.pth'", ".", "format", "(", "nch", ",", "epoch", ")", ")", ")", "\n", "torch", ".", "save", "(", "netGs", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "'../model_checkpoints'", ",", "'gs_nch-{}_epoch-{}.pth'", ".", "format", "(", "nch", ",", "epoch", ")", ")", ")", "\n", "\n", "", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.PixelNormLayer.__init__": [[38, 40], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.GradientPenalty.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PixelNormLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.PixelNormLayer.forward": [[41, 43], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.PixelNormLayer.__repr__": [[44, 46], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.WScaleLayer.__init__": [[49, 54], ["torch.Module.__init__", "incoming.weight[].numel"], "methods", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.GradientPenalty.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "gain", "=", "2", ")", ":", "\n", "        ", "super", "(", "WScaleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gain", "=", "gain", "\n", "self", ".", "scale", "=", "(", "self", ".", "gain", "/", "incoming", ".", "weight", "[", "0", "]", ".", "numel", "(", ")", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.WScaleLayer.forward": [[55, 57], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.WScaleLayer.__repr__": [[58, 60], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(gain={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "gain", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.layers.conv": [[14, 35], ["layer", "collections.OrderedDict", "torch.Sequential", "layers.WScaleLayer", "torch.BatchNorm3d", "layers.PixelNormLayer", "activ"], "function", ["None"], ["def", "conv", "(", "nin", ",", "nout", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "layer", "=", "nn", ".", "Conv3d", ",", "\n", "ws", "=", "False", ",", "bn", "=", "False", ",", "pn", "=", "False", ",", "activ", "=", "None", ",", "gainWS", "=", "2", ")", ":", "\n", "    ", "conv", "=", "layer", "(", "nin", ",", "nout", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", "if", "bn", "else", "True", ")", "\n", "layers", "=", "OrderedDict", "(", ")", "\n", "\n", "if", "ws", ":", "\n", "        ", "layers", "[", "'ws'", "]", "=", "WScaleLayer", "(", "conv", ",", "gain", "=", "gainWS", ")", "\n", "\n", "", "layers", "[", "'conv'", "]", "=", "conv", "\n", "\n", "if", "bn", ":", "\n", "        ", "layers", "[", "'bn'", "]", "=", "nn", ".", "BatchNorm3d", "(", "nout", ")", "\n", "", "if", "activ", ":", "\n", "        ", "if", "activ", "==", "nn", ".", "PReLU", ":", "\n", "# to avoid sharing the same parameter, activ must be set to nn.PReLU (without '()') and initialized here", "\n", "            ", "layers", "[", "'activ'", "]", "=", "activ", "(", "num_parameters", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "layers", "[", "'activ'", "]", "=", "activ", "\n", "", "", "if", "pn", ":", "\n", "        ", "layers", "[", "'pn'", "]", "=", "PixelNormLayer", "(", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.Progress.__init__": [[51, 64], ["isinstance", "isinstance", "isinstance", "all", "all", "len", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_iter", ",", "pmax", ",", "batchSizeList", ")", ":", "\n", "        ", "assert", "n_iter", ">", "0", "and", "isinstance", "(", "n_iter", ",", "int", ")", ",", "'n_iter must be int >= 1'", "\n", "assert", "pmax", ">=", "0", "and", "isinstance", "(", "pmax", ",", "int", ")", ",", "'pmax must be int >= 0'", "\n", "assert", "isinstance", "(", "batchSizeList", ",", "list", ")", "and", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "batchSizeList", ")", "and", "all", "(", "x", ">", "0", "for", "x", "in", "batchSizeList", ")", "and", "len", "(", "batchSizeList", ")", "==", "pmax", "+", "1", ",", "'batchSizeList must be a list of int > 0 and of length pmax+1'", "\n", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "pmax", "=", "pmax", "\n", "self", ".", "p", "=", "0", "\n", "self", ".", "batchSizeList", "=", "batchSizeList", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.Progress.progress": [[70, 74], ["min", "max", "int", "math.ceil"], "methods", ["None"], ["", "def", "progress", "(", "self", ",", "epoch", ",", "i", ",", "total", ")", ":", "\n", "        ", "x", "=", "(", "epoch", "+", "i", "/", "total", ")", "/", "self", ".", "n_iter", "\n", "self", ".", "p", "=", "min", "(", "max", "(", "int", "(", "x", "/", "2", ")", ",", "x", "-", "ceil", "(", "x", "/", "2", ")", ",", "0", ")", ",", "self", ".", "pmax", ")", "\n", "return", "self", ".", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.Progress.resize": [[78, 84], ["int", "math.ceil", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "images", ")", ":", "\n", "        ", "x", "=", "int", "(", "ceil", "(", "self", ".", "p", ")", ")", "\n", "if", "x", ">=", "self", ".", "pmax", ":", "\n", "            ", "return", "images", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "adaptive_avg_pool3d", "(", "images", ",", "4", "*", "2", "**", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.Progress.batchSize": [[86, 90], ["int", "math.ceil"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "batchSize", "(", "self", ")", ":", "\n", "        ", "x", "=", "int", "(", "ceil", "(", "self", ".", "p", ")", ")", "\n", "return", "self", ".", "batchSizeList", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.GradientPenalty.__init__": [[100, 105], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batchSize", ",", "lambdaGP", ",", "gamma", "=", "1", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "self", ".", "batchSize", "=", "batchSize", "\n", "self", ".", "lambdaGP", "=", "lambdaGP", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.GradientPenalty.__call__": [[106, 120], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "netD", "[].view", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "netD.size", "[].view.norm"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "netD", ",", "real_data", ",", "fake_data", ",", "progress", ")", ":", "\n", "# sample 3d", "\n", "        ", "alpha", "=", "torch", ".", "rand", "(", "self", ".", "batchSize", ",", "1", ",", "1", ",", "1", ",", "1", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", "\n", "# randomly mix real and fake data", "\n", "interpolates", "=", "real_data", "+", "alpha", "*", "(", "fake_data", "-", "real_data", ")", "\n", "# compute output of D for interpolated input", "\n", "disc_interpolates", "=", "netD", "(", "interpolates", ",", "progress", ")", "\n", "# compute gradients w.r.t the interpolated outputs", "\n", "gradients", "=", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", ".", "view", "(", "self", ".", "batchSize", ",", "-", "1", ")", "\n", "gradient_penalty", "=", "(", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "self", ".", "gamma", ")", "/", "self", ".", "gamma", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "self", ".", "lambdaGP", "\n", "\n", "return", "gradient_penalty", "\n", "", "", ""]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.weights_init": [[16, 24], ["torch.init.xavier_normal_", "type", "type", "torch.init.constant_", "type", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", "or", "type", "(", "m", ")", "==", "nn", ".", "ConvTranspose2d", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "type", "(", "m", ")", "==", "nn", ".", "BatchNorm2d", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.hypersphere": [[26, 28], ["z.norm"], "function", ["None"], ["", "", "def", "hypersphere", "(", "z", ",", "radius", "=", "1", ")", ":", "\n", "    ", "return", "z", "*", "radius", "/", "z", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.exp_mov_avg": [[30, 34], ["min", "zip", "Gs.parameters", "G.parameters", "ema_param.data.mul_().add_", "ema_param.data.mul_"], "function", ["None"], ["", "def", "exp_mov_avg", "(", "Gs", ",", "G", ",", "alpha", "=", "0.999", ",", "global_step", "=", "999", ")", ":", "\n", "    ", "alpha", "=", "min", "(", "1", "-", "1", "/", "(", "global_step", "+", "1", ")", ",", "alpha", ")", "\n", "for", "ema_param", ",", "param", "in", "zip", "(", "Gs", ".", "parameters", "(", ")", ",", "G", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "ema_param", ".", "data", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.normalize_volume": [[36, 38], ["None"], "function", ["None"], ["", "", "def", "normalize_volume", "(", "vol", ")", ":", "\n", "    ", "return", "2.", "/", "(", "1100.", "-", "(", "-", "350.", ")", ")", "*", "(", "vol", "-", "1100.", ")", "+", "1.", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.denormalize_volume": [[40, 42], ["None"], "function", ["None"], ["", "def", "denormalize_volume", "(", "vol", ")", ":", "\n", "    ", "return", "(", "(", "vol", "+", "1.", ")", "*", "(", "1100.", "-", "(", "-", "350.", ")", ")", "/", "2.", ")", "-", "350.", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.optimize_sample.optimizer": [[56, 94], ["torch.optim.LBFGS", "torch.optim.LBFGS", "torch.optim.LBFGS", "torch.MSELoss", "range", "netGs", "torch.optim.LBFGS.step", "z_ini.data.clamp_", "z_ini.data.clamp_", "torch.optim.LBFGS.zero_grad", "netGs", "sp.VCNoSD().flatten", "nn.MSELoss.", "nn.MSELoss.", "loss.backward", "utils3d.denormalize_volume", "print", "sp.VCNoSD", "utils3d.denormalize_volume", "loss.item", "crit_l2.item", "crit_l2.item"], "function", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.denormalize_volume", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp.VCNoSD", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.denormalize_volume"], ["def", "optimizer", "(", "z_ini", ",", "target_params_pc", ",", "target_vol", ",", "netGs", ",", "opt", ")", ":", "\n", "\n", "# LBFGS Optimizer", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "LBFGS", "(", "[", "z_ini", "]", ",", "line_search_fn", "=", "'strong_wolfe'", ")", "\n", "steps", "=", "opt", ".", "opt_steps", "\n", "content_weight", "=", "opt", ".", "content_weight", "\n", "crit_l2", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "\n", "        ", "def", "closure", "(", ")", ":", "\n", "            ", "z_ini", ".", "data", ".", "clamp_", "(", "-", "1", ",", "1", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Generate some volume", "\n", "output", "=", "netGs", "(", "z_ini", ")", "\n", "\n", "# Compute its parameters", "\n", "output_params", "=", "sp", ".", "VCNoSD", "(", "denormalize_volume", "(", "output", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "# Content loss", "\n", "loss_cont", "=", "crit_l2", "(", "denormalize_volume", "(", "output", ")", ",", "target_vol", ")", "\n", "\n", "# Parameters loss", "\n", "loss_para", "=", "crit_l2", "(", "output_params", ",", "target_params_pc", ")", "\n", "\n", "loss", "=", "content_weight", "*", "loss_cont", "+", "(", "1.", "-", "content_weight", ")", "*", "loss_para", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "(", "i", "%", "10", "==", "0", ")", ":", "print", "(", "\"[{}] - Content Loss: {:.4f} - Parameter Loss: {:.4f} - Total Loss {:.4f}\"", ".", "format", "(", "i", ",", "content_weight", "*", "loss_cont", ".", "item", "(", ")", ",", "(", "1.", "-", "content_weight", ")", "*", "loss_para", ".", "item", "(", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "return", "loss", "\n", "\n", "", "optimizer", ".", "step", "(", "closure", ")", "\n", "z_ini", ".", "data", ".", "clamp_", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "output", "=", "netGs", "(", "z_ini", ")", "\n", "return", "output", ",", "z_ini", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.optimize_sample.optimize_sample": [[96, 145], ["progressive_model3d.Generator().to", "Generator().to.load_state_dict", "Generator().to.eval", "utils3d.hypersphere().requires_grad_", "Generator().to.", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "sp.VCNoSD().flatten", "print", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "print", "optimize_sample.optimizer", "sp.VCNoSD().flatten", "print", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "torch.device", "torch.device", "torch.device", "torch.load", "torch.load", "torch.load", "output_volume.squeeze().detach().cpu().numpy", "z.detach().cpu().numpy", "progressive_model3d.Generator", "utils3d.hypersphere", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "sp.VCNoSD", "torch.Tensor", "torch.Tensor", "torch.Tensor", "sp.VCNoSD", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.randn", "torch.randn", "torch.randn", "utils3d.denormalize_volume", "output_volume.squeeze().detach().cpu", "z.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.load", "torch.load", "torch.load", "output_volume.squeeze().detach", "z.detach", "output_volume.squeeze"], "function", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.optimize_sample.optimizer", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.hypersphere", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp.VCNoSD", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp.VCNoSD", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.utils3d.denormalize_volume"], ["", "def", "optimize_sample", "(", "opt", ")", ":", "\n", "# options", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "output_dir", ")", "\n", "\n", "# device", "\n", "", "if", "(", "opt", ".", "device", "==", "'cuda'", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "# hyperparameters", "\n", "", "max_res", "=", "opt", ".", "max_res", "\n", "nch", "=", "opt", ".", "in_nch", "# number of channels", "\n", "bn", "=", "opt", ".", "use_batch_norm", "# batchnorm", "\n", "ws", "=", "opt", ".", "use_weight_scale", "# weightscale", "\n", "pn", "=", "opt", ".", "use_pixel_norm", "# pixelnorm", "\n", "\n", "# load generator model", "\n", "netGs", "=", "Generator", "(", "max_res", "=", "max_res", ",", "nch", "=", "nch", ",", "nc", "=", "1", ",", "bn", "=", "bn", ",", "ws", "=", "ws", ",", "pn", "=", "pn", ")", ".", "to", "(", "device", ")", "\n", "netGs", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "pretrained_model_path", ")", ")", "\n", "netGs", ".", "eval", "(", ")", "\n", "\n", "# sample random initial z (starting optimization point)", "\n", "z_ini", "=", "hypersphere", "(", "torch", ".", "randn", "(", "1", ",", "nch", "*", "32", ",", "1", ",", "1", ",", "1", ",", "device", "=", "device", ")", ")", ".", "requires_grad_", "(", ")", "\n", "random_ini_vol", "=", "netGs", "(", "z_ini", ")", "\n", "\n", "# load target volume ", "\n", "target_vol", "=", "torch", ".", "from_numpy", "(", "torch", ".", "load", "(", "opt", ".", "target_path", ")", ")", ".", "to", "(", "device", ")", ".", "reshape", "(", "1", ",", "1", ",", "32", ",", "32", ",", "32", ")", "\n", "target_vol_params", "=", "sp", ".", "VCNoSD", "(", "target_vol", ")", ".", "flatten", "(", ")", "\n", "print", "(", "\"Input vol params BMD:{:.4f}, BV/TV:{:.4f}, TMD:{:.4f}\"", ".", "format", "(", "target_vol_params", "[", "0", "]", ",", "target_vol_params", "[", "1", "]", ",", "target_vol_params", "[", "2", "]", ")", ")", "\n", "\n", "# target params to optimize", "\n", "target_opt_params", "=", "torch", ".", "Tensor", "(", "[", "opt", ".", "target_bmd", ",", "opt", ".", "target_bvtv", "/", "100.", ",", "opt", ".", "target_tmd", "]", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "\"Target vol params BMD:{:.4f}, BV/TV:{:.4f}, TMD:{:.4f}\"", ".", "format", "(", "opt", ".", "target_bmd", ",", "opt", ".", "target_bvtv", "/", "100.", ",", "opt", ".", "target_tmd", ")", ")", "\n", "\n", "# optim volume", "\n", "output_volume", ",", "z", "=", "optimizer", "(", "z_ini", ",", "target_opt_params", ",", "target_vol", ",", "netGs", ",", "opt", ")", "\n", "\n", "# print output info", "\n", "out_params", "=", "sp", ".", "VCNoSD", "(", "denormalize_volume", "(", "output_volume", ")", ")", ".", "flatten", "(", ")", "\n", "print", "(", "\"Resulting vol params BMD:{:.4f}, BV/TV:{:.4f}, TMD:{:.4f}\"", ".", "format", "(", "out_params", "[", "0", "]", ",", "out_params", "[", "1", "]", ",", "out_params", "[", "2", "]", ")", ")", "\n", "\n", "#save", "\n", "out_path_vol", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "\"synth_sample.pt\"", ")", "\n", "out_path_z", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "\"generator_z.pt\"", ")", "\n", "torch", ".", "save", "(", "output_volume", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "out_path_vol", ")", "\n", "torch", ".", "save", "(", "z", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "out_path_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._mean": [[16, 20], ["kernel.type.type", "torch.nn.functional.conv3d", "torch.ones().expand", "torch.tensor().float().prod", "torch.ones", "torch.tensor().float", "torch.tensor"], "function", ["None"], ["def", "_mean", "(", "data", ",", "conv_size", "=", "(", "16", ",", "16", ",", "16", ")", ",", "stride", "=", "(", "16", ",", "16", ",", "16", ")", ")", ":", "\n", "    ", "kernel", "=", "(", "torch", ".", "ones", "(", "(", "1", ")", ")", ".", "expand", "(", "(", "1", ",", "1", ",", "*", "conv_size", ")", ")", "/", "torch", ".", "tensor", "(", "conv_size", ")", ".", "float", "(", ")", ".", "prod", "(", ")", ")", ".", "float", "(", ")", "\n", "kernel", "=", "kernel", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "conv3d", "(", "data", ",", "kernel", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._var": [[21, 25], ["sp._mean"], "function", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._mean"], ["", "def", "_var", "(", "data", ",", "m_x", ",", "conv_size", "=", "(", "16", ",", "16", ",", "16", ")", ",", "stride", "=", "(", "16", ",", "16", ",", "16", ")", ")", ":", "\n", "    ", "m_xx", "=", "_mean", "(", "data", "**", "2", ",", "conv_size", ",", "stride", ")", "\n", "v2", "=", "1", "/", "(", "conv_size", "[", "0", "]", "*", "conv_size", "[", "1", "]", "*", "conv_size", "[", "2", "]", ")", "\n", "return", "(", "m_xx", "-", "m_x", "*", "m_x", ")", "/", "(", "1", "-", "v2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._softplus2": [[27, 29], ["torch.nn.functional.softplus"], "function", ["None"], ["", "def", "_softplus2", "(", "x", ",", "epsilon", "=", "1.0", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "x", "-", "epsilon", ",", "1.", "/", "epsilon", ")", "+", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp.VC": [[35, 47], ["sp._mean", "torch.sqrt", "torch.cat", "enumerate", "sp._var", "torch.sigmoid", "sp._mean", "torch.mul", "sp._mean", "torch.cat", "sp._softplus2"], "function", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._mean", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._var", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._mean", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._mean", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._softplus2"], ["", "def", "VC", "(", "data", ",", "si", "=", "32", ",", "st", "=", "32", ",", "threshold", "=", "[", "225.", "]", ",", "sigma", "=", "10.", ",", "epsilon", "=", "0.0001", ")", ":", "\n", "    ", "bmd", "=", "_mean", "(", "data", ",", "(", "si", ",", "si", ",", "si", ")", ",", "(", "st", ",", "st", ",", "st", ")", ")", "\n", "sd", "=", "torch", ".", "sqrt", "(", "_var", "(", "data", ",", "bmd", ",", "(", "si", ",", "si", ",", "si", ")", ",", "(", "st", ",", "st", ",", "st", ")", ")", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "bmd", ",", "sd", ")", ",", "dim", "=", "1", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "threshold", ")", ":", "\n", "        ", "pw_bvtv", "=", "torch", ".", "sigmoid", "(", "(", "data", "-", "t", ")", "/", "sigma", ")", "\n", "bvtv", "=", "_mean", "(", "pw_bvtv", ",", "(", "si", ",", "si", ",", "si", ")", ",", "(", "st", ",", "st", ",", "st", ")", ")", "\n", "pw_tmd", "=", "torch", ".", "mul", "(", "pw_bvtv", ",", "data", ")", "\n", "smooth_tmd", "=", "_mean", "(", "pw_tmd", ",", "(", "si", ",", "si", ",", "si", ")", ",", "(", "st", ",", "st", ",", "st", ")", ")", "\n", "tmd", "=", "smooth_tmd", "/", "_softplus2", "(", "bvtv", ",", "epsilon", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "ret", ",", "bvtv", ",", "tmd", ")", ",", "dim", "=", "1", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp.VCNoSD": [[50, 61], ["sp._mean", "enumerate", "torch.sigmoid", "sp._mean", "torch.mul", "sp._mean", "torch.cat", "sp._softplus2"], "function", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._mean", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._mean", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._mean", "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp._softplus2"], ["", "def", "VCNoSD", "(", "data", ",", "si", "=", "32", ",", "st", "=", "32", ",", "threshold", "=", "[", "225.", "]", ",", "sigma", "=", "10.", ",", "epsilon", "=", "0.0001", ")", ":", "\n", "    ", "bmd", "=", "_mean", "(", "data", ",", "(", "si", ",", "si", ",", "si", ")", ",", "(", "st", ",", "st", ",", "st", ")", ")", "\n", "ret", "=", "bmd", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "threshold", ")", ":", "\n", "        ", "pw_bvtv", "=", "torch", ".", "sigmoid", "(", "(", "data", "-", "t", ")", "/", "sigma", ")", "\n", "bvtv", "=", "_mean", "(", "pw_bvtv", ",", "(", "si", ",", "si", ",", "si", ")", ",", "(", "st", ",", "st", ",", "st", ")", ")", "\n", "pw_tmd", "=", "torch", ".", "mul", "(", "pw_bvtv", ",", "data", ")", "\n", "smooth_tmd", "=", "_mean", "(", "pw_tmd", ",", "(", "si", ",", "si", ",", "si", ")", ",", "(", "st", ",", "st", ",", "st", ")", ")", "\n", "tmd", "=", "smooth_tmd", "/", "_softplus2", "(", "bvtv", ",", "epsilon", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "ret", ",", "bvtv", ",", "tmd", ")", ",", "dim", "=", "1", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp.ReducedVC": [[68, 86], ["sp.VC", "range", "torch.tensor().unsqueeze().unsqueeze().unsqueeze().unsqueeze().expand", "torch.tensor().unsqueeze().unsqueeze().unsqueeze().unsqueeze().expand", "torch.cat", "VC.size", "VC.size", "torch.tensor().unsqueeze().unsqueeze().unsqueeze().unsqueeze", "torch.tensor().unsqueeze().unsqueeze().unsqueeze().unsqueeze", "torch.tensor().unsqueeze().unsqueeze().unsqueeze", "torch.tensor().unsqueeze().unsqueeze().unsqueeze", "torch.tensor().unsqueeze().unsqueeze", "torch.tensor().unsqueeze().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.emmanueliarussi_generative3DSpongiosa.code.sp.VC"], ["", "def", "ReducedVC", "(", "data", ")", ":", "\n", "    ", "vc", "=", "VC", "(", "data", ",", "threshold", "=", "[", "175.", ",", "225.", ",", "275.", "]", ")", "\n", "means", "=", "[", "1.2358242e+02", ",", "1.2596702e+02", ",", "2.5884491e-01", ",", "3.0270697e+02", ",", "\n", "1.8897282e-01", ",", "3.4193488e+02", ",", "1.3487895e-01", ",", "3.8006693e+02", "]", "\n", "weights", "=", "[", "2.11633135e-02", ",", "3.33693302e-02", ",", "1.74624375e+01", ",", "5.31215568e-02", ",", "\n", "1.52390445e+01", ",", "3.50745131e-02", ",", "2.60980711e+01", ",", "4.72287886e-02", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "vc", "[", ":", ",", "i", ",", "...", "]", "=", "(", "vc", "[", ":", ",", "i", ",", "...", "]", "-", "means", "[", "i", "]", ")", "*", "weights", "[", "i", "]", "\n", "# 99% eigenvalues:", "\n", "", "e0", "=", "torch", ".", "tensor", "(", "[", "0.2088901", ",", "0.23005097", ",", "0.3977575", ",", "0.43240823", ",", "0.30314409", ",", "\n", "0.30034651", ",", "0.45425018", ",", "0.41207521", "]", ",", "dtype", "=", "vc", ".", "dtype", ",", "\n", "device", "=", "vc", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "vc", ".", "size", "(", ")", ")", "\n", "e1", "=", "torch", ".", "tensor", "(", "[", "0.21908473", ",", "-", "0.08819675", ",", "0.52374055", ",", "-", "0.4046202", ",", "0.30235876", ",", "\n", "-", "0.31234922", ",", "0.30484268", ",", "-", "0.47359226", "]", ",", "dtype", "=", "vc", ".", "dtype", ",", "\n", "device", "=", "vc", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "vc", ".", "size", "(", ")", ")", "\n", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "(", "vc", "*", "e0", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "(", "vc", "*", "e1", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ",", "dim", "=", "1", ")", "\n", "return", "ret", "\n", "", ""]]}