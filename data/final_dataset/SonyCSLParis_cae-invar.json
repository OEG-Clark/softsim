{"home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.extract_motives.process_piece": [[54, 68], ["os.path.basename", "os.path.join", "logging.info", "print", "complex_auto.motives_extractor.extractor.process", "os.path.basename.split"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.process"], ["def", "process_piece", "(", "fn_ss_matrix", ",", "outdir", ",", "tol", ",", "domain", ",", "ssm_read_pk", ",", "read_pk", ",", "\n", "tonnetz", ",", "rho", ",", "csv_file", "=", "None", ")", ":", "\n", "\n", "    ", "assert", "domain", "in", "(", "\"audio\"", ",", "\"symbolic\"", ")", "\n", "f_base", "=", "os", ".", "path", ".", "basename", "(", "fn_ss_matrix", ")", "\n", "base_name", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "f_base", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".seg\"", ")", "\n", "\n", "logging", ".", "info", "(", "\"Running algorithm for %s\"", "%", "f_base", ")", "\n", "#out = os.path.join(outdir, out) + \".txt\"", "\n", "#print \"./extractor.py %s -c %s -o %s -th %f\" % (wav, csv, out, tol)", "\n", "print", "(", "\"Processing file {0}...\"", ".", "format", "(", "fn_ss_matrix", ")", ")", "\n", "extractor", ".", "process", "(", "fn_ss_matrix", ",", "base_name", ",", "domain", ",", "csv_file", "=", "csv_file", ",", "\n", "tol", "=", "tol", ",", "ssm_read_pk", "=", "ssm_read_pk", ",", "\n", "read_pk", "=", "read_pk", ",", "tonnetz", "=", "tonnetz", ",", "rho", "=", "rho", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.extract_motives.process_audio_poly": [[70, 80], ["complex_auto.motives_extractor.utils.ensure_dir", "joblib.Parallel", "len", "joblib.delayed", "zip"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.ensure_dir"], ["", "def", "process_audio_poly", "(", "files", ",", "outdir", ",", "domain", ",", "tol", ",", "ssm_read_pk", ",", "read_pk", ",", "rho", ",", "\n", "n_jobs", "=", "5", ",", "csv_files", "=", "None", ",", "\n", "tonnetz", "=", "False", ")", ":", "\n", "    ", "utils", ".", "ensure_dir", "(", "outdir", ")", "\n", "if", "csv_files", "is", "None", ":", "\n", "        ", "csv_files", "=", "[", "None", "]", "*", "len", "(", "files", ")", "\n", "\n", "", "Parallel", "(", "n_jobs", "=", "n_jobs", ")", "(", "delayed", "(", "process_piece", ")", "(", "\n", "wav", ",", "outdir", ",", "tol", ",", "domain", ",", "ssm_read_pk", ",", "read_pk", ",", "tonnetz", ",", "rho", ",", "csv", ")", "\n", "for", "wav", ",", "csv", "in", "zip", "(", "files", ",", "csv_files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.extract_motives.main": [[82, 139], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "time.time", "logging.basicConfig", "os.path.join", "os.path.join", "os.path.exists", "complex_auto.util.read_file", "extract_motives.process_audio_poly", "logging.info", "complex_auto.util.read_file", "time.time"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.read_file", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.extract_motives.process_audio_poly", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.read_file"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Main function.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\n", "\"Runs the algorithm of pattern discovery on the polyphonic csv files\"", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'run_keyword'", ",", "type", "=", "str", ",", "default", "=", "\"experiment1\"", ",", "\n", "help", "=", "'keyword used for input path'", ")", "\n", "#parser.add_argument(\"outdir\", action=\"store\", help=\"Output Folder\")", "\n", "parser", ".", "add_argument", "(", "\"-pk\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "dest", "=", "\"read_pk\"", ",", "help", "=", "\"Read Pickle File\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-th\"", ",", "action", "=", "\"store\"", ",", "default", "=", "0.0105", ",", "type", "=", "float", ",", "\n", "dest", "=", "\"tol\"", ",", "help", "=", "\"threshold to consider a repetition\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "action", "=", "\"store\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "dest", "=", "\"rho\"", ",", "\n", "help", "=", "\"Positive integer number for calculating the \"", "\n", "\"score\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-dom\"", ",", "action", "=", "\"store\"", ",", "default", "=", "\"audio\"", ",", "type", "=", "str", ",", "\n", "dest", "=", "\"dom\"", ",", "help", "=", "\"Domain (symbolic / audio)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-spk\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "dest", "=", "\"ssm_read_pk\"", ",", "help", "=", "\"Read SSM Pickle File\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-j\"", ",", "action", "=", "\"store\"", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "dest", "=", "\"n_jobs\"", ",", "\n", "help", "=", "\"Number of processors to use to divide the task.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-t\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "dest", "=", "\"tonnetz\"", ",", "help", "=", "\"Whether to use Tonnetz or not.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-csv\"", ",", "action", "=", "\"store\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "dest", "=", "\"csv_files\"", ",", "help", "=", "\"filelist with csv files to \"", "\n", "\"determine offsets.\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Setup the logger", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s: %(levelname)s: %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "\"output\"", ",", "args", ".", "run_keyword", ")", "\n", "input_filelist", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"ss_matrices_filelist.txt\"", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "input_filelist", ")", ",", "\"A file named 'ss_matrices_filelist.txt' listing *.npy files with \"", "\"stored self-similarity matrices has to exist in folder \"", "f\"{out_dir}. Run 'to_self_sim_matrix.py' before \"", "\"'extract_motives.py', or check if run_keyword \"", "f\"'{args.run_keyword}' points to the intended folder.\"", "\n", "\n", "inputs", "=", "read_file", "(", "input_filelist", ")", "\n", "\n", "if", "args", ".", "csv_files", "is", "not", "None", ":", "\n", "        ", "csv_files", "=", "read_file", "(", "args", ".", "csv_files", ")", "\n", "", "else", ":", "\n", "        ", "csv_files", "=", "None", "\n", "\n", "# Run the algorithm", "\n", "", "process_audio_poly", "(", "inputs", ",", "out_dir", ",", "tol", "=", "args", ".", "tol", ",", "rho", "=", "args", ".", "rho", ",", "\n", "domain", "=", "args", ".", "dom", ",", "csv_files", "=", "csv_files", ",", "\n", "ssm_read_pk", "=", "args", ".", "ssm_read_pk", ",", "read_pk", "=", "args", ".", "read_pk", ",", "\n", "n_jobs", "=", "args", ".", "n_jobs", ",", "tonnetz", "=", "args", ".", "tonnetz", ")", "\n", "\n", "logging", ".", "info", "(", "\"Done! Took %.2f seconds.\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.extract_motives_eval.process": [[47, 81], ["glob.glob", "glob.glob", "sorted", "sorted", "pandas.DataFrame", "zip", "logging.info", "print", "logging.info", "print", "os.path.join", "os.path.join", "logging.info", "mir_eval.io.load_patterns", "mir_eval.io.load_patterns", "mir_eval.pattern.establishment_FPR", "mir_eval.pattern.occurrence_FPR", "mir_eval.pattern.three_layer_FPR", "mir_eval.pattern.occurrence_FPR", "mir_eval.pattern.standard_FPR", "results.append.append", "results.append.mean", "open", "f.write", "f.write", "os.path.join", "str", "str", "os.path.splitext", "os.path.splitext", "results.append.mean", "os.path.basename", "os.path.basename"], "function", ["None"], ["def", "process", "(", "refdir", ",", "estdir", ")", ":", "\n", "    ", "references", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "refdir", ",", "\"*.txt\"", ")", ")", "\n", "estimations", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "estdir", ",", "\"*.seg\"", ")", ")", "\n", "references", "=", "sorted", "(", "references", ")", "\n", "estimations", "=", "sorted", "(", "estimations", ")", "\n", "results", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "ref", ",", "est", "in", "zip", "(", "references", ",", "estimations", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "ref", ")", ")", "[", "0", "]", "==", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "est", ")", ")", "[", "0", "]", "\n", "logging", ".", "info", "(", "\"Evaluating file: %s\"", ",", "est", ")", "\n", "ref_pat", "=", "mir_eval", ".", "io", ".", "load_patterns", "(", "ref", ")", "\n", "est_pat", "=", "mir_eval", ".", "io", ".", "load_patterns", "(", "est", ")", "\n", "\n", "res", "=", "{", "}", "\n", "res", "[", "\"Est_F\"", "]", ",", "res", "[", "\"Est_P\"", "]", ",", "res", "[", "\"Est_R\"", "]", "=", "mir_eval", ".", "pattern", ".", "establishment_FPR", "(", "ref_pat", ",", "est_pat", ")", "\n", "res", "[", "\"Occ.75_F\"", "]", ",", "res", "[", "\"Occ.75_P\"", "]", ",", "res", "[", "\"Occ.75_R\"", "]", "=", "mir_eval", ".", "pattern", ".", "occurrence_FPR", "(", "ref_pat", ",", "est_pat", ",", "thres", "=", ".75", ")", "\n", "res", "[", "\"ThreeLayer_F\"", "]", ",", "res", "[", "\"ThreeLayer_P\"", "]", ",", "res", "[", "\"ThreeLayer_R\"", "]", "=", "mir_eval", ".", "pattern", ".", "three_layer_FPR", "(", "ref_pat", ",", "est_pat", ")", "\n", "res", "[", "\"Occ.5_F\"", "]", ",", "res", "[", "\"Occ.5_P\"", "]", ",", "res", "[", "\"Occ.5_R\"", "]", "=", "mir_eval", ".", "pattern", ".", "occurrence_FPR", "(", "ref_pat", ",", "est_pat", ",", "thres", "=", ".5", ")", "\n", "res", "[", "\"Std_F\"", "]", ",", "res", "[", "\"Std_P\"", "]", ",", "res", "[", "\"Std_R\"", "]", "=", "mir_eval", ".", "pattern", ".", "standard_FPR", "(", "ref_pat", ",", "est_pat", ")", "\n", "results", "=", "results", ".", "append", "(", "res", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Results per piece:\"", ")", "\n", "print", "(", "results", ")", "\n", "logging", ".", "info", "(", "\"Average Results:\"", ")", "\n", "print", "(", "results", ".", "mean", "(", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "estdir", ",", "\"results.txt\"", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "results", ")", ")", "\n", "f", ".", "write", "(", "str", "(", "results", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.extract_motives_eval.main": [[83, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "time.time", "logging.basicConfig", "os.path.join", "extract_motives_eval.process", "logging.info", "time.time"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.process"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Main function.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\n", "\"Evals the algorithm using mir_eval\"", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "\"-refdir\"", ",", "action", "=", "\"store\"", ",", "\n", "default", "=", "\"complex_auto/motives_extractor/groundtruth\"", ",", "\n", "help", "=", "\"Directory with the annotations\"", ")", "\n", "parser", ".", "add_argument", "(", "\"run_keyword\"", ",", "action", "=", "\"store\"", ",", "\n", "help", "=", "\"Directory with the estimations\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Setup the logger", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s: %(levelname)s: %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "est_dir", "=", "os", ".", "path", ".", "join", "(", "\"output\"", ",", "args", ".", "run_keyword", ")", "\n", "\n", "# Run the algorithm", "\n", "process", "(", "args", ".", "refdir", ",", "est_dir", ")", "\n", "\n", "logging", ".", "info", "(", "\"Done! Took %.2f seconds.\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.plot_train_state": [[35, 45], ["complex_auto.plotting.plot_train_state_2d", "complex_auto.plotting.plot_train_state_2d", "complex_auto.plotting.plot_train_state_1d"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_train_state_2d", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_train_state_2d", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_train_state_1d"], ["def", "plot_train_state", "(", "loss_curve_eval", ",", "loss_curve_train", ",", "model", ",", "x", ",", "y", ",", "epoch", ")", ":", "\n", "    ", "if", "args", ".", "data_type", "==", "'cqt'", ":", "\n", "        ", "plot_train_state_2d", "(", "loss_curve_eval", ",", "loss_curve_train", ",", "model", ",", "x", ",", "y", ",", "\n", "epoch", ",", "out_dir", ",", "args", ".", "length_ngram", ")", "\n", "", "elif", "args", ".", "data_type", "==", "'mnist'", ":", "\n", "        ", "plot_train_state_2d", "(", "loss_curve_eval", ",", "loss_curve_train", ",", "model", ",", "x", ",", "y", ",", "\n", "epoch", ",", "out_dir", ",", "args", ".", "length_ngram", ")", "\n", "", "else", ":", "\n", "        ", "plot_train_state_1d", "(", "loss_curve_eval", ",", "loss_curve_train", ",", "model", ",", "x", ",", "y", ",", "\n", "epoch", ",", "out_dir", ",", "args", ".", "length_ngram", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.create_data_loaders": [[47, 84], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "complex_auto.dataloader.DataSampler", "complex_auto.dataloader.DataSampler", "complex_auto.dataloader.DataSampler"], "function", ["None"], ["", "", "def", "create_data_loaders", "(", "data", ",", "data_eval", ",", "data_test", ",", "length_ngram", ",", "samples_epoch", ",", "batch_size", ",", "transform", ",", "emph_onset", "=", "0", ")", ":", "\n", "    ", "train_loader", "=", "DataLoader", "(", "\n", "DataSampler", "(", "data", ",", "length_ngram", "=", "length_ngram", ",", "\n", "samples_epoch", "=", "samples_epoch", ",", "\n", "transform", "=", "transform", ",", "\n", "emph_onset", "=", "emph_onset", ",", "\n", "random_pairs", "=", "False", ",", "\n", "shifts", "=", "args", ".", "shifts", ",", "\n", "scales", "=", "args", ".", "scales", "\n", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "DataSampler", "(", "data_eval", ",", "length_ngram", "=", "length_ngram", ",", "\n", "samples_epoch", "=", "samples_epoch", ",", "shuffle", "=", "False", ",", "\n", "transform", "=", "transform", ",", "emph_onset", "=", "emph_onset", ",", "\n", "random_pairs", "=", "False", ",", "\n", "shifts", "=", "args", ".", "shifts", ",", "\n", "scales", "=", "args", ".", "scales", "\n", ")", ",", "\n", "batch_size", "=", "500", ",", "\n", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "\n", "DataSampler", "(", "data_test", ",", "length_ngram", "=", "length_ngram", ",", "\n", "samples_epoch", "=", "samples_epoch", ",", "\n", "shuffle", "=", "False", ",", "\n", "transform", "=", "transform", ",", "emph_onset", "=", "emph_onset", ",", "\n", "random_pairs", "=", "False", ",", "\n", "shifts", "=", "[", "0", ",", "0", "]", ",", "\n", "scales", "=", "[", "0", ",", "0", "]", "\n", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "eval_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.create_data_sig": [[86, 108], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open", "f.readlines", "complex_auto.dataloader.Signal", "complex_auto.dataloader.Signal"], "function", ["None"], ["", "def", "create_data_sig", "(", "block_size", "=", "5000", ",", "refresh_cache", "=", "True", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "input_files", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "files", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "files_eval", "=", "files", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "Signal", "(", "files", ",", "trg_shift", "=", "0", ",", "\n", "block_size", "=", "block_size", ",", "\n", "refresh_cache", "=", "refresh_cache", ",", "\n", "random_shift", "=", "args", ".", "shifts", "[", "0", "]", ",", "\n", "samples_epoch", "=", "args", ".", "samples_epoch", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "eval_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "Signal", "(", "files_eval", ",", "trg_shift", "=", "0", ",", "\n", "block_size", "=", "block_size", ",", "\n", "refresh_cache", "=", "False", ",", "\n", "random_shift", "=", "args", ".", "shifts", "[", "0", "]", ",", "\n", "samples_epoch", "=", "args", ".", "samples_epoch", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "eval_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.create_data_mnist": [[110, 121], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "complex_auto.dataloader.Data", "complex_auto.dataloader.Data"], "function", ["None"], ["", "def", "create_data_mnist", "(", "data", ",", "data_eval", ",", "batch_size", ")", ":", "\n", "    ", "train_loader", "=", "DataLoader", "(", "\n", "Data", "(", "data", "[", ":", ",", "0", "]", ",", "data", "[", ":", ",", "1", "]", ",", "standardize", "=", "True", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "Data", "(", "data_eval", "[", ":", ",", "0", "]", ",", "data_eval", "[", ":", ",", "1", "]", ",", "standardize", "=", "True", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "eval_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.plot_pca": [[123, 168], ["model.cpu", "model.eval", "enumerate", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.hstack", "mags_prod.copy", "numpy.matrix.sort", "numpy.arcsin", "complex_auto.transform.rPCA", "complex_auto.transform.rPCA.pca_transform", "print", "print", "range", "model", "model", "np.vstack.append", "np.vstack.append", "angles_diff.append", "instance_nrs.append", "np.hstack.append", "numpy.sin", "complex_auto.plot.plot_fs_2d", "model.cuda", "mags_x.detach", "mags_y.detach", "complex_auto.transform.rPCA.pca_expvar", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.eval", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.pca_transform", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_fs_2d", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.pca_expvar"], ["", "def", "plot_pca", "(", "loader", ",", "fn", "=", "\"pca_trans.png\"", ")", ":", "\n", "    ", "angles_diff", "=", "[", "]", "\n", "instance_nrs", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "mags_all_x", "=", "[", "]", "\n", "mags_all_y", "=", "[", "]", "\n", "model", ".", "cpu", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "x", ",", "y", ",", "transform", ",", "instance_nr", ",", "distance", ")", "in", "enumerate", "(", "\n", "loader", ")", ":", "\n", "        ", "mags_x", ",", "angles_x", "=", "model", "(", "x", ")", "\n", "mags_y", ",", "angles_y", "=", "model", "(", "y", ")", "\n", "mags_all_x", ".", "append", "(", "mags_x", ".", "detach", "(", ")", ")", "\n", "mags_all_y", ".", "append", "(", "mags_y", ".", "detach", "(", ")", ")", "\n", "angles_diff", ".", "append", "(", "(", "angles_x", "-", "angles_y", ")", ".", "detach", "(", ")", ")", "\n", "instance_nrs", ".", "append", "(", "instance_nr", ")", "\n", "labels", ".", "append", "(", "distance", ")", "\n", "if", "batch_idx", "==", "50", ":", "\n", "            ", "break", "\n", "\n", "", "", "angles", "=", "np", ".", "vstack", "(", "angles_diff", ")", "\n", "\n", "mags_all_x", "=", "np", ".", "vstack", "(", "mags_all_x", ")", "\n", "mags_all_y", "=", "np", ".", "vstack", "(", "mags_all_y", ")", "\n", "labels", "=", "np", ".", "hstack", "(", "labels", ")", "\n", "\n", "mags_prod", "=", "mags_all_x", "*", "mags_all_y", "\n", "quartile", "=", "mags_prod", ".", "copy", "(", ")", "\n", "np", ".", "matrix", ".", "sort", "(", "quartile", ")", "\n", "quartile", "=", "quartile", "[", ":", ",", "0", "]", "\n", "\n", "angles", "[", "mags_prod", "<", "quartile", "[", ":", ",", "None", "]", "]", "=", "0", "\n", "angles", "=", "np", ".", "arcsin", "(", "np", ".", "sin", "(", "angles", ")", ")", "\n", "\n", "dims", "=", "6", "\n", "pca", "=", "rPCA", "(", "angles", ",", "M", "=", "dims", ")", "\n", "vals", "=", "pca", ".", "pca_transform", "(", ")", "\n", "print", "(", "f\"Var explained = {pca.pca_expvar()}\"", ")", "\n", "print", "(", "f\"size_vals = {vals.shape}\"", ")", "\n", "for", "i", "in", "range", "(", "dims", "-", "2", ")", ":", "\n", "        ", "vals_dim", "=", "vals", "[", ":", ",", "i", ":", "i", "+", "2", "]", "\n", "plot_fs_2d", "(", "vals_dim", ",", "labels", ",", "save_fn", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"dim{i}\"", "+", "fn", ")", ")", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.eval": [[170, 192], ["model.eval", "enumerate", "complex_auto.util.cuda_variable", "complex_auto.util.cuda_variable", "model", "model", "model.backward", "model.backward", "losses.append", "loss_mse.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.eval", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward"], ["", "", "def", "eval", "(", "eval_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "losses", "=", "[", "]", "\n", "diffs", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "x", ",", "y", ",", "transform", ",", "_", ",", "_", ")", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "        ", "x", "=", "cuda_variable", "(", "x", ")", "\n", "y", "=", "cuda_variable", "(", "y", ")", "\n", "\n", "amps_x", ",", "phases_x", "=", "model", "(", "x", ")", "\n", "amps_y", ",", "phases_y", "=", "model", "(", "y", ")", "\n", "\n", "recon_y", "=", "model", ".", "backward", "(", "amps_x", ",", "phases_y", ")", "\n", "recon_x", "=", "model", ".", "backward", "(", "amps_y", ",", "phases_x", ")", "\n", "\n", "pow", "=", "1", "\n", "loss_mse", "=", "(", "torch", ".", "abs", "(", "y", "-", "recon_y", ")", "**", "pow", ")", ".", "mean", "(", ")", "+", "(", "torch", ".", "abs", "(", "x", "-", "recon_x", ")", "**", "pow", ")", ".", "mean", "(", ")", "\n", "\n", "losses", ".", "append", "(", "loss_mse", ".", "item", "(", ")", ")", "\n", "\n", "# print(losses)", "\n", "", "return", "losses", ",", "diffs", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.train": [[194, 245], ["model.train", "enumerate", "complex_auto.util.cuda_variable", "complex_auto.util.cuda_variable", "optimizer.zero_grad", "model", "model", "model.backward", "model.backward", "complex_auto.util.cuda_variable", "complex_auto.util.cuda_variable", "loss.backward", "optimizer.step", "losses.append", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model.set_to_norm", "loss.item", "numpy.array", "numpy.array", "complex_auto.regularize.norm_loss", "complex_auto.regularize.equal_norm_loss", "model.norm_val.item"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.train", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.set_to_norm", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.regularize.norm_loss", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.regularize.equal_norm_loss"], ["", "def", "train", "(", "model", ",", "train_loader", ")", ":", "\n", "    ", "\"\"\"\n    Trains the C-GAE for one epoch\n\n    :param epoch: the current training epoch\n    \"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "losses", "=", "[", "]", "\n", "diffs", "=", "[", "]", "\n", "\n", "for", "batch_idx", ",", "(", "x", ",", "y", ",", "transform", ",", "_", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "x", "=", "cuda_variable", "(", "x", ")", "\n", "y", "=", "cuda_variable", "(", "y", ")", "\n", "\n", "# Full model", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "amps_x", ",", "phases_x", "=", "model", "(", "x", ")", "\n", "amps_y", ",", "phases_y", "=", "model", "(", "y", ")", "\n", "\n", "recon_y", "=", "model", ".", "backward", "(", "amps_x", ",", "phases_y", ")", "\n", "recon_x", "=", "model", ".", "backward", "(", "amps_y", ",", "phases_x", ")", "\n", "\n", "normloss", "=", "cuda_variable", "(", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "0", "]", ")", ")", ")", "\n", "eqnloss", "=", "cuda_variable", "(", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "0", "]", ")", ")", ")", "\n", "\n", "if", "args", ".", "norm_loss", ">", "0", ":", "\n", "            ", "normloss", "=", "norm_loss", "(", "model", ".", "layer", ".", "weight", ")", "*", "args", ".", "norm_loss", "\n", "\n", "", "if", "args", ".", "equal_norm_loss", ">", "0", ":", "\n", "            ", "eqnloss", "=", "equal_norm_loss", "(", "model", ".", "layer", ".", "weight", ")", "*", "args", ".", "equal_norm_loss", "\n", "\n", "", "pow", "=", "args", ".", "power_loss", "\n", "loss_mse", "=", "(", "(", "y", "-", "recon_y", ")", ".", "abs", "(", ")", "**", "pow", ")", ".", "mean", "(", ")", "+", "(", "(", "x", "-", "recon_x", ")", ".", "abs", "(", ")", "**", "pow", ")", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "loss_mse", "+", "normloss", "+", "eqnloss", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "args", ".", "set_to_norm", ">=", "0", ":", "\n", "            ", "model", ".", "set_to_norm", "(", "args", ".", "set_to_norm", ")", "\n", "\n", "", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "set_to_norm", ">=", "0", ":", "\n", "        ", "print", "(", "f\"Learned norm for all bases = {model.norm_val.item()}\"", ")", "\n", "\n", "", "return", "losses", ",", "diffs", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.run_experiment": [[247, 287], ["print", "tqdm.tqdm", "torch.save", "torch.save", "range", "train.train", "model.eval", "train.eval", "loss_curve.append", "eval_curve.append", "model.state_dict", "numpy.mean", "numpy.mean", "print", "enumerate", "torch.save", "torch.save", "model.state_dict", "numpy.mean", "numpy.mean", "complex_auto.util.cuda_variable", "complex_auto.util.cuda_variable", "train.plot_train_state", "train.plot_pca"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.train", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.eval", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.eval", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.plot_train_state", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.plot_pca"], ["", "def", "run_experiment", "(", "model", ",", "start_epoch", ")", ":", "\n", "# Train and plot intermediate results", "\n", "    ", "loss_curve", "=", "[", "]", "\n", "eval_curve", "=", "[", "]", "\n", "bs", "=", "args", ".", "batch_size", "\n", "print", "(", "\"Starting training...\"", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ")", ":", "\n", "        ", "losses", ",", "precs", ",", "eval_loss", "=", "None", ",", "None", ",", "None", "\n", "\n", "losses", ",", "diffs", "=", "train", "(", "model", ",", "train_loader", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "eval_loss", ",", "eval_diff", "=", "eval", "(", "eval_loader", ")", "\n", "\n", "loss_curve", ".", "append", "(", "np", ".", "mean", "(", "losses", ")", ")", "\n", "eval_curve", ".", "append", "(", "np", ".", "mean", "(", "eval_loss", ")", ")", "\n", "\n", "if", "epoch", "%", "1", "==", "0", ":", "\n", "            ", "print", "(", "'Finished Epoch: {}/{} ({:.0f}%)\\tLoss: {:.6f}'", "\n", "'\\tEval: {:.6f}\\tBatch Size: {}'", ".", "format", "(", "\n", "epoch", ",", "args", ".", "epochs", "+", "1", ",", "100.", "*", "epoch", "/", "args", ".", "epochs", "+", "1", ",", "\n", "np", ".", "mean", "(", "losses", ")", ",", "np", ".", "mean", "(", "eval_loss", ")", ",", "bs", ")", ")", "\n", "\n", "", "if", "epoch", "%", "args", ".", "plot_interval", "==", "0", ":", "\n", "            ", "for", "batch_idx", ",", "(", "x", ",", "y", ",", "transform", ",", "_", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "if", "batch_idx", "==", "0", ":", "\n", "                    ", "x", "=", "cuda_variable", "(", "x", ")", "\n", "y", "=", "cuda_variable", "(", "y", ")", "\n", "plot_train_state", "(", "loss_curve", ",", "eval_curve", ",", "model", ",", "x", ",", "y", ",", "\n", "epoch", ")", "\n", "if", "args", ".", "data_type", "==", "'cqt'", ":", "\n", "                        ", "loader", "=", "test_loader", "if", "args", ".", "test_cqt", "else", "train_loader", "\n", "plot_pca", "(", "loader", ",", "fn", "=", "f\"pca_trans_{epoch}.png\"", ")", "\n", "", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_save_fn", ")", "\n", "\n", "# Save the model", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_save_fn", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.evaluate": [[34, 80], ["model.cpu", "model.eval", "enumerate", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.hstack", "mags_prod.copy", "numpy.matrix.sort", "numpy.arcsin", "complex_auto.transform.rPCA", "complex_auto.transform.rPCA.pca_transform", "print", "print", "range", "model", "model", "np.vstack.append", "np.vstack.append", "angles_diff.append", "np.hstack.append", "labels.append", "numpy.sin", "complex_auto.plot.plot_fs_2d", "model.cuda", "mags_x.detach", "mags_y.detach", "numpy.hstack", "complex_auto.transform.rPCA.pca_expvar", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.eval", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.pca_transform", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_fs_2d", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.pca_expvar"], ["def", "evaluate", "(", "loader", ",", "fn", "=", "\"pca_trans.png\"", ")", ":", "\n", "    ", "angles_diff", "=", "[", "]", "\n", "instance_nrs", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "mags_all_x", "=", "[", "]", "\n", "mags_all_y", "=", "[", "]", "\n", "model", ".", "cpu", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "x", ",", "y", ",", "transform", ",", "instance_nr", ",", "distance", ")", "in", "enumerate", "(", "\n", "loader", ")", ":", "\n", "        ", "mags_x", ",", "angles_x", "=", "model", "(", "x", ")", "\n", "mags_y", ",", "angles_y", "=", "model", "(", "y", ")", "\n", "mags_all_x", ".", "append", "(", "mags_x", ".", "detach", "(", ")", ")", "\n", "mags_all_y", ".", "append", "(", "mags_y", ".", "detach", "(", ")", ")", "\n", "angles_diff", ".", "append", "(", "(", "angles_x", "-", "angles_y", ")", ".", "detach", "(", ")", ")", "\n", "instance_nrs", ".", "append", "(", "instance_nr", ")", "\n", "labels", ".", "append", "(", "distance", ")", "\n", "if", "batch_idx", "==", "50", ":", "\n", "            ", "break", "\n", "\n", "", "", "angles", "=", "np", ".", "vstack", "(", "angles_diff", ")", "\n", "\n", "mags_all_x", "=", "np", ".", "vstack", "(", "mags_all_x", ")", "\n", "mags_all_y", "=", "np", ".", "vstack", "(", "mags_all_y", ")", "\n", "instance_nrs", "=", "np", ".", "hstack", "(", "instance_nrs", ")", "\n", "distances", "=", "(", "(", "np", ".", "hstack", "(", "labels", ")", "*", "100", ")", "//", "10", ")", "/", "10", "\n", "\n", "mags_prod", "=", "mags_all_x", "*", "mags_all_y", "\n", "quartile", "=", "mags_prod", ".", "copy", "(", ")", "\n", "np", ".", "matrix", ".", "sort", "(", "quartile", ")", "\n", "quartile", "=", "quartile", "[", ":", ",", "0", "]", "\n", "\n", "angles", "[", "mags_prod", "<", "quartile", "[", ":", ",", "None", "]", "]", "=", "0", "\n", "angles", "=", "np", ".", "arcsin", "(", "np", ".", "sin", "(", "angles", ")", ")", "\n", "\n", "dims", "=", "6", "\n", "pca", "=", "rPCA", "(", "angles", ",", "M", "=", "dims", ")", "\n", "vals", "=", "pca", ".", "pca_transform", "(", ")", "\n", "print", "(", "f\"Var explained = {pca.pca_expvar()}\"", ")", "\n", "print", "(", "f\"size_vals = {vals.shape}\"", ")", "\n", "for", "i", "in", "range", "(", "dims", "-", "2", ")", ":", "\n", "        ", "vals_dim", "=", "vals", "[", ":", ",", "i", ":", "i", "+", "2", "]", "\n", "plot_fs_2d", "(", "vals_dim", ",", "distances", ",", "save_fn", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"dim{i}\"", "+", "fn", ")", ")", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.get_balanced": [[82, 99], ["range", "numpy.vstack", "numpy.vstack", "np.vstack.append", "np.vstack.append", "classes.append"], "function", ["None"], ["", "", "def", "get_balanced", "(", "data_eval_", ",", "nr_nn_", ")", ":", "\n", "    ", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "classes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "        ", "n", "=", "0", "\n", "k", "=", "0", "\n", "while", "n", "<", "nr_nn_", "//", "10", ":", "\n", "            ", "if", "data_eval_", "[", "k", ",", "3", "]", "==", "j", ":", "\n", "                ", "x", ".", "append", "(", "data_eval_", "[", "k", ",", "0", "]", ")", "\n", "y", ".", "append", "(", "data_eval_", "[", "k", ",", "1", "]", ")", "\n", "classes", ".", "append", "(", "j", ")", "\n", "n", "+=", "1", "\n", "", "k", "+=", "1", "\n", "", "", "x", "=", "np", ".", "vstack", "(", "x", ")", "\n", "y", "=", "np", ".", "vstack", "(", "y", ")", "\n", "return", "x", ",", "y", ",", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.classify": [[101, 115], ["sklearn.neighbors.KNeighborsClassifier", "sklearn.neighbors.KNeighborsClassifier.fit", "sklearn.neighbors.KNeighborsClassifier.predict", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.predict", "numpy.sum", "len", "numpy.sum", "len", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "classify", "(", "mags", ",", "mags_test", ",", "classes", ",", "classes_test", ",", "type", "=", "'knn'", ")", ":", "\n", "    ", "if", "type", "==", "'knn'", ":", "\n", "        ", "metric", "=", "'cosine'", "\n", "neigh", "=", "KNeighborsClassifier", "(", "n_neighbors", "=", "10", ",", "metric", "=", "metric", ")", "\n", "neigh", ".", "fit", "(", "mags", ",", "classes", ")", "\n", "preds", "=", "neigh", ".", "predict", "(", "mags_test", ")", "\n", "error", "=", "1", "-", "(", "np", ".", "sum", "(", "preds", "==", "np", ".", "array", "(", "classes_test", ")", ")", "/", "len", "(", "preds", ")", ")", "\n", "return", "error", "\n", "", "else", ":", "\n", "        ", "logreg", "=", "LogisticRegression", "(", "solver", "=", "'newton-cg'", ",", "max_iter", "=", "200", ")", "\n", "logreg", ".", "fit", "(", "mags", ",", "classes", ")", "\n", "preds", "=", "logreg", ".", "predict", "(", "mags_test", ")", "\n", "error", "=", "1", "-", "(", "np", ".", "sum", "(", "preds", "==", "np", ".", "array", "(", "classes_test", ")", ")", "/", "len", "(", "preds", ")", ")", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.create_ss_matrix": [[117, 121], ["scipy.spatial.distance.squareform", "scipy.spatial.distance.pdist", "numpy.vstack", "complex_auto.util.to_numpy"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy"], ["", "", "def", "create_ss_matrix", "(", "ampls", ",", "mode", "=", "'cosine'", ")", ":", "\n", "    ", "matrix", "=", "squareform", "(", "pdist", "(", "np", ".", "vstack", "(", "to_numpy", "(", "ampls", ")", ")", ",", "\n", "metric", "=", "mode", ")", ")", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.to_amp_phase": [[123, 137], ["model.eval", "range", "complex_auto.util.cuda_variable", "model", "model.cuda", "input[].reshape", "complex_auto.cqt.standardize", "ngrams.append", "torch.FloatTensor", "len", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.eval", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.standardize"], ["", "def", "to_amp_phase", "(", "input", ",", "step_size", ")", ":", "\n", "    ", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "ngrams", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "input", ")", "-", "args", ".", "length_ngram", ",", "step_size", ")", ":", "\n", "        ", "curr_ngram", "=", "input", "[", "i", ":", "i", "+", "args", ".", "length_ngram", "]", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "curr_ngram", "=", "standardize", "(", "curr_ngram", ")", "\n", "ngrams", ".", "append", "(", "curr_ngram", ")", "\n", "\n", "", "x", "=", "cuda_variable", "(", "torch", ".", "FloatTensor", "(", "np", ".", "vstack", "(", "ngrams", ")", ")", ")", "\n", "\n", "ampl", ",", "phase", "=", "model", "(", "x", ")", "\n", "return", "ampl", ",", "phase", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.create_matrices": [[139, 175], ["print", "convert.get_input_repr", "convert.to_amp_phase", "convert.create_ss_matrix", "numpy.pad", "range", "scipy.signal.convolve2d", "scipy.signal.convolve2d.min", "os.path.basename", "os.path.join", "os.path.join", "numpy.save", "out_files.append", "print", "print", "matplotlib.clf", "matplotlib.imsave", "print", "open", "numpy.eye", "scipy.signal.convolve2d.max", "os.path.join", "f.write", "scipy.signal.convolve2d.max", "numpy.eye", "numpy.eye", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.get_input_repr", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.to_amp_phase", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.create_ss_matrix"], ["", "def", "create_matrices", "(", "dir_results", ",", "files", ",", "step_size", "=", "1", ",", "mode", "=", "'cosine'", ")", ":", "\n", "    ", "out_files", "=", "[", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "f\"Creating self-similarity matrix from features of {file}..\"", ")", "\n", "data", "=", "get_input_repr", "(", "file", ")", "\n", "ampls", ",", "phases", "=", "to_amp_phase", "(", "data", ",", "step_size", "=", "step_size", ")", "\n", "\n", "matrix", "=", "create_ss_matrix", "(", "ampls", ",", "mode", "=", "mode", ")", "\n", "matrix", "=", "np", ".", "pad", "(", "matrix", ",", "(", "(", "0", ",", "9", ")", ",", "(", "0", ",", "9", ")", ")", ",", "mode", "=", "'constant'", ",", "\n", "constant_values", "=", "matrix", ".", "max", "(", ")", ")", "\n", "matrix", "=", "1", "/", "(", "matrix", "+", "1e-6", ")", "\n", "\n", "for", "k", "in", "range", "(", "-", "8", ",", "9", ")", ":", "\n", "            ", "eye", "=", "1", "-", "np", ".", "eye", "(", "*", "matrix", ".", "shape", ",", "k", "=", "k", ")", "\n", "matrix", "=", "matrix", "*", "eye", "\n", "\n", "", "flength", "=", "10", "\n", "ey", "=", "np", ".", "eye", "(", "flength", ")", "+", "np", ".", "eye", "(", "flength", ",", "k", "=", "1", ")", "+", "np", ".", "eye", "(", "flength", ",", "k", "=", "-", "1", ")", "\n", "matrix", "=", "convolve2d", "(", "matrix", ",", "ey", ",", "mode", "=", "\"same\"", ")", "\n", "matrix", "-=", "matrix", ".", "min", "(", ")", "\n", "matrix", "/=", "(", "matrix", ".", "max", "(", ")", "+", "1e-8", ")", "\n", "\n", "fn_base", "=", "os", ".", "path", ".", "basename", "(", "file", ")", "\n", "out_npy", "=", "os", ".", "path", ".", "join", "(", "dir_results", ",", "f\"{fn_base}.npy\"", ")", "\n", "out_plot", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"{fn_base}.png\"", ")", "\n", "np", ".", "save", "(", "out_npy", ",", "matrix", ")", "\n", "out_files", ".", "append", "(", "out_npy", ")", "\n", "print", "(", "f\"Written matrix to {out_npy}\"", ")", "\n", "print", "(", "f\"SS Matrix shape = {matrix.shape}\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "imsave", "(", "out_plot", ",", "matrix", ",", "cmap", "=", "\"hot\"", ")", "\n", "print", "(", "f\"Saved matrix plot to {out_plot}\\n\"", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"ss_matrices_filelist.txt\"", ")", ",", "\"w+\"", ")", "as", "f", ":", "\n", "        ", "for", "file", "in", "out_files", ":", "\n", "            ", "f", ".", "write", "(", "file", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.get_input_repr": [[177, 187], ["print", "complex_auto.cqt.to_cqt_repr", "repr.transpose.transpose"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.to_cqt_repr"], ["", "", "", "def", "get_input_repr", "(", "file", ")", ":", "\n", "    ", "if", "args", ".", "data_type", "==", "\"cqt\"", ":", "\n", "        ", "sr", "=", "22050", "\n", "print", "(", "f\"Transforming to CQT: {file}, sample rate = {sr}\"", ")", "\n", "repr", "=", "to_cqt_repr", "(", "file", ",", "args", ".", "n_bins", ",", "args", ".", "bins_per_oct", ",", "args", ".", "fmin", ",", "\n", "args", ".", "hop_length", ",", "use_nr_samples", "=", "-", "1", ",", "sr", "=", "sr", ",", "\n", "standard", "=", "True", ",", "mult", "=", "1.", ")", "\n", "repr", "=", "repr", ".", "transpose", "(", ")", "\n", "\n", "", "return", "repr", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.save_repres": [[189, 199], ["print", "convert.get_input_repr", "convert.to_amp_phase", "numpy.array", "os.path.join", "print", "complex_auto.util.save_pyc_bz", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.get_input_repr", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.convert.to_amp_phase", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.save_pyc_bz"], ["", "def", "save_repres", "(", "dir_results", ",", "files", ",", "step_size", "=", "1", ")", ":", "\n", "    ", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "f\"Calculating features of {file}..\"", ")", "\n", "data", "=", "get_input_repr", "(", "file", ")", "\n", "amp", ",", "phase", "=", "to_amp_phase", "(", "data", ",", "step_size", "=", "step_size", ")", "\n", "results", "=", "np", ".", "array", "(", "[", "amp", ",", "phase", "]", ")", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "dir_results", ",", "os", ".", "path", ".", "basename", "(", "file", ")", "+", "\n", "\"_repres.pyc.bz\"", ")", "\n", "print", "(", "f\"Saving features to {out_file}..\"", ")", "\n", "save_pyc_bz", "(", "results", ",", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.config.get_config": [[25, 76], ["isinstance", "configobj.ConfigObj", "os.access", "config.valid", "os.access", "configobj.ConfigObj", "len", "LOGGER.error", "Exception", "configobj.ConfigObj.merge", "LOGGER.warning", "LOGGER.error", "pprint.pprint", "configobj.ConfigObj"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.config.valid"], ["def", "get_config", "(", "files", ",", "spec", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Loads one or more configuration files and validates it against a\n    specification.\n    \n    Parameters\n    ----------\n    \n    files : string or array-like\n        One or more strings defining the path to configuration file(s)\n        \n    spec : string, optional\n        Specification of configuration file. Used to validate the config file\n        and to cast its parameters to desired variable types.\n        Default: util.config_spec.ini\n        \n    Returns\n    -------\n        Dictionary reflecting the structure of the config file\n    \"\"\"", "\n", "if", "spec", "==", "None", ":", "\n", "        ", "spec", "=", "config_spec_path", "\n", "\n", "", "if", "isinstance", "(", "files", ",", "str", ")", ":", "\n", "        ", "files", "=", "(", "files", ",", ")", "\n", "\n", "", "configspec", "=", "ConfigObj", "(", "spec", ",", "interpolation", "=", "True", ",", "\n", "list_values", "=", "False", ",", "_inspec", "=", "True", ")", "\n", "\n", "if", "os", ".", "access", "(", "files", "[", "0", "]", ",", "os", ".", "R_OK", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "c_mrg", "=", "ConfigObj", "(", "files", "[", "0", "]", ",", "unrepr", "=", "False", ",", "configspec", "=", "configspec", ")", "\n", "", "except", "ConfigObjError", "as", "e", ":", "\n", "            ", "LOGGER", ".", "error", "(", "\"Configuration file validation failed \"", "\n", "\"(see 'util/config_spec.ini' for reference).\"", ")", "\n", "pprint", "(", "e", ".", "__dict__", "[", "\"errors\"", "]", ")", "\n", "raise", "e", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "files", ")", "==", "1", ":", "\n", "            ", "msg", "=", "'cannot open config file: {0}'", ".", "format", "(", "files", "[", "0", "]", ")", "\n", "LOGGER", ".", "error", "(", "msg", ")", "\n", "raise", "Exception", "(", "msg", ")", "\n", "\n", "", "", "for", "fn", "in", "files", "[", "1", ":", "]", ":", "\n", "        ", "if", "os", ".", "access", "(", "fn", ",", "os", ".", "R_OK", ")", ":", "\n", "            ", "c_mrg", ".", "merge", "(", "ConfigObj", "(", "fn", ",", "unrepr", "=", "False", ",", "configspec", "=", "configspec", ")", ")", "\n", "", "else", ":", "\n", "            ", "LOGGER", ".", "warning", "(", "'cannot open config file: {0}'", ".", "format", "(", "fn", ")", ")", "\n", "\n", "", "", "valid", "(", "c_mrg", ")", "\n", "return", "c_mrg", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.config.write_config": [[78, 85], ["configobj.ConfigObj", "configobj.ConfigObj.merge", "open", "configobj.ConfigObj.write", "open.close"], "function", ["None"], ["", "def", "write_config", "(", "config", ",", "fn", ")", ":", "\n", "    ", "\"\"\" Write configuration (dict) into .ini file \"\"\"", "\n", "c", "=", "ConfigObj", "(", ")", "\n", "c", ".", "merge", "(", "config", ")", "\n", "f", "=", "open", "(", "fn", ",", "'w'", ")", "\n", "c", ".", "write", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.config.config_to_args": [[87, 92], ["config.items", "vars"], "function", ["None"], ["", "def", "config_to_args", "(", "config", ",", "args", ")", ":", "\n", "    ", "for", "(", "key", ",", "value", ")", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "vars", "(", "args", ")", "[", "key", "]", "=", "value", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.config.eval_mixed_list": [[94, 100], ["zip", "exec"], "function", ["None"], ["", "def", "eval_mixed_list", "(", "list_in", ",", "*", "types", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "for", "element", ",", "type", "in", "zip", "(", "list_in", ",", "types", ")", ":", "\n", "        ", "command", "=", "\"result.append({0}(element))\"", ".", "format", "(", "type", ")", "\n", "exec", "(", "command", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.config.valid": [[102, 125], ["validate.Validator", "config.validate", "configobj.flatten_errors", "validate.ValidateError", "section_list.append", "section_list.append"], "function", ["None"], ["", "def", "valid", "(", "config", ")", ":", "\n", "    ", "vtor", "=", "validate", ".", "Validator", "(", ")", "\n", "vtor", ".", "functions", "[", "'mixed_list'", "]", "=", "eval_mixed_list", "\n", "res", "=", "config", ".", "validate", "(", "vtor", ",", "preserve_errors", "=", "True", ")", "\n", "any_error", "=", "False", "\n", "report", "=", "\"\"", "\n", "for", "entry", "in", "flatten_errors", "(", "config", ",", "res", ")", ":", "\n", "        ", "any_error", "=", "True", "\n", "# each entry is a tuple", "\n", "section_list", ",", "key", ",", "error", "=", "entry", "\n", "if", "key", "is", "not", "None", ":", "\n", "            ", "section_list", ".", "append", "(", "key", ")", "\n", "", "else", ":", "\n", "            ", "section_list", ".", "append", "(", "'[missing section]'", ")", "\n", "", "section_string", "=", "', '", ".", "join", "(", "section_list", ")", "\n", "if", "error", "==", "False", ":", "\n", "            ", "error", "=", "'missing value or section.'", "\n", "", "report", "+=", "\"{0}: {1} \\n\"", ".", "format", "(", "section_string", ",", "error", ")", "\n", "\n", "", "if", "any_error", ":", "\n", "        ", "raise", "ValidateError", "(", "\"Configuration file validation failed, \"", "\n", "\"(see 'util/config_spec.ini' for reference):\\n{0}\"", "\n", ".", "format", "(", "report", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_train_state_2d": [[21, 108], ["model.eval", "complex_auto.util.cuda_variable", "complex_auto.util.cuda_variable", "model", "model", "model.backward", "model.backward", "complex_auto.plot.make_tiles", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.plot_hist", "complex_auto.plot.make_tiles", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.plot_hist", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.plot_hist", "complex_auto.plot.plot_hist", "complex_auto.util.to_numpy", "complex_auto.plot.make_tiles", "complex_auto.util.to_numpy", "complex_auto.plot.make_tiles", "matplotlib.clf", "matplotlib.plot", "matplotlib.plot", "matplotlib.savefig", "complex_auto.util.to_numpy().reshape", "os.path.join", "complex_auto.util.to_numpy().reshape", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy().reshape", "os.path.join", "complex_auto.util.to_numpy().reshape", "os.path.join", "complex_auto.util.to_numpy().reshape", "os.path.join", "complex_auto.util.to_numpy().reshape", "os.path.join", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy.reshape", "os.path.join", "complex_auto.util.to_numpy.reshape", "os.path.join", "os.path.join", "len", "len", "len", "len", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.eval", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy"], ["def", "plot_train_state_2d", "(", "loss_curve_eval", ",", "loss_curve_train", ",", "model", ",", "x", ",", "y", ",", "\n", "epoch", ",", "out_dir", ",", "length_ngram", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "x", "=", "cuda_variable", "(", "x", ")", "\n", "y", "=", "cuda_variable", "(", "y", ")", "\n", "# calculate mapping of untransposed data", "\n", "amp_x", ",", "phase_x", "=", "model", "(", "x", ")", "\n", "amp_y", ",", "phase_y", "=", "model", "(", "y", ")", "\n", "\n", "recon_y", "=", "model", ".", "backward", "(", "amp_x", ",", "phase_y", ")", "\n", "recon_x", "=", "model", ".", "backward", "(", "amp_y", ",", "phase_x", ")", "\n", "\n", "make_tiles", "(", "to_numpy", "(", "recon_y", ")", ".", "reshape", "(", "recon_y", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ",", "\n", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"recon_y{epoch}.png\"", ")", ")", "\n", "make_tiles", "(", "to_numpy", "(", "recon_x", ")", ".", "reshape", "(", "recon_x", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ",", "\n", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"recon_x{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "recon_x", ")", ",", "f\"recon_x_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"recon_x_hist_ep{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "recon_y", ")", ",", "f\"recon_y_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"recon_y_hist_ep{epoch}.png\"", ")", ")", "\n", "\n", "half_weight", "=", "model", ".", "layer", ".", "weight", ".", "shape", "[", "0", "]", "//", "2", "\n", "make_tiles", "(", "to_numpy", "(", "model", ".", "layer", ".", "weight", "[", ":", "half_weight", "]", ")", ".", "reshape", "(", "len", "(", "\n", "model", ".", "layer", ".", "weight", "[", ":", "half_weight", "]", ")", ",", "\n", "1", ",", "-", "1", ",", "\n", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filters_x{epoch}.png\"", ")", ")", "\n", "make_tiles", "(", "to_numpy", "(", "model", ".", "layer", ".", "weight", "[", "half_weight", ":", "]", ")", ".", "reshape", "(", "len", "(", "\n", "model", ".", "layer", ".", "weight", "[", "half_weight", ":", "]", ")", ",", "\n", "1", ",", "-", "1", ",", "\n", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filters_y{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "model", ".", "layer", ".", "weight", "[", ":", "half_weight", "]", ")", ".", "reshape", "(", "len", "(", "\n", "model", ".", "layer", ".", "weight", "[", ":", "half_weight", "]", ")", ",", "\n", "1", ",", "-", "1", ",", "\n", "length_ngram", ")", ",", "\n", "f\"filters_x_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filters_x_hist_ep{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "model", ".", "layer", ".", "weight", "[", "half_weight", ":", "]", ")", ".", "reshape", "(", "len", "(", "\n", "model", ".", "layer", ".", "weight", "[", "half_weight", ":", "]", ")", ",", "\n", "1", ",", "-", "1", ",", "\n", "length_ngram", ")", ",", "\n", "f\"filters_y_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filters_y_hist_ep{epoch}.png\"", ")", ")", "\n", "\n", "# make_tiles(to_numpy(model.layer.weight).reshape(len(", "\n", "#     model.layer.weight),", "\n", "#     1, -1,", "\n", "#     length_ngram),", "\n", "#     os.path.join(out_dir, f\"filters_x{epoch}.png\"))", "\n", "\n", "make_tiles", "(", "to_numpy", "(", "amp_x", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"ampx_{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "amp_x", ")", ",", "f\"ampx_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"ampx_hist_ep{epoch}.png\"", ")", ")", "\n", "make_tiles", "(", "to_numpy", "(", "amp_y", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"ampy_{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "amp_y", ")", ",", "f\"ampy_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"ampy_hist_ep{epoch}.png\"", ")", ")", "\n", "\n", "make_tiles", "(", "to_numpy", "(", "phase_x", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"phasex_{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "phase_x", ")", ",", "f\"phasex_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"phasex_hist_ep{epoch}.png\"", ")", ")", "\n", "make_tiles", "(", "to_numpy", "(", "phase_y", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"phasey_{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "phase_y", ")", ",", "f\"phasey_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"phasey_hist_ep{epoch}.png\"", ")", ")", "\n", "\n", "plot_hist", "(", "to_numpy", "(", "x", ".", "data", ")", ",", "f\"input_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"input_hist_ep{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "y", ".", "data", ")", ",", "f\"target_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"target_hist_ep{epoch}.png\"", ")", ")", "\n", "\n", "input_np", "=", "to_numpy", "(", "x", ".", "data", ")", "\n", "make_tiles", "(", "input_np", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ",", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"input_{epoch}.png\"", ")", ")", "\n", "target_np", "=", "to_numpy", "(", "y", ".", "data", ")", "\n", "make_tiles", "(", "target_np", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ",", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"target_{epoch}.png\"", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "loss_curve_train", ")", "\n", "plt", ".", "plot", "(", "loss_curve_eval", ")", "\n", "plt", ".", "savefig", "(", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"loss_curve_{epoch}.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_train_state_1d": [[110, 185], ["model.eval", "complex_auto.util.cuda_variable", "complex_auto.util.cuda_variable", "model", "model", "model.backward", "model.backward", "plotting.plot_audiobatch", "plotting.plot_audiobatch", "plotting.plot_audiobatch", "plotting.plot_audiobatch", "complex_auto.plot.plot_hist", "complex_auto.plot.plot_hist", "complex_auto.plot.make_tiles", "complex_auto.plot.make_tiles", "plotting.plot_audiobatch", "plotting.plot_audiobatch", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.make_tiles", "complex_auto.plot.plot_hist", "complex_auto.plot.plot_hist", "complex_auto.plot.plot_hist", "complex_auto.util.to_numpy", "complex_auto.plot.make_tiles", "complex_auto.util.to_numpy", "complex_auto.plot.make_tiles", "matplotlib.clf", "matplotlib.plot", "matplotlib.plot", "matplotlib.savefig", "recon_y[].detach().cpu", "os.path.join", "recon_x[].detach().cpu", "os.path.join", "y[].detach().cpu", "os.path.join", "x[].detach().cpu", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy().reshape", "os.path.join", "complex_auto.util.to_numpy().reshape", "os.path.join", "model.layer.weight[].detach().cpu", "os.path.join", "model.layer.weight[].detach().cpu", "os.path.join", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy", "os.path.join", "complex_auto.util.to_numpy.reshape", "os.path.join", "complex_auto.util.to_numpy.reshape", "os.path.join", "os.path.join", "len", "len", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "recon_y[].detach", "recon_x[].detach", "y[].detach", "x[].detach", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "model.layer.weight[].detach", "model.layer.weight[].detach"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.None.train.eval", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_audiobatch", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_audiobatch", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_audiobatch", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_audiobatch", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_audiobatch", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_audiobatch", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy"], ["", "def", "plot_train_state_1d", "(", "loss_curve_eval", ",", "loss_curve_train", ",", "model", ",", "x", ",", "y", ",", "\n", "epoch", ",", "out_dir", ",", "length_ngram", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "x", "=", "cuda_variable", "(", "x", ")", "\n", "y", "=", "cuda_variable", "(", "y", ")", "\n", "# calculate mapping of untransposed data", "\n", "amp_x", ",", "phase_x", "=", "model", "(", "x", ")", "\n", "amp_y", ",", "phase_y", "=", "model", "(", "y", ")", "\n", "\n", "recon_y", "=", "model", ".", "backward", "(", "amp_x", ",", "phase_y", ")", "\n", "recon_x", "=", "model", ".", "backward", "(", "amp_y", ",", "phase_x", ")", "\n", "\n", "plot_audiobatch", "(", "recon_y", "[", ":", "20", ",", "None", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"recon_y{epoch}.png\"", ")", ")", "\n", "plot_audiobatch", "(", "recon_x", "[", ":", "20", ",", "None", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"recon_x{epoch}.png\"", ")", ")", "\n", "plot_audiobatch", "(", "y", "[", ":", "20", ",", "None", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"input_y_sig{epoch}.png\"", ")", ")", "\n", "plot_audiobatch", "(", "x", "[", ":", "20", ",", "None", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"input_x_sig{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "recon_x", ")", ",", "f\"recon_x_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"recon_x_hist_ep{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "recon_y", ")", ",", "f\"recon_y_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"recon_y_hist_ep{epoch}.png\"", ")", ")", "\n", "\n", "make_tiles", "(", "to_numpy", "(", "model", ".", "layer", ".", "weight", ")", ".", "reshape", "(", "len", "(", "\n", "model", ".", "layer", ".", "weight", ")", ",", "\n", "1", ",", "-", "1", ",", "\n", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filters_x{epoch}.png\"", ")", ")", "\n", "make_tiles", "(", "to_numpy", "(", "model", ".", "layer", ".", "weight", ")", ".", "reshape", "(", "len", "(", "\n", "model", ".", "layer", ".", "weight", ")", ",", "\n", "1", ",", "-", "1", ",", "\n", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filters_y{epoch}.png\"", ")", ")", "\n", "plot_audiobatch", "(", "model", ".", "layer", ".", "weight", "[", ":", "20", ",", "None", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filters_sig_real{epoch}.png\"", ")", ")", "\n", "half", "=", "model", ".", "layer", ".", "weight", ".", "shape", "[", "0", "]", "//", "2", "\n", "plot_audiobatch", "(", "model", ".", "layer", ".", "weight", "[", "half", ":", "half", "+", "20", ",", "None", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filters_sig_compl{epoch}.png\"", ")", ")", "\n", "\n", "make_tiles", "(", "to_numpy", "(", "amp_x", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"ampx_{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "amp_x", ")", ",", "f\"ampx_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"ampx_hist_ep{epoch}.png\"", ")", ")", "\n", "make_tiles", "(", "to_numpy", "(", "amp_y", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"ampy_{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "amp_y", ")", ",", "f\"ampy_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"ampy_hist_ep{epoch}.png\"", ")", ")", "\n", "\n", "make_tiles", "(", "to_numpy", "(", "phase_x", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"phasex_{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "phase_x", ")", ",", "f\"phasex_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"phasex_hist_ep{epoch}.png\"", ")", ")", "\n", "make_tiles", "(", "to_numpy", "(", "phase_y", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "f\"phasey_{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "phase_y", ")", ",", "f\"phasey_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"phasey_hist_ep{epoch}.png\"", ")", ")", "\n", "\n", "plot_hist", "(", "to_numpy", "(", "x", ".", "data", ")", ",", "f\"input_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"input_hist_ep{epoch}.png\"", ")", ")", "\n", "plot_hist", "(", "to_numpy", "(", "y", ".", "data", ")", ",", "f\"target_hist_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"target_hist_ep{epoch}.png\"", ")", ")", "\n", "\n", "input_np", "=", "to_numpy", "(", "x", ".", "data", ")", "\n", "make_tiles", "(", "input_np", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ",", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"input_{epoch}.png\"", ")", ")", "\n", "target_np", "=", "to_numpy", "(", "y", ".", "data", ")", "\n", "make_tiles", "(", "target_np", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ",", "length_ngram", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"target_{epoch}.png\"", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "loss_curve_train", ")", "\n", "plt", ".", "plot", "(", "loss_curve_eval", ")", "\n", "plt", ".", "savefig", "(", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"loss_curve_{epoch}.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plotting.plot_audiobatch": [[187, 210], ["matplotlib.clf", "int", "math.ceil", "matplotlib.subplots", "range", "matplotlib.savefig", "math.sqrt", "len", "ax[].plot", "audio.squeeze", "len", "len", "torch.arange", "x.numpy", "audio.numpy", "audio.size"], "function", ["None"], ["", "def", "plot_audiobatch", "(", "batch", ":", "torch", ".", "Tensor", ",", "fn", ",", "num_example", ":", "int", "=", "30", ",", "\n", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "# by Stephane Rivaud", "\n", "\n", "    ", "plt", ".", "clf", "(", ")", "\n", "audio_list", "=", "[", "(", "audio", ".", "squeeze", "(", ")", ",", "22050", ")", "for", "audio", "in", "batch", "]", "\n", "\n", "# determine the number of rows and columns", "\n", "ncols", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "audio_list", ")", ")", ")", "\n", "nrows", "=", "math", ".", "ceil", "(", "len", "(", "audio_list", ")", "/", "ncols", ")", "\n", "\n", "# plotting files", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "ncols", "=", "ncols", ",", "nrows", "=", "nrows", ",", "sharex", "=", "True", ",", "sharey", "=", "True", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "audio_list", ")", ")", ":", "\n", "        ", "audio", ",", "sr", "=", "audio_list", "[", "k", "]", "\n", "i", ",", "j", "=", "k", "//", "ncols", ",", "k", "%", "ncols", "\n", "x", "=", "torch", ".", "arange", "(", "audio", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "sr", "\n", "ax", "[", "i", ",", "j", "]", ".", "plot", "(", "x", ".", "numpy", "(", ")", ",", "audio", ".", "numpy", "(", ")", ",", "linewidth", "=", "1", ")", "\n", "#ax[i, j].set_xlabel('Time (s)')", "\n", "#ax[i, j].set_ylabel('Amplitude')", "\n", "#ax[i, j].set_title(f'Sample {k}')", "\n", "#plt.show()", "\n", "", "plt", ".", "savefig", "(", "fn", ")", "\n", "#plt.savefig(fn+\".pdf\")", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.standardize": [[24, 37], ["numpy.std", "numpy.mean"], "function", ["None"], ["def", "standardize", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Performs contrast normalization (zero mean, unit variance)\n    along the given axis.\n\n    :param x: array to normalize\n    :param axis: normalize along that axis\n    :return: contrast-normalized array\n    \"\"\"", "\n", "stds_avg", "=", "np", ".", "std", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "x", "-=", "np", ".", "mean", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "x", "/=", "(", "stds_avg", "+", "1e-8", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.load_audio": [[39, 44], ["print", "librosa.load"], "function", ["None"], ["", "def", "load_audio", "(", "fn", ",", "sr", "=", "-", "1", ")", ":", "\n", "    ", "file", "=", "fn", "\n", "print", "(", "f\"loading file {file}\"", ")", "\n", "audio", ",", "fs", "=", "librosa", ".", "load", "(", "fn", ",", "sr", "=", "sr", ")", "\n", "return", "audio", ",", "fs", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.to_mono": [[46, 50], ["len"], "function", ["None"], ["", "def", "to_mono", "(", "signal", ")", ":", "\n", "    ", "if", "len", "(", "signal", ".", "shape", ")", "==", "1", ":", "\n", "        ", "return", "signal", "\n", "", "return", "signal", "[", ":", ",", "0", "]", "/", "2", "+", "signal", "[", ":", ",", "1", "]", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.get_signal": [[52, 68], ["cqt.load_audio", "cqt.to_mono", "len", "numpy.random.randint", "len", "len"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.load_audio", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.to_mono"], ["", "def", "get_signal", "(", "fn", ",", "use_nr_samples", "=", "-", "1", ",", "rand_midpoint", "=", "False", ",", "sr", "=", "-", "1", ")", ":", "\n", "    ", "audio", ",", "fs", "=", "load_audio", "(", "fn", ",", "sr", ")", "\n", "audio", "=", "to_mono", "(", "audio", ")", "\n", "if", "use_nr_samples", ">", "0", "and", "use_nr_samples", "<", "len", "(", "audio", ")", ":", "\n", "        ", "if", "rand_midpoint", ":", "\n", "            ", "mid_point", "=", "np", ".", "random", ".", "randint", "(", "use_nr_samples", "//", "2", ",", "len", "(", "audio", ")", "-", "1", "-", "\n", "use_nr_samples", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "mid_point", "=", "len", "(", "audio", ")", "//", "2", "\n", "", "audio_snippet", "=", "audio", "[", "\n", "mid_point", "-", "use_nr_samples", "//", "2", ":", "\n", "mid_point", "+", "use_nr_samples", "//", "2", "]", "\n", "", "else", ":", "\n", "        ", "audio_snippet", "=", "audio", "\n", "\n", "", "return", "audio_snippet", ",", "fs", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.to_cqt_repr": [[70, 87], ["cqt.get_signal", "librosa.cqt", "librosa.magphase", "cqt.standardize", "complex_auto.util.normalize"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.get_signal", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.standardize", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.normalize"], ["", "def", "to_cqt_repr", "(", "fn", ",", "n_bins", ",", "bins_per_oct", ",", "fmin", ",", "hop_length", ",", "\n", "use_nr_samples", ",", "rand_midpoint", "=", "False", ",", "standard", "=", "False", ",", "\n", "normal", "=", "False", ",", "mult", "=", "1.", ",", "sr", "=", "-", "1", ")", ":", "\n", "    ", "audio", ",", "sr", "=", "get_signal", "(", "fn", ",", "use_nr_samples", ",", "rand_midpoint", ",", "sr", "=", "sr", ")", "\n", "\n", "cqt", "=", "librosa", ".", "cqt", "(", "audio", ",", "sr", "=", "sr", ",", "n_bins", "=", "n_bins", ",", "\n", "bins_per_octave", "=", "bins_per_oct", ",", "\n", "fmin", "=", "fmin", ",", "hop_length", "=", "hop_length", ")", "\n", "mag", "=", "librosa", ".", "magphase", "(", "cqt", ")", "[", "0", "]", "\n", "\n", "if", "standard", ":", "\n", "        ", "mag", "=", "standardize", "(", "mag", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "normal", ":", "\n", "        ", "mag", "=", "normalize", "(", "mag", ")", "\n", "\n", "", "return", "mag", "*", "mult", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.cqt.get_cqts": [[89, 112], ["complex_auto.util.save_pyc_bz", "complex_auto.util.load_pyc_bz", "os.path.isfile", "functools.partial", "multiprocessing.pool.Pool", "pool.map"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.save_pyc_bz", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.load_pyc_bz"], ["", "def", "get_cqts", "(", "files", ",", "cache_key", "=", "'train'", ",", "rebuild", "=", "False", ",", "use_nr_samples", "=", "-", "1", ",", "\n", "processes", "=", "10", ",", "sr", "=", "-", "1", ",", "args", "=", "None", ")", ":", "\n", "    ", "assert", "args", "is", "not", "None", ",", "\"args are needed.\"", "\n", "cache_fn", "=", "f'{args.cache_dir}/hist_cache_{cache_key}.pyc.bz'", "\n", "cqts", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cache_fn", ")", "or", "rebuild", ":", "\n", "        ", "if", "processes", ">", "1", ":", "\n", "            ", "calc_cqt_f", "=", "partial", "(", "to_cqt_repr", ",", "n_bins", "=", "args", ".", "n_bins", ",", "\n", "bins_per_oct", "=", "args", ".", "bins_per_oct", ",", "\n", "fmin", "=", "args", ".", "fmin", ",", "hop_length", "=", "args", ".", "hop_length", ",", "\n", "use_nr_samples", "=", "use_nr_samples", ",", "\n", "rand_midpoint", "=", "False", ",", "\n", "standard", "=", "True", ",", "\n", "sr", "=", "sr", ",", "mult", "=", "10", ")", "\n", "\n", "with", "Pool", "(", "processes", "=", "processes", ")", "as", "pool", ":", "\n", "                ", "cqts", "=", "pool", ".", "map", "(", "calc_cqt_f", ",", "files", ")", "\n", "\n", "", "", "save_pyc_bz", "(", "cqts", ",", "cache_fn", ")", "\n", "", "else", ":", "\n", "        ", "cqts", "=", "load_pyc_bz", "(", "cache_fn", ")", "\n", "\n", "", "return", "cqts", "\n", "", ""]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.regularize.lee_loss": [[16, 25], ["torch.sum().sum", "torch.sum().sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "lee_loss", "(", "act", ")", ":", "\n", "    ", "\"\"\"\n    Lee sparsity and selectivity regularization on hidden activations\n    :param act: hidden unit activations\n    :return: loss\n    \"\"\"", "\n", "sparsity", "=", "torch", ".", "sum", "(", "(", "act", "**", "2", ")", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", ".", "mean", "(", "0", ")", ")", ".", "sum", "(", ")", "\n", "selectivity", "=", "torch", ".", "sum", "(", "(", "act", "**", "2", ")", ".", "mean", "(", "3", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "0", ")", ")", ".", "sum", "(", ")", "\n", "return", "sparsity", "+", "selectivity", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.regularize.l2_loss": [[27, 34], ["torch.sum"], "function", ["None"], ["", "def", "l2_loss", "(", "weight", ")", ":", "\n", "    ", "\"\"\"\n    L2 weight regularization\n    :param weight: weight to regularize\n    :return: loss\n    \"\"\"", "\n", "return", "torch", ".", "sum", "(", "weight", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.regularize.orthogonality": [[35, 38], ["torch.mean", "torch.matmul", "cuda_tensor", "torch.transpose", "torch.eye"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_tensor"], ["", "def", "orthogonality", "(", "weights", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "weights", ",", "torch", ".", "transpose", "(", "weights", ",", "0", ",", "1", ")", ")", "-", "cuda_tensor", "(", "torch", ".", "eye", "(", "weights", ".", "shape", "[", "0", "]", ")", ")", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.regularize.norm_loss": [[39, 41], ["None"], "function", ["None"], ["", "def", "norm_loss", "(", "x", ")", ":", "\n", "    ", "return", "(", "x", "**", "2", ")", ".", "mean", "(", "1", ")", ".", "sqrt", "(", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.regularize.equal_norm_loss": [[43, 46], ["norm_rows.mean"], "function", ["None"], ["", "def", "equal_norm_loss", "(", "x", ")", ":", "\n", "    ", "norm_rows", "=", "(", "x", "**", "2", ")", ".", "mean", "(", "1", ")", ".", "sqrt", "(", ")", "\n", "return", "(", "(", "norm_rows", "-", "norm_rows", ".", "mean", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.__init__": [[17, 26], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_out", ",", "dropout", "=", ".5", ",", "learn_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "Complex", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer", "=", "nn", ".", "Linear", "(", "n_in", ",", "n_out", "*", "2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "learn_norm", "=", "learn_norm", "\n", "self", ".", "n_out", "=", "n_out", "\n", "self", ".", "norm_val", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", ".43", "]", ")", ")", "# any start value", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.drop_gauss": [[27, 29], ["torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal"], "methods", ["None"], ["", "def", "drop_gauss", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "normal", "(", "mean", "=", "x", ",", "std", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.forward": [[30, 38], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "complex.Complex.drop", "complex.Complex.set_to_norm_graph().transpose", "complex.Complex.set_to_norm_graph"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.set_to_norm_graph"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "torch", ".", "matmul", "(", "self", ".", "drop", "(", "x", ")", ",", "self", ".", "set_to_norm_graph", "(", "\n", "self", ".", "norm_val", ")", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "real", "=", "out", "[", ":", ",", ":", "self", ".", "n_out", "]", "\n", "imag", "=", "out", "[", ":", ",", "self", ".", "n_out", ":", "]", "\n", "amplitudes", "=", "(", "real", "**", "2", "+", "imag", "**", "2", ")", "**", ".5", "\n", "phases", "=", "torch", ".", "atan2", "(", "real", ",", "imag", ")", "\n", "return", "amplitudes", ",", "phases", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.backward": [[39, 45], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "complex.Complex.set_to_norm_graph"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.set_to_norm_graph"], ["", "def", "backward", "(", "self", ",", "amplitudes", ",", "phases", ")", ":", "\n", "        ", "real", "=", "torch", ".", "sin", "(", "phases", ")", "*", "amplitudes", "\n", "imag", "=", "torch", ".", "cos", "(", "phases", ")", "*", "amplitudes", "\n", "cat_", "=", "torch", ".", "cat", "(", "(", "real", ",", "imag", ")", ",", "dim", "=", "1", ")", "\n", "recon", "=", "torch", ".", "matmul", "(", "cat_", ",", "self", ".", "set_to_norm_graph", "(", "self", ".", "norm_val", ")", ")", "\n", "return", "recon", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.set_to_norm": [[46, 61], ["complex.Complex.layer.weight.size", "complex.Complex.layer.weight.view", "complex.Complex.view"], "methods", ["None"], ["", "def", "set_to_norm", "(", "self", ",", "val", ")", ":", "\n", "        ", "\"\"\"\n        Sets the norms of all convolutional kernels of the C-GAE to a specific\n        value.\n\n        :param val: norms of kernels are set to this value\n        \"\"\"", "\n", "if", "val", "==", "-", "1", ":", "\n", "            ", "val", "=", "self", ".", "norm_val", "\n", "", "shape_x", "=", "self", ".", "layer", ".", "weight", ".", "size", "(", ")", "\n", "conv_x_reshape", "=", "self", ".", "layer", ".", "weight", ".", "view", "(", "shape_x", "[", "0", "]", ",", "-", "1", ")", "\n", "norms_x", "=", "(", "(", "conv_x_reshape", "**", "2", ")", ".", "sum", "(", "1", ")", "**", ".5", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "conv_x_reshape", "=", "conv_x_reshape", "/", "norms_x", "\n", "weight_x_new", "=", "(", "conv_x_reshape", ".", "view", "(", "*", "shape_x", ")", "*", "val", ")", ".", "clone", "(", ")", "\n", "self", ".", "layer", ".", "weight", ".", "data", "=", "weight_x_new", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.complex.Complex.set_to_norm_graph": [[62, 79], ["complex.Complex.layer.weight.size", "complex.Complex.layer.weight.view", "complex.Complex.view"], "methods", ["None"], ["", "def", "set_to_norm_graph", "(", "self", ",", "val", ")", ":", "\n", "        ", "if", "not", "self", ".", "learn_norm", ":", "\n", "            ", "return", "self", ".", "layer", ".", "weight", "\n", "", "\"\"\"\n        Sets the norms of all convolutional kernels of the C-GAE to a learned\n        value.\n\n        :param val: norms of kernels are set to this value\n        \"\"\"", "\n", "if", "val", "==", "-", "1", ":", "\n", "            ", "val", "=", "self", ".", "norm_val", "\n", "", "shape_x", "=", "self", ".", "layer", ".", "weight", ".", "size", "(", ")", "\n", "conv_x_reshape", "=", "self", ".", "layer", ".", "weight", ".", "view", "(", "shape_x", "[", "0", "]", ",", "-", "1", ")", "\n", "norms_x", "=", "(", "(", "conv_x_reshape", "**", "2", ")", ".", "sum", "(", "1", ")", "**", ".5", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "conv_x_reshape", "=", "conv_x_reshape", "/", "norms_x", "\n", "weight_x_new", "=", "(", "conv_x_reshape", ".", "view", "(", "*", "shape_x", ")", "*", "val", ")", ".", "clone", "(", ")", "\n", "return", "weight_x_new", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.uniquifier": [[30, 35], ["set", "seen_add"], "function", ["None"], ["def", "uniquifier", "(", "seq", ")", ":", "\n", "# Removes all double entries of seq", "\n", "    ", "seen", "=", "set", "(", ")", "\n", "seen_add", "=", "seen", ".", "add", "\n", "return", "[", "x", "for", "x", "in", "seq", "if", "not", "(", "x", "in", "seen", "or", "seen_add", "(", "x", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_kernels": [[37, 50], ["complex_auto.util.to_numpy", "plot.make_tiles", "complex_auto.util.to_numpy", "plot.make_tiles", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles"], ["", "def", "plot_kernels", "(", "model", ",", "epoch", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    Plots the input weights of the C-GAE\n\n    :param model: a C-GAE instance\n    :param epoch: epoch nr (int)\n    :param out_dir: directory where to save the plot\n    \"\"\"", "\n", "filter_x", "=", "to_numpy", "(", "model", ".", "conv_x", ".", "weight", ")", "\n", "make_tiles", "(", "filter_x", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filtersx_ep{epoch}.png\"", ")", ")", "\n", "\n", "filter_y", "=", "to_numpy", "(", "model", ".", "conv_y", ".", "weight", ")", "\n", "make_tiles", "(", "filter_y", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"filtersy_ep{epoch}.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_recon": [[52, 63], ["complex_auto.util.to_numpy", "plot.make_tiles", "model", "os.path.join", "model.mapping_"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles"], ["", "def", "plot_recon", "(", "model", ",", "x", ",", "y", ",", "epoch", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    Plots the reconstruction of an input batch\n\n    :param model: a C-GAE instance\n    :param batch: the batch to reconstruct\n    :param epoch: epoch nr\n    :param out_dir: directory where to save the plot\n    \"\"\"", "\n", "output", "=", "to_numpy", "(", "model", "(", "model", ".", "mapping_", "(", "x", ",", "y", ")", ",", "y", ")", ")", "\n", "make_tiles", "(", "output", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"recon_ep{epoch}.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_mapping": [[65, 78], ["numpy.transpose", "plot.make_tiles", "complex_auto.util.to_numpy", "os.path.join", "model.mapping_"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy"], ["", "def", "plot_mapping", "(", "model", ",", "x", ",", "y", ",", "epoch", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    Plots the top most mapping layer given an input batch\n\n    :param model: a C-GAE instance\n    :param batch: the batch to reconstruct\n    :param epoch: epoch nr\n    :param out_dir: directory where to save the plot\n    \"\"\"", "\n", "# x = cuda_variable(batch[0][None,:,:,:])", "\n", "# y = cuda_variable(batch[1][None,:,:,:])", "\n", "output", "=", "np", ".", "transpose", "(", "to_numpy", "(", "model", ".", "mapping_", "(", "x", ",", "y", ")", ")", ",", "axes", "=", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "make_tiles", "(", "output", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"mapping_ep{epoch}.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_data": [[80, 89], ["plot.make_tiles", "complex_auto.util.to_numpy", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy"], ["", "def", "plot_data", "(", "data", ",", "epoch", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    Plots input data\n\n    :param data: a data batch to plot\n    :param epoch: epoch nr\n    :param out_dir: directory where to save the plot\n    \"\"\"", "\n", "make_tiles", "(", "to_numpy", "(", "data", ")", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"data_ep{epoch}.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_histograms": [[91, 116], ["plot.plot_hist", "complex_auto.util.to_numpy", "plot.plot_hist", "complex_auto.util.to_numpy", "plot.plot_hist", "complex_auto.util.to_numpy", "plot.plot_hist", "complex_auto.util.to_numpy", "plot.plot_hist", "complex_auto.util.to_numpy", "os.path.join", "model.mapping_", "os.path.join", "model", "os.path.join", "os.path.join", "os.path.join", "model.mapping_"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy"], ["", "def", "plot_histograms", "(", "model", ",", "x", ",", "y", ",", "epoch", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    Plots some histograms\n\n    :param model: a C-GAE instance\n    :param batch: the batch to use for computing histograms\n    :param epoch: epoch nr\n    :param out_dir: directory where to save the histograms\n    \"\"\"", "\n", "plot_hist", "(", "to_numpy", "(", "x", ")", ",", "f\"data_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"hist_data_ep{epoch}.png\"", ")", ")", "\n", "\n", "mapping", "=", "to_numpy", "(", "model", ".", "mapping_", "(", "x", ",", "y", ")", ")", "\n", "plot_hist", "(", "mapping", ",", "f\"mapping_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"hist_map_ep{epoch}.png\"", ")", ")", "\n", "output", "=", "to_numpy", "(", "model", "(", "model", ".", "mapping_", "(", "x", ",", "y", ")", ",", "y", ")", ")", "\n", "plot_hist", "(", "output", ",", "f\"recon_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"hist_recon_ep{epoch}.png\"", ")", ")", "\n", "\n", "weight_x", "=", "to_numpy", "(", "model", ".", "conv_x", ".", "weight", ")", "\n", "plot_hist", "(", "weight_x", ",", "f\"weightx_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"hist_weightx_ep{epoch}.png\"", ")", ")", "\n", "weight_y", "=", "to_numpy", "(", "model", ".", "conv_y", ".", "weight", ")", "\n", "plot_hist", "(", "weight_y", ",", "f\"weighty_ep{epoch}\"", ",", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"hist_weighty_ep{epoch}.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_colormap": [[121, 130], ["matplotlib.imshow", "matplotlib.title", "matplotlib.savefig", "matplotlib.close"], "function", ["None"], ["def", "plot_colormap", "(", "values", ",", "title", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Save a colormap of values titled with title in file filename.\n    \"\"\"", "\n", "# LOGGER.debug(\"img_size self-sim: {0}\".format(values.shape))", "\n", "plt", ".", "imshow", "(", "values", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tiles": [[132, 177], ["len", "max", "int", "numpy.zeros", "enumerate", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "plot.make_tile", "len", "min", "numpy.ceil", "int", "float"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tile"], ["", "def", "make_tiles", "(", "tiles_in_parts", ",", "out_file", ",", "\n", "vp_separator_color", "=", "(", "100", ",", "150", ",", "100", ")", ",", "\n", "tile_separator_color", "=", "(", "25", ",", "75", ",", "25", ")", ",", "\n", "unit", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Plots tiles in a grid (performs a normalization!).\n    Useful for plotting the weights of a neural network or data instances.\n\n    :param tiles_in_parts: tiles to plot\n    :param out_file: output filename\n    \"\"\"", "\n", "tiles", "=", "[", "make_tile", "(", "tile_parts", ",", "vp_separator_color", ",", "unit", ")", "for", "tile_parts", "in", "\n", "tiles_in_parts", "]", "\n", "\n", "assert", "len", "(", "tiles", ")", ">", "0", "\n", "tile_height", ",", "tile_width", ",", "_", "=", "tiles", "[", "0", "]", ".", "shape", "\n", "\n", "n_tiles", "=", "len", "(", "tiles", ")", "\n", "n_tiles_horz", "=", "max", "(", "1", ",", "min", "(", "n_tiles", ",", "int", "(", "\n", "(", "(", "tile_height", "*", "n_tiles", ")", "/", "tile_width", ")", "**", ".5", ")", ")", ")", "\n", "n_tiles_vert", "=", "int", "(", "np", ".", "ceil", "(", "n_tiles", "/", "float", "(", "n_tiles_horz", ")", ")", ")", "\n", "\n", "pane", "=", "np", ".", "zeros", "(", "(", "(", "n_tiles_vert", "*", "(", "tile_height", "+", "1", ")", ")", "-", "1", ",", "\n", "(", "n_tiles_horz", "*", "(", "tile_width", "+", "1", ")", ")", "-", "1", ",", "\n", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "offset_horz", "=", "0", "\n", "offset_vert", "=", "0", "\n", "\n", "for", "i", ",", "tile", "in", "enumerate", "(", "tiles", ")", ":", "\n", "        ", "if", "i", "%", "n_tiles_horz", "==", "0", "and", "n_tiles_vert", ">", "1", ":", "\n", "            ", "pane", "[", "offset_vert", "+", "tile_height", ",", ":", ",", ":", "]", "=", "tile_separator_color", "\n", "if", "i", ">", "0", ":", "\n", "                ", "offset_horz", "=", "0", "\n", "offset_vert", "+=", "tile_height", "+", "1", "\n", "\n", "", "", "pane", "[", "offset_vert", ":", "offset_vert", "+", "tile_height", ",", "\n", "offset_horz", ":", "offset_horz", "+", "tile_width", ",", ":", "]", "=", "tile", "\n", "offset_horz", "+=", "tile_width", "+", "1", "\n", "if", "offset_horz", "-", "1", "<", "pane", ".", "shape", "[", "1", "]", ":", "\n", "            ", "pane", "[", ":", ",", "offset_horz", "-", "1", ",", ":", "]", "=", "tile_separator_color", "\n", "\n", "", "", "filt_img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "pane", ",", "mode", "=", "\"RGB\"", ")", "\n", "filt_img", ".", "save", "(", "out_file", ")", "\n", "return", "pane", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.make_tile": [[179, 239], ["numpy.array", "numpy.masked_array", "numpy.round().astype", "np.round().astype.reshape().repeat", "tile.reshape().repeat.transpose", "numpy.std", "numpy.empty", "numpy.sum", "len", "numpy.round", "np.round().astype.reshape", "plot.scale_to_unit_interval", "list"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.scale_to_unit_interval"], ["", "def", "make_tile", "(", "tile_parts", ",", "vp_separator_color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "unit", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    This function could do a simple hstack, if it weren't for the\n    separation lines that we want between viewpoints. Furthermore,\n    we need to rescale the values of the viewpoints jointly, but do\n    not want the separation lines to interfere with the\n    rescaling. Therefore, we use a masked array.\n\n    NOTE: the tile is transposed after it is constructed. This means\n    that with respect to the plots displaying the tiles, the meaning\n    of width and height in this function are swapped\n    \"\"\"", "\n", "\n", "# compute shape of tile, including separation lines", "\n", "shapes", "=", "np", ".", "array", "(", "[", "x", ".", "shape", "for", "x", "in", "tile_parts", "]", ",", "np", ".", "int", ")", "\n", "# assume the viewpoints have all the same size in the first", "\n", "# dimension (the ngram size)", "\n", "assert", "np", ".", "std", "(", "shapes", "[", ":", ",", "0", "]", ")", "==", "0", "\n", "\n", "# tile_height equals the ngram size", "\n", "tile_height", "=", "shapes", "[", "0", ",", "0", "]", "\n", "# tile_width equals the sum of the viewpoint sizes plus (nr of", "\n", "# viewpoints) - 1 for the viewpoint seperation lines", "\n", "\n", "tile_width", "=", "np", ".", "sum", "(", "shapes", "[", ":", ",", "1", "]", ")", "+", "len", "(", "tile_parts", ")", "-", "1", "\n", "\n", "# create an empty masked array the size of the tile (data and mask", "\n", "# will be set)", "\n", "tile", "=", "ma", ".", "masked_array", "(", "np", ".", "empty", "(", "(", "tile_height", ",", "tile_width", ")", ")", ")", "\n", "\n", "# copy the viewpoint data to their respective locations in the", "\n", "# tile, set a mask on the line after each viewpoint (except the", "\n", "# last)", "\n", "offset", "=", "0", "\n", "for", "part", "in", "tile_parts", ":", "\n", "\n", "# assign viewpoint data", "\n", "        ", "tile", "[", ":", ",", "offset", ":", "offset", "+", "part", ".", "shape", "[", "1", "]", "]", "=", "part", "\n", "offset", "+=", "part", ".", "shape", "[", "1", "]", "+", "1", "\n", "\n", "# we are not at the last part", "\n", "if", "offset", "<", "tile_width", ":", "\n", "# set mask", "\n", "            ", "tile", "[", ":", ",", "offset", "-", "1", "]", "=", "ma", ".", "masked", "\n", "\n", "# scale the values to 0-255, round, and convert to uint8", "\n", "", "", "tile", "=", "np", ".", "round", "(", "scale_to_unit_interval", "(", "tile", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# duplicate tile for RGB data", "\n", "tr", "=", "tile", ".", "reshape", "(", "list", "(", "tile", ".", "shape", ")", "+", "[", "1", "]", ")", ".", "repeat", "(", "3", ",", "axis", "=", "2", ")", "\n", "\n", "offset", "=", "0", "\n", "# set the separation lines between the viewpoints (overrides", "\n", "# the mask)", "\n", "for", "part", "in", "tile_parts", ":", "\n", "        ", "offset", "+=", "part", ".", "shape", "[", "1", "]", "+", "1", "\n", "if", "offset", "<", "tile_width", ":", "\n", "            ", "tr", "[", ":", ",", "offset", "-", "1", ",", ":", "]", "=", "vp_separator_color", "\n", "\n", "", "", "return", "tr", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.scale_to_unit_interval": [[241, 250], ["ndar.copy.copy", "numpy.max", "numpy.abs().max", "numpy.abs"], "function", ["None"], ["", "def", "scale_to_unit_interval", "(", "ndar", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "\"\"\"\n    Scales all values in the ndarray ndar to be between 0 and 1\n    \"\"\"", "\n", "ndar", "=", "ndar", ".", "copy", "(", ")", "\n", "max_val", "=", "np", ".", "max", "(", "(", "np", ".", "abs", "(", "ndar", ")", ".", "max", "(", ")", ",", "1e-4", ")", ")", "\n", "ndar", "/=", "(", "2", "*", "max_val", "+", "eps", ")", "\n", "ndar", "+=", "0.5", "\n", "return", "ndar", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_hist": [[252, 263], ["matplotlib.clf", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "matplotlib.close", "values.flatten"], "function", ["None"], ["", "def", "plot_hist", "(", "values", ",", "title", ",", "filename", ",", "bins", "=", "50", ")", ":", "\n", "    ", "\"\"\"\n    Save a histogram of values titled with title in file filename.\n    \"\"\"", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "hist", "(", "values", ".", "flatten", "(", ")", ",", "bins", "=", "bins", ")", "\n", "plt", ".", "xlabel", "(", "'Value'", ")", "\n", "plt", ".", "ylabel", "(", "'Amount'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_curve": [[265, 274], ["matplotlib.clf", "matplotlib.plot", "matplotlib.title", "matplotlib.savefig", "matplotlib.close"], "function", ["None"], ["", "def", "plot_curve", "(", "curve", ",", "title", ",", "fn", ")", ":", "\n", "    ", "'''\n    Save a plot of a function (curve).\n    '''", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "curve", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "fn", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.plot_fs_2d": [[276, 386], ["numpy.array", "matplotlib.figure", "plt.figure.gca", "iter", "len", "matplotlib.interactive", "matplotlib.get_cmap", "matplotlib.get_cmap", "numpy.array", "plot.uniquifier", "plot.plot_fs_2d.color_iterator"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.plot.uniquifier"], ["", "def", "plot_fs_2d", "(", "data_set", ",", "labels", "=", "None", ",", "tooltip", "=", "None", ",", "size", "=", "(", "10", ",", "10", ")", ",", "\n", "save_fn", "=", "None", ",", "\n", "interactive", "=", "False", ",", "cmap", "=", "None", ",", "show_centroids", "=", "True", ",", "\n", "label_centroids", "=", "True", ",", "style_data", "=", "'x'", ",", "style_centroid", "=", "'o'", ",", "\n", "color_dict", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Plot a given dataset and utilizes labels.\n    Plots a given 2d dataset and uses different colors for datapoints belonging\n    to different labels.\n    Displays a centroid for each label cluster and names it with the label string.\n\n    Parameters\n    ----------\n\n    data_set: array-like\n        2D matrix of size M x N which is to be points\n\n    labels: array-like, optional\n        1D array of size M, preferrable of dtype string\n\n    tooltip: array-like, optional\n        1D array of size M, used as tooltip annotation for points\n\n    size: tuple, optional\n        The size of the plot\n\n    save_fn: string, optional\n        If not None, a file will be saved to that path\n\n    cmap: matplotlib.cm, optional\n        Colormap which will be used for plotting datapoints of each label in\n        a different color\n\n    show_centroids: boolean, optional\n        Determines if centroids should be points\n\n    label_centroids: boolean, optional\n        Determines if centroids should be labelled\n\n    Returns\n    -------\n\n    figure\n        The figure. Use figure.save()\n\n    \"\"\"", "\n", "\n", "def", "color_iterator", "(", "cmap", ",", "n", ")", ":", "\n", "        ", "return", "iter", "(", "cmap", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "n", ")", ")", ")", "\n", "\n", "", "assert", "len", "(", "data_set", "[", "0", "]", ")", "==", "2", "# Input matrix has to be 2d.", "\n", "\n", "if", "interactive", ":", "\n", "        ", "plt", ".", "interactive", "(", "True", ")", "\n", "\n", "", "if", "cmap", "==", "None", ":", "\n", "        ", "cmap", "=", "plt", ".", "get_cmap", "(", "\"Paired\"", ")", "\n", "", "else", ":", "\n", "        ", "cmap", "=", "plt", ".", "get_cmap", "(", "cmap", ")", "\n", "\n", "", "data_set", "=", "np", ".", "array", "(", "data_set", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "size", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "points", "=", "None", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "labels_single", "=", "uniquifier", "(", "labels", ")", "\n", "colors", "=", "color_iterator", "(", "cmap", ",", "len", "(", "labels_single", ")", ")", "\n", "\n", "for", "label", "in", "labels_single", ":", "\n", "            ", "col", "=", "next", "(", "colors", ")", "if", "color_dict", "is", "None", "else", "color_dict", "[", "label", "]", "\n", "data_xy", "=", "(", "data_set", "[", "labels", "==", "label", ",", "0", "]", ",", "data_set", "[", "labels", "==", "label", ",", "1", "]", ")", "\n", "points", "=", "ax", ".", "plot", "(", "data_xy", "[", "0", "]", ",", "data_xy", "[", "1", "]", ",", "style_data", ",", "color", "=", "col", ",", "markersize", "=", "2", ")", "\n", "\n", "", "colors", "=", "color_iterator", "(", "cmap", ",", "len", "(", "labels_single", ")", ")", "\n", "if", "show_centroids", ":", "\n", "            ", "for", "label", "in", "labels_single", ":", "\n", "                ", "col", "=", "next", "(", "colors", ")", "if", "color_dict", "is", "None", "else", "color_dict", "[", "label", "]", "\n", "mean_xy", "=", "(", "np", ".", "mean", "(", "data_set", "[", "labels", "==", "label", ",", "0", "]", ")", ",", "\n", "np", ".", "mean", "(", "data_set", "[", "labels", "==", "label", ",", "1", "]", ")", ")", "\n", "ax", ".", "plot", "(", "mean_xy", "[", "0", "]", ",", "mean_xy", "[", "1", "]", ",", "style_centroid", ",", "color", "=", "col", ")", "\n", "bbox_props", "=", "dict", "(", "boxstyle", "=", "\"round,pad=0.3\"", ",", "fc", "=", "col", ",", "ec", "=", "\"grey\"", ",", "\n", "lw", "=", "1", ",", "alpha", "=", "0.9", ")", "\n", "if", "label_centroids", ":", "\n", "                    ", "plt", ".", "annotate", "(", "label", ",", "xy", "=", "mean_xy", ",", "xytext", "=", "(", "-", "15", ",", "7", ")", ",", "\n", "textcoords", "=", "'offset points'", ",", "bbox", "=", "bbox_props", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "col", "=", "cmap", "(", "0", ")", "\n", "points", "=", "ax", ".", "plot", "(", "data_set", "[", ":", ",", "0", "]", ",", "data_set", "[", ":", ",", "1", "]", ",", "style_data", ",", "color", "=", "col", ")", "\n", "\n", "", "if", "save_fn", "is", "not", "None", ":", "\n", "        ", "LOGGER", ".", "debug", "(", "'Saving 2D feature space projection to {0}'", ".", "format", "(", "save_fn", ")", ")", "\n", "plt", ".", "savefig", "(", "save_fn", ")", "\n", "\n", "", "if", "interactive", ":", "\n", "        ", "raise", "Exception", "(", "\"Interactive plot deactivated (no libs installed)\"", ")", "\n", "desc", "=", "[", "unicode", "(", "l", ",", "'utf-8'", ")", "for", "l", "in", "tooltip", "]", "\n", "tooltip", "=", "mpld3", ".", "plugins", ".", "PointHTMLTooltip", "(", "points", "[", "0", "]", ",", "desc", ")", "\n", "mpld3", ".", "plugins", ".", "connect", "(", "fig", ",", "tooltip", ")", "\n", "mpld3", ".", "show", "(", ")", "\n", "\n", "# while not plt.waitforbuttonpress(timeout=-1):", "\n", "#     pass", "\n", "\n", "", "if", "interactive", ":", "\n", "        ", "plt", ".", "interactive", "(", "False", ")", "\n", "\n", "", "return", "fig", "", "", ""]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.__init__": [[45, 51], ["sklearn.decomposition.PCA", "transform.rPCA.rPCA.fit"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_set", ",", "M", "=", "2", ")", ":", "\n", "        ", "self", ".", "data_set", "=", "data_set", "\n", "self", ".", "dimensionality", "=", "M", "\n", "self", ".", "rPCA", "=", "PCA", "(", "n_components", "=", "M", ",", "svd_solver", "=", "'randomized'", ")", "\n", "self", ".", "rPCA", ".", "n_components", "\n", "self", ".", "rPCA", ".", "fit", "(", "data_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.pca_eigvec": [[52, 62], ["None"], "methods", ["None"], ["", "def", "pca_eigvec", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Principal components\n\n        Returns\n        -------\n        components: numpy array\n            M Principal components\n        \"\"\"", "\n", "return", "self", ".", "rPCA", ".", "components_", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.pca_expvar": [[63, 74], ["None"], "methods", ["None"], ["", "def", "pca_expvar", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Percentage of variance explained by each component\n\n        Returns\n        -------\n\n        expvar: numpy array\n            Explained variance\n        \"\"\"", "\n", "return", "self", ".", "rPCA", ".", "explained_variance_ratio_", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.pca_transform": [[75, 86], ["transform.rPCA.rPCA.transform"], "methods", ["None"], ["", "def", "pca_transform", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Project the data in the M dimensional space\n\n        Returns\n        -------\n        transform: numpy array\n            Transformed data\n\n        \"\"\"", "\n", "return", "self", ".", "rPCA", ".", "transform", "(", "self", ".", "data_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.x_mean": [[87, 103], ["numpy.shape", "numpy.array", "numpy.arange", "numpy.append", "numpy.mean"], "methods", ["None"], ["", "def", "x_mean", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Mean vector of the observed data\n\n        Returns\n        -------\n\n        x_bar: numpy_array\n            The mean vector of the observed data\n        \"\"\"", "\n", "N", ",", "D", "=", "np", ".", "shape", "(", "self", ".", "data_set", ")", "\n", "x_bar", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "oo", "in", "np", ".", "arange", "(", "0", ",", "D", ")", ":", "\n", "            ", "x_bar", "=", "np", ".", "append", "(", "x_bar", ",", "np", ".", "mean", "(", "self", ".", "data_set", "[", ":", ",", "oo", "]", ")", ")", "\n", "\n", "", "return", "x_bar", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.pca_coeffs": [[104, 132], ["numpy.array", "transform.rPCA.pca_eigvec", "numpy.arange", "numpy.matrix", "numpy.matrix", "numpy.append", "transform.rPCA.x_mean", "numpy.matrix"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.pca_eigvec", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.transform.rPCA.x_mean"], ["", "def", "pca_coeffs", "(", "self", ",", "x_vector", ")", ":", "\n", "        ", "\"\"\"\n        Transformation of an observation vector in the M principal components\n\n        Parameters\n        ----------\n        x_vector: array _like\n            Input vector of the same dimension as the data_set\n\n        Returns\n        -------\n\n        x_tilde: numpy array\n            Transformed vector\n\n        \"\"\"", "\n", "# Vectors as column vectors", "\n", "x", "=", "np", ".", "matrix", "(", "x_vector", ")", ".", "T", "\n", "x_bar", "=", "np", ".", "matrix", "(", "self", ".", "x_mean", "(", ")", ")", ".", "T", "\n", "x_tilde", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "u_vec", "=", "self", ".", "pca_eigvec", "(", ")", "\n", "\n", "for", "oo", "in", "np", ".", "arange", "(", "0", ",", "self", ".", "dimensionality", ")", ":", "\n", "            ", "u_tmp", "=", "np", ".", "matrix", "(", "u_vec", "[", "oo", ",", ":", "]", ")", ".", "T", "\n", "tmp", "=", "x", ".", "T", "*", "u_tmp", "-", "x_bar", ".", "T", "*", "u_tmp", "\n", "x_tilde", "=", "np", ".", "append", "(", "x_tilde", ",", "tmp", ")", "\n", "\n", "", "return", "x_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Data.__init__": [[37, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_x", ",", "data_y", ",", "standardize", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_x", "=", "data_x", "\n", "self", ".", "data_y", "=", "data_y", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Data.__getitem__": [[41, 45], ["dataloader.standardize_", "dataloader.standardize_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.standardize_", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.standardize_"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "[", "standardize_", "(", "torch", ".", "FloatTensor", "(", "self", ".", "data_x", "[", "index", "]", ")", ")", ",", "\n", "standardize_", "(", "torch", ".", "FloatTensor", "(", "self", ".", "data_y", "[", "index", "]", ")", ")", ",", "\n", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Data.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.__init__": [[51, 84], ["dataloader.DataSampler.check_lengths"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.check_lengths"], ["    ", "def", "__init__", "(", "self", ",", "data_x", ",", "length_ngram", ",", "samples_epoch", ",", "standard", "=", "True", ",", "\n", "shifts", "=", "[", "24", ",", "24", "]", ",", "scales", "=", "[", "1.", ",", "0", "]", ",", "shuffle", "=", "True", ",", "\n", "transform", "=", "(", "0", ",", "1", ",", "2", ")", ",", "emph_onset", "=", "0", ",", "random_pairs", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Returns random ngrams from data, can shift and scale data in two\n        dimensions\n\n        :param data_x: data (2d)\n        :param length_ngram: length of sampled ngrams\n        :param samples_epoch: number of samples per epoch\n        :param standard: if instances should be standardized\n        :param shifts: 2-tuple, maximal random shifts in two dimensions\n        :param scales: 2-tuple, maximal random scaling in two dimensions\n        :param shuffle: instances are returned in random order\n        :param transform: iterable; which transforms should be applied.\n                            pitch_shift (0), time shift (1), tempo-change (2)\n        :param emph_onset: onsets are emphasized\n        :param random_pairs: a pair is sampled using two random (unrelated)\n        instances\n        \"\"\"", "\n", "self", ".", "data_x", "=", "data_x", "\n", "self", ".", "length_ngram", "=", "length_ngram", "\n", "self", ".", "samples_epoch", "=", "samples_epoch", "\n", "self", ".", "standard", "=", "standard", "\n", "self", ".", "max_x", "=", "shifts", "[", "0", "]", "\n", "self", ".", "max_y", "=", "shifts", "[", "1", "]", "\n", "self", ".", "scale_x", "=", "scales", "[", "0", "]", "\n", "self", ".", "scale_y", "=", "scales", "[", "1", "]", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "emph_onset", "=", "emph_onset", "\n", "self", ".", "random_pairs", "=", "random_pairs", "\n", "self", ".", "check_lengths", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.check_lengths": [[85, 96], ["enumerate", "print", "delete.append", "enumerate"], "methods", ["None"], ["", "def", "check_lengths", "(", "self", ")", ":", "\n", "        ", "delete", "=", "[", "]", "\n", "for", "i", ",", "song", "in", "enumerate", "(", "self", ".", "data_x", ")", ":", "\n", "            ", "max_", "=", "song", ".", "shape", "[", "1", "]", "-", "self", ".", "length_ngram", "-", "self", ".", "max_x", "\n", "if", "not", "self", ".", "max_x", "<", "max_", ":", "\n", "                ", "print", "(", "f\"Warning: Song number {i} is too short to be used \"", "\n", "f\"with ngram length {self.length_ngram} and maximal \"", "\n", "f\"time shift of {self.max_x} (will be ignored)!\"", ")", "\n", "delete", ".", "append", "(", "i", ")", "\n", "", "", "self", ".", "data_x", "=", "[", "i", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "data_x", ")", "if", "j", "not", "in", "\n", "delete", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.__len__": [[97, 101], ["dataloader.DataSampler.get_ngram_count"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.get_ngram_count"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "shuffle", ":", "\n", "            ", "return", "self", ".", "get_ngram_count", "(", ")", "\n", "", "return", "self", ".", "samples_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.__getitem__": [[102, 182], ["[].copy.min", "numpy.diff", "numpy.diff", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "numpy.random.randint", "numpy.random.choice", "[].copy.max", "[].copy.max", "dataloader.DataSampler.trans_time_shift", "dataloader.DataSampler.trans_pitch_shift", "dataloader.DataSampler.trans_speed_change", "complex_auto.util.to_numpy", "complex_auto.util.to_numpy", "numpy.concatenate", "numpy.concatenate", "dataloader.DataSampler.standardize", "dataloader.DataSampler.standardize", "numpy.random.randint", "dataloader.DataSampler.get_pairs_same_song", "dataloader.DataSampler.get_ngram_by_idx", "[].copy", "dataloader.DataSampler.get_random_ngram", "[].copy", "dataloader.DataSampler.get_ngram_by_idx", "[].copy", "numpy.random.randint", "str", "numpy.random.randint", "str", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.trans_time_shift", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.trans_pitch_shift", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.trans_speed_change", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.standardize", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.standardize", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.get_pairs_same_song", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.get_ngram_by_idx", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.get_random_ngram", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.get_ngram_by_idx"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Transform: pitch_shift (0), time shift (1), tempo-change (2)", "\n", "        ", "if", "self", ".", "transform", "is", "None", ":", "\n", "# random transform", "\n", "            ", "transform", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "transform", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "transform", ")", "\n", "\n", "", "if", "self", ".", "random_pairs", ":", "\n", "# song_id, start, end = self.get_random_ngram()", "\n", "# ngram = self.data_x[song_id][:, start:end].copy()", "\n", "# song_id, start, end = self.get_random_ngram()", "\n", "# ngram_trans = self.data_x[song_id][:, start:end].copy()", "\n", "            ", "if", "np", ".", "random", ".", "randint", "(", "2", ")", "==", "0", ":", "\n", "                ", "[", "ngram", ",", "ngram_trans", "]", ",", "song_id", "=", "self", ".", "get_pairs_same_song", "(", ")", "\n", "label", "=", "-", "1", "\n", "transform", "=", "-", "1", "# skips transformation codes", "\n", "", "else", ":", "\n", "                ", "song_id", ",", "start", ",", "end", "=", "self", ".", "get_ngram_by_idx", "(", "index", ")", "\n", "ngram", "=", "self", ".", "data_x", "[", "song_id", "]", "[", ":", ",", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "", "", "elif", "self", ".", "shuffle", ":", "\n", "            ", "song_id", ",", "start", ",", "end", "=", "self", ".", "get_random_ngram", "(", ")", "\n", "ngram", "=", "self", ".", "data_x", "[", "song_id", "]", "[", ":", ",", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "song_id", ",", "start", ",", "end", "=", "self", ".", "get_ngram_by_idx", "(", "index", ")", "\n", "ngram", "=", "self", ".", "data_x", "[", "song_id", "]", "[", ":", ",", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "\n", "# Normalization needed for PIL image processing (scale)", "\n", "", "ngram", "-=", "ngram", ".", "min", "(", ")", "\n", "if", "ngram", ".", "max", "(", ")", ">", "1e-6", ":", "\n", "            ", "ngram", "/=", "ngram", ".", "max", "(", ")", "\n", "\n", "", "assert", "ngram", ".", "shape", "[", "1", "]", "!=", "0", ",", "f\"{start}, {end},\"", "f\"{self.data_x[song_id].shape[1]}, \"", "f\"{self.max_x}\"", "\n", "\n", "if", "transform", "==", "1", ":", "\n", "            ", "if", "self", ".", "max_x", "==", "0", ":", "\n", "                ", "shiftx", "=", "0", "\n", "", "else", ":", "\n", "                ", "shiftx", "=", "np", ".", "random", ".", "randint", "(", "-", "self", ".", "max_x", ",", "self", ".", "max_x", ")", "\n", "\n", "", "ngram_trans", "=", "self", ".", "trans_time_shift", "(", "end", ",", "song_id", ",", "start", ",", "\n", "shiftx", ")", "\n", "label", "=", "\"shiftx\"", "+", "str", "(", "shiftx", ")", "\n", "\n", "", "if", "transform", "==", "0", ":", "\n", "            ", "if", "self", ".", "max_y", "==", "0", ":", "\n", "                ", "shifty", "=", "0", "\n", "", "else", ":", "\n", "                ", "shifty", "=", "np", ".", "random", ".", "randint", "(", "-", "self", ".", "max_y", ",", "self", ".", "max_y", ")", "\n", "", "ngram_trans", "=", "self", ".", "trans_pitch_shift", "(", "ngram", ",", "shifty", ")", "\n", "label", "=", "\"shifty\"", "+", "str", "(", "shifty", ")", "\n", "\n", "", "if", "transform", "==", "2", ":", "\n", "            ", "scale_x", "=", "1", "+", "self", ".", "scale_x", "*", "np", ".", "random", ".", "rand", "(", ")", "\n", "ngram", ",", "ngram_trans", ",", "minus", "=", "self", ".", "trans_speed_change", "(", "ngram", ",", "scale_x", ")", "\n", "label", "=", "scale_x", "if", "not", "minus", "else", "-", "scale_x", "\n", "label", "=", "\"scale\"", "+", "str", "(", "label", ")", "\n", "ngram", "=", "to_numpy", "(", "ngram", ")", "\n", "ngram_trans", "=", "to_numpy", "(", "ngram_trans", ")", "\n", "\n", "", "ngram_onset", "=", "np", ".", "diff", "(", "np", ".", "concatenate", "(", "(", "ngram", "[", ":", ",", "0", ":", "1", "]", ",", "ngram", ")", ",", "axis", "=", "1", ")", ",", "\n", "axis", "=", "1", ")", "\n", "ngram_trans_onset", "=", "np", ".", "diff", "(", "np", ".", "concatenate", "(", "(", "ngram_trans", "[", ":", ",", "0", ":", "1", "]", ",", "\n", "ngram_trans", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "ngram_onset", "[", "ngram_onset", "<", "0", "]", "=", "0", "\n", "ngram_trans_onset", "[", "ngram_trans_onset", "<", "0", "]", "=", "0", "\n", "\n", "ngram", "=", "ngram", "+", "ngram_onset", "*", "self", ".", "emph_onset", "\n", "ngram_trans", "=", "ngram_trans", "+", "ngram_trans_onset", "*", "self", ".", "emph_onset", "\n", "\n", "if", "self", ".", "standard", ":", "\n", "            ", "ngram", "=", "self", ".", "standardize", "(", "ngram", ")", "\n", "ngram_trans", "=", "self", ".", "standardize", "(", "ngram_trans", ")", "\n", "\n", "", "ngram", "=", "torch", ".", "FloatTensor", "(", "ngram", ")", ".", "view", "(", "-", "1", ")", "\n", "ngram_trans", "=", "torch", ".", "FloatTensor", "(", "ngram_trans", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "return", "ngram", "+", "1e-8", ",", "ngram_trans", "+", "1e-8", ",", "transform", ",", "song_id", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.get_ngram_count": [[183, 192], ["len", "range"], "methods", ["None"], ["", "def", "get_ngram_count", "(", "self", ")", ":", "\n", "        ", "count", "=", "0", "\n", "count_data", "=", "len", "(", "self", ".", "data_x", ")", "\n", "for", "i", "in", "range", "(", "count_data", ")", ":", "\n", "            ", "len_data", "=", "self", ".", "data_x", "[", "i", "]", ".", "shape", "[", "1", "]", "\n", "startmin", "=", "2", "*", "self", ".", "max_x", "\n", "startmax", "=", "len_data", "-", "self", ".", "length_ngram", "-", "2", "*", "self", ".", "max_x", "\n", "count", "+=", "startmax", "-", "startmin", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.get_ngram_by_idx": [[193, 208], ["len", "range"], "methods", ["None"], ["", "def", "get_ngram_by_idx", "(", "self", ",", "index", ")", ":", "\n", "        ", "count", "=", "0", "\n", "count_data", "=", "len", "(", "self", ".", "data_x", ")", "\n", "for", "i", "in", "range", "(", "count_data", ")", ":", "\n", "            ", "len_data", "=", "self", ".", "data_x", "[", "i", "]", ".", "shape", "[", "1", "]", "\n", "startmin", "=", "2", "*", "self", ".", "max_x", "\n", "startmax", "=", "len_data", "-", "self", ".", "length_ngram", "-", "2", "*", "self", ".", "max_x", "\n", "if", "index", ">=", "count", "and", "index", "+", "startmin", "<", "count", "+", "startmax", ":", "\n", "                ", "song_id", "=", "i", "\n", "start", "=", "index", "-", "count", "+", "startmin", "\n", "break", "\n", "", "count", "+=", "startmax", "-", "startmin", "\n", "\n", "", "end", "=", "start", "+", "self", ".", "length_ngram", "\n", "return", "song_id", ",", "start", ",", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.get_random_ngram": [[209, 217], ["len", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "get_random_ngram", "(", "self", ")", ":", "\n", "        ", "count_data", "=", "len", "(", "self", ".", "data_x", ")", "\n", "song_id", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "count_data", ")", "\n", "len_data", "=", "self", ".", "data_x", "[", "song_id", "]", ".", "shape", "[", "1", "]", "\n", "start", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "max_x", ",", "\n", "len_data", "-", "self", ".", "length_ngram", "-", "self", ".", "max_x", ")", "\n", "end", "=", "start", "+", "self", ".", "length_ngram", "\n", "return", "song_id", ",", "start", ",", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.get_pairs_same_song": [[218, 231], ["len", "numpy.random.randint", "range", "numpy.random.randint", "[].copy", "pairs.append"], "methods", ["None"], ["", "def", "get_pairs_same_song", "(", "self", ")", ":", "\n", "        ", "count_data", "=", "len", "(", "self", ".", "data_x", ")", "\n", "song_id", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "count_data", ")", "\n", "len_data", "=", "self", ".", "data_x", "[", "song_id", "]", ".", "shape", "[", "1", "]", "\n", "pairs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "start", "=", "np", ".", "random", ".", "randint", "(", "2", "*", "self", ".", "max_x", ",", "\n", "len_data", "-", "self", ".", "length_ngram", "-", "2", "*", "self", ".", "max_x", ")", "\n", "end", "=", "start", "+", "self", ".", "length_ngram", "\n", "ngram", "=", "self", ".", "data_x", "[", "song_id", "]", "[", ":", ",", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "pairs", ".", "append", "(", "ngram", ")", "\n", "\n", "", "return", "pairs", ",", "song_id", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.trans_speed_change": [[232, 254], ["int", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "numpy.random.randint", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "trans_speed_change", "(", "self", ",", "ngram", ",", "scale_x", ")", ":", "\n", "        ", "size1", "=", "ngram", ".", "shape", "[", "1", "]", "\n", "size0", "=", "ngram", ".", "shape", "[", "0", "]", "\n", "new_size_t_x", "=", "int", "(", "scale_x", "*", "size1", ")", "\n", "new_size_t_y", "=", "ngram", ".", "shape", "[", "0", "]", "\n", "transform_out", "=", "Compose", "(", "[", "\n", "ToPILImage", "(", ")", ",", "\n", "Resize", "(", "(", "new_size_t_y", ",", "new_size_t_x", ")", ",", "\n", "interpolation", "=", "PIL", ".", "Image", ".", "NEAREST", ")", ",", "\n", "CenterCrop", "(", "(", "size0", ",", "size1", ")", ")", ",", "\n", "ToTensor", "(", ")", "\n", "]", ")", "\n", "ngram_trans", "=", "transform_out", "(", "torch", ".", "FloatTensor", "(", "ngram", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "minus", "=", "False", "\n", "if", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "==", "1", ":", "\n", "            ", "ngram_", "=", "ngram", "\n", "ngram", "=", "ngram_trans", "\n", "ngram_trans", "=", "ngram_", "\n", "minus", "=", "True", "\n", "\n", "", "return", "ngram", ",", "ngram_trans", ",", "minus", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.trans_pitch_shift": [[255, 257], ["complex_auto.util.to_numpy", "dataloader.DataSampler.transp0", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.transp0"], ["", "def", "trans_pitch_shift", "(", "self", ",", "ngram", ",", "shifty", ")", ":", "\n", "        ", "return", "to_numpy", "(", "self", ".", "transp0", "(", "torch", ".", "FloatTensor", "(", "ngram", ")", ",", "shifty", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.trans_time_shift": [[258, 260], ["None"], "methods", ["None"], ["", "def", "trans_time_shift", "(", "self", ",", "end", ",", "song_id", ",", "start", ",", "shiftx", ")", ":", "\n", "        ", "return", "self", ".", "data_x", "[", "song_id", "]", "[", ":", ",", "start", "+", "shiftx", ":", "end", "+", "shiftx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.standardize": [[261, 266], ["ngram.std", "ngram.mean"], "methods", ["None"], ["", "def", "standardize", "(", "self", ",", "ngram", ")", ":", "\n", "        ", "ngram", "=", "ngram", "-", "ngram", ".", "mean", "(", ")", "\n", "std", "=", "ngram", ".", "std", "(", ")", "\n", "ngram", "=", ".1", "*", "ngram", "/", "(", "std", "+", "1e-8", ")", "\n", "return", "ngram", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.transp0": [[267, 283], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "abs", "x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "abs", "abs"], "methods", ["None"], ["", "def", "transp0", "(", "self", ",", "x", ",", "shift", ")", ":", "\n", "        ", "\"\"\"\n        Transposes axis 0 (zero-based) of x by [shift] steps.\n        Missing information is padded with zeros.\n        :param x: the array to transpose\n        :param shift: the transposition distance\n        :return: x transposed\n        \"\"\"", "\n", "if", "shift", "==", "0", ":", "\n", "            ", "return", "x", "\n", "\n", "", "pad", "=", "torch", ".", "zeros", "(", "abs", "(", "shift", ")", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "\n", "if", "shift", "<", "0", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "pad", ",", "x", "[", ":", "-", "abs", "(", "shift", ")", ",", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", "[", "abs", "(", "shift", ")", ":", ",", ":", "]", ",", "pad", "]", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.DataSampler.transp1": [[284, 300], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size", "abs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "abs", "abs"], "methods", ["None"], ["", "def", "transp1", "(", "self", ",", "x", ",", "shift", ")", ":", "\n", "        ", "\"\"\"\n        Transposes axis 1 (zero-based) of x by [shift] steps.\n        Missing information is padded with zeros.\n        :param x: the array to transpose\n        :param shift: the transposition distance\n        :return: x transposed\n        \"\"\"", "\n", "if", "shift", "==", "0", ":", "\n", "            ", "return", "x", "\n", "\n", "", "pad", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", "1", ")", ",", "abs", "(", "shift", ")", ")", "\n", "\n", "if", "shift", "<", "0", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "pad", ",", "x", "[", ":", ",", ":", "-", "abs", "(", "shift", ")", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", "abs", "(", "shift", ")", ":", "]", ",", "pad", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.__init__": [[304, 331], ["complex_auto.util.cached"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cached"], ["    ", "def", "__init__", "(", "self", ",", "filelist", ",", "sr", "=", "\"22050\"", ",", "trg_shift", "=", "0", ",", "block_size", "=", "1024", ",", "\n", "refresh_cache", "=", "False", ",", "cache_fn", "=", "\"signal_cache.pyc.bz\"", ",", "\n", "allow_diff_shapes", "=", "False", ",", "padded", "=", "False", ",", "random_shift", "=", "0", ",", "\n", "samples_epoch", "=", "1000", ",", "window", "=", "'hann'", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for 1D signal dataset\n\n        :param filelist:        list of audio file names (str)\n        :param sr:              desired sample rate\n        :param trg_shift:       target == input shifted by [-trg_shift] steps,\n                                blocks are shortened accordingly\n        :param block_size:      length of one instance in a batch\n        :param refresh_cache:   when True recalculate and save to cache file\n                                when False loads from cache file when available\n        :param cache_fn:        filename of cache file\n\n        \"\"\"", "\n", "self", ".", "trg_shift", "=", "trg_shift", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "sr", "=", "sr", "\n", "self", ".", "allow_diff_shapes", "=", "allow_diff_shapes", "\n", "self", ".", "padded", "=", "padded", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "samples_epoch", "=", "samples_epoch", "\n", "self", ".", "signals", "=", "cached", "(", "cache_fn", ",", "self", ".", "load_files", ",", "(", "filelist", ",", ")", ",", "\n", "refresh_cache", "=", "refresh_cache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.__getitem__": [[332, 355], ["numpy.random.randint", "numpy.random.randint", "scipy.signal.get_window", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "dataloader.Signal.standardize", "dataloader.Signal.standardize", "len", "numpy.random.randint", "abs", "dataloader.Signal.squeeze", "dataloader.Signal.squeeze", "len", "abs"], "methods", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.standardize", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.standardize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "rand_inst", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "signals", ")", ")", "\n", "\n", "if", "self", ".", "random_shift", ">", "0", ":", "\n", "            ", "shift", "=", "np", ".", "random", ".", "randint", "(", "-", "self", ".", "random_shift", ",", "self", ".", "random_shift", ")", "\n", "", "else", ":", "\n", "            ", "shift", "=", "self", ".", "trg_shift", "\n", "\n", "", "rand_pos", "=", "np", ".", "random", ".", "randint", "(", "abs", "(", "shift", ")", ",", "\n", "len", "(", "self", ".", "signals", "[", "rand_inst", "]", ")", "-", "\n", "abs", "(", "shift", ")", "-", "self", ".", "block_size", ")", "\n", "\n", "w", "=", "get_window", "(", "self", ".", "window", ",", "self", ".", "block_size", ")", "\n", "x", "=", "self", ".", "signals", "[", "rand_inst", "]", "[", "rand_pos", ":", "rand_pos", "+", "self", ".", "block_size", "]", "\n", "y", "=", "self", ".", "signals", "[", "rand_inst", "]", "[", "rand_pos", "+", "shift", ":", "\n", "rand_pos", "+", "shift", "+", "self", ".", "block_size", ",", ":", "]", "\n", "x", "=", "torch", ".", "FloatTensor", "(", "x", ".", "squeeze", "(", ")", "*", "w", ")", "\n", "y", "=", "torch", ".", "FloatTensor", "(", "y", ".", "squeeze", "(", ")", "*", "w", ")", "\n", "\n", "x", "=", "self", ".", "standardize", "(", "x", ")", "\n", "y", "=", "self", ".", "standardize", "(", "y", ")", "\n", "\n", "return", "x", ",", "y", ",", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.standardize": [[356, 364], ["ngram.std", "signal.mean"], "methods", ["None"], ["", "def", "standardize", "(", "self", ",", "signal", ")", ":", "\n", "        ", "ngram", "=", "signal", "-", "signal", ".", "mean", "(", ")", "\n", "std", "=", "ngram", ".", "std", "(", ")", "\n", "if", "std", ">", "1e-6", ":", "\n", "            ", "ngram", "=", "ngram", "/", "std", "\n", "", "else", ":", "# prevent empty input", "\n", "            ", "ngram", "=", "ngram", "+", "1e-8", "\n", "", "return", "ngram", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.__len__": [[365, 367], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "samples_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.Signal.load_files": [[368, 380], ["file.strip.strip.strip", "print", "data_all.append", "len", "LOGGER.warning", "librosa.load"], "methods", ["None"], ["", "def", "load_files", "(", "self", ",", "filelist", ")", ":", "\n", "        ", "data_all", "=", "[", "]", "\n", "for", "file", "in", "filelist", ":", "\n", "            ", "file", "=", "file", ".", "strip", "(", "'\\n'", ")", "\n", "print", "(", "f\"loading file {file}\"", ")", "\n", "signal", "=", "librosa", ".", "load", "(", "file", ")", "[", "0", "]", "[", ":", ",", "None", "]", "\n", "data_all", ".", "append", "(", "signal", ")", "\n", "\n", "", "if", "len", "(", "data_all", ")", "==", "0", ":", "\n", "            ", "LOGGER", ".", "warning", "(", "\"No data added to Signal Dataset!\"", ")", "\n", "\n", "", "return", "data_all", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.dataloader.standardize_": [[28, 34], ["ngram.std", "ngram.mean"], "function", ["None"], ["def", "standardize_", "(", "ngram", ")", ":", "\n", "    ", "ngram", "=", "ngram", "-", "ngram", ".", "mean", "(", ")", "\n", "std", "=", "ngram", ".", "std", "(", ")", "\n", "if", "std", ">", "1e-8", ":", "\n", "        ", "ngram", "=", ".1", "*", "ngram", "/", "std", "\n", "", "return", "ngram", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.normalize": [[25, 29], ["numpy.min", "numpy.max"], "function", ["None"], ["def", "normalize", "(", "x", ")", ":", "\n", "    ", "x", "-=", "np", ".", "min", "(", "x", ")", "\n", "x", "/=", "np", ".", "max", "(", "x", ")", "+", "1e-8", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.read_file": [[31, 38], ["open", "f.readlines", "enumerate", "line.strip"], "function", ["None"], ["", "def", "read_file", "(", "fn", ")", ":", "\n", "    ", "with", "open", "(", "fn", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "lines", "[", "i", "]", "=", "line", ".", "strip", "(", ")", "\n", "\n", "", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.check_audio_files": [[40, 44], ["os.path.exists", "os.path.isfile"], "function", ["None"], ["", "def", "check_audio_files", "(", "filelist", ")", ":", "\n", "    ", "for", "file", "in", "filelist", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "file", ")", ",", "f'File does not exist: {file}'", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "file", ")", ",", "f'Not a file: {file}'", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.prepare_audio_inputs": [[46, 50], ["util.read_file", "util.check_audio_files"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.read_file", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.check_audio_files"], ["", "", "def", "prepare_audio_inputs", "(", "input_files", ")", ":", "\n", "    ", "input_files", "=", "read_file", "(", "input_files", ")", "\n", "check_audio_files", "(", "input_files", ")", "\n", "return", "input_files", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_tensor": [[51, 56], ["torch.cuda.is_available", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "cuda_tensor", "(", "data", ",", "tocuda", "=", "True", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "tocuda", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "data", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cuda_variable": [[58, 69], ["torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "tensor.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "cuda_variable", "(", "tensor", ",", "volatile", "=", "False", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "Variable", "(", "tensor", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "Tensor", "(", "tensor", ")", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", "\n", "", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "Variable", "(", "tensor", ",", "volatile", "=", "volatile", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "Tensor", "(", "tensor", ")", ",", "volatile", "=", "volatile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.to_numpy": [[71, 86], ["type", "torch.cuda.is_available", "variable.data.cpu().numpy", "variable.data.numpy", "variable.numpy", "variable.data.cpu", "LOGGER.warning", "type"], "function", ["None"], ["", "", "", "def", "to_numpy", "(", "variable", ")", ":", "\n", "    ", "if", "type", "(", "variable", ")", "==", "np", ".", "ndarray", ":", "\n", "        ", "return", "variable", "\n", "", "try", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "variable", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "variable", ".", "data", ".", "numpy", "(", ")", "\n", "", "", "except", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "variable", ".", "numpy", "(", ")", "\n", "", "except", ":", "\n", "            ", "LOGGER", ".", "warning", "(", "\"Could not 'to_numpy' variable of type \"", "\n", "f\"{type(variable)}\"", ")", "\n", "return", "variable", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.save_pyc_bz": [[88, 96], ["pickle.dump", "bz2.BZ2File"], "function", ["None"], ["", "", "", "def", "save_pyc_bz", "(", "data", ",", "fn", ")", ":", "\n", "    ", "\"\"\"\n    Saves data to file (bz2 compressed)\n\n    :param data: data to save\n    :param fn: file name of dumped data\n    \"\"\"", "\n", "pickle", ".", "dump", "(", "data", ",", "bz2", ".", "BZ2File", "(", "fn", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.load_pyc_bz": [[98, 109], ["pickle.load", "bz2.BZ2File", "pickle.load", "bz2.BZ2File"], "function", ["None"], ["", "def", "load_pyc_bz", "(", "fn", ")", ":", "\n", "    ", "\"\"\"\n    Loads data from file (bz2 compressed)\n\n    :param fn: file name of dumped data\n    :return: loaded data\n    \"\"\"", "\n", "try", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "bz2", ".", "BZ2File", "(", "fn", ",", "'r'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "", "except", "EOFError", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "bz2", ".", "BZ2File", "(", "fn", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.cached": [[111, 181], ["logging.getLogger", "os.path.exists", "func", "os.remove", "logging.getLogger.info", "util.load_pyc_bz", "util.save_pyc_bz", "logging.getLogger.error", "logging.getLogger.error", "numpy.load", "numpy.save", "logging.getLogger.error", "logging.getLogger.error"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.load_pyc_bz", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.complex_auto.util.save_pyc_bz"], ["", "", "def", "cached", "(", "cache_fn", ",", "func", ",", "args", "=", "(", ")", ",", "kwargs", "=", "{", "}", ",", "refresh_cache", "=", "False", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    If `cache_fn` exists, return the unpickled contents of that file\n    (the cache file is treated as a bzipped pickle file). If this\n    fails, compute `func`(*`args`), pickle the result to `cache_fn`,\n    and return the result.\n\n    Parameters\n    ----------\n\n    func : function\n        function to compute\n\n    args : tuple\n        argument for which to evaluate `func`\n\n    cache_fn : str\n        file name to load the computed value `func`(*`args`) from\n\n    refresh_cache : boolean\n        if True, ignore the cache file, compute function, and store the result\n        in the cache file\n\n    Returns\n    -------\n\n    object\n\n        the result of `func`(*`args`)\n\n    \"\"\"", "\n", "if", "logger", "==", "None", ":", "\n", "        ", "LOGGER", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "else", ":", "\n", "        ", "LOGGER", "=", "logger", "\n", "\n", "", "result", "=", "None", "\n", "if", "cache_fn", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "cache_fn", ")", ":", "\n", "        ", "if", "refresh_cache", ":", "\n", "            ", "os", ".", "remove", "(", "cache_fn", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "LOGGER", ".", "info", "(", "f\"Loading cache file {cache_fn}...\"", ")", "\n", "result", "=", "load_pyc_bz", "(", "cache_fn", ")", "\n", "", "except", "UnpicklingError", "as", "e", ":", "\n", "                ", "LOGGER", ".", "error", "(", "\n", "(", "'The file {0} exists, but cannot be unpickled.'", "\n", "'Is it readable? Is this a pickle file? Try '", "\n", "'with numpy..'", "\n", "''", ")", ".", "format", "(", "cache_fn", ")", ")", "\n", "try", ":", "\n", "                    ", "result", "=", "np", ".", "load", "(", "cache_fn", ")", "\n", "", "except", "Exception", "as", "g", ":", "\n", "                    ", "LOGGER", ".", "error", "(", "\"Did not work, either.\"", ")", "\n", "raise", "e", "\n", "\n", "", "", "", "", "if", "result", "is", "None", ":", "\n", "        ", "result", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "cache_fn", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "save_pyc_bz", "(", "result", ",", "cache_fn", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "LOGGER", ".", "error", "(", "\"Could not save, try with numpy..\"", ")", "\n", "try", ":", "\n", "                    ", "np", ".", "save", "(", "cache_fn", ",", "result", ")", "\n", "", "except", "Exception", "as", "g", ":", "\n", "                    ", "LOGGER", ".", "error", "(", "\"Did not work, either.\"", ")", "\n", "raise", "e", "\n", "", "", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.get_bpm": [[53, 78], ["os.path.basename().split", "bpm_dict.keys", "Exception", "os.path.basename"], "function", ["None"], ["def", "get_bpm", "(", "wav_file", ")", ":", "\n", "    ", "\"\"\"Gets the correct bpm based on the wav_file name. If the wav_file is not\n    contained in the JKU dataset, raises error.\n\n    Parameters\n    ----------\n    wav_file : str\n        Path to the wav file to obtain its bpm.\n\n    Returns\n    -------\n    bpm : int\n        BPM of the piece, as described in the JKU dataset.\n    \"\"\"", "\n", "bpm_dict", "=", "{", "\"wtc2f20-poly\"", ":", "84", ",", "\n", "\"sonata01-3-poly\"", ":", "192", ",", "\n", "\"mazurka24-4-poly\"", ":", "138", ",", "\n", "\"silverswan-poly\"", ":", "54", ",", "\n", "\"sonata04-2-poly\"", ":", "120", "\n", "}", "\n", "wav_file", "=", "os", ".", "path", ".", "basename", "(", "wav_file", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "if", "wav_file", "not", "in", "bpm_dict", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"%s not in the JKU dataset, you need to input a BPM\"", "%", "\n", "wav_file", ")", "\n", "", "return", "bpm_dict", "[", "wav_file", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.print_patterns": [[80, 98], ["logging.info", "enumerate", "print", "enumerate", "print"], "function", ["None"], ["", "def", "print_patterns", "(", "patterns", ",", "h", ")", ":", "\n", "    ", "\"\"\"Prints the patterns and the occurrences included in pattterns.\n\n    Parameters\n    ----------\n    patterns : list\n        Patterns list with all of its occurrences.\n    h : float\n        Hop size.\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"Printing Extracted Motives (all times are in seconds):\"", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "patterns", ")", ":", "\n", "        ", "print", "(", "\"Pattern %d:\"", "%", "(", "i", "+", "1", ")", ")", "\n", "for", "j", ",", "occ", "in", "enumerate", "(", "p", ")", ":", "\n", "# Get start and end times", "\n", "            ", "start", "=", "occ", "[", "2", "]", "\n", "end", "=", "occ", "[", "3", "]", "\n", "print", "(", "\"\\tOccurrence %d: (%.2f, %.2f)\"", "%", "(", "j", "+", "1", ",", "start", ",", "end", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.occurrence_to_csv": [[100, 131], ["round", "round", "numpy.arange", "numpy.argwhere", "len", "occ.append"], "function", ["None"], ["", "", "", "def", "occurrence_to_csv", "(", "start", ",", "end", ",", "midi_score", ")", ":", "\n", "    ", "\"\"\"Given an occurrence, return the csv formatted one into a\n        list (onset,midi).\n\n    Parameters\n    ----------\n    start : float\n        Start index of the occurrence.\n    end : float\n        End index of the occurrence.\n    midi_score : list\n        The score of the piece (read form CSV format).\n\n    Returns\n    -------\n    occ : list\n        Occurrence in the csv format list(onset, midi).\n    \"\"\"", "\n", "occ", "=", "[", "]", "\n", "start", "=", "round", "(", "start", ")", "\n", "end", "=", "round", "(", "end", ")", "\n", "h", "=", "0.125", "# Resolution of csv files", "\n", "for", "i", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "h", ")", ":", "\n", "        ", "idxs", "=", "np", ".", "argwhere", "(", "midi_score", "[", ":", ",", "utils", ".", "CSV_ONTIME", "]", "==", "i", ")", "\n", "# Get all available staves", "\n", "if", "len", "(", "idxs", ")", ">", "0", ":", "\n", "            ", "for", "idx", "in", "idxs", ":", "\n", "                ", "onset", "=", "midi_score", "[", "idx", ",", "utils", ".", "CSV_ONTIME", "]", "[", "0", "]", "\n", "midi", "=", "midi_score", "[", "idx", ",", "utils", ".", "CSV_MIDI", "]", "[", "0", "]", "\n", "occ", ".", "append", "(", "[", "onset", ",", "midi", ",", "idx", "]", ")", "\n", "", "", "", "return", "occ", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.patterns_to_csv": [[133, 165], ["extractor.occurrence_to_csv", "csv_patterns.append", "extractor.onsets_to_raw", "new_p.append", "len"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.occurrence_to_csv", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.onsets_to_raw"], ["", "def", "patterns_to_csv", "(", "patterns", ",", "midi_score", ",", "h", ",", "offset", ",", "raw", "=", "False", ")", ":", "\n", "    ", "\"\"\"Formats the patterns into the csv format.\n\n    Parameters\n    ----------\n    pattersn : list\n        List of patterns with its occurrences.\n    midi_score : list\n        The score of the piece (read from CSV).\n    h : float\n        Hop size of the ssm.\n\n    Returns\n    -------\n    csv_patterns : list\n        List of the patterns in the csv format to be analyzed by MIREX.\n    \"\"\"", "\n", "csv_patterns", "=", "[", "]", "\n", "for", "p", "in", "patterns", ":", "\n", "        ", "new_p", "=", "[", "]", "\n", "for", "occ", "in", "p", ":", "\n", "            ", "start", "=", "occ", "[", "2", "]", "*", "h", "+", "offset", "\n", "end", "=", "occ", "[", "3", "]", "*", "h", "+", "offset", "\n", "csv_occ", "=", "occurrence_to_csv", "(", "start", ",", "end", ",", "midi_score", ")", "\n", "if", "raw", ":", "\n", "                ", "csv_occ", "=", "onsets_to_raw", "(", "csv_occ", ",", "h", ",", "offset", ",", "0", ")", "\n", "", "if", "csv_occ", "!=", "[", "]", ":", "\n", "                ", "new_p", ".", "append", "(", "csv_occ", ")", "\n", "", "", "if", "new_p", "!=", "[", "]", "and", "len", "(", "new_p", ")", ">=", "2", ":", "\n", "            ", "csv_patterns", ".", "append", "(", "new_p", ")", "\n", "\n", "", "", "return", "csv_patterns", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.onsets_to_raw": [[167, 174], ["occ.append", "int"], "function", ["None"], ["", "def", "onsets_to_raw", "(", "csv_occ", ",", "h", ",", "offset", ",", "correct", ")", ":", "\n", "    ", "occ", "=", "[", "]", "\n", "for", "onset", ",", "midi", ",", "idx", "in", "csv_occ", ":", "\n", "        ", "onraw", "=", "int", "(", "1.", "*", "(", "onset", "+", "1", "-", "offset", ")", "/", "h", ")", "-", "correct", "\n", "occ", ".", "append", "(", "[", "onraw", ",", "midi", ",", "idx", "]", ")", "\n", "\n", "", "return", "occ", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.obtain_patterns": [[176, 224], ["len", "numpy.zeros", "range", "new_p.append", "new_p.append", "range", "patterns.append", "new_p.append"], "function", ["None"], ["", "def", "obtain_patterns", "(", "segments", ",", "max_diff", ")", ":", "\n", "    ", "\"\"\"Given a set of segments, find its occurrences and thus obtain the\n    possible patterns.\n\n    Parameters\n    ----------\n    segments : list\n        List of the repetitions found in the self-similarity matrix.\n    max_diff : float\n        Maximum difference to decide whether we found a segment or not.\n\n    Returns\n    -------\n    patters : list\n        List of patterns found.\n    \"\"\"", "\n", "patterns", "=", "[", "]", "\n", "N", "=", "len", "(", "segments", ")", "\n", "\n", "# Initially, all patterns must be checked", "\n", "checked_patterns", "=", "np", ".", "zeros", "(", "N", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "if", "checked_patterns", "[", "i", "]", ":", "\n", "            ", "continue", "\n", "\n", "# Store new pattern", "\n", "", "new_p", "=", "[", "]", "\n", "s", "=", "segments", "[", "i", "]", "\n", "# Add diagonal occurrence", "\n", "new_p", ".", "append", "(", "[", "s", "[", "0", "]", ",", "s", "[", "1", "]", ",", "s", "[", "0", "]", ",", "s", "[", "1", "]", "]", ")", "\n", "# Add repetition", "\n", "new_p", ".", "append", "(", "s", ")", "\n", "\n", "checked_patterns", "[", "i", "]", "=", "1", "\n", "\n", "# Find occurrences", "\n", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "            ", "if", "checked_patterns", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "", "ss", "=", "segments", "[", "j", "]", "\n", "if", "(", "s", "[", "0", "]", "+", "max_diff", ">=", "ss", "[", "0", "]", "and", "s", "[", "0", "]", "-", "max_diff", "<=", "ss", "[", "0", "]", ")", "and", "(", "s", "[", "1", "]", "+", "max_diff", ">=", "ss", "[", "1", "]", "and", "s", "[", "1", "]", "-", "max_diff", "<=", "ss", "[", "1", "]", ")", ":", "\n", "                ", "new_p", ".", "append", "(", "ss", ")", "\n", "checked_patterns", "[", "j", "]", "=", "1", "\n", "", "", "patterns", ".", "append", "(", "new_p", ")", "\n", "\n", "", "return", "patterns", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.compute_ssm": [[226, 279], ["logging.info", "utils.compute_audio_chromagram", "utils.median_filter", "logging.info", "utils.compute_key_inv_ssm", "utils.write_cPickle", "utils.read_cPickle", "ismir.plot_ssm", "ismir.plot_score_examples", "ismir.plot_chroma", "utils.chroma_to_tonnetz"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_audio_chromagram", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.median_filter", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_key_inv_ssm", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.write_cPickle", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.read_cPickle", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.ismir.plot_ssm", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.ismir.plot_score_examples", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.ismir.plot_chroma", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.chroma_to_tonnetz"], ["", "def", "compute_ssm", "(", "wav_file", ",", "h", ",", "ssm_read_pk", ",", "is_ismir", "=", "False", ",", "tonnetz", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes the self similarity matrix from an audio file.\n\n    Parameters\n    ----------\n    wav_file: str\n        Path to the wav file to be read.\n    h : float\n        Hop size.\n    ssm_read_pk : bool\n        Whether to read the ssm from a pickle file or not (note: this function\n        utomatically saves the ssm in a pickle file).\n    is_ismir : bool\n        Produce the plots that appear on the ISMIR paper.\n    tonnetz : bool\n        Compute tonnetz instead of Chroma features.\n\n    Returns\n    -------\n    X : np.array((N, N))\n        Self-similarity matrix\n    \"\"\"", "\n", "if", "not", "ssm_read_pk", ":", "\n", "# Read WAV file", "\n", "        ", "logging", ".", "info", "(", "\"Reading the WAV file...\"", ")", "\n", "C", "=", "utils", ".", "compute_audio_chromagram", "(", "wav_file", ",", "h", ")", "\n", "C", "=", "utils", ".", "median_filter", "(", "C", ",", "L", "=", "9", ")", "\n", "\n", "if", "is_ismir", ":", "\n", "            ", "ismir", ".", "plot_chroma", "(", "C", ")", "\n", "\n", "# Compute Tonnetz if needed", "\n", "", "F", "=", "C", "\n", "if", "tonnetz", ":", "\n", "            ", "F", "=", "utils", ".", "chroma_to_tonnetz", "(", "C", ")", "\n", "\n", "# Compute the self similarity matrix", "\n", "", "logging", ".", "info", "(", "\"Computing key-invariant self-similarity matrix...\"", ")", "\n", "X", "=", "utils", ".", "compute_key_inv_ssm", "(", "F", ",", "h", ")", "\n", "\n", "#plt.imshow(X, interpolation=\"nearest\", aspect=\"auto\")", "\n", "#plt.show()", "\n", "\n", "utils", ".", "write_cPickle", "(", "wav_file", "+", "\"-audio-ssm.pk\"", ",", "X", ")", "\n", "", "else", ":", "\n", "        ", "X", "=", "utils", ".", "read_cPickle", "(", "wav_file", "+", "\"-audio-ssm.pk\"", ")", "\n", "\n", "", "if", "is_ismir", ":", "\n", "#X = X**2.5", "\n", "        ", "ismir", ".", "plot_ssm", "(", "X", ")", "\n", "ismir", ".", "plot_score_examples", "(", "X", ")", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.save_hist": [[281, 292], ["matplotlib.clf", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "matplotlib.close", "values.flatten"], "function", ["None"], ["", "def", "save_hist", "(", "values", ",", "title", ",", "filename", ")", ":", "\n", "    ", "'''\n    Save a histogram of values titled with title in file filename.\n    '''", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "hist", "(", "values", ".", "flatten", "(", ")", ",", "bins", "=", "50", ")", "\n", "plt", ".", "xlabel", "(", "'Value'", ")", "\n", "plt", ".", "ylabel", "(", "'Amount'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.plot_hist": [[294, 296], ["extractor.save_hist"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.save_hist"], ["", "def", "plot_hist", "(", "values", ",", "title", ",", "filename", ")", ":", "\n", "    ", "return", "save_hist", "(", "values", ",", "title", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.prepro": [[298, 301], ["numpy.median"], "function", ["None"], ["", "def", "prepro", "(", "X", ")", ":", "\n", "    ", "X", "=", "X", "-", "np", ".", "median", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.process": [[303, 426], ["wav_file.endswith", "utils.save_results_raw", "logging.info", "extractor.compute_ssm", "wav_file.endswith", "logging.info", "utils.read_csv", "logging.info", "int", "int", "logging.info", "extractor.obtain_patterns", "logging.info", "utils.sonify_patterns", "ismir.plot_segments", "extractor.get_bpm", "numpy.load", "extractor.prepro", "utils.get_offset", "numpy.ceil", "utils.read_cPickle", "logging.info", "utils.save_results", "utils.save_results", "utils.get_offset", "float", "logging.info", "numpy.asarray", "extractor.patterns_to_csv", "extractor.patterns_to_csv", "print", "extractor.get_bpm", "float", "utils.find_segments", "print"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.save_results_raw", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_ssm", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.read_csv", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.obtain_patterns", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.sonify_patterns", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.ismir.plot_segments", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.get_bpm", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.prepro", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_offset", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.read_cPickle", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.save_results", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.save_results", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_offset", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.patterns_to_csv", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.patterns_to_csv", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.get_bpm", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.find_segments"], ["", "def", "process", "(", "wav_file", ",", "outfile", ",", "domain", ",", "csv_file", "=", "None", ",", "bpm", "=", "None", ",", "tol", "=", "0.1", ",", "\n", "ssm_read_pk", "=", "False", ",", "read_pk", "=", "False", ",", "rho", "=", "2", ",", "is_ismir", "=", "False", ",", "\n", "tonnetz", "=", "False", ",", "sonify", "=", "False", ")", ":", "\n", "    ", "\"\"\"Main process to find the patterns in a polyphonic audio file.\n\n    Parameters\n    ----------\n    wav_file : str\n        Path to the wav file to be analyzed.\n    csv_file : str\n        Path to the csv containing the midi_score of the input audio file\n        (needed to produce a result that can be read for JKU dataset).\n    outfile : str\n        Path to file to save the results.\n    bpm : int\n        Beats per minute of the piece. If None, bpms are read from the JKU.\n    tol : float\n        Tolerance to find the segments in the SSM.\n    ssm_read_pk : bool\n        Whether to read the SSM from a pickle file.\n    read_pk : bool\n        Whether to read the segments from a pickle file.\n    rho : int\n        Positive integer to compute the score of the segments.\n    is_ismir : bool\n        Produce the plots that appear on the ISMIR paper.\n    tonnetz : bool\n        Whether to use Tonnetz or Chromas.\n    sonify : bool\n        Whether to sonify the patterns or not.\n    \"\"\"", "\n", "\n", "# Algorithm parameters", "\n", "min_notes", "=", "16", "\n", "max_diff_notes", "=", "5", "\n", "\n", "# to process", "\n", "if", "wav_file", ".", "endswith", "(", "\"wav\"", ")", ":", "\n", "# Get the correct bpm if needed", "\n", "        ", "if", "bpm", "is", "None", ":", "\n", "            ", "bpm", "=", "get_bpm", "(", "wav_file", ")", "\n", "\n", "", "h", "=", "bpm", "/", "60.", "/", "8.", "# Hop size /8 works better than /4, but it takes longer", "\n", "# Obtain the Self Similarity Matrix", "\n", "X", "=", "compute_ssm", "(", "wav_file", ",", "h", ",", "ssm_read_pk", ",", "is_ismir", ",", "tonnetz", ")", "\n", "", "elif", "wav_file", ".", "endswith", "(", "\"npy\"", ")", ":", "\n", "        ", "X", "=", "np", ".", "load", "(", "wav_file", ")", "\n", "X", "=", "prepro", "(", "X", ")", "\n", "if", "domain", "==", "\"symbolic\"", ":", "\n", "            ", "h", "=", ".25", "# 2. # for symbolic (16th notes)", "\n", "", "else", ":", "\n", "            ", "if", "bpm", "is", "None", ":", "\n", "                ", "bpm", "=", "get_bpm", "(", "wav_file", ")", "\n", "", "h", "=", "0.0886", "*", "bpm", "/", "60", "\n", "\n", "", "", "offset", "=", "0", "\n", "# Read CSV file", "\n", "if", "csv_file", "is", "not", "None", ":", "\n", "        ", "logging", ".", "info", "(", "\"Reading the CSV file for MIDI pitches...\"", ")", "\n", "midi_score", "=", "utils", ".", "read_csv", "(", "csv_file", ")", "\n", "# Don't use offset, as these were already encoded in the MIDI files", "\n", "if", "domain", "==", "\"audio\"", ":", "\n", "            ", "offset", "=", "utils", ".", "get_offset", "(", "midi_score", ")", "\n", "", "else", ":", "\n", "# Compensate for two inserted empty beats", "\n", "            ", "offset", "=", "-", "2.", "+", "utils", ".", "get_offset", "(", "midi_score", ")", "\n", "\n", "", "", "patterns", "=", "[", "]", "\n", "csv_patterns", "=", "[", "]", "\n", "while", "patterns", "==", "[", "]", "or", "csv_patterns", "==", "[", "]", ":", "\n", "# Find the segments inside the self similarity matrix", "\n", "        ", "logging", ".", "info", "(", "\"Finding segments in the self-similarity matrix...\"", ")", "\n", "max_diff", "=", "int", "(", "max_diff_notes", "/", "float", "(", "h", ")", ")", "\n", "min_dur", "=", "int", "(", "np", ".", "ceil", "(", "min_notes", "/", "float", "(", "h", ")", ")", ")", "\n", "#print min_dur, min_notes, h, max_diff", "\n", "if", "not", "read_pk", ":", "\n", "            ", "segments", "=", "[", "]", "\n", "while", "segments", "==", "[", "]", ":", "\n", "                ", "logging", ".", "info", "(", "(", "\"{0}: \\ttrying tolerance %.2f\"", "%", "tol", ")", ".", "format", "(", "wav_file", ")", ")", "\n", "segments", "=", "np", ".", "asarray", "(", "utils", ".", "find_segments", "(", "X", ",", "min_dur", ",", "th", "=", "tol", ",", "rho", "=", "rho", ")", ")", "\n", "tol", "-=", "0.001", "\n", "#utils.write_cPickle(wav_file + \"-audio.pk\", segments)", "\n", "", "", "else", ":", "\n", "            ", "segments", "=", "utils", ".", "read_cPickle", "(", "wav_file", "+", "\"-audio.pk\"", ")", "\n", "\n", "# Obtain the patterns from the segments and split them if needed", "\n", "", "logging", ".", "info", "(", "\"Obtaining the patterns from the segments...\"", ")", "\n", "patterns", "=", "obtain_patterns", "(", "segments", ",", "max_diff", ")", "\n", "\n", "# Get the csv patterns if they exist", "\n", "if", "csv_file", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "csv_patterns", "=", "patterns_to_csv", "(", "patterns", ",", "midi_score", ",", "h", ",", "offset", ")", "\n", "raw_patterns", "=", "patterns_to_csv", "(", "patterns", ",", "midi_score", ",", "h", ",", "offset", ",", "\n", "raw", "=", "True", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "", "", "else", ":", "\n", "            ", "csv_patterns", "=", "[", "0", "]", "\n", "raw_patterns", "=", "[", "0", "]", "\n", "\n", "# Sonify patterns if needed", "\n", "", "", "if", "sonify", ":", "\n", "        ", "logging", ".", "info", "(", "\"Sonifying Patterns...\"", ")", "\n", "\n", "utils", ".", "sonify_patterns", "(", "wav_file", ",", "patterns", ",", "h", ")", "\n", "\n", "# Formatting csv patterns and save results", "\n", "", "if", "csv_file", "is", "not", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "logging", ".", "info", "(", "\"Writting results to %s\"", "%", "outfile", ")", "\n", "utils", ".", "save_results", "(", "csv_patterns", ",", "outfile", "=", "outfile", ")", "\n", "utils", ".", "save_results", "(", "raw_patterns", ",", "outfile", "=", "outfile", "+", "\"_\"", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n", "", "", "utils", ".", "save_results_raw", "(", "patterns", ",", "outfile", "=", "outfile", "+", "\"raw\"", ")", "\n", "\n", "if", "is_ismir", ":", "\n", "        ", "ismir", ".", "plot_segments", "(", "X", ",", "segments", ")", "\n", "\n", "# Alright, we're done :D", "\n", "", "logging", ".", "info", "(", "\"Algorithm finished.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.extractor.main": [[428, 472], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "time.time", "logging.basicConfig", "extractor.process", "logging.info", "time.time"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.process"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Main function to run the audio polyphonic version of patterns\n        finding.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Discovers the audio polyphonic motives given a WAV file\"", "\n", "\" and a CSV file\"", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "\"wav_file\"", ",", "action", "=", "\"store\"", ",", "help", "=", "\"Input WAV file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "dest", "=", "\"csv_file\"", ",", "action", "=", "\"store\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Input CSV file (to read MIDI notes for output)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-b\"", ",", "dest", "=", "\"bpm\"", ",", "action", "=", "\"store\"", ",", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "help", "=", "\"Beats Per Minute of the wave file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-o\"", ",", "action", "=", "\"store\"", ",", "default", "=", "\"results.txt\"", ",", "\n", "dest", "=", "\"output\"", ",", "help", "=", "\"Output results\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-pk\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "dest", "=", "\"read_pk\"", ",", "help", "=", "\"Read Pickle File\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-spk\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "dest", "=", "\"ssm_read_pk\"", ",", "help", "=", "\"Read SSM Pickle File\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-th\"", ",", "action", "=", "\"store\"", ",", "default", "=", "0.01", ",", "type", "=", "float", ",", "\n", "dest", "=", "\"tol\"", ",", "help", "=", "\"Tolerance level, from 0 to 1\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "action", "=", "\"store\"", ",", "default", "=", "2", ",", "type", "=", "int", ",", "\n", "dest", "=", "\"rho\"", ",", "help", "=", "\"Positive integer number for \"", "\n", "\"calculating the score\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-ismir\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "dest", "=", "\"is_ismir\"", ",", "help", "=", "\"Produce the plots that appear \"", "\n", "\"on the ISMIR paper.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-t\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "dest", "=", "\"tonnetz\"", ",", "help", "=", "\"Whether to use Tonnetz or not.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-s\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "dest", "=", "\"sonify\"", ",", "help", "=", "\"Sonify the patterns\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Setup the logger", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s: %(levelname)s: %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "# Run the algorithm", "\n", "process", "(", "args", ".", "wav_file", ",", "args", ".", "output", ",", "csv_file", "=", "args", ".", "csv_file", ",", "bpm", "=", "args", ".", "bpm", ",", "\n", "tol", "=", "args", ".", "tol", ",", "read_pk", "=", "args", ".", "read_pk", ",", "ssm_read_pk", "=", "args", ".", "ssm_read_pk", ",", "\n", "rho", "=", "args", ".", "rho", ",", "is_ismir", "=", "args", ".", "is_ismir", ",", "tonnetz", "=", "args", ".", "tonnetz", ",", "\n", "sonify", "=", "args", ".", "sonify", ")", "\n", "\n", "logging", ".", "info", "(", "\"Done! Took %.2f seconds.\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.get_out_file": [[26, 47], ["[].split", "os.path.join", "len", "[].split.index"], "function", ["None"], ["def", "get_out_file", "(", "patterns", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Given a set of patterns corresponding to a single musical piece and the\n    output directory, get the output file path.\n\n    Parameters\n    ----------\n    patterns: list of list of strings (files)\n        Set of all the patterns with the occurrences of a given piece.\n    out_dir: string (path)\n        Path to the output directory.\n\n    Returns\n    -------\n    out_file: string (path)\n        Path to the output file.\n    \"\"\"", "\n", "assert", "len", "(", "patterns", ")", ">", "0", "\n", "name_split", "=", "patterns", "[", "0", "]", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "\n", "idx_offset", "=", "name_split", ".", "index", "(", "\"groundTruth\"", ")", "-", "1", "\n", "return", "os", ".", "path", ".", "join", "(", "out_dir", ",", "name_split", "[", "idx_offset", "+", "2", "]", "+", "\"-\"", "+", "\n", "name_split", "[", "idx_offset", "+", "3", "]", "+", "\".txt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.parse_patterns": [[49, 77], ["open", "f.write", "str", "open", "csv.reader", "str"], "function", ["None"], ["", "def", "parse_patterns", "(", "patterns", ",", "out_file", ")", ":", "\n", "    ", "\"\"\"Parses the set of patterns and saves the results into the output file.\n\n    Parameters\n    ----------\n    patterns: list of list of strings (files)\n        Set of all the patterns with the occurrences of a given piece.\n    out_file: string (path)\n        Path to the output file to save the set of patterns in the MIREX\n        format.\n    \"\"\"", "\n", "out_str", "=", "\"\"", "\n", "pattern_n", "=", "1", "\n", "for", "pattern", "in", "patterns", ":", "\n", "        ", "out_str", "+=", "\"pattern\"", "+", "str", "(", "pattern_n", ")", "+", "\"\\n\"", "\n", "occ_n", "=", "1", "\n", "for", "occ_file", "in", "pattern", ":", "\n", "            ", "out_str", "+=", "\"occurrence\"", "+", "str", "(", "occ_n", ")", "+", "\"\\n\"", "\n", "with", "open", "(", "occ_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "file_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "fields", "in", "file_reader", ":", "\n", "                    ", "out_str", "+=", "fields", "[", "0", "]", "+", "\", \"", "+", "fields", "[", "1", "]", "+", "\"\\n\"", "\n", "", "", "occ_n", "+=", "1", "\n", "", "pattern_n", "+=", "1", "\n", "\n", "# Save file", "\n", "", "with", "open", "(", "out_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.get_gt_patterns": [[79, 107], ["glob.glob", "os.path.join", "os.path.isdir", "glob.glob", "P.append", "os.path.join", "O.append"], "function", ["None"], ["", "", "def", "get_gt_patterns", "(", "annotators", ")", ":", "\n", "    ", "\"\"\"Obtains the set of files containing the patterns and its occcurrences\n    given the annotator directories.\n\n    Parameters\n    ----------\n    annotators: list of strings (files)\n        List containing a set of paths to all the annotators of a given piece.\n\n    Returns\n    -------\n    P: list of list of strings (files)\n       Paths to all the patterns with all the occurrences for the current\n       annotator. e.g. P = [[pat1_occ1, pat1_occ2],[pat2_occ1, ...],...]\n    \"\"\"", "\n", "P", "=", "[", "]", "\n", "for", "annotator", "in", "annotators", ":", "\n", "# Get all the patterns from this annotator", "\n", "        ", "patterns", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "annotator", ",", "\"*\"", ")", ")", "\n", "for", "pattern", "in", "patterns", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "pattern", ")", ":", "\n", "# Get all the occurrences for the current pattern", "\n", "                ", "occurrences", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "pattern", ",", "\"occurrences\"", ",", "\n", "\"csv\"", ",", "\"*.csv\"", ")", ")", "\n", "O", "=", "[", "]", "\n", "[", "O", ".", "append", "(", "occurrence", ")", "for", "occurrence", "in", "occurrences", "]", "\n", "P", ".", "append", "(", "O", ")", "\n", "", "", "", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.process": [[109, 155], ["utils.ensure_dir", "glob.glob", "os.path.join", "logging.info", "parse_gt.get_out_file", "parse_gt.parse_patterns", "glob.glob", "all_patterns.append", "os.path.join", "parse_gt.get_gt_patterns", "glob.glob.remove", "os.path.split"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.ensure_dir", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.get_out_file", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.parse_patterns", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.get_gt_patterns"], ["", "def", "process", "(", "jku_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Main process to parse the ground truth csv files.\n\n    Parameters\n    ----------\n    jku_dir: string\n        Directory where the JKU Dataset is located.\n    out_dir: string\n        Directory in which to put the parsed files.\n    \"\"\"", "\n", "# Make sure the output dir exists", "\n", "utils", ".", "ensure_dir", "(", "out_dir", ")", "\n", "\n", "# Get all the music pieces in the ground truth", "\n", "pieces", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "jku_dir", ",", "\"groundTruth\"", ",", "\"*\"", ")", ")", "\n", "\n", "# Two types of patterns for each piece", "\n", "types", "=", "[", "\"monophonic\"", ",", "\"polyphonic\"", "]", "\n", "\n", "# Main loop to retrieve all the patterns from the GT", "\n", "all_patterns", "=", "[", "]", "\n", "for", "piece", "in", "pieces", ":", "\n", "        ", "logging", ".", "info", "(", "\"Parsing piece %s\"", "%", "piece", ")", "\n", "for", "type", "in", "types", ":", "\n", "# Get all the annotators for the current piece", "\n", "            ", "annotators", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "piece", ",", "type", ",", "\n", "\"repeatedPatterns\"", ",", "\"*\"", ")", ")", "\n", "\n", "# Based on the readme.txt of JKU, these are the valid annotators", "\n", "# (thanks Colin! :-)", "\n", "if", "type", "==", "\"polyphonic\"", ":", "\n", "                ", "valid_annotators", "=", "[", "'barlowAndMorgensternRevised'", ",", "\n", "'bruhn'", ",", "\n", "'schoenberg'", ",", "\n", "'sectionalRepetitions'", ",", "\n", "'tomCollins'", "]", "\n", "for", "annotator", "in", "annotators", ":", "\n", "                    ", "if", "os", ".", "path", ".", "split", "(", "annotator", ")", "[", "1", "]", "not", "in", "valid_annotators", ":", "\n", "                        ", "annotators", ".", "remove", "(", "annotator", ")", "\n", "\n", "", "", "", "all_patterns", ".", "append", "(", "get_gt_patterns", "(", "annotators", ")", ")", "\n", "\n", "# For the patterns of one given file, parse them into a single file", "\n", "", "", "for", "patterns", "in", "all_patterns", ":", "\n", "        ", "out_file", "=", "get_out_file", "(", "patterns", ",", "out_dir", ")", "\n", "parse_patterns", "(", "patterns", ",", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.main": [[157, 180], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "time.time", "logging.basicConfig", "parse_gt.process", "logging.info", "time.time"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.parse_gt.process"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Main function to parse the ground truth.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\n", "\"Parses the ground truth in csv format into the MIREX format\"", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "\"jku_dir\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "help", "=", "\"Input JKU dataset dir\"", ")", "\n", "parser", ".", "add_argument", "(", "\"out_dir\"", ",", "\n", "action", "=", "\"store\"", ",", "\n", "help", "=", "\"Output dir\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Setup the logger", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s: %(levelname)s: %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "# Run the algorithm", "\n", "process", "(", "args", ".", "jku_dir", ",", "args", ".", "out_dir", ")", "\n", "\n", "# Done!", "\n", "logging", ".", "info", "(", "\"Done! Took %.2f seconds.\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.ismir.plot_segments": [[36, 67], ["numpy.save", "numpy.save", "xrange", "pylab.figure", "pylab.imshow", "pylab.xlabel", "pylab.ylabel", "pylab.tight_layout", "pylab.savefig", "pylab.show", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.fill_diagonal", "xrange"], "function", ["None"], ["def", "plot_segments", "(", "X", ",", "segments", ")", ":", "\n", "    ", "\"\"\"Plots the segments on top of half of the self similarity matrix X.\"\"\"", "\n", "np", ".", "save", "(", "\"X.npy\"", ",", "X", ")", "\n", "np", ".", "save", "(", "\"segments.npy\"", ",", "segments", ")", "\n", "for", "s", "in", "segments", ":", "\n", "        ", "line_strength", "=", "3", "\n", "np", ".", "fill_diagonal", "(", "X", "[", "s", "[", "0", "]", ":", "s", "[", "1", "]", ",", "s", "[", "2", "]", ":", "s", "[", "3", "]", "]", ",", "line_strength", ")", "\n", "np", ".", "fill_diagonal", "(", "X", "[", "s", "[", "0", "]", ":", "s", "[", "1", "]", ",", "s", "[", "2", "]", "+", "1", ":", "s", "[", "3", "]", "+", "1", "]", ",", "line_strength", ")", "\n", "np", ".", "fill_diagonal", "(", "X", "[", "s", "[", "0", "]", ":", "s", "[", "1", "]", ",", "s", "[", "2", "]", "+", "2", ":", "s", "[", "3", "]", "+", "2", "]", ",", "line_strength", ")", "\n", "np", ".", "fill_diagonal", "(", "X", "[", "s", "[", "0", "]", ":", "s", "[", "1", "]", ",", "s", "[", "2", "]", "+", "3", ":", "s", "[", "3", "]", "+", "3", "]", ",", "line_strength", ")", "\n", "np", ".", "fill_diagonal", "(", "X", "[", "s", "[", "0", "]", ":", "s", "[", "1", "]", ",", "s", "[", "2", "]", "+", "4", ":", "s", "[", "3", "]", "+", "4", "]", ",", "line_strength", ")", "\n", "np", ".", "fill_diagonal", "(", "X", "[", "s", "[", "0", "]", ":", "s", "[", "1", "]", ",", "s", "[", "2", "]", "-", "1", ":", "s", "[", "3", "]", "-", "1", "]", ",", "line_strength", ")", "\n", "np", ".", "fill_diagonal", "(", "X", "[", "s", "[", "0", "]", ":", "s", "[", "1", "]", ",", "s", "[", "2", "]", "-", "2", ":", "s", "[", "3", "]", "-", "2", "]", ",", "line_strength", ")", "\n", "np", ".", "fill_diagonal", "(", "X", "[", "s", "[", "0", "]", ":", "s", "[", "1", "]", ",", "s", "[", "2", "]", "-", "3", ":", "s", "[", "3", "]", "-", "3", "]", ",", "line_strength", ")", "\n", "np", ".", "fill_diagonal", "(", "X", "[", "s", "[", "0", "]", ":", "s", "[", "1", "]", ",", "s", "[", "2", "]", "-", "4", ":", "s", "[", "3", "]", "-", "4", "]", ",", "line_strength", ")", "\n", "\n", "", "offset", "=", "15", "\n", "for", "i", "in", "xrange", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "i", "+", "offset", "<", "X", ".", "shape", "[", "0", "]", ":", "\n", "            ", "for", "j", "in", "xrange", "(", "i", "+", "offset", ")", ":", "\n", "                    ", "X", "[", "i", ",", "j", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "X", "[", "i", ",", ":", "]", "=", "0", "\n", "\n", "", "", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "6", ")", ")", "\n", "plt", ".", "imshow", "(", "X", ",", "interpolation", "=", "\"nearest\"", ",", "cmap", "=", "plt", ".", "cm", ".", "gray_r", ")", "\n", "plt", ".", "xlabel", "(", "\"Time Frames\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Time Frames\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "\"paths-found.pdf\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.ismir.plot_ssm": [[69, 108], ["pylab.figure", "pylab.imshow", "pylab.xlabel", "pylab.ylabel", "pylab.savefig", "pylab.show"], "function", ["None"], ["", "def", "plot_ssm", "(", "X", ")", ":", "\n", "    ", "\"\"\"Plots a self-similarity matrix, as it appears on the ISMIR paper.\n\n    Parameters\n    ----------\n    X : np.array((N,N))\n        Self-similarity matrix\n    \"\"\"", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "6", ")", ")", "\n", "Y", "=", "(", "X", "[", "3", ":", ",", "3", ":", "]", "+", "X", "[", "2", ":", "-", "1", ",", "2", ":", "-", "1", "]", "+", "X", "[", "1", ":", "-", "2", ",", "1", ":", "-", "2", "]", "+", "X", "[", ":", "-", "3", ",", ":", "-", "3", "]", ")", "/", "3.", "\n", "plt", ".", "imshow", "(", "(", "1", "-", "Y", ")", ",", "interpolation", "=", "\"nearest\"", ",", "cmap", "=", "plt", ".", "cm", ".", "gray", ")", "\n", "h", "=", "1705", "\n", "m", "=", "245.", "\n", "l", "=", "2.0", "\n", "#plt.axvline(28 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axvline(50 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axvline(70 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axvline(91 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axvline(110 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axvline(135 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axvline(157 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axvline(176 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axvline(181 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axvline(202 * h / m, color=\"k\", linewidth=l)", "\n", "\n", "#plt.axhline(28 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axhline(50 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axhline(70 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axhline(91 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axhline(110 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axhline(135 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axhline(157 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axhline(176 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axhline(181 * h / m, color=\"k\", linewidth=l)", "\n", "#plt.axhline(202 * h / m, color=\"k\", linewidth=l)", "\n", "plt", ".", "xlabel", "(", "\"Time frames\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Time frames\"", ")", "\n", "plt", ".", "savefig", "(", "\"SSM-euclidean-annotation.pdf\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.ismir.plot_chroma": [[110, 140], ["pylab.figure", "pylab.imshow", "pylab.yticks", "pylab.axvline", "pylab.axvline", "pylab.axvline", "pylab.axvline", "pylab.axvline", "pylab.axvline", "pylab.axvline", "pylab.axvline", "pylab.axvline", "pylab.axvline", "pylab.xticks", "pylab.xlabel", "pylab.tight_layout", "pylab.show", "numpy.arange"], "function", ["None"], ["", "def", "plot_chroma", "(", "C", ")", ":", "\n", "    ", "\"\"\"Plots a Chromagram example, as it appears on the ISMIR paper.\n\n    Parameters\n    ----------\n    C : np.array((N,12))\n        Chromagram.\n    \"\"\"", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "3", ")", ")", "\n", "plt", ".", "imshow", "(", "(", "1", "-", "C", ".", "T", ")", ",", "interpolation", "=", "\"nearest\"", ",", "aspect", "=", "\"auto\"", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "gray", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "12", ")", ",", "(", "\"A\"", ",", "\"A#\"", ",", "\"B\"", ",", "\"C\"", ",", "\"C#\"", ",", "\"D\"", ",", "\"D#\"", ",", "\"E\"", ",", "\"F\"", ",", "\n", "\"F#\"", ",", "\"G\"", ",", "\"G#\"", ")", ")", "\n", "h", "=", "1705", "\n", "m", "=", "245.", "\n", "l", "=", "2.0", "\n", "plt", ".", "axvline", "(", "28", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "axvline", "(", "50", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "axvline", "(", "70", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "axvline", "(", "91", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "axvline", "(", "110", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "axvline", "(", "135", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "axvline", "(", "157", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "axvline", "(", "176", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "axvline", "(", "181", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "axvline", "(", "202", "*", "h", "/", "m", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "l", ")", "\n", "plt", ".", "xticks", "(", "[", "0", ",", "C", ".", "shape", "[", "0", "]", "-", "1", "]", ",", "[", "0", ",", "\"N\"", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"Time (frames)\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.ismir.plot_score_examples": [[142, 191], ["pylab.subplots", "pylab.subplots_adjust", "dict", "numpy.zeros", "numpy.fill_diagonal", "utils.compute_segment_score_omega", "ax1.imshow", "ax1.text", "ax1.set_xticks", "ax1.set_yticks", "ax1.set_title", "utils.compute_segment_score_omega", "ax2.imshow", "ax2.text", "ax2.set_xticks", "ax2.set_yticks", "ax2.set_title", "utils.compute_segment_score", "utils.compute_segment_score_omega", "ax3.imshow", "ax3.text", "ax3.set_xticks", "ax3.set_yticks", "ax3.set_title", "pylab.tight_layout", "pylab.show", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_segment_score_omega", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_segment_score_omega", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_segment_score", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_segment_score_omega"], ["", "def", "plot_score_examples", "(", "X", ")", ":", "\n", "    ", "\"\"\"Plots some examples of the score, as they appear on the ISMIR paper.\n\n    Parameters\n    ----------\n    X : np.array((N,N))\n        Self-similarity matrix\n    \"\"\"", "\n", "fig", ",", "(", "ax1", ",", "ax2", ",", "ax3", ")", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "3", ",", "figsize", "=", "(", "8", ",", "4", ")", ")", "\n", "plt", ".", "subplots_adjust", "(", "wspace", "=", ".05", ")", "\n", "props", "=", "dict", "(", "boxstyle", "=", "'round'", ",", "facecolor", "=", "'white'", ",", "alpha", "=", "0.95", ")", "\n", "cm", "=", "plt", ".", "cm", ".", "gray", "\n", "\n", "# Synthesized matrix", "\n", "X1", "=", "np", ".", "zeros", "(", "(", "12", ",", "12", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "X1", ",", "1", ")", "\n", "utils", ".", "compute_segment_score_omega", "(", "X1", ",", "0", ",", "0", ",", "10", ",", "0.35", ",", "3", ")", "\n", "ax1", ".", "imshow", "(", "1", "-", "X1", ",", "interpolation", "=", "\"nearest\"", ",", "cmap", "=", "cm", ")", "\n", "textstr", "=", "\"$\\sigma$(1)=1\\n$\\sigma$(2)=0.36\\n$\\sigma$(3)=0.22\"", "\n", "ax1", ".", "text", "(", "5.7", ",", "0.005", ",", "textstr", ",", "fontsize", "=", "14", ",", "\n", "verticalalignment", "=", "'top'", ",", "bbox", "=", "props", ")", "\n", "ax1", ".", "set_xticks", "(", "np", ".", "empty", "(", "0", ")", ",", "np", ".", "empty", "(", "0", ")", ")", "\n", "ax1", ".", "set_yticks", "(", "np", ".", "empty", "(", "0", ")", ",", "np", ".", "empty", "(", "0", ")", ")", "\n", "ax1", ".", "set_title", "(", "\"(a)\"", ")", "\n", "\n", "# Real matrix with an actual path", "\n", "X2", "=", "X", "[", "359", ":", "359", "+", "31", ",", "1285", ":", "1285", "+", "31", "]", "\n", "utils", ".", "compute_segment_score_omega", "(", "X", ",", "359", ",", "1285", ",", "31", ",", "0.35", ",", "3", ")", "\n", "ax2", ".", "imshow", "(", "1", "-", "X2", ",", "interpolation", "=", "\"nearest\"", ",", "cmap", "=", "cm", ")", "\n", "textstr", "=", "\"$\\sigma$(1)=-0.48\\n$\\sigma$(2)=0.44\\n$\\sigma$(3)=0.55\"", "\n", "ax2", ".", "text", "(", "15.00", ",", "0.55", ",", "textstr", ",", "fontsize", "=", "14", ",", "\n", "verticalalignment", "=", "'top'", ",", "bbox", "=", "props", ")", "\n", "ax2", ".", "set_xticks", "(", "np", ".", "empty", "(", "0", ")", ",", "np", ".", "empty", "(", "0", ")", ")", "\n", "ax2", ".", "set_yticks", "(", "np", ".", "empty", "(", "0", ")", ",", "np", ".", "empty", "(", "0", ")", ")", "\n", "ax2", ".", "set_title", "(", "\"(b)\"", ")", "\n", "\n", "utils", ".", "compute_segment_score", "(", "X", ",", "500", ",", "1100", ",", "31", ",", "0.35", ")", "\n", "utils", ".", "compute_segment_score_omega", "(", "X", ",", "500", ",", "1100", ",", "31", ",", "0.35", ",", "3", ")", "\n", "X3", "=", "X", "[", "500", ":", "500", "+", "31", ",", "1100", ":", "1100", "+", "31", "]", "\n", "ax3", ".", "imshow", "(", "1", "-", "X3", ",", "interpolation", "=", "\"nearest\"", ",", "cmap", "=", "cm", ")", "\n", "textstr", "=", "\"$\\sigma$(1)=-0.46\\n$\\sigma$(2)=0.21\\n$\\sigma$(3)=0.32\"", "\n", "ax3", ".", "text", "(", "15.00", ",", "0.55", ",", "textstr", ",", "fontsize", "=", "14", ",", "\n", "verticalalignment", "=", "'top'", ",", "bbox", "=", "props", ")", "\n", "ax3", ".", "set_xticks", "(", "np", ".", "empty", "(", "0", ")", ",", "np", ".", "empty", "(", "0", ")", ")", "\n", "ax3", ".", "set_yticks", "(", "np", ".", "empty", "(", "0", ")", ",", "np", ".", "empty", "(", "0", ")", ")", "\n", "ax3", ".", "set_title", "(", "\"(c)\"", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.ensure_dir": [[43, 53], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "ensure_dir", "(", "dir", ")", ":", "\n", "    ", "\"\"\"Makes sure that the directory dir exists.\n\n    Parameters\n    ----------\n    dir: str\n        Path to the directory to be created if needed.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.plot_matrix": [[55, 59], ["pylab.imshow", "pylab.show"], "function", ["None"], ["", "", "def", "plot_matrix", "(", "X", ")", ":", "\n", "    ", "\"\"\"Plots matrix X.\"\"\"", "\n", "plt", ".", "imshow", "(", "X", ",", "interpolation", "=", "\"nearest\"", ",", "aspect", "=", "\"auto\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.read_cPickle": [[61, 71], ["open", "pickle.load", "open.close"], "function", ["None"], ["", "def", "read_cPickle", "(", "file", ")", ":", "\n", "    ", "\"\"\"Reads the cPickle file and returns its contents.\n\n    @param file string: Path to the cPickle file.\n    @return x Object: cPickle contents.\n    \"\"\"", "\n", "f", "=", "open", "(", "file", ",", "\"r\"", ")", "\n", "x", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.write_cPickle": [[73, 82], ["open", "pickle.dump", "open.close"], "function", ["None"], ["", "def", "write_cPickle", "(", "file", ",", "data", ")", ":", "\n", "    ", "\"\"\"Write data into a cPickle file.\n\n    @param file string: Path to the new cPickle file.\n    @param data object: Data to be stored.\n    \"\"\"", "\n", "f", "=", "open", "(", "file", ",", "\"w\"", ")", "\n", "cPickle", ".", "dump", "(", "data", ",", "f", ",", "protocol", "=", "1", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_ssm": [[84, 95], ["int", "utils.median_filter", "scipy.spatial.distance.pdist", "scipy.spatial.distance.squareform", "spatial.distance.squareform.max"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.median_filter"], ["", "def", "compute_ssm", "(", "X", ",", "h", ",", "dist", "=", "\"euclidean\"", ")", ":", "\n", "    ", "\"\"\"Compute a Self Similarity Matrix, normalized from 0 to 1.\"\"\"", "\n", "L", "=", "int", "(", "1.", "/", "h", ")", "\n", "if", "L", "%", "2", "==", "0", ":", "\n", "        ", "L", "+=", "1", "\n", "", "X", "=", "median_filter", "(", "X", ",", "L", "=", "L", ")", "\n", "S", "=", "spatial", ".", "distance", ".", "pdist", "(", "X", ",", "dist", ")", "\n", "S", "=", "spatial", ".", "distance", ".", "squareform", "(", "S", ")", "\n", "S", "/=", "S", ".", "max", "(", ")", "\n", "S", "=", "1", "-", "S", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_key_inv_ssm": [[97, 130], ["int", "utils.median_filter", "numpy.zeros", "range", "numpy.min", "np.min.max", "scipy.spatial.distance.cdist", "numpy.roll"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.median_filter"], ["", "def", "compute_key_inv_ssm", "(", "X", ",", "h", ",", "dist", "=", "\"euclidean\"", ")", ":", "\n", "    ", "\"\"\"Computes the self similarity matrix that is key invariant from\n        chromagram X.\"\"\"", "\n", "P", "=", "X", ".", "shape", "[", "1", "]", "\n", "L", "=", "int", "(", "1.", "/", "h", ")", "\n", "if", "L", "%", "2", "==", "0", ":", "\n", "        ", "L", "+=", "1", "\n", "", "if", "L", "<=", "1", ":", "\n", "        ", "L", "=", "9", "\n", "", "X", "=", "median_filter", "(", "X", ",", "L", "=", "L", ")", "\n", "N", "=", "X", ".", "shape", "[", "0", "]", "\n", "SS", "=", "np", ".", "zeros", "(", "(", "P", ",", "N", ",", "N", ")", ")", "\n", "dist", "=", "\"euclidean\"", "\n", "for", "i", "in", "range", "(", "P", ")", ":", "\n", "        ", "SS", "[", "i", "]", "=", "spatial", ".", "distance", ".", "cdist", "(", "X", ",", "np", ".", "roll", "(", "X", ",", "i", ")", ",", "dist", ")", "\n", "\n", "# import ismir", "\n", "# K = SS[0] / SS[0].max()", "\n", "# ismir.plot_ssm(1 - K)", "\n", "\n", "# Get key-ivariant ssm:", "\n", "", "S", "=", "np", ".", "min", "(", "SS", ",", "axis", "=", "0", ")", "\n", "\n", "\"\"\"\n    S = spatial.distance.pdist(X, metric=dist)\n    S = spatial.distance.squareform(S)\n    \"\"\"", "\n", "\n", "# Normalize", "\n", "S", "/=", "S", ".", "max", "(", ")", "\n", "S", "=", "1", "-", "S", "\n", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.chroma_to_tonnetz": [[132, 167], ["numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "float", "C[].sum", "fun", "fun", "fun"], "function", ["None"], ["", "def", "chroma_to_tonnetz", "(", "C", ")", ":", "\n", "    ", "\"\"\"Transforms chromagram to Tonnetz (Harte, Sandler, 2006).\"\"\"", "\n", "N", "=", "C", ".", "shape", "[", "0", "]", "\n", "T", "=", "np", ".", "zeros", "(", "(", "N", ",", "6", ")", ")", "\n", "\n", "r1", "=", "1", "# Fifths", "\n", "r2", "=", "1", "# Minor", "\n", "r3", "=", "0.5", "# Major", "\n", "\n", "# Generate Transformation matrix", "\n", "phi", "=", "np", ".", "zeros", "(", "(", "6", ",", "12", ")", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "12", ")", ":", "\n", "            ", "if", "i", "%", "2", "==", "0", ":", "\n", "                ", "fun", "=", "np", ".", "sin", "\n", "", "else", ":", "\n", "                ", "fun", "=", "np", ".", "cos", "\n", "\n", "", "if", "i", "<", "2", ":", "\n", "                ", "phi", "[", "i", ",", "j", "]", "=", "r1", "*", "fun", "(", "j", "*", "7", "*", "np", ".", "pi", "/", "6.", ")", "\n", "", "elif", "i", ">=", "2", "and", "i", "<", "4", ":", "\n", "                ", "phi", "[", "i", ",", "j", "]", "=", "r2", "*", "fun", "(", "j", "*", "3", "*", "np", ".", "pi", "/", "2.", ")", "\n", "", "else", ":", "\n", "                ", "phi", "[", "i", ",", "j", "]", "=", "r3", "*", "fun", "(", "j", "*", "2", "*", "np", ".", "pi", "/", "3.", ")", "\n", "\n", "# Do the transform to tonnetz", "\n", "", "", "", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "d", "in", "range", "(", "6", ")", ":", "\n", "            ", "denom", "=", "float", "(", "C", "[", "i", ",", ":", "]", ".", "sum", "(", ")", ")", "\n", "if", "denom", "==", "0", ":", "\n", "                ", "T", "[", "i", ",", "d", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "T", "[", "i", ",", "d", "]", "=", "1", "/", "denom", "*", "(", "phi", "[", "d", ",", ":", "]", "*", "C", "[", "i", ",", ":", "]", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_smaller_dur_csv": [[169, 176], ["numpy.min"], "function", ["None"], ["", "def", "get_smaller_dur_csv", "(", "score", ",", "thres", "=", "False", ")", ":", "\n", "    ", "\"\"\"Gets the smaller duration of a csv formatted score.\"\"\"", "\n", "min_dur", "=", "np", ".", "min", "(", "score", "[", ":", ",", "CSV_DUR", "]", ")", "\n", "if", "thres", ":", "\n", "        ", "if", "min_dur", "<", "0.25", ":", "\n", "            ", "min_dur", "=", ".25", "\n", "", "", "return", "min_dur", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_total_dur_csv": [[178, 196], ["numpy.argwhere", "numpy.max", "utils.get_offset", "numpy.abs", "numpy.max"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_offset"], ["", "def", "get_total_dur_csv", "(", "score", ")", ":", "\n", "    ", "\"\"\"Computes the total duration of a csv formatted score.\"\"\"", "\n", "# Get indeces for last note", "\n", "max_onsets", "=", "np", ".", "argwhere", "(", "score", "[", ":", ",", "CSV_ONTIME", "]", "==", "\n", "np", ".", "max", "(", "score", "[", ":", ",", "CSV_ONTIME", "]", ")", ")", "\n", "\n", "# Get max dur for last note", "\n", "max_dur", "=", "np", ".", "max", "(", "score", "[", "max_onsets", ",", "CSV_DUR", "]", ")", "\n", "\n", "# Get anacrusa (pick up)", "\n", "min_onset", "=", "get_offset", "(", "score", ")", "\n", "if", "min_onset", ">", "0", ":", "\n", "        ", "min_onset", "=", "0", "\n", "\n", "# Compute total time", "\n", "", "total_dur", "=", "score", "[", "max_onsets", "[", "0", "]", ",", "CSV_ONTIME", "]", "+", "max_dur", "+", "np", ".", "abs", "(", "min_onset", ")", "\n", "\n", "return", "total_dur", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_number_of_staves": [[198, 201], ["int", "numpy.max"], "function", ["None"], ["", "def", "get_number_of_staves", "(", "score", ")", ":", "\n", "    ", "\"\"\"Returns the number of staves for the csv formatted score.\"\"\"", "\n", "return", "int", "(", "np", ".", "max", "(", "score", "[", ":", ",", "CSV_STAFF", "]", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_offset": [[203, 206], ["numpy.min"], "function", ["None"], ["", "def", "get_offset", "(", "score", ")", ":", "\n", "    ", "\"\"\"Returns the offset (pick up measure), if any, from the score.\"\"\"", "\n", "return", "np", ".", "min", "(", "score", "[", ":", ",", "CSV_ONTIME", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.midi_to_chroma": [[208, 212], ["None"], "function", ["None"], ["", "def", "midi_to_chroma", "(", "pitch", ")", ":", "\n", "    ", "\"\"\"Given a midi pitch (e.g. 60 == C), returns its corresponding\n        chroma class value. A == 0, A# == 1, ..., G# == 11 \"\"\"", "\n", "return", "(", "(", "pitch", "%", "12", ")", "+", "3", ")", "%", "12", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.csv_to_chromagram": [[214, 237], ["utils.get_smaller_dur_csv", "utils.get_total_dur_csv", "numpy.ceil", "numpy.zeros", "numpy.abs", "int", "utils.midi_to_chroma", "float", "int", "int", "utils.get_offset", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_smaller_dur_csv", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_total_dur_csv", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.midi_to_chroma", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.get_offset"], ["", "def", "csv_to_chromagram", "(", "score", ")", ":", "\n", "    ", "\"\"\"Obtains a chromagram representation from a csv score.\"\"\"", "\n", "# get smaller duration", "\n", "h", "=", "get_smaller_dur_csv", "(", "score", ",", "thres", "=", "True", ")", "\n", "\n", "# Get the total duration", "\n", "total_dur", "=", "get_total_dur_csv", "(", "score", ")", "\n", "\n", "# Init the Chromagra", "\n", "N", "=", "np", ".", "ceil", "(", "total_dur", "/", "float", "(", "h", ")", ")", "\n", "C", "=", "np", ".", "zeros", "(", "(", "N", ",", "12", ")", ")", "\n", "\n", "# offset", "\n", "offset", "=", "np", ".", "abs", "(", "int", "(", "get_offset", "(", "score", ")", "/", "float", "(", "h", ")", ")", ")", "\n", "\n", "# Compute the chromagram", "\n", "for", "row", "in", "score", ":", "\n", "        ", "pitch", "=", "midi_to_chroma", "(", "row", "[", "CSV_MIDI", "]", ")", "\n", "start", "=", "int", "(", "row", "[", "CSV_ONTIME", "]", "/", "float", "(", "h", ")", ")", "+", "offset", "\n", "end", "=", "start", "+", "int", "(", "row", "[", "CSV_DUR", "]", "/", "float", "(", "h", ")", ")", "\n", "C", "[", "start", ":", "end", ",", "pitch", "]", "=", "1", "\n", "\n", "", "return", "C", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.median_filter": [[239, 247], ["numpy.arange", "numpy.ones", "X.min", "numpy.median"], "function", ["None"], ["", "def", "median_filter", "(", "X", ",", "L", "=", "9", ")", ":", "\n", "    ", "\"\"\"Applies a median filter of size L to the matrix of row\n        observations X.\"\"\"", "\n", "Y", "=", "np", ".", "ones", "(", "X", ".", "shape", ")", "*", "X", ".", "min", "(", ")", "\n", "Lh", "=", "(", "L", "-", "1", ")", "/", "2", "\n", "for", "i", "in", "np", ".", "arange", "(", "Lh", ",", "X", ".", "shape", "[", "0", "]", "-", "Lh", ")", ":", "\n", "        ", "Y", "[", "i", ",", ":", "]", "=", "np", ".", "median", "(", "X", "[", "i", "-", "Lh", ":", "i", "+", "Lh", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.mean_filter": [[249, 256], ["numpy.arange", "numpy.ones", "X.min", "numpy.mean"], "function", ["None"], ["", "def", "mean_filter", "(", "X", ",", "L", "=", "9", ")", ":", "\n", "    ", "\"\"\"Applies a mean filter of size L to the matrix of row observations X.\"\"\"", "\n", "Y", "=", "np", ".", "ones", "(", "X", ".", "shape", ")", "*", "X", ".", "min", "(", ")", "\n", "Lh", "=", "(", "L", "-", "1", ")", "/", "2", "\n", "for", "i", "in", "np", ".", "arange", "(", "Lh", ",", "X", ".", "shape", "[", "0", "]", "-", "Lh", ")", ":", "\n", "        ", "Y", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "X", "[", "i", "-", "Lh", ":", "i", "+", "Lh", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.is_square": [[258, 271], ["subX.trace", "subX.trace"], "function", ["None"], ["", "def", "is_square", "(", "X", ",", "start_i", ",", "start_j", ",", "M", ",", "th", ")", ":", "\n", "    ", "\"\"\"Checks whether the block of the ssm defined with start_i, start_j\n        contains \"squared\" information or not.\"\"\"", "\n", "try", ":", "\n", "        ", "subX", "=", "X", "[", "start_i", ":", "start_i", "+", "M", ",", "start_j", ":", "start_j", "+", "M", "]", "\n", "rho", "=", "1", "\n", "if", "subX", ".", "trace", "(", "offset", "=", "rho", ")", ">=", "(", "M", "-", "rho", "*", "2", ")", "*", "th", "or", "subX", ".", "trace", "(", "offset", "=", "-", "rho", ")", ">=", "(", "M", "-", "rho", "*", "2", ")", "*", "th", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.split_patterns": [[273, 337], ["len", "numpy.zeros", "range", "range", "range", "s_patterns.append", "enumerate", "s_patterns.append", "new_p.append", "new_p.append", "new_p.append", "s_patterns.append", "s_patterns.append", "first_new_p.append", "last_new_p.append"], "function", ["None"], ["", "", "def", "split_patterns", "(", "patterns", ",", "max_diff", ",", "min_dur", ")", ":", "\n", "    ", "\"\"\"Splits the patterns in case they are included one inside the other.\"\"\"", "\n", "s_patterns", "=", "[", "]", "\n", "\n", "N", "=", "len", "(", "patterns", ")", "\n", "splitted", "=", "np", ".", "zeros", "(", "N", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "o1", "=", "patterns", "[", "i", "]", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "continue", "\n", "", "if", "splitted", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "", "o2", "=", "patterns", "[", "j", "]", "[", "0", "]", "\n", "\n", "# Check if we have to split", "\n", "if", "o1", "[", "0", "]", ">", "o2", "[", "0", "]", "and", "o1", "[", "1", "]", "<", "o2", "[", "1", "]", "and", "(", "(", "o2", "[", "1", "]", "-", "o1", "[", "1", "]", ")", "-", "(", "o1", "[", "1", "]", "-", "o1", "[", "0", "]", ")", ">", "max_diff", ")", ":", "\n", "                ", "new_p", "=", "[", "]", "\n", "\n", "# Add original pattern", "\n", "for", "p", "in", "patterns", "[", "i", "]", ":", "\n", "                    ", "new_p", ".", "append", "(", "p", ")", "\n", "\n", "# Add splitted pattern", "\n", "", "for", "k", ",", "p", "in", "enumerate", "(", "patterns", "[", "j", "]", ")", ":", "\n", "                    ", "if", "k", "==", "0", ":", "\n", "                        ", "continue", "# Do not add the diagonal repetition", "\n", "", "start_j", "=", "p", "[", "2", "]", "+", "(", "o1", "[", "0", "]", "-", "o2", "[", "0", "]", ")", "\n", "end_j", "=", "p", "[", "3", "]", "-", "(", "o2", "[", "1", "]", "-", "o1", "[", "1", "]", ")", "\n", "new_p", ".", "append", "(", "[", "o1", "[", "0", "]", ",", "o1", "[", "1", "]", ",", "start_j", ",", "end_j", "]", ")", "\n", "\n", "# Add new pattern to the splitted ones", "\n", "", "s_patterns", ".", "append", "(", "new_p", ")", "\n", "\n", "# Create new pattern from the first part if needed", "\n", "if", "o1", "[", "0", "]", "-", "o2", "[", "0", "]", ">", "min_dur", ":", "\n", "                    ", "first_new_p", "=", "[", "]", "\n", "for", "p", "in", "patterns", "[", "j", "]", ":", "\n", "                        ", "end_j", "=", "p", "[", "2", "]", "+", "(", "o1", "[", "0", "]", "-", "p", "[", "0", "]", ")", "\n", "first_new_p", ".", "append", "(", "[", "p", "[", "0", "]", ",", "o1", "[", "0", "]", ",", "p", "[", "2", "]", ",", "end_j", "]", ")", "\n", "", "s_patterns", ".", "append", "(", "first_new_p", ")", "\n", "\n", "# Create new pattern from the last part if needed", "\n", "", "if", "o2", "[", "1", "]", "-", "o1", "[", "1", "]", ">", "min_dur", ":", "\n", "                    ", "last_new_p", "=", "[", "]", "\n", "for", "p", "in", "patterns", "[", "j", "]", ":", "\n", "                        ", "start_j", "=", "p", "[", "3", "]", "-", "(", "p", "[", "1", "]", "-", "o1", "[", "1", "]", ")", "\n", "last_new_p", ".", "append", "(", "[", "o1", "[", "1", "]", ",", "p", "[", "1", "]", ",", "start_j", ",", "p", "[", "3", "]", "]", ")", "\n", "", "s_patterns", ".", "append", "(", "last_new_p", ")", "\n", "\n", "# Marked a splitted", "\n", "", "splitted", "[", "i", "]", "=", "1", "\n", "splitted", "[", "j", "]", "=", "1", "\n", "\n", "# Add the rest of non-splitted patterns", "\n", "", "", "", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "if", "splitted", "[", "i", "]", "==", "0", ":", "\n", "            ", "new_p", "=", "[", "]", "\n", "for", "p", "in", "patterns", "[", "i", "]", ":", "\n", "                ", "new_p", ".", "append", "(", "p", ")", "\n", "", "s_patterns", ".", "append", "(", "new_p", ")", "\n", "\n", "", "", "return", "s_patterns", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.save_results": [[339, 353], ["open", "open.close", "open.write", "open.write", "open.write"], "function", ["None"], ["", "def", "save_results", "(", "csv_patterns", ",", "outfile", "=", "\"results.txt\"", ")", ":", "\n", "    ", "\"\"\"Saves the results into the output file, following the MIREX format.\"\"\"", "\n", "f", "=", "open", "(", "outfile", ",", "\"w\"", ")", "\n", "P", "=", "1", "\n", "for", "pattern", "in", "csv_patterns", ":", "\n", "        ", "f", ".", "write", "(", "\"pattern%d\\n\"", "%", "P", ")", "\n", "O", "=", "1", "\n", "for", "occ", "in", "pattern", ":", "\n", "            ", "f", ".", "write", "(", "\"occurrence%d\\n\"", "%", "O", ")", "\n", "for", "row", "in", "occ", ":", "\n", "                ", "f", ".", "write", "(", "\"%f, %f\\n\"", "%", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", ")", "\n", "", "O", "+=", "1", "\n", "", "P", "+=", "1", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.save_results_raw": [[355, 368], ["open", "open.close", "print", "open.write", "open.write", "str", "str", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "save_results_raw", "(", "csv_patterns", ",", "outfile", "=", "\"results.txt\"", ")", ":", "\n", "    ", "\"\"\"Saves the raw results into the output file\"\"\"", "\n", "f", "=", "open", "(", "outfile", ",", "\"w\"", ")", "\n", "P", "=", "1", "\n", "for", "pattern", "in", "csv_patterns", ":", "\n", "        ", "f", ".", "write", "(", "\"pattern%d\\n\"", "%", "P", ")", "\n", "for", "occ", "in", "pattern", "[", "1", ":", "]", ":", "\n", "            ", "to_write", "=", "str", "(", "np", ".", "array", "(", "occ", ")", "[", ":", "2", "]", ")", "[", "1", ":", "-", "1", "]", "+", "\"->\"", "+", "str", "(", "np", ".", "array", "(", "\n", "occ", ")", "[", "2", ":", "]", ")", "[", "1", ":", "-", "1", "]", "+", "\"\\n\"", "\n", "f", ".", "write", "(", "to_write", ")", "\n", "", "P", "+=", "1", "\n", "", "f", ".", "close", "(", ")", "\n", "print", "(", "f\"Patterns written to {outfile}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_segment_score_omega": [[370, 401], ["numpy.arange", "numpy.eye", "numpy.concatenate", "numpy.eye", "numpy.zeros", "numpy.maximum", "numpy.arange", "numpy.sum", "numpy.minimum"], "function", ["None"], ["", "def", "compute_segment_score_omega", "(", "X", ",", "start_i", ",", "start_j", ",", "min_dur", ",", "th", ",", "rho", ")", ":", "\n", "    ", "\"\"\"Computes the score for a given segment. The score is computed by\n        taking a look at the trace of the block of the ssm.\"\"\"", "\n", "# Compute initial score", "\n", "M", "=", "1", "\n", "final_score", "=", "0", "\n", "while", "start_i", "+", "M", "<", "X", ".", "shape", "[", "0", "]", "and", "start_j", "+", "M", "<", "X", ".", "shape", "[", "0", "]", ":", "\n", "        ", "patch", "=", "X", "[", "start_i", ":", "start_i", "+", "M", ",", "start_j", ":", "start_j", "+", "M", "]", "\n", "\n", "cons_n_prev", "=", "10", "\n", "\n", "if", "M", "==", "1", ":", "\n", "            ", "weighted", "=", "np", ".", "eye", "(", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "np", ".", "maximum", "(", "0", ",", "M", "-", "cons_n_prev", ")", ")", ",", "\n", "np", ".", "arange", "(", "np", ".", "minimum", "(", "M", ",", "cons_n_prev", ")", ")", "+", "1", ")", ")", "\n", "weighted", "=", "(", "weight", "*", "np", ".", "eye", "(", "M", ",", "M", ")", ")", "\n", "\n", "", "score", "=", "0", "\n", "for", "omega", "in", "np", ".", "arange", "(", "-", "rho", "+", "1", ",", "rho", ")", ":", "\n", "            ", "score", "+=", "(", "patch", "*", "weighted", "/", "np", ".", "sum", "(", "weighted", ")", ")", ".", "trace", "(", "offset", "=", "omega", ")", "\n", "", "if", "score", "<=", "th", ":", "\n", "            ", "break", "\n", "\n", "", "M", "+=", "1", "\n", "final_score", "=", "score", "\n", "\n", "", "if", "M", "<", "min_dur", ":", "\n", "        ", "final_score", "=", "0", "\n", "\n", "", "return", "final_score", ",", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_segment_score": [[403, 430], ["patch.trace", "patch.trace", "patch.trace", "patch.trace", "patch.trace", "print"], "function", ["None"], ["", "def", "compute_segment_score", "(", "X", ",", "start_i", ",", "start_j", ",", "min_dur", ",", "th", ")", ":", "\n", "    ", "\"\"\"Computes the score for a given segment. The score is computed by\n        taking a look at the trace of the block of the ssm.\"\"\"", "\n", "# Compute initial score", "\n", "M", "=", "min_dur", "\n", "final_score", "=", "0", "\n", "while", "start_i", "+", "M", "<", "X", ".", "shape", "[", "0", "]", "and", "start_j", "+", "M", "<", "X", ".", "shape", "[", "0", "]", ":", "\n", "        ", "patch", "=", "X", "[", "start_i", ":", "start_i", "+", "M", ",", "start_j", ":", "start_j", "+", "M", "]", "\n", "score", "=", "0", "\n", "score", "+=", "patch", ".", "trace", "(", "offset", "=", "0", ")", "\n", "score", "+=", "patch", ".", "trace", "(", "offset", "=", "1", ")", "\n", "score", "+=", "patch", ".", "trace", "(", "offset", "=", "-", "1", ")", "\n", "score", "-=", "patch", ".", "trace", "(", "offset", "=", "2", ")", "\n", "score", "-=", "patch", ".", "trace", "(", "offset", "=", "-", "2", ")", "\n", "# score -= patch.trace(offset=3)", "\n", "# score -= patch.trace(offset=-3)", "\n", "score", "/=", "(", "patch", ".", "shape", "[", "0", "]", "+", "2", "*", "(", "patch", ".", "shape", "[", "0", "]", "-", "1", ")", ")", "\n", "\n", "print", "(", "score", ")", "\n", "\n", "break", "\n", "M", "+=", "1", "\n", "if", "score", "<=", "th", ":", "\n", "            ", "break", "\n", "", "final_score", "=", "score", "\n", "\n", "", "return", "final_score", ",", "M", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.find_segments": [[432, 456], ["range", "range", "utils.compute_segment_score_omega", "print", "range", "segments.append", "print", "numpy.eye", "float"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_segment_score_omega"], ["", "def", "find_segments", "(", "X", ",", "min_dur", ",", "th", "=", "0.95", ",", "rho", "=", "2", ")", ":", "\n", "    ", "\"\"\"Finds the segment inside the self similarity matrix X.\"\"\"", "\n", "N", "=", "X", ".", "shape", "[", "0", "]", "\n", "segments", "=", "[", "]", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "N", "-", "min_dur", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "N", "-", "min_dur", ")", ":", "\n", "# print i, j, min_dur", "\n", "# Compute score and assign", "\n", "            ", "score", ",", "M", "=", "compute_segment_score_omega", "(", "X", ",", "i", ",", "j", ",", "min_dur", ",", "th", ",", "rho", ")", "\n", "if", "score", ">", "th", ":", "# and not is_square(X, i, j, M, 0.97):", "\n", "                ", "print", "(", "score", ",", "i", ",", "j", ",", "M", ")", "\n", "#                 plt.imshow(X[i:i+M, j:j+M], interpolation=\"nearest\")", "\n", "#                 plt.show()", "\n", "for", "k", "in", "range", "(", "-", "3", ",", "4", ")", ":", "\n", "                    ", "X", "[", "i", ":", "i", "+", "M", ",", "j", ":", "j", "+", "M", "]", "*=", "(", "1", "-", "np", ".", "eye", "(", "M", ",", "M", ",", "k", "=", "k", ")", ")", "\n", "", "segments", ".", "append", "(", "[", "i", ",", "i", "+", "M", ",", "j", ",", "j", "+", "M", "]", ")", "\n", "\n", "# Counter stuff", "\n", "", "counter", "+=", "1", "\n", "if", "counter", "%", "(", "10", "*", "N", ")", "==", "0", ":", "\n", "                ", "print", "(", "\"\\t------ %.2f %%\"", "%", "(", "counter", "/", "float", "(", "N", "*", "(", "N", "-", "1", ")", "/", "2.", ")", "*", "100", ")", ")", "\n", "", "", "", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.read_csv": [[458, 470], ["open", "csv.reader", "numpy.asarray", "open.close", "np.asarray.append", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "read_csv", "(", "csv_file", ")", ":", "\n", "    ", "\"\"\"Reads a csv into a numpy array.\"\"\"", "\n", "f", "=", "open", "(", "csv_file", ",", "\"r\"", ")", "\n", "csvscore", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\",\"", ")", "\n", "score", "=", "[", "]", "\n", "for", "row", "in", "csvscore", ":", "\n", "        ", "score", ".", "append", "(", "[", "float", "(", "row", "[", "CSV_ONTIME", "]", ")", ",", "float", "(", "row", "[", "CSV_MIDI", "]", ")", ",", "\n", "float", "(", "row", "[", "CSV_HEIGHT", "]", ")", ",", "float", "(", "row", "[", "CSV_DUR", "]", ")", ",", "\n", "float", "(", "row", "[", "CSV_STAFF", "]", ")", "]", ")", "\n", "", "score", "=", "np", ".", "asarray", "(", "score", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.read_wav": [[472, 484], ["os.path.isfile", "librosa.core.load"], "function", ["None"], ["", "def", "read_wav", "(", "wav_file", ")", ":", "\n", "    ", "\"\"\"Reads the wav file and downsamples to 11025 Hz.\"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "wav_file", ")", ",", "'ERROR: wivefile file %s does not exist'", "%", "wav_file", "\n", "\n", "x", ",", "fs", "=", "librosa", ".", "core", ".", "load", "(", "wav_file", ",", "sr", "=", "11025", ")", "\n", "# if len(x.shape) >= 2:", "\n", "#     x = x[:, 0]  # Make mono", "\n", "\n", "assert", "fs", "==", "11025", ",", "\"ERROR: File %s is not sampled at 11025 Hz\"", "%", "wav_file", "\n", "\n", "return", "x", ",", "fs", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_spectrogram": [[486, 506], ["int", "logging.info", "numpy.blackman", "range", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "numpy.mean", "numpy.fft.fft", "numpy.abs", "len"], "function", ["None"], ["", "def", "compute_spectrogram", "(", "x", ",", "wlen", ",", "fs", ")", ":", "\n", "    ", "\"\"\"Computes a spectrogram.\"\"\"", "\n", "N", "=", "int", "(", "fs", "*", "wlen", ")", "\n", "nstep", "=", "N", "/", "2", "# Hop size of 0.5 * N", "\n", "nwin", "=", "N", "\n", "\n", "logging", ".", "info", "(", "\"Spectrogram: sample rate: %d, hop size: %d, FFT size: %d\"", "%", "\n", "(", "fs", ",", "nstep", ",", "N", ")", ")", "\n", "\n", "window", "=", "np", ".", "blackman", "(", "nwin", ")", "\n", "nn", "=", "range", "(", "nwin", ",", "len", "(", "x", ")", ",", "nstep", ")", "\n", "X", "=", "np", ".", "zeros", "(", "(", "len", "(", "nn", ")", ",", "N", "/", "2", ")", ")", "\n", "x_down", "=", "np", ".", "zeros", "(", "len", "(", "nn", ")", ")", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "nn", ")", ":", "\n", "        ", "xseg", "=", "x", "[", "n", "-", "nwin", ":", "n", "]", "\n", "x_down", "[", "i", "]", "=", "np", ".", "mean", "(", "xseg", ")", "\n", "z", "=", "np", ".", "fft", ".", "fft", "(", "window", "*", "xseg", ",", "N", ")", "\n", "X", "[", "i", ",", ":", "]", "=", "np", ".", "abs", "(", "z", "[", ":", "N", "/", "2", "]", ")", "\n", "\n", "", "return", "X", ",", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.freq2bin": [[508, 510], ["int"], "function", ["None"], ["", "def", "freq2bin", "(", "f", ",", "N", ",", "fs", ")", ":", "\n", "    ", "return", "int", "(", "f", "*", "N", "/", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_CQT_filters": [[512, 529], ["numpy.zeros", "range", "range", "utils.freq2bin", "utils.freq2bin", "numpy.blackman", "np.blackman.sum"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.freq2bin", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.freq2bin"], ["", "def", "compute_CQT_filters", "(", "N", ",", "fs", ")", ":", "\n", "    ", "\"\"\"Computes the CQT filters.\"\"\"", "\n", "O", "=", "4", "\n", "min_f", "=", "55", "\n", "filters", "=", "np", ".", "zeros", "(", "(", "12", ",", "N", "/", "2", ")", ")", "\n", "for", "p", "in", "range", "(", "12", ")", ":", "\n", "        ", "for", "octave", "in", "range", "(", "O", ")", ":", "\n", "            ", "start_bin", "=", "freq2bin", "(", "min_f", "*", "2", "**", "(", "octave", "+", "(", "p", "-", "1", ")", "/", "12.", ")", ",", "N", ",", "fs", ")", "\n", "center_bin", "=", "freq2bin", "(", "min_f", "*", "2", "**", "(", "octave", "+", "p", "/", "12.", ")", ",", "N", ",", "fs", ")", "\n", "M", "=", "(", "center_bin", "-", "start_bin", ")", "*", "2", "+", "1", "\n", "filt", "=", "np", ".", "blackman", "(", "M", ")", "\n", "filt", "/=", "filt", ".", "sum", "(", ")", "\n", "filters", "[", "p", ",", "start_bin", ":", "start_bin", "+", "M", "]", "=", "filt", "\n", "\n", "# plot_matrix(filters)", "\n", "\n", "", "", "return", "filters", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_audio_chromagram": [[531, 553], ["utils.read_wav", "utils.compute_spectrogram", "utils.compute_CQT_filters", "numpy.dot", "range", "np.dot.max", "C[].max", "C[].max"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.read_wav", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_spectrogram", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.compute_CQT_filters"], ["", "def", "compute_audio_chromagram", "(", "wav_file", ",", "h", ")", ":", "\n", "    ", "\"\"\"Computes the PCP.\"\"\"", "\n", "\n", "# Read the wav file", "\n", "x", ",", "fs", "=", "read_wav", "(", "wav_file", ")", "\n", "\n", "# Compute the spectrogram", "\n", "X", ",", "N", "=", "compute_spectrogram", "(", "x", ",", "h", ",", "fs", ")", "\n", "\n", "filters", "=", "compute_CQT_filters", "(", "N", ",", "fs", ")", "\n", "C", "=", "np", ".", "dot", "(", "X", ",", "filters", ".", "T", ")", "\n", "for", "i", "in", "range", "(", "C", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Normalize (if greater than a certain energy)", "\n", "        ", "if", "C", "[", "i", ",", ":", "]", ".", "max", "(", ")", ">=", "1", ":", "\n", "            ", "C", "[", "i", ",", ":", "]", "/=", "C", "[", "i", ",", ":", "]", ".", "max", "(", ")", "\n", "\n", "# Normalize", "\n", "", "", "C", "/=", "C", ".", "max", "(", ")", "\n", "\n", "# plot_matrix(C.T)", "\n", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.sonify_patterns": [[555, 574], ["utils.read_wav", "utils.ensure_dir", "enumerate", "enumerate", "int", "int", "os.path.join", "librosa.output.write_wav", "int", "float", "float"], "function", ["home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.read_wav", "home.repos.pwc.inspect_result.SonyCSLParis_cae-invar.motives_extractor.utils.ensure_dir"], ["", "def", "sonify_patterns", "(", "wav_file", ",", "patterns", ",", "h", ",", "out_dir", "=", "\"sonify\"", ")", ":", "\n", "    ", "\"\"\"Sonifies the patterns.\"\"\"", "\n", "# Read the wav file", "\n", "x", ",", "fs", "=", "read_wav", "(", "wav_file", ")", "\n", "\n", "# Make sure that directory exists", "\n", "ensure_dir", "(", "out_dir", ")", "\n", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "patterns", ")", ":", "\n", "        ", "for", "j", ",", "occ", "in", "enumerate", "(", "p", ")", ":", "\n", "            ", "hop", "=", "int", "(", "h", "*", "fs", ")", "/", "2.", "\n", "start", "=", "int", "(", "occ", "[", "2", "]", "*", "hop", ")", "\n", "end", "=", "int", "(", "occ", "[", "3", "]", "*", "hop", ")", "\n", "audio_pattern", "=", "x", "[", "start", ":", "end", "]", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\n", "\"pattern%d_occ%d_%.1f-%.1f.wav\"", "%", "\n", "(", "\n", "i", ",", "j", ",", "start", "/", "float", "(", "fs", ")", ",", "end", "/", "float", "(", "fs", ")", ")", ")", "\n", "librosa", ".", "output", ".", "write_wav", "(", "file_name", ",", "audio_pattern", ",", "fs", ")", "\n", "", "", "", ""]]}