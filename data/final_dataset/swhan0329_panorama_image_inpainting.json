{"home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.train": [[16, 543], ["torch.manual_seed", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "os.path.join", "os.path.join", "nn.L1Loss().to", "nn.BCELoss().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "sum", "sum", "sum", "sum", "sum", "print", "print", "print", "print", "print", "print", "torch.cuda.is_available", "Exception", "torch.device", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "data.dataset.PanoramaDataset", "data.dataset.PanoramaDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "np.ceil", "len", "np.ceil", "model.PIUnet2.FaceGenerator", "model.PIUnet2.FaceDis", "model.PIUnet2.CubeGenerator", "model.PIUnet2.WholeDis", "model.PIUnet2.SliceDis", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "list", "list", "x.to().detach().numpy().transpose", "x.to().detach().numpy().transpose", "range", "torch.utils.tensorboard.SummaryWriter.close", "torch.utils.tensorboard.SummaryWriter.close", "os.path.join", "os.path.join", "os.path.join", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "nn.L1Loss", "nn.BCELoss", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.join", "os.path.join", "np.prod", "np.prod", "np.prod", "np.prod", "np.prod", "utils.util.face_load", "utils.util.cube_load", "torch.nn.DataParallel.train", "torch.nn.DataParallel.train", "torch.nn.DataParallel.train", "torch.nn.DataParallel.train", "torch.nn.DataParallel.train", "enumerate", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "data.dataset.Normalize", "data.dataset.ToTensor", "data.dataset.Normalize", "data.dataset.ToTensor", "os.path.join", "os.path.join", "x.to().detach().numpy", "x.to().detach().numpy", "list", "torch.nn.DataParallel.parameters", "list", "torch.nn.DataParallel.parameters", "list", "torch.nn.DataParallel.parameters", "list", "torch.nn.DataParallel.parameters", "list", "torch.nn.DataParallel.parameters", "sample[].to", "sample[].to", "sample[].to.view", "torch.cat", "torch.cat", "torch.nn.DataParallel.", "netFaceG.view", "torch.split", "torch.flip", "torch.flip", "torch.cat", "torch.cat", "st1_cube_inp.view", "sample[].to.view", "torch.cat", "torch.nn.DataParallel.", "netCubeG.view", "torch.cat", "torch.cat", "x_real_cube_mask.view.view", "x_fake_cube_mask.view.view", "utils.util.set_requires_grad", "utils.util.set_requires_grad", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "train.calc_gradient_penalty", "train.calc_gradient_penalty", "loss_CD.backward", "utils.util.set_requires_grad", "utils.util.set_requires_grad", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "nn.L1Loss().to.", "nn.L1Loss().to.", "loss_CG.backward", "utils.util.set_requires_grad", "torch.optim.Adam.zero_grad", "torch.cat", "torch.cat", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "nn.BCELoss().to.", "nn.BCELoss().to.", "loss_FD.backward", "utils.util.set_requires_grad", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel.", "nn.L1Loss().to.", "nn.L1Loss().to.", "nn.BCELoss().to.", "loss_FG.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "print", "np.mean", "np.mean", "np.mean", "np.mean", "torch.no_grad", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "enumerate", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "utils.util.face_save", "utils.util.cube_save", "p.size", "p.size", "p.size", "p.size", "p.size", "int", "x_fake_cube_mask.view.detach", "x_fake_cube_mask.view.detach", "x_fake_cube_mask.view.detach", "x_fake_cube_mask.view.detach", "torch.mean", "torch.mean", "torch.mean", "torch.cat.detach", "torch.ones_like", "torch.zeros_like", "torch.ones_like", "loss_FG.item", "loss_CG.item", "loss_FD.item", "loss_CD.item", "fn_tonumpy_4", "fn_tonumpy_4", "fn_tonumpy_4", "fn_tonumpy", "fn_tonumpy", "fn_tonumpy", "utils.cube_to_equi.c2e", "utils.cube_to_equi.c2e", "utils.cube_to_equi.c2e", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "sample[].to", "sample[].to", "sample[].to.view", "torch.cat", "torch.cat", "torch.nn.DataParallel.", "netFaceG.view", "torch.split", "torch.flip", "torch.flip", "torch.cat", "torch.cat", "st1_cube_inp.view", "sample[].to.view", "torch.cat", "torch.nn.DataParallel.", "netCubeG.view", "torch.cat", "x_fake_cube_mask.view.view", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "nn.L1Loss().to.", "nn.L1Loss().to.", "torch.cat", "torch.nn.DataParallel.", "nn.L1Loss().to.", "nn.L1Loss().to.", "nn.BCELoss().to.", "print", "np.mean", "np.mean", "x.to().detach", "x.to().detach", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.mean", "fn_denorm", "fn_denorm", "fn_denorm", "fn_denorm", "fn_denorm", "fn_denorm", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int", "torch.mean", "torch.ones_like", "loss_FG.item", "loss_CG.item", "fn_tonumpy_4", "fn_tonumpy_4", "fn_tonumpy", "fn_tonumpy", "fn_tonumpy", "utils.cube_to_equi.c2e", "utils.cube_to_equi.c2e", "utils.cube_to_equi.c2e", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "np.mean", "np.mean", "np.mean", "np.mean", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.mean", "fn_denorm", "fn_denorm", "fn_denorm", "fn_denorm", "fn_denorm", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "x.to", "x.to", "np.mean", "np.mean"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.face_load", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.cube_load", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.train", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.train", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.train", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.train", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.train", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.set_requires_grad", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.set_requires_grad", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.calc_gradient_penalty", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.calc_gradient_penalty", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.set_requires_grad", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.set_requires_grad", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.set_requires_grad", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.set_requires_grad", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.face_save", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.cube_save", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip"], ["def", "train", "(", "args", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "2020", ")", "\n", "## \ud2b8\ub808\uc774\ub2dd \ud30c\ub77c\uba54\ud130 \uc124\uc815\ud558\uae30", "\n", "mode", "=", "args", ".", "mode", "\n", "train_continue", "=", "args", ".", "train_continue", "\n", "data_parallel", "=", "args", ".", "data_parallel", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "num_epoch", "=", "args", ".", "num_epoch", "\n", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "ckpt_dir", "=", "args", ".", "ckpt_dir", "\n", "log_dir", "=", "args", ".", "log_dir", "\n", "result_dir", "=", "args", ".", "result_dir", "\n", "\n", "nker", "=", "args", ".", "nker", "\n", "norm", "=", "args", ".", "norm", "\n", "\n", "network", "=", "args", ".", "network", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "==", "False", ":", "\n", "        ", "raise", "Exception", "(", "'At least one gpu must be available.'", ")", "\n", "", "else", ":", "\n", "        ", "gpu", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "\n", "", "print", "(", "\"mode: %s\"", "%", "mode", ")", "\n", "print", "(", "\"data_parallel: %s\"", "%", "data_parallel", ")", "\n", "\n", "print", "(", "\"learning rate: %.4e\"", "%", "lr", ")", "\n", "print", "(", "\"batch size: %d\"", "%", "batch_size", ")", "\n", "print", "(", "\"number of epoch: %d\"", "%", "num_epoch", ")", "\n", "\n", "print", "(", "\"network: %s\"", "%", "network", ")", "\n", "print", "(", "\"norm: %s\"", "%", "norm", ")", "\n", "print", "(", "\"data dir: %s\"", "%", "data_dir", ")", "\n", "print", "(", "\"ckpt dir: %s\"", "%", "ckpt_dir", ")", "\n", "print", "(", "\"log dir: %s\"", "%", "log_dir", ")", "\n", "print", "(", "\"result dir: %s\"", "%", "result_dir", ")", "\n", "\n", "print", "(", "\"device: %s\"", "%", "gpu", ")", "\n", "\n", "## \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\ud558\uae30", "\n", "result_dir_train", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'train'", ")", "\n", "result_dir_val", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'val'", ")", "\n", "result_dir_test", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'test'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir_train", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "result_dir_train", ",", "'png'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir_val", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "result_dir_val", ",", "'png'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir_test", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "result_dir_test", ",", "'png'", ")", ")", "\n", "\n", "## \ub124\ud2b8\uc6cc\ud06c \ud559\uc2b5\ud558\uae30", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "Normalize", "(", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "transform_val", "=", "transforms", ".", "Compose", "(", "[", "Normalize", "(", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "\n", "dataset_train", "=", "PanoramaDataset", "(", "in_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "'train'", ")", ",", "transform", "=", "transform_train", ")", "\n", "dataset_val", "=", "PanoramaDataset", "(", "in_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "'val'", ")", ",", "transform", "=", "transform_val", ")", "\n", "\n", "loader_train", "=", "DataLoader", "(", "\n", "dataset_train", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "loader_val", "=", "DataLoader", "(", "\n", "dataset_val", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "# \uadf8\ubc16\uc5d0 \ubd80\uc218\uc801\uc778 variables \uc124\uc815\ud558\uae30", "\n", "num_data_train", "=", "len", "(", "loader_train", ")", "\n", "num_batch_train", "=", "np", ".", "ceil", "(", "num_data_train", "/", "batch_size", ")", "\n", "\n", "num_data_val", "=", "len", "(", "loader_val", ")", "\n", "num_batch_val", "=", "np", ".", "ceil", "(", "num_data_val", "/", "batch_size", ")", "\n", "\n", "## \ub124\ud2b8\uc6cc\ud06c \uc0dd\uc131\ud558\uae30", "\n", "", "if", "network", "==", "\"PIUnet\"", ":", "\n", "        ", "netFaceG", "=", "FaceGenerator", "(", "\n", "in_channels", "=", "4", ",", "out_channels", "=", "3", ",", "nker", "=", "nker", ",", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "netFaceD", "=", "FaceDis", "(", "in_channels", "=", "6", ",", "out_channels", "=", "1", ",", "\n", "nker", "=", "nker", ",", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "netCubeG", "=", "CubeGenerator", "(", "\n", "in_channels", "=", "4", ",", "out_channels", "=", "3", ",", "nker", "=", "nker", ",", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "netWholeD", "=", "WholeDis", "(", "in_channels", "=", "6", "*", "6", ",", "nker", "=", "nker", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "netSliceD", "=", "SliceDis", "(", "in_channels", "=", "6", ",", "out_channels", "=", "1", ",", "\n", "nker", "=", "nker", ",", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "\n", "if", "data_parallel", ":", "\n", "            ", "netFaceG", "=", "DataParallel", "(", "netFaceG", ")", "\n", "netFaceD", "=", "DataParallel", "(", "netFaceD", ")", "\n", "netCubeG", "=", "DataParallel", "(", "netCubeG", ")", "\n", "netWholeD", "=", "DataParallel", "(", "netWholeD", ")", "\n", "netSliceD", "=", "DataParallel", "(", "netSliceD", ")", "\n", "\n", "", "netFaceG", "=", "netFaceG", ".", "to", "(", "gpu", ")", "\n", "netFaceD", "=", "netFaceD", ".", "to", "(", "gpu", ")", "\n", "netCubeG", "=", "netCubeG", ".", "to", "(", "gpu", ")", "\n", "netWholeD", "=", "netWholeD", ".", "to", "(", "gpu", ")", "\n", "netSliceD", "=", "netSliceD", ".", "to", "(", "gpu", ")", "\n", "\n", "## \uc190\uc2e4\ud568\uc218 \uc815\uc758\ud558\uae30", "\n", "", "fn_l1", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "gpu", ")", "\n", "fn_gan", "=", "nn", ".", "BCELoss", "(", ")", ".", "to", "(", "gpu", ")", "\n", "\n", "## Optimizer \uc124\uc815\ud558\uae30  ", "\n", "optimFG", "=", "torch", ".", "optim", ".", "Adam", "(", "netFaceG", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimCG", "=", "torch", ".", "optim", ".", "Adam", "(", "netCubeG", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimFD", "=", "torch", ".", "optim", ".", "Adam", "(", "netFaceD", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "d_params", "=", "list", "(", "netWholeD", ".", "parameters", "(", ")", ")", "+", "list", "(", "netSliceD", ".", "parameters", "(", ")", ")", "\n", "optimCD", "=", "torch", ".", "optim", ".", "Adam", "(", "d_params", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "## \uadf8\ubc16\uc5d0 \ubd80\uc218\uc801\uc778 functions \uc124\uc815\ud558\uae30", "\n", "fn_tonumpy", "=", "lambda", "x", ":", "x", ".", "to", "(", "\n", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "fn_tonumpy_4", "=", "lambda", "x", ":", "x", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "fn_denorm", "=", "lambda", "x", ",", "mean", ",", "std", ":", "(", "x", "*", "std", ")", "+", "mean", "\n", "\n", "cmap", "=", "None", "\n", "\n", "## Tensorboard \ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c SummaryWriter \uc124\uc815", "\n", "writer_train", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'train'", ")", ")", "\n", "writer_val", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val'", ")", ")", "\n", "\n", "## \ub124\ud2b8\uc6cc\ud06c \ud559\uc2b5\uc2dc\ud0a4\uae30", "\n", "st_epoch", "=", "0", "\n", "FG", "=", "sum", "(", "np", ".", "prod", "(", "list", "(", "p", ".", "size", "(", ")", ")", ")", "for", "p", "in", "netFaceG", ".", "parameters", "(", ")", ")", "\n", "CG", "=", "sum", "(", "np", ".", "prod", "(", "list", "(", "p", ".", "size", "(", ")", ")", ")", "for", "p", "in", "netCubeG", ".", "parameters", "(", ")", ")", "\n", "FD", "=", "sum", "(", "np", ".", "prod", "(", "list", "(", "p", ".", "size", "(", ")", ")", ")", "for", "p", "in", "netFaceD", ".", "parameters", "(", ")", ")", "\n", "WD", "=", "sum", "(", "np", ".", "prod", "(", "list", "(", "p", ".", "size", "(", ")", ")", ")", "for", "p", "in", "netWholeD", ".", "parameters", "(", ")", ")", "\n", "SD", "=", "sum", "(", "np", ".", "prod", "(", "list", "(", "p", ".", "size", "(", ")", ")", ")", "for", "p", "in", "netSliceD", ".", "parameters", "(", ")", ")", "\n", "\n", "print", "(", "'Number of params in netFaceG: %d'", "%", "FG", ")", "\n", "print", "(", "'Number of params in netFD: %d'", "%", "FD", ")", "\n", "print", "(", "'Number of params in netCubeG: %d'", "%", "CG", ")", "\n", "print", "(", "'Number of params in netWD: %d'", "%", "WD", ")", "\n", "print", "(", "'Number of params in netSD: %d'", "%", "SD", ")", "\n", "print", "(", "'Total Number of params in Network: %d'", "%", "(", "FG", "+", "FD", "+", "CG", "+", "WD", "+", "SD", ")", ")", "\n", "\n", "# TRAIN MODE", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "if", "train_continue", "==", "\"on\"", ":", "\n", "            ", "netFaceG", ",", "netFaceD", ",", "optimFG", ",", "optimFD", ",", "st_epoch", "=", "face_load", "(", "ckpt_dir", "=", "ckpt_dir", ",", "\n", "netFaceG", "=", "netFaceG", ",", "netFaceD", "=", "netFaceD", ",", "optimFG", "=", "optimFG", ",", "optimFD", "=", "optimFD", ")", "\n", "netCubeG", ",", "netWholeD", ",", "netSliceD", ",", "optimCG", ",", "optimCD", ",", "st_epoch", "=", "cube_load", "(", "ckpt_dir", "=", "ckpt_dir", ",", "\n", "netCubeG", "=", "netCubeG", ",", "netWholeD", "=", "netWholeD", ",", "\n", "netSliceD", "=", "netSliceD", ",", "optimCG", "=", "optimCG", ",", "optimCD", "=", "optimCD", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "st_epoch", "+", "1", ",", "num_epoch", "+", "1", ")", ":", "\n", "            ", "netFaceG", ".", "train", "(", ")", "\n", "netFaceD", ".", "train", "(", ")", "\n", "netCubeG", ".", "train", "(", ")", "\n", "netWholeD", ".", "train", "(", ")", "\n", "netSliceD", ".", "train", "(", ")", "\n", "\n", "loss_FG_train", "=", "[", "]", "\n", "loss_CG_train", "=", "[", "]", "\n", "\n", "loss_FD_train", "=", "[", "]", "\n", "loss_CD_train", "=", "[", "]", "\n", "\n", "for", "batch", ",", "sample", "in", "enumerate", "(", "loader_train", ",", "1", ")", ":", "\n", "# forward pass", "\n", "                ", "cube", "=", "sample", "[", "'cube'", "]", ".", "to", "(", "\n", "gpu", ",", "dtype", "=", "torch", ".", "float32", ")", "# B, F, 3, H, W", "\n", "cube_mask", "=", "sample", "[", "'cube_mask'", "]", ".", "to", "(", "\n", "gpu", ",", "dtype", "=", "torch", ".", "float32", ")", "# B, F, 1, H, W", "\n", "cube_mask_4", "=", "cube_mask", ".", "view", "(", "\n", "cube_mask", ".", "shape", "[", "0", "]", ",", "cube_mask", ".", "shape", "[", "1", "]", ",", "cube_mask", ".", "shape", "[", "3", "]", ",", "cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "\n", "# face order is ['f', 'r', 'b', 'l', 't', 'd']", "\n", "# we need 4 faces like this order ['f', 'r', 'b', 'l']", "\n", "# concate 4 faces", "\n", "# ground truth 4 faces -> B, 3, H, W*4", "\n", "g4f", "=", "torch", ".", "cat", "(", "\n", "(", "cube", "[", ":", ",", "0", "]", ",", "torch", ".", "flip", "(", "cube", "[", ":", ",", "1", "]", ",", "[", "3", "]", ")", ",", "torch", ".", "flip", "(", "cube", "[", ":", ",", "2", "]", ",", "[", "3", "]", ")", ",", "cube", "[", ":", ",", "3", "]", ")", ",", "dim", "=", "3", ")", "\n", "# mask 4 faces -> B, 1, H, W*4", "\n", "m4f", "=", "torch", ".", "cat", "(", "\n", "(", "cube_mask", "[", ":", ",", "0", "]", ",", "torch", ".", "flip", "(", "cube_mask", "[", ":", ",", "1", "]", ",", "[", "3", "]", ")", ",", "torch", ".", "flip", "(", "cube_mask", "[", ":", ",", "2", "]", ",", "[", "3", "]", ")", ",", "\n", "cube_mask", "[", ":", ",", "3", "]", ")", ",", "\n", "dim", "=", "3", ")", "\n", "# with mask 4 faces -> B, 3, H, W*4", "\n", "cm4f", "=", "g4f", "-", "g4f", "*", "m4f", "\n", "\n", "# st1_output -> BN, C, H, W*4", "\n", "# st2_output -> BN, 6*C, H, W", "\n", "st1_output", "=", "netFaceG", "(", "g4f", ",", "m4f", ",", "cm4f", ")", "\n", "st1_output_inp", "=", "st1_output", "*", "m4f", "+", "g4f", "*", "(", "1", "-", "m4f", ")", "\n", "\n", "# st1_output -> BN, 4, C, H, W", "\n", "st1_output_5", "=", "st1_output", ".", "view", "(", "st1_output", ".", "shape", "[", "0", "]", ",", "4", ",", "st1_output", ".", "shape", "[", "1", "]", ",", "st1_output", ".", "shape", "[", "2", "]", ",", "\n", "int", "(", "st1_output", ".", "shape", "[", "3", "]", "/", "4", ")", ")", "\n", "\n", "st1_output_split0", ",", "st1_output_split1", ",", "st1_output_split2", ",", "st1_output_split3", "=", "torch", ".", "split", "(", "\n", "st1_output_5", ",", "1", ",", "dim", "=", "1", ")", "\n", "\n", "st1_output_split1", "=", "torch", ".", "flip", "(", "st1_output_split1", "[", ":", "]", ",", "[", "2", "]", ")", "\n", "st1_output_split2", "=", "torch", ".", "flip", "(", "st1_output_split2", "[", ":", "]", ",", "[", "2", "]", ")", "\n", "st1_output_5", "=", "torch", ".", "cat", "(", "\n", "(", "st1_output_split0", ",", "st1_output_split1", ",", "st1_output_split2", ",", "st1_output_split3", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# st1_cube -> BN, 6, C, H, W", "\n", "# st1_cube_4 -> BN, 6*C, H, W", "\n", "st1_cube", "=", "torch", ".", "cat", "(", "\n", "(", "st1_output_5", ",", "cube", "[", ":", ",", "4", ":", "6", "]", "*", "(", "1", "-", "cube_mask", "[", ":", ",", "4", ":", "6", "]", ")", ")", ",", "dim", "=", "1", ")", "\n", "st1_cube_inp", "=", "st1_cube", "*", "cube_mask", "+", "cube", "*", "(", "1", "-", "cube_mask", ")", "\n", "\n", "st1_cube_inp_4", "=", "st1_cube_inp", ".", "view", "(", "\n", "(", "st1_cube_inp", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "st1_cube_inp", ".", "shape", "[", "3", "]", ",", "st1_cube_inp", ".", "shape", "[", "4", "]", ")", ")", "\n", "\n", "cube_mask_4", "=", "cube_mask", ".", "view", "(", "\n", "cube_mask", ".", "shape", "[", "0", "]", ",", "cube_mask", ".", "shape", "[", "1", "]", ",", "cube_mask", ".", "shape", "[", "3", "]", ",", "cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "st2_input", "=", "torch", ".", "cat", "(", "(", "st1_cube_inp_4", ",", "cube_mask_4", ")", ",", "dim", "=", "1", ")", "\n", "\n", "st2_output", "=", "netCubeG", "(", "st2_input", ")", "\n", "st2_output_5", "=", "st2_output", ".", "view", "(", "\n", "st2_output", ".", "shape", "[", "0", "]", ",", "6", ",", "3", ",", "st2_output", ".", "shape", "[", "2", "]", ",", "st2_output", ".", "shape", "[", "3", "]", ")", "\n", "\n", "# cube + cube_mask", "\n", "# x_cube_mask_5 -> BN, 6, 3, H, W", "\n", "x_cube_mask_5", "=", "cube", "-", "cube", "*", "cube_mask", "\n", "\n", "# inpainted_cube -> BN, 6, 3, H, W", "\n", "inpainted_cube", "=", "st2_output_5", "*", "cube_mask", "+", "(", "1", "-", "cube_mask", ")", "*", "cube", "\n", "\n", "# input cube + cube mask / (net output + cube) + cube mask", "\n", "# x_real_cube_mask -> BN, 6*6, H, W", "\n", "# x_fake_cube_mask -> BN, 6*6, H, W", "\n", "x_real_cube_mask", "=", "torch", ".", "cat", "(", "(", "st1_cube_inp", ",", "cube", ")", ",", "dim", "=", "2", ")", "\n", "x_fake_cube_mask", "=", "torch", ".", "cat", "(", "(", "st1_cube_inp", ",", "st2_output_5", ")", ",", "dim", "=", "2", ")", "\n", "x_real_cube_mask", "=", "x_real_cube_mask", ".", "view", "(", "\n", "x_real_cube_mask", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "x_real_cube_mask", ".", "shape", "[", "3", "]", ",", "x_real_cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "x_fake_cube_mask", "=", "x_fake_cube_mask", ".", "view", "(", "\n", "x_fake_cube_mask", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "x_fake_cube_mask", ".", "shape", "[", "3", "]", ",", "x_fake_cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "\n", "# backward netWholeD, netSliceD", "\n", "set_requires_grad", "(", "netWholeD", ",", "True", ")", "\n", "set_requires_grad", "(", "netSliceD", ",", "True", ")", "\n", "optimCD", ".", "zero_grad", "(", ")", "\n", "\n", "pred_whole_real", "=", "netWholeD", "(", "x_real_cube_mask", ")", "\n", "pred_whole_fake", "=", "netWholeD", "(", "x_fake_cube_mask", ".", "detach", "(", ")", ")", "\n", "\n", "pred_slice_real", "=", "netSliceD", "(", "x_real_cube_mask", ")", "\n", "pred_slice_fake", "=", "netSliceD", "(", "x_fake_cube_mask", ".", "detach", "(", ")", ")", "\n", "\n", "whole_penalty", "=", "calc_gradient_penalty", "(", "netWholeD", ",", "x_real_cube_mask", ",", "x_fake_cube_mask", ".", "detach", "(", ")", ",", "gpu", ")", "\n", "slice_penalty", "=", "calc_gradient_penalty", "(", "netSliceD", ",", "x_real_cube_mask", ",", "x_fake_cube_mask", ".", "detach", "(", ")", ",", "gpu", ")", "\n", "loss_wgan_gp", "=", "whole_penalty", "+", "slice_penalty", "\n", "loss_wgan_d", "=", "torch", ".", "mean", "(", "pred_whole_fake", "-", "pred_whole_real", ")", "+", "torch", ".", "mean", "(", "pred_slice_fake", "-", "pred_slice_real", ")", "\n", "loss_CD", "=", "loss_wgan_gp", "*", "10", "+", "loss_wgan_d", "\n", "\n", "loss_CD", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "# backward netCubeG", "\n", "set_requires_grad", "(", "netWholeD", ",", "False", ")", "\n", "set_requires_grad", "(", "netSliceD", ",", "False", ")", "\n", "optimCG", ".", "zero_grad", "(", ")", "\n", "\n", "pred_whole_fake", "=", "netWholeD", "(", "x_fake_cube_mask", ")", "\n", "pred_slice_fake", "=", "netSliceD", "(", "x_fake_cube_mask", ")", "\n", "\n", "loss_l1", "=", "fn_l1", "(", "st2_output_5", "*", "cube_mask", ",", "cube", "*", "cube_mask", ")", "\n", "loss_ae", "=", "fn_l1", "(", "st2_output_5", "*", "(", "1", "-", "cube_mask", ")", ",", "cube", "*", "(", "1", "-", "cube_mask", ")", ")", "\n", "loss_G_wgan", "=", "-", "torch", ".", "mean", "(", "pred_whole_fake", ")", "-", "torch", ".", "mean", "(", "pred_slice_fake", ")", "\n", "loss_CG", "=", "loss_G_wgan", "*", "0.001", "+", "loss_l1", "*", "10", "+", "loss_ae", "\n", "\n", "loss_CG", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "# backward netFaceD", "\n", "set_requires_grad", "(", "netFaceD", ",", "True", ")", "\n", "optimFD", ".", "zero_grad", "(", ")", "\n", "\n", "# input face + face gt / net output + face gt", "\n", "# x_real_face_mask -> BN, 6, H, W*4", "\n", "# x_fake_face_mask -> BN, 6, H, W*4", "\n", "x_real_face_mask", "=", "torch", ".", "cat", "(", "(", "cm4f", ",", "g4f", ")", ",", "dim", "=", "1", ")", "\n", "x_fake_face_mask", "=", "torch", ".", "cat", "(", "(", "cm4f", ",", "st1_output", ")", ",", "dim", "=", "1", ")", "\n", "\n", "pred_face_real", "=", "netFaceD", "(", "x_real_face_mask", ")", "\n", "pred_face_fake", "=", "netFaceD", "(", "x_fake_face_mask", ".", "detach", "(", ")", ")", "\n", "dis_real_loss", "=", "fn_gan", "(", "\n", "pred_face_real", ",", "torch", ".", "ones_like", "(", "pred_face_real", ")", ")", "\n", "dis_fake_loss", "=", "fn_gan", "(", "\n", "pred_face_fake", ",", "torch", ".", "zeros_like", "(", "pred_face_fake", ")", ")", "\n", "loss_FD", "=", "(", "dis_real_loss", "+", "dis_fake_loss", ")", "/", "2", "*", "100", "\n", "\n", "loss_FD", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "# backward netFaceG", "\n", "set_requires_grad", "(", "netFaceD", ",", "False", ")", "\n", "optimFG", ".", "zero_grad", "(", ")", "\n", "\n", "pred_face_fake", "=", "netFaceD", "(", "x_fake_face_mask", ")", "\n", "\n", "loss_l1", "=", "fn_l1", "(", "st1_output", "*", "m4f", ",", "g4f", "*", "m4f", ")", "\n", "loss_ae", "=", "fn_l1", "(", "st1_output", "*", "(", "1", "-", "m4f", ")", ",", "g4f", "*", "(", "1", "-", "m4f", ")", ")", "\n", "loss_FG_gan", "=", "fn_gan", "(", "pred_face_fake", ",", "torch", ".", "ones_like", "(", "pred_face_fake", ")", ")", "\n", "loss_FG", "=", "loss_FG_gan", "*", "0.001", "+", "loss_l1", "*", "10", "+", "loss_ae", "\n", "\n", "loss_FG", ".", "backward", "(", ")", "\n", "\n", "optimCD", ".", "step", "(", ")", "\n", "optimCG", ".", "step", "(", ")", "\n", "optimFD", ".", "step", "(", ")", "\n", "optimFG", ".", "step", "(", ")", "\n", "\n", "#lr_scheduler_CD.step() ", "\n", "#lr_scheduler_CG.step() ", "\n", "#lr_scheduler_FD.step()  ", "\n", "#lr_scheduler_FG.step()         ", "\n", "\n", "# \uc190\uc2e4\ud568\uc218 \uacc4\uc0b0", "\n", "loss_FG_train", "+=", "[", "loss_FG", ".", "item", "(", ")", "]", "\n", "loss_CG_train", "+=", "[", "loss_CG", ".", "item", "(", ")", "]", "\n", "loss_FD_train", "+=", "[", "loss_FD", ".", "item", "(", ")", "]", "\n", "loss_CD_train", "+=", "[", "loss_CD", ".", "item", "(", ")", "]", "\n", "\n", "print", "(", "\"TRAIN: EPOCH %04d / %04d | BATCH %04d / %04d | \"", "\n", "\"FG %.4f | CG %.4f | FD %.4f | CD %.4f\"", "%", "\n", "(", "epoch", ",", "num_epoch", ",", "batch", ",", "num_batch_train", "*", "batch_size", ",", "\n", "np", ".", "mean", "(", "loss_FG_train", ")", ",", "np", ".", "mean", "(", "loss_CG_train", ")", ",", "\n", "np", ".", "mean", "(", "loss_FD_train", ")", ",", "np", ".", "mean", "(", "loss_CD_train", ")", ")", ")", "\n", "\n", "if", "batch", "%", "30", "==", "0", ":", "\n", "# Tensorboard \uc800\uc7a5\ud558\uae30", "\n", "                    ", "id", "=", "num_batch_train", "*", "(", "epoch", "-", "1", ")", "+", "batch", "\n", "\n", "# 4 face ori", "\n", "g4f", "=", "fn_tonumpy_4", "(", "fn_denorm", "(", "g4f", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "# 4 face with mask", "\n", "mask4f", "=", "fn_tonumpy_4", "(", "fn_denorm", "(", "cm4f", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "# 4 face inpaint result", "\n", "result4f", "=", "fn_tonumpy_4", "(", "\n", "fn_denorm", "(", "st1_output_inp", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "\n", "inpainted_cube", "=", "fn_tonumpy", "(", "\n", "fn_denorm", "(", "inpainted_cube", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "cube", "=", "fn_tonumpy", "(", "fn_denorm", "(", "cube", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "x_cube_mask_5", "=", "fn_tonumpy", "(", "\n", "fn_denorm", "(", "x_cube_mask_5", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "\n", "equirec_ori", "=", "c2e", "(", "\n", "cube", "[", "0", "]", ",", "h", "=", "256", ",", "w", "=", "512", ",", "cube_format", "=", "'list'", ")", "\n", "equirec_ori_mask", "=", "c2e", "(", "\n", "x_cube_mask_5", "[", "0", "]", ",", "h", "=", "256", ",", "w", "=", "512", ",", "cube_format", "=", "'list'", ")", "\n", "equirec", "=", "c2e", "(", "\n", "inpainted_cube", "[", "0", "]", ",", "h", "=", "256", ",", "w", "=", "512", ",", "cube_format", "=", "'list'", ")", "\n", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_train", ",", "'png'", ",", "'%07d_4face_mask.png'", "%", "(", "id", ")", ")", ",", "\n", "mask4f", "[", "0", "]", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_train", ",", "'png'", ",", "'%07d_4face.png'", "%", "(", "id", ")", ")", ",", "\n", "result4f", "[", "0", "]", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_train", ",", "'png'", ",", "'%07d_4face_ori.png'", "%", "(", "id", ")", ")", ",", "\n", "g4f", "[", "0", "]", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_train", ",", "'png'", ",", "'%07d_pano_mask.png'", "%", "(", "id", ")", ")", ",", "\n", "equirec_ori_mask", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_train", ",", "'png'", ",", "'%07d_pano.png'", "%", "(", "id", ")", ")", ",", "\n", "equirec", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_train", ",", "'png'", ",", "'%07d_pano_ori.png'", "%", "(", "id", ")", ")", ",", "\n", "equirec_ori", ",", "cmap", "=", "cmap", ")", "\n", "\n", "writer_train", ".", "add_image", "(", "\n", "'4face_mask.png'", ",", "mask4f", "[", "0", "]", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "writer_train", ".", "add_image", "(", "\n", "'4face.png'", ",", "result4f", "[", "0", "]", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "writer_train", ".", "add_image", "(", "\n", "'pano_ori.png'", ",", "equirec_ori", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "writer_train", ".", "add_image", "(", "\n", "'pano_mask.png'", ",", "equirec_ori_mask", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "writer_train", ".", "add_image", "(", "\n", "'pano.png'", ",", "equirec", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "\n", "", "", "writer_train", ".", "add_scalar", "(", "'loss_FG'", ",", "np", ".", "mean", "(", "loss_FG_train", ")", ",", "epoch", ")", "\n", "writer_train", ".", "add_scalar", "(", "'loss_CG'", ",", "np", ".", "mean", "(", "loss_CG_train", ")", ",", "epoch", ")", "\n", "writer_train", ".", "add_scalar", "(", "'loss_FD'", ",", "np", ".", "mean", "(", "loss_FD_train", ")", ",", "epoch", ")", "\n", "writer_train", ".", "add_scalar", "(", "'loss_CD'", ",", "np", ".", "mean", "(", "loss_CD_train", ")", ",", "epoch", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "netFaceG", ".", "eval", "(", ")", "\n", "netFaceD", ".", "eval", "(", ")", "\n", "netCubeG", ".", "eval", "(", ")", "\n", "netWholeD", ".", "eval", "(", ")", "\n", "netSliceD", ".", "eval", "(", ")", "\n", "\n", "loss_FG_val", "=", "[", "]", "\n", "loss_CG_val", "=", "[", "]", "\n", "\n", "for", "batch", ",", "sample", "in", "enumerate", "(", "loader_val", ",", "1", ")", ":", "\n", "# forward pass", "\n", "                    ", "cube", "=", "sample", "[", "'cube'", "]", ".", "to", "(", "gpu", ",", "dtype", "=", "torch", ".", "float32", ")", "# B, F, 3, H, W", "\n", "cube_mask", "=", "sample", "[", "'cube_mask'", "]", ".", "to", "(", "gpu", ",", "dtype", "=", "torch", ".", "float32", ")", "# B, F, 1, H, W", "\n", "cube_mask_4", "=", "cube_mask", ".", "view", "(", "cube_mask", ".", "shape", "[", "0", "]", ",", "cube_mask", ".", "shape", "[", "1", "]", ",", "cube_mask", ".", "shape", "[", "3", "]", ",", "cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "\n", "# face order is ['f', 'r', 'b', 'l', 't', 'd']", "\n", "# we need 4 faces like this order ['f', 'r', 'b', 'l']", "\n", "# concate 4 faces", "\n", "# ground truth 4 faces -> B, 3, H, W*4", "\n", "g4f", "=", "torch", ".", "cat", "(", "\n", "(", "cube", "[", ":", ",", "0", "]", ",", "torch", ".", "flip", "(", "cube", "[", ":", ",", "1", "]", ",", "[", "3", "]", ")", ",", "torch", ".", "flip", "(", "cube", "[", ":", ",", "2", "]", ",", "[", "3", "]", ")", ",", "cube", "[", ":", ",", "3", "]", ")", ",", "dim", "=", "3", ")", "\n", "# mask 4 faces -> B, 1, H, W*4", "\n", "m4f", "=", "torch", ".", "cat", "(", "\n", "(", "cube_mask", "[", ":", ",", "0", "]", ",", "torch", ".", "flip", "(", "cube_mask", "[", ":", ",", "1", "]", ",", "[", "3", "]", ")", ",", "torch", ".", "flip", "(", "cube_mask", "[", ":", ",", "2", "]", ",", "[", "3", "]", ")", ",", "\n", "cube_mask", "[", ":", ",", "3", "]", ")", ",", "\n", "dim", "=", "3", ")", "\n", "# with mask 4 faces -> B, 3, H, W*4", "\n", "cm4f", "=", "g4f", "-", "g4f", "*", "m4f", "\n", "\n", "# st1_output -> BN, C, H, W*4", "\n", "# st2_output -> BN, 6*C, H, W", "\n", "st1_output", "=", "netFaceG", "(", "g4f", ",", "m4f", ",", "cm4f", ")", "\n", "st1_output_inp", "=", "st1_output", "*", "m4f", "+", "g4f", "*", "(", "1", "-", "m4f", ")", "\n", "\n", "# st1_output -> BN, 4, C, H, W", "\n", "st1_output_5", "=", "st1_output", ".", "view", "(", "st1_output", ".", "shape", "[", "0", "]", ",", "4", ",", "st1_output", ".", "shape", "[", "1", "]", ",", "st1_output", ".", "shape", "[", "2", "]", ",", "\n", "int", "(", "st1_output", ".", "shape", "[", "3", "]", "/", "4", ")", ")", "\n", "\n", "st1_output_split0", ",", "st1_output_split1", ",", "st1_output_split2", ",", "st1_output_split3", "=", "torch", ".", "split", "(", "\n", "st1_output_5", ",", "1", ",", "dim", "=", "1", ")", "\n", "\n", "st1_output_split1", "=", "torch", ".", "flip", "(", "st1_output_split1", "[", ":", "]", ",", "[", "2", "]", ")", "\n", "st1_output_split2", "=", "torch", ".", "flip", "(", "st1_output_split2", "[", ":", "]", ",", "[", "2", "]", ")", "\n", "st1_output_5", "=", "torch", ".", "cat", "(", "\n", "(", "st1_output_split0", ",", "st1_output_split1", ",", "st1_output_split2", ",", "st1_output_split3", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# st1_cube -> BN, 6, C, H, W", "\n", "# st1_cube_4 -> BN, 6*C, H, W", "\n", "st1_cube", "=", "torch", ".", "cat", "(", "\n", "(", "st1_output_5", ",", "cube", "[", ":", ",", "4", ":", "6", "]", "*", "(", "1", "-", "cube_mask", "[", ":", ",", "4", ":", "6", "]", ")", ")", ",", "dim", "=", "1", ")", "\n", "st1_cube_inp", "=", "st1_cube", "*", "cube_mask", "+", "cube", "*", "(", "1", "-", "cube_mask", ")", "\n", "\n", "st1_cube_inp_4", "=", "st1_cube_inp", ".", "view", "(", "\n", "(", "st1_cube_inp", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "st1_cube_inp", ".", "shape", "[", "3", "]", ",", "st1_cube_inp", ".", "shape", "[", "4", "]", ")", ")", "\n", "\n", "cube_mask_4", "=", "cube_mask", ".", "view", "(", "\n", "cube_mask", ".", "shape", "[", "0", "]", ",", "cube_mask", ".", "shape", "[", "1", "]", ",", "cube_mask", ".", "shape", "[", "3", "]", ",", "cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "st2_input", "=", "torch", ".", "cat", "(", "(", "st1_cube_inp_4", ",", "cube_mask_4", ")", ",", "dim", "=", "1", ")", "\n", "\n", "st2_output", "=", "netCubeG", "(", "st2_input", ")", "\n", "st2_output_5", "=", "st2_output", ".", "view", "(", "\n", "st2_output", ".", "shape", "[", "0", "]", ",", "6", ",", "3", ",", "st2_output", ".", "shape", "[", "2", "]", ",", "st2_output", ".", "shape", "[", "3", "]", ")", "\n", "\n", "# cube + cube_mask", "\n", "# x_cube_mask_5 -> BN, 6, 3, H, W", "\n", "x_cube_mask_5", "=", "cube", "-", "cube", "*", "cube_mask", "\n", "\n", "# inpainted_cube -> BN, 6, 3, H, W", "\n", "inpainted_cube", "=", "st2_output_5", "*", "cube_mask", "+", "(", "1", "-", "cube_mask", ")", "*", "cube", "\n", "\n", "# input cube + cube mask / (net output + cube) + cube mask", "\n", "# x_real_cube_mask -> BN, 6*6, H, W", "\n", "# x_fake_cube_mask -> BN, 6*6, H, W", "\n", "x_fake_cube_mask", "=", "torch", ".", "cat", "(", "(", "st1_cube_inp", ",", "st2_output_5", ")", ",", "dim", "=", "2", ")", "\n", "x_fake_cube_mask", "=", "x_fake_cube_mask", ".", "view", "(", "\n", "x_fake_cube_mask", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "x_fake_cube_mask", ".", "shape", "[", "3", "]", ",", "x_fake_cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "\n", "# backward netCubeG", "\n", "pred_whole_fake", "=", "netWholeD", "(", "x_fake_cube_mask", ")", "\n", "pred_slice_fake", "=", "netSliceD", "(", "x_fake_cube_mask", ")", "\n", "\n", "loss_l1", "=", "fn_l1", "(", "st2_output_5", "*", "cube_mask", ",", "cube", "*", "cube_mask", ")", "\n", "loss_ae", "=", "fn_l1", "(", "st2_output_5", "*", "(", "1", "-", "cube_mask", ")", ",", "cube", "*", "(", "1", "-", "cube_mask", ")", ")", "\n", "loss_G_wgan", "=", "-", "torch", ".", "mean", "(", "pred_whole_fake", ")", "-", "torch", ".", "mean", "(", "pred_slice_fake", ")", "\n", "loss_CG", "=", "loss_G_wgan", "*", "0.001", "+", "loss_l1", "*", "10", "+", "loss_ae", "\n", "\n", "# backward netFaceG", "\n", "x_fake_face_mask", "=", "torch", ".", "cat", "(", "(", "cm4f", ",", "st1_output", ")", ",", "dim", "=", "1", ")", "\n", "pred_face_fake", "=", "netFaceD", "(", "x_fake_face_mask", ")", "\n", "\n", "loss_l1", "=", "fn_l1", "(", "st1_output", "*", "m4f", ",", "g4f", "*", "m4f", ")", "\n", "loss_ae", "=", "fn_l1", "(", "st1_output", "*", "(", "1", "-", "m4f", ")", ",", "g4f", "*", "(", "1", "-", "m4f", ")", ")", "\n", "loss_FG_gan", "=", "fn_gan", "(", "pred_face_fake", ",", "torch", ".", "ones_like", "(", "pred_face_fake", ")", ")", "\n", "loss_FG", "=", "loss_FG_gan", "*", "0.001", "+", "loss_l1", "*", "10", "+", "loss_ae", "\n", "\n", "# \uc190\uc2e4\ud568\uc218 \uacc4\uc0b0", "\n", "loss_FG_val", "+=", "[", "loss_FG", ".", "item", "(", ")", "]", "\n", "loss_CG_val", "+=", "[", "loss_CG", ".", "item", "(", ")", "]", "\n", "\n", "print", "(", "\"VAL: EPOCH %04d / %04d | BATCH %04d / %04d | \"", "\n", "\"FG %.4f | CG %.4f\"", "%", "\n", "(", "epoch", ",", "num_epoch", ",", "batch", ",", "num_batch_val", "*", "batch_size", ",", "\n", "np", ".", "mean", "(", "loss_FG_val", ")", ",", "np", ".", "mean", "(", "loss_CG_val", ")", ")", ")", "\n", "\n", "if", "batch", "%", "20", "==", "0", ":", "\n", "# Tensorboard \uc800\uc7a5\ud558\uae30", "\n", "                        ", "id", "=", "num_batch_val", "*", "(", "epoch", "-", "1", ")", "+", "batch", "\n", "\n", "# 4 face with mask", "\n", "mask4f", "=", "fn_tonumpy_4", "(", "fn_denorm", "(", "cm4f", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "# 4 face inpaint result", "\n", "result4f", "=", "fn_tonumpy_4", "(", "fn_denorm", "(", "st1_output_inp", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "\n", "inpainted_cube", "=", "fn_tonumpy", "(", "fn_denorm", "(", "inpainted_cube", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "cube", "=", "fn_tonumpy", "(", "fn_denorm", "(", "cube", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "x_cube_mask_5", "=", "fn_tonumpy", "(", "fn_denorm", "(", "x_cube_mask_5", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "\n", "equirec_ori", "=", "c2e", "(", "cube", "[", "0", "]", ",", "h", "=", "256", ",", "w", "=", "512", ",", "cube_format", "=", "'list'", ")", "\n", "equirec_ori_mask", "=", "c2e", "(", "x_cube_mask_5", "[", "0", "]", ",", "h", "=", "256", ",", "w", "=", "512", ",", "cube_format", "=", "'list'", ")", "\n", "equirec", "=", "c2e", "(", "inpainted_cube", "[", "0", "]", ",", "h", "=", "256", ",", "w", "=", "512", ",", "cube_format", "=", "'list'", ")", "\n", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_val", ",", "'png'", ",", "'%07d_4face_mask.png'", "%", "(", "id", ")", ")", ",", "\n", "mask4f", "[", "0", "]", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_val", ",", "'png'", ",", "'%07d_4face.png'", "%", "(", "id", ")", ")", ",", "\n", "result4f", "[", "0", "]", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_val", ",", "'png'", ",", "'%07d_pano_mask.png'", "%", "(", "id", ")", ")", ",", "\n", "equirec_ori_mask", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_val", ",", "'png'", ",", "'%07d_pano.png'", "%", "(", "id", ")", ")", ",", "\n", "equirec", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_val", ",", "'png'", ",", "'%07d_pano_ori.png'", "%", "(", "id", ")", ")", ",", "\n", "equirec_ori", ",", "cmap", "=", "cmap", ")", "\n", "\n", "writer_val", ".", "add_image", "(", "'4face_mask.png'", ",", "mask4f", "[", "0", "]", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "writer_val", ".", "add_image", "(", "'4face.png'", ",", "result4f", "[", "0", "]", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "writer_val", ".", "add_image", "(", "'pano_ori.png'", ",", "equirec_ori", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "writer_val", ".", "add_image", "(", "'pano_mask.png'", ",", "equirec_ori_mask", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "writer_val", ".", "add_image", "(", "'pano.png'", ",", "equirec", ",", "id", ",", "dataformats", "=", "'HWC'", ")", "\n", "\n", "", "", "writer_val", ".", "add_scalar", "(", "'loss_FG'", ",", "np", ".", "mean", "(", "loss_FG_val", ")", ",", "epoch", ")", "\n", "writer_val", ".", "add_scalar", "(", "'loss_CG'", ",", "np", ".", "mean", "(", "loss_CG_val", ")", ",", "epoch", ")", "\n", "\n", "", "if", "epoch", "%", "30", "==", "0", "or", "epoch", "==", "num_epoch", ":", "\n", "                ", "face_save", "(", "ckpt_dir", "=", "ckpt_dir", ",", "netFaceG", "=", "netFaceG", ",", "netFaceD", "=", "netFaceD", ",", "optimFG", "=", "optimFG", ",", "optimFD", "=", "optimFD", ",", "epoch", "=", "epoch", ")", "\n", "cube_save", "(", "ckpt_dir", "=", "ckpt_dir", ",", "netCubeG", "=", "netCubeG", ",", "netWholeD", "=", "netWholeD", ",", "\n", "netSliceD", "=", "netSliceD", ",", "optimCG", "=", "optimCG", ",", "optimCD", "=", "optimCD", ",", "epoch", "=", "epoch", ")", "\n", "\n", "", "", "writer_val", ".", "close", "(", ")", "\n", "writer_train", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.test": [[544, 796], ["torch.manual_seed", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "os.path.join", "nn.L1Loss().to", "nn.BCELoss().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.cuda.is_available", "Exception", "torch.device", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torchvision.transforms.Compose", "data.dataset.PanoramaDataset", "torch.utils.data.DataLoader", "len", "np.ceil", "model.PIUnet2.FaceGenerator", "model.PIUnet2.FaceDis", "model.PIUnet2.CubeGenerator", "model.PIUnet2.WholeDis", "model.PIUnet2.SliceDis", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "list", "list", "x.to().detach().numpy().transpose", "x.to().detach().numpy().transpose", "utils.util.face_load", "utils.util.cube_load", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "nn.L1Loss", "nn.BCELoss", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "torch.no_grad", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "enumerate", "data.dataset.Normalize", "data.dataset.ToTensor", "os.path.join", "x.to().detach().numpy", "x.to().detach().numpy", "sample[].to", "sample[].to", "sample[].to.view", "torch.cat", "torch.cat", "torch.nn.DataParallel.", "netFaceG.view", "torch.split", "torch.flip", "torch.flip", "torch.cat", "torch.cat", "st1_cube_inp.view", "sample[].to.view", "torch.cat", "torch.nn.DataParallel.", "netCubeG.view", "torch.cat", "x_fake_cube_mask.view.view", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "nn.L1Loss().to.", "nn.L1Loss().to.", "torch.cat", "torch.nn.DataParallel.", "nn.L1Loss().to.", "nn.L1Loss().to.", "nn.BCELoss().to.", "print", "fn_tonumpy_4", "fn_tonumpy_4", "fn_tonumpy_4", "fn_tonumpy", "fn_tonumpy", "fn_tonumpy", "utils.cube_to_equi.c2e", "utils.cube_to_equi.c2e", "utils.cube_to_equi.c2e", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "matplotlib.imsave", "int", "torch.mean", "torch.ones_like", "loss_FG.item", "loss_CG.item", "fn_denorm", "fn_denorm", "fn_denorm", "fn_denorm", "fn_denorm", "fn_denorm", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "x.to().detach", "x.to().detach", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.mean", "np.mean", "np.mean", "x.to", "x.to"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.face_load", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.cube_load", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip"], ["", "", "def", "test", "(", "args", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "2020", ")", "\n", "## test \ud30c\ub77c\uba54\ud130 \uc124\uc815\ud558\uae30", "\n", "mode", "=", "args", ".", "mode", "\n", "data_parallel", "=", "args", ".", "data_parallel", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "num_epoch", "=", "args", ".", "num_epoch", "\n", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "ckpt_dir", "=", "args", ".", "ckpt_dir", "\n", "log_dir", "=", "args", ".", "log_dir", "\n", "result_dir", "=", "args", ".", "result_dir", "\n", "\n", "nker", "=", "args", ".", "nker", "\n", "\n", "norm", "=", "args", ".", "norm", "\n", "\n", "network", "=", "args", ".", "network", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "==", "False", ":", "\n", "        ", "raise", "Exception", "(", "'At least one gpu must be available.'", ")", "\n", "", "else", ":", "\n", "        ", "gpu", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "\n", "", "print", "(", "\"mode: %s\"", "%", "mode", ")", "\n", "print", "(", "\"data_parallel: %s\"", "%", "data_parallel", ")", "\n", "\n", "print", "(", "\"learning rate: %.4e\"", "%", "lr", ")", "\n", "print", "(", "\"batch size: %d\"", "%", "batch_size", ")", "\n", "print", "(", "\"number of epoch: %d\"", "%", "num_epoch", ")", "\n", "\n", "print", "(", "\"network: %s\"", "%", "network", ")", "\n", "\n", "print", "(", "\"norm: %s\"", "%", "norm", ")", "\n", "\n", "print", "(", "\"data dir: %s\"", "%", "data_dir", ")", "\n", "print", "(", "\"ckpt dir: %s\"", "%", "ckpt_dir", ")", "\n", "print", "(", "\"log dir: %s\"", "%", "log_dir", ")", "\n", "print", "(", "\"result dir: %s\"", "%", "result_dir", ")", "\n", "\n", "print", "(", "\"device: %s\"", "%", "gpu", ")", "\n", "\n", "## \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\ud558\uae30", "\n", "result_dir_ori", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'ori'", ")", "\n", "result_dir_gen", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'gen'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir_ori", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_dir_ori", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir_gen", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_dir_gen", ")", "\n", "\n", "## \ub124\ud2b8\uc6cc\ud06c \ud559\uc2b5\ud558\uae30", "\n", "", "if", "mode", "==", "\"test\"", ":", "\n", "        ", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "Normalize", "(", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "\n", "dataset_test", "=", "PanoramaDataset", "(", "in_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'test'", ")", ",", "transform", "=", "transform_test", ")", "\n", "loader_test", "=", "DataLoader", "(", "dataset_test", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "# \uadf8\ubc16\uc5d0 \ubd80\uc218\uc801\uc778 variables \uc124\uc815\ud558\uae30", "\n", "num_data_test", "=", "len", "(", "dataset_test", ")", "\n", "num_batch_test", "=", "np", ".", "ceil", "(", "num_data_test", "/", "1", ")", "\n", "\n", "## \ub124\ud2b8\uc6cc\ud06c \uc0dd\uc131\ud558\uae30", "\n", "", "if", "network", "==", "\"PIUnet\"", ":", "\n", "        ", "netFaceG", "=", "FaceGenerator", "(", "\n", "in_channels", "=", "4", ",", "out_channels", "=", "3", ",", "nker", "=", "nker", ",", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "netFaceD", "=", "FaceDis", "(", "in_channels", "=", "6", ",", "out_channels", "=", "1", ",", "nker", "=", "nker", ",", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "netCubeG", "=", "CubeGenerator", "(", "\n", "in_channels", "=", "4", ",", "out_channels", "=", "3", ",", "nker", "=", "nker", ",", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "netWholeD", "=", "WholeDis", "(", "in_channels", "=", "6", "*", "6", ",", "nker", "=", "nker", ",", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "netSliceD", "=", "SliceDis", "(", "in_channels", "=", "6", ",", "out_channels", "=", "1", ",", "nker", "=", "nker", ",", "norm", "=", "norm", ",", "relu", "=", "True", ")", "\n", "\n", "if", "data_parallel", ":", "\n", "            ", "netFaceG", "=", "DataParallel", "(", "netFaceG", ")", "\n", "netFaceD", "=", "DataParallel", "(", "netFaceD", ")", "\n", "netCubeG", "=", "DataParallel", "(", "netCubeG", ")", "\n", "netWholeD", "=", "DataParallel", "(", "netWholeD", ")", "\n", "netSliceD", "=", "DataParallel", "(", "netSliceD", ")", "\n", "\n", "", "netFaceG", "=", "netFaceG", ".", "to", "(", "gpu", ")", "\n", "netFaceD", "=", "netFaceD", ".", "to", "(", "gpu", ")", "\n", "netCubeG", "=", "netCubeG", ".", "to", "(", "gpu", ")", "\n", "netWholeD", "=", "netWholeD", ".", "to", "(", "gpu", ")", "\n", "netSliceD", "=", "netSliceD", ".", "to", "(", "gpu", ")", "\n", "\n", "## \uc190\uc2e4\ud568\uc218 \uc815\uc758\ud558\uae30", "\n", "", "fn_l1", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "gpu", ")", "\n", "fn_gan", "=", "nn", ".", "BCELoss", "(", ")", ".", "to", "(", "gpu", ")", "\n", "\n", "## Optimizer \uc124\uc815\ud558\uae30", "\n", "optimFG", "=", "torch", ".", "optim", ".", "Adam", "(", "netFaceG", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimCG", "=", "torch", ".", "optim", ".", "Adam", "(", "netCubeG", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimFD", "=", "torch", ".", "optim", ".", "Adam", "(", "netFaceD", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "d_params", "=", "list", "(", "netWholeD", ".", "parameters", "(", ")", ")", "+", "list", "(", "netSliceD", ".", "parameters", "(", ")", ")", "\n", "optimCD", "=", "torch", ".", "optim", ".", "Adam", "(", "d_params", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "## \uadf8\ubc16\uc5d0 \ubd80\uc218\uc801\uc778 functions \uc124\uc815\ud558\uae30", "\n", "fn_tonumpy", "=", "lambda", "x", ":", "x", ".", "to", "(", "\n", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "fn_tonumpy_4", "=", "lambda", "x", ":", "x", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "fn_denorm", "=", "lambda", "x", ",", "mean", ",", "std", ":", "(", "x", "*", "std", ")", "+", "mean", "\n", "\n", "cmap", "=", "None", "\n", "id", "=", "0", "\n", "# TEST MODE", "\n", "if", "mode", "==", "\"test\"", ":", "\n", "        ", "netFaceG", ",", "netFaceD", ",", "optimFG", ",", "optimFD", ",", "st_epoch", "=", "face_load", "(", "ckpt_dir", "=", "ckpt_dir", ",", "netFaceG", "=", "netFaceG", ",", "netFaceD", "=", "netFaceD", ",", "optimFG", "=", "optimFG", ",", "optimFD", "=", "optimFD", ")", "\n", "netCubeG", ",", "netWholeD", ",", "netSliceD", ",", "optimCG", ",", "optimCD", ",", "st_epoch", "=", "cube_load", "(", "ckpt_dir", "=", "ckpt_dir", ",", "\n", "netCubeG", "=", "netCubeG", ",", "netWholeD", "=", "netWholeD", ",", "\n", "netSliceD", "=", "netSliceD", ",", "optimCG", "=", "optimCG", ",", "optimCD", "=", "optimCD", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "netFaceG", ".", "eval", "(", ")", "\n", "netFaceD", ".", "eval", "(", ")", "\n", "netCubeG", ".", "eval", "(", ")", "\n", "netWholeD", ".", "eval", "(", ")", "\n", "netSliceD", ".", "eval", "(", ")", "\n", "\n", "loss_FG_test", "=", "[", "]", "\n", "loss_CG_test", "=", "[", "]", "\n", "\n", "for", "batch", ",", "sample", "in", "enumerate", "(", "loader_test", ",", "1", ")", ":", "\n", "# forward pass", "\n", "                ", "cube", "=", "sample", "[", "'cube'", "]", ".", "to", "(", "gpu", ",", "dtype", "=", "torch", ".", "float32", ")", "# B, F, 3, H, W", "\n", "cube_mask", "=", "sample", "[", "'cube_mask'", "]", ".", "to", "(", "gpu", ",", "dtype", "=", "torch", ".", "float32", ")", "# B, F, 1, H, W", "\n", "cube_mask_4", "=", "cube_mask", ".", "view", "(", "cube_mask", ".", "shape", "[", "0", "]", ",", "cube_mask", ".", "shape", "[", "1", "]", ",", "cube_mask", ".", "shape", "[", "3", "]", ",", "cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "\n", "# face order is ['f', 'r', 'b', 'l', 't', 'd']", "\n", "# we need 4 faces like this order ['f', 'r', 'b', 'l']", "\n", "# concate 4 faces", "\n", "# ground truth 4 faces -> B, 3, H, W*4", "\n", "g4f", "=", "torch", ".", "cat", "(", "\n", "(", "cube", "[", ":", ",", "0", "]", ",", "torch", ".", "flip", "(", "cube", "[", ":", ",", "1", "]", ",", "[", "3", "]", ")", ",", "torch", ".", "flip", "(", "cube", "[", ":", ",", "2", "]", ",", "[", "3", "]", ")", ",", "cube", "[", ":", ",", "3", "]", ")", ",", "dim", "=", "3", ")", "\n", "# mask 4 faces -> B, 1, H, W*4", "\n", "m4f", "=", "torch", ".", "cat", "(", "\n", "(", "cube_mask", "[", ":", ",", "0", "]", ",", "torch", ".", "flip", "(", "cube_mask", "[", ":", ",", "1", "]", ",", "[", "3", "]", ")", ",", "torch", ".", "flip", "(", "cube_mask", "[", ":", ",", "2", "]", ",", "[", "3", "]", ")", ",", "\n", "cube_mask", "[", ":", ",", "3", "]", ")", ",", "\n", "dim", "=", "3", ")", "\n", "# with mask 4 faces -> B, 3, H, W*4", "\n", "cm4f", "=", "g4f", "-", "g4f", "*", "m4f", "\n", "\n", "# st1_output -> BN, C, H, W*4", "\n", "# st2_output -> BN, 6*C, H, W", "\n", "st1_output", "=", "netFaceG", "(", "g4f", ",", "m4f", ",", "cm4f", ")", "\n", "st1_output_inp", "=", "st1_output", "*", "m4f", "+", "g4f", "*", "(", "1", "-", "m4f", ")", "\n", "\n", "# st1_output -> BN, 4, C, H, W", "\n", "st1_output_5", "=", "st1_output", ".", "view", "(", "st1_output", ".", "shape", "[", "0", "]", ",", "4", ",", "st1_output", ".", "shape", "[", "1", "]", ",", "st1_output", ".", "shape", "[", "2", "]", ",", "\n", "int", "(", "st1_output", ".", "shape", "[", "3", "]", "/", "4", ")", ")", "\n", "\n", "st1_output_split0", ",", "st1_output_split1", ",", "st1_output_split2", ",", "st1_output_split3", "=", "torch", ".", "split", "(", "\n", "st1_output_5", ",", "1", ",", "dim", "=", "1", ")", "\n", "\n", "st1_output_split1", "=", "torch", ".", "flip", "(", "st1_output_split1", "[", ":", "]", ",", "[", "2", "]", ")", "\n", "st1_output_split2", "=", "torch", ".", "flip", "(", "st1_output_split2", "[", ":", "]", ",", "[", "2", "]", ")", "\n", "st1_output_5", "=", "torch", ".", "cat", "(", "\n", "(", "st1_output_split0", ",", "st1_output_split1", ",", "st1_output_split2", ",", "st1_output_split3", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# st1_cube -> BN, 6, C, H, W", "\n", "# st1_cube_4 -> BN, 6*C, H, W", "\n", "st1_cube", "=", "torch", ".", "cat", "(", "\n", "(", "st1_output_5", ",", "cube", "[", ":", ",", "4", ":", "6", "]", "*", "(", "1", "-", "cube_mask", "[", ":", ",", "4", ":", "6", "]", ")", ")", ",", "dim", "=", "1", ")", "\n", "st1_cube_inp", "=", "st1_cube", "*", "cube_mask", "+", "cube", "*", "(", "1", "-", "cube_mask", ")", "\n", "\n", "st1_cube_inp_4", "=", "st1_cube_inp", ".", "view", "(", "\n", "(", "st1_cube_inp", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "st1_cube_inp", ".", "shape", "[", "3", "]", ",", "st1_cube_inp", ".", "shape", "[", "4", "]", ")", ")", "\n", "\n", "cube_mask_4", "=", "cube_mask", ".", "view", "(", "\n", "cube_mask", ".", "shape", "[", "0", "]", ",", "cube_mask", ".", "shape", "[", "1", "]", ",", "cube_mask", ".", "shape", "[", "3", "]", ",", "cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "st2_input", "=", "torch", ".", "cat", "(", "(", "st1_cube_inp_4", ",", "cube_mask_4", ")", ",", "dim", "=", "1", ")", "\n", "\n", "st2_output", "=", "netCubeG", "(", "st2_input", ")", "\n", "st2_output_5", "=", "st2_output", ".", "view", "(", "\n", "st2_output", ".", "shape", "[", "0", "]", ",", "6", ",", "3", ",", "st2_output", ".", "shape", "[", "2", "]", ",", "st2_output", ".", "shape", "[", "3", "]", ")", "\n", "\n", "# cube + cube_mask", "\n", "# x_cube_mask_5 -> BN, 6, 3, H, W", "\n", "x_cube_mask_5", "=", "cube", "-", "cube", "*", "cube_mask", "\n", "\n", "# inpainted_cube -> BN, 6, 3, H, W", "\n", "inpainted_cube", "=", "st2_output_5", "*", "cube_mask", "+", "(", "1", "-", "cube_mask", ")", "*", "cube", "\n", "\n", "# input cube + cube mask / (net output + cube) + cube mask", "\n", "# x_real_cube_mask -> BN, 6*6, H, W", "\n", "# x_fake_cube_mask -> BN, 6*6, H, W", "\n", "x_fake_cube_mask", "=", "torch", ".", "cat", "(", "(", "st1_cube_inp", ",", "st2_output_5", ")", ",", "dim", "=", "2", ")", "\n", "x_fake_cube_mask", "=", "x_fake_cube_mask", ".", "view", "(", "\n", "x_fake_cube_mask", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "x_fake_cube_mask", ".", "shape", "[", "3", "]", ",", "x_fake_cube_mask", ".", "shape", "[", "4", "]", ")", "\n", "\n", "# backward netCubeG", "\n", "pred_whole_fake", "=", "netWholeD", "(", "x_fake_cube_mask", ")", "\n", "pred_slice_fake", "=", "netSliceD", "(", "x_fake_cube_mask", ")", "\n", "\n", "loss_l1", "=", "fn_l1", "(", "st2_output_5", "*", "cube_mask", ",", "cube", "*", "cube_mask", ")", "\n", "loss_ae", "=", "fn_l1", "(", "st2_output_5", "*", "(", "1", "-", "cube_mask", ")", ",", "cube", "*", "(", "1", "-", "cube_mask", ")", ")", "\n", "loss_G_wgan", "=", "-", "torch", ".", "mean", "(", "pred_whole_fake", ")", "-", "torch", ".", "mean", "(", "pred_slice_fake", ")", "\n", "loss_CG", "=", "loss_G_wgan", "*", "0.001", "+", "loss_l1", "*", "10", "+", "loss_ae", "\n", "\n", "# backward netFaceG", "\n", "x_fake_face_mask", "=", "torch", ".", "cat", "(", "(", "cm4f", ",", "st1_output", ")", ",", "dim", "=", "1", ")", "\n", "pred_face_fake", "=", "netFaceD", "(", "x_fake_face_mask", ")", "\n", "\n", "loss_l1", "=", "fn_l1", "(", "st1_output", "*", "m4f", ",", "g4f", "*", "m4f", ")", "\n", "loss_ae", "=", "fn_l1", "(", "st1_output", "*", "(", "1", "-", "m4f", ")", ",", "g4f", "*", "(", "1", "-", "m4f", ")", ")", "\n", "loss_FG_gan", "=", "fn_gan", "(", "pred_face_fake", ",", "torch", ".", "ones_like", "(", "pred_face_fake", ")", ")", "\n", "loss_FG", "=", "loss_FG_gan", "*", "0.001", "+", "loss_l1", "*", "10", "+", "loss_ae", "\n", "\n", "# \uc190\uc2e4\ud568\uc218 \uacc4\uc0b0", "\n", "loss_FG_test", "+=", "[", "loss_FG", ".", "item", "(", ")", "]", "\n", "loss_CG_test", "+=", "[", "loss_CG", ".", "item", "(", ")", "]", "\n", "\n", "print", "(", "\"TEST: BATCH %04d / %04d | FG %.4f | CG %.4f\"", "%", "\n", "(", "batch", ",", "num_batch_test", "*", "batch_size", ",", "np", ".", "mean", "(", "loss_FG_test", ")", ",", "np", ".", "mean", "(", "loss_CG_test", ")", ")", ")", "\n", "\n", "# 4 face ori", "\n", "g4f", "=", "fn_tonumpy_4", "(", "fn_denorm", "(", "g4f", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "# 4 face with mask", "\n", "mask4f", "=", "fn_tonumpy_4", "(", "fn_denorm", "(", "cm4f", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "# 4 face inpaint result", "\n", "result4f", "=", "fn_tonumpy_4", "(", "\n", "fn_denorm", "(", "st1_output_inp", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "\n", "inpainted_cube", "=", "fn_tonumpy", "(", "\n", "fn_denorm", "(", "inpainted_cube", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "cube", "=", "fn_tonumpy", "(", "fn_denorm", "(", "cube", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "x_cube_mask_5", "=", "fn_tonumpy", "(", "\n", "fn_denorm", "(", "x_cube_mask_5", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ")", "\n", "\n", "equirec_ori", "=", "c2e", "(", "\n", "cube", "[", "0", "]", ",", "h", "=", "256", ",", "w", "=", "512", ",", "cube_format", "=", "'list'", ")", "\n", "equirec_ori_mask", "=", "c2e", "(", "\n", "x_cube_mask_5", "[", "0", "]", ",", "h", "=", "256", ",", "w", "=", "512", ",", "cube_format", "=", "'list'", ")", "\n", "equirec", "=", "c2e", "(", "\n", "inpainted_cube", "[", "0", "]", ",", "h", "=", "256", ",", "w", "=", "512", ",", "cube_format", "=", "'list'", ")", "\n", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_test", ",", "'%07d.png'", "%", "(", "id", ")", ")", ",", "inpainted_cube", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_ori", ",", "'%07d.png'", "%", "(", "id", ")", ")", ",", "equirec_ori", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_test", ",", "'png'", ",", "'%07d_4face_mask.png'", "%", "(", "id", ")", ")", ",", "mask4f", "[", "0", "]", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_test", ",", "'png'", ",", "'%07d_4face.png'", "%", "(", "id", ")", ")", ",", "\n", "result4f", "[", "0", "]", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_test", ",", "'png'", ",", "'%07d_4face_ori.png'", "%", "(", "id", ")", ")", ",", "\n", "g4f", "[", "0", "]", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_test", ",", "'png'", ",", "'%07d_pano_mask.png'", "%", "(", "id", ")", ")", ",", "\n", "equirec_ori_mask", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_test", ",", "'png'", ",", "'%07d_pano.png'", "%", "(", "id", ")", ")", ",", "\n", "equirec", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "result_dir_test", ",", "'png'", ",", "'%07d_pano_ori.png'", "%", "(", "id", ")", ")", ",", "\n", "equirec_ori", ",", "cmap", "=", "cmap", ")", "\n", "\n", "id", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.None.train.calc_gradient_penalty": [[797, 820], ["real_data.size", "torch.rand", "alpha.to.expand_as", "alpha.to.to", "interpolates.requires_grad_().clone.requires_grad_().clone", "netD", "torch.ones", "grad_outputs.to.to", "gradients.view.view", "netD.size", "torch.autograd.grad", "interpolates.requires_grad_().clone.requires_grad_", "gradients.view.norm"], "function", ["None"], ["", "", "", "", "def", "calc_gradient_penalty", "(", "netD", ",", "real_data", ",", "fake_data", ",", "gpu", ")", ":", "\n", "    ", "batch_size", "=", "real_data", ".", "size", "(", "0", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand_as", "(", "real_data", ")", "\n", "\n", "alpha", "=", "alpha", ".", "to", "(", "gpu", ")", "\n", "\n", "interpolates", "=", "alpha", "*", "real_data", "+", "(", "1", "-", "alpha", ")", "*", "fake_data", "\n", "interpolates", "=", "interpolates", ".", "requires_grad_", "(", ")", ".", "clone", "(", ")", "\n", "\n", "disc_interpolates", "=", "netD", "(", "interpolates", ")", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", "\n", "\n", "grad_outputs", "=", "grad_outputs", ".", "to", "(", "gpu", ")", "\n", "\n", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "grad_outputs", ",", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "gradients", "=", "gradients", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "gradient_penalty", "\n", "", ""]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.equi_to_cube.e2c": [[5, 41], ["sphere_utils.xyzcube", "sphere_utils.xyz2uv", "sphere_utils.uv2coor", "numpy.stack", "len", "NotImplementedError", "sphere_utils.sample_equirec", "sphere_utils.cube_h2list", "range", "sphere_utils.cube_h2dict", "sphere_utils.cube_h2dice", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.xyzcube", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.xyz2uv", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.uv2coor", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.sample_equirec", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_h2list", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_h2dict", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_h2dice"], ["def", "e2c", "(", "e_img", ",", "face_w", "=", "256", ",", "mode", "=", "'bilinear'", ",", "cube_format", "=", "'dice'", ")", ":", "\n", "    ", "'''\n    e_img:  ndarray in shape of [H, W, *]\n    face_w: int, the length of each face of the cubemap\n    '''", "\n", "\n", "assert", "len", "(", "e_img", ".", "shape", ")", "==", "3", "\n", "h", ",", "w", "=", "e_img", ".", "shape", "[", ":", "2", "]", "\n", "if", "mode", "==", "'bilinear'", ":", "\n", "        ", "order", "=", "1", "\n", "", "elif", "mode", "==", "'nearest'", ":", "\n", "        ", "order", "=", "0", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'unknown mode'", ")", "\n", "\n", "", "xyz", "=", "sphere_utils", ".", "xyzcube", "(", "face_w", ")", "\n", "uv", "=", "sphere_utils", ".", "xyz2uv", "(", "xyz", ")", "\n", "coor_xy", "=", "sphere_utils", ".", "uv2coor", "(", "uv", ",", "h", ",", "w", ")", "\n", "\n", "cubemap", "=", "np", ".", "stack", "(", "[", "\n", "sphere_utils", ".", "sample_equirec", "(", "e_img", "[", "...", ",", "i", "]", ",", "coor_xy", ",", "order", "=", "order", ")", "\n", "for", "i", "in", "range", "(", "e_img", ".", "shape", "[", "2", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "cube_format", "==", "'horizon'", ":", "\n", "        ", "pass", "\n", "", "elif", "cube_format", "==", "'list'", ":", "\n", "        ", "cubemap", "=", "sphere_utils", ".", "cube_h2list", "(", "cubemap", ")", "\n", "", "elif", "cube_format", "==", "'dict'", ":", "\n", "        ", "cubemap", "=", "sphere_utils", ".", "cube_h2dict", "(", "cubemap", ")", "\n", "", "elif", "cube_format", "==", "'dice'", ":", "\n", "        ", "cubemap", ",", "cubelist", "=", "sphere_utils", ".", "cube_h2dice", "(", "cubemap", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "cubemap", ",", "cubelist", "", "", ""]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.cube_to_equi.c2e": [[5, 64], ["sphere_utils.equirect_uvgrid", "numpy.split", "numpy.stack", "sphere_utils.equirect_facetype", "numpy.zeros", "numpy.zeros", "range", "numpy.stack", "len", "numpy.split", "numpy.tan", "numpy.sin", "numpy.cos", "numpy.tan", "numpy.sin", "numpy.cos", "NotImplementedError", "sphere_utils.cube_list2h", "numpy.tan", "numpy.cos", "numpy.clip", "numpy.clip", "sphere_utils.sample_cubefaces", "sphere_utils.cube_dict2h", "numpy.tan", "numpy.abs", "range", "sphere_utils.cube_dice2h", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.equirect_uvgrid", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.equirect_facetype", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_list2h", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.sample_cubefaces", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_dict2h", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_dice2h"], ["def", "c2e", "(", "cubemap", ",", "h", ",", "w", ",", "mode", "=", "'bilinear'", ",", "cube_format", "=", "'dice'", ")", ":", "\n", "    ", "if", "mode", "==", "'bilinear'", ":", "\n", "        ", "order", "=", "1", "\n", "", "elif", "mode", "==", "'nearest'", ":", "\n", "        ", "order", "=", "0", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'unknown mode'", ")", "\n", "\n", "", "if", "cube_format", "==", "'horizon'", ":", "\n", "        ", "pass", "\n", "", "elif", "cube_format", "==", "'list'", ":", "\n", "        ", "cubemap", "=", "sphere_utils", ".", "cube_list2h", "(", "cubemap", ")", "\n", "", "elif", "cube_format", "==", "'dict'", ":", "\n", "        ", "cubemap", "=", "sphere_utils", ".", "cube_dict2h", "(", "cubemap", ")", "\n", "", "elif", "cube_format", "==", "'dice'", ":", "\n", "        ", "cubemap", "=", "sphere_utils", ".", "cube_dice2h", "(", "cubemap", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'unknown cube_format'", ")", "\n", "", "assert", "len", "(", "cubemap", ".", "shape", ")", "==", "3", "\n", "assert", "cubemap", ".", "shape", "[", "0", "]", "*", "6", "==", "cubemap", ".", "shape", "[", "1", "]", "\n", "assert", "w", "%", "8", "==", "0", "\n", "face_w", "=", "cubemap", ".", "shape", "[", "0", "]", "\n", "\n", "uv", "=", "sphere_utils", ".", "equirect_uvgrid", "(", "h", ",", "w", ")", "\n", "u", ",", "v", "=", "np", ".", "split", "(", "uv", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "u", "=", "u", "[", "...", ",", "0", "]", "\n", "v", "=", "v", "[", "...", ",", "0", "]", "\n", "cube_faces", "=", "np", ".", "stack", "(", "np", ".", "split", "(", "cubemap", ",", "6", ",", "1", ")", ",", "0", ")", "\n", "\n", "# Get face id to each pixel: 0F 1R 2B 3L 4U 5D", "\n", "tp", "=", "sphere_utils", ".", "equirect_facetype", "(", "h", ",", "w", ")", "\n", "coor_x", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "coor_y", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "mask", "=", "(", "tp", "==", "i", ")", "\n", "coor_x", "[", "mask", "]", "=", "0.5", "*", "np", ".", "tan", "(", "u", "[", "mask", "]", "-", "np", ".", "pi", "*", "i", "/", "2", ")", "\n", "coor_y", "[", "mask", "]", "=", "-", "0.5", "*", "np", ".", "tan", "(", "v", "[", "mask", "]", ")", "/", "np", ".", "cos", "(", "u", "[", "mask", "]", "-", "np", ".", "pi", "*", "i", "/", "2", ")", "\n", "\n", "", "mask", "=", "(", "tp", "==", "4", ")", "\n", "c", "=", "0.5", "*", "np", ".", "tan", "(", "np", ".", "pi", "/", "2", "-", "v", "[", "mask", "]", ")", "\n", "coor_x", "[", "mask", "]", "=", "c", "*", "np", ".", "sin", "(", "u", "[", "mask", "]", ")", "\n", "coor_y", "[", "mask", "]", "=", "c", "*", "np", ".", "cos", "(", "u", "[", "mask", "]", ")", "\n", "\n", "mask", "=", "(", "tp", "==", "5", ")", "\n", "c", "=", "0.5", "*", "np", ".", "tan", "(", "np", ".", "pi", "/", "2", "-", "np", ".", "abs", "(", "v", "[", "mask", "]", ")", ")", "\n", "coor_x", "[", "mask", "]", "=", "c", "*", "np", ".", "sin", "(", "u", "[", "mask", "]", ")", "\n", "coor_y", "[", "mask", "]", "=", "-", "c", "*", "np", ".", "cos", "(", "u", "[", "mask", "]", ")", "\n", "\n", "# Final renormalize", "\n", "coor_x", "=", "(", "np", ".", "clip", "(", "coor_x", ",", "-", "0.5", ",", "0.5", ")", "+", "0.5", ")", "*", "face_w", "\n", "coor_y", "=", "(", "np", ".", "clip", "(", "coor_y", ",", "-", "0.5", ",", "0.5", ")", "+", "0.5", ")", "*", "face_w", "\n", "\n", "equirec", "=", "np", ".", "stack", "(", "[", "\n", "sphere_utils", ".", "sample_cubefaces", "(", "cube_faces", "[", "...", ",", "i", "]", ",", "tp", ",", "coor_y", ",", "coor_x", ",", "order", "=", "order", ")", "\n", "for", "i", "in", "range", "(", "cube_faces", ".", "shape", "[", "3", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "equirec", "", "", ""]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.set_requires_grad": [[11, 23], ["isinstance", "net.parameters"], "function", ["None"], ["def", "set_requires_grad", "(", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "    ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n    Parameters:\n        nets (network list)   -- a list of networks\n        requires_grad (bool)  -- whether the networks require gradients or not\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "        ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "        ", "if", "net", "is", "not", "None", ":", "\n", "            ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.init_weights": [[24, 54], ["print", "net.apply", "hasattr", "torch.init.normal_", "hasattr", "torch.init.constant_", "classname.find", "torch.init.normal_", "torch.init.constant_", "classname.find", "classname.find", "torch.init.xavier_normal_", "torch.init.kaiming_normal_", "torch.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "", "", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Initialize network weights.\n    Parameters:\n        net (network)   -- network to be initialized\n        init_type (str) -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        init_gain (float)    -- scaling factor for normal, xavier and orthogonal.\n    We use 'normal' in the original pix2pix and CycleGAN paper. But xavier and kaiming might\n    work better for some applications. Feel free to try yourself.\n    \"\"\"", "\n", "def", "init_func", "(", "m", ")", ":", "# define the initialization function", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "# BatchNorm Layer's weight is not a matrix; only normal distribution applies.", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_gain", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "# apply the initialization function <init_func>", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.face_save": [[55, 62], ["torch.save", "torch.save", "os.path.exists", "os.makedirs", "netFaceG.state_dict", "netFaceD.state_dict", "optimFG.state_dict", "optimFD.state_dict"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save"], ["", "def", "face_save", "(", "ckpt_dir", ",", "netFaceG", ",", "netFaceD", ",", "optimFG", ",", "optimFD", ",", "epoch", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "'netFaceG'", ":", "netFaceG", ".", "state_dict", "(", ")", ",", "'netFaceD'", ":", "netFaceD", ".", "state_dict", "(", ")", ",", "\n", "'optimFG'", ":", "optimFG", ".", "state_dict", "(", ")", ",", "'optimFD'", ":", "optimFD", ".", "state_dict", "(", ")", "}", ",", "\n", "\"%s/model_epoch%d.pth\"", "%", "(", "ckpt_dir", ",", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.cube_save": [[63, 71], ["torch.save", "torch.save", "os.path.exists", "os.makedirs", "netCubeG.state_dict", "netWholeD.state_dict", "netSliceD.state_dict", "optimCG.state_dict", "optimCD.state_dict"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save"], ["", "def", "cube_save", "(", "ckpt_dir", ",", "netCubeG", ",", "netWholeD", ",", "\n", "netSliceD", ",", "optimCG", ",", "optimCD", ",", "epoch", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "'netCubeG'", ":", "netCubeG", ".", "state_dict", "(", ")", ",", "'netWholeD'", ":", "netWholeD", ".", "state_dict", "(", ")", ",", "\n", "'netSliceD'", ":", "netSliceD", ".", "state_dict", "(", ")", ",", "'optimCG'", ":", "optimCG", ".", "state_dict", "(", ")", ",", "'optimCD'", ":", "optimCD", ".", "state_dict", "(", ")", "}", ",", "\n", "\"%s/model_epoch%d.pth\"", "%", "(", "ckpt_dir", ",", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save": [[72, 79], ["torch.save", "torch.save", "os.path.exists", "os.makedirs", "netG.state_dict", "netD.state_dict", "optimG.state_dict", "optimD.state_dict"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save"], ["", "def", "save", "(", "ckpt_dir", ",", "netG", ",", "netD", ",", "optimG", ",", "optimD", ",", "epoch", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "'netG'", ":", "netG", ".", "state_dict", "(", ")", ",", "'netD'", ":", "netD", ".", "state_dict", "(", ")", ",", "\n", "'optimG'", ":", "optimG", ".", "state_dict", "(", ")", ",", "'optimD'", ":", "optimD", ".", "state_dict", "(", ")", "}", ",", "\n", "\"%s/model_epoch%d.pth\"", "%", "(", "ckpt_dir", ",", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.parallel_save": [[80, 87], ["torch.save", "torch.save", "os.path.exists", "os.makedirs", "netG.module.state_dict", "netD.module.state_dict", "optimG.module.state_dict", "optimD.module.state_dict"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save"], ["", "def", "parallel_save", "(", "ckpt_dir", ",", "netG", ",", "netD", ",", "optimG", ",", "optimD", ",", "epoch", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "'netG'", ":", "netG", ".", "module", ".", "state_dict", "(", ")", ",", "'netD'", ":", "netD", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimG'", ":", "optimG", ".", "module", ".", "state_dict", "(", ")", ",", "'optimD'", ":", "optimD", ".", "module", ".", "state_dict", "(", ")", "}", ",", "\n", "\"%s/model_epoch%d.pth\"", "%", "(", "ckpt_dir", ",", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.load": [[89, 108], ["torch.device", "torch.device", "os.listdir", "os.listdir.sort", "torch.load", "torch.load", "netG.load_state_dict", "netD.load_state_dict", "optimG.load_state_dict", "optimD.load_state_dict", "int", "os.path.exists", "torch.cuda.is_available", "torch.cuda.is_available", "[].split", "int", "filter", "ckpt_lst[].split"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.load", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.load"], ["", "def", "load", "(", "ckpt_dir", ",", "netG", ",", "netD", ",", "optimG", ",", "optimD", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "return", "netG", ",", "netD", ",", "optimG", ",", "optimD", ",", "epoch", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "ckpt_lst", "=", "os", ".", "listdir", "(", "ckpt_dir", ")", "\n", "ckpt_lst", ".", "sort", "(", "key", "=", "lambda", "f", ":", "int", "(", "''", ".", "join", "(", "filter", "(", "str", ".", "isdigit", ",", "f", ")", ")", ")", ")", "\n", "\n", "dict_model", "=", "torch", ".", "load", "(", "'%s/%s'", "%", "(", "ckpt_dir", ",", "ckpt_lst", "[", "-", "1", "]", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "netG", ".", "load_state_dict", "(", "dict_model", "[", "'netG'", "]", ")", "\n", "netD", ".", "load_state_dict", "(", "dict_model", "[", "'netD'", "]", ")", "\n", "optimG", ".", "load_state_dict", "(", "dict_model", "[", "'optimG'", "]", ")", "\n", "optimD", ".", "load_state_dict", "(", "dict_model", "[", "'optimD'", "]", ")", "\n", "epoch", "=", "int", "(", "ckpt_lst", "[", "-", "1", "]", ".", "split", "(", "'epoch'", ")", "[", "1", "]", ".", "split", "(", "'.pth'", ")", "[", "0", "]", ")", "\n", "\n", "return", "netG", ",", "netD", ",", "optimG", ",", "optimD", ",", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.face_load": [[109, 128], ["torch.device", "torch.device", "os.listdir", "os.listdir.sort", "torch.load", "torch.load", "netFaceG.load_state_dict", "netFaceD.load_state_dict", "optimFG.load_state_dict", "optimFD.load_state_dict", "int", "os.path.exists", "torch.cuda.is_available", "torch.cuda.is_available", "[].split", "int", "filter", "ckpt_lst[].split"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.load", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.load"], ["", "def", "face_load", "(", "ckpt_dir", ",", "netFaceG", ",", "netFaceD", ",", "optimFG", ",", "optimFD", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "return", "netFaceG", ",", "netFaceD", ",", "optimFG", ",", "optimFD", ",", "epoch", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "ckpt_lst", "=", "os", ".", "listdir", "(", "ckpt_dir", ")", "\n", "ckpt_lst", ".", "sort", "(", "key", "=", "lambda", "f", ":", "int", "(", "''", ".", "join", "(", "filter", "(", "str", ".", "isdigit", ",", "f", ")", ")", ")", ")", "\n", "\n", "dict_model", "=", "torch", ".", "load", "(", "'%s/%s'", "%", "(", "ckpt_dir", ",", "ckpt_lst", "[", "-", "1", "]", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "netFaceG", ".", "load_state_dict", "(", "dict_model", "[", "'netFaceG'", "]", ")", "\n", "netFaceD", ".", "load_state_dict", "(", "dict_model", "[", "'netFaceD'", "]", ")", "\n", "optimFG", ".", "load_state_dict", "(", "dict_model", "[", "'optimFG'", "]", ")", "\n", "optimFD", ".", "load_state_dict", "(", "dict_model", "[", "'optimFD'", "]", ")", "\n", "epoch", "=", "int", "(", "ckpt_lst", "[", "-", "1", "]", ".", "split", "(", "'epoch'", ")", "[", "1", "]", ".", "split", "(", "'.pth'", ")", "[", "0", "]", ")", "\n", "\n", "return", "netFaceG", ",", "netFaceD", ",", "optimFG", ",", "optimFD", ",", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.cube_load": [[129, 149], ["torch.device", "torch.device", "os.listdir", "os.listdir.sort", "torch.load", "torch.load", "netCubeG.load_state_dict", "netWholeD.load_state_dict", "netSliceD.load_state_dict", "optimCG.load_state_dict", "optimCD.load_state_dict", "int", "os.path.exists", "torch.cuda.is_available", "torch.cuda.is_available", "[].split", "int", "filter", "ckpt_lst[].split"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.load", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.load"], ["", "def", "cube_load", "(", "ckpt_dir", ",", "netCubeG", ",", "netWholeD", ",", "netSliceD", ",", "optimCG", ",", "optimCD", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "return", "netCubeG", ",", "netWholeD", ",", "netSliceD", ",", "optimCG", ",", "optimCD", ",", "epoch", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "ckpt_lst", "=", "os", ".", "listdir", "(", "ckpt_dir", ")", "\n", "ckpt_lst", ".", "sort", "(", "key", "=", "lambda", "f", ":", "int", "(", "''", ".", "join", "(", "filter", "(", "str", ".", "isdigit", ",", "f", ")", ")", ")", ")", "\n", "\n", "dict_model", "=", "torch", ".", "load", "(", "'%s/%s'", "%", "(", "ckpt_dir", ",", "ckpt_lst", "[", "-", "1", "]", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "netCubeG", ".", "load_state_dict", "(", "dict_model", "[", "'netCubeG'", "]", ")", "\n", "netWholeD", ".", "load_state_dict", "(", "dict_model", "[", "'netWholeD'", "]", ")", "\n", "netSliceD", ".", "load_state_dict", "(", "dict_model", "[", "'netSliceD'", "]", ")", "\n", "optimCG", ".", "load_state_dict", "(", "dict_model", "[", "'optimCG'", "]", ")", "\n", "optimCD", ".", "load_state_dict", "(", "dict_model", "[", "'optimCD'", "]", ")", "\n", "epoch", "=", "int", "(", "ckpt_lst", "[", "-", "1", "]", ".", "split", "(", "'epoch'", ")", "[", "1", "]", ".", "split", "(", "'.pth'", ")", "[", "0", "]", ")", "\n", "\n", "return", "netCubeG", ",", "netWholeD", ",", "netSliceD", ",", "optimCG", ",", "optimCD", ",", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.poisson_blend": [[150, 199], ["x.clone().cpu.clone().cpu", "output.clone().cpu.clone().cpu", "torch.cat.clone().cpu", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torchvision.functional.to_pil_image", "torchvision.functional.to_pil_image", "torchvision.functional.to_pil_image", "x.clone().cpu.clone", "output.clone().cpu.clone", "torch.cat.clone", "numpy.array", "numpy.array", "numpy.array", "transforms.functional.to_pil_image.sum", "range", "cv2.seamlessClone", "torchvision.functional.to_tensor", "torch.unsqueeze", "torch.unsqueeze", "torch.cat.append", "torchvision.functional.to_tensor", "torch.unsqueeze", "torch.unsqueeze", "torch.cat.append", "range", "min", "max", "min", "max", "ys.append", "xs.append"], "function", ["None"], ["", "def", "poisson_blend", "(", "x", ",", "output", ",", "mask", ")", ":", "\n", "    ", "\"\"\"\n    * inputs:\n        - x (torch.Tensor, required)\n                Input image tensor of shape (N, 3, H, W).\n        - output (torch.Tensor, required)\n                Output tensor from Completion Network of shape (N, 3, H, W).\n        - mask (torch.Tensor, required)\n                Input mask tensor of shape (N, 1, H, W).\n    * returns:\n                An image tensor of shape (N, 3, H, W) inpainted\n                using poisson image editing method.\n    \"\"\"", "\n", "x", "=", "x", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "output", "=", "output", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "mask", "=", "mask", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "(", "mask", ",", "mask", ",", "mask", ")", ",", "dim", "=", "1", ")", "# convert to 3-channel format", "\n", "num_samples", "=", "x", ".", "shape", "[", "0", "]", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "dstimg", "=", "transforms", ".", "functional", ".", "to_pil_image", "(", "x", "[", "i", "]", ")", "\n", "dstimg", "=", "np", ".", "array", "(", "dstimg", ")", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "srcimg", "=", "transforms", ".", "functional", ".", "to_pil_image", "(", "output", "[", "i", "]", ")", "\n", "srcimg", "=", "np", ".", "array", "(", "srcimg", ")", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "msk", "=", "transforms", ".", "functional", ".", "to_pil_image", "(", "mask", "[", "i", "]", ")", "\n", "msk", "=", "np", ".", "array", "(", "msk", ")", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n", "if", "msk", ".", "sum", "(", ")", "!=", "0", ":", "\n", "# compute mask's center", "\n", "            ", "xs", ",", "ys", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "msk", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "msk", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "if", "msk", "[", "i", ",", "j", ",", "0", "]", "==", "255", ":", "\n", "                        ", "ys", ".", "append", "(", "i", ")", "\n", "xs", ".", "append", "(", "j", ")", "\n", "", "", "", "xmin", ",", "xmax", "=", "min", "(", "xs", ")", ",", "max", "(", "xs", ")", "\n", "ymin", ",", "ymax", "=", "min", "(", "ys", ")", ",", "max", "(", "ys", ")", "\n", "center", "=", "(", "(", "xmax", "+", "xmin", ")", "//", "2", ",", "(", "ymax", "+", "ymin", ")", "//", "2", ")", "\n", "out", "=", "cv2", ".", "seamlessClone", "(", "srcimg", ",", "dstimg", ",", "msk", ",", "center", ",", "cv2", ".", "NORMAL_CLONE", ")", "\n", "out", "=", "out", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "out", "=", "transforms", ".", "functional", ".", "to_tensor", "(", "out", ")", "\n", "out", "=", "torch", ".", "unsqueeze", "(", "out", ",", "dim", "=", "0", ")", "\n", "ret", ".", "append", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "transforms", ".", "functional", ".", "to_tensor", "(", "dstimg", ")", "\n", "out", "=", "torch", ".", "unsqueeze", "(", "out", ",", "dim", "=", "0", ")", "\n", "ret", ".", "append", "(", "out", ")", "\n", "", "", "ret", "=", "torch", ".", "cat", "(", "ret", ",", "dim", "=", "0", ")", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.xyzcube": [[5, 38], ["numpy.zeros", "numpy.linspace", "numpy.stack", "numpy.meshgrid"], "function", ["None"], ["def", "xyzcube", "(", "face_w", ")", ":", "\n", "    ", "'''\n    Return the xyz cordinates of the unit cube in [F R B L U D] format.\n    '''", "\n", "out", "=", "np", ".", "zeros", "(", "(", "face_w", ",", "face_w", "*", "6", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "rng", "=", "np", ".", "linspace", "(", "-", "0.5", ",", "0.5", ",", "num", "=", "face_w", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "grid", "=", "np", ".", "stack", "(", "np", ".", "meshgrid", "(", "rng", ",", "-", "rng", ")", ",", "-", "1", ")", "\n", "\n", "# Front face (z = 0.5)", "\n", "out", "[", ":", ",", "0", "*", "face_w", ":", "1", "*", "face_w", ",", "[", "0", ",", "1", "]", "]", "=", "grid", "\n", "out", "[", ":", ",", "0", "*", "face_w", ":", "1", "*", "face_w", ",", "2", "]", "=", "0.5", "\n", "\n", "# Right face (x = 0.5)", "\n", "out", "[", ":", ",", "1", "*", "face_w", ":", "2", "*", "face_w", ",", "[", "2", ",", "1", "]", "]", "=", "grid", "\n", "out", "[", ":", ",", "1", "*", "face_w", ":", "2", "*", "face_w", ",", "0", "]", "=", "0.5", "\n", "\n", "# Back face (z = -0.5)", "\n", "out", "[", ":", ",", "2", "*", "face_w", ":", "3", "*", "face_w", ",", "[", "0", ",", "1", "]", "]", "=", "grid", "\n", "out", "[", ":", ",", "2", "*", "face_w", ":", "3", "*", "face_w", ",", "2", "]", "=", "-", "0.5", "\n", "\n", "# Left face (x = -0.5)", "\n", "out", "[", ":", ",", "3", "*", "face_w", ":", "4", "*", "face_w", ",", "[", "2", ",", "1", "]", "]", "=", "grid", "\n", "out", "[", ":", ",", "3", "*", "face_w", ":", "4", "*", "face_w", ",", "0", "]", "=", "-", "0.5", "\n", "\n", "# Up face (y = 0.5)", "\n", "out", "[", ":", ",", "4", "*", "face_w", ":", "5", "*", "face_w", ",", "[", "0", ",", "2", "]", "]", "=", "grid", "\n", "out", "[", ":", ",", "4", "*", "face_w", ":", "5", "*", "face_w", ",", "1", "]", "=", "0.5", "\n", "\n", "# Down face (y = -0.5)", "\n", "out", "[", ":", ",", "5", "*", "face_w", ":", "6", "*", "face_w", ",", "[", "0", ",", "2", "]", "]", "=", "grid", "\n", "out", "[", ":", ",", "5", "*", "face_w", ":", "6", "*", "face_w", ",", "1", "]", "=", "-", "0.5", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.equirect_uvgrid": [[40, 45], ["numpy.linspace", "numpy.stack", "numpy.linspace", "numpy.meshgrid"], "function", ["None"], ["", "def", "equirect_uvgrid", "(", "h", ",", "w", ")", ":", "\n", "    ", "u", "=", "np", ".", "linspace", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ",", "num", "=", "w", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "v", "=", "np", ".", "linspace", "(", "np", ".", "pi", ",", "-", "np", ".", "pi", ",", "num", "=", "h", ",", "dtype", "=", "np", ".", "float32", ")", "/", "2", "\n", "\n", "return", "np", ".", "stack", "(", "np", ".", "meshgrid", "(", "u", ",", "v", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.equirect_facetype": [[47, 65], ["numpy.roll", "numpy.zeros", "enumerate", "numpy.roll", "np.roll.astype", "[].repeat", "numpy.linspace", "numpy.round().astype", "numpy.concatenate", "numpy.flip", "numpy.round", "numpy.arange().repeat", "numpy.arange", "numpy.arctan", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip"], ["", "def", "equirect_facetype", "(", "h", ",", "w", ")", ":", "\n", "    ", "'''\n    0F 1R 2B 3L 4U 5D\n    '''", "\n", "tp", "=", "np", ".", "roll", "(", "np", ".", "arange", "(", "4", ")", ".", "repeat", "(", "w", "//", "4", ")", "[", "None", ",", ":", "]", ".", "repeat", "(", "h", ",", "0", ")", ",", "3", "*", "w", "//", "8", ",", "1", ")", "\n", "\n", "# Prepare ceil mask", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", "//", "4", ")", ",", "np", ".", "bool", ")", "\n", "idx", "=", "np", ".", "linspace", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ",", "w", "//", "4", ")", "/", "4", "\n", "idx", "=", "h", "//", "2", "-", "np", ".", "round", "(", "np", ".", "arctan", "(", "np", ".", "cos", "(", "idx", ")", ")", "*", "h", "/", "np", ".", "pi", ")", ".", "astype", "(", "int", ")", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", ":", "\n", "        ", "mask", "[", ":", "j", ",", "i", "]", "=", "1", "\n", "", "mask", "=", "np", ".", "roll", "(", "np", ".", "concatenate", "(", "[", "mask", "]", "*", "4", ",", "1", ")", ",", "3", "*", "w", "//", "8", ",", "1", ")", "\n", "\n", "tp", "[", "mask", "]", "=", "4", "\n", "tp", "[", "np", ".", "flip", "(", "mask", ",", "0", ")", "]", "=", "5", "\n", "\n", "return", "tp", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.xyzpers": [[67, 80], ["numpy.ones", "numpy.tan", "numpy.tan", "numpy.linspace", "numpy.linspace", "numpy.stack", "sphere_utils.rotation_matrix", "sphere_utils.rotation_matrix", "sphere_utils.rotation_matrix", "np.ones.dot().dot().dot", "numpy.meshgrid", "numpy.array().dot().dot", "np.ones.dot().dot", "numpy.array().dot", "np.ones.dot", "numpy.array"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.rotation_matrix", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.rotation_matrix", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.rotation_matrix"], ["", "def", "xyzpers", "(", "h_fov", ",", "v_fov", ",", "u", ",", "v", ",", "out_hw", ",", "in_rot", ")", ":", "\n", "    ", "out", "=", "np", ".", "ones", "(", "(", "*", "out_hw", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "\n", "x_max", "=", "np", ".", "tan", "(", "h_fov", "/", "2", ")", "\n", "y_max", "=", "np", ".", "tan", "(", "v_fov", "/", "2", ")", "\n", "x_rng", "=", "np", ".", "linspace", "(", "-", "x_max", ",", "x_max", ",", "num", "=", "out_hw", "[", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_rng", "=", "np", ".", "linspace", "(", "-", "y_max", ",", "y_max", ",", "num", "=", "out_hw", "[", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "out", "[", "...", ",", ":", "2", "]", "=", "np", ".", "stack", "(", "np", ".", "meshgrid", "(", "x_rng", ",", "-", "y_rng", ")", ",", "-", "1", ")", "\n", "Rx", "=", "rotation_matrix", "(", "v", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "Ry", "=", "rotation_matrix", "(", "u", ",", "[", "0", ",", "1", ",", "0", "]", ")", "\n", "Ri", "=", "rotation_matrix", "(", "in_rot", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1.0", "]", ")", ".", "dot", "(", "Rx", ")", ".", "dot", "(", "Ry", ")", ")", "\n", "\n", "return", "out", ".", "dot", "(", "Rx", ")", ".", "dot", "(", "Ry", ")", ".", "dot", "(", "Ri", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.xyz2uv": [[82, 92], ["numpy.split", "numpy.arctan2", "numpy.sqrt", "numpy.arctan2", "numpy.concatenate"], "function", ["None"], ["", "def", "xyz2uv", "(", "xyz", ")", ":", "\n", "    ", "'''\n    xyz: ndarray in shape of [..., 3]\n    '''", "\n", "x", ",", "y", ",", "z", "=", "np", ".", "split", "(", "xyz", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "u", "=", "np", ".", "arctan2", "(", "x", ",", "z", ")", "\n", "c", "=", "np", ".", "sqrt", "(", "x", "**", "2", "+", "z", "**", "2", ")", "\n", "v", "=", "np", ".", "arctan2", "(", "y", ",", "c", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "u", ",", "v", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.uv2unitxyz": [[94, 102], ["numpy.split", "numpy.sin", "numpy.cos", "numpy.concatenate", "numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "uv2unitxyz", "(", "uv", ")", ":", "\n", "    ", "u", ",", "v", "=", "np", ".", "split", "(", "uv", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "y", "=", "np", ".", "sin", "(", "v", ")", "\n", "c", "=", "np", ".", "cos", "(", "v", ")", "\n", "x", "=", "c", "*", "np", ".", "sin", "(", "u", ")", "\n", "z", "=", "c", "*", "np", ".", "cos", "(", "u", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.uv2coor": [[104, 115], ["numpy.split", "numpy.concatenate"], "function", ["None"], ["", "def", "uv2coor", "(", "uv", ",", "h", ",", "w", ")", ":", "\n", "    ", "'''\n    uv: ndarray in shape of [..., 2]\n    h: int, height of the equirectangular image\n    w: int, width of the equirectangular image\n    '''", "\n", "u", ",", "v", "=", "np", ".", "split", "(", "uv", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "coor_x", "=", "(", "u", "/", "(", "2", "*", "np", ".", "pi", ")", "+", "0.5", ")", "*", "w", "-", "0.5", "\n", "coor_y", "=", "(", "-", "v", "/", "np", ".", "pi", "+", "0.5", ")", "*", "h", "-", "0.5", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "coor_x", ",", "coor_y", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.coor2uv": [[117, 123], ["numpy.split", "numpy.concatenate"], "function", ["None"], ["", "def", "coor2uv", "(", "coorxy", ",", "h", ",", "w", ")", ":", "\n", "    ", "coor_x", ",", "coor_y", "=", "np", ".", "split", "(", "coorxy", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "u", "=", "(", "(", "coor_x", "+", "0.5", ")", "/", "w", "-", "0.5", ")", "*", "2", "*", "np", ".", "pi", "\n", "v", "=", "-", "(", "(", "coor_y", "+", "0.5", ")", "/", "h", "-", "0.5", ")", "*", "np", ".", "pi", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "u", ",", "v", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.sample_equirec": [[125, 133], ["numpy.split", "numpy.roll", "numpy.roll", "numpy.concatenate", "scipy.ndimage.map_coordinates"], "function", ["None"], ["", "def", "sample_equirec", "(", "e_img", ",", "coor_xy", ",", "order", ")", ":", "\n", "    ", "w", "=", "e_img", ".", "shape", "[", "1", "]", "\n", "coor_x", ",", "coor_y", "=", "np", ".", "split", "(", "coor_xy", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "pad_u", "=", "np", ".", "roll", "(", "e_img", "[", "[", "0", "]", "]", ",", "w", "//", "2", ",", "1", ")", "\n", "pad_d", "=", "np", ".", "roll", "(", "e_img", "[", "[", "-", "1", "]", "]", ",", "w", "//", "2", ",", "1", ")", "\n", "e_img", "=", "np", ".", "concatenate", "(", "[", "e_img", ",", "pad_d", ",", "pad_u", "]", ",", "0", ")", "\n", "return", "map_coordinates", "(", "e_img", ",", "[", "coor_y", ",", "coor_x", "]", ",", "\n", "order", "=", "order", ",", "mode", "=", "'wrap'", ")", "[", "...", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.sample_cubefaces": [[135, 174], ["np.concatenate.copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "scipy.ndimage.map_coordinates"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip"], ["", "def", "sample_cubefaces", "(", "cube_faces", ",", "tp", ",", "coor_y", ",", "coor_x", ",", "order", ")", ":", "\n", "    ", "cube_faces", "=", "cube_faces", ".", "copy", "(", ")", "\n", "cube_faces", "[", "1", "]", "=", "np", ".", "flip", "(", "cube_faces", "[", "1", "]", ",", "1", ")", "\n", "cube_faces", "[", "2", "]", "=", "np", ".", "flip", "(", "cube_faces", "[", "2", "]", ",", "1", ")", "\n", "cube_faces", "[", "4", "]", "=", "np", ".", "flip", "(", "cube_faces", "[", "4", "]", ",", "0", ")", "\n", "\n", "# Pad up down", "\n", "pad_ud", "=", "np", ".", "zeros", "(", "(", "6", ",", "2", ",", "cube_faces", ".", "shape", "[", "2", "]", ")", ")", "\n", "pad_ud", "[", "0", ",", "0", "]", "=", "cube_faces", "[", "5", ",", "0", ",", ":", "]", "\n", "pad_ud", "[", "0", ",", "1", "]", "=", "cube_faces", "[", "4", ",", "-", "1", ",", ":", "]", "\n", "pad_ud", "[", "1", ",", "0", "]", "=", "cube_faces", "[", "5", ",", ":", ",", "-", "1", "]", "\n", "pad_ud", "[", "1", ",", "1", "]", "=", "cube_faces", "[", "4", ",", ":", ":", "-", "1", ",", "-", "1", "]", "\n", "pad_ud", "[", "2", ",", "0", "]", "=", "cube_faces", "[", "5", ",", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "pad_ud", "[", "2", ",", "1", "]", "=", "cube_faces", "[", "4", ",", "0", ",", ":", ":", "-", "1", "]", "\n", "pad_ud", "[", "3", ",", "0", "]", "=", "cube_faces", "[", "5", ",", ":", ":", "-", "1", ",", "0", "]", "\n", "pad_ud", "[", "3", ",", "1", "]", "=", "cube_faces", "[", "4", ",", ":", ",", "0", "]", "\n", "pad_ud", "[", "4", ",", "0", "]", "=", "cube_faces", "[", "0", ",", "0", ",", ":", "]", "\n", "pad_ud", "[", "4", ",", "1", "]", "=", "cube_faces", "[", "2", ",", "0", ",", ":", ":", "-", "1", "]", "\n", "pad_ud", "[", "5", ",", "0", "]", "=", "cube_faces", "[", "2", ",", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "pad_ud", "[", "5", ",", "1", "]", "=", "cube_faces", "[", "0", ",", "-", "1", ",", ":", "]", "\n", "cube_faces", "=", "np", ".", "concatenate", "(", "[", "cube_faces", ",", "pad_ud", "]", ",", "1", ")", "\n", "\n", "# Pad left right", "\n", "pad_lr", "=", "np", ".", "zeros", "(", "(", "6", ",", "cube_faces", ".", "shape", "[", "1", "]", ",", "2", ")", ")", "\n", "pad_lr", "[", "0", ",", ":", ",", "0", "]", "=", "cube_faces", "[", "1", ",", ":", ",", "0", "]", "\n", "pad_lr", "[", "0", ",", ":", ",", "1", "]", "=", "cube_faces", "[", "3", ",", ":", ",", "-", "1", "]", "\n", "pad_lr", "[", "1", ",", ":", ",", "0", "]", "=", "cube_faces", "[", "2", ",", ":", ",", "0", "]", "\n", "pad_lr", "[", "1", ",", ":", ",", "1", "]", "=", "cube_faces", "[", "0", ",", ":", ",", "-", "1", "]", "\n", "pad_lr", "[", "2", ",", ":", ",", "0", "]", "=", "cube_faces", "[", "3", ",", ":", ",", "0", "]", "\n", "pad_lr", "[", "2", ",", ":", ",", "1", "]", "=", "cube_faces", "[", "1", ",", ":", ",", "-", "1", "]", "\n", "pad_lr", "[", "3", ",", ":", ",", "0", "]", "=", "cube_faces", "[", "0", ",", ":", ",", "0", "]", "\n", "pad_lr", "[", "3", ",", ":", ",", "1", "]", "=", "cube_faces", "[", "2", ",", ":", ",", "-", "1", "]", "\n", "pad_lr", "[", "4", ",", "1", ":", "-", "1", ",", "0", "]", "=", "cube_faces", "[", "1", ",", "0", ",", ":", ":", "-", "1", "]", "\n", "pad_lr", "[", "4", ",", "1", ":", "-", "1", ",", "1", "]", "=", "cube_faces", "[", "3", ",", "0", ",", ":", "]", "\n", "pad_lr", "[", "5", ",", "1", ":", "-", "1", ",", "0", "]", "=", "cube_faces", "[", "1", ",", "-", "2", ",", ":", "]", "\n", "pad_lr", "[", "5", ",", "1", ":", "-", "1", ",", "1", "]", "=", "cube_faces", "[", "3", ",", "-", "2", ",", ":", ":", "-", "1", "]", "\n", "cube_faces", "=", "np", ".", "concatenate", "(", "[", "cube_faces", ",", "pad_lr", "]", ",", "2", ")", "\n", "\n", "return", "map_coordinates", "(", "cube_faces", ",", "[", "tp", ",", "coor_y", ",", "coor_x", "]", ",", "order", "=", "order", ",", "mode", "=", "'wrap'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_h2list": [[176, 179], ["numpy.split"], "function", ["None"], ["", "def", "cube_h2list", "(", "cube_h", ")", ":", "\n", "    ", "assert", "cube_h", ".", "shape", "[", "0", "]", "*", "6", "==", "cube_h", ".", "shape", "[", "1", "]", "\n", "return", "np", ".", "split", "(", "cube_h", ",", "6", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_list2h": [[181, 185], ["numpy.concatenate", "len", "sum"], "function", ["None"], ["", "def", "cube_list2h", "(", "cube_list", ")", ":", "\n", "    ", "assert", "len", "(", "cube_list", ")", "==", "6", "\n", "assert", "sum", "(", "face", ".", "shape", "==", "cube_list", "[", "0", "]", ".", "shape", "for", "face", "in", "cube_list", ")", "==", "6", "\n", "return", "np", ".", "concatenate", "(", "cube_list", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_h2dict": [[187, 191], ["sphere_utils.cube_h2list", "dict", "enumerate"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_h2list"], ["", "def", "cube_h2dict", "(", "cube_h", ")", ":", "\n", "    ", "cube_list", "=", "cube_h2list", "(", "cube_h", ")", "\n", "return", "dict", "(", "[", "(", "k", ",", "cube_list", "[", "i", "]", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "[", "'F'", ",", "'R'", ",", "'B'", ",", "'L'", ",", "'U'", ",", "'D'", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_dict2h": [[193, 196], ["sphere_utils.cube_list2h", "len"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_list2h"], ["", "def", "cube_dict2h", "(", "cube_dict", ",", "face_k", "=", "[", "'F'", ",", "'R'", ",", "'B'", ",", "'L'", ",", "'U'", ",", "'D'", "]", ")", ":", "\n", "    ", "assert", "len", "(", "face_k", ")", "==", "6", "\n", "return", "cube_list2h", "(", "[", "cube_dict", "[", "k", "]", "for", "k", "in", "face_k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_h2dice": [[198, 213], ["numpy.zeros", "sphere_utils.cube_h2list", "enumerate", "numpy.flip", "numpy.flip"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_h2list", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip"], ["", "def", "cube_h2dice", "(", "cube_h", ")", ":", "\n", "    ", "assert", "cube_h", ".", "shape", "[", "0", "]", "*", "6", "==", "cube_h", ".", "shape", "[", "1", "]", "\n", "w", "=", "cube_h", ".", "shape", "[", "0", "]", "\n", "cube_dice", "=", "np", ".", "zeros", "(", "(", "w", "*", "3", ",", "w", "*", "4", ",", "cube_h", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "cube_h", ".", "dtype", ")", "\n", "cube_list", "=", "cube_h2list", "(", "cube_h", ")", "\n", "# Order: F R B L U D", "\n", "sxy", "=", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "1", ")", ",", "(", "3", ",", "1", ")", ",", "(", "0", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "(", "1", ",", "2", ")", "]", "\n", "for", "i", ",", "(", "sx", ",", "sy", ")", "in", "enumerate", "(", "sxy", ")", ":", "\n", "        ", "face", "=", "cube_list", "[", "i", "]", "\n", "if", "i", "in", "[", "1", ",", "2", "]", ":", "\n", "            ", "face", "=", "np", ".", "flip", "(", "face", ",", "axis", "=", "1", ")", "\n", "", "if", "i", "==", "4", ":", "\n", "            ", "face", "=", "np", ".", "flip", "(", "face", ",", "axis", "=", "0", ")", "\n", "", "cube_dice", "[", "sy", "*", "w", ":", "(", "sy", "+", "1", ")", "*", "w", ",", "sx", "*", "w", ":", "(", "sx", "+", "1", ")", "*", "w", "]", "=", "face", "\n", "", "return", "cube_dice", ",", "cube_list", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.cube_dice2h": [[215, 229], ["numpy.zeros", "enumerate", "numpy.flip", "numpy.flip"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip"], ["", "def", "cube_dice2h", "(", "cube_dice", ")", ":", "\n", "    ", "w", "=", "cube_dice", ".", "shape", "[", "1", "]", "//", "3", "\n", "assert", "cube_dice", ".", "shape", "[", "0", "]", "==", "w", "*", "3", "and", "cube_dice", ".", "shape", "[", "1", "]", "==", "w", "*", "4", "\n", "cube_h", "=", "np", ".", "zeros", "(", "(", "w", ",", "w", "*", "6", ",", "cube_dice", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "cube_dice", ".", "dtype", ")", "\n", "# Order: F R B L U D", "\n", "sxy", "=", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "1", ")", ",", "(", "3", ",", "1", ")", ",", "(", "0", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "(", "1", ",", "2", ")", "]", "\n", "for", "i", ",", "(", "sx", ",", "sy", ")", "in", "enumerate", "(", "sxy", ")", ":", "\n", "        ", "face", "=", "cube_dice", "[", "sy", "*", "w", ":", "(", "sy", "+", "1", ")", "*", "w", ",", "sx", "*", "w", ":", "(", "sx", "+", "1", ")", "*", "w", "]", "\n", "if", "i", "in", "[", "1", ",", "2", "]", ":", "\n", "            ", "face", "=", "np", ".", "flip", "(", "face", ",", "axis", "=", "1", ")", "\n", "", "if", "i", "==", "4", ":", "\n", "            ", "face", "=", "np", ".", "flip", "(", "face", ",", "axis", "=", "0", ")", "\n", "", "cube_h", "[", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", "]", "=", "face", "\n", "", "return", "cube_h", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.sphere_utils.rotation_matrix": [[231, 244], ["numpy.array", "numpy.diag", "numpy.sqrt", "numpy.sin", "numpy.array", "len", "numpy.outer", "numpy.cos", "numpy.cos"], "function", ["None"], ["", "def", "rotation_matrix", "(", "rad", ",", "ax", ")", ":", "\n", "    ", "ax", "=", "np", ".", "array", "(", "ax", ")", "\n", "assert", "len", "(", "ax", ".", "shape", ")", "==", "1", "and", "ax", ".", "shape", "[", "0", "]", "==", "3", "\n", "ax", "=", "ax", "/", "np", ".", "sqrt", "(", "(", "ax", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "R", "=", "np", ".", "diag", "(", "[", "np", ".", "cos", "(", "rad", ")", "]", "*", "3", ")", "\n", "R", "=", "R", "+", "np", ".", "outer", "(", "ax", ",", "ax", ")", "*", "(", "1.0", "-", "np", ".", "cos", "(", "rad", ")", ")", "\n", "\n", "ax", "=", "ax", "*", "np", ".", "sin", "(", "rad", ")", "\n", "R", "=", "R", "+", "np", ".", "array", "(", "[", "[", "0", ",", "-", "ax", "[", "2", "]", ",", "ax", "[", "1", "]", "]", ",", "\n", "[", "ax", "[", "2", "]", ",", "0", ",", "-", "ax", "[", "0", "]", "]", ",", "\n", "[", "-", "ax", "[", "1", "]", ",", "ax", "[", "0", "]", ",", "0", "]", "]", ")", "\n", "\n", "return", "R", "", "", ""]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_rectangle_mask.make_save_random_mask": [[16, 20], ["create_rectangle_mask.create_rectangle_mask", "os.path.splitext", "cv2.imwrite", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_rectangle_mask.create_rectangle_mask"], ["def", "make_save_random_mask", "(", "inp_path", ",", "mask_shape", ",", "output_dir", "=", "None", ")", ":", "\n", "    ", "mask", "=", "create_rectangle_mask", "(", "mask_shape", ")", "\n", "base_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "inp_path", ")", ")", "\n", "cv2", ".", "imwrite", "(", "output_dir", "+", "\"/\"", "+", "base_name", "+", "\".png\"", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_rectangle_mask.create_rectangle_mask": [[22, 50], ["numpy.zeros", "cv2.rectangle", "random.randint", "random.randint", "random.randint", "random.randint", "abs", "abs", "abs", "abs"], "function", ["None"], ["", "def", "create_rectangle_mask", "(", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Generates a random irregular mask with lines, circles and elipses\n    \"\"\"", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "mask_h", ",", "mask_w", ",", "_", "=", "mask", ".", "shape", "\n", "\n", "make_mask", "=", "True", "\n", "# Draw random rectangle", "\n", "while", "make_mask", ":", "\n", "        ", "x1", ",", "x2", "=", "randint", "(", "1", ",", "mask_w", ")", ",", "randint", "(", "1", ",", "mask_w", ")", "\n", "y1", ",", "y2", "=", "randint", "(", "50", ",", "mask_h", "-", "50", ")", ",", "randint", "(", "50", ",", "mask_h", "-", "50", ")", "\n", "if", "abs", "(", "y2", "-", "y1", ")", ">", "mask_h", "/", "8", ":", "\n", "            ", "make_mask", "=", "True", "\n", "", "elif", "abs", "(", "y2", "-", "y1", ")", "<", "mask_h", "/", "10", ":", "\n", "            ", "make_mask", "=", "True", "\n", "", "elif", "abs", "(", "x2", "-", "x1", ")", "<", "mask_w", "/", "10", ":", "\n", "            ", "make_mask", "=", "True", "\n", "", "elif", "abs", "(", "x2", "-", "x1", ")", ">", "mask_w", "/", "8", ":", "\n", "            ", "make_mask", "=", "True", "\n", "", "else", ":", "\n", "            ", "make_mask", "=", "False", "\n", "", "", "cv2", ".", "rectangle", "(", "mask", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "-", "1", ")", "\n", "\n", "mask", "=", "mask", "*", "255.", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data.ndarr2b64utf8": [[18, 26], ["PIL.Image.fromarray", "io.BytesIO", "Image.fromarray.save", "output.getvalue", "base64.b64encode", "base64.b64encode.decode"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save"], ["def", "ndarr2b64utf8", "(", "img", ")", ":", "\n", "    ", "img_t", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "with", "io", ".", "BytesIO", "(", ")", "as", "output", ":", "\n", "        ", "img_t", ".", "save", "(", "output", ",", "format", "=", "\"PNG\"", ")", "\n", "content", "=", "output", ".", "getvalue", "(", ")", "\n", "b64_barr", "=", "base64", ".", "b64encode", "(", "content", ")", "\n", "b_string", "=", "b64_barr", ".", "decode", "(", "'utf-8'", ")", "\n", "return", "b_string", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data.b64utf82ndarr": [[27, 33], ["b_string.encode", "base64.b64decode", "PIL.Image.open", "numpy.asarray", "io.BytesIO"], "function", ["None"], ["", "", "def", "b64utf82ndarr", "(", "b_string", ")", ":", "\n", "    ", "b64_barr", "=", "b_string", ".", "encode", "(", "'utf-8'", ")", "\n", "content", "=", "base64", ".", "b64decode", "(", "b64_barr", ")", "\n", "img", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "content", ")", ")", "\n", "inp_np", "=", "np", ".", "asarray", "(", "img", ")", "\n", "return", "inp_np", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data.create_name_pair": [[35, 41], ["dict", "os.path.splitext", "os.path.basename"], "function", ["None"], ["", "def", "create_name_pair", "(", "inp_paths", ")", ":", "\n", "    ", "pair_dict", "=", "dict", "(", ")", "\n", "for", "inp_path", "in", "inp_paths", ":", "\n", "        ", "base_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "inp_path", ")", ")", "\n", "pair_dict", "[", "base_name", "]", "=", "inp_path", "\n", "", "return", "pair_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data.save_image": [[42, 77], ["PIL.Image.open", "numpy.asarray", "os.path.splitext", "dict", "utils.equi_to_cube.e2c", "dict", "enumerate", "os.path.basename", "PIL.Image.open", "numpy.asarray", "utils.equi_to_cube.e2c", "create_data.ndarr2b64utf8", "open", "json.dump", "create_data.ndarr2b64utf8", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.equi_to_cube.e2c", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.equi_to_cube.e2c", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.ndarr2b64utf8", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.ndarr2b64utf8"], ["", "def", "save_image", "(", "inp_path", ",", "output_dir", ",", "mask_path", "=", "None", ",", "face_w", "=", "128", ")", ":", "\n", "    ", "pano_img", "=", "Image", ".", "open", "(", "inp_path", ",", "\"r\"", ")", "\n", "inp_np", "=", "np", ".", "asarray", "(", "pano_img", ")", "\n", "\n", "base_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "inp_path", ")", ")", "\n", "\n", "out_dict", "=", "dict", "(", ")", "\n", "out_dict", "[", "'f_name'", "]", "=", "inp_path", "\n", "out_dict", "[", "'mask_flag'", "]", "=", "False", "\n", "\n", "face_list", "=", "[", "'f'", ",", "'r'", ",", "'b'", ",", "'l'", ",", "'t'", ",", "'d'", "]", "\n", "\n", "if", "mask_path", "is", "not", "None", ":", "\n", "        ", "img_mask", "=", "Image", ".", "open", "(", "mask_path", ",", "\"r\"", ")", "\n", "inp_np_mask", "=", "np", ".", "asarray", "(", "img_mask", ")", "\n", "\n", "cm_mask", ",", "cl_mask", "=", "e2c", "(", "inp_np_mask", ",", "face_w", "=", "face_w", ")", "\n", "out_dict", "[", "'mask_flag'", "]", "=", "True", "\n", "\n", "", "cm", ",", "cl", "=", "e2c", "(", "inp_np", ",", "face_w", "=", "face_w", ")", "\n", "\n", "cube_imgs", "=", "dict", "(", ")", "\n", "\n", "for", "idx", ",", "face", "in", "enumerate", "(", "cl", ")", ":", "\n", "        ", "b_string", "=", "ndarr2b64utf8", "(", "face", ")", "\n", "if", "mask_path", "is", "None", ":", "\n", "            ", "cube_imgs", "[", "face_list", "[", "idx", "]", "]", "=", "[", "b_string", "]", "\n", "", "else", ":", "\n", "            ", "b_string_mask", "=", "ndarr2b64utf8", "(", "cl_mask", "[", "idx", "]", ")", "\n", "cube_imgs", "[", "face_list", "[", "idx", "]", "]", "=", "[", "b_string", "]", "\n", "cube_imgs", "[", "str", "(", "face_list", "[", "idx", "]", ")", "+", "'_mask'", "]", "=", "[", "b_string_mask", "]", "\n", "\n", "", "", "out_dict", "[", "'cube'", "]", "=", "cube_imgs", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "base_name", "+", "\".json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "out_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_tf_record._float_feature": [[6, 8], ["tensorflow.train.Feature", "tensorflow.train.FloatList"], "function", ["None"], ["def", "_float_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_tf_record._int64_feature": [[9, 11], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_tf_record._bytes_feature": [[12, 14], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "_bytes_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.ndarr2b64utf8": [[20, 28], ["PIL.Image.fromarray", "io.BytesIO", "Image.fromarray.save", "output.getvalue", "base64.b64encode", "base64.b64encode.decode"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.save"], ["def", "ndarr2b64utf8", "(", "img", ")", ":", "\n", "    ", "img_t", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "with", "io", ".", "BytesIO", "(", ")", "as", "output", ":", "\n", "        ", "img_t", ".", "save", "(", "output", ",", "format", "=", "\"PNG\"", ")", "\n", "content", "=", "output", ".", "getvalue", "(", ")", "\n", "b64_barr", "=", "base64", ".", "b64encode", "(", "content", ")", "\n", "b_string", "=", "b64_barr", ".", "decode", "(", "'utf-8'", ")", "\n", "return", "b_string", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.b64utf82ndarr": [[29, 35], ["b_string.encode", "base64.b64decode", "PIL.Image.open", "numpy.asarray", "io.BytesIO"], "function", ["None"], ["", "", "def", "b64utf82ndarr", "(", "b_string", ")", ":", "\n", "    ", "b64_barr", "=", "b_string", ".", "encode", "(", "'utf-8'", ")", "\n", "content", "=", "base64", ".", "b64decode", "(", "b64_barr", ")", "\n", "img", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "content", ")", ")", "\n", "inp_np", "=", "np", ".", "asarray", "(", "img", ")", "\n", "return", "inp_np", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.create_name_pair": [[37, 43], ["dict", "os.path.splitext", "os.path.basename"], "function", ["None"], ["", "def", "create_name_pair", "(", "inp_paths", ")", ":", "\n", "    ", "pair_dict", "=", "dict", "(", ")", "\n", "for", "inp_path", "in", "inp_paths", ":", "\n", "        ", "base_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "inp_path", ")", ")", "\n", "pair_dict", "[", "base_name", "]", "=", "inp_path", "\n", "", "return", "pair_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.save_erp_image": [[45, 72], ["PIL.Image.open", "numpy.asarray", "os.path.splitext", "dict", "dict", "create_data_kimsan.ndarr2b64utf8", "os.path.basename", "PIL.Image.open", "numpy.asarray", "create_data_kimsan.ndarr2b64utf8", "open", "json.dump", "os.path.join"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.ndarr2b64utf8", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.ndarr2b64utf8"], ["", "def", "save_erp_image", "(", "inp_path", ",", "output_dir", ",", "mask_path", "=", "None", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "inp_path", ",", "\"r\"", ")", "\n", "inp_np", "=", "np", ".", "asarray", "(", "img", ")", "\n", "\n", "base_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "inp_path", ")", ")", "\n", "\n", "out_dict", "=", "dict", "(", ")", "\n", "out_dict", "[", "'type'", "]", "=", "'erp'", "\n", "out_dict", "[", "'f_name'", "]", "=", "inp_path", "\n", "out_dict", "[", "'mask_flag'", "]", "=", "False", "\n", "\n", "if", "mask_path", "is", "not", "None", ":", "\n", "        ", "img_mask", "=", "Image", ".", "open", "(", "mask_path", ",", "\"r\"", ")", "\n", "inp_np_mask", "=", "np", ".", "asarray", "(", "img_mask", ")", "\n", "out_dict", "[", "'mask_flag'", "]", "=", "True", "\n", "\n", "", "erp_imgs", "=", "dict", "(", ")", "\n", "b_string", "=", "ndarr2b64utf8", "(", "inp_np", ")", "\n", "if", "mask_path", "is", "None", ":", "\n", "        ", "erp_imgs", "[", "'erp'", "]", "=", "[", "b_string", "]", "\n", "", "else", ":", "\n", "        ", "b_string_mask", "=", "ndarr2b64utf8", "(", "inp_np_mask", ")", "\n", "erp_imgs", "[", "'erp'", "]", "=", "[", "b_string", ",", "b_string_mask", "]", "\n", "\n", "", "out_dict", "[", "'imgs'", "]", "=", "erp_imgs", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "base_name", "+", "\".json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "out_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.save_cubemap_image": [[74, 106], ["PIL.Image.open", "numpy.asarray", "utils.equi_to_cube.e2c", "os.path.splitext", "dict", "dict", "enumerate", "os.path.basename", "PIL.Image.open", "numpy.asarray", "utils.equi_to_cube.e2c", "create_data_kimsan.ndarr2b64utf8", "open", "json.dump", "create_data_kimsan.ndarr2b64utf8", "os.path.join"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.equi_to_cube.e2c", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.equi_to_cube.e2c", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.ndarr2b64utf8", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_data_kimsan.ndarr2b64utf8"], ["", "", "def", "save_cubemap_image", "(", "inp_path", ",", "output_dir", ",", "mask_path", "=", "None", ",", "face_w", "=", "128", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "inp_path", ",", "\"r\"", ")", "\n", "inp_np", "=", "np", ".", "asarray", "(", "img", ")", "\n", "cm", ",", "cl", "=", "e2c", "(", "inp_np", ",", "face_w", "=", "face_w", ")", "\n", "\n", "base_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "inp_path", ")", ")", "\n", "face_list", "=", "[", "'f'", ",", "'r'", ",", "'b'", ",", "'l'", ",", "'t'", ",", "'d'", "]", "\n", "\n", "out_dict", "=", "dict", "(", ")", "\n", "out_dict", "[", "'type'", "]", "=", "'cube'", "\n", "out_dict", "[", "'f_name'", "]", "=", "inp_path", "\n", "out_dict", "[", "'mask_flag'", "]", "=", "False", "\n", "\n", "if", "mask_path", "is", "not", "None", ":", "\n", "        ", "img_mask", "=", "Image", ".", "open", "(", "mask_path", ",", "\"r\"", ")", "\n", "inp_np_mask", "=", "np", ".", "asarray", "(", "img_mask", ")", "\n", "cm_mask", ",", "cl_mask", "=", "e2c", "(", "inp_np_mask", ",", "face_w", "=", "face_w", ")", "\n", "out_dict", "[", "'mask_flag'", "]", "=", "True", "\n", "\n", "", "cube_imgs", "=", "dict", "(", ")", "\n", "\n", "for", "idx", ",", "face", "in", "enumerate", "(", "cl", ")", ":", "\n", "        ", "b_string", "=", "ndarr2b64utf8", "(", "face", ")", "\n", "if", "mask_path", "is", "None", ":", "\n", "            ", "cube_imgs", "[", "face_list", "[", "idx", "]", "]", "=", "[", "b_string", "]", "\n", "", "else", ":", "\n", "            ", "b_string_mask", "=", "ndarr2b64utf8", "(", "cl_mask", "[", "idx", "]", ")", "\n", "cube_imgs", "[", "face_list", "[", "idx", "]", "]", "=", "[", "b_string", ",", "b_string_mask", "]", "\n", "\n", "", "", "out_dict", "[", "'imgs'", "]", "=", "cube_imgs", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "base_name", "+", "\".json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "out_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_random_mask.make_save_random_mask": [[14, 19], ["create_random_mask.create_random_mask", "os.path.splitext", "cv2.imwrite", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_random_mask.create_random_mask"], ["def", "make_save_random_mask", "(", "inp_path", ",", "mask_shape", ",", "output_dir", "=", "None", ")", ":", "\n", "\n", "    ", "mask", "=", "create_random_mask", "(", "mask_shape", ")", "\n", "base_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "inp_path", ")", ")", "\n", "cv2", ".", "imwrite", "(", "output_dir", "+", "\"/\"", "+", "base_name", "+", "\".png\"", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.pre_proc.create_random_mask.create_random_mask": [[20, 57], ["numpy.zeros", "int", "range", "range", "range", "Exception", "random.randint", "random.randint", "cv2.line", "random.randint", "random.randint", "cv2.circle", "random.randint", "random.randint", "cv2.ellipse", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "function", ["None"], ["", "def", "create_random_mask", "(", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Generates a random irregular mask with lines, circles and elipses\n    \"\"\"", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "mask_h", ",", "mask_w", ",", "_", "=", "mask", ".", "shape", "\n", "\n", "# Set size scale", "\n", "size", "=", "int", "(", "(", "mask_w", "+", "mask_h", ")", "*", "0.01", ")", "\n", "if", "mask_w", "<", "64", "or", "mask_h", "<", "64", ":", "\n", "        ", "raise", "Exception", "(", "\"Width and Height of mask must be at least 64!\"", ")", "\n", "\n", "# Draw random lines", "\n", "", "for", "_", "in", "range", "(", "randint", "(", "1", ",", "20", ")", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "randint", "(", "1", ",", "mask_w", ")", ",", "randint", "(", "1", ",", "mask_w", ")", "\n", "y1", ",", "y2", "=", "randint", "(", "1", ",", "mask_h", ")", ",", "randint", "(", "1", ",", "mask_h", ")", "\n", "thickness", "=", "randint", "(", "3", ",", "size", ")", "\n", "cv2", ".", "line", "(", "mask", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "thickness", ")", "\n", "\n", "# Draw random circles", "\n", "", "for", "_", "in", "range", "(", "randint", "(", "1", ",", "20", ")", ")", ":", "\n", "        ", "x1", ",", "y1", "=", "randint", "(", "1", ",", "mask_w", ")", ",", "randint", "(", "1", ",", "mask_h", ")", "\n", "radius", "=", "randint", "(", "3", ",", "size", ")", "\n", "cv2", ".", "circle", "(", "mask", ",", "(", "x1", ",", "y1", ")", ",", "radius", ",", "(", "1", ",", "1", ",", "1", ")", ",", "-", "1", ")", "\n", "\n", "# Draw random ellipses", "\n", "", "for", "_", "in", "range", "(", "randint", "(", "1", ",", "20", ")", ")", ":", "\n", "        ", "x1", ",", "y1", "=", "randint", "(", "1", ",", "mask_w", ")", ",", "randint", "(", "1", ",", "mask_h", ")", "\n", "s1", ",", "s2", "=", "randint", "(", "1", ",", "mask_w", ")", ",", "randint", "(", "1", ",", "mask_h", ")", "\n", "a1", ",", "a2", ",", "a3", "=", "randint", "(", "3", ",", "180", ")", ",", "randint", "(", "3", ",", "180", ")", ",", "randint", "(", "3", ",", "180", ")", "\n", "thickness", "=", "randint", "(", "3", ",", "size", ")", "\n", "cv2", ".", "ellipse", "(", "mask", ",", "(", "x1", ",", "y1", ")", ",", "(", "s1", ",", "s2", ")", ",", "a1", ",", "a2", ",", "a3", ",", "(", "1", ",", "1", ",", "1", ")", ",", "thickness", ")", "\n", "\n", "", "mask", "=", "mask", "*", "255.", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.BaseNetwork.__init__": [[8, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.BaseNetwork.init_weights": [[11, 38], ["PIUnet2.BaseNetwork.apply", "hasattr", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.constant_", "torch.init.constant_", "classname.find", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "classname.find", "classname.find", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "'''\n        initialize network's weights\n        init_type: normal | xavier | kaiming | orthogonal\n        https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix/blob/9451e70673400885567d08a9e97ade2524c700d0/models/networks.py#L39\n        '''", "\n", "\n", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.FaceGenerator.__init__": [[41, 83], ["PIUnet2.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "layers.DECBR2d", "PIUnet2.FaceGenerator.init_weights", "print"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "FaceGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "in_channels", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "1", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "2", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc5", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc6", "=", "layers", ".", "CBR2d", "(", "8", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec1", "=", "layers", ".", "DECBR2d", "(", "8", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dec2", "=", "layers", ".", "DECBR2d", "(", "2", "*", "8", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dec3", "=", "layers", ".", "DECBR2d", "(", "2", "*", "4", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop3", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "dec4", "=", "layers", ".", "DECBR2d", "(", "2", "*", "4", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop4", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "dec5", "=", "layers", ".", "DECBR2d", "(", "2", "*", "2", "*", "nker", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec6", "=", "layers", ".", "DECBR2d", "(", "2", "*", "1", "*", "nker", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "None", ",", "stride", "=", "2", ")", "\n", "if", "init_weights", ":", "\n", "                ", "self", ".", "init_weights", "(", ")", "\n", "print", "(", "\"FaceGenerator init weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.FaceGenerator.forward": [[84, 116], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.FaceGenerator.enc1", "PIUnet2.FaceGenerator.enc2", "PIUnet2.FaceGenerator.enc3", "PIUnet2.FaceGenerator.enc4", "PIUnet2.FaceGenerator.enc5", "PIUnet2.FaceGenerator.enc6", "PIUnet2.FaceGenerator.dec1", "PIUnet2.FaceGenerator.drop1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.FaceGenerator.dec2", "PIUnet2.FaceGenerator.drop2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.FaceGenerator.dec3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.FaceGenerator.dec4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.FaceGenerator.dec5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.FaceGenerator.dec6", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "g4f", ",", "m4f", ",", "cm4f", ")", ":", "\n", "# x_cube_mask + cube_mask -> B,4,H,W*4", "\n", "        ", "st1_input", "=", "torch", ".", "cat", "(", "(", "cm4f", ",", "m4f", ")", ",", "dim", "=", "1", ")", "\n", "\n", "enc1", "=", "self", ".", "enc1", "(", "st1_input", ")", "\n", "enc2", "=", "self", ".", "enc2", "(", "enc1", ")", "\n", "enc3", "=", "self", ".", "enc3", "(", "enc2", ")", "\n", "enc4", "=", "self", ".", "enc4", "(", "enc3", ")", "\n", "enc5", "=", "self", ".", "enc5", "(", "enc4", ")", "\n", "enc6", "=", "self", ".", "enc6", "(", "enc5", ")", "\n", "\n", "dec1", "=", "self", ".", "dec1", "(", "enc6", ")", "\n", "drop1", "=", "self", ".", "drop1", "(", "dec1", ")", "\n", "\n", "cat2", "=", "torch", ".", "cat", "(", "(", "drop1", ",", "enc5", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "self", ".", "dec2", "(", "cat2", ")", "\n", "drop2", "=", "self", ".", "drop2", "(", "dec2", ")", "\n", "\n", "cat3", "=", "torch", ".", "cat", "(", "(", "drop2", ",", "enc4", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "self", ".", "dec3", "(", "cat3", ")", "\n", "\n", "cat4", "=", "torch", ".", "cat", "(", "(", "dec3", ",", "enc3", ")", ",", "dim", "=", "1", ")", "\n", "dec4", "=", "self", ".", "dec4", "(", "cat4", ")", "\n", "\n", "cat5", "=", "torch", ".", "cat", "(", "(", "dec4", ",", "enc2", ")", ",", "dim", "=", "1", ")", "\n", "dec5", "=", "self", ".", "dec5", "(", "cat5", ")", "\n", "cat6", "=", "torch", ".", "cat", "(", "(", "dec5", ",", "enc1", ")", ",", "dim", "=", "1", ")", "\n", "dec6", "=", "self", ".", "dec6", "(", "cat6", ")", "\n", "\n", "face_stage", "=", "torch", ".", "tanh", "(", "dec6", ")", "\n", "\n", "return", "face_stage", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.FaceDis.__init__": [[118, 138], ["PIUnet2.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "PIUnet2.FaceDis.init_weights", "print"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "FaceDis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "1", "*", "in_channels", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "1", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "2", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc5", "=", "layers", ".", "CBR2d", "(", "8", "*", "nker", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "None", ",", "bias", "=", "False", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "print", "(", "\"FaceDis init weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.FaceDis.forward": [[139, 149], ["PIUnet2.FaceDis.enc1", "PIUnet2.FaceDis.enc2", "PIUnet2.FaceDis.enc3", "PIUnet2.FaceDis.enc4", "PIUnet2.FaceDis.enc5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "enc1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc2", "(", "x", ")", "\n", "x", "=", "self", ".", "enc3", "(", "x", ")", "\n", "x", "=", "self", ".", "enc4", "(", "x", ")", "\n", "x", "=", "self", ".", "enc5", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.CubeGenerator.__init__": [[151, 192], ["PIUnet2.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "layers.DECBR2d", "PIUnet2.CubeGenerator.init_weights", "print"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "CubeGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "6", "*", "in_channels", ",", "6", "*", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "6", "*", "1", "*", "nker", ",", "6", "*", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "6", "*", "2", "*", "nker", ",", "6", "*", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "6", "*", "4", "*", "nker", ",", "6", "*", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc5", "=", "layers", ".", "CBR2d", "(", "6", "*", "4", "*", "nker", ",", "6", "*", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc6", "=", "layers", ".", "CBR2d", "(", "6", "*", "8", "*", "nker", ",", "6", "*", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec1", "=", "layers", ".", "DECBR2d", "(", "6", "*", "8", "*", "nker", ",", "6", "*", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dec2", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "8", "*", "nker", ",", "6", "*", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dec3", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "4", "*", "nker", ",", "6", "*", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop3", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "dec4", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "4", "*", "nker", ",", "6", "*", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop4", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "dec5", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "2", "*", "nker", ",", "6", "*", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec6", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "1", "*", "nker", ",", "6", "*", "out_channels", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "None", ",", "stride", "=", "2", ")", "\n", "if", "init_weights", ":", "\n", "                ", "self", ".", "init_weights", "(", ")", "\n", "print", "(", "\"CubeGenerator init weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.CubeGenerator.forward": [[193, 222], ["PIUnet2.CubeGenerator.enc1", "PIUnet2.CubeGenerator.enc2", "PIUnet2.CubeGenerator.enc3", "PIUnet2.CubeGenerator.enc4", "PIUnet2.CubeGenerator.enc5", "PIUnet2.CubeGenerator.enc6", "PIUnet2.CubeGenerator.dec1", "PIUnet2.CubeGenerator.drop1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.CubeGenerator.dec2", "PIUnet2.CubeGenerator.drop2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.CubeGenerator.dec3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.CubeGenerator.dec4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.CubeGenerator.dec5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.CubeGenerator.dec6", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "enc2", "=", "self", ".", "enc2", "(", "enc1", ")", "\n", "enc3", "=", "self", ".", "enc3", "(", "enc2", ")", "\n", "enc4", "=", "self", ".", "enc4", "(", "enc3", ")", "\n", "enc5", "=", "self", ".", "enc5", "(", "enc4", ")", "\n", "enc6", "=", "self", ".", "enc6", "(", "enc5", ")", "\n", "\n", "dec1", "=", "self", ".", "dec1", "(", "enc6", ")", "\n", "drop1", "=", "self", ".", "drop1", "(", "dec1", ")", "\n", "\n", "cat2", "=", "torch", ".", "cat", "(", "(", "drop1", ",", "enc5", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "self", ".", "dec2", "(", "cat2", ")", "\n", "drop2", "=", "self", ".", "drop2", "(", "dec2", ")", "\n", "\n", "cat3", "=", "torch", ".", "cat", "(", "(", "drop2", ",", "enc4", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "self", ".", "dec3", "(", "cat3", ")", "\n", "\n", "cat4", "=", "torch", ".", "cat", "(", "(", "dec3", ",", "enc3", ")", ",", "dim", "=", "1", ")", "\n", "dec4", "=", "self", ".", "dec4", "(", "cat4", ")", "\n", "\n", "cat5", "=", "torch", ".", "cat", "(", "(", "dec4", ",", "enc2", ")", ",", "dim", "=", "1", ")", "\n", "dec5", "=", "self", ".", "dec5", "(", "cat5", ")", "\n", "cat6", "=", "torch", ".", "cat", "(", "(", "dec5", ",", "enc1", ")", ",", "dim", "=", "1", ")", "\n", "dec6", "=", "self", ".", "dec6", "(", "cat6", ")", "\n", "\n", "cube_stage", "=", "torch", ".", "tanh", "(", "dec6", ")", "\n", "\n", "return", "cube_stage", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.WholeDis.__init__": [[225, 245], ["PIUnet2.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "torch.Linear", "torch.Linear", "PIUnet2.WholeDis.init_weights", "print"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "nker", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "WholeDis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "1", "*", "in_channels", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "1", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "2", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "8", "*", "nker", "*", "16", "*", "16", ",", "1", ")", "# 256 = 16*16, 128 = 8*8", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "print", "(", "\"WholeDis init weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.WholeDis.forward": [[246, 256], ["PIUnet2.WholeDis.enc1", "PIUnet2.WholeDis.enc2", "PIUnet2.WholeDis.enc3", "PIUnet2.WholeDis.enc4", "PIUnet2.WholeDis.view", "PIUnet2.WholeDis.linear", "PIUnet2.WholeDis.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "enc1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc2", "(", "x", ")", "\n", "x", "=", "self", ".", "enc3", "(", "x", ")", "\n", "x", "=", "self", ".", "enc4", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.SliceDis.__init__": [[259, 281], ["PIUnet2.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "torch.Linear", "torch.Linear", "PIUnet2.SliceDis.init_weights", "print"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "SliceDis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "1", "*", "in_channels", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "1", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "2", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc5", "=", "layers", ".", "CBR2d", "(", "8", "*", "nker", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "8", "*", "nker", "*", "16", "*", "16", ",", "1", ")", "# 256 = 16*16, 128 = 8*8", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "print", "(", "\"SliceDis init weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.SliceDis.forward": [[282, 299], ["range", "PIUnet2.SliceDis.enc1", "PIUnet2.SliceDis.enc2", "PIUnet2.SliceDis.enc3", "PIUnet2.SliceDis.enc4", "PIUnet2.SliceDis.view", "PIUnet2.SliceDis.linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet2.SliceDis.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "for", "k", "in", "range", "(", "6", ")", ":", "\n", "            ", "z", "=", "x", "[", ":", ",", "6", "*", "k", ":", "6", "*", "k", "+", "6", ",", ":", ",", ":", "]", "\n", "z", "=", "self", ".", "enc1", "(", "z", ")", "\n", "z", "=", "self", ".", "enc2", "(", "z", ")", "\n", "z", "=", "self", ".", "enc3", "(", "z", ")", "\n", "z", "=", "self", ".", "enc4", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "z", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "z", "=", "self", ".", "linear", "(", "z", ")", "\n", "\n", "if", "k", "==", "0", ":", "\n", "                ", "z_", "=", "z", "\n", "", "else", ":", "\n", "                ", "z_", "=", "torch", ".", "cat", "(", "(", "z_", ",", "z", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "return", "z_", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.ResnetBlock.__init__": [[302, 315], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "PIUnet2.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "PIUnet2.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.spectral_norm", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.spectral_norm"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dilation", "=", "1", ",", "use_spectral_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "dilation", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.ResnetBlock.forward": [[317, 324], ["PIUnet2.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "\n", "# Remove ReLU at the end of the residual block", "\n", "# http://torch.ch/blog/2016/02/04/resnets.html", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet2.spectral_norm": [[326, 331], ["torch.utils.spectral_norm"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.spectral_norm"], ["", "", "def", "spectral_norm", "(", "module", ",", "mode", "=", "True", ")", ":", "\n", "    ", "if", "mode", ":", "\n", "        ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "module", ")", "\n", "\n", "", "return", "module", "\n", "", ""]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.layers.DECBR2d.__init__": [[9, 27], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", ")", "]", "\n", "\n", "if", "not", "norm", "is", "None", ":", "\n", "            ", "if", "norm", "==", "\"bnorm\"", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ")", "]", "\n", "", "elif", "norm", "==", "\"inorm\"", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "out_channels", ")", "]", "\n", "\n", "", "", "if", "not", "relu", "is", "None", "and", "relu", ">=", "0.0", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "ReLU", "(", ")", "if", "relu", "==", "0", "else", "nn", ".", "LeakyReLU", "(", "relu", ")", "]", "\n", "\n", "", "self", ".", "cbr", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.layers.DECBR2d.forward": [[28, 30], ["layers.DECBR2d.cbr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "cbr", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.layers.CBR2d.__init__": [[32, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", ")", "]", "\n", "\n", "if", "not", "norm", "is", "None", ":", "\n", "            ", "if", "norm", "==", "\"bnorm\"", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ")", "]", "\n", "", "elif", "norm", "==", "\"inorm\"", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "out_channels", ")", "]", "\n", "\n", "", "", "if", "not", "relu", "is", "None", "and", "relu", ">=", "0.0", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "ReLU", "(", ")", "if", "relu", "==", "0", "else", "nn", ".", "LeakyReLU", "(", "relu", ")", "]", "\n", "\n", "", "self", ".", "cbr", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.layers.CBR2d.forward": [[51, 53], ["layers.CBR2d.cbr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "cbr", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.__init__": [[7, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights": [[10, 37], ["PIUnet.BaseNetwork.apply", "hasattr", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.constant_", "torch.init.constant_", "classname.find", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "classname.find", "classname.find", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "'''\n        initialize network's weights\n        init_type: normal | xavier | kaiming | orthogonal\n        https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix/blob/9451e70673400885567d08a9e97ade2524c700d0/models/networks.py#L39\n        '''", "\n", "\n", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.FaceGenerator.__init__": [[39, 80], ["PIUnet.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "layers.DECBR2d", "layers.DECBR2d", "layers.DECBR2d", "PIUnet.FaceGenerator.init_weights"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", "=", "64", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "FaceGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "in_channels", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "1", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "2", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc5", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc6", "=", "layers", ".", "CBR2d", "(", "8", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec1", "=", "layers", ".", "DECBR2d", "(", "8", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "dec2", "=", "layers", ".", "DECBR2d", "(", "2", "*", "8", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "dec3", "=", "layers", ".", "DECBR2d", "(", "2", "*", "4", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec4", "=", "layers", ".", "DECBR2d", "(", "2", "*", "4", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec5", "=", "layers", ".", "DECBR2d", "(", "2", "*", "2", "*", "nker", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec6", "=", "layers", ".", "DECBR2d", "(", "2", "*", "1", "*", "nker", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "None", ",", "stride", "=", "2", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.FaceGenerator.forward": [[81, 109], ["PIUnet.FaceGenerator.enc1", "PIUnet.FaceGenerator.enc2", "PIUnet.FaceGenerator.enc3", "PIUnet.FaceGenerator.enc4", "PIUnet.FaceGenerator.enc5", "PIUnet.FaceGenerator.enc6", "PIUnet.FaceGenerator.dec1", "PIUnet.FaceGenerator.drop1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.FaceGenerator.dec2", "PIUnet.FaceGenerator.drop2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.FaceGenerator.dec3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.FaceGenerator.dec4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.FaceGenerator.dec5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.FaceGenerator.dec6", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "enc2", "=", "self", ".", "enc2", "(", "enc1", ")", "\n", "enc3", "=", "self", ".", "enc3", "(", "enc2", ")", "\n", "enc4", "=", "self", ".", "enc4", "(", "enc3", ")", "\n", "enc5", "=", "self", ".", "enc5", "(", "enc4", ")", "\n", "enc6", "=", "self", ".", "enc6", "(", "enc5", ")", "\n", "\n", "dec1", "=", "self", ".", "dec1", "(", "enc6", ")", "\n", "drop1", "=", "self", ".", "drop1", "(", "dec1", ")", "\n", "\n", "cat2", "=", "torch", ".", "cat", "(", "(", "drop1", ",", "enc5", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "self", ".", "dec2", "(", "cat2", ")", "\n", "drop2", "=", "self", ".", "drop2", "(", "dec2", ")", "\n", "\n", "cat3", "=", "torch", ".", "cat", "(", "(", "drop2", ",", "enc4", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "self", ".", "dec3", "(", "cat3", ")", "\n", "\n", "cat4", "=", "torch", ".", "cat", "(", "(", "dec3", ",", "enc3", ")", ",", "dim", "=", "1", ")", "\n", "dec4", "=", "self", ".", "dec4", "(", "cat4", ")", "\n", "cat5", "=", "torch", ".", "cat", "(", "(", "dec4", ",", "enc2", ")", ",", "dim", "=", "1", ")", "\n", "dec5", "=", "self", ".", "dec5", "(", "cat5", ")", "\n", "cat6", "=", "torch", ".", "cat", "(", "(", "dec5", ",", "enc1", ")", ",", "dim", "=", "1", ")", "\n", "dec6", "=", "self", ".", "dec6", "(", "cat6", ")", "\n", "\n", "x", "=", "torch", ".", "tanh", "(", "dec6", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.CubeGenerator.__init__": [[111, 151], ["PIUnet.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "torch.Dropout2d", "torch.Dropout2d", "layers.DECBR2d", "layers.DECBR2d", "layers.DECBR2d", "layers.DECBR2d", "PIUnet.CubeGenerator.init_weights"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", "=", "64", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "CubeGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "6", "*", "in_channels", ",", "6", "*", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "6", "*", "1", "*", "nker", ",", "6", "*", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "6", "*", "2", "*", "nker", ",", "6", "*", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "6", "*", "4", "*", "nker", ",", "6", "*", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc5", "=", "layers", ".", "CBR2d", "(", "6", "*", "4", "*", "nker", ",", "6", "*", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "enc6", "=", "layers", ".", "CBR2d", "(", "6", "*", "8", "*", "nker", ",", "6", "*", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec1", "=", "layers", ".", "DECBR2d", "(", "6", "*", "8", "*", "nker", ",", "6", "*", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "dec2", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "8", "*", "nker", ",", "6", "*", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "dec3", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "4", "*", "nker", ",", "6", "*", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec4", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "4", "*", "nker", ",", "6", "*", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec5", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "2", "*", "nker", ",", "6", "*", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.0", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dec6", "=", "layers", ".", "DECBR2d", "(", "2", "*", "6", "*", "1", "*", "nker", ",", "6", "*", "out_channels", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "\n", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "None", ",", "stride", "=", "2", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.CubeGenerator.forward": [[152, 180], ["PIUnet.CubeGenerator.enc1", "PIUnet.CubeGenerator.enc2", "PIUnet.CubeGenerator.enc3", "PIUnet.CubeGenerator.enc4", "PIUnet.CubeGenerator.enc5", "PIUnet.CubeGenerator.enc6", "PIUnet.CubeGenerator.dec1", "PIUnet.CubeGenerator.drop1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.CubeGenerator.dec2", "PIUnet.CubeGenerator.drop2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.CubeGenerator.dec3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.CubeGenerator.dec4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.CubeGenerator.dec5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.CubeGenerator.dec6", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "enc2", "=", "self", ".", "enc2", "(", "enc1", ")", "\n", "enc3", "=", "self", ".", "enc3", "(", "enc2", ")", "\n", "enc4", "=", "self", ".", "enc4", "(", "enc3", ")", "\n", "enc5", "=", "self", ".", "enc5", "(", "enc4", ")", "\n", "enc6", "=", "self", ".", "enc6", "(", "enc5", ")", "\n", "\n", "dec1", "=", "self", ".", "dec1", "(", "enc6", ")", "\n", "drop1", "=", "self", ".", "drop1", "(", "dec1", ")", "\n", "\n", "cat2", "=", "torch", ".", "cat", "(", "(", "drop1", ",", "enc5", ")", ",", "dim", "=", "1", ")", "\n", "dec2", "=", "self", ".", "dec2", "(", "cat2", ")", "\n", "drop2", "=", "self", ".", "drop2", "(", "dec2", ")", "\n", "\n", "cat3", "=", "torch", ".", "cat", "(", "(", "drop2", ",", "enc4", ")", ",", "dim", "=", "1", ")", "\n", "dec3", "=", "self", ".", "dec3", "(", "cat3", ")", "\n", "\n", "cat4", "=", "torch", ".", "cat", "(", "(", "dec3", ",", "enc3", ")", ",", "dim", "=", "1", ")", "\n", "dec4", "=", "self", ".", "dec4", "(", "cat4", ")", "\n", "cat5", "=", "torch", ".", "cat", "(", "(", "dec4", ",", "enc2", ")", ",", "dim", "=", "1", ")", "\n", "dec5", "=", "self", ".", "dec5", "(", "cat5", ")", "\n", "cat6", "=", "torch", ".", "cat", "(", "(", "dec5", ",", "enc1", ")", ",", "dim", "=", "1", ")", "\n", "dec6", "=", "self", ".", "dec6", "(", "cat6", ")", "\n", "\n", "x", "=", "torch", ".", "tanh", "(", "dec6", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.FaceDis.__init__": [[182, 202], ["PIUnet.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "PIUnet.FaceDis.init_weights"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", "=", "64", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "FaceDis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "1", "*", "in_channels", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "1", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "2", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc5", "=", "layers", ".", "CBR2d", "(", "8", "*", "nker", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "None", ",", "bias", "=", "False", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.FaceDis.forward": [[203, 214], ["PIUnet.FaceDis.enc1", "PIUnet.FaceDis.enc2", "PIUnet.FaceDis.enc3", "PIUnet.FaceDis.enc4", "PIUnet.FaceDis.enc5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "enc1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc2", "(", "x", ")", "\n", "x", "=", "self", ".", "enc3", "(", "x", ")", "\n", "x", "=", "self", ".", "enc4", "(", "x", ")", "\n", "x", "=", "self", ".", "enc5", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.WholeDis.__init__": [[216, 235], ["PIUnet.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "torch.Linear", "torch.Linear", "PIUnet.WholeDis.init_weights"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "nker", "=", "64", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "WholeDis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "1", "*", "in_channels", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "1", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "2", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "8", "*", "nker", "*", "16", "*", "16", ",", "1", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.WholeDis.forward": [[236, 246], ["PIUnet.WholeDis.enc1", "PIUnet.WholeDis.enc2", "PIUnet.WholeDis.enc3", "PIUnet.WholeDis.enc4", "PIUnet.WholeDis.view", "PIUnet.WholeDis.linear", "PIUnet.WholeDis.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "enc1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc2", "(", "x", ")", "\n", "x", "=", "self", ".", "enc3", "(", "x", ")", "\n", "x", "=", "self", ".", "enc4", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.SliceDis.__init__": [[248, 269], ["PIUnet.BaseNetwork.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "torch.Linear", "torch.Linear", "PIUnet.SliceDis.init_weights"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", "=", "64", ",", "norm", "=", "\"bnorm\"", ",", "relu", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "SliceDis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "1", "*", "in_channels", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "1", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "2", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc5", "=", "layers", ".", "CBR2d", "(", "8", "*", "nker", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "self", ".", "relu", ",", "act_val", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "8", "*", "nker", "*", "16", "*", "16", ",", "1", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.SliceDis.forward": [[270, 287], ["range", "PIUnet.SliceDis.enc1", "PIUnet.SliceDis.enc2", "PIUnet.SliceDis.enc3", "PIUnet.SliceDis.enc4", "PIUnet.SliceDis.view", "PIUnet.SliceDis.linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIUnet.SliceDis.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "for", "k", "in", "range", "(", "6", ")", ":", "\n", "            ", "z", "=", "x", "[", ":", ",", "4", "*", "k", ":", "4", "*", "k", "+", "4", ",", ":", ",", ":", "]", "\n", "z", "=", "self", ".", "enc1", "(", "z", ")", "\n", "z", "=", "self", ".", "enc2", "(", "z", ")", "\n", "z", "=", "self", ".", "enc3", "(", "z", ")", "\n", "z", "=", "self", ".", "enc4", "(", "z", ")", "\n", "z", "=", "z", ".", "view", "(", "z", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "z", "=", "self", ".", "linear", "(", "z", ")", "\n", "\n", "if", "k", "==", "0", ":", "\n", "                ", "z_", "=", "z", "\n", "", "else", ":", "\n", "                ", "z_", "=", "torch", ".", "cat", "(", "(", "z_", ",", "z", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "return", "z_", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.ResnetBlock.__init__": [[289, 300], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "PIUnet.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "PIUnet.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.spectral_norm", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.spectral_norm"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dilation", "=", "1", ",", "use_spectral_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "dilation", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.ResnetBlock.forward": [[302, 309], ["PIUnet.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "\n", "# Remove ReLU at the end of the residual block", "\n", "# http://torch.ch/blog/2016/02/04/resnets.html", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.spectral_norm": [[311, 316], ["torch.utils.spectral_norm"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PIUnet.spectral_norm"], ["", "", "def", "spectral_norm", "(", "module", ",", "mode", "=", "True", ")", ":", "\n", "    ", "if", "mode", ":", "\n", "        ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "module", ")", "\n", "\n", "", "return", "module", "\n", "", ""]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.Generator.__init__": [[11, 29], ["torch.Module.__init__", "PInet.PanoNet", "PInet.CubeNet", "PInet.Decoder"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pano_in_channels", ",", "cube_in_channels", ",", "pano_out_channels", ",", "cube_out_channels", ",", "decoder_in_channels", ",", "\n", "decoder_out_channels", ",", "learning_type", "=", "\"plain\"", ",", "nker", "=", "64", ",", "norm", "=", "\"bonrm\"", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pano_in_channels", "=", "pano_in_channels", "\n", "self", ".", "pano_out_channels", "=", "pano_out_channels", "\n", "self", ".", "cube_in_channels", "=", "cube_in_channels", "\n", "self", ".", "cube_out_channels", "=", "cube_out_channels", "\n", "self", ".", "decoder_in_channels", "=", "decoder_in_channels", "\n", "self", ".", "decoder_out_channels", "=", "decoder_out_channels", "\n", "\n", "self", ".", "learning_type", "=", "learning_type", "\n", "self", ".", "nker", "=", "nker", "\n", "self", ".", "norm", "=", "norm", "\n", "\n", "self", ".", "pano_encoder", "=", "PanoNet", "(", "self", ".", "pano_in_channels", ",", "self", ".", "pano_out_channels", ",", "self", ".", "nker", ",", "self", ".", "norm", ")", "\n", "self", ".", "cube_encoder", "=", "CubeNet", "(", "self", ".", "cube_in_channels", ",", "self", ".", "cube_out_channels", ",", "self", ".", "nker", ",", "self", ".", "norm", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "self", ".", "decoder_in_channels", ",", "self", ".", "decoder_out_channels", ",", "self", ".", "nker", ",", "self", ".", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.Generator.forward": [[30, 42], ["PInet.Generator.pano_encoder", "PInet.Generator.cube_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pano_cube.unsqueeze.unsqueeze.unsqueeze", "pano_cube.unsqueeze.unsqueeze.unsqueeze", "PInet.Generator.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pano_x", ",", "cube_x", ")", ":", "\n", "        ", "pano_out", "=", "self", ".", "pano_encoder", "(", "pano_x", ")", "\n", "cube_out", "=", "self", ".", "cube_encoder", "(", "cube_x", ")", "\n", "\n", "pano_cube", "=", "torch", ".", "cat", "(", "(", "pano_out", ",", "cube_out", ")", ",", "dim", "=", "1", ")", "\n", "\n", "pano_cube", "=", "pano_cube", ".", "unsqueeze", "(", "2", ")", "\n", "pano_cube", "=", "pano_cube", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "out", "=", "self", ".", "decoder", "(", "pano_cube", ")", "\n", "\n", "return", "pano_out", ",", "cube_out", ",", "pano_cube", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.PanoNet.__init__": [[45, 79], ["torch.Module.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "torch.Sequential", "torch.Sequential", "PInet.PanoNet.fc6.add_module", "PInet.PanoNet.fc6.add_module", "PInet.PanoNet.fc6.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pano_in_channels", ",", "pano_out_channels", ",", "nker", "=", "64", ",", "norm", "=", "\"bnorm\"", ")", ":", "\n", "        ", "super", "(", "PanoNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# panorama encoder", "\n", "self", ".", "enc1_1", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "pano_in_channels", ",", "out_channels", "=", "1", "*", "nker", ",", "norm", "=", "norm", ")", "\n", "self", ".", "enc1_2", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "1", "*", "nker", ",", "out_channels", "=", "1", "*", "nker", ",", "norm", "=", "norm", ")", "\n", "self", ".", "dilate1", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "1", "*", "nker", ",", "out_channels", "=", "1", "*", "nker", ",", "kernel_size", "=", "3", ",", "dilation", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "norm", "=", "norm", ")", "\n", "#self.pool1 = nn.MaxPool2d(kernel_size=2)", "\n", "\n", "self", ".", "enc2_1", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "1", "*", "nker", ",", "out_channels", "=", "2", "*", "nker", ",", "norm", "=", "norm", ")", "\n", "self", ".", "enc2_2", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "2", "*", "nker", ",", "out_channels", "=", "2", "*", "nker", ",", "norm", "=", "norm", ")", "\n", "self", ".", "dilate2", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "2", "*", "nker", ",", "out_channels", "=", "2", "*", "nker", ",", "kernel_size", "=", "3", ",", "dilation", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "norm", "=", "norm", ")", "\n", "#self.pool2 = nn.MaxPool2d(kernel_size=2)", "\n", "\n", "self", ".", "enc3_1", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "2", "*", "nker", ",", "out_channels", "=", "4", "*", "nker", ",", "norm", "=", "norm", ")", "\n", "self", ".", "enc3_2", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "4", "*", "nker", ",", "out_channels", "=", "4", "*", "nker", ",", "norm", "=", "norm", ")", "\n", "self", ".", "dilate3", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "4", "*", "nker", ",", "out_channels", "=", "4", "*", "nker", ",", "kernel_size", "=", "3", ",", "dilation", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "norm", "=", "norm", ")", "\n", "#self.pool3 = nn.MaxPool2d(kernel_size=2)", "\n", "\n", "self", ".", "enc4_1", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "4", "*", "nker", ",", "out_channels", "=", "8", "*", "nker", ",", "norm", "=", "norm", ")", "\n", "self", ".", "enc4_2", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "8", "*", "nker", ",", "out_channels", "=", "8", "*", "nker", ",", "norm", "=", "norm", ")", "\n", "self", ".", "dilate4", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "8", "*", "nker", ",", "out_channels", "=", "8", "*", "nker", ",", "kernel_size", "=", "3", ",", "dilation", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "norm", "=", "norm", ")", "\n", "#self.pool4 = nn.MaxPool2d(kernel_size=2)", "\n", "\n", "self", ".", "enc5_1", "=", "layers", ".", "CBR2d", "(", "in_channels", "=", "8", "*", "nker", ",", "out_channels", "=", "pano_out_channels", ",", "norm", "=", "norm", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "fc6", ".", "add_module", "(", "'fc6'", ",", "nn", ".", "Linear", "(", "pano_out_channels", "*", "17", "*", "30", ",", "1024", ")", ")", "# 270,480", "\n", "# self.fc6.add_module('fc6', nn.Linear(pano_out_channels * 30 * 40, 1024)) # 480p", "\n", "# self.fc6.add_module('fc6',nn.Linear(pano_out_channels*20*11, 2048)) # 320,180", "\n", "self", ".", "fc6", ".", "add_module", "(", "'relu6'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc6", ".", "add_module", "(", "'drop6'", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "1024", ",", "pano_out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.PanoNet.forward": [[80, 106], ["PInet.PanoNet.enc1_1", "PInet.PanoNet.enc1_2", "PInet.PanoNet.dilate1", "PInet.PanoNet.enc2_1", "PInet.PanoNet.enc2_2", "PInet.PanoNet.dilate2", "PInet.PanoNet.enc3_1", "PInet.PanoNet.enc3_2", "PInet.PanoNet.dilate3", "PInet.PanoNet.enc4_1", "PInet.PanoNet.enc4_2", "PInet.PanoNet.dilate4", "PInet.PanoNet.enc5_1", "PInet.PanoNet.fc6", "PInet.PanoNet.fc7", "PInet.PanoNet.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "\n", "x", "=", "self", ".", "enc1_1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc1_2", "(", "x", ")", "\n", "x", "=", "self", ".", "dilate1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "enc2_1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc2_2", "(", "x", ")", "\n", "x", "=", "self", ".", "dilate2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "enc3_1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc3_2", "(", "x", ")", "\n", "x", "=", "self", ".", "dilate3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "enc4_1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc4_2", "(", "x", ")", "\n", "x", "=", "self", ".", "dilate4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "enc5_1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "fc6", "(", "x", ".", "view", "(", "B", ",", "-", "1", ")", ")", "\n", "\n", "x", "=", "self", ".", "fc7", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.CubeNet.__init__": [[109, 156], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "PInet.CubeNet.cube_encoder.add_module", "torch.Sequential", "torch.Sequential", "PInet.CubeNet.fc6.add_module", "PInet.CubeNet.fc6.add_module", "PInet.CubeNet.fc6.add_module", "torch.Sequential", "torch.Sequential", "PInet.CubeNet.fc7.add_module", "PInet.CubeNet.fc7.add_module", "PInet.CubeNet.fc7.add_module", "torch.Sequential", "torch.Sequential", "PInet.CubeNet.fc8.add_module", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cube_in_channels", ",", "cube_out_channels", ",", "nker", "=", "64", ",", "norm", "=", "\"bnorm\"", ")", ":", "\n", "        ", "super", "(", "CubeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cube_encoder", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'enc1_1'", ",", "\n", "layers", ".", "CBR2d", "(", "in_channels", "=", "cube_in_channels", ",", "out_channels", "=", "1", "*", "nker", ",", "norm", "=", "norm", ")", ")", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'enc1_2'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "1", "*", "nker", ",", "out_channels", "=", "1", "*", "nker", ",", "norm", "=", "norm", ")", ")", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'dilate1'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "1", "*", "nker", ",", "out_channels", "=", "1", "*", "nker", ",", "kernel_size", "=", "3", ",", "dilation", "=", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "2", ",", "norm", "=", "norm", ")", ")", "\n", "#self.cube_encoder.add_module('pool1', nn.MaxPool2d(kernel_size=2))", "\n", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'enc2_1'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "1", "*", "nker", ",", "out_channels", "=", "2", "*", "nker", ",", "norm", "=", "norm", ")", ")", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'enc2_2'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "2", "*", "nker", ",", "out_channels", "=", "2", "*", "nker", ",", "norm", "=", "norm", ")", ")", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'dilate2'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "2", "*", "nker", ",", "out_channels", "=", "2", "*", "nker", ",", "kernel_size", "=", "3", ",", "\n", "dilation", "=", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "2", ",", "norm", "=", "norm", ")", ")", "\n", "#self.cube_encoder.add_module('pool2', nn.MaxPool2d(kernel_size=2))", "\n", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'enc3_1'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "2", "*", "nker", ",", "out_channels", "=", "4", "*", "nker", ",", "norm", "=", "norm", ")", ")", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'enc3_2'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "4", "*", "nker", ",", "out_channels", "=", "4", "*", "nker", ",", "norm", "=", "norm", ")", ")", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'dilate3'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "4", "*", "nker", ",", "out_channels", "=", "4", "*", "nker", ",", "kernel_size", "=", "3", ",", "\n", "dilation", "=", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "2", ",", "norm", "=", "norm", ")", ")", "\n", "#self.cube_encoder.add_module('pool3', nn.MaxPool2d(kernel_size=2))", "\n", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'enc4_1'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "4", "*", "nker", ",", "out_channels", "=", "8", "*", "nker", ",", "norm", "=", "norm", ")", ")", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'enc4_2'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "8", "*", "nker", ",", "out_channels", "=", "8", "*", "nker", ",", "norm", "=", "norm", ")", ")", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'dilate4'", ",", "layers", ".", "CBR2d", "(", "in_channels", "=", "8", "*", "nker", ",", "out_channels", "=", "8", "*", "nker", ",", "kernel_size", "=", "3", ",", "\n", "dilation", "=", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "2", ",", "norm", "=", "norm", ")", ")", "\n", "#self.cube_encoder.add_module('pool4', nn.MaxPool2d(kernel_size=2))", "\n", "\n", "self", ".", "cube_encoder", ".", "add_module", "(", "'enc5_1'", ",", "\n", "layers", ".", "CBR2d", "(", "in_channels", "=", "8", "*", "nker", ",", "out_channels", "=", "cube_out_channels", ",", "norm", "=", "norm", ")", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "fc6", ".", "add_module", "(", "'fc6'", ",", "nn", ".", "Linear", "(", "cube_out_channels", "*", "8", "*", "8", ",", "1024", ")", ")", "\n", "self", ".", "fc6", ".", "add_module", "(", "'relu6'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc6", ".", "add_module", "(", "'drop6'", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "fc7", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "fc7", ".", "add_module", "(", "'fc7'", ",", "nn", ".", "Linear", "(", "6", "*", "1024", ",", "1024", ")", ")", "\n", "self", ".", "fc7", ".", "add_module", "(", "'relu7'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc7", ".", "add_module", "(", "'drop7'", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "fc8", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "fc8", ".", "add_module", "(", "'fc8'", ",", "nn", ".", "Linear", "(", "1024", ",", "cube_out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.CubeNet.forward": [[157, 173], ["PInet.CubeNet.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PInet.CubeNet.fc7", "PInet.CubeNet.fc8", "PInet.CubeNet.cube_encoder", "PInet.CubeNet.fc6", "z.view.view.view", "x_list.append", "PInet.CubeNet.view", "z.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "FC", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "# batch, face, channel, height, width", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "z", "=", "x", "[", ":", ",", "4", "*", "i", ":", "4", "*", "(", "i", "+", "1", ")", ",", ":", ",", ":", "]", "\n", "z", "=", "self", ".", "cube_encoder", "(", "z", ")", "\n", "z", "=", "self", ".", "fc6", "(", "z", ".", "view", "(", "B", ",", "-", "1", ")", ")", "\n", "z", "=", "z", ".", "view", "(", "[", "B", ",", "1", ",", "-", "1", "]", ")", "\n", "x_list", ".", "append", "(", "z", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "x_list", ",", "1", ")", "\n", "x", "=", "self", ".", "fc7", "(", "x", ".", "view", "(", "B", ",", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "fc8", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.Decoder.__init__": [[176, 196], ["torch.Module.__init__", "layers.DECBR2d", "layers.DECBR2d", "layers.DECBR2d", "layers.DECBR2d", "layers.DECBR2d", "layers.DECBR2d"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", "=", "64", ",", "norm", "=", "\"bnorm\"", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec1", "=", "layers", ".", "DECBR2d", "(", "1", "*", "in_channels", ",", "16", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "norm", "=", "norm", ",", "relu", "=", "0.0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dec2", "=", "layers", ".", "DECBR2d", "(", "16", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dec3", "=", "layers", ".", "DECBR2d", "(", "8", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dec4", "=", "layers", ".", "DECBR2d", "(", "4", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dec5", "=", "layers", ".", "DECBR2d", "(", "2", "*", "nker", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dec6", "=", "layers", ".", "DECBR2d", "(", "1", "*", "nker", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "None", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.Decoder.forward": [[197, 208], ["PInet.Decoder.dec1", "PInet.Decoder.dec2", "PInet.Decoder.dec3", "PInet.Decoder.dec4", "PInet.Decoder.dec5", "PInet.Decoder.dec6", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "dec1", "(", "x", ")", "\n", "x", "=", "self", ".", "dec2", "(", "x", ")", "\n", "x", "=", "self", ".", "dec3", "(", "x", ")", "\n", "x", "=", "self", ".", "dec4", "(", "x", ")", "\n", "x", "=", "self", ".", "dec5", "(", "x", ")", "\n", "x", "=", "self", ".", "dec6", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.Discriminator.__init__": [[211, 228], ["torch.Module.__init__", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d", "layers.CBR2d"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "nker", "=", "64", ",", "norm", "=", "\"bnorm\"", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enc1", "=", "layers", ".", "CBR2d", "(", "1", "*", "in_channels", ",", "1", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc2", "=", "layers", ".", "CBR2d", "(", "1", "*", "nker", ",", "2", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc3", "=", "layers", ".", "CBR2d", "(", "2", "*", "nker", ",", "4", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc4", "=", "layers", ".", "CBR2d", "(", "4", "*", "nker", ",", "8", "*", "nker", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "norm", ",", "relu", "=", "0.2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "enc5", "=", "layers", ".", "CBR2d", "(", "8", "*", "nker", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "norm", "=", "None", ",", "relu", "=", "None", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.PInet.Discriminator.forward": [[229, 239], ["PInet.Discriminator.enc1", "PInet.Discriminator.enc2", "PInet.Discriminator.enc3", "PInet.Discriminator.enc4", "PInet.Discriminator.enc5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "enc1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc2", "(", "x", ")", "\n", "x", "=", "self", ".", "enc3", "(", "x", ")", "\n", "x", "=", "self", ".", "enc4", "(", "x", ")", "\n", "x", "=", "self", ".", "enc5", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePad.__init__": [[54, 57], ["torch.Module.__init__", "cube_pad.CubePadding"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lrtd_pad", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CubePad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "CP", "=", "CubePadding", "(", "lrtd_pad", ",", "use_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePad.forward": [[58, 73], ["int", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "exit", "tmp.append", "cube_pad.CubePad.CP", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            Input shape:  [6N, C, H, W]\n            Output shape: [6N, C, H + (top down padding), W + (left right padding)]\n        \"\"\"", "\n", "if", "x", ".", "size", "(", ")", "[", "0", "]", "%", "6", "!=", "0", ":", "\n", "            ", "print", "(", "'CubePad size mismatch!'", ")", "\n", "exit", "(", ")", "\n", "", "batch_size", "=", "int", "(", "x", ".", "size", "(", ")", "[", "0", "]", "/", "6", ")", "\n", "tmp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "patch", "=", "x", "[", "i", "*", "6", ":", "i", "*", "6", "+", "6", ",", ":", ",", ":", ",", ":", "]", "\n", "tmp", ".", "append", "(", "self", ".", "CP", "(", "patch", ")", ")", "\n", "", "result", "=", "torch", ".", "cat", "(", "tmp", ",", "dim", "=", "0", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.__init__": [[91, 102], ["torch.Module.__init__", "type"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["def", "__init__", "(", "self", ",", "lrtd_pad", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CubePadding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "#self.pad = pad", "\n", "if", "type", "(", "lrtd_pad", ")", "==", "np", ".", "int", ":", "\n", "            ", "self", ".", "p_l", "=", "lrtd_pad", "\n", "self", ".", "p_r", "=", "lrtd_pad", "\n", "self", ".", "p_t", "=", "lrtd_pad", "\n", "self", ".", "p_d", "=", "lrtd_pad", "\n", "", "else", ":", "\n", "            ", "[", "self", ".", "p_l", ",", "self", ".", "p_r", ",", "self", ".", "p_t", ",", "self", ".", "p_d", "]", "=", "lrtd_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip": [[103, 114], ["tensor.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "tensor.size"], "methods", ["None"], ["", "", "def", "flip", "(", "self", ",", "tensor", ",", "dim", ")", ":", "\n", "\n", "        ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "tensor", ".", "size", "(", "dim", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "idx", "=", "Variable", "(", "torch", ".", "cuda", ".", "LongTensor", "(", "idx", ")", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "idx", ")", ")", "\n", "\n", "", "inverted_tensor", "=", "tensor", ".", "index_select", "(", "dim", ",", "idx", ")", "\n", "return", "inverted_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.make_cubepad_edge": [[115, 123], ["feat_td.size", "feat_lr.size", "feat_lr.repeat", "feat_td.repeat"], "methods", ["None"], ["", "def", "make_cubepad_edge", "(", "self", ",", "feat_td", ",", "feat_lr", ")", ":", "\n", "        ", "td_pad", "=", "feat_td", ".", "size", "(", "2", ")", "\n", "lr_pad", "=", "feat_lr", ".", "size", "(", "3", ")", "\n", "\n", "if", "td_pad", ">", "lr_pad", ":", "\n", "            ", "return", "feat_lr", ".", "repeat", "(", "1", ",", "1", ",", "td_pad", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "feat_td", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "lr_pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.forward": [[127, 259], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cube_pad.CubePadding.make_cubepad_edge", "cube_pad.CubePadding.make_cubepad_edge", "cube_pad.CubePadding.make_cubepad_edge", "cube_pad.CubePadding.make_cubepad_edge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "locals", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "locals", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "locals", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "locals", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "cube_pad.CubePadding.flip", "cube_pad.CubePadding.flip", "cube_pad.CubePadding.flip", "cube_pad.CubePadding.flip", "cube_pad.CubePadding.flip", "cube_pad.CubePadding.flip", "cube_pad.CubePadding.flip", "cube_pad.CubePadding.flip", "f_left[].permute", "cube_pad.CubePadding.flip", "cube_pad.CubePadding.flip", "cube_pad.CubePadding.flip().permute", "f_top[].permute", "f_top[].permute", "cube_pad.CubePadding.flip", "f_down[].permute", "cube_pad.CubePadding.flip", "f_down[].permute", "cube_pad.CubePadding.flip", "f_left[].permute", "f_right[].permute", "cube_pad.CubePadding.flip"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.make_cubepad_edge", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.make_cubepad_edge", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.make_cubepad_edge", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.make_cubepad_edge", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"cube padding x shape\",x.shape)", "\n", "        ", "\"\"\"\n            Input shape:  [6, C, H, W]\n            Output shape: [6, C, H + p_t + p_d, W + p_l + p_r]\n            Method: Create 4 plates -> Create corners -> Concatenate\n        \"\"\"", "\n", "p_l", "=", "self", ".", "p_l", "\n", "p_r", "=", "self", ".", "p_r", "\n", "p_t", "=", "self", ".", "p_t", "\n", "p_d", "=", "self", ".", "p_d", "\n", "\n", "# F R B L T D", "\n", "f_front", "=", "x", "[", "0", "]", "\n", "f_right", "=", "x", "[", "1", "]", "\n", "f_back", "=", "x", "[", "2", "]", "\n", "f_left", "=", "x", "[", "3", "]", "\n", "f_top", "=", "x", "[", "4", "]", "\n", "f_down", "=", "x", "[", "5", "]", "\n", "\n", "# f_back = x[0]", "\n", "# f_down = x[1]", "\n", "# f_front = x[2]", "\n", "# f_left = x[3]", "\n", "# f_right = x[4]", "\n", "# f_top = x[5]", "\n", "\n", "# Construct top, down, left, right padding volume if needed", "\n", "if", "p_t", "!=", "0", ":", "\n", "            ", "_t12", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "unsqueeze", "(", "f_top", "[", ":", ",", "-", "p_t", ":", ",", ":", "]", ",", "0", ")", ",", "\n", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "f_top", "[", ":", ",", ":", ",", "-", "p_t", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "2", ")", ",", "0", ")", "]", ",", "0", ")", "# turn right 90 degrees", "\n", "_t123", "=", "torch", ".", "cat", "(", "\n", "[", "_t12", ",", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "f_top", "[", ":", ",", ":", "p_t", ",", ":", "]", ",", "2", ")", ",", "0", ")", "]", ",", "0", ")", "# turn right 180 degrees", "\n", "_t1234", "=", "torch", ".", "cat", "(", "\n", "[", "_t123", ",", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "f_top", "[", ":", ",", ":", ",", ":", "p_t", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "1", ")", ",", "0", ")", "]", ",", "0", ")", "# turn left 90 degrees", "\n", "_t12345", "=", "torch", ".", "cat", "(", "\n", "[", "_t1234", ",", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "self", ".", "flip", "(", "f_back", "[", ":", ",", ":", "p_t", ",", ":", "]", ",", "2", ")", ",", "1", ")", ",", "0", ")", "]", ",", "0", ")", "\n", "_t123456", "=", "torch", ".", "cat", "(", "\n", "[", "_t12345", ",", "torch", ".", "unsqueeze", "(", "f_front", "[", ":", ",", "-", "p_t", ":", ",", ":", "]", ",", "0", ")", "]", ",", "0", ")", "\n", "\n", "", "if", "p_d", "!=", "0", ":", "\n", "            ", "_d12", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "unsqueeze", "(", "f_down", "[", ":", ",", ":", "p_d", ",", ":", "]", ",", "0", ")", ",", "\n", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "f_down", "[", ":", ",", ":", ",", "-", "p_d", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "1", ")", ",", "0", ")", "]", ",", "0", ")", "# turn left 90 degrees", "\n", "_d123", "=", "torch", ".", "cat", "(", "\n", "[", "_d12", ",", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "self", ".", "flip", "(", "f_down", "[", ":", ",", "-", "p_d", ":", ",", ":", "]", ",", "1", ")", ",", "2", ")", ",", "0", ")", "]", ",", "0", ")", "# turn left 180 degrees", "\n", "_d1234", "=", "torch", ".", "cat", "(", "[", "_d123", ",", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "f_down", "[", ":", ",", ":", ",", ":", "p_d", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "2", ")", ",", "0", ")", "]", ",", "0", ")", "# turn right 90 degrees", "\n", "_d12345", "=", "torch", ".", "cat", "(", "[", "_d1234", ",", "torch", ".", "unsqueeze", "(", "f_front", "[", ":", ",", ":", "p_d", ",", ":", "]", ",", "0", ")", "]", ",", "0", ")", "\n", "_d123456", "=", "torch", ".", "cat", "(", "\n", "[", "_d12345", ",", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "self", ".", "flip", "(", "f_back", "[", ":", ",", "-", "p_d", ":", ",", ":", "]", ",", "2", ")", ",", "1", ")", ",", "0", ")", "]", ",", "0", ")", "\n", "\n", "\n", "", "if", "p_l", "!=", "0", ":", "\n", "            ", "_l12", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "unsqueeze", "(", "f_left", "[", ":", ",", ":", ",", "-", "p_l", ":", "]", ",", "0", ")", ",", "\n", "torch", ".", "unsqueeze", "(", "f_front", "[", ":", ",", ":", ",", "-", "p_l", ":", "]", ",", "0", ")", "]", ",", "0", ")", "\n", "_l123", "=", "torch", ".", "cat", "(", "\n", "[", "_l12", ",", "torch", ".", "unsqueeze", "(", "f_right", "[", ":", ",", ":", ",", "-", "p_l", ":", "]", ",", "0", ")", "]", ",", "0", ")", "\n", "_l1234", "=", "torch", ".", "cat", "(", "\n", "[", "_l123", ",", "torch", ".", "unsqueeze", "(", "f_back", "[", ":", ",", ":", ",", "-", "p_l", ":", "]", ",", "0", ")", "]", ",", "0", ")", "\n", "_l12345", "=", "torch", ".", "cat", "(", "\n", "[", "_l1234", ",", "torch", ".", "unsqueeze", "(", "f_left", "[", ":", ",", ":", "p_l", ",", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "0", ")", "]", ",", "0", ")", "\n", "_l123456", "=", "torch", ".", "cat", "(", "\n", "[", "_l12345", ",", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "f_left", "[", ":", ",", "-", "p_l", ":", ",", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "1", ")", ",", "0", ")", "]", ",", "0", ")", "\n", "\n", "", "if", "p_r", "!=", "0", ":", "\n", "            ", "_r12", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "unsqueeze", "(", "f_right", "[", ":", ",", ":", ",", ":", "p_r", "]", ",", "0", ")", ",", "\n", "torch", ".", "unsqueeze", "(", "f_back", "[", ":", ",", ":", ",", ":", "p_r", "]", ",", "0", ")", "]", ",", "0", ")", "\n", "_r123", "=", "torch", ".", "cat", "(", "\n", "[", "_r12", ",", "torch", ".", "unsqueeze", "(", "f_left", "[", ":", ",", ":", ",", ":", "p_r", "]", ",", "0", ")", "]", ",", "0", ")", "\n", "_r1234", "=", "torch", ".", "cat", "(", "\n", "[", "_r123", ",", "torch", ".", "unsqueeze", "(", "f_front", "[", ":", ",", ":", ",", ":", "p_r", "]", ",", "0", ")", "]", ",", "0", ")", "\n", "_r12345", "=", "torch", ".", "cat", "(", "\n", "[", "_r1234", ",", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "f_right", "[", ":", ",", ":", "p_r", ",", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "1", ")", ",", "0", ")", "]", ",", "0", ")", "\n", "_r123456", "=", "torch", ".", "cat", "(", "\n", "[", "_r12345", ",", "torch", ".", "unsqueeze", "(", "self", ".", "flip", "(", "f_right", "[", ":", ",", "-", "p_r", ":", ",", ":", "]", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "0", ")", "]", ",", "0", ")", "\n", "\n", "# For edge corner", "\n", "", "if", "p_r", "!=", "0", "and", "p_t", "!=", "0", ":", "\n", "            ", "p_tr", "=", "self", ".", "make_cubepad_edge", "(", "\n", "_t123456", "[", ":", ",", ":", ",", "-", "p_t", ":", ",", "-", "1", ":", "]", ",", "_r123456", "[", ":", ",", ":", ",", ":", "1", ",", ":", "p_r", "]", ")", "\n", "", "if", "p_t", "!=", "0", "and", "p_l", "!=", "0", ":", "\n", "            ", "p_tl", "=", "self", ".", "make_cubepad_edge", "(", "\n", "_t123456", "[", ":", ",", ":", ",", ":", "p_t", ",", ":", "1", "]", ",", "_l123456", "[", ":", ",", ":", ",", ":", "1", ",", ":", "p_l", "]", ")", "\n", "", "if", "p_d", "!=", "0", "and", "p_r", "!=", "0", ":", "\n", "            ", "p_dr", "=", "self", ".", "make_cubepad_edge", "(", "\n", "_d123456", "[", ":", ",", ":", ",", "-", "p_d", ":", ",", "-", "1", ":", "]", ",", "_r123456", "[", ":", ",", ":", ",", "-", "1", ":", ",", "-", "p_r", ":", "]", ")", "\n", "", "if", "p_d", "!=", "0", "and", "p_l", "!=", "0", ":", "\n", "            ", "p_dl", "=", "self", ".", "make_cubepad_edge", "(", "\n", "_d123456", "[", ":", ",", ":", ",", ":", "p_d", ",", ":", "1", "]", ",", "_l123456", "[", ":", ",", ":", ",", "-", "1", ":", ",", "-", "p_l", ":", "]", ")", "\n", "\n", "# Concatenate each padding volume", "\n", "", "if", "p_r", "!=", "0", ":", "\n", "            ", "_rp123456p", "=", "_r123456", "\n", "if", "'p_tr'", "in", "locals", "(", ")", ":", "\n", "                ", "_rp123456", "=", "torch", ".", "cat", "(", "[", "p_tr", ",", "_r123456", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "_rp123456", "=", "_r123456", "\n", "\n", "", "if", "'p_dr'", "in", "locals", "(", ")", ":", "\n", "                ", "_rp123456p", "=", "torch", ".", "cat", "(", "[", "_rp123456", ",", "p_dr", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "_rp123456p", "=", "_rp123456", "\n", "", "", "if", "p_l", "!=", "0", ":", "\n", "            ", "_lp123456p", "=", "_l123456", "\n", "if", "'p_tl'", "in", "locals", "(", ")", ":", "\n", "                ", "_lp123456", "=", "torch", ".", "cat", "(", "[", "p_tl", ",", "_l123456", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "_lp123456", "=", "_l123456", "\n", "", "if", "'p_dl'", "in", "locals", "(", ")", ":", "\n", "                ", "_lp123456p", "=", "torch", ".", "cat", "(", "[", "_lp123456", ",", "p_dl", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "_lp123456p", "=", "_lp123456", "\n", "", "", "if", "p_t", "!=", "0", ":", "\n", "            ", "t_out", "=", "torch", ".", "cat", "(", "[", "_t123456", ",", "x", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "t_out", "=", "x", "\n", "", "if", "p_d", "!=", "0", ":", "\n", "            ", "td_out", "=", "torch", ".", "cat", "(", "[", "t_out", ",", "_d123456", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "td_out", "=", "t_out", "\n", "", "if", "p_l", "!=", "0", ":", "\n", "            ", "tdl_out", "=", "torch", ".", "cat", "(", "[", "_lp123456p", ",", "td_out", "]", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "tdl_out", "=", "td_out", "\n", "", "if", "p_r", "!=", "0", ":", "\n", "            ", "tdlr_out", "=", "torch", ".", "cat", "(", "[", "tdl_out", ",", "_rp123456p", "]", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "tdlr_out", "=", "tdl_out", "\n", "", "return", "tdlr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.ZeroPad.__init__": [[262, 266], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__"], ["def", "__init__", "(", "self", ",", "lrtd_pad", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "ZeroPad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "lrtd_pad", "=", "lrtd_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.ZeroPad.forward": [[267, 294], ["cube_pad.get_pad_size", "cube_pad.get_pad_size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.get_pad_size", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.get_pad_size"], ["", "def", "forward", "(", "self", ",", "x", ",", "lrtd_pad", "=", "None", ")", ":", "\n", "        ", "if", "lrtd_pad", "is", "None", ":", "\n", "            ", "self", ".", "p_l", ",", "self", ".", "p_r", ",", "self", ".", "p_t", ",", "self", ".", "p_d", "=", "get_pad_size", "(", "self", ".", "lrtd_pad", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "p_l", ",", "self", ".", "p_r", ",", "self", ".", "p_t", ",", "self", ".", "p_d", "=", "get_pad_size", "(", "lrtd_pad", ")", "\n", "\n", "", "if", "self", ".", "use_gpu", ":", "\n", "            ", "pad_row_t", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "self", ".", "p_t", ",", "x", ".", "size", "(", "3", ")", ")", ".", "zero_", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pad_row_d", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "self", ".", "p_d", ",", "x", ".", "size", "(", "3", ")", ")", ".", "zero_", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pad_col_l", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", "+", "self", ".", "p_t", "+", "self", ".", "p_d", ",", "\n", "self", ".", "p_l", ")", ".", "zero_", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pad_col_r", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", "+", "self", ".", "p_t", "+", "self", ".", "p_d", ",", "\n", "self", ".", "p_r", ")", ".", "zero_", "(", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "pad_row_t", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "self", ".", "p_t", ",", "x", ".", "size", "(", "3", ")", ")", ".", "zero_", "(", ")", ")", "\n", "pad_row_d", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "self", ".", "p_d", ",", "x", ".", "size", "(", "3", ")", ")", ".", "zero_", "(", ")", ")", "\n", "pad_col_l", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", "+", "self", ".", "p_t", "+", "self", ".", "p_d", ",", "\n", "self", ".", "p_l", ")", ".", "zero_", "(", ")", ")", "\n", "pad_col_r", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", "+", "self", ".", "p_t", "+", "self", ".", "p_d", ",", "\n", "self", ".", "p_r", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "p_t", "!=", "0", ":", "x", "=", "torch", ".", "cat", "(", "(", "pad_row_t", ",", "x", ")", ",", "2", ")", "\n", "if", "self", ".", "p_d", "!=", "0", ":", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "pad_row_d", ")", ",", "2", ")", "\n", "if", "self", ".", "p_l", "!=", "0", ":", "x", "=", "torch", ".", "cat", "(", "(", "pad_col_l", ",", "x", ")", ",", "3", ")", "\n", "if", "self", ".", "p_r", "!=", "0", ":", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "pad_col_r", ")", ",", "3", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.input_cp_setting": [[20, 41], ["numpy.array", "cube_map_image_set.numpy.permute().contiguous", "cube_map_image_set.numpy.numpy", "range", "np.concatenate.astype", "len", "print", "cube_map_image_set.numpy.permute", "type", "numpy.flip", "numpy.flip", "numpy.expand_dims", "numpy.concatenate", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.CubePadding.flip"], ["def", "input_cp_setting", "(", "cube_map_image_set", ")", ":", "\n", "# Process batch", "\n", "    ", "init_batch", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "cube_map_image_set", "=", "cube_map_image_set", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "cube_map_image_set", "=", "cube_map_image_set", ".", "numpy", "(", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "cube_map_image_set", ")", ")", ":", "\n", "        ", "cube_img", "=", "cube_map_image_set", "[", "idx", "]", "\n", "print", "(", "\"cube_img_type:\"", ",", "type", "(", "cube_img", ")", ")", "\n", "if", "idx", "in", "[", "1", ",", "2", "]", ":", "\n", "            ", "cube_img", "=", "np", ".", "flip", "(", "cube_img", ",", "axis", "=", "1", ")", "\n", "", "if", "idx", "==", "4", ":", "\n", "            ", "cube_img", "=", "np", ".", "flip", "(", "cube_img", ",", "axis", "=", "0", ")", "\n", "", "if", "idx", "==", "0", ":", "\n", "            ", "init_batch", "=", "np", ".", "expand_dims", "(", "cube_img", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "init_batch", "=", "np", ".", "concatenate", "(", "(", "init_batch", ",", "np", ".", "expand_dims", "(", "cube_img", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "init_batch", "=", "init_batch", ".", "astype", "(", "np", ".", "float32", ")", "\n", "cube_pad_class_input", "=", "init_batch", "\n", "\n", "return", "cube_pad_class_input", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.get_pad_size": [[42, 51], ["type"], "function", ["None"], ["", "def", "get_pad_size", "(", "lrtd_pad", ")", ":", "\n", "    ", "if", "type", "(", "lrtd_pad", ")", "==", "np", ".", "int", ":", "\n", "        ", "p_l", "=", "lrtd_pad", "\n", "p_r", "=", "lrtd_pad", "\n", "p_t", "=", "lrtd_pad", "\n", "p_d", "=", "lrtd_pad", "\n", "", "else", ":", "\n", "        ", "[", "p_l", ",", "p_r", ",", "p_t", ",", "p_d", "]", "=", "lrtd_pad", "\n", "", "return", "p_l", ",", "p_r", ",", "p_t", ",", "p_d", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.cube_pad.im_norm": [[295, 301], ["None"], "function", ["None"], ["", "", "def", "im_norm", "(", "in_img", ",", "mean", ",", "std", ")", ":", "\n", "    ", "out_img", "=", "in_img", "\n", "out_img", "[", ":", ",", ":", ",", "0", "]", "=", "(", "in_img", "[", ":", ",", ":", ",", "0", "]", "-", "mean", "[", "0", "]", ")", "/", "std", "[", "0", "]", "\n", "out_img", "[", ":", ",", ":", ",", "1", "]", "=", "(", "in_img", "[", ":", ",", ":", ",", "1", "]", "-", "mean", "[", "1", "]", ")", "/", "std", "[", "1", "]", "\n", "out_img", "[", ":", ",", ":", ",", "2", "]", "=", "(", "in_img", "[", ":", ",", ":", ",", "2", "]", "-", "mean", "[", "2", "]", ")", "/", "std", "[", "2", "]", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.model.losses.completion_network_loss": [[3, 5], ["torch.nn.functional.mse_loss"], "function", ["None"], ["def", "completion_network_loss", "(", "input", ",", "output", ",", "mask", ")", ":", "\n", "    ", "return", "mse_loss", "(", "output", "*", "mask", ",", "input", "*", "mask", ")", "\n", "#return mse_loss(output * mask, input * mask)", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.PanoramaDataset.__init__": [[29, 34], ["glob.glob", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "in_dir", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "inp_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "in_dir", ",", "\"*.json\"", ")", ")", "\n", "self", ".", "face_order", "=", "[", "'f'", ",", "'r'", ",", "'b'", ",", "'l'", ",", "'t'", ",", "'d'", "]", "\n", "self", ".", "face_mask_order", "=", "[", "'f_mask'", ",", "'r_mask'", ",", "'b_mask'", ",", "'l_mask'", ",", "'t_mask'", ",", "'d_mask'", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.PanoramaDataset.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inp_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.PanoramaDataset.__getitem__": [[38, 96], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "idx.tolist.tolist.tolist", "open", "json.load", "list", "list", "list", "list", "numpy.asarray", "numpy.asarray", "numpy.zeros", "numpy.zeros", "dataset.PanoramaDataset.transform", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray", "numpy.asarray", "range", "dataset.b64utf82ndarr", "dataset.b64utf82ndarr", "dataset.b64utf82ndarr", "dataset.b64utf82ndarr", "numpy.concatenate.append", "dataset.b64utf82ndarr", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.utils.util.load", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.b64utf82ndarr", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.b64utf82ndarr", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.b64utf82ndarr", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.b64utf82ndarr", "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.b64utf82ndarr"], ["", "def", "__getitem__", "(", "self", ",", "idx", ",", "color_format", "=", "'RGB'", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "item_path", "=", "self", ".", "inp_paths", "[", "idx", "]", "\n", "with", "open", "(", "item_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "in_json", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "sample_cube_img", "=", "list", "(", ")", "\n", "cube_mask_img", "=", "list", "(", ")", "\n", "sample_pano_img", "=", "list", "(", ")", "\n", "pano_mask_img", "=", "list", "(", ")", "\n", "if", "in_json", "[", "'mask_flag'", "]", ":", "\n", "# (1, H, W, C)", "\n", "                ", "sample_pano_img", ".", "append", "(", "b64utf82ndarr", "(", "in_json", "[", "'pano'", "]", "[", "'pano'", "]", "[", "0", "]", ")", ")", "\n", "pano_mask_img", ".", "append", "(", "b64utf82ndarr", "(", "in_json", "[", "'pano'", "]", "[", "'pano_mask'", "]", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "# (1, H, W, C)", "\n", "                ", "sample_pano_img", ".", "append", "(", "b64utf82ndarr", "(", "in_json", "[", "'pano'", "]", "[", "'pano'", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "for", "k", "in", "self", ".", "face_order", ":", "\n", "# (6, H, W, C)", "\n", "                ", "sample_cube_img", ".", "append", "(", "b64utf82ndarr", "(", "in_json", "[", "'cube'", "]", "[", "k", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "for", "l", "in", "self", ".", "face_mask_order", ":", "\n", "                ", "if", "in_json", "[", "'mask_flag'", "]", ":", "\n", "# (6, H, W, C)", "\n", "                    ", "cube_mask_img", ".", "append", "(", "b64utf82ndarr", "(", "in_json", "[", "'cube'", "]", "[", "l", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "", "sample_cube_img", "=", "np", ".", "asarray", "(", "sample_cube_img", ")", "\n", "sample_pano_img", "=", "np", ".", "asarray", "(", "sample_pano_img", ")", "\n", "\n", "if", "in_json", "[", "'mask_flag'", "]", ":", "\n", "                ", "np_cube_mask_img", "=", "np", ".", "asarray", "(", "cube_mask_img", ")", "\n", "pano_mask_img", "=", "np", ".", "asarray", "(", "pano_mask_img", ")", "\n", "for", "ff", "in", "range", "(", "6", ")", ":", "\n", "                    ", "cube_mask_img_temp", "=", "(", "np_cube_mask_img", "[", "ff", ",", ":", ",", ":", ",", "0", "]", "+", "np_cube_mask_img", "[", "ff", ",", ":", ",", ":", ",", "1", "]", "+", "np_cube_mask_img", "[", "ff", ",", ":", ",", ":", ",", "2", "]", ")", "\n", "cube_mask_img_temp", "=", "cube_mask_img_temp", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "cube_mask_img_temp", "=", "cube_mask_img_temp", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "if", "ff", "==", "0", ":", "\n", "                        ", "cube_mask_img", "=", "cube_mask_img_temp", "\n", "", "else", ":", "\n", "                        ", "cube_mask_img", "=", "np", ".", "concatenate", "(", "(", "cube_mask_img", ",", "cube_mask_img_temp", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "pano_mask_img", "=", "(", "pano_mask_img", "[", ":", ",", ":", ",", ":", ",", "0", "]", "+", "pano_mask_img", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "pano_mask_img", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", "\n", "pano_mask_img", "=", "pano_mask_img", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "", "if", "in_json", "[", "'mask_flag'", "]", ":", "\n", "            ", "sample", "=", "{", "'cube'", ":", "sample_cube_img", ",", "'cube_mask'", ":", "cube_mask_img", ",", "'pano'", ":", "sample_pano_img", ",", "'pano_mask'", ":", "pano_mask_img", "}", "\n", "", "else", ":", "\n", "            ", "cube_mask_img", "=", "np", ".", "zeros", "(", "sample_cube_img", ".", "shape", ")", "# make mask's value all zero", "\n", "pano_mask_img", "=", "np", ".", "zeros", "(", "sample_pano_img", ".", "shape", ")", "# make mask's value all zero", "\n", "sample", "=", "{", "'cube'", ":", "sample_cube_img", ",", "'cube_mask'", ":", "cube_mask_img", ",", "'pano'", ":", "sample_pano_img", ",", "'pano_mask'", ":", "pano_mask_img", "}", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Normalize.__init__": [[99, 102], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Normalize.__call__": [[103, 120], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample_cube_img", ",", "cube_mask_img", ",", "sample_pano_img", ",", "pano_mask_img", "=", "sample", "[", "'cube'", "]", ",", "sample", "[", "'cube_mask'", "]", ",", "sample", "[", "'pano'", "]", ",", "sample", "[", "'pano_mask'", "]", "\n", "\n", "sample_cube_img", "=", "sample_cube_img", "/", "255.", "\n", "sample_pano_img", "=", "sample_pano_img", "/", "255.", "\n", "cube_mask_img", "=", "cube_mask_img", "/", "255.", "\n", "pano_mask_img", "=", "pano_mask_img", "/", "255.", "\n", "\n", "cube_mask_img", "[", "cube_mask_img", "<", "0.5", "]", "=", "0.0", "\n", "cube_mask_img", "[", "cube_mask_img", ">=", "0.5", "]", "=", "1.0", "\n", "pano_mask_img", "[", "pano_mask_img", "<", "0.5", "]", "=", "0.0", "\n", "pano_mask_img", "[", "pano_mask_img", ">=", "0.5", "]", "=", "1.0", "\n", "\n", "sample_cube_img", "=", "(", "sample_cube_img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "sample_pano_img", "=", "(", "sample_pano_img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "return", "{", "'cube'", ":", "sample_cube_img", ",", "'cube_mask'", ":", "cube_mask_img", ",", "'pano'", ":", "sample_pano_img", ",", "'pano_mask'", ":", "pano_mask_img", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.ToTensor.__call__": [[125, 136], ["numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample_cube_img", ",", "cube_mask_img", ",", "sample_pano_img", ",", "pano_mask_img", "=", "sample", "[", "'cube'", "]", ",", "sample", "[", "'cube_mask'", "]", ",", "sample", "[", "'pano'", "]", ",", "sample", "[", "'pano_mask'", "]", "\n", "\n", "# (F, H, W, C) -> (F, C, H, W)", "\n", "sample_cube_img", "=", "np", ".", "transpose", "(", "sample_cube_img", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "cube_mask_img", "=", "np", ".", "transpose", "(", "cube_mask_img", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "sample_pano_img", "=", "np", ".", "transpose", "(", "sample_pano_img", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "pano_mask_img", "=", "np", ".", "transpose", "(", "pano_mask_img", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "\n", "return", "{", "'cube'", ":", "torch", ".", "from_numpy", "(", "sample_cube_img", ")", ",", "'cube_mask'", ":", "torch", ".", "from_numpy", "(", "cube_mask_img", ")", ",", "'pano'", ":", "torch", ".", "from_numpy", "(", "sample_pano_img", ")", ",", "'pano_mask'", ":", "torch", ".", "from_numpy", "(", "pano_mask_img", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__init__": [[139, 141], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ")", ":", "\n", "        ", "self", ".", "shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.Resize.__call__": [[142, 149], ["skimage.transform.resize", "skimage.transform.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample_cube_img", ",", "cube_mask_img", ",", "sample_pano_img", ",", "pano_mask_img", "=", "sample", "[", "'cube'", "]", ",", "sample", "[", "'cube_mask'", "]", ",", "sample", "[", "'pano'", "]", ",", "sample", "[", "'pano_mask'", "]", "\n", "\n", "sample_pano_img", "=", "resize", "(", "sample_pano_img", ",", "output_shape", "=", "(", "sample_pano_img", ".", "shape", "[", "0", "]", ",", "self", ".", "shape", "[", "0", "]", ",", "self", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "preserve_range", "=", "True", ")", "\n", "pano_mask_img", "=", "resize", "(", "pano_mask_img", ",", "output_shape", "=", "(", "pano_mask_img", ".", "shape", "[", "0", "]", ",", "self", ".", "shape", "[", "0", "]", ",", "self", ".", "shape", "[", "1", "]", ",", "1", ")", ",", "preserve_range", "=", "True", ")", "\n", "\n", "return", "{", "'cube'", ":", "sample_cube_img", ",", "'cube_mask'", ":", "cube_mask_img", ",", "'pano'", ":", "sample_pano_img", ",", "'pano_mask'", ":", "pano_mask_img", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.b64utf82ndarr": [[20, 26], ["b_string.encode", "base64.b64decode", "PIL.Image.open", "numpy.asarray", "io.BytesIO"], "function", ["None"], ["def", "b64utf82ndarr", "(", "b_string", ")", ":", "\n", "    ", "b64_barr", "=", "b_string", ".", "encode", "(", "'utf-8'", ")", "\n", "content", "=", "base64", ".", "b64decode", "(", "b64_barr", ")", "\n", "img", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "content", ")", ")", "\n", "inp_np", "=", "np", ".", "asarray", "(", "img", ")", "\n", "return", "inp_np", "\n", "\n"]], "home.repos.pwc.inspect_result.swhan0329_panorama_image_inpainting.data.dataset.show_imgs": [[151, 156], ["range", "fig.add_subplot", "fig.add_subplot.axis", "fig.add_subplot.imshow"], "function", ["None"], ["", "", "def", "show_imgs", "(", "image", ",", "fig", ")", ":", "\n", "    ", "for", "idx", "in", "range", "(", "image", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "2", ",", "3", ",", "idx", "+", "1", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "imshow", "(", "image", "[", "idx", "]", ")", "\n", "\n"]]}