{"home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.None.module.D.call": [[11, 42], ["tflib.get_weight_norm", "functools.partial", "functools.partial", "tflib.get_feature_norm", "functools.partial", "act", "range", "functools.partial.", "tensorflow.flatten", "tensorflow.flatten", "act", "functools.partial.", "min", "functools.partial.", "functools.partial.", "functools.partial.", "nd", "functools.partial.", "int", "tflib.get_initializer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tflib.get_initializer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "nd", "nd", "nd", "min", "numpy.log2"], "methods", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_weight_norm", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_feature_norm", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_initializer", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_initializer"], ["    ", "def", "call", "(", "self", ",", "\n", "x", ",", "\n", "dim_10", "=", "4", ",", "\n", "fc_dim", "=", "1024", ",", "\n", "n_downsamplings", "=", "6", ",", "\n", "weight_norm", "=", "'none'", ",", "\n", "feature_norm", "=", "'none'", ",", "\n", "act", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "MAX_DIM", "=", "512", "\n", "nd", "=", "lambda", "size", ":", "min", "(", "int", "(", "2", "**", "(", "10", "-", "np", ".", "log2", "(", "size", ")", ")", "*", "dim_10", ")", ",", "MAX_DIM", ")", "\n", "\n", "w_norm", "=", "tl", ".", "get_weight_norm", "(", "weight_norm", ",", "training", ")", "\n", "conv", "=", "functools", ".", "partial", "(", "tl", ".", "conv2d", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n", "fc", "=", "functools", ".", "partial", "(", "tl", ".", "fc", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n", "\n", "f_norm", "=", "tl", ".", "get_feature_norm", "(", "feature_norm", ",", "training", ",", "updates_collections", "=", "None", ")", "\n", "conv_norm_act", "=", "functools", ".", "partial", "(", "conv", ",", "normalizer_fn", "=", "f_norm", ",", "activation_fn", "=", "act", ")", "\n", "\n", "h", "=", "x", "\n", "h", "=", "act", "(", "conv", "(", "h", ",", "nd", "(", "h", ".", "shape", "[", "1", "]", ".", "value", ")", ",", "7", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "n_downsamplings", ")", ":", "\n", "# h = conv_norm_act(h, nd(h.shape[1].value // 2), 4, 2)", "\n", "            ", "h", "=", "conv_norm_act", "(", "h", ",", "nd", "(", "h", ".", "shape", "[", "1", "]", ".", "value", ")", ",", "3", ",", "1", ")", "\n", "h", "=", "conv_norm_act", "(", "h", ",", "nd", "(", "h", ".", "shape", "[", "1", "]", ".", "value", "//", "2", ")", ",", "3", ",", "2", ")", "\n", "", "h", "=", "conv_norm_act", "(", "h", ",", "nd", "(", "h", ".", "shape", "[", "1", "]", ".", "value", ")", ",", "3", ",", "1", ")", "\n", "h", "=", "slim", ".", "flatten", "(", "h", ")", "\n", "h", "=", "act", "(", "fc", "(", "h", ",", "min", "(", "fc_dim", ",", "MAX_DIM", ")", ")", ")", "\n", "logit", "=", "fc", "(", "h", ",", "1", ")", "\n", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.None.module.G.call": [[46, 111], ["tflib.get_weight_norm", "tflib.get_weight_norm", "functools.partial", "functools.partial", "functools.partial", "tflib.get_feature_norm", "functools.partial.", "tensorflow.reshape", "tensorflow.reshape", "enumerate", "tensorflow.tanh", "tensorflow.tanh", "min", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "int", "tflib.get_initializer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tflib.get_initializer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tflib.get_initializer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.add_to_collections", "tensorflow.add_to_collections", "nd", "nd", "tensorflow.transpose", "tensorflow.transpose", "tflib.gram_schmidt", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "nd", "nd", "act", "nd", "act", "nd", "act", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.initializers.orthogonal", "tensorflow.initializers.orthogonal", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.initializers.constant", "tensorflow.initializers.constant", "tensorflow.initializers.zeros", "tensorflow.initializers.zeros", "tflib.get_feature_norm.", "tflib.get_feature_norm.", "nd", "nd", "nd", "numpy.log2", "tensorflow.eye", "tensorflow.eye", "range"], "methods", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_weight_norm", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_weight_norm", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_feature_norm", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_initializer", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_initializer", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_initializer", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.gram_schmidt", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["    ", "def", "call", "(", "self", ",", "\n", "zs", ",", "\n", "eps", ",", "\n", "dim_10", "=", "4", ",", "\n", "n_channels", "=", "3", ",", "\n", "weight_norm", "=", "'none'", ",", "\n", "feature_norm", "=", "'none'", ",", "\n", "act", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "\n", "use_gram_schmidt", "=", "True", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "MAX_DIM", "=", "512", "\n", "nd", "=", "lambda", "size", ":", "min", "(", "int", "(", "2", "**", "(", "10", "-", "np", ".", "log2", "(", "size", ")", ")", "*", "dim_10", ")", ",", "MAX_DIM", ")", "\n", "\n", "w_norm", "=", "tl", ".", "get_weight_norm", "(", "weight_norm", ",", "training", ")", "\n", "transposed_w_norm", "=", "tl", ".", "get_weight_norm", "(", "weight_norm", ",", "training", ",", "transposed", "=", "True", ")", "\n", "fc", "=", "functools", ".", "partial", "(", "tl", ".", "fc", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n", "conv", "=", "functools", ".", "partial", "(", "tl", ".", "conv2d", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n", "dconv", "=", "functools", ".", "partial", "(", "tl", ".", "dconv2d", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "transposed_w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n", "f_norm", "=", "tl", ".", "get_feature_norm", "(", "feature_norm", ",", "training", ",", "updates_collections", "=", "None", ")", "\n", "f_norm", "=", "(", "lambda", "x", ":", "x", ")", "if", "f_norm", "is", "None", "else", "f_norm", "\n", "\n", "def", "orthogonal_regularizer", "(", "U", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'orthogonal_regularizer'", ")", ":", "\n", "                ", "U", "=", "tf", ".", "reshape", "(", "U", ",", "[", "-", "1", ",", "U", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "orth", "=", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "U", ")", ",", "U", ")", "\n", "tf", ".", "add_to_collections", "(", "[", "'orth'", "]", ",", "orth", ")", "\n", "return", "0.5", "*", "tf", ".", "reduce_sum", "(", "(", "orth", "-", "tf", ".", "eye", "(", "U", ".", "shape", "[", "-", "1", "]", ".", "value", ")", ")", "**", "2", ")", "\n", "\n", "", "", "h", "=", "fc", "(", "eps", ",", "4", "*", "4", "*", "nd", "(", "4", ")", ")", "\n", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "-", "1", ",", "4", ",", "4", ",", "nd", "(", "4", ")", "]", ")", "\n", "\n", "for", "i", ",", "z", "in", "enumerate", "(", "zs", ")", ":", "\n", "            ", "height", "=", "width", "=", "4", "*", "2", "**", "i", "\n", "\n", "U", "=", "tf", ".", "get_variable", "(", "'U_%d'", "%", "i", ",", "\n", "shape", "=", "[", "height", ",", "width", ",", "nd", "(", "height", ")", ",", "z", ".", "shape", "[", "-", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "orthogonal", "(", ")", ",", "\n", "regularizer", "=", "orthogonal_regularizer", ",", "\n", "trainable", "=", "True", ")", "\n", "if", "use_gram_schmidt", ":", "\n", "                ", "U", "=", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "U", ",", "[", "-", "1", ",", "U", ".", "shape", "[", "-", "1", "]", "]", ")", ")", "\n", "U", "=", "tl", ".", "gram_schmidt", "(", "U", ")", "\n", "U", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "U", ")", ",", "[", "height", ",", "width", ",", "nd", "(", "height", ")", ",", "z", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "\n", "", "L", "=", "tf", ".", "get_variable", "(", "'L_%d'", "%", "i", ",", "\n", "shape", "=", "[", "z", ".", "shape", "[", "-", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "constant", "(", "[", "3", "*", "i", "for", "i", "in", "range", "(", "z", ".", "shape", "[", "-", "1", "]", ",", "0", ",", "-", "1", ")", "]", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "mu", "=", "tf", ".", "get_variable", "(", "'mu_%d'", "%", "i", ",", "\n", "shape", "=", "[", "height", ",", "width", ",", "nd", "(", "height", ")", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "h_", "=", "tf", ".", "reduce_sum", "(", "U", "[", "None", ",", "...", "]", "*", "(", "L", "[", "None", ",", ":", "]", "*", "z", ")", "[", ":", ",", "None", ",", "None", ",", "None", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "+", "mu", "[", "None", ",", "...", "]", "\n", "\n", "h_1", "=", "dconv", "(", "h_", ",", "nd", "(", "height", ")", ",", "1", ",", "1", ")", "\n", "h_2", "=", "dconv", "(", "h_", ",", "nd", "(", "height", "*", "2", ")", ",", "3", ",", "2", ")", "\n", "\n", "h", "=", "dconv", "(", "act", "(", "f_norm", "(", "h", "+", "h_1", ")", ")", ",", "nd", "(", "height", "*", "2", ")", ",", "3", ",", "2", ")", "\n", "h", "=", "dconv", "(", "act", "(", "f_norm", "(", "h", "+", "h_2", ")", ")", ",", "nd", "(", "height", "*", "2", ")", ",", "3", ",", "1", ")", "\n", "\n", "", "x", "=", "tf", ".", "tanh", "(", "conv", "(", "act", "(", "h", ")", ",", "n_channels", ",", "7", ",", "1", ")", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.None.train.D_train_graph": [[103, 178], ["tensorflow.placeholder", "train_iter.get_next", "tensorflow.random.normal", "tflib.counter", "tensorflow.train.AdamOptimizer", "zip", "tflib.average_gradients", "tf.train.AdamOptimizer.apply_gradients", "tflib.create_summary_statistic_v2", "tensorflow.random.normal", "G", "D", "D", "d_loss_fn", "tensorflow.cond", "tensorflow.reduce_sum", "tf.train.AdamOptimizer.compute_gradients", "tensorflow.reduce_mean", "range", "tensorflow.equal", "tensorflow.constant", "tflib.parellel_run", "sess.run", "tensorflow.constant", "tflib.gpus", "tflib.split_nest", "tfprob.gradient_penalty", "len", "tflib.gpus"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.counter", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.distribute.distribute.average_gradients", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.create_summary_statistic_v2", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.distribute.distribute.split_nest", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty.gradient_penalty"], ["def", "D_train_graph", "(", ")", ":", "\n", "# ======================================", "\n", "# =               graph                =", "\n", "# ======================================", "\n", "\n", "# placeholders & inputs", "\n", "    ", "lr", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "]", ")", "\n", "x_r", "=", "train_iter", ".", "get_next", "(", ")", "\n", "zs", "=", "[", "tf", ".", "random", ".", "normal", "(", "[", "args", ".", "batch_size", ",", "z_dim", "]", ")", "for", "z_dim", "in", "args", ".", "z_dims", "]", "\n", "eps", "=", "tf", ".", "random", ".", "normal", "(", "[", "args", ".", "batch_size", ",", "args", ".", "eps_dim", "]", ")", "\n", "\n", "# counter", "\n", "step_cnt", ",", "_", "=", "tl", ".", "counter", "(", ")", "\n", "\n", "# optimizer", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "args", ".", "beta_1", ")", "\n", "\n", "def", "graph_per_gpu", "(", "x_r", ",", "zs", ",", "eps", ")", ":", "\n", "\n", "# generate", "\n", "        ", "x_f", "=", "G", "(", "zs", ",", "eps", ")", "\n", "\n", "# discriminate", "\n", "x_r_logit", "=", "D", "(", "x_r", ")", "\n", "x_f_logit", "=", "D", "(", "x_f", ")", "\n", "\n", "# loss", "\n", "x_r_loss", ",", "x_f_loss", "=", "d_loss_fn", "(", "x_r_logit", ",", "x_f_logit", ")", "\n", "x_gp", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "step_cnt", "%", "args", ".", "d_lazy_reg_period", ",", "0", ")", ",", "\n", "lambda", ":", "tfprob", ".", "gradient_penalty", "(", "D", ",", "x_r", ",", "x_f", ",", "args", ".", "gradient_penalty_mode", ",", "args", ".", "gradient_penalty_sample_mode", ")", "*", "args", ".", "d_lazy_reg_period", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "if", "args", ".", "d_loss_weight_x_gp", "==", "0", ":", "\n", "            ", "x_gp", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "", "reg_loss", "=", "tf", ".", "reduce_sum", "(", "D", ".", "func", ".", "reg_losses", ")", "\n", "\n", "loss", "=", "(", "\n", "(", "x_r_loss", "+", "x_f_loss", ")", "*", "args", ".", "d_loss_weight_x_gan", "+", "\n", "x_gp", "*", "args", ".", "d_loss_weight_x_gp", "+", "\n", "reg_loss", "*", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "# optim", "\n", "grads", "=", "optimizer", ".", "compute_gradients", "(", "loss", ",", "var_list", "=", "D", ".", "func", ".", "trainable_variables", ")", "\n", "\n", "return", "grads", ",", "x_r_loss", ",", "x_f_loss", ",", "x_gp", ",", "reg_loss", "\n", "\n", "", "split_grads", ",", "split_x_r_loss", ",", "split_x_f_loss", ",", "split_x_gp", ",", "split_reg_loss", "=", "zip", "(", "*", "tl", ".", "parellel_run", "(", "tl", ".", "gpus", "(", ")", ",", "graph_per_gpu", ",", "tl", ".", "split_nest", "(", "(", "x_r", ",", "zs", ",", "eps", ")", ",", "len", "(", "tl", ".", "gpus", "(", ")", ")", ")", ")", ")", "\n", "# split_grads, split_x_r_loss, split_x_f_loss, split_x_gp, split_reg_loss = zip(*tl.parellel_run(['cpu:0'], graph_per_gpu, tl.split_nest((x_r, zs, eps), 1)))", "\n", "grads", "=", "tl", ".", "average_gradients", "(", "split_grads", ")", "\n", "x_r_loss", ",", "x_f_loss", ",", "x_gp", ",", "reg_loss", "=", "[", "tf", ".", "reduce_mean", "(", "t", ")", "for", "t", "in", "[", "split_x_r_loss", ",", "split_x_f_loss", ",", "split_x_gp", ",", "split_reg_loss", "]", "]", "\n", "\n", "step", "=", "optimizer", ".", "apply_gradients", "(", "grads", ",", "global_step", "=", "step_cnt", ")", "\n", "\n", "# summary", "\n", "summary", "=", "tl", ".", "create_summary_statistic_v2", "(", "\n", "{", "'x_gan_loss'", ":", "x_r_loss", "+", "x_f_loss", ",", "\n", "'x_gp'", ":", "x_gp", ",", "\n", "'reg_loss'", ":", "reg_loss", ",", "\n", "'lr'", ":", "lr", "}", ",", "\n", "'./output/%s/summaries/D'", "%", "args", ".", "experiment_name", ",", "\n", "step", "=", "step_cnt", ",", "\n", "n_steps_per_record", "=", "10", ",", "\n", "name", "=", "'D'", "\n", ")", "\n", "\n", "# ======================================", "\n", "# =            run function            =", "\n", "# ======================================", "\n", "\n", "def", "run", "(", "**", "pl_ipts", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "args", ".", "n_d", ")", ":", "\n", "            ", "sess", ".", "run", "(", "[", "step", ",", "summary", "]", ",", "feed_dict", "=", "{", "lr", ":", "pl_ipts", "[", "'lr'", "]", "}", ")", "\n", "\n", "", "", "return", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.None.train.G_train_graph": [[180, 266], ["tensorflow.placeholder", "tensorflow.random.normal", "tflib.counter", "tensorflow.train.AdamOptimizer", "zip", "tflib.average_gradients", "tf.train.AdamOptimizer.apply_gradients", "summary_dict.update", "tflib.create_summary_statistic_v2", "tflib.create_summary_image_v2", "tflib.count_parameters", "print", "tensorflow.random.normal", "G", "D", "g_loss_fn", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tf.train.AdamOptimizer.compute_gradients", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "G_ema.apply", "sess.run", "tflib.tensors_filter", "tflib.tensors_filter", "tflib.parellel_run", "tflib.gpus", "tflib.split_nest", "enumerate", "enumerate", "len", "tflib.tensors_filter", "tensorflow.get_collection", "tflib.gpus"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.counter", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.distribute.distribute.average_gradients", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.create_summary_statistic_v2", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.create_summary_image_v2", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.count_parameters", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.tensors_filter", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.tensors_filter", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.distribute.distribute.split_nest", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.tensors_filter", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.get_collection"], ["", "def", "G_train_graph", "(", ")", ":", "\n", "# ======================================", "\n", "# =               graph                =", "\n", "# ======================================", "\n", "\n", "# placeholders & inputs", "\n", "    ", "lr", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "]", ")", "\n", "zs", "=", "[", "tf", ".", "random", ".", "normal", "(", "[", "args", ".", "batch_size", ",", "z_dim", "]", ")", "for", "z_dim", "in", "args", ".", "z_dims", "]", "\n", "eps", "=", "tf", ".", "random", ".", "normal", "(", "[", "args", ".", "batch_size", ",", "args", ".", "eps_dim", "]", ")", "\n", "\n", "# counter", "\n", "step_cnt", ",", "_", "=", "tl", ".", "counter", "(", ")", "\n", "\n", "# optimizer", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ",", "beta1", "=", "args", ".", "beta_1", ")", "\n", "\n", "def", "graph_per_gpu", "(", "zs", ",", "eps", ")", ":", "\n", "# generate", "\n", "        ", "x_f", "=", "G", "(", "zs", ",", "eps", ")", "\n", "\n", "# discriminate", "\n", "x_f_logit", "=", "D", "(", "x_f", ")", "\n", "\n", "# loss", "\n", "x_f_loss", "=", "g_loss_fn", "(", "x_f_logit", ")", "\n", "orth_loss", "=", "tf", ".", "reduce_sum", "(", "tl", ".", "tensors_filter", "(", "G", ".", "func", ".", "reg_losses", ",", "'orthogonal_regularizer'", ")", ")", "\n", "reg_loss", "=", "tf", ".", "reduce_sum", "(", "tl", ".", "tensors_filter", "(", "G", ".", "func", ".", "reg_losses", ",", "'l2_regularizer'", ")", ")", "\n", "\n", "loss", "=", "(", "\n", "x_f_loss", "*", "args", ".", "g_loss_weight_x_gan", "+", "\n", "orth_loss", "*", "args", ".", "g_loss_weight_orth_loss", "+", "\n", "reg_loss", "*", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "# optim", "\n", "grads", "=", "optimizer", ".", "compute_gradients", "(", "loss", ",", "var_list", "=", "G", ".", "func", ".", "trainable_variables", ")", "\n", "\n", "return", "grads", ",", "x_f_loss", ",", "orth_loss", ",", "reg_loss", "\n", "\n", "", "split_grads", ",", "split_x_f_loss", ",", "split_orth_loss", ",", "split_reg_loss", "=", "zip", "(", "*", "tl", ".", "parellel_run", "(", "tl", ".", "gpus", "(", ")", ",", "graph_per_gpu", ",", "tl", ".", "split_nest", "(", "(", "zs", ",", "eps", ")", ",", "len", "(", "tl", ".", "gpus", "(", ")", ")", ")", ")", ")", "\n", "# split_grads, split_x_f_loss, split_orth_loss, split_reg_loss = zip(*tl.parellel_run(['cpu:0'], graph_per_gpu, tl.split_nest((zs, eps), 1)))", "\n", "grads", "=", "tl", ".", "average_gradients", "(", "split_grads", ")", "\n", "x_f_loss", ",", "orth_loss", ",", "reg_loss", "=", "[", "tf", ".", "reduce_mean", "(", "t", ")", "for", "t", "in", "[", "split_x_f_loss", ",", "split_orth_loss", ",", "split_reg_loss", "]", "]", "\n", "\n", "step", "=", "optimizer", ".", "apply_gradients", "(", "grads", ",", "global_step", "=", "step_cnt", ")", "\n", "\n", "# moving average", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "step", "]", ")", ":", "\n", "        ", "step", "=", "G_ema", ".", "apply", "(", "G", ".", "func", ".", "trainable_variables", ")", "\n", "\n", "# summary", "\n", "", "summary_dict", "=", "{", "'x_f_loss'", ":", "x_f_loss", ",", "\n", "'orth_loss'", ":", "orth_loss", ",", "\n", "'reg_loss'", ":", "reg_loss", "}", "\n", "summary_dict", ".", "update", "(", "{", "'L_%d'", "%", "i", ":", "t", "for", "i", ",", "t", "in", "enumerate", "(", "tl", ".", "tensors_filter", "(", "G", ".", "func", ".", "variables", ",", "'L'", ")", ")", "}", ")", "\n", "summary_loss", "=", "tl", ".", "create_summary_statistic_v2", "(", "\n", "summary_dict", ",", "\n", "'./output/%s/summaries/G'", "%", "args", ".", "experiment_name", ",", "\n", "step", "=", "step_cnt", ",", "\n", "n_steps_per_record", "=", "10", ",", "\n", "name", "=", "'G_loss'", "\n", ")", "\n", "\n", "summary_image", "=", "tl", ".", "create_summary_image_v2", "(", "\n", "{", "'orth_U_%d'", "%", "i", ":", "t", "[", "None", ",", ":", ",", ":", ",", "None", "]", "for", "i", ",", "t", "in", "enumerate", "(", "tf", ".", "get_collection", "(", "'orth'", ",", "G", ".", "func", ".", "scope", "+", "'/'", ")", ")", "}", ",", "\n", "'./output/%s/summaries/G'", "%", "args", ".", "experiment_name", ",", "\n", "step", "=", "step_cnt", ",", "\n", "n_steps_per_record", "=", "10", ",", "\n", "name", "=", "'G_image'", "\n", ")", "\n", "\n", "# ======================================", "\n", "# =             model size             =", "\n", "# ======================================", "\n", "\n", "n_params", ",", "n_bytes", "=", "tl", ".", "count_parameters", "(", "G", ".", "func", ".", "variables", ")", "\n", "print", "(", "'Model Size: n_parameters = %d = %.2fMB'", "%", "(", "n_params", ",", "n_bytes", "/", "1024", "/", "1024", ")", ")", "\n", "\n", "# ======================================", "\n", "# =            run function            =", "\n", "# ======================================", "\n", "\n", "def", "run", "(", "**", "pl_ipts", ")", ":", "\n", "        ", "sess", ".", "run", "(", "[", "step", ",", "summary_loss", ",", "summary_image", "]", ",", "feed_dict", "=", "{", "lr", ":", "pl_ipts", "[", "'lr'", "]", "}", ")", "\n", "\n", "", "return", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.None.train.sample_graph": [[268, 294], ["tflib.truncated_normal", "G_test", "pylib.mkdir", "tflib.truncated_normal", "sess.run", "imlib.immerge", "imlib.imwrite", "int"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.random.random.truncated_normal", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.mkdir", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.random.random.truncated_normal", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.transform.immerge", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imwrite"], ["", "def", "sample_graph", "(", ")", ":", "\n", "\n", "# ======================================", "\n", "# =               graph                =", "\n", "# ======================================", "\n", "\n", "# placeholders & inputs", "\n", "    ", "zs", "=", "[", "tl", ".", "truncated_normal", "(", "[", "args", ".", "n_samples", ",", "z_dim", "]", ",", "minval", "=", "-", "args", ".", "truncation_threshold", ",", "maxval", "=", "args", ".", "truncation_threshold", ")", "for", "z_dim", "in", "args", ".", "z_dims", "]", "\n", "eps", "=", "tl", ".", "truncated_normal", "(", "[", "args", ".", "n_samples", ",", "args", ".", "eps_dim", "]", ",", "minval", "=", "-", "args", ".", "truncation_threshold", ",", "maxval", "=", "args", ".", "truncation_threshold", ")", "\n", "\n", "# generate", "\n", "x_f", "=", "G_test", "(", "zs", ",", "eps", ",", "training", "=", "False", ")", "\n", "\n", "# ======================================", "\n", "# =            run function            =", "\n", "# ======================================", "\n", "\n", "save_dir", "=", "'./output/%s/samples_training/sample'", "%", "(", "args", ".", "experiment_name", ")", "\n", "py", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "def", "run", "(", "epoch", ",", "iter", ")", ":", "\n", "        ", "x_f_opt", "=", "sess", ".", "run", "(", "x_f", ")", "\n", "sample", "=", "im", ".", "immerge", "(", "x_f_opt", ",", "n_rows", "=", "int", "(", "args", ".", "n_samples", "**", "0.5", ")", ")", "\n", "im", ".", "imwrite", "(", "sample", ",", "'%s/Epoch-%d_Iter-%d.jpg'", "%", "(", "save_dir", ",", "epoch", ",", "iter", ")", ")", "\n", "\n", "", "return", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.None.train.traversal_graph": [[296, 342], ["tensorflow.placeholder", "G_test", "pylib.mkdir", "tensorflow.placeholder", "scipy.stats.truncnorm.rvs", "range", "sess.run", "range", "scipy.stats.truncnorm.rvs", "len", "tflib.tensors_filter", "len", "enumerate", "numpy.linspace", "imlib.immerge", "imlib.imwrite", "numpy.argsort", "copy.deepcopy", "feed_dict.update", "sess.run", "x_f_opts.append", "numpy.concatenate", "numpy.abs", "zip", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.mkdir", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.tensors_filter", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.transform.immerge", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imwrite"], ["", "def", "traversal_graph", "(", ")", ":", "\n", "\n", "# ======================================", "\n", "# =               graph                =", "\n", "# ======================================", "\n", "\n", "# placeholders & inputs", "\n", "    ", "zs", "=", "[", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "args", ".", "n_traversal", ",", "z_dim", "]", ")", "for", "z_dim", "in", "args", ".", "z_dims", "]", "\n", "eps", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "args", ".", "n_traversal", ",", "args", ".", "eps_dim", "]", ")", "\n", "\n", "# generate", "\n", "x_f", "=", "G_test", "(", "zs", ",", "eps", ",", "training", "=", "False", ")", "\n", "\n", "# ======================================", "\n", "# =            run function            =", "\n", "# ======================================", "\n", "\n", "save_dir", "=", "'./output/%s/samples_training/traversal'", "%", "(", "args", ".", "experiment_name", ")", "\n", "py", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "def", "run", "(", "epoch", ",", "iter", ")", ":", "\n", "        ", "zs_ipt_fixed", "=", "[", "scipy", ".", "stats", ".", "truncnorm", ".", "rvs", "(", "-", "args", ".", "truncation_threshold", ",", "args", ".", "truncation_threshold", ",", "size", "=", "[", "args", ".", "n_traversal", ",", "z_dim", "]", ")", "for", "z_dim", "in", "args", ".", "z_dims", "]", "\n", "eps_ipt", "=", "scipy", ".", "stats", ".", "truncnorm", ".", "rvs", "(", "-", "args", ".", "truncation_threshold", ",", "args", ".", "truncation_threshold", ",", "size", "=", "[", "args", ".", "n_traversal", ",", "args", ".", "eps_dim", "]", ")", "\n", "\n", "# set the first sample as the \"mode\"", "\n", "for", "l", "in", "range", "(", "len", "(", "args", ".", "z_dims", ")", ")", ":", "\n", "            ", "zs_ipt_fixed", "[", "l", "]", "[", "0", ",", "...", "]", "=", "0.0", "\n", "", "eps_ipt", "[", "0", ",", "...", "]", "=", "0.0", "\n", "\n", "L_opt", "=", "sess", ".", "run", "(", "tl", ".", "tensors_filter", "(", "G_test", ".", "func", ".", "variables", ",", "'L'", ")", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "args", ".", "z_dims", ")", ")", ":", "\n", "            ", "for", "j", ",", "i", "in", "enumerate", "(", "np", ".", "argsort", "(", "np", ".", "abs", "(", "L_opt", "[", "l", "]", ")", ")", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "                ", "x_f_opts", "=", "[", "]", "\n", "vals", "=", "np", ".", "linspace", "(", "-", "4.5", ",", "4.5", ",", "args", ".", "n_left_axis_point", "*", "2", "+", "1", ")", "\n", "for", "v", "in", "vals", ":", "\n", "                    ", "zs_ipt", "=", "copy", ".", "deepcopy", "(", "zs_ipt_fixed", ")", "\n", "zs_ipt", "[", "l", "]", "[", ":", ",", "i", "]", "=", "v", "\n", "feed_dict", "=", "{", "z", ":", "z_ipt", "for", "z", ",", "z_ipt", "in", "zip", "(", "zs", ",", "zs_ipt", ")", "}", "\n", "feed_dict", ".", "update", "(", "{", "eps", ":", "eps_ipt", "}", ")", "\n", "x_f_opt", "=", "sess", ".", "run", "(", "x_f", ",", "feed_dict", "=", "feed_dict", ")", "\n", "x_f_opts", ".", "append", "(", "x_f_opt", ")", "\n", "\n", "", "sample", "=", "im", ".", "immerge", "(", "np", ".", "concatenate", "(", "x_f_opts", ",", "axis", "=", "2", ")", ",", "n_rows", "=", "args", ".", "n_traversal", ")", "\n", "im", ".", "imwrite", "(", "sample", ",", "'%s/Epoch-%d_Iter-%d_Traversal-%d-%d-%.3f-%d.jpg'", "%", "(", "save_dir", ",", "epoch", ",", "iter", ",", "l", ",", "j", ",", "np", ".", "abs", "(", "L_opt", "[", "l", "]", "[", "i", "]", ")", ",", "i", ")", ")", "\n", "\n", "", "", "", "return", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.None.train.clone_graph": [[344, 360], ["G_test.func.clone_from_vars", "G_test.func.clone_from_module", "tflib.tensors_filter", "sess.run", "tflib.global_variables"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.clone_from_vars", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.clone_from_module", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.tensors_filter"], ["", "def", "clone_graph", "(", ")", ":", "\n", "# ======================================", "\n", "# =               graph                =", "\n", "# ======================================", "\n", "\n", "    ", "clone_tr", "=", "G_test", ".", "func", ".", "clone_from_vars", "(", "tl", ".", "tensors_filter", "(", "tl", ".", "global_variables", "(", ")", ",", "'G_ema'", ")", ",", "var_type", "=", "'trainable'", ")", "\n", "clone_non", "=", "G_test", ".", "func", ".", "clone_from_module", "(", "G", ".", "func", ",", "var_type", "=", "'nontrainable'", ")", "\n", "\n", "# ======================================", "\n", "# =            run function            =", "\n", "# ======================================", "\n", "\n", "def", "run", "(", "**", "pl_ipts", ")", ":", "\n", "        ", "sess", ".", "run", "(", "[", "clone_tr", ",", "clone_non", "]", ")", "\n", "\n", "", "return", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.None.data.make_dataset": [[7, 53], ["sorted", "tflib.disk_image_batch_dataset", "pylib.glob", "numpy.random.permutation", "int", "tensorflow.image.resize", "tensorflow.image.random_flip_left_right", "tflib.center_crop", "tensorflow.image.resize", "tflib.center_crop", "len", "numpy.ceil", "tensorflow.image.rgb_to_grayscale", "tensorflow.image.rgb_to_grayscale", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "len"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.data.dataset.disk_image_batch_dataset", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.glob", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.image.center_crop", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.image.center_crop"], ["def", "make_dataset", "(", "img_dir", ",", "\n", "batch_size", ",", "\n", "load_size", "=", "286", ",", "\n", "crop_size", "=", "256", ",", "\n", "n_channels", "=", "3", ",", "\n", "training", "=", "True", ",", "\n", "drop_remainder", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "\n", "repeat", "=", "1", ")", ":", "\n", "    ", "img_paths", "=", "sorted", "(", "py", ".", "glob", "(", "img_dir", ",", "'*'", ")", ")", "\n", "\n", "if", "shuffle", ":", "\n", "        ", "img_paths", "=", "np", ".", "random", ".", "permutation", "(", "img_paths", ")", "\n", "\n", "", "if", "training", ":", "\n", "        ", "def", "_map_fn", "(", "img", ")", ":", "\n", "            ", "if", "n_channels", "==", "1", ":", "\n", "                ", "img", "=", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "img", ")", "\n", "", "img", "=", "tf", ".", "image", ".", "resize", "(", "img", ",", "[", "load_size", ",", "load_size", "]", ")", "\n", "img", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "img", ")", "\n", "img", "=", "tl", ".", "center_crop", "(", "img", ",", "size", "=", "crop_size", ")", "\n", "# img = tf.image.random_crop(img, [crop_size, crop_size, n_channels])", "\n", "img", "=", "tf", ".", "clip_by_value", "(", "img", ",", "0", ",", "255", ")", "/", "127.5", "-", "1", "\n", "return", "img", "\n", "", "", "else", ":", "\n", "        ", "def", "_map_fn", "(", "img", ")", ":", "\n", "            ", "if", "n_channels", "==", "1", ":", "\n", "                ", "img", "=", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "img", ")", "\n", "", "img", "=", "tf", ".", "image", ".", "resize", "(", "img", ",", "[", "load_size", ",", "load_size", "]", ")", "\n", "img", "=", "tl", ".", "center_crop", "(", "img", ",", "size", "=", "crop_size", ")", "\n", "img", "=", "tf", ".", "clip_by_value", "(", "img", ",", "0", ",", "255", ")", "/", "127.5", "-", "1", "\n", "return", "img", "\n", "\n", "", "", "dataset", "=", "tl", ".", "disk_image_batch_dataset", "(", "img_paths", ",", "\n", "batch_size", ",", "\n", "drop_remainder", "=", "drop_remainder", ",", "\n", "map_fn", "=", "_map_fn", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "repeat", "=", "repeat", ")", "\n", "\n", "if", "drop_remainder", ":", "\n", "        ", "len_dataset", "=", "len", "(", "img_paths", ")", "//", "batch_size", "\n", "", "else", ":", "\n", "        ", "len_dataset", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "img_paths", ")", "/", "batch_size", ")", ")", "\n", "\n", "", "return", "dataset", ",", "len_dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.None.test_traversal_all_dims.traversal_graph": [[40, 109], ["pylib.mkdir", "os.path.exists", "functools.partial", "tensorflow.placeholder", "functools.partial.", "tflib.tensors_filter", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name", "scipy.stats.truncnorm.rvs", "range", "pylib.join", "module.G", "tensorflow.placeholder", "tensorflow.gfile.GFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name", "scipy.stats.truncnorm.rvs", "len", "range", "pylib.join", "f.read", "range", "range", "sess.run", "numpy.linspace", "numpy.concatenate", "range", "len", "len", "copy.deepcopy", "feed_dict.update", "sess.run", "x_f_opts.append", "imlib.imwrite", "numpy.argsort", "numpy.abs", "zip", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.mkdir", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.tensors_filter", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imwrite"], ["def", "traversal_graph", "(", ")", ":", "\n", "\n", "# ======================================", "\n", "# =               graph                =", "\n", "# ======================================", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "py", ".", "join", "(", "output_dir", ",", "'generator.pb'", ")", ")", ":", "\n", "# model", "\n", "        ", "G_test", "=", "functools", ".", "partial", "(", "module", ".", "G", "(", "scope", "=", "'G_test'", ")", ",", "n_channels", "=", "args", ".", "n_channels", ",", "use_gram_schmidt", "=", "args", ".", "g_loss_weight_orth_loss", "==", "0", ",", "training", "=", "False", ")", "\n", "\n", "# placeholders & inputs", "\n", "zs", "=", "[", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "args", ".", "n_traversal", ",", "z_dim", "]", ")", "for", "z_dim", "in", "args", ".", "z_dims", "]", "\n", "eps", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "args", ".", "n_traversal", ",", "args", ".", "eps_dim", "]", ")", "\n", "\n", "# generate", "\n", "x_f", "=", "G_test", "(", "zs", ",", "eps", ",", "training", "=", "False", ")", "\n", "\n", "L", "=", "tl", ".", "tensors_filter", "(", "G_test", ".", "func", ".", "variables", ",", "'L'", ")", "\n", "", "else", ":", "\n", "# load freezed model", "\n", "        ", "with", "tf", ".", "gfile", ".", "GFile", "(", "py", ".", "join", "(", "output_dir", ",", "'generator.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "'generator'", ")", "\n", "\n", "# placeholders & inputs", "\n", "", "zs", "=", "[", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'generator/z_%d:0'", "%", "i", ")", "for", "i", "in", "range", "(", "len", "(", "args", ".", "z_dims", ")", ")", "]", "\n", "eps", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'generator/eps:0'", ")", "\n", "\n", "# sample graph", "\n", "x_f", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'generator/x_f:0'", ")", "\n", "\n", "L", "=", "[", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'generator/L_%d:0'", "%", "i", ")", "for", "i", "in", "range", "(", "len", "(", "args", ".", "z_dims", ")", ")", "]", "\n", "\n", "# ======================================", "\n", "# =            run function            =", "\n", "# ======================================", "\n", "\n", "", "save_dir", "=", "'./output/%s/samples_testing/traversal/all_dims/traversal_%d_%.2f'", "%", "(", "args", ".", "experiment_name", ",", "args", ".", "n_traversal_point", ",", "args", ".", "truncation_threshold", ")", "\n", "py", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "def", "run", "(", ")", ":", "\n", "        ", "zs_ipt_fixed", "=", "[", "scipy", ".", "stats", ".", "truncnorm", ".", "rvs", "(", "-", "args", ".", "truncation_threshold", ",", "args", ".", "truncation_threshold", ",", "size", "=", "[", "args", ".", "n_traversal", ",", "z_dim", "]", ")", "for", "z_dim", "in", "args", ".", "z_dims", "]", "\n", "eps_ipt", "=", "scipy", ".", "stats", ".", "truncnorm", ".", "rvs", "(", "-", "args", ".", "truncation_threshold", ",", "args", ".", "truncation_threshold", ",", "size", "=", "[", "args", ".", "n_traversal", ",", "args", ".", "eps_dim", "]", ")", "\n", "\n", "left", "=", "-", "4.5", "\n", "right", "=", "4.5", "\n", "for", "layer_idx", "in", "range", "(", "len", "(", "args", ".", "z_dims", ")", ")", ":", "\n", "            ", "for", "eigen_idx", "in", "range", "(", "args", ".", "z_dims", "[", "layer_idx", "]", ")", ":", "\n", "                ", "L_opt", "=", "sess", ".", "run", "(", "L", ")", "\n", "l", "=", "layer_idx", "\n", "j", "=", "eigen_idx", "\n", "i", "=", "np", ".", "argsort", "(", "np", ".", "abs", "(", "L_opt", "[", "l", "]", ")", ")", "[", ":", ":", "-", "1", "]", "[", "j", "]", "\n", "\n", "x_f_opts", "=", "[", "]", "\n", "vals", "=", "np", ".", "linspace", "(", "left", ",", "right", ",", "args", ".", "n_traversal_point", ")", "\n", "for", "v", "in", "vals", ":", "\n", "                    ", "zs_ipt", "=", "copy", ".", "deepcopy", "(", "zs_ipt_fixed", ")", "\n", "zs_ipt", "[", "l", "]", "[", ":", ",", "i", "]", "=", "v", "\n", "feed_dict", "=", "{", "z", ":", "z_ipt", "for", "z", ",", "z_ipt", "in", "zip", "(", "zs", ",", "zs_ipt", ")", "}", "\n", "feed_dict", ".", "update", "(", "{", "eps", ":", "eps_ipt", "}", ")", "\n", "x_f_opt", "=", "sess", ".", "run", "(", "x_f", ",", "feed_dict", "=", "feed_dict", ")", "\n", "x_f_opts", ".", "append", "(", "x_f_opt", ")", "\n", "\n", "", "sample", "=", "np", ".", "concatenate", "(", "x_f_opts", ",", "axis", "=", "2", ")", "\n", "for", "ii", "in", "range", "(", "args", ".", "n_traversal", ")", ":", "\n", "                    ", "im", ".", "imwrite", "(", "sample", "[", "ii", "]", ",", "'%s/%04d_%d-%d-%.3f-%d.jpg'", "%", "(", "save_dir", ",", "ii", ",", "l", ",", "j", ",", "np", ".", "abs", "(", "L_opt", "[", "l", "]", "[", "i", "]", ")", ",", "i", ")", ")", "\n", "\n", "", "", "", "", "return", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.transform.imcrop": [[16, 49], ["skimage.pad"], "function", ["None"], ["def", "imcrop", "(", "image", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "pad_mode", "=", "'constant'", ",", "**", "pad_kwargs", ")", ":", "\n", "    ", "\"\"\"Crop an image with padding non-exisiting range.\n\n    Parameters\n    ----------\n    pad_mode:\n        To be passed to skimage.util.pad as `mode` parameter.\n    pad_kwargs:\n        To be passed to skimage.util.pad.\n\n    \"\"\"", "\n", "before_h", "=", "after_h", "=", "before_w", "=", "after_w", "=", "0", "\n", "\n", "if", "y2", ">", "image", ".", "shape", "[", "0", "]", ":", "\n", "        ", "after_h", "=", "y2", "-", "image", ".", "shape", "[", "0", "]", "\n", "", "if", "y1", "<", "0", ":", "\n", "        ", "before_h", "=", "-", "y1", "\n", "", "if", "x2", ">", "image", ".", "shape", "[", "1", "]", ":", "\n", "        ", "after_w", "=", "x2", "-", "image", ".", "shape", "[", "1", "]", "\n", "", "if", "x1", "<", "0", ":", "\n", "        ", "before_w", "=", "-", "x1", "\n", "\n", "", "x1", "+=", "before_w", "\n", "x2", "+=", "before_w", "\n", "y1", "+=", "before_h", "\n", "y2", "+=", "before_h", "\n", "\n", "image", "=", "util", ".", "pad", "(", "image", ",", "\n", "[", "(", "before_h", ",", "after_h", ")", ",", "(", "before_w", ",", "after_w", ")", "]", "+", "[", "(", "0", ",", "0", ")", "]", "*", "(", "image", ".", "ndim", "-", "2", ")", ",", "\n", "mode", "=", "pad_mode", ",", "\n", "**", "pad_kwargs", ")", "\n", "\n", "return", "image", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.transform.immerge": [[51, 86], ["numpy.array", "numpy.full", "enumerate", "max", "min", "max", "int", "int", "min", "int", "int"], "function", ["None"], ["", "def", "immerge", "(", "images", ",", "n_rows", "=", "None", ",", "n_cols", "=", "None", ",", "padding", "=", "0", ",", "pad_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Merge images to an image with (n_rows * h) * (n_cols * w).\n\n    Parameters\n    ----------\n    images : numpy.array or object which can be converted to numpy.array\n        Images in shape of N * H * W(* C=1 or 3).\n\n    \"\"\"", "\n", "images", "=", "np", ".", "array", "(", "images", ")", "\n", "n", "=", "images", ".", "shape", "[", "0", "]", "\n", "if", "n_rows", ":", "\n", "        ", "n_rows", "=", "max", "(", "min", "(", "n_rows", ",", "n", ")", ",", "1", ")", "\n", "n_cols", "=", "int", "(", "n", "-", "0.5", ")", "//", "n_rows", "+", "1", "\n", "", "elif", "n_cols", ":", "\n", "        ", "n_cols", "=", "max", "(", "min", "(", "n_cols", ",", "n", ")", ",", "1", ")", "\n", "n_rows", "=", "int", "(", "n", "-", "0.5", ")", "//", "n_cols", "+", "1", "\n", "", "else", ":", "\n", "        ", "n_rows", "=", "int", "(", "n", "**", "0.5", ")", "\n", "n_cols", "=", "int", "(", "n", "-", "0.5", ")", "//", "n_rows", "+", "1", "\n", "\n", "", "h", ",", "w", "=", "images", ".", "shape", "[", "1", "]", ",", "images", ".", "shape", "[", "2", "]", "\n", "shape", "=", "(", "h", "*", "n_rows", "+", "padding", "*", "(", "n_rows", "-", "1", ")", ",", "\n", "w", "*", "n_cols", "+", "padding", "*", "(", "n_cols", "-", "1", ")", ")", "\n", "if", "images", ".", "ndim", "==", "4", ":", "\n", "        ", "shape", "+=", "(", "images", ".", "shape", "[", "3", "]", ",", ")", "\n", "", "img", "=", "np", ".", "full", "(", "shape", ",", "pad_value", ",", "dtype", "=", "images", ".", "dtype", ")", "\n", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "i", "=", "idx", "%", "n_cols", "\n", "j", "=", "idx", "//", "n_cols", "\n", "img", "[", "j", "*", "(", "h", "+", "padding", ")", ":", "j", "*", "(", "h", "+", "padding", ")", "+", "h", ",", "\n", "i", "*", "(", "w", "+", "padding", ")", ":", "i", "*", "(", "w", "+", "padding", ")", "+", "w", ",", "...", "]", "=", "image", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.transform.grid_split": [[88, 101], ["math.ceil", "math.ceil", "range", "range", "rows.append", "cols.append"], "function", ["None"], ["", "def", "grid_split", "(", "image", ",", "h", ",", "w", ")", ":", "\n", "    ", "\"\"\"Split the image into a grid.\"\"\"", "\n", "n_rows", "=", "math", ".", "ceil", "(", "image", ".", "shape", "[", "0", "]", "/", "h", ")", "\n", "n_cols", "=", "math", ".", "ceil", "(", "image", ".", "shape", "[", "1", "]", "/", "w", ")", "\n", "\n", "rows", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "n_rows", ")", ":", "\n", "        ", "cols", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "n_cols", ")", ":", "\n", "            ", "cols", ".", "append", "(", "image", "[", "r", "*", "h", ":", "(", "r", "+", "1", ")", "*", "h", ",", "c", "*", "w", ":", "(", "c", "+", "1", ")", "*", "w", ",", "...", "]", ")", "\n", "", "rows", ".", "append", "(", "cols", ")", "\n", "\n", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.transform.grid_merge": [[103, 124], ["enumerate", "numpy.concatenate", "isinstance", "isinstance", "enumerate", "numpy.concatenate", "new_rows.append", "np.concatenate.append", "new_rows.append", "np.concatenate.append", "numpy.full", "numpy.full"], "function", ["None"], ["", "def", "grid_merge", "(", "grid", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "pad_value", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "    ", "\"\"\"Merge the grid as an image.\"\"\"", "\n", "padding", "=", "padding", "if", "isinstance", "(", "padding", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "padding", ",", "padding", "]", "\n", "pad_value", "=", "pad_value", "if", "isinstance", "(", "pad_value", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "pad_value", ",", "pad_value", "]", "\n", "\n", "new_rows", "=", "[", "]", "\n", "for", "r", ",", "row", "in", "enumerate", "(", "grid", ")", ":", "\n", "        ", "new_cols", "=", "[", "]", "\n", "for", "c", ",", "col", "in", "enumerate", "(", "row", ")", ":", "\n", "            ", "if", "c", "!=", "0", ":", "\n", "                ", "new_cols", ".", "append", "(", "np", ".", "full", "(", "[", "col", ".", "shape", "[", "0", "]", ",", "padding", "[", "1", "]", ",", "col", ".", "shape", "[", "2", "]", "]", ",", "pad_value", "[", "1", "]", ",", "dtype", "=", "col", ".", "dtype", ")", ")", "\n", "", "new_cols", ".", "append", "(", "col", ")", "\n", "\n", "", "new_cols", "=", "np", ".", "concatenate", "(", "new_cols", ",", "axis", "=", "1", ")", "\n", "if", "r", "!=", "0", ":", "\n", "            ", "new_rows", ".", "append", "(", "np", ".", "full", "(", "[", "padding", "[", "0", "]", ",", "new_cols", ".", "shape", "[", "1", "]", ",", "new_cols", ".", "shape", "[", "2", "]", "]", ",", "pad_value", "[", "0", "]", ",", "dtype", "=", "new_cols", ".", "dtype", ")", ")", "\n", "", "new_rows", ".", "append", "(", "new_cols", ")", "\n", "\n", "", "grid_merged", "=", "np", ".", "concatenate", "(", "new_rows", ",", "axis", "=", "0", ")", "\n", "\n", "return", "grid_merged", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imread": [[7, 26], ["skimage.imread", "iio.imread.astype", "Exception"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imread"], ["def", "imread", "(", "path", ",", "as_gray", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Return a float64 image in [-1.0, 1.0].\n\n    Parameters\n    ----------\n    kwargs:\n        To be passed to skimage.io.imread.\n\n    \"\"\"", "\n", "image", "=", "iio", ".", "imread", "(", "path", ",", "as_gray", ",", "**", "kwargs", ")", "\n", "if", "image", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "        ", "image", "=", "image", "/", "127.5", "-", "1", "\n", "", "elif", "image", ".", "dtype", "==", "np", ".", "uint16", ":", "\n", "        ", "image", "=", "image", "/", "32767.5", "-", "1", "\n", "", "elif", "image", ".", "dtype", "in", "[", "np", ".", "float32", ",", "np", ".", "float64", "]", ":", "\n", "        ", "image", "=", "image", "*", "2", "-", "1.0", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Invalid image dtype: %s!\"", "%", "image", ".", "dtype", ")", "\n", "", "return", "image", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imwrite": [[28, 40], ["skimage.imsave", "imlib.dtype.im2uint"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.im2uint"], ["", "def", "imwrite", "(", "image", ",", "path", ",", "quality", "=", "95", ",", "**", "plugin_args", ")", ":", "\n", "    ", "\"\"\"Save a [-1.0, 1.0] image.\n\n    Parameters\n    ----------\n    quality:\n        Quality for JEPG format.\n    plugin_args:\n        To be passed to skimage.io.imsave.\n\n    \"\"\"", "\n", "iio", ".", "imsave", "(", "path", ",", "dtype", ".", "im2uint", "(", "image", ")", ",", "quality", "=", "quality", ",", "**", "plugin_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imshow": [[42, 45], ["skimage.imshow", "imlib.dtype.im2uint"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imshow", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.im2uint"], ["", "def", "imshow", "(", "image", ")", ":", "\n", "    ", "\"\"\"Show a [-1.0, 1.0] image.\"\"\"", "\n", "iio", ".", "imshow", "(", "dtype", ".", "im2uint", "(", "image", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype._check": [[4, 28], ["isinstance", "numpy.all", "isinstance", "numpy.isfinite", "str", "str", "numpy.min", "numpy.max", "numpy.np.uint8"], "function", ["None"], ["def", "_check", "(", "images", ",", "dtypes", ",", "min_value", "=", "-", "np", ".", "inf", ",", "max_value", "=", "np", ".", "inf", ")", ":", "\n", "# check type", "\n", "    ", "assert", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ",", "'`images` should be np.ndarray!'", "\n", "\n", "# check dtype", "\n", "dtypes", "=", "dtypes", "if", "isinstance", "(", "dtypes", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dtypes", "]", "\n", "assert", "images", ".", "dtype", "in", "dtypes", ",", "'dtype of `images` shoud be one of %s!'", "%", "dtypes", "\n", "\n", "# check nan and inf", "\n", "assert", "np", ".", "all", "(", "np", ".", "isfinite", "(", "images", ")", ")", ",", "'`images` contains NaN or Inf!'", "\n", "\n", "# check value", "\n", "if", "min_value", "not", "in", "[", "None", ",", "-", "np", ".", "inf", "]", ":", "\n", "        ", "l", "=", "'['", "+", "str", "(", "min_value", ")", "\n", "", "else", ":", "\n", "        ", "l", "=", "'(-inf'", "\n", "min_value", "=", "-", "np", ".", "inf", "\n", "", "if", "max_value", "not", "in", "[", "None", ",", "np", ".", "inf", "]", ":", "\n", "        ", "r", "=", "str", "(", "max_value", ")", "+", "']'", "\n", "", "else", ":", "\n", "        ", "r", "=", "'inf)'", "\n", "max_value", "=", "np", ".", "inf", "\n", "", "assert", "np", ".", "min", "(", "images", ")", ">=", "min_value", "and", "np", ".", "max", "(", "images", ")", "<=", "max_value", ",", "'`images` should be in the range of %s!'", "%", "(", "l", "+", "','", "+", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.to_range": [[30, 35], ["dtype._check"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype._check"], ["", "def", "to_range", "(", "images", ",", "min_value", "=", "0.0", ",", "max_value", "=", "1.0", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "\"\"\"Transform images from [-1.0, 1.0] to [min_value, max_value] of dtype.\"\"\"", "\n", "_check", "(", "images", ",", "[", "np", ".", "float32", ",", "np", ".", "float64", "]", ",", "-", "1.0", ",", "1.0", ")", "\n", "dtype", "=", "dtype", "if", "dtype", "else", "images", ".", "dtype", "\n", "return", "(", "(", "images", "+", "1.", ")", "/", "2.", "*", "(", "max_value", "-", "min_value", ")", "+", "min_value", ")", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.float2im": [[37, 41], ["dtype._check"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype._check"], ["", "def", "float2im", "(", "images", ")", ":", "\n", "    ", "\"\"\"Transform images from [0.0, 1.0] to [-1.0, 1.0] of float64.\"\"\"", "\n", "_check", "(", "images", ",", "[", "np", ".", "float32", ",", "np", ".", "float64", "]", ",", "0.0", ",", "1.0", ")", "\n", "return", "(", "images", "*", "2", "-", "1.0", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.uint2im": [[43, 47], ["dtype._check"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype._check"], ["", "def", "uint2im", "(", "images", ")", ":", "\n", "    ", "\"\"\"Transform images from uint8 to [-1.0, 1.0] of float64.\"\"\"", "\n", "_check", "(", "images", ",", "np", ".", "uint8", ")", "\n", "return", "(", "images", "/", "127.5", "-", "1.0", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.cv2im": [[49, 53], ["dtype.uint2im"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.uint2im"], ["", "def", "cv2im", "(", "images", ")", ":", "\n", "    ", "\"\"\"Transform opencv images to [-1.0, 1.0].\"\"\"", "\n", "images", "=", "uint2im", "(", "images", ")", "\n", "return", "images", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.im2float": [[55, 58], ["dtype.to_range"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.to_range"], ["", "def", "im2float", "(", "images", ")", ":", "\n", "    ", "\"\"\"Transform images from [-1.0, 1.0] to [0.0, 1.0] of float64.\"\"\"", "\n", "return", "to_range", "(", "images", ",", "min_value", "=", "0.0", ",", "max_value", "=", "1.0", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.im2uint": [[60, 63], ["dtype.to_range"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.to_range"], ["", "def", "im2uint", "(", "images", ")", ":", "\n", "    ", "\"\"\"Transform images from [-1.0, 1.0] to uint8.\"\"\"", "\n", "return", "to_range", "(", "images", ",", "min_value", "=", "0", ",", "max_value", "=", "255", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.im2cv": [[65, 69], ["dtype.im2uint"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.dtype.im2uint"], ["", "def", "im2cv", "(", "images", ")", ":", "\n", "    ", "\"\"\"Transform images from [-1.0, 1.0] to opencv images.\"\"\"", "\n", "images", "=", "im2uint", "(", "images", ")", "\n", "return", "images", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_divergence_fn": [[8, 55], ["tensorflow.exp", "tensorflow.exp", "tensorflow.log", "tensorflow.exp", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.exp", "tensorflow.exp", "tensorflow.exp", "tensorflow.exp"], "function", ["None"], ["def", "get_divergence_fn", "(", "divergence", ")", ":", "\n", "    ", "if", "divergence", "in", "[", "'Kullback-Leibler'", ",", "'KL'", "]", ":", "\n", "        ", "def", "activation_fn", "(", "v", ")", ":", "\n", "            ", "return", "v", "\n", "\n", "", "def", "conjugate_fn", "(", "t", ")", ":", "\n", "            ", "return", "tf", ".", "exp", "(", "t", "-", "1", ")", "\n", "\n", "", "", "elif", "divergence", "==", "'Reverse-KL'", ":", "\n", "        ", "def", "activation_fn", "(", "v", ")", ":", "\n", "            ", "return", "-", "tf", ".", "exp", "(", "-", "v", ")", "\n", "\n", "", "def", "conjugate_fn", "(", "t", ")", ":", "\n", "            ", "return", "-", "1", "-", "tf", ".", "log", "(", "-", "t", ")", "\n", "\n", "", "", "elif", "divergence", "==", "'Pearson-X2'", ":", "\n", "        ", "def", "activation_fn", "(", "v", ")", ":", "\n", "            ", "return", "v", "\n", "\n", "", "def", "conjugate_fn", "(", "t", ")", ":", "\n", "            ", "return", "0.25", "*", "t", "*", "t", "+", "t", "\n", "\n", "", "", "elif", "divergence", "==", "'Squared-Hellinger'", ":", "\n", "        ", "def", "activation_fn", "(", "v", ")", ":", "\n", "            ", "return", "1", "-", "tf", ".", "exp", "(", "-", "v", ")", "\n", "\n", "", "def", "conjugate_fn", "(", "t", ")", ":", "\n", "            ", "return", "t", "/", "(", "1", "-", "t", ")", "\n", "\n", "", "", "elif", "divergence", "in", "[", "'Jensen-Shannon'", ",", "'JS'", "]", ":", "\n", "        ", "def", "activation_fn", "(", "v", ")", ":", "\n", "            ", "return", "tf", ".", "log", "(", "2.0", ")", "-", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "v", ")", ")", "\n", "\n", "", "def", "conjugate_fn", "(", "t", ")", ":", "\n", "            ", "return", "-", "tf", ".", "log", "(", "2", "-", "tf", ".", "exp", "(", "t", ")", ")", "\n", "\n", "", "", "elif", "divergence", "==", "'GAN'", ":", "\n", "        ", "def", "activation_fn", "(", "v", ")", ":", "\n", "            ", "return", "-", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "v", ")", ")", "\n", "\n", "", "def", "conjugate_fn", "(", "t", ")", ":", "\n", "            ", "return", "-", "tf", ".", "log", "(", "1", "-", "tf", ".", "exp", "(", "t", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "activation_fn", ",", "conjugate_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_fgan_losses_fn": [[57, 76], ["loss.get_divergence_fn", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "loss.get_divergence_fn.conjugate_fn", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "loss.get_divergence_fn.activation_fn", "loss.get_divergence_fn.activation_fn", "loss.get_divergence_fn.conjugate_fn", "loss.get_divergence_fn.activation_fn", "loss.get_divergence_fn.activation_fn"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_divergence_fn"], ["", "def", "get_fgan_losses_fn", "(", "divergence", ",", "tricky", "=", "True", ")", ":", "\n", "    ", "activation_fn", ",", "conjugate_fn", "=", "get_divergence_fn", "(", "divergence", ")", "\n", "\n", "def", "d_loss_fn", "(", "r_logit", ",", "f_logit", ")", ":", "\n", "        ", "r_loss", "=", "-", "tf", ".", "reduce_mean", "(", "activation_fn", "(", "r_logit", ")", ")", "\n", "f_loss", "=", "tf", ".", "reduce_mean", "(", "conjugate_fn", "(", "activation_fn", "(", "f_logit", ")", ")", ")", "\n", "return", "r_loss", ",", "f_loss", "\n", "\n", "", "def", "g_loss_fn_theoretical", "(", "f_logit", ")", ":", "\n", "        ", "f_loss", "=", "-", "tf", ".", "reduce_mean", "(", "conjugate_fn", "(", "activation_fn", "(", "f_logit", ")", ")", ")", "\n", "return", "f_loss", "\n", "\n", "", "def", "g_loss_fn_tricky", "(", "f_logit", ")", ":", "\n", "        ", "f_loss", "=", "-", "tf", ".", "reduce_mean", "(", "activation_fn", "(", "f_logit", ")", ")", "\n", "return", "f_loss", "\n", "\n", "", "g_loss_fn", "=", "g_loss_fn_theoretical", "if", "not", "tricky", "else", "g_loss_fn_tricky", "\n", "\n", "return", "d_loss_fn", ",", "g_loss_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_gan_losses_fn": [[82, 95], ["tensorflow.keras.losses.BinaryCrossentropy", "tf.keras.losses.BinaryCrossentropy.", "tf.keras.losses.BinaryCrossentropy.", "tf.keras.losses.BinaryCrossentropy.", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like"], "function", ["None"], ["", "def", "get_gan_losses_fn", "(", ")", ":", "\n", "    ", "bce", "=", "tf", ".", "keras", ".", "losses", ".", "BinaryCrossentropy", "(", "from_logits", "=", "True", ")", "\n", "\n", "def", "d_loss_fn", "(", "r_logit", ",", "f_logit", ")", ":", "\n", "        ", "r_loss", "=", "bce", "(", "tf", ".", "ones_like", "(", "r_logit", ")", ",", "r_logit", ")", "\n", "f_loss", "=", "bce", "(", "tf", ".", "zeros_like", "(", "f_logit", ")", ",", "f_logit", ")", "\n", "return", "r_loss", ",", "f_loss", "\n", "\n", "", "def", "g_loss_fn", "(", "f_logit", ")", ":", "\n", "        ", "f_loss", "=", "bce", "(", "tf", ".", "ones_like", "(", "f_logit", ")", ",", "f_logit", ")", "\n", "return", "f_loss", "\n", "\n", "", "return", "d_loss_fn", ",", "g_loss_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_hinge_v1_losses_fn": [[97, 108], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.maximum"], "function", ["None"], ["", "def", "get_hinge_v1_losses_fn", "(", ")", ":", "\n", "    ", "def", "d_loss_fn", "(", "r_logit", ",", "f_logit", ")", ":", "\n", "        ", "r_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "1", "-", "r_logit", ",", "0", ")", ")", "\n", "f_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "1", "+", "f_logit", ",", "0", ")", ")", "\n", "return", "r_loss", ",", "f_loss", "\n", "\n", "", "def", "g_loss_fn", "(", "f_logit", ")", ":", "\n", "        ", "f_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "1", "-", "f_logit", ",", "0", ")", ")", "\n", "return", "f_loss", "\n", "\n", "", "return", "d_loss_fn", ",", "g_loss_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_hinge_v2_losses_fn": [[110, 121], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.maximum", "tensorflow.maximum"], "function", ["None"], ["", "def", "get_hinge_v2_losses_fn", "(", ")", ":", "\n", "    ", "def", "d_loss_fn", "(", "r_logit", ",", "f_logit", ")", ":", "\n", "        ", "r_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "1", "-", "r_logit", ",", "0", ")", ")", "\n", "f_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "1", "+", "f_logit", ",", "0", ")", ")", "\n", "return", "r_loss", ",", "f_loss", "\n", "\n", "", "def", "g_loss_fn", "(", "f_logit", ")", ":", "\n", "        ", "f_loss", "=", "tf", ".", "reduce_mean", "(", "-", "f_logit", ")", "\n", "return", "f_loss", "\n", "\n", "", "return", "d_loss_fn", ",", "g_loss_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_lsgan_losses_fn": [[123, 136], ["tensorflow.keras.losses.MeanSquaredError", "tf.keras.losses.MeanSquaredError.", "tf.keras.losses.MeanSquaredError.", "tf.keras.losses.MeanSquaredError.", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like"], "function", ["None"], ["", "def", "get_lsgan_losses_fn", "(", ")", ":", "\n", "    ", "mse", "=", "tf", ".", "keras", ".", "losses", ".", "MeanSquaredError", "(", ")", "\n", "\n", "def", "d_loss_fn", "(", "r_logit", ",", "f_logit", ")", ":", "\n", "        ", "r_loss", "=", "mse", "(", "tf", ".", "ones_like", "(", "r_logit", ")", ",", "r_logit", ")", "\n", "f_loss", "=", "mse", "(", "tf", ".", "zeros_like", "(", "f_logit", ")", ",", "f_logit", ")", "\n", "return", "r_loss", ",", "f_loss", "\n", "\n", "", "def", "g_loss_fn", "(", "f_logit", ")", ":", "\n", "        ", "f_loss", "=", "mse", "(", "tf", ".", "ones_like", "(", "f_logit", ")", ",", "f_logit", ")", "\n", "return", "f_loss", "\n", "\n", "", "return", "d_loss_fn", ",", "g_loss_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_wgan_losses_fn": [[138, 149], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "get_wgan_losses_fn", "(", ")", ":", "\n", "    ", "def", "d_loss_fn", "(", "r_logit", ",", "f_logit", ")", ":", "\n", "        ", "r_loss", "=", "-", "tf", ".", "reduce_mean", "(", "r_logit", ")", "\n", "f_loss", "=", "tf", ".", "reduce_mean", "(", "f_logit", ")", "\n", "return", "r_loss", ",", "f_loss", "\n", "\n", "", "def", "g_loss_fn", "(", "f_logit", ")", ":", "\n", "        ", "f_loss", "=", "-", "tf", ".", "reduce_mean", "(", "f_logit", ")", "\n", "return", "f_loss", "\n", "\n", "", "return", "d_loss_fn", ",", "g_loss_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_adversarial_losses_fn": [[151, 175], ["loss.get_gan_losses_fn", "loss.get_hinge_v1_losses_fn", "loss.get_hinge_v2_losses_fn", "loss.get_lsgan_losses_fn", "loss.get_wgan_losses_fn", "isinstance", "mode.split.startswith", "len", "loss.get_fgan_losses_fn", "mode.split.split", "len", "loss.get_fgan_losses_fn", "len", "loss.get_fgan_losses_fn", "len", "loss.get_fgan_losses_fn"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_gan_losses_fn", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_hinge_v1_losses_fn", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_hinge_v2_losses_fn", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_lsgan_losses_fn", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_wgan_losses_fn", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_fgan_losses_fn", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_fgan_losses_fn", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_fgan_losses_fn", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.loss.get_fgan_losses_fn"], ["", "def", "get_adversarial_losses_fn", "(", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'gan'", ":", "\n", "        ", "return", "get_gan_losses_fn", "(", ")", "\n", "", "elif", "mode", "==", "'hinge_v1'", ":", "\n", "        ", "return", "get_hinge_v1_losses_fn", "(", ")", "\n", "", "elif", "mode", "==", "'hinge_v2'", ":", "\n", "        ", "return", "get_hinge_v2_losses_fn", "(", ")", "\n", "", "elif", "mode", "==", "'lsgan'", ":", "\n", "        ", "return", "get_lsgan_losses_fn", "(", ")", "\n", "", "elif", "mode", "==", "'wgan'", ":", "\n", "        ", "return", "get_wgan_losses_fn", "(", ")", "\n", "", "elif", "isinstance", "(", "mode", ",", "(", "list", ",", "tuple", ")", ")", "and", "mode", "[", "0", "]", "==", "'fgan'", ":", "\n", "        ", "if", "len", "(", "mode", ")", "==", "2", ":", "\n", "            ", "return", "get_fgan_losses_fn", "(", "mode", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "mode", ")", "==", "3", ":", "\n", "            ", "return", "get_fgan_losses_fn", "(", "mode", "[", "1", "]", ",", "mode", "[", "2", "]", ")", "\n", "", "", "elif", "mode", ".", "startswith", "(", "'fgan'", ")", ":", "\n", "        ", "mode", "=", "mode", ".", "split", "(", "'_'", ")", "\n", "if", "len", "(", "mode", ")", "==", "2", ":", "\n", "            ", "return", "get_fgan_losses_fn", "(", "mode", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "mode", ")", "==", "3", ":", "\n", "            ", "return", "get_fgan_losses_fn", "(", "mode", "[", "1", "]", ",", "True", "if", "mode", "[", "2", "]", "==", "'tricky'", "else", "False", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._sample_line": [[8, 14], ["tensorflow.random.uniform", "sample.set_shape", "tensorflow.shape"], "function", ["None"], ["def", "_sample_line", "(", "real", ",", "fake", ")", ":", "\n", "    ", "shape", "=", "[", "tf", ".", "shape", "(", "real", ")", "[", "0", "]", "]", "+", "[", "1", "]", "*", "(", "real", ".", "shape", ".", "ndims", "-", "1", ")", "\n", "alpha", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "shape", ",", "minval", "=", "0", ",", "maxval", "=", "1", ")", "\n", "sample", "=", "real", "+", "alpha", "*", "(", "fake", "-", "real", ")", "\n", "sample", ".", "set_shape", "(", "real", ".", "shape", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._sample_DRAGAN": [[16, 21], ["tensorflow.random.uniform", "gradient_penalty._sample_line", "tensorflow.shape", "tensorflow.math.reduce_std"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._sample_line"], ["", "def", "_sample_DRAGAN", "(", "real", ",", "fake", ")", ":", "# `fake` is useless", "\n", "    ", "beta", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "tf", ".", "shape", "(", "real", ")", ",", "minval", "=", "0", ",", "maxval", "=", "1", ")", "\n", "fake", "=", "real", "+", "0.5", "*", "tf", ".", "math", ".", "reduce_std", "(", "real", ")", "*", "beta", "\n", "sample", "=", "_sample_line", "(", "real", ",", "fake", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._norm": [[27, 30], ["tensorflow.norm", "tensorflow.reshape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["", "def", "_norm", "(", "x", ")", ":", "\n", "    ", "norm", "=", "tf", ".", "norm", "(", "tf", ".", "reshape", "(", "x", ",", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._one_mean_gp": [[32, 36], ["gradient_penalty._norm", "tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._norm"], ["", "def", "_one_mean_gp", "(", "grad", ")", ":", "\n", "    ", "norm", "=", "_norm", "(", "grad", ")", "\n", "gp", "=", "tf", ".", "reduce_mean", "(", "(", "norm", "-", "1", ")", "**", "2", ")", "\n", "return", "gp", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._zero_mean_gp": [[38, 42], ["gradient_penalty._norm", "tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._norm"], ["", "def", "_zero_mean_gp", "(", "grad", ")", ":", "\n", "    ", "norm", "=", "_norm", "(", "grad", ")", "\n", "gp", "=", "tf", ".", "reduce_mean", "(", "norm", "**", "2", ")", "\n", "return", "gp", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._lipschitz_penalty": [[44, 48], ["gradient_penalty._norm", "tensorflow.reduce_mean", "tensorflow.maximum"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._norm"], ["", "def", "_lipschitz_penalty", "(", "grad", ")", ":", "\n", "    ", "norm", "=", "_norm", "(", "grad", ")", "\n", "gp", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "norm", "-", "1", ",", "0", ")", "**", "2", ")", "\n", "return", "gp", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty.gradient_penalty": [[50, 75], ["tensorflow.constant", "tensorflow.concat", "gradient_penalty._sample_DRAGAN", "tensorflow.gradients", "f"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.gan.gradient_penalty._sample_DRAGAN"], ["", "def", "gradient_penalty", "(", "f", ",", "real", ",", "fake", ",", "gp_mode", ",", "sample_mode", ")", ":", "\n", "    ", "sample_fns", "=", "{", "\n", "'line'", ":", "_sample_line", ",", "\n", "'real'", ":", "lambda", "real", ",", "fake", ":", "real", ",", "\n", "'fake'", ":", "lambda", "real", ",", "fake", ":", "fake", ",", "\n", "'real+fake'", ":", "lambda", "real", ",", "fake", ":", "tf", ".", "concat", "(", "[", "real", ",", "fake", "]", ",", "axis", "=", "0", ")", ",", "\n", "'dragan'", ":", "_sample_DRAGAN", ",", "\n", "'dragan_real'", ":", "_sample_DRAGAN", ",", "\n", "'dragan_fake'", ":", "lambda", "real", ",", "fake", ":", "_sample_DRAGAN", "(", "fake", ",", "real", ")", "\n", "}", "\n", "\n", "gp_fns", "=", "{", "\n", "'1-gp'", ":", "_one_mean_gp", ",", "\n", "'0-gp'", ":", "_zero_mean_gp", ",", "\n", "'lp'", ":", "_lipschitz_penalty", ",", "\n", "}", "\n", "\n", "if", "gp_mode", "==", "'none'", ":", "\n", "        ", "gp", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "real", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "sample_fns", "[", "sample_mode", "]", "(", "real", ",", "fake", ")", "\n", "grad", "=", "tf", ".", "gradients", "(", "f", "(", "x", ")", ",", "x", ")", "[", "0", "]", "\n", "gp", "=", "gp_fns", "[", "gp_mode", "]", "(", "grad", ")", "\n", "\n", "", "return", "gp", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.scripts.cropper.align_crop_opencv": [[4, 70], ["cv2.warpAffine", "isinstance", "isinstance", "numpy.array", "cv2.transform", "len", "Exception", "cv2.estimateAffine2D", "cv2.estimateAffinePartial2D", "numpy.expand_dims", "cv2.invertAffineTransform", "max"], "function", ["None"], ["def", "align_crop_opencv", "(", "img", ",", "\n", "src_landmarks", ",", "\n", "standard_landmarks", ",", "\n", "crop_size", "=", "512", ",", "\n", "face_factor", "=", "0.7", ",", "\n", "align_type", "=", "'similarity'", ",", "\n", "order", "=", "3", ",", "\n", "mode", "=", "'edge'", ")", ":", "\n", "    ", "\"\"\"Align and crop a face image by landmarks.\n\n    Arguments:\n        img                : Face image to be aligned and cropped.\n        src_landmarks      : [[x_1, y_1], ..., [x_n, y_n]].\n        standard_landmarks : Standard shape, should be normalized.\n        crop_size          : Output image size, should be 1. int for (crop_size, crop_size)\n                             or 2. (int, int) for (crop_size_h, crop_size_w).\n        face_factor        : The factor of face area relative to the output image.\n        align_type         : 'similarity' or 'affine'.\n        order              : The order of interpolation. The order has to be in the range 0-5:\n                                 - 0: INTER_NEAREST\n                                 - 1: INTER_LINEAR\n                                 - 2: INTER_AREA\n                                 - 3: INTER_CUBIC\n                                 - 4: INTER_LANCZOS4\n                                 - 5: INTER_LANCZOS4\n        mode               : One of ['constant', 'edge', 'symmetric', 'reflect', 'wrap'].\n                             Points outside the boundaries of the input are filled according\n                             to the given mode.\n    \"\"\"", "\n", "# set OpenCV", "\n", "import", "cv2", "\n", "inter", "=", "{", "0", ":", "cv2", ".", "INTER_NEAREST", ",", "1", ":", "cv2", ".", "INTER_LINEAR", ",", "2", ":", "cv2", ".", "INTER_AREA", ",", "\n", "3", ":", "cv2", ".", "INTER_CUBIC", ",", "4", ":", "cv2", ".", "INTER_LANCZOS4", ",", "5", ":", "cv2", ".", "INTER_LANCZOS4", "}", "\n", "border", "=", "{", "'constant'", ":", "cv2", ".", "BORDER_CONSTANT", ",", "'edge'", ":", "cv2", ".", "BORDER_REPLICATE", ",", "\n", "'symmetric'", ":", "cv2", ".", "BORDER_REFLECT", ",", "'reflect'", ":", "cv2", ".", "BORDER_REFLECT101", ",", "\n", "'wrap'", ":", "cv2", ".", "BORDER_WRAP", "}", "\n", "\n", "# check", "\n", "assert", "align_type", "in", "[", "'affine'", ",", "'similarity'", "]", ",", "'Invalid `align_type`! Allowed: %s!'", "%", "[", "'affine'", ",", "'similarity'", "]", "\n", "assert", "order", "in", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ",", "'Invalid `order`! Allowed: %s!'", "%", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "assert", "mode", "in", "[", "'constant'", ",", "'edge'", ",", "'symmetric'", ",", "'reflect'", ",", "'wrap'", "]", ",", "'Invalid `mode`! Allowed: %s!'", "%", "[", "'constant'", ",", "'edge'", ",", "'symmetric'", ",", "'reflect'", ",", "'wrap'", "]", "\n", "\n", "# crop size", "\n", "if", "isinstance", "(", "crop_size", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "crop_size", ")", "==", "2", ":", "\n", "        ", "crop_size_h", "=", "crop_size", "[", "0", "]", "\n", "crop_size_w", "=", "crop_size", "[", "1", "]", "\n", "", "elif", "isinstance", "(", "crop_size", ",", "int", ")", ":", "\n", "        ", "crop_size_h", "=", "crop_size_w", "=", "crop_size", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Invalid `crop_size`! `crop_size` should be 1. int for (crop_size, crop_size) or 2. (int, int) for (crop_size_h, crop_size_w)!'", ")", "\n", "\n", "# estimate transform matrix", "\n", "", "trg_landmarks", "=", "standard_landmarks", "*", "max", "(", "crop_size_h", ",", "crop_size_w", ")", "*", "face_factor", "+", "np", ".", "array", "(", "[", "crop_size_w", "//", "2", ",", "crop_size_h", "//", "2", "]", ")", "\n", "if", "align_type", "==", "'affine'", ":", "\n", "        ", "tform", "=", "cv2", ".", "estimateAffine2D", "(", "trg_landmarks", ",", "src_landmarks", ",", "ransacReprojThreshold", "=", "np", ".", "Inf", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "tform", "=", "cv2", ".", "estimateAffinePartial2D", "(", "trg_landmarks", ",", "src_landmarks", ",", "ransacReprojThreshold", "=", "np", ".", "Inf", ")", "[", "0", "]", "\n", "\n", "# warp image by given transform", "\n", "", "output_shape", "=", "(", "crop_size_h", ",", "crop_size_w", ")", "\n", "img_crop", "=", "cv2", ".", "warpAffine", "(", "img", ",", "tform", ",", "output_shape", "[", ":", ":", "-", "1", "]", ",", "flags", "=", "cv2", ".", "WARP_INVERSE_MAP", "+", "inter", "[", "order", "]", ",", "borderMode", "=", "border", "[", "mode", "]", ")", "\n", "\n", "# get transformed landmarks", "\n", "tformed_landmarks", "=", "cv2", ".", "transform", "(", "np", ".", "expand_dims", "(", "src_landmarks", ",", "axis", "=", "0", ")", ",", "cv2", ".", "invertAffineTransform", "(", "tform", ")", ")", "[", "0", "]", "\n", "\n", "return", "img_crop", ",", "tformed_landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.scripts.cropper.align_crop_skimage": [[72, 102], ["NotImplementedError"], "function", ["None"], ["", "def", "align_crop_skimage", "(", "img", ",", "\n", "src_landmarks", ",", "\n", "standard_landmarks", ",", "\n", "crop_size", "=", "512", ",", "\n", "face_factor", "=", "0.7", ",", "\n", "align_type", "=", "'similarity'", ",", "\n", "order", "=", "3", ",", "\n", "mode", "=", "'edge'", ")", ":", "\n", "    ", "\"\"\"Align and crop a face image by landmarks.\n\n    Arguments:\n        img                : Face image to be aligned and cropped.\n        src_landmarks      : [[x_1, y_1], ..., [x_n, y_n]].\n        standard_landmarks : Standard shape, should be normalized.\n        crop_size          : Output image size, should be 1. int for (crop_size, crop_size)\n                             or 2. (int, int) for (crop_size_h, crop_size_w).\n        face_factor        : The factor of face area relative to the output image.\n        align_type         : 'similarity' or 'affine'.\n        order              : The order of interpolation. The order has to be in the range 0-5:\n                                 - 0: INTER_NEAREST\n                                 - 1: INTER_LINEAR\n                                 - 2: INTER_AREA\n                                 - 3: INTER_CUBIC\n                                 - 4: INTER_LANCZOS4\n                                 - 5: INTER_LANCZOS4\n        mode               : One of ['constant', 'edge', 'symmetric', 'reflect', 'wrap'].\n                             Points outside the boundaries of the input are filled according\n                             to the given mode.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"'align_crop_skimage' is not implemented!\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.scripts.remove_black_edge.count_edge": [[19, 49], ["range", "range", "range", "range", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["None"], ["def", "count_edge", "(", "img", ",", "eps", "=", "0.4", ")", ":", "\n", "    ", "up", "=", "0", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "np", ".", "mean", "(", "img", "[", "i", ",", "...", "]", ")", "+", "1", "<", "eps", ":", "\n", "            ", "up", "+=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "down", "=", "0", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "if", "np", ".", "mean", "(", "img", "[", "i", ",", "...", "]", ")", "+", "1", "<", "eps", ":", "\n", "            ", "down", "+=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "left", "=", "0", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "np", ".", "mean", "(", "img", "[", ":", ",", "i", ",", "...", "]", ")", "+", "1", "<", "eps", ":", "\n", "            ", "left", "+=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "right", "=", "0", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "if", "np", ".", "mean", "(", "img", "[", ":", ",", "i", ",", "...", "]", ")", "+", "1", "<", "eps", ":", "\n", "            ", "right", "+=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "up", ",", "down", ",", "left", ",", "right", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.scripts.remove_black_edge.work_fn": [[51, 58], ["imlib.imread", "remove_black_edge.count_edge", "max", "imlib.imwrite", "img_name.replace"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imread", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.scripts.remove_black_edge.count_edge", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imwrite"], ["", "def", "work_fn", "(", "img_name", ")", ":", "\n", "    ", "img", "=", "im", ".", "imread", "(", "img_name", ")", "\n", "u", ",", "d", ",", "l", ",", "r", "=", "count_edge", "(", "img", ")", "\n", "o", "=", "max", "(", "u", ",", "d", ",", "l", ",", "r", ")", "\n", "if", "o", "/", "img", ".", "shape", "[", "0", "]", "<", "portion", ":", "\n", "        ", "img", "=", "img", "[", "o", ":", "img", ".", "shape", "[", "0", "]", "-", "o", ",", "o", ":", "img", ".", "shape", "[", "1", "]", "-", "o", ",", "...", "]", "\n", "im", ".", "imwrite", "(", "img", ",", "img_name", ".", "replace", "(", "img_dir", ",", "save_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.scripts.align.work": [[82, 111], ["range", "print", "imread", "align_crop", "os.path.join", "imwrite", "os.path.join", "os.path.isdir", "os.makedirs", "tuple", "os.path.splitext", "os.path.split", "os.path.split"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imread", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.imlib.basic.imwrite", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split"], ["", "def", "work", "(", "i", ")", ":", "# a single work", "\n", "    ", "for", "_", "in", "range", "(", "3", ")", ":", "# try three times", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "imread", "(", "os", ".", "path", ".", "join", "(", "args", ".", "img_dir", ",", "img_names", "[", "i", "]", ")", ")", "\n", "img_crop", ",", "tformed_landmarks", "=", "align_crop", "(", "img", ",", "\n", "landmarks", "[", "i", "]", ",", "\n", "standard_landmark", ",", "\n", "crop_size", "=", "(", "args", ".", "crop_size_h", ",", "args", ".", "crop_size_w", ")", ",", "\n", "face_factor", "=", "args", ".", "face_factor", ",", "\n", "align_type", "=", "args", ".", "align_type", ",", "\n", "order", "=", "args", ".", "order", ",", "\n", "mode", "=", "args", ".", "mode", ")", "\n", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "img_names", "[", "i", "]", ")", "[", "0", "]", "+", "'.'", "+", "args", ".", "save_format", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "split", "(", "path", ")", "[", "0", "]", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "path", ")", "[", "0", "]", ")", "\n", "", "imwrite", "(", "path", ",", "img_crop", ")", "\n", "\n", "tformed_landmarks", ".", "shape", "=", "-", "1", "\n", "name_landmark_str", "=", "(", "'%s'", "+", "' %.1f'", "*", "n_landmark", "*", "2", ")", "%", "(", "(", "name", ",", ")", "+", "tuple", "(", "tformed_landmarks", ")", ")", "\n", "succeed", "=", "True", "\n", "break", "\n", "", "except", ":", "\n", "            ", "succeed", "=", "False", "\n", "", "", "if", "succeed", ":", "\n", "        ", "return", "name_landmark_str", "\n", "", "else", ":", "\n", "        ", "print", "(", "'%s fails!'", "%", "img_names", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.processing.run_parallels": [[6, 29], ["backend_executor", "list", "work_fn", "executor.imap", "executor.map", "tqdm.tqdm", "len", "print"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.scripts.remove_black_edge.work_fn"], ["def", "run_parallels", "(", "work_fn", ",", "iterable", ",", "max_workers", "=", "None", ",", "chunksize", "=", "1", ",", "processing_bar", "=", "True", ",", "backend_executor", "=", "multiprocessing", ".", "Pool", ",", "debug", "=", "False", ")", ":", "\n", "    ", "if", "not", "debug", ":", "\n", "        ", "with", "backend_executor", "(", "max_workers", ")", "as", "executor", ":", "\n", "            ", "try", ":", "\n", "                ", "works", "=", "executor", ".", "imap", "(", "work_fn", ",", "iterable", ",", "chunksize", "=", "chunksize", ")", "# for multiprocessing.Pool", "\n", "", "except", ":", "\n", "                ", "works", "=", "executor", ".", "map", "(", "work_fn", ",", "iterable", ",", "chunksize", "=", "chunksize", ")", "\n", "\n", "", "if", "processing_bar", ":", "\n", "                ", "try", ":", "\n", "                    ", "import", "tqdm", "\n", "try", ":", "\n", "                        ", "total", "=", "len", "(", "iterable", ")", "\n", "", "except", ":", "\n", "                        ", "total", "=", "None", "\n", "", "works", "=", "tqdm", ".", "tqdm", "(", "works", ",", "total", "=", "total", ")", "\n", "", "except", "ImportError", ":", "\n", "                    ", "print", "(", "'`import tqdm` fails! Run without processing bar!'", ")", "\n", "\n", "", "", "results", "=", "list", "(", "works", ")", "\n", "", "", "else", ":", "\n", "        ", "results", "=", "[", "work_fn", "(", "i", ")", "for", "i", "in", "iterable", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.argument._serialization_wrapper": [[11, 23], ["functools.wraps", "kwargs.pop", "kwargs.pop", "func", "argument.args_to_json", "argument.args_to_yaml"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.argument.args_to_json", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.argument.args_to_yaml"], ["def", "_serialization_wrapper", "(", "func", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "_wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "to_json", "=", "kwargs", ".", "pop", "(", "\"to_json\"", ",", "None", ")", "\n", "to_yaml", "=", "kwargs", ".", "pop", "(", "\"to_yaml\"", ",", "None", ")", "\n", "namespace", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "to_json", ":", "\n", "            ", "args_to_json", "(", "to_json", ",", "namespace", ")", "\n", "", "if", "to_yaml", ":", "\n", "            ", "args_to_yaml", "(", "to_yaml", ",", "namespace", ")", "\n", "", "return", "namespace", "\n", "", "return", "_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.argument._str2bool": [[25, 32], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "_str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.argument.argument": [[34, 42], ["GLOBAL_COMMAND_PARSER.add_argument", "issubclass", "issubclass"], "function", ["None"], ["", "", "def", "argument", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wrap argparse.add_argument.\"\"\"", "\n", "if", "'type'", "in", "kwargs", ":", "\n", "        ", "if", "issubclass", "(", "kwargs", "[", "'type'", "]", ",", "bool", ")", ":", "\n", "            ", "kwargs", "[", "'type'", "]", "=", "_str2bool", "\n", "", "elif", "issubclass", "(", "kwargs", "[", "'type'", "]", ",", "dict", ")", ":", "\n", "            ", "kwargs", "[", "'type'", "]", "=", "json", ".", "loads", "\n", "", "", "return", "GLOBAL_COMMAND_PARSER", ".", "add_argument", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.argument.args": [[47, 52], ["GLOBAL_COMMAND_PARSER.parse_args"], "function", ["None"], ["@", "_serialization_wrapper", "\n", "def", "args", "(", "args", "=", "None", ",", "namespace", "=", "None", ")", ":", "\n", "    ", "\"\"\"Parse args using the global parser.\"\"\"", "\n", "namespace", "=", "GLOBAL_COMMAND_PARSER", ".", "parse_args", "(", "args", "=", "args", ",", "namespace", "=", "namespace", ")", "\n", "return", "namespace", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.argument.args_from_xxx": [[54, 69], ["parser", "argparse.ArgumentParser().parse_args", "parser.items", "argparse.ArgumentParser().parse_args.__setattr__", "argparse.ArgumentParser"], "function", ["None"], ["", "@", "_serialization_wrapper", "\n", "def", "args_from_xxx", "(", "obj", ",", "parser", ",", "check", "=", "True", ")", ":", "\n", "    ", "\"\"\"Load args from xxx ignoring type and choices with default still valid.\n\n    Parameters\n    ----------\n    parser: function\n        Should return a dict.\n\n    \"\"\"", "\n", "dict_", "=", "parser", "(", "obj", ")", "\n", "namespace", "=", "argparse", ".", "ArgumentParser", "(", ")", ".", "parse_args", "(", "args", "=", "''", ")", "# '' for not to accept command line args", "\n", "for", "k", ",", "v", "in", "dict_", ".", "items", "(", ")", ":", "\n", "        ", "namespace", ".", "__setattr__", "(", "k", ",", "v", ")", "\n", "", "return", "namespace", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.argument.args_to_json": [[76, 78], ["pylib.serialization.save_json", "vars"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization.save_json"], ["def", "args_to_json", "(", "path", ",", "namespace", ",", "**", "kwagrs", ")", ":", "\n", "    ", "serialization", ".", "save_json", "(", "path", ",", "vars", "(", "namespace", ")", ",", "**", "kwagrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.argument.args_to_yaml": [[80, 82], ["pylib.serialization.save_yaml", "vars"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization.save_yaml"], ["", "def", "args_to_yaml", "(", "path", ",", "namespace", ",", "**", "kwagrs", ")", ":", "\n", "    ", "serialization", ".", "save_yaml", "(", "path", ",", "vars", "(", "namespace", ")", ",", "**", "kwagrs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.__init__": [[29, 35], ["timer.Timer.start"], "methods", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.start"], ["def", "__init__", "(", "self", ",", "fmt", "=", "'s'", ",", "print_at_exit", "=", "True", ",", "timer", "=", "timeit", ".", "default_timer", ")", ":", "\n", "        ", "assert", "fmt", "in", "[", "'ms'", ",", "'s'", ",", "'datetime'", "]", ",", "\"`fmt` should be 'ms', 's' or 'datetime'!\"", "\n", "self", ".", "_fmt", "=", "fmt", "\n", "self", ".", "_print_at_exit", "=", "print_at_exit", "\n", "self", ".", "_timer", "=", "timer", "\n", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.__enter__": [[36, 40], ["timer.Timer.restart"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start the timer in the context manager scope.\"\"\"", "\n", "self", ".", "restart", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.__exit__": [[41, 45], ["print", "str"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "exc_traceback", ")", ":", "\n", "        ", "\"\"\"Print the end time.\"\"\"", "\n", "if", "self", ".", "_print_at_exit", ":", "\n", "            ", "print", "(", "str", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.__str__": [[46, 48], ["timer.Timer.fmt"], "methods", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.fmt"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", "(", "self", ".", "elapsed", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.start": [[49, 51], ["timer.Timer._timer"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "self", ".", "_timer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.elapsed": [[54, 58], ["timer.Timer._timer"], "methods", ["None"], ["@", "property", "\n", "def", "elapsed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the current elapsed time since last (re)start.\"\"\"", "\n", "return", "self", ".", "_timer", "(", ")", "-", "self", ".", "start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.fmt": [[59, 70], ["datetime.timedelta", "str"], "methods", ["None"], ["", "def", "fmt", "(", "self", ",", "second", ")", ":", "\n", "        ", "if", "self", ".", "_fmt", "==", "'ms'", ":", "\n", "            ", "time_fmt", "=", "second", "*", "1000", "\n", "time_str", "=", "'%s %s'", "%", "(", "time_fmt", ",", "self", ".", "_fmt", ")", "\n", "", "elif", "self", ".", "_fmt", "==", "'s'", ":", "\n", "            ", "time_fmt", "=", "second", "\n", "time_str", "=", "'%s %s'", "%", "(", "time_fmt", ",", "self", ".", "_fmt", ")", "\n", "", "elif", "self", ".", "_fmt", "==", "'datetime'", ":", "\n", "            ", "time_fmt", "=", "datetime", ".", "timedelta", "(", "seconds", "=", "second", ")", "\n", "time_str", "=", "str", "(", "time_fmt", ")", "\n", "", "return", "time_fmt", ",", "time_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.timeit": [[72, 94], ["timer_kwargs.update", "print", "timer.Timer", "range", "f", "t.fmt"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.timer.Timer.fmt"], ["", "", "def", "timeit", "(", "run_times", "=", "1", ",", "**", "timer_kwargs", ")", ":", "\n", "    ", "\"\"\"Function decorator displaying the function execution time.\n\n    All kwargs are the arguments taken by the Timer class constructor.\n\n    \"\"\"", "\n", "# store Timer kwargs in local variable so the namespace isn't polluted", "\n", "# by different level args and kwargs", "\n", "\n", "def", "decorator", "(", "f", ")", ":", "\n", "        ", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "timer_kwargs", ".", "update", "(", "print_at_exit", "=", "False", ")", "\n", "with", "Timer", "(", "**", "timer_kwargs", ")", "as", "t", ":", "\n", "                ", "for", "_", "in", "range", "(", "run_times", ")", ":", "\n", "                    ", "out", "=", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "fmt", "=", "'[*] Execution time of function \"%(function_name)s\" for %(run_times)d runs is %(execution_time)s = %(execution_time_each)s * %(run_times)d [*]'", "\n", "context", "=", "{", "'function_name'", ":", "f", ".", "__name__", ",", "'run_times'", ":", "run_times", ",", "'execution_time'", ":", "t", ",", "'execution_time_each'", ":", "t", ".", "fmt", "(", "t", ".", "elapsed", "/", "run_times", ")", "[", "1", "]", "}", "\n", "print", "(", "fmt", "%", "context", ")", "\n", "return", "out", "\n", "", "return", "wrapper", "\n", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.add_path": [[8, 14], ["isinstance", "sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "paths", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "paths", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "paths", "=", "[", "paths", "]", "\n", "", "for", "path", "in", "paths", ":", "\n", "        ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "            ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.mkdir": [[16, 22], ["isinstance", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "", "def", "mkdir", "(", "paths", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "paths", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "paths", "=", "[", "paths", "]", "\n", "", "for", "path", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split": [[24, 29], ["os.path.split", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split"], ["", "", "", "def", "split", "(", "path", ")", ":", "\n", "    ", "\"\"\"Return dir, name, ext.\"\"\"", "\n", "dir", ",", "name_ext", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "name_ext", ")", "\n", "return", "dir", ",", "name", ",", "ext", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.directory": [[31, 33], ["path.split"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split"], ["", "def", "directory", "(", "path", ")", ":", "\n", "    ", "return", "split", "(", "path", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.name": [[35, 37], ["path.split"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split"], ["", "def", "name", "(", "path", ")", ":", "\n", "    ", "return", "split", "(", "path", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.ext": [[39, 41], ["path.split"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split"], ["", "def", "ext", "(", "path", ")", ":", "\n", "    ", "return", "split", "(", "path", ")", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.name_ext": [[43, 45], ["path.split"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split"], ["", "def", "name_ext", "(", "path", ")", ":", "\n", "    ", "return", "''", ".", "join", "(", "split", "(", "path", ")", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.change_ext": [[47, 51], ["os.path.splitext"], "function", ["None"], ["", "def", "change_ext", "(", "path", ",", "ext", ")", ":", "\n", "    ", "if", "ext", "[", "0", "]", "==", "'.'", ":", "\n", "        ", "ext", "=", "ext", "[", "1", ":", "]", "\n", "", "return", "os", ".", "path", ".", "splitext", "(", "path", ")", "[", "0", "]", "+", "'.'", "+", "ext", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.prefix": [[59, 63], ["path.split", "join", "isinstance", "sep.join"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split"], ["def", "prefix", "(", "path", ",", "prefixes", ",", "sep", "=", "'-'", ")", ":", "\n", "    ", "prefixes", "=", "prefixes", "if", "isinstance", "(", "prefixes", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "prefixes", "]", "\n", "dir", ",", "name", ",", "ext", "=", "split", "(", "path", ")", "\n", "return", "join", "(", "dir", ",", "sep", ".", "join", "(", "prefixes", ")", "+", "sep", "+", "name", "+", "ext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.suffix": [[65, 69], ["path.split", "join", "isinstance", "sep.join"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split"], ["", "def", "suffix", "(", "path", ",", "suffixes", ",", "sep", "=", "'-'", ")", ":", "\n", "    ", "suffixes", "=", "suffixes", "if", "isinstance", "(", "suffixes", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "suffixes", "]", "\n", "dir", ",", "name", ",", "ext", "=", "split", "(", "path", ")", "\n", "return", "join", "(", "dir", ",", "name", "+", "sep", "+", "sep", ".", "join", "(", "suffixes", ")", "+", "ext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.prefix_now": [[71, 73], ["path.prefix", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.prefix"], ["", "def", "prefix_now", "(", "path", ",", "fmt", "=", "\"%Y-%m-%d-%H:%M:%S\"", ",", "sep", "=", "'-'", ")", ":", "\n", "    ", "return", "prefix", "(", "path", ",", "prefixes", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "fmt", ")", ",", "sep", "=", "sep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.suffix_now": [[75, 77], ["path.suffix", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.suffix"], ["", "def", "suffix_now", "(", "path", ",", "fmt", "=", "\"%Y-%m-%d-%H:%M:%S\"", ",", "sep", "=", "'-'", ")", ":", "\n", "    ", "return", "suffix", "(", "path", ",", "suffixes", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "fmt", ")", ",", "sep", "=", "sep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.glob": [[79, 85], ["isinstance", "glob.glob", "os.path.join"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.glob"], ["", "def", "glob", "(", "dir", ",", "pats", ",", "recursive", "=", "False", ")", ":", "# faster than match, python3 only", "\n", "    ", "pats", "=", "pats", "if", "isinstance", "(", "pats", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "pats", "]", "\n", "matches", "=", "[", "]", "\n", "for", "pat", "in", "pats", ":", "\n", "        ", "matches", "+=", "_glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "pat", ")", ",", "recursive", "=", "recursive", ")", "\n", "", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.match": [[87, 101], ["list", "isinstance", "os.walk", "fnmatch.filter", "matches.append", "os.path.join"], "function", ["None"], ["", "def", "match", "(", "dir", ",", "pats", ",", "recursive", "=", "False", ")", ":", "# slow", "\n", "    ", "pats", "=", "pats", "if", "isinstance", "(", "pats", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "pats", "]", "\n", "\n", "iterator", "=", "list", "(", "os", ".", "walk", "(", "dir", ")", ")", "\n", "if", "not", "recursive", ":", "\n", "        ", "iterator", "=", "iterator", "[", "0", ":", "1", "]", "\n", "\n", "", "matches", "=", "[", "]", "\n", "for", "pat", "in", "pats", ":", "\n", "        ", "for", "root", ",", "_", ",", "file_names", "in", "iterator", ":", "\n", "            ", "for", "file_name", "in", "fnmatch", ".", "filter", "(", "file_names", ",", "pat", ")", ":", "\n", "                ", "matches", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", ")", ")", "\n", "\n", "", "", "", "return", "matches", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization._check_ext": [[6, 13], ["os.path.splitext"], "function", ["None"], ["def", "_check_ext", "(", "path", ",", "default_ext", ")", ":", "\n", "    ", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "\n", "if", "ext", "==", "''", ":", "\n", "        ", "if", "default_ext", "[", "0", "]", "==", "'.'", ":", "\n", "            ", "default_ext", "=", "default_ext", "[", "1", ":", "]", "\n", "", "path", "=", "name", "+", "'.'", "+", "default_ext", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization.save_json": [[15, 27], ["serialization._check_ext", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization._check_ext"], ["", "def", "save_json", "(", "path", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "# default", "\n", "    ", "if", "'indent'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'indent'", "]", "=", "4", "\n", "", "if", "'separators'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'separators'", "]", "=", "(", "','", ",", "': '", ")", "\n", "\n", "", "path", "=", "_check_ext", "(", "path", ",", "'json'", ")", "\n", "\n", "# wrap json.dump", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization.load_json": [[29, 33], ["open", "json.load"], "function", ["None"], ["", "", "def", "load_json", "(", "path", ",", "**", "kwargs", ")", ":", "\n", "# wrap json.load", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization.save_yaml": [[35, 42], ["serialization._check_ext", "open", "yaml.dump"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization._check_ext"], ["", "", "def", "save_yaml", "(", "path", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "    ", "import", "oyaml", "as", "yaml", "\n", "\n", "path", "=", "_check_ext", "(", "path", ",", "'yml'", ")", "\n", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "data", ",", "f", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization.load_yaml": [[44, 48], ["open", "yaml.load"], "function", ["None"], ["", "", "def", "load_yaml", "(", "path", ",", "**", "kwargs", ")", ":", "\n", "    ", "import", "oyaml", "as", "yaml", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "return", "yaml", ".", "load", "(", "f", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization.save_pickle": [[50, 56], ["serialization._check_ext", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization._check_ext"], ["", "", "def", "save_pickle", "(", "path", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "    ", "path", "=", "_check_ext", "(", "path", ",", "'pkl'", ")", "\n", "\n", "# wrap pickle.dump", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.serialization.load_pickle": [[58, 62], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_pickle", "(", "path", ",", "**", "kwargs", ")", ":", "\n", "# wrap pickle.load", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.tensors_filter": [[6, 49], ["isinstance", "isinstance", "isinstance", "collection.tensors_filter._select"], "function", ["None"], ["def", "tensors_filter", "(", "tensors", ",", "\n", "includes", "=", "''", ",", "\n", "includes_combine_type", "=", "'or'", ",", "\n", "excludes", "=", "None", ",", "\n", "excludes_combine_type", "=", "'or'", ")", ":", "\n", "# NOTICE: `includes` = [] means nothing to be included, and `excludes` = [] means nothing to be excluded", "\n", "\n", "    ", "if", "excludes", "is", "None", ":", "\n", "        ", "excludes", "=", "[", "]", "\n", "\n", "", "assert", "isinstance", "(", "tensors", ",", "(", "list", ",", "tuple", ")", ")", ",", "'`tensors` shoule be a list or tuple!'", "\n", "assert", "isinstance", "(", "includes", ",", "(", "str", ",", "list", ",", "tuple", ")", ")", ",", "'`includes` should be a string or a list(tuple) of strings!'", "\n", "assert", "includes_combine_type", "in", "[", "'or'", ",", "'and'", "]", ",", "\"`includes_combine_type` should be 'or' or 'and'!\"", "\n", "assert", "isinstance", "(", "excludes", ",", "(", "str", ",", "list", ",", "tuple", ")", ")", ",", "'`excludes` should be a string or a list(tuple) of strings!'", "\n", "assert", "excludes_combine_type", "in", "[", "'or'", ",", "'and'", "]", ",", "\"`excludes_combine_type` should be 'or' or 'and'!\"", "\n", "\n", "def", "_select", "(", "filters", ",", "combine_type", ")", ":", "\n", "        ", "if", "filter", "in", "[", "[", "]", ",", "(", ")", "]", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "filters", "=", "filters", "if", "isinstance", "(", "filters", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "filters", "]", "\n", "\n", "selected", "=", "[", "]", "\n", "for", "t", "in", "tensors", ":", "\n", "            ", "if", "combine_type", "==", "'or'", ":", "\n", "                ", "for", "filt", "in", "filters", ":", "\n", "                    ", "if", "filt", "in", "t", ".", "name", ":", "\n", "                        ", "selected", ".", "append", "(", "t", ")", "\n", "break", "\n", "", "", "", "elif", "combine_type", "==", "'and'", ":", "\n", "                ", "for", "filt", "in", "filters", ":", "\n", "                    ", "if", "filt", "not", "in", "t", ".", "name", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "selected", ".", "append", "(", "t", ")", "\n", "\n", "", "", "", "return", "selected", "\n", "\n", "", "include_set", "=", "_select", "(", "includes", ",", "includes_combine_type", ")", "\n", "exclude_set", "=", "_select", "(", "excludes", ",", "excludes_combine_type", ")", "\n", "select_set", "=", "[", "t", "for", "t", "in", "include_set", "if", "t", "not", "in", "exclude_set", "]", "\n", "\n", "return", "select_set", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.get_collection": [[51, 62], ["tensorflow.get_collection", "collection.tensors_filter"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.get_collection", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.collection.tensors_filter"], ["", "def", "get_collection", "(", "key", ",", "\n", "includes", "=", "''", ",", "\n", "includes_combine_type", "=", "'or'", ",", "\n", "excludes", "=", "None", ",", "\n", "excludes_combine_type", "=", "'or'", ")", ":", "\n", "    ", "tensors", "=", "tf", ".", "get_collection", "(", "key", ")", "\n", "return", "tensors_filter", "(", "tensors", ",", "\n", "includes", ",", "\n", "includes_combine_type", ",", "\n", "excludes", ",", "\n", "excludes_combine_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.summary_statistic_v1": [[4, 38], ["tensorflow.summary.merge", "tensorflow.name_scope", "name_data_dict.items", "tensorflow.summary.merge", "summaries.append", "summaries.append", "tensorflow.summary.scalar", "summaries.append", "summaries.append", "summaries.append", "summaries.append", "summaries.append", "summaries.append", "summary.summary_statistic_v1._summary"], "function", ["None"], ["def", "summary_statistic_v1", "(", "name_data_dict", ",", "\n", "types", "=", "[", "'mean'", ",", "'std'", ",", "'max'", ",", "'min'", ",", "'sparsity'", ",", "'histogram'", "]", ",", "\n", "name", "=", "'summary_statistic_v1'", ")", ":", "\n", "    ", "\"\"\"(deprecated, use v2) Summary of statistics.\n\n    Examples\n    --------\n    >>> summary_statistic_v1({'a': data_a, 'b': data_b})\n\n    \"\"\"", "\n", "def", "_summary", "(", "name", ",", "data", ")", ":", "\n", "        ", "summaries", "=", "[", "]", "\n", "if", "data", ".", "shape", "==", "(", ")", ":", "\n", "            ", "summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "data", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "'mean'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'-mean'", ",", "tf", ".", "math", ".", "reduce_mean", "(", "data", ")", ")", ")", "\n", "", "if", "'std'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'-std'", ",", "tf", ".", "math", ".", "reduce_std", "(", "data", ")", ")", ")", "\n", "", "if", "'max'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'-max'", ",", "tf", ".", "math", ".", "reduce_max", "(", "data", ")", ")", ")", "\n", "", "if", "'min'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'-min'", ",", "tf", ".", "math", ".", "reduce_min", "(", "data", ")", ")", ")", "\n", "", "if", "'sparsity'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'-sparsity'", ",", "tf", ".", "math", ".", "zero_fraction", "(", "data", ")", ")", ")", "\n", "", "if", "'histogram'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "summary", ".", "histogram", "(", "name", ",", "data", ")", ")", "\n", "", "", "return", "tf", ".", "summary", ".", "merge", "(", "summaries", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "        ", "summaries", "=", "[", "]", "\n", "for", "name", ",", "data", "in", "name_data_dict", ".", "items", "(", ")", ":", "\n", "            ", "summaries", ".", "append", "(", "_summary", "(", "name", ",", "data", ")", ")", "\n", "", "return", "tf", ".", "summary", ".", "merge", "(", "summaries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.summary_statistic_v2": [[40, 75], ["tensorflow.name_scope", "name_data_dict.items", "summaries.append", "summary.summary_statistic_v1._summary"], "function", ["None"], ["", "", "def", "summary_statistic_v2", "(", "name_data_dict", ",", "\n", "step", ",", "\n", "types", "=", "[", "'mean'", ",", "'std'", ",", "'max'", ",", "'min'", ",", "'sparsity'", ",", "'histogram'", "]", ",", "\n", "name", "=", "'summary_statistic_v2'", ")", ":", "\n", "    ", "\"\"\"Summary of statistics.\n\n    Examples\n    --------\n    >>> summary_statistic_v2({'a': data_a, 'b': data_b}, tf.train.get_global_step())\n\n    \"\"\"", "\n", "def", "_summary", "(", "name", ",", "data", ")", ":", "\n", "        ", "summaries", "=", "[", "]", "\n", "if", "data", ".", "shape", "==", "(", ")", ":", "\n", "            ", "summaries", ".", "append", "(", "tf", ".", "contrib", ".", "summary", ".", "scalar", "(", "name", ",", "data", ",", "step", "=", "step", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "'mean'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "contrib", ".", "summary", ".", "scalar", "(", "name", "+", "'-mean'", ",", "tf", ".", "math", ".", "reduce_mean", "(", "data", ")", ",", "step", "=", "step", ")", ")", "\n", "", "if", "'std'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "contrib", ".", "summary", ".", "scalar", "(", "name", "+", "'-std'", ",", "tf", ".", "math", ".", "reduce_std", "(", "data", ")", ",", "step", "=", "step", ")", ")", "\n", "", "if", "'max'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "contrib", ".", "summary", ".", "scalar", "(", "name", "+", "'-max'", ",", "tf", ".", "math", ".", "reduce_max", "(", "data", ")", ",", "step", "=", "step", ")", ")", "\n", "", "if", "'min'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "contrib", ".", "summary", ".", "scalar", "(", "name", "+", "'-min'", ",", "tf", ".", "math", ".", "reduce_min", "(", "data", ")", ",", "step", "=", "step", ")", ")", "\n", "", "if", "'sparsity'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "contrib", ".", "summary", ".", "scalar", "(", "name", "+", "'-sparsity'", ",", "tf", ".", "math", ".", "zero_fraction", "(", "data", ")", ",", "step", "=", "step", ")", ")", "\n", "", "if", "'histogram'", "in", "types", ":", "\n", "                ", "summaries", ".", "append", "(", "tf", ".", "contrib", ".", "summary", ".", "histogram", "(", "name", ",", "data", ",", "step", "=", "step", ")", ")", "\n", "", "", "return", "summaries", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "        ", "summaries", "=", "{", "}", "\n", "for", "name", ",", "data", "in", "name_data_dict", ".", "items", "(", ")", ":", "\n", "            ", "summaries", "[", "name", "]", "=", "_summary", "(", "name", ",", "data", ")", "\n", "", "return", "summaries", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.create_summary_statistic_v2": [[77, 89], ["tensorflow.contrib.summary.create_file_writer().as_default", "tensorflow.contrib.summary.record_summaries_every_n_global_steps", "summary.summary_statistic_v2", "tensorflow.contrib.summary.create_file_writer"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.summary_statistic_v2"], ["", "", "def", "create_summary_statistic_v2", "(", "name_data_dict", ",", "\n", "logdir", ",", "\n", "step", ",", "\n", "n_steps_per_record", "=", "1", ",", "\n", "types", "=", "[", "'mean'", ",", "'std'", ",", "'max'", ",", "'min'", ",", "'sparsity'", ",", "'histogram'", "]", ",", "\n", "name", "=", "'summary_statistic_v2'", ")", ":", "\n", "    ", "with", "tf", ".", "contrib", ".", "summary", ".", "create_file_writer", "(", "logdir", ")", ".", "as_default", "(", ")", ",", "tf", ".", "contrib", ".", "summary", ".", "record_summaries_every_n_global_steps", "(", "n_steps_per_record", ",", "global_step", "=", "step", ")", ":", "\n", "        ", "return", "summary_statistic_v2", "(", "name_data_dict", ",", "\n", "step", ",", "\n", "types", "=", "types", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.summary_image_v2": [[91, 100], ["tensorflow.name_scope", "name_data_dict.items", "tensorflow.contrib.summary.image"], "function", ["None"], ["", "", "def", "summary_image_v2", "(", "name_data_dict", ",", "\n", "step", ",", "\n", "max_images", "=", "3", ",", "\n", "name", "=", "'summary_image_v2'", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "        ", "summaries", "=", "{", "}", "\n", "for", "name", ",", "data", "in", "name_data_dict", ".", "items", "(", ")", ":", "\n", "            ", "summaries", "[", "name", "]", "=", "tf", ".", "contrib", ".", "summary", ".", "image", "(", "name", ",", "data", ",", "max_images", "=", "max_images", ",", "step", "=", "step", ")", "\n", "", "return", "summaries", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.create_summary_image_v2": [[102, 114], ["tensorflow.contrib.summary.create_file_writer().as_default", "tensorflow.contrib.summary.record_summaries_every_n_global_steps", "summary.summary_image_v2", "tensorflow.contrib.summary.create_file_writer"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.summary.summary_image_v2"], ["", "", "def", "create_summary_image_v2", "(", "name_data_dict", ",", "\n", "logdir", ",", "\n", "step", ",", "\n", "n_steps_per_record", "=", "1", ",", "\n", "max_images", "=", "3", ",", "\n", "name", "=", "'summary_image_v2'", ")", ":", "\n", "    ", "with", "tf", ".", "contrib", ".", "summary", ".", "create_file_writer", "(", "logdir", ")", ".", "as_default", "(", ")", ",", "tf", ".", "contrib", ".", "summary", ".", "record_summaries_every_n_global_steps", "(", "n_steps_per_record", ",", "global_step", "=", "step", ")", ":", "\n", "        ", "return", "summary_image_v2", "(", "name_data_dict", ",", "\n", "step", ",", "\n", "max_images", "=", "max_images", ",", "\n", "name", "=", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.Checkpoint.__init__": [[57, 66], ["tensorflow.train.Checkpoint", "tensorflow.train.CheckpointManager", "tensorflow.global_variables"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "directory", ",", "# for tf.train.CheckpointManager", "\n", "checkpoint_kwargs", "=", "None", ",", "# for tf.train.Checkpoint", "\n", "max_to_keep", "=", "5", ",", "\n", "keep_checkpoint_every_n_hours", "=", "None", ")", ":", "\n", "# default to save all variables", "\n", "        ", "checkpoint_kwargs", "=", "{", "v", ".", "name", ":", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "}", "if", "checkpoint_kwargs", "is", "None", "else", "checkpoint_kwargs", "\n", "self", ".", "checkpoint", "=", "tf", ".", "train", ".", "Checkpoint", "(", "**", "checkpoint_kwargs", ")", "\n", "self", ".", "manager", "=", "tf", ".", "train", ".", "CheckpointManager", "(", "self", ".", "checkpoint", ",", "directory", ",", "max_to_keep", ",", "keep_checkpoint_every_n_hours", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.Checkpoint.restore": [[67, 70], ["utils.Checkpoint.checkpoint.restore"], "methods", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.Checkpoint.restore"], ["", "def", "restore", "(", "self", ",", "save_path", "=", "None", ")", ":", "\n", "        ", "save_path", "=", "self", ".", "manager", ".", "latest_checkpoint", "if", "save_path", "is", "None", "else", "save_path", "\n", "return", "self", ".", "checkpoint", ".", "restore", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.Checkpoint.save": [[71, 77], ["isinstance", "utils.Checkpoint.checkpoint.save", "utils.Checkpoint.manager.save", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.Checkpoint.save", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.Checkpoint.save"], ["", "def", "save", "(", "self", ",", "file_prefix_or_checkpoint_number", "=", "None", ",", "session", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "file_prefix_or_checkpoint_number", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "checkpoint", ".", "save", "(", "file_prefix_or_checkpoint_number", ",", "session", "=", "session", ")", "\n", "", "else", ":", "\n", "            ", "with", "(", "tf", ".", "get_default_session", "(", ")", "if", "session", "is", "None", "else", "session", ")", ".", "as_default", "(", ")", ":", "\n", "                ", "return", "self", ".", "manager", ".", "save", "(", "checkpoint_number", "=", "file_prefix_or_checkpoint_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.Checkpoint.__getattr__": [[78, 85], ["hasattr", "getattr", "hasattr", "getattr", "utils.Checkpoint.__getattribute__"], "methods", ["None"], ["", "", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "checkpoint", ",", "attr", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "checkpoint", ",", "attr", ")", "\n", "", "elif", "hasattr", "(", "self", ".", "manager", ",", "attr", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "manager", ",", "attr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "__getattribute__", "(", "attr", ")", "# this will raise an exception", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.init": [[5, 32], ["utils.counter", "session.run", "session.run", "utils.Checkpoint", "Checkpoint.restore().initialize_or_restore", "tensorflow.get_default_session", "tensorflow.initializers.global_variables", "tensorflow.contrib.summary.summary_writer_initializer_op", "utils.Checkpoint.restore"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.counter", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.Checkpoint.restore"], ["def", "init", "(", "checkpoint_directory", ",", "\n", "checkpoint_kwargs", "=", "None", ",", "\n", "checkpoint_max_to_keep", "=", "5", ",", "\n", "checkpoint_keep_checkpoint_every_n_hours", "=", "None", ",", "\n", "counter_start", "=", "0", ",", "\n", "counter_scope", "=", "None", ",", "\n", "session", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run codes that are commonly used by LynnHo.\"\"\"", "\n", "session", "=", "tf", ".", "get_default_session", "(", ")", "if", "session", "is", "None", "else", "session", "\n", "\n", "# step counter", "\n", "step_cnt", ",", "update_cnt", "=", "counter", "(", "start", "=", "counter_start", ",", "scope", "=", "counter_scope", ")", "\n", "\n", "# initialize variables", "\n", "session", ".", "run", "(", "tf", ".", "initializers", ".", "global_variables", "(", ")", ")", "\n", "\n", "# initialize writers", "\n", "session", ".", "run", "(", "tf", ".", "contrib", ".", "summary", ".", "summary_writer_initializer_op", "(", ")", ")", "\n", "\n", "# checkpoint", "\n", "checkpoint", "=", "Checkpoint", "(", "checkpoint_directory", ",", "\n", "checkpoint_kwargs", "=", "checkpoint_kwargs", ",", "\n", "max_to_keep", "=", "checkpoint_max_to_keep", ",", "\n", "keep_checkpoint_every_n_hours", "=", "checkpoint_keep_checkpoint_every_n_hours", ")", "\n", "checkpoint", ".", "restore", "(", ")", ".", "initialize_or_restore", "(", "session", "=", "session", ")", "\n", "\n", "return", "checkpoint", ",", "step_cnt", ",", "update_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.session": [[34, 43], ["tensorflow.ConfigProto", "tensorflow.Session"], "function", ["None"], ["", "def", "session", "(", "graph", "=", "None", ",", "\n", "allow_soft_placement", "=", "True", ",", "\n", "log_device_placement", "=", "False", ",", "\n", "allow_growth", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return a Session with simple config.\"\"\"", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "allow_soft_placement", ",", "\n", "log_device_placement", "=", "log_device_placement", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "allow_growth", "\n", "return", "tf", ".", "Session", "(", "graph", "=", "graph", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.counter": [[87, 95], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.assign", "tensorflow.add", "tensorflow.constant_initializer"], "function", ["None"], ["", "", "", "def", "counter", "(", "start", "=", "0", ",", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'counter'", ")", ":", "\n", "        ", "counter", "=", "tf", ".", "get_variable", "(", "name", "=", "'counter'", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "start", ")", ",", "\n", "shape", "=", "(", ")", ",", "\n", "dtype", "=", "tf", ".", "int64", ")", "\n", "update_cnt", "=", "tf", ".", "assign", "(", "counter", ",", "tf", ".", "add", "(", "counter", ",", "1", ")", ")", "\n", "return", "counter", ",", "update_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.receptive_field": [[97, 136], ["tensorflow.Graph", "tf.Graph.as_default", "tensorflow.placeholder", "convnet_fn", "tensorflow.contrib.receptive_field.compute_receptive_field_from_graph_def", "results.append", "tf.Graph.as_graph_def", "tf.Graph.as_graph_def", "str"], "function", ["None"], ["", "", "def", "receptive_field", "(", "convnet_fn", ")", ":", "\n", "# TODO(Lynn): too ugly ...", "\n", "    ", "g", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "g", ".", "as_default", "(", ")", ":", "\n", "        ", "img", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "1", ",", "None", ",", "None", ",", "3", ")", ",", "name", "=", "'img'", ")", "\n", "convnet_fn", "(", "img", ")", "\n", "\n", "", "node_names", "=", "[", "node", ".", "name", "for", "node", "in", "g", ".", "as_graph_def", "(", ")", ".", "node", "\n", "if", "'img'", "!=", "node", ".", "name", "\n", "# for Conv", "\n", "if", "'weights'", "not", "in", "node", ".", "name", "\n", "if", "'biases'", "not", "in", "node", ".", "name", "\n", "if", "'dilation_rate'", "not", "in", "node", ".", "name", "\n", "# for BatchNorm", "\n", "if", "'beta'", "not", "in", "node", ".", "name", "\n", "if", "'gamma'", "not", "in", "node", ".", "name", "\n", "if", "'moving_mean'", "not", "in", "node", ".", "name", "\n", "if", "'moving_variance'", "not", "in", "node", ".", "name", "\n", "if", "'AssignMovingAvg'", "not", "in", "node", ".", "name", "]", "\n", "\n", "results", "=", "[", "]", "\n", "for", "node_name", "in", "node_names", ":", "\n", "        ", "try", ":", "\n", "            ", "rf_x", ",", "rf_y", ",", "eff_stride_x", ",", "eff_stride_y", ",", "eff_pad_x", ",", "eff_pad_y", "=", "tf", ".", "contrib", ".", "receptive_field", ".", "compute_receptive_field_from_graph_def", "(", "g", ".", "as_graph_def", "(", ")", ",", "'img'", ",", "node_name", ")", "\n", "results", ".", "append", "(", "(", "\n", "node_name", ",", "\n", "{", "'receptive_field_x'", ":", "rf_x", ",", "\n", "'receptive_field_y'", ":", "rf_y", ",", "\n", "'effective_stride_x'", ":", "eff_stride_x", ",", "\n", "'effective_stride_y'", ":", "eff_stride_y", ",", "\n", "'effective_padding_x'", ":", "eff_pad_x", ",", "\n", "'effective_padding_y'", ":", "eff_pad_y", "}", "\n", ")", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "if", "str", "(", "e", ")", "!=", "\"Output node was not found\"", ":", "\n", "                ", "raise", "e", "\n", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.count_parameters": [[138, 143], ["numpy.sum", "numpy.sum", "isinstance", "numpy.prod", "v.shape.as_list", "numpy.prod", "v.shape.as_list"], "function", ["None"], ["", "def", "count_parameters", "(", "variables", ")", ":", "\n", "    ", "variables", "=", "variables", "if", "isinstance", "(", "variables", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "variables", "]", "\n", "n_params", "=", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "shape", ".", "as_list", "(", ")", ")", "for", "v", "in", "variables", "]", ")", "\n", "n_bytes", "=", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "shape", ".", "as_list", "(", ")", ")", "*", "v", ".", "dtype", ".", "size", "for", "v", "in", "variables", "]", ")", "\n", "return", "n_params", ",", "n_bytes", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.utils.utils.print_tensor": [[145, 162], ["enumerate", "isinstance", "str", "type", "print", "print", "print", "Exception"], "function", ["None"], ["", "def", "print_tensor", "(", "tensors", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "tensors", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "tensors", "=", "[", "tensors", "]", "\n", "\n", "", "for", "i", ",", "tensor", "in", "enumerate", "(", "tensors", ")", ":", "\n", "        ", "ctype", "=", "str", "(", "type", "(", "tensor", ")", ")", "\n", "if", "'Tensor'", "in", "ctype", ":", "\n", "            ", "print", "(", "'%d: %s(\"%s\", shape=%s, dtype=%s, device=%s)'", "%", "\n", "(", "i", ",", "'Tensor'", ",", "tensor", ".", "name", ",", "tensor", ".", "shape", ",", "tensor", ".", "dtype", ".", "name", ",", "tensor", ".", "device", ")", ")", "\n", "", "elif", "'Variable'", "in", "ctype", ":", "\n", "            ", "print", "(", "'%d: %s(\"%s\", shape=%s, dtype=%s, device=%s)'", "%", "\n", "(", "i", ",", "'Variable'", ",", "tensor", ".", "name", ",", "tensor", ".", "shape", ",", "tensor", ".", "dtype", ".", "name", ",", "tensor", ".", "device", ")", ")", "\n", "", "elif", "'Operation'", "in", "ctype", ":", "\n", "            ", "print", "(", "'%d: %s(\"%s\", device=%s)'", "%", "\n", "(", "i", ",", "'Operation'", ",", "tensor", ".", "name", ",", "tensor", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not a Tensor, Variable or Operation!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.distribute.distribute.get_available_gpus": [[6, 9], ["tensorflow.python.client.device_lib.list_local_devices"], "function", ["None"], ["def", "get_available_gpus", "(", ")", ":", "\n", "    ", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.distribute.distribute.split_nest": [[13, 25], ["tensorflow.nest.flatten", "tensorflow.split", "tensorflow.nest.pack_sequence_as", "zip"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.pylib.path.split"], ["def", "split_nest", "(", "nest", ",", "num_or_size_splits", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Split nested structure.\n\n    Examples\n    --------\n    >>> split_nest({'a': shape(10, 20), 'b': shape(4, 15)}, 2, axis=0)\n    >>> [{'a': shape(5, 20), 'b': shape(2, 15)}, {'a': shape(5, 20), 'b': shape(2, 15)}]\n\n    \"\"\"", "\n", "flatten", "=", "tf", ".", "nest", ".", "flatten", "(", "nest", ")", "\n", "split_flatten", "=", "[", "tf", ".", "split", "(", "x", ",", "num_or_size_splits", ",", "axis", "=", "axis", ")", "for", "x", "in", "flatten", "]", "\n", "return", "[", "tf", ".", "nest", ".", "pack_sequence_as", "(", "nest", ",", "x", ")", "for", "x", "in", "zip", "(", "*", "split_flatten", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.distribute.distribute.parameter_server_strategy_run": [[27, 39], ["zip", "len", "len", "len", "len", "tensorflow.device", "split_returns.append", "isinstance", "fn"], "function", ["None"], ["", "def", "parameter_server_strategy_run", "(", "devices", ",", "fn", ",", "split_args", ",", "split_kwargs", "=", "None", ")", ":", "\n", "    ", "split_kwargs", "=", "[", "{", "}", "]", "*", "len", "(", "devices", ")", "if", "split_kwargs", "is", "None", "else", "split_kwargs", "\n", "\n", "assert", "len", "(", "devices", ")", "==", "len", "(", "split_args", ")", "==", "len", "(", "split_kwargs", ")", "\n", "\n", "split_returns", "=", "[", "]", "\n", "for", "device", ",", "args", ",", "kwargs", "in", "zip", "(", "devices", ",", "split_args", ",", "split_kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "device", ")", ":", "\n", "            ", "args", "=", "args", "if", "isinstance", "(", "args", ",", "(", "list", ",", "tuple", ")", ")", "else", "(", "args", ",", ")", "\n", "split_returns", ".", "append", "(", "fn", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n", "", "", "return", "split_returns", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.distribute.distribute.average_gradients": [[43, 84], ["zip", "tensorflow.concat", "tensorflow.reduce_mean", "average_grads.append", "tensorflow.expand_dims", "grads.append"], "function", ["None"], ["def", "average_gradients", "(", "tower_grads", ")", ":", "\n", "    ", "\"\"\"Calculate the average gradient for each shared variable across all towers.\n\n    Note that this function provides a synchronization point across all towers.\n\n    Parameters\n    ----------\n    tower_grads:\n        List of lists of (gradient, variable) tuples. The outer list\n        is over individual gradients. The inner list is over the gradient\n        calculation for each tower.\n\n    Returns\n    -------\n       List of pairs of (gradient, variable) where the gradient has been averaged\n       across all towers.\n\n    \"\"\"", "\n", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "        ", "grads", "=", "[", "]", "\n", "for", "g", ",", "_", "in", "grad_and_vars", ":", "\n", "# Add 0 dimension to the gradients to represent the tower.", "\n", "            ", "expanded_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "0", ")", "\n", "\n", "# Append on a 'tower' dimension which we will average over below.", "\n", "grads", ".", "append", "(", "expanded_g", ")", "\n", "\n", "# Average over the 'tower' dimension.", "\n", "", "grad", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "grads", ")", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ",", "0", ")", "\n", "\n", "# Keep in mind that the Variables are redundant because they are shared", "\n", "# across towers. So .. we will just return the first tower's pointer to", "\n", "# the Variable.", "\n", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "grad_and_var", "=", "(", "grad", ",", "v", ")", "\n", "average_grads", ".", "append", "(", "grad_and_var", ")", "\n", "", "return", "average_grads", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.metrics.resettable_metric": [[4, 9], ["tensorflow.variable_scope", "metric_fn", "tensorflow.variables_initializer", "tensorflow.local_variables"], "function", ["None"], ["def", "resettable_metric", "(", "metric_fn", ",", "metric_params", ",", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'resettable_metric'", ")", "as", "sc", ":", "\n", "        ", "metric_returns", "=", "metric_fn", "(", "**", "metric_params", ")", "\n", "reset_op", "=", "tf", ".", "variables_initializer", "(", "tf", ".", "local_variables", "(", "sc", ".", "name", ")", ")", "\n", "", "return", "metric_returns", "+", "(", "reset_op", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.metrics.make_resettable": [[11, 18], ["tensorflow.variable_scope", "metric_fn", "tensorflow.variables_initializer", "tensorflow.local_variables"], "function", ["None"], ["", "def", "make_resettable", "(", "metric_fn", ",", "scope", "=", "None", ")", ":", "\n", "    ", "def", "resettable_metric_fn", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'resettable_metric'", ")", "as", "sc", ":", "\n", "            ", "metric_returns", "=", "metric_fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "reset_op", "=", "tf", ".", "variables_initializer", "(", "tf", ".", "local_variables", "(", "sc", ".", "name", ")", ")", "\n", "", "return", "metric_returns", "+", "(", "reset_op", ",", ")", "\n", "", "return", "resettable_metric_fn", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.existing_modules": [[10, 13], ["None"], "methods", ["None"], ["\n", "    ", "def", "call", "(", "self", ",", "\n", "x", ",", "\n", "dim_10", "=", "4", ",", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.__init__": [[14, 24], ["type", "type", "uuid.uuid4"], "methods", ["None"], ["fc_dim", "=", "1024", ",", "\n", "n_downsamplings", "=", "6", ",", "\n", "weight_norm", "=", "'none'", ",", "\n", "feature_norm", "=", "'none'", ",", "\n", "act", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "MAX_DIM", "=", "512", "\n", "nd", "=", "lambda", "size", ":", "min", "(", "int", "(", "2", "**", "(", "10", "-", "np", ".", "log2", "(", "size", ")", ")", "*", "dim_10", ")", ",", "MAX_DIM", ")", "\n", "\n", "w_norm", "=", "tl", ".", "get_weight_norm", "(", "weight_norm", ",", "training", ")", "\n", "conv", "=", "functools", ".", "partial", "(", "tl", ".", "conv2d", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.__call__": [[25, 47], ["tensorflow.variable_scope", "module.Module.call", "tensorflow.global_variables", "tensorflow.trainable_variables", "tensorflow.losses.get_regularization_losses", "tensorflow.losses.get_regularization_loss", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.call", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.trainable_variables"], ["fc", "=", "functools", ".", "partial", "(", "tl", ".", "fc", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n", "\n", "f_norm", "=", "tl", ".", "get_feature_norm", "(", "feature_norm", ",", "training", ",", "updates_collections", "=", "None", ")", "\n", "conv_norm_act", "=", "functools", ".", "partial", "(", "conv", ",", "normalizer_fn", "=", "f_norm", ",", "activation_fn", "=", "act", ")", "\n", "\n", "h", "=", "x", "\n", "h", "=", "act", "(", "conv", "(", "h", ",", "nd", "(", "h", ".", "shape", "[", "1", "]", ".", "value", ")", ",", "7", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "n_downsamplings", ")", ":", "\n", "# h = conv_norm_act(h, nd(h.shape[1].value // 2), 4, 2)", "\n", "            ", "h", "=", "conv_norm_act", "(", "h", ",", "nd", "(", "h", ".", "shape", "[", "1", "]", ".", "value", ")", ",", "3", ",", "1", ")", "\n", "h", "=", "conv_norm_act", "(", "h", ",", "nd", "(", "h", ".", "shape", "[", "1", "]", ".", "value", "//", "2", ")", ",", "3", ",", "2", ")", "\n", "", "h", "=", "conv_norm_act", "(", "h", ",", "nd", "(", "h", ".", "shape", "[", "1", "]", ".", "value", ")", ",", "3", ",", "1", ")", "\n", "h", "=", "slim", ".", "flatten", "(", "h", ")", "\n", "h", "=", "act", "(", "fc", "(", "h", ",", "min", "(", "fc_dim", ",", "MAX_DIM", ")", ")", ")", "\n", "logit", "=", "fc", "(", "h", ",", "1", ")", "\n", "\n", "return", "logit", "\n", "\n", "\n", "", "", "class", "G", "(", "tl", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "call", "(", "self", ",", "\n", "zs", ",", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.call": [[48, 50], ["None"], "methods", ["None"], ["eps", ",", "\n", "dim_10", "=", "4", ",", "\n", "n_channels", "=", "3", ",", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.clone_from_vars": [[51, 61], ["zip", "clone_ops.append", "trg_var.assign"], "methods", ["None"], ["weight_norm", "=", "'none'", ",", "\n", "feature_norm", "=", "'none'", ",", "\n", "act", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "\n", "use_gram_schmidt", "=", "True", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "MAX_DIM", "=", "512", "\n", "nd", "=", "lambda", "size", ":", "min", "(", "int", "(", "2", "**", "(", "10", "-", "np", ".", "log2", "(", "size", ")", ")", "*", "dim_10", ")", ",", "MAX_DIM", ")", "\n", "\n", "w_norm", "=", "tl", ".", "get_weight_norm", "(", "weight_norm", ",", "training", ")", "\n", "transposed_w_norm", "=", "tl", ".", "get_weight_norm", "(", "weight_norm", ",", "training", ",", "transposed", "=", "True", ")", "\n", "fc", "=", "functools", ".", "partial", "(", "tl", ".", "fc", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.clone_from_module": [[62, 72], ["module.Module.clone_from_vars", "type", "type"], "methods", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.clone_from_vars"], ["conv", "=", "functools", ".", "partial", "(", "tl", ".", "conv2d", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n", "dconv", "=", "functools", ".", "partial", "(", "tl", ".", "dconv2d", ",", "weights_initializer", "=", "tl", ".", "get_initializer", "(", "act", ")", ",", "weights_normalizer_fn", "=", "transposed_w_norm", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1.0", ")", ")", "\n", "f_norm", "=", "tl", ".", "get_feature_norm", "(", "feature_norm", ",", "training", ",", "updates_collections", "=", "None", ")", "\n", "f_norm", "=", "(", "lambda", "x", ":", "x", ")", "if", "f_norm", "is", "None", "else", "f_norm", "\n", "\n", "def", "orthogonal_regularizer", "(", "U", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'orthogonal_regularizer'", ")", ":", "\n", "                ", "U", "=", "tf", ".", "reshape", "(", "U", ",", "[", "-", "1", ",", "U", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "orth", "=", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "U", ")", ",", "U", ")", "\n", "tf", ".", "add_to_collections", "(", "[", "'orth'", "]", ",", "orth", ")", "\n", "return", "0.5", "*", "tf", ".", "reduce_sum", "(", "(", "orth", "-", "tf", ".", "eye", "(", "U", ".", "shape", "[", "-", "1", "]", ".", "value", ")", ")", "**", "2", ")", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.scope": [[73, 76], ["None"], "methods", ["None"], ["\n", "", "", "h", "=", "fc", "(", "eps", ",", "4", "*", "4", "*", "nd", "(", "4", ")", ")", "\n", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "-", "1", ",", "4", ",", "4", ",", "nd", "(", "4", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.variables": [[77, 80], ["None"], "methods", ["None"], ["for", "i", ",", "z", "in", "enumerate", "(", "zs", ")", ":", "\n", "            ", "height", "=", "width", "=", "4", "*", "2", "**", "i", "\n", "\n", "U", "=", "tf", ".", "get_variable", "(", "'U_%d'", "%", "i", ",", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.trainable_variables": [[81, 84], ["None"], "methods", ["None"], ["shape", "=", "[", "height", ",", "width", ",", "nd", "(", "height", ")", ",", "z", ".", "shape", "[", "-", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "orthogonal", "(", ")", ",", "\n", "regularizer", "=", "orthogonal_regularizer", ",", "\n", "trainable", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.nontrainable_variables": [[85, 88], ["None"], "methods", ["None"], ["if", "use_gram_schmidt", ":", "\n", "                ", "U", "=", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "U", ",", "[", "-", "1", ",", "U", ".", "shape", "[", "-", "1", "]", "]", ")", ")", "\n", "U", "=", "tl", ".", "gram_schmidt", "(", "U", ")", "\n", "U", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "U", ")", ",", "[", "height", ",", "width", ",", "nd", "(", "height", ")", ",", "z", ".", "shape", "[", "-", "1", "]", "]", ")", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.reg_losses": [[89, 92], ["None"], "methods", ["None"], ["\n", "", "L", "=", "tf", ".", "get_variable", "(", "'L_%d'", "%", "i", ",", "\n", "shape", "=", "[", "z", ".", "shape", "[", "-", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "constant", "(", "[", "3", "*", "i", "for", "i", "in", "range", "(", "z", ".", "shape", "[", "-", "1", "]", ",", "0", ",", "-", "1", ")", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.module.Module.reg_loss": [[93, 96], ["None"], "methods", ["None"], ["trainable", "=", "True", ")", "\n", "\n", "mu", "=", "tf", ".", "get_variable", "(", "'mu_%d'", "%", "i", ",", "\n", "shape", "=", "[", "height", ",", "width", ",", "nd", "(", "height", ")", "]", ",", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.learning_rate.LinearDecayLR.__init__": [[19, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "initial_learning_rate", ",", "steps", ",", "step_start_decay", ")", ":", "\n", "        ", "self", ".", "_initial_learning_rate", "=", "initial_learning_rate", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_step_start_decay", "=", "step_start_decay", "\n", "self", ".", "current_learning_rate", "=", "initial_learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.learning_rate.LinearDecayLR.__call__": [[25, 31], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", ">=", "self", ".", "_step_start_decay", ":", "\n", "            ", "self", ".", "current_learning_rate", "=", "self", ".", "_initial_learning_rate", "*", "(", "1", "-", "1", "/", "(", "self", ".", "_steps", "-", "self", ".", "_step_start_decay", "+", "1", ")", "*", "(", "step", "-", "self", ".", "_step_start_decay", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_learning_rate", "=", "self", ".", "_initial_learning_rate", "\n", "", "return", "self", ".", "current_learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.learning_rate.StepDecayLR.__init__": [[35, 41], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.learning_rate.StepDecayLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "initial_learning_rate", ",", "step_size", ",", "decay_rate", ")", ":", "\n", "        ", "super", "(", "StepDecayLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_initial_learning_rate", "=", "initial_learning_rate", "\n", "self", ".", "_step_size", "=", "step_size", "\n", "self", ".", "_decay_rate", "=", "decay_rate", "\n", "self", ".", "current_learning_rate", "=", "initial_learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.learning_rate.StepDecayLR.__call__": [[42, 45], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "current_learning_rate", "=", "self", ".", "_initial_learning_rate", "*", "self", ".", "_decay_rate", "**", "(", "step", "//", "self", ".", "_step_size", ")", "\n", "return", "self", ".", "current_learning_rate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.learning_rate.lr_mult": [[4, 11], ["learning_rate.lr_mult.fn"], "function", ["None"], ["def", "lr_mult", "(", "x", ",", "alpha", ")", ":", "\n", "    ", "@", "tf", ".", "custom_gradient", "\n", "def", "fn", "(", "x", ")", ":", "\n", "        ", "def", "grad", "(", "dy", ")", ":", "\n", "            ", "return", "alpha", "*", "dy", "\n", "", "return", "x", ",", "grad", "\n", "", "return", "fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.fully_connected": [[10, 63], ["tensorflow.glorot_uniform_initializer", "tensorflow.zeros_initializer", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.matmul", "weights_normalizer_fn", "len", "tensorflow.reshape", "normalizer_fn", "activation_fn", "len", "tensorflow.reshape", "tf.nn.bias_add.set_shape", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["def", "fully_connected", "(", "inputs", ",", "\n", "num_outputs", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "normalizer_params", "=", "None", ",", "\n", "weights_normalizer_fn", "=", "None", ",", "\n", "weights_normalizer_params", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "biases_regularizer", "=", "None", ",", "\n", "reuse", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'fully_connected'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "num_inputs", "=", "inputs", ".", "shape", "[", "-", "1", "]", "\n", "outputs_shape_static", "=", "inputs", ".", "shape", "[", ":", "-", "1", "]", "+", "[", "num_outputs", "]", "\n", "outputs_shape", "=", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "inputs", ")", "[", ":", "-", "1", "]", ",", "[", "num_outputs", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "weights_shape", "=", "[", "num_inputs", ",", "num_outputs", "]", "\n", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "\n", "shape", "=", "weights_shape", ",", "\n", "initializer", "=", "weights_initializer", ",", "\n", "regularizer", "=", "weights_regularizer", ",", "\n", "trainable", "=", "trainable", ")", "\n", "if", "weights_normalizer_fn", "is", "not", "None", ":", "\n", "            ", "weights_normalizer_params", "=", "weights_normalizer_params", "or", "{", "}", "\n", "weights", "=", "weights_normalizer_fn", "(", "weights", ",", "**", "weights_normalizer_params", ")", "\n", "\n", "", "if", "len", "(", "outputs_shape_static", ")", ">", "2", ":", "\n", "            ", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "num_inputs", "]", ")", "\n", "", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "weights", ")", "\n", "\n", "if", "normalizer_fn", "is", "not", "None", ":", "\n", "            ", "normalizer_params", "=", "normalizer_params", "or", "{", "}", "\n", "outputs", "=", "normalizer_fn", "(", "outputs", ",", "**", "normalizer_params", ")", "\n", "", "else", ":", "\n", "            ", "if", "biases_initializer", "is", "not", "None", ":", "\n", "                ", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "\n", "shape", "=", "[", "num_outputs", "]", ",", "\n", "initializer", "=", "biases_initializer", ",", "\n", "regularizer", "=", "biases_regularizer", ",", "\n", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "\n", "", "if", "len", "(", "outputs_shape_static", ")", ">", "2", ":", "\n", "            ", "outputs", "=", "tf", ".", "reshape", "(", "outputs", ",", "outputs_shape", ")", "\n", "outputs", ".", "set_shape", "(", "outputs_shape_static", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.convolution": [[67, 130], ["tensorflow.glorot_uniform_initializer", "tensorflow.zeros_initializer", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.convolution", "isinstance", "isinstance", "isinstance", "data_format.endswith", "data_format.startswith", "weights_normalizer_fn", "normalizer_fn", "activation_fn", "ValueError", "tensorflow.get_variable", "tensorflow.nn.bias_add", "list"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.convolution"], ["def", "convolution", "(", "inputs", ",", "\n", "num_outputs", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "None", ",", "\n", "rate", "=", "1", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "normalizer_params", "=", "None", ",", "\n", "weights_normalizer_fn", "=", "None", ",", "\n", "weights_normalizer_params", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "biases_regularizer", "=", "None", ",", "\n", "reuse", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'convolution'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "conv_dims", "=", "inputs", ".", "shape", ".", "rank", "-", "2", "\n", "kernel_size", "=", "kernel_size", "if", "isinstance", "(", "kernel_size", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "kernel_size", "]", "*", "conv_dims", "\n", "stride", "=", "stride", "if", "isinstance", "(", "stride", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "stride", "]", "*", "conv_dims", "\n", "rate", "=", "rate", "if", "isinstance", "(", "rate", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "rate", "]", "*", "conv_dims", "\n", "if", "data_format", "is", "None", "or", "data_format", ".", "endswith", "(", "'C'", ")", ":", "\n", "            ", "num_inputs", "=", "inputs", ".", "shape", "[", "-", "1", "]", "\n", "", "elif", "data_format", ".", "startswith", "(", "'NC'", ")", ":", "\n", "            ", "num_inputs", "=", "inputs", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid data_format'", ")", "\n", "\n", "", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "\n", "shape", "=", "list", "(", "kernel_size", ")", "+", "[", "num_inputs", ",", "num_outputs", "]", ",", "\n", "initializer", "=", "weights_initializer", ",", "\n", "regularizer", "=", "weights_regularizer", ",", "\n", "trainable", "=", "trainable", ")", "\n", "if", "weights_normalizer_fn", "is", "not", "None", ":", "\n", "            ", "weights_normalizer_params", "=", "weights_normalizer_params", "or", "{", "}", "\n", "weights", "=", "weights_normalizer_fn", "(", "weights", ",", "**", "weights_normalizer_params", ")", "\n", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "convolution", "(", "input", "=", "inputs", ",", "\n", "filter", "=", "weights", ",", "\n", "dilation_rate", "=", "rate", ",", "\n", "strides", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "if", "normalizer_fn", "is", "not", "None", ":", "\n", "            ", "normalizer_params", "=", "normalizer_params", "or", "{", "}", "\n", "outputs", "=", "normalizer_fn", "(", "outputs", ",", "**", "normalizer_params", ")", "\n", "", "else", ":", "\n", "            ", "if", "biases_initializer", "is", "not", "None", ":", "\n", "                ", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "\n", "shape", "=", "[", "num_outputs", "]", ",", "\n", "initializer", "=", "biases_initializer", ",", "\n", "regularizer", "=", "biases_regularizer", ",", "\n", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ",", "data_format", "=", "data_format", ")", "\n", "\n", "", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.transposed_convolution2d": [[135, 212], ["tensorflow.glorot_uniform_initializer", "tensorflow.zeros_initializer", "tensorflow.variable_scope", "tensorflow.get_variable", "layers.transposed_convolution2d.outputs_size"], "function", ["None"], ["def", "transposed_convolution2d", "(", "inputs", ",", "\n", "num_outputs", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NHWC'", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "normalizer_params", "=", "None", ",", "\n", "weights_normalizer_fn", "=", "None", ",", "\n", "weights_normalizer_params", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "biases_regularizer", "=", "None", ",", "\n", "reuse", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'transposed_convolution2d'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "def", "outputs_size", "(", "inputs_size", ",", "kernel", ",", "stride", ")", ":", "\n", "            ", "if", "inputs_size", "is", "not", "None", ":", "\n", "                ", "return", "inputs_size", "*", "stride", "+", "(", "max", "(", "kernel", "-", "stride", ",", "0", ")", "if", "padding", "==", "'VALID'", "else", "0", ")", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "kernel_h", ",", "kernel_w", "=", "kernel_size", "if", "isinstance", "(", "kernel_size", ",", "(", "list", ",", "tuple", ")", ")", "else", "(", "kernel_size", ",", "kernel_size", ")", "\n", "stride_h", ",", "stride_w", "=", "stride", "if", "isinstance", "(", "stride", ",", "(", "list", ",", "tuple", ")", ")", "else", "(", "stride", ",", "stride", ")", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "            ", "h_axis", ",", "w_axis", ",", "c_axis", "=", "1", ",", "2", ",", "3", "\n", "", "else", ":", "\n", "            ", "c_axis", ",", "h_axis", ",", "w_axis", "=", "1", ",", "2", ",", "3", "\n", "\n", "", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "\n", "shape", "=", "[", "kernel_h", ",", "kernel_w", ",", "num_outputs", ",", "inputs", ".", "shape", "[", "c_axis", "]", "]", ",", "\n", "initializer", "=", "weights_initializer", ",", "\n", "regularizer", "=", "weights_regularizer", ",", "\n", "trainable", "=", "trainable", ")", "\n", "if", "weights_normalizer_fn", "is", "not", "None", ":", "\n", "            ", "weights_normalizer_params", "=", "weights_normalizer_params", "or", "{", "}", "\n", "weights", "=", "weights_normalizer_fn", "(", "weights", ",", "**", "weights_normalizer_params", ")", "\n", "\n", "", "outputs_h", "=", "outputs_size", "(", "tf", ".", "shape", "(", "inputs", ")", "[", "h_axis", "]", ",", "kernel_h", ",", "stride_h", ")", "\n", "outputs_h_static", "=", "outputs_size", "(", "inputs", ".", "shape", "[", "h_axis", "]", ",", "kernel_h", ",", "stride_h", ")", "\n", "outputs_w", "=", "outputs_size", "(", "tf", ".", "shape", "(", "inputs", ")", "[", "w_axis", "]", ",", "kernel_w", ",", "stride_w", ")", "\n", "outputs_w_static", "=", "outputs_size", "(", "inputs", ".", "shape", "[", "w_axis", "]", ",", "kernel_w", ",", "stride_w", ")", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "            ", "outputs_shape", "=", "[", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "outputs_h", ",", "outputs_w", ",", "num_outputs", "]", "\n", "outputs_shape_static", "=", "[", "inputs", ".", "shape", "[", "0", "]", ",", "outputs_h_static", ",", "outputs_w_static", ",", "num_outputs", "]", "\n", "strides", "=", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "outputs_shape", "=", "[", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "num_outputs", ",", "outputs_h", ",", "outputs_w", "]", "\n", "outputs_shape_static", "=", "[", "inputs", ".", "shape", "[", "0", "]", ",", "num_outputs", ",", "outputs_h_static", ",", "outputs_w_static", "]", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride_h", ",", "stride_w", "]", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "\n", "weights", ",", "\n", "outputs_shape", ",", "\n", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ")", "\n", "outputs", ".", "set_shape", "(", "outputs_shape_static", ")", "\n", "\n", "if", "normalizer_fn", "is", "not", "None", ":", "\n", "            ", "normalizer_params", "=", "normalizer_params", "or", "{", "}", "\n", "outputs", "=", "normalizer_fn", "(", "outputs", ",", "**", "normalizer_params", ")", "\n", "", "else", ":", "\n", "            ", "if", "biases_initializer", "is", "not", "None", ":", "\n", "                ", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "\n", "shape", "=", "[", "num_outputs", "]", ",", "\n", "initializer", "=", "biases_initializer", ",", "\n", "regularizer", "=", "biases_regularizer", ",", "\n", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ",", "data_format", "=", "data_format", ")", "\n", "\n", "", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.adaptive_scaling": [[220, 230], ["None"], "function", ["None"], ["def", "adaptive_scaling", "(", "x", ",", "gamma", "=", "None", ",", "beta", "=", "None", ")", ":", "\n", "# x: (N, H, W, C), gamma: (N, C), beta: (N, C)", "\n", "\n", "    ", "if", "gamma", "is", "not", "None", ":", "\n", "        ", "x", "*=", "gamma", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "", "if", "beta", "is", "not", "None", ":", "\n", "        ", "x", "+=", "beta", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.adaptive_instance_normalization": [[232, 241], ["tensorflow.nn.moments", "tensorflow.sqrt", "layers.adaptive_scaling"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.adaptive_scaling"], ["", "def", "adaptive_instance_normalization", "(", "x", ",", "gamma", "=", "None", ",", "beta", "=", "None", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "# modified from https://github.com/taki0112/MUNIT-Tensorflow/blob/master/ops.py", "\n", "# x: (N, H, W, C), gamma: (N, C), beta: (N, C)", "\n", "\n", "    ", "c_mean", ",", "c_var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "c_std", "=", "tf", ".", "sqrt", "(", "c_var", "+", "epsilon", ")", "\n", "x", "=", "(", "x", "-", "c_mean", ")", "/", "c_std", "\n", "\n", "return", "adaptive_scaling", "(", "x", ",", "gamma", ",", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.spectral_normalization": [[247, 284], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.contrib.framework.smart_cond", "tensorflow.transpose", "tensorflow.get_variable", "range", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.zeros_initializer", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.matmul", "tensorflow.control_dependencies", "tensorflow.identity", "tensorflow.transpose", "tensorflow.random_normal_initializer", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.matmul", "tf.get_variable.assign", "tf.get_variable.assign"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["", "def", "spectral_normalization", "(", "weights", ",", "\n", "num_iterations", "=", "1", ",", "\n", "epsilon", "=", "1e-12", ",", "\n", "transposed", "=", "False", ",", "# transposed=True for 2d transposed convolution", "\n", "is_training", "=", "True", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'spectral_normalization'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "sigma", "=", "tf", ".", "get_variable", "(", "'sigma'", ",", "\n", "shape", "=", "[", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "\n", "def", "sigma_training", "(", ")", ":", "\n", "            ", "if", "transposed", ":", "\n", "                ", "w_t", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "weights", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", ",", "[", "-", "1", ",", "weights", ".", "shape", "[", "-", "2", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "w_t", "=", "tf", ".", "reshape", "(", "weights", ",", "[", "-", "1", ",", "weights", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "", "w", "=", "tf", ".", "transpose", "(", "w_t", ")", "\n", "u", "=", "tf", ".", "get_variable", "(", "\"u\"", ",", "\n", "shape", "=", "[", "w", ".", "shape", "[", "0", "]", ",", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "u_", "=", "u", "\n", "for", "_", "in", "range", "(", "num_iterations", ")", ":", "\n", "                ", "v_", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "matmul", "(", "w_t", ",", "u_", ")", ",", "epsilon", "=", "epsilon", ")", "\n", "u_", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "matmul", "(", "w", ",", "v_", ")", ",", "epsilon", "=", "epsilon", ")", "\n", "", "u_", "=", "tf", ".", "stop_gradient", "(", "u_", ")", "\n", "v_", "=", "tf", ".", "stop_gradient", "(", "v_", ")", "\n", "sigma_", "=", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "u_", ")", ",", "tf", ".", "matmul", "(", "w", ",", "v_", ")", ")", "[", "0", ",", "0", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "u", ".", "assign", "(", "u_", ")", ",", "sigma", ".", "assign", "(", "sigma_", ")", "]", ")", ":", "\n", "                ", "return", "tf", ".", "identity", "(", "sigma_", ")", "\n", "\n", "", "", "sigma_", "=", "tf", ".", "contrib", ".", "framework", ".", "smart_cond", "(", "is_training", ",", "sigma_training", ",", "lambda", ":", "sigma", ")", "\n", "weights_sn", "=", "weights", "/", "sigma_", "\n", "\n", "return", "weights_sn", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.weight_normalization": [[288, 313], ["tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.sqrt", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.ones_initializer", "range"], "function", ["None"], ["def", "weight_normalization", "(", "weights", ",", "\n", "scale", "=", "True", ",", "\n", "epsilon", "=", "1e-8", ",", "\n", "transposed", "=", "False", ",", "# transposed=True for 2d transposed convolution", "\n", "reuse", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'weight_normalization'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "if", "transposed", ":", "\n", "            ", "weights", "=", "tf", ".", "transpose", "(", "weights", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", "\n", "", "weights", "=", "weights", "/", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "weights", "**", "2", ",", "axis", "=", "[", "i", "for", "i", "in", "range", "(", "weights", ".", "shape", ".", "rank", "-", "1", ")", "]", ",", "keepdims", "=", "True", ")", "+", "epsilon", ")", "\n", "\n", "if", "scale", ":", "\n", "            ", "scale", "=", "tf", ".", "get_variable", "(", "'scale'", ",", "# (CO,)", "\n", "shape", "=", "[", "weights", ".", "shape", "[", "-", "1", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "trainable", "=", "trainable", ")", "\n", "weights", "*=", "scale", "\n", "\n", "", "if", "transposed", ":", "\n", "            ", "weights", "=", "tf", ".", "transpose", "(", "weights", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers_deprecated.weight_modulation": [[10, 47], ["tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.sqrt", "tensorflow.ones_initializer", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["def", "weight_modulation", "(", "weights", ",", "\n", "gamma", "=", "None", ",", "\n", "demodulation", "=", "True", ",", "\n", "epsilon", "=", "1e-8", ",", "\n", "transposed", "=", "False", ",", "# transposed=True for 2d transposed convolution", "\n", "reuse", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "scope", "=", "None", ")", ":", "\n", "# only for 2d (transposed) convolution", "\n", "# gamma: None or (N, CI)", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'weight_modulation'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "if", "transposed", ":", "\n", "            ", "weights", "=", "tf", ".", "transpose", "(", "weights", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", "\n", "", "if", "gamma", "is", "None", ":", "# learned gamma", "\n", "            ", "gamma", "=", "tf", ".", "get_variable", "(", "'gamma'", ",", "# (N=1, 1, 1, CI, 1)", "\n", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "weights", ".", "shape", "[", "2", "]", ",", "1", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "trainable", "=", "trainable", ")", "\n", "", "else", ":", "# data dependent gamma", "\n", "            ", "gamma", "=", "gamma", "[", ":", ",", "None", ",", "None", ",", ":", ",", "None", "]", "# (N, 1, 1, CI, 1)", "\n", "\n", "# modulation", "\n", "", "weights", "=", "weights", "[", "None", ",", ":", ",", ":", ",", ":", ",", ":", "]", "*", "gamma", "# (N, K, K, CI, CO)", "\n", "\n", "# demodulation", "\n", "if", "demodulation", ":", "\n", "            ", "weights", "=", "weights", "/", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "weights", "**", "2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", "+", "epsilon", ")", "\n", "\n", "", "weights", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "weights", ",", "[", "1", ",", "2", ",", "3", ",", "0", ",", "4", "]", ")", ",", "[", "weights", ".", "shape", "[", "1", "]", ",", "weights", ".", "shape", "[", "2", "]", ",", "weights", ".", "shape", "[", "3", "]", ",", "-", "1", "]", ")", "# (K, K, CI, N*CO)", "\n", "\n", "if", "transposed", ":", "\n", "            ", "weights", "=", "tf", ".", "transpose", "(", "weights", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers_deprecated.modulated_convolution2d": [[55, 127], ["tensorflow.glorot_uniform_initializer", "tensorflow.zeros_initializer", "tensorflow.variable_scope", "tensorflow.get_variable", "layers_deprecated.weight_modulation", "tensorflow.nn.convolution", "isinstance", "isinstance", "isinstance", "data_format.endswith", "data_format.startswith", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "normalizer_fn", "activation_fn", "ValueError", "tensorflow.get_variable", "tensorflow.nn.bias_add", "list"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers_deprecated.weight_modulation", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.layers.convolution", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["def", "modulated_convolution2d", "(", "inputs", ",", "\n", "num_outputs", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "\n", "gamma", "=", "None", ",", "\n", "demodulation", "=", "True", ",", "\n", "epsilon", "=", "1e-8", ",", "\n", "\n", "data_format", "=", "None", ",", "\n", "rate", "=", "1", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "normalizer_params", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "biases_regularizer", "=", "None", ",", "\n", "reuse", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "scope", "=", "None", ")", ":", "\n", "# only for 2d convolution", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'modulated_convolution2d'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "conv_dims", "=", "inputs", ".", "shape", ".", "rank", "-", "2", "\n", "kernel_size", "=", "kernel_size", "if", "isinstance", "(", "kernel_size", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "kernel_size", "]", "*", "conv_dims", "\n", "stride", "=", "stride", "if", "isinstance", "(", "stride", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "stride", "]", "*", "conv_dims", "\n", "rate", "=", "rate", "if", "isinstance", "(", "rate", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "rate", "]", "*", "conv_dims", "\n", "if", "data_format", "is", "None", "or", "data_format", ".", "endswith", "(", "'C'", ")", ":", "\n", "            ", "num_inputs", "=", "inputs", ".", "shape", "[", "-", "1", "]", "\n", "", "elif", "data_format", ".", "startswith", "(", "'NC'", ")", ":", "\n", "            ", "num_inputs", "=", "inputs", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid data_format'", ")", "\n", "\n", "", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "\n", "shape", "=", "list", "(", "kernel_size", ")", "+", "[", "num_inputs", ",", "num_outputs", "]", ",", "\n", "initializer", "=", "weights_initializer", ",", "\n", "regularizer", "=", "weights_regularizer", ",", "\n", "trainable", "=", "trainable", ")", "\n", "weights", "=", "weight_modulation", "(", "weights", ",", "gamma", "=", "gamma", ",", "demodulation", "=", "demodulation", ",", "epsilon", "=", "epsilon", ",", "trainable", "=", "trainable", ")", "\n", "\n", "if", "gamma", "is", "not", "None", ":", "\n", "            ", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "1", ",", "2", ",", "0", ",", "3", "]", ")", "# (H, W, N, CI)", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "1", ",", "inputs", ".", "shape", "[", "0", "]", ",", "inputs", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", "# (1, H, W, N * CI)", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "convolution", "(", "input", "=", "inputs", ",", "\n", "filter", "=", "weights", ",", "\n", "dilation_rate", "=", "rate", ",", "\n", "strides", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ")", "\n", "if", "gamma", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "tf", ".", "reshape", "(", "outputs", ",", "[", "outputs", ".", "shape", "[", "1", "]", ",", "outputs", ".", "shape", "[", "2", "]", ",", "-", "1", ",", "num_outputs", "]", ")", "# (H, W, N, CO)", "\n", "outputs", "=", "tf", ".", "transpose", "(", "outputs", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "\n", "", "if", "normalizer_fn", "is", "not", "None", ":", "\n", "            ", "normalizer_params", "=", "normalizer_params", "or", "{", "}", "\n", "outputs", "=", "normalizer_fn", "(", "outputs", ",", "**", "normalizer_params", ")", "\n", "", "else", ":", "\n", "            ", "if", "biases_initializer", "is", "not", "None", ":", "\n", "                ", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "\n", "shape", "=", "[", "num_outputs", "]", ",", "\n", "initializer", "=", "biases_initializer", ",", "\n", "regularizer", "=", "biases_regularizer", ",", "\n", "trainable", "=", "trainable", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ",", "data_format", "=", "data_format", ")", "\n", "\n", "", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_feature_norm": [[13, 26], ["functools.partial"], "function", ["None"], ["session", "=", "tf", ".", "get_default_session", "(", ")", "if", "session", "is", "None", "else", "session", "\n", "\n", "# step counter", "\n", "step_cnt", ",", "update_cnt", "=", "counter", "(", "start", "=", "counter_start", ",", "scope", "=", "counter_scope", ")", "\n", "\n", "# initialize variables", "\n", "session", ".", "run", "(", "tf", ".", "initializers", ".", "global_variables", "(", ")", ")", "\n", "\n", "# initialize writers", "\n", "session", ".", "run", "(", "tf", ".", "contrib", ".", "summary", ".", "summary_writer_initializer_op", "(", ")", ")", "\n", "\n", "# checkpoint", "\n", "checkpoint", "=", "Checkpoint", "(", "checkpoint_directory", ",", "\n", "checkpoint_kwargs", "=", "checkpoint_kwargs", ",", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_weight_norm": [[28, 37], ["functools.partial", "functools.partial"], "function", ["None"], ["keep_checkpoint_every_n_hours", "=", "checkpoint_keep_checkpoint_every_n_hours", ")", "\n", "checkpoint", ".", "restore", "(", ")", ".", "initialize_or_restore", "(", "session", "=", "session", ")", "\n", "\n", "return", "checkpoint", ",", "step_cnt", ",", "update_cnt", "\n", "\n", "\n", "", "def", "session", "(", "graph", "=", "None", ",", "\n", "allow_soft_placement", "=", "True", ",", "\n", "log_device_placement", "=", "False", ",", "\n", "allow_growth", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_initialization_gain": [[43, 59], ["activation_params.pop", "ValueError"], "function", ["None"], ["\n", "\n", "", "class", "Checkpoint", ":", "\n", "    ", "\"\"\"Enhanced tf.train.Checkpoint.\n\n    Parameters\n    ----------\n    directory: str\n        To be passed to tf.train.CheckpointManager.\n    checkpoint_kwargs:\n        To be passed to tf.train.Checkpoint. Default as `{v.name: v for v in tf.global_variables()}`.\n\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "directory", ",", "# for tf.train.CheckpointManager", "\n", "checkpoint_kwargs", "=", "None", ",", "# for tf.train.Checkpoint", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_fan": [[61, 80], ["len", "len", "int", "int", "int", "len"], "function", ["None"], ["keep_checkpoint_every_n_hours", "=", "None", ")", ":", "\n", "# default to save all variables", "\n", "        ", "checkpoint_kwargs", "=", "{", "v", ".", "name", ":", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "}", "if", "checkpoint_kwargs", "is", "None", "else", "checkpoint_kwargs", "\n", "self", ".", "checkpoint", "=", "tf", ".", "train", ".", "Checkpoint", "(", "**", "checkpoint_kwargs", ")", "\n", "self", ".", "manager", "=", "tf", ".", "train", ".", "CheckpointManager", "(", "self", ".", "checkpoint", ",", "directory", ",", "max_to_keep", ",", "keep_checkpoint_every_n_hours", ")", "\n", "\n", "", "def", "restore", "(", "self", ",", "save_path", "=", "None", ")", ":", "\n", "        ", "save_path", "=", "self", ".", "manager", ".", "latest_checkpoint", "if", "save_path", "is", "None", "else", "save_path", "\n", "return", "self", ".", "checkpoint", ".", "restore", "(", "save_path", ")", "\n", "\n", "", "def", "save", "(", "self", ",", "file_prefix_or_checkpoint_number", "=", "None", ",", "session", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "file_prefix_or_checkpoint_number", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "checkpoint", ".", "save", "(", "file_prefix_or_checkpoint_number", ",", "session", "=", "session", ")", "\n", "", "else", ":", "\n", "            ", "with", "(", "tf", ".", "get_default_session", "(", ")", "if", "session", "is", "None", "else", "session", ")", ".", "as_default", "(", ")", ":", "\n", "                ", "return", "self", ".", "manager", ".", "save", "(", "checkpoint_number", "=", "file_prefix_or_checkpoint_number", ")", "\n", "\n", "", "", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "checkpoint", ",", "attr", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "checkpoint", ",", "attr", ")", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_initializer": [[82, 85], ["utils.get_initialization_gain", "tensorflow.initializers.variance_scaling"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.utils.get_initialization_gain"], ["            ", "return", "getattr", "(", "self", ".", "manager", ",", "attr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "__getattribute__", "(", "attr", ")", "# this will raise an exception", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.losses.center_loss": [[4, 32], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.gather", "tensorflow.unique_with_counts", "tensorflow.gather", "tensorflow.reshape", "tensorflow.scatter_sub", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.add_to_collections", "tensorflow.constant_initializer", "tensorflow.reduce_sum", "tensorflow.control_dependencies", "tensorflow.identity", "features.get_shape"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["def", "center_loss", "(", "features", ",", "labels", ",", "num_classes", ",", "alpha", "=", "0.5", ",", "updates_collections", "=", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "scope", "=", "None", ")", ":", "\n", "# modified from https://github.com/EncodeTS/TensorFlow_Center_Loss/blob/master/center_loss.py", "\n", "\n", "    ", "assert", "features", ".", "shape", ".", "ndims", "==", "2", ",", "'The rank of `features` should be 2!'", "\n", "assert", "0", "<=", "alpha", "<=", "1", ",", "'`alpha` should be in [0, 1]!'", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'center_loss'", ",", "[", "features", ",", "labels", "]", ")", ":", "\n", "        ", "centers", "=", "tf", ".", "get_variable", "(", "'centers'", ",", "shape", "=", "[", "num_classes", ",", "features", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "centers_batch", "=", "tf", ".", "gather", "(", "centers", ",", "labels", ")", "\n", "diff", "=", "centers_batch", "-", "features", "\n", "_", ",", "unique_idx", ",", "unique_count", "=", "tf", ".", "unique_with_counts", "(", "labels", ")", "\n", "appear_times", "=", "tf", ".", "gather", "(", "unique_count", ",", "unique_idx", ")", "\n", "appear_times", "=", "tf", ".", "reshape", "(", "appear_times", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "diff", "=", "diff", "/", "tf", ".", "cast", "(", "(", "1", "+", "appear_times", ")", ",", "tf", ".", "float32", ")", "\n", "diff", "=", "alpha", "*", "diff", "\n", "update_centers", "=", "tf", ".", "scatter_sub", "(", "centers", ",", "labels", ",", "diff", ")", "\n", "\n", "center_loss", "=", "0.5", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "(", "centers_batch", "-", "features", ")", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "if", "updates_collections", "is", "None", ":", "\n", "            ", "with", "tf", ".", "control_dependencies", "(", "[", "update_centers", "]", ")", ":", "\n", "                ", "center_loss", "=", "tf", ".", "identity", "(", "center_loss", ")", "\n", "", "", "else", ":", "\n", "            ", "tf", ".", "add_to_collections", "(", "updates_collections", ",", "update_centers", ")", "\n", "\n", "", "", "return", "center_loss", ",", "centers", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.deep_learning.losses.sigmoid_focal_loss": [[34, 43], ["tensorflow.cast", "tensorflow.sigmoid", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.maximum"], "function", ["None"], ["", "def", "sigmoid_focal_loss", "(", "multi_class_labels", ",", "logits", ",", "gamma", "=", "2.0", ")", ":", "\n", "    ", "epsilon", "=", "1e-8", "\n", "multi_class_labels", "=", "tf", ".", "cast", "(", "multi_class_labels", ",", "logits", ".", "dtype", ")", "\n", "\n", "p", "=", "tf", ".", "sigmoid", "(", "logits", ")", "\n", "pt", "=", "p", "*", "multi_class_labels", "+", "(", "1", "-", "p", ")", "*", "(", "1", "-", "multi_class_labels", ")", "\n", "focal_loss", "=", "tf", ".", "reduce_mean", "(", "-", "(", "1", "-", "pt", ")", "**", "gamma", "*", "tf", ".", "log", "(", "tf", ".", "maximum", "(", "pt", ",", "epsilon", ")", ")", ")", "\n", "\n", "return", "focal_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.tile_concat": [[4, 17], ["enumerate", "tensorflow.concat", "isinstance", "list", "isinstance", "list", "tensorflow.reshape", "tensorflow.tile"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["def", "tile_concat", "(", "a_list", ",", "b_list", "=", "None", ")", ":", "\n", "# tile all elements of `b_list` and then concat `a_list + b_list` along the channel axis", "\n", "# `a` shape: (N, H, W, C_a)", "\n", "# `b` shape: can be (N, 1, 1, C_b) or (N, C_b)", "\n", "    ", "if", "b_list", "is", "None", ":", "\n", "        ", "b_list", "=", "[", "]", "\n", "", "a_list", "=", "list", "(", "a_list", ")", "if", "isinstance", "(", "a_list", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "a_list", "]", "\n", "b_list", "=", "list", "(", "b_list", ")", "if", "isinstance", "(", "b_list", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "b_list", "]", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "b_list", ")", ":", "\n", "        ", "b", "=", "tf", ".", "reshape", "(", "b", ",", "[", "-", "1", ",", "1", ",", "1", ",", "b", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "b", "=", "tf", ".", "tile", "(", "b", ",", "[", "1", ",", "a_list", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "a_list", "[", "0", "]", ".", "shape", "[", "2", "]", ",", "1", "]", ")", "\n", "b_list", "[", "i", "]", "=", "b", "\n", "", "return", "tf", ".", "concat", "(", "a_list", "+", "b_list", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape": [[19, 24], ["tensorflow.convert_to_tensor", "tensorflow.reshape", "range", "range", "len", "tensorflow.shape", "len"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["", "def", "reshape", "(", "x", ",", "shape", ")", ":", "\n", "    ", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "shape", "=", "[", "x", ".", "shape", "[", "i", "]", "if", "shape", "[", "i", "]", "==", "0", "else", "shape", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "shape", ")", ")", "]", "\n", "shape", "=", "[", "tf", ".", "shape", "(", "x", ")", "[", "i", "]", "if", "shape", "[", "i", "]", "is", "None", "else", "shape", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "shape", ")", ")", "]", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.minmax_norm": [[26, 32], ["tensorflow.to_float", "tensorflow.reduce_min", "tensorflow.reduce_max", "tensorflow.maximum"], "function", ["None"], ["", "def", "minmax_norm", "(", "x", ",", "epsilon", "=", "1e-12", ")", ":", "\n", "    ", "x", "=", "tf", ".", "to_float", "(", "x", ")", "\n", "min_val", "=", "tf", ".", "reduce_min", "(", "x", ")", "\n", "max_val", "=", "tf", ".", "reduce_max", "(", "x", ")", "\n", "norm_x", "=", "(", "x", "-", "min_val", ")", "/", "tf", ".", "maximum", "(", "(", "max_val", "-", "min_val", ")", ",", "epsilon", ")", "\n", "return", "norm_x", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.gram_schmidt": [[34, 48], ["range", "tensorflow.norm", "tensorflow.concat", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.norm"], "function", ["None"], ["", "def", "gram_schmidt", "(", "vectors", ")", ":", "\n", "    ", "\"\"\"Gram-Schmidt process. Modified from https://stackoverflow.com/questions/48119473.\n\n    Parameters\n    ----------\n        vectors: 2D tensor - [v1, v2, ...]\n\n    \"\"\"", "\n", "basis", "=", "(", "vectors", "[", "0", ":", "1", ",", ":", "]", "/", "tf", ".", "norm", "(", "vectors", "[", "0", ":", "1", ",", ":", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "vectors", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "v", "=", "vectors", "[", "i", ":", "i", "+", "1", ",", ":", "]", "\n", "w", "=", "v", "-", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "v", ",", "basis", ",", "transpose_b", "=", "True", ")", ",", "basis", ")", "\n", "basis", "=", "tf", ".", "concat", "(", "[", "basis", ",", "w", "/", "tf", ".", "norm", "(", "w", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "basis", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.random.random.truncated_normal": [[4, 10], ["tensorflow.distributions.Normal", "tf.distributions.Normal.cdf", "tf.distributions.Normal.cdf", "tf.distributions.Normal.quantile", "tensorflow.random.uniform"], "function", ["None"], ["def", "truncated_normal", "(", "shape", ",", "mean", "=", "0.0", ",", "stddev", "=", "1.0", ",", "minval", "=", "-", "2.0", ",", "maxval", "=", "2.0", ",", "seed", "=", "None", ")", ":", "\n", "    ", "norm", "=", "tf", ".", "distributions", ".", "Normal", "(", "0.0", ",", "1.0", ")", "\n", "cdf_alpha", "=", "norm", ".", "cdf", "(", "(", "minval", "-", "mean", ")", "/", "stddev", ")", "\n", "cdf_beta", "=", "norm", ".", "cdf", "(", "(", "maxval", "-", "mean", ")", "/", "stddev", ")", "\n", "sample", "=", "norm", ".", "quantile", "(", "cdf_alpha", "+", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "shape", ",", "seed", "=", "seed", ")", "*", "(", "cdf_beta", "-", "cdf_alpha", ")", ")", "*", "stddev", "+", "mean", "\n", "return", "sample", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.data.dataset.batch_dataset": [[6, 46], ["dataset.filter.batch", "dataset.filter.repeat().prefetch", "multiprocessing.cpu_count", "max", "dataset.filter.shuffle", "dataset.filter.filter", "dataset.filter.map", "dataset.filter.map", "dataset.filter.filter", "dataset.filter.repeat"], "function", ["None"], ["def", "batch_dataset", "(", "dataset", ",", "\n", "batch_size", ",", "\n", "drop_remainder", "=", "True", ",", "\n", "n_prefetch_batch", "=", "1", ",", "\n", "filter_fn", "=", "None", ",", "\n", "map_fn", "=", "None", ",", "\n", "n_map_threads", "=", "None", ",", "\n", "filter_after_map", "=", "False", ",", "\n", "shuffle", "=", "True", ",", "\n", "shuffle_buffer_size", "=", "None", ",", "\n", "repeat", "=", "None", ")", ":", "\n", "# set defaults", "\n", "    ", "if", "n_map_threads", "is", "None", ":", "\n", "        ", "n_map_threads", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "", "if", "shuffle", "and", "shuffle_buffer_size", "is", "None", ":", "\n", "        ", "shuffle_buffer_size", "=", "max", "(", "batch_size", "*", "128", ",", "2048", ")", "# set the minimum buffer size as 2048", "\n", "\n", "# [*] it is efficient to conduct `shuffle` before `map`/`filter` because `map`/`filter` is sometimes costly", "\n", "", "if", "shuffle", ":", "\n", "        ", "dataset", "=", "dataset", ".", "shuffle", "(", "shuffle_buffer_size", ")", "\n", "\n", "", "if", "not", "filter_after_map", ":", "\n", "        ", "if", "filter_fn", ":", "\n", "            ", "dataset", "=", "dataset", ".", "filter", "(", "filter_fn", ")", "\n", "\n", "", "if", "map_fn", ":", "\n", "            ", "dataset", "=", "dataset", ".", "map", "(", "map_fn", ",", "num_parallel_calls", "=", "n_map_threads", ")", "\n", "\n", "", "", "else", ":", "# [*] this is slower", "\n", "        ", "if", "map_fn", ":", "\n", "            ", "dataset", "=", "dataset", ".", "map", "(", "map_fn", ",", "num_parallel_calls", "=", "n_map_threads", ")", "\n", "\n", "", "if", "filter_fn", ":", "\n", "            ", "dataset", "=", "dataset", ".", "filter", "(", "filter_fn", ")", "\n", "\n", "", "", "dataset", "=", "dataset", ".", "batch", "(", "batch_size", ",", "drop_remainder", "=", "drop_remainder", ")", "\n", "\n", "dataset", "=", "dataset", ".", "repeat", "(", "repeat", ")", ".", "prefetch", "(", "n_prefetch_batch", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.data.dataset.generator_batch_dataset": [[48, 75], ["tensorflow.data.Dataset.from_generator", "dataset.batch_dataset"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.data.dataset.batch_dataset"], ["", "def", "generator_batch_dataset", "(", "generator", ",", "\n", "batch_size", ",", "\n", "output_types", ",", "\n", "output_shapes", "=", "None", ",", "\n", "args", "=", "None", ",", "\n", "drop_remainder", "=", "True", ",", "\n", "n_prefetch_batch", "=", "1", ",", "\n", "filter_fn", "=", "None", ",", "\n", "map_fn", "=", "None", ",", "\n", "n_map_threads", "=", "None", ",", "\n", "filter_after_map", "=", "False", ",", "\n", "shuffle", "=", "True", ",", "\n", "shuffle_buffer_size", "=", "None", ",", "\n", "repeat", "=", "None", ")", ":", "\n", "    ", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator", ",", "output_types", ",", "output_shapes", "=", "output_shapes", ",", "args", "=", "args", ")", "\n", "dataset", "=", "batch_dataset", "(", "dataset", ",", "\n", "batch_size", ",", "\n", "drop_remainder", "=", "drop_remainder", ",", "\n", "n_prefetch_batch", "=", "n_prefetch_batch", ",", "\n", "filter_fn", "=", "filter_fn", ",", "\n", "map_fn", "=", "map_fn", ",", "\n", "n_map_threads", "=", "n_map_threads", ",", "\n", "filter_after_map", "=", "filter_after_map", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "shuffle_buffer_size", "=", "shuffle_buffer_size", ",", "\n", "repeat", "=", "repeat", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.data.dataset.memory_data_batch_dataset": [[77, 108], ["tensorflow.data.Dataset.from_tensor_slices", "dataset.batch_dataset"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.data.dataset.batch_dataset"], ["", "def", "memory_data_batch_dataset", "(", "memory_data", ",", "\n", "batch_size", ",", "\n", "drop_remainder", "=", "True", ",", "\n", "n_prefetch_batch", "=", "1", ",", "\n", "filter_fn", "=", "None", ",", "\n", "map_fn", "=", "None", ",", "\n", "n_map_threads", "=", "None", ",", "\n", "filter_after_map", "=", "False", ",", "\n", "shuffle", "=", "True", ",", "\n", "shuffle_buffer_size", "=", "None", ",", "\n", "repeat", "=", "None", ")", ":", "\n", "    ", "\"\"\"Batch dataset of memory data.\n\n    Parameters\n    ----------\n    memory_data : nested structure of tensors/ndarrays/lists\n\n    \"\"\"", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "memory_data", ")", "\n", "dataset", "=", "batch_dataset", "(", "dataset", ",", "\n", "batch_size", ",", "\n", "drop_remainder", "=", "drop_remainder", ",", "\n", "n_prefetch_batch", "=", "n_prefetch_batch", ",", "\n", "filter_fn", "=", "filter_fn", ",", "\n", "map_fn", "=", "map_fn", ",", "\n", "n_map_threads", "=", "n_map_threads", ",", "\n", "filter_after_map", "=", "filter_after_map", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "shuffle_buffer_size", "=", "shuffle_buffer_size", ",", "\n", "repeat", "=", "repeat", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.data.dataset.disk_image_batch_dataset": [[110, 159], ["dataset.memory_data_batch_dataset", "tensorflow.io.read_file", "tensorflow.image.decode_png", "map_fn", "dataset.disk_image_batch_dataset.parse_fn"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.data.dataset.memory_data_batch_dataset"], ["", "def", "disk_image_batch_dataset", "(", "img_paths", ",", "\n", "batch_size", ",", "\n", "labels", "=", "None", ",", "\n", "drop_remainder", "=", "True", ",", "\n", "n_prefetch_batch", "=", "1", ",", "\n", "filter_fn", "=", "None", ",", "\n", "map_fn", "=", "None", ",", "\n", "n_map_threads", "=", "None", ",", "\n", "filter_after_map", "=", "False", ",", "\n", "shuffle", "=", "True", ",", "\n", "shuffle_buffer_size", "=", "None", ",", "\n", "repeat", "=", "None", ")", ":", "\n", "    ", "\"\"\"Batch dataset of disk image for PNG and JPEG.\n\n    Parameters\n    ----------\n    img_paths : 1d-tensor/ndarray/list of str\n    labels : nested structure of tensors/ndarrays/lists\n\n    \"\"\"", "\n", "if", "labels", "is", "None", ":", "\n", "        ", "memory_data", "=", "img_paths", "\n", "", "else", ":", "\n", "        ", "memory_data", "=", "(", "img_paths", ",", "labels", ")", "\n", "\n", "", "def", "parse_fn", "(", "path", ",", "*", "label", ")", ":", "\n", "        ", "img", "=", "tf", ".", "io", ".", "read_file", "(", "path", ")", "\n", "img", "=", "tf", ".", "image", ".", "decode_png", "(", "img", ",", "3", ")", "# fix channels to 3", "\n", "return", "(", "img", ",", ")", "+", "label", "\n", "\n", "", "if", "map_fn", ":", "# fuse `map_fn` and `parse_fn`", "\n", "        ", "def", "map_fn_", "(", "*", "args", ")", ":", "\n", "            ", "return", "map_fn", "(", "*", "parse_fn", "(", "*", "args", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "map_fn_", "=", "parse_fn", "\n", "\n", "", "dataset", "=", "memory_data_batch_dataset", "(", "memory_data", ",", "\n", "batch_size", ",", "\n", "drop_remainder", "=", "drop_remainder", ",", "\n", "n_prefetch_batch", "=", "n_prefetch_batch", ",", "\n", "filter_fn", "=", "filter_fn", ",", "\n", "map_fn", "=", "map_fn_", ",", "\n", "n_map_threads", "=", "n_map_threads", ",", "\n", "filter_after_map", "=", "filter_after_map", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "shuffle_buffer_size", "=", "shuffle_buffer_size", ",", "\n", "repeat", "=", "repeat", ")", "\n", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.image.center_crop": [[8, 15], ["tensorflow.image.crop_to_bounding_box", "isinstance", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["def", "center_crop", "(", "image", ",", "size", ")", ":", "\n", "# for image of shape [batch, height, width, channels] or [height, width, channels]", "\n", "    ", "if", "not", "isinstance", "(", "size", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "size", "=", "[", "size", ",", "size", "]", "\n", "", "offset_height", "=", "(", "tf", ".", "shape", "(", "image", ")", "[", "-", "3", "]", "-", "size", "[", "0", "]", ")", "//", "2", "\n", "offset_width", "=", "(", "tf", ".", "shape", "(", "image", ")", "[", "-", "2", "]", "-", "size", "[", "1", "]", ")", "//", "2", "\n", "return", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "image", ",", "offset_height", ",", "offset_width", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.image.color_jitter": [[17, 40], ["random.shuffle", "tforms.append", "tforms.append", "tforms.append", "tforms.append", "tform", "functools.partial", "functools.partial", "functools.partial", "functools.partial", "max", "max"], "function", ["None"], ["", "def", "color_jitter", "(", "image", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "    ", "\"\"\"Color jitter.\n\n    Examples\n    --------\n    >>> color_jitter(img, 25, 0.2, 0.2, 0.1)\n\n    \"\"\"", "\n", "tforms", "=", "[", "]", "\n", "if", "brightness", ">", "0", ":", "\n", "        ", "tforms", ".", "append", "(", "functools", ".", "partial", "(", "tf", ".", "image", ".", "random_brightness", ",", "max_delta", "=", "brightness", ")", ")", "\n", "", "if", "contrast", ">", "0", ":", "\n", "        ", "tforms", ".", "append", "(", "functools", ".", "partial", "(", "tf", ".", "image", ".", "random_contrast", ",", "lower", "=", "max", "(", "0", ",", "1", "-", "contrast", ")", ",", "upper", "=", "1", "+", "contrast", ")", ")", "\n", "", "if", "saturation", ">", "0", ":", "\n", "        ", "tforms", ".", "append", "(", "functools", ".", "partial", "(", "tf", ".", "image", ".", "random_saturation", ",", "lower", "=", "max", "(", "0", ",", "1", "-", "saturation", ")", ",", "upper", "=", "1", "+", "saturation", ")", ")", "\n", "", "if", "hue", ">", "0", ":", "\n", "        ", "tforms", ".", "append", "(", "functools", ".", "partial", "(", "tf", ".", "image", ".", "random_hue", ",", "max_delta", "=", "hue", ")", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "tforms", ")", "\n", "for", "tform", "in", "tforms", ":", "\n", "        ", "image", "=", "tform", "(", "image", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.image.random_grayscale": [[42, 46], ["tensorflow.cond", "tensorflow.random.uniform", "tensorflow.image.adjust_saturation"], "function", ["None"], ["", "def", "random_grayscale", "(", "image", ",", "p", "=", "0.1", ")", ":", "\n", "    ", "return", "tf", ".", "cond", "(", "pred", "=", "tf", ".", "random", ".", "uniform", "(", "(", ")", ")", "<", "p", ",", "\n", "true_fn", "=", "lambda", ":", "tf", ".", "image", ".", "adjust_saturation", "(", "image", ",", "0", ")", ",", "\n", "false_fn", "=", "lambda", ":", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.image.random_rotate": [[48, 53], ["tensorflow.convert_to_tensor", "tensorflow.contrib.image.rotate", "tensorflow.random.uniform", "tensorflow.shape"], "function", ["None"], ["", "def", "random_rotate", "(", "images", ",", "max_degrees", ",", "interpolation", "=", "'BILINEAR'", ")", ":", "\n", "# Randomly rotate image(s) counterclockwise by the angle(s) uniformly chosen from [-max_degree(s), max_degree(s)].", "\n", "    ", "max_degrees", "=", "tf", ".", "convert_to_tensor", "(", "max_degrees", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "angles", "=", "tf", ".", "random", ".", "uniform", "(", "tf", ".", "shape", "(", "max_degrees", ")", ",", "minval", "=", "-", "1.0", ",", "maxval", "=", "1.0", ")", "*", "max_degrees", "/", "180.0", "*", "math", ".", "pi", "\n", "return", "tf", ".", "contrib", ".", "image", ".", "rotate", "(", "images", ",", "angles", ",", "interpolation", "=", "interpolation", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.filter.filter2d_v1": [[4, 14], ["tensorflow.nn.depthwise_conv2d", "tensorflow.reduce_sum", "tensorflow.tile", "tensorflow.tile"], "function", ["None"], ["def", "filter2d_v1", "(", "image", ",", "kernel", ",", "normalize_kernel", "=", "True", ",", "data_format", "=", "None", ")", ":", "\n", "# image: NHWC or NCHW", "\n", "    ", "if", "normalize_kernel", ":", "\n", "        ", "kernel", "/=", "tf", ".", "reduce_sum", "(", "kernel", ")", "\n", "", "kernel", "=", "kernel", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "if", "data_format", "is", "None", "or", "data_format", "==", "\"NHWC\"", ":", "\n", "        ", "kernel", "=", "tf", ".", "tile", "(", "kernel", ",", "[", "1", ",", "1", ",", "image", ".", "shape", "[", "3", "]", ",", "1", "]", ")", "\n", "", "elif", "data_format", "==", "\"NCHW\"", ":", "\n", "        ", "kernel", "=", "tf", ".", "tile", "(", "kernel", ",", "[", "1", ",", "1", ",", "image", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "", "return", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "image", ",", "kernel", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.filter.filter2d_v2": [[16, 35], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.reshape", "tf.transpose.set_shape", "tensorflow.reduce_sum", "tensorflow.transpose", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape", "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.ops.ops.reshape"], ["", "def", "filter2d_v2", "(", "image", ",", "kernel", ",", "normalize_kernel", "=", "True", ",", "data_format", "=", "None", ")", ":", "\n", "# image: NHWC or NCHW", "\n", "    ", "if", "normalize_kernel", ":", "\n", "        ", "kernel", "/=", "tf", ".", "reduce_sum", "(", "kernel", ")", "\n", "\n", "", "if", "data_format", "is", "None", "or", "data_format", "==", "\"NHWC\"", ":", "\n", "        ", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "# to (N, C, H, W)", "\n", "", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "static_shape", "=", "image", ".", "shape", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "-", "1", ",", "shape", "[", "2", "]", ",", "shape", "[", "3", "]", ",", "1", "]", ")", "# to (N*C, H, W, 1)", "\n", "\n", "image", "=", "tf", ".", "nn", ".", "conv2d", "(", "image", ",", "kernel", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NHWC'", ")", "\n", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "shape", ")", "\n", "image", ".", "set_shape", "(", "static_shape", ")", "\n", "if", "data_format", "is", "None", "or", "data_format", "==", "\"NHWC\"", ":", "\n", "        ", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.filter.gaussian_kernel2d": [[40, 45], ["tensorflow.distributions.Normal", "tf.distributions.Normal.prob", "float", "tensorflow.range"], "function", ["None"], ["def", "gaussian_kernel2d", "(", "kernel_radias", ",", "std", ")", ":", "\n", "    ", "d", "=", "tf", ".", "distributions", ".", "Normal", "(", "0.0", ",", "float", "(", "std", ")", ")", "\n", "vals", "=", "d", ".", "prob", "(", "tf", ".", "range", "(", "start", "=", "-", "kernel_radias", ",", "limit", "=", "kernel_radias", "+", "1", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "kernel", "=", "vals", "[", ":", ",", "None", "]", "*", "vals", "[", "None", ",", ":", "]", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.filter.gaussian_filter2d": [[47, 51], ["filter.gaussian_kernel2d", "filter2d"], "function", ["home.repos.pwc.inspect_result.LynnHo_EigenGAN-Tensorflow.image.filter.gaussian_kernel2d"], ["", "def", "gaussian_filter2d", "(", "image", ",", "kernel_radias", ",", "std", ",", "normalize_kernel", "=", "True", ",", "data_format", "=", "None", ")", ":", "\n", "# image: NHWC or NCHW", "\n", "    ", "kernel", "=", "gaussian_kernel2d", "(", "kernel_radias", ",", "std", ")", "\n", "return", "filter2d", "(", "image", ",", "kernel", ",", "normalize_kernel", "=", "normalize_kernel", ",", "data_format", "=", "None", ")", "\n", "", ""]]}