{"home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Train_loading.__init__": [[69, 72], ["train_scflow.Train_loading.collect_samples", "print", "len"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading.collect_samples"], ["    ", "def", "__init__", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "samples", "=", "self", ".", "collect_samples", "(", ")", "\n", "print", "(", "'Train len(self.samples)'", ",", "len", "(", "self", ".", "samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Train_loading.collect_samples": [[73, 88], ["list", "range", "os.join", "os.join", "os.join", "os.join", "range", "str", "str", "len", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "samples.append", "glob.glob", "str", "str", "int", "int", "int"], "methods", ["None"], ["", "def", "collect_samples", "(", "self", ")", ":", "\n", "        ", "scene_list", "=", "list", "(", "range", "(", "0", ",", "100", ")", ")", "\n", "samples", "=", "[", "]", "\n", "for", "scene", "in", "scene_list", ":", "\n", "            ", "spike_dir", "=", "osp", ".", "join", "(", "args", ".", "data_root", ",", "str", "(", "scene", ")", ",", "'encoding25_dt{:d}'", ".", "format", "(", "args", ".", "dt", ")", ")", "\n", "flowgt_dir", "=", "osp", ".", "join", "(", "args", ".", "data_root", ",", "str", "(", "scene", ")", ",", "'dt={:d}'", ".", "format", "(", "args", ".", "dt", ")", ",", "'motion_vector'", ")", "\n", "for", "st", "in", "range", "(", "0", ",", "len", "(", "glob", ".", "glob", "(", "spike_dir", "+", "'/*.npy'", ")", ")", "-", "1", ")", ":", "\n", "                ", "seq1_path", "=", "spike_dir", "+", "'/'", "+", "str", "(", "int", "(", "st", ")", ")", "+", "'.npy'", "\n", "seq2_path", "=", "spike_dir", "+", "'/'", "+", "str", "(", "int", "(", "st", "+", "1", ")", ")", "+", "'.npy'", "\n", "flow_path", "=", "flowgt_dir", "+", "'/{:04d}.flo'", ".", "format", "(", "int", "(", "st", ")", ")", "\n", "if", "osp", ".", "exists", "(", "seq1_path", ")", "and", "osp", ".", "exists", "(", "seq2_path", ")", "and", "osp", ".", "exists", "(", "flow_path", ")", ":", "\n", "                    ", "s", "=", "{", "}", "\n", "s", "[", "'seq1_path'", "]", ",", "s", "[", "'seq2_path'", "]", ",", "s", "[", "'flow_path'", "]", "=", "seq1_path", ",", "seq2_path", ",", "flow_path", "\n", "samples", ".", "append", "(", "s", ")", "\n", "", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Train_loading._load_sample": [[89, 99], ["numpy.load().astype", "numpy.load().astype", "utils.readFlow().astype", "numpy.random.randint", "numpy.load", "numpy.load", "utils.readFlow"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.readFlow"], ["", "def", "_load_sample", "(", "self", ",", "s", ")", ":", "\n", "        ", "seq1", "=", "np", ".", "load", "(", "s", "[", "'seq1_path'", "]", ",", "allow_pickle", "=", "True", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "seq2", "=", "np", ".", "load", "(", "s", "[", "'seq2_path'", "]", ",", "allow_pickle", "=", "True", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", "=", "readFlow", "(", "s", "[", "'flow_path'", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "20", ")", "\n", "seq1", "=", "seq1", "[", ":", ",", "y0", ":", "y0", "+", "480", ",", ":", "]", "\n", "seq2", "=", "seq2", "[", ":", ",", "y0", ":", "y0", "+", "480", ",", ":", "]", "\n", "flow", "=", "flow", "[", "y0", ":", "y0", "+", "480", ",", ":", ",", ":", "]", "\n", "return", "seq1", ",", "seq2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Train_loading.__len__": [[100, 102], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Train_loading.__getitem__": [[103, 106], ["train_scflow.Train_loading._load_sample"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading._load_sample"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "seq1", ",", "seq2", ",", "flow", "=", "self", ".", "_load_sample", "(", "self", ".", "samples", "[", "index", "]", ")", "\n", "return", "seq1", ",", "seq2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Test_loading.__init__": [[109, 112], ["train_scflow.Test_loading.collect_samples"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading.collect_samples"], ["    ", "def", "__init__", "(", "self", ",", "scene", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "scene", "=", "scene", "\n", "self", ".", "samples", "=", "self", ".", "collect_samples", "(", ")", "\n", "# print('scene:{:s}, dt{:d}, length:{:d}'.format(self.scene, args.dt, len(self.samples)))", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Test_loading.collect_samples": [[114, 129], ["os.join", "os.join", "os.join", "os.join", "range", "str", "str", "len", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "samples.append", "glob.glob", "str", "str", "int", "int", "int"], "methods", ["None"], ["", "def", "collect_samples", "(", "self", ")", ":", "\n", "        ", "scene_list", "=", "[", "self", ".", "scene", "]", "\n", "samples", "=", "[", "]", "\n", "for", "scene", "in", "scene_list", ":", "\n", "            ", "spike_dir", "=", "osp", ".", "join", "(", "args", ".", "test_root", ",", "str", "(", "scene", ")", ",", "'encoding25_dt{:d}'", ".", "format", "(", "args", ".", "dt", ")", ")", "\n", "flowgt_dir", "=", "osp", ".", "join", "(", "args", ".", "test_root", ",", "str", "(", "scene", ")", ",", "'dt={:d}'", ".", "format", "(", "args", ".", "dt", ")", ",", "'motion_vector'", ")", "\n", "for", "st", "in", "range", "(", "0", ",", "len", "(", "glob", ".", "glob", "(", "spike_dir", "+", "'/*.npy'", ")", ")", "-", "1", ")", ":", "\n", "                ", "seq1_path", "=", "spike_dir", "+", "'/'", "+", "str", "(", "int", "(", "st", ")", ")", "+", "'.npy'", "\n", "seq2_path", "=", "spike_dir", "+", "'/'", "+", "str", "(", "int", "(", "st", "+", "1", ")", ")", "+", "'.npy'", "\n", "flow_path", "=", "flowgt_dir", "+", "'/{:04d}.flo'", ".", "format", "(", "int", "(", "st", ")", ")", "\n", "if", "osp", ".", "exists", "(", "seq1_path", ")", "and", "osp", ".", "exists", "(", "seq2_path", ")", "and", "osp", ".", "exists", "(", "flow_path", ")", ":", "\n", "                    ", "s", "=", "{", "}", "\n", "s", "[", "'seq1_path'", "]", ",", "s", "[", "'seq2_path'", "]", ",", "s", "[", "'flow_path'", "]", "=", "seq1_path", ",", "seq2_path", ",", "flow_path", "\n", "samples", ".", "append", "(", "s", ")", "\n", "", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Test_loading._load_sample": [[130, 135], ["numpy.load().astype", "numpy.load().astype", "utils.readFlow().astype", "numpy.load", "numpy.load", "utils.readFlow"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.readFlow"], ["", "def", "_load_sample", "(", "self", ",", "s", ")", ":", "\n", "        ", "seq1", "=", "np", ".", "load", "(", "s", "[", "'seq1_path'", "]", ",", "allow_pickle", "=", "True", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "seq2", "=", "np", ".", "load", "(", "s", "[", "'seq2_path'", "]", ",", "allow_pickle", "=", "True", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", "=", "readFlow", "(", "s", "[", "'flow_path'", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "seq1", ",", "seq2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Test_loading.__len__": [[136, 138], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.Test_loading.__getitem__": [[139, 142], ["train_scflow.Test_loading._load_sample"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading._load_sample"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "seq1", ",", "seq2", ",", "flow", "=", "self", ".", "_load_sample", "(", "self", ".", "samples", "[", "index", "]", ")", "\n", "return", "seq1", ",", "seq2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.train": [[144, 210], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "enumerate", "seq1_raw.cuda().type.cuda().type", "seq2_raw.cuda().type.cuda().type", "flowgt_raw.cuda().type().permute.cuda().type().permute", "utils.InputPadder", "utils.InputPadder.pad", "torch.zeros", "torch.zeros", "torch.zeros", "model", "utils.supervised_loss", "optimizer.zero_grad", "loss.backward", "optimizer.step", "train_writer.add_scalar", "train_writer.add_scalar", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "flow[].clone().detach", "visulization_utils.outflow_img", "visulization_utils.outflow_img", "loss.item", "flow_mean.item", "loss.item", "print", "seq1_raw.cuda().type.cuda", "seq2_raw.cuda().type.cuda", "flowgt_raw.cuda().type().permute.cuda().type", "time.time", "flow[].clone", "flowgt_raw.cuda().type().permute.cuda", "optimizer.state_dict", "len"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.train", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.pad", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.supervised_loss", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.outflow_img", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.outflow_img"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "train_writer", ")", ":", "\n", "    ", "global", "n_iter", ",", "args", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "mini_batch_size_v", "=", "args", ".", "batch_size", "\n", "batch_size_v", "=", "4", "\n", "\n", "loss_dict", "=", "{", "}", "\n", "loss_dict", "[", "'w_scales'", "]", "=", "args", ".", "w_scales", "\n", "\n", "for", "ww", ",", "data", "in", "enumerate", "(", "train_loader", ",", "0", ")", ":", "\n", "# get the inputs", "\n", "        ", "seq1_raw", ",", "seq2_raw", ",", "flowgt_raw", "=", "data", "\n", "\n", "# compute output", "\n", "seq1_raw", "=", "seq1_raw", ".", "cuda", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "seq2_raw", "=", "seq2_raw", ".", "cuda", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "flowgt_raw", "=", "flowgt_raw", ".", "cuda", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "permute", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "padder", "=", "InputPadder", "(", "seq1_raw", ".", "shape", ")", "\n", "seq1", ",", "seq2", ",", "flowgt", "=", "padder", ".", "pad", "(", "seq1_raw", ",", "seq2_raw", ",", "flowgt_raw", ")", "\n", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "seq1", ".", "shape", "\n", "flow_init", "=", "torch", ".", "zeros", "(", "[", "B", ",", "2", ",", "H", ",", "W", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flow", ",", "model_res_dict", "=", "model", "(", "seq1", ",", "seq2", ",", "flow_init", ",", "dt", "=", "args", ".", "dt", ")", "\n", "flow_init", "=", "flow", "[", "0", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "flow", ",", "model_res_dict", "=", "model", "(", "seq1", ",", "seq2", ",", "flow_init", ",", "dt", "=", "args", ".", "dt", ")", "\n", "\n", "# compute loss", "\n", "loss", ",", "loss_res_dict", "=", "supervised_loss", "(", "flow", ",", "flowgt", ",", "loss_dict", ")", "\n", "\n", "flow_mean", "=", "loss_res_dict", "[", "'flow_mean'", "]", "\n", "\n", "if", "n_iter", "%", "args", ".", "vis_interval", "==", "0", ":", "\n", "            ", "outflow_img", "(", "flow", ",", "args", ".", "vis_path", ",", "name_prefix", "=", "'flow'", ",", "max_batch", "=", "args", ".", "max_vis_batch", ")", "\n", "outflow_img", "(", "[", "flowgt", "]", ",", "args", ".", "vis_path", ",", "name_prefix", "=", "'flowgt'", ",", "max_batch", "=", "args", ".", "max_vis_batch", ")", "\n", "\n", "# compute gradient and do optimization step", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# record loss and EPE", "\n", "train_writer", ".", "add_scalar", "(", "'total_loss'", ",", "loss", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "train_writer", ".", "add_scalar", "(", "'flow_mean'", ",", "flow_mean", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "mini_batch_size_v", "*", "ww", "%", "args", ".", "print_freq", "<", "mini_batch_size_v", ":", "\n", "            ", "cur_lr", "=", "optimizer", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t Time {3}\\t Data {4}\\t Loss {5}\\t Flow mean {6}\\t LR {7}'", "\n", ".", "format", "(", "epoch", ",", "mini_batch_size_v", "*", "ww", ",", "mini_batch_size_v", "*", "len", "(", "train_loader", ")", ",", "batch_time", ",", "data_time", ",", "losses", ",", "flow_mean", ",", "cur_lr", ")", ")", "\n", "", "n_iter", "+=", "1", "\n", "\n", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.validate": [[213, 273], ["model.eval", "os.join", "enumerate", "print", "print", "os.exists", "os.makedirs", "os.makedirs", "seq1_raw.cuda().type.cuda().type", "seq2_raw.cuda().type.cuda().type", "flowgt_raw.cuda().type().permute", "utils.InputPadder", "utils.InputPadder.pad", "time.time", "flows[].clone().detach", "utils.flow_warp", "utils.InputPadder.unpad().detach().permute().squeeze().cpu().numpy", "flowgt.detach().permute().squeeze().cpu().numpy.detach().permute().squeeze().cpu().numpy", "utils.compute_aee", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "time.time", "visulization_utils.flow_to_img_scflow", "visulization_utils.flow_to_img_scflow", "os.join", "os.join", "cv2.imwrite", "cv2.imwrite", "print", "seq1_raw.cuda().type.cuda", "seq2_raw.cuda().type.cuda", "flowgt_raw.cuda().type", "flows[].clone", "utils.InputPadder.unpad().detach().permute().squeeze().cpu", "flowgt.detach().permute().squeeze().cpu().numpy.detach().permute().squeeze().cpu", "flowgt_raw.cuda", "utils.InputPadder.unpad().detach().permute().squeeze", "flowgt.detach().permute().squeeze().cpu().numpy.detach().permute().squeeze", "utils.InputPadder.unpad().detach().permute", "flowgt.detach().permute().squeeze().cpu().numpy.detach().permute", "utils.InputPadder.unpad().detach", "flowgt.detach().permute().squeeze().cpu().numpy.detach", "utils.InputPadder.unpad"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.pad", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.flow_warp", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.compute_aee", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.flow_to_img_scflow", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.flow_to_img_scflow", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.unpad"], ["", "def", "validate", "(", "test_loader", ",", "model", ",", "scene", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "AEE_sum", "=", "0.", "\n", "eval_time_sum", "=", "0.", "\n", "iters", "=", "0.", "\n", "scene_eval_vis_path", "=", "osp", ".", "join", "(", "eval_vis_path", ",", "scene", ")", "\n", "if", "not", "osp", ".", "exists", "(", "scene_eval_vis_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "scene_eval_vis_path", ")", "\n", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ",", "0", ")", ":", "\n", "        ", "seq1_raw", ",", "seq2_raw", ",", "flowgt_raw", "=", "data", "\n", "\n", "# compute output", "\n", "seq1_raw", "=", "seq1_raw", ".", "cuda", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "seq2_raw", "=", "seq2_raw", ".", "cuda", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "flowgt", "=", "flowgt_raw", ".", "cuda", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "permute", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "padder", "=", "InputPadder", "(", "seq1_raw", ".", "shape", ")", "\n", "seq1", ",", "seq2", "=", "padder", ".", "pad", "(", "seq1_raw", ",", "seq2_raw", ")", "\n", "\n", "st_time", "=", "time", ".", "time", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "seq1", ".", "shape", "\n", "flow_init", "=", "torch", ".", "zeros", "(", "[", "B", ",", "2", ",", "H", ",", "W", "]", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flows", ",", "model_res_dict", "=", "model", "(", "seq1", "=", "seq1", ",", "seq2", "=", "seq2", ",", "flow", "=", "flow_init", ",", "dt", "=", "args", ".", "dt", ")", "\n", "", "eval_time", "=", "time", ".", "time", "(", ")", "-", "st_time", "\n", "\n", "flow_init", "=", "flows", "[", "0", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "flow_init", "=", "flow_warp", "(", "flow_init", ",", "-", "flow_init", ")", "\n", "\n", "pred_flow", "=", "padder", ".", "unpad", "(", "flows", "[", "0", "]", ")", ".", "detach", "(", ")", ".", "permute", "(", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flowgt", "=", "flowgt", ".", "detach", "(", ")", ".", "permute", "(", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "pred_flow_vis", "=", "flow_to_img_scflow", "(", "pred_flow", ")", "\n", "flowgt_vis", "=", "flow_to_img_scflow", "(", "flowgt", ")", "\n", "\n", "pred_flow_vis_path", "=", "osp", ".", "join", "(", "scene_eval_vis_path", ",", "'{:03d}_pred.png'", ".", "format", "(", "i", ")", ")", "\n", "flowgt_vis_path", "=", "osp", ".", "join", "(", "scene_eval_vis_path", ",", "'{:03d}_gt.png'", ".", "format", "(", "i", ")", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "pred_flow_vis_path", ",", "pred_flow_vis", ")", "\n", "cv2", ".", "imwrite", "(", "flowgt_vis_path", ",", "flowgt_vis", ")", "\n", "\n", "", "AEE", "=", "compute_aee", "(", "flowgt", ",", "pred_flow", ")", "\n", "\n", "AEE_sum", "+=", "AEE", "\n", "eval_time_sum", "+=", "eval_time", "\n", "\n", "iters", "+=", "1", "\n", "\n", "if", "args", ".", "print_detail", ":", "\n", "            ", "print", "(", "'Scene: {:s}, Index {:04d}, AEE: {:6.4f}, Eval Time: {:6.4f}'", ".", "format", "(", "scene", ",", "i", ",", "AEE", ",", "eval_time", ")", ")", "\n", "\n", "# print('-------------------------------------------------------')", "\n", "", "", "print", "(", "'Scene: {:s}, Mean AEE: {:6.4f}, Mean Eval Time: {:6.4f}'", ".", "format", "(", "scene", ",", "AEE_sum", "/", "iters", ",", "eval_time_sum", "/", "iters", ")", ")", "\n", "print", "(", "'-------------------------------------------------------'", ")", "\n", "\n", "return", "AEE_sum", "/", "iters", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.main": [[275, 401], ["datetime.datetime.now().strftime", "datetime.datetime.now().strftime", "os.join", "os.join", "tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter", "range", "torchvision.Compose", "train_scflow.Test_loading", "torch.utils.data.DataLoader", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "print", "train_scflow.Train_loading", "torch.utils.data.DataLoader", "range", "os.exists", "os.makedirs", "os.makedirs", "print", "os.join", "os.join", "output_writers.append", "torch.load", "torch.load", "torch.load", "print", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "train_scflow.train", "utils.save_checkpoint", "datetime.datetime.now", "datetime.datetime.now", "os.exists", "os.makedirs", "os.makedirs", "os.exists", "os.makedirs", "os.makedirs", "tensorboardX.SummaryWriter", "torchvision.ToPILImage", "torchvision.ToTensor", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.module.bias_parameters", "torch.nn.DataParallel().cuda.module.weight_parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train_scflow.validate", "str", "tensorboardX.SummaryWriter.add_scalar", "os.join", "torch.nn.DataParallel().cuda.module.state_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.listdir", "os.listdir", "str", "str", "str", "train_scflow.Test_loading", "torch.utils.data.DataLoader", "train_scflow.validate", "torch.nn.DataParallel().cuda.train"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.train", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.save_checkpoint", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.bias_parameters", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.weight_parameters", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.validate", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.validate", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_EPE", ",", "image_resize", ",", "event_interval", ",", "spiking_ts", ",", "device", ",", "sp_threshold", "\n", "timestamp1", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d\"", ")", "\n", "timestamp2", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%H%M%S\"", ")", "\n", "\n", "if", "args", ".", "save_name", "==", "None", ":", "\n", "        ", "save_folder_name", "=", "'{},{},{}epochs{},b{},lr{},{}'", ".", "format", "(", "\n", "args", ".", "arch", ",", "\n", "args", ".", "solver", ",", "\n", "args", ".", "epochs", ",", "\n", "',epochSize'", "+", "str", "(", "args", ".", "epoch_size", ")", "if", "args", ".", "epoch_size", ">", "0", "else", "''", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "lr", ",", "\n", "timestamp2", ")", "\n", "", "else", ":", "\n", "        ", "save_folder_name", "=", "'{},{},{}epochs{},b{},lr{},{},{}'", ".", "format", "(", "\n", "args", ".", "arch", ",", "\n", "args", ".", "solver", ",", "\n", "args", ".", "epochs", ",", "\n", "',epochSize'", "+", "str", "(", "args", ".", "epoch_size", ")", "if", "args", ".", "epoch_size", ">", "0", "else", "''", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "lr", ",", "\n", "timestamp2", ",", "\n", "args", ".", "save_name", ")", "\n", "\n", "", "save_root", "=", "osp", ".", "join", "(", "args", ".", "savedir", ",", "timestamp1", ")", "\n", "save_path", "=", "osp", ".", "join", "(", "save_root", ",", "save_folder_name", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "args", ".", "vis_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "vis_path", ")", "\n", "\n", "\n", "", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "'=> Everything will be saved to {}'", ".", "format", "(", "save_path", ")", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "save_root", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_root", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "", "train_writer", "=", "SummaryWriter", "(", "osp", ".", "join", "(", "save_path", ",", "'train'", ")", ")", "\n", "test_writer", "=", "SummaryWriter", "(", "osp", ".", "join", "(", "save_path", ",", "'test'", ")", ")", "\n", "output_writers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "output_writers", ".", "append", "(", "SummaryWriter", "(", "osp", ".", "join", "(", "save_path", ",", "'test'", ",", "str", "(", "i", ")", ")", ")", ")", "\n", "\n", "# Data loading code", "\n", "", "co_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "# Test_dataset: Waiting to write", "\n", "\n", "Test_dataset", "=", "Test_loading", "(", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "Test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "# create model", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "network_data", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "", "else", ":", "\n", "        ", "network_data", "=", "None", "\n", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "\n", "", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "network_data", ",", "args", ".", "batch_norm", ")", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "assert", "(", "args", ".", "solver", "in", "[", "'adam'", ",", "'sgd'", "]", ")", "\n", "print", "(", "'=> setting {} solver'", ".", "format", "(", "args", ".", "solver", ")", ")", "\n", "param_groups", "=", "[", "{", "'params'", ":", "model", ".", "module", ".", "bias_parameters", "(", ")", ",", "'weight_decay'", ":", "args", ".", "bias_decay", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "weight_parameters", "(", ")", ",", "'weight_decay'", ":", "args", ".", "weight_decay", "}", "]", "\n", "if", "args", ".", "solver", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "param_groups", ",", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "momentum", ",", "args", ".", "beta", ")", ")", "\n", "", "elif", "args", ".", "solver", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "param_groups", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "best_EPE", "=", "validate", "(", "test_loader", ",", "model", ",", "-", "1", ",", "output_writers", ")", "\n", "", "return", "\n", "\n", "", "Train_dataset", "=", "Train_loading", "(", "transform", "=", "co_transform", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "Train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "# scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=args.milestones, gamma=0.7)", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "# scheduler.step()", "\n", "        ", "if", "(", "epoch", "+", "1", ")", "in", "args", ".", "milestones", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "param_group", "[", "'lr'", "]", "*", "args", ".", "decay", "\n", "\n", "# train for one epoch", "\n", "", "", "train_loss", "=", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "train_writer", ")", "\n", "\n", "is_best", "=", "False", "\n", "save_name", "=", "'{:s}_ckpt.pth.tar'", ".", "format", "(", "str", "(", "epoch", "+", "1", ")", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "save_path", ",", "save_name", ")", "\n", "\n", "# Test at every 5 epoch during training", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "evaluate_interval", "==", "0", ":", "\n", "# evaluate on validation set", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# for scene in ['hand', 'ball']:", "\n", "                ", "for", "scene", "in", "os", ".", "listdir", "(", "args", ".", "test_root", ")", ":", "\n", "                    ", "Test_dataset", "=", "Test_loading", "(", "scene", "=", "scene", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "Test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ")", "\n", "EPE", "=", "validate", "(", "test_loader", ",", "model", ",", "scene", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "", "test_writer", ".", "add_scalar", "(", "'mean EPE'", ",", "EPE", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading.__init__": [[41, 44], ["eval.Test_loading.collect_samples"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading.collect_samples"], ["    ", "def", "__init__", "(", "self", ",", "scene", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "scene", "=", "scene", "\n", "self", ".", "samples", "=", "self", ".", "collect_samples", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading.collect_samples": [[45, 60], ["os.join", "os.join", "os.join", "os.join", "range", "str", "str", "len", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "samples.append", "glob.glob", "str", "str", "int", "int", "int"], "methods", ["None"], ["", "def", "collect_samples", "(", "self", ")", ":", "\n", "        ", "scene_list", "=", "[", "self", ".", "scene", "]", "\n", "samples", "=", "[", "]", "\n", "for", "scene", "in", "scene_list", ":", "\n", "            ", "spike_dir", "=", "osp", ".", "join", "(", "args", ".", "test_root", ",", "str", "(", "scene", ")", ",", "'encoding25_dt{:d}'", ".", "format", "(", "args", ".", "dt", ")", ")", "\n", "flowgt_dir", "=", "osp", ".", "join", "(", "args", ".", "test_root", ",", "str", "(", "scene", ")", ",", "'dt={:d}'", ".", "format", "(", "args", ".", "dt", ")", ",", "'motion_vector'", ")", "\n", "for", "st", "in", "range", "(", "0", ",", "len", "(", "glob", ".", "glob", "(", "spike_dir", "+", "'/*.npy'", ")", ")", "-", "1", ")", ":", "\n", "                ", "seq1_path", "=", "spike_dir", "+", "'/'", "+", "str", "(", "int", "(", "st", ")", ")", "+", "'.npy'", "\n", "seq2_path", "=", "spike_dir", "+", "'/'", "+", "str", "(", "int", "(", "st", "+", "1", ")", ")", "+", "'.npy'", "\n", "flow_path", "=", "flowgt_dir", "+", "'/{:04d}.flo'", ".", "format", "(", "int", "(", "st", ")", ")", "\n", "if", "osp", ".", "exists", "(", "seq1_path", ")", "and", "osp", ".", "exists", "(", "seq2_path", ")", "and", "osp", ".", "exists", "(", "flow_path", ")", ":", "\n", "                    ", "s", "=", "{", "}", "\n", "s", "[", "'seq1_path'", "]", ",", "s", "[", "'seq2_path'", "]", ",", "s", "[", "'flow_path'", "]", "=", "seq1_path", ",", "seq2_path", ",", "flow_path", "\n", "samples", ".", "append", "(", "s", ")", "\n", "", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading._load_sample": [[61, 66], ["numpy.load().astype", "numpy.load().astype", "utils.readFlow().astype", "numpy.load", "numpy.load", "utils.readFlow"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.readFlow"], ["", "def", "_load_sample", "(", "self", ",", "s", ")", ":", "\n", "        ", "seq1", "=", "np", ".", "load", "(", "s", "[", "'seq1_path'", "]", ",", "allow_pickle", "=", "True", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "seq2", "=", "np", ".", "load", "(", "s", "[", "'seq2_path'", "]", ",", "allow_pickle", "=", "True", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", "=", "readFlow", "(", "s", "[", "'flow_path'", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "seq1", ",", "seq2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading.__getitem__": [[70, 73], ["eval.Test_loading._load_sample"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.Test_loading._load_sample"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "seq1", ",", "seq2", ",", "flow", "=", "self", ".", "_load_sample", "(", "self", ".", "samples", "[", "index", "]", ")", "\n", "return", "seq1", ",", "seq2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.validate": [[75, 131], ["model.eval", "os.join", "enumerate", "print", "print", "print", "os.exists", "os.makedirs", "os.makedirs", "seq1_raw.cuda().type.cuda().type", "seq2_raw.cuda().type.cuda().type", "flowgt_raw.cuda().type().permute", "utils.InputPadder", "utils.InputPadder.pad", "time.time", "flows[].clone().detach", "utils.flow_warp", "utils.InputPadder.unpad().detach().permute().squeeze().cpu().numpy", "flowgt.detach().permute().squeeze().cpu().numpy.detach().permute().squeeze().cpu().numpy", "visulization_utils.flow_to_img_scflow", "os.join", "cv2.imwrite", "utils.compute_aee", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "time.time", "print", "print", "seq1_raw.cuda().type.cuda", "seq2_raw.cuda().type.cuda", "flowgt_raw.cuda().type", "flows[].clone", "utils.InputPadder.unpad().detach().permute().squeeze().cpu", "flowgt.detach().permute().squeeze().cpu().numpy.detach().permute().squeeze().cpu", "flowgt_raw.cuda", "utils.InputPadder.unpad().detach().permute().squeeze", "flowgt.detach().permute().squeeze().cpu().numpy.detach().permute().squeeze", "utils.InputPadder.unpad().detach().permute", "flowgt.detach().permute().squeeze().cpu().numpy.detach().permute", "utils.InputPadder.unpad().detach", "flowgt.detach().permute().squeeze().cpu().numpy.detach", "utils.InputPadder.unpad"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.pad", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.flow_warp", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.flow_to_img_scflow", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.compute_aee", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.unpad"], ["", "", "def", "validate", "(", "test_loader", ",", "model", ",", "scene", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "AEE_sum", "=", "0.", "\n", "eval_time_sum", "=", "0.", "\n", "iters", "=", "0.", "\n", "scene_eval_vis_path", "=", "osp", ".", "join", "(", "eval_vis_path", ",", "scene", ")", "\n", "if", "not", "osp", ".", "exists", "(", "scene_eval_vis_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "scene_eval_vis_path", ")", "\n", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ",", "0", ")", ":", "\n", "        ", "seq1_raw", ",", "seq2_raw", ",", "flowgt_raw", "=", "data", "\n", "\n", "# compute output", "\n", "seq1_raw", "=", "seq1_raw", ".", "cuda", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "seq2_raw", "=", "seq2_raw", ".", "cuda", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "flowgt", "=", "flowgt_raw", ".", "cuda", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "permute", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "padder", "=", "InputPadder", "(", "seq1_raw", ".", "shape", ")", "\n", "seq1", ",", "seq2", "=", "padder", ".", "pad", "(", "seq1_raw", ",", "seq2_raw", ")", "\n", "\n", "st_time", "=", "time", ".", "time", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "seq1", ".", "shape", "\n", "flow_init", "=", "torch", ".", "zeros", "(", "[", "B", ",", "2", ",", "H", ",", "W", "]", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flows", ",", "model_res_dict", "=", "model", "(", "seq1", "=", "seq1", ",", "seq2", "=", "seq2", ",", "flow", "=", "flow_init", ",", "dt", "=", "args", ".", "dt", ")", "\n", "", "eval_time", "=", "time", ".", "time", "(", ")", "-", "st_time", "\n", "\n", "flow_init", "=", "flows", "[", "0", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "flow_init", "=", "flow_warp", "(", "flow_init", ",", "-", "flow_init", ")", "\n", "\n", "pred_flow", "=", "padder", ".", "unpad", "(", "flows", "[", "0", "]", ")", ".", "detach", "(", ")", ".", "permute", "(", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flowgt", "=", "flowgt", ".", "detach", "(", ")", ".", "permute", "(", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_flow_vis", "=", "flow_to_img_scflow", "(", "pred_flow", ")", "\n", "pred_flow_vis_path", "=", "osp", ".", "join", "(", "scene_eval_vis_path", ",", "'{:03d}_pred.png'", ".", "format", "(", "i", ")", ")", "\n", "cv2", ".", "imwrite", "(", "pred_flow_vis_path", ",", "pred_flow_vis", ")", "\n", "\n", "AEE", "=", "compute_aee", "(", "flowgt", ",", "pred_flow", ",", "thresh", "=", "1", ")", "\n", "\n", "AEE_sum", "+=", "AEE", "\n", "eval_time_sum", "+=", "eval_time", "\n", "\n", "iters", "+=", "1", "\n", "\n", "if", "args", ".", "print_detail", ":", "\n", "            ", "print", "(", "'Scene: {:8s}, Index {:04d}, AEE: {:6.4f}, Eval Time: {:6.4f}'", ".", "format", "(", "scene", ",", "i", ",", "AEE", ",", "eval_time", ")", ")", "\n", "print", "(", "percent_AEE", ")", "\n", "\n", "# print('-------------------------------------------------------')", "\n", "", "", "print", "(", "'Scene: {:s}, Mean AEE: {:6.4f}, Mean Eval Time: {:6.4f}'", ".", "format", "(", "scene", ",", "AEE_sum", "/", "iters", ",", "eval_time_sum", "/", "iters", ")", ")", "\n", "print", "(", "percent_AEE_sum", "/", "iters", ")", "\n", "print", "(", "'-------------------------------------------------------'", ")", "\n", "\n", "return", "AEE_sum", "/", "iters", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.main": [[133, 157], ["torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "print", "print", "eval.Test_loading", "torch.utils.data.DataLoader", "eval.validate", "torch.nn.DataParallel().cuda.train", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.eval.validate", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.train_scflow.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_EPE", ",", "image_resize", ",", "event_interval", ",", "spiking_ts", ",", "device", ",", "sp_threshold", "\n", "\n", "# create model", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "network_data", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "", "else", ":", "\n", "        ", "network_data", "=", "None", "\n", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "\n", "", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "network_data", ",", "args", ".", "batch_norm", ")", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# for scene in os.listdir(args.test_root):", "\n", "for", "scene", "in", "[", "'ball'", ",", "'cook'", ",", "'dice'", ",", "'dolldrop'", ",", "'fan'", ",", "'fly'", ",", "'hand'", ",", "'jump'", ",", "'poker'", ",", "'top'", "]", ":", "\n", "        ", "Test_dataset", "=", "Test_loading", "(", "scene", "=", "scene", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "Test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ")", "\n", "EPE", "=", "validate", "(", "test_loader", ",", "model", ",", "scene", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.outflow_img": [[6, 19], ["range", "flow[].permute().detach().cpu().numpy", "visulization_utils.flow_to_img_scflow", "cv2.imwrite", "flow[].permute().detach().cpu", "flow[].permute().detach", "flow[].permute"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.flow_to_img_scflow"], ["def", "outflow_img", "(", "flow_list", ",", "vis_path", ",", "name_prefix", "=", "'flow'", ",", "max_batch", "=", "4", ")", ":", "\n", "    ", "flow", "=", "flow_list", "[", "0", "]", "\n", "batch_size", ",", "c", ",", "h", ",", "w", "=", "flow", ".", "shape", "\n", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "if", "batch", ">", "max_batch", ":", "\n", "            ", "break", "\n", "", "flow_current", "=", "flow", "[", "batch", ",", ":", ",", ":", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flow_img", "=", "flow_to_img_scflow", "(", "flow_current", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "vis_path", "+", "'/{:s}_batch_id={:02d}.png'", ".", "format", "(", "name_prefix", ",", "batch", ")", ",", "flow_img", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.out_img": [[20, 31], ["range", "cv2.imwrite", "img[].permute().detach().cpu().numpy", "img[].permute().detach().cpu", "img[].permute().detach", "img[].permute"], "function", ["None"], ["", "def", "out_img", "(", "img", ",", "vis_path", ",", "name_prefix", "=", "None", ",", "max_batch", "=", "4", ")", ":", "\n", "    ", "batch_size", ",", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "if", "batch", ">", "max_batch", ":", "\n", "            ", "break", "\n", "\n", "", "img_current", "=", "img", "[", "batch", ",", ":", ",", ":", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255.0", "\n", "cv2", ".", "imwrite", "(", "vis_path", "+", "'/{:s}_batch_id={:02d}.png'", ".", "format", "(", "name_prefix", ",", "batch", ")", ",", "img_current", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.make_colorwheel": [[32, 80], ["numpy.zeros", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "make_colorwheel", "(", ")", ":", "\n", "    ", "\"\"\"\n    Generates a color wheel for optical flow visualization as presented in:\n        Baker et al. \"A Database and Evaluation Methodology for Optical Flow\" (ICCV, 2007)\n        URL: http://vision.middlebury.edu/flow/flowEval-iccv07.pdf\n\n    Code follows the original C++ source code of Daniel Scharstein.\n    Code follows the the Matlab source code of Deqing Sun.\n\n    Returns:\n        np.ndarray: Color wheel\n    \"\"\"", "\n", "\n", "RY", "=", "15", "\n", "YG", "=", "6", "\n", "GC", "=", "4", "\n", "CB", "=", "11", "\n", "BM", "=", "13", "\n", "MR", "=", "6", "\n", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "(", "ncols", ",", "3", ")", ")", "\n", "col", "=", "0", "\n", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", "\n", "col", "=", "col", "+", "RY", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "=", "col", "+", "YG", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", "\n", "col", "=", "col", "+", "GC", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "CB", ")", "/", "CB", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "=", "col", "+", "CB", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", "\n", "col", "=", "col", "+", "BM", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "MR", ")", "/", "MR", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.flow_uv_to_colors_scflow": [[82, 119], ["numpy.zeros", "visulization_utils.make_colorwheel", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.arctan2", "numpy.floor", "numpy.square", "numpy.square", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.make_colorwheel"], ["", "def", "flow_uv_to_colors_scflow", "(", "u", ",", "v", ",", "convert_to_bgr", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Applies the flow color wheel to (possibly clipped) flow components u and v.\n\n    According to the C++ source code of Daniel Scharstein\n    According to the Matlab source code of Deqing Sun\n\n    Args:\n        u (np.ndarray): Input horizontal flow of shape [H,W]\n        v (np.ndarray): Input vertical flow of shape [H,W]\n        convert_to_bgr (bool, optional): Convert output image to BGR. Defaults to False.\n\n    Returns:\n        np.ndarray: Flow visualization image of shape [H,W,3]\n    \"\"\"", "\n", "flow_image", "=", "np", ".", "zeros", "(", "(", "u", ".", "shape", "[", "0", "]", ",", "u", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "colorwheel", "=", "make_colorwheel", "(", ")", "# shape [55x3]", "\n", "ncols", "=", "colorwheel", ".", "shape", "[", "0", "]", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "u", ")", "/", "np", ".", "pi", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "\n", "k0", "=", "np", ".", "floor", "(", "fk", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "]", "=", "0", "\n", "f", "=", "fk", "-", "k0", "\n", "for", "i", "in", "range", "(", "colorwheel", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "]", "/", "255.0", "\n", "col1", "=", "tmp", "[", "k1", "]", "/", "255.0", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "idx", "=", "(", "rad", "<=", "1", ")", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "col", "[", "~", "idx", "]", "=", "col", "[", "~", "idx", "]", "*", "0.75", "# out of range", "\n", "# Note the 2-i => BGR instead of RGB", "\n", "ch_idx", "=", "2", "-", "i", "if", "convert_to_bgr", "else", "i", "\n", "flow_image", "[", ":", ",", ":", ",", "ch_idx", "]", "=", "np", ".", "floor", "(", "255", "*", "col", ")", "\n", "", "return", "flow_image", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.flow_to_img_scflow": [[121, 145], ["numpy.sqrt", "numpy.max", "visulization_utils.flow_uv_to_colors_scflow", "numpy.clip", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.visulization_utils.flow_uv_to_colors_scflow"], ["", "def", "flow_to_img_scflow", "(", "flow_uv", ",", "clip_flow", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Expects a two dimensional flow image of shape.\n\n    Args:\n        flow_uv (np.ndarray): Flow UV image of shape [H,W,2]\n        clip_flow (float, optional): Clip maximum of flow values. Defaults to None.\n\n    Returns:\n        np.ndarray: Flow visualization image of shape [H,W,3]\n    \"\"\"", "\n", "convert_to_bgr", "=", "False", "\n", "assert", "flow_uv", ".", "ndim", "==", "3", ",", "'input flow must have three dimensions'", "\n", "assert", "flow_uv", ".", "shape", "[", "2", "]", "==", "2", ",", "'input flow must have shape [H,W,2]'", "\n", "if", "clip_flow", "is", "not", "None", ":", "\n", "        ", "flow_uv", "=", "np", ".", "clip", "(", "flow_uv", ",", "0", ",", "clip_flow", ")", "\n", "", "u", "=", "flow_uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow_uv", "[", ":", ",", ":", ",", "1", "]", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "rad_max", "=", "np", ".", "max", "(", "rad", ")", "\n", "epsilon", "=", "1e-5", "\n", "u", "=", "u", "/", "(", "rad_max", "+", "epsilon", ")", "\n", "v", "=", "v", "/", "(", "rad_max", "+", "epsilon", ")", "\n", "return", "flow_uv_to_colors_scflow", "(", "u", ",", "v", ",", "convert_to_bgr", ")", "", "", ""]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.AverageMeter.__init__": [[49, 51], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.AverageMeter.reset": [[52, 57], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.AverageMeter.update": [[58, 63], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.AverageMeter.__repr__": [[64, 66], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{:.3f} ({:.3f})'", ".", "format", "(", "self", ".", "val", ",", "self", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.__init__": [[69, 74], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dims", ")", ":", "\n", "        ", "self", ".", "ht", ",", "self", ".", "wd", "=", "dims", "[", "-", "2", ":", "]", "\n", "pad_ht", "=", "(", "(", "(", "self", ".", "ht", "//", "16", ")", "+", "1", ")", "*", "16", "-", "self", ".", "ht", ")", "%", "16", "\n", "pad_wd", "=", "(", "(", "(", "self", ".", "wd", "//", "16", ")", "+", "1", ")", "*", "16", "-", "self", ".", "wd", ")", "%", "16", "\n", "self", ".", "_pad", "=", "[", "pad_wd", "//", "2", ",", "pad_wd", "-", "pad_wd", "//", "2", ",", "0", ",", "pad_ht", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.pad": [[75, 77], ["torch.pad", "torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.pad", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.pad", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.pad"], ["", "def", "pad", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "return", "[", "F", ".", "pad", "(", "x", ",", "self", ".", "_pad", ",", "mode", "=", "'replicate'", ")", "for", "x", "in", "inputs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.InputPadder.unpad": [[78, 82], ["None"], "methods", ["None"], ["", "def", "unpad", "(", "self", ",", "x", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "c", "=", "[", "self", ".", "_pad", "[", "2", "]", ",", "ht", "-", "self", ".", "_pad", "[", "3", "]", ",", "self", ".", "_pad", "[", "0", "]", ",", "wd", "-", "self", ".", "_pad", "[", "1", "]", "]", "\n", "return", "x", "[", "...", ",", "c", "[", "0", "]", ":", "c", "[", "1", "]", ",", "c", "[", "2", "]", ":", "c", "[", "3", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.mesh_grid": [[9, 16], ["torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.arange().repeat().transpose", "torch.stack", "torch.stack", "torch.stack", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["def", "mesh_grid", "(", "B", ",", "H", ",", "W", ")", ":", "\n", "# mesh grid", "\n", "    ", "x_base", "=", "torch", ".", "arange", "(", "0", ",", "W", ")", ".", "repeat", "(", "B", ",", "H", ",", "1", ")", "# BHW", "\n", "y_base", "=", "torch", ".", "arange", "(", "0", ",", "H", ")", ".", "repeat", "(", "B", ",", "W", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# BHW", "\n", "\n", "base_grid", "=", "torch", ".", "stack", "(", "[", "x_base", ",", "y_base", "]", ",", "1", ")", "# B2HW", "\n", "return", "base_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.norm_grid": [[18, 26], ["v_grid.size", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.permute"], "function", ["None"], ["", "def", "norm_grid", "(", "v_grid", ")", ":", "\n", "    ", "_", ",", "_", ",", "H", ",", "W", "=", "v_grid", ".", "size", "(", ")", "\n", "\n", "# scale grid to [-1,1]", "\n", "v_grid_norm", "=", "torch", ".", "zeros_like", "(", "v_grid", ")", "\n", "v_grid_norm", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "2.0", "*", "v_grid", "[", ":", ",", "0", ",", ":", ",", ":", "]", "/", "(", "W", "-", "1", ")", "-", "1.0", "\n", "v_grid_norm", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "2.0", "*", "v_grid", "[", ":", ",", "1", ",", ":", ",", ":", "]", "/", "(", "H", "-", "1", ")", "-", "1.0", "\n", "return", "v_grid_norm", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# BHW2", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.flow_warp": [[28, 39], ["x.size", "mesh_grid().type_as", "utils.norm_grid", "torch.functional.grid_sample", "torch.functional.grid_sample", "utils.mesh_grid", "inspect.getfullargspec"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.norm_grid", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.mesh_grid"], ["", "def", "flow_warp", "(", "x", ",", "flow12", ",", "pad", "=", "'border'", ",", "mode", "=", "'bilinear'", ")", ":", "\n", "    ", "B", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "\n", "base_grid", "=", "mesh_grid", "(", "B", ",", "H", ",", "W", ")", ".", "type_as", "(", "x", ")", "# B2HW", "\n", "\n", "v_grid", "=", "norm_grid", "(", "base_grid", "+", "flow12", ")", "# BHW2", "\n", "if", "'align_corners'", "in", "inspect", ".", "getfullargspec", "(", "torch", ".", "nn", ".", "functional", ".", "grid_sample", ")", ".", "args", ":", "\n", "        ", "im1_recons", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "v_grid", ",", "mode", "=", "mode", ",", "padding_mode", "=", "pad", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "im1_recons", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "v_grid", ",", "mode", "=", "mode", ",", "padding_mode", "=", "pad", ")", "\n", "", "return", "im1_recons", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.save_checkpoint": [[41, 45], ["torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save_path", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "filename", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.readFlow": [[84, 104], ["open", "numpy.fromfile", "print", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.resize", "int", "int", "int", "int"], "function", ["None"], ["", "", "def", "readFlow", "(", "fn", ")", ":", "\n", "    ", "\"\"\" Read .flo file in Middlebury format\"\"\"", "\n", "# Code adapted from:", "\n", "# http://stackoverflow.com/questions/28013200/reading-middlebury-flow-files-with-python-bytes-array-numpy", "\n", "\n", "# WARNING: this will work on little-endian architectures (eg Intel x86) only!", "\n", "# print 'fn = %s'%(fn)", "\n", "with", "open", "(", "fn", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "\n", "if", "202021.25", "!=", "magic", ":", "\n", "            ", "print", "(", "'Magic number incorrect. Invalid .flo file'", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "w", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "h", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "# print 'Reading %d x %d flo file\\n' % (w, h)", "\n", "data", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "2", "*", "int", "(", "w", ")", "*", "int", "(", "h", ")", ")", "\n", "# Reshape data into 3D array (columns, rows, bands)", "\n", "# The reshape here is for visualization, the original code is (w,h,2)", "\n", "return", "np", ".", "resize", "(", "data", ",", "(", "int", "(", "h", ")", ",", "int", "(", "w", ")", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.writeFlow": [[106, 136], ["open", "open.write", "numpy.array().astype().tofile", "numpy.array().astype().tofile", "numpy.zeros", "np.zeros.astype().tofile", "open.close", "numpy.array().astype", "numpy.array().astype", "np.zeros.astype", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "", "", "def", "writeFlow", "(", "filename", ",", "uv", ",", "v", "=", "None", ")", ":", "\n", "    ", "\"\"\" Write optical flow to file.\n    \n    If v is None, uv is assumed to contain both u and v channels,\n    stacked in depth.\n    Original code by Deqing Sun, adapted from Daniel Scharstein.\n    \"\"\"", "\n", "nBands", "=", "2", "\n", "\n", "if", "v", "is", "None", ":", "\n", "        ", "assert", "(", "uv", ".", "ndim", "==", "3", ")", "\n", "assert", "(", "uv", ".", "shape", "[", "2", "]", "==", "2", ")", "\n", "u", "=", "uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "uv", "[", ":", ",", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "u", "=", "uv", "\n", "\n", "", "assert", "(", "u", ".", "shape", "==", "v", ".", "shape", ")", "\n", "height", ",", "width", "=", "u", ".", "shape", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "# write the header", "\n", "f", ".", "write", "(", "TAG_CHAR", ")", "\n", "np", ".", "array", "(", "width", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "np", ".", "array", "(", "height", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "# arrange into matrix form", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", "*", "nBands", ")", ")", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "]", "=", "u", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "+", "1", "]", "=", "v", "\n", "tmp", ".", "astype", "(", "np", ".", "float32", ")", ".", "tofile", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.supervised_loss": [[138, 155], ["flow_preds[].abs().mean", "enumerate", "sum", "pym_losses.append", "flow_preds[].abs", "torch.interpolate", "int", "zip"], "function", ["None"], ["", "def", "supervised_loss", "(", "flow_preds", ",", "flow_gt", ",", "loss_dict", ")", ":", "\n", "    ", "w_scales", "=", "loss_dict", "[", "'w_scales'", "]", "\n", "res_dict", "=", "{", "}", "\n", "res_dict", "[", "'flow_mean'", "]", "=", "flow_preds", "[", "0", "]", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "pym_losses", "=", "[", "]", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "flow_gt", ".", "shape", "\n", "\n", "for", "i", ",", "flow", "in", "enumerate", "(", "flow_preds", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "flow", ".", "shape", "\n", "flowgt_scaled", "=", "F", ".", "interpolate", "(", "flow_gt", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "*", "(", "h", "/", "H", ")", "\n", "\n", "curr_loss", "=", "(", "flowgt_scaled", "-", "flow", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "pym_losses", ".", "append", "(", "curr_loss", ")", "\n", "\n", "", "loss", "=", "[", "l", "*", "int", "(", "w", ")", "for", "l", ",", "w", "in", "zip", "(", "pym_losses", ",", "w_scales", ")", "]", "\n", "loss", "=", "sum", "(", "loss", ")", "\n", "return", "loss", ",", "res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.compute_aee": [[157, 167], ["numpy.linalg.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "compute_aee", "(", "flow_gt", ",", "flow_pred", ")", ":", "\n", "    ", "EE", "=", "np", ".", "linalg", ".", "norm", "(", "flow_gt", "-", "flow_pred", ",", "axis", "=", "-", "1", ")", "\n", "EE", "=", "torch", ".", "from_numpy", "(", "EE", ")", "\n", "\n", "if", "torch", ".", "sum", "(", "EE", ")", "==", "0", ":", "\n", "        ", "AEE", "=", "0", "\n", "", "else", ":", "\n", "        ", "AEE", "=", "torch", ".", "mean", "(", "EE", ")", "\n", "\n", "", "return", "AEE", "", "", ""]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.encoding.save_vidar_h5.RawToSpike": [[8, 30], ["numpy.array().astype", "numpy.zeros", "numpy.arange", "numpy.reshape", "numpy.left_shift", "numpy.arange", "len", "numpy.mod", "numpy.bitwise_and", "numpy.array", "numpy.flipud"], "function", ["None"], ["def", "RawToSpike", "(", "video_seq", ",", "h", ",", "w", ")", ":", "\n", "    ", "video_seq", "=", "np", ".", "array", "(", "video_seq", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img_size", "=", "h", "*", "w", "\n", "img_num", "=", "len", "(", "video_seq", ")", "//", "(", "img_size", "//", "8", ")", "\n", "SpikeMatrix", "=", "np", ".", "zeros", "(", "[", "img_num", ",", "h", ",", "w", "]", ",", "np", ".", "uint8", ")", "\n", "pix_id", "=", "np", ".", "arange", "(", "0", ",", "h", "*", "w", ")", "\n", "pix_id", "=", "np", ".", "reshape", "(", "pix_id", ",", "(", "h", ",", "w", ")", ")", "\n", "comparator", "=", "np", ".", "left_shift", "(", "1", ",", "np", ".", "mod", "(", "pix_id", ",", "8", ")", ")", "\n", "byte_id", "=", "pix_id", "//", "8", "\n", "\n", "for", "img_id", "in", "np", ".", "arange", "(", "img_num", ")", ":", "\n", "        ", "id_start", "=", "img_id", "*", "img_size", "//", "8", "\n", "id_end", "=", "id_start", "+", "img_size", "//", "8", "\n", "cur_info", "=", "video_seq", "[", "id_start", ":", "id_end", "]", "\n", "data", "=", "cur_info", "[", "byte_id", "]", "\n", "result", "=", "np", ".", "bitwise_and", "(", "data", ",", "comparator", ")", "\n", "if", "args", ".", "flipud", ":", "\n", "            ", "SpikeMatrix", "[", "img_id", ",", ":", ",", ":", "]", "=", "np", ".", "flipud", "(", "(", "result", "==", "comparator", ")", ")", "\n", "", "else", ":", "\n", "            ", "SpikeMatrix", "[", "img_id", ",", ":", ",", ":", "]", "=", "(", "result", "==", "comparator", ")", "\n", "\n", "", "", "return", "SpikeMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.encoding.save_vidar_h5.save_to_h5": [[31, 37], ["os.path.join", "print", "h5py.File", "h5py.File.close"], "function", ["None"], ["", "def", "save_to_h5", "(", "SpikeMatrix", ")", ":", "\n", "    ", "h5path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "args", ".", "h5_name", ")", "\n", "print", "(", "'save'", ",", "h5path", ")", "\n", "f", "=", "h5py", ".", "File", "(", "h5path", ",", "'w'", ")", "\n", "f", "[", "'raw_spike'", "]", "=", "SpikeMatrix", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.corr.corr": [[14, 27], ["spatial_correlation_sample", "spatial_correlation_sample.size", "torch.leaky_relu_", "spatial_correlation_sample.view", "input1.size"], "function", ["None"], ["", "", "def", "corr", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "out_corr", "=", "spatial_correlation_sample", "(", "input1", ",", "\n", "input2", ",", "\n", "kernel_size", "=", "1", ",", "\n", "patch_size", "=", "9", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation_patch", "=", "1", ")", "\n", "# collate dimensions 1 and 2 in order to be treated as a", "\n", "# regular 4D tensor", "\n", "b", ",", "ph", ",", "pw", ",", "h", ",", "w", "=", "out_corr", ".", "size", "(", ")", "\n", "out_corr", "=", "out_corr", ".", "view", "(", "b", ",", "ph", "*", "pw", ",", "h", ",", "w", ")", "/", "input1", ".", "size", "(", "1", ")", "\n", "return", "F", ".", "leaky_relu_", "(", "out_corr", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.corr.crop_like": [[29, 34], ["input.size", "target.size", "target.size", "target.size"], "function", ["None"], ["", "def", "crop_like", "(", "input", ",", "target", ")", ":", "\n", "    ", "if", "input", ".", "size", "(", ")", "[", "2", ":", "]", "==", "target", ".", "size", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "return", "input", "\n", "", "else", ":", "\n", "        ", "return", "input", "[", ":", ",", ":", ",", ":", "target", ".", "size", "(", "2", ")", ",", ":", "target", ".", "size", "(", "3", ")", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.SpikeRepresentation.__init__": [[13, 20], ["torch.Module.__init__", "models.util.conv", "models.util.conv"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.__init__", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv"], ["    ", "def", "__init__", "(", "self", ",", "data_length", "=", "25", ",", "batchNorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpikeRepresentation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batchNorm", "=", "batchNorm", "\n", "\n", "# conv for spike tensor", "\n", "self", ".", "conv_s1", "=", "conv", "(", "self", ".", "batchNorm", ",", "25", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv_s2", "=", "conv", "(", "self", ".", "batchNorm", ",", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.SpikeRepresentation.warp_slices": [[21, 32], ["seq.reshape.reshape.reshape", "flow_factor.reshape.reshape.reshape", "flow.unsqueeze.unsqueeze.unsqueeze", "factored_flow.reshape.reshape.reshape", "utils.flow_warp", "seq.reshape.reshape.reshape", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.flow_warp"], ["", "def", "warp_slices", "(", "self", ",", "seq", ",", "flow", ",", "dt", "=", "10", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "seq", ".", "shape", "\n", "seq", "=", "seq", ".", "reshape", "(", "[", "b", "*", "c", ",", "1", ",", "h", ",", "w", "]", ")", "\n", "flow_factor", "=", "(", "torch", ".", "linspace", "(", "-", "12", ",", "12", ",", "steps", "=", "25", ")", "/", "dt", ")", ".", "cuda", "(", ")", "\n", "flow_factor", "=", "flow_factor", ".", "reshape", "(", "[", "1", ",", "c", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "flow", "=", "flow", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "factored_flow", "=", "flow", "*", "flow_factor", "\n", "factored_flow", "=", "factored_flow", ".", "reshape", "(", "[", "b", "*", "c", ",", "2", ",", "h", ",", "w", "]", ")", "\n", "seq", "=", "flow_warp", "(", "seq", ",", "factored_flow", ")", "\n", "seq", "=", "seq", ".", "reshape", "(", "[", "b", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.SpikeRepresentation.forward": [[33, 47], ["utils.flow_warp.clone().detach", "scflow.SpikeRepresentation.warp_slices", "scflow.SpikeRepresentation.conv_s2", "utils.flow_warp", "scflow.SpikeRepresentation.conv_s1", "utils.flow_warp.clone"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.SpikeRepresentation.warp_slices", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.flow_warp"], ["", "def", "forward", "(", "self", ",", "seq", ",", "flow_input", ",", "dt", "=", "10", ",", "warp", "=", "False", ")", ":", "\n", "# mask generation", "\n", "        ", "if", "warp", ":", "\n", "            ", "flow_input", "=", "flow_warp", "(", "flow_input", ",", "-", "1", "*", "flow_input", ")", "\n", "\n", "", "flow", "=", "flow_input", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "# warp every slice in seq", "\n", "seq", "=", "self", ".", "warp_slices", "(", "seq", ",", "flow", ",", "dt", "=", "dt", ")", "\n", "\n", "# conv for spike tensor", "\n", "rep", "=", "self", ".", "conv_s2", "(", "self", ".", "conv_s1", "(", "seq", ")", ")", "\n", "\n", "return", "rep", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.FeatureEncoder.__init__": [[50, 68], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "zip", "scflow.FeatureEncoder.conv_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.util.conv", "models.util.conv", "models.util.conv", "models.util.conv"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.__init__", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv"], ["    ", "def", "__init__", "(", "self", ",", "num_chs", ",", "batchNorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "FeatureEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batchNorm", "=", "batchNorm", "\n", "self", ".", "num_chs", "=", "num_chs", "\n", "self", ".", "conv_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "l", ",", "(", "ch_in", ",", "ch_out", ")", "in", "enumerate", "(", "zip", "(", "num_chs", "[", ":", "-", "1", "]", ",", "num_chs", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "if", "l", "==", "0", ":", "\n", "                ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "self", ".", "batchNorm", ",", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "conv", "(", "self", ".", "batchNorm", ",", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "self", ".", "batchNorm", ",", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "conv", "(", "self", ".", "batchNorm", ",", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", ")", "\n", "", "self", ".", "conv_list", ".", "append", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.FeatureEncoder.forward": [[69, 76], ["conv_module", "feature_pyramid.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feature_pyramid", "=", "[", "]", "\n", "for", "conv_module", "in", "self", ".", "conv_list", ":", "\n", "            ", "x", "=", "conv_module", "(", "x", ")", "\n", "feature_pyramid", ".", "append", "(", "x", ")", "\n", "\n", "", "return", "feature_pyramid", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.FlowEstimator.__init__": [[79, 86], ["torch.Module.__init__", "models.util.conv", "models.util.conv", "models.util.conv", "models.util.conv_s"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.__init__", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv_s"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "batchNorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "FlowEstimator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batchNorm", "=", "batchNorm", "\n", "self", ".", "conv1", "=", "conv", "(", "self", ".", "batchNorm", ",", "ch_in", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "self", ".", "batchNorm", ",", "ch_in", "+", "96", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "self", ".", "batchNorm", ",", "ch_in", "+", "96", "+", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv4", "=", "conv_s", "(", "self", ".", "batchNorm", ",", "ch_in", "+", "96", "+", "64", "+", "32", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.FlowEstimator.forward": [[87, 93], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scflow.FlowEstimator.conv4", "scflow.FlowEstimator.conv1", "scflow.FlowEstimator.conv2", "scflow.FlowEstimator.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv1", "(", "x", ")", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv2", "(", "x1", ")", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv3", "(", "x2", ")", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "x_out", "=", "self", ".", "conv4", "(", "x3", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.__init__": [[96, 114], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "scflow.SpikeRepresentation", "scflow.FeatureEncoder", "scflow.FlowEstimator", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.util.conv_s", "models.util.conv_s", "models.util.conv_s", "models.util.conv_s"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.__init__", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv_s", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv_s", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv_s", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv_s"], ["    ", "def", "__init__", "(", "self", ",", "batchNorm", ")", ":", "\n", "        ", "super", "(", "scflow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batchNorm", "=", "batchNorm", "\n", "self", ".", "search_range", "=", "4", "\n", "self", ".", "num_chs", "=", "[", "32", ",", "32", ",", "64", ",", "96", ",", "128", "]", "\n", "self", ".", "output_level", "=", "4", "\n", "self", ".", "leakyReLU", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "spike_representation", "=", "SpikeRepresentation", "(", "batchNorm", "=", "self", ".", "batchNorm", ")", "\n", "self", ".", "feature_encoder", "=", "FeatureEncoder", "(", "num_chs", "=", "self", ".", "num_chs", ",", "batchNorm", "=", "self", ".", "batchNorm", ")", "\n", "self", ".", "dim_corr", "=", "(", "self", ".", "search_range", "*", "2", "+", "1", ")", "**", "2", "\n", "self", ".", "num_ch_in", "=", "32", "+", "self", ".", "dim_corr", "+", "2", "\n", "self", ".", "flow_estimators", "=", "FlowEstimator", "(", "self", ".", "num_ch_in", ")", "\n", "\n", "self", ".", "conv_1x1", "=", "nn", ".", "ModuleList", "(", "[", "conv_s", "(", "False", ",", "128", ",", "32", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "conv_s", "(", "False", ",", "96", ",", "32", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "conv_s", "(", "False", ",", "64", ",", "32", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "conv_s", "(", "False", ",", "32", ",", "32", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.weight_parameters": [[115, 117], ["scflow.scflow.named_parameters"], "methods", ["None"], ["", "def", "weight_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "param", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", "if", "'weight'", "in", "name", "]", "\n", "", "def", "bias_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.bias_parameters": [[117, 119], ["scflow.scflow.named_parameters"], "methods", ["None"], ["", "def", "bias_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "param", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", "if", "'bias'", "in", "name", "]", "\n", "", "def", "num_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.num_parameters": [[119, 121], ["sum", "p.data.nelement", "scflow.scflow.parameters"], "methods", ["None"], ["", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "if", "p", ".", "requires_grad", "else", "0", "for", "p", "in", "self", ".", "parameters", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.init_weights": [[122, 133], ["scflow.scflow.named_modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "layer", ".", "weight", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "layer", ".", "weight", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.forward": [[134, 174], ["scflow.scflow.spike_representation", "scflow.scflow.spike_representation", "scflow.scflow.abs().mean", "scflow.scflow.abs().mean", "scflow.scflow.feature_encoder", "scflow.scflow.feature_encoder", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "enumerate", "zip", "models.corr.corr", "scflow.scflow.flow_estimators", "flows.append", "scflow.scflow.abs", "scflow.scflow.abs", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.flow_warp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.corr.corr", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.None.utils.flow_warp"], ["", "", "", "", "def", "forward", "(", "self", ",", "seq1", ",", "seq2", ",", "flow", ",", "dt", "=", "10", ")", ":", "\n", "        ", "res_dict", "=", "{", "}", "\n", "\n", "flows", "=", "[", "]", "\n", "\n", "x1_repre", "=", "self", ".", "spike_representation", "(", "seq1", ",", "flow", ",", "warp", "=", "False", ",", "dt", "=", "dt", ")", "\n", "x2_repre", "=", "self", ".", "spike_representation", "(", "seq2", ",", "flow", ",", "warp", "=", "True", ",", "dt", "=", "dt", ")", "\n", "\n", "res_dict", "[", "'x1_repre'", "]", "=", "x1_repre", ".", "abs", "(", ")", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "res_dict", "[", "'x2_repre'", "]", "=", "x2_repre", ".", "abs", "(", ")", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "x1_pym", "=", "self", ".", "feature_encoder", "(", "x1_repre", ")", "\n", "x2_pym", "=", "self", ".", "feature_encoder", "(", "x2_repre", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "x1_pym", "[", "0", "]", ".", "shape", "\n", "init_dtype", "=", "x1_pym", "[", "0", "]", ".", "dtype", "\n", "init_device", "=", "x1_pym", "[", "0", "]", ".", "device", "\n", "flow", "=", "torch", ".", "zeros", "(", "b", ",", "2", ",", "h", ",", "w", ",", "dtype", "=", "init_dtype", ",", "device", "=", "init_device", ")", ".", "float", "(", ")", "\n", "\n", "for", "l", ",", "(", "x1", ",", "x2", ")", "in", "enumerate", "(", "zip", "(", "x1_pym", ",", "x2_pym", ")", ")", ":", "\n", "\n", "# warping", "\n", "            ", "if", "l", "==", "0", ":", "\n", "                ", "x2_warp", "=", "x2", "\n", "", "else", ":", "\n", "                ", "flow", "=", "F", ".", "interpolate", "(", "flow", "*", "2", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x2_warp", "=", "flow_warp", "(", "x2", ",", "flow", ")", "\n", "\n", "# correlation", "\n", "", "out_corr", "=", "corr", "(", "x1", ",", "x2_warp", ")", "\n", "\n", "# flow estimating", "\n", "x1_1x1", "=", "self", ".", "conv_1x1", "[", "l", "]", "(", "x1", ")", "\n", "flow_res", "=", "self", ".", "flow_estimators", "(", "torch", ".", "cat", "(", "[", "out_corr", ",", "x1_1x1", ",", "flow", "]", ",", "dim", "=", "1", ")", ")", "\n", "flow", "=", "flow", "+", "flow_res", "\n", "\n", "\n", "flows", ".", "append", "(", "flow", ")", "\n", "\n", "", "return", "flows", "[", ":", ":", "-", "1", "]", ",", "res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow": [[176, 183], ["scflow.scflow", "scflow.load_state_dict", "scflow.init_weights"], "function", ["home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow", "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.scflow.scflow.init_weights"], ["", "", "def", "scflow", "(", "data", "=", "None", ",", "batchNorm", "=", "False", ")", ":", "\n", "    ", "model", "=", "scflow", "(", "batchNorm", "=", "batchNorm", ")", "\n", "if", "data", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "data", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "init_weights", "(", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv": [[6, 17], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.LeakyReLU"], "function", ["None"], ["def", "conv", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", "//", "2", ",", "bias", "=", "True", ",", "dilation", "=", "dilation", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", "//", "2", ",", "bias", "=", "True", ",", "dilation", "=", "dilation", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.conv_s": [[20, 29], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d"], "function", ["None"], ["", "", "def", "conv_s", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", "//", "2", ",", "bias", "=", "True", ",", "dilation", "=", "dilation", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", "//", "2", ",", "bias", "=", "True", ",", "dilation", "=", "dilation", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.predict_flow": [[32, 41], ["torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d"], "function", ["None"], ["", "", "def", "predict_flow", "(", "batchNorm", ",", "in_planes", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.deconv": [[44, 54], ["torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.LeakyReLU"], "function", ["None"], ["", "", "def", "deconv", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acnext_optical-flow-for-spiking-camera.models.util.crop_like": [[55, 60], ["input.size", "target.size", "target.size", "target.size"], "function", ["None"], ["", "", "def", "crop_like", "(", "input", ",", "target", ")", ":", "\n", "    ", "if", "input", ".", "size", "(", ")", "[", "2", ":", "]", "==", "target", ".", "size", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "return", "input", "\n", "", "else", ":", "\n", "        ", "return", "input", "[", ":", ",", ":", ",", ":", "target", ".", "size", "(", "2", ")", ",", ":", "target", ".", "size", "(", "3", ")", "]", "\n", "", "", ""]]}