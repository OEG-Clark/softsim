{"home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_par.run": [[14, 63], ["main_par.setup_seed", "utils.load_data", "adj.cuda.cuda", "features.cuda.cuda", "labels.cuda.cuda", "torch.CrossEntropyLoss", "utils.load_adj_raw().tocoo", "utils.partition().cuda", "net.net_gcn_multitask", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "features.cuda.size", "labels.cuda.numpy().max", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "utils.load_adj_raw", "utils.partition", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels.cuda.numpy", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu", "output[].cpu().numpy", "labels[].cpu", "output[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "output[].cpu", "output[].cpu", "nn.CrossEntropyLoss."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_adj_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.partition"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "args", "[", "'dataset'", "]", ")", "\n", "\n", "node_num", "=", "features", ".", "size", "(", ")", "[", "0", "]", "\n", "class_num", "=", "labels", ".", "numpy", "(", ")", ".", "max", "(", ")", "+", "1", "\n", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "early_stopping", "=", "10", "\n", "\n", "adj_raw", "=", "load_adj_raw", "(", "args", "[", "'dataset'", "]", ")", ".", "tocoo", "(", ")", "\n", "ss_labels", "=", "partition", "(", "adj_raw", ",", "args", "[", "'partitioning_num'", "]", ")", ".", "cuda", "(", ")", "\n", "net_gcn", "=", "net", ".", "net_gcn_multitask", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ",", "ss_dim", "=", "args", "[", "'partitioning_num'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_val", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "output_ss", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "loss_target", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_ss", "=", "loss_func", "(", "output_ss", ",", "ss_labels", ")", "\n", "loss", "=", "loss_target", "*", "args", "[", "'loss_weight'", "]", "+", "loss_ss", "*", "(", "1", "-", "args", "[", "'loss_weight'", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_target.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu().numpy(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "acc_val", "=", "f1_score", "(", "labels", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "acc_test", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "", "return", "acc_val", ",", "acc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_par.parser_loader": [[65, 75], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Self-Supervised GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--partitioning-num'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-weight'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--grid-search'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_par.setup_seed": [[77, 83], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_comp.run": [[14, 70], ["main_comp.setup_seed", "utils.load_data", "adj.cuda.cuda", "features.cuda.cuda", "labels.cuda.cuda", "torch.CrossEntropyLoss", "torch.L1Loss", "utils.load_adj_raw().tocsr", "list", "utils.sparse_mx_to_torch_sparse_tensor().cuda", "features.cuda.svd", "ss_labels[].cuda", "net.net_gcn_multitask", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "features.cuda.size", "labels.cuda.numpy().max", "range", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "utils.load_adj_raw", "utils.sparse_mx_to_torch_sparse_tensor", "nn.L1Loss.", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "labels.cuda.numpy", "utils.normalize_adj", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu", "output[].cpu().numpy", "labels[].cpu", "output[].cpu().numpy", "output[].cpu", "output[].cpu"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_adj_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.normalize_adj"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "args", "[", "'dataset'", "]", ")", "\n", "\n", "node_num", "=", "features", ".", "size", "(", ")", "[", "0", "]", "\n", "class_num", "=", "labels", ".", "numpy", "(", ")", ".", "max", "(", ")", "+", "1", "\n", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_func_ss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "early_stopping", "=", "10", "\n", "\n", "adj_raw", "=", "load_adj_raw", "(", "args", "[", "'dataset'", "]", ")", ".", "tocsr", "(", ")", "\n", "idx_mask", "=", "list", "(", "range", "(", "node_num", ")", ")", "\n", "adj_mask", "=", "adj_raw", "\n", "adj_mask", "[", "idx_mask", ",", "idx_mask", "]", "=", "0", "\n", "adj_mask", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "adj_mask", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "reduced_dim", "=", "args", "[", "'reduced_dimension'", "]", "\n", "ss_labels", ",", "_", ",", "_", "=", "features", ".", "svd", "(", ")", "\n", "ss_labels", "=", "ss_labels", "[", ":", ",", ":", "reduced_dim", "]", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn_multitask", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ",", "ss_dim", "=", "args", "[", "'reduced_dimension'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "best_val", "=", "0", "\n", "best_val_test", "=", "0", "\n", "for", "epoch", "in", "range", "(", "500", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "_", ",", "output_ss", "=", "net_gcn", "(", "features", ",", "adj_mask", ")", "\n", "loss_target", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_ss", "=", "loss_func_ss", "(", "output_ss", ",", "ss_labels", ")", "*", "1e2", "\n", "loss", "=", "loss_target", "+", "loss_ss", "*", "args", "[", "'loss_weight'", "]", "\n", "# print('epoch', epoch, 'loss', loss_target.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "# loss_val.append(loss_func(output[idx_val], labels[idx_val]).cpu().numpy())", "\n", "# print('val acc', f1_score(labels[idx_val].cpu().numpy(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "acc_val", "=", "f1_score", "(", "labels", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "acc_test", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "if", "acc_val", ">", "best_val", ":", "\n", "                ", "best_val", "=", "acc_val", "\n", "best_val_test", "=", "acc_test", "\n", "\n", "", "", "", "return", "best_val", ",", "best_val_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_comp.parser_loader": [[72, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Self-Supervised GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--reduced-dimension'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-weight'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--grid-search'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_comp.setup_seed": [[84, 90], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main.run": [[14, 59], ["main.setup_seed", "utils.load_data", "adj.cuda.cuda", "features.cuda.cuda", "labels.cuda.cuda", "torch.CrossEntropyLoss", "net.net_gcn", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "features.cuda.size", "labels.cuda.numpy().max", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels.cuda.numpy", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu", "output[].cpu().numpy", "labels[].cpu", "output[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "output[].cpu", "output[].cpu", "nn.CrossEntropyLoss."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "args", "[", "'dataset'", "]", ")", "\n", "\n", "node_num", "=", "features", ".", "size", "(", ")", "[", "0", "]", "\n", "class_num", "=", "labels", ".", "numpy", "(", ")", ".", "max", "(", ")", "+", "1", "\n", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "early_stopping", "=", "10", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_val", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "loss", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu().numpy(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "acc_val", "=", "f1_score", "(", "labels", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "acc_test", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "", "return", "acc_val", ",", "acc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main.parser_loader": [[61, 68], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Self-Supervised GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main.setup_seed": [[70, 76], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat_comp.run": [[18, 85], ["main_gingat_comp.setup_seed", "utils.load_data", "utils.load_adj_raw", "dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "adj.tocoo.tocoo", "dgl.DGLGraph.add_edges", "features.cuda.cuda", "labels.cuda.cuda", "torch.CrossEntropyLoss", "torch.L1Loss", "utils.load_adj_raw().tocsr", "list", "utils.sparse_mx_to_torch_sparse_tensor().cuda", "features.cuda.svd", "ss_labels[].cuda", "gnns.gat_net.GATNet_ss.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "features.cuda.size", "labels.cuda.numpy().max", "gnns.gin_net.GINNet_ss", "gnns.gat_net.GATNet_ss", "dgl.DGLGraph.add_edges", "range", "gnns.gat_net.GATNet_ss.parameters", "torch.optim.Adam.zero_grad", "gnns.gat_net.GATNet_ss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "list", "list", "utils.load_adj_raw", "utils.sparse_mx_to_torch_sparse_tensor", "nn.L1Loss.", "torch.no_grad", "torch.no_grad", "gnns.gat_net.GATNet_ss.eval", "gnns.gat_net.GATNet_ss.", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "labels.cuda.numpy", "range", "range", "utils.normalize_adj", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu", "output[].cpu().numpy", "labels[].cpu", "output[].cpu().numpy", "output[].cpu", "output[].cpu"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_adj_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_adj_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.normalize_adj"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "args", "[", "'dataset'", "]", ")", "\n", "adj", "=", "load_adj_raw", "(", "args", "[", "'dataset'", "]", ")", "\n", "\n", "node_num", "=", "features", ".", "size", "(", ")", "[", "0", "]", "\n", "class_num", "=", "labels", ".", "numpy", "(", ")", ".", "max", "(", ")", "+", "1", "\n", "\n", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "node_num", ")", "\n", "adj", "=", "adj", ".", "tocoo", "(", ")", "\n", "g", ".", "add_edges", "(", "adj", ".", "row", ",", "adj", ".", "col", ")", "\n", "\n", "# adj = adj.cuda()", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_func_ss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "early_stopping", "=", "10", "\n", "\n", "if", "args", "[", "'net'", "]", "==", "'gin'", ":", "\n", "        ", "net_gcn", "=", "GINNet_ss", "(", "args", "[", "'embedding_dim'", "]", ",", "args", "[", "'reduced_dimension'", "]", ")", "\n", "", "else", ":", "\n", "        ", "net_gcn", "=", "GATNet_ss", "(", "args", "[", "'embedding_dim'", "]", ",", "args", "[", "'reduced_dimension'", "]", ")", "\n", "g", ".", "add_edges", "(", "list", "(", "range", "(", "node_num", ")", ")", ",", "list", "(", "range", "(", "node_num", ")", ")", ")", "\n", "\n", "", "adj_raw", "=", "load_adj_raw", "(", "args", "[", "'dataset'", "]", ")", ".", "tocsr", "(", ")", "\n", "idx_mask", "=", "list", "(", "range", "(", "node_num", ")", ")", "\n", "adj_mask", "=", "adj_raw", "\n", "adj_mask", "[", "idx_mask", ",", "idx_mask", "]", "=", "0", "\n", "adj_mask", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "adj_mask", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "reduced_dim", "=", "args", "[", "'reduced_dimension'", "]", "\n", "ss_labels", ",", "_", ",", "_", "=", "features", ".", "svd", "(", ")", "\n", "ss_labels", "=", "ss_labels", "[", ":", ",", ":", "reduced_dim", "]", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "best_val", "=", "0", "\n", "best_val_test", "=", "0", "\n", "for", "epoch", "in", "range", "(", "500", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "output_ss", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "loss_target", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_ss", "=", "loss_func_ss", "(", "output_ss", ",", "ss_labels", ")", "*", "1e2", "\n", "loss", "=", "loss_target", "+", "loss_ss", "*", "args", "[", "'loss_weight'", "]", "\n", "# print('epoch', epoch, 'loss', loss_target.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "net_gcn", ".", "eval", "(", ")", "\n", "output", ",", "_", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "# loss_val.append(loss_func(output[idx_val], labels[idx_val]).cpu().numpy())", "\n", "# print('val acc', f1_score(labels[idx_val].cpu().numpy(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "acc_val", "=", "f1_score", "(", "labels", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "acc_test", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "if", "acc_val", ">", "best_val", ":", "\n", "                ", "best_val", "=", "acc_val", "\n", "best_val_test", "=", "acc_test", "\n", "\n", "", "", "", "return", "best_val", ",", "best_val_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat_comp.parser_loader": [[87, 98], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Self-Supervised GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--reduced-dimension'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-weight'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--grid-search'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "type", "=", "str", ",", "default", "=", "'gin'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat_comp.setup_seed": [[100, 106], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat_par.run": [[18, 80], ["main_gingat_par.setup_seed", "utils.load_data", "utils.load_adj_raw", "dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "adj.tocoo.tocoo", "dgl.DGLGraph.add_edges", "features.cuda.cuda", "labels.cuda.cuda", "torch.CrossEntropyLoss", "utils.load_adj_raw().tocoo", "utils.partition().cuda", "gnns.gat_net.GATNet_ss.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "features.cuda.size", "labels.cuda.numpy().max", "gnns.gin_net.GINNet_ss", "gnns.gat_net.GATNet_ss", "dgl.DGLGraph.add_edges", "gnns.gat_net.GATNet_ss.parameters", "torch.optim.Adam.zero_grad", "gnns.gat_net.GATNet_ss.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "gnns.gat_net.GATNet_ss.eval", "gnns.gat_net.GATNet_ss.", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "list", "list", "utils.load_adj_raw", "utils.partition", "torch.no_grad", "torch.no_grad", "gnns.gat_net.GATNet_ss.eval", "gnns.gat_net.GATNet_ss.", "loss_val.append", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels.cuda.numpy", "range", "range", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu", "output[].cpu().numpy", "labels[].cpu", "output[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "output[].cpu", "output[].cpu", "nn.CrossEntropyLoss."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_adj_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_adj_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.partition"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "args", "[", "'dataset'", "]", ")", "\n", "adj", "=", "load_adj_raw", "(", "args", "[", "'dataset'", "]", ")", "\n", "\n", "node_num", "=", "features", ".", "size", "(", ")", "[", "0", "]", "\n", "class_num", "=", "labels", ".", "numpy", "(", ")", ".", "max", "(", ")", "+", "1", "\n", "\n", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "node_num", ")", "\n", "adj", "=", "adj", ".", "tocoo", "(", ")", "\n", "g", ".", "add_edges", "(", "adj", ".", "row", ",", "adj", ".", "col", ")", "\n", "\n", "# adj = adj.cuda()", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "early_stopping", "=", "10", "\n", "\n", "if", "args", "[", "'net'", "]", "==", "'gin'", ":", "\n", "        ", "net_gcn", "=", "GINNet_ss", "(", "args", "[", "'embedding_dim'", "]", ",", "args", "[", "'partitioning_num'", "]", ")", "\n", "", "else", ":", "\n", "        ", "net_gcn", "=", "GATNet_ss", "(", "args", "[", "'embedding_dim'", "]", ",", "args", "[", "'partitioning_num'", "]", ")", "\n", "g", ".", "add_edges", "(", "list", "(", "range", "(", "node_num", ")", ")", ",", "list", "(", "range", "(", "node_num", ")", ")", ")", "\n", "\n", "", "adj_raw", "=", "load_adj_raw", "(", "args", "[", "'dataset'", "]", ")", ".", "tocoo", "(", ")", "\n", "ss_labels", "=", "partition", "(", "adj_raw", ",", "args", "[", "'partitioning_num'", "]", ")", ".", "cuda", "(", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_val", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "output_ss", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "loss_target", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_ss", "=", "loss_func", "(", "output_ss", ",", "ss_labels", ")", "\n", "loss", "=", "loss_target", "*", "args", "[", "'loss_weight'", "]", "+", "loss_ss", "*", "(", "1", "-", "args", "[", "'loss_weight'", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_target.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "net_gcn", ".", "eval", "(", ")", "\n", "output", ",", "_", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu().numpy(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "net_gcn", ".", "eval", "(", ")", "\n", "output", ",", "_", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "acc_val", "=", "f1_score", "(", "labels", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "acc_test", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "", "return", "acc_val", ",", "acc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat_par.parser_loader": [[82, 93], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Self-Supervised GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--partitioning-num'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-weight'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--grid-search'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "type", "=", "str", ",", "default", "=", "'gin'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat_par.setup_seed": [[95, 101], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.net.net_gcn.__init__": [[7, 14], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "len", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_num", "=", "len", "(", "embedding_dim", ")", "-", "1", "\n", "self", ".", "net_layer", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "embedding_dim", "[", "ln", "]", ",", "embedding_dim", "[", "ln", "+", "1", "]", ",", "bias", "=", "False", ")", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.net.net_gcn.forward": [[15, 27], ["range", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "net.net_gcn.relu", "net.net_gcn.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ",", "val_test", "=", "False", ")", ":", "\n", "\n", "        ", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "x", "=", "torch", ".", "spmm", "(", "adj", ",", "x", ")", "\n", "x", "=", "self", ".", "net_layer", "[", "ln", "]", "(", "x", ")", "\n", "if", "ln", "==", "self", ".", "layer_num", "-", "1", ":", "\n", "                ", "break", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "val_test", ":", "\n", "                ", "continue", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.net.net_gcn_multitask.__init__": [[31, 39], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "len", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "ss_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_num", "=", "len", "(", "embedding_dim", ")", "-", "1", "\n", "self", ".", "net_layer", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "embedding_dim", "[", "ln", "]", ",", "embedding_dim", "[", "ln", "+", "1", "]", ",", "bias", "=", "False", ")", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", "]", ")", "\n", "self", ".", "ss_classifier", "=", "nn", ".", "Linear", "(", "embedding_dim", "[", "-", "2", "]", ",", "ss_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.net.net_gcn_multitask.forward": [[40, 65], ["range", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "net.net_gcn_multitask.relu", "net.net_gcn_multitask.dropout", "range", "net.net_gcn_multitask.ss_classifier", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "net.net_gcn_multitask.relu", "net.net_gcn_multitask.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ",", "val_test", "=", "False", ")", ":", "\n", "\n", "        ", "x_ss", "=", "x", "\n", "\n", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "x", "=", "torch", ".", "spmm", "(", "adj", ",", "x", ")", "\n", "x", "=", "self", ".", "net_layer", "[", "ln", "]", "(", "x", ")", "\n", "if", "ln", "==", "self", ".", "layer_num", "-", "1", ":", "\n", "                ", "break", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "val_test", ":", "\n", "                ", "continue", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "if", "not", "val_test", ":", "\n", "            ", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "                ", "x_ss", "=", "torch", ".", "spmm", "(", "adj", ",", "x_ss", ")", "\n", "if", "ln", "==", "self", ".", "layer_num", "-", "1", ":", "\n", "                    ", "break", "\n", "", "x_ss", "=", "self", ".", "net_layer", "[", "ln", "]", "(", "x_ss", ")", "\n", "x_ss", "=", "self", ".", "relu", "(", "x_ss", ")", "\n", "x_ss", "=", "self", ".", "dropout", "(", "x_ss", ")", "\n", "", "x_ss", "=", "self", ".", "ss_classifier", "(", "x_ss", ")", "\n", "\n", "", "return", "x", ",", "x_ss", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_clu.run": [[14, 64], ["main_clu.setup_seed", "utils.load_data", "list", "adj.cuda.cuda", "features.cuda.cuda", "labels.cuda.cuda", "torch.CrossEntropyLoss", "torch.tensor().cuda", "torch.tensor().cuda", "net.net_gcn_multitask", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "features.cuda.size", "labels.cuda.numpy().max", "range", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels.cuda.numpy", "numpy.load", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu", "output[].cpu().numpy", "labels[].cpu", "output[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "output[].cpu", "output[].cpu", "nn.CrossEntropyLoss."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "args", "[", "'dataset'", "]", ")", "\n", "\n", "node_num", "=", "features", ".", "size", "(", ")", "[", "0", "]", "\n", "class_num", "=", "labels", ".", "numpy", "(", ")", ".", "max", "(", ")", "+", "1", "\n", "idx_unlabel", "=", "list", "(", "range", "(", "class_num", "*", "20", ",", "node_num", ")", ")", "\n", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "early_stopping", "=", "10", "\n", "\n", "cluster_labels_file", "=", "'./cluster_labels/'", "+", "args", "[", "'dataset'", "]", "+", "'.npy'", "\n", "ss_labels", "=", "torch", ".", "tensor", "(", "np", ".", "load", "(", "cluster_labels_file", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "cuda", "(", ")", "\n", "net_gcn", "=", "net", ".", "net_gcn_multitask", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ",", "ss_dim", "=", "args", "[", "'embedding_dim'", "]", "[", "-", "1", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_val", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "output_ss", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "loss_target", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_ss", "=", "loss_func", "(", "output_ss", "[", "idx_unlabel", "]", ",", "ss_labels", "[", "idx_unlabel", "]", ")", "\n", "loss", "=", "loss_target", "*", "args", "[", "'loss_weight'", "]", "+", "loss_ss", "*", "(", "1", "-", "args", "[", "'loss_weight'", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_target.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu().numpy(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "acc_val", "=", "f1_score", "(", "labels", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "acc_test", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "", "return", "acc_val", ",", "acc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_clu.parser_loader": [[66, 75], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Self-Supervised GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-weight'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--grid-search'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_clu.setup_seed": [[77, 83], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat_clu.run": [[18, 84], ["main_gingat_clu.setup_seed", "utils.load_data", "utils.load_adj_raw", "list", "dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "adj.tocoo.tocoo", "dgl.DGLGraph.add_edges", "features.cuda.cuda", "labels.cuda.cuda", "torch.CrossEntropyLoss", "torch.tensor().cuda", "torch.tensor().cuda", "gnns.gat_net.GATNet_ss.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "features.cuda.size", "labels.cuda.numpy().max", "range", "gnns.gin_net.GINNet_ss", "gnns.gat_net.GATNet_ss", "dgl.DGLGraph.add_edges", "gnns.gat_net.GATNet_ss.parameters", "torch.optim.Adam.zero_grad", "gnns.gat_net.GATNet_ss.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "gnns.gat_net.GATNet_ss.eval", "gnns.gat_net.GATNet_ss.", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "list", "list", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "gnns.gat_net.GATNet_ss.eval", "gnns.gat_net.GATNet_ss.", "loss_val.append", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels.cuda.numpy", "range", "range", "numpy.load", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu", "output[].cpu().numpy", "labels[].cpu", "output[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "output[].cpu", "output[].cpu", "nn.CrossEntropyLoss."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_adj_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "args", "[", "'dataset'", "]", ")", "\n", "adj", "=", "load_adj_raw", "(", "args", "[", "'dataset'", "]", ")", "\n", "\n", "node_num", "=", "features", ".", "size", "(", ")", "[", "0", "]", "\n", "class_num", "=", "labels", ".", "numpy", "(", ")", ".", "max", "(", ")", "+", "1", "\n", "idx_unlabel", "=", "list", "(", "range", "(", "class_num", "*", "20", ",", "node_num", ")", ")", "\n", "\n", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "node_num", ")", "\n", "adj", "=", "adj", ".", "tocoo", "(", ")", "\n", "g", ".", "add_edges", "(", "adj", ".", "row", ",", "adj", ".", "col", ")", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "\n", "'''\n    adj = adj.cuda()\n    features = features.cuda()\n    '''", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "early_stopping", "=", "10", "\n", "\n", "if", "args", "[", "'net'", "]", "==", "'gin'", ":", "\n", "        ", "net_gcn", "=", "GINNet_ss", "(", "args", "[", "'embedding_dim'", "]", ",", "args", "[", "'embedding_dim'", "]", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "net_gcn", "=", "GATNet_ss", "(", "args", "[", "'embedding_dim'", "]", ",", "args", "[", "'embedding_dim'", "]", "[", "-", "1", "]", ")", "\n", "g", ".", "add_edges", "(", "list", "(", "range", "(", "node_num", ")", ")", ",", "list", "(", "range", "(", "node_num", ")", ")", ")", "\n", "\n", "", "cluster_labels_file", "=", "'./cluster_labels/'", "+", "args", "[", "'dataset'", "]", "+", "'.npy'", "\n", "ss_labels", "=", "torch", ".", "tensor", "(", "np", ".", "load", "(", "cluster_labels_file", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "cuda", "(", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_val", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "output_ss", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "loss_target", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_ss", "=", "loss_func", "(", "output_ss", "[", "idx_unlabel", "]", ",", "ss_labels", "[", "idx_unlabel", "]", ")", "\n", "loss", "=", "loss_target", "*", "args", "[", "'loss_weight'", "]", "+", "loss_ss", "*", "(", "1", "-", "args", "[", "'loss_weight'", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_target.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "net_gcn", ".", "eval", "(", ")", "\n", "output", ",", "_", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu().numpy(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "net_gcn", ".", "eval", "(", ")", "\n", "output", ",", "_", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "acc_val", "=", "f1_score", "(", "labels", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "acc_test", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "", "return", "acc_val", ",", "acc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat_clu.parser_loader": [[86, 96], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Self-Supervised GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-weight'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--grid-search'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "type", "=", "str", ",", "default", "=", "'gin'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat_clu.setup_seed": [[98, 104], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat.run": [[18, 78], ["main_gingat.setup_seed", "utils.load_data", "utils.load_adj_raw", "dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "adj.tocoo.tocoo", "dgl.DGLGraph.add_edges", "features.cuda.cuda", "labels.cuda.cuda", "torch.CrossEntropyLoss", "gnns.gat_net.GATNet.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "features.cuda.size", "labels.cuda.numpy().max", "gnns.gin_net.GINNet", "gnns.gat_net.GATNet", "dgl.DGLGraph.add_edges", "gnns.gat_net.GATNet.parameters", "torch.optim.Adam.zero_grad", "gnns.gat_net.GATNet.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "gnns.gat_net.GATNet.eval", "gnns.gat_net.GATNet.", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "list", "list", "torch.no_grad", "torch.no_grad", "gnns.gat_net.GATNet.eval", "gnns.gat_net.GATNet.", "loss_val.append", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels.cuda.numpy", "range", "range", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu", "output[].cpu().numpy", "labels[].cpu", "output[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "output[].cpu", "output[].cpu", "nn.CrossEntropyLoss."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_adj_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "args", "[", "'dataset'", "]", ")", "\n", "adj", "=", "load_adj_raw", "(", "args", "[", "'dataset'", "]", ")", "\n", "\n", "node_num", "=", "features", ".", "size", "(", ")", "[", "0", "]", "\n", "class_num", "=", "labels", ".", "numpy", "(", ")", ".", "max", "(", ")", "+", "1", "\n", "\n", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "node_num", ")", "\n", "adj", "=", "adj", ".", "tocoo", "(", ")", "\n", "g", ".", "add_edges", "(", "adj", ".", "row", ",", "adj", ".", "col", ")", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "\n", "'''\n    adj = adj.cuda()\n    features = features.cuda()\n    '''", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "early_stopping", "=", "10", "\n", "\n", "if", "args", "[", "'net'", "]", "==", "'gin'", ":", "\n", "        ", "net_gcn", "=", "GINNet", "(", "args", "[", "'embedding_dim'", "]", ")", "\n", "", "else", ":", "\n", "        ", "net_gcn", "=", "GATNet", "(", "args", "[", "'embedding_dim'", "]", ")", "\n", "g", ".", "add_edges", "(", "list", "(", "range", "(", "node_num", ")", ")", ",", "list", "(", "range", "(", "node_num", ")", ")", ")", "\n", "", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_val", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "loss", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "net_gcn", ".", "eval", "(", ")", "\n", "output", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu().numpy(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "net_gcn", ".", "eval", "(", ")", "\n", "output", "=", "net_gcn", "(", "g", ",", "features", ",", "0", ",", "0", ")", "\n", "acc_val", "=", "f1_score", "(", "labels", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "acc_test", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "", "return", "acc_val", ",", "acc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat.parser_loader": [[80, 88], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Self-Supervised GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "type", "=", "str", ",", "default", "=", "'gin'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.main_gingat.setup_seed": [[90, 96], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.parse_index_file": [[12, 18], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.sample_mask": [[20, 25], ["numpy.zeros", "numpy.array"], "function", ["None"], ["", "def", "sample_mask", "(", "idx", ",", "l", ")", ":", "\n", "    ", "\"\"\"Create mask.\"\"\"", "\n", "mask", "=", "np", ".", "zeros", "(", "l", ")", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "return", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_data": [[27, 91], ["range", "tuple", "utils.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "utils.preprocess_features", "torch.tensor", "networkx.adjacency_matrix", "utils.preprocess_adj", "utils.sparse_mx_to_torch_sparse_tensor", "numpy.vstack", "torch.tensor", "np.sort.tolist", "list", "list", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "range", "range", "open", "min", "scipy.vstack", "len", "len", "objects.append", "objects.append", "max", "len", "len", "len", "pickle.load", "pickle.load", "range", "min", "min"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.parse_index_file", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_features", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["", "def", "load_data", "(", "dataset_str", ")", ":", "\n", "    ", "\"\"\"\n    Loads input data from gcn/data directory\n\n    ind.dataset_str.x => the feature vectors of the training instances as scipy.sparse.csr.csr_matrix object;\n    ind.dataset_str.tx => the feature vectors of the test instances as scipy.sparse.csr.csr_matrix object;\n    ind.dataset_str.allx => the feature vectors of both labeled and unlabeled training instances\n        (a superset of ind.dataset_str.x) as scipy.sparse.csr.csr_matrix object;\n    ind.dataset_str.y => the one-hot labels of the labeled training instances as numpy.ndarray object;\n    ind.dataset_str.ty => the one-hot labels of the test instances as numpy.ndarray object;\n    ind.dataset_str.ally => the labels for instances in ind.dataset_str.allx as numpy.ndarray object;\n    ind.dataset_str.graph => a dict in the format {index: [index_of_neighbor_nodes]} as collections.defaultdict\n        object;\n    ind.dataset_str.test.index => the indices of test instances in graph, for the inductive setting as list object.\n\n    All objects above must be saved using python pickle module.\n\n    :param dataset_str: Dataset name\n    :return: All data input files loaded (as well the training/test data).\n    \"\"\"", "\n", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"../dataset/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"../dataset/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "# preprocess feature", "\n", "features", "=", "preprocess_features", "(", "features", ")", "\n", "features", "=", "torch", ".", "tensor", "(", "features", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "# preprocess adj", "\n", "adj", "=", "preprocess_adj", "(", "adj", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "_", ",", "l_num", "=", "labels", ".", "shape", "\n", "labels", "=", "torch", ".", "tensor", "(", "(", "labels", "*", "range", "(", "l_num", ")", ")", ".", "sum", "(", "axis", "=", "1", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "list", "(", "range", "(", "len", "(", "y", ")", ")", ")", "\n", "idx_val", "=", "list", "(", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.sparse_to_tuple": [[93, 110], ["isinstance", "numpy.vstack().transpose", "range", "utils.sparse_to_tuple.to_tuple"], "function", ["None"], ["", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert sparse matrix to tuple representation.\"\"\"", "\n", "def", "to_tuple", "(", "mx", ")", ":", "\n", "        ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "            ", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "            ", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "\n", "", "return", "sparse_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.preprocess_features": [[112, 121], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.todense", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "preprocess_features", "(", "features", ")", ":", "\n", "    ", "\"\"\"Row-normalize feature matrix and convert to tuple representation\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "features", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "features", "=", "r_mat_inv", ".", "dot", "(", "features", ")", "\n", "#return sparse_to_tuple(features)", "\n", "return", "features", ".", "todense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.normalize_adj": [[123, 131], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.preprocess_adj": [[133, 138], ["utils.normalize_adj", "scipy.eye"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.normalize_adj"], ["", "def", "preprocess_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Preprocessing of adjacency matrix for simple GCN model and conversion to tuple representation.\"\"\"", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "#return sparse_to_tuple(adj_normalized)", "\n", "return", "adj_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.construct_feed_dict": [[140, 149], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "range", "len"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update"], ["", "def", "construct_feed_dict", "(", "features", ",", "support", ",", "labels", ",", "labels_mask", ",", "placeholders", ")", ":", "\n", "    ", "\"\"\"Construct feed dictionary.\"\"\"", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'labels'", "]", ":", "labels", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'labels_mask'", "]", ":", "labels_mask", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'features'", "]", ":", "features", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'support'", "]", "[", "i", "]", ":", "support", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "support", ")", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "features", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.chebyshev_polynomials": [[151, 172], ["print", "utils.normalize_adj", "scipy.sparse.linalg.eigen.arpack.eigsh", "list", "list.append", "list.append", "range", "utils.sparse_to_tuple", "scipy.eye", "scipy.eye", "scipy.eye", "scipy.csr_matrix", "list.append", "utils.chebyshev_polynomials.chebyshev_recurrence"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.normalize_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_to_tuple"], ["", "def", "chebyshev_polynomials", "(", "adj", ",", "k", ")", ":", "\n", "    ", "\"\"\"Calculate Chebyshev polynomials up to order k. Return a list of sparse matrices (tuple representation).\"\"\"", "\n", "print", "(", "\"Calculating Chebyshev polynomials up to order {}...\"", ".", "format", "(", "k", ")", ")", "\n", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", ")", "\n", "laplacian", "=", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "-", "adj_normalized", "\n", "largest_eigval", ",", "_", "=", "eigsh", "(", "laplacian", ",", "1", ",", "which", "=", "'LM'", ")", "\n", "scaled_laplacian", "=", "(", "2.", "/", "largest_eigval", "[", "0", "]", ")", "*", "laplacian", "-", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "\n", "t_k", "=", "list", "(", ")", "\n", "t_k", ".", "append", "(", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "t_k", ".", "append", "(", "scaled_laplacian", ")", "\n", "\n", "def", "chebyshev_recurrence", "(", "t_k_minus_one", ",", "t_k_minus_two", ",", "scaled_lap", ")", ":", "\n", "        ", "s_lap", "=", "sp", ".", "csr_matrix", "(", "scaled_lap", ",", "copy", "=", "True", ")", "\n", "return", "2", "*", "s_lap", ".", "dot", "(", "t_k_minus_one", ")", "-", "t_k_minus_two", "\n", "\n", "", "for", "i", "in", "range", "(", "2", ",", "k", "+", "1", ")", ":", "\n", "        ", "t_k", ".", "append", "(", "chebyshev_recurrence", "(", "t_k", "[", "-", "1", "]", ",", "t_k", "[", "-", "2", "]", ",", "scaled_laplacian", ")", ")", "\n", "\n", "", "return", "sparse_to_tuple", "(", "t_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.sparse_mx_to_torch_sparse_tensor": [[174, 182], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.load_adj_raw": [[184, 212], ["range", "tuple", "utils.parse_index_file", "numpy.sort", "networkx.adjacency_matrix", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "open", "min", "objects.append", "objects.append", "max", "len", "len", "pickle.load", "pickle.load", "min", "min"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.parse_index_file", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["", "def", "load_adj_raw", "(", "dataset_str", ")", ":", "\n", "\n", "    ", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"../dataset/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"../dataset/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "adj_raw", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "return", "adj_raw", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCNs.utils.partition": [[214, 227], ["zip", "metis.part_graph", "torch.tensor", "adj_list[].append", "range"], "function", ["None"], ["", "def", "partition", "(", "adj_raw", ",", "n", ")", ":", "\n", "\n", "    ", "node_num", "=", "adj_raw", ".", "shape", "[", "0", "]", "\n", "adj_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "node_num", ")", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "adj_raw", ".", "row", ",", "adj_raw", ".", "col", ")", ":", "\n", "        ", "if", "i", "==", "j", ":", "\n", "            ", "continue", "\n", "", "adj_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "\n", "", "_", ",", "ss_labels", "=", "metis", ".", "part_graph", "(", "adj_list", ",", "nparts", "=", "n", ",", "seed", "=", "0", ")", "\n", "ss_labels", "=", "torch", ".", "tensor", "(", "ss_labels", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "return", "ss_labels", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_net.GATNet.__init__": [[17, 37], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "gat_net.GATNet.layers.append", "gnns.gat_layer.GATLayer", "gnns.gat_layer.GATLayer", "range"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "in_dim_node", "=", "net_params", "[", "0", "]", "# node_dim (feat is an integer)", "\n", "hidden_dim", "=", "net_params", "[", "1", "]", "\n", "out_dim", "=", "net_params", "[", "2", "]", "\n", "n_classes", "=", "net_params", "[", "2", "]", "\n", "num_heads", "=", "8", "\n", "dropout", "=", "0.6", "\n", "n_layers", "=", "1", "\n", "\n", "self", ".", "graph_norm", "=", "False", "\n", "self", ".", "batch_norm", "=", "False", "\n", "self", ".", "residual", "=", "False", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "GATLayer", "(", "in_dim_node", ",", "hidden_dim", ",", "num_heads", ",", "\n", "dropout", ",", "self", ".", "graph_norm", ",", "self", ".", "batch_norm", ",", "self", ".", "residual", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "self", ".", "layers", ".", "append", "(", "GATLayer", "(", "hidden_dim", "*", "num_heads", ",", "out_dim", ",", "1", ",", "0", ",", "self", ".", "graph_norm", ",", "self", ".", "batch_norm", ",", "self", ".", "residual", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_net.GATNet.forward": [[38, 45], ["conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "snorm_n", ",", "snorm_e", ")", ":", "\n", "\n", "# GAT", "\n", "        ", "for", "conv", "in", "self", ".", "layers", ":", "\n", "            ", "h", "=", "conv", "(", "g", ",", "h", ",", "snorm_n", ")", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_net.GATNet_ss.__init__": [[49, 70], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "gat_net.GATNet_ss.layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "gnns.gat_layer.GATLayer", "gnns.gat_layer.GATLayer", "range"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net_params", ",", "num_par", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "in_dim_node", "=", "net_params", "[", "0", "]", "# node_dim (feat is an integer)", "\n", "hidden_dim", "=", "net_params", "[", "1", "]", "\n", "out_dim", "=", "net_params", "[", "2", "]", "\n", "n_classes", "=", "net_params", "[", "2", "]", "\n", "num_heads", "=", "8", "\n", "dropout", "=", "0.6", "\n", "n_layers", "=", "1", "\n", "\n", "self", ".", "graph_norm", "=", "False", "\n", "self", ".", "batch_norm", "=", "False", "\n", "self", ".", "residual", "=", "False", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "GATLayer", "(", "in_dim_node", ",", "hidden_dim", ",", "num_heads", ",", "\n", "dropout", ",", "self", ".", "graph_norm", ",", "self", ".", "batch_norm", ",", "self", ".", "residual", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "self", ".", "layers", ".", "append", "(", "GATLayer", "(", "hidden_dim", "*", "num_heads", ",", "out_dim", ",", "1", ",", "0", ",", "self", ".", "graph_norm", ",", "self", ".", "batch_norm", ",", "self", ".", "residual", ")", ")", "\n", "self", ".", "classifier_ss", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "num_heads", ",", "num_par", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_net.GATNet_ss.forward": [[71, 81], ["gat_net.GATNet_ss.classifier_ss", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "snorm_n", ",", "snorm_e", ")", ":", "\n", "\n", "# GAT", "\n", "        ", "for", "conv", "in", "self", ".", "layers", ":", "\n", "            ", "h_ss", "=", "h", "\n", "h", "=", "conv", "(", "g", ",", "h", ",", "snorm_n", ")", "\n", "\n", "", "h_ss", "=", "self", ".", "classifier_ss", "(", "h_ss", ")", "\n", "\n", "return", "h", ",", "h_ss", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_layer.GATHeadLayer.__init__": [[12, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "graph_norm", "=", "graph_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "attn_fc", "=", "nn", ".", "Linear", "(", "2", "*", "out_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "batchnorm_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n", "self", ".", "heads", "=", "heads", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_layer.GATHeadLayer.edge_attention": [[24, 28], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gat_layer.GATHeadLayer.attn_fc", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "edge_attention", "(", "self", ",", "edges", ")", ":", "\n", "        ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'z'", "]", ",", "edges", ".", "dst", "[", "'z'", "]", "]", ",", "dim", "=", "1", ")", "\n", "a", "=", "self", ".", "attn_fc", "(", "z2", ")", "\n", "return", "{", "'e'", ":", "F", ".", "leaky_relu", "(", "a", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_layer.GATHeadLayer.message_func": [[29, 31], ["None"], "methods", ["None"], ["", "def", "message_func", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'z'", ":", "edges", ".", "src", "[", "'z'", "]", ",", "'e'", ":", "edges", ".", "data", "[", "'e'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_layer.GATHeadLayer.reduce_func": [[32, 37], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "reduce_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "alpha", "=", "F", ".", "softmax", "(", "nodes", ".", "mailbox", "[", "'e'", "]", ",", "dim", "=", "1", ")", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "h", "=", "torch", ".", "sum", "(", "alpha", "*", "nodes", ".", "mailbox", "[", "'z'", "]", ",", "dim", "=", "1", ")", "\n", "return", "{", "'h'", ":", "h", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_layer.GATHeadLayer.forward": [[38, 53], ["gat_layer.GATHeadLayer.fc", "g.apply_edges", "g.update_all", "gat_layer.GATHeadLayer.batchnorm_h", "torch.elu", "torch.elu", "torch.elu", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "snorm_n", ")", ":", "\n", "        ", "z", "=", "self", ".", "fc", "(", "h", ")", "\n", "g", ".", "ndata", "[", "'z'", "]", "=", "z", "\n", "g", ".", "apply_edges", "(", "self", ".", "edge_attention", ")", "\n", "g", ".", "update_all", "(", "self", ".", "message_func", ",", "self", ".", "reduce_func", ")", "\n", "h", "=", "g", ".", "ndata", "[", "'h'", "]", "\n", "if", "self", ".", "graph_norm", ":", "\n", "            ", "h", "=", "h", "*", "snorm_n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "batchnorm_h", "(", "h", ")", "\n", "\n", "", "if", "not", "self", ".", "heads", "==", "1", ":", "\n", "            ", "h", "=", "F", ".", "elu", "(", "h", ")", "\n", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_layer.GATLayer.__init__": [[58, 72], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "gat_layer.GATLayer.heads.append", "gat_layer.GATHeadLayer"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "num_heads", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "residual", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_dim", "\n", "self", ".", "out_channels", "=", "out_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "if", "in_dim", "!=", "(", "out_dim", "*", "num_heads", ")", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n", "", "self", ".", "heads", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_heads", ")", ":", "\n", "            ", "self", ".", "heads", ".", "append", "(", "GATHeadLayer", "(", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "num_heads", ")", ")", "\n", "", "self", ".", "merge", "=", "'cat'", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_layer.GATLayer.forward": [[73, 85], ["attn_head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "snorm_n", ")", ":", "\n", "        ", "h_in", "=", "h", "# for residual connection", "\n", "head_outs", "=", "[", "attn_head", "(", "g", ",", "h", ",", "snorm_n", ")", "for", "attn_head", "in", "self", ".", "heads", "]", "\n", "\n", "if", "self", ".", "merge", "==", "'cat'", ":", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "head_outs", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "head_outs", ")", ")", "\n", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "h", "=", "h_in", "+", "h", "# residual connection", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gat_layer.GATLayer.__repr__": [[86, 90], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(in_channels={}, out_channels={}, heads={}, residual={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "num_heads", ",", "self", ".", "residual", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.mlp_readout_layer.MLPReadout.__init__": [[11, 17], ["torch.Module.__init__", "list_FC_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "L", "=", "2", ")", ":", "#L=nb_hidden_layers", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "list_FC_layers", "=", "[", "nn", ".", "Linear", "(", "input_dim", "//", "2", "**", "l", ",", "input_dim", "//", "2", "**", "(", "l", "+", "1", ")", ",", "bias", "=", "True", ")", "for", "l", "in", "range", "(", "L", ")", "]", "\n", "list_FC_layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", "//", "2", "**", "L", ",", "output_dim", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "FC_layers", "=", "nn", ".", "ModuleList", "(", "list_FC_layers", ")", "\n", "self", ".", "L", "=", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.mlp_readout_layer.MLPReadout.forward": [[18, 25], ["range", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "for", "l", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "y", "=", "self", ".", "FC_layers", "[", "l", "]", "(", "y", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "", "y", "=", "self", ".", "FC_layers", "[", "self", ".", "L", "]", "(", "y", ")", "\n", "return", "y", "", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_layer.GINLayer.__init__": [[39, 70], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "gin_layer.GINLayer.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "KeyError"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["def", "__init__", "(", "self", ",", "apply_func", ",", "aggr_type", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "residual", "=", "False", ",", "init_eps", "=", "0", ",", "learn_eps", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_func", "=", "apply_func", "\n", "\n", "if", "aggr_type", "==", "'sum'", ":", "\n", "            ", "self", ".", "_reducer", "=", "fn", ".", "sum", "\n", "", "elif", "aggr_type", "==", "'max'", ":", "\n", "            ", "self", ".", "_reducer", "=", "fn", ".", "max", "\n", "", "elif", "aggr_type", "==", "'mean'", ":", "\n", "            ", "self", ".", "_reducer", "=", "fn", ".", "mean", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'Aggregator type {} not recognized.'", ".", "format", "(", "aggr_type", ")", ")", "\n", "\n", "", "self", ".", "graph_norm", "=", "graph_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "in_dim", "=", "apply_func", ".", "mlp", ".", "input_dim", "\n", "out_dim", "=", "apply_func", ".", "mlp", ".", "output_dim", "\n", "\n", "if", "in_dim", "!=", "out_dim", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n", "# to specify whether eps is trainable or not.", "\n", "", "if", "learn_eps", ":", "\n", "            ", "self", ".", "eps", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "init_eps", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'eps'", ",", "torch", ".", "FloatTensor", "(", "[", "init_eps", "]", ")", ")", "\n", "\n", "", "self", ".", "bn_node_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_layer.GINLayer.forward": [[71, 95], ["g.local_var.local_var.local_var", "g.local_var.local_var.update_all", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "dgl.copy_u", "gin_layer.GINLayer._reducer", "gin_layer.GINLayer.apply_func", "gin_layer.GINLayer.bn_node_h"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "snorm_n", ")", ":", "\n", "        ", "h_in", "=", "h", "# for residual connection", "\n", "\n", "g", "=", "g", ".", "local_var", "(", ")", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "g", ".", "update_all", "(", "fn", ".", "copy_u", "(", "'h'", ",", "'m'", ")", ",", "self", ".", "_reducer", "(", "'m'", ",", "'neigh'", ")", ")", "\n", "h", "=", "(", "1", "+", "self", ".", "eps", ")", "*", "h", "+", "g", ".", "ndata", "[", "'neigh'", "]", "\n", "if", "self", ".", "apply_func", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "apply_func", "(", "h", ")", "\n", "\n", "", "if", "self", ".", "graph_norm", ":", "\n", "            ", "h", "=", "h", "*", "snorm_n", "# normalize activation w.r.t. graph size", "\n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "bn_node_h", "(", "h", ")", "# batch normalization  ", "\n", "\n", "", "h", "=", "F", ".", "relu", "(", "h", ")", "# non-linear activation", "\n", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "h", "=", "h_in", "+", "h", "# residual connection", "\n", "\n", "", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_layer.ApplyNodeFunc.__init__": [[102, 105], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["def", "__init__", "(", "self", ",", "mlp", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "mlp", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_layer.ApplyNodeFunc.forward": [[106, 109], ["gin_layer.ApplyNodeFunc.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "h", "=", "self", ".", "mlp", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_layer.MLP.__init__": [[113, 136], ["torch.Module.__init__", "ValueError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "gin_layer.MLP.linears.append", "range", "gin_layer.MLP.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "gin_layer.MLP.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_or_not", "=", "True", "# default is linear model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "\n", "if", "num_layers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"number of layers should be positive!\"", ")", "\n", "", "elif", "num_layers", "==", "1", ":", "\n", "# Linear model", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "# Multi-layer model", "\n", "            ", "self", ".", "linear_or_not", "=", "False", "\n", "self", ".", "linears", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_layer.MLP.forward": [[137, 147], ["gin_layer.MLP.linear", "range", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "linear_or_not", ":", "\n", "# If linear model", "\n", "            ", "return", "self", ".", "linear", "(", "x", ")", "\n", "", "else", ":", "\n", "# If MLP", "\n", "            ", "h", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "h", "=", "F", ".", "relu", "(", "self", ".", "linears", "[", "i", "]", "(", "h", ")", ")", "\n", "", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "h", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_net.GINNet.__init__": [[18, 50], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "gin_net.GINNet.ginlayers.append", "gnns.gin_layer.MLP", "gnns.gin_layer.MLP", "gnns.gin_layer.GINLayer", "gnns.gin_layer.ApplyNodeFunc"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "in_dim", "=", "net_params", "[", "0", "]", "\n", "hidden_dim", "=", "net_params", "[", "1", "]", "\n", "n_classes", "=", "net_params", "[", "2", "]", "\n", "dropout", "=", "0.5", "\n", "self", ".", "n_layers", "=", "2", "\n", "n_mlp_layers", "=", "1", "# GIN", "\n", "learn_eps", "=", "True", "# GIN", "\n", "neighbor_aggr_type", "=", "'mean'", "# GIN", "\n", "graph_norm", "=", "False", "\n", "batch_norm", "=", "False", "\n", "residual", "=", "False", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "# List of MLPs", "\n", "self", ".", "ginlayers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "layer", "==", "0", ":", "\n", "                ", "mlp", "=", "MLP", "(", "n_mlp_layers", ",", "in_dim", ",", "hidden_dim", ",", "hidden_dim", ")", "\n", "", "else", ":", "\n", "                ", "mlp", "=", "MLP", "(", "n_mlp_layers", ",", "hidden_dim", ",", "hidden_dim", ",", "n_classes", ")", "\n", "\n", "\n", "", "self", ".", "ginlayers", ".", "append", "(", "GINLayer", "(", "ApplyNodeFunc", "(", "mlp", ")", ",", "neighbor_aggr_type", ",", "\n", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "residual", ",", "0", ",", "learn_eps", ")", ")", "\n", "\n", "# Linear function for output of each layer", "\n", "# which maps the output of different layers into a prediction score", "\n", "\n", "", "self", ".", "linears_prediction", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "n_classes", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_net.GINNet.forward": [[52, 65], ["range", "hidden_rep.append", "gin_net.GINNet.linears_prediction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "snorm_n", ",", "snorm_e", ")", ":", "\n", "\n", "# list of hidden representation at each layer (including input)", "\n", "        ", "hidden_rep", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "h", "=", "self", ".", "ginlayers", "[", "i", "]", "(", "g", ",", "h", ",", "snorm_n", ")", "\n", "hidden_rep", ".", "append", "(", "h", ")", "\n", "\n", "# score_over_layer = (self.linears_prediction(hidden_rep[0]) + hidden_rep[1]) / 2", "\n", "", "score_over_layer", "=", "(", "self", ".", "linears_prediction", "(", "hidden_rep", "[", "0", "]", ")", "+", "hidden_rep", "[", "1", "]", ")", "/", "2", "\n", "\n", "return", "score_over_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_net.GINNet_ss.__init__": [[69, 102], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "gin_net.GINNet_ss.ginlayers.append", "gnns.gin_layer.MLP", "gnns.gin_layer.MLP", "gnns.gin_layer.GINLayer", "gnns.gin_layer.ApplyNodeFunc"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net_params", ",", "num_par", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "in_dim", "=", "net_params", "[", "0", "]", "\n", "hidden_dim", "=", "net_params", "[", "1", "]", "\n", "n_classes", "=", "net_params", "[", "2", "]", "\n", "dropout", "=", "0.5", "\n", "self", ".", "n_layers", "=", "2", "\n", "n_mlp_layers", "=", "1", "# GIN", "\n", "learn_eps", "=", "True", "# GIN", "\n", "neighbor_aggr_type", "=", "'mean'", "# GIN", "\n", "graph_norm", "=", "False", "\n", "batch_norm", "=", "False", "\n", "residual", "=", "False", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "# List of MLPs", "\n", "self", ".", "ginlayers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "layer", "==", "0", ":", "\n", "                ", "mlp", "=", "MLP", "(", "n_mlp_layers", ",", "in_dim", ",", "hidden_dim", ",", "hidden_dim", ")", "\n", "", "else", ":", "\n", "                ", "mlp", "=", "MLP", "(", "n_mlp_layers", ",", "hidden_dim", ",", "hidden_dim", ",", "n_classes", ")", "\n", "\n", "\n", "", "self", ".", "ginlayers", ".", "append", "(", "GINLayer", "(", "ApplyNodeFunc", "(", "mlp", ")", ",", "neighbor_aggr_type", ",", "\n", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "residual", ",", "0", ",", "learn_eps", ")", ")", "\n", "\n", "# Linear function for output of each layer", "\n", "# which maps the output of different layers into a prediction score", "\n", "\n", "", "self", ".", "linears_prediction", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "n_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier_ss", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_par", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.gnns.gin_net.GINNet_ss.forward": [[103, 116], ["range", "gin_net.GINNet_ss.classifier_ss", "hidden_rep.append", "gin_net.GINNet_ss.linears_prediction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "snorm_n", ",", "snorm_e", ")", ":", "\n", "\n", "# list of hidden representation at each layer (including input)", "\n", "        ", "hidden_rep", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "h", "=", "self", ".", "ginlayers", "[", "i", "]", "(", "g", ",", "h", ",", "snorm_n", ")", "\n", "hidden_rep", ".", "append", "(", "h", ")", "\n", "\n", "", "score_over_layer", "=", "(", "self", ".", "linears_prediction", "(", "hidden_rep", "[", "0", "]", ")", "+", "hidden_rep", "[", "1", "]", ")", "/", "2", "\n", "h_ss", "=", "self", ".", "classifier_ss", "(", "hidden_rep", "[", "0", "]", ")", "\n", "\n", "return", "score_over_layer", ",", "h_ss", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_cora_ss.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_cora_ss.run": [[32, 35], ["copy.deepcopy", "os.system", "run_cora_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_citeseer.generate_command": [[27, 32], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_citeseer.run": [[33, 36], ["copy.deepcopy", "os.system", "run_citeseer.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_cora.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_cora.run": [[32, 35], ["copy.deepcopy", "os.system", "run_cora.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.Trainer.__init__": [[29, 51], ["torch.nn.Linear", "torch.nn.Linear", "partition_labels.cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "trainer.Trainer.parameters.append", "trainer.get_optimizer", "partition_labels.size", "trainer.Trainer.criterion.cuda", "trainer.Trainer.ss_classifier.cuda", "trainer.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "model", ",", "partition_labels", ")", ":", "\n", "\n", "# partition_num = partition_labels.max() + 1", "\n", "        ", "partition_num", "=", "partition_labels", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "ss_classifier", "=", "nn", ".", "Linear", "(", "opt", "[", "'hidden_dim'", "]", ",", "partition_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "partition_labels", "=", "partition_labels", ".", "cuda", "(", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "loss_func_ss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "# self.loss_func_ss = nn.MSELoss()", "\n", "self", ".", "task_ratio", "=", "opt", "[", "'task_ratio'", "]", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "parameters", "=", "[", "p", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "\n", "self", ".", "parameters", ".", "append", "(", "self", ".", "ss_classifier", ".", "weight", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "self", ".", "ss_classifier", ".", "cuda", "(", ")", "\n", "", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.Trainer.reset": [[52, 55], ["trainer.Trainer.model.reset", "trainer.get_optimizer"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.reset", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "reset", "(", ")", "\n", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.Trainer.update": [[56, 71], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.item", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["", "def", "update", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.Trainer.update_soft": [[72, 96], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.ss_classifier", "trainer.Trainer.loss_func_ss", "loss.backward", "trainer.Trainer.optimizer.step", "loss.item", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["", "def", "update_soft", "(", "self", ",", "inputs", ",", "target", ",", "idx", ",", "adj_ss", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "_", ",", "logits0", "=", "self", ".", "model", "(", "inputs", ",", "adj_ss", ")", "\n", "\n", "logits", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "[", "idx", "]", "*", "logits", "[", "idx", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "logits0", "=", "self", ".", "ss_classifier", "(", "logits0", ")", "\n", "loss0", "=", "self", ".", "loss_func_ss", "(", "logits0", ",", "self", ".", "partition_labels", ")", "\n", "\n", "# print(loss.data, loss0.data)", "\n", "loss", "=", "loss", "+", "loss0", "*", "self", ".", "task_ratio", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.Trainer.evaluate": [[97, 112], ["trainer.Trainer.model.eval", "trainer.Trainer.model", "trainer.Trainer.criterion", "preds.eq().double", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "preds.eq().double.sum", "idx.cuda.cuda.size", "trainer.Trainer.item", "accuracy.item", "preds.eq"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n", "preds", "=", "torch", ".", "max", "(", "logits", "[", "idx", "]", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "=", "preds", ".", "eq", "(", "target", "[", "idx", "]", ")", ".", "double", "(", ")", "\n", "accuracy", "=", "correct", ".", "sum", "(", ")", "/", "idx", ".", "size", "(", "0", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", ",", "preds", ",", "accuracy", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.Trainer.predict": [[113, 125], ["trainer.Trainer.model.eval", "trainer.Trainer.model", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "inputs", ",", "tau", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "logits", "=", "logits", "/", "tau", "\n", "\n", "logits", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.Trainer.save": [[126, 135], ["trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "print"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "params", "=", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "try", ":", "\n", "            ", "torch", ".", "save", "(", "params", ",", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"[Warning: Saving failed... continuing anyway.]\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.Trainer.load": [[136, 144], ["trainer.Trainer.model.load_state_dict", "trainer.Trainer.optimizer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"Cannot load model from {}\"", ".", "format", "(", "filename", ")", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optim'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.get_optimizer": [[10, 23], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adamax", "torch.optim.Adamax", "Exception"], "function", ["None"], ["def", "get_optimizer", "(", "name", ",", "parameters", ",", "lr", ",", "weight_decay", "=", "0", ")", ":", "\n", "    ", "if", "name", "==", "'sgd'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'rmsprop'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "RMSprop", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adagrad'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adagrad", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adam'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adamax'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adamax", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unsupported optimizer: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.trainer.change_lr": [[24, 27], ["None"], "function", ["None"], ["", "", "def", "change_lr", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.train.init_q_data": [[131, 136], ["inputs_q.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx_train.size", "target_q.size"], "function", ["None"], ["def", "init_q_data", "(", ")", ":", "\n", "    ", "inputs_q", ".", "copy_", "(", "inputs", ")", "\n", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "target_q", "[", "idx_train", "]", "=", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.train.update_p_data": [[137, 155], ["trainer_q.predict", "inputs_p.copy_", "target_p.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "inputs_p.zero_().scatter_", "target_p.zero_().scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "inputs_p.zero_().scatter_", "target_p.zero_().scatter_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "inputs_p.zero_", "target_p.zero_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "idx_train.size", "target_q.size", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "inputs_p.zero_", "target_p.zero_"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict"], ["", "def", "update_p_data", "(", ")", ":", "\n", "    ", "preds", "=", "trainer_q", ".", "predict", "(", "inputs_q", ",", "opt", "[", "'tau'", "]", ")", "\n", "if", "opt", "[", "'draw'", "]", "==", "'exp'", ":", "\n", "        ", "inputs_p", ".", "copy_", "(", "preds", ")", "\n", "target_p", ".", "copy_", "(", "preds", ")", "\n", "", "elif", "opt", "[", "'draw'", "]", "==", "'max'", ":", "\n", "        ", "idx_lb", "=", "torch", ".", "max", "(", "preds", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "inputs_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "target_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "", "elif", "opt", "[", "'draw'", "]", "==", "'smp'", ":", "\n", "        ", "idx_lb", "=", "torch", ".", "multinomial", "(", "preds", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "inputs_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "target_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "", "if", "opt", "[", "'use_gold'", "]", "==", "1", ":", "\n", "        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "inputs_p", "[", "idx_train", "]", "=", "temp", "\n", "target_p", "[", "idx_train", "]", "=", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.train.update_q_data": [[156, 163], ["trainer_p.predict", "target_q.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx_train.size", "target_q.size"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict"], ["", "", "def", "update_q_data", "(", ")", ":", "\n", "    ", "preds", "=", "trainer_p", ".", "predict", "(", "inputs_p", ")", "\n", "target_q", ".", "copy_", "(", "preds", ")", "\n", "if", "opt", "[", "'use_gold'", "]", "==", "1", ":", "\n", "        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "target_q", "[", "idx_train", "]", "=", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.train.pre_train": [[164, 179], ["train.init_q_data", "range", "trainer_q.model.load_state_dict", "trainer_q.optimizer.load_state_dict", "trainer_q.update_soft", "trainer_q.evaluate", "trainer_q.evaluate", "dict", "copy.deepcopy", "copy.deepcopy", "trainer_q.model.state_dict", "trainer_q.optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.init_q_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate"], ["", "", "def", "pre_train", "(", "epoches", ")", ":", "\n", "    ", "best", "=", "0.0", "\n", "init_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_train", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "if", "accuracy_dev", ">", "best", ":", "\n", "            ", "best", "=", "accuracy_dev", "\n", "state", "=", "dict", "(", "[", "(", "'model'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "model", ".", "state_dict", "(", ")", ")", ")", ",", "(", "'optim'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "optimizer", ".", "state_dict", "(", ")", ")", ")", "]", ")", "\n", "", "", "trainer_q", ".", "model", ".", "load_state_dict", "(", "state", "[", "'model'", "]", ")", "\n", "trainer_q", ".", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optim'", "]", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.train.train_p": [[180, 189], ["train.update_p_data", "range", "trainer_p.update_soft", "trainer_p.evaluate", "trainer_p.evaluate"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.update_p_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate"], ["", "def", "train_p", "(", "epoches", ")", ":", "\n", "    ", "update_p_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_p", ".", "update_soft", "(", "inputs_p", ",", "target_p", ",", "idx_all", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_p", ".", "evaluate", "(", "inputs_p", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_p", ".", "evaluate", "(", "inputs_p", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.train.train_q": [[190, 199], ["train.update_q_data", "range", "trainer_q.update_soft", "trainer_q.evaluate", "trainer_q.evaluate"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.update_q_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate"], ["", "def", "train_q", "(", "epoches", ")", ":", "\n", "    ", "update_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_all", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.train.get_accuracy": [[206, 212], ["None"], "function", ["None"], ["", "def", "get_accuracy", "(", "results", ")", ":", "\n", "    ", "best_dev", ",", "acc_test", "=", "0.0", ",", "0.0", "\n", "for", "d", ",", "t", "in", "results", ":", "\n", "        ", "if", "d", ">", "best_dev", ":", "\n", "            ", "best_dev", ",", "acc_test", "=", "d", ",", "t", "\n", "", "", "return", "best_dev", ",", "acc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.layer.GraphConvolution.__init__": [[12, 20], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layer.GraphConvolution.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "in_size", "=", "opt", "[", "'in'", "]", "\n", "self", ".", "out_size", "=", "opt", "[", "'out'", "]", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_size", ",", "self", ".", "out_size", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.layer.GraphConvolution.reset_parameters": [[21, 24], ["layer.GraphConvolution.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "out_size", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.layer.GraphConvolution.forward": [[25, 33], ["torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", "=", "None", ")", ":", "\n", "        ", "if", "adj", "is", "None", ":", "\n", "            ", "m0", "=", "torch", ".", "spmm", "(", "self", ".", "adj", ",", "x", ")", "\n", "m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "m0", "=", "torch", ".", "spmm", "(", "adj", ",", "x", ")", "\n", "m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "return", "m", ",", "m0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_pubmed_ss.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_pubmed_ss.run": [[32, 35], ["copy.deepcopy", "os.system", "run_pubmed_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_pubmed.generate_command": [[27, 32], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_pubmed.run": [[33, 36], ["copy.deepcopy", "os.system", "run_pubmed.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Vocab.__init__": [[11, 35], ["open", "open.close", "loader.Vocab.itos.append", "line.strip().split", "item.strip().split", "line.strip", "item.strip", "string.split", "loader.Vocab.itos.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "cols", ",", "with_padding", "=", "False", ")", ":", "\n", "        ", "self", ".", "itos", "=", "[", "]", "\n", "self", ".", "stoi", "=", "{", "}", "\n", "self", ".", "vocab_size", "=", "0", "\n", "\n", "if", "with_padding", ":", "\n", "            ", "string", "=", "'<pad>'", "\n", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "\n", "", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "item", "=", "items", "[", "col", "]", "\n", "strings", "=", "item", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "for", "string", "in", "strings", ":", "\n", "                    ", "string", "=", "string", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "if", "string", "not", "in", "self", ".", "stoi", ":", "\n", "                        ", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "", "", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Vocab.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.EntityLabel.__init__": [[41, 56], ["open", "open.close", "line.strip().split", "loader.EntityLabel.vocab_n.stoi.get", "loader.EntityLabel.vocab_l.stoi.get", "range", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "label", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_l", ",", "self", ".", "col_l", "=", "label", "\n", "self", ".", "itol", "=", "[", "-", "1", "for", "k", "in", "range", "(", "self", ".", "vocab_n", ".", "vocab_size", ")", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sl", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_l", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "l", "=", "self", ".", "vocab_l", ".", "stoi", ".", "get", "(", "sl", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "self", ".", "itol", "[", "n", "]", "=", "l", "\n", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.EntityFeature.__init__": [[59, 79], ["open", "open.close", "line.strip().split", "loader.EntityFeature.vocab_n.stoi.get", "sf.strip().split", "range", "loader.EntityFeature.vocab_f.stoi.get", "float", "loader.EntityFeature.itof[].append", "len", "line.strip", "sf.strip", "s.split", "s.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "feature", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_f", ",", "self", ".", "col_f", "=", "feature", "\n", "self", ".", "itof", "=", "[", "[", "]", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "self", ".", "one_hot", "=", "[", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sf", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_f", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "for", "s", "in", "sf", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ":", "\n", "                ", "f", "=", "self", ".", "vocab_f", ".", "stoi", ".", "get", "(", "s", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "s", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "f", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "itof", "[", "n", "]", ".", "append", "(", "(", "f", ",", "w", ")", ")", "\n", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.EntityFeature.to_one_hot": [[80, 92], ["range", "len", "range", "range", "len", "len"], "methods", ["None"], ["", "def", "to_one_hot", "(", "self", ",", "binary", "=", "False", ")", ":", "\n", "        ", "self", ".", "one_hot", "=", "[", "[", "0", "for", "j", "in", "range", "(", "len", "(", "self", ".", "vocab_f", ")", ")", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", ":", "\n", "            ", "sm", "=", "0", "\n", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "sm", "+=", "wt", "\n", "", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "self", ".", "one_hot", "[", "k", "]", "[", "fid", "]", "=", "wt", "/", "sm", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Graph.__init__": [[94, 128], ["open", "line.strip().split", "loader.Graph.vocab_n.stoi.get", "loader.Graph.vocab_n.stoi.get", "float", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "weight", "=", "None", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_u", ",", "self", ".", "col_v", "=", "entity", "\n", "self", ".", "col_w", "=", "weight", "\n", "self", ".", "edges", "=", "[", "]", "\n", "\n", "self", ".", "node_size", "=", "-", "1", "\n", "\n", "self", ".", "eid2iid", "=", "None", "\n", "self", ".", "iid2eid", "=", "None", "\n", "\n", "self", ".", "adj_w", "=", "None", "\n", "self", ".", "adj_t", "=", "None", "\n", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "fi", ":", "\n", "\n", "            ", "for", "line", "in", "fi", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "su", ",", "sv", "=", "items", "[", "self", ".", "col_u", "]", ",", "items", "[", "self", ".", "col_v", "]", "\n", "sw", "=", "items", "[", "self", ".", "col_w", "]", "if", "self", ".", "col_w", "!=", "None", "else", "None", "\n", "\n", "u", ",", "v", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "su", ",", "-", "1", ")", ",", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sv", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "sw", ")", "if", "sw", "!=", "None", "else", "1", "\n", "\n", "if", "u", "==", "-", "1", "or", "v", "==", "-", "1", "or", "w", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "u", "==", "v", ":", "\n", "                    ", "continue", "\n", "# print(\"cindy\", u,v,w)", "\n", "\n", "", "self", ".", "edges", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n", "\n", "", "", "self", ".", "edges_ss", "=", "self", ".", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Graph.get_node_size": [[129, 131], ["None"], "methods", ["None"], ["", "def", "get_node_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "node_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Graph.get_edge_size": [[132, 134], ["len"], "methods", ["None"], ["", "def", "get_edge_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Graph.to_symmetric": [[135, 162], ["set", "dict", "list", "dict.items", "dict", "set.add", "set.add", "dict.get", "dict.get", "math.sqrt"], "methods", ["None"], ["", "def", "to_symmetric", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n", "            ", "if", "u", "==", "v", ":", "\n", "                ", "continue", "\n", "", "w_", "=", "pair2wt", ".", "get", "(", "(", "v", ",", "u", ")", ",", "-", "1", ")", "\n", "if", "w", ">", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", ",", "(", "v", ",", "u", ",", "w", ")", "]", "\n", "", "elif", "w", "==", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n", "", "", "for", "k", "in", "vocab", ":", "\n", "            ", "edges_", "+=", "[", "(", "k", ",", "k", ",", "self_link_weight", ")", "]", "\n", "\n", "", "d", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "edges_", ":", "\n", "            ", "d", "[", "u", "]", "=", "d", ".", "get", "(", "u", ",", "0.0", ")", "+", "w", "\n", "\n", "", "self", ".", "edges", "=", "[", "(", "u", ",", "v", ",", "w", "/", "math", ".", "sqrt", "(", "d", "[", "u", "]", "*", "d", "[", "v", "]", ")", ")", "for", "u", ",", "v", ",", "w", "in", "edges_", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Graph.get_sparse_adjacency": [[163, 182], ["torch.Size", "torch.LongTensor", "torch.Tensor", "torch.sparse.FloatTensor", "index.cuda.cuda.cuda", "value.cuda.cuda.cuda", "adj.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "get_sparse_adjacency", "(", "self", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "vocab_n", ".", "vocab_size", ",", "self", ".", "vocab_n", ".", "vocab_size", "]", ")", "\n", "\n", "us", ",", "vs", ",", "ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "\n", "            ", "us", "+=", "[", "u", "]", "\n", "vs", "+=", "[", "v", "]", "\n", "ws", "+=", "[", "w", "]", "\n", "", "index", "=", "torch", ".", "LongTensor", "(", "[", "us", ",", "vs", "]", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "ws", ")", "\n", "if", "cuda", ":", "\n", "            ", "index", "=", "index", ".", "cuda", "(", ")", "\n", "value", "=", "value", ".", "cuda", "(", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ",", "value", ",", "shape", ")", "\n", "if", "cuda", ":", "\n", "            ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Graph.to_symmetric_ss": [[183, 210], ["set", "dict", "list", "dict.items", "dict", "set.add", "set.add", "dict.get", "dict.get", "math.sqrt"], "methods", ["None"], ["", "def", "to_symmetric_ss", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n", "            ", "if", "u", "==", "v", ":", "\n", "                ", "continue", "\n", "", "w_", "=", "pair2wt", ".", "get", "(", "(", "v", ",", "u", ")", ",", "-", "1", ")", "\n", "if", "w", ">", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", ",", "(", "v", ",", "u", ",", "w", ")", "]", "\n", "", "elif", "w", "==", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n", "", "", "for", "k", "in", "vocab", ":", "\n", "            ", "edges_", "+=", "[", "(", "k", ",", "k", ",", "self_link_weight", ")", "]", "\n", "\n", "", "d", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "edges_", ":", "\n", "            ", "d", "[", "u", "]", "=", "d", ".", "get", "(", "u", ",", "0.0", ")", "+", "w", "\n", "\n", "", "self", ".", "edges_ss", "=", "[", "(", "u", ",", "v", ",", "w", "/", "math", ".", "sqrt", "(", "d", "[", "u", "]", "*", "d", "[", "v", "]", ")", ")", "for", "u", ",", "v", ",", "w", "in", "edges_", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Graph.get_sparse_adjacency_ss": [[211, 230], ["torch.Size", "torch.LongTensor", "torch.Tensor", "torch.sparse.FloatTensor", "index.cuda.cuda.cuda", "value.cuda.cuda.cuda", "adj.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "get_sparse_adjacency_ss", "(", "self", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "vocab_n", ".", "vocab_size", ",", "self", ".", "vocab_n", ".", "vocab_size", "]", ")", "\n", "\n", "us", ",", "vs", ",", "ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "\n", "            ", "us", "+=", "[", "u", "]", "\n", "vs", "+=", "[", "v", "]", "\n", "ws", "+=", "[", "w", "]", "\n", "", "index", "=", "torch", ".", "LongTensor", "(", "[", "us", ",", "vs", "]", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "ws", ")", "\n", "if", "cuda", ":", "\n", "            ", "index", "=", "index", ".", "cuda", "(", ")", "\n", "value", "=", "value", ".", "cuda", "(", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ",", "value", ",", "shape", ")", "\n", "if", "cuda", ":", "\n", "            ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.loader.Graph.partition": [[231, 247], ["len", "metis.part_graph", "torch.tensor", "range", "adj_list[].append", "adj_list[].append"], "methods", ["None"], ["", "def", "partition", "(", "self", ",", "nparts", ")", ":", "\n", "\n", "        ", "node_num", "=", "len", "(", "self", ".", "vocab_n", ")", "\n", "adj_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "node_num", ")", "]", "\n", "for", "i", ",", "j", ",", "_", "in", "self", ".", "edges", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "continue", "\n", "", "if", "not", "j", "in", "adj_list", "[", "i", "]", ":", "\n", "                ", "adj_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "", "if", "not", "i", "in", "adj_list", "[", "j", "]", ":", "\n", "                ", "adj_list", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "_", ",", "partition_labels", "=", "metis", ".", "part_graph", "(", "adj_list", ",", "nparts", "=", "nparts", ")", "\n", "partition_labels", "=", "torch", ".", "tensor", "(", "partition_labels", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "return", "partition_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_citeseer_ss.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.run_citeseer_ss.run": [[32, 35], ["copy.deepcopy", "os.system", "run_citeseer_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.gnn.GNNq.__init__": [[11, 24], ["torch.nn.Module.__init__", "dict", "layer.GraphConvolution", "dict", "layer.GraphConvolution", "gnn.GNNq.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GNNq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_feature'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.gnn.GNNq.reset": [[25, 28], ["gnn.GNNq.m1.reset_parameters", "gnn.GNNq.m2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.gnn.GNNq.forward": [[29, 36], ["torch.dropout", "torch.dropout", "gnn.GNNq.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNNq.m2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n", "return", "x", ",", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.gnn.GNNp.__init__": [[38, 51], ["torch.nn.Module.__init__", "dict", "layer.GraphConvolution", "dict", "layer.GraphConvolution", "gnn.GNNp.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GNNp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_class'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.gnn.GNNp.reset": [[52, 55], ["gnn.GNNp.m1.reset_parameters", "gnn.GNNp.m2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-comp.gnn.GNNp.forward": [[56, 63], ["torch.dropout", "torch.dropout", "gnn.GNNp.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNNp.m2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n", "return", "x", ",", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_cora_ss.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["os", ".", "system", "(", "'rm record_val.txt'", ")", "\n", "os", ".", "system", "(", "'echo -n -> record_val.txt'", ")", "\n", "\n", "partition_num_list", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", ",", "40", "]", "\n", "task_ratio_list", "=", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_cora_ss.run": [[44, 47], ["copy.deepcopy", "os.system", "run_cora_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["for", "p", "in", "partition_num_list", ":", "\n", "    ", "for", "t", "in", "task_ratio_list", ":", "\n", "\n", "        ", "os", ".", "system", "(", "'rm record.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_citeseer.generate_command": [[36, 41], ["opt.items", "str"], "function", ["None"], ["\n", "", "for", "k", "in", "range", "(", "50", ")", ":", "\n", "    ", "seed", "=", "k", "+", "1", "\n", "opt", "[", "'seed'", "]", "=", "seed", "\n", "run", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_citeseer.run": [[42, 45], ["copy.deepcopy", "os.system", "run_citeseer.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_cora.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["opt", "[", "'seed'", "]", "=", "seed", "\n", "run", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_cora.run": [[44, 47], ["copy.deepcopy", "os.system", "run_cora.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.__init__": [[38, 62], ["partition_labels.cuda", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Linear", "torch.nn.Linear", "trainer.Trainer.parameters.append", "trainer.Trainer.criterion.cuda", "trainer.Trainer.ss_classifier.cuda", "trainer.get_optimizer", "trainer.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["self", ".", "task_ratio", "=", "opt", "[", "'task_ratio'", "]", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "parameters", "=", "[", "p", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "\n", "self", ".", "parameters", ".", "append", "(", "self", ".", "ss_classifier", ".", "weight", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "self", ".", "ss_classifier", ".", "cuda", "(", ")", "\n", "", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "reset", "(", ")", "\n", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.reset": [[63, 67], ["trainer.Trainer.model.reset", "trainer.get_optimizer"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.reset", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.update": [[68, 83], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.item", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "update_soft", "(", "self", ",", "inputs", ",", "target", ",", "idx", ",", "adj_ss", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "_", ",", "logits0", "=", "self", ".", "model", "(", "inputs", ",", "adj_ss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.update_soft": [[84, 101], ["trainer.Trainer.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.model.forward_partition", "trainer.Trainer.ss_classifier", "trainer.Trainer.loss_func", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "adj_ss.cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition"], ["logits", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "[", "idx", "]", "*", "logits", "[", "idx", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "logits0", "=", "self", ".", "ss_classifier", "(", "logits0", ")", "\n", "loss0", "=", "self", ".", "loss_func_ss", "(", "logits0", ",", "self", ".", "partition_labels", ")", "\n", "\n", "# print(loss.data, loss0.data)", "\n", "loss", "=", "loss", "+", "loss0", "*", "self", ".", "task_ratio", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.update_soft_aux": [[102, 146], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "idx_unlabeled.cuda.cuda.cuda", "trainer.Trainer.model.forward_aux", "trainer.Trainer.model.forward_partition", "trainer.Trainer.ss_classifier", "trainer.Trainer.loss_func", "bce_loss", "trainer.Trainer.model.forward_aux", "bce_loss", "trainer.Trainer.model.forward_aux", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.model.forward_aux", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "adj_ss.cuda", "softmax", "softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux"], ["\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n", "preds", "=", "torch", ".", "max", "(", "logits", "[", "idx", "]", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "=", "preds", ".", "eq", "(", "target", "[", "idx", "]", ")", ".", "double", "(", ")", "\n", "accuracy", "=", "correct", ".", "sum", "(", ")", "/", "idx", ".", "size", "(", "0", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", ",", "preds", ",", "accuracy", ".", "item", "(", ")", "\n", "\n", "", "def", "predict", "(", "self", ",", "inputs", ",", "tau", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "logits", "=", "logits", "/", "tau", "\n", "\n", "logits", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n", "return", "logits", "\n", "\n", "", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "params", "=", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "try", ":", "\n", "            ", "torch", ".", "save", "(", "params", ",", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"[Warning: Saving failed... continuing anyway.]\"", ")", "\n", "\n", "", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"Cannot load model from {}\"", ".", "format", "(", "filename", ")", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optim'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.evaluate": [[149, 163], ["trainer.Trainer.model.eval", "trainer.Trainer.model", "trainer.Trainer.criterion", "preds.eq().double", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "preds.eq().double.sum", "idx.cuda.cuda.size", "trainer.Trainer.item", "accuracy.item", "preds.eq"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.predict": [[164, 175], ["trainer.Trainer.model.eval", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.predict_aux": [[177, 188], ["trainer.Trainer.model.eval", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model.forward_aux", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.predict_noisy": [[189, 200], ["torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.predict_noisy_aux": [[202, 213], ["torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model.forward_aux", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.save": [[215, 224], ["trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "print"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.Trainer.load": [[225, 233], ["trainer.Trainer.model.load_state_dict", "trainer.Trainer.optimizer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.mixup_criterion": [[14, 16], ["criterion", "criterion"], "function", ["None"], ["        ", "return", "torch", ".", "optim", ".", "RMSprop", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adagrad'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adagrad", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.get_optimizer": [[17, 30], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adamax", "torch.optim.Adamax", "Exception"], "function", ["None"], ["", "elif", "name", "==", "'adam'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adamax'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adamax", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unsupported optimizer: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "", "def", "change_lr", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n", "", "", "class", "Trainer", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "opt", ",", "model", ",", "partition_labels", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.trainer.change_lr": [[31, 34], ["None"], "function", ["None"], ["# partition_num = partition_labels.max() + 1", "\n", "        ", "partition_num", "=", "partition_labels", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "ss_classifier", "=", "nn", ".", "Linear", "(", "opt", "[", "'hidden_dim'", "]", ",", "partition_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "partition_labels", "=", "partition_labels", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.ramps.sigmoid_rampup": [[19, 27], ["numpy.clip", "float", "numpy.exp"], "function", ["None"], ["def", "sigmoid_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Exponential rampup from https://arxiv.org/abs/1610.02242\"\"\"", "\n", "if", "rampup_length", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "current", "=", "np", ".", "clip", "(", "current", ",", "0.0", ",", "rampup_length", ")", "\n", "phase", "=", "1.0", "-", "current", "/", "rampup_length", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "5.0", "*", "phase", "*", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.ramps.linear_rampup": [[29, 39], ["None"], "function", ["None"], ["", "", "def", "linear_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Linear rampup\"\"\"", "\n", "assert", "current", ">=", "0", "and", "rampup_length", ">=", "0", "\n", "if", "current", ">=", "rampup_length", ":", "\n", "        ", "lr", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "lr", "=", "current", "/", "rampup_length", "\n", "\n", "#print (lr)", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.ramps.cosine_rampdown": [[40, 44], ["float", "numpy.cos"], "function", ["None"], ["", "def", "cosine_rampdown", "(", "current", ",", "rampdown_length", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "assert", "0", "<=", "current", "<=", "rampdown_length", "\n", "return", "float", "(", ".5", "*", "(", "np", ".", "cos", "(", "np", ".", "pi", "*", "current", "/", "rampdown_length", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.train.init_data": [[156, 161], ["inputs_q.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx_train.size", "target_q.size"], "function", ["None"], ["", "", "def", "update_q_data", "(", ")", ":", "\n", "    ", "preds", "=", "trainer_p", ".", "predict", "(", "inputs_p", ")", "\n", "target_q", ".", "copy_", "(", "preds", ")", "\n", "if", "opt", "[", "'use_gold'", "]", "==", "1", ":", "\n", "        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.train.update_ema_variables": [[163, 169], ["min", "zip", "ema_model.parameters", "model.parameters", "ema_param.data.mul_().add_", "ema_param.data.mul_"], "function", ["None"], ["\n", "", "", "def", "pre_train", "(", "epoches", ")", ":", "\n", "    ", "best", "=", "0.0", "\n", "init_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_train", ",", "adj_ss", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.train.get_current_consistency_weight": [[171, 175], ["ramps.sigmoid_rampup"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.ramps.sigmoid_rampup"], ["_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "if", "accuracy_dev", ">", "best", ":", "\n", "            ", "best", "=", "accuracy_dev", "\n", "state", "=", "dict", "(", "[", "(", "'model'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "model", ".", "state_dict", "(", ")", ")", ")", ",", "(", "'optim'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "optimizer", ".", "state_dict", "(", ")", ")", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.train.sharpen": [[178, 184], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow.sum().reshape", "torch.pow.sum"], "function", ["None"], ["return", "results", "\n", "\n", "", "def", "train_p", "(", "epoches", ")", ":", "\n", "    ", "update_p_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_p", ".", "update_soft", "(", "inputs_p", ",", "target_p", ",", "idx_all", ",", "adj_ss", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.train.train": [[188, 252], ["train.init_data", "range", "random.randint", "trainer.evaluate", "trainer.evaluate", "trainer.evaluate", "trainer_ema.evaluate", "train.update_ema_variables", "trainer.model.train", "trainer.optimizer.zero_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint.cuda", "range", "torch.randint.mean", "train.sharpen", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "trainer.update_soft_aux", "train.get_current_consistency_weight", "total_loss.backward", "trainer.optimizer.step", "trainer.model.train", "trainer.optimizer.zero_grad", "trainer.update_soft", "total_loss.backward", "trainer.optimizer.step", "dict", "trainer.predict_noisy", "print", "print", "loss.item", "loss_usup.item", "loss.item", "copy.deepcopy", "copy.deepcopy", "trainer.model.state_dict", "trainer.optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.init_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.update_ema_variables", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.sharpen", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.get_current_consistency_weight", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict_noisy"], ["", "return", "results", "\n", "\n", "", "def", "train_q", "(", "epoches", ")", ":", "\n", "    ", "update_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_all", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "", "return", "results", "\n", "\n", "", "base_results", ",", "q_results", ",", "p_results", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "base_results", "+=", "pre_train", "(", "opt", "[", "'pre_epoch'", "]", ")", "\n", "for", "k", "in", "range", "(", "opt", "[", "'iter'", "]", ")", ":", "\n", "    ", "p_results", "+=", "train_p", "(", "opt", "[", "'epoch'", "]", ")", "\n", "q_results", "+=", "train_q", "(", "opt", "[", "'epoch'", "]", ")", "\n", "\n", "", "def", "get_accuracy", "(", "results", ")", ":", "\n", "    ", "best_dev", ",", "acc_test", "=", "0.0", ",", "0.0", "\n", "for", "d", ",", "t", "in", "results", ":", "\n", "        ", "if", "d", ">", "best_dev", ":", "\n", "            ", "best_dev", ",", "acc_test", "=", "d", ",", "t", "\n", "", "", "return", "best_dev", ",", "acc_test", "\n", "\n", "", "best_dev", ",", "acc_test", "=", "get_accuracy", "(", "q_results", ")", "\n", "\n", "print", "(", "'{:.3f}'", ".", "format", "(", "acc_test", "*", "100", ")", ")", "\n", "with", "open", "(", "'record.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "# f.write(str(best_dev) + ',')", "\n", "    ", "f", ".", "write", "(", "str", "(", "acc_test", ")", "+", "','", ")", "\n", "\n", "", "if", "opt", "[", "'save'", "]", "!=", "'/'", ":", "\n", "    ", "trainer_q", ".", "save", "(", "opt", "[", "'save'", "]", "+", "'/gnnq.pt'", ")", "\n", "trainer_p", ".", "save", "(", "opt", "[", "'save'", "]", "+", "'/gnnp.pt'", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.train.get_accuracy": [[258, 264], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.layer.SparseMM.__init__": [[12, 15], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "in_size", "=", "opt", "[", "'in'", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.layer.SparseMM.forward": [[16, 18], ["torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["self", ".", "out_size", "=", "opt", "[", "'out'", "]", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_size", ",", "self", ".", "out_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.layer.SparseMM.backward": [[19, 24], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "layer.SparseMM.sparse.t"], "methods", ["None"], ["self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "out_size", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.layer.GraphConvolution.__init__": [[28, 36], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layer.GraphConvolution.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "m0", "=", "torch", ".", "spmm", "(", "adj", ",", "x", ")", "\n", "m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "return", "m", ",", "m0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.layer.GraphConvolution.reset_parameters": [[37, 40], ["layer.GraphConvolution.weight.data.uniform_", "math.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.layer.GraphConvolution.forward": [[41, 48], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "layer.SparseMM", "layer.SparseMM"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.layer.GraphConvolution.forward_partition": [[49, 52], ["layer.SparseMM"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.layer.GraphConvolution.forward_aux": [[53, 56], ["torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_pubmed_ss.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["os", ".", "system", "(", "'rm record_val.txt'", ")", "\n", "os", ".", "system", "(", "'echo -n -> record_val.txt'", ")", "\n", "\n", "partition_num_list", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", ",", "40", "]", "\n", "task_ratio_list", "=", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_pubmed_ss.run": [[44, 47], ["copy.deepcopy", "os.system", "run_pubmed_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["for", "p", "in", "partition_num_list", ":", "\n", "    ", "for", "t", "in", "task_ratio_list", ":", "\n", "\n", "        ", "os", ".", "system", "(", "'rm record.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_pubmed.generate_command": [[36, 41], ["opt.items", "str"], "function", ["None"], ["\n", "", "for", "k", "in", "range", "(", "50", ")", ":", "\n", "    ", "seed", "=", "k", "+", "1", "\n", "opt", "[", "'seed'", "]", "=", "seed", "\n", "run", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_pubmed.run": [[42, 45], ["copy.deepcopy", "os.system", "run_pubmed.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Vocab.__init__": [[11, 35], ["open", "open.close", "loader.Vocab.itos.append", "line.strip().split", "item.strip().split", "line.strip", "item.strip", "string.split", "loader.Vocab.itos.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "cols", ",", "with_padding", "=", "False", ")", ":", "\n", "        ", "self", ".", "itos", "=", "[", "]", "\n", "self", ".", "stoi", "=", "{", "}", "\n", "self", ".", "vocab_size", "=", "0", "\n", "\n", "if", "with_padding", ":", "\n", "            ", "string", "=", "'<pad>'", "\n", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "\n", "", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "item", "=", "items", "[", "col", "]", "\n", "strings", "=", "item", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "for", "string", "in", "strings", ":", "\n", "                    ", "string", "=", "string", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "if", "string", "not", "in", "self", ".", "stoi", ":", "\n", "                        ", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "", "", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Vocab.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.EntityLabel.__init__": [[41, 56], ["open", "open.close", "line.strip().split", "loader.EntityLabel.vocab_n.stoi.get", "loader.EntityLabel.vocab_l.stoi.get", "range", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "label", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_l", ",", "self", ".", "col_l", "=", "label", "\n", "self", ".", "itol", "=", "[", "-", "1", "for", "k", "in", "range", "(", "self", ".", "vocab_n", ".", "vocab_size", ")", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sl", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_l", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "l", "=", "self", ".", "vocab_l", ".", "stoi", ".", "get", "(", "sl", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "self", ".", "itol", "[", "n", "]", "=", "l", "\n", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.EntityFeature.__init__": [[59, 79], ["open", "open.close", "line.strip().split", "loader.EntityFeature.vocab_n.stoi.get", "sf.strip().split", "range", "loader.EntityFeature.vocab_f.stoi.get", "float", "loader.EntityFeature.itof[].append", "len", "line.strip", "sf.strip", "s.split", "s.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "feature", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_f", ",", "self", ".", "col_f", "=", "feature", "\n", "self", ".", "itof", "=", "[", "[", "]", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "self", ".", "one_hot", "=", "[", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sf", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_f", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "for", "s", "in", "sf", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ":", "\n", "                ", "f", "=", "self", ".", "vocab_f", ".", "stoi", ".", "get", "(", "s", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "s", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "f", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "itof", "[", "n", "]", ".", "append", "(", "(", "f", ",", "w", ")", ")", "\n", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.EntityFeature.to_one_hot": [[80, 92], ["range", "len", "range", "range", "len", "len"], "methods", ["None"], ["", "def", "to_one_hot", "(", "self", ",", "binary", "=", "False", ")", ":", "\n", "        ", "self", ".", "one_hot", "=", "[", "[", "0", "for", "j", "in", "range", "(", "len", "(", "self", ".", "vocab_f", ")", ")", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", ":", "\n", "            ", "sm", "=", "0", "\n", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "sm", "+=", "wt", "\n", "", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "self", ".", "one_hot", "[", "k", "]", "[", "fid", "]", "=", "wt", "/", "sm", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Graph.__init__": [[94, 122], ["open", "line.strip().split", "loader.Graph.vocab_n.stoi.get", "loader.Graph.vocab_n.stoi.get", "float", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "weight", "=", "None", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_u", ",", "self", ".", "col_v", "=", "entity", "\n", "self", ".", "col_w", "=", "weight", "\n", "self", ".", "edges", "=", "[", "]", "\n", "\n", "self", ".", "node_size", "=", "-", "1", "\n", "\n", "self", ".", "eid2iid", "=", "None", "\n", "self", ".", "iid2eid", "=", "None", "\n", "\n", "self", ".", "adj_w", "=", "None", "\n", "self", ".", "adj_t", "=", "None", "\n", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "fi", ":", "\n", "\n", "            ", "for", "line", "in", "fi", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "su", ",", "sv", "=", "items", "[", "self", ".", "col_u", "]", ",", "items", "[", "self", ".", "col_v", "]", "\n", "sw", "=", "items", "[", "self", ".", "col_w", "]", "if", "self", ".", "col_w", "!=", "None", "else", "None", "\n", "\n", "u", ",", "v", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "su", ",", "-", "1", ")", ",", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sv", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "sw", ")", "if", "sw", "!=", "None", "else", "1", "\n", "\n", "if", "u", "==", "-", "1", "or", "v", "==", "-", "1", "or", "w", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "u", "==", "v", ":", "\n", "                    ", "continue", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Graph.get_node_size": [[123, 125], ["None"], "methods", ["None"], ["# print(\"cindy\", u,v,w)", "\n", "\n", "", "self", ".", "edges", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Graph.get_edge_size": [[126, 128], ["len"], "methods", ["None"], ["\n", "", "", "self", ".", "edges_ss", "=", "self", ".", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Graph.to_symmetric": [[129, 158], ["set", "dict", "list", "dict.items", "dict", "set.add", "set.add", "dict.get", "dict.get", "math.sqrt"], "methods", ["None"], ["", "def", "get_node_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "node_size", "\n", "\n", "", "def", "get_edge_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "edges", ")", "\n", "\n", "", "def", "to_symmetric", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n", "            ", "if", "u", "==", "v", ":", "\n", "                ", "continue", "\n", "", "w_", "=", "pair2wt", ".", "get", "(", "(", "v", ",", "u", ")", ",", "-", "1", ")", "\n", "if", "w", ">", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", ",", "(", "v", ",", "u", ",", "w", ")", "]", "\n", "", "elif", "w", "==", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n", "", "", "for", "k", "in", "vocab", ":", "\n", "            ", "edges_", "+=", "[", "(", "k", ",", "k", ",", "self_link_weight", ")", "]", "\n", "\n", "", "d", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "edges_", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Graph.get_sparse_adjacency": [[159, 177], ["torch.Size", "torch.LongTensor", "torch.Tensor", "torch.sparse.FloatTensor", "index.cuda.cuda.cuda", "value.cuda.cuda.cuda", "adj.cuda.cuda.cuda"], "methods", ["None"], ["            ", "d", "[", "u", "]", "=", "d", ".", "get", "(", "u", ",", "0.0", ")", "+", "w", "\n", "\n", "", "self", ".", "edges", "=", "[", "(", "u", ",", "v", ",", "w", "/", "math", ".", "sqrt", "(", "d", "[", "u", "]", "*", "d", "[", "v", "]", ")", ")", "for", "u", ",", "v", ",", "w", "in", "edges_", "]", "\n", "\n", "", "def", "get_sparse_adjacency", "(", "self", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "vocab_n", ".", "vocab_size", ",", "self", ".", "vocab_n", ".", "vocab_size", "]", ")", "\n", "\n", "us", ",", "vs", ",", "ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "\n", "            ", "us", "+=", "[", "u", "]", "\n", "vs", "+=", "[", "v", "]", "\n", "ws", "+=", "[", "w", "]", "\n", "", "index", "=", "torch", ".", "LongTensor", "(", "[", "us", ",", "vs", "]", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "ws", ")", "\n", "if", "cuda", ":", "\n", "            ", "index", "=", "index", ".", "cuda", "(", ")", "\n", "value", "=", "value", ".", "cuda", "(", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ",", "value", ",", "shape", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Graph.to_symmetric_ss": [[178, 205], ["set", "dict", "list", "dict.items", "dict", "set.add", "set.add", "dict.get", "dict.get", "math.sqrt"], "methods", ["None"], ["if", "cuda", ":", "\n", "            ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "", "return", "adj", "\n", "\n", "", "def", "to_symmetric_ss", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n", "            ", "if", "u", "==", "v", ":", "\n", "                ", "continue", "\n", "", "w_", "=", "pair2wt", ".", "get", "(", "(", "v", ",", "u", ")", ",", "-", "1", ")", "\n", "if", "w", ">", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", ",", "(", "v", ",", "u", ",", "w", ")", "]", "\n", "", "elif", "w", "==", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n", "", "", "for", "k", "in", "vocab", ":", "\n", "            ", "edges_", "+=", "[", "(", "k", ",", "k", ",", "self_link_weight", ")", "]", "\n", "\n", "", "d", "=", "dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Graph.get_sparse_adjacency_ss": [[206, 225], ["torch.Size", "torch.LongTensor", "torch.Tensor", "torch.sparse.FloatTensor", "index.cuda.cuda.cuda", "value.cuda.cuda.cuda", "adj.cuda.cuda.cuda"], "methods", ["None"], ["for", "u", ",", "v", ",", "w", "in", "edges_", ":", "\n", "            ", "d", "[", "u", "]", "=", "d", ".", "get", "(", "u", ",", "0.0", ")", "+", "w", "\n", "\n", "", "self", ".", "edges_ss", "=", "[", "(", "u", ",", "v", ",", "w", "/", "math", ".", "sqrt", "(", "d", "[", "u", "]", "*", "d", "[", "v", "]", ")", ")", "for", "u", ",", "v", ",", "w", "in", "edges_", "]", "\n", "\n", "", "def", "get_sparse_adjacency_ss", "(", "self", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "vocab_n", ".", "vocab_size", ",", "self", ".", "vocab_n", ".", "vocab_size", "]", ")", "\n", "\n", "us", ",", "vs", ",", "ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "\n", "            ", "us", "+=", "[", "u", "]", "\n", "vs", "+=", "[", "v", "]", "\n", "ws", "+=", "[", "w", "]", "\n", "", "index", "=", "torch", ".", "LongTensor", "(", "[", "us", ",", "vs", "]", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "ws", ")", "\n", "if", "cuda", ":", "\n", "            ", "index", "=", "index", ".", "cuda", "(", ")", "\n", "value", "=", "value", ".", "cuda", "(", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ",", "value", ",", "shape", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.loader.Graph.partition": [[227, 243], ["len", "metis.part_graph", "torch.tensor", "range", "adj_list[].append", "adj_list[].append"], "methods", ["None"], ["            ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "", "return", "adj", "\n", "\n", "", "def", "partition", "(", "self", ",", "nparts", ")", ":", "\n", "\n", "        ", "node_num", "=", "len", "(", "self", ".", "vocab_n", ")", "\n", "adj_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "node_num", ")", "]", "\n", "for", "i", ",", "j", ",", "_", "in", "self", ".", "edges", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "continue", "\n", "", "if", "not", "j", "in", "adj_list", "[", "i", "]", ":", "\n", "                ", "adj_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "", "if", "not", "i", "in", "adj_list", "[", "j", "]", ":", "\n", "                ", "adj_list", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "_", ",", "partition_labels", "=", "metis", ".", "part_graph", "(", "adj_list", ",", "nparts", "=", "nparts", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.losses.softmax_mse_loss": [[15, 28], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "input_logits.size", "target_logits.size", "input_logits.size", "torch.nn.functional.mse_loss"], "function", ["None"], ["def", "softmax_mse_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_softmax", "=", "F", ".", "softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "num_classes", "=", "input_logits", ".", "size", "(", ")", "[", "1", "]", "\n", "return", "F", ".", "mse_loss", "(", "input_softmax", ",", "target_softmax", ",", "reduction", "=", "'sum'", ")", "/", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.losses.softmax_kl_loss": [[30, 42], ["torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.nn.functional.kl_div", "input_logits.size", "target_logits.size"], "function", ["None"], ["", "def", "softmax_kl_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns KL divergence\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_log_softmax", "=", "F", ".", "log_softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "return", "F", ".", "kl_div", "(", "input_log_softmax", ",", "target_softmax", ",", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.losses.symmetric_mse_loss": [[44, 55], ["input1.size", "input2.size", "input1.size", "torch.sum"], "function", ["None"], ["", "def", "symmetric_mse_loss", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"Like F.mse_loss but sends gradients to both directions\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to both input1 and input2.\n    \"\"\"", "\n", "assert", "input1", ".", "size", "(", ")", "==", "input2", ".", "size", "(", ")", "\n", "num_classes", "=", "input1", ".", "size", "(", ")", "[", "1", "]", "\n", "return", "torch", ".", "sum", "(", "(", "input1", "-", "input2", ")", "**", "2", ")", "/", "num_classes", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_citeseer_ss.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["os", ".", "system", "(", "'rm record_val.txt'", ")", "\n", "os", ".", "system", "(", "'echo -n -> record_val.txt'", ")", "\n", "\n", "partition_num_list", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", ",", "40", "]", "\n", "task_ratio_list", "=", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.run_citeseer_ss.run": [[44, 47], ["copy.deepcopy", "os.system", "run_citeseer_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["for", "p", "in", "partition_num_list", ":", "\n", "    ", "for", "t", "in", "task_ratio_list", ":", "\n", "\n", "        ", "os", ".", "system", "(", "'rm record.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.gnn.GNN.__init__": [[39, 53], ["torch.nn.Module.__init__", "dict", "layer.GraphConvolution", "dict", "layer.GraphConvolution", "gnn.GNN.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["        ", "super", "(", "GNNp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_class'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.gnn.GNN.reset": [[54, 57], ["gnn.GNN.m1.reset_parameters", "gnn.GNN.m2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.gnn.GNN.forward": [[58, 65], ["torch.dropout", "torch.dropout", "gnn.GNN.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2"], "methods", ["None"], ["x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n", "return", "x", ",", "x0", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.gnn.GNN.forward_partition": [[67, 74], ["torch.dropout", "torch.dropout", "gnn.GNN.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2.forward_partition"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.gnn.GNN.forward_mix": [[76, 88], ["random.choice", "torch.dropout", "torch.dropout", "gnn.GNN.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2", "get_augmented_network_input", "get_augmented_network_input"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.gnn.GNN.forward_aux": [[89, 121], ["torch.dropout", "torch.dropout", "gnn.GNN.m1.forward_aux", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2.forward_aux", "torch.dropout", "torch.dropout", "gnn.GNN.m1.forward_aux", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2.forward_aux", "random.choice", "gnn.mixup_gnn_hidden", "gnn.mixup_gnn_hidden"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.mixup_gnn_hidden", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.mixup_gnn_hidden"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.gnn.mixup_data": [[14, 25], ["torch.randperm().cuda", "torch.randperm().cuda", "numpy.random.beta", "x.size", "torch.randperm", "torch.randperm"], "function", ["None"], ["self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_feature'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-comp.gnn.mixup_gnn_hidden": [[26, 34], ["numpy.random.beta", "torch.randperm", "torch.randperm"], "function", ["None"], ["        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_cora_ss.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["os", ".", "system", "(", "'rm record_val.txt'", ")", "\n", "os", ".", "system", "(", "'echo -n -> record_val.txt'", ")", "\n", "\n", "partition_num_list", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", ",", "40", "]", "\n", "task_ratio_list", "=", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_cora_ss.run": [[44, 47], ["copy.deepcopy", "os.system", "run_cora_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["for", "p", "in", "partition_num_list", ":", "\n", "    ", "for", "t", "in", "task_ratio_list", ":", "\n", "\n", "        ", "os", ".", "system", "(", "'rm record.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_citeseer.generate_command": [[36, 41], ["opt.items", "str"], "function", ["None"], ["\n", "", "for", "k", "in", "range", "(", "50", ")", ":", "\n", "    ", "seed", "=", "k", "+", "1", "\n", "opt", "[", "'seed'", "]", "=", "seed", "\n", "run", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_citeseer.run": [[42, 45], ["copy.deepcopy", "os.system", "run_citeseer.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_cora.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["opt", "[", "'seed'", "]", "=", "seed", "\n", "run", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_cora.run": [[44, 47], ["copy.deepcopy", "os.system", "run_cora.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.__init__": [[38, 61], ["partition_labels.cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Linear", "torch.nn.Linear", "trainer.Trainer.parameters.append", "partition_labels.max", "trainer.Trainer.criterion.cuda", "trainer.Trainer.ss_classifier.cuda", "trainer.get_optimizer", "trainer.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["self", ".", "task_ratio", "=", "opt", "[", "'task_ratio'", "]", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "parameters", "=", "[", "p", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "\n", "self", ".", "parameters", ".", "append", "(", "self", ".", "ss_classifier", ".", "weight", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "self", ".", "ss_classifier", ".", "cuda", "(", ")", "\n", "", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "reset", "(", ")", "\n", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.reset": [[62, 66], ["trainer.Trainer.model.reset", "trainer.get_optimizer"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.reset", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.update": [[67, 82], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.item", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "update_soft", "(", "self", ",", "inputs", ",", "target", ",", "idx", ",", "adj_ss", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "_", ",", "logits0", "=", "self", ".", "model", "(", "inputs", ",", "adj_ss", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.update_soft": [[83, 100], ["trainer.Trainer.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.model.forward_partition", "trainer.Trainer.ss_classifier", "trainer.Trainer.loss_func", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition"], ["\n", "logits", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "[", "idx", "]", "*", "logits", "[", "idx", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "logits0", "=", "self", ".", "ss_classifier", "(", "logits0", ")", "\n", "loss0", "=", "self", ".", "loss_func_ss", "(", "logits0", ",", "self", ".", "partition_labels", ")", "\n", "\n", "# print(loss.data, loss0.data)", "\n", "loss", "=", "loss", "+", "loss0", "*", "self", ".", "task_ratio", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.update_soft_aux": [[105, 149], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "idx_unlabeled.cuda.cuda.cuda", "trainer.Trainer.model.forward_aux", "trainer.Trainer.model.forward_partition", "trainer.Trainer.ss_classifier", "trainer.Trainer.loss_func", "bce_loss", "trainer.Trainer.model.forward_aux", "bce_loss", "trainer.Trainer.model.forward_aux", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.model.forward_aux", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "softmax", "softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux"], ["logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n", "preds", "=", "torch", ".", "max", "(", "logits", "[", "idx", "]", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "=", "preds", ".", "eq", "(", "target", "[", "idx", "]", ")", ".", "double", "(", ")", "\n", "accuracy", "=", "correct", ".", "sum", "(", ")", "/", "idx", ".", "size", "(", "0", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", ",", "preds", ",", "accuracy", ".", "item", "(", ")", "\n", "\n", "", "def", "predict", "(", "self", ",", "inputs", ",", "tau", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "logits", "=", "logits", "/", "tau", "\n", "\n", "logits", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n", "return", "logits", "\n", "\n", "", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "params", "=", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "try", ":", "\n", "            ", "torch", ".", "save", "(", "params", ",", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"[Warning: Saving failed... continuing anyway.]\"", ")", "\n", "\n", "", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"Cannot load model from {}\"", ".", "format", "(", "filename", ")", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optim'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.evaluate": [[152, 166], ["trainer.Trainer.model.eval", "trainer.Trainer.model", "trainer.Trainer.criterion", "preds.eq().double", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "preds.eq().double.sum", "idx.cuda.cuda.size", "trainer.Trainer.item", "accuracy.item", "preds.eq"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.predict": [[167, 178], ["trainer.Trainer.model.eval", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.predict_aux": [[180, 191], ["trainer.Trainer.model.eval", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model.forward_aux", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.predict_noisy": [[192, 203], ["torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.predict_noisy_aux": [[205, 216], ["torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model.forward_aux", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.save": [[218, 227], ["trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "print"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.Trainer.load": [[228, 236], ["trainer.Trainer.model.load_state_dict", "trainer.Trainer.optimizer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.mixup_criterion": [[14, 16], ["criterion", "criterion"], "function", ["None"], ["        ", "return", "torch", ".", "optim", ".", "RMSprop", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adagrad'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adagrad", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.get_optimizer": [[17, 30], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adamax", "torch.optim.Adamax", "Exception"], "function", ["None"], ["", "elif", "name", "==", "'adam'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adamax'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adamax", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unsupported optimizer: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "", "def", "change_lr", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n", "", "", "class", "Trainer", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "opt", ",", "model", ",", "partition_labels", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.trainer.change_lr": [[31, 34], ["None"], "function", ["None"], ["# partition_num = partition_labels.max() + 1", "\n", "        ", "partition_num", "=", "partition_labels", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "ss_classifier", "=", "nn", ".", "Linear", "(", "opt", "[", "'hidden_dim'", "]", ",", "partition_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "partition_labels", "=", "partition_labels", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.ramps.sigmoid_rampup": [[19, 27], ["numpy.clip", "float", "numpy.exp"], "function", ["None"], ["def", "sigmoid_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Exponential rampup from https://arxiv.org/abs/1610.02242\"\"\"", "\n", "if", "rampup_length", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "current", "=", "np", ".", "clip", "(", "current", ",", "0.0", ",", "rampup_length", ")", "\n", "phase", "=", "1.0", "-", "current", "/", "rampup_length", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "5.0", "*", "phase", "*", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.ramps.linear_rampup": [[29, 39], ["None"], "function", ["None"], ["", "", "def", "linear_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Linear rampup\"\"\"", "\n", "assert", "current", ">=", "0", "and", "rampup_length", ">=", "0", "\n", "if", "current", ">=", "rampup_length", ":", "\n", "        ", "lr", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "lr", "=", "current", "/", "rampup_length", "\n", "\n", "#print (lr)", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.ramps.cosine_rampdown": [[40, 44], ["float", "numpy.cos"], "function", ["None"], ["", "def", "cosine_rampdown", "(", "current", ",", "rampdown_length", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "assert", "0", "<=", "current", "<=", "rampdown_length", "\n", "return", "float", "(", ".5", "*", "(", "np", ".", "cos", "(", "np", ".", "pi", "*", "current", "/", "rampdown_length", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.train.init_data": [[147, 152], ["inputs_q.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx_train.size", "target_q.size"], "function", ["None"], ["        ", "idx_lb", "=", "torch", ".", "multinomial", "(", "preds", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "inputs_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "target_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "", "if", "opt", "[", "'use_gold'", "]", "==", "1", ":", "\n", "        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.train.update_ema_variables": [[154, 160], ["min", "zip", "ema_model.parameters", "model.parameters", "ema_param.data.mul_().add_", "ema_param.data.mul_"], "function", ["None"], ["target_p", "[", "idx_train", "]", "=", "temp", "\n", "\n", "", "", "def", "update_q_data", "(", ")", ":", "\n", "    ", "preds", "=", "trainer_p", ".", "predict", "(", "inputs_p", ")", "\n", "target_q", ".", "copy_", "(", "preds", ")", "\n", "if", "opt", "[", "'use_gold'", "]", "==", "1", ":", "\n", "        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.train.get_current_consistency_weight": [[162, 166], ["ramps.sigmoid_rampup"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.ramps.sigmoid_rampup"], ["target_q", "[", "idx_train", "]", "=", "temp", "\n", "\n", "", "", "def", "pre_train", "(", "epoches", ")", ":", "\n", "    ", "best", "=", "0.0", "\n", "init_q_data", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.train.sharpen": [[169, 175], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow.sum().reshape", "torch.pow.sum"], "function", ["None"], ["        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_train", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "if", "accuracy_dev", ">", "best", ":", "\n", "            ", "best", "=", "accuracy_dev", "\n", "state", "=", "dict", "(", "[", "(", "'model'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "model", ".", "state_dict", "(", ")", ")", ")", ",", "(", "'optim'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "optimizer", ".", "state_dict", "(", ")", ")", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.train.train": [[179, 243], ["train.init_data", "range", "random.randint", "trainer.evaluate", "trainer.evaluate", "trainer.evaluate", "trainer_ema.evaluate", "train.update_ema_variables", "trainer.model.train", "trainer.optimizer.zero_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint.cuda", "range", "torch.randint.mean", "train.sharpen", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "trainer.update_soft_aux", "train.get_current_consistency_weight", "total_loss.backward", "trainer.optimizer.step", "trainer.model.train", "trainer.optimizer.zero_grad", "trainer.update_soft", "total_loss.backward", "trainer.optimizer.step", "dict", "trainer.predict_noisy", "print", "print", "loss.item", "loss_usup.item", "loss.item", "copy.deepcopy", "copy.deepcopy", "trainer.model.state_dict", "trainer.optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.init_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.update_ema_variables", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.sharpen", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.get_current_consistency_weight", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict_noisy"], ["\n", "", "def", "train_p", "(", "epoches", ")", ":", "\n", "    ", "update_p_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_p", ".", "update_soft", "(", "inputs_p", ",", "target_p", ",", "idx_all", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_p", ".", "evaluate", "(", "inputs_p", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_p", ".", "evaluate", "(", "inputs_p", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "", "return", "results", "\n", "\n", "", "def", "train_q", "(", "epoches", ")", ":", "\n", "    ", "update_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_all", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "", "return", "results", "\n", "\n", "", "base_results", ",", "q_results", ",", "p_results", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "base_results", "+=", "pre_train", "(", "opt", "[", "'pre_epoch'", "]", ")", "\n", "for", "k", "in", "range", "(", "opt", "[", "'iter'", "]", ")", ":", "\n", "    ", "p_results", "+=", "train_p", "(", "opt", "[", "'epoch'", "]", ")", "\n", "q_results", "+=", "train_q", "(", "opt", "[", "'epoch'", "]", ")", "\n", "\n", "", "def", "get_accuracy", "(", "results", ")", ":", "\n", "    ", "best_dev", ",", "acc_test", "=", "0.0", ",", "0.0", "\n", "for", "d", ",", "t", "in", "results", ":", "\n", "        ", "if", "d", ">", "best_dev", ":", "\n", "            ", "best_dev", ",", "acc_test", "=", "d", ",", "t", "\n", "", "", "return", "best_dev", ",", "acc_test", "\n", "\n", "", "best_dev", ",", "acc_test", "=", "get_accuracy", "(", "q_results", ")", "\n", "\n", "print", "(", "'{:.3f}'", ".", "format", "(", "acc_test", "*", "100", ")", ")", "\n", "with", "open", "(", "'record.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "# f.write(str(best_dev) + ',')", "\n", "    ", "f", ".", "write", "(", "str", "(", "acc_test", ")", "+", "','", ")", "\n", "\n", "", "if", "opt", "[", "'save'", "]", "!=", "'/'", ":", "\n", "    ", "trainer_q", ".", "save", "(", "opt", "[", "'save'", "]", "+", "'/gnnq.pt'", ")", "\n", "trainer_p", ".", "save", "(", "opt", "[", "'save'", "]", "+", "'/gnnp.pt'", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.train.get_accuracy": [[249, 255], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.layer.SparseMM.__init__": [[12, 15], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "in_size", "=", "opt", "[", "'in'", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.layer.SparseMM.forward": [[16, 18], ["torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["self", ".", "out_size", "=", "opt", "[", "'out'", "]", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_size", ",", "self", ".", "out_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.layer.SparseMM.backward": [[19, 24], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "layer.SparseMM.sparse.t"], "methods", ["None"], ["self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "out_size", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.layer.GraphConvolution.__init__": [[28, 36], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layer.GraphConvolution.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "m0", "=", "torch", ".", "spmm", "(", "adj", ",", "x", ")", "\n", "m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "return", "m", ",", "m0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.layer.GraphConvolution.reset_parameters": [[37, 40], ["layer.GraphConvolution.weight.data.uniform_", "math.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.layer.GraphConvolution.forward": [[41, 45], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "layer.SparseMM"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.layer.GraphConvolution.forward_partition": [[46, 49], ["layer.SparseMM"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.layer.GraphConvolution.forward_aux": [[50, 53], ["torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_pubmed_ss.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["os", ".", "system", "(", "'rm record_val.txt'", ")", "\n", "os", ".", "system", "(", "'echo -n -> record_val.txt'", ")", "\n", "\n", "partition_num_list", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", ",", "40", "]", "\n", "task_ratio_list", "=", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_pubmed_ss.run": [[44, 47], ["copy.deepcopy", "os.system", "run_pubmed_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["for", "p", "in", "partition_num_list", ":", "\n", "    ", "for", "t", "in", "task_ratio_list", ":", "\n", "\n", "        ", "os", ".", "system", "(", "'rm record.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_pubmed.generate_command": [[36, 41], ["opt.items", "str"], "function", ["None"], ["\n", "", "for", "k", "in", "range", "(", "50", ")", ":", "\n", "    ", "seed", "=", "k", "+", "1", "\n", "opt", "[", "'seed'", "]", "=", "seed", "\n", "run", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_pubmed.run": [[42, 45], ["copy.deepcopy", "os.system", "run_pubmed.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.Vocab.__init__": [[11, 35], ["open", "open.close", "loader.Vocab.itos.append", "line.strip().split", "item.strip().split", "line.strip", "item.strip", "string.split", "loader.Vocab.itos.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "cols", ",", "with_padding", "=", "False", ")", ":", "\n", "        ", "self", ".", "itos", "=", "[", "]", "\n", "self", ".", "stoi", "=", "{", "}", "\n", "self", ".", "vocab_size", "=", "0", "\n", "\n", "if", "with_padding", ":", "\n", "            ", "string", "=", "'<pad>'", "\n", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "\n", "", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "item", "=", "items", "[", "col", "]", "\n", "strings", "=", "item", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "for", "string", "in", "strings", ":", "\n", "                    ", "string", "=", "string", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "if", "string", "not", "in", "self", ".", "stoi", ":", "\n", "                        ", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "", "", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.Vocab.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.EntityLabel.__init__": [[41, 56], ["open", "open.close", "line.strip().split", "loader.EntityLabel.vocab_n.stoi.get", "loader.EntityLabel.vocab_l.stoi.get", "range", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "label", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_l", ",", "self", ".", "col_l", "=", "label", "\n", "self", ".", "itol", "=", "[", "-", "1", "for", "k", "in", "range", "(", "self", ".", "vocab_n", ".", "vocab_size", ")", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sl", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_l", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "l", "=", "self", ".", "vocab_l", ".", "stoi", ".", "get", "(", "sl", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "self", ".", "itol", "[", "n", "]", "=", "l", "\n", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.EntityFeature.__init__": [[59, 79], ["open", "open.close", "line.strip().split", "loader.EntityFeature.vocab_n.stoi.get", "sf.strip().split", "range", "loader.EntityFeature.vocab_f.stoi.get", "float", "loader.EntityFeature.itof[].append", "len", "line.strip", "sf.strip", "s.split", "s.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "feature", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_f", ",", "self", ".", "col_f", "=", "feature", "\n", "self", ".", "itof", "=", "[", "[", "]", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "self", ".", "one_hot", "=", "[", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sf", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_f", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "for", "s", "in", "sf", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ":", "\n", "                ", "f", "=", "self", ".", "vocab_f", ".", "stoi", ".", "get", "(", "s", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "s", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "f", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "itof", "[", "n", "]", ".", "append", "(", "(", "f", ",", "w", ")", ")", "\n", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.EntityFeature.to_one_hot": [[80, 92], ["range", "len", "range", "range", "len", "len"], "methods", ["None"], ["", "def", "to_one_hot", "(", "self", ",", "binary", "=", "False", ")", ":", "\n", "        ", "self", ".", "one_hot", "=", "[", "[", "0", "for", "j", "in", "range", "(", "len", "(", "self", ".", "vocab_f", ")", ")", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", ":", "\n", "            ", "sm", "=", "0", "\n", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "sm", "+=", "wt", "\n", "", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "self", ".", "one_hot", "[", "k", "]", "[", "fid", "]", "=", "wt", "/", "sm", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.Graph.__init__": [[94, 121], ["open", "line.strip().split", "loader.Graph.vocab_n.stoi.get", "loader.Graph.vocab_n.stoi.get", "float", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "weight", "=", "None", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_u", ",", "self", ".", "col_v", "=", "entity", "\n", "self", ".", "col_w", "=", "weight", "\n", "self", ".", "edges", "=", "[", "]", "\n", "\n", "self", ".", "node_size", "=", "-", "1", "\n", "\n", "self", ".", "eid2iid", "=", "None", "\n", "self", ".", "iid2eid", "=", "None", "\n", "\n", "self", ".", "adj_w", "=", "None", "\n", "self", ".", "adj_t", "=", "None", "\n", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "fi", ":", "\n", "\n", "            ", "for", "line", "in", "fi", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "su", ",", "sv", "=", "items", "[", "self", ".", "col_u", "]", ",", "items", "[", "self", ".", "col_v", "]", "\n", "sw", "=", "items", "[", "self", ".", "col_w", "]", "if", "self", ".", "col_w", "!=", "None", "else", "None", "\n", "\n", "u", ",", "v", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "su", ",", "-", "1", ")", ",", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sv", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "sw", ")", "if", "sw", "!=", "None", "else", "1", "\n", "\n", "if", "u", "==", "-", "1", "or", "v", "==", "-", "1", "or", "w", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "u", "==", "v", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.Graph.get_node_size": [[123, 125], ["None"], "methods", ["None"], ["# print(\"cindy\", u,v,w)", "\n", "\n", "", "self", ".", "edges", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.Graph.get_edge_size": [[126, 128], ["len"], "methods", ["None"], ["\n", "", "", "self", ".", "edges_ss", "=", "self", ".", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.Graph.to_symmetric": [[129, 158], ["set", "dict", "list", "dict.items", "dict", "set.add", "set.add", "dict.get", "dict.get", "math.sqrt"], "methods", ["None"], ["", "def", "get_node_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "node_size", "\n", "\n", "", "def", "get_edge_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "edges", ")", "\n", "\n", "", "def", "to_symmetric", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n", "            ", "if", "u", "==", "v", ":", "\n", "                ", "continue", "\n", "", "w_", "=", "pair2wt", ".", "get", "(", "(", "v", ",", "u", ")", ",", "-", "1", ")", "\n", "if", "w", ">", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", ",", "(", "v", ",", "u", ",", "w", ")", "]", "\n", "", "elif", "w", "==", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n", "", "", "for", "k", "in", "vocab", ":", "\n", "            ", "edges_", "+=", "[", "(", "k", ",", "k", ",", "self_link_weight", ")", "]", "\n", "\n", "", "d", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "edges_", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.Graph.get_sparse_adjacency": [[159, 177], ["torch.Size", "torch.LongTensor", "torch.Tensor", "torch.sparse.FloatTensor", "index.cuda.cuda.cuda", "value.cuda.cuda.cuda", "adj.cuda.cuda.cuda"], "methods", ["None"], ["            ", "d", "[", "u", "]", "=", "d", ".", "get", "(", "u", ",", "0.0", ")", "+", "w", "\n", "\n", "", "self", ".", "edges", "=", "[", "(", "u", ",", "v", ",", "w", "/", "math", ".", "sqrt", "(", "d", "[", "u", "]", "*", "d", "[", "v", "]", ")", ")", "for", "u", ",", "v", ",", "w", "in", "edges_", "]", "\n", "\n", "", "def", "get_sparse_adjacency", "(", "self", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "vocab_n", ".", "vocab_size", ",", "self", ".", "vocab_n", ".", "vocab_size", "]", ")", "\n", "\n", "us", ",", "vs", ",", "ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "\n", "            ", "us", "+=", "[", "u", "]", "\n", "vs", "+=", "[", "v", "]", "\n", "ws", "+=", "[", "w", "]", "\n", "", "index", "=", "torch", ".", "LongTensor", "(", "[", "us", ",", "vs", "]", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "ws", ")", "\n", "if", "cuda", ":", "\n", "            ", "index", "=", "index", ".", "cuda", "(", ")", "\n", "value", "=", "value", ".", "cuda", "(", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ",", "value", ",", "shape", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.loader.Graph.partition": [[178, 194], ["len", "metis.part_graph", "torch.tensor", "range", "adj_list[].append", "adj_list[].append"], "methods", ["None"], ["if", "cuda", ":", "\n", "            ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "", "return", "adj", "\n", "\n", "", "def", "to_symmetric_ss", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.losses.softmax_mse_loss": [[15, 28], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "input_logits.size", "target_logits.size", "input_logits.size", "torch.nn.functional.mse_loss"], "function", ["None"], ["def", "softmax_mse_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_softmax", "=", "F", ".", "softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "num_classes", "=", "input_logits", ".", "size", "(", ")", "[", "1", "]", "\n", "return", "F", ".", "mse_loss", "(", "input_softmax", ",", "target_softmax", ",", "reduction", "=", "'sum'", ")", "/", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.losses.softmax_kl_loss": [[30, 42], ["torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.nn.functional.kl_div", "input_logits.size", "target_logits.size"], "function", ["None"], ["", "def", "softmax_kl_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns KL divergence\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_log_softmax", "=", "F", ".", "log_softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "return", "F", ".", "kl_div", "(", "input_log_softmax", ",", "target_softmax", ",", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.losses.symmetric_mse_loss": [[44, 55], ["input1.size", "input2.size", "input1.size", "torch.sum"], "function", ["None"], ["", "def", "symmetric_mse_loss", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"Like F.mse_loss but sends gradients to both directions\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to both input1 and input2.\n    \"\"\"", "\n", "assert", "input1", ".", "size", "(", ")", "==", "input2", ".", "size", "(", ")", "\n", "num_classes", "=", "input1", ".", "size", "(", ")", "[", "1", "]", "\n", "return", "torch", ".", "sum", "(", "(", "input1", "-", "input2", ")", "**", "2", ")", "/", "num_classes", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_citeseer_ss.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["os", ".", "system", "(", "'rm record_val.txt'", ")", "\n", "os", ".", "system", "(", "'echo -n -> record_val.txt'", ")", "\n", "\n", "partition_num_list", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", ",", "40", "]", "\n", "task_ratio_list", "=", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.run_citeseer_ss.run": [[44, 47], ["copy.deepcopy", "os.system", "run_citeseer_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["for", "p", "in", "partition_num_list", ":", "\n", "    ", "for", "t", "in", "task_ratio_list", ":", "\n", "\n", "        ", "os", ".", "system", "(", "'rm record.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.gnn.GNN.__init__": [[39, 53], ["torch.nn.Module.__init__", "dict", "layer.GraphConvolution", "dict", "layer.GraphConvolution", "gnn.GNN.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["        ", "super", "(", "GNNp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_class'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.gnn.GNN.reset": [[54, 57], ["gnn.GNN.m1.reset_parameters", "gnn.GNN.m2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.gnn.GNN.forward": [[58, 65], ["torch.dropout", "torch.dropout", "gnn.GNN.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2"], "methods", ["None"], ["x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n", "return", "x", ",", "x0", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.gnn.GNN.forward_partition": [[67, 74], ["torch.dropout", "torch.dropout", "gnn.GNN.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2.forward_partition"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.gnn.GNN.forward_mix": [[76, 88], ["random.choice", "torch.dropout", "torch.dropout", "gnn.GNN.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2", "get_augmented_network_input", "get_augmented_network_input"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.gnn.GNN.forward_aux": [[89, 121], ["torch.dropout", "torch.dropout", "gnn.GNN.m1.forward_aux", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2.forward_aux", "torch.dropout", "torch.dropout", "gnn.GNN.m1.forward_aux", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2.forward_aux", "random.choice", "gnn.mixup_gnn_hidden", "gnn.mixup_gnn_hidden"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.mixup_gnn_hidden", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.mixup_gnn_hidden"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.gnn.mixup_data": [[14, 25], ["torch.randperm().cuda", "torch.randperm().cuda", "numpy.random.beta", "x.size", "torch.randperm", "torch.randperm"], "function", ["None"], ["self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_feature'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-par.gnn.mixup_gnn_hidden": [[26, 34], ["numpy.random.beta", "torch.randperm", "torch.randperm"], "function", ["None"], ["        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_cora_ss.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_cora_ss.run": [[32, 35], ["copy.deepcopy", "os.system", "run_cora_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_citeseer.generate_command": [[27, 32], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_citeseer.run": [[33, 36], ["copy.deepcopy", "os.system", "run_citeseer.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_cora.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_cora.run": [[32, 35], ["copy.deepcopy", "os.system", "run_cora.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.Trainer.__init__": [[29, 48], ["torch.nn.Linear", "torch.nn.Linear", "partition_labels.cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "trainer.Trainer.parameters.append", "trainer.get_optimizer", "partition_labels.max", "trainer.Trainer.criterion.cuda", "trainer.Trainer.ss_classifier.cuda", "trainer.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "model", ",", "partition_labels", ")", ":", "\n", "\n", "# partition_num = partition_labels.max() + 1", "\n", "        ", "partition_num", "=", "partition_labels", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "ss_classifier", "=", "nn", ".", "Linear", "(", "opt", "[", "'hidden_dim'", "]", ",", "partition_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "partition_labels", "=", "partition_labels", ".", "cuda", "(", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "loss_func_ss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "# self.loss_func_ss = nn.MSELoss()", "\n", "self", ".", "task_ratio", "=", "opt", "[", "'task_ratio'", "]", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "parameters", "=", "[", "p", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "\n", "self", ".", "parameters", ".", "append", "(", "self", ".", "ss_classifier", ".", "weight", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "criterion", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.Trainer.reset": [[49, 52], ["trainer.Trainer.model.reset", "trainer.get_optimizer"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.reset", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["self", ".", "ss_classifier", ".", "cuda", "(", ")", "\n", "", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.Trainer.update": [[53, 68], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.item", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["        ", "self", ".", "model", ".", "reset", "(", ")", "\n", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.Trainer.update_soft": [[69, 90], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.ss_classifier", "trainer.Trainer.loss_func", "loss.backward", "trainer.Trainer.optimizer.step", "loss.item", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "update_soft", "(", "self", ",", "inputs", ",", "target", ",", "idx", ",", "adj_ss", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "_", ",", "logits0", "=", "self", ".", "model", "(", "inputs", ",", "adj_ss", ")", "\n", "\n", "logits", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "[", "idx", "]", "*", "logits", "[", "idx", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "logits0", "=", "self", ".", "ss_classifier", "(", "logits0", ")", "\n", "loss0", "=", "self", ".", "loss_func_ss", "(", "logits0", ",", "self", ".", "partition_labels", ")", "\n", "\n", "# print(loss.data, loss0.data)", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.Trainer.evaluate": [[91, 106], ["trainer.Trainer.model.eval", "trainer.Trainer.model", "trainer.Trainer.criterion", "preds.eq().double", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "preds.eq().double.sum", "idx.cuda.cuda.size", "trainer.Trainer.item", "accuracy.item", "preds.eq"], "methods", ["None"], ["loss", "=", "loss", "+", "loss0", "*", "self", ".", "task_ratio", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.Trainer.predict": [[107, 119], ["trainer.Trainer.model.eval", "trainer.Trainer.model", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["preds", "=", "torch", ".", "max", "(", "logits", "[", "idx", "]", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "=", "preds", ".", "eq", "(", "target", "[", "idx", "]", ")", ".", "double", "(", ")", "\n", "accuracy", "=", "correct", ".", "sum", "(", ")", "/", "idx", ".", "size", "(", "0", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", ",", "preds", ",", "accuracy", ".", "item", "(", ")", "\n", "\n", "", "def", "predict", "(", "self", ",", "inputs", ",", "tau", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.Trainer.save": [[120, 129], ["trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "print"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save"], ["logits", "=", "logits", "/", "tau", "\n", "\n", "logits", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n", "return", "logits", "\n", "\n", "", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "params", "=", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.Trainer.load": [[130, 138], ["trainer.Trainer.model.load_state_dict", "trainer.Trainer.optimizer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["}", "\n", "try", ":", "\n", "            ", "torch", ".", "save", "(", "params", ",", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"[Warning: Saving failed... continuing anyway.]\"", ")", "\n", "\n", "", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.get_optimizer": [[10, 23], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adamax", "torch.optim.Adamax", "Exception"], "function", ["None"], ["def", "get_optimizer", "(", "name", ",", "parameters", ",", "lr", ",", "weight_decay", "=", "0", ")", ":", "\n", "    ", "if", "name", "==", "'sgd'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'rmsprop'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "RMSprop", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adagrad'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adagrad", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adam'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adamax'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adamax", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unsupported optimizer: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.trainer.change_lr": [[24, 27], ["None"], "function", ["None"], ["", "", "def", "change_lr", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.train.init_q_data": [[115, 120], ["inputs_q.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx_train.size", "target_q.size"], "function", ["None"], ["# f_mask = f_mask / d.view(3327, 1)", "\n", "# print(f_mask)", "\n", "# assert False", "\n", "partition_labels", "=", "f_mask", "[", ":", ",", ":", "opt", "[", "'partition_num'", "]", "]", "\n", "d", "=", "partition_labels", ".", "sum", "(", "dim", "=", "1", ")", "\n", "d", "[", "abs", "(", "d", ")", "<", "1e-2", "]", "=", "1e-2", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.train.update_p_data": [[121, 139], ["trainer_q.predict", "inputs_p.copy_", "target_p.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "inputs_p.zero_().scatter_", "target_p.zero_().scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "inputs_p.zero_().scatter_", "target_p.zero_().scatter_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "inputs_p.zero_", "target_p.zero_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "idx_train.size", "target_q.size", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "inputs_p.zero_", "target_p.zero_"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict"], ["partition_labels", "=", "partition_labels", "/", "d", ".", "view", "(", "opt", "[", "'num_node'", "]", ",", "1", ")", "\n", "# print(partition_labels)", "\n", "# assert False", "\n", "\n", "gnnq", "=", "GNNq", "(", "opt", ",", "adj", ")", "\n", "trainer_q", "=", "Trainer", "(", "opt", ",", "gnnq", ",", "partition_labels", ")", "\n", "\n", "gnnp", "=", "GNNp", "(", "opt", ",", "adj", ")", "\n", "trainer_p", "=", "Trainer", "(", "opt", ",", "gnnp", ",", "partition_labels", ")", "\n", "\n", "def", "init_q_data", "(", ")", ":", "\n", "    ", "inputs_q", ".", "copy_", "(", "inputs", ")", "\n", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "target_q", "[", "idx_train", "]", "=", "temp", "\n", "\n", "", "def", "update_p_data", "(", ")", ":", "\n", "    ", "preds", "=", "trainer_q", ".", "predict", "(", "inputs_q", ",", "opt", "[", "'tau'", "]", ")", "\n", "if", "opt", "[", "'draw'", "]", "==", "'exp'", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.train.update_q_data": [[140, 147], ["trainer_p.predict", "target_q.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx_train.size", "target_q.size"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict"], ["        ", "inputs_p", ".", "copy_", "(", "preds", ")", "\n", "target_p", ".", "copy_", "(", "preds", ")", "\n", "", "elif", "opt", "[", "'draw'", "]", "==", "'max'", ":", "\n", "        ", "idx_lb", "=", "torch", ".", "max", "(", "preds", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "inputs_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "target_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "", "elif", "opt", "[", "'draw'", "]", "==", "'smp'", ":", "\n", "        ", "idx_lb", "=", "torch", ".", "multinomial", "(", "preds", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.train.pre_train": [[148, 163], ["train.init_q_data", "range", "trainer_q.model.load_state_dict", "trainer_q.optimizer.load_state_dict", "trainer_q.update_soft", "trainer_q.evaluate", "trainer_q.evaluate", "dict", "copy.deepcopy", "copy.deepcopy", "trainer_q.model.state_dict", "trainer_q.optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.init_q_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate"], ["inputs_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "target_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "", "if", "opt", "[", "'use_gold'", "]", "==", "1", ":", "\n", "        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "inputs_p", "[", "idx_train", "]", "=", "temp", "\n", "target_p", "[", "idx_train", "]", "=", "temp", "\n", "\n", "", "", "def", "update_q_data", "(", ")", ":", "\n", "    ", "preds", "=", "trainer_p", ".", "predict", "(", "inputs_p", ")", "\n", "target_q", ".", "copy_", "(", "preds", ")", "\n", "if", "opt", "[", "'use_gold'", "]", "==", "1", ":", "\n", "        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "target_q", "[", "idx_train", "]", "=", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.train.train_p": [[164, 173], ["train.update_p_data", "range", "trainer_p.update_soft", "trainer_p.evaluate", "trainer_p.evaluate"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.update_p_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate"], ["", "", "def", "pre_train", "(", "epoches", ")", ":", "\n", "    ", "best", "=", "0.0", "\n", "init_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_train", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "if", "accuracy_dev", ">", "best", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.train.train_q": [[174, 183], ["train.update_q_data", "range", "trainer_q.update_soft", "trainer_q.evaluate", "trainer_q.evaluate"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.update_q_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate"], ["            ", "best", "=", "accuracy_dev", "\n", "state", "=", "dict", "(", "[", "(", "'model'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "model", ".", "state_dict", "(", ")", ")", ")", ",", "(", "'optim'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "optimizer", ".", "state_dict", "(", ")", ")", ")", "]", ")", "\n", "", "", "trainer_q", ".", "model", ".", "load_state_dict", "(", "state", "[", "'model'", "]", ")", "\n", "trainer_q", ".", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optim'", "]", ")", "\n", "return", "results", "\n", "\n", "", "def", "train_p", "(", "epoches", ")", ":", "\n", "    ", "update_p_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.train.get_accuracy": [[190, 196], ["None"], "function", ["None"], ["", "def", "train_q", "(", "epoches", ")", ":", "\n", "    ", "update_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_all", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.layer.GraphConvolution.__init__": [[12, 20], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layer.GraphConvolution.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "in_size", "=", "opt", "[", "'in'", "]", "\n", "self", ".", "out_size", "=", "opt", "[", "'out'", "]", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_size", ",", "self", ".", "out_size", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.layer.GraphConvolution.reset_parameters": [[21, 24], ["layer.GraphConvolution.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "out_size", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.layer.GraphConvolution.forward": [[25, 29], ["torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", "=", "None", ")", ":", "\n", "        ", "if", "adj", "is", "None", ":", "\n", "            ", "m0", "=", "torch", ".", "spmm", "(", "self", ".", "adj", ",", "x", ")", "\n", "m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_pubmed_ss.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_pubmed_ss.run": [[32, 35], ["copy.deepcopy", "os.system", "run_pubmed_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_pubmed.generate_command": [[27, 32], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_pubmed.run": [[33, 36], ["copy.deepcopy", "os.system", "run_pubmed.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.Vocab.__init__": [[11, 35], ["open", "open.close", "loader.Vocab.itos.append", "line.strip().split", "item.strip().split", "line.strip", "item.strip", "string.split", "loader.Vocab.itos.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "cols", ",", "with_padding", "=", "False", ")", ":", "\n", "        ", "self", ".", "itos", "=", "[", "]", "\n", "self", ".", "stoi", "=", "{", "}", "\n", "self", ".", "vocab_size", "=", "0", "\n", "\n", "if", "with_padding", ":", "\n", "            ", "string", "=", "'<pad>'", "\n", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "\n", "", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "item", "=", "items", "[", "col", "]", "\n", "strings", "=", "item", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "for", "string", "in", "strings", ":", "\n", "                    ", "string", "=", "string", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "if", "string", "not", "in", "self", ".", "stoi", ":", "\n", "                        ", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "", "", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.Vocab.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.EntityLabel.__init__": [[41, 56], ["open", "open.close", "line.strip().split", "loader.EntityLabel.vocab_n.stoi.get", "loader.EntityLabel.vocab_l.stoi.get", "range", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "label", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_l", ",", "self", ".", "col_l", "=", "label", "\n", "self", ".", "itol", "=", "[", "-", "1", "for", "k", "in", "range", "(", "self", ".", "vocab_n", ".", "vocab_size", ")", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sl", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_l", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "l", "=", "self", ".", "vocab_l", ".", "stoi", ".", "get", "(", "sl", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "self", ".", "itol", "[", "n", "]", "=", "l", "\n", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.EntityFeature.__init__": [[59, 79], ["open", "open.close", "line.strip().split", "loader.EntityFeature.vocab_n.stoi.get", "sf.strip().split", "range", "loader.EntityFeature.vocab_f.stoi.get", "float", "loader.EntityFeature.itof[].append", "len", "line.strip", "sf.strip", "s.split", "s.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "feature", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_f", ",", "self", ".", "col_f", "=", "feature", "\n", "self", ".", "itof", "=", "[", "[", "]", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "self", ".", "one_hot", "=", "[", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sf", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_f", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "for", "s", "in", "sf", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ":", "\n", "                ", "f", "=", "self", ".", "vocab_f", ".", "stoi", ".", "get", "(", "s", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "s", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "f", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "itof", "[", "n", "]", ".", "append", "(", "(", "f", ",", "w", ")", ")", "\n", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.EntityFeature.to_one_hot": [[80, 92], ["range", "len", "range", "range", "len", "len"], "methods", ["None"], ["", "def", "to_one_hot", "(", "self", ",", "binary", "=", "False", ")", ":", "\n", "        ", "self", ".", "one_hot", "=", "[", "[", "0", "for", "j", "in", "range", "(", "len", "(", "self", ".", "vocab_f", ")", ")", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", ":", "\n", "            ", "sm", "=", "0", "\n", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "sm", "+=", "wt", "\n", "", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "self", ".", "one_hot", "[", "k", "]", "[", "fid", "]", "=", "wt", "/", "sm", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.Graph.__init__": [[94, 122], ["open", "line.strip().split", "loader.Graph.vocab_n.stoi.get", "loader.Graph.vocab_n.stoi.get", "float", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "weight", "=", "None", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_u", ",", "self", ".", "col_v", "=", "entity", "\n", "self", ".", "col_w", "=", "weight", "\n", "self", ".", "edges", "=", "[", "]", "\n", "\n", "self", ".", "node_size", "=", "-", "1", "\n", "\n", "self", ".", "eid2iid", "=", "None", "\n", "self", ".", "iid2eid", "=", "None", "\n", "\n", "self", ".", "adj_w", "=", "None", "\n", "self", ".", "adj_t", "=", "None", "\n", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "fi", ":", "\n", "\n", "            ", "for", "line", "in", "fi", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "su", ",", "sv", "=", "items", "[", "self", ".", "col_u", "]", ",", "items", "[", "self", ".", "col_v", "]", "\n", "sw", "=", "items", "[", "self", ".", "col_w", "]", "if", "self", ".", "col_w", "!=", "None", "else", "None", "\n", "\n", "u", ",", "v", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "su", ",", "-", "1", ")", ",", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sv", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "sw", ")", "if", "sw", "!=", "None", "else", "1", "\n", "\n", "if", "u", "==", "-", "1", "or", "v", "==", "-", "1", "or", "w", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "u", "==", "v", ":", "\n", "                    ", "continue", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.Graph.get_node_size": [[123, 125], ["None"], "methods", ["None"], ["# print(\"cindy\", u,v,w)", "\n", "\n", "", "self", ".", "edges", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.Graph.get_edge_size": [[126, 128], ["len"], "methods", ["None"], ["\n", "", "", "self", ".", "edges_ss", "=", "self", ".", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.Graph.to_symmetric": [[129, 156], ["set", "dict", "list", "dict.items", "dict", "set.add", "set.add", "dict.get", "dict.get", "math.sqrt"], "methods", ["None"], ["", "def", "get_node_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "node_size", "\n", "\n", "", "def", "get_edge_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "edges", ")", "\n", "\n", "", "def", "to_symmetric", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n", "            ", "if", "u", "==", "v", ":", "\n", "                ", "continue", "\n", "", "w_", "=", "pair2wt", ".", "get", "(", "(", "v", ",", "u", ")", ",", "-", "1", ")", "\n", "if", "w", ">", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", ",", "(", "v", ",", "u", ",", "w", ")", "]", "\n", "", "elif", "w", "==", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n", "", "", "for", "k", "in", "vocab", ":", "\n", "            ", "edges_", "+=", "[", "(", "k", ",", "k", ",", "self_link_weight", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.Graph.get_sparse_adjacency": [[157, 175], ["torch.Size", "torch.LongTensor", "torch.Tensor", "torch.sparse.FloatTensor", "index.cuda.cuda.cuda", "value.cuda.cuda.cuda", "adj.cuda.cuda.cuda"], "methods", ["None"], ["", "d", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "edges_", ":", "\n", "            ", "d", "[", "u", "]", "=", "d", ".", "get", "(", "u", ",", "0.0", ")", "+", "w", "\n", "\n", "", "self", ".", "edges", "=", "[", "(", "u", ",", "v", ",", "w", "/", "math", ".", "sqrt", "(", "d", "[", "u", "]", "*", "d", "[", "v", "]", ")", ")", "for", "u", ",", "v", ",", "w", "in", "edges_", "]", "\n", "\n", "", "def", "get_sparse_adjacency", "(", "self", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "vocab_n", ".", "vocab_size", ",", "self", ".", "vocab_n", ".", "vocab_size", "]", ")", "\n", "\n", "us", ",", "vs", ",", "ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "\n", "            ", "us", "+=", "[", "u", "]", "\n", "vs", "+=", "[", "v", "]", "\n", "ws", "+=", "[", "w", "]", "\n", "", "index", "=", "torch", ".", "LongTensor", "(", "[", "us", ",", "vs", "]", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "ws", ")", "\n", "if", "cuda", ":", "\n", "            ", "index", "=", "index", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.loader.Graph.partition": [[176, 192], ["len", "metis.part_graph", "torch.tensor", "range", "adj_list[].append", "adj_list[].append"], "methods", ["None"], ["value", "=", "value", ".", "cuda", "(", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ",", "value", ",", "shape", ")", "\n", "if", "cuda", ":", "\n", "            ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "", "return", "adj", "\n", "\n", "", "def", "to_symmetric_ss", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_citeseer_ss.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.run_citeseer_ss.run": [[32, 35], ["copy.deepcopy", "os.system", "run_citeseer_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.gnn.GNNq.__init__": [[11, 24], ["torch.nn.Module.__init__", "dict", "layer.GraphConvolution", "dict", "layer.GraphConvolution", "gnn.GNNq.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GNNq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_feature'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.gnn.GNNq.reset": [[25, 28], ["gnn.GNNq.m1.reset_parameters", "gnn.GNNq.m2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.gnn.GNNq.forward": [[29, 36], ["torch.dropout", "torch.dropout", "gnn.GNNq.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNNq.m2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n", "return", "x", ",", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.gnn.GNNp.__init__": [[38, 51], ["torch.nn.Module.__init__", "dict", "layer.GraphConvolution", "dict", "layer.GraphConvolution", "gnn.GNNp.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GNNp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_class'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.gnn.GNNp.reset": [[52, 55], ["gnn.GNNp.m1.reset_parameters", "gnn.GNNp.m2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-par.gnn.GNNp.forward": [[56, 63], ["torch.dropout", "torch.dropout", "gnn.GNNp.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNNp.m2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n", "return", "x", ",", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_cora_ss.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_cora_ss.run": [[32, 35], ["copy.deepcopy", "os.system", "run_cora_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_citeseer.generate_command": [[27, 32], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_citeseer.run": [[33, 36], ["copy.deepcopy", "os.system", "run_citeseer.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_cora.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_cora.run": [[32, 35], ["copy.deepcopy", "os.system", "run_cora.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.Trainer.__init__": [[29, 48], ["torch.nn.Linear", "torch.nn.Linear", "partition_labels.cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "trainer.Trainer.parameters.append", "trainer.get_optimizer", "partition_labels.max", "trainer.Trainer.criterion.cuda", "trainer.Trainer.ss_classifier.cuda", "trainer.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "model", ",", "partition_labels", ")", ":", "\n", "\n", "# partition_num = partition_labels.max() + 1", "\n", "        ", "partition_num", "=", "partition_labels", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "ss_classifier", "=", "nn", ".", "Linear", "(", "opt", "[", "'hidden_dim'", "]", ",", "partition_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "partition_labels", "=", "partition_labels", ".", "cuda", "(", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "loss_func_ss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "# self.loss_func_ss = nn.MSELoss()", "\n", "self", ".", "task_ratio", "=", "opt", "[", "'task_ratio'", "]", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "parameters", "=", "[", "p", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "\n", "self", ".", "parameters", ".", "append", "(", "self", ".", "ss_classifier", ".", "weight", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "criterion", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.Trainer.reset": [[49, 52], ["trainer.Trainer.model.reset", "trainer.get_optimizer"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.reset", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["self", ".", "ss_classifier", ".", "cuda", "(", ")", "\n", "", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.Trainer.update": [[53, 68], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.item", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["        ", "self", ".", "model", ".", "reset", "(", ")", "\n", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.Trainer.update_soft": [[69, 90], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.ss_classifier", "trainer.Trainer.loss_func", "loss.backward", "trainer.Trainer.optimizer.step", "loss.item", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "update_soft", "(", "self", ",", "inputs", ",", "target", ",", "idx", ",", "adj_ss", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "_", ",", "logits0", "=", "self", ".", "model", "(", "inputs", ",", "adj_ss", ")", "\n", "\n", "logits", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "[", "idx", "]", "*", "logits", "[", "idx", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "logits0", "=", "self", ".", "ss_classifier", "(", "logits0", ")", "\n", "loss0", "=", "self", ".", "loss_func_ss", "(", "logits0", ",", "self", ".", "partition_labels", ")", "\n", "\n", "# print(loss.data, loss0.data)", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.Trainer.evaluate": [[91, 106], ["trainer.Trainer.model.eval", "trainer.Trainer.model", "trainer.Trainer.criterion", "preds.eq().double", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "preds.eq().double.sum", "idx.cuda.cuda.size", "trainer.Trainer.item", "accuracy.item", "preds.eq"], "methods", ["None"], ["loss", "=", "loss", "+", "loss0", "*", "self", ".", "task_ratio", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.Trainer.predict": [[107, 119], ["trainer.Trainer.model.eval", "trainer.Trainer.model", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["preds", "=", "torch", ".", "max", "(", "logits", "[", "idx", "]", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "=", "preds", ".", "eq", "(", "target", "[", "idx", "]", ")", ".", "double", "(", ")", "\n", "accuracy", "=", "correct", ".", "sum", "(", ")", "/", "idx", ".", "size", "(", "0", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", ",", "preds", ",", "accuracy", ".", "item", "(", ")", "\n", "\n", "", "def", "predict", "(", "self", ",", "inputs", ",", "tau", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.Trainer.save": [[120, 129], ["trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "print"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save"], ["logits", "=", "logits", "/", "tau", "\n", "\n", "logits", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n", "return", "logits", "\n", "\n", "", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "params", "=", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.Trainer.load": [[130, 138], ["trainer.Trainer.model.load_state_dict", "trainer.Trainer.optimizer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["}", "\n", "try", ":", "\n", "            ", "torch", ".", "save", "(", "params", ",", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"[Warning: Saving failed... continuing anyway.]\"", ")", "\n", "\n", "", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.get_optimizer": [[10, 23], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adamax", "torch.optim.Adamax", "Exception"], "function", ["None"], ["def", "get_optimizer", "(", "name", ",", "parameters", ",", "lr", ",", "weight_decay", "=", "0", ")", ":", "\n", "    ", "if", "name", "==", "'sgd'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'rmsprop'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "RMSprop", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adagrad'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adagrad", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adam'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adamax'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adamax", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unsupported optimizer: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.trainer.change_lr": [[24, 27], ["None"], "function", ["None"], ["", "", "def", "change_lr", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.init_q_data": [[126, 131], ["inputs_q.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx_train.size", "target_q.size"], "function", ["None"], ["trainer_q", "=", "Trainer", "(", "opt", ",", "gnnq", ",", "partition_labels", ")", "\n", "\n", "gnnp", "=", "GNNp", "(", "opt", ",", "adj", ")", "\n", "trainer_p", "=", "Trainer", "(", "opt", ",", "gnnp", ",", "partition_labels", ")", "\n", "\n", "def", "init_q_data", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.update_p_data": [[132, 150], ["trainer_q.predict", "inputs_p.copy_", "target_p.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "inputs_p.zero_().scatter_", "target_p.zero_().scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "inputs_p.zero_().scatter_", "target_p.zero_().scatter_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "inputs_p.zero_", "target_p.zero_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "idx_train.size", "target_q.size", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "inputs_p.zero_", "target_p.zero_"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict"], ["    ", "inputs_q", ".", "copy_", "(", "inputs", ")", "\n", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "target_q", "[", "idx_train", "]", "=", "temp", "\n", "\n", "", "def", "update_p_data", "(", ")", ":", "\n", "    ", "preds", "=", "trainer_q", ".", "predict", "(", "inputs_q", ",", "opt", "[", "'tau'", "]", ")", "\n", "if", "opt", "[", "'draw'", "]", "==", "'exp'", ":", "\n", "        ", "inputs_p", ".", "copy_", "(", "preds", ")", "\n", "target_p", ".", "copy_", "(", "preds", ")", "\n", "", "elif", "opt", "[", "'draw'", "]", "==", "'max'", ":", "\n", "        ", "idx_lb", "=", "torch", ".", "max", "(", "preds", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "inputs_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "target_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "", "elif", "opt", "[", "'draw'", "]", "==", "'smp'", ":", "\n", "        ", "idx_lb", "=", "torch", ".", "multinomial", "(", "preds", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "inputs_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "target_p", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "idx_lb", ",", "1", ")", ",", "1.0", ")", "\n", "", "if", "opt", "[", "'use_gold'", "]", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.update_q_data": [[151, 158], ["trainer_p.predict", "target_q.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx_train.size", "target_q.size"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict"], ["        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "inputs_p", "[", "idx_train", "]", "=", "temp", "\n", "target_p", "[", "idx_train", "]", "=", "temp", "\n", "\n", "", "", "def", "update_q_data", "(", ")", ":", "\n", "    ", "preds", "=", "trainer_p", ".", "predict", "(", "inputs_p", ")", "\n", "target_q", ".", "copy_", "(", "preds", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.pre_train": [[159, 174], ["train.init_q_data", "range", "trainer_q.model.load_state_dict", "trainer_q.optimizer.load_state_dict", "trainer_q.update_soft", "trainer_q.evaluate", "trainer_q.evaluate", "dict", "copy.deepcopy", "copy.deepcopy", "trainer_q.model.state_dict", "trainer_q.optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.init_q_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate"], ["if", "opt", "[", "'use_gold'", "]", "==", "1", ":", "\n", "        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "target_q", "[", "idx_train", "]", "=", "temp", "\n", "\n", "", "", "def", "pre_train", "(", "epoches", ")", ":", "\n", "    ", "best", "=", "0.0", "\n", "init_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_train", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "if", "accuracy_dev", ">", "best", ":", "\n", "            ", "best", "=", "accuracy_dev", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.train_p": [[175, 184], ["train.update_p_data", "range", "trainer_p.update_soft", "trainer_p.evaluate", "trainer_p.evaluate"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.update_p_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate"], ["state", "=", "dict", "(", "[", "(", "'model'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "model", ".", "state_dict", "(", ")", ")", ")", ",", "(", "'optim'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "optimizer", ".", "state_dict", "(", ")", ")", ")", "]", ")", "\n", "", "", "trainer_q", ".", "model", ".", "load_state_dict", "(", "state", "[", "'model'", "]", ")", "\n", "trainer_q", ".", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optim'", "]", ")", "\n", "return", "results", "\n", "\n", "", "def", "train_p", "(", "epoches", ")", ":", "\n", "    ", "update_p_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_p", ".", "update_soft", "(", "inputs_p", ",", "target_p", ",", "idx_all", ",", "adj_ss", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.train_q": [[185, 194], ["train.update_q_data", "range", "trainer_q.update_soft", "trainer_q.evaluate", "trainer_q.evaluate"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.update_q_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate"], ["_", ",", "preds", ",", "accuracy_dev", "=", "trainer_p", ".", "evaluate", "(", "inputs_p", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_p", ".", "evaluate", "(", "inputs_p", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "", "return", "results", "\n", "\n", "", "def", "train_q", "(", "epoches", ")", ":", "\n", "    ", "update_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_all", ",", "adj_ss", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.train.get_accuracy": [[201, 207], ["None"], "function", ["None"], ["base_results", "+=", "pre_train", "(", "opt", "[", "'pre_epoch'", "]", ")", "\n", "for", "k", "in", "range", "(", "opt", "[", "'iter'", "]", ")", ":", "\n", "    ", "p_results", "+=", "train_p", "(", "opt", "[", "'epoch'", "]", ")", "\n", "q_results", "+=", "train_q", "(", "opt", "[", "'epoch'", "]", ")", "\n", "\n", "", "def", "get_accuracy", "(", "results", ")", ":", "\n", "    ", "best_dev", ",", "acc_test", "=", "0.0", ",", "0.0", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.layer.GraphConvolution.__init__": [[12, 20], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layer.GraphConvolution.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "in_size", "=", "opt", "[", "'in'", "]", "\n", "self", ".", "out_size", "=", "opt", "[", "'out'", "]", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_size", ",", "self", ".", "out_size", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.layer.GraphConvolution.reset_parameters": [[21, 24], ["layer.GraphConvolution.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "out_size", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.layer.GraphConvolution.forward": [[25, 29], ["torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", "=", "None", ")", ":", "\n", "        ", "if", "adj", "is", "None", ":", "\n", "            ", "m0", "=", "torch", ".", "spmm", "(", "self", ".", "adj", ",", "x", ")", "\n", "m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_pubmed_ss.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_pubmed_ss.run": [[32, 35], ["copy.deepcopy", "os.system", "run_pubmed_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_pubmed.generate_command": [[27, 32], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_pubmed.run": [[33, 36], ["copy.deepcopy", "os.system", "run_pubmed.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.Vocab.__init__": [[11, 35], ["open", "open.close", "loader.Vocab.itos.append", "line.strip().split", "item.strip().split", "line.strip", "item.strip", "string.split", "loader.Vocab.itos.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "cols", ",", "with_padding", "=", "False", ")", ":", "\n", "        ", "self", ".", "itos", "=", "[", "]", "\n", "self", ".", "stoi", "=", "{", "}", "\n", "self", ".", "vocab_size", "=", "0", "\n", "\n", "if", "with_padding", ":", "\n", "            ", "string", "=", "'<pad>'", "\n", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "\n", "", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "item", "=", "items", "[", "col", "]", "\n", "strings", "=", "item", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "for", "string", "in", "strings", ":", "\n", "                    ", "string", "=", "string", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "if", "string", "not", "in", "self", ".", "stoi", ":", "\n", "                        ", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "", "", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.Vocab.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.EntityLabel.__init__": [[41, 56], ["open", "open.close", "line.strip().split", "loader.EntityLabel.vocab_n.stoi.get", "loader.EntityLabel.vocab_l.stoi.get", "range", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "label", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_l", ",", "self", ".", "col_l", "=", "label", "\n", "self", ".", "itol", "=", "[", "-", "1", "for", "k", "in", "range", "(", "self", ".", "vocab_n", ".", "vocab_size", ")", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sl", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_l", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "l", "=", "self", ".", "vocab_l", ".", "stoi", ".", "get", "(", "sl", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "self", ".", "itol", "[", "n", "]", "=", "l", "\n", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.EntityFeature.__init__": [[59, 79], ["open", "open.close", "line.strip().split", "loader.EntityFeature.vocab_n.stoi.get", "sf.strip().split", "range", "loader.EntityFeature.vocab_f.stoi.get", "float", "loader.EntityFeature.itof[].append", "len", "line.strip", "sf.strip", "s.split", "s.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "feature", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_f", ",", "self", ".", "col_f", "=", "feature", "\n", "self", ".", "itof", "=", "[", "[", "]", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "self", ".", "one_hot", "=", "[", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sf", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_f", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "for", "s", "in", "sf", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ":", "\n", "                ", "f", "=", "self", ".", "vocab_f", ".", "stoi", ".", "get", "(", "s", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "s", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "f", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "itof", "[", "n", "]", ".", "append", "(", "(", "f", ",", "w", ")", ")", "\n", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.EntityFeature.to_one_hot": [[80, 92], ["range", "len", "range", "range", "len", "len"], "methods", ["None"], ["", "def", "to_one_hot", "(", "self", ",", "binary", "=", "False", ")", ":", "\n", "        ", "self", ".", "one_hot", "=", "[", "[", "0", "for", "j", "in", "range", "(", "len", "(", "self", ".", "vocab_f", ")", ")", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", ":", "\n", "            ", "sm", "=", "0", "\n", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "sm", "+=", "wt", "\n", "", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "self", ".", "one_hot", "[", "k", "]", "[", "fid", "]", "=", "wt", "/", "sm", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.Graph.__init__": [[94, 122], ["open", "line.strip().split", "loader.Graph.vocab_n.stoi.get", "loader.Graph.vocab_n.stoi.get", "float", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "weight", "=", "None", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_u", ",", "self", ".", "col_v", "=", "entity", "\n", "self", ".", "col_w", "=", "weight", "\n", "self", ".", "edges", "=", "[", "]", "\n", "\n", "self", ".", "node_size", "=", "-", "1", "\n", "\n", "self", ".", "eid2iid", "=", "None", "\n", "self", ".", "iid2eid", "=", "None", "\n", "\n", "self", ".", "adj_w", "=", "None", "\n", "self", ".", "adj_t", "=", "None", "\n", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "fi", ":", "\n", "\n", "            ", "for", "line", "in", "fi", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "su", ",", "sv", "=", "items", "[", "self", ".", "col_u", "]", ",", "items", "[", "self", ".", "col_v", "]", "\n", "sw", "=", "items", "[", "self", ".", "col_w", "]", "if", "self", ".", "col_w", "!=", "None", "else", "None", "\n", "\n", "u", ",", "v", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "su", ",", "-", "1", ")", ",", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sv", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "sw", ")", "if", "sw", "!=", "None", "else", "1", "\n", "\n", "if", "u", "==", "-", "1", "or", "v", "==", "-", "1", "or", "w", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "u", "==", "v", ":", "\n", "                    ", "continue", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.Graph.get_node_size": [[123, 125], ["None"], "methods", ["None"], ["# print(\"cindy\", u,v,w)", "\n", "\n", "", "self", ".", "edges", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.Graph.get_edge_size": [[126, 128], ["len"], "methods", ["None"], ["\n", "", "", "self", ".", "edges_ss", "=", "self", ".", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.Graph.to_symmetric": [[129, 156], ["set", "dict", "list", "dict.items", "dict", "set.add", "set.add", "dict.get", "dict.get", "math.sqrt"], "methods", ["None"], ["", "def", "get_node_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "node_size", "\n", "\n", "", "def", "get_edge_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "edges", ")", "\n", "\n", "", "def", "to_symmetric", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n", "            ", "if", "u", "==", "v", ":", "\n", "                ", "continue", "\n", "", "w_", "=", "pair2wt", ".", "get", "(", "(", "v", ",", "u", ")", ",", "-", "1", ")", "\n", "if", "w", ">", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", ",", "(", "v", ",", "u", ",", "w", ")", "]", "\n", "", "elif", "w", "==", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n", "", "", "for", "k", "in", "vocab", ":", "\n", "            ", "edges_", "+=", "[", "(", "k", ",", "k", ",", "self_link_weight", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.Graph.get_sparse_adjacency": [[157, 175], ["torch.Size", "torch.LongTensor", "torch.Tensor", "torch.sparse.FloatTensor", "index.cuda.cuda.cuda", "value.cuda.cuda.cuda", "adj.cuda.cuda.cuda"], "methods", ["None"], ["", "d", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "edges_", ":", "\n", "            ", "d", "[", "u", "]", "=", "d", ".", "get", "(", "u", ",", "0.0", ")", "+", "w", "\n", "\n", "", "self", ".", "edges", "=", "[", "(", "u", ",", "v", ",", "w", "/", "math", ".", "sqrt", "(", "d", "[", "u", "]", "*", "d", "[", "v", "]", ")", ")", "for", "u", ",", "v", ",", "w", "in", "edges_", "]", "\n", "\n", "", "def", "get_sparse_adjacency", "(", "self", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "vocab_n", ".", "vocab_size", ",", "self", ".", "vocab_n", ".", "vocab_size", "]", ")", "\n", "\n", "us", ",", "vs", ",", "ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "\n", "            ", "us", "+=", "[", "u", "]", "\n", "vs", "+=", "[", "v", "]", "\n", "ws", "+=", "[", "w", "]", "\n", "", "index", "=", "torch", ".", "LongTensor", "(", "[", "us", ",", "vs", "]", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "ws", ")", "\n", "if", "cuda", ":", "\n", "            ", "index", "=", "index", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.loader.Graph.partition": [[176, 192], ["len", "metis.part_graph", "torch.tensor", "range", "adj_list[].append", "adj_list[].append"], "methods", ["None"], ["value", "=", "value", ".", "cuda", "(", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ",", "value", ",", "shape", ")", "\n", "if", "cuda", ":", "\n", "            ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "", "return", "adj", "\n", "\n", "", "def", "to_symmetric_ss", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_citeseer_ss.generate_command": [[26, 31], ["opt.items", "str"], "function", ["None"], ["def", "generate_command", "(", "opt", ")", ":", "\n", "    ", "cmd", "=", "'python3 train.py'", "\n", "for", "opt", ",", "val", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "cmd", "+=", "' --'", "+", "opt", "+", "' '", "+", "str", "(", "val", ")", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.run_citeseer_ss.run": [[32, 35], ["copy.deepcopy", "os.system", "run_citeseer_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["", "def", "run", "(", "opt", ")", ":", "\n", "    ", "opt_", "=", "copy", ".", "deepcopy", "(", "opt", ")", "\n", "os", ".", "system", "(", "generate_command", "(", "opt_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.gnn.GNNq.__init__": [[11, 24], ["torch.nn.Module.__init__", "dict", "layer.GraphConvolution", "dict", "layer.GraphConvolution", "gnn.GNNq.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GNNq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_feature'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.gnn.GNNq.reset": [[25, 28], ["gnn.GNNq.m1.reset_parameters", "gnn.GNNq.m2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.gnn.GNNq.forward": [[29, 36], ["torch.dropout", "torch.dropout", "gnn.GNNq.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNNq.m2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n", "return", "x", ",", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.gnn.GNNp.__init__": [[38, 51], ["torch.nn.Module.__init__", "dict", "layer.GraphConvolution", "dict", "layer.GraphConvolution", "gnn.GNNp.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GNNp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_class'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.gnn.GNNp.reset": [[52, 55], ["gnn.GNNp.m1.reset_parameters", "gnn.GNNp.m2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GMNN-clu.gnn.GNNp.forward": [[56, 63], ["torch.dropout", "torch.dropout", "gnn.GNNp.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNNp.m2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n", "return", "x", ",", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_cora_ss.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["os", ".", "system", "(", "'rm record_val.txt'", ")", "\n", "os", ".", "system", "(", "'echo -n -> record_val.txt'", ")", "\n", "\n", "partition_num_list", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", ",", "40", "]", "\n", "task_ratio_list", "=", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_cora_ss.run": [[44, 47], ["copy.deepcopy", "os.system", "run_cora_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["for", "p", "in", "partition_num_list", ":", "\n", "    ", "for", "t", "in", "task_ratio_list", ":", "\n", "\n", "        ", "os", ".", "system", "(", "'rm record.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer.generate_command": [[36, 41], ["opt.items", "str"], "function", ["None"], ["\n", "", "for", "k", "in", "range", "(", "50", ")", ":", "\n", "    ", "seed", "=", "k", "+", "1", "\n", "opt", "[", "'seed'", "]", "=", "seed", "\n", "run", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer.run": [[42, 45], ["copy.deepcopy", "os.system", "run_citeseer.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_cora.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["opt", "[", "'seed'", "]", "=", "seed", "\n", "run", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_cora.run": [[44, 47], ["copy.deepcopy", "os.system", "run_cora.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.__init__": [[38, 61], ["partition_labels.cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Linear", "torch.nn.Linear", "trainer.Trainer.parameters.append", "partition_labels.max", "trainer.Trainer.criterion.cuda", "trainer.Trainer.ss_classifier.cuda", "trainer.get_optimizer", "trainer.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["self", ".", "task_ratio", "=", "opt", "[", "'task_ratio'", "]", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "parameters", "=", "[", "p", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "\n", "self", ".", "parameters", ".", "append", "(", "self", ".", "ss_classifier", ".", "weight", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "self", ".", "ss_classifier", ".", "cuda", "(", ")", "\n", "", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "reset", "(", ")", "\n", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "opt", "[", "'optimizer'", "]", ",", "self", ".", "parameters", ",", "self", ".", "opt", "[", "'lr'", "]", ",", "self", ".", "opt", "[", "'decay'", "]", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.reset": [[62, 66], ["trainer.Trainer.model.reset", "trainer.get_optimizer"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.reset", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer"], ["", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update": [[67, 82], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.item", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward"], ["\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "update_soft", "(", "self", ",", "inputs", ",", "target", ",", "idx", ",", "adj_ss", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "_", ",", "logits0", "=", "self", ".", "model", "(", "inputs", ",", "adj_ss", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft": [[83, 100], ["trainer.Trainer.model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.model.forward_partition", "trainer.Trainer.ss_classifier", "trainer.Trainer.loss_func", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition"], ["\n", "logits", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "[", "idx", "]", "*", "logits", "[", "idx", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "logits0", "=", "self", ".", "ss_classifier", "(", "logits0", ")", "\n", "loss0", "=", "self", ".", "loss_func_ss", "(", "logits0", ",", "self", ".", "partition_labels", ")", "\n", "\n", "# print(loss.data, loss0.data)", "\n", "loss", "=", "loss", "+", "loss0", "*", "self", ".", "task_ratio", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "inputs", ",", "target", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft_aux": [[105, 149], ["trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "idx_unlabeled.cuda.cuda.cuda", "trainer.Trainer.model.forward_aux", "trainer.Trainer.model.forward_partition", "trainer.Trainer.ss_classifier", "trainer.Trainer.loss_func", "bce_loss", "trainer.Trainer.model.forward_aux", "bce_loss", "trainer.Trainer.model.forward_aux", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "trainer.Trainer.model.forward_aux", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "softmax", "softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux"], ["logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", "[", "idx", "]", ",", "target", "[", "idx", "]", ")", "\n", "preds", "=", "torch", ".", "max", "(", "logits", "[", "idx", "]", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "=", "preds", ".", "eq", "(", "target", "[", "idx", "]", ")", ".", "double", "(", ")", "\n", "accuracy", "=", "correct", ".", "sum", "(", ")", "/", "idx", ".", "size", "(", "0", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", ",", "preds", ",", "accuracy", ".", "item", "(", ")", "\n", "\n", "", "def", "predict", "(", "self", ",", "inputs", ",", "tau", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "logits", ",", "_", "=", "self", ".", "model", "(", "inputs", ",", "None", ")", "\n", "logits", "=", "logits", "/", "tau", "\n", "\n", "logits", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n", "return", "logits", "\n", "\n", "", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "params", "=", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "try", ":", "\n", "            ", "torch", ".", "save", "(", "params", ",", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"[Warning: Saving failed... continuing anyway.]\"", ")", "\n", "\n", "", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"Cannot load model from {}\"", ".", "format", "(", "filename", ")", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optim'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate": [[152, 166], ["trainer.Trainer.model.eval", "trainer.Trainer.model", "trainer.Trainer.criterion", "preds.eq().double", "inputs.cuda.cuda.cuda", "target.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "preds.eq().double.sum", "idx.cuda.cuda.size", "trainer.Trainer.item", "accuracy.item", "preds.eq"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict": [[167, 178], ["trainer.Trainer.model.eval", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict_aux": [[180, 191], ["trainer.Trainer.model.eval", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model.forward_aux", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict_noisy": [[192, 203], ["torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict_noisy_aux": [[205, 216], ["torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "inputs.cuda.cuda.cuda", "trainer.Trainer.model.forward_aux", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save": [[218, 227], ["trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "print"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.save"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load": [[228, 236], ["trainer.Trainer.model.load_state_dict", "trainer.Trainer.optimizer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.mixup_criterion": [[14, 16], ["criterion", "criterion"], "function", ["None"], ["        ", "return", "torch", ".", "optim", ".", "RMSprop", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adagrad'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adagrad", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.get_optimizer": [[17, 30], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adamax", "torch.optim.Adamax", "Exception"], "function", ["None"], ["", "elif", "name", "==", "'adam'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "name", "==", "'adamax'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adamax", "(", "parameters", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unsupported optimizer: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "", "def", "change_lr", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n", "", "", "class", "Trainer", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "opt", ",", "model", ",", "partition_labels", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.change_lr": [[31, 34], ["None"], "function", ["None"], ["# partition_num = partition_labels.max() + 1", "\n", "        ", "partition_num", "=", "partition_labels", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "ss_classifier", "=", "nn", ".", "Linear", "(", "opt", "[", "'hidden_dim'", "]", ",", "partition_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "partition_labels", "=", "partition_labels", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.ramps.sigmoid_rampup": [[19, 27], ["numpy.clip", "float", "numpy.exp"], "function", ["None"], ["def", "sigmoid_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Exponential rampup from https://arxiv.org/abs/1610.02242\"\"\"", "\n", "if", "rampup_length", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "current", "=", "np", ".", "clip", "(", "current", ",", "0.0", ",", "rampup_length", ")", "\n", "phase", "=", "1.0", "-", "current", "/", "rampup_length", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "5.0", "*", "phase", "*", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.ramps.linear_rampup": [[29, 39], ["None"], "function", ["None"], ["", "", "def", "linear_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Linear rampup\"\"\"", "\n", "assert", "current", ">=", "0", "and", "rampup_length", ">=", "0", "\n", "if", "current", ">=", "rampup_length", ":", "\n", "        ", "lr", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "lr", "=", "current", "/", "rampup_length", "\n", "\n", "#print (lr)", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.ramps.cosine_rampdown": [[40, 44], ["float", "numpy.cos"], "function", ["None"], ["", "def", "cosine_rampdown", "(", "current", ",", "rampdown_length", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "assert", "0", "<=", "current", "<=", "rampdown_length", "\n", "return", "float", "(", ".5", "*", "(", "np", ".", "cos", "(", "np", ".", "pi", "*", "current", "/", "rampdown_length", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.init_data": [[153, 158], ["inputs_q.copy_", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.scatter_", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx_train.size", "target_q.size"], "function", ["None"], ["inputs_p", "[", "idx_train", "]", "=", "temp", "\n", "target_p", "[", "idx_train", "]", "=", "temp", "\n", "\n", "", "", "def", "update_q_data", "(", ")", ":", "\n", "    ", "preds", "=", "trainer_p", ".", "predict", "(", "inputs_p", ")", "\n", "target_q", ".", "copy_", "(", "preds", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.update_ema_variables": [[160, 166], ["min", "zip", "ema_model.parameters", "model.parameters", "ema_param.data.mul_().add_", "ema_param.data.mul_"], "function", ["None"], ["        ", "temp", "=", "torch", ".", "zeros", "(", "idx_train", ".", "size", "(", "0", ")", ",", "target_q", ".", "size", "(", "1", ")", ")", ".", "type_as", "(", "target_q", ")", "\n", "temp", ".", "scatter_", "(", "1", ",", "torch", ".", "unsqueeze", "(", "target", "[", "idx_train", "]", ",", "1", ")", ",", "1.0", ")", "\n", "target_q", "[", "idx_train", "]", "=", "temp", "\n", "\n", "", "", "def", "pre_train", "(", "epoches", ")", ":", "\n", "    ", "best", "=", "0.0", "\n", "init_q_data", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.get_current_consistency_weight": [[168, 172], ["ramps.sigmoid_rampup"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.ramps.sigmoid_rampup"], ["for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_train", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.sharpen": [[175, 181], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow.sum().reshape", "torch.pow.sum"], "function", ["None"], ["state", "=", "dict", "(", "[", "(", "'model'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "model", ".", "state_dict", "(", ")", ")", ")", ",", "(", "'optim'", ",", "copy", ".", "deepcopy", "(", "trainer_q", ".", "optimizer", ".", "state_dict", "(", ")", ")", ")", "]", ")", "\n", "", "", "trainer_q", ".", "model", ".", "load_state_dict", "(", "state", "[", "'model'", "]", ")", "\n", "trainer_q", ".", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optim'", "]", ")", "\n", "return", "results", "\n", "\n", "", "def", "train_p", "(", "epoches", ")", ":", "\n", "    ", "update_p_data", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.train": [[185, 249], ["train.init_data", "range", "random.randint", "trainer.evaluate", "trainer.evaluate", "trainer.evaluate", "trainer_ema.evaluate", "train.update_ema_variables", "trainer.model.train", "trainer.optimizer.zero_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint.cuda", "range", "torch.randint.mean", "train.sharpen", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "trainer.update_soft_aux", "train.get_current_consistency_weight", "total_loss.backward", "trainer.optimizer.step", "trainer.model.train", "trainer.optimizer.zero_grad", "trainer.update_soft", "total_loss.backward", "trainer.optimizer.step", "dict", "trainer.predict_noisy", "print", "print", "loss.item", "loss_usup.item", "loss.item", "copy.deepcopy", "copy.deepcopy", "trainer.model.state_dict", "trainer.optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.init_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.update_ema_variables", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.sharpen", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.get_current_consistency_weight", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update_soft", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.predict_noisy"], ["_", ",", "preds", ",", "accuracy_dev", "=", "trainer_p", ".", "evaluate", "(", "inputs_p", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_p", ".", "evaluate", "(", "inputs_p", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "", "return", "results", "\n", "\n", "", "def", "train_q", "(", "epoches", ")", ":", "\n", "    ", "update_q_data", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epoches", ")", ":", "\n", "        ", "loss", "=", "trainer_q", ".", "update_soft", "(", "inputs_q", ",", "target_q", ",", "idx_all", ",", "adj_ss", ")", "\n", "_", ",", "preds", ",", "accuracy_dev", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_dev", ")", "\n", "_", ",", "preds", ",", "accuracy_test", "=", "trainer_q", ".", "evaluate", "(", "inputs_q", ",", "target", ",", "idx_test", ")", "\n", "results", "+=", "[", "(", "accuracy_dev", ",", "accuracy_test", ")", "]", "\n", "", "return", "results", "\n", "\n", "", "base_results", ",", "q_results", ",", "p_results", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "base_results", "+=", "pre_train", "(", "opt", "[", "'pre_epoch'", "]", ")", "\n", "for", "k", "in", "range", "(", "opt", "[", "'iter'", "]", ")", ":", "\n", "    ", "p_results", "+=", "train_p", "(", "opt", "[", "'epoch'", "]", ")", "\n", "q_results", "+=", "train_q", "(", "opt", "[", "'epoch'", "]", ")", "\n", "\n", "", "def", "get_accuracy", "(", "results", ")", ":", "\n", "    ", "best_dev", ",", "acc_test", "=", "0.0", ",", "0.0", "\n", "for", "d", ",", "t", "in", "results", ":", "\n", "        ", "if", "d", ">", "best_dev", ":", "\n", "            ", "best_dev", ",", "acc_test", "=", "d", ",", "t", "\n", "", "", "return", "best_dev", ",", "acc_test", "\n", "\n", "", "best_dev", ",", "acc_test", "=", "get_accuracy", "(", "q_results", ")", "\n", "\n", "print", "(", "'{:.3f}'", ".", "format", "(", "acc_test", "*", "100", ")", ")", "\n", "with", "open", "(", "'record.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "# f.write(str(best_dev) + ',')", "\n", "    ", "f", ".", "write", "(", "str", "(", "acc_test", ")", "+", "','", ")", "\n", "\n", "", "if", "opt", "[", "'save'", "]", "!=", "'/'", ":", "\n", "    ", "trainer_q", ".", "save", "(", "opt", "[", "'save'", "]", "+", "'/gnnq.pt'", ")", "\n", "trainer_p", ".", "save", "(", "opt", "[", "'save'", "]", "+", "'/gnnp.pt'", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.train.get_accuracy": [[255, 261], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.__init__": [[12, 15], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adj", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "in_size", "=", "opt", "[", "'in'", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.forward": [[16, 18], ["torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["self", ".", "out_size", "=", "opt", "[", "'out'", "]", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_size", ",", "self", ".", "out_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward": [[19, 24], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "layer.SparseMM.sparse.t"], "methods", ["None"], ["self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "out_size", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.__init__": [[28, 36], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layer.GraphConvolution.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "m0", "=", "torch", ".", "spmm", "(", "adj", ",", "x", ")", "\n", "m", "=", "torch", ".", "mm", "(", "m0", ",", "self", ".", "weight", ")", "\n", "", "return", "m", ",", "m0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters": [[37, 40], ["layer.GraphConvolution.weight.data.uniform_", "math.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.forward": [[41, 45], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "layer.SparseMM"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.forward_partition": [[46, 49], ["layer.SparseMM"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.forward_aux": [[50, 53], ["torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_pubmed_ss.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["os", ".", "system", "(", "'rm record_val.txt'", ")", "\n", "os", ".", "system", "(", "'echo -n -> record_val.txt'", ")", "\n", "\n", "partition_num_list", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", ",", "40", "]", "\n", "task_ratio_list", "=", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_pubmed_ss.run": [[44, 47], ["copy.deepcopy", "os.system", "run_pubmed_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["for", "p", "in", "partition_num_list", ":", "\n", "    ", "for", "t", "in", "task_ratio_list", ":", "\n", "\n", "        ", "os", ".", "system", "(", "'rm record.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_pubmed.generate_command": [[36, 41], ["opt.items", "str"], "function", ["None"], ["\n", "", "for", "k", "in", "range", "(", "50", ")", ":", "\n", "    ", "seed", "=", "k", "+", "1", "\n", "opt", "[", "'seed'", "]", "=", "seed", "\n", "run", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_pubmed.run": [[42, 45], ["copy.deepcopy", "os.system", "run_pubmed.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.Vocab.__init__": [[11, 35], ["open", "open.close", "loader.Vocab.itos.append", "line.strip().split", "item.strip().split", "line.strip", "item.strip", "string.split", "loader.Vocab.itos.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "cols", ",", "with_padding", "=", "False", ")", ":", "\n", "        ", "self", ".", "itos", "=", "[", "]", "\n", "self", ".", "stoi", "=", "{", "}", "\n", "self", ".", "vocab_size", "=", "0", "\n", "\n", "if", "with_padding", ":", "\n", "            ", "string", "=", "'<pad>'", "\n", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "\n", "", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "item", "=", "items", "[", "col", "]", "\n", "strings", "=", "item", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "for", "string", "in", "strings", ":", "\n", "                    ", "string", "=", "string", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "if", "string", "not", "in", "self", ".", "stoi", ":", "\n", "                        ", "self", ".", "stoi", "[", "string", "]", "=", "self", ".", "vocab_size", "\n", "self", ".", "itos", ".", "append", "(", "string", ")", "\n", "self", ".", "vocab_size", "+=", "1", "\n", "", "", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.Vocab.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.EntityLabel.__init__": [[41, 56], ["open", "open.close", "line.strip().split", "loader.EntityLabel.vocab_n.stoi.get", "loader.EntityLabel.vocab_l.stoi.get", "range", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "label", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_l", ",", "self", ".", "col_l", "=", "label", "\n", "self", ".", "itol", "=", "[", "-", "1", "for", "k", "in", "range", "(", "self", ".", "vocab_n", ".", "vocab_size", ")", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sl", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_l", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "l", "=", "self", ".", "vocab_l", ".", "stoi", ".", "get", "(", "sl", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "self", ".", "itol", "[", "n", "]", "=", "l", "\n", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.EntityFeature.__init__": [[59, 79], ["open", "open.close", "line.strip().split", "loader.EntityFeature.vocab_n.stoi.get", "sf.strip().split", "range", "loader.EntityFeature.vocab_f.stoi.get", "float", "loader.EntityFeature.itof[].append", "len", "line.strip", "sf.strip", "s.split", "s.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "feature", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_n", "=", "entity", "\n", "self", ".", "vocab_f", ",", "self", ".", "col_f", "=", "feature", "\n", "self", ".", "itof", "=", "[", "[", "]", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "self", ".", "one_hot", "=", "[", "]", "\n", "\n", "fi", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "for", "line", "in", "fi", ":", "\n", "            ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "sn", ",", "sf", "=", "items", "[", "self", ".", "col_n", "]", ",", "items", "[", "self", ".", "col_f", "]", "\n", "n", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sn", ",", "-", "1", ")", "\n", "if", "n", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "for", "s", "in", "sf", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ":", "\n", "                ", "f", "=", "self", ".", "vocab_f", ".", "stoi", ".", "get", "(", "s", ".", "split", "(", "':'", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "s", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "f", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "itof", "[", "n", "]", ".", "append", "(", "(", "f", ",", "w", ")", ")", "\n", "", "", "fi", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.EntityFeature.to_one_hot": [[80, 92], ["range", "len", "range", "range", "len", "len"], "methods", ["None"], ["", "def", "to_one_hot", "(", "self", ",", "binary", "=", "False", ")", ":", "\n", "        ", "self", ".", "one_hot", "=", "[", "[", "0", "for", "j", "in", "range", "(", "len", "(", "self", ".", "vocab_f", ")", ")", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "vocab_n", ")", ")", ":", "\n", "            ", "sm", "=", "0", "\n", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "sm", "+=", "wt", "\n", "", "for", "fid", ",", "wt", "in", "self", ".", "itof", "[", "k", "]", ":", "\n", "                ", "if", "binary", ":", "\n", "                    ", "wt", "=", "1.0", "\n", "", "self", ".", "one_hot", "[", "k", "]", "[", "fid", "]", "=", "wt", "/", "sm", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.Graph.__init__": [[94, 121], ["open", "line.strip().split", "loader.Graph.vocab_n.stoi.get", "loader.Graph.vocab_n.stoi.get", "float", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", ",", "entity", ",", "weight", "=", "None", ")", ":", "\n", "        ", "self", ".", "vocab_n", ",", "self", ".", "col_u", ",", "self", ".", "col_v", "=", "entity", "\n", "self", ".", "col_w", "=", "weight", "\n", "self", ".", "edges", "=", "[", "]", "\n", "\n", "self", ".", "node_size", "=", "-", "1", "\n", "\n", "self", ".", "eid2iid", "=", "None", "\n", "self", ".", "iid2eid", "=", "None", "\n", "\n", "self", ".", "adj_w", "=", "None", "\n", "self", ".", "adj_t", "=", "None", "\n", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "fi", ":", "\n", "\n", "            ", "for", "line", "in", "fi", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "su", ",", "sv", "=", "items", "[", "self", ".", "col_u", "]", ",", "items", "[", "self", ".", "col_v", "]", "\n", "sw", "=", "items", "[", "self", ".", "col_w", "]", "if", "self", ".", "col_w", "!=", "None", "else", "None", "\n", "\n", "u", ",", "v", "=", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "su", ",", "-", "1", ")", ",", "self", ".", "vocab_n", ".", "stoi", ".", "get", "(", "sv", ",", "-", "1", ")", "\n", "w", "=", "float", "(", "sw", ")", "if", "sw", "!=", "None", "else", "1", "\n", "\n", "if", "u", "==", "-", "1", "or", "v", "==", "-", "1", "or", "w", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "u", "==", "v", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.Graph.get_node_size": [[123, 125], ["None"], "methods", ["None"], ["# print(\"cindy\", u,v,w)", "\n", "\n", "", "self", ".", "edges", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.Graph.get_edge_size": [[126, 128], ["len"], "methods", ["None"], ["\n", "", "", "self", ".", "edges_ss", "=", "self", ".", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.Graph.to_symmetric": [[129, 158], ["set", "dict", "list", "dict.items", "dict", "set.add", "set.add", "dict.get", "dict.get", "math.sqrt"], "methods", ["None"], ["", "def", "get_node_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "node_size", "\n", "\n", "", "def", "get_edge_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "edges", ")", "\n", "\n", "", "def", "to_symmetric", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n", "            ", "if", "u", "==", "v", ":", "\n", "                ", "continue", "\n", "", "w_", "=", "pair2wt", ".", "get", "(", "(", "v", ",", "u", ")", ",", "-", "1", ")", "\n", "if", "w", ">", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", ",", "(", "v", ",", "u", ",", "w", ")", "]", "\n", "", "elif", "w", "==", "w_", ":", "\n", "                ", "edges_", "+=", "[", "(", "u", ",", "v", ",", "w", ")", "]", "\n", "", "", "for", "k", "in", "vocab", ":", "\n", "            ", "edges_", "+=", "[", "(", "k", ",", "k", ",", "self_link_weight", ")", "]", "\n", "\n", "", "d", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "edges_", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.Graph.get_sparse_adjacency": [[159, 177], ["torch.Size", "torch.LongTensor", "torch.Tensor", "torch.sparse.FloatTensor", "index.cuda.cuda.cuda", "value.cuda.cuda.cuda", "adj.cuda.cuda.cuda"], "methods", ["None"], ["            ", "d", "[", "u", "]", "=", "d", ".", "get", "(", "u", ",", "0.0", ")", "+", "w", "\n", "\n", "", "self", ".", "edges", "=", "[", "(", "u", ",", "v", ",", "w", "/", "math", ".", "sqrt", "(", "d", "[", "u", "]", "*", "d", "[", "v", "]", ")", ")", "for", "u", ",", "v", ",", "w", "in", "edges_", "]", "\n", "\n", "", "def", "get_sparse_adjacency", "(", "self", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "Size", "(", "[", "self", ".", "vocab_n", ".", "vocab_size", ",", "self", ".", "vocab_n", ".", "vocab_size", "]", ")", "\n", "\n", "us", ",", "vs", ",", "ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges", ":", "\n", "\n", "            ", "us", "+=", "[", "u", "]", "\n", "vs", "+=", "[", "v", "]", "\n", "ws", "+=", "[", "w", "]", "\n", "", "index", "=", "torch", ".", "LongTensor", "(", "[", "us", ",", "vs", "]", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "ws", ")", "\n", "if", "cuda", ":", "\n", "            ", "index", "=", "index", ".", "cuda", "(", ")", "\n", "value", "=", "value", ".", "cuda", "(", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "index", ",", "value", ",", "shape", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.loader.Graph.partition": [[178, 194], ["len", "metis.part_graph", "torch.tensor", "range", "adj_list[].append", "adj_list[].append"], "methods", ["None"], ["if", "cuda", ":", "\n", "            ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "", "return", "adj", "\n", "\n", "", "def", "to_symmetric_ss", "(", "self", ",", "self_link_weight", "=", "1.0", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "vocab", ".", "add", "(", "u", ")", "\n", "vocab", ".", "add", "(", "v", ")", "\n", "\n", "", "pair2wt", "=", "dict", "(", ")", "\n", "for", "u", ",", "v", ",", "w", "in", "self", ".", "edges_ss", ":", "\n", "            ", "pair2wt", "[", "(", "u", ",", "v", ")", "]", "=", "w", "\n", "\n", "", "edges_", "=", "list", "(", ")", "\n", "for", "(", "u", ",", "v", ")", ",", "w", "in", "pair2wt", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.losses.softmax_mse_loss": [[15, 28], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "input_logits.size", "target_logits.size", "input_logits.size", "torch.nn.functional.mse_loss"], "function", ["None"], ["def", "softmax_mse_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_softmax", "=", "F", ".", "softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "num_classes", "=", "input_logits", ".", "size", "(", ")", "[", "1", "]", "\n", "return", "F", ".", "mse_loss", "(", "input_softmax", ",", "target_softmax", ",", "reduction", "=", "'sum'", ")", "/", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.losses.softmax_kl_loss": [[30, 42], ["torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.nn.functional.kl_div", "input_logits.size", "target_logits.size"], "function", ["None"], ["", "def", "softmax_kl_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns KL divergence\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_log_softmax", "=", "F", ".", "log_softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "return", "F", ".", "kl_div", "(", "input_log_softmax", ",", "target_softmax", ",", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.losses.symmetric_mse_loss": [[44, 55], ["input1.size", "input2.size", "input1.size", "torch.sum"], "function", ["None"], ["", "def", "symmetric_mse_loss", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"Like F.mse_loss but sends gradients to both directions\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to both input1 and input2.\n    \"\"\"", "\n", "assert", "input1", ".", "size", "(", ")", "==", "input2", ".", "size", "(", ")", "\n", "num_classes", "=", "input1", ".", "size", "(", ")", "[", "1", "]", "\n", "return", "torch", ".", "sum", "(", "(", "input1", "-", "input2", ")", "**", "2", ")", "/", "num_classes", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command": [[38, 43], ["opt.items", "str"], "function", ["None"], ["os", ".", "system", "(", "'rm record_val.txt'", ")", "\n", "os", ".", "system", "(", "'echo -n -> record_val.txt'", ")", "\n", "\n", "partition_num_list", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", ",", "40", "]", "\n", "task_ratio_list", "=", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.run": [[44, 47], ["copy.deepcopy", "os.system", "run_citeseer_ss.generate_command"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.run_citeseer_ss.generate_command"], ["for", "p", "in", "partition_num_list", ":", "\n", "    ", "for", "t", "in", "task_ratio_list", ":", "\n", "\n", "        ", "os", ".", "system", "(", "'rm record.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.__init__": [[39, 53], ["torch.nn.Module.__init__", "dict", "layer.GraphConvolution", "dict", "layer.GraphConvolution", "gnn.GNN.cuda"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["        ", "super", "(", "GNNp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_class'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.reset": [[54, 57], ["gnn.GNN.m1.reset_parameters", "gnn.GNN.m2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.GraphConvolution.reset_parameters"], ["self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward": [[58, 65], ["torch.dropout", "torch.dropout", "gnn.GNN.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2"], "methods", ["None"], ["x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n", "return", "x", ",", "x0", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition": [[67, 74], ["torch.dropout", "torch.dropout", "gnn.GNN.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2.forward_partition"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_partition"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_mix": [[76, 88], ["random.choice", "torch.dropout", "torch.dropout", "gnn.GNN.m1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2", "get_augmented_network_input", "get_augmented_network_input"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux": [[89, 121], ["torch.dropout", "torch.dropout", "gnn.GNN.m1.forward_aux", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2.forward_aux", "torch.dropout", "torch.dropout", "gnn.GNN.m1.forward_aux", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gnn.GNN.m2.forward_aux", "random.choice", "gnn.mixup_gnn_hidden", "gnn.mixup_gnn_hidden"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.GNN.forward_aux", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.mixup_gnn_hidden", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.mixup_gnn_hidden"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.mixup_data": [[14, 25], ["torch.randperm().cuda", "torch.randperm().cuda", "numpy.random.beta", "x.size", "torch.randperm", "torch.randperm"], "function", ["None"], ["self", ".", "adj", "=", "adj", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'num_feature'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'hidden_dim'", "]", ")", "]", ")", "\n", "self", ".", "m1", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "opt_", "=", "dict", "(", "[", "(", "'in'", ",", "opt", "[", "'hidden_dim'", "]", ")", ",", "(", "'out'", ",", "opt", "[", "'num_class'", "]", ")", "]", ")", "\n", "self", ".", "m2", "=", "GraphConvolution", "(", "opt_", ",", "adj", ")", "\n", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.gnn.mixup_gnn_hidden": [[26, 34], ["numpy.random.beta", "torch.randperm", "torch.randperm"], "function", ["None"], ["        ", "self", ".", "m1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "m2", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'input_dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "_", "=", "self", ".", "m1", "(", "x", ",", "adj", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "opt", "[", "'dropout'", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "x", ",", "x0", "=", "self", ".", "m2", "(", "x", ",", "adj", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_attack.run": [[13, 106], ["main_attack.setup_seed", "utils.load_data", "adj.cuda.cuda", "features.cuda.cuda", "labels.cuda.cuda", "net.net_gcn", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "range", "numpy.load().transpose", "numpy.load().transpose", "utils.load_data_raw", "zip", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "range", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu", "output[].cpu().numpy().argmax", "numpy.load", "numpy.load", "torch.no_grad", "torch.no_grad", "[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "[].cpu().numpy().argmax", "print", "print", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "output[].cpu().numpy", "[].cpu().numpy", "[].cpu().numpy", "[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "output[].cpu", "[].cpu", "[].cpu", "[].cpu", "nn.CrossEntropyLoss.", "net_gcn.cuda.", "net_gcn.cuda.", "net_gcn.cuda."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "dataset", "=", "args", "[", "'dataset'", "]", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "dataset", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_val", "=", "[", "]", "\n", "early_stopping", "=", "10", "\n", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "# print('')", "\n", "acc", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "# print('test acc', acc)", "\n", "\n", "# attack", "\n", "", "w0", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w0.npy'", ")", ".", "transpose", "(", ")", "\n", "w1", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w1.npy'", ")", ".", "transpose", "(", ")", "\n", "\n", "adj_raw", ",", "features_raw", ",", "labels_raw", "=", "load_data_raw", "(", "dataset", ")", "\n", "\n", "correct_pred_link", "=", "0", "\n", "correct_pred_feat", "=", "0", "\n", "correct_pred_link_feat", "=", "0", "\n", "n_attack", "=", "args", "[", "'nattack'", "]", "\n", "for", "idxt", ",", "n", "in", "zip", "(", "idx_test", ",", "range", "(", "1000", ")", ")", ":", "\n", "\n", "# link", "\n", "        ", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "False", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link", "=", "correct_pred_link", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link", ",", "n", "+", "1", ")", "\n", "\n", "# feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "False", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_feat", "=", "correct_pred_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_feat", ",", "n", "+", "1", ")", "\n", "\n", "# link & feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link_feat", "=", "correct_pred_link_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link_feat", ",", "n", "+", "1", ")", "\n", "\n", "", "", "adv_acc_link", "=", "correct_pred_link", "/", "1000", "\n", "adv_acc_feat", "=", "correct_pred_feat", "/", "1000", "\n", "adv_acc_link_feat", "=", "correct_pred_link_feat", "/", "1000", "\n", "\n", "return", "acc", ",", "adv_acc_link", ",", "adv_acc_feat", ",", "adv_acc_link_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_attack.parser_loader": [[108, 116], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Attack GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--nattack'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_attack.setup_seed": [[118, 124], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.net.net_gcn.__init__": [[7, 14], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "len", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_num", "=", "len", "(", "embedding_dim", ")", "-", "1", "\n", "self", ".", "net_layer", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "embedding_dim", "[", "ln", "]", ",", "embedding_dim", "[", "ln", "+", "1", "]", ",", "bias", "=", "False", ")", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.net.net_gcn.forward": [[15, 27], ["range", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "net.net_gcn.relu", "net.net_gcn.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ",", "val_test", "=", "False", ")", ":", "\n", "\n", "        ", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "x", "=", "torch", ".", "spmm", "(", "adj", ",", "x", ")", "\n", "x", "=", "self", ".", "net_layer", "[", "ln", "]", "(", "x", ")", "\n", "if", "ln", "==", "self", ".", "layer_num", "-", "1", ":", "\n", "                ", "break", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "val_test", ":", "\n", "                ", "continue", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.net.net_gcn_2task.__init__": [[31, 39], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "len", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "ss_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_num", "=", "len", "(", "embedding_dim", ")", "-", "1", "\n", "self", ".", "net_layer", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "embedding_dim", "[", "ln", "]", ",", "embedding_dim", "[", "ln", "+", "1", "]", ",", "bias", "=", "False", ")", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", "]", ")", "\n", "self", ".", "ss_classifier", "=", "nn", ".", "Linear", "(", "embedding_dim", "[", "-", "2", "]", ",", "ss_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.net.net_gcn_2task.forward": [[40, 63], ["range", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "net.net_gcn_2task.relu", "net.net_gcn_2task.dropout", "range", "net.net_gcn_2task.ss_classifier", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "net.net_gcn_2task.relu", "net.net_gcn_2task.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ",", "val_test", "=", "False", ")", ":", "\n", "\n", "        ", "x_ss", "=", "x", "\n", "\n", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "x", "=", "torch", ".", "spmm", "(", "adj", ",", "x", ")", "\n", "x", "=", "self", ".", "net_layer", "[", "ln", "]", "(", "x", ")", "\n", "if", "ln", "==", "self", ".", "layer_num", "-", "1", ":", "\n", "                ", "break", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "val_test", ":", "\n", "                ", "continue", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "if", "not", "val_test", ":", "\n", "            ", "for", "ln", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "                ", "x_ss", "=", "torch", ".", "spmm", "(", "adj", ",", "x_ss", ")", "\n", "if", "ln", "==", "self", ".", "layer_num", "-", "1", ":", "\n", "                    ", "break", "\n", "", "x_ss", "=", "self", ".", "net_layer", "[", "ln", "]", "(", "x_ss", ")", "\n", "x_ss", "=", "self", ".", "relu", "(", "x_ss", ")", "\n", "x_ss", "=", "self", ".", "dropout", "(", "x_ss", ")", "\n", "", "x_ss", "=", "self", ".", "ss_classifier", "(", "x_ss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_clu.run": [[13, 175], ["main_defense_clu.setup_seed", "utils.load_data", "list", "numpy.random.permutation", "list", "list", "adj.cuda.cuda", "features.cuda.cuda", "labels.cuda.cuda", "net.net_gcn", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "range", "numpy.load().transpose", "numpy.load().transpose", "utils.load_data_raw", "output[].cpu().numpy().argmax.argmax().cpu().numpy", "utils.graph_attack", "torch.tensor().cuda", "torch.tensor().cuda", "list", "utils.preprocess_feat_adj", "torch.tensor().cuda", "torch.tensor().cuda", "net.net_gcn_2task", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "numpy.load().transpose", "numpy.load().transpose", "utils.load_data_raw", "zip", "range", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "range", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "len", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu", "output[].cpu().numpy().argmax", "numpy.load", "numpy.load", "output[].cpu().numpy().argmax.argmax().cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu", "output[].cpu().numpy().argmax", "numpy.load", "numpy.load", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "output[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "output[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "output[].cpu().numpy().argmax", "print", "print", "features.cuda.size", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "numpy.load", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "output[].cpu().numpy", "output[].cpu().numpy().argmax.argmax", "output[].cpu().numpy", "output[].cpu().numpy", "output[].cpu().numpy", "output[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "nn.CrossEntropyLoss.cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "output[].cpu", "output[].cpu", "output[].cpu", "output[].cpu", "output[].cpu", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "dataset", "=", "args", "[", "'dataset'", "]", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "dataset", ")", "\n", "\n", "idx_unlabeled", "=", "list", "(", "range", "(", "len", "(", "idx_train", ")", ",", "features", ".", "size", "(", ")", "[", "0", "]", ")", ")", "\n", "# print(len(idx_train), features.size()[0])", "\n", "idx_unlabeled", "=", "np", ".", "random", ".", "permutation", "(", "idx_unlabeled", ")", "\n", "idx_clean", "=", "list", "(", "idx_unlabeled", "[", ":", "100", "]", ")", "\n", "idx_adv", "=", "list", "(", "idx_unlabeled", "[", "100", ":", "300", "]", ")", "\n", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_val", "=", "[", "]", "\n", "early_stopping", "=", "10", "\n", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "# print('')", "\n", "acc", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "# print('test acc', acc)", "\n", "\n", "#########", "\n", "# robust training", "\n", "", "w0", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w0.npy'", ")", ".", "transpose", "(", ")", "\n", "w1", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w1.npy'", ")", ".", "transpose", "(", ")", "\n", "\n", "adj_raw", ",", "features_raw", ",", "_", "=", "load_data_raw", "(", "dataset", ")", "\n", "\n", "pseudo_labels", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# print(pseudo_labels)", "\n", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "pseudo_labels", ",", "w0", ",", "w1", ",", "True", ",", "True", ",", "idx_adv", ",", "n", "=", "2", ")", "\n", "cluster_alignment_labels_file", "=", "'./cluster_labels/'", "+", "args", "[", "'dataset'", "]", "+", "'.npy'", "\n", "# cluster_labels = torch.tensor(np.load(cluster_labels_file), dtype=torch.int64).cuda()", "\n", "cluster_alignment_labels", "=", "torch", ".", "tensor", "(", "np", ".", "load", "(", "cluster_alignment_labels_file", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "cuda", "(", ")", "\n", "idx_unlabeled", "=", "list", "(", "idx_unlabeled", ")", "\n", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "\n", "pseudo_labels", "=", "torch", ".", "tensor", "(", "pseudo_labels", ")", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn_2task", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ",", "ss_class_num", "=", "args", "[", "'embedding_dim'", "]", "[", "-", "1", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output", ",", "output_ss", "=", "net_gcn", "(", "features", ",", "features_per", ",", "adj", ",", "adj_per", ")", "\n", "output_adv", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ")", "\n", "\n", "loss_train", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "*", "args", "[", "'task_ratio'", "]", "+", "loss_func", "(", "output_ss", "[", "idx_unlabeled", "]", ",", "cluster_alignment_labels", "[", "idx_unlabeled", "]", ")", "*", "(", "1", "-", "args", "[", "'task_ratio'", "]", ")", "\n", "loss_adv_1", "=", "loss_func", "(", "output_adv", "[", "idx_clean", "]", ",", "pseudo_labels", "[", "idx_clean", "]", ")", "\n", "loss_adv_2", "=", "loss_func", "(", "output_adv", "[", "idx_adv", "]", ",", "pseudo_labels", "[", "idx_adv", "]", ")", "\n", "\n", "loss", "=", "loss_train", "+", "1", "*", "(", "loss_adv_1", "+", "loss_adv_2", ")", "\n", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "features_per", ",", "adj", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "features_per", ",", "adj", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "# print('')", "\n", "acc", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "# print('test acc', acc)", "\n", "\n", "#########", "\n", "# attack", "\n", "", "w0", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w0.npy'", ")", ".", "transpose", "(", ")", "\n", "w1", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w1.npy'", ")", ".", "transpose", "(", ")", "\n", "\n", "adj_raw", ",", "features_raw", ",", "labels_raw", "=", "load_data_raw", "(", "dataset", ")", "\n", "\n", "correct_pred_link", "=", "0", "\n", "correct_pred_feat", "=", "0", "\n", "correct_pred_link_feat", "=", "0", "\n", "n_attack", "=", "args", "[", "'nattack'", "]", "\n", "for", "idxt", ",", "n", "in", "zip", "(", "idx_test", ",", "range", "(", "1000", ")", ")", ":", "\n", "\n", "# link", "\n", "        ", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "False", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "output", "=", "output", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link", "=", "correct_pred_link", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link", ",", "n", "+", "1", ")", "\n", "\n", "# feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "False", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "output", "=", "output", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_feat", "=", "correct_pred_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_feat", ",", "n", "+", "1", ")", "\n", "\n", "# link & feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "output", "=", "output", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link_feat", "=", "correct_pred_link_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link_feat", ",", "n", "+", "1", ")", "\n", "\n", "", "", "adv_acc_link", "=", "correct_pred_link", "/", "1000", "\n", "adv_acc_feat", "=", "correct_pred_feat", "/", "1000", "\n", "adv_acc_link_feat", "=", "correct_pred_link_feat", "/", "1000", "\n", "\n", "return", "acc", ",", "adv_acc_link", ",", "adv_acc_feat", ",", "adv_acc_link_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_clu.parser_loader": [[177, 186], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Attack GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--task-ratio'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--nattack'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_clu.setup_seed": [[188, 194], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_comp.run": [[13, 193], ["main_defense_comp.setup_seed", "utils.load_data", "list", "numpy.random.permutation", "list", "list", "adj.cuda.cuda", "features.cuda.cuda", "labels.cuda.cuda", "net.net_gcn", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "torch.L1Loss", "range", "numpy.load().transpose", "numpy.load().transpose", "utils.load_data_raw", "output[].cpu().numpy().argmax.argmax().cpu().numpy", "utils.graph_attack", "list", "utils.sparse_mx_to_torch_sparse_tensor().cuda", "utils.preprocess_feat_adj", "features_per.svd", "torch.tensor().cuda", "torch.tensor().cuda", "net.net_gcn_2task", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "numpy.load().transpose", "numpy.load().transpose", "utils.load_data_raw", "zip", "range", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "features.cuda.size", "range", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "range", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "len", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu", "output[].cpu().numpy().argmax", "numpy.load", "numpy.load", "output[].cpu().numpy().argmax.argmax().cpu", "utils.sparse_mx_to_torch_sparse_tensor", "torch.tensor", "torch.tensor", "nn.CrossEntropyLoss.", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "sklearn.metrics.f1_score", "labels[].cpu", "output[].cpu().numpy().argmax", "numpy.load", "numpy.load", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "output[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "output[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "output[].cpu().numpy().argmax", "print", "print", "features.cuda.size", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "utils.normalize_adj", "nn.CrossEntropyLoss.cpu().numpy", "labels[].cpu().numpy", "output[].cpu().numpy().argmax", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "output[].cpu().numpy", "output[].cpu().numpy().argmax.argmax", "nn.L1Loss.", "output[].cpu().numpy", "output[].cpu().numpy", "output[].cpu().numpy", "output[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "nn.CrossEntropyLoss.cpu", "labels[].cpu", "output[].cpu().numpy", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "output[].cpu", "output[].cpu", "output[].cpu", "output[].cpu", "output[].cpu", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "output[].cpu"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.normalize_adj"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "dataset", "=", "args", "[", "'dataset'", "]", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "dataset", ")", "\n", "\n", "idx_unlabeled", "=", "list", "(", "range", "(", "len", "(", "idx_train", ")", ",", "features", ".", "size", "(", ")", "[", "0", "]", ")", ")", "\n", "# print(len(idx_train), features.size()[0])", "\n", "idx_unlabeled", "=", "np", ".", "random", ".", "permutation", "(", "idx_unlabeled", ")", "\n", "idx_clean", "=", "list", "(", "idx_unlabeled", "[", ":", "100", "]", ")", "\n", "idx_adv", "=", "list", "(", "idx_unlabeled", "[", "100", ":", "300", "]", ")", "\n", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_func_ss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "loss_val", "=", "[", "]", "\n", "early_stopping", "=", "10", "\n", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "# print('')", "\n", "acc", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "# print('test acc', acc)", "\n", "\n", "#########", "\n", "# robust training", "\n", "", "w0", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w0.npy'", ")", ".", "transpose", "(", ")", "\n", "w1", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w1.npy'", ")", ".", "transpose", "(", ")", "\n", "\n", "adj_raw", ",", "features_raw", ",", "_", "=", "load_data_raw", "(", "dataset", ")", "\n", "\n", "pseudo_labels", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# print(pseudo_labels)", "\n", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "pseudo_labels", ",", "w0", ",", "w1", ",", "True", ",", "True", ",", "idx_adv", ",", "n", "=", "2", ")", "\n", "\n", "node_num", "=", "features", ".", "size", "(", ")", "[", "0", "]", "\n", "idx_mask", "=", "list", "(", "range", "(", "node_num", ")", ")", "\n", "adj_mask", "=", "adj_per", "\n", "adj_mask", "[", "idx_mask", ",", "idx_mask", "]", "=", "0", "\n", "adj_mask", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "adj_mask", ")", ")", ".", "cuda", "(", ")", "\n", "dimm", "=", "args", "[", "'partition_num'", "]", "\n", "\n", "# partition_labels = partition(adj_per, args['partition_num'])", "\n", "# partition_labels = partition(adj_raw, args['partition_num'])", "\n", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "f_mask", ",", "_", ",", "_", "=", "features_per", ".", "svd", "(", ")", "\n", "partition_labels", "=", "f_mask", "[", ":", ",", ":", "dimm", "]", "\n", "\n", "pseudo_labels", "=", "torch", ".", "tensor", "(", "pseudo_labels", ")", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn_2task", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ",", "ss_class_num", "=", "args", "[", "'partition_num'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "\n", "best_val", "=", "0", "\n", "for", "epoch", "in", "range", "(", "500", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output", ",", "output_ss", "=", "net_gcn", "(", "features", ",", "features_per", ",", "adj", ",", "adj_per", ")", "\n", "output_adv", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ")", "\n", "\n", "loss_train", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "+", "loss_func_ss", "(", "output_ss", ",", "partition_labels", ")", "*", "args", "[", "'task_ratio'", "]", "*", "1e2", "\n", "loss_adv_1", "=", "loss_func", "(", "output_adv", "[", "idx_clean", "]", ",", "pseudo_labels", "[", "idx_clean", "]", ")", "\n", "loss_adv_2", "=", "loss_func", "(", "output_adv", "[", "idx_adv", "]", ",", "pseudo_labels", "[", "idx_adv", "]", ")", "\n", "\n", "loss", "=", "loss_train", "+", "1", "*", "(", "loss_adv_1", "+", "loss_adv_2", ")", "\n", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "features_per", ",", "adj", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "val_a", "=", "f1_score", "(", "labels", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", "[", "idx_val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "if", "val_a", ">", "best_val", ":", "\n", "                ", "best_val", "=", "val_a", "\n", "net_gcn_best", "=", "net_gcn", "\n", "\n", "", "", "'''\n        # early stopping\n        if epoch > early_stopping and loss_val[-1] > np.mean(loss_val[-(early_stopping+1):-1]):\n            break\n        '''", "\n", "\n", "", "net_gcn", "=", "net_gcn_best", "\n", "# test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "features_per", ",", "adj", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "# print('')", "\n", "acc", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "# print('test acc', acc)", "\n", "\n", "#########", "\n", "# attack", "\n", "", "w0", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w0.npy'", ")", ".", "transpose", "(", ")", "\n", "w1", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w1.npy'", ")", ".", "transpose", "(", ")", "\n", "\n", "adj_raw", ",", "features_raw", ",", "labels_raw", "=", "load_data_raw", "(", "dataset", ")", "\n", "\n", "correct_pred_link", "=", "0", "\n", "correct_pred_feat", "=", "0", "\n", "correct_pred_link_feat", "=", "0", "\n", "n_attack", "=", "args", "[", "'nattack'", "]", "\n", "for", "idxt", ",", "n", "in", "zip", "(", "idx_test", ",", "range", "(", "1000", ")", ")", ":", "\n", "\n", "# link", "\n", "        ", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "False", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "output", "=", "output", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link", "=", "correct_pred_link", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link", ",", "n", "+", "1", ")", "\n", "\n", "# feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "False", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "output", "=", "output", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_feat", "=", "correct_pred_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_feat", ",", "n", "+", "1", ")", "\n", "\n", "# link feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "output", "=", "output", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link_feat", "=", "correct_pred_link_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link_feat", ",", "n", "+", "1", ")", "\n", "\n", "", "", "adv_acc_link", "=", "correct_pred_link", "/", "1000", "\n", "adv_acc_feat", "=", "correct_pred_feat", "/", "1000", "\n", "adv_acc_link_feat", "=", "correct_pred_link_feat", "/", "1000", "\n", "\n", "return", "acc", ",", "adv_acc_link", ",", "adv_acc_feat", ",", "adv_acc_link_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_comp.parser_loader": [[195, 205], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Attack GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--partition-num'", ",", "type", "=", "int", ",", "default", "=", "24", ")", "\n", "parser", ".", "add_argument", "(", "'--task-ratio'", ",", "type", "=", "float", ",", "default", "=", "0.6", ")", "\n", "parser", ".", "add_argument", "(", "'--nattack'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_comp.setup_seed": [[207, 213], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.parse_index_file": [[15, 21], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n", "\n", "", "def", "sample_mask", "(", "idx", ",", "l", ")", ":", "\n", "    ", "\"\"\"Create mask.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sample_mask": [[23, 28], ["numpy.zeros", "numpy.array"], "function", ["None"], ["mask", "[", "idx", "]", "=", "1", "\n", "return", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "\n", "", "def", "load_data", "(", "dataset_str", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data": [[30, 108], ["range", "tuple", "utils.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "utils.preprocess_features", "torch.tensor", "networkx.adjacency_matrix", "utils.preprocess_adj", "utils.sparse_mx_to_torch_sparse_tensor", "numpy.vstack", "torch.tensor", "np.sort.tolist", "range", "range", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "len", "len", "open", "min", "scipy.vstack", "len", "objects.append", "objects.append", "max", "len", "len", "pickle.load", "pickle.load", "range", "min", "min"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.parse_index_file", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_features", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["\n", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"../dataset/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"../dataset/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "# preprocess feature", "\n", "features", "=", "preprocess_features", "(", "features", ")", "\n", "features", "=", "torch", ".", "tensor", "(", "features", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "# preprocess adj", "\n", "adj", "=", "preprocess_adj", "(", "adj", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "_", ",", "l_num", "=", "labels", ".", "shape", "\n", "labels", "=", "torch", ".", "tensor", "(", "(", "labels", "*", "range", "(", "l_num", ")", ")", ".", "sum", "(", "axis", "=", "1", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "list", "(", "range", "(", "len", "(", "y", ")", ")", ")", "\n", "idx_val", "=", "list", "(", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n", "\n", "", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert sparse matrix to tuple representation.\"\"\"", "\n", "def", "to_tuple", "(", "mx", ")", ":", "\n", "        ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "            ", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "            ", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_to_tuple": [[110, 127], ["isinstance", "numpy.vstack().transpose", "range", "utils.sparse_to_tuple.to_tuple"], "function", ["None"], ["\n", "\n", "", "def", "preprocess_features", "(", "features", ")", ":", "\n", "    ", "\"\"\"Row-normalize feature matrix and convert to tuple representation\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "features", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "features", "=", "r_mat_inv", ".", "dot", "(", "features", ")", "\n", "#return sparse_to_tuple(features)", "\n", "return", "features", ".", "todense", "(", ")", "\n", "\n", "\n", "", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_features": [[129, 138], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.todense", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n", "\n", "", "def", "preprocess_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Preprocessing of adjacency matrix for simple GCN model and conversion to tuple representation.\"\"\"", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "#return sparse_to_tuple(adj_normalized)", "\n", "return", "adj_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.normalize_adj": [[140, 148], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "def", "construct_feed_dict", "(", "features", ",", "support", ",", "labels", ",", "labels_mask", ",", "placeholders", ")", ":", "\n", "    ", "\"\"\"Construct feed dictionary.\"\"\"", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'labels'", "]", ":", "labels", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'labels_mask'", "]", ":", "labels_mask", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'features'", "]", ":", "features", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'support'", "]", "[", "i", "]", ":", "support", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "support", ")", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "features", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_adj": [[150, 155], ["utils.normalize_adj", "scipy.eye"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.normalize_adj"], ["\n", "", "def", "chebyshev_polynomials", "(", "adj", ",", "k", ")", ":", "\n", "    ", "\"\"\"Calculate Chebyshev polynomials up to order k. Return a list of sparse matrices (tuple representation).\"\"\"", "\n", "print", "(", "\"Calculating Chebyshev polynomials up to order {}...\"", ".", "format", "(", "k", ")", ")", "\n", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.construct_feed_dict": [[157, 166], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "range", "len"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.update"], ["largest_eigval", ",", "_", "=", "eigsh", "(", "laplacian", ",", "1", ",", "which", "=", "'LM'", ")", "\n", "scaled_laplacian", "=", "(", "2.", "/", "largest_eigval", "[", "0", "]", ")", "*", "laplacian", "-", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "\n", "t_k", "=", "list", "(", ")", "\n", "t_k", ".", "append", "(", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "t_k", ".", "append", "(", "scaled_laplacian", ")", "\n", "\n", "def", "chebyshev_recurrence", "(", "t_k_minus_one", ",", "t_k_minus_two", ",", "scaled_lap", ")", ":", "\n", "        ", "s_lap", "=", "sp", ".", "csr_matrix", "(", "scaled_lap", ",", "copy", "=", "True", ")", "\n", "return", "2", "*", "s_lap", ".", "dot", "(", "t_k_minus_one", ")", "-", "t_k_minus_two", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.chebyshev_polynomials": [[168, 189], ["print", "utils.normalize_adj", "scipy.sparse.linalg.eigen.arpack.eigsh", "list", "list.append", "list.append", "range", "utils.sparse_to_tuple", "scipy.eye", "scipy.eye", "scipy.eye", "scipy.csr_matrix", "list.append", "utils.chebyshev_polynomials.chebyshev_recurrence"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.normalize_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_to_tuple"], ["", "for", "i", "in", "range", "(", "2", ",", "k", "+", "1", ")", ":", "\n", "        ", "t_k", ".", "append", "(", "chebyshev_recurrence", "(", "t_k", "[", "-", "1", "]", ",", "t_k", "[", "-", "2", "]", ",", "scaled_laplacian", ")", ")", "\n", "\n", "", "return", "sparse_to_tuple", "(", "t_k", ")", "\n", "\n", "\n", "", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n", "\n", "", "def", "load_adj_raw", "(", "dataset_str", ")", ":", "\n", "\n", "    ", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"../dataset/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_mx_to_torch_sparse_tensor": [[191, 199], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"../dataset/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack": [[201, 248], ["Alink.sum", "Xfeature.sum", "print", "int", "int", "nettack.nettack.nettack.Nettack", "ntk.Nettack.reset", "ntk.Nettack.attack_surrogate", "ntk.Nettack.X_obs.tocsr", "nettack.nettack.nettack.Nettack", "ntk.Nettack.reset", "ntk.Nettack.attack_surrogate", "ntk.Nettack.X_obs.tocsr"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.reset", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.attack_surrogate", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.reset", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.attack_surrogate"], ["# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "adj_raw", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "return", "adj_raw", "\n", "\n", "\n", "", "def", "partition", "(", "adj_raw", ",", "n", ")", ":", "\n", "\n", "    ", "node_num", "=", "adj_raw", ".", "shape", "[", "0", "]", "\n", "adj_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "node_num", ")", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "adj_raw", ".", "row", ",", "adj_raw", ".", "col", ")", ":", "\n", "        ", "if", "i", "==", "j", ":", "\n", "            ", "continue", "\n", "", "adj_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "\n", "", "_", ",", "ss_labels", "=", "metis", ".", "part_graph", "(", "adj_list", ",", "nparts", "=", "n", ",", "seed", "=", "0", ")", "\n", "ss_labels", "=", "torch", ".", "tensor", "(", "ss_labels", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "return", "ss_labels", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw": [[250, 304], ["range", "tuple", "utils.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "numpy.vstack", "labels.astype.astype", "np.sort.tolist", "range", "range", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "len", "len", "open", "min", "scipy.vstack", "len", "objects.append", "objects.append", "max", "len", "len", "range", "pickle.load", "pickle.load", "min", "min"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.parse_index_file", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj": [[306, 315], ["utils.preprocess_features", "torch.tensor", "utils.preprocess_adj", "utils.sparse_mx_to_torch_sparse_tensor", "torch.tensor.cuda", "sparse_mx_to_torch_sparse_tensor.cuda"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_features", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.sparse_mx_to_torch_sparse_tensor"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.partition": [[316, 330], ["adj.tocoo", "zip", "metis.part_graph", "torch.tensor", "torch.tensor.cuda", "adj_list[].append", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense.run": [[13, 166], ["main_defense.setup_seed", "utils.load_data", "list", "numpy.random.permutation", "list", "list", "adj.cuda.cuda", "features.cuda.cuda", "labels.cuda.cuda", "net.net_gcn", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "range", "numpy.load().transpose", "numpy.load().transpose", "utils.load_data_raw", "[].cpu().numpy().argmax.argmax().cpu().numpy", "utils.graph_attack", "utils.preprocess_feat_adj", "torch.tensor().cuda", "torch.tensor().cuda", "net.net_gcn", "torch.optim.Adam", "torch.optim.Adam", "net_gcn.cuda.cuda", "range", "numpy.load().transpose", "numpy.load().transpose", "utils.load_data_raw", "zip", "range", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "print", "range", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "len", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu", "output[].cpu().numpy().argmax", "numpy.load", "numpy.load", "[].cpu().numpy().argmax.argmax().cpu", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu", "output[].cpu().numpy().argmax", "numpy.load", "numpy.load", "torch.no_grad", "torch.no_grad", "[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "[].cpu().numpy().argmax", "print", "print", "features.cuda.size", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "output[].cpu().numpy", "[].cpu().numpy().argmax.argmax", "output[].cpu().numpy", "[].cpu().numpy", "[].cpu().numpy", "[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "nn.CrossEntropyLoss.cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "output[].cpu", "output[].cpu", "[].cpu", "[].cpu", "[].cpu", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "net_gcn.cuda.", "net_gcn.cuda.", "net_gcn.cuda."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "dataset", "=", "args", "[", "'dataset'", "]", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "dataset", ")", "\n", "\n", "idx_unlabeled", "=", "list", "(", "range", "(", "len", "(", "idx_train", ")", ",", "features", ".", "size", "(", ")", "[", "0", "]", ")", ")", "\n", "# print(len(idx_train), features.size()[0])", "\n", "idx_unlabeled", "=", "np", ".", "random", ".", "permutation", "(", "idx_unlabeled", ")", "\n", "idx_clean", "=", "list", "(", "idx_unlabeled", "[", ":", "100", "]", ")", "\n", "idx_adv", "=", "list", "(", "idx_unlabeled", "[", "100", ":", "300", "]", ")", "\n", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_val", "=", "[", "]", "\n", "early_stopping", "=", "10", "\n", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "# print('')", "\n", "acc", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "# print('test acc', acc)", "\n", "\n", "#########", "\n", "# robust training", "\n", "", "w0", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w0.npy'", ")", ".", "transpose", "(", ")", "\n", "w1", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w1.npy'", ")", ".", "transpose", "(", ")", "\n", "\n", "adj_raw", ",", "features_raw", ",", "_", "=", "load_data_raw", "(", "dataset", ")", "\n", "\n", "pseudo_labels", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# print(pseudo_labels)", "\n", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "pseudo_labels", ",", "w0", ",", "w1", ",", "True", ",", "True", ",", "idx_adv", ",", "n", "=", "2", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "\n", "pseudo_labels", "=", "torch", ".", "tensor", "(", "pseudo_labels", ")", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "output_adv", "=", "net_gcn", "(", "features_per", ",", "adj_per", ")", "\n", "loss_train", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_adv_1", "=", "loss_func", "(", "output_adv", "[", "idx_clean", "]", ",", "pseudo_labels", "[", "idx_clean", "]", ")", "\n", "loss_adv_2", "=", "loss_func", "(", "output_adv", "[", "idx_adv", "]", ",", "pseudo_labels", "[", "idx_adv", "]", ")", "\n", "\n", "loss", "=", "loss_train", "+", "1", "*", "(", "loss_adv_1", "+", "loss_adv_2", ")", "\n", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "# print('')", "\n", "acc", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "print", "(", "'test acc'", ",", "acc", ")", "\n", "\n", "#########", "\n", "# attack", "\n", "", "w0", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w0.npy'", ")", ".", "transpose", "(", ")", "\n", "w1", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w1.npy'", ")", ".", "transpose", "(", ")", "\n", "\n", "adj_raw", ",", "features_raw", ",", "labels_raw", "=", "load_data_raw", "(", "dataset", ")", "\n", "\n", "correct_pred_link", "=", "0", "\n", "correct_pred_feat", "=", "0", "\n", "correct_pred_link_feat", "=", "0", "\n", "n_attack", "=", "args", "[", "'nattack'", "]", "\n", "for", "idxt", ",", "n", "in", "zip", "(", "idx_test", ",", "range", "(", "1000", ")", ")", ":", "\n", "\n", "# link", "\n", "        ", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "False", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link", "=", "correct_pred_link", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link", ",", "n", "+", "1", ")", "\n", "\n", "# feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "False", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_feat", "=", "correct_pred_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_feat", ",", "n", "+", "1", ")", "\n", "\n", "# link & feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link_feat", "=", "correct_pred_link_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link_feat", ",", "n", "+", "1", ")", "\n", "\n", "", "", "adv_acc_link", "=", "correct_pred_link", "/", "1000", "\n", "adv_acc_feat", "=", "correct_pred_feat", "/", "1000", "\n", "adv_acc_link_feat", "=", "correct_pred_link_feat", "/", "1000", "\n", "\n", "return", "acc", ",", "adv_acc_link", ",", "adv_acc_feat", ",", "adv_acc_link_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense.parser_loader": [[168, 176], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Attack GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--nattack'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense.setup_seed": [[178, 184], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.run": [[13, 173], ["main_defense_par.setup_seed", "utils.load_data", "list", "numpy.random.permutation", "list", "list", "adj.cuda.cuda", "features.cuda.cuda", "labels.cuda.cuda", "net.net_gcn", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "range", "numpy.load().transpose", "numpy.load().transpose", "utils.load_data_raw", "output[].cpu().numpy().argmax.argmax().cpu().numpy", "utils.graph_attack", "utils.partition", "utils.preprocess_feat_adj", "torch.tensor().cuda", "torch.tensor().cuda", "net.net_gcn_2task", "net_gcn.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "numpy.load().transpose", "numpy.load().transpose", "utils.load_data_raw", "zip", "range", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "net_gcn.cuda.parameters", "torch.optim.Adam.zero_grad", "net_gcn.cuda.", "net_gcn.cuda.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "sklearn.metrics.f1_score", "range", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "utils.graph_attack", "utils.preprocess_feat_adj", "len", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu", "output[].cpu().numpy().argmax", "numpy.load", "numpy.load", "output[].cpu().numpy().argmax.argmax().cpu", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "loss_val.append", "labels[].cpu", "output[].cpu().numpy().argmax", "numpy.load", "numpy.load", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "output[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "output[].cpu().numpy().argmax", "print", "print", "torch.no_grad", "torch.no_grad", "net_gcn.cuda.", "output[].cpu().numpy().argmax", "print", "print", "features.cuda.size", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.cpu().numpy", "numpy.mean", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "labels[].cpu().numpy", "output[].cpu().numpy", "output[].cpu().numpy().argmax.argmax", "output[].cpu().numpy", "output[].cpu().numpy", "output[].cpu().numpy", "output[].cpu().numpy", "nn.CrossEntropyLoss.cpu", "nn.CrossEntropyLoss.cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "labels[].cpu", "output[].cpu", "output[].cpu", "output[].cpu", "output[].cpu", "output[].cpu", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss."], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.partition", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.load_data_raw", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.layer.SparseMM.backward", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.graph_attack", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.utils.preprocess_feat_adj", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["def", "run", "(", "args", ",", "seed", ")", ":", "\n", "\n", "    ", "setup_seed", "(", "seed", ")", "\n", "dataset", "=", "args", "[", "'dataset'", "]", "\n", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "dataset", ")", "\n", "\n", "idx_unlabeled", "=", "list", "(", "range", "(", "len", "(", "idx_train", ")", ",", "features", ".", "size", "(", ")", "[", "0", "]", ")", ")", "\n", "# print(len(idx_train), features.size()[0])", "\n", "idx_unlabeled", "=", "np", ".", "random", ".", "permutation", "(", "idx_unlabeled", ")", "\n", "idx_clean", "=", "list", "(", "idx_unlabeled", "[", ":", "100", "]", ")", "\n", "idx_adv", "=", "list", "(", "idx_unlabeled", "[", "100", ":", "300", "]", ")", "\n", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_val", "=", "[", "]", "\n", "early_stopping", "=", "10", "\n", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "net_gcn", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "net_gcn", "(", "features", ",", "adj", ",", "val_test", "=", "True", ")", "\n", "# print('')", "\n", "acc", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "# print('test acc', acc)", "\n", "\n", "#########", "\n", "# robust training", "\n", "", "w0", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w0.npy'", ")", ".", "transpose", "(", ")", "\n", "w1", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w1.npy'", ")", ".", "transpose", "(", ")", "\n", "\n", "adj_raw", ",", "features_raw", ",", "_", "=", "load_data_raw", "(", "dataset", ")", "\n", "\n", "pseudo_labels", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# print(pseudo_labels)", "\n", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "pseudo_labels", ",", "w0", ",", "w1", ",", "True", ",", "True", ",", "idx_adv", ",", "n", "=", "2", ")", "\n", "partition_labels", "=", "partition", "(", "adj_per", ",", "args", "[", "'partition_num'", "]", ")", "\n", "# partition_labels = partition(adj_raw, args['partition_num'])", "\n", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "\n", "pseudo_labels", "=", "torch", ".", "tensor", "(", "pseudo_labels", ")", ".", "cuda", "(", ")", "\n", "\n", "net_gcn", "=", "net", ".", "net_gcn_2task", "(", "embedding_dim", "=", "args", "[", "'embedding_dim'", "]", ",", "ss_class_num", "=", "args", "[", "'partition_num'", "]", ")", "\n", "net_gcn", "=", "net_gcn", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_gcn", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1000", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output", ",", "output_ss", "=", "net_gcn", "(", "features", ",", "features_per", ",", "adj", ",", "adj_per", ")", "\n", "output_adv", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ")", "\n", "\n", "loss_train", "=", "loss_func", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "*", "args", "[", "'task_ratio'", "]", "+", "loss_func", "(", "output_ss", ",", "partition_labels", ")", "*", "(", "1", "-", "args", "[", "'task_ratio'", "]", ")", "\n", "loss_adv_1", "=", "loss_func", "(", "output_adv", "[", "idx_clean", "]", ",", "pseudo_labels", "[", "idx_clean", "]", ")", "\n", "loss_adv_2", "=", "loss_func", "(", "output_adv", "[", "idx_adv", "]", ",", "pseudo_labels", "[", "idx_adv", "]", ")", "\n", "\n", "loss", "=", "loss_train", "+", "1", "*", "(", "loss_adv_1", "+", "loss_adv_2", ")", "\n", "\n", "# print('epoch', epoch, 'loss', loss_train.data)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "features_per", ",", "adj", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "loss_val", ".", "append", "(", "loss_func", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('val acc', f1_score(labels[idx_val].cpu(), output[idx_val].cpu().numpy().argmax(axis=1), average='micro'))", "\n", "\n", "# early stopping", "\n", "", "if", "epoch", ">", "early_stopping", "and", "loss_val", "[", "-", "1", "]", ">", "np", ".", "mean", "(", "loss_val", "[", "-", "(", "early_stopping", "+", "1", ")", ":", "-", "1", "]", ")", ":", "\n", "            ", "break", "\n", "\n", "# test", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", ",", "_", "=", "net_gcn", "(", "features", ",", "features_per", ",", "adj", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "# print('')", "\n", "acc", "=", "f1_score", "(", "labels", "[", "idx_test", "]", ".", "cpu", "(", ")", ",", "output", "[", "idx_test", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ",", "average", "=", "'micro'", ")", "\n", "# print('test acc', acc)", "\n", "\n", "#########", "\n", "# attack", "\n", "", "w0", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w0.npy'", ")", ".", "transpose", "(", ")", "\n", "w1", "=", "np", ".", "load", "(", "'./weights/'", "+", "dataset", "+", "'_w1.npy'", ")", ".", "transpose", "(", ")", "\n", "\n", "adj_raw", ",", "features_raw", ",", "labels_raw", "=", "load_data_raw", "(", "dataset", ")", "\n", "\n", "correct_pred_link", "=", "0", "\n", "correct_pred_feat", "=", "0", "\n", "correct_pred_link_feat", "=", "0", "\n", "n_attack", "=", "args", "[", "'nattack'", "]", "\n", "for", "idxt", ",", "n", "in", "zip", "(", "idx_test", ",", "range", "(", "1000", ")", ")", ":", "\n", "\n", "# link", "\n", "        ", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "False", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "output", "=", "output", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link", "=", "correct_pred_link", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link", ",", "n", "+", "1", ")", "\n", "\n", "# feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "False", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "output", "=", "output", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_feat", "=", "correct_pred_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_feat", ",", "n", "+", "1", ")", "\n", "\n", "# link feat", "\n", "", "pernode", "=", "[", "idxt", "]", "\n", "_", ",", "_", ",", "adj_per", ",", "features_per", ",", "_", "=", "graph_attack", "(", "adj_raw", ",", "features_raw", ",", "labels_raw", ",", "w0", ",", "w1", ",", "True", ",", "True", ",", "pernode", ",", "n", "=", "n_attack", ")", "\n", "features_per", ",", "adj_per", "=", "preprocess_feat_adj", "(", "features_per", ",", "adj_per", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "_", "=", "net_gcn", "(", "features_per", ",", "features_per", ",", "adj_per", ",", "adj_per", ",", "val_test", "=", "True", ")", "\n", "output", "=", "output", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", ")", "\n", "if", "output", "==", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "                ", "correct_pred_link_feat", "=", "correct_pred_link_feat", "+", "1", "\n", "", "print", "(", "output", ",", "labels", "[", "idxt", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "correct_pred_link_feat", ",", "n", "+", "1", ")", "\n", "\n", "", "", "adv_acc_link", "=", "correct_pred_link", "/", "1000", "\n", "adv_acc_feat", "=", "correct_pred_feat", "/", "1000", "\n", "adv_acc_link_feat", "=", "correct_pred_link_feat", "/", "1000", "\n", "\n", "return", "acc", ",", "adv_acc_link", ",", "adv_acc_feat", ",", "adv_acc_link_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.parser_loader": [[175, 185], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_loader", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Attack GCN'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'citeseer'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding-dim'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3703", ",", "16", ",", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--partition-num'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--task-ratio'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--nattack'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.setup_seed": [[187, 193], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.__init__": [[25, 58], ["adj.copy().tolil", "nettack.Nettack.adj.copy", "nettack.Nettack.adj_no_selfloops.setdiag", "nettack.Nettack.adj.copy().tolil", "nettack.utils.preprocess_graph().tolil", "X_obs.copy().tolil", "nettack.Nettack.X_obs.copy().tolil", "z_obs.copy", "scipy.csr_matrix", "nettack.Nettack.X_obs.T.dot().tolil", "numpy.max", "nettack.Nettack.W1.dot", "adj.copy", "nettack.Nettack.adj.copy", "nettack.utils.preprocess_graph", "X_obs.copy", "nettack.Nettack.X_obs.copy", "nettack.Nettack.X_obs.T.dot"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.utils.preprocess_graph"], ["\n", "def", "__init__", "(", "self", ",", "adj", ",", "X_obs", ",", "z_obs", ",", "W1", ",", "W2", ",", "u", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "# Adjacency matrix", "\n", "        ", "self", ".", "adj", "=", "adj", ".", "copy", "(", ")", ".", "tolil", "(", ")", "\n", "self", ".", "adj_no_selfloops", "=", "self", ".", "adj", ".", "copy", "(", ")", "\n", "self", ".", "adj_no_selfloops", ".", "setdiag", "(", "0", ")", "\n", "self", ".", "adj_orig", "=", "self", ".", "adj", ".", "copy", "(", ")", ".", "tolil", "(", ")", "\n", "self", ".", "u", "=", "u", "# the node being attacked", "\n", "self", ".", "adj_preprocessed", "=", "utils", ".", "preprocess_graph", "(", "self", ".", "adj", ")", ".", "tolil", "(", ")", "\n", "# Number of nodes", "\n", "self", ".", "N", "=", "adj", ".", "shape", "[", "0", "]", "\n", "\n", "# Node attributes", "\n", "self", ".", "X_obs", "=", "X_obs", ".", "copy", "(", ")", ".", "tolil", "(", ")", "\n", "self", ".", "X_obs_orig", "=", "self", ".", "X_obs", ".", "copy", "(", ")", ".", "tolil", "(", ")", "\n", "# Node labels", "\n", "self", ".", "z_obs", "=", "z_obs", ".", "copy", "(", ")", "\n", "self", ".", "label_u", "=", "self", ".", "z_obs", "[", "self", ".", "u", "]", "\n", "self", ".", "K", "=", "np", ".", "max", "(", "self", ".", "z_obs", ")", "+", "1", "\n", "# GCN weight matrices", "\n", "self", ".", "W1", "=", "W1", "\n", "self", ".", "W2", "=", "W2", "\n", "self", ".", "W", "=", "sp", ".", "csr_matrix", "(", "self", ".", "W1", ".", "dot", "(", "self", ".", "W2", ")", ")", "\n", "\n", "self", ".", "cooc_matrix", "=", "self", ".", "X_obs", ".", "T", ".", "dot", "(", "self", ".", "X_obs", ")", ".", "tolil", "(", ")", "\n", "self", ".", "cooc_constraint", "=", "None", "\n", "\n", "self", ".", "structure_perturbations", "=", "[", "]", "\n", "self", ".", "feature_perturbations", "=", "[", "]", "\n", "\n", "self", ".", "influencer_nodes", "=", "[", "]", "\n", "self", ".", "potential_edges", "=", "[", "]", "\n", "self", ".", "verbose", "=", "verbose", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.compute_cooccurrence_constraint": [[59, 98], ["nettack.Nettack.cooc_matrix.copy", "nettack.Nettack.setdiag", "numpy.reciprocal", "numpy.zeros", "range", "scipy.lil_matrix", "scipy.csr_matrix", "numpy.sum", "numpy.sum", "nettack.Nettack.multiply", "numpy.array", "word_degrees.astype", "nettack.Nettack.X_obs[].nonzero", "nettack.Nettack.multiply.nonzero", "idegs[].sum", "n_idx.tolist", "nettack.Nettack.multiply.nonzero", "range"], "methods", ["None"], ["\n", "", "def", "compute_cooccurrence_constraint", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "\"\"\"\n        Co-occurrence constraint as described in the paper.\n\n        Parameters\n        ----------\n        nodes: np.array\n            Nodes whose features are considered for change\n\n        Returns\n        -------\n        np.array [len(nodes), D], dtype bool\n            Binary matrix of dimension len(nodes) x D. A 1 in entry n,d indicates that\n            we are allowed to add feature d to the features of node n.\n\n        \"\"\"", "\n", "\n", "words_graph", "=", "self", ".", "cooc_matrix", ".", "copy", "(", ")", "\n", "D", "=", "self", ".", "X_obs", ".", "shape", "[", "1", "]", "\n", "words_graph", ".", "setdiag", "(", "0", ")", "\n", "words_graph", "=", "(", "words_graph", ">", "0", ")", "\n", "word_degrees", "=", "np", ".", "sum", "(", "words_graph", ",", "axis", "=", "0", ")", ".", "A1", "\n", "\n", "inv_word_degrees", "=", "np", ".", "reciprocal", "(", "word_degrees", ".", "astype", "(", "float", ")", "+", "1e-8", ")", "\n", "\n", "sd", "=", "np", ".", "zeros", "(", "[", "self", ".", "N", "]", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "N", ")", ":", "\n", "            ", "n_idx", "=", "self", ".", "X_obs", "[", "n", ",", ":", "]", ".", "nonzero", "(", ")", "[", "1", "]", "\n", "sd", "[", "n", "]", "=", "np", ".", "sum", "(", "inv_word_degrees", "[", "n_idx", ".", "tolist", "(", ")", "]", ")", "\n", "\n", "", "scores_matrix", "=", "sp", ".", "lil_matrix", "(", "(", "self", ".", "N", ",", "D", ")", ")", "\n", "\n", "for", "n", "in", "nodes", ":", "\n", "            ", "common_words", "=", "words_graph", ".", "multiply", "(", "self", ".", "X_obs", "[", "n", "]", ")", "\n", "idegs", "=", "inv_word_degrees", "[", "common_words", ".", "nonzero", "(", ")", "[", "1", "]", "]", "\n", "nnz", "=", "common_words", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "scores", "=", "np", ".", "array", "(", "[", "idegs", "[", "nnz", "==", "ix", "]", ".", "sum", "(", ")", "for", "ix", "in", "range", "(", "D", ")", "]", ")", "\n", "scores_matrix", "[", "n", "]", "=", "scores", "\n", "", "self", ".", "cooc_constraint", "=", "sp", ".", "csr_matrix", "(", "scores_matrix", "-", "0.5", "*", "sd", "[", ":", ",", "None", "]", ">", "0", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.gradient_wrt_x": [[100, 116], ["[].T.dot", "nettack.Nettack.adj_preprocessed.dot"], "methods", ["None"], ["\n", "", "def", "gradient_wrt_x", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        Compute the gradient of the logit belonging to the class of the input label with respect to the input features.\n\n        Parameters\n        ----------\n        label: int\n            Class whose logits are of interest\n\n        Returns\n        -------\n        np.array [N, D] matrix containing the gradients.\n\n        \"\"\"", "\n", "\n", "return", "self", ".", "adj_preprocessed", ".", "dot", "(", "self", ".", "adj_preprocessed", ")", "[", "self", ".", "u", "]", ".", "T", ".", "dot", "(", "self", ".", "W", "[", ":", ",", "label", "]", ".", "T", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.compute_logits": [[117, 128], ["[].toarray", "nettack.Nettack.adj_preprocessed.dot().dot", "nettack.Nettack.X_obs.dot", "nettack.Nettack.adj_preprocessed.dot"], "methods", ["None"], ["\n", "", "def", "compute_logits", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the logits of the surrogate model, i.e. linearized GCN.\n\n        Returns\n        -------\n        np.array, [N, K]\n            The log probabilities for each node.\n\n        \"\"\"", "\n", "return", "self", ".", "adj_preprocessed", ".", "dot", "(", "self", ".", "adj_preprocessed", ")", ".", "dot", "(", "self", ".", "X_obs", ".", "dot", "(", "self", ".", "W", ")", ")", "[", "self", ".", "u", "]", ".", "toarray", "(", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.strongest_wrong_class": [[129, 146], ["numpy.eye"], "methods", ["None"], ["\n", "", "def", "strongest_wrong_class", "(", "self", ",", "logits", ")", ":", "\n", "        ", "\"\"\"\n        Determine the incorrect class with largest logits.\n\n        Parameters\n        ----------\n        logits: np.array, [N, K]\n            The input logits\n\n        Returns\n        -------\n        np.array, [N, L]\n            The indices of the wrong labels with the highest attached log probabilities.\n        \"\"\"", "\n", "\n", "label_u_onehot", "=", "np", ".", "eye", "(", "self", ".", "K", ")", "[", "self", ".", "label_u", "]", "\n", "return", "(", "logits", "-", "1000", "*", "label_u_onehot", ")", ".", "argmax", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.feature_scores": [[147, 173], ["nettack.Nettack.compute_logits", "nettack.Nettack.strongest_wrong_class", "scipy.lil_matrix", "gradients_flipped.multiply.multiply.multiply", "nettack.Nettack.compute_cooccurrence_constraint", "nettack.Nettack.gradient_wrt_x", "nettack.Nettack.gradient_wrt_x", "numpy.array", "numpy.argsort", "nettack.Nettack.X_obs.nonzero", "gradients_flipped.multiply.multiply.nonzero", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.compute_logits", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.strongest_wrong_class", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.compute_cooccurrence_constraint", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.gradient_wrt_x", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.gradient_wrt_x"], ["\n", "", "def", "feature_scores", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute feature scores for all possible feature changes.\n        \"\"\"", "\n", "\n", "if", "self", ".", "cooc_constraint", "is", "None", ":", "\n", "            ", "self", ".", "compute_cooccurrence_constraint", "(", "self", ".", "influencer_nodes", ")", "\n", "", "logits", "=", "self", ".", "compute_logits", "(", ")", "\n", "best_wrong_class", "=", "self", ".", "strongest_wrong_class", "(", "logits", ")", "\n", "gradient", "=", "self", ".", "gradient_wrt_x", "(", "self", ".", "label_u", ")", "-", "self", ".", "gradient_wrt_x", "(", "best_wrong_class", ")", "\n", "surrogate_loss", "=", "logits", "[", "self", ".", "label_u", "]", "-", "logits", "[", "best_wrong_class", "]", "\n", "\n", "gradients_flipped", "=", "(", "gradient", "*", "-", "1", ")", ".", "tolil", "(", ")", "\n", "gradients_flipped", "[", "self", ".", "X_obs", ".", "nonzero", "(", ")", "]", "*=", "-", "1", "\n", "\n", "X_influencers", "=", "sp", ".", "lil_matrix", "(", "self", ".", "X_obs", ".", "shape", ")", "\n", "X_influencers", "[", "self", ".", "influencer_nodes", "]", "=", "self", ".", "X_obs", "[", "self", ".", "influencer_nodes", "]", "\n", "gradients_flipped", "=", "gradients_flipped", ".", "multiply", "(", "(", "self", ".", "cooc_constraint", "+", "X_influencers", ")", ">", "0", ")", "\n", "nnz_ixs", "=", "np", ".", "array", "(", "gradients_flipped", ".", "nonzero", "(", ")", ")", ".", "T", "\n", "nn", ",", "_", "=", "nnz_ixs", ".", "shape", "\n", "if", "nn", "==", "0", ":", "\n", "            ", "_", ",", "feat_dim", "=", "gradients_flipped", ".", "shape", "\n", "rand_ixs", "=", "random", ".", "randint", "(", "0", ",", "feat_dim", "-", "1", ")", "\n", "nnz_ixs", "=", "np", ".", "array", "(", "[", "[", "self", ".", "u", ",", "rand_ixs", "]", "]", ")", "\n", "\n", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.struct_score": [[174, 199], ["a_hat_uv.dot", "numpy.eye"], "methods", ["None"], ["\n", "\n", "sorting", "=", "np", ".", "argsort", "(", "gradients_flipped", "[", "tuple", "(", "nnz_ixs", ".", "T", ")", "]", ")", ".", "A1", "\n", "sorted_ixs", "=", "nnz_ixs", "[", "sorting", "]", "\n", "grads", "=", "gradients_flipped", "[", "tuple", "(", "nnz_ixs", "[", "sorting", "]", ".", "T", ")", "]", "\n", "\n", "scores", "=", "surrogate_loss", "-", "grads", "\n", "return", "sorted_ixs", "[", ":", ":", "-", "1", "]", ",", "scores", ".", "A1", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "def", "struct_score", "(", "self", ",", "a_hat_uv", ",", "XW", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.compute_XW": [[200, 209], ["nettack.Nettack.X_obs.dot"], "methods", ["None"], ["\n", "\n", "logits", "=", "a_hat_uv", ".", "dot", "(", "XW", ")", "\n", "label_onehot", "=", "np", ".", "eye", "(", "XW", ".", "shape", "[", "1", "]", ")", "[", "self", ".", "label_u", "]", "\n", "best_wrong_class_logits", "=", "(", "logits", "-", "1000", "*", "label_onehot", ")", ".", "max", "(", "1", ")", "\n", "logits_for_correct_class", "=", "logits", "[", ":", ",", "self", ".", "label_u", "]", "\n", "struct_scores", "=", "logits_for_correct_class", "-", "best_wrong_class_logits", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.get_attacker_nodes": [[210, 273], ["numpy.column_stack().astype", "nettack.Nettack.compute_new_a_hat_uv", "nettack.Nettack.compute_XW", "nettack.Nettack.adj_no_selfloops[].nonzero", "nettack.Nettack.struct_score", "len", "numpy.column_stack", "numpy.setdiff1d", "len", "numpy.column_stack", "nettack.Nettack.compute_new_a_hat_uv", "nettack.Nettack.struct_score", "numpy.array", "numpy.setdiff1d", "len", "numpy.tile", "numpy.argsort", "numpy.arange", "numpy.tile", "len", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_new_a_hat_uv", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.compute_XW", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.struct_score", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_new_a_hat_uv", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.struct_score"], ["\n", "return", "struct_scores", "\n", "\n", "", "def", "compute_XW", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Shortcut to compute the dot product of X and W\n        Returns\n        -------\n        X.dot(W)\n        \"\"\"", "\n", "\n", "return", "self", ".", "X_obs", ".", "dot", "(", "self", ".", "W", ")", "\n", "\n", "", "def", "get_attacker_nodes", "(", "self", ",", "n", "=", "5", ",", "add_additional_nodes", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Determine the influencer nodes to attack node i based on the weights W and the attributes X.\n\n        Parameters\n        ----------\n        n: int, default: 5\n            The desired number of attacker nodes.\n\n        add_additional_nodes: bool, default: False\n            if True and the degree of node i (d_u) is < n, we select n-d_u additional attackers, which should\n            get connected to u afterwards (outside this function).\n\n        Returns\n        -------\n        np.array, shape [n,]:\n            The indices of the attacker nodes.\n        optional: np.array, shape [n - degree(n)]\n            if additional_nodes is True, we separately\n            return the additional attacker node indices\n\n        \"\"\"", "\n", "\n", "assert", "n", "<", "self", ".", "N", "-", "1", ",", "\"number of influencers cannot be >= number of nodes in the graph!\"", "\n", "\n", "neighbors", "=", "self", ".", "adj_no_selfloops", "[", "self", ".", "u", "]", ".", "nonzero", "(", ")", "[", "1", "]", "\n", "assert", "self", ".", "u", "not", "in", "neighbors", "\n", "\n", "potential_edges", "=", "np", ".", "column_stack", "(", "(", "np", ".", "tile", "(", "self", ".", "u", ",", "len", "(", "neighbors", ")", ")", ",", "neighbors", ")", ")", ".", "astype", "(", "\"int32\"", ")", "\n", "\n", "# The new A_hat_square_uv values that we would get if we removed the edge from u to each of the neighbors,", "\n", "# respectively", "\n", "a_hat_uv", "=", "self", ".", "compute_new_a_hat_uv", "(", "potential_edges", ")", "\n", "\n", "XW", "=", "self", ".", "compute_XW", "(", ")", "\n", "\n", "# compute the struct scores for all neighbors", "\n", "struct_scores", "=", "self", ".", "struct_score", "(", "a_hat_uv", ",", "XW", ")", ".", "A1", "\n", "\n", "if", "len", "(", "neighbors", ")", ">=", "n", ":", "# do we have enough neighbors for the number of desired influencers?", "\n", "            ", "influencer_nodes", "=", "neighbors", "[", "np", ".", "argsort", "(", "struct_scores", ")", "[", ":", "n", "]", "]", "\n", "if", "add_additional_nodes", ":", "\n", "                ", "return", "influencer_nodes", ",", "np", ".", "array", "(", "[", "]", ")", "\n", "", "return", "influencer_nodes", "\n", "", "else", ":", "\n", "            ", "influencer_nodes", "=", "neighbors", "\n", "if", "add_additional_nodes", ":", "# Add additional influencers by connecting them to u first.", "\n", "# Compute the set of possible additional influencers, i.e. all nodes except the ones", "\n", "# that are already connected to u.", "\n", "                ", "poss_add_infl", "=", "np", ".", "setdiff1d", "(", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "N", ")", ",", "neighbors", ")", ",", "self", ".", "u", ")", "\n", "n_possible_additional", "=", "len", "(", "poss_add_infl", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.compute_new_a_hat_uv": [[274, 303], ["nettack.Nettack.compute_new_a_hat_uv"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_new_a_hat_uv"], ["n_additional_attackers", "=", "n", "-", "len", "(", "neighbors", ")", "\n", "possible_edges", "=", "np", ".", "column_stack", "(", "(", "np", ".", "tile", "(", "self", ".", "u", ",", "n_possible_additional", ")", ",", "poss_add_infl", ")", ")", "\n", "\n", "# Compute the struct_scores for all possible additional influencers, and choose the one", "\n", "# with the best struct score.", "\n", "a_hat_uv_additional", "=", "self", ".", "compute_new_a_hat_uv", "(", "possible_edges", ")", "\n", "additional_struct_scores", "=", "self", ".", "struct_score", "(", "a_hat_uv_additional", ",", "XW", ")", "\n", "additional_influencers", "=", "poss_add_infl", "[", "np", ".", "argsort", "(", "additional_struct_scores", ")", "[", "-", "n_additional_attackers", ":", ":", "]", "]", "\n", "\n", "return", "influencer_nodes", ",", "additional_influencers", "\n", "", "else", ":", "\n", "                ", "return", "influencer_nodes", "\n", "\n", "", "", "", "def", "compute_new_a_hat_uv", "(", "self", ",", "potential_edges", ")", ":", "\n", "        ", "\"\"\"\n        Compute the updated A_hat_square_uv entries that would result from inserting/deleting the input edges,\n        for every edge.\n\n        Parameters\n        ----------\n        potential_edges: np.array, shape [P,2], dtype int\n            The edges to check.\n\n        Returns\n        -------\n        sp.sparse_matrix: updated A_hat_square_u entries, a sparse PxN matrix, where P is len(possible_edges).\n        \"\"\"", "\n", "\n", "edges", "=", "np", ".", "array", "(", "self", ".", "adj", ".", "nonzero", "(", ")", ")", ".", "T", "\n", "edges_set", "=", "{", "tuple", "(", "x", ")", "for", "x", "in", "edges", "}", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.attack_surrogate": [[304, 466], ["nettack.Nettack.compute_logits", "nettack.Nettack.strongest_wrong_class", "nettack.Nettack.potential_edges.astype", "range", "print", "print", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "nettack.compute_alpha", "nettack.compute_log_likelihood", "len", "print", "print", "print", "nettack.Nettack.adj_orig.sum", "nettack.Nettack.adj.sum", "numpy.log", "numpy.log", "nettack.Nettack.get_attacker_nodes", "numpy.concatenate().astype", "numpy.row_stack", "numpy.column_stack", "numpy.array", "print", "nettack.filter_singletons", "nettack.update_Sx", "nettack.compute_alpha", "nettack.compute_log_likelihood", "nettack.compute_alpha", "nettack.compute_log_likelihood", "nettack.filter_chisquare", "nettack.Nettack.compute_new_a_hat_uv", "nettack.Nettack.struct_score", "nettack.Nettack.argmin", "nettack.Nettack.min", "nettack.Nettack.feature_scores", "nettack.utils.preprocess_graph", "nettack.Nettack.structure_perturbations.append", "nettack.Nettack.feature_perturbations.append", "surrogate_losses.append", "nettack.Nettack.feature_perturbations.append", "nettack.Nettack.structure_perturbations.append", "surrogate_losses.append", "print", "print", "nettack.Nettack.compute_XW", "tuple", "tuple", "print", "numpy.concatenate", "numpy.column_stack", "numpy.tile", "numpy.setdiff1d", "print", "print", "tuple", "tuple", "tuple", "numpy.arange", "tuple", "tuple", "numpy.tile", "numpy.setdiff1d", "nettack.Nettack.adj[].toarray", "numpy.arange", "numpy.array", "tuple"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.compute_logits", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.strongest_wrong_class", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_alpha", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_log_likelihood", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.get_attacker_nodes", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.filter_singletons", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.update_Sx", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_alpha", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_log_likelihood", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_alpha", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_log_likelihood", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.filter_chisquare", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_new_a_hat_uv", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.struct_score", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.feature_scores", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.utils.preprocess_graph", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.compute_XW"], ["A_hat_sq", "=", "self", ".", "adj_preprocessed", "@", "self", ".", "adj_preprocessed", "\n", "values_before", "=", "A_hat_sq", "[", "self", ".", "u", "]", ".", "toarray", "(", ")", "[", "0", "]", "\n", "node_ixs", "=", "np", ".", "unique", "(", "edges", "[", ":", ",", "0", "]", ",", "return_index", "=", "True", ")", "[", "1", "]", "\n", "twohop_ixs", "=", "np", ".", "array", "(", "A_hat_sq", ".", "nonzero", "(", ")", ")", ".", "T", "\n", "degrees", "=", "self", ".", "adj", ".", "sum", "(", "0", ")", ".", "A1", "+", "1", "\n", "ixs", ",", "vals", "=", "compute_new_a_hat_uv", "(", "edges", ",", "node_ixs", ",", "edges_set", ",", "twohop_ixs", ",", "values_before", ",", "degrees", ",", "\n", "potential_edges", ",", "self", ".", "u", ")", "\n", "# print(\"dim of ixs \",ixs.shape)", "\n", "ixs_arr", "=", "np", ".", "array", "(", "ixs", ")", "\n", "print", "(", "\"dim of ixs_arr \"", ",", "ixs_arr", ".", "shape", ")", "\n", "a_hat_uv", "=", "sp", ".", "coo_matrix", "(", "(", "vals", ",", "(", "ixs_arr", "[", ":", ",", "0", "]", ",", "ixs_arr", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "[", "len", "(", "potential_edges", ")", ",", "self", ".", "N", "]", ")", "\n", "\n", "return", "a_hat_uv", "\n", "\n", "", "def", "attack_surrogate", "(", "self", ",", "n_perturbations", ",", "perturb_structure", "=", "True", ",", "perturb_features", "=", "True", ",", "\n", "direct", "=", "True", ",", "n_influencers", "=", "0", ",", "delta_cutoff", "=", "0.004", ")", ":", "\n", "        ", "\"\"\"\n        Perform an attack on the surrogate model.\n\n        Parameters\n        ----------\n        n_perturbations: int\n            The number of perturbations (structure or feature) to perform.\n\n        perturb_structure: bool, default: True\n            Indicates whether the structure can be changed.\n\n        perturb_features: bool, default: True\n            Indicates whether the features can be changed.\n\n        direct: bool, default: True\n            indicates whether to directly modify edges/features of the node attacked or only those of influencers.\n\n        n_influencers: int, default: 0\n            Number of influencing nodes -- will be ignored if direct is True\n\n        delta_cutoff: float\n            The critical value for the likelihood ratio test of the power law distributions.\n             See the Chi square distribution with one degree of freedom. Default value 0.004\n             corresponds to a p-value of roughly 0.95.\n\n        Returns\n        -------\n        None.\n\n        \"\"\"", "\n", "\n", "assert", "not", "(", "direct", "==", "False", "and", "n_influencers", "==", "0", ")", ",", "\"indirect mode requires at least one influencer node\"", "\n", "assert", "n_perturbations", ">", "0", ",", "\"need at least one perturbation\"", "\n", "assert", "perturb_features", "or", "perturb_structure", ",", "\"either perturb_features or perturb_structure must be true\"", "\n", "\n", "logits_start", "=", "self", ".", "compute_logits", "(", ")", "\n", "best_wrong_class", "=", "self", ".", "strongest_wrong_class", "(", "logits_start", ")", "\n", "surrogate_losses", "=", "[", "logits_start", "[", "self", ".", "label_u", "]", "-", "logits_start", "[", "best_wrong_class", "]", "]", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"##### Starting attack #####\"", ")", "\n", "if", "perturb_structure", "and", "perturb_features", ":", "\n", "                ", "print", "(", "\"##### Attack node with ID {} using structure and feature perturbations #####\"", ".", "format", "(", "self", ".", "u", ")", ")", "\n", "", "elif", "perturb_features", ":", "\n", "                ", "print", "(", "\"##### Attack only using feature perturbations #####\"", ")", "\n", "", "elif", "perturb_structure", ":", "\n", "                ", "print", "(", "\"##### Attack only using structure perturbations #####\"", ")", "\n", "", "if", "direct", ":", "\n", "                ", "print", "(", "\"##### Attacking the node directly #####\"", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"##### Attacking the node indirectly via {} influencer nodes #####\"", ".", "format", "(", "n_influencers", ")", ")", "\n", "", "print", "(", "\"##### Performing {} perturbations #####\"", ".", "format", "(", "n_perturbations", ")", ")", "\n", "\n", "", "if", "perturb_structure", ":", "\n", "\n", "# Setup starting values of the likelihood ratio test.", "\n", "            ", "degree_sequence_start", "=", "self", ".", "adj_orig", ".", "sum", "(", "0", ")", ".", "A1", "\n", "current_degree_sequence", "=", "self", ".", "adj", ".", "sum", "(", "0", ")", ".", "A1", "\n", "d_min", "=", "2", "\n", "S_d_start", "=", "np", ".", "sum", "(", "np", ".", "log", "(", "degree_sequence_start", "[", "degree_sequence_start", ">=", "d_min", "]", ")", ")", "\n", "current_S_d", "=", "np", ".", "sum", "(", "np", ".", "log", "(", "current_degree_sequence", "[", "current_degree_sequence", ">=", "d_min", "]", ")", ")", "\n", "n_start", "=", "np", ".", "sum", "(", "degree_sequence_start", ">=", "d_min", ")", "\n", "current_n", "=", "np", ".", "sum", "(", "current_degree_sequence", ">=", "d_min", ")", "\n", "alpha_start", "=", "compute_alpha", "(", "n_start", ",", "S_d_start", ",", "d_min", ")", "\n", "log_likelihood_orig", "=", "compute_log_likelihood", "(", "n_start", ",", "alpha_start", ",", "S_d_start", ",", "d_min", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "influencer_nodes", ")", "==", "0", ":", "\n", "            ", "if", "not", "direct", ":", "\n", "# Choose influencer nodes", "\n", "                ", "infls", ",", "add_infls", "=", "self", ".", "get_attacker_nodes", "(", "n_influencers", ",", "add_additional_nodes", "=", "True", ")", "\n", "self", ".", "influencer_nodes", "=", "np", ".", "concatenate", "(", "(", "infls", ",", "add_infls", ")", ")", ".", "astype", "(", "\"int\"", ")", "\n", "# Potential edges are all edges from any attacker to any other node, except the respective", "\n", "# attacker itself or the node being attacked.", "\n", "self", ".", "potential_edges", "=", "np", ".", "row_stack", "(", "[", "np", ".", "column_stack", "(", "(", "np", ".", "tile", "(", "infl", ",", "self", ".", "N", "-", "2", ")", ",", "\n", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "N", ")", ",", "\n", "np", ".", "array", "(", "[", "self", ".", "u", ",", "infl", "]", ")", ")", ")", ")", "for", "infl", "in", "\n", "self", ".", "influencer_nodes", "]", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "\"Influencer nodes: {}\"", ".", "format", "(", "self", ".", "influencer_nodes", ")", ")", "\n", "", "", "else", ":", "\n", "# direct attack", "\n", "                ", "influencers", "=", "[", "self", ".", "u", "]", "\n", "self", ".", "potential_edges", "=", "np", ".", "column_stack", "(", "(", "np", ".", "tile", "(", "self", ".", "u", ",", "self", ".", "N", "-", "1", ")", ",", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "N", ")", ",", "self", ".", "u", ")", ")", ")", "\n", "self", ".", "influencer_nodes", "=", "np", ".", "array", "(", "influencers", ")", "\n", "", "", "self", ".", "potential_edges", "=", "self", ".", "potential_edges", ".", "astype", "(", "\"int32\"", ")", "\n", "# print(\"self.potential_edges\")", "\n", "# print(\"self.potential_edges\",len(self.potential_edges))", "\n", "# print(self.potential_edges)", "\n", "for", "_", "in", "range", "(", "n_perturbations", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"##### ...{}/{} perturbations ... #####\"", ".", "format", "(", "_", "+", "1", ",", "n_perturbations", ")", ")", "\n", "", "if", "perturb_structure", ":", "\n", "\n", "# Do not consider edges that, if removed, result in singleton edges in the graph.", "\n", "                ", "singleton_filter", "=", "filter_singletons", "(", "self", ".", "potential_edges", ",", "self", ".", "adj", ")", "\n", "filtered_edges", "=", "self", ".", "potential_edges", "[", "singleton_filter", "]", "\n", "\n", "# Update the values for the power law likelihood ratio test.", "\n", "deltas", "=", "2", "*", "(", "1", "-", "self", ".", "adj", "[", "tuple", "(", "filtered_edges", ".", "T", ")", "]", ".", "toarray", "(", ")", "[", "0", "]", ")", "-", "1", "\n", "d_edges_old", "=", "current_degree_sequence", "[", "filtered_edges", "]", "\n", "d_edges_new", "=", "current_degree_sequence", "[", "filtered_edges", "]", "+", "deltas", "[", ":", ",", "None", "]", "\n", "new_S_d", ",", "new_n", "=", "update_Sx", "(", "current_S_d", ",", "current_n", ",", "d_edges_old", ",", "d_edges_new", ",", "d_min", ")", "\n", "new_alphas", "=", "compute_alpha", "(", "new_n", ",", "new_S_d", ",", "d_min", ")", "\n", "new_ll", "=", "compute_log_likelihood", "(", "new_n", ",", "new_alphas", ",", "new_S_d", ",", "d_min", ")", "\n", "alphas_combined", "=", "compute_alpha", "(", "new_n", "+", "n_start", ",", "new_S_d", "+", "S_d_start", ",", "d_min", ")", "\n", "new_ll_combined", "=", "compute_log_likelihood", "(", "new_n", "+", "n_start", ",", "alphas_combined", ",", "new_S_d", "+", "S_d_start", ",", "d_min", ")", "\n", "new_ratios", "=", "-", "2", "*", "new_ll_combined", "+", "2", "*", "(", "new_ll", "+", "log_likelihood_orig", ")", "\n", "\n", "# Do not consider edges that, if added/removed, would lead to a violation of the", "\n", "# likelihood ration Chi_square cutoff value.", "\n", "powerlaw_filter", "=", "filter_chisquare", "(", "new_ratios", ",", "delta_cutoff", ")", "\n", "filtered_edges_final", "=", "filtered_edges", "[", "powerlaw_filter", "]", "\n", "\n", "# Compute new entries in A_hat_square_uv", "\n", "# print(\"filtered_edges_final\")", "\n", "# print(\"length of filtered_edges_final\",len(filtered_edges_final))", "\n", "# print(filtered_edges_final)", "\n", "if", "len", "(", "filtered_edges_final", ")", "==", "0", ":", "\n", "                    ", "best_edge_score", "=", "float", "(", "'inf'", ")", "\n", "", "else", ":", "\n", "                    ", "a_hat_uv_new", "=", "self", ".", "compute_new_a_hat_uv", "(", "filtered_edges_final", ")", "\n", "# Compute the struct scores for each potential edge", "\n", "struct_scores", "=", "self", ".", "struct_score", "(", "a_hat_uv_new", ",", "self", ".", "compute_XW", "(", ")", ")", "\n", "best_edge_ix", "=", "struct_scores", ".", "argmin", "(", ")", "\n", "best_edge_score", "=", "struct_scores", ".", "min", "(", ")", "\n", "best_edge", "=", "filtered_edges_final", "[", "best_edge_ix", "]", "\n", "\n", "", "", "if", "perturb_features", ":", "\n", "# Compute the feature scores for each potential feature perturbation", "\n", "                ", "feature_ixs", ",", "feature_scores", "=", "self", ".", "feature_scores", "(", ")", "\n", "best_feature_ix", "=", "feature_ixs", "[", "0", "]", "\n", "best_feature_score", "=", "feature_scores", "[", "0", "]", "\n", "\n", "", "if", "perturb_structure", "and", "perturb_features", ":", "\n", "# decide whether to choose an edge or feature to change", "\n", "                ", "if", "best_edge_score", "<", "best_feature_score", ":", "\n", "                    ", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "\"Edge perturbation: {}\"", ".", "format", "(", "best_edge", ")", ")", "\n", "# print(best_edge_score)", "\n", "# print(best_feature_score)", "\n", "", "change_structure", "=", "True", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "\"Feature perturbation: {}\"", ".", "format", "(", "best_feature_ix", ")", ")", "\n", "", "change_structure", "=", "False", "\n", "", "", "elif", "perturb_structure", ":", "\n", "# print(best_edge_score)", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.Nettack.reset": [[467, 478], ["nettack.Nettack.adj_orig.copy", "nettack.Nettack.X_obs_orig.copy"], "methods", ["None"], ["# print(best_feature_score)", "\n", "                ", "change_structure", "=", "True", "\n", "", "elif", "perturb_features", ":", "\n", "                ", "change_structure", "=", "False", "\n", "\n", "", "if", "change_structure", ":", "\n", "# perform edge perturbation", "\n", "\n", "                ", "self", ".", "adj", "[", "tuple", "(", "best_edge", ")", "]", "=", "self", ".", "adj", "[", "tuple", "(", "best_edge", "[", ":", ":", "-", "1", "]", ")", "]", "=", "1", "-", "self", ".", "adj", "[", "tuple", "(", "best_edge", ")", "]", "\n", "self", ".", "adj_preprocessed", "=", "utils", ".", "preprocess_graph", "(", "self", ".", "adj", ")", "\n", "\n", "self", ".", "structure_perturbations", ".", "append", "(", "tuple", "(", "best_edge", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.connected_after": [[480, 489], ["numba.jit"], "function", ["None"], ["surrogate_losses", ".", "append", "(", "best_edge_score", ")", "\n", "\n", "# Update likelihood ratio test values", "\n", "current_S_d", "=", "new_S_d", "[", "powerlaw_filter", "]", "[", "best_edge_ix", "]", "\n", "current_n", "=", "new_n", "[", "powerlaw_filter", "]", "[", "best_edge_ix", "]", "\n", "current_degree_sequence", "[", "best_edge", "]", "+=", "deltas", "[", "powerlaw_filter", "]", "[", "best_edge_ix", "]", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "X_obs", "[", "tuple", "(", "best_feature_ix", ")", "]", "=", "1", "-", "self", ".", "X_obs", "[", "tuple", "(", "best_feature_ix", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_new_a_hat_uv": [[490, 586], ["numba.jit", "set", "range", "len", "set", "degs.copy", "set", "affected_nodes.union.union", "nettack.connected_after", "nettack.connected_after", "numpy.concatenate", "set", "nettack.connected_after", "nettack.connected_after", "return_ixs.append", "return_values.append", "len", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.connected_after", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.connected_after", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.connected_after", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.connected_after"], ["self", ".", "feature_perturbations", ".", "append", "(", "tuple", "(", "best_feature_ix", ")", ")", "\n", "self", ".", "structure_perturbations", ".", "append", "(", "(", ")", ")", "\n", "surrogate_losses", ".", "append", "(", "best_feature_score", ")", "\n", "\n", "", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset Nettack\n        \"\"\"", "\n", "self", ".", "adj", "=", "self", ".", "adj_orig", ".", "copy", "(", ")", "\n", "self", ".", "X_obs", "=", "self", ".", "X_obs_orig", ".", "copy", "(", ")", "\n", "self", ".", "structure_perturbations", "=", "[", "]", "\n", "self", ".", "feature_perturbations", "=", "[", "]", "\n", "self", ".", "influencer_nodes", "=", "[", "]", "\n", "self", ".", "potential_edges", "=", "[", "]", "\n", "self", ".", "cooc_constraint", "=", "None", "\n", "\n", "\n", "", "", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "connected_after", "(", "u", ",", "v", ",", "connected_before", ",", "delta", ")", ":", "\n", "    ", "if", "u", "==", "v", ":", "\n", "        ", "if", "delta", "==", "-", "1", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "", "", "else", ":", "\n", "        ", "return", "connected_before", "\n", "\n", "", "", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "compute_new_a_hat_uv", "(", "edge_ixs", ",", "node_nb_ixs", ",", "edges_set", ",", "twohop_ixs", ",", "values_before", ",", "degs", ",", "potential_edges", ",", "u", ")", ":", "\n", "    ", "\"\"\"\n    Compute the new values [A_hat_square]_u for every potential edge, where u is the target node. C.f. Theorem 5.1\n    equation 17.\n\n    Parameters\n    ----------\n    edge_ixs: np.array, shape [E,2], where E is the number of edges in the graph.\n        The indices of the nodes connected by the edges in the input graph.\n    node_nb_ixs: np.array, shape [N,], dtype int\n        For each node, this gives the first index of edges associated to this node in the edge array (edge_ixs).\n        This will be used to quickly look up the neighbors of a node, since numba does not allow nested lists.\n    edges_set: set((e0, e1))\n        The set of edges in the input graph, i.e. e0 and e1 are two nodes connected by an edge\n    twohop_ixs: np.array, shape [T, 2], where T is the number of edges in A_tilde^2\n        The indices of nodes that are in the twohop neighborhood of each other, including self-loops.\n    values_before: np.array, shape [N,], the values in [A_hat]^2_uv to be updated.\n    degs: np.array, shape [N,], dtype int\n        The degree of the nodes in the input graph.\n    potential_edges: np.array, shape [P, 2], where P is the number of potential edges.\n        The potential edges to be evaluated. For each of these potential edges, this function will compute the values\n        in [A_hat]^2_uv that would result after inserting/removing this edge.\n    u: int\n        The target node\n\n    Returns\n    -------\n    return_ixs: List of tuples\n        The ixs in the [P, N] matrix of updated values that have changed\n    return_values:\n\n    \"\"\"", "\n", "N", "=", "degs", ".", "shape", "[", "0", "]", "\n", "\n", "twohop_u", "=", "twohop_ixs", "[", "twohop_ixs", "[", ":", ",", "0", "]", "==", "u", ",", "1", "]", "\n", "nbs_u", "=", "edge_ixs", "[", "edge_ixs", "[", ":", ",", "0", "]", "==", "u", ",", "1", "]", "\n", "nbs_u_set", "=", "set", "(", "nbs_u", ")", "\n", "\n", "return_ixs", "=", "[", "]", "\n", "return_values", "=", "[", "]", "\n", "\n", "for", "ix", "in", "range", "(", "len", "(", "potential_edges", ")", ")", ":", "\n", "        ", "edge", "=", "potential_edges", "[", "ix", "]", "\n", "edge_set", "=", "set", "(", "edge", ")", "\n", "degs_new", "=", "degs", ".", "copy", "(", ")", "\n", "delta", "=", "-", "2", "*", "(", "(", "edge", "[", "0", "]", ",", "edge", "[", "1", "]", ")", "in", "edges_set", ")", "+", "1", "\n", "degs_new", "[", "edge", "]", "+=", "delta", "\n", "\n", "nbs_edge0", "=", "edge_ixs", "[", "edge_ixs", "[", ":", ",", "0", "]", "==", "edge", "[", "0", "]", ",", "1", "]", "\n", "nbs_edge1", "=", "edge_ixs", "[", "edge_ixs", "[", ":", ",", "0", "]", "==", "edge", "[", "1", "]", ",", "1", "]", "\n", "\n", "affected_nodes", "=", "set", "(", "np", ".", "concatenate", "(", "(", "twohop_u", ",", "nbs_edge0", ",", "nbs_edge1", ")", ")", ")", "\n", "affected_nodes", "=", "affected_nodes", ".", "union", "(", "edge_set", ")", "\n", "a_um", "=", "edge", "[", "0", "]", "in", "nbs_u_set", "\n", "a_un", "=", "edge", "[", "1", "]", "in", "nbs_u_set", "\n", "\n", "a_un_after", "=", "connected_after", "(", "u", ",", "edge", "[", "0", "]", ",", "a_un", ",", "delta", ")", "\n", "a_um_after", "=", "connected_after", "(", "u", ",", "edge", "[", "1", "]", ",", "a_um", ",", "delta", ")", "\n", "\n", "for", "v", "in", "affected_nodes", ":", "\n", "            ", "a_uv_before", "=", "v", "in", "nbs_u_set", "\n", "a_uv_before_sl", "=", "a_uv_before", "or", "v", "==", "u", "\n", "\n", "if", "v", "in", "edge_set", "and", "u", "in", "edge_set", "and", "u", "!=", "v", ":", "\n", "                ", "if", "delta", "==", "-", "1", ":", "\n", "                    ", "a_uv_after", "=", "False", "\n", "", "else", ":", "\n", "                    ", "a_uv_after", "=", "True", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_alpha": [[587, 609], ["numpy.log"], "function", ["None"], ["                ", "a_uv_after", "=", "a_uv_before", "\n", "", "a_uv_after_sl", "=", "a_uv_after", "or", "v", "==", "u", "\n", "\n", "from_ix", "=", "node_nb_ixs", "[", "v", "]", "\n", "to_ix", "=", "node_nb_ixs", "[", "v", "+", "1", "]", "if", "v", "<", "N", "-", "1", "else", "len", "(", "edge_ixs", ")", "\n", "node_nbs", "=", "edge_ixs", "[", "from_ix", ":", "to_ix", ",", "1", "]", "\n", "node_nbs_set", "=", "set", "(", "node_nbs", ")", "\n", "a_vm_before", "=", "edge", "[", "0", "]", "in", "node_nbs_set", "\n", "\n", "a_vn_before", "=", "edge", "[", "1", "]", "in", "node_nbs_set", "\n", "a_vn_after", "=", "connected_after", "(", "v", ",", "edge", "[", "0", "]", ",", "a_vn_before", ",", "delta", ")", "\n", "a_vm_after", "=", "connected_after", "(", "v", ",", "edge", "[", "1", "]", ",", "a_vm_before", ",", "delta", ")", "\n", "\n", "mult_term", "=", "1", "/", "np", ".", "sqrt", "(", "degs_new", "[", "u", "]", "*", "degs_new", "[", "v", "]", ")", "\n", "\n", "sum_term1", "=", "np", ".", "sqrt", "(", "degs", "[", "u", "]", "*", "degs", "[", "v", "]", ")", "*", "values_before", "[", "v", "]", "-", "a_uv_before_sl", "/", "degs", "[", "u", "]", "-", "a_uv_before", "/", "degs", "[", "v", "]", "\n", "sum_term2", "=", "a_uv_after", "/", "degs_new", "[", "v", "]", "+", "a_uv_after_sl", "/", "degs_new", "[", "u", "]", "\n", "sum_term3", "=", "-", "(", "(", "a_um", "and", "a_vm_before", ")", "/", "degs", "[", "edge", "[", "0", "]", "]", ")", "+", "(", "a_um_after", "and", "a_vm_after", ")", "/", "degs_new", "[", "edge", "[", "0", "]", "]", "\n", "sum_term4", "=", "-", "(", "(", "a_un", "and", "a_vn_before", ")", "/", "degs", "[", "edge", "[", "1", "]", "]", ")", "+", "(", "a_un_after", "and", "a_vn_after", ")", "/", "degs_new", "[", "edge", "[", "1", "]", "]", "\n", "new_val", "=", "mult_term", "*", "(", "sum_term1", "+", "sum_term2", "+", "sum_term3", "+", "sum_term4", ")", "\n", "\n", "return_ixs", ".", "append", "(", "(", "ix", ",", "v", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.update_Sx": [[611, 649], ["numpy.multiply", "numpy.multiply", "numpy.log().sum", "numpy.sum", "numpy.log().sum", "numpy.sum", "numpy.log", "numpy.log", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["\n", "", "", "return", "return_ixs", ",", "return_values", "\n", "\n", "", "def", "compute_alpha", "(", "n", ",", "S_d", ",", "d_min", ")", ":", "\n", "    ", "\"\"\"\n    Approximate the alpha of a power law distribution.\n\n    Parameters\n    ----------\n    n: int or np.array of int\n        Number of entries that are larger than or equal to d_min\n\n    S_d: float or np.array of float\n         Sum of log degrees in the distribution that are larger than or equal to d_min\n\n    d_min: int\n        The minimum degree of nodes to consider\n\n    Returns\n    -------\n    alpha: float\n        The estimated alpha of the power law distribution\n    \"\"\"", "\n", "\n", "return", "n", "/", "(", "S_d", "-", "n", "*", "np", ".", "log", "(", "d_min", "-", "0.5", ")", ")", "+", "1", "\n", "\n", "\n", "", "def", "update_Sx", "(", "S_old", ",", "n_old", ",", "d_old", ",", "d_new", ",", "d_min", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.compute_log_likelihood": [[651, 675], ["numpy.log", "numpy.log"], "function", ["None"], ["\n", "\n", "old_in_range", "=", "d_old", ">=", "d_min", "\n", "new_in_range", "=", "d_new", ">=", "d_min", "\n", "\n", "d_old_in_range", "=", "np", ".", "multiply", "(", "d_old", ",", "old_in_range", ")", "\n", "d_new_in_range", "=", "np", ".", "multiply", "(", "d_new", ",", "new_in_range", ")", "\n", "\n", "new_S_d", "=", "S_old", "-", "np", ".", "log", "(", "np", ".", "maximum", "(", "d_old_in_range", ",", "1", ")", ")", ".", "sum", "(", "1", ")", "+", "np", ".", "log", "(", "np", ".", "maximum", "(", "d_new_in_range", ",", "1", ")", ")", ".", "sum", "(", "1", ")", "\n", "new_n", "=", "n_old", "-", "np", ".", "sum", "(", "old_in_range", ",", "1", ")", "+", "np", ".", "sum", "(", "new_in_range", ",", "1", ")", "\n", "\n", "return", "new_S_d", ",", "new_n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.filter_singletons": [[676, 706], ["numpy.squeeze", "numpy.squeeze", "zeros.sum", "numpy.array", "numpy.array", "numpy.sum", "adj.tocsr", "tuple", "numpy.array", "numpy.array"], "function", ["None"], ["\n", "\n", "", "def", "compute_log_likelihood", "(", "n", ",", "alpha", ",", "S_d", ",", "d_min", ")", ":", "\n", "    ", "\"\"\"\n    Compute log likelihood of the powerlaw fit.\n\n    Parameters\n    ----------\n    n: int\n        Number of entries in the old distribution that are larger than or equal to d_min.\n\n    alpha: float\n        The estimated alpha of the power law distribution\n\n    S_d: float\n         Sum of log degrees in the distribution that are larger than or equal to d_min.\n\n    d_min: int\n        The minimum degree of nodes to consider\n\n    Returns\n    -------\n    float: the estimated log likelihood\n    \"\"\"", "\n", "\n", "return", "n", "*", "np", ".", "log", "(", "alpha", ")", "+", "n", "*", "alpha", "*", "np", ".", "log", "(", "d_min", ")", "+", "(", "alpha", "+", "1", ")", "*", "S_d", "\n", "\n", "", "def", "filter_singletons", "(", "edges", ",", "adj", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.nettack.filter_chisquare": [[707, 709], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.__init__": [[18, 143], ["tensorflow.Graph", "tensorflow.set_random_seed", "An.tocsr.tocsr.tocsr", "GCN.GCN.graph.as_default", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.SparseTensor", "tensorflow.cast", "tensorflow.SparseTensor", "GCN.sparse_dropout", "tensorflow.contrib.slim.variable", "tensorflow.contrib.slim.variable", "spdot", "tensorflow.nn.dropout", "tensorflow.contrib.slim.variable", "tensorflow.contrib.slim.variable", "spdot", "tensorflow.gather", "tensorflow.nn.softmax", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.get_collection", "tensorflow.variables_initializer", "tensorflow.InteractiveSession", "tensorflow.global_variables_initializer", "GCN.GCN.session.run", "tensorflow.cond", "spdot", "tensorflow.nn.relu", "tensorflow.cond", "dot", "var_l.extend", "tensorflow.ConfigProto", "tensorflow.GPUOptions", "tensorflow.ConfigProto", "numpy.array", "numpy.array", "int", "w_init", "tensorflow.zeros", "w_init", "tensorflow.zeros", "tensorflow.add_n", "tensorflow.train.AdamOptimizer", "An.tocsr.tocsr.nonzero", "X_obs.nonzero", "An.tocsr.tocsr.nonzero", "X_obs.nonzero", "GCN.GCN.X_sparse.values.get_shape", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.sparse_dropout", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.run"], ["    ", "def", "__init__", "(", "self", ",", "sizes", ",", "An", ",", "X_obs", ",", "name", "=", "\"\"", ",", "with_relu", "=", "True", ",", "params_dict", "=", "{", "'dropout'", ":", "0.5", "}", ",", "gpu_id", "=", "0", ",", "\n", "seed", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n        Create a Graph Convolutional Network model in Tensorflow with one hidden layer.\n\n        Parameters\n        ----------\n        sizes: list\n            List containing the hidden and output sizes (i.e. number of classes). E.g. [16, 7]\n\n        An: sp.sparse_matrix, shape [N,N]\n            The input adjacency matrix preprocessed using the procedure described in the GCN paper.\n\n        X_obs: sp.sparse_matrix, shape [N,D]\n            The node features.\n\n        name: string, default: \"\"\n            Name of the network.\n\n        with_relu: bool, default: True\n            Whether there a nonlinear activation function (ReLU) is used. If False, there will also be\n            no bias terms, no regularization and no dropout.\n\n        params_dict: dict\n            Dictionary containing other model parameters.\n\n        gpu_id: int or None, default: 0\n            The GPU ID to be used by Tensorflow. If None, CPU will be used\n\n        seed: int, defualt: -1\n            Random initialization for reproducibility. Will be ignored if it is -1.\n        \"\"\"", "\n", "\n", "self", ".", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "if", "seed", ">", "-", "1", ":", "\n", "            ", "tf", ".", "set_random_seed", "(", "seed", ")", "\n", "\n", "", "if", "An", ".", "format", "!=", "\"csr\"", ":", "\n", "            ", "An", "=", "An", ".", "tocsr", "(", ")", "\n", "\n", "", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "                ", "w_init", "=", "slim", ".", "xavier_initializer", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "n_classes", "=", "sizes", "[", "1", "]", "\n", "\n", "self", ".", "dropout", "=", "params_dict", "[", "'dropout'", "]", "if", "'dropout'", "in", "params_dict", "else", "0.", "\n", "if", "not", "with_relu", ":", "\n", "                    ", "self", ".", "dropout", "=", "0", "\n", "\n", "", "self", ".", "learning_rate", "=", "params_dict", "[", "'learning_rate'", "]", "if", "'learning_rate'", "in", "params_dict", "else", "0.01", "\n", "\n", "self", ".", "weight_decay", "=", "params_dict", "[", "'weight_decay'", "]", "if", "'weight_decay'", "in", "params_dict", "else", "5e-4", "\n", "self", ".", "N", ",", "self", ".", "D", "=", "X_obs", ".", "shape", "\n", "\n", "self", ".", "node_ids", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "'node_ids'", ")", "\n", "self", ".", "node_labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "sizes", "[", "1", "]", "]", ",", "'node_labels'", ")", "\n", "\n", "# bool placeholder to turn on dropout during training", "\n", "self", ".", "training", "=", "tf", ".", "placeholder_with_default", "(", "False", ",", "shape", "=", "(", ")", ")", "\n", "\n", "self", ".", "An", "=", "tf", ".", "SparseTensor", "(", "np", ".", "array", "(", "An", ".", "nonzero", "(", ")", ")", ".", "T", ",", "An", "[", "An", ".", "nonzero", "(", ")", "]", ".", "A1", ",", "An", ".", "shape", ")", "\n", "self", ".", "An", "=", "tf", ".", "cast", "(", "self", ".", "An", ",", "tf", ".", "float32", ")", "\n", "self", ".", "X_sparse", "=", "tf", ".", "SparseTensor", "(", "np", ".", "array", "(", "X_obs", ".", "nonzero", "(", ")", ")", ".", "T", ",", "X_obs", "[", "X_obs", ".", "nonzero", "(", ")", "]", ".", "A1", ",", "X_obs", ".", "shape", ")", "\n", "self", ".", "X_dropout", "=", "sparse_dropout", "(", "self", ".", "X_sparse", ",", "1", "-", "self", ".", "dropout", ",", "\n", "(", "int", "(", "self", ".", "X_sparse", ".", "values", ".", "get_shape", "(", ")", "[", "0", "]", ")", ",", ")", ")", "\n", "# only use drop-out during training", "\n", "self", ".", "X_comp", "=", "tf", ".", "cond", "(", "self", ".", "training", ",", "\n", "lambda", ":", "self", ".", "X_dropout", ",", "\n", "lambda", ":", "self", ".", "X_sparse", ")", "if", "self", ".", "dropout", ">", "0.", "else", "self", ".", "X_sparse", "\n", "\n", "self", ".", "W1", "=", "slim", ".", "variable", "(", "'W1'", ",", "[", "self", ".", "D", ",", "sizes", "[", "0", "]", "]", ",", "tf", ".", "float32", ",", "initializer", "=", "w_init", "(", ")", ")", "\n", "self", ".", "b1", "=", "slim", ".", "variable", "(", "'b1'", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "zeros", "(", "sizes", "[", "0", "]", ")", ")", "\n", "\n", "self", ".", "h1", "=", "spdot", "(", "self", ".", "An", ",", "spdot", "(", "self", ".", "X_comp", ",", "self", ".", "W1", ")", ")", "\n", "\n", "if", "with_relu", ":", "\n", "                    ", "self", ".", "h1", "=", "tf", ".", "nn", ".", "relu", "(", "self", ".", "h1", "+", "self", ".", "b1", ")", "\n", "\n", "", "self", ".", "h1_dropout", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "h1", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "\n", "self", ".", "h1_comp", "=", "tf", ".", "cond", "(", "self", ".", "training", ",", "\n", "lambda", ":", "self", ".", "h1_dropout", ",", "\n", "lambda", ":", "self", ".", "h1", ")", "if", "self", ".", "dropout", ">", "0.", "else", "self", ".", "h1", "\n", "\n", "self", ".", "W2", "=", "slim", ".", "variable", "(", "'W2'", ",", "[", "sizes", "[", "0", "]", ",", "sizes", "[", "1", "]", "]", ",", "tf", ".", "float32", ",", "initializer", "=", "w_init", "(", ")", ")", "\n", "self", ".", "b2", "=", "slim", ".", "variable", "(", "'b2'", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "zeros", "(", "sizes", "[", "1", "]", ")", ")", "\n", "\n", "self", ".", "logits", "=", "spdot", "(", "self", ".", "An", ",", "dot", "(", "self", ".", "h1_comp", ",", "self", ".", "W2", ")", ")", "\n", "if", "with_relu", ":", "\n", "                    ", "self", ".", "logits", "+=", "self", ".", "b2", "\n", "", "self", ".", "logits_gather", "=", "tf", ".", "gather", "(", "self", ".", "logits", ",", "self", ".", "node_ids", ")", "\n", "\n", "self", ".", "predictions", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "logits_gather", ")", "\n", "\n", "self", ".", "loss_per_node", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits_gather", ",", "\n", "labels", "=", "self", ".", "node_labels", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "loss_per_node", ")", "\n", "\n", "# weight decay only on the first layer, to match the original implementation", "\n", "if", "with_relu", ":", "\n", "                    ", "self", ".", "loss", "+=", "self", ".", "weight_decay", "*", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "[", "self", ".", "W1", ",", "self", ".", "b1", "]", "]", ")", "\n", "\n", "", "var_l", "=", "[", "self", ".", "W1", ",", "self", ".", "W2", "]", "\n", "if", "with_relu", ":", "\n", "                    ", "var_l", ".", "extend", "(", "[", "self", ".", "b1", ",", "self", ".", "b2", "]", ")", "\n", "", "self", ".", "train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "loss", ",", "\n", "var_list", "=", "var_l", ")", "\n", "\n", "self", ".", "varlist", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "local_init_op", "=", "tf", ".", "variables_initializer", "(", "self", ".", "varlist", ")", "\n", "\n", "if", "gpu_id", "is", "None", ":", "\n", "                    ", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "device_count", "=", "{", "'GPU'", ":", "0", "}", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "visible_device_list", "=", "'{}'", ".", "format", "(", "gpu_id", ")", ",", "allow_growth", "=", "True", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "gpu_options", ")", "\n", "\n", "", "self", ".", "session", "=", "tf", ".", "InteractiveSession", "(", "config", "=", "config", ")", "\n", "self", ".", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "session", ".", "run", "(", "self", ".", "init_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.convert_varname": [[144, 164], ["vname.replace", "vname.split"], "methods", ["None"], ["", "", "", "def", "convert_varname", "(", "self", ",", "vname", ",", "to_namespace", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Utility function that converts variable names to the input namespace.\n\n        Parameters\n        ----------\n        vname: string\n            The variable name.\n\n        to_namespace: string\n            The target namespace.\n\n        Returns\n        -------\n\n        \"\"\"", "\n", "namespace", "=", "vname", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "if", "to_namespace", "is", "None", ":", "\n", "            ", "to_namespace", "=", "self", ".", "name", "\n", "", "return", "vname", ".", "replace", "(", "namespace", ",", "to_namespace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.set_variables": [[165, 188], ["GCN.GCN.graph.as_default", "GCN.GCN.session.run", "hasattr", "[].split", "list", "tensorflow.placeholder", "tensorflow.assign", "GCN.GCN.assign_ops.values", "v.get_shape", "list", "GCN.GCN.assign_placeholders.items", "var_dict.keys", "GCN.GCN.convert_varname"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.run", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.convert_varname"], ["", "def", "set_variables", "(", "self", ",", "var_dict", ")", ":", "\n", "        ", "\"\"\"\n        Set the model's variables to those provided in var_dict. This is e.g. used to restore the best seen parameters\n        after training with patience.\n\n        Parameters\n        ----------\n        var_dict: dict\n            Dictionary of the form {var_name: var_value} to assign the variables in the model.\n\n        Returns\n        -------\n        None.\n        \"\"\"", "\n", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'assign_placeholders'", ")", ":", "\n", "                ", "self", ".", "assign_placeholders", "=", "{", "v", ".", "name", ":", "tf", ".", "placeholder", "(", "v", ".", "dtype", ",", "shape", "=", "v", ".", "get_shape", "(", ")", ")", "for", "v", "in", "self", ".", "varlist", "}", "\n", "self", ".", "assign_ops", "=", "{", "v", ".", "name", ":", "tf", ".", "assign", "(", "v", ",", "self", ".", "assign_placeholders", "[", "v", ".", "name", "]", ")", "\n", "for", "v", "in", "self", ".", "varlist", "}", "\n", "", "to_namespace", "=", "list", "(", "var_dict", ".", "keys", "(", ")", ")", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "self", ".", "session", ".", "run", "(", "list", "(", "self", ".", "assign_ops", ".", "values", "(", ")", ")", ",", "feed_dict", "=", "{", "val", ":", "var_dict", "[", "self", ".", "convert_varname", "(", "key", ",", "to_namespace", ")", "]", "\n", "for", "key", ",", "val", "in", "self", ".", "assign_placeholders", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.train": [[189, 246], ["GCN.GCN.session.run", "hasattr", "range", "GCN.GCN.set_variables", "GCN.GCN.session.run", "GCN.eval_class", "print", "numpy.argmax", "v.eval"], "methods", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.run", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.GCN.set_variables", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.SS-GCN-adv.main_defense_par.run", "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.eval_class"], ["", "", "def", "train", "(", "self", ",", "split_train", ",", "split_val", ",", "Z_obs", ",", "patience", "=", "30", ",", "n_iters", "=", "200", ",", "print_info", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Train the GCN model on the provided data.\n\n        Parameters\n        ----------\n        split_train: np.array, shape [n_train,]\n            The indices of the nodes used for training\n\n        split_val: np.array, shape [n_val,]\n            The indices of the nodes used for validation.\n\n        Z_obs: np.array, shape [N,k]\n            All node labels in one-hot form (the labels of nodes outside of split_train and split_val will not be used.\n\n        patience: int, default: 30\n            After how many steps without improvement of validation error to stop training.\n\n        n_iters: int, default: 200\n            Maximum number of iterations (usually we hit the patience limit earlier)\n\n        print_info: bool, default: True\n\n        Returns\n        -------\n        None.\n\n        \"\"\"", "\n", "\n", "varlist", "=", "self", ".", "varlist", "\n", "self", ".", "session", ".", "run", "(", "self", ".", "local_init_op", ")", "\n", "early_stopping", "=", "patience", "\n", "\n", "best_performance", "=", "0", "\n", "patience", "=", "early_stopping", "\n", "\n", "feed", "=", "{", "self", ".", "node_ids", ":", "split_train", ",", "\n", "self", ".", "node_labels", ":", "Z_obs", "[", "split_train", "]", "}", "\n", "if", "hasattr", "(", "self", ",", "'training'", ")", ":", "\n", "            ", "feed", "[", "self", ".", "training", "]", "=", "True", "\n", "", "for", "it", "in", "range", "(", "n_iters", ")", ":", "\n", "            ", "_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "train_op", "]", ",", "feed", ")", "\n", "f1_micro", ",", "f1_macro", "=", "eval_class", "(", "split_val", ",", "self", ",", "np", ".", "argmax", "(", "Z_obs", ",", "1", ")", ")", "\n", "perf_sum", "=", "f1_micro", "+", "f1_macro", "\n", "if", "perf_sum", ">", "best_performance", ":", "\n", "                ", "best_performance", "=", "perf_sum", "\n", "patience", "=", "early_stopping", "\n", "# var dump to memory is much faster than to disk using checkpoints", "\n", "var_dump_best", "=", "{", "v", ".", "name", ":", "v", ".", "eval", "(", "self", ".", "session", ")", "for", "v", "in", "varlist", "}", "\n", "", "else", ":", "\n", "                ", "patience", "-=", "1", "\n", "", "if", "it", ">", "early_stopping", "and", "patience", "<=", "0", ":", "\n", "                ", "break", "\n", "", "", "if", "print_info", ":", "\n", "            ", "print", "(", "'converged after {} iterations'", ".", "format", "(", "it", "-", "patience", ")", ")", "\n", "# Put the best observed parameters back into the model", "\n", "", "self", ".", "set_variables", "(", "var_dump_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.sparse_dropout": [[9, 16], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor"], "function", ["None"], ["def", "sparse_dropout", "(", "x", ",", "keep_prob", ",", "noise_shape", ")", ":", "\n", "    ", "\"\"\"Dropout for sparse tensors.\"\"\"", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "x", ",", "dropout_mask", ")", "\n", "return", "pre_out", "*", "(", "1.", "/", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.GCN.eval_class": [[248, 272], ["model.predictions.eval().argmax", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "model.predictions.eval"], "function", ["None"], ["", "", "def", "eval_class", "(", "ids_to_eval", ",", "model", ",", "z_obs", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate the model's classification performance.\n\n    Parameters\n    ----------\n    ids_to_eval: np.array\n        The indices of the nodes whose predictions will be evaluated.\n\n    model: GCN\n        The model to evaluate.\n\n    z_obs: np.array\n        The labels of the nodes in ids_to_eval\n\n    Returns\n    -------\n    [f1_micro, f1_macro] scores\n\n    \"\"\"", "\n", "test_pred", "=", "model", ".", "predictions", ".", "eval", "(", "session", "=", "model", ".", "session", ",", "feed_dict", "=", "{", "model", ".", "node_ids", ":", "ids_to_eval", "}", ")", ".", "argmax", "(", "1", ")", "\n", "test_real", "=", "z_obs", "[", "ids_to_eval", "]", "\n", "\n", "return", "f1_score", "(", "test_real", ",", "test_pred", ",", "average", "=", "'micro'", ")", ",", "f1_score", "(", "test_real", ",", "test_pred", ",", "average", "=", "'macro'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.utils.load_npz": [[6, 36], ["file_name.endswith", "numpy.load", "dict", "scipy.csr_matrix", "dict.get", "scipy.csr_matrix"], "function", ["home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.GraphMix-clu.trainer.Trainer.load"], ["import", "sys", "\n", "\n", "import", "torch", "\n", "import", "metis", "\n", "\n", "\n", "def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n", "\n", "", "def", "sample_mask", "(", "idx", ",", "l", ")", ":", "\n", "    ", "\"\"\"Create mask.\"\"\"", "\n", "mask", "=", "np", ".", "zeros", "(", "l", ")", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "return", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "\n", "", "def", "load_data", "(", "dataset_str", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.utils.largest_connected_components": [[38, 64], ["scipy.sparse.csgraph.connected_components", "numpy.bincount", "print", "numpy.argsort", "enumerate"], "function", ["None"], ["\n", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"../dataset/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"../dataset/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.utils.train_val_test_split_tabular": [[66, 113], ["numpy.arange", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "len", "ValueError", "result.append", "result.append", "result.append", "set"], "function", ["None"], ["tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "# preprocess feature", "\n", "features", "=", "preprocess_features", "(", "features", ")", "\n", "features", "=", "torch", ".", "tensor", "(", "features", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "# preprocess adj", "\n", "adj", "=", "preprocess_adj", "(", "adj", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "_", ",", "l_num", "=", "labels", ".", "shape", "\n", "labels", "=", "torch", ".", "tensor", "(", "(", "labels", "*", "range", "(", "l_num", ")", ")", ".", "sum", "(", "axis", "=", "1", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "list", "(", "range", "(", "len", "(", "y", ")", ")", ")", "\n", "idx_val", "=", "list", "(", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n", "\n", "", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert sparse matrix to tuple representation.\"\"\"", "\n", "def", "to_tuple", "(", "mx", ")", ":", "\n", "        ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "            ", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "            ", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "\n", "", "return", "sparse_mx", "\n", "\n", "\n", "", "def", "preprocess_features", "(", "features", ")", ":", "\n", "    ", "\"\"\"Row-normalize feature matrix and convert to tuple representation\"\"\"", "\n"]], "home.repos.pwc.inspect_result.Shen-Lab_SS-GCNs.nettack.utils.preprocess_graph": [[114, 120], ["scipy.diags", "adj_.dot().T.dot().tocsr", "scipy.eye", "adj_.sum", "numpy.power", "adj_.dot().T.dot", "adj_.dot"], "function", ["None"], ["rowsum", "=", "np", ".", "array", "(", "features", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "features", "=", "r_mat_inv", ".", "dot", "(", "features", ")", "\n", "#return sparse_to_tuple(features)", "\n", "return", "features", ".", "todense", "(", ")", "\n"]]}