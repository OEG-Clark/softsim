{"home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.bilinear_sampler.bilinear_sampler_1d_h": [[19, 95], ["float", "float", "bilinear_sampler.bilinear_sampler_1d_h._transform"], "function", ["None"], ["def", "bilinear_sampler_1d_h", "(", "input_images", ",", "x_offset", ",", "wrap_mode", "=", "'border'", ",", "name", "=", "'bilinear_sampler'", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_repeat", "(", "x", ",", "n_repeats", ")", ":", "\n", "\n", "        ", "rep", "=", "x", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "n_repeats", ")", "\n", "return", "rep", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "def", "_interpolate", "(", "im", ",", "x", ",", "y", ")", ":", "\n", "\n", "# handle both texture border types", "\n", "        ", "_edge_size", "=", "0", "\n", "if", "_wrap_mode", "==", "'border'", ":", "\n", "            ", "_edge_size", "=", "1", "\n", "pad", "=", "torch", ".", "nn", ".", "ConstantPad2d", "(", "1", ",", "0", ")", "\n", "im", "=", "pad", "(", "im", ")", "\n", "x", "=", "x", "+", "_edge_size", "\n", "y", "=", "y", "+", "_edge_size", "\n", "", "elif", "_wrap_mode", "==", "'edge'", ":", "\n", "            ", "_edge_size", "=", "0", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0.0", ",", "_width_f", "-", "1", "+", "2", "*", "_edge_size", ")", "\n", "\n", "x0_f", "=", "torch", ".", "floor", "(", "x", ")", "\n", "y0_f", "=", "torch", ".", "floor", "(", "y", ")", "\n", "x1_f", "=", "x0_f", "+", "1", "\n", "\n", "x0", "=", "x0_f", ".", "int", "(", ")", "\n", "y0", "=", "y0_f", ".", "int", "(", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "x1_f", ",", "max", "=", "_width_f", "-", "1", "+", "2", "*", "_edge_size", ")", ".", "int", "(", ")", "\n", "\n", "dim2", "=", "(", "_width", "+", "2", "*", "_edge_size", ")", "\n", "dim1", "=", "(", "_width", "+", "2", "*", "_edge_size", ")", "*", "(", "_height", "+", "2", "*", "_edge_size", ")", "\n", "base", "=", "_repeat", "(", "torch", ".", "arange", "(", "_num_batch", ")", "*", "dim1", ",", "_height", "*", "_width", ")", ".", "int", "(", ")", ".", "cuda", "(", ")", "\n", "base_y0", "=", "base", "+", "y0", "*", "dim2", "\n", "idx_l", "=", "base_y0", "+", "x0", "\n", "idx_r", "=", "base_y0", "+", "x1", "\n", "\n", "im_per", "=", "im", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "im_flat", "=", "torch", ".", "reshape", "(", "im_per", ",", "(", "-", "1", ",", "_num_channels", ")", ")", "\n", "\n", "pix_l", "=", "im_flat", "[", "idx_l", ".", "long", "(", ")", ",", ":", "]", "\n", "pix_r", "=", "im_flat", "[", "idx_r", ".", "long", "(", ")", ",", ":", "]", "\n", "\n", "weight_l", "=", "(", "x1_f", "-", "x", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "weight_r", "=", "(", "x", "-", "x0_f", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "return", "weight_l", "*", "pix_l", "+", "weight_r", "*", "pix_r", "\n", "\n", "", "def", "_transform", "(", "input_images", ",", "x_offset", ")", ":", "\n", "\n", "        ", "x_t_flat", "=", "torch", ".", "arange", "(", "0", ",", "_width", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "_height", ",", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "x_t_flat", "=", "x_t_flat", ".", "view", "(", "1", ",", "_height", ",", "_width", ")", ".", "repeat", "(", "_num_batch", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "y_t_flat", "=", "torch", ".", "arange", "(", "0", ",", "_height", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "_width", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "y_t_flat", "=", "y_t_flat", ".", "view", "(", "1", ",", "_height", ",", "_width", ")", ".", "repeat", "(", "_num_batch", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "x_t_flat", "+=", "x_offset", ".", "view", "(", "-", "1", ")", "*", "_width_f", "\n", "\n", "input_transformed", "=", "_interpolate", "(", "input_images", ",", "x_t_flat", ",", "y_t_flat", ")", "\n", "\n", "output", "=", "torch", ".", "reshape", "(", "input_transformed", ",", "[", "_num_batch", ",", "_height", ",", "_width", ",", "_num_channels", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "output", "\n", "\n", "", "_num_batch", "=", "input_images", ".", "shape", "[", "0", "]", "\n", "_height", "=", "input_images", ".", "shape", "[", "2", "]", "\n", "_width", "=", "input_images", ".", "shape", "[", "3", "]", "\n", "_num_channels", "=", "input_images", ".", "shape", "[", "1", "]", "\n", "\n", "_height_f", "=", "float", "(", "_height", ")", "\n", "_width_f", "=", "float", "(", "_width", ")", "\n", "\n", "_wrap_mode", "=", "wrap_mode", "\n", "\n", "output", "=", "_transform", "(", "input_images", ",", "x_offset", ")", "\n", "return", "output", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.main.get_params": [[4, 9], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_params", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Indicate if the training needs to be resumed from the last saved checkpoint\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Geometric_consistency_loss.ReconLoss.__init__": [[26, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.85", ")", ":", "\n", "        ", "super", "(", "ReconLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Geometric_consistency_loss.ReconLoss.forward": [[30, 58], ["numpy.array", "range", "bilinear_sampler.bilinear_sampler_1d_h", "Geometric_consistency_loss.ssim", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.bilinear_sampler.bilinear_sampler_1d_h", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Geometric_consistency_loss.ssim"], ["", "def", "forward", "(", "self", ",", "img0", ",", "img1", ",", "pred", ",", "fb", ",", "max_d", "=", "80.0", ")", ":", "\n", "\n", "        ", "x0", "=", "(", "img0", "+", "1.0", ")", "/", "2.0", "\n", "x1", "=", "(", "img1", "+", "1.0", ")", "/", "2.0", "\n", "\n", "assert", "x0", ".", "shape", "[", "0", "]", "==", "pred", ".", "shape", "[", "0", "]", "\n", "assert", "pred", ".", "shape", "[", "0", "]", "==", "fb", ".", "shape", "[", "0", "]", "\n", "\n", "new_depth", "=", "(", "pred", "+", "1.0", ")", "/", "2.0", "\n", "new_depth", "*=", "max_d", "\n", "disp", "=", "1.0", "/", "(", "new_depth", "+", "1e-6", ")", "\n", "tmp", "=", "np", ".", "array", "(", "fb", ")", "\n", "for", "i", "in", "range", "(", "new_depth", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "disp", "[", "i", ",", ":", ",", ":", ",", ":", "]", "*=", "tmp", "[", "i", "]", "\n", "disp", "[", "i", ",", ":", ",", ":", ",", ":", "]", "/=", "disp", ".", "shape", "[", "3", "]", "# normlize to [0,1]", "\n", "\n", "#x0_w = warp(x1, -1.0*disp)", "\n", "", "x0_w", "=", "bilinear_sampler_1d_h", "(", "x1", ",", "-", "1.0", "*", "disp", ")", "\n", "\n", "ssim_", "=", "ssim", "(", "x0", ",", "x0_w", ")", "\n", "l1", "=", "torch", ".", "abs", "(", "x0", "-", "x0_w", ")", "\n", "loss1", "=", "torch", ".", "mean", "(", "self", ".", "alpha", "*", "ssim_", ")", "\n", "loss2", "=", "torch", ".", "mean", "(", "(", "1", "-", "self", ".", "alpha", ")", "*", "l1", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "\n", "recon_img", "=", "x0_w", "*", "2.0", "-", "1.0", "\n", "\n", "return", "loss", ",", "recon_img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Geometric_consistency_loss.ssim": [[7, 24], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.clamp", "torch.clamp", "torch.clamp", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "function", ["None"], ["def", "ssim", "(", "x", ",", "y", ")", ":", "\n", "\n", "        ", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "mu_x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "mu_y", "=", "F", ".", "avg_pool2d", "(", "y", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "\n", "sigma_x", "=", "F", ".", "avg_pool2d", "(", "x", "**", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "-", "mu_x", "**", "2", "\n", "sigma_y", "=", "F", ".", "avg_pool2d", "(", "y", "**", "2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "F", ".", "avg_pool2d", "(", "x", "*", "y", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "-", "mu_x", "*", "mu_y", "\n", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "C2", ")", "\n", "\n", "SSIM", "=", "SSIM_n", "/", "SSIM_d", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.__init__": [[29, 99], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "networks.all_networks.define_G", "networks.all_networks.define_G", "Solver.Solver.netG.cuda", "Solver.Solver.netT.cuda", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "Geometric_consistency_loss.ReconLoss", "Solver.Solver.netG_loss_fn.cuda", "Solver.Solver.netD_loss_fn.cuda", "Solver.Solver.netT_loss_fn.cuda", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "tensorboardX.SummaryWriter", "Solver.Solver.get_training_data", "Solver.Solver.get_training_dataloaders", "Solver.Solver.get_validation_data", "networks.da_net.Discriminator", "disc.cuda", "Solver.Solver.netG.parameters", "Solver.Solver.netD_optimizer.append", "Solver.Solver.netT.parameters", "Dataloaders.RandomImgAugment", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "torch.Adam", "torch.Adam", "Dataloaders.Kitti_dataloader_training.DepthToTensor", "disc.parameters"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.ReconLoss", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_training_data", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_training_dataloaders", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_validation_data"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "'.'", "\n", "self", ".", "opt", "=", "opt", "\n", "# Seed", "\n", "self", ".", "seed", "=", "1729", "# The famous Hardy-Ramanujan number", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "\n", "\n", "# Initialize networks", "\n", "self", ".", "netG", "=", "all_networks", ".", "define_G", "(", "3", ",", "3", ",", "64", ",", "9", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'ResNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ")", "\n", "self", ".", "netD", "=", "[", "Discriminator", "(", "nout", "=", "1", ",", "last_layer_activation", "=", "False", ")", "]", "\n", "\n", "self", ".", "netT", "=", "all_networks", ".", "define_G", "(", "3", ",", "1", ",", "64", ",", "4", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'UNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ",", "0.1", ")", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "self", ".", "netT", ".", "cuda", "(", ")", "\n", "for", "disc", "in", "self", ".", "netD", ":", "\n", "            ", "disc", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Loss", "\n", "", "self", ".", "netG_loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "netD_loss_fn", "=", "nn", ".", "KLDivLoss", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "geometric_loss_fn", "=", "ReconLoss", "(", ")", "\n", "\n", "self", ".", "netG_loss_fn", "=", "self", ".", "netG_loss_fn", ".", "cuda", "(", ")", "\n", "self", ".", "netD_loss_fn", "=", "self", ".", "netD_loss_fn", ".", "cuda", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "self", ".", "netT_loss_fn", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Optimizers", "\n", "self", ".", "netG_optimizer", "=", "Optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "1e-5", ")", "\n", "self", ".", "netD_optimizer", "=", "[", "]", "\n", "for", "disc", "in", "self", ".", "netD", ":", "\n", "            ", "self", ".", "netD_optimizer", ".", "append", "(", "Optim", ".", "Adam", "(", "disc", ".", "parameters", "(", ")", ",", "lr", "=", "1e-5", ")", ")", "\n", "", "self", ".", "netT_optimizer", "=", "Optim", ".", "Adam", "(", "self", ".", "netT", ".", "parameters", "(", ")", ",", "lr", "=", "1e-5", ")", "\n", "\n", "# Training Configuration details", "\n", "self", ".", "batch_size", "=", "2", "\n", "self", ".", "iteration", "=", "None", "\n", "self", ".", "total_iterations", "=", "200000", "\n", "self", ".", "START_ITER", "=", "0", "\n", "self", ".", "flag", "=", "True", "\n", "self", ".", "garg_crop", "=", "True", "\n", "self", ".", "eigen_crop", "=", "False", "\n", "self", ".", "best_a1", "=", "0.0", "\n", "\n", "self", ".", "kr", "=", "1", "\n", "self", ".", "kd", "=", "1", "\n", "self", ".", "kcritic", "=", "5", "\n", "self", ".", "gamma", "=", "10", "\n", "\n", "# Transforms", "\n", "joint_transform_list", "=", "[", "transf", ".", "RandomImgAugment", "(", "no_flip", "=", "False", ",", "no_rotation", "=", "False", ",", "no_augment", "=", "False", ",", "size", "=", "(", "192", ",", "640", ")", ")", "]", "\n", "img_transform_list", "=", "[", "tr", ".", "ToTensor", "(", ")", ",", "tr", ".", "Normalize", "(", "[", ".5", ",", ".5", ",", ".5", "]", ",", "[", ".5", ",", ".5", ",", ".5", "]", ")", "]", "\n", "self", ".", "joint_transform", "=", "tr", ".", "Compose", "(", "joint_transform_list", ")", "\n", "self", ".", "img_transform", "=", "tr", ".", "Compose", "(", "img_transform_list", ")", "\n", "self", ".", "depth_transform", "=", "tr", ".", "Compose", "(", "[", "DepthToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'tensorboard_logs/Vkitti-kitti/train'", ")", ")", "\n", "self", ".", "saved_models_dir", "=", "'saved_models'", "\n", "\n", "# Initialize Data", "\n", "self", ".", "get_training_data", "(", ")", "\n", "self", ".", "get_training_dataloaders", "(", ")", "\n", "self", ".", "get_validation_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.loop_iter": [[100, 104], ["iter"], "methods", ["None"], ["", "def", "loop_iter", "(", "self", ",", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "data", "in", "iter", "(", "loader", ")", ":", "\n", "                ", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.get_training_data": [[105, 108], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Dataloaders.VKitti_dataloader.VKitti", "Dataloaders.Kitti_dataloader_training.KittiDataset"], "methods", ["None"], ["", "", "", "def", "get_training_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "syn_loader", "=", "DataLoader", "(", "syn_dataset", "(", "train", "=", "True", ")", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_loader", "=", "DataLoader", "(", "real_dataset", "(", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.get_training_dataloaders": [[109, 112], ["Solver.Solver.loop_iter", "Solver.Solver.loop_iter"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.loop_iter", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.loop_iter"], ["", "def", "get_training_dataloaders", "(", "self", ")", ":", "\n", "        ", "self", ".", "syn_iter", "=", "self", ".", "loop_iter", "(", "self", ".", "syn_loader", ")", "\n", "self", ".", "real_iter", "=", "self", ".", "loop_iter", "(", "self", ".", "real_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.load_pretrained_models": [[113, 122], ["torch.load", "torch.load", "torch.load", "torch.load", "Solver.Solver.netG.load_state_dict", "Solver.Solver.netG_optimizer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "Solver.Solver.netT.load_state_dict", "Solver.Solver.netT_optimizer.load_state_dict", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "load_pretrained_models", "(", "self", ")", ":", "\n", "        ", "model_state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'Gen_Baseline/saved_models/Gen_Resnet_Baseline.pth.tar'", ")", ")", "\n", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "model_state", "[", "'netG_state_dict'", "]", ")", "\n", "self", ".", "netG_optimizer", ".", "load_state_dict", "(", "model_state", "[", "'netG_optimizer'", "]", ")", "\n", "\n", "model_state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'PTNet_Baseline/saved_models/PTNet_baseline-8999_bicubic.pth.tar'", ")", ")", "\n", "self", ".", "netT", ".", "load_state_dict", "(", "model_state", "[", "'netT_state_dict'", "]", ")", "\n", "self", ".", "netT_optimizer", ".", "load_state_dict", "(", "model_state", "[", "'netT_optimizer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.load_prev_model": [[123, 143], ["glob.glob", "os.path.join", "len", "saved_iters.index", "torch.load", "torch.load", "torch.load", "torch.load", "Solver.Solver.netG.load_state_dict", "Solver.Solver.netT.load_state_dict", "Solver.Solver.netG_optimizer.load_state_dict", "Solver.Solver.netT_optimizer.load_state_dict", "enumerate", "int", "max", "disc.load_state_dict", "Solver.Solver.netD_optimizer[].load_state_dict", "[].split", "s.split", "str", "str"], "methods", ["None"], ["", "def", "load_prev_model", "(", "self", ",", "model_status", "=", "'latest'", ")", ":", "\n", "        ", "saved_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ",", "'Depth_Estimator_WI_geom_bicubic_da-'", "+", "model_status", "+", "'.pth.tar'", ")", ")", "\n", "if", "len", "(", "saved_models", ")", ">", "0", ":", "\n", "            ", "saved_iters", "=", "[", "int", "(", "s", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "s", "in", "saved_models", "]", "\n", "recent_id", "=", "saved_iters", ".", "index", "(", "max", "(", "saved_iters", ")", ")", "\n", "saved_model", "=", "saved_models", "[", "recent_id", "]", "\n", "model_state", "=", "torch", ".", "load", "(", "saved_model", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "model_state", "[", "'netG_state_dict'", "]", ")", "\n", "self", ".", "netT", ".", "load_state_dict", "(", "model_state", "[", "'netT_state_dict'", "]", ")", "\n", "\n", "self", ".", "netG_optimizer", ".", "load_state_dict", "(", "model_state", "[", "'netG_optimizer'", "]", ")", "\n", "self", ".", "netT_optimizer", ".", "load_state_dict", "(", "model_state", "[", "'netT_optimizer'", "]", ")", "\n", "\n", "for", "i", ",", "disc", "in", "enumerate", "(", "self", ".", "netD", ")", ":", "\n", "                ", "disc", ".", "load_state_dict", "(", "model_state", "[", "'netD'", "+", "str", "(", "i", ")", "+", "'_state_dict'", "]", ")", "\n", "self", ".", "netD_optimizer", "[", "i", "]", ".", "load_state_dict", "(", "model_state", "[", "'netD'", "+", "str", "(", "i", ")", "+", "'_optimizer_state_dict'", "]", ")", "\n", "\n", "", "self", ".", "START_ITER", "=", "model_state", "[", "'iteration'", "]", "+", "1", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.save_model": [[144, 160], ["dict", "torch.save", "torch.save", "torch.save", "torch.save", "os.system", "os.path.exists", "os.mkdir", "Solver.Solver.netG.state_dict", "Solver.Solver.netT.state_dict", "Solver.Solver.netG_optimizer.state_dict", "Solver.Solver.netT_optimizer.state_dict", "disc.state_dict", "Solver.Solver.netD_optimizer[].state_dict", "os.path.join", "os.path.join", "os.path.join", "enumerate", "enumerate", "dict3.items", "os.path.join", "str", "str", "dict1.items", "dict2.items", "os.path.join"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "model_status", "=", "'latest'", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ")", ")", "\n", "\n", "", "dict1", "=", "{", "\n", "'iteration'", ":", "self", ".", "iteration", ",", "\n", "'netG_state_dict'", ":", "self", ".", "netG", ".", "state_dict", "(", ")", ",", "\n", "'netT_state_dict'", ":", "self", ".", "netT", ".", "state_dict", "(", ")", ",", "\n", "'netG_optimizer'", ":", "self", ".", "netG_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'netT_optimizer'", ":", "self", ".", "netT_optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "dict2", "=", "{", "'netD'", "+", "str", "(", "i", ")", "+", "'_state_dict'", ":", "disc", ".", "state_dict", "(", ")", "for", "i", ",", "disc", "in", "enumerate", "(", "self", ".", "netD", ")", "}", "\n", "dict3", "=", "{", "'netD'", "+", "str", "(", "i", ")", "+", "'_optimizer_state_dict'", ":", "self", ".", "netD_optimizer", "[", "i", "]", ".", "state_dict", "(", ")", "for", "i", ",", "disc", "in", "enumerate", "(", "self", ".", "netD", ")", "}", "\n", "final_dict", "=", "dict", "(", "dict1", ".", "items", "(", ")", "+", "dict2", ".", "items", "(", ")", "+", "dict3", ".", "items", "(", ")", ")", "\n", "torch", ".", "save", "(", "final_dict", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ",", "'Depth_Estimator-da_tmp.pth.tar'", ")", ")", "\n", "os", ".", "system", "(", "'mv '", "+", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ",", "'Depth_Estimator-da_tmp.pth.tar'", ")", "+", "' '", "+", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ",", "'Depth_Estimator_WI_geom_bicubic_da-'", "+", "model_status", "+", "'.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.get_syn_data": [[161, 165], ["next", "Solver.Solver.scale_pyramid", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "Solver.Solver.syn_image.cuda", "Solver.Solver.syn_label.cuda"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.scale_pyramid"], ["", "def", "get_syn_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "syn_image", ",", "self", ".", "syn_label", "=", "next", "(", "self", ".", "syn_iter", ")", "\n", "self", ".", "syn_image", ",", "self", ".", "syn_label", "=", "Variable", "(", "self", ".", "syn_image", ".", "cuda", "(", ")", ")", ",", "Variable", "(", "self", ".", "syn_label", ".", "cuda", "(", ")", ")", "\n", "self", ".", "syn_label_scales", "=", "self", ".", "scale_pyramid", "(", "self", ".", "syn_label", ",", "5", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.get_real_data": [[166, 172], ["next", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "Solver.Solver.scale_pyramid", "Solver.Solver.scale_pyramid", "Solver.Solver.real_image.cuda", "Solver.Solver.real_right_image.cuda"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.scale_pyramid", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.scale_pyramid"], ["", "def", "get_real_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_image", ",", "self", ".", "real_right_image", ",", "self", ".", "fb", "=", "next", "(", "self", ".", "real_iter", ")", "\n", "self", ".", "real_image", "=", "Variable", "(", "self", ".", "real_image", ".", "cuda", "(", ")", ")", "\n", "self", ".", "real_right_image", "=", "Variable", "(", "self", ".", "real_right_image", ".", "cuda", "(", ")", ")", "\n", "self", ".", "real_image_scales", "=", "self", ".", "scale_pyramid", "(", "self", ".", "real_image", ",", "5", "-", "1", ")", "\n", "self", ".", "real_right_image_scales", "=", "self", ".", "scale_pyramid", "(", "self", ".", "real_right_image", ",", "5", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.gradient_penalty": [[173, 196], ["min", "len", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "range", "alpha.unsqueeze.unsqueeze.expand_as", "alpha.unsqueeze.unsqueeze.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "model", "gradients.view.view.view", "gradients.view.view.norm", "h_s.size", "h_t.size", "alpha.unsqueeze.unsqueeze.unsqueeze", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "gradient_penalty", "(", "self", ",", "model", ",", "h_s", ",", "h_t", ")", ":", "\n", "# based on: https://github.com/caogang/wgan-gp/blob/master/gan_cifar10.py#L116", "\n", "        ", "batch_size", "=", "min", "(", "h_s", ".", "size", "(", "0", ")", ",", "h_t", ".", "size", "(", "0", ")", ")", "\n", "h_s", "=", "h_s", "[", ":", "batch_size", "]", "\n", "h_t", "=", "h_t", "[", ":", "batch_size", "]", "\n", "size", "=", "len", "(", "h_s", ".", "shape", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "batch_size", ")", "#, 1, 1, 1)", "\n", "for", "ki", "in", "range", "(", "1", ",", "size", ")", ":", "\n", "            ", "alpha", "=", "alpha", ".", "unsqueeze", "(", "ki", ")", "\n", "", "alpha", "=", "alpha", ".", "expand_as", "(", "h_s", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "differences", "=", "h_t", "-", "h_s", "\n", "interpolates", "=", "h_s", "+", "(", "alpha", "*", "differences", ")", "\n", "# interpolates = torch.stack([interpolates, h_s, h_t]).requires_grad_()", "\n", "interpolates", "=", "Variable", "(", "interpolates", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "preds", "=", "model", "(", "interpolates", ")", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "preds", ",", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones_like", "(", "preds", ")", ".", "cuda", "(", ")", ",", "\n", "retain_graph", "=", "True", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "gradients", "=", "gradients", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "gradient_norm", "=", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "\n", "gradient_penalty", "=", "(", "(", "gradient_norm", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.scale_pyramid": [[197, 214], ["img.size", "range", "scaled_imgs.reverse", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "scaled_imgs.append"], "methods", ["None"], ["", "def", "scale_pyramid", "(", "self", ",", "img", ",", "num_scales", ")", ":", "\n", "        ", "scaled_imgs", "=", "[", "img", "]", "\n", "\n", "s", "=", "img", ".", "size", "(", ")", "\n", "\n", "h", "=", "s", "[", "2", "]", "\n", "w", "=", "s", "[", "3", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "num_scales", ")", ":", "\n", "            ", "ratio", "=", "2", "**", "i", "\n", "nh", "=", "h", "//", "ratio", "\n", "nw", "=", "w", "//", "ratio", "\n", "scaled_img", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "size", "=", "(", "nh", ",", "nw", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scaled_imgs", ".", "append", "(", "scaled_img", ")", "\n", "\n", "", "scaled_imgs", ".", "reverse", "(", ")", "\n", "return", "scaled_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.gradient_x": [[215, 218], ["None"], "methods", ["None"], ["", "def", "gradient_x", "(", "self", ",", "img", ")", ":", "\n", "        ", "gx", "=", "img", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "-", "img", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "\n", "return", "gx", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.gradient_y": [[220, 223], ["None"], "methods", ["None"], ["", "def", "gradient_y", "(", "self", ",", "img", ")", ":", "\n", "        ", "gy", "=", "img", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "-", "img", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "\n", "return", "gy", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.get_smooth_weight": [[226, 244], ["sum", "Solver.Solver.gradient_x", "Solver.Solver.gradient_y", "Solver.Solver.gradient_x", "Solver.Solver.gradient_y", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.gradient_x", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.gradient_y", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.gradient_x", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.gradient_y"], ["", "def", "get_smooth_weight", "(", "self", ",", "depths", ",", "Images", ",", "num_scales", ")", ":", "\n", "\n", "        ", "depth_gradient_x", "=", "[", "self", ".", "gradient_x", "(", "d", ")", "for", "d", "in", "depths", "]", "\n", "depth_gradient_y", "=", "[", "self", ".", "gradient_y", "(", "d", ")", "for", "d", "in", "depths", "]", "\n", "\n", "Image_gradient_x", "=", "[", "self", ".", "gradient_x", "(", "img", ")", "for", "img", "in", "Images", "]", "\n", "Image_gradient_y", "=", "[", "self", ".", "gradient_y", "(", "img", ")", "for", "img", "in", "Images", "]", "\n", "\n", "weight_x", "=", "[", "torch", ".", "exp", "(", "-", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "g", ")", ",", "1", ",", "keepdim", "=", "True", ")", ")", "for", "g", "in", "Image_gradient_x", "]", "\n", "weight_y", "=", "[", "torch", ".", "exp", "(", "-", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "g", ")", ",", "1", ",", "keepdim", "=", "True", ")", ")", "for", "g", "in", "Image_gradient_y", "]", "\n", "\n", "smoothness_x", "=", "[", "depth_gradient_x", "[", "i", "]", "*", "weight_x", "[", "i", "]", "for", "i", "in", "range", "(", "num_scales", ")", "]", "\n", "smoothness_y", "=", "[", "depth_gradient_y", "[", "i", "]", "*", "weight_y", "[", "i", "]", "for", "i", "in", "range", "(", "num_scales", ")", "]", "\n", "\n", "loss_x", "=", "[", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "smoothness_x", "[", "i", "]", ")", ")", "/", "2", "**", "i", "for", "i", "in", "range", "(", "num_scales", ")", "]", "\n", "loss_y", "=", "[", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "smoothness_y", "[", "i", "]", ")", ")", "/", "2", "**", "i", "for", "i", "in", "range", "(", "num_scales", ")", "]", "\n", "\n", "return", "sum", "(", "loss_x", "+", "loss_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.reset_netD_grad": [[245, 255], ["enumerate", "disc_op.zero_grad", "disc_op.zero_grad"], "methods", ["None"], ["", "def", "reset_netD_grad", "(", "self", ",", "i", "=", "None", ")", ":", "\n", "        ", "if", "i", "==", "None", ":", "\n", "            ", "for", "disc_op", "in", "self", ".", "netD_optimizer", ":", "\n", "                ", "disc_op", ".", "zero_grad", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", ",", "disc_op", "in", "enumerate", "(", "self", ".", "netD", ")", ":", "\n", "                ", "if", "idx", "==", "i", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "disc_op", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.reset_grad": [[256, 270], ["Solver.Solver.netG_optimizer.zero_grad", "Solver.Solver.reset_netD_grad", "Solver.Solver.netT_optimizer.zero_grad", "Solver.Solver.reset_netD_grad", "Solver.Solver.netT_optimizer.zero_grad", "Solver.Solver.netG_optimizer.zero_grad", "Solver.Solver.netT_optimizer.zero_grad", "Solver.Solver.netG_optimizer.zero_grad", "Solver.Solver.reset_netD_grad"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.reset_netD_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.reset_netD_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.reset_netD_grad"], ["", "", "", "", "def", "reset_grad", "(", "self", ",", "exclude", "=", "None", ")", ":", "\n", "        ", "if", "(", "exclude", "==", "None", ")", ":", "\n", "            ", "self", ".", "netG_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "reset_netD_grad", "(", ")", "\n", "self", ".", "netT_optimizer", ".", "zero_grad", "(", ")", "\n", "", "elif", "(", "exclude", "==", "'netG'", ")", ":", "\n", "            ", "self", ".", "reset_netD_grad", "(", ")", "\n", "self", ".", "netT_optimizer", ".", "zero_grad", "(", ")", "\n", "", "elif", "(", "exclude", "==", "'netD'", ")", ":", "\n", "            ", "self", ".", "netG_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "netT_optimizer", ".", "zero_grad", "(", ")", "\n", "", "elif", "(", "exclude", "==", "'netT'", ")", ":", "\n", "            ", "self", ".", "netG_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "reset_netD_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.forward_netD": [[271, 274], ["None"], "methods", ["None"], ["", "", "def", "forward_netD", "(", "self", ",", "mode", "=", "'gen'", ")", ":", "\n", "        ", "self", ".", "D_real", "=", "[", "self", ".", "netD", "[", "0", "]", "(", "self", ".", "real_recon_image", ")", "]", "\n", "self", ".", "D_syn", "=", "[", "self", ".", "netD", "[", "0", "]", "(", "self", ".", "syn_recon_image", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.loss_from_disc": [[275, 279], ["Solver.Solver.D_syn[].mean", "Solver.Solver.D_real[].mean"], "methods", ["None"], ["", "def", "loss_from_disc", "(", "self", ",", "mode", "=", "'gen'", ")", ":", "\n", "        ", "self", ".", "just_adv_loss", "=", "self", ".", "D_syn", "[", "0", "]", ".", "mean", "(", ")", "-", "self", ".", "D_real", "[", "0", "]", ".", "mean", "(", ")", "\n", "if", "mode", "==", "'disc'", ":", "\n", "            ", "self", ".", "just_adv_loss", "=", "-", "1", "*", "self", ".", "just_adv_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad": [[280, 283], ["model.parameters"], "methods", ["None"], ["", "", "def", "set_requires_grad", "(", "self", ",", "model", ",", "mode", "=", "False", ")", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.update_netG": [[284, 325], ["Solver.Solver.set_requires_grad", "Solver.Solver.netG", "Solver.Solver.netG", "Solver.Solver.netT", "Solver.Solver.netT", "Solver.Solver.forward_netD", "Solver.Solver.loss_from_disc", "len", "Solver.Solver.get_smooth_weight", "zip", "zip", "Solver.Solver.reset_grad", "Solver.Solver.netG_loss.backward", "Solver.Solver.reset_grad", "Solver.Solver.netG_optimizer.step", "Solver.Solver.set_requires_grad", "Solver.Solver.set_requires_grad", "Solver.Solver.netG_loss_fn", "Solver.Solver.netG_loss_fn", "Solver.Solver.netT_loss_fn", "Solver.Solver.geometric_loss_fn", "Solver.Solver.set_requires_grad"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.forward_netD", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.loss_from_disc", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.get_smooth_weight", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.train.reset_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.train.reset_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad"], ["", "", "def", "update_netG", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "set_requires_grad", "(", "self", ".", "netT", ",", "False", ")", "\n", "for", "disc", "in", "self", ".", "netD", ":", "\n", "            ", "self", ".", "set_requires_grad", "(", "disc", ",", "False", ")", "\n", "\n", "", "self", ".", "real_features", ",", "self", ".", "real_recon_image", "=", "self", ".", "netG", "(", "self", ".", "real_image", ")", "\n", "self", ".", "syn_features", ",", "self", ".", "syn_recon_image", "=", "self", ".", "netG", "(", "self", ".", "syn_image", ")", "\n", "\n", "real_depth", "=", "self", ".", "netT", "(", "self", ".", "real_recon_image", ")", "\n", "syn_depth", "=", "self", ".", "netT", "(", "self", ".", "syn_recon_image", ")", "\n", "self", ".", "real_predicted_depth", ",", "self", ".", "syn_predicted_depth", "=", "real_depth", "[", "-", "1", "]", ",", "syn_depth", "[", "-", "1", "]", "\n", "\n", "self", ".", "forward_netD", "(", ")", "\n", "self", ".", "loss_from_disc", "(", ")", "\n", "\n", "real_reconstruction_loss", ",", "syn_reconstruction_loss", "=", "self", ".", "netG_loss_fn", "(", "self", ".", "real_recon_image", ",", "self", ".", "real_image", ")", ",", "self", ".", "netG_loss_fn", "(", "self", ".", "syn_recon_image", ",", "self", ".", "syn_image", ")", "\n", "real_size", "=", "len", "(", "real_depth", ")", "\n", "gradient_smooth_loss", "=", "self", ".", "get_smooth_weight", "(", "real_depth", "[", "1", ":", "]", ",", "self", ".", "real_image_scales", ",", "real_size", "-", "1", ")", "\n", "\n", "task_loss", "=", "0.0", "\n", "for", "(", "lab_fake_i", ",", "lab_real_i", ")", "in", "zip", "(", "syn_depth", "[", "1", ":", "]", ",", "self", ".", "syn_label_scales", ")", ":", "\n", "            ", "task_loss", "+=", "self", ".", "netT_loss_fn", "(", "lab_fake_i", ",", "lab_real_i", ")", "\n", "\n", "", "geo_id", "=", "0", "\n", "for", "(", "l_img", ",", "r_img", ",", "gen_depth", ")", "in", "zip", "(", "self", ".", "real_image_scales", ",", "self", ".", "real_right_image_scales", ",", "real_depth", "[", "1", ":", "]", ")", ":", "\n", "            ", "loss", ",", "_", "=", "self", ".", "geometric_loss_fn", "(", "l_img", ",", "r_img", ",", "gen_depth", ",", "self", ".", "fb", "/", "2", "**", "(", "3", "-", "geo_id", ")", ")", "\n", "task_loss", "+=", "loss", "\n", "geo_id", "+=", "1", "\n", "\n", "", "self", ".", "netG_loss", "=", "self", ".", "just_adv_loss", "+", "(", "0.01", "*", "gradient_smooth_loss", ")", "+", "(", "100", "*", "task_loss", ")", "\n", "self", ".", "netG_loss", "+=", "10", "*", "(", "real_reconstruction_loss", "+", "syn_reconstruction_loss", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "self", ".", "netG_loss", ".", "backward", "(", ")", "\n", "self", ".", "reset_grad", "(", "exclude", "=", "'netG'", ")", "\n", "self", ".", "netG_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netT", ",", "True", ")", "\n", "for", "disc", "in", "self", ".", "netD", ":", "\n", "            ", "self", ".", "set_requires_grad", "(", "disc", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.update_netT": [[326, 362], ["Solver.Solver.set_requires_grad", "Solver.Solver.netG", "Solver.Solver.netG", "Solver.Solver.netT", "Solver.Solver.netT", "zip", "zip", "Solver.Solver.netG", "Solver.Solver.netT", "len", "Solver.Solver.get_smooth_weight", "Solver.Solver.reset_grad", "Solver.Solver.netT_loss.backward", "Solver.Solver.reset_grad", "Solver.Solver.netT_optimizer.step", "Solver.Solver.set_requires_grad", "Solver.Solver.set_requires_grad", "Solver.Solver.netT_loss_fn", "Solver.Solver.geometric_loss_fn", "Solver.Solver.set_requires_grad"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.get_smooth_weight", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.train.reset_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.train.reset_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad"], ["", "", "def", "update_netT", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "set_requires_grad", "(", "self", ".", "netG", ",", "False", ")", "\n", "for", "disc", "in", "self", ".", "netD", ":", "\n", "            ", "self", ".", "set_requires_grad", "(", "disc", ",", "False", ")", "\n", "\n", "", "_", ",", "syn_refined_image", "=", "self", ".", "netG", "(", "self", ".", "syn_image", ")", "\n", "_", ",", "real_refined_image", "=", "self", ".", "netG", "(", "self", ".", "real_image", ")", "\n", "syn_depth", "=", "self", ".", "netT", "(", "syn_refined_image", ")", "\n", "real_depth", "=", "self", ".", "netT", "(", "real_refined_image", ")", "\n", "\n", "task_loss", "=", "0.0", "\n", "for", "(", "lab_fake_i", ",", "lab_real_i", ")", "in", "zip", "(", "syn_depth", "[", "1", ":", "]", ",", "self", ".", "syn_label_scales", ")", ":", "\n", "            ", "task_loss", "+=", "self", ".", "netT_loss_fn", "(", "lab_fake_i", ",", "lab_real_i", ")", "\n", "\n", "", "geo_id", "=", "0", "\n", "for", "(", "l_img", ",", "r_img", ",", "gen_depth", ")", "in", "zip", "(", "self", ".", "real_image_scales", ",", "self", ".", "real_right_image_scales", ",", "real_depth", "[", "1", ":", "]", ")", ":", "\n", "            ", "loss", ",", "_", "=", "self", ".", "geometric_loss_fn", "(", "l_img", ",", "r_img", ",", "gen_depth", ",", "self", ".", "fb", "/", "2", "**", "(", "3", "-", "geo_id", ")", ")", "\n", "task_loss", "+=", "loss", "\n", "geo_id", "+=", "1", "\n", "\n", "", "_", ",", "real_refined_image", "=", "self", ".", "netG", "(", "self", ".", "real_image", ")", "\n", "real_depth", "=", "self", ".", "netT", "(", "real_refined_image", ")", "\n", "real_size", "=", "len", "(", "real_depth", ")", "\n", "gradient_smooth_loss", "=", "self", ".", "get_smooth_weight", "(", "real_depth", "[", "1", ":", "]", ",", "self", ".", "real_image_scales", ",", "real_size", "-", "1", ")", "\n", "\n", "self", ".", "netT_loss", "=", "(", "100", "*", "task_loss", ")", "+", "(", "0.01", "*", "gradient_smooth_loss", ")", "\n", "\n", "self", ".", "reset_grad", "(", ")", "\n", "self", ".", "netT_loss", ".", "backward", "(", ")", "\n", "self", ".", "reset_grad", "(", "exclude", "=", "'netT'", ")", "\n", "self", ".", "netT_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netG", ",", "True", ")", "\n", "for", "disc", "in", "self", ".", "netD", ":", "\n", "            ", "self", ".", "set_requires_grad", "(", "disc", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.update_netD": [[363, 380], ["Solver.Solver.set_requires_grad", "range", "Solver.Solver.set_requires_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Solver.Solver.netG", "Solver.Solver.netG", "Solver.Solver.forward_netD", "Solver.Solver.loss_from_disc", "Solver.Solver.gradient_penalty", "Solver.Solver.netD_step"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.set_requires_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.forward_netD", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.loss_from_disc", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.train.gradient_penalty", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.netD_step"], ["", "", "def", "update_netD", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "set_requires_grad", "(", "self", ".", "netG", ",", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "syn_features", ",", "self", ".", "syn_recon_image", "=", "self", ".", "netG", "(", "self", ".", "syn_image", ")", "\n", "self", ".", "real_features", ",", "self", ".", "real_recon_image", "=", "self", ".", "netG", "(", "self", ".", "real_image", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "self", ".", "kcritic", ")", ":", "\n", "            ", "self", ".", "forward_netD", "(", "mode", "=", "'disc'", ")", "\n", "self", ".", "loss_from_disc", "(", "mode", "=", "'disc'", ")", "\n", "\n", "gp", "=", "self", ".", "gradient_penalty", "(", "self", ".", "netD", "[", "0", "]", ",", "self", ".", "syn_recon_image", ",", "self", ".", "real_recon_image", ")", "\n", "self", ".", "netD_loss", "=", "self", ".", "just_adv_loss", "+", "self", ".", "gamma", "*", "gp", "\n", "self", ".", "netD_step", "(", ")", "\n", "\n", "", "self", ".", "set_requires_grad", "(", "self", ".", "netG", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.netD_step": [[381, 387], ["Solver.Solver.reset_grad", "Solver.Solver.netD_loss.backward", "Solver.Solver.reset_grad", "disc_op.step"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.train.reset_grad", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.train.reset_grad"], ["", "def", "netD_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_grad", "(", ")", "\n", "self", ".", "netD_loss", ".", "backward", "(", ")", "\n", "self", ".", "reset_grad", "(", "exclude", "=", "'netD'", ")", "\n", "for", "disc_op", "in", "self", ".", "netD_optimizer", ":", "\n", "            ", "disc_op", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.train": [[388, 428], ["Solver.Solver.load_pretrained_models", "tqdm.tqdm.tqdm", "Solver.Solver.writer.close", "Solver.Solver.load_prev_model", "range", "Solver.Solver.get_syn_data", "Solver.Solver.get_real_data", "Solver.Solver.update_netD", "range", "Solver.Solver.update_netT", "Solver.Solver.writer.add_scalar", "Solver.Solver.writer.add_scalar", "Solver.Solver.writer.add_scalar", "Solver.Solver.update_netG", "Solver.Solver.save_model", "Solver.Solver.Validate"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.load_pretrained_models", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_syn_data", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_real_data", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.update_netD", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.update_netT", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.update_netG", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.save_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.Validate"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_pretrained_models", "(", ")", "\n", "if", "self", ".", "opt", ".", "resume", ":", "\n", "            ", "self", ".", "load_prev_model", "(", ")", "\n", "", "for", "self", ".", "iteration", "in", "tqdm", "(", "range", "(", "self", ".", "START_ITER", ",", "self", ".", "total_iterations", ")", ")", ":", "\n", "\n", "            ", "self", ".", "get_syn_data", "(", ")", "\n", "self", ".", "get_real_data", "(", ")", "\n", "###################################################", "\n", "#### Update netD", "\n", "###################################################", "\n", "\n", "self", ".", "update_netD", "(", ")", "\n", "\n", "###################################################", "\n", "#### Update netG", "\n", "###################################################            ", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "kr", ")", ":", "\n", "                ", "self", ".", "update_netG", "(", ")", "\n", "\n", "###################################################", "\n", "#### Update netT", "\n", "###################################################", "\n", "\n", "", "self", ".", "update_netT", "(", ")", "\n", "\n", "###################################################", "\n", "#### Tensorboard Logging", "\n", "###################################################            ", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'1) Total Generator loss'", ",", "self", ".", "netG_loss", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'2) Total Discriminator loss'", ",", "self", ".", "netD_loss", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'3) Total Depth Regressor loss'", ",", "self", ".", "netT_loss", ",", "self", ".", "iteration", ")", "\n", "\n", "if", "self", ".", "iteration", "%", "1000", "==", "999", ":", "\n", "# Validation and saving models", "\n", "                ", "self", ".", "save_model", "(", "model_status", "=", "'latest'", ")", "\n", "self", ".", "Validate", "(", ")", "\n", "\n", "", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.get_validation_data": [[429, 437], ["Dataloaders.Kitti_dataloader.KittiDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "next", "torch.autograd.Variable", "torch.autograd.Variable", "iter", "Solver.Solver.real_val_sample_images.cuda"], "methods", ["None"], ["", "def", "get_validation_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_val_dataset", "=", "real_val_dataset", "(", "data_file", "=", "'val.txt'", ",", "phase", "=", "'val'", ",", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", "\n", "self", ".", "real_val_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_val_sample_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_image", ",", "self", ".", "real_right_image", ",", "self", ".", "fb", "=", "next", "(", "self", ".", "real_iter", ")", "\n", "self", ".", "real_val_sample_images", ",", "self", ".", "real_val_sample_filenames", "=", "next", "(", "iter", "(", "self", ".", "real_val_sample_dataloader", ")", ")", "\n", "self", ".", "real_val_sample_images", "=", "self", ".", "real_val_sample_images", "[", "'left_img'", "]", "\n", "self", ".", "real_val_sample_images", "=", "Variable", "(", "self", ".", "real_val_sample_images", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.compute_errors": [[438, 461], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt.mean", "numpy.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "methods", ["None"], ["", "def", "compute_errors", "(", "self", ",", "ground_truth", ",", "predication", ")", ":", "\n", "\n", "# accuracy", "\n", "        ", "threshold", "=", "np", ".", "maximum", "(", "(", "ground_truth", "/", "predication", ")", ",", "(", "predication", "/", "ground_truth", ")", ")", "\n", "a1", "=", "(", "threshold", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "threshold", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "threshold", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "#MSE", "\n", "rmse", "=", "(", "ground_truth", "-", "predication", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "#MSE(log)", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "ground_truth", ")", "-", "np", ".", "log", "(", "predication", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "# Abs Relative difference", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "ground_truth", "-", "predication", ")", "/", "ground_truth", ")", "\n", "\n", "# Squared Relative difference", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "ground_truth", "-", "predication", ")", "**", "2", ")", "/", "ground_truth", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.tensor2im": [[462, 466], ["depth.cpu().data.float().numpy().transpose", "depth.cpu().data.float().numpy", "depth.cpu().data.float", "depth.cpu"], "methods", ["None"], ["", "def", "tensor2im", "(", "self", ",", "depth", ")", ":", "\n", "        ", "depth_numpy", "=", "depth", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "depth_numpy", "=", "(", "depth_numpy", "+", "1.0", ")", "/", "2.0", "# Unnormalize between 0 and 1", "\n", "return", "depth_numpy", "*", "80.0", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.colorize": [[467, 500], ["matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap.", "matplotlib.cm.get_cmap.", "matplotlib.cm.get_cmap.cpu().numpy", "matplotlib.cm.get_cmap.cpu"], "methods", ["None"], ["", "def", "colorize", "(", "self", ",", "value", ",", "vmin", "=", "None", ",", "vmax", "=", "None", ",", "cmap", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        A utility function for Torch/Numpy that maps a grayscale image to a matplotlib\n        colormap for use with TensorBoard image summaries.\n        By default it will normalize the input value to the range 0..1 before mapping\n        to a grayscale colormap.\n        Arguments:\n        - value: 2D Tensor of shape [height, width] or 3D Tensor of shape\n            [height, width, 1].\n        - vmin: the minimum value of the range used for normalization.\n            (Default: value minimum)\n        - vmax: the maximum value of the range used for normalization.\n            (Default: value maximum)\n        - cmap: a valid cmap named for use with matplotlib's `get_cmap`.\n            (Default: Matplotlib default colormap)\n        \n        Returns a 4D uint8 tensor of shape [height, width, 4].\n        \"\"\"", "\n", "\n", "# # normalize", "\n", "# vmin = value.min() if vmin is None else vmin", "\n", "# vmax = value.max() if vmax is None else vmax", "\n", "# if vmin!=vmax:", "\n", "#     value = (value - vmin) / (vmax - vmin) # vmin..vmax", "\n", "# else:", "\n", "#     # Avoid 0-division", "\n", "#     value = value*0.", "\n", "# # squeeze last dim if it exists", "\n", "# value = value.squeeze()", "\n", "\n", "cmapper", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmap", ")", "\n", "value", "=", "cmapper", "(", "value", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "bytes", "=", "True", ")", "# (nxmx4)", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.get_depth_manually": [[501, 511], ["depth_file.split", "os.path.join", "numpy.load", "depth_split[].split"], "methods", ["None"], ["", "def", "get_depth_manually", "(", "self", ",", "depth_file", ")", ":", "\n", "        ", "root_dir", "=", "'/vulcanscratch/koutilya/kitti/Depth_from_velodyne_npy/'", "# path to velodyne data converted to numpy", "\n", "depth_split", "=", "depth_file", ".", "split", "(", "'/'", ")", "\n", "main_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'val'", ",", "depth_split", "[", "0", "]", ",", "depth_split", "[", "1", "]", ",", "depth_split", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.npy'", ")", "\n", "depth", "=", "np", ".", "load", "(", "main_file", ")", "\n", "# root_dir = '/vulcanscratch/koutilya/kitti/Depth_from_velodyne/'", "\n", "# main_file = osp.join(root_dir, 'test', depth_split[0], depth_split[1], depth_split[-1].split('.')[0]+'.png')", "\n", "# depth = Image.open(main_file)", "\n", "# depth = np.array(depth, dtype=np.float32) / 255.0", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Solver.Solver.Validate": [[512, 604], ["Solver.Solver.netG.eval", "Solver.Solver.netT.eval", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "Solver.Solver.netG.train", "Solver.Solver.netT.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "print", "print", "Solver.Solver.writer.add_scalar", "Solver.Solver.writer.add_scalar", "Solver.Solver.writer.add_scalar", "Solver.Solver.writer.add_scalar", "Solver.Solver.writer.add_scalar", "Solver.Solver.writer.add_scalar", "Solver.Solver.writer.add_scalar", "numpy.zeros.mean", "Solver.Solver.save_model", "numpy.zeros.mean", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "Solver.Solver.netG", "Solver.Solver.netT", "Solver.Solver.tensor2im", "range", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "Solver.Solver.real_val_image.cuda", "Solver.Solver.netG", "Solver.Solver.netT", "Solver.Solver.colorize", "Solver.Solver.writer.add_image", "Solver.Solver.writer.add_image", "Solver.Solver.get_depth_manually", "cv2.resize", "numpy.logical_and", "numpy.zeros", "numpy.logical_and", "Solver.Solver.compute_errors", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "Solver.Solver.writer.add_image", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "numpy.array().astype", "torchvision.utils.make_grid", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "numpy.array().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "Solver.Solver.squeeze", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.train", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.train", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.save_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.tensor2im", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.colorize", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_depth_manually", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.compute_errors"], ["", "def", "Validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "self", ".", "netT", ".", "eval", "(", ")", "\n", "\n", "num_samples", "=", "len", "(", "self", ".", "real_val_dataset", ")", "\n", "abs_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "sq_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse_log", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a1", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a2", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a3", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "data", ",", "depth_filenames", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "real_val_dataloader", ")", ")", ":", "\n", "                ", "self", ".", "real_val_image", "=", "data", "[", "'left_img'", "]", "#, data['depth'] # self.real_depth is a numpy array ", "\n", "self", ".", "real_val_image", "=", "Variable", "(", "self", ".", "real_val_image", ".", "cuda", "(", ")", ")", "\n", "_", ",", "real_recon_image", "=", "self", ".", "netG", "(", "self", ".", "real_val_image", ")", "\n", "\n", "depth", "=", "self", ".", "netT", "(", "real_recon_image", ")", "\n", "depth", "=", "depth", "[", "-", "1", "]", "\n", "depth_numpy", "=", "self", ".", "tensor2im", "(", "depth", ")", "# 0-80m", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "if", "self", ".", "flag", ":", "\n", "                        ", "self", ".", "writer", ".", "add_image", "(", "'Real Images'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "(", "1.0", "+", "self", ".", "real_val_sample_images", ")", "/", "2.0", ",", "nrow", "=", "4", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "flag", "=", "False", "\n", "\n", "", "_", ",", "self", ".", "real_val_sample_translated_images", "=", "self", ".", "netG", "(", "self", ".", "real_val_sample_images", ")", "\n", "\n", "sample_depth", "=", "self", ".", "netT", "(", "self", ".", "real_val_sample_translated_images", ")", "\n", "sample_depth", "=", "sample_depth", "[", "-", "1", "]", "\n", "sample_depth", "=", "sample_depth", ".", "data", "\n", "sample_depth", "=", "(", "1.0", "+", "sample_depth", ")", "/", "2.0", "\n", "sample_depth_colorized", "=", "self", ".", "colorize", "(", "sample_depth", ",", "cmap", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'plasma'", ")", ")", "\n", "sample_depth_colorized", "=", "torch", ".", "from_numpy", "(", "sample_depth_colorized", ".", "squeeze", "(", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "self", ".", "writer", ".", "add_image", "(", "'Real Translated Images'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "(", "1.0", "+", "self", ".", "real_val_sample_translated_images", ")", "/", "2.0", ",", "nrow", "=", "4", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'Predicted Depth'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "sample_depth_colorized", ",", "nrow", "=", "4", ")", ",", "self", ".", "iteration", ")", "\n", "\n", "", "for", "t_id", "in", "range", "(", "depth_numpy", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "t_id_global", "=", "(", "i", "*", "self", ".", "batch_size", ")", "+", "t_id", "\n", "# _,_,_,ground_depth = self.real_val_dataset.read_data(self.real_val_dataset.files[(i*self.batch_size)+t_id])", "\n", "h", ",", "w", "=", "self", ".", "real_val_image", ".", "shape", "[", "2", "]", ",", "self", ".", "real_val_image", ".", "shape", "[", "3", "]", "\n", "datafiles1", "=", "self", ".", "real_val_dataset", ".", "files", "[", "t_id_global", "]", "\n", "ground_depth", "=", "self", ".", "get_depth_manually", "(", "datafiles1", "[", "'depth'", "]", ")", "\n", "height", ",", "width", "=", "ground_depth", ".", "shape", "\n", "\n", "predicted_depth", "=", "cv2", ".", "resize", "(", "depth_numpy", "[", "t_id", "]", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "predicted_depth", "[", "predicted_depth", "<", "1.0", "]", "=", "1.0", "\n", "predicted_depth", "[", "predicted_depth", ">", "50.0", "]", "=", "50.0", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "ground_depth", ">", "1.0", ",", "ground_depth", "<", "50.0", ")", "\n", "\n", "# crop used by Garg ECCV16", "\n", "if", "self", ".", "garg_crop", ":", "\n", "                        ", "self", ".", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "height", ",", "0.99189189", "*", "height", ",", "\n", "0.03594771", "*", "width", ",", "0.96405229", "*", "width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# crop we found by trail and error to reproduce Eigen NIPS14 results", "\n", "", "elif", "self", ".", "eigen_crop", ":", "\n", "                        ", "self", ".", "crop", "=", "np", ".", "array", "(", "[", "0.3324324", "*", "height", ",", "0.91351351", "*", "height", ",", "\n", "0.0359477", "*", "width", ",", "0.96405229", "*", "width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "self", ".", "crop", "[", "0", "]", ":", "self", ".", "crop", "[", "1", "]", ",", "self", ".", "crop", "[", "2", "]", ":", "self", ".", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "\n", "abs_rel", "[", "t_id_global", "]", ",", "sq_rel", "[", "t_id_global", "]", ",", "rmse", "[", "t_id_global", "]", ",", "rmse_log", "[", "t_id_global", "]", ",", "a1", "[", "t_id_global", "]", ",", "a2", "[", "t_id_global", "]", ",", "a3", "[", "t_id_global", "]", "=", "self", ".", "compute_errors", "(", "ground_depth", "[", "mask", "]", ",", "predicted_depth", "[", "mask", "]", ")", "\n", "\n", "", "", "print", "(", "'{:>10},{:>10},{:>10},{:>10},{:>10},{:>10},{:>10}'", ".", "format", "(", "'abs_rel'", ",", "'sq_rel'", ",", "'rmse'", ",", "'rmse_log'", ",", "'a1'", ",", "'a2'", ",", "'a3'", ")", ")", "\n", "print", "(", "'{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f}'", "\n", ".", "format", "(", "abs_rel", ".", "mean", "(", ")", ",", "sq_rel", ".", "mean", "(", ")", ",", "rmse", ".", "mean", "(", ")", ",", "rmse_log", ".", "mean", "(", ")", ",", "a1", ".", "mean", "(", ")", ",", "a2", ".", "mean", "(", ")", ",", "a3", ".", "mean", "(", ")", ")", ")", "\n", "\n", "##################################################", "\n", "### Tensorboard Logging", "\n", "##################################################            ", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/Abs_Rel'", ",", "abs_rel", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/Sq_Rel'", ",", "sq_rel", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/RMSE'", ",", "rmse", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/RMSE_log'", ",", "rmse_log", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/del<1.25'", ",", "a1", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/del<1.25^2'", ",", "a2", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/del<1.25^3'", ",", "a3", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "\n", "", "if", "self", ".", "best_a1", "<", "a1", ".", "mean", "(", ")", ":", "\n", "# Found a new best model", "\n", "            ", "self", ".", "save_model", "(", "model_status", "=", "'best'", ")", "\n", "self", ".", "best_a1", "=", "a1", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "self", ".", "netT", ".", "train", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.__init__": [[29, 77], ["random.seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed_all", "networks.all_networks.define_G", "networks.all_networks.define_G", "Validation_specific_iter.Solver.netG.cuda", "Validation_specific_iter.Solver.netT.cuda", "torch.nn.MSELoss", "torch.nn.L1Loss", "Validation_specific_iter.Solver.netG_loss_fn.cuda", "Validation_specific_iter.Solver.netT_loss_fn.cuda", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "Validation_specific_iter.Solver.get_validation_data", "float", "Dataloaders.RandomImgAugment", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "Dataloaders.Kitti_dataloader.DepthToTensor"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_validation_data"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "'.'", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# Seed", "\n", "self", ".", "seed", "=", "1729", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "\n", "\n", "# Initialize networks", "\n", "self", ".", "netG", "=", "all_networks", ".", "define_G", "(", "3", ",", "3", ",", "64", ",", "9", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'ResNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ")", "\n", "\n", "self", ".", "netT", "=", "all_networks", ".", "define_G", "(", "3", ",", "1", ",", "64", ",", "4", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'UNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ",", "0.1", ")", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "self", ".", "netT", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Loss", "\n", "self", ".", "netG_loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "netG_loss_fn", "=", "self", ".", "netG_loss_fn", ".", "cuda", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "self", ".", "netT_loss_fn", ".", "cuda", "(", ")", "\n", "\n", "# Training Configuration details", "\n", "self", ".", "batch_size", "=", "16", "\n", "self", ".", "iteration", "=", "None", "\n", "# Transforms", "\n", "joint_transform_list", "=", "[", "transf", ".", "RandomImgAugment", "(", "no_flip", "=", "False", ",", "no_rotation", "=", "False", ",", "no_augment", "=", "False", ",", "size", "=", "(", "192", ",", "640", ")", ")", "]", "\n", "img_transform_list", "=", "[", "tr", ".", "ToTensor", "(", ")", ",", "tr", ".", "Normalize", "(", "[", ".5", ",", ".5", ",", ".5", "]", ",", "[", ".5", ",", ".5", ",", ".5", "]", ")", "]", "\n", "self", ".", "joint_transform", "=", "tr", ".", "Compose", "(", "joint_transform_list", ")", "\n", "self", ".", "img_transform", "=", "tr", ".", "Compose", "(", "img_transform_list", ")", "\n", "self", ".", "depth_transform", "=", "tr", ".", "Compose", "(", "[", "DepthToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "saved_models_dir", "=", "'saved_models'", "\n", "\n", "# Initialize Data", "\n", "self", ".", "get_validation_data", "(", ")", "\n", "\n", "self", ".", "garg_crop", "=", "True", "\n", "self", ".", "eigen_crop", "=", "False", "\n", "self", ".", "flag", "=", "True", "\n", "\n", "self", ".", "opt", ".", "max_depth", "=", "float", "(", "self", ".", "opt", ".", "max_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.loop_iter": [[78, 82], ["iter"], "methods", ["None"], ["", "def", "loop_iter", "(", "self", ",", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "data", "in", "iter", "(", "loader", ")", ":", "\n", "                ", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.colorize": [[83, 116], ["matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap.", "matplotlib.cm.get_cmap."], "methods", ["None"], ["", "", "", "def", "colorize", "(", "self", ",", "value", ",", "vmin", "=", "None", ",", "vmax", "=", "None", ",", "cmap", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        A utility function for Torch/Numpy that maps a grayscale image to a matplotlib\n        colormap for use with TensorBoard image summaries.\n        By default it will normalize the input value to the range 0..1 before mapping\n        to a grayscale colormap.\n        Arguments:\n        - value: 2D Tensor of shape [height, width] or 3D Tensor of shape\n            [height, width, 1].\n        - vmin: the minimum value of the range used for normalization.\n            (Default: value minimum)\n        - vmax: the maximum value of the range used for normalization.\n            (Default: value maximum)\n        - cmap: a valid cmap named for use with matplotlib's `get_cmap`.\n            (Default: Matplotlib default colormap)\n        \n        Returns a 4D uint8 tensor of shape [height, width, 4].\n        \"\"\"", "\n", "\n", "# # normalize", "\n", "# vmin = value.min() if vmin is None else vmin", "\n", "# vmax = value.max() if vmax is None else vmax", "\n", "# if vmin!=vmax:", "\n", "#     value = (value - vmin) / (vmax - vmin) # vmin..vmax", "\n", "# else:", "\n", "#     # Avoid 0-division", "\n", "#     value = value*0.", "\n", "# # squeeze last dim if it exists", "\n", "# value = value.squeeze()", "\n", "\n", "cmapper", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmap", ")", "\n", "value", "=", "cmapper", "(", "value", ",", "bytes", "=", "True", ")", "# (nxmx4)", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.compute_errors": [[117, 140], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt.mean", "numpy.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "methods", ["None"], ["", "def", "compute_errors", "(", "self", ",", "ground_truth", ",", "predication", ")", ":", "\n", "\n", "# accuracy", "\n", "        ", "threshold", "=", "np", ".", "maximum", "(", "(", "ground_truth", "/", "predication", ")", ",", "(", "predication", "/", "ground_truth", ")", ")", "\n", "a1", "=", "(", "threshold", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "threshold", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "threshold", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "#MSE", "\n", "rmse", "=", "(", "ground_truth", "-", "predication", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "#MSE(log)", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "ground_truth", ")", "-", "np", ".", "log", "(", "predication", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "# Abs Relative difference", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "ground_truth", "-", "predication", ")", "/", "ground_truth", ")", "\n", "\n", "# Squared Relative difference", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "ground_truth", "-", "predication", ")", "**", "2", ")", "/", "ground_truth", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.get_validation_data": [[142, 156], ["Dataloaders.VKitti_dataloader.VKitti", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "torch.autograd.Variable", "Dataloaders.Kitti_dataloader.KittiDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "torch.autograd.Variable", "iter", "Validation_specific_iter.Solver.syn_val_sample_images.cuda", "iter", "Validation_specific_iter.Solver.real_val_sample_images.cuda"], "methods", ["None"], ["", "def", "get_validation_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "syn_val_dataset", "=", "syn_dataset", "(", "train", "=", "False", ")", "\n", "self", ".", "syn_val_dataloader", "=", "DataLoader", "(", "self", ".", "syn_val_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "syn_val_sample_dataloader", "=", "DataLoader", "(", "self", ".", "syn_val_dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "syn_val_sample_images", ",", "self", ".", "syn_label", "=", "next", "(", "iter", "(", "self", ".", "syn_val_sample_dataloader", ")", ")", "\n", "self", ".", "syn_val_sample_images", "=", "Variable", "(", "self", ".", "syn_val_sample_images", ".", "cuda", "(", ")", ")", "\n", "self", ".", "syn_label", "=", "(", "1.0", "+", "self", ".", "syn_label", ")", "/", "2.0", "\n", "\n", "self", ".", "real_val_dataset", "=", "real_dataset", "(", "data_file", "=", "'test.txt'", ",", "phase", "=", "'test'", ",", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", "\n", "self", ".", "real_val_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_val_sample_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_val_sample_images", ",", "self", ".", "real_val_sample_filenames", "=", "next", "(", "iter", "(", "self", ".", "real_val_sample_dataloader", ")", ")", "\n", "self", ".", "real_val_sample_images", "=", "self", ".", "real_val_sample_images", "[", "'left_img'", "]", "\n", "self", ".", "real_val_sample_images", "=", "Variable", "(", "self", ".", "real_val_sample_images", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.load_prev_model": [[157, 170], ["glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "saved_iters.index", "print", "torch.load", "Validation_specific_iter.Solver.netG.load_state_dict", "Validation_specific_iter.Solver.netT.load_state_dict", "int", "max", "str", "[].split", "s.split"], "methods", ["None"], ["", "def", "load_prev_model", "(", "self", ")", ":", "\n", "        ", "saved_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ",", "'Depth_Estimator_WI_geom_bicubic_da-'", "+", "str", "(", "self", ".", "iteration", ")", "+", "'.pth.tar'", ")", ")", "\n", "if", "len", "(", "saved_models", ")", ">", "0", ":", "\n", "            ", "saved_iters", "=", "[", "int", "(", "s", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "s", "in", "saved_models", "]", "\n", "recent_id", "=", "saved_iters", ".", "index", "(", "max", "(", "saved_iters", ")", ")", "\n", "saved_model", "=", "saved_models", "[", "recent_id", "]", "\n", "print", "(", "saved_model", ")", "\n", "model_state", "=", "torch", ".", "load", "(", "saved_model", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "model_state", "[", "'netG_state_dict'", "]", ")", "\n", "self", ".", "netT", ".", "load_state_dict", "(", "model_state", "[", "'netT_state_dict'", "]", ")", "\n", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.tensor2im": [[171, 175], ["depth.cpu().data.float().numpy().transpose", "depth.cpu().data.float().numpy", "depth.cpu().data.float", "depth.cpu"], "methods", ["None"], ["", "def", "tensor2im", "(", "self", ",", "depth", ")", ":", "\n", "        ", "depth_numpy", "=", "depth", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "depth_numpy", "=", "(", "depth_numpy", "+", "1.0", ")", "/", "2.0", "# Unnormalize between 0 and 1", "\n", "return", "depth_numpy", "*", "80.0", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.tensor2im_only": [[176, 180], ["depth.cpu().data.float().numpy().transpose", "depth.cpu().data.float().numpy", "depth.cpu().data.float", "depth.cpu"], "methods", ["None"], ["", "def", "tensor2im_only", "(", "self", ",", "depth", ")", ":", "\n", "        ", "depth_numpy", "=", "depth", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "depth_numpy", "=", "(", "depth_numpy", "+", "1.0", ")", "/", "2.0", "# Unnormalize between 0 and 1", "\n", "return", "depth_numpy", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.Validate_all": [[181, 185], ["range", "Validation_specific_iter.Solver.load_prev_model", "Validation_specific_iter.Solver.Validation"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.Validation"], ["", "def", "Validate_all", "(", "self", ")", ":", "\n", "        ", "for", "self", ".", "iteration", "in", "range", "(", "self", ".", "iteration", ",", "1000", "+", "self", ".", "iteration", ",", "1000", ")", ":", "\n", "            ", "self", ".", "load_prev_model", "(", ")", "\n", "self", ".", "Validation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.get_depth_manually": [[187, 198], ["depth_file.split", "os.join", "os.join", "numpy.load", "depth_split[].split"], "methods", ["None"], ["", "", "def", "get_depth_manually", "(", "self", ",", "depth_file", ")", ":", "\n", "        ", "root_dir", "=", "'/vulcanscratch/koutilya/kitti/Depth_from_velodyne_npy/'", "\n", "# root_dir = '/vulcanscratch/koutilya/kitti/Depth_from_velodyne/'", "\n", "depth_split", "=", "depth_file", ".", "split", "(", "'/'", ")", "\n", "# main_file = osp.join(root_dir, 'test', depth_split[0], depth_split[1], depth_split[-1].split('.')[0]+'.png')", "\n", "main_file", "=", "osp", ".", "join", "(", "root_dir", ",", "'test'", ",", "depth_split", "[", "0", "]", ",", "depth_split", "[", "1", "]", ",", "depth_split", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.npy'", ")", "\n", "\n", "depth", "=", "np", ".", "load", "(", "main_file", ")", "\n", "# depth = Image.open(main_file)", "\n", "# depth = np.array(depth, dtype=np.float32) / 255.0", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.Validation_extract_images": [[199, 270], ["Validation_specific_iter.Solver.load_prev_model", "torch.no_grad", "Validation_specific_iter.Solver.netG", "Validation_specific_iter.Solver.netG", "Validation_specific_iter.Solver.netT", "Validation_specific_iter.Solver.netT", "Validation_specific_iter.Solver.tensor2im_only", "Validation_specific_iter.Solver.tensor2im_only", "Validation_specific_iter.Solver.colorize", "Validation_specific_iter.Solver.colorize", "Validation_specific_iter.Solver.colorize", "syn_val_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu().data.numpy().transpose", "syn_val_translated_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu().data.numpy().transpose", "real_val_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu().data.numpy().transpose", "real_val_translated_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu().data.numpy().transpose", "range", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "os.exists", "os.exists", "os.system", "os.system", "os.system", "os.system", "scipy.misc.imsave", "scipy.misc.imsave", "scipy.misc.imsave", "scipy.misc.imsave", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "os.join", "os.join", "syn_val_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu().data.numpy", "syn_val_translated_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu().data.numpy", "real_val_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu().data.numpy", "real_val_translated_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu().data.numpy", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "pred_depth.squeeze().astype", "os.join", "os.join", "pred_depth.squeeze().astype", "os.join", "os.join", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str", "os.join", "os.join", "str", "str", "str", "str", "str", "str", "Validation_specific_iter.Solver.squeeze", "Validation_specific_iter.Solver.squeeze", "Validation_specific_iter.Solver.squeeze", "str", "pred_depth.squeeze", "pred_depth.squeeze", "syn_val_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu", "syn_val_translated_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu", "real_val_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu", "real_val_translated_images.cpu().data.numpy().transpose.cpu().data.numpy().transpose.cpu", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.tensor2im_only", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.tensor2im_only", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.colorize", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.colorize", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.colorize"], ["", "def", "Validation_extract_images", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_prev_model", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "self", ".", "real_val_sample_translated_images", "=", "self", ".", "netG", "(", "self", ".", "real_val_sample_images", ")", "\n", "_", ",", "self", ".", "syn_val_sample_translated_images", "=", "self", ".", "netG", "(", "self", ".", "syn_val_sample_images", ")", "\n", "sample_depth", "=", "self", ".", "netT", "(", "self", ".", "real_val_sample_translated_images", ")", "\n", "syn_sample_depth", "=", "self", ".", "netT", "(", "self", ".", "syn_val_sample_translated_images", ")", "\n", "\n", "sample_depth", "=", "sample_depth", "[", "-", "1", "]", "\n", "###### code to save predicted depth maps - Validation_specific_test_examples", "\n", "real_pred_depth_all", "=", "self", ".", "tensor2im_only", "(", "sample_depth", ")", "# 0-1", "\n", "real_pred_depth_all", "*=", "65535", "\n", "real_pred_depth_all", "[", "real_pred_depth_all", "<", "1e-3", "]", "=", "1e-3", "\n", "######", "\n", "sample_depth", "=", "sample_depth", ".", "data", "\n", "sample_depth", "=", "(", "1.0", "+", "sample_depth", ")", "/", "2.0", "\n", "\n", "syn_sample_depth", "=", "syn_sample_depth", "[", "-", "1", "]", "\n", "###### code to save predicted depth maps - Validation_specific_test_examples", "\n", "syn_pred_depth_all", "=", "self", ".", "tensor2im_only", "(", "syn_sample_depth", ")", "# 0-1", "\n", "syn_pred_depth_all", "*=", "65535", "\n", "syn_pred_depth_all", "[", "syn_pred_depth_all", "<", "1e-3", "]", "=", "1e-3", "\n", "######", "\n", "syn_sample_depth", "=", "syn_sample_depth", ".", "data", "\n", "syn_sample_depth", "=", "(", "1.0", "+", "syn_sample_depth", ")", "/", "2.0", "\n", "\n", "sample_depth_colorized", "=", "self", ".", "colorize", "(", "sample_depth", ",", "cmap", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'plasma'", ")", ")", "\n", "sample_depth_colorized", "=", "torch", ".", "from_numpy", "(", "sample_depth_colorized", ".", "squeeze", "(", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "syn_sample_depth_colorized", "=", "self", ".", "colorize", "(", "syn_sample_depth", ",", "cmap", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'plasma'", ")", ")", "\n", "syn_sample_depth_colorized", "=", "torch", ".", "from_numpy", "(", "syn_sample_depth_colorized", ".", "squeeze", "(", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "syn_label_colorized", "=", "self", ".", "colorize", "(", "self", ".", "syn_label", ",", "cmap", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'plasma'", ")", ")", "\n", "syn_label_colorized", "=", "torch", ".", "from_numpy", "(", "syn_label_colorized", ".", "squeeze", "(", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "# if not self.opt.save_images:", "\n", "#     self.writer.add_image('Real Images',torchvision.utils.make_grid((1.0+self.real_val_sample_images)/2.0,nrow=4), self.iteration)", "\n", "#     self.writer.add_image('Syn Images',torchvision.utils.make_grid((1.0+self.syn_val_sample_images)/2.0,nrow=4), self.iteration)", "\n", "#     self.writer.add_image('Real Translated Images',torchvision.utils.make_grid((1.0+self.real_val_sample_translated_images)/2.0,nrow=4), self.iteration)", "\n", "#     self.writer.add_image('Syn Translated Images',torchvision.utils.make_grid((1.0+self.syn_val_sample_translated_images)/2.0,nrow=4), self.iteration)", "\n", "#     self.writer.add_image('Predicted Depth',torchvision.utils.make_grid(sample_depth_colorized,nrow=4), self.iteration)", "\n", "#     self.writer.add_image('Syn Predicted Depth',torchvision.utils.make_grid(syn_sample_depth_colorized,nrow=4), self.iteration)", "\n", "#     self.writer.add_image('Syn GT Depth',torchvision.utils.make_grid(syn_label_colorized,nrow=4), self.iteration)", "\n", "\n", "#     self.writer.close()", "\n", "\n", "", "if", "self", ".", "opt", ".", "save_images", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'Results'", ",", "str", "(", "self", ".", "iteration", ")", ")", ")", ":", "\n", "                ", "os", ".", "system", "(", "'mkdir -p '", "+", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'Results'", ",", "str", "(", "self", ".", "iteration", ")", ")", ")", "\n", "\n", "", "syn_val_images", "=", "(", "1.0", "+", "self", ".", "syn_val_sample_images", ")", "/", "2.0", "\n", "syn_val_translated_images", "=", "(", "1.0", "+", "self", ".", "syn_val_sample_translated_images", ")", "/", "2.0", "\n", "syn_val_images", "=", "syn_val_images", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "syn_val_translated_images", "=", "syn_val_translated_images", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "real_val_images", "=", "(", "1.0", "+", "self", ".", "real_val_sample_images", ")", "/", "2.0", "\n", "real_val_translated_images", "=", "(", "1.0", "+", "self", ".", "real_val_sample_translated_images", ")", "/", "2.0", "\n", "real_val_images", "=", "real_val_images", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "real_val_translated_images", "=", "real_val_translated_images", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "syn_val_sample_images", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "imsave", "(", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'Results'", ",", "str", "(", "self", ".", "iteration", ")", ",", "'Syn_'", "+", "str", "(", "k", ")", "+", "'.jpg'", ")", ",", "syn_val_images", "[", "k", "]", ")", "\n", "imsave", "(", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'Results'", ",", "str", "(", "self", ".", "iteration", ")", ",", "'Syn_translated_'", "+", "str", "(", "k", ")", "+", "'.jpg'", ")", ",", "syn_val_translated_images", "[", "k", "]", ")", "\n", "imsave", "(", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'Results'", ",", "str", "(", "self", ".", "iteration", ")", ",", "'Real_'", "+", "str", "(", "k", ")", "+", "'.jpg'", ")", ",", "real_val_images", "[", "k", "]", ")", "\n", "imsave", "(", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'Results'", ",", "str", "(", "self", ".", "iteration", ")", ",", "'Real_translated_'", "+", "str", "(", "k", ")", "+", "'.jpg'", ")", ",", "real_val_translated_images", "[", "k", "]", ")", "\n", "\n", "pred_depth", "=", "real_pred_depth_all", "[", "k", "]", "\n", "pred_img", "=", "Image", ".", "fromarray", "(", "pred_depth", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "'I'", ")", "\n", "pred_img", ".", "save", "(", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'Results'", ",", "str", "(", "self", ".", "iteration", ")", ",", "'Real_predicted_depth_'", "+", "str", "(", "k", ")", "+", "'.png'", ")", ")", "\n", "\n", "pred_depth", "=", "syn_pred_depth_all", "[", "k", "]", "\n", "pred_img", "=", "Image", ".", "fromarray", "(", "pred_depth", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "'I'", ")", "\n", "pred_img", ".", "save", "(", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'Results'", ",", "str", "(", "self", ".", "iteration", ")", ",", "'Syn_predicted_depth_'", "+", "str", "(", "k", ")", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.validate": [[273, 281], ["Validation_specific_iter.Solver.netG.eval", "Validation_specific_iter.Solver.netT.eval", "Validation_specific_iter.Solver.Validation_extract_images", "Validation_specific_iter.Solver.Validate_all"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.Validation_extract_images", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.Validate_all"], ["", "", "", "def", "validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "self", ".", "netT", ".", "eval", "(", ")", "\n", "self", ".", "iteration", "=", "self", ".", "opt", ".", "iter", "\n", "if", "self", ".", "opt", ".", "gen_images", ":", "\n", "            ", "self", ".", "Validation_extract_images", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Validate_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.Solver.Validation": [[282, 351], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.no_grad", "tqdm.tqdm.tqdm", "print", "print", "enumerate", "torch.autograd.Variable", "Validation_specific_iter.Solver.netG", "Validation_specific_iter.Solver.netT", "Validation_specific_iter.Solver.tensor2im", "range", "Validation_specific_iter.Solver.real_val_image.cuda", "Validation_specific_iter.Solver.get_depth_manually", "cv2.resize", "numpy.logical_and", "numpy.zeros", "numpy.logical_and", "Validation_specific_iter.Solver.compute_errors", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.tensor2im", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_depth_manually", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.compute_errors"], ["", "", "def", "Validation", "(", "self", ")", ":", "\n", "        ", "num_samples", "=", "len", "(", "self", ".", "real_val_dataset", ")", "\n", "abs_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "sq_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse_log", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a1", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a2", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a3", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "data", ",", "depth_filenames", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "real_val_dataloader", ")", ")", ":", "\n", "                ", "self", ".", "real_val_image", "=", "data", "[", "'left_img'", "]", "#, data['depth'] # self.real_depth is a numpy array ", "\n", "self", ".", "real_val_image", "=", "Variable", "(", "self", ".", "real_val_image", ".", "cuda", "(", ")", ")", "\n", "\n", "_", ",", "self", ".", "real_translated_image", "=", "self", ".", "netG", "(", "self", ".", "real_val_image", ")", "\n", "\n", "depth", "=", "self", ".", "netT", "(", "self", ".", "real_translated_image", ")", "\n", "# depth = self.netT(self.real_val_image)", "\n", "\n", "depth", "=", "depth", "[", "-", "1", "]", "\n", "depth_numpy", "=", "self", ".", "tensor2im", "(", "depth", ")", "# 0-80m", "\n", "\n", "for", "t_id", "in", "range", "(", "depth_numpy", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "t_id_global", "=", "(", "i", "*", "self", ".", "batch_size", ")", "+", "t_id", "\n", "# _,_,_,ground_depth = self.real_val_dataset.read_data(self.real_val_dataset.files[(i*self.batch_size)+t_id])", "\n", "h", ",", "w", "=", "self", ".", "real_val_image", ".", "shape", "[", "2", "]", ",", "self", ".", "real_val_image", ".", "shape", "[", "3", "]", "\n", "datafiles1", "=", "self", ".", "real_val_dataset", ".", "files", "[", "t_id_global", "]", "\n", "# ground_depth = self.kitti.get_depth(osp.join(self.real_val_dataset.root, datafiles1['cam_intrin']),", "\n", "#             osp.join(self.real_val_dataset.root, datafiles1['depth']), [h, w])", "\n", "# ground_depth = ground_depth.astype(np.float32)", "\n", "ground_depth", "=", "self", ".", "get_depth_manually", "(", "datafiles1", "[", "'depth'", "]", ")", "\n", "height", ",", "width", "=", "ground_depth", ".", "shape", "\n", "\n", "predicted_depth", "=", "cv2", ".", "resize", "(", "depth_numpy", "[", "t_id", "]", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# save_pred_depth = predicted_depth * 65535/80.0", "\n", "# save_pred_depth[save_pred_depth<1e-3] = 1e-3", "\n", "\n", "# save_pred_img = Image.fromarray(save_pred_depth.astype(np.int32), 'I')", "\n", "# save_pred_img.save('%s/%05d_pred.png'%('results', t_id_global))", "\n", "\n", "predicted_depth", "[", "predicted_depth", "<", "self", ".", "opt", ".", "min_depth", "]", "=", "self", ".", "opt", ".", "min_depth", "\n", "predicted_depth", "[", "predicted_depth", ">", "self", ".", "opt", ".", "max_depth", "]", "=", "self", ".", "opt", ".", "max_depth", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "ground_depth", ">", "self", ".", "opt", ".", "min_depth", ",", "ground_depth", "<", "self", ".", "opt", ".", "max_depth", ")", "\n", "\n", "# crop used by Garg ECCV16", "\n", "if", "self", ".", "garg_crop", ":", "\n", "                        ", "self", ".", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "height", ",", "0.99189189", "*", "height", ",", "\n", "0.03594771", "*", "width", ",", "0.96405229", "*", "width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# crop we found by trail and error to reproduce Eigen NIPS14 results", "\n", "", "elif", "self", ".", "eigen_crop", ":", "\n", "                        ", "self", ".", "crop", "=", "np", ".", "array", "(", "[", "0.3324324", "*", "height", ",", "0.91351351", "*", "height", ",", "\n", "0.0359477", "*", "width", ",", "0.96405229", "*", "width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "self", ".", "crop", "[", "0", "]", ":", "self", ".", "crop", "[", "1", "]", ",", "self", ".", "crop", "[", "2", "]", ":", "self", ".", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "\n", "abs_rel", "[", "t_id_global", "]", ",", "sq_rel", "[", "t_id_global", "]", ",", "rmse", "[", "t_id_global", "]", ",", "rmse_log", "[", "t_id_global", "]", ",", "a1", "[", "t_id_global", "]", ",", "a2", "[", "t_id_global", "]", ",", "a3", "[", "t_id_global", "]", "=", "self", ".", "compute_errors", "(", "ground_depth", "[", "mask", "]", ",", "predicted_depth", "[", "mask", "]", ")", "\n", "\n", "# print('{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f}'", "\n", "#     .format(t_id, abs_rel[t_id], sq_rel[t_id], rmse[t_id], rmse_log[t_id], a1[t_id], a2[t_id], a3[t_id]))", "\n", "\n", "", "", "print", "(", "'{:>10},{:>10},{:>10},{:>10},{:>10},{:>10},{:>10}'", ".", "format", "(", "'abs_rel'", ",", "'sq_rel'", ",", "'rmse'", ",", "'rmse_log'", ",", "'a1'", ",", "'a2'", ",", "'a3'", ")", ")", "\n", "print", "(", "'{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f}'", "\n", ".", "format", "(", "abs_rel", ".", "mean", "(", ")", ",", "sq_rel", ".", "mean", "(", ")", ",", "rmse", ".", "mean", "(", ")", ",", "rmse_log", ".", "mean", "(", ")", ",", "a1", ".", "mean", "(", ")", ",", "a2", ".", "mean", "(", ")", ",", "a3", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation_specific_iter.get_params": [[373, 382], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "", "def", "get_params", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--iter'", ",", "default", "=", "999", ",", "type", "=", "int", ",", "help", "=", "\"Indicate what iteration of the saved model for Validation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_depth'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "\"Indicate what max depth for Validation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_depth'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "\"Indicate what min depth for Validation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gen_images'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Indicate if you want to save the real and syn image results\"", ")", "\n", "parser", ".", "add_argument", "(", "'--save_images'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Indicate if you want to save the real and syn image results to memory\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.__init__": [[27, 79], ["random.seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed_all", "networks.all_networks.define_G", "Validation.Solver.netG.cuda", "networks.all_networks.define_G", "Validation.Solver.netG.cuda", "Validation.Solver.netT.cuda", "torch.nn.MSELoss", "torch.nn.L1Loss", "Validation.Solver.netG_loss_fn.cuda", "Validation.Solver.netT_loss_fn.cuda", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "tensorboardX.SummaryWriter", "Validation.Solver.get_validation_data", "Dataloaders.RandomImgAugment", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Dataloaders.Kitti_dataloader.DepthToTensor"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_validation_data"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "'.'", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "val_string", "=", "'test'", "\n", "if", "self", ".", "opt", ".", "val", ":", "\n", "            ", "self", ".", "val_string", "=", "'val'", "\n", "\n", "# Seed", "\n", "", "self", ".", "seed", "=", "1729", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "\n", "\n", "# Initialize networks", "\n", "self", ".", "netG", "=", "all_networks", ".", "define_G", "(", "3", ",", "3", ",", "64", ",", "9", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'ResNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ")", "\n", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "netT", "=", "all_networks", ".", "define_G", "(", "3", ",", "1", ",", "64", ",", "4", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'UNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ",", "0.1", ")", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "self", ".", "netT", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Loss", "\n", "self", ".", "netG_loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "netG_loss_fn", "=", "self", ".", "netG_loss_fn", ".", "cuda", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "self", ".", "netT_loss_fn", ".", "cuda", "(", ")", "\n", "\n", "# Training Configuration details", "\n", "self", ".", "batch_size", "=", "16", "\n", "self", ".", "iteration", "=", "None", "\n", "# Transforms", "\n", "joint_transform_list", "=", "[", "transf", ".", "RandomImgAugment", "(", "no_flip", "=", "True", ",", "no_rotation", "=", "True", ",", "no_augment", "=", "True", ",", "size", "=", "(", "192", ",", "640", ")", ")", "]", "\n", "img_transform_list", "=", "[", "tr", ".", "ToTensor", "(", ")", ",", "tr", ".", "Normalize", "(", "[", ".5", ",", ".5", ",", ".5", "]", ",", "[", ".5", ",", ".5", ",", ".5", "]", ")", "]", "\n", "self", ".", "joint_transform", "=", "tr", ".", "Compose", "(", "joint_transform_list", ")", "\n", "self", ".", "img_transform", "=", "tr", ".", "Compose", "(", "img_transform_list", ")", "\n", "self", ".", "depth_transform", "=", "tr", ".", "Compose", "(", "[", "DepthToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'tensorboard_logs/Vkitti-kitti'", ",", "self", ".", "val_string", ")", ")", "\n", "self", ".", "saved_models_dir", "=", "'saved_models'", "\n", "\n", "# Initialize Data", "\n", "self", ".", "get_validation_data", "(", ")", "\n", "\n", "self", ".", "garg_crop", "=", "True", "\n", "self", ".", "eigen_crop", "=", "False", "\n", "self", ".", "flag", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.loop_iter": [[80, 84], ["iter"], "methods", ["None"], ["", "def", "loop_iter", "(", "self", ",", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "data", "in", "iter", "(", "loader", ")", ":", "\n", "                ", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.compute_errors": [[85, 108], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt.mean", "numpy.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "methods", ["None"], ["", "", "", "def", "compute_errors", "(", "self", ",", "ground_truth", ",", "predication", ")", ":", "\n", "\n", "# accuracy", "\n", "        ", "threshold", "=", "np", ".", "maximum", "(", "(", "ground_truth", "/", "predication", ")", ",", "(", "predication", "/", "ground_truth", ")", ")", "\n", "a1", "=", "(", "threshold", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "threshold", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "threshold", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "#MSE", "\n", "rmse", "=", "(", "ground_truth", "-", "predication", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "#MSE(log)", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "ground_truth", ")", "-", "np", ".", "log", "(", "predication", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "# Abs Relative difference", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "ground_truth", "-", "predication", ")", "/", "ground_truth", ")", "\n", "\n", "# Squared Relative difference", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "ground_truth", "-", "predication", ")", "**", "2", ")", "/", "ground_truth", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.get_validation_data": [[110, 120], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "torch.autograd.Variable", "Dataloaders.Kitti_dataloader.KittiDataset", "Dataloaders.Kitti_dataloader.KittiDataset", "iter", "Validation.Solver.real_val_sample_images.cuda"], "methods", ["None"], ["", "def", "get_validation_data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "val", ":", "\n", "            ", "self", ".", "real_val_dataset", "=", "real_dataset", "(", "data_file", "=", "'val.txt'", ",", "phase", "=", "'val'", ",", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "real_val_dataset", "=", "real_dataset", "(", "data_file", "=", "'test.txt'", ",", "phase", "=", "'test'", ",", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", "\n", "", "self", ".", "real_val_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_val_sample_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_val_sample_images", ",", "self", ".", "real_val_sample_filenames", "=", "next", "(", "iter", "(", "self", ".", "real_val_sample_dataloader", ")", ")", "\n", "self", ".", "real_val_sample_images", "=", "self", ".", "real_val_sample_images", "[", "'left_img'", "]", "\n", "self", ".", "real_val_sample_images", "=", "Variable", "(", "self", ".", "real_val_sample_images", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.load_prev_model": [[121, 134], ["glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "saved_iters.index", "torch.load", "Validation.Solver.netG.load_state_dict", "Validation.Solver.netT.load_state_dict", "int", "max", "str", "[].split", "s.split"], "methods", ["None"], ["", "def", "load_prev_model", "(", "self", ")", ":", "\n", "# saved_models = glob.glob(os.path.join(self.root_dir, self.saved_models_dir, 'Depth_Estimator_da-'+str(self.iteration)+'.pth.tar' ))", "\n", "        ", "saved_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "'/vulcanscratch/koutilya/projects/Domain_Adaptation/Common_Domain_Adaptation-Lighting/saved_models_ablation_studies'", ",", "'Depth_Estimator_WI_geom_new_VKitti_bicubic_da-'", "+", "str", "(", "self", ".", "iteration", ")", "+", "'.pth.tar'", ")", ")", "\n", "if", "len", "(", "saved_models", ")", ">", "0", ":", "\n", "            ", "saved_iters", "=", "[", "int", "(", "s", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "s", "in", "saved_models", "]", "\n", "recent_id", "=", "saved_iters", ".", "index", "(", "max", "(", "saved_iters", ")", ")", "\n", "saved_model", "=", "saved_models", "[", "recent_id", "]", "\n", "model_state", "=", "torch", ".", "load", "(", "saved_model", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "model_state", "[", "'netG_state_dict'", "]", ")", "\n", "self", ".", "netT", ".", "load_state_dict", "(", "model_state", "[", "'netT_state_dict'", "]", ")", "\n", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.tensor2im": [[135, 139], ["depth.cpu().data.float().numpy().transpose", "depth.cpu().data.float().numpy", "depth.cpu().data.float", "depth.cpu"], "methods", ["None"], ["", "def", "tensor2im", "(", "self", ",", "depth", ")", ":", "\n", "        ", "depth_numpy", "=", "depth", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "depth_numpy", "=", "(", "depth_numpy", "+", "1.0", ")", "/", "2.0", "# Unnormalize between 0 and 1", "\n", "return", "depth_numpy", "*", "80.0", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.colorize": [[140, 173], ["matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap.", "matplotlib.cm.get_cmap."], "methods", ["None"], ["", "def", "colorize", "(", "self", ",", "value", ",", "vmin", "=", "None", ",", "vmax", "=", "None", ",", "cmap", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        A utility function for Torch/Numpy that maps a grayscale image to a matplotlib\n        colormap for use with TensorBoard image summaries.\n        By default it will normalize the input value to the range 0..1 before mapping\n        to a grayscale colormap.\n        Arguments:\n        - value: 2D Tensor of shape [height, width] or 3D Tensor of shape\n            [height, width, 1].\n        - vmin: the minimum value of the range used for normalization.\n            (Default: value minimum)\n        - vmax: the maximum value of the range used for normalization.\n            (Default: value maximum)\n        - cmap: a valid cmap named for use with matplotlib's `get_cmap`.\n            (Default: Matplotlib default colormap)\n        \n        Returns a 4D uint8 tensor of shape [height, width, 4].\n        \"\"\"", "\n", "\n", "# # normalize", "\n", "# vmin = value.min() if vmin is None else vmin", "\n", "# vmax = value.max() if vmax is None else vmax", "\n", "# if vmin!=vmax:", "\n", "#     value = (value - vmin) / (vmax - vmin) # vmin..vmax", "\n", "# else:", "\n", "#     # Avoid 0-division", "\n", "#     value = value*0.", "\n", "# # squeeze last dim if it exists", "\n", "# value = value.squeeze()", "\n", "\n", "cmapper", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmap", ")", "\n", "value", "=", "cmapper", "(", "value", ",", "bytes", "=", "True", ")", "# (nxmx4)", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.Validate": [[174, 183], ["Validation.Solver.netG.eval", "Validation.Solver.netT.eval", "glob.glob", "max", "range", "Validation.Solver.writer.close", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Validation.Solver.load_prev_model", "Validation.Solver.Validation", "len"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.Validation"], ["", "def", "Validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "self", ".", "netT", ".", "eval", "(", ")", "\n", "saved_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ",", "'Depth_Estimator_da*.pth.tar'", ")", ")", "\n", "START_ITER", "=", "max", "(", "self", ".", "opt", ".", "start_iter", ",", "999", ")", "\n", "for", "self", ".", "iteration", "in", "range", "(", "START_ITER", ",", "1000", "*", "len", "(", "saved_models", ")", "+", "999", ",", "1000", ")", ":", "\n", "            ", "self", ".", "load_prev_model", "(", ")", "\n", "self", ".", "Validation", "(", ")", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.get_depth_manually": [[184, 198], ["depth_file.split", "numpy.load", "os.join", "os.join", "os.join", "os.join", "depth_split[].split", "depth_split[].split"], "methods", ["None"], ["", "def", "get_depth_manually", "(", "self", ",", "depth_file", ")", ":", "\n", "        ", "root_dir", "=", "'/vulcanscratch/koutilya/kitti/Depth_from_velodyne_npy/'", "# path to velodyne data converted to numpy", "\n", "# root_dir = '/vulcanscratch/koutilya/kitti/Depth_from_velodyne/'", "\n", "depth_split", "=", "depth_file", ".", "split", "(", "'/'", ")", "\n", "# main_file = osp.join(root_dir, 'test', depth_split[0], depth_split[1], depth_split[-1].split('.')[0]+'.png')", "\n", "if", "self", ".", "opt", ".", "val", ":", "\n", "            ", "main_file", "=", "osp", ".", "join", "(", "root_dir", ",", "'val'", ",", "depth_split", "[", "0", "]", ",", "depth_split", "[", "1", "]", ",", "depth_split", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.npy'", ")", "\n", "", "else", ":", "\n", "            ", "main_file", "=", "osp", ".", "join", "(", "root_dir", ",", "'test'", ",", "depth_split", "[", "0", "]", ",", "depth_split", "[", "1", "]", ",", "depth_split", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.npy'", ")", "\n", "\n", "", "depth", "=", "np", ".", "load", "(", "main_file", ")", "\n", "# depth = Image.open(main_file)", "\n", "# depth = np.array(depth, dtype=np.float32) / 255.0", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.Validation": [[199, 294], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.no_grad", "tqdm.tqdm.tqdm", "print", "print", "Validation.Solver.writer.add_scalar", "Validation.Solver.writer.add_scalar", "Validation.Solver.writer.add_scalar", "Validation.Solver.writer.add_scalar", "Validation.Solver.writer.add_scalar", "Validation.Solver.writer.add_scalar", "Validation.Solver.writer.add_scalar", "enumerate", "torch.autograd.Variable", "Validation.Solver.netG", "Validation.Solver.netT", "Validation.Solver.tensor2im", "range", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "Validation.Solver.real_val_image.cuda", "Validation.Solver.netG", "Validation.Solver.netT", "Validation.Solver.colorize", "Validation.Solver.writer.add_image", "Validation.Solver.writer.add_image", "Validation.Solver.get_depth_manually", "cv2.resize", "numpy.logical_and", "numpy.zeros", "numpy.logical_and", "Validation.Solver.compute_errors", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "Validation.Solver.writer.add_image", "torch.from_numpy().permute", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "numpy.array().astype", "torchvision.utils.make_grid", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "numpy.array().astype", "torch.from_numpy", "numpy.array", "Validation.Solver.squeeze", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.tensor2im", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.Solver.colorize", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_depth_manually", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.compute_errors"], ["", "def", "Validation", "(", "self", ")", ":", "\n", "        ", "num_samples", "=", "len", "(", "self", ".", "real_val_dataset", ")", "\n", "abs_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "sq_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse_log", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a1", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a2", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a3", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "data", ",", "depth_filenames", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "real_val_dataloader", ")", ")", ":", "\n", "                ", "self", ".", "real_val_image", "=", "data", "[", "'left_img'", "]", "#, data['depth'] # self.real_depth is a numpy array ", "\n", "self", ".", "real_val_image", "=", "Variable", "(", "self", ".", "real_val_image", ".", "cuda", "(", ")", ")", "\n", "\n", "_", ",", "self", ".", "real_translated_image", "=", "self", ".", "netG", "(", "self", ".", "real_val_image", ")", "\n", "\n", "depth", "=", "self", ".", "netT", "(", "self", ".", "real_translated_image", ")", "\n", "depth", "=", "depth", "[", "-", "1", "]", "\n", "depth_numpy", "=", "self", ".", "tensor2im", "(", "depth", ")", "# 0-80m", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "if", "self", ".", "flag", ":", "\n", "                        ", "self", ".", "writer", ".", "add_image", "(", "'Real Images'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "(", "1.0", "+", "self", ".", "real_val_sample_images", ")", "/", "2.0", ",", "nrow", "=", "4", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "flag", "=", "False", "\n", "\n", "", "_", ",", "self", ".", "real_val_sample_translated_images", "=", "self", ".", "netG", "(", "self", ".", "real_val_sample_images", ")", "\n", "sample_depth", "=", "self", ".", "netT", "(", "self", ".", "real_val_sample_translated_images", ")", "\n", "sample_depth", "=", "sample_depth", "[", "-", "1", "]", "\n", "sample_depth", "=", "sample_depth", ".", "data", "\n", "sample_depth", "=", "(", "1.0", "+", "sample_depth", ")", "/", "2.0", "\n", "sample_depth_colorized", "=", "self", ".", "colorize", "(", "sample_depth", ",", "cmap", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'plasma'", ")", ")", "\n", "sample_depth_colorized", "=", "torch", ".", "from_numpy", "(", "sample_depth_colorized", ".", "squeeze", "(", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "self", ".", "writer", ".", "add_image", "(", "'Real Translated Images'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "(", "1.0", "+", "self", ".", "real_val_sample_translated_images", ")", "/", "2.0", ",", "nrow", "=", "4", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'Predicted Depth'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "sample_depth_colorized", ",", "nrow", "=", "4", ")", ",", "self", ".", "iteration", ")", "\n", "\n", "", "for", "t_id", "in", "range", "(", "depth_numpy", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "t_id_global", "=", "(", "i", "*", "self", ".", "batch_size", ")", "+", "t_id", "\n", "# _,_,_,ground_depth = self.real_val_dataset.read_data(self.real_val_dataset.files[(i*self.batch_size)+t_id])", "\n", "h", ",", "w", "=", "self", ".", "real_val_image", ".", "shape", "[", "2", "]", ",", "self", ".", "real_val_image", ".", "shape", "[", "3", "]", "\n", "datafiles1", "=", "self", ".", "real_val_dataset", ".", "files", "[", "t_id_global", "]", "\n", "# ground_depth = self.kitti.get_depth(osp.join(self.real_val_dataset.root, datafiles1['cam_intrin']),", "\n", "#             osp.join(self.real_val_dataset.root, datafiles1['depth']), [h, w])", "\n", "# ground_depth = ground_depth.astype(np.float32)", "\n", "ground_depth", "=", "self", ".", "get_depth_manually", "(", "datafiles1", "[", "'depth'", "]", ")", "\n", "height", ",", "width", "=", "ground_depth", ".", "shape", "\n", "\n", "predicted_depth", "=", "cv2", ".", "resize", "(", "depth_numpy", "[", "t_id", "]", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "predicted_depth", "[", "predicted_depth", "<", "1.0", "]", "=", "1.0", "\n", "predicted_depth", "[", "predicted_depth", ">", "50.0", "]", "=", "50.0", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "ground_depth", ">", "1.0", ",", "ground_depth", "<", "50.0", ")", "\n", "\n", "# crop used by Garg ECCV16", "\n", "if", "self", ".", "garg_crop", ":", "\n", "                        ", "self", ".", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "height", ",", "0.99189189", "*", "height", ",", "\n", "0.03594771", "*", "width", ",", "0.96405229", "*", "width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# crop we found by trail and error to reproduce Eigen NIPS14 results", "\n", "", "elif", "self", ".", "eigen_crop", ":", "\n", "                        ", "self", ".", "crop", "=", "np", ".", "array", "(", "[", "0.3324324", "*", "height", ",", "0.91351351", "*", "height", ",", "\n", "0.0359477", "*", "width", ",", "0.96405229", "*", "width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "self", ".", "crop", "[", "0", "]", ":", "self", ".", "crop", "[", "1", "]", ",", "self", ".", "crop", "[", "2", "]", ":", "self", ".", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "\n", "abs_rel", "[", "t_id_global", "]", ",", "sq_rel", "[", "t_id_global", "]", ",", "rmse", "[", "t_id_global", "]", ",", "rmse_log", "[", "t_id_global", "]", ",", "a1", "[", "t_id_global", "]", ",", "a2", "[", "t_id_global", "]", ",", "a3", "[", "t_id_global", "]", "=", "self", ".", "compute_errors", "(", "ground_depth", "[", "mask", "]", ",", "predicted_depth", "[", "mask", "]", ")", "\n", "\n", "# print('{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f}'", "\n", "#     .format(t_id, abs_rel[t_id], sq_rel[t_id], rmse[t_id], rmse_log[t_id], a1[t_id], a2[t_id], a3[t_id]))", "\n", "\n", "", "", "print", "(", "'{:>10},{:>10},{:>10},{:>10},{:>10},{:>10},{:>10}'", ".", "format", "(", "'abs_rel'", ",", "'sq_rel'", ",", "'rmse'", ",", "'rmse_log'", ",", "'a1'", ",", "'a2'", ",", "'a3'", ")", ")", "\n", "print", "(", "'{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f}'", "\n", ".", "format", "(", "abs_rel", ".", "mean", "(", ")", ",", "sq_rel", ".", "mean", "(", ")", ",", "rmse", ".", "mean", "(", ")", ",", "rmse_log", ".", "mean", "(", ")", ",", "a1", ".", "mean", "(", ")", ",", "a2", ".", "mean", "(", ")", ",", "a3", ".", "mean", "(", ")", ")", ")", "\n", "\n", "##################################################", "\n", "### Tensorboard Logging", "\n", "##################################################            ", "\n", "# self.writer.add_scalars('Kitti_Validation_metrics/'+self.exp,  {'Abs Rel':abs_rel.mean(),", "\n", "# 'Sq Rel': sq_rel.mean(),", "\n", "# 'RMSE': rmse.mean(),", "\n", "# 'RMSE_log':rmse_log.mean(),", "\n", "# 'del<1.25':a1.mean(),", "\n", "# 'del<1.25^2':a2.mean(),", "\n", "# 'del<1.25^3':a3.mean(),}, self.iteration)", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/Abs_Rel'", ",", "abs_rel", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/Sq_Rel'", ",", "sq_rel", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/RMSE'", ",", "rmse", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/RMSE_log'", ",", "rmse_log", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/del<1.25'", ",", "a1", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/del<1.25^2'", ",", "a2", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Kitti_Validatoin_metrics/del<1.25^3'", ",", "a3", ".", "mean", "(", ")", ",", "self", ".", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Validation.get_params": [[296, 302], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "", "def", "get_params", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--val'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Indicate if you want to test the model on the validation data'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_iter'", ",", "default", "=", "999", ",", "type", "=", "int", ",", "help", "=", "\"Indicate what iteration of the saved model to be started with for Validation\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.__init__": [[22, 67], ["random.seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed_all", "networks.all_networks.define_G", "Make3D_validation.Solver.netG.cuda", "networks.all_networks.define_G", "Make3D_validation.Solver.netG.cuda", "Make3D_validation.Solver.netT.cuda", "torch.nn.MSELoss", "torch.nn.L1Loss", "Make3D_validation.Solver.netG_loss_fn.cuda", "Make3D_validation.Solver.netT_loss_fn.cuda", "os.path.join", "Make3D_validation.Solver.get_validation_data", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_validation_data"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "'.'", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# Seed", "\n", "self", ".", "seed", "=", "1729", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "\n", "\n", "# Initialize networks", "\n", "self", ".", "netG", "=", "all_networks", ".", "define_G", "(", "3", ",", "3", ",", "64", ",", "9", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'ResNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ")", "\n", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "netT", "=", "all_networks", ".", "define_G", "(", "3", ",", "1", ",", "64", ",", "4", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'UNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ",", "0.1", ")", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "self", ".", "netT", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Loss", "\n", "self", ".", "netG_loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "netG_loss_fn", "=", "self", ".", "netG_loss_fn", ".", "cuda", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "self", ".", "netT_loss_fn", ".", "cuda", "(", ")", "\n", "\n", "# Training Configuration details", "\n", "self", ".", "batch_size", "=", "16", "\n", "self", ".", "iteration", "=", "None", "\n", "\n", "self", ".", "saved_models_dir", "=", "'saved_models'", "\n", "self", ".", "output_images_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'make3d_results'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_images_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "output_images_dir", ")", "\n", "\n", "# Initialize Data", "\n", "", "self", ".", "get_validation_data", "(", ")", "\n", "\n", "self", ".", "garg_crop", "=", "True", "\n", "self", ".", "eigen_crop", "=", "False", "\n", "self", ".", "flag", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.loop_iter": [[68, 72], ["iter"], "methods", ["None"], ["", "def", "loop_iter", "(", "self", ",", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "data", "in", "iter", "(", "loader", ")", ":", "\n", "                ", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.compute_errors_make3d": [[73, 85], ["numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt.mean", "numpy.sqrt.mean", "numpy.log10", "numpy.log10", "numpy.abs"], "methods", ["None"], ["", "", "", "def", "compute_errors_make3d", "(", "self", ",", "gt", ",", "pred", ")", ":", "\n", "        ", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "np", ".", "log10", "(", "gt", ")", "-", "np", ".", "log10", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "/", "gt", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.get_validation_data": [[86, 89], ["Dataloaders.Make3d_dataloader.Make3D_dataset", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "get_validation_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_val_dataset", "=", "real_dataset", "(", ")", "\n", "self", ".", "real_val_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.load_prev_model": [[90, 103], ["glob.glob", "os.path.join", "len", "saved_iters.index", "print", "torch.load", "Make3D_validation.Solver.netG.load_state_dict", "Make3D_validation.Solver.netT.load_state_dict", "int", "max", "str", "[].split", "s.split"], "methods", ["None"], ["", "def", "load_prev_model", "(", "self", ")", ":", "\n", "        ", "saved_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ",", "'Depth_Estimator_'", "+", "self", ".", "opt", ".", "disc", "+", "'_'", "+", "self", ".", "opt", ".", "supervision", "+", "'_'", "+", "self", ".", "opt", ".", "depth_resize", "+", "'_da-'", "+", "str", "(", "self", ".", "iteration", ")", "+", "'.pth.tar'", ")", ")", "\n", "if", "len", "(", "saved_models", ")", ">", "0", ":", "\n", "            ", "saved_iters", "=", "[", "int", "(", "s", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "s", "in", "saved_models", "]", "\n", "recent_id", "=", "saved_iters", ".", "index", "(", "max", "(", "saved_iters", ")", ")", "\n", "saved_model", "=", "saved_models", "[", "recent_id", "]", "\n", "print", "(", "saved_model", ")", "\n", "model_state", "=", "torch", ".", "load", "(", "saved_model", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "model_state", "[", "'netG_state_dict'", "]", ")", "\n", "self", ".", "netT", ".", "load_state_dict", "(", "model_state", "[", "'netT_state_dict'", "]", ")", "\n", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.tensor2im": [[104, 108], ["depth.cpu().data.float().numpy().transpose", "depth.cpu().data.float().numpy", "depth.cpu().data.float", "depth.cpu"], "methods", ["None"], ["", "def", "tensor2im", "(", "self", ",", "depth", ")", ":", "\n", "        ", "depth_numpy", "=", "depth", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "depth_numpy", "=", "(", "depth_numpy", "+", "1.0", ")", "/", "2.0", "# Unnormalize between 0 and 1", "\n", "return", "depth_numpy", "*", "80.0", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.Validate": [[109, 116], ["Make3D_validation.Solver.netG.eval", "Make3D_validation.Solver.netT.eval", "range", "Make3D_validation.Solver.load_prev_model", "Make3D_validation.Solver.Validation"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.Validation"], ["", "def", "Validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "self", ".", "netT", ".", "eval", "(", ")", "\n", "START_ITER", "=", "self", ".", "opt", ".", "iter", "\n", "for", "self", ".", "iteration", "in", "range", "(", "START_ITER", ",", "1000", "+", "START_ITER", ",", "1000", ")", ":", "\n", "            ", "self", ".", "load_prev_model", "(", ")", "\n", "self", ".", "Validation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.crop_center": [[117, 122], ["None"], "methods", ["None"], ["", "", "def", "crop_center", "(", "self", ",", "img", ",", "cropx", ",", "cropy", ")", ":", "\n", "        ", "y", ",", "x", "=", "img", ".", "shape", "\n", "startx", "=", "x", "//", "2", "-", "(", "cropx", "//", "2", ")", "\n", "starty", "=", "y", "//", "2", "-", "(", "cropy", "//", "2", ")", "\n", "return", "img", "[", "starty", ":", "starty", "+", "cropy", ",", "startx", ":", "startx", "+", "cropx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.get_Make3D_depth_manually": [[123, 131], ["scipy.io.loadmat", "cv2.resize", "Make3D_validation.Solver.crop_center"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Make3d_dataloader.to_tensor.crop_center"], ["", "def", "get_Make3D_depth_manually", "(", "self", ",", "depth_file", ")", ":", "\n", "        ", "depth", "=", "scipy", ".", "io", ".", "loadmat", "(", "depth_file", ",", "verify_compressed_data_integrity", "=", "False", ")", "\n", "depth", "=", "depth", "[", "'Position3DGrid'", "]", "\n", "depth", "=", "depth", "[", ":", ",", ":", ",", "3", "]", "\n", "\n", "depth", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "1800", ",", "2000", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "depth", "=", "self", ".", "crop_center", "(", "depth", ",", "1600", ",", "1024", ")", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.Validation": [[132, 174], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.no_grad", "tqdm.tqdm.tqdm", "print", "print", "enumerate", "torch.autograd.Variable", "Make3D_validation.Solver.netG", "Make3D_validation.Solver.netT", "Make3D_validation.Solver.tensor2im", "range", "Make3D_validation.Solver.real_val_image.cuda", "Make3D_validation.Solver.get_Make3D_depth_manually", "cv2.resize", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "numpy.logical_and", "Make3D_validation.Solver.compute_errors_make3d", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "save_pred_depth.astype"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.tensor2im", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.get_Make3D_depth_manually", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.Solver.compute_errors_make3d"], ["", "def", "Validation", "(", "self", ")", ":", "\n", "        ", "num_samples", "=", "len", "(", "self", ".", "real_val_dataset", ")", "\n", "abs_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "sq_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse_log", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "self", ".", "real_val_image", ",", "image_filenames", ",", "depth_filenames", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "real_val_dataloader", ")", ")", ":", "\n", "\n", "                ", "self", ".", "real_val_image", "=", "Variable", "(", "self", ".", "real_val_image", ".", "cuda", "(", ")", ")", "\n", "\n", "_", ",", "self", ".", "real_translated_image", "=", "self", ".", "netG", "(", "self", ".", "real_val_image", ")", "\n", "depth", "=", "self", ".", "netT", "(", "self", ".", "real_translated_image", ")", "\n", "depth", "=", "depth", "[", "-", "1", "]", "\n", "depth_numpy", "=", "self", ".", "tensor2im", "(", "depth", ")", "# 0-80m", "\n", "\n", "for", "t_id", "in", "range", "(", "depth_numpy", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "t_id_global", "=", "(", "i", "*", "self", ".", "batch_size", ")", "+", "t_id", "\n", "ground_depth", "=", "self", ".", "get_Make3D_depth_manually", "(", "depth_filenames", "[", "t_id", "]", ")", "\n", "height", ",", "width", "=", "ground_depth", ".", "shape", "\n", "\n", "predicted_depth", "=", "cv2", ".", "resize", "(", "depth_numpy", "[", "t_id", "]", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "save_pred_depth", "=", "predicted_depth", "*", "65535", "/", "80.0", "\n", "save_pred_depth", "[", "save_pred_depth", "<", "1e-3", "]", "=", "1e-3", "\n", "\n", "save_pred_img", "=", "Image", ".", "fromarray", "(", "save_pred_depth", ".", "astype", "(", "np", ".", "int32", ")", ",", "'I'", ")", "\n", "save_pred_img", ".", "save", "(", "'%s/%05d_pred.png'", "%", "(", "self", ".", "output_images_dir", ",", "t_id_global", ")", ")", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "ground_depth", ">", "0.0", ",", "ground_depth", "<", "70.0", ")", "\n", "\n", "depth_gt", "=", "ground_depth", "[", "mask", "]", "\n", "depth_pred", "=", "predicted_depth", "[", "mask", "]", "\n", "depth_pred", "[", "depth_pred", ">", "70.0", "]", "=", "70.0", "\n", "depth_pred", "[", "depth_pred", "<", "0.0", "]", "=", "0.0", "\n", "\n", "abs_rel", "[", "t_id_global", "]", ",", "sq_rel", "[", "t_id_global", "]", ",", "rmse", "[", "t_id_global", "]", ",", "rmse_log", "[", "t_id_global", "]", "=", "self", ".", "compute_errors_make3d", "(", "depth_gt", ",", "depth_pred", ")", "\n", "\n", "", "", "print", "(", "'{:>10},{:>10},{:>10},{:>10}'", ".", "format", "(", "'abs_rel'", ",", "'sq_rel'", ",", "'rmse'", ",", "'rmse_log'", ")", ")", "\n", "print", "(", "'{:10.4f},{:10.4f},{:10.4f},{:10.4f}'", "\n", ".", "format", "(", "abs_rel", ".", "mean", "(", ")", ",", "sq_rel", ".", "mean", "(", ")", ",", "rmse", ".", "mean", "(", ")", ",", "rmse_log", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Monocular_Depth_Estimation.Make3D_validation.get_params": [[175, 185], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "", "def", "get_params", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--supervision'", ",", "default", "=", "'geom'", ",", "help", "=", "'None | pseudo | pseudo_scratch | geom | pseudo+geom'", ")", "\n", "parser", ".", "add_argument", "(", "'--gen'", ",", "default", "=", "'Resnet'", ",", "help", "=", "'Resnet | RBDN'", ")", "\n", "parser", ".", "add_argument", "(", "'--disc'", ",", "default", "=", "'WI'", ",", "help", "=", "'3Node | WFWI'", ")", "\n", "parser", ".", "add_argument", "(", "'--iter'", ",", "default", "=", "999", ",", "type", "=", "int", ",", "help", "=", "\"Indicate what iteration of the saved model for Validation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--depth_resize'", ",", "default", "=", "'bicubic'", ",", "help", "=", "'bicubic | bilinear'", ")", "\n", "parser", ".", "add_argument", "(", "'--val'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Indicate if you want to test the model on the validation data'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader.KittiDataset.__init__": [[11, 50], ["open", "f.read().split", "os.join", "torch.utils.data.split", "f.read", "len", "Kitti_dataloader.KittiDataset.files.append", "Kitti_dataloader.KittiDataset.files.append", "Kitti_dataloader.KittiDataset.files.append"], "methods", ["None"], ["img_transform", "=", "None", ",", "joint_transform", "=", "None", ",", "depth_transform", "=", "None", ",", "complete_data", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "data_file", "=", "data_file", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "depth_transform", "=", "depth_transform", "\n", "self", ".", "complete_data", "=", "complete_data", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "data_file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data_list", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "data", "in", "data_list", ":", "\n", "                ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "data_info", "=", "data", ".", "split", "(", "' '", ")", "\n", "\n", "if", "not", "self", ".", "complete_data", ":", "\n", "                    ", "self", ".", "files", ".", "append", "(", "{", "\n", "\"l_rgb\"", ":", "data_info", "[", "0", "]", ",", "\n", "\"r_rgb\"", ":", "data_info", "[", "1", "]", ",", "\n", "\"cam_intrin\"", ":", "data_info", "[", "2", "]", ",", "\n", "\"depth\"", ":", "data_info", "[", "3", "]", "\n", "}", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "files", ".", "append", "(", "{", "\n", "\"l_rgb\"", ":", "data_info", "[", "0", "]", ",", "\n", "\"r_rgb\"", ":", "None", ",", "\n", "\"cam_intrin\"", ":", "data_info", "[", "2", "]", ",", "\n", "\"depth\"", ":", "data_info", "[", "3", "]", "\n", "}", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"l_rgb\"", ":", "data_info", "[", "1", "]", ",", "\n", "\"r_rgb\"", ":", "None", ",", "\n", "\"cam_intrin\"", ":", "data_info", "[", "2", "]", ",", "\n", "\"depth\"", ":", "data_info", "[", "3", "]", "\n", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader.KittiDataset.__len__": [[53, 55], ["len"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n", "", "def", "read_data", "(", "self", ",", "datafiles", ")", ":", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader.KittiDataset.read_data": [[56, 77], ["os.exists", "PIL.Image.open().convert", "Kitti_dataset_util.KITTI", "os.exists", "Kitti_dataset_util.KITTI.get_fb", "os.join", "os.exists", "PIL.Image.open().convert", "os.join", "os.join", "PIL.Image.open", "os.join", "os.join", "PIL.Image.open", "os.join"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.get_fb"], ["\n", "        ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'l_rgb'", "]", ")", ")", ",", "\"Image does not exist\"", "\n", "l_rgb", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'l_rgb'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "w", "=", "l_rgb", ".", "size", "[", "0", "]", "\n", "h", "=", "l_rgb", ".", "size", "[", "1", "]", "\n", "if", "not", "self", ".", "complete_data", ":", "\n", "            ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'r_rgb'", "]", ")", ")", ",", "\"Image does not exist\"", "\n", "r_rgb", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'r_rgb'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "kitti", "=", "KITTI", "(", ")", "\n", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'cam_intrin'", "]", ")", ")", ",", "\"Camera info does not exist\"", "\n", "fb", "=", "kitti", ".", "get_fb", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'cam_intrin'", "]", ")", ")", "\n", "# assert osp.exists(osp.join(self.root, datafiles['depth'])), \"Depth does not exist\"", "\n", "# depth = kitti.get_depth(osp.join(self.root, datafiles['cam_intrin']),", "\n", "#                         osp.join(self.root, datafiles['depth']), [h, w])", "\n", "\n", "if", "not", "self", ".", "complete_data", ":", "\n", "            ", "return", "l_rgb", ",", "r_rgb", ",", "fb", "\n", "", "else", ":", "\n", "            ", "return", "l_rgb", ",", "None", ",", "fb", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader.KittiDataset.__getitem__": [[78, 117], ["Kitti_dataloader.KittiDataset.read_data", "random.randint", "Kitti_dataloader.KittiDataset.img_transform", "len", "len", "Kitti_dataloader.KittiDataset.joint_transform", "Kitti_dataloader.KittiDataset.joint_transform", "Kitti_dataloader.KittiDataset.img_transform", "len"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader_training.KittiDataset.read_data"], ["# if self.phase == 'train':", "\n", "#     index = random.randint(0, len(self)-1)", "\n", "# if index > len(self)-1:", "\n", "#     index = index % len(self)", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "l_img", ",", "r_img", ",", "fb", "=", "self", ".", "read_data", "(", "datafiles", ")", "\n", "\n", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "                ", "l_img", ",", "r_img", ",", "_", ",", "fb", "=", "self", ".", "joint_transform", "(", "(", "l_img", ",", "r_img", ",", "None", ",", "'train'", ",", "fb", ")", ")", "\n", "", "else", ":", "\n", "                ", "l_img", ",", "r_img", ",", "_", ",", "fb", "=", "self", ".", "joint_transform", "(", "(", "l_img", ",", "r_img", ",", "None", ",", "'test'", ",", "fb", ")", ")", "\n", "\n", "", "", "if", "self", ".", "img_transform", "is", "not", "None", ":", "\n", "            ", "l_img", "=", "self", ".", "img_transform", "(", "l_img", ")", "\n", "if", "r_img", "is", "not", "None", ":", "\n", "                ", "r_img", "=", "self", ".", "img_transform", "(", "r_img", ")", "\n", "\n", "# if self.depth_transform is not None:", "\n", "#     depth = self.depth_transform(depth)", "\n", "\n", "", "", "if", "self", ".", "phase", "==", "'test'", "or", "self", ".", "phase", "==", "'val'", ":", "\n", "            ", "data", "=", "{", "}", "\n", "data", "[", "'left_img'", "]", "=", "l_img", "\n", "data", "[", "'right_img'", "]", "=", "r_img", "\n", "# data['depth'] = depth", "\n", "data", "[", "'fb'", "]", "=", "fb", "\n", "return", "data", ",", "datafiles", "[", "'depth'", "]", "\n", "\n", "", "data", "=", "{", "}", "\n", "if", "l_img", "is", "not", "None", ":", "\n", "            ", "data", "[", "'left_img'", "]", "=", "l_img", "\n", "", "if", "r_img", "is", "not", "None", ":", "\n", "            ", "data", "[", "'right_img'", "]", "=", "r_img", "\n", "", "if", "fb", "is", "not", "None", ":", "\n", "            ", "data", "[", "'fb'", "]", "=", "fb", "\n", "\n", "", "return", "l_img", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Make3d_dataloader.to_tensor.__init__": [[24, 26], ["torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "ToTensor", "=", "tr", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Make3d_dataloader.to_tensor.crop_center": [[27, 32], ["None"], "methods", ["None"], ["", "def", "crop_center", "(", "self", ",", "img", ",", "cropx", ",", "cropy", ")", ":", "\n", "        ", "y", ",", "x", "=", "img", ".", "shape", "\n", "startx", "=", "x", "//", "2", "-", "(", "cropx", "//", "2", ")", "\n", "starty", "=", "y", "//", "2", "-", "(", "cropy", "//", "2", ")", "\n", "return", "img", "[", "starty", ":", "starty", "+", "cropy", ",", "startx", ":", "startx", "+", "cropx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Make3d_dataloader.to_tensor.__call__": [[33, 42], ["cv2.resize", "Make3d_dataloader.to_tensor.crop_center", "cv2.resize", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Make3d_dataloader.to_tensor.crop_center"], ["", "def", "__call__", "(", "self", ",", "depth", ")", ":", "\n", "        ", "depth", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "1800", ",", "2000", ")", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "depth", "=", "self", ".", "crop_center", "(", "depth", ",", "1600", ",", "1024", ")", "\n", "depth", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "640", ",", "192", ")", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "depth_tensor", "=", "torch", ".", "from_numpy", "(", "depth", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "depth_tensor", "[", "depth_tensor", "<", "0.0", "]", "=", "0.0", "\n", "depth_tensor", "[", "depth_tensor", ">", "80.0", "]", "=", "80.0", "\n", "return", "depth_tensor", "/", "80.0", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Make3d_dataloader.Make3D_dataset.__init__": [[44, 58], ["glob.glob", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "Make3d_dataloader.to_tensor", "os.join", "f.replace().replace().replace", "f.replace().replace", "f.replace"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.to_tensor"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", "=", "'/vulcanscratch/koutilya/Make3D'", ",", "depth_resize", "=", "'bilinear'", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "tensor_transform", "=", "[", "tr", ".", "ToPILImage", "(", ")", ",", "tr", ".", "Resize", "(", "(", "2000", ",", "1800", ")", ")", ",", "tr", ".", "CenterCrop", "(", "(", "1024", ",", "1600", ")", ")", ",", "tr", ".", "Resize", "(", "(", "192", ",", "640", ")", ")", ",", "tr", ".", "ToTensor", "(", ")", ",", "tr", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "self", ".", "label_tensor_transform", "=", "[", "to_tensor", "(", ")", "]", "\n", "self", ".", "depth_resize", "=", "depth_resize", "\n", "\n", "self", ".", "image_files", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "'Test134'", ",", "'*.jpg'", ")", ")", "\n", "self", ".", "label_files", "=", "[", "f", ".", "replace", "(", "'Test134'", ",", "'Gridlaserdata'", ")", ".", "replace", "(", "'img'", ",", "'depth_sph_corr'", ")", ".", "replace", "(", "'jpg'", ",", "'mat'", ")", "for", "f", "in", "self", ".", "image_files", "]", "\n", "\n", "self", ".", "image_transform", "=", "tr", ".", "Compose", "(", "self", ".", "tensor_transform", ")", "\n", "self", ".", "label_transform", "=", "tr", ".", "Compose", "(", "self", ".", "label_tensor_transform", ")", "\n", "\n", "self", ".", "color_new_height", "=", "1704", "//", "2", "\n", "self", ".", "depth_new_height", "=", "21", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Make3d_dataloader.Make3D_dataset.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Make3d_dataloader.Make3D_dataset.__getitem__": [[63, 69], ["Make3d_dataloader.Make3D_dataset.image_transform", "cv2.imread", "[].split", "Make3d_dataloader.Make3D_dataset.image_files[].split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "self", ".", "image_files", "[", "idx", "]", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "depth_filename", "=", "self", ".", "label_files", "[", "idx", "]", "\n", "image", "=", "self", ".", "image_transform", "(", "image", ")", "\n", "return", "image", ",", "self", ".", "image_files", "[", "idx", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "depth_filename", "\n", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader_training.DepthToTensor.__call__": [[9, 14], ["torch.from_numpy().float", "torch.from_numpy", "arr_input.reshape"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "arr_input", ")", ":", "\n", "# tensors = [], [0, 1] -> [-1, 1]", "\n", "# arr_input = np.array(input)", "\n", "        ", "tensors", "=", "torch", ".", "from_numpy", "(", "arr_input", ".", "reshape", "(", "(", "1", ",", "arr_input", ".", "shape", "[", "0", "]", ",", "arr_input", ".", "shape", "[", "1", "]", ")", ")", ")", ".", "float", "(", ")", "\n", "return", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader_training.KittiDataset.__init__": [[16, 46], ["open", "f.read().split", "os.join", "torch.utils.data.split", "Kitti_dataloader_training.KittiDataset.files.append", "f.read", "len", "os.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'/vulcanscratch/koutilya/kitti'", ",", "data_file", "=", "'train.txt'", ",", "phase", "=", "'train'", ",", "\n", "img_transform", "=", "None", ",", "joint_transform", "=", "None", ",", "depth_transform", "=", "None", ",", "depth_resize", "=", "'bilinear'", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "data_file", "=", "data_file", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "depth_transform", "=", "depth_transform", "\n", "self", ".", "depth_resize", "=", "depth_resize", "\n", "depth_path", "=", "''", "\n", "if", "self", ".", "depth_resize", "==", "'bilinear'", ":", "\n", "            ", "depth_path", "=", "'Bilinear_model_pseudo_labels'", "\n", "", "elif", "self", ".", "depth_resize", "==", "'bicubic'", ":", "\n", "            ", "depth_path", "=", "'Bicubic_model_pseudo_labels'", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "data_file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data_list", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "data", "in", "data_list", ":", "\n", "                ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "data_info", "=", "data", ".", "split", "(", "' '", ")", "\n", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"l_rgb\"", ":", "data_info", "[", "0", "]", ",", "\n", "\"r_rgb\"", ":", "data_info", "[", "1", "]", ",", "\n", "\"cam_intrin\"", ":", "data_info", "[", "2", "]", ",", "\n", "\"depth\"", ":", "osp", ".", "join", "(", "'Depth_baseline_all_syn'", ",", "depth_path", ",", "data_info", "[", "0", "]", ")", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader_training.KittiDataset.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader_training.KittiDataset.read_data": [[51, 64], ["os.exists", "PIL.Image.open().convert", "os.exists", "PIL.Image.open().convert", "Kitti_dataset_util.KITTI", "os.exists", "Kitti_dataset_util.KITTI.get_fb", "os.join", "os.join", "os.join", "os.join", "PIL.Image.open", "PIL.Image.open", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.get_fb"], ["", "def", "read_data", "(", "self", ",", "datafiles", ")", ":", "\n", "\n", "        ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'l_rgb'", "]", ")", ")", ",", "\"Image does not exist\"", "\n", "l_rgb", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'l_rgb'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "w", "=", "l_rgb", ".", "size", "[", "0", "]", "\n", "h", "=", "l_rgb", ".", "size", "[", "1", "]", "\n", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'r_rgb'", "]", ")", ")", ",", "\"Image does not exist\"", "\n", "r_rgb", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'r_rgb'", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "kitti", "=", "KITTI", "(", ")", "\n", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'cam_intrin'", "]", ")", ")", ",", "\"Camera info does not exist\"", "\n", "fb", "=", "kitti", ".", "get_fb", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "datafiles", "[", "'cam_intrin'", "]", ")", ")", "\n", "return", "l_rgb", ",", "r_rgb", ",", "fb", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader_training.KittiDataset.__getitem__": [[65, 85], ["Kitti_dataloader_training.KittiDataset.read_data", "Kitti_dataloader_training.KittiDataset.img_transform", "Kitti_dataloader_training.KittiDataset.joint_transform", "Kitti_dataloader_training.KittiDataset.joint_transform", "Kitti_dataloader_training.KittiDataset.img_transform"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataloader_training.KittiDataset.read_data"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# if self.phase == 'train':", "\n", "#     index = random.randint(0, len(self)-1)", "\n", "# if index > len(self)-1:", "\n", "#     index = index % len(self)", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "l_img", ",", "r_img", ",", "fb", "=", "self", ".", "read_data", "(", "datafiles", ")", "\n", "\n", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "                ", "l_img", ",", "r_img", ",", "_", ",", "fb", "=", "self", ".", "joint_transform", "(", "(", "l_img", ",", "r_img", ",", "None", ",", "'train'", ",", "fb", ")", ")", "\n", "", "else", ":", "\n", "                ", "l_img", ",", "r_img", ",", "_", ",", "fb", "=", "self", ".", "joint_transform", "(", "(", "l_img", ",", "r_img", ",", "None", ",", "'test'", ",", "fb", ")", ")", "\n", "\n", "", "", "if", "self", ".", "img_transform", "is", "not", "None", ":", "\n", "            ", "l_img", "=", "self", ".", "img_transform", "(", "l_img", ")", "\n", "if", "r_img", "is", "not", "None", ":", "\n", "                ", "r_img", "=", "self", ".", "img_transform", "(", "r_img", ")", "\n", "\n", "", "", "return", "l_img", ",", "r_img", ",", "fb", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.test_kitti_loader.KittiDataset.__init__": [[19, 30], ["os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'/vulcan/scratch/koutilya/projects/Domain_Adaptation/Common_Domain_Adaptation-Lighting/SharinGAN_results/fig5'", ",", "\n", "img_transform", "=", "None", ",", "joint_transform", "=", "None", ",", "depth_transform", "=", "None", ",", "complete_data", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "depth_transform", "=", "depth_transform", "\n", "self", ".", "complete_data", "=", "complete_data", "\n", "\n", "self", ".", "files", "=", "os", ".", "listdir", "(", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.test_kitti_loader.KittiDataset.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.test_kitti_loader.KittiDataset.__getitem__": [[35, 47], ["os.join", "os.join", "PIL.Image.open().convert", "test_kitti_loader.KittiDataset.joint_transform", "test_kitti_loader.KittiDataset.img_transform", "os.join.replace", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "filename", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "files", "[", "idx", "]", ")", "\n", "l_img", "=", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "l_img", ",", "_", ",", "_", ",", "_", "=", "self", ".", "joint_transform", "(", "(", "l_img", ",", "None", ",", "None", ",", "'test'", ",", "None", ")", ")", "\n", "\n", "if", "self", ".", "img_transform", "is", "not", "None", ":", "\n", "            ", "l_img", "=", "self", ".", "img_transform", "(", "l_img", ")", "\n", "\n", "\n", "", "return", "l_img", ",", "filename", ".", "replace", "(", "'img'", ",", "'ours'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomHorizontalFlip.__init__": [[16, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "None", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomHorizontalFlip.__call__": [[19, 24], ["img.transpose", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "(", "self", ".", "prob", "is", "None", "and", "random", ".", "random", "(", ")", "<", "0.5", ")", "or", "self", ".", "prob", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomVerticalFlip.__init__": [[32, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "None", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomVerticalFlip.__call__": [[35, 40], ["img.transpose", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "(", "self", ".", "prob", "is", "None", "and", "random", ".", "random", "(", ")", "<", "0.5", ")", "or", "self", ".", "prob", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomPairedCrop.__init__": [[43, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomPairedCrop.get_params": [[46, 64], ["random.randint", "random.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "output_size", ")", ":", "\n", "        ", "\"\"\"\n        Get parameters for ``crop`` for a random crop.\n        Args:\n        img (PIL Image): Image to be cropped.\n        output_size (tuple): Expected output size of the crop.\n        Returns:\n        tuple: params (i, j, h, w) to be passed to ``crop`` for random crop.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomPairedCrop.__call__": [[65, 79], ["transform.RandomPairedCrop.get_params", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomPairedCrop.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img1", "=", "img", "[", "0", "]", "\n", "img2", "=", "img", "[", "1", "]", "\n", "depth", "=", "img", "[", "2", "]", "\n", "\n", "i", ",", "j", ",", "th", ",", "tw", "=", "self", ".", "get_params", "(", "img1", ",", "self", ".", "size", ")", "\n", "\n", "img1", "=", "F", ".", "crop", "(", "img1", ",", "i", ",", "j", ",", "th", ",", "tw", ")", "\n", "\n", "if", "depth", "is", "not", "None", ":", "\n", "            ", "depth", "=", "F", ".", "crop", "(", "depth", ",", "i", ",", "j", ",", "th", ",", "tw", ")", "\n", "", "if", "img2", "is", "not", "None", ":", "\n", "            ", "img2", "=", "F", ".", "crop", "(", "img2", ",", "i", ",", "j", ",", "th", ",", "tw", ")", "\n", "", "return", "img1", ",", "img2", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomImgAugment.__init__": [[84, 90], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "no_flip", ",", "no_rotation", ",", "no_augment", ",", "size", "=", "None", ",", "depth_resize", "=", "'bicubic'", ")", ":", "\n", "\n", "        ", "self", ".", "flip", "=", "not", "no_flip", "\n", "self", ".", "augment", "=", "not", "no_augment", "\n", "self", ".", "rotation", "=", "not", "no_rotation", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "depth_resize", "=", "depth_resize", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.RandomImgAugment.__call__": [[92, 180], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose.", "int", "int", "torchvision.Compose.", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose.", "random.random", "torchvision.Compose", "torchvision.Compose", "numpy.array", "torchvision.Resize", "torchvision.Resize", "float", "float", "numpy.array", "PIL.Image.fromarray", "torchvision.Compose.", "torchvision.Compose.", "random.random", "torchvision.rotate", "torchvision.rotate", "random.random", "random.uniform", "random.uniform", "random.uniform", "torchvision.adjust_brightness", "torchvision.adjust_brightness", "torchvision.adjust_contrast", "torchvision.adjust_contrast", "torchvision.adjust_saturation", "torchvision.adjust_saturation", "math.ceil", "math.ceil", "torchvision.Resize", "torchvision.Resize", "transform.RandomHorizontalFlip", "torchvision.Compose.", "torchvision.Compose.", "random.randrange", "torchvision.rotate", "torchvision.rotate", "torchvision.rotate", "torchvision.rotate", "torchvision.adjust_brightness", "torchvision.adjust_brightness", "torchvision.adjust_contrast", "torchvision.adjust_contrast", "torchvision.adjust_saturation", "torchvision.adjust_saturation"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "img1", "=", "inputs", "[", "0", "]", "\n", "img2", "=", "inputs", "[", "1", "]", "\n", "depth", "=", "inputs", "[", "2", "]", "\n", "phase", "=", "inputs", "[", "3", "]", "\n", "fb", "=", "inputs", "[", "4", "]", "\n", "\n", "h", "=", "img1", ".", "height", "\n", "w", "=", "img1", ".", "width", "\n", "w0", "=", "w", "\n", "\n", "if", "self", ".", "size", "==", "[", "-", "1", "]", ":", "\n", "            ", "divisor", "=", "32.0", "\n", "h", "=", "int", "(", "math", ".", "ceil", "(", "h", "/", "divisor", ")", "*", "divisor", ")", "\n", "w", "=", "int", "(", "math", ".", "ceil", "(", "w", "/", "divisor", ")", "*", "divisor", ")", "\n", "self", ".", "size", "=", "(", "h", ",", "w", ")", "\n", "\n", "", "scale_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", "]", ")", "\n", "\n", "img1", "=", "scale_transform", "(", "img1", ")", "\n", "if", "img2", "is", "not", "None", ":", "\n", "            ", "img2", "=", "scale_transform", "(", "img2", ")", "\n", "\n", "", "if", "fb", "is", "not", "None", ":", "\n", "            ", "scale", "=", "float", "(", "self", ".", "size", "[", "1", "]", ")", "/", "float", "(", "w0", ")", "\n", "fb", "=", "fb", "*", "scale", "\n", "", "if", "phase", "==", "'test'", ":", "\n", "            ", "return", "img1", ",", "img2", ",", "depth", ",", "fb", "\n", "\n", "", "if", "depth", "is", "not", "None", ":", "\n", "            ", "depth_Image", "=", "Image", ".", "fromarray", "(", "depth", ",", "'F'", ")", "\n", "if", "self", ".", "depth_resize", "==", "'bicubic'", ":", "\n", "                ", "scale_transform_d", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", "]", ")", "\n", "", "elif", "self", ".", "depth_resize", "==", "'bilinear'", ":", "\n", "                ", "scale_transform_d", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "]", ")", "\n", "", "depth", "=", "scale_transform_d", "(", "depth_Image", ")", "\n", "\n", "", "if", "not", "self", ".", "size", "==", "0", ":", "\n", "\n", "            ", "if", "depth", "is", "not", "None", ":", "\n", "                ", "arr_depth", "=", "np", ".", "array", "(", "depth", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# arr_depth /= 65535.0  # cm->m, /10", "\n", "arr_depth", "/=", "255.0", "# cm->m, /10", "\n", "\n", "arr_depth", "[", "arr_depth", "<", "0.0", "]", "=", "0.0", "\n", "depth", "=", "Image", ".", "fromarray", "(", "arr_depth", ",", "'F'", ")", "\n", "\n", "", "", "if", "self", ".", "flip", "and", "not", "(", "img2", "is", "not", "None", "and", "depth", "is", "not", "None", ")", ":", "\n", "\n", "            ", "flip_prob", "=", "random", ".", "random", "(", ")", "\n", "flip_transform", "=", "transforms", ".", "Compose", "(", "[", "RandomHorizontalFlip", "(", "flip_prob", ")", "]", ")", "\n", "if", "img2", "is", "None", ":", "\n", "                ", "img1", "=", "flip_transform", "(", "img1", ")", "\n", "", "else", ":", "\n", "                ", "if", "flip_prob", "<", "0.5", ":", "\n", "                    ", "img1_", "=", "img1", "\n", "img2_", "=", "img2", "\n", "img1", "=", "flip_transform", "(", "img2_", ")", "\n", "img2", "=", "flip_transform", "(", "img1_", ")", "\n", "", "", "if", "depth", "is", "not", "None", ":", "\n", "                ", "depth", "=", "flip_transform", "(", "depth", ")", "\n", "\n", "", "", "if", "self", ".", "rotation", "and", "not", "(", "img2", "is", "not", "None", "and", "depth", "is", "not", "None", ")", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "degree", "=", "random", ".", "randrange", "(", "-", "500", ",", "500", ")", "/", "100", "\n", "img1", "=", "F", ".", "rotate", "(", "img1", ",", "degree", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "depth", "is", "not", "None", ":", "\n", "                    ", "depth", "=", "F", ".", "rotate", "(", "depth", ",", "degree", ",", "Image", ".", "BILINEAR", ")", "\n", "", "if", "img2", "is", "not", "None", ":", "\n", "                    ", "img2", "=", "F", ".", "rotate", "(", "img2", ",", "degree", ",", "Image", ".", "BICUBIC", ")", "\n", "", "", "", "if", "depth", "is", "not", "None", ":", "\n", "            ", "depth", "=", "np", ".", "array", "(", "depth", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "depth", "=", "depth", "*", "2.0", "\n", "depth", "-=", "1.0", "\n", "\n", "", "if", "self", ".", "augment", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "\n", "                ", "brightness", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "contrast", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "saturation", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "\n", "img1", "=", "F", ".", "adjust_brightness", "(", "img1", ",", "brightness", ")", "\n", "img1", "=", "F", ".", "adjust_contrast", "(", "img1", ",", "contrast", ")", "\n", "img1", "=", "F", ".", "adjust_saturation", "(", "img1", ",", "saturation", ")", "\n", "\n", "if", "img2", "is", "not", "None", ":", "\n", "                    ", "img2", "=", "F", ".", "adjust_brightness", "(", "img2", ",", "brightness", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.transform.DepthToTensor.__call__": [[182, 187], ["numpy.array", "torch.from_numpy().float", "torch.from_numpy", "numpy.array.reshape"], "methods", ["None"], ["img2", "=", "F", ".", "adjust_saturation", "(", "img2", ",", "saturation", ")", "\n", "", "", "", "return", "img1", ",", "img2", ",", "depth", ",", "fb", "\n", "\n", "", "", "class", "DepthToTensor", "(", "object", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "# tensors = [], [0, 1] -> [-1, 1]", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.VKitti_dataloader.Paired_transform.__call__": [[23, 36], ["random.random", "random.random", "torchvision.hflip", "torchvision.hflip", "torchvision.rotate", "random.randrange", "torchvision.rotate"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "depth", ")", ":", "\n", "        ", "flip", "=", "random", ".", "random", "(", ")", "\n", "if", "flip", ">", "0.5", ":", "\n", "            ", "image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "depth", "=", "F", ".", "hflip", "(", "depth", ")", "\n", "\n", "", "n_rotation", "=", "random", ".", "random", "(", ")", "\n", "if", "n_rotation", ">", "0.5", ":", "\n", "            ", "degree", "=", "random", ".", "randrange", "(", "-", "500", ",", "500", ")", "/", "100", "\n", "image", "=", "F", ".", "rotate", "(", "image", ",", "degree", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "depth", "is", "not", "None", ":", "\n", "                ", "depth", "=", "F", ".", "rotate", "(", "depth", ",", "degree", ",", "Image", ".", "BILINEAR", ")", "\n", "", "", "return", "image", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.VKitti_dataloader.to_tensor.__init__": [[38, 40], ["torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "ToTensor", "=", "tr", ".", "ToTensor", "(", ")", "\n", "", "def", "__call__", "(", "self", ",", "depth", ")", ":", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.VKitti_dataloader.to_tensor.__call__": [[40, 44], ["VKitti_dataloader.to_tensor.ToTensor().float", "VKitti_dataloader.to_tensor.ToTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "depth", ")", ":", "\n", "        ", "depth_tensor", "=", "self", ".", "ToTensor", "(", "depth", ")", ".", "float", "(", ")", "\n", "depth_tensor", "[", "depth_tensor", ">", "8000.0", "]", "=", "8000.0", "\n", "return", "depth_tensor", "/", "8000.0", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.VKitti_dataloader.VKitti.__init__": [[46, 66], ["VKitti_dataloader.Paired_transform", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "VKitti_dataloader.to_tensor", "torchvision.transforms.Normalize", "VKitti_dataloader.VKitti.augment_transform.append", "os.path.join", "os.path.join", "open", "f.readlines", "torchvision.transforms.ColorJitter", "fi.split"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.to_tensor"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", "=", "'/vulcanscratch/koutilya/Virtual_Kitti'", ",", "train", "=", "True", ",", "depth_resize", "=", "'bicubic'", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "paired_transform", "=", "Paired_transform", "(", ")", "\n", "self", ".", "tensor_transform", "=", "[", "tr", ".", "ToTensor", "(", ")", ",", "tr", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "self", ".", "label_tensor_transform", "=", "[", "to_tensor", "(", ")", ",", "tr", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", "]", "\n", "self", ".", "augment_transform", "=", "[", "]", "\n", "self", ".", "depth_resize", "=", "depth_resize", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "augment_transform", ".", "append", "(", "tr", ".", "ColorJitter", "(", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ")", "\n", "self", ".", "file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'trainA_SYN_original.txt'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'testA_SYN_original.txt'", ")", "\n", "\n", "", "self", ".", "image_transform", "=", "tr", ".", "Compose", "(", "self", ".", "augment_transform", "+", "self", ".", "tensor_transform", ")", "\n", "self", ".", "label_transform", "=", "tr", ".", "Compose", "(", "self", ".", "label_tensor_transform", ")", "\n", "\n", "with", "open", "(", "self", ".", "file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "filepaths", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "filepaths", "=", "[", "fi", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "for", "fi", "in", "self", ".", "filepaths", "]", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.VKitti_dataloader.VKitti.__len__": [[67, 69], ["len"], "methods", ["None"], ["\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filepaths", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.VKitti_dataloader.VKitti.__getitem__": [[70, 82], ["PIL.Image.open().convert", "PIL.Image.open", "VKitti_dataloader.VKitti.resize", "VKitti_dataloader.VKitti.resize", "VKitti_dataloader.VKitti.paired_transform", "VKitti_dataloader.VKitti.image_transform", "VKitti_dataloader.VKitti.label_transform", "filename.replace", "PIL.Image.open"], "methods", ["None"], ["\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "filepaths", "[", "idx", "]", ")", "\n", "image", "=", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "'RGB'", ")", "\n", "depth", "=", "Image", ".", "open", "(", "filename", ".", "replace", "(", "'rgb'", ",", "'depthgt'", ")", ")", "\n", "image", "=", "image", ".", "resize", "(", "[", "640", ",", "192", "]", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "self", ".", "depth_resize", "==", "'bilinear'", ":", "\n", "            ", "depth", "=", "depth", ".", "resize", "(", "[", "640", ",", "192", "]", ",", "Image", ".", "BILINEAR", ")", "\n", "", "elif", "self", ".", "depth_resize", "==", "'bicubic'", ":", "\n", "            ", "depth", "=", "depth", ".", "resize", "(", "[", "640", ",", "192", "]", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "image", ",", "depth", "=", "self", ".", "paired_transform", "(", "image", ",", "depth", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.read_calib_file": [[31, 49], ["set", "open", "f.readlines", "line.split", "value.strip.strip.strip", "set.issuperset", "numpy.array", "list", "map", "value.strip.strip.split"], "methods", ["None"], ["    ", "def", "read_calib_file", "(", "self", ",", "path", ")", ":", "\n", "# taken from https://github.com/hunse/kitti", "\n", "        ", "float_chars", "=", "set", "(", "\"0123456789.e+- \"", ")", "\n", "data", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "data", "[", "key", "]", "=", "value", "\n", "if", "float_chars", ".", "issuperset", "(", "value", ")", ":", "\n", "# try to cast to float array", "\n", "                    ", "try", ":", "\n", "                        ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "value", ".", "split", "(", "' '", ")", ")", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "# casting error: data[key] already eq. value, so pass", "\n", "                        ", "pass", "\n", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.get_fb": [[50, 67], ["Kitti_dataset_util.KITTI.read_calib_file", "cam2cam[].reshape", "cam2cam[].reshape", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.read_calib_file"], ["", "def", "get_fb", "(", "self", ",", "calib_dir", ",", "cam", "=", "2", ")", ":", "\n", "        ", "cam2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_cam_to_cam.txt'", ")", ")", "\n", "P2_rect", "=", "cam2cam", "[", "'P_rect_02'", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P3_rect", "=", "cam2cam", "[", "'P_rect_03'", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "\n", "# cam 2 is left of camera 0  -6cm", "\n", "# cam 3 is to the right  +54cm", "\n", "b2", "=", "P2_rect", "[", "0", ",", "3", "]", "/", "-", "P2_rect", "[", "0", ",", "0", "]", "\n", "b3", "=", "P3_rect", "[", "0", ",", "3", "]", "/", "-", "P3_rect", "[", "0", ",", "0", "]", "\n", "baseline", "=", "b3", "-", "b2", "\n", "\n", "if", "cam", "==", "2", ":", "\n", "            ", "focal_length", "=", "P2_rect", "[", "0", ",", "0", "]", "\n", "", "elif", "cam", "==", "3", ":", "\n", "            ", "focal_length", "=", "P3_rect", "[", "0", ",", "0", "]", "\n", "\n", "", "return", "focal_length", "*", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.load_velodyne_points": [[68, 73], ["numpy.fromfile().reshape", "numpy.fromfile"], "methods", ["None"], ["", "def", "load_velodyne_points", "(", "self", ",", "file_name", ")", ":", "\n", "# adapted from https://github.com/hunse/kitti", "\n", "        ", "points", "=", "np", ".", "fromfile", "(", "file_name", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "points", "[", ":", ",", "3", "]", "=", "1.0", "# homogeneous", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.lin_interp": [[74, 84], ["LinearNDInterpolator", "numpy.meshgrid", "LinearNDInterpolator.reshape", "numpy.arange", "numpy.arange", "numpy.vstack", "LinearNDInterpolator.", "I.flatten", "J.flatten"], "methods", ["None"], ["", "def", "lin_interp", "(", "self", ",", "shape", ",", "xyd", ")", ":", "\n", "# taken from https://github.com/hunse/kitti", "\n", "        ", "from", "scipy", ".", "interpolate", "import", "LinearNDInterpolator", "\n", "m", ",", "n", "=", "shape", "\n", "ij", ",", "d", "=", "xyd", "[", ":", ",", "1", ":", ":", "-", "1", "]", ",", "xyd", "[", ":", ",", "2", "]", "\n", "f", "=", "LinearNDInterpolator", "(", "ij", ",", "d", ",", "fill_value", "=", "0", ")", "\n", "J", ",", "I", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "n", ")", ",", "np", ".", "arange", "(", "m", ")", ")", "\n", "IJ", "=", "np", ".", "vstack", "(", "[", "I", ".", "flatten", "(", ")", ",", "J", ".", "flatten", "(", ")", "]", ")", ".", "T", "\n", "disparity", "=", "f", "(", "IJ", ")", ".", "reshape", "(", "shape", ")", "\n", "return", "disparity", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.sub2ind": [[85, 88], ["None"], "methods", ["None"], ["", "def", "sub2ind", "(", "self", ",", "matrixSize", ",", "rowSub", ",", "colSub", ")", ":", "\n", "        ", "m", ",", "n", "=", "matrixSize", "\n", "return", "rowSub", "*", "(", "n", "-", "1", ")", "+", "colSub", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.get_depth": [[89, 143], ["Kitti_dataset_util.KITTI.read_calib_file", "Kitti_dataset_util.KITTI.read_calib_file", "numpy.hstack", "numpy.vstack", "numpy.eye", "cam2cam[].reshape", "cam2cam[].reshape", "numpy.dot", "Kitti_dataset_util.KITTI.load_velodyne_points", "numpy.round", "numpy.round", "numpy.zeros", "Kitti_dataset_util.KITTI.sub2ind", "os.path.join", "os.path.join", "numpy.dot", "numpy.dot", "int", "int", "velo_pts_im[].min", "Kitti_dataset_util.KITTI.lin_interp"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.read_calib_file", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.read_calib_file", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.load_velodyne_points", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.sub2ind", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.KITTI.lin_interp"], ["", "def", "get_depth", "(", "self", ",", "calib_dir", ",", "velo_file_name", ",", "im_shape", ",", "cam", "=", "2", ",", "interp", "=", "False", ",", "vel_depth", "=", "True", ")", ":", "\n", "# load calibration files", "\n", "        ", "cam2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_cam_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_velo_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "np", ".", "hstack", "(", "(", "velo2cam", "[", "'R'", "]", ".", "reshape", "(", "3", ",", "3", ")", ",", "velo2cam", "[", "'T'", "]", "[", "...", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "velo2cam", "=", "np", ".", "vstack", "(", "(", "velo2cam", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1.0", "]", ")", ")", ")", "\n", "\n", "# compute projection matrix velodyne->image plane", "\n", "R_cam2rect", "=", "np", ".", "eye", "(", "4", ")", "\n", "R_cam2rect", "[", ":", "3", ",", ":", "3", "]", "=", "cam2cam", "[", "'R_rect_00'", "]", ".", "reshape", "(", "3", ",", "3", ")", "\n", "P_rect", "=", "cam2cam", "[", "'P_rect_0'", "+", "str", "(", "cam", ")", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P_velo2im", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "P_rect", ",", "R_cam2rect", ")", ",", "velo2cam", ")", "\n", "\n", "# load velodyne points and remove all behind image plane (approximation)", "\n", "# each row of the velodyne data is forward, left, up, reflectance", "\n", "velo", "=", "self", ".", "load_velodyne_points", "(", "velo_file_name", ")", "\n", "velo", "=", "velo", "[", "velo", "[", ":", ",", "0", "]", ">=", "0", ",", ":", "]", "\n", "\n", "# project the points to the camera", "\n", "velo_pts_im", "=", "np", ".", "dot", "(", "P_velo2im", ",", "velo", ".", "T", ")", ".", "T", "\n", "velo_pts_im", "[", ":", ",", ":", "2", "]", "=", "velo_pts_im", "[", ":", ",", ":", "2", "]", "/", "velo_pts_im", "[", ":", ",", "2", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "if", "vel_depth", ":", "\n", "            ", "velo_pts_im", "[", ":", ",", "2", "]", "=", "velo", "[", ":", ",", "0", "]", "\n", "\n", "# check if in bounds", "\n", "# use minus 1 to get the exact same value as KITTI matlab code", "\n", "", "velo_pts_im", "[", ":", ",", "0", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "0", "]", ")", "\n", "velo_pts_im", "[", ":", ",", "1", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "1", "]", ")", "\n", "velo_pts_im", "-=", "1", "\n", "val_inds", "=", "(", "velo_pts_im", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "val_inds", "=", "val_inds", "&", "(", "velo_pts_im", "[", ":", ",", "0", "]", "<", "im_shape", "[", "1", "]", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", "<", "im_shape", "[", "0", "]", ")", "\n", "velo_pts_im", "=", "velo_pts_im", "[", "val_inds", ",", ":", "]", "\n", "\n", "# project to image", "\n", "depth", "=", "np", ".", "zeros", "(", "(", "im_shape", ")", ")", "\n", "depth", "[", "velo_pts_im", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "velo_pts_im", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "]", "=", "velo_pts_im", "[", ":", ",", "2", "]", "\n", "\n", "# find the duplicate points and choose the closest depth", "\n", "inds", "=", "self", ".", "sub2ind", "(", "depth", ".", "shape", ",", "velo_pts_im", "[", ":", ",", "1", "]", ",", "velo_pts_im", "[", ":", ",", "0", "]", ")", "\n", "dupe_inds", "=", "[", "item", "for", "item", ",", "count", "in", "Counter", "(", "inds", ")", ".", "items", "(", ")", "if", "count", ">", "1", "]", "\n", "for", "dd", "in", "dupe_inds", ":", "\n", "            ", "pts", "=", "np", ".", "where", "(", "inds", "==", "dd", ")", "[", "0", "]", "\n", "x_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "0", "]", ")", "\n", "y_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "1", "]", ")", "\n", "depth", "[", "y_loc", ",", "x_loc", "]", "=", "velo_pts_im", "[", "pts", ",", "2", "]", ".", "min", "(", ")", "\n", "", "depth", "[", "depth", "<", "0", "]", "=", "0", "\n", "\n", "if", "interp", ":", "\n", "# interpolate the depth map to fill in holes", "\n", "            ", "depth_interp", "=", "lin_interp", "(", "im_shape", ",", "velo_pts_im", ")", "\n", "return", "depth", ",", "depth_interp", "\n", "", "else", ":", "\n", "            ", "return", "depth", "", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Dataloaders.Kitti_dataset_util.compute_errors": [[5, 28], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "function", ["None"], ["def", "compute_errors", "(", "ground_truth", ",", "predication", ")", ":", "\n", "\n", "# accuracy", "\n", "    ", "threshold", "=", "np", ".", "maximum", "(", "(", "ground_truth", "/", "predication", ")", ",", "(", "predication", "/", "ground_truth", ")", ")", "\n", "a1", "=", "(", "threshold", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "threshold", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "threshold", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "#MSE", "\n", "rmse", "=", "(", "ground_truth", "-", "predication", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "#MSE(log)", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "ground_truth", ")", "-", "np", ".", "log", "(", "predication", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "# Abs Relative difference", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "ground_truth", "-", "predication", ")", "/", "ground_truth", ")", "\n", "\n", "# Squared Relative difference", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "ground_truth", "-", "predication", ")", "**", "2", ")", "/", "ground_truth", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation_new.Solver.__init__": [[27, 73], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "networks.all_networks.define_G", "Validation_new.Solver.netT.cuda", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "Validation_new.Solver.netT_loss_fn.cuda", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "tensorboardX.SummaryWriter", "Validation_new.Solver.get_validation_data", "Dataloaders.Kitti_dataset_util.KITTI", "Dataloaders.transform.RandomImgAugment", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Dataloaders.transform.DepthToTensor"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_validation_data"], ["    ", "def", "__init__", "(", "self", ",", "exp", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "'/vulcanscratch/koutilya/projects/Domain_Adaptation/Common_Domain_Adaptation-Lighting/PTNet_Baseline'", "\n", "\n", "# Seed", "\n", "self", ".", "seed", "=", "1729", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "\n", "\n", "# Initialize networks", "\n", "self", ".", "netT", "=", "all_networks", ".", "define_G", "(", "3", ",", "1", ",", "64", ",", "4", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'UNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ",", "0.1", ")", "\n", "self", ".", "netT", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Loss", "\n", "self", ".", "netT_loss_fn", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "self", ".", "netT_loss_fn", "=", "self", ".", "netT_loss_fn", ".", "cuda", "(", ")", "\n", "\n", "# Training Configuration details", "\n", "self", ".", "batch_size", "=", "16", "\n", "joint_transform_list", "=", "[", "RandomImgAugment", "(", "no_flip", "=", "True", ",", "no_rotation", "=", "True", ",", "no_augment", "=", "True", ",", "size", "=", "(", "192", ",", "640", ")", ")", "]", "\n", "img_transform_list", "=", "[", "tr", ".", "ToTensor", "(", ")", ",", "tr", ".", "Normalize", "(", "[", ".5", ",", ".5", ",", ".5", "]", ",", "[", ".5", ",", ".5", ",", ".5", "]", ")", "]", "\n", "\n", "self", ".", "joint_transform", "=", "tr", ".", "Compose", "(", "joint_transform_list", ")", "\n", "\n", "self", ".", "img_transform", "=", "tr", ".", "Compose", "(", "img_transform_list", ")", "\n", "\n", "self", ".", "depth_transform", "=", "tr", ".", "Compose", "(", "[", "DepthToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "exp", "=", "exp", "\n", "if", "self", ".", "exp", "==", "'PTNet_Baseline_NEW'", ":", "\n", "            ", "self", ".", "model_string", "=", "''", "\n", "", "elif", "self", ".", "exp", "==", "'PTNet_Baseline_bicubic_NEW'", ":", "\n", "            ", "self", ".", "model_string", "=", "'_bicubic'", "\n", "\n", "", "self", ".", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'../tensorboard_logs/Vkitti-kitti/test/'", "+", "self", ".", "exp", ")", ")", "\n", "\n", "# Initialize Data", "\n", "self", ".", "get_validation_data", "(", ")", "\n", "\n", "self", ".", "garg_crop", "=", "True", "\n", "self", ".", "eigen_crop", "=", "False", "\n", "self", ".", "kitti", "=", "KITTI", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation_new.Solver.compute_errors": [[74, 97], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt.mean", "numpy.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "methods", ["None"], ["", "def", "compute_errors", "(", "self", ",", "ground_truth", ",", "predication", ")", ":", "\n", "\n", "# accuracy", "\n", "        ", "threshold", "=", "np", ".", "maximum", "(", "(", "ground_truth", "/", "predication", ")", ",", "(", "predication", "/", "ground_truth", ")", ")", "\n", "a1", "=", "(", "threshold", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "threshold", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "threshold", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "#MSE", "\n", "rmse", "=", "(", "ground_truth", "-", "predication", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "#MSE(log)", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "ground_truth", ")", "-", "np", ".", "log", "(", "predication", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "# Abs Relative difference", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "ground_truth", "-", "predication", ")", "/", "ground_truth", ")", "\n", "\n", "# Squared Relative difference", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "ground_truth", "-", "predication", ")", "**", "2", ")", "/", "ground_truth", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation_new.Solver.get_validation_data": [[99, 102], ["Dataloaders.Kitti_dataloader.KittiDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "get_validation_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_val_dataset", "=", "real_dataset", "(", "data_file", "=", "'test.txt'", ",", "phase", "=", "'test'", ",", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", "\n", "self", ".", "real_val_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation_new.Solver.load_prev_model": [[103, 111], ["glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Validation_new.Solver.netT.load_state_dict", "str"], "methods", ["None"], ["", "def", "load_prev_model", "(", "self", ")", ":", "\n", "        ", "saved_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'saved_models'", ",", "'PTNet_baseline-'", "+", "str", "(", "self", ".", "iteration", ")", "+", "self", ".", "model_string", "+", "'.pth.tar'", ")", ")", "\n", "if", "len", "(", "saved_models", ")", ">", "0", ":", "\n", "            ", "model_state", "=", "torch", ".", "load", "(", "saved_models", "[", "0", "]", ")", "\n", "self", ".", "netT", ".", "load_state_dict", "(", "model_state", "[", "'netT_state_dict'", "]", ")", "\n", "# self.iteration = model_state['iteration']", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation_new.Solver.tensor2im": [[112, 116], ["depth.cpu().data.float().numpy().transpose", "depth.cpu().data.float().numpy", "depth.cpu().data.float", "depth.cpu"], "methods", ["None"], ["", "def", "tensor2im", "(", "self", ",", "depth", ")", ":", "\n", "        ", "depth_numpy", "=", "depth", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "depth_numpy", "=", "(", "depth_numpy", "+", "1.0", ")", "/", "2.0", "# Unnormalize between 0 and 1", "\n", "return", "depth_numpy", "*", "80.0", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation_new.Solver.get_depth_manually": [[117, 125], ["depth_file.split", "os.join", "os.join", "Image.open", "numpy.array", "depth_split[].split"], "methods", ["None"], ["", "def", "get_depth_manually", "(", "self", ",", "depth_file", ")", ":", "\n", "        ", "root_dir", "=", "'/vulcanscratch/koutilya/kitti/Depth_from_velodyne/'", "\n", "depth_split", "=", "depth_file", ".", "split", "(", "'/'", ")", "\n", "main_file", "=", "osp", ".", "join", "(", "root_dir", ",", "'test'", ",", "depth_split", "[", "0", "]", ",", "depth_split", "[", "1", "]", ",", "depth_split", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.png'", ")", "\n", "\n", "depth", "=", "Image", ".", "open", "(", "main_file", ")", "\n", "depth", "=", "np", ".", "array", "(", "depth", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation_new.Solver.Validate": [[126, 132], ["Validation_new.Solver.netT.eval", "glob.glob", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Validation_new.Solver.load_prev_model", "Validation_new.Solver.Validation", "len"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.Validation"], ["", "def", "Validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "netT", ".", "eval", "(", ")", "\n", "saved_models_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'saved_models'", ",", "'PTNet_baseline-*999'", "+", "self", ".", "model_string", "+", "'.pth.tar'", ")", ")", "\n", "for", "self", ".", "iteration", "in", "range", "(", "999", ",", "1000", "*", "len", "(", "saved_models_list", ")", ",", "1000", ")", ":", "\n", "            ", "self", ".", "load_prev_model", "(", ")", "\n", "self", ".", "Validation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation_new.Solver.Validation": [[133, 199], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "Validation_new.Solver.writer.close", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "print", "print", "Validation_new.Solver.writer.add_scalars", "Validation_new.Solver.writer.add_scalars", "Validation_new.Solver.writer.add_scalars", "Validation_new.Solver.writer.add_scalars", "Validation_new.Solver.writer.add_scalars", "Validation_new.Solver.writer.add_scalars", "Validation_new.Solver.writer.add_scalars", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "Validation_new.Solver.netT", "Validation_new.Solver.tensor2im", "range", "Validation_new.Solver.real_val_image.cuda", "Validation_new.Solver.get_depth_manually", "cv2.resize", "numpy.logical_and", "numpy.zeros", "numpy.logical_and", "Validation_new.Solver.compute_errors", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.tensor2im", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_depth_manually", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.compute_errors"], ["", "", "def", "Validation", "(", "self", ")", ":", "\n", "        ", "num_samples", "=", "len", "(", "self", ".", "real_val_dataset", ")", "\n", "abs_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "sq_rel", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "rmse_log", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a1", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a2", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "a3", "=", "np", ".", "zeros", "(", "num_samples", ",", "np", ".", "float32", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "data", ",", "depth_filenames", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "real_val_dataloader", ")", ")", ":", "\n", "                ", "self", ".", "real_val_image", "=", "data", "[", "'left_img'", "]", "#, data['depth'] # self.real_depth is a numpy array ", "\n", "self", ".", "real_val_image", "=", "Variable", "(", "self", ".", "real_val_image", ".", "cuda", "(", ")", ")", "\n", "\n", "depth", "=", "self", ".", "netT", "(", "self", ".", "real_val_image", ")", "\n", "depth", "=", "depth", "[", "-", "1", "]", "\n", "depth_numpy", "=", "self", ".", "tensor2im", "(", "depth", ")", "# 0-80m", "\n", "for", "t_id", "in", "range", "(", "depth_numpy", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "t_id_global", "=", "(", "i", "*", "self", ".", "batch_size", ")", "+", "t_id", "\n", "# _,_,_,ground_depth = self.real_val_dataset.read_data(self.real_val_dataset.files[(i*self.batch_size)+t_id])", "\n", "h", ",", "w", "=", "self", ".", "real_val_image", ".", "shape", "[", "2", "]", ",", "self", ".", "real_val_image", ".", "shape", "[", "3", "]", "\n", "datafiles1", "=", "self", ".", "real_val_dataset", ".", "files", "[", "t_id_global", "]", "\n", "ground_depth", "=", "self", ".", "get_depth_manually", "(", "datafiles1", "[", "'depth'", "]", ")", "\n", "height", ",", "width", "=", "ground_depth", ".", "shape", "\n", "\n", "predicted_depth", "=", "cv2", ".", "resize", "(", "depth_numpy", "[", "t_id", "]", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "predicted_depth", "[", "predicted_depth", "<", "1.0", "]", "=", "1.0", "\n", "# predicted_depth[predicted_depth < 1.0] = 1.0", "\n", "predicted_depth", "[", "predicted_depth", ">", "50.0", "]", "=", "50.0", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "ground_depth", ">", "1.0", ",", "ground_depth", "<", "50.0", ")", "\n", "\n", "# crop used by Garg ECCV16", "\n", "if", "self", ".", "garg_crop", ":", "\n", "                        ", "self", ".", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "height", ",", "0.99189189", "*", "height", ",", "\n", "0.03594771", "*", "width", ",", "0.96405229", "*", "width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# crop we found by trail and error to reproduce Eigen NIPS14 results", "\n", "", "elif", "self", ".", "eigen_crop", ":", "\n", "                        ", "self", ".", "crop", "=", "np", ".", "array", "(", "[", "0.3324324", "*", "height", ",", "0.91351351", "*", "height", ",", "\n", "0.0359477", "*", "width", ",", "0.96405229", "*", "width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "self", ".", "crop", "[", "0", "]", ":", "self", ".", "crop", "[", "1", "]", ",", "self", ".", "crop", "[", "2", "]", ":", "self", ".", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "\n", "abs_rel", "[", "t_id_global", "]", ",", "sq_rel", "[", "t_id_global", "]", ",", "rmse", "[", "t_id_global", "]", ",", "rmse_log", "[", "t_id_global", "]", ",", "a1", "[", "t_id_global", "]", ",", "a2", "[", "t_id_global", "]", ",", "a3", "[", "t_id_global", "]", "=", "self", ".", "compute_errors", "(", "ground_depth", "[", "mask", "]", ",", "predicted_depth", "[", "mask", "]", ")", "\n", "\n", "# print('{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f}'", "\n", "#     .format(t_id, abs_rel[t_id], sq_rel[t_id], rmse[t_id], rmse_log[t_id], a1[t_id], a2[t_id], a3[t_id]))", "\n", "\n", "", "", "print", "(", "'{:>10},{:>10},{:>10},{:>10},{:>10},{:>10},{:>10}'", ".", "format", "(", "'abs_rel'", ",", "'sq_rel'", ",", "'rmse'", ",", "'rmse_log'", ",", "'a1'", ",", "'a2'", ",", "'a3'", ")", ")", "\n", "print", "(", "'{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f},{:10.4f}'", "\n", ".", "format", "(", "abs_rel", ".", "mean", "(", ")", ",", "sq_rel", ".", "mean", "(", ")", ",", "rmse", ".", "mean", "(", ")", ",", "rmse_log", ".", "mean", "(", ")", ",", "a1", ".", "mean", "(", ")", ",", "a2", ".", "mean", "(", ")", ",", "a3", ".", "mean", "(", ")", ")", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'Kitti_Validatoin_metrics/Abs_Rel'", ",", "{", "self", ".", "exp", ":", "abs_rel", ".", "mean", "(", ")", "}", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'Kitti_Validatoin_metrics/Sq_Rel'", ",", "{", "self", ".", "exp", ":", "sq_rel", ".", "mean", "(", ")", "}", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'Kitti_Validatoin_metrics/RMSE'", ",", "{", "self", ".", "exp", ":", "rmse", ".", "mean", "(", ")", "}", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'Kitti_Validatoin_metrics/RMSE_log'", ",", "{", "self", ".", "exp", ":", "rmse_log", ".", "mean", "(", ")", "}", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'Kitti_Validatoin_metrics/del<1.25'", ",", "{", "self", ".", "exp", ":", "a1", ".", "mean", "(", ")", "}", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'Kitti_Validatoin_metrics/del<1.25^2'", ",", "{", "self", ".", "exp", ":", "a2", ".", "mean", "(", ")", "}", ",", "self", ".", "iteration", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'Kitti_Validatoin_metrics/del<1.25^3'", ",", "{", "self", ".", "exp", ":", "a3", ".", "mean", "(", ")", "}", ",", "self", ".", "iteration", ")", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.__init__": [[22, 60], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "networks.all_networks.define_G", "Solver.Solver.netT.cuda", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "Solver.Solver.netT_loss_fn.cuda", "torch.Adam", "torch.Adam", "torch.Adam", "tensorboardX.SummaryWriter", "Solver.Solver.get_training_data", "Solver.Solver.get_training_dataloaders", "Solver.Solver.get_validation_data", "Solver.Solver.netT.parameters", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_training_data", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_training_dataloaders", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_validation_data"], ["\n", "from", "Dataloaders", ".", "VKitti_dataloader", "import", "VKitti", "as", "syn_dataset", "\n", "from", "Dataloaders", ".", "Kitti_dataloader_training", "import", "DepthToTensor", ",", "KittiDataset", "as", "real_dataset", "\n", "from", "Dataloaders", ".", "Kitti_dataloader", "import", "KittiDataset", "as", "real_val_dataset", "\n", "import", "Dataloaders", ".", "transform", "as", "transf", "\n", "\n", "class", "Solver", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "'.'", "\n", "self", ".", "opt", "=", "opt", "\n", "# Seed", "\n", "self", ".", "seed", "=", "1729", "# The famous Hardy-Ramanujan number", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "\n", "\n", "# Initialize networks", "\n", "self", ".", "netG", "=", "all_networks", ".", "define_G", "(", "3", ",", "3", ",", "64", ",", "9", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'ResNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ")", "\n", "self", ".", "netD", "=", "[", "Discriminator", "(", "nout", "=", "1", ",", "last_layer_activation", "=", "False", ")", "]", "\n", "\n", "self", ".", "netT", "=", "all_networks", ".", "define_G", "(", "3", ",", "1", ",", "64", ",", "4", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'UNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ",", "0.1", ")", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "self", ".", "netT", ".", "cuda", "(", ")", "\n", "for", "disc", "in", "self", ".", "netD", ":", "\n", "            ", "disc", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Loss", "\n", "", "self", ".", "netG_loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "netD_loss_fn", "=", "nn", ".", "KLDivLoss", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "geometric_loss_fn", "=", "ReconLoss", "(", ")", "\n", "\n", "self", ".", "netG_loss_fn", "=", "self", ".", "netG_loss_fn", ".", "cuda", "(", ")", "\n", "self", ".", "netD_loss_fn", "=", "self", ".", "netD_loss_fn", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.get_validation_data": [[61, 64], ["Dataloaders.VKitti_dataloader.VKitti", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["self", ".", "netT_loss_fn", "=", "self", ".", "netT_loss_fn", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Optimizers", "\n", "self", ".", "netG_optimizer", "=", "Optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "1e-5", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.loop_iter": [[65, 69], ["iter"], "methods", ["None"], ["self", ".", "netD_optimizer", "=", "[", "]", "\n", "for", "disc", "in", "self", ".", "netD", ":", "\n", "            ", "self", ".", "netD_optimizer", ".", "append", "(", "Optim", ".", "Adam", "(", "disc", ".", "parameters", "(", ")", ",", "lr", "=", "1e-5", ")", ")", "\n", "", "self", ".", "netT_optimizer", "=", "Optim", ".", "Adam", "(", "self", ".", "netT", ".", "parameters", "(", ")", ",", "lr", "=", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.get_training_data": [[70, 72], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Dataloaders.VKitti_dataloader.VKitti"], "methods", ["None"], ["# Training Configuration details", "\n", "self", ".", "batch_size", "=", "2", "\n", "self", ".", "iteration", "=", "None", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.get_training_dataloaders": [[73, 75], ["Solver.Solver.loop_iter"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.loop_iter"], ["self", ".", "total_iterations", "=", "200000", "\n", "self", ".", "START_ITER", "=", "0", "\n", "self", ".", "flag", "=", "True", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.load_prev_model": [[76, 86], ["glob.glob", "os.path.join", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Solver.Solver.netT.load_state_dict", "Solver.Solver.netT_optimizer.load_state_dict"], "methods", ["None"], ["self", ".", "garg_crop", "=", "True", "\n", "self", ".", "eigen_crop", "=", "False", "\n", "self", ".", "best_a1", "=", "0.0", "\n", "\n", "self", ".", "kr", "=", "1", "\n", "self", ".", "kd", "=", "1", "\n", "self", ".", "kcritic", "=", "5", "\n", "self", ".", "gamma", "=", "10", "\n", "\n", "# Transforms", "\n", "joint_transform_list", "=", "[", "transf", ".", "RandomImgAugment", "(", "no_flip", "=", "False", ",", "no_rotation", "=", "False", ",", "no_augment", "=", "False", ",", "size", "=", "(", "192", ",", "640", ")", ")", "]", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.save_model": [[87, 97], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.system", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "Solver.Solver.netT.state_dict", "Solver.Solver.netT_optimizer.state_dict", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["img_transform_list", "=", "[", "tr", ".", "ToTensor", "(", ")", ",", "tr", ".", "Normalize", "(", "[", ".5", ",", ".5", ",", ".5", "]", ",", "[", ".5", ",", ".5", ",", ".5", "]", ")", "]", "\n", "self", ".", "joint_transform", "=", "tr", ".", "Compose", "(", "joint_transform_list", ")", "\n", "self", ".", "img_transform", "=", "tr", ".", "Compose", "(", "img_transform_list", ")", "\n", "self", ".", "depth_transform", "=", "tr", ".", "Compose", "(", "[", "DepthToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'tensorboard_logs/Vkitti-kitti/train'", ")", ")", "\n", "self", ".", "saved_models_dir", "=", "'saved_models'", "\n", "\n", "# Initialize Data", "\n", "self", ".", "get_training_data", "(", ")", "\n", "self", ".", "get_training_dataloaders", "(", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.get_syn_data": [[98, 101], ["next", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "Solver.Solver.syn_image.cuda", "Solver.Solver.syn_label.cuda"], "methods", ["None"], ["self", ".", "get_validation_data", "(", ")", "\n", "\n", "", "def", "loop_iter", "(", "self", ",", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.update_netT": [[102, 110], ["Solver.Solver.netT", "Solver.Solver.netT_loss_fn", "Solver.Solver.netT_optimizer.zero_grad", "Solver.Solver.netT_loss.backward", "Solver.Solver.netT_optimizer.step"], "methods", ["None"], ["            ", "for", "data", "in", "iter", "(", "loader", ")", ":", "\n", "                ", "yield", "data", "\n", "\n", "", "", "", "def", "get_training_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "syn_loader", "=", "DataLoader", "(", "syn_dataset", "(", "train", "=", "True", ")", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_loader", "=", "DataLoader", "(", "real_dataset", "(", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "", "def", "get_training_dataloaders", "(", "self", ")", ":", "\n", "        ", "self", ".", "syn_iter", "=", "self", ".", "loop_iter", "(", "self", ".", "syn_loader", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.train": [[112, 130], ["Solver.Solver.load_prev_model", "tqdm.tqdm.tqdm", "Solver.Solver.writer.close", "range", "Solver.Solver.get_syn_data", "Solver.Solver.update_netT", "Solver.Solver.writer.add_scalar", "Solver.Solver.save_model", "Solver.Solver.Validation"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_syn_data", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.update_netT", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.save_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.Validation"], ["\n", "", "def", "load_pretrained_models", "(", "self", ")", ":", "\n", "        ", "model_state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'Gen_Baseline/saved_models/Gen_Resnet_Baseline.pth.tar'", ")", ")", "\n", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "model_state", "[", "'netG_state_dict'", "]", ")", "\n", "self", ".", "netG_optimizer", ".", "load_state_dict", "(", "model_state", "[", "'netG_optimizer'", "]", ")", "\n", "\n", "model_state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'PTNet_Baseline/saved_models/PTNet_baseline-8999_bicubic.pth.tar'", ")", ")", "\n", "self", ".", "netT", ".", "load_state_dict", "(", "model_state", "[", "'netT_state_dict'", "]", ")", "\n", "self", ".", "netT_optimizer", ".", "load_state_dict", "(", "model_state", "[", "'netT_optimizer'", "]", ")", "\n", "\n", "", "def", "load_prev_model", "(", "self", ",", "model_status", "=", "'latest'", ")", ":", "\n", "        ", "saved_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ",", "'Depth_Estimator_WI_geom_bicubic_da-'", "+", "model_status", "+", "'.pth.tar'", ")", ")", "\n", "if", "len", "(", "saved_models", ")", ">", "0", ":", "\n", "            ", "saved_iters", "=", "[", "int", "(", "s", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "s", "in", "saved_models", "]", "\n", "recent_id", "=", "saved_iters", ".", "index", "(", "max", "(", "saved_iters", ")", ")", "\n", "saved_model", "=", "saved_models", "[", "recent_id", "]", "\n", "model_state", "=", "torch", ".", "load", "(", "saved_model", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "model_state", "[", "'netG_state_dict'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Solver.Solver.Validation": [[131, 145], ["Solver.Solver.netT.eval", "Solver.Solver.writer.add_scalar", "Solver.Solver.netT.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "enumerate", "Solver.Solver.netT", "Solver.Solver.netT_loss_fn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "syn_image.cuda", "syn_label.cuda"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.train"], ["self", ".", "netT", ".", "load_state_dict", "(", "model_state", "[", "'netT_state_dict'", "]", ")", "\n", "\n", "self", ".", "netG_optimizer", ".", "load_state_dict", "(", "model_state", "[", "'netG_optimizer'", "]", ")", "\n", "self", ".", "netT_optimizer", ".", "load_state_dict", "(", "model_state", "[", "'netT_optimizer'", "]", ")", "\n", "\n", "for", "i", ",", "disc", "in", "enumerate", "(", "self", ".", "netD", ")", ":", "\n", "                ", "disc", ".", "load_state_dict", "(", "model_state", "[", "'netD'", "+", "str", "(", "i", ")", "+", "'_state_dict'", "]", ")", "\n", "self", ".", "netD_optimizer", "[", "i", "]", ".", "load_state_dict", "(", "model_state", "[", "'netD'", "+", "str", "(", "i", ")", "+", "'_optimizer_state_dict'", "]", ")", "\n", "\n", "", "self", ".", "START_ITER", "=", "model_state", "[", "'iteration'", "]", "+", "1", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "def", "save_model", "(", "self", ",", "model_status", "=", "'latest'", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "saved_models_dir", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.__init__": [[27, 63], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "networks.Unet._UNetGenerator", "Validation.Solver.netT.cuda", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "Validation.Solver.netT_loss_fn.cuda", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "Validation.Solver.get_validation_data", "Dataloaders.Kitti_dataset_util.KITTI", "Dataloaders.transform.RandomImgAugment", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "Dataloaders.transform.DepthToTensor"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_validation_data"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "'.'", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "val_string", "=", "'test'", "\n", "if", "self", ".", "opt", ".", "val", ":", "\n", "            ", "self", ".", "val_string", "=", "'val'", "\n", "\n", "# Seed", "\n", "", "self", ".", "seed", "=", "1729", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "\n", "\n", "# Initialize networks", "\n", "self", ".", "netG", "=", "all_networks", ".", "define_G", "(", "3", ",", "3", ",", "64", ",", "9", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'ResNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ")", "\n", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "netT", "=", "all_networks", ".", "define_G", "(", "3", ",", "1", ",", "64", ",", "4", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'UNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ",", "0.1", ")", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "self", ".", "netT", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Loss", "\n", "self", ".", "netG_loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "netG_loss_fn", "=", "self", ".", "netG_loss_fn", ".", "cuda", "(", ")", "\n", "self", ".", "netT_loss_fn", "=", "self", ".", "netT_loss_fn", ".", "cuda", "(", ")", "\n", "\n", "# Training Configuration details", "\n", "self", ".", "batch_size", "=", "16", "\n", "self", ".", "iteration", "=", "None", "\n", "# Transforms", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.compute_errors": [[64, 87], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt.mean", "numpy.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "methods", ["None"], ["joint_transform_list", "=", "[", "transf", ".", "RandomImgAugment", "(", "no_flip", "=", "True", ",", "no_rotation", "=", "True", ",", "no_augment", "=", "True", ",", "size", "=", "(", "192", ",", "640", ")", ")", "]", "\n", "img_transform_list", "=", "[", "tr", ".", "ToTensor", "(", ")", ",", "tr", ".", "Normalize", "(", "[", ".5", ",", ".5", ",", ".5", "]", ",", "[", ".5", ",", ".5", ",", ".5", "]", ")", "]", "\n", "self", ".", "joint_transform", "=", "tr", ".", "Compose", "(", "joint_transform_list", ")", "\n", "self", ".", "img_transform", "=", "tr", ".", "Compose", "(", "img_transform_list", ")", "\n", "self", ".", "depth_transform", "=", "tr", ".", "Compose", "(", "[", "DepthToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'tensorboard_logs/Vkitti-kitti'", ",", "self", ".", "val_string", ")", ")", "\n", "self", ".", "saved_models_dir", "=", "'saved_models'", "\n", "\n", "# Initialize Data", "\n", "self", ".", "get_validation_data", "(", ")", "\n", "\n", "self", ".", "garg_crop", "=", "True", "\n", "self", ".", "eigen_crop", "=", "False", "\n", "self", ".", "flag", "=", "True", "\n", "\n", "", "def", "loop_iter", "(", "self", ",", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "data", "in", "iter", "(", "loader", ")", ":", "\n", "                ", "yield", "data", "\n", "\n", "", "", "", "def", "compute_errors", "(", "self", ",", "ground_truth", ",", "predication", ")", ":", "\n", "\n", "# accuracy", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_validation_data": [[89, 92], ["Dataloaders.Kitti_dataloader.KittiDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["a1", "=", "(", "threshold", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "threshold", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "threshold", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.load_prev_model": [[93, 101], ["glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Validation.Solver.netT.load_state_dict"], "methods", ["None"], ["#MSE", "\n", "rmse", "=", "(", "ground_truth", "-", "predication", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "#MSE(log)", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "ground_truth", ")", "-", "np", ".", "log", "(", "predication", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "# Abs Relative difference", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.tensor2im": [[102, 106], ["depth.cpu().data.float().numpy().transpose", "depth.cpu().data.float().numpy", "depth.cpu().data.float", "depth.cpu"], "methods", ["None"], ["abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "ground_truth", "-", "predication", ")", "/", "ground_truth", ")", "\n", "\n", "# Squared Relative difference", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "ground_truth", "-", "predication", ")", "**", "2", ")", "/", "ground_truth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_depth_manually": [[107, 115], ["depth_file.split", "os.join", "os.join", "Image.open", "numpy.array", "depth_split[].split"], "methods", ["None"], ["return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n", "\n", "", "def", "get_validation_data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "val", ":", "\n", "            ", "self", ".", "real_val_dataset", "=", "real_dataset", "(", "data_file", "=", "'val.txt'", ",", "phase", "=", "'val'", ",", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "real_val_dataset", "=", "real_dataset", "(", "data_file", "=", "'test.txt'", ",", "phase", "=", "'test'", ",", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", "\n", "", "self", ".", "real_val_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.Validate": [[116, 174], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "Validation.Solver.load_prev_model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Validation.Solver.netT.eval", "tqdm.tqdm.tqdm", "print", "print", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "Validation.Solver.netT", "Validation.Solver.tensor2im", "range", "Validation.Solver.real_val_image.cuda", "Validation.Solver.get_depth_manually", "cv2.resize", "numpy.logical_and", "numpy.zeros", "numpy.logical_and", "Validation.Solver.compute_errors", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.tensor2im", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.get_depth_manually", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.PTNet_Baseline.Validation.Solver.compute_errors"], ["self", ".", "real_val_sample_dataloader", "=", "DataLoader", "(", "self", ".", "real_val_dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_val_sample_images", ",", "self", ".", "real_val_sample_filenames", "=", "next", "(", "iter", "(", "self", ".", "real_val_sample_dataloader", ")", ")", "\n", "self", ".", "real_val_sample_images", "=", "self", ".", "real_val_sample_images", "[", "'left_img'", "]", "\n", "self", ".", "real_val_sample_images", "=", "Variable", "(", "self", ".", "real_val_sample_images", ".", "cuda", "(", ")", ")", "\n", "\n", "", "def", "load_prev_model", "(", "self", ")", ":", "\n", "# saved_models = glob.glob(os.path.join(self.root_dir, self.saved_models_dir, 'Depth_Estimator_da-'+str(self.iteration)+'.pth.tar' ))", "\n", "        ", "saved_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "'/vulcanscratch/koutilya/projects/Domain_Adaptation/Common_Domain_Adaptation-Lighting/saved_models_ablation_studies'", ",", "'Depth_Estimator_WI_geom_new_VKitti_bicubic_da-'", "+", "str", "(", "self", ".", "iteration", ")", "+", "'.pth.tar'", ")", ")", "\n", "if", "len", "(", "saved_models", ")", ">", "0", ":", "\n", "            ", "saved_iters", "=", "[", "int", "(", "s", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "for", "s", "in", "saved_models", "]", "\n", "recent_id", "=", "saved_iters", ".", "index", "(", "max", "(", "saved_iters", ")", ")", "\n", "saved_model", "=", "saved_models", "[", "recent_id", "]", "\n", "model_state", "=", "torch", ".", "load", "(", "saved_model", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "model_state", "[", "'netG_state_dict'", "]", ")", "\n", "self", ".", "netT", ".", "load_state_dict", "(", "model_state", "[", "'netT_state_dict'", "]", ")", "\n", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "def", "tensor2im", "(", "self", ",", "depth", ")", ":", "\n", "        ", "depth_numpy", "=", "depth", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "depth_numpy", "=", "(", "depth_numpy", "+", "1.0", ")", "/", "2.0", "# Unnormalize between 0 and 1", "\n", "return", "depth_numpy", "*", "80.0", "\n", "\n", "", "def", "colorize", "(", "self", ",", "value", ",", "vmin", "=", "None", ",", "vmax", "=", "None", ",", "cmap", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        A utility function for Torch/Numpy that maps a grayscale image to a matplotlib\n        colormap for use with TensorBoard image summaries.\n        By default it will normalize the input value to the range 0..1 before mapping\n        to a grayscale colormap.\n        Arguments:\n        - value: 2D Tensor of shape [height, width] or 3D Tensor of shape\n            [height, width, 1].\n        - vmin: the minimum value of the range used for normalization.\n            (Default: value minimum)\n        - vmax: the maximum value of the range used for normalization.\n            (Default: value maximum)\n        - cmap: a valid cmap named for use with matplotlib's `get_cmap`.\n            (Default: Matplotlib default colormap)\n        \n        Returns a 4D uint8 tensor of shape [height, width, 4].\n        \"\"\"", "\n", "\n", "# # normalize", "\n", "# vmin = value.min() if vmin is None else vmin", "\n", "# vmax = value.max() if vmax is None else vmax", "\n", "# if vmin!=vmax:", "\n", "#     value = (value - vmin) / (vmax - vmin) # vmin..vmax", "\n", "# else:", "\n", "#     # Avoid 0-division", "\n", "#     value = value*0.", "\n", "# # squeeze last dim if it exists", "\n", "# value = value.squeeze()", "\n", "\n", "cmapper", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmap", ")", "\n", "value", "=", "cmapper", "(", "value", ",", "bytes", "=", "True", ")", "# (nxmx4)", "\n", "return", "value", "\n", "\n", "", "def", "Validate", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.GaussianNoiseLayer.__init__": [[149, 151], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GaussianNoiseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.GaussianNoiseLayer.forward": [[152, 157], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "x.data.get_device", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", "==", "False", ":", "\n", "            ", "return", "x", "\n", "", "noise", "=", "Variable", "(", "(", "torch", ".", "randn", "(", "x", ".", "size", "(", ")", ")", ".", "cuda", "(", "x", ".", "data", ".", "get_device", "(", ")", ")", "-", "0.5", ")", "/", "10.0", ")", "\n", "return", "x", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._InceptionBlock.__init__": [[160, 179], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "range", "norm_layer", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "setattr", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "width", "=", "1", ",", "drop_rate", "=", "0", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_InceptionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "i", "in", "range", "(", "width", ")", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "i", "*", "2", "+", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "i", "*", "2", "+", "1", ",", "bias", "=", "use_bias", ")", "\n", ")", "\n", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "layer", ")", "\n", "\n", "", "self", ".", "norm1", "=", "norm_layer", "(", "output_nc", "*", "width", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "output_nc", ")", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "branch1x1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "output_nc", "*", "width", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._InceptionBlock.forward": [[181, 193], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "all_networks._InceptionBlock.nonlinearity", "all_networks._InceptionBlock.norm2", "all_networks._InceptionBlock.nonlinearity", "getattr", "result.append", "all_networks._InceptionBlock.norm1", "all_networks._InceptionBlock.branch1x1", "torch.dropout", "torch.dropout", "torch.dropout", "getattr.", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ")", "\n", "result", ".", "append", "(", "layer", "(", "x", ")", ")", "\n", "", "output", "=", "torch", ".", "cat", "(", "result", ",", "1", ")", "\n", "output", "=", "self", ".", "nonlinearity", "(", "self", ".", "norm1", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "norm2", "(", "self", ".", "branch1x1", "(", "output", ")", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "output", "+", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._EncoderBlock.__init__": [[196, 209], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "middle_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_EncoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "middle_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "middle_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "middle_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._EncoderBlock.forward": [[210, 212], ["all_networks._EncoderBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._DownBlock.__init__": [[215, 226], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._DownBlock.forward": [[227, 229], ["all_networks._DownBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._ShuffleUpBlock.__init__": [[232, 245], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "up_scale", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_ShuffleUpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "input_nc", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "up_scale", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._ShuffleUpBlock.forward": [[246, 248], ["all_networks._ShuffleUpBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._DecoderUpBlock.__init__": [[251, 265], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "middle_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DecoderUpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "middle_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "middle_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "middle_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._DecoderUpBlock.forward": [[266, 268], ["all_networks._DecoderUpBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._OutputBlock.__init__": [[271, 281], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "int"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_OutputBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "int", "(", "kernel_size", "/", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._OutputBlock.forward": [[282, 284], ["all_networks._OutputBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._ResGenerator.__init__": [[291, 347], ["torch.Module.__init__", "all_networks.get_norm_layer", "all_networks.get_nonlinearity_layer", "range", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "min", "min", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "all_networks._EncoderBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "all_networks._InceptionBlock", "all_networks.GaussianNoiseLayer", "all_networks._DecoderUpBlock"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_norm_layer", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_blocks", "=", "6", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_ResGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "encoder", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "mult", "=", "1", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "i", "+", "1", ")", ",", "2", ")", "\n", "encoder", "+=", "[", "\n", "_EncoderBlock", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "]", "\n", "\n", "", "mult", "=", "min", "(", "2", "**", "n_downsampling", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "n_blocks", "-", "n_downsampling", ")", ":", "\n", "            ", "encoder", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "nonlinearity", "=", "nonlinearity", ",", "width", "=", "1", ",", "\n", "drop_rate", "=", "drop_rate", ",", "use_bias", "=", "use_bias", ")", "\n", "]", "\n", "\n", "", "decoder", "=", "[", "]", "\n", "if", "add_noise", ":", "\n", "            ", "decoder", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult_prev", "=", "mult", "\n", "mult", "=", "min", "(", "2", "**", "(", "n_downsampling", "-", "i", "-", "1", ")", ",", "2", ")", "\n", "decoder", "+=", "[", "\n", "_DecoderUpBlock", "(", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult_prev", ",", "ngf", "*", "mult", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", ",", "\n", "]", "\n", "\n", "", "decoder", "+=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "]", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "encoder", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._ResGenerator.forward": [[348, 354], ["all_networks._ResGenerator.encoder", "all_networks._ResGenerator.decoder", "result.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "feature", "=", "self", ".", "encoder", "(", "input", ")", "\n", "result", "=", "[", "feature", "]", "\n", "output", "=", "self", ".", "decoder", "(", "feature", ")", "\n", "result", ".", "append", "(", "output", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._PreUNet16.__init__": [[357, 408], ["torch.Module.__init__", "all_networks.get_norm_layer", "all_networks.get_nonlinearity_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "range", "all_networks._DecoderUpBlock", "all_networks._DecoderUpBlock", "all_networks._DecoderUpBlock", "all_networks._OutputBlock", "all_networks._OutputBlock", "all_networks._OutputBlock", "all_networks._OutputBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "type", "torchvision.models.vgg16", "all_networks._EncoderBlock", "setattr", "all_networks._DecoderUpBlock", "all_networks._DecoderUpBlock", "setattr", "int", "all_networks._InceptionBlock", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_norm_layer", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "layers", "=", "5", ",", "pretrained", "=", "False", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLu'", ",", "\n", "drop_rate", "=", "0", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_PreUNet16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "layers", "=", "layers", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "encoder", "=", "models", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "encoder", "[", "0", "]", ",", "self", ".", "relu", ",", "encoder", "[", "2", "]", ",", "self", ".", "relu", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "encoder", "[", "5", "]", ",", "self", ".", "relu", ",", "encoder", "[", "7", "]", ",", "self", ".", "relu", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "encoder", "[", "10", "]", ",", "self", ".", "relu", ",", "encoder", "[", "12", "]", ",", "self", ".", "relu", ",", "encoder", "[", "14", "]", ",", "self", ".", "relu", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "encoder", "[", "17", "]", ",", "self", ".", "relu", ",", "encoder", "[", "19", "]", ",", "self", ".", "relu", ",", "encoder", "[", "21", "]", ",", "self", ".", "relu", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "conv", "=", "_EncoderBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ",", "conv", ".", "model", ")", "\n", "\n", "", "center", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "7", "-", "layers", ")", ":", "\n", "            ", "center", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "7", "-", "layers", ",", "drop_rate", ",", "use_bias", ")", "\n", "]", "\n", "\n", "", "center", "+=", "[", "_DecoderUpBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "upconv", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "8", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ",", "upconv", ".", "model", ")", "\n", "\n", "", "self", ".", "deconv4", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv3", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "ngf", "*", "4", ",", "ngf", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv2", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "ngf", "*", "2", ",", "int", "(", "ngf", "/", "2", ")", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "self", ".", "deconv1", "=", "_OutputBlock", "(", "int", "(", "ngf", "/", "2", ")", "+", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "use_bias", "=", "use_bias", ")", "\n", "\n", "self", ".", "output4", "=", "_OutputBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "use_bias", ")", "\n", "self", ".", "output3", "=", "_OutputBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "use_bias", ")", "\n", "self", ".", "output2", "=", "_OutputBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "use_bias", ")", "\n", "\n", "self", ".", "center", "=", "nn", ".", "Sequential", "(", "*", "center", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._PreUNet16.forward": [[409, 443], ["all_networks._PreUNet16.pool", "all_networks._PreUNet16.pool", "all_networks._PreUNet16.pool", "all_networks._PreUNet16.pool", "range", "all_networks._PreUNet16.center", "range", "all_networks._PreUNet16.deconv4.forward", "all_networks._PreUNet16.output4.forward", "result.append", "all_networks._PreUNet16.deconv3.forward", "all_networks._PreUNet16.output3.forward", "result.append", "all_networks._PreUNet16.deconv2.forward", "all_networks._PreUNet16.output2.forward", "result.append", "all_networks._PreUNet16.deconv1.forward", "result.append", "all_networks._PreUNet16.conv1", "all_networks._PreUNet16.conv2", "all_networks._PreUNet16.conv3", "all_networks._PreUNet16.conv4", "getattr", "all_networks._PreUNet16.pool", "middle.append", "getattr", "getattr.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "all_networks._PreUNet16.upsample", "all_networks._PreUNet16.upsample", "all_networks._PreUNet16.upsample", "all_networks._PreUNet16.upsample", "all_networks._PreUNet16.upsample"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "pool", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "conv2", "=", "self", ".", "pool", "(", "self", ".", "conv2", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "pool", "(", "self", ".", "conv3", "(", "conv2", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "self", ".", "conv4", "(", "conv3", ")", ")", "\n", "\n", "middle", "=", "[", "center_in", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "model", "(", "center_in", ")", ")", "\n", "middle", ".", "append", "(", "center_in", ")", "\n", "\n", "", "result", "=", "[", "center_in", "]", "\n", "\n", "center_out", "=", "self", ".", "center", "(", "center_in", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ")", "\n", "center_out", "=", "model", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "middle", "[", "self", ".", "layers", "-", "4", "-", "i", "]", "]", ",", "1", ")", ")", "\n", "\n", "", "deconv4", "=", "self", ".", "deconv4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "0.1", "]", ",", "1", ")", ")", "\n", "output4", "=", "self", ".", "output4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "0.1", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output4", ")", "\n", "deconv3", "=", "self", ".", "deconv3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "0.05", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "output3", "=", "self", ".", "output3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "0.05", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output3", ")", "\n", "deconv2", "=", "self", ".", "deconv2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "0.01", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "output2", "=", "self", ".", "output2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "0.01", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output2", ")", "\n", "\n", "output1", "=", "self", ".", "deconv1", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv2", ",", "self", ".", "upsample", "(", "output2", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output1", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._UNetGenerator.__init__": [[446, 504], ["torch.Module.__init__", "all_networks.get_norm_layer", "all_networks.get_nonlinearity_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "all_networks._EncoderBlock", "all_networks._EncoderBlock", "all_networks._EncoderBlock", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "all_networks._DecoderUpBlock", "all_networks._DecoderUpBlock", "all_networks._DecoderUpBlock", "all_networks._OutputBlock", "all_networks._OutputBlock", "all_networks._OutputBlock", "all_networks._OutputBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "all_networks._EncoderBlock", "setattr", "all_networks._DecoderUpBlock", "all_networks._DecoderUpBlock", "setattr", "int", "all_networks._InceptionBlock", "all_networks.GaussianNoiseLayer", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_norm_layer", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "layers", "=", "4", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "\n", "weight", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "_UNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "weight", "=", "weight", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "# encoder part", "\n", "", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", ")", "\n", "self", ".", "conv2", "=", "_EncoderBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv3", "=", "_EncoderBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv4", "=", "_EncoderBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "conv", "=", "_EncoderBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ",", "conv", ".", "model", ")", "\n", "\n", "", "center", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "7", "-", "layers", ")", ":", "\n", "            ", "center", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "7", "-", "layers", ",", "drop_rate", ",", "use_bias", ")", "\n", "]", "\n", "\n", "", "center", "+=", "[", "\n", "_DecoderUpBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "]", "\n", "if", "add_noise", ":", "\n", "            ", "center", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "", "self", ".", "center", "=", "nn", ".", "Sequential", "(", "*", "center", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "upconv", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "8", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ",", "upconv", ".", "model", ")", "\n", "\n", "", "self", ".", "deconv4", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv3", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "ngf", "*", "4", ",", "ngf", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv2", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "ngf", "*", "2", ",", "int", "(", "ngf", "/", "2", ")", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "self", ".", "output4", "=", "_OutputBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output3", "=", "_OutputBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output2", "=", "_OutputBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output1", "=", "_OutputBlock", "(", "int", "(", "ngf", "/", "2", ")", "+", "output_nc", ",", "output_nc", ",", "7", ",", "use_bias", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._UNetGenerator.forward": [[505, 536], ["all_networks._UNetGenerator.pool", "all_networks._UNetGenerator.pool", "all_networks._UNetGenerator.pool", "all_networks._UNetGenerator.pool", "range", "all_networks._UNetGenerator.center.forward", "range", "all_networks._UNetGenerator.deconv4.forward", "all_networks._UNetGenerator.output4.forward", "result.append", "all_networks._UNetGenerator.deconv3.forward", "all_networks._UNetGenerator.output3.forward", "result.append", "all_networks._UNetGenerator.deconv2.forward", "all_networks._UNetGenerator.output2.forward", "result.append", "all_networks._UNetGenerator.output1.forward", "result.append", "all_networks._UNetGenerator.conv1", "all_networks._UNetGenerator.conv2.forward", "all_networks._UNetGenerator.conv3.forward", "all_networks._UNetGenerator.conv4.forward", "getattr", "all_networks._UNetGenerator.pool", "middle.append", "getattr", "getattr.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "all_networks._UNetGenerator.upsample", "all_networks._UNetGenerator.upsample", "all_networks._UNetGenerator.upsample", "all_networks._UNetGenerator.upsample", "all_networks._UNetGenerator.upsample"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "pool", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "conv2", "=", "self", ".", "pool", "(", "self", ".", "conv2", ".", "forward", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "pool", "(", "self", ".", "conv3", ".", "forward", "(", "conv2", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "self", ".", "conv4", ".", "forward", "(", "conv3", ")", ")", "\n", "\n", "middle", "=", "[", "center_in", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "model", ".", "forward", "(", "center_in", ")", ")", "\n", "middle", ".", "append", "(", "center_in", ")", "\n", "", "center_out", "=", "self", ".", "center", ".", "forward", "(", "center_in", ")", "\n", "result", "=", "[", "center_in", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ")", "\n", "center_out", "=", "model", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "middle", "[", "self", ".", "layers", "-", "5", "-", "i", "]", "]", ",", "1", ")", ")", "\n", "\n", "", "deconv4", "=", "self", ".", "deconv4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "output4", "=", "self", ".", "output4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output4", ")", "\n", "deconv3", "=", "self", ".", "deconv3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "output3", "=", "self", ".", "output3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output3", ")", "\n", "deconv2", "=", "self", ".", "deconv2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "output2", "=", "self", ".", "output2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output2", ")", "\n", "output1", "=", "self", ".", "output1", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv2", ",", "self", ".", "upsample", "(", "output2", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output1", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._MultiscaleDiscriminator.__init__": [[539, 550], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "all_networks._Discriminator", "setattr", "str"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "num_D", "=", "1", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "_Discriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm", ",", "activation", ",", "gpu_ids", ")", "\n", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", ",", "netD", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._MultiscaleDiscriminator.forward": [[551, 560], ["range", "getattr", "getattr.forward", "result.append", "all_networks._MultiscaleDiscriminator.downsample", "str"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_D", ")", ":", "\n", "            ", "netD", "=", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", ")", "\n", "output", "=", "netD", ".", "forward", "(", "input", ")", "\n", "result", ".", "append", "(", "output", ")", "\n", "if", "i", "!=", "(", "self", ".", "num_D", "-", "1", ")", ":", "\n", "                ", "input", "=", "self", ".", "downsample", "(", "input", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._Discriminator.__init__": [[563, 601], ["torch.Module.__init__", "all_networks.get_norm_layer", "all_networks.get_nonlinearity_layer", "range", "min", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer."], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_norm_layer", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nonlinearity", ",", "\n", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "i", ",", "8", ")", "\n", "model", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nonlinearity", ",", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "model", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "8", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._Discriminator.forward": [[602, 604], ["all_networks._Discriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._FeatureDiscriminator.__init__": [[607, 634], ["torch.Module.__init__", "all_networks.get_norm_layer", "all_networks.get_nonlinearity_layer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_norm_layer", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "n_layers", "=", "2", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "_FeatureDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "\n", "nn", ".", "Linear", "(", "input_nc", "*", "40", "*", "12", ",", "input_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "model", "+=", "[", "\n", "nn", ".", "Linear", "(", "input_nc", ",", "input_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "Linear", "(", "input_nc", ",", "1", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._FeatureDiscriminator.forward": [[635, 641], ["input.view.view.view", "all_networks._FeatureDiscriminator.model", "result.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "input", "=", "input", ".", "view", "(", "-", "1", ",", "512", "*", "40", "*", "12", ")", "\n", "output", "=", "self", ".", "model", "(", "input", ")", "\n", "result", ".", "append", "(", "output", ")", "\n", "return", "result", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.get_norm_layer": [[14, 24], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["def", "get_norm_layer", "(", "norm_type", "=", "'batch'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.get_nonlinearity_layer": [[26, 38], ["torch.ReLU", "torch.SELU", "torch.LeakyReLU", "torch.PReLU", "NotImplementedError"], "function", ["None"], ["", "def", "get_nonlinearity_layer", "(", "activation_type", "=", "'PReLU'", ")", ":", "\n", "    ", "if", "activation_type", "==", "'ReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "elif", "activation_type", "==", "'SELU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "SELU", "(", "True", ")", "\n", "", "elif", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'activation layer [%s] is not found'", "%", "activation_type", ")", "\n", "", "return", "nonlinearity_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.get_scheduler": [[40, 53], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ExponentialLR", "NotImplementedError", "max", "float"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "1", "+", "1", "+", "opt", ".", "epoch_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'exponent'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "gamma", "=", "0.95", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.init_weights": [[55, 77], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.uniform_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "uniform_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.print_network": [[79, 85], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'total number of parameters: %.3f M'", "%", "(", "num_params", "/", "1e6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.init_net": [[87, 97], ["all_networks.print_network", "all_networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.cuda"], "function", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.print_network", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "\n", "    ", "print_network", "(", "net", ")", "\n", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._freeze": [[99, 104], ["module.parameters"], "function", ["None"], ["", "def", "_freeze", "(", "*", "args", ")", ":", "\n", "    ", "for", "module", "in", "args", ":", "\n", "        ", "if", "module", ":", "\n", "            ", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks._unfreeze": [[106, 111], ["module.parameters"], "function", ["None"], ["", "", "", "", "def", "_unfreeze", "(", "*", "args", ")", ":", "\n", "    ", "for", "module", "in", "args", ":", "\n", "        ", "if", "module", ":", "\n", "            ", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G": [[114, 126], ["all_networks.init_net", "all_networks._ResGenerator", "all_networks._UNetGenerator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.init_net"], ["", "", "", "", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "layers", "=", "4", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "model_type", "=", "'UNet'", ",", "\n", "init_type", "=", "'xavier'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "weight", "=", "0.1", ")", ":", "\n", "\n", "    ", "if", "model_type", "==", "'ResNet'", ":", "\n", "        ", "net", "=", "_ResGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "layers", ",", "norm", ",", "activation", ",", "drop_rate", ",", "add_noise", ",", "gpu_ids", ")", "\n", "", "elif", "model_type", "==", "'UNet'", ":", "\n", "        ", "net", "=", "_UNetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "layers", ",", "norm", ",", "activation", ",", "drop_rate", ",", "add_noise", ",", "gpu_ids", ",", "weight", ")", "\n", "# net = _PreUNet16(input_nc, output_nc, ngf, layers, True, norm, activation, drop_rate, gpu_ids)", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'model type [%s] is not implemented'", ",", "model_type", ")", "\n", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_D": [[129, 134], ["all_networks._MultiscaleDiscriminator", "all_networks.init_net"], "function", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "num_D", "=", "1", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "init_type", "=", "'xavier'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "\n", "    ", "net", "=", "_MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "num_D", ",", "norm", ",", "activation", ",", "gpu_ids", ")", "\n", "\n", "return", "init_net", "(", "net", ",", "init_type", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_featureD": [[137, 142], ["all_networks._FeatureDiscriminator", "all_networks.init_net"], "function", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.init_net"], ["", "def", "define_featureD", "(", "input_nc", ",", "n_layers", "=", "2", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "init_type", "=", "'xavier'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "\n", "    ", "net", "=", "_FeatureDiscriminator", "(", "input_nc", ",", "n_layers", ",", "norm", ",", "activation", ",", "gpu_ids", ")", "\n", "\n", "return", "init_net", "(", "net", ",", "init_type", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._InceptionBlock.__init__": [[41, 60], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "range", "norm_layer", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "setattr", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "width", "=", "1", ",", "drop_rate", "=", "0", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_InceptionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "i", "in", "range", "(", "width", ")", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "i", "*", "2", "+", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "i", "*", "2", "+", "1", ",", "bias", "=", "use_bias", ")", "\n", ")", "\n", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "layer", ")", "\n", "\n", "", "self", ".", "norm1", "=", "norm_layer", "(", "output_nc", "*", "width", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "output_nc", ")", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "branch1x1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "output_nc", "*", "width", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._InceptionBlock.forward": [[62, 74], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Unet._InceptionBlock.nonlinearity", "Unet._InceptionBlock.norm2", "Unet._InceptionBlock.nonlinearity", "getattr", "result.append", "Unet._InceptionBlock.norm1", "Unet._InceptionBlock.branch1x1", "torch.dropout", "torch.dropout", "torch.dropout", "getattr.", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ")", "\n", "result", ".", "append", "(", "layer", "(", "x", ")", ")", "\n", "", "output", "=", "torch", ".", "cat", "(", "result", ",", "1", ")", "\n", "output", "=", "self", ".", "nonlinearity", "(", "self", ".", "norm1", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "norm2", "(", "self", ".", "branch1x1", "(", "output", ")", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "output", "+", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._EncoderBlock.__init__": [[77, 90], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "middle_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_EncoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "middle_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "middle_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "middle_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._EncoderBlock.forward": [[91, 93], ["Unet._EncoderBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._DownBlock.__init__": [[96, 107], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._DownBlock.forward": [[108, 110], ["Unet._DownBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._ShuffleUpBlock.__init__": [[113, 126], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "up_scale", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_ShuffleUpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "input_nc", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "up_scale", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._ShuffleUpBlock.forward": [[127, 129], ["Unet._ShuffleUpBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._DecoderUpBlock.__init__": [[132, 146], ["torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "middle_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "PReLU", "(", ")", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DecoderUpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "middle_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "middle_nc", ")", ",", "\n", "nonlinearity", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "middle_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "output_nc", ")", ",", "\n", "nonlinearity", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._DecoderUpBlock.forward": [[147, 149], ["Unet._DecoderUpBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._OutputBlock.__init__": [[152, 162], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "int"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "_OutputBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "int", "(", "kernel_size", "/", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._OutputBlock.forward": [[163, 165], ["Unet._OutputBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._UNetGenerator.__init__": [[167, 225], ["torch.Module.__init__", "Unet.get_norm_layer", "Unet.get_nonlinearity_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Unet._EncoderBlock", "Unet._EncoderBlock", "Unet._EncoderBlock", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "Unet._DecoderUpBlock", "Unet._DecoderUpBlock", "Unet._DecoderUpBlock", "Unet._OutputBlock", "Unet._OutputBlock", "Unet._OutputBlock", "Unet._OutputBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "get_norm_layer.", "Unet._EncoderBlock", "setattr", "Unet._DecoderUpBlock", "Unet._DecoderUpBlock", "setattr", "int", "Unet._InceptionBlock", "GaussianNoiseLayer", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_norm_layer", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_nonlinearity_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", "=", "3", ",", "output_nc", "=", "1", ",", "ngf", "=", "64", ",", "layers", "=", "4", ",", "norm", "=", "'batch'", ",", "activation", "=", "'PReLU'", ",", "drop_rate", "=", "0", ",", "add_noise", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "\n", "weight", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "_UNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "weight", "=", "weight", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "nonlinearity", "=", "get_nonlinearity_layer", "(", "activation_type", "=", "activation", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "# encoder part", "\n", "", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nonlinearity", "\n", ")", "\n", "self", ".", "conv2", "=", "_EncoderBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv3", "=", "_EncoderBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "conv4", "=", "_EncoderBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "conv", "=", "_EncoderBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ",", "conv", ".", "model", ")", "\n", "\n", "", "center", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "7", "-", "layers", ")", ":", "\n", "            ", "center", "+=", "[", "\n", "_InceptionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", ",", "nonlinearity", ",", "7", "-", "layers", ",", "drop_rate", ",", "use_bias", ")", "\n", "]", "\n", "\n", "", "center", "+=", "[", "\n", "_DecoderUpBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "]", "\n", "if", "add_noise", ":", "\n", "            ", "center", "+=", "[", "GaussianNoiseLayer", "(", ")", "]", "\n", "", "self", ".", "center", "=", "nn", ".", "Sequential", "(", "*", "center", ")", "\n", "\n", "for", "i", "in", "range", "(", "layers", "-", "4", ")", ":", "\n", "            ", "upconv", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "8", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "setattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ",", "upconv", ".", "model", ")", "\n", "\n", "", "self", ".", "deconv4", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "ngf", "*", "8", ",", "ngf", "*", "2", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv3", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "ngf", "*", "4", ",", "ngf", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "self", ".", "deconv2", "=", "_DecoderUpBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "ngf", "*", "2", ",", "int", "(", "ngf", "/", "2", ")", ",", "norm_layer", ",", "nonlinearity", ",", "use_bias", ")", "\n", "\n", "self", ".", "output4", "=", "_OutputBlock", "(", "ngf", "*", "(", "4", "+", "4", ")", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output3", "=", "_OutputBlock", "(", "ngf", "*", "(", "2", "+", "2", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output2", "=", "_OutputBlock", "(", "ngf", "*", "(", "1", "+", "1", ")", "+", "output_nc", ",", "output_nc", ",", "3", ",", "use_bias", ")", "\n", "self", ".", "output1", "=", "_OutputBlock", "(", "int", "(", "ngf", "/", "2", ")", "+", "output_nc", ",", "output_nc", ",", "7", ",", "use_bias", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet._UNetGenerator.forward": [[226, 257], ["Unet._UNetGenerator.pool", "Unet._UNetGenerator.pool", "Unet._UNetGenerator.pool", "Unet._UNetGenerator.pool", "range", "Unet._UNetGenerator.center.forward", "range", "Unet._UNetGenerator.deconv4.forward", "Unet._UNetGenerator.output4.forward", "result.append", "Unet._UNetGenerator.deconv3.forward", "Unet._UNetGenerator.output3.forward", "result.append", "Unet._UNetGenerator.deconv2.forward", "Unet._UNetGenerator.output2.forward", "result.append", "Unet._UNetGenerator.output1.forward", "result.append", "Unet._UNetGenerator.conv1", "Unet._UNetGenerator.conv2.forward", "Unet._UNetGenerator.conv3.forward", "Unet._UNetGenerator.conv4.forward", "getattr", "Unet._UNetGenerator.pool", "middle.append", "getattr", "getattr.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "Unet._UNetGenerator.upsample", "Unet._UNetGenerator.upsample", "Unet._UNetGenerator.upsample", "Unet._UNetGenerator.upsample", "Unet._UNetGenerator.upsample"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "pool", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "conv2", "=", "self", ".", "pool", "(", "self", ".", "conv2", ".", "forward", "(", "conv1", ")", ")", "\n", "conv3", "=", "self", ".", "pool", "(", "self", ".", "conv3", ".", "forward", "(", "conv2", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "self", ".", "conv4", ".", "forward", "(", "conv3", ")", ")", "\n", "\n", "middle", "=", "[", "center_in", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'down'", "+", "str", "(", "i", ")", ")", "\n", "center_in", "=", "self", ".", "pool", "(", "model", ".", "forward", "(", "center_in", ")", ")", "\n", "middle", ".", "append", "(", "center_in", ")", "\n", "", "center_out", "=", "self", ".", "center", ".", "forward", "(", "center_in", ")", "\n", "result", "=", "[", "center_in", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "4", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "self", ",", "'up'", "+", "str", "(", "i", ")", ")", "\n", "center_out", "=", "model", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "middle", "[", "self", ".", "layers", "-", "5", "-", "i", "]", "]", ",", "1", ")", ")", "\n", "\n", "", "deconv4", "=", "self", ".", "deconv4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "output4", "=", "self", ".", "output4", ".", "forward", "(", "torch", ".", "cat", "(", "[", "center_out", ",", "conv3", "*", "self", ".", "weight", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output4", ")", "\n", "deconv3", "=", "self", ".", "deconv3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "output3", "=", "self", ".", "output3", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv4", ",", "conv2", "*", "self", ".", "weight", "*", "0.5", ",", "self", ".", "upsample", "(", "output4", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output3", ")", "\n", "deconv2", "=", "self", ".", "deconv2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "output2", "=", "self", ".", "output2", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv3", ",", "conv1", "*", "self", ".", "weight", "*", "0.1", ",", "self", ".", "upsample", "(", "output3", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output2", ")", "\n", "output1", "=", "self", ".", "output1", ".", "forward", "(", "torch", ".", "cat", "(", "[", "deconv2", ",", "self", ".", "upsample", "(", "output2", ")", "]", ",", "1", ")", ")", "\n", "result", ".", "append", "(", "output1", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_norm_layer": [[15, 25], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["def", "get_norm_layer", "(", "norm_type", "=", "'batch'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.Unet.get_nonlinearity_layer": [[27, 39], ["torch.ReLU", "torch.SELU", "torch.LeakyReLU", "torch.PReLU", "NotImplementedError"], "function", ["None"], ["", "def", "get_nonlinearity_layer", "(", "activation_type", "=", "'PReLU'", ")", ":", "\n", "    ", "if", "activation_type", "==", "'ReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "elif", "activation_type", "==", "'SELU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "SELU", "(", "True", ")", "\n", "", "elif", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'activation layer [%s] is not found'", "%", "activation_type", ")", "\n", "", "return", "nonlinearity_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.da_net.Flatten.forward": [[11, 13], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.da_net.Discriminator.__init__": [[15, 71], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "da_net.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["\t", "def", "__init__", "(", "self", ",", "nout", "=", "3", ",", "last_layer_activation", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "last_layer_activation", "=", "last_layer_activation", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "5120", ",", "1024", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "nout", ")", ",", "\n", ")", "\n", "self", ".", "final_act", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.da_net.Discriminator.forward": [[72, 77], ["da_net.Discriminator.main", "da_net.Discriminator.final_act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "\t\t", "prob", "=", "self", ".", "main", "(", "image", ")", "\n", "if", "self", ".", "last_layer_activation", ":", "\n", "\t\t\t", "prob", "=", "self", ".", "final_act", "(", "prob", ")", "\n", "", "return", "prob", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.__init__": [[22, 71], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "networks.all_networks.define_G", "Solver_resnet.Solver.netG.cuda", "torch.nn.MSELoss", "torch.nn.MSELoss", "Solver_resnet.Solver.netG_loss_fn.cuda", "torch.Adam", "torch.Adam", "tensorboardX.SummaryWriter", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "Solver_resnet.Solver.get_training_data", "Solver_resnet.Solver.get_training_dataloaders", "Solver_resnet.Solver.netG.parameters", "os.path.join", "Dataloaders.transform.RandomImgAugment", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "Dataloaders.transform.DepthToTensor"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.networks.all_networks.define_G", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_training_data", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_training_dataloaders"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "'.'", "\n", "\n", "# Seed", "\n", "self", ".", "seed", "=", "1729", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "\n", "\n", "# Initialize networks", "\n", "self", ".", "netG", "=", "all_networks", ".", "define_G", "(", "3", ",", "3", ",", "64", ",", "9", ",", "'batch'", ",", "\n", "'PReLU'", ",", "'ResNet'", ",", "'kaiming'", ",", "0", ",", "\n", "False", ",", "[", "0", "]", ")", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Loss", "\n", "self", ".", "netG_loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "self", ".", "netG_loss_fn", "=", "self", ".", "netG_loss_fn", ".", "cuda", "(", ")", "\n", "\n", "# Initialize Optimizers", "\n", "self", ".", "netG_optimizer", "=", "Optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ",", "betas", "=", "(", "0.5", ",", "0.9", ")", ")", "\n", "\n", "# Training Configuration details", "\n", "self", ".", "batch_size", "=", "6", "\n", "self", ".", "iteration", "=", "None", "\n", "self", ".", "total_iterations", "=", "200000", "\n", "self", ".", "START_ITER", "=", "0", "\n", "self", ".", "kr", "=", "1", "\n", "self", ".", "kd", "=", "1", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'../tensorboard_logs/Vkitti-kitti/AE_Baseline/Resnet_NEW'", ")", ")", "\n", "\n", "\n", "# Flags", "\n", "self", ".", "tb_flag", "=", "0", "\n", "self", ".", "best_acc", "=", "0", "\n", "\n", "# Transforms", "\n", "joint_transform_list", "=", "[", "RandomImgAugment", "(", "no_flip", "=", "False", ",", "no_rotation", "=", "False", ",", "no_augment", "=", "False", ",", "size", "=", "(", "192", ",", "640", ")", ")", "]", "\n", "img_transform_list", "=", "[", "tr", ".", "ToTensor", "(", ")", ",", "tr", ".", "Normalize", "(", "[", ".5", ",", ".5", ",", ".5", "]", ",", "[", ".5", ",", ".5", ",", ".5", "]", ")", "]", "\n", "self", ".", "joint_transform", "=", "tr", ".", "Compose", "(", "joint_transform_list", ")", "\n", "self", ".", "img_transform", "=", "tr", ".", "Compose", "(", "img_transform_list", ")", "\n", "self", ".", "depth_transform", "=", "tr", ".", "Compose", "(", "[", "DepthToTensor", "(", ")", "]", ")", "\n", "\n", "# Initialize Data", "\n", "self", ".", "syn_image", ",", "self", ".", "syn_label", ",", "self", ".", "real_image", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "get_training_data", "(", ")", "\n", "self", ".", "get_training_dataloaders", "(", ")", "\n", "# self.get_validation_data()", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.loop_iter": [[80, 84], ["iter"], "methods", ["None"], ["", "def", "loop_iter", "(", "self", ",", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "data", "in", "iter", "(", "loader", ")", ":", "\n", "                ", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_training_data": [[85, 88], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Dataloaders.VKitti_dataloader.VKitti", "Dataloaders.Kitti_dataloader.KittiDataset"], "methods", ["None"], ["", "", "", "def", "get_training_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "syn_loader", "=", "DataLoader", "(", "syn_dataset", "(", "train", "=", "True", ")", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "self", ".", "real_loader", "=", "DataLoader", "(", "real_dataset", "(", "img_transform", "=", "self", ".", "img_transform", ",", "joint_transform", "=", "self", ".", "joint_transform", ",", "depth_transform", "=", "self", ".", "depth_transform", ")", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_training_dataloaders": [[89, 92], ["Solver_resnet.Solver.loop_iter", "Solver_resnet.Solver.loop_iter"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.loop_iter", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.loop_iter"], ["", "def", "get_training_dataloaders", "(", "self", ")", ":", "\n", "        ", "self", ".", "syn_iter", "=", "self", ".", "loop_iter", "(", "self", ".", "syn_loader", ")", "\n", "self", ".", "real_iter", "=", "self", ".", "loop_iter", "(", "self", ".", "real_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model": [[93, 103], ["glob.glob", "os.path.join", "len", "torch.load", "torch.load", "torch.load", "torch.load", "Solver_resnet.Solver.netG.load_state_dict", "Solver_resnet.Solver.netG_optimizer.load_state_dict"], "methods", ["None"], ["", "def", "load_prev_model", "(", "self", ")", ":", "\n", "        ", "saved_models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'saved_models_new'", ",", "'AE_Resnet_Baseline.pth.tar'", ")", ")", "\n", "if", "len", "(", "saved_models", ")", ">", "0", ":", "\n", "            ", "model_state", "=", "torch", ".", "load", "(", "saved_models", "[", "0", "]", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "model_state", "[", "'netG_state_dict'", "]", ")", "\n", "\n", "self", ".", "netG_optimizer", ".", "load_state_dict", "(", "model_state", "[", "'netG_optimizer'", "]", ")", "\n", "self", ".", "START_ITER", "=", "model_state", "[", "'iteration'", "]", "+", "1", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.save_model": [[104, 113], ["torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "Solver_resnet.Solver.netG.state_dict", "Solver_resnet.Solver.netG_optimizer.state_dict"], "methods", ["None"], ["", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'saved_models_new'", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'saved_models_new'", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "'iteration'", ":", "self", ".", "iteration", ",", "\n", "'netG_state_dict'", ":", "self", ".", "netG", ".", "state_dict", "(", ")", ",", "\n", "'netG_optimizer'", ":", "self", ".", "netG_optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'saved_models_new'", ",", "'AE_Resnet_Baseline.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_syn_data": [[114, 117], ["next", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "Solver_resnet.Solver.syn_image.cuda", "Solver_resnet.Solver.syn_label.cuda"], "methods", ["None"], ["", "def", "get_syn_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "syn_image", ",", "self", ".", "syn_label", "=", "next", "(", "self", ".", "syn_iter", ")", "\n", "self", ".", "syn_image", ",", "self", ".", "syn_label", "=", "Variable", "(", "self", ".", "syn_image", ".", "cuda", "(", ")", ")", ",", "Variable", "(", "self", ".", "syn_label", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_real_data": [[118, 121], ["next", "torch.autograd.Variable", "torch.autograd.Variable", "Solver_resnet.Solver.real_image.cuda"], "methods", ["None"], ["", "def", "get_real_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_image", "=", "next", "(", "self", ".", "real_iter", ")", "\n", "self", ".", "real_image", "=", "Variable", "(", "self", ".", "real_image", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.update_netG": [[122, 131], ["Solver_resnet.Solver.netG", "Solver_resnet.Solver.netG", "Solver_resnet.Solver.netG_optimizer.zero_grad", "Solver_resnet.Solver.netG_loss.backward", "Solver_resnet.Solver.netG_optimizer.step", "Solver_resnet.Solver.netG_loss_fn", "Solver_resnet.Solver.netG_loss_fn"], "methods", ["None"], ["", "def", "update_netG", "(", "self", ")", ":", "\n", "        ", "real_features", ",", "self", ".", "real_recon_image", "=", "self", ".", "netG", "(", "self", ".", "real_image", ")", "\n", "syn_features", ",", "self", ".", "syn_recon_image", "=", "self", ".", "netG", "(", "self", ".", "syn_image", ")", "\n", "real_reconstruction_loss", ",", "syn_reconstruction_loss", "=", "self", ".", "netG_loss_fn", "(", "self", ".", "real_recon_image", ",", "self", ".", "real_image", ")", ",", "self", ".", "netG_loss_fn", "(", "self", ".", "syn_recon_image", ",", "self", ".", "syn_image", ")", "\n", "self", ".", "netG_loss", "=", "real_reconstruction_loss", "+", "syn_reconstruction_loss", "\n", "\n", "self", ".", "netG_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "netG_loss", ".", "backward", "(", ")", "\n", "self", ".", "netG_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.train": [[132, 152], ["Solver_resnet.Solver.load_prev_model", "tqdm.tqdm.tqdm", "Solver_resnet.Solver.writer.close", "range", "Solver_resnet.Solver.get_syn_data", "Solver_resnet.Solver.get_real_data", "Solver_resnet.Solver.update_netG", "Solver_resnet.Solver.writer.add_scalar", "Solver_resnet.Solver.save_model"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.load_prev_model", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_syn_data", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.get_real_data", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.update_netG", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Gen_Baseline.Solver_resnet.Solver.save_model"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "load_prev_model", "(", ")", "\n", "for", "self", ".", "iteration", "in", "tqdm", "(", "range", "(", "self", ".", "START_ITER", ",", "self", ".", "total_iterations", ")", ")", ":", "\n", "\n", "            ", "self", ".", "get_syn_data", "(", ")", "\n", "self", ".", "get_real_data", "(", ")", "\n", "\n", "self", ".", "update_netG", "(", ")", "\n", "\n", "###################################################", "\n", "#### Tensorboard Logging", "\n", "###################################################            ", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Total Generator loss'", ",", "self", ".", "netG_loss", ",", "self", ".", "iteration", ")", "\n", "\n", "if", "self", ".", "iteration", "%", "1000", "==", "999", ":", "\n", "# Validation and saving models", "\n", "                ", "self", ".", "save_model", "(", ")", "\n", "\n", "", "", "self", ".", "writer", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.disc.Flatten.forward": [[10, 12], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.disc.Discriminator.__init__": [[14, 47], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "disc.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "32", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.disc.Discriminator.forward": [[49, 52], ["disc.Discriminator.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "\t\t", "prob", "=", "self", ".", "main", "(", "image", ")", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.SfSDataset.__init__": [[15, 18], ["pandas.read_csv"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "csv_file", ",", "transform", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "frames", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.SfSDataset.__len__": [[19, 21], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.SfSDataset.__getitem__": [[22, 36], ["lycon.load", "lycon.load", "lycon.load", "lycon.load", "data_loader.SfSDataset.frames.iloc[].replace", "data_loader.SfSDataset.frames.iloc[].replace", "data_loader.SfSDataset.frames.iloc[].replace", "data_loader.SfSDataset.frames.iloc[].replace", "data_loader.SfSDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "image", "=", "lycon", ".", "load", "(", "self", ".", "frames", ".", "iloc", "[", "idx", ",", "0", "]", ".", "replace", "(", "'/vulcan/scratch/koutilya'", ",", "'.'", ")", ")", "\n", "mask", "=", "lycon", ".", "load", "(", "self", ".", "frames", ".", "iloc", "[", "idx", ",", "1", "]", ".", "replace", "(", "'/vulcan/scratch/koutilya'", ",", "'.'", ")", ")", "\n", "normal", "=", "lycon", ".", "load", "(", "self", ".", "frames", ".", "iloc", "[", "idx", ",", "2", "]", ".", "replace", "(", "'/vulcan/scratch/koutilya'", ",", "'.'", ")", ")", "\n", "albedo", "=", "lycon", ".", "load", "(", "self", ".", "frames", ".", "iloc", "[", "idx", ",", "3", "]", ".", "replace", "(", "'/vulcan/scratch/koutilya'", ",", "'.'", ")", ")", "\n", "\n", "light", "=", "self", ".", "frames", ".", "iloc", "[", "idx", ",", "4", ":", "]", ".", "values", "#a 1x27 array", "\n", "\n", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'mask'", ":", "mask", ",", "'normal'", ":", "normal", ",", "'albedo'", ":", "albedo", ",", "'light'", ":", "light", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.ToTensor.__call__": [[38, 47], ["light.astype.astype.astype", "data_loader.to_tensor", "data_loader.to_tensor", "data_loader.to_tensor", "data_loader.to_tensor", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.to_tensor", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.to_tensor", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.to_tensor", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.to_tensor"], ["\t", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "image", ",", "mask", ",", "normal", ",", "albedo", ",", "light", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'mask'", "]", ",", "sample", "[", "'normal'", "]", ",", "sample", "[", "'albedo'", "]", ",", "sample", "[", "'light'", "]", "\n", "light", "=", "light", ".", "astype", "(", "float", ")", "\n", "\n", "return", "{", "'image'", ":", "to_tensor", "(", "image", ")", ",", "\n", "'mask'", ":", "to_tensor", "(", "mask", ")", ",", "\n", "'normal'", ":", "to_tensor", "(", "normal", ")", ",", "\n", "'albedo'", ":", "to_tensor", "(", "albedo", ")", ",", "\n", "'light'", ":", "torch", ".", "from_numpy", "(", "light", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.data_loader.to_tensor": [[50, 94], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "torch.from_numpy", "torch.ByteTensor.float().div", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose"], "function", ["None"], ["", "", "def", "to_tensor", "(", "pic", ")", ":", "\n", "    ", "\"\"\"Convert a ``PIL Image`` or ``numpy.ndarray`` to tensor.\n    See ``ToTensor`` for more details.\n    Args:\n        pic (PIL Image or numpy.ndarray): Image to be converted to tensor.\n    Returns:\n        Tensor: Converted image.\n    \"\"\"", "\n", "#if not(_is_pil_image(pic) or _is_numpy_image(pic)):", "\n", "#    raise TypeError('pic should be PIL Image or ndarray. Got {}'.format(type(pic)))", "\n", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "# backward compatibility", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "\n", "        ", "nppic", "=", "np", ".", "zeros", "(", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "        ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "        ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "        ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.train.reset_grad": [[80, 94], ["autoenc_optimizer.zero_grad", "disc_optimizer.zero_grad", "primary_net_optimizer.zero_grad", "disc_optimizer.zero_grad", "primary_net_optimizer.zero_grad", "autoenc_optimizer.zero_grad", "primary_net_optimizer.zero_grad", "autoenc_optimizer.zero_grad", "disc_optimizer.zero_grad"], "function", ["None"], ["def", "reset_grad", "(", "exclude", "=", "None", ")", ":", "\n", "    ", "if", "(", "exclude", "==", "None", ")", ":", "\n", "        ", "autoenc_optimizer", ".", "zero_grad", "(", ")", "\n", "disc_optimizer", ".", "zero_grad", "(", ")", "\n", "primary_net_optimizer", ".", "zero_grad", "(", ")", "\n", "", "elif", "(", "exclude", "==", "'autoenc'", ")", ":", "\n", "        ", "disc_optimizer", ".", "zero_grad", "(", ")", "\n", "primary_net_optimizer", ".", "zero_grad", "(", ")", "\n", "", "elif", "(", "exclude", "==", "'disc'", ")", ":", "\n", "        ", "autoenc_optimizer", ".", "zero_grad", "(", ")", "\n", "primary_net_optimizer", ".", "zero_grad", "(", ")", "\n", "", "elif", "(", "exclude", "==", "'primary_net'", ")", ":", "\n", "        ", "autoenc_optimizer", ".", "zero_grad", "(", ")", "\n", "disc_optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.train.gradient_penalty": [[120, 140], ["min", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.cuda.expand_as", "alpha.cuda.cuda", "torch.autograd.Variable", "critic", "gradients.view.view", "gradients.view.norm", "h_s.size", "h_t.size", "torch.autograd.Variable.cuda", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "gradient_penalty", "(", "critic", ",", "h_s", ",", "h_t", ")", ":", "\n", "# based on: https://github.com/caogang/wgan-gp/blob/master/gan_cifar10.py#L116", "\n", "    ", "batch_size", "=", "min", "(", "h_s", ".", "size", "(", "0", ")", ",", "h_t", ".", "size", "(", "0", ")", ")", "\n", "h_s", "=", "h_s", "[", ":", "batch_size", ",", ":", ",", ":", ",", ":", "]", "\n", "h_t", "=", "h_t", "[", ":", "batch_size", ",", ":", ",", ":", ",", ":", "]", "\n", "alpha", "=", "torch", ".", "rand", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand_as", "(", "h_s", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "differences", "=", "h_t", "-", "h_s", "\n", "interpolates", "=", "h_s", "+", "(", "alpha", "*", "differences", ")", "\n", "# interpolates = torch.stack([interpolates, h_s, h_t]).requires_grad_()", "\n", "interpolates", "=", "Variable", "(", "interpolates", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "preds", "=", "critic", "(", "interpolates", ")", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "preds", ",", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones_like", "(", "preds", ")", ".", "cuda", "(", ")", ",", "\n", "retain_graph", "=", "True", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "gradients", "=", "gradients", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "gradient_norm", "=", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "\n", "gradient_penalty", "=", "(", "(", "gradient_norm", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.RBDN_original.RBDN_network.__init__": [[13, 94], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["\t", "def", "__init__", "(", "self", ",", "channels", "=", "3", ")", ":", "\n", "\t\t", "super", "(", "RBDN_network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "128", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "self", ".", "num_features", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_features", ")", "\n", "\n", "# Branch 1", "\n", "num_features_b1", "=", "self", ".", "num_features", "\n", "self", ".", "conv_b11", "=", "nn", ".", "Conv2d", "(", "num_features_b1", ",", "num_features_b1", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_b11", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b1", ")", "\n", "self", ".", "conv_b11_strided", "=", "nn", ".", "Conv2d", "(", "num_features_b1", ",", "num_features_b1", ",", "3", ",", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_b11_strided", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b1", ")", "\n", "\n", "self", ".", "conv_b12", "=", "nn", ".", "Conv2d", "(", "2", "*", "num_features_b1", ",", "num_features_b1", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_b12", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b1", ")", "\n", "self", ".", "unpool_b1", "=", "nn", ".", "ConvTranspose2d", "(", "num_features_b1", ",", "num_features_b1", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "bn_unpool_b1", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b1", ")", "\n", "self", ".", "conv_de_b11", "=", "nn", ".", "Conv2d", "(", "num_features_b1", ",", "num_features_b1", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_de_b11", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b1", ")", "\n", "\n", "# Branch 2", "\n", "num_features_b2", "=", "self", ".", "num_features", "\n", "self", ".", "conv_b21", "=", "nn", ".", "Conv2d", "(", "num_features_b2", ",", "num_features_b2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_b21", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b2", ")", "\n", "self", ".", "conv_b21_strided", "=", "nn", ".", "Conv2d", "(", "num_features_b2", ",", "num_features_b2", ",", "3", ",", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_b21_strided", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b2", ")", "\n", "\n", "self", ".", "conv_b22", "=", "nn", ".", "Conv2d", "(", "2", "*", "num_features_b2", ",", "num_features_b2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_b22", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b2", ")", "\n", "self", ".", "unpool_b2", "=", "nn", ".", "ConvTranspose2d", "(", "num_features_b2", ",", "num_features_b2", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "bn_unpool_b2", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b2", ")", "\n", "self", ".", "conv_de_b21", "=", "nn", ".", "Conv2d", "(", "num_features_b2", ",", "num_features_b2", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_de_b21", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b2", ")", "\n", "\n", "# # Branch 3", "\n", "num_features_b3", "=", "self", ".", "num_features", "\n", "self", ".", "conv_b31", "=", "nn", ".", "Conv2d", "(", "num_features_b3", ",", "num_features_b3", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_b31", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b3", ")", "\n", "self", ".", "conv_b31_strided", "=", "nn", ".", "Conv2d", "(", "num_features_b3", ",", "num_features_b3", ",", "3", ",", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_b31_strided", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b3", ")", "\n", "\n", "self", ".", "conv_b32", "=", "nn", ".", "Conv2d", "(", "num_features_b3", ",", "num_features_b3", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_b32", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b3", ")", "\n", "self", ".", "unpool_b3", "=", "nn", ".", "ConvTranspose2d", "(", "num_features_b3", ",", "num_features_b3", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "bn_unpool_b3", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b3", ")", "\n", "self", ".", "conv_de_b31", "=", "nn", ".", "Conv2d", "(", "num_features_b3", ",", "num_features_b3", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_de_b31", "=", "nn", ".", "BatchNorm2d", "(", "num_features_b3", ")", "\n", "\n", "\n", "self", ".", "conv21", "=", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "num_features", ",", "self", ".", "num_features", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn21", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_features", ")", "\n", "self", ".", "conv31", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_features", ",", "self", ".", "num_features", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn31", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_features", ")", "\n", "self", ".", "conv41", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_features", ",", "self", ".", "num_features", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn41", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_features", ")", "\n", "self", ".", "conv51", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_features", ",", "self", ".", "num_features", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn51", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_features", ")", "\n", "self", ".", "conv61", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_features", ",", "self", ".", "num_features", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn61", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_features", ")", "\n", "# self.conv71 = nn.Conv2d(self.num_features,self.num_features,3,1,padding=1)", "\n", "# self.bn71 = nn.BatchNorm2d(self.num_features)", "\n", "# self.conv81 = nn.Conv2d(self.num_features,self.num_features,3,1,padding=1)", "\n", "# self.bn81 = nn.BatchNorm2d(self.num_features)", "\n", "# self.conv91 = nn.Conv2d(self.num_features,self.num_features,3,1,padding=1)", "\n", "# self.bn91 = nn.BatchNorm2d(self.num_features)", "\n", "\n", "self", ".", "conv_de", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_features", ",", "channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "main_network", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "conv21", ",", "self", ".", "bn21", ",", "self", ".", "relu", ",", "\n", "self", ".", "conv31", ",", "self", ".", "bn31", ",", "self", ".", "relu", ",", "\n", "self", ".", "conv41", ",", "self", ".", "bn41", ",", "self", ".", "relu", ",", "\n", "self", ".", "conv51", ",", "self", ".", "bn51", ",", "self", ".", "relu", ",", "\n", "self", ".", "conv61", ",", "self", ".", "bn61", ",", "self", ".", "relu", ",", "\n", "# self.conv71, self.bn71, self.relu,", "\n", "# self.conv81, self.bn81, self.relu,", "\n", "# self.conv91, self.bn91, self.relu,", "\n", "self", ".", "conv_de", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.RBDN_original.RBDN_network.forward": [[97, 129], ["RBDN_original.RBDN_network.bn0", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "RBDN_original.RBDN_network.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RBDN_original.RBDN_network.main_network", "RBDN_original.RBDN_network.bn1", "RBDN_original.RBDN_network.bn_b11", "RBDN_original.RBDN_network.bn_b11_strided", "RBDN_original.RBDN_network.bn_b21", "RBDN_original.RBDN_network.bn_b21_strided", "RBDN_original.RBDN_network.bn_b31", "RBDN_original.RBDN_network.bn_b31_strided", "RBDN_original.RBDN_network.bn_b32", "RBDN_original.RBDN_network.bn_unpool_b3", "RBDN_original.RBDN_network.bn_de_b31", "RBDN_original.RBDN_network.bn_b22", "RBDN_original.RBDN_network.bn_unpool_b2", "RBDN_original.RBDN_network.bn_de_b21", "RBDN_original.RBDN_network.bn_b12", "RBDN_original.RBDN_network.bn_unpool_b1", "RBDN_original.RBDN_network.bn_de_b11", "RBDN_original.RBDN_network.conv1", "RBDN_original.RBDN_network.conv_b11", "RBDN_original.RBDN_network.conv_b11_strided", "RBDN_original.RBDN_network.conv_b21", "RBDN_original.RBDN_network.conv_b21_strided", "RBDN_original.RBDN_network.conv_b31", "RBDN_original.RBDN_network.conv_b31_strided", "RBDN_original.RBDN_network.conv_b32", "RBDN_original.RBDN_network.unpool_b3", "RBDN_original.RBDN_network.conv_de_b31", "RBDN_original.RBDN_network.conv_b22", "RBDN_original.RBDN_network.unpool_b2", "RBDN_original.RBDN_network.conv_de_b21", "RBDN_original.RBDN_network.conv_b12", "RBDN_original.RBDN_network.unpool_b1", "RBDN_original.RBDN_network.conv_de_b11"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "bn0", "(", "input", ")", "\n", "x_scale1", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn_b11", "(", "self", ".", "conv_b11", "(", "x_scale1", ")", ")", ")", "\n", "x_scale2", "=", "self", ".", "relu", "(", "self", ".", "bn_b11_strided", "(", "self", ".", "conv_b11_strided", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn_b21", "(", "self", ".", "conv_b21", "(", "x_scale2", ")", ")", ")", "\n", "x_scale3", "=", "self", ".", "relu", "(", "self", ".", "bn_b21_strided", "(", "self", ".", "conv_b21_strided", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn_b31", "(", "self", ".", "conv_b31", "(", "x_scale3", ")", ")", ")", "\n", "x_scale4", "=", "self", ".", "relu", "(", "self", ".", "bn_b31_strided", "(", "self", ".", "conv_b31_strided", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn_b32", "(", "self", ".", "conv_b32", "(", "x_scale4", ")", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn_unpool_b3", "(", "self", ".", "unpool_b3", "(", "x", ")", ")", ")", "\n", "# x = self.relu(self.unpool_b3(x))", "\n", "x_scale3_cat", "=", "self", ".", "relu", "(", "self", ".", "bn_de_b31", "(", "self", ".", "conv_de_b31", "(", "x", ")", ")", ")", "\n", "\n", "x3_concatenated", "=", "torch", ".", "cat", "(", "(", "x_scale3", ",", "x_scale3_cat", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn_b22", "(", "self", ".", "conv_b22", "(", "x3_concatenated", ")", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn_unpool_b2", "(", "self", ".", "unpool_b2", "(", "x", ")", ")", ")", "\n", "# x = self.relu(self.unpool_b2(x))", "\n", "x_scale2_cat", "=", "self", ".", "relu", "(", "self", ".", "bn_de_b21", "(", "self", ".", "conv_de_b21", "(", "x", ")", ")", ")", "\n", "\n", "x2_concatenated", "=", "torch", ".", "cat", "(", "(", "x_scale2", ",", "x_scale2_cat", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn_b12", "(", "self", ".", "conv_b12", "(", "x2_concatenated", ")", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn_unpool_b1", "(", "self", ".", "unpool_b1", "(", "x", ")", ")", ")", "\n", "# x = self.relu(self.unpool_b1(x))", "\n", "x_scale1_cat", "=", "self", ".", "relu", "(", "self", ".", "bn_de_b11", "(", "self", ".", "conv_de_b11", "(", "x", ")", ")", ")", "\n", "\n", "x1_concatenated", "=", "torch", ".", "cat", "(", "(", "x_scale1", ",", "x_scale1_cat", ")", ",", "1", ")", "\n", "output", "=", "self", ".", "main_network", "(", "x1_concatenated", ")", "\n", "return", "x1_concatenated", ",", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.SfSLoss.__init__": [[11, 13], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "SfSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.SfSLoss.forward": [[14, 27], ["sfs_loss.L1loss", "sfs_loss.L1loss", "sfs_loss.L2loss", "sfs_loss.ReconLoss", "light.float"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.L1loss", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.L1loss", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.L2loss", "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.ReconLoss"], ["", "def", "forward", "(", "self", ",", "image", ",", "mask", ",", "normal", ",", "albedo", ",", "light", ",", "nout", ",", "aout", ",", "lout", ")", ":", "\n", "\n", "\t\t", "aloss", "=", "L1loss", "(", "albedo", "*", "mask", ",", "aout", "*", "mask", ")", "\n", "nloss", "=", "L1loss", "(", "normal", "*", "mask", ",", "nout", "*", "mask", ")", "\n", "lloss", "=", "L2loss", "(", "light", ".", "float", "(", ")", ",", "lout", ")", "\n", "\n", "recloss", "=", "ReconLoss", "(", "nout", ",", "aout", ",", "lout", ",", "image", ",", "mask", ")", "\n", "\n", "#recloss=ReconLoss(normal,albedo,light.float(),image,mask)", "\n", "\n", "loss", "=", "0.5", "*", "aloss", "+", "0.5", "*", "nloss", "+", "0.1", "*", "lloss", "+", "0.5", "*", "recloss", "\n", "\n", "return", "loss", ",", "nloss", ",", "aloss", ",", "lloss", ",", "recloss", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.__init__": [[97, 99], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "Recon_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.Recon_Loss.forward": [[100, 103], ["sfs_loss.ReconLoss"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.ReconLoss"], ["", "def", "forward", "(", "self", ",", "nout", ",", "aout", ",", "lout", ",", "image", ",", "mask", ")", ":", "\n", "\t\t", "recloss", "=", "ReconLoss", "(", "nout", ",", "aout", ",", "lout", ",", "image", ",", "mask", ")", "\n", "return", "recloss", "", "", "", ""]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.L1loss": [[28, 31], ["torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "a.size"], "function", ["None"], ["", "", "def", "L1loss", "(", "a", ",", "b", ")", ":", "\n", "\t", "err", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "a", "-", "b", ")", ")", "\n", "return", "err", "/", "a", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.L2loss": [[32, 34], ["torch.sum", "torch.sum", "torch.sum", "a.size"], "function", ["None"], ["", "def", "L2loss", "(", "a", ",", "b", ")", ":", "\n", "\t", "return", "torch", ".", "sum", "(", "(", "a", "-", "b", ")", "**", "2", ")", "/", "(", "2", "*", "a", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.ReconLoss": [[35, 79], ["sfs_loss.normalize", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "range", "numpy.array", "numpy.sqrt", "numpy.sqrt", "normalize.size", "torch.autograd.Variable", "range", "torch.sum", "torch.sum", "torch.sum", "normalize.size", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.autograd.Variable", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.abs", "torch.abs", "torch.abs", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.array", "torch.ones", "torch.ones", "torch.ones", "a.size", "normalize.size", "normalize.size"], "function", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.normalize"], ["", "def", "ReconLoss", "(", "n", ",", "a", ",", "light", ",", "im", ",", "mask", ")", ":", "\n", "\t", "n", "=", "normalize", "(", "n", ")", "\n", "\n", "att", "=", "np", ".", "pi", "*", "np", ".", "array", "(", "[", "1", ",", "2.0", "/", "3", ",", "0.25", "]", ")", "\n", "\n", "c1", "=", "att", "[", "0", "]", "*", "(", "1.0", "/", "np", ".", "sqrt", "(", "4", "*", "np", ".", "pi", ")", ")", "\n", "c2", "=", "att", "[", "1", "]", "*", "(", "np", ".", "sqrt", "(", "3.0", "/", "(", "4", "*", "np", ".", "pi", ")", ")", ")", "\n", "c3", "=", "att", "[", "2", "]", "*", "0.5", "*", "(", "np", ".", "sqrt", "(", "5.0", "/", "(", "4", "*", "np", ".", "pi", ")", ")", ")", "\n", "c4", "=", "att", "[", "2", "]", "*", "(", "3.0", "*", "(", "np", ".", "sqrt", "(", "5.0", "/", "(", "12", "*", "np", ".", "pi", ")", ")", ")", ")", "\n", "c5", "=", "att", "[", "2", "]", "*", "(", "3.0", "*", "(", "np", ".", "sqrt", "(", "5.0", "/", "(", "48", "*", "np", ".", "pi", ")", ")", ")", ")", "\n", "\n", "c", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "c1", ",", "c2", ",", "c3", ",", "c4", ",", "c5", "]", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "loss", "=", "0.0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t", "nx", "=", "n", "[", "i", ",", "0", ",", "...", "]", "\n", "ny", "=", "n", "[", "i", ",", "1", ",", "...", "]", "\n", "nz", "=", "n", "[", "i", ",", "2", ",", "...", "]", "\n", "\n", "\n", "H1", "=", "c", "[", "0", "]", "*", "Variable", "(", "(", "torch", ".", "ones", "(", "(", "n", ".", "size", "(", "2", ")", ",", "n", ".", "size", "(", "3", ")", ")", ")", ")", ".", "cuda", "(", ")", ")", "\n", "H2", "=", "c", "[", "1", "]", "*", "nz", "\n", "H3", "=", "c", "[", "1", "]", "*", "nx", "\n", "H4", "=", "c", "[", "1", "]", "*", "ny", "\n", "H5", "=", "c", "[", "2", "]", "*", "(", "2", "*", "nz", "*", "nz", "-", "nx", "*", "nx", "-", "ny", "*", "ny", ")", "\n", "H6", "=", "c", "[", "3", "]", "*", "nx", "*", "nz", "\n", "H7", "=", "c", "[", "3", "]", "*", "ny", "*", "nz", "\n", "H8", "=", "c", "[", "4", "]", "*", "(", "nx", "*", "nx", "-", "ny", "*", "ny", ")", "\n", "H9", "=", "c", "[", "3", "]", "*", "nx", "*", "ny", "\n", "\n", "shd", "=", "Variable", "(", "(", "torch", ".", "zeros", "(", "a", ".", "size", "(", ")", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "\t\t\t", "Lo", "=", "light", "[", "i", ",", "j", "*", "9", ":", "(", "j", "+", "1", ")", "*", "9", "]", "\n", "\n", "shd", "[", "i", ",", "j", ",", "...", "]", "=", "Lo", "[", "0", "]", "*", "H1", "+", "Lo", "[", "1", "]", "*", "H2", "+", "Lo", "[", "2", "]", "*", "H3", "+", "Lo", "[", "3", "]", "*", "H4", "+", "Lo", "[", "4", "]", "*", "H5", "+", "Lo", "[", "5", "]", "*", "H6", "+", "Lo", "[", "6", "]", "*", "H7", "+", "Lo", "[", "7", "]", "*", "H8", "+", "Lo", "[", "8", "]", "*", "H9", "\n", "\n", "\n", "#visualize(torch.abs(shd[i,...]*a[i,...]*mask[i,...] - im[i,...]*mask[i,...]))", "\n", "", "loss", "+=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "shd", "[", "i", ",", "...", "]", "*", "a", "[", "i", ",", "...", "]", "*", "mask", "[", "i", ",", "...", "]", "-", "im", "[", "i", ",", "...", "]", "*", "mask", "[", "i", ",", "...", "]", ")", ")", "\n", "#visualize(shd[i,...]*a[i,...]*mask[i,...])", "\n", "\n", "", "return", "loss", "/", "n", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.normalize": [[80, 85], ["torch.norm", "torch.norm", "torch.norm", "norm.repeat.repeat"], "function", ["None"], ["", "def", "normalize", "(", "n", ")", ":", "\n", "\t", "n", "=", "2", "*", "n", "-", "1", "\n", "norm", "=", "torch", ".", "norm", "(", "n", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "norm", "=", "norm", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "return", "(", "n", "/", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.sfs_loss.visualize": [[87, 93], ["rec0.transpose.data.numpy", "rec0.transpose.transpose", "print", "matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["", "def", "visualize", "(", "rec0", ")", ":", "\n", "\t", "rec0", "=", "rec0", ".", "data", ".", "numpy", "(", ")", "\n", "rec0", "=", "rec0", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "print", "(", "rec0", ".", "shape", ")", "\n", "plt", ".", "imshow", "(", "rec0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__": [[11, 38], ["torchvision.transforms.Compose", "torch.utils.data.Dataset.__init__", "open", "file.read", "f.replace", "torchvision.transforms.ToTensor", "Photoface_dataloader.Photoface.data_list.split", "f.split", "int", "f.split", "f.split", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__init__"], ["\t", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "val", "=", "False", ",", "transform", "=", "tr", ".", "Compose", "(", "[", "tr", ".", "ToTensor", "(", ")", "]", ")", ")", ":", "\n", "\t\t", "super", "(", "Photoface", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "transform", "=", "transform", "\n", "if", "(", "self", ".", "train", ")", ":", "\n", "\t\t\t", "self", ".", "data_file", "=", "'photoface-data/Photoface_train_list.txt'", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "data_file", "=", "'photoface-data/Photoface_test_list.txt'", "\n", "\n", "", "with", "open", "(", "self", ".", "data_file", ",", "'r'", ")", "as", "file", ":", "\n", "\t\t\t", "self", ".", "data_list", "=", "file", ".", "read", "(", ")", "\n", "self", ".", "data_list", "=", "self", ".", "data_list", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "self", ".", "data_list", "=", "[", "f", ".", "replace", "(", "'scratch2'", ",", "'.'", ")", "for", "f", "in", "self", ".", "data_list", "]", "\n", "self", ".", "data_list", "=", "[", "f", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "f", "in", "self", ".", "data_list", "]", "\n", "\n", "if", "(", "self", ".", "train", "and", "self", ".", "val", ")", ":", "\n", "\t\t\t", "self", ".", "data_list_final", "=", "self", ".", "data_list", "[", "int", "(", "0.85", "*", "len", "(", "self", ".", "data_list", ")", ")", ":", "]", "\n", "", "elif", "(", "self", ".", "train", "and", "not", "self", ".", "val", ")", ":", "\n", "\t\t\t", "self", ".", "data_list_final", "=", "self", ".", "data_list", "[", ":", "int", "(", "0.85", "*", "len", "(", "self", ".", "data_list", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "data_list_final", "=", "self", ".", "data_list", "\n", "\n", "", "self", ".", "normals", "=", "[", "f", ".", "split", "(", "'_align.png'", ")", "[", "0", "]", "+", "'_normal.png'", "for", "f", "in", "self", ".", "data_list_final", "]", "\n", "self", ".", "masks", "=", "[", "f", ".", "split", "(", "'_align.png'", ")", "[", "0", "]", "+", "'_mask.png'", "for", "f", "in", "self", ".", "data_list_final", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__len__": [[39, 41], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "data_list_final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.koutilya40192_SharinGAN.Face_Normal_Estimation.Photoface_dataloader.Photoface.__getitem__": [[42, 48], ["numpy.ascontiguousarray", "lycon.load", "lycon.load", "lycon.load", "Photoface_dataloader.Photoface.transform", "Photoface_dataloader.Photoface.transform", "Photoface_dataloader.Photoface.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "image", ",", "normal", ",", "mask", "=", "lycon", ".", "load", "(", "self", ".", "data_list_final", "[", "idx", "]", ")", ",", "lycon", ".", "load", "(", "self", ".", "normals", "[", "idx", "]", ")", ",", "lycon", ".", "load", "(", "self", ".", "masks", "[", "idx", "]", ")", "\n", "normal", "=", "np", ".", "ascontiguousarray", "(", "normal", ")", "\n", "if", "(", "self", ".", "transform", ")", ":", "\n", "\t\t\t", "input", ",", "normal", ",", "mask", "=", "self", ".", "transform", "(", "image", ")", ",", "self", ".", "transform", "(", "normal", ")", ",", "self", ".", "transform", "(", "mask", ")", "\n", "", "return", "input", ",", "normal", ",", "mask", "", "", "", ""]]}