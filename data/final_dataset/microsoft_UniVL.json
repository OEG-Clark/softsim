{"home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.get_args": [[26, 114], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "ValueError", "ValueError"], "function", ["None"], ["def", "get_args", "(", "description", "=", "'UniVL on Pretrain'", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_pretrain\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_train\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_eval\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether to run eval on the dev set.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_csv'", ",", "type", "=", "str", ",", "default", "=", "'data/HowTo100M_v1.csv'", ",", "help", "=", "'train csv'", ")", "\n", "parser", ".", "add_argument", "(", "'--features_path'", ",", "type", "=", "str", ",", "default", "=", "'feature'", ",", "help", "=", "'feature path for 2D features'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "'data/data.pickle'", ",", "help", "=", "'data pickle file path'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_thread_reader'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'upper epoch limit'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "type", "=", "int", ",", "default", "=", "3500", ",", "help", "=", "'batch size eval'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'Learning rate exp epoch decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_display'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Information display frequence'", ")", "\n", "parser", ".", "add_argument", "(", "'--video_dim'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'video feature dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_words'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--max_frames'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--min_words'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--feature_framerate'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--min_time'", ",", "type", "=", "float", ",", "default", "=", "5.0", ",", "help", "=", "'Gather small clips'", ")", "\n", "parser", ".", "add_argument", "(", "'--margin'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'margin for loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--hard_negative_rate'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'rate of intra negative sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--negative_weighting'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Weight the loss for intra negative'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_pair'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Num of pair to output from data loader'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"The output directory where the model predictions and checkpoints will be written.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--bert_model\"", ",", "default", "=", "\"bert-base-uncased\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Bert pre-trained model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--visual_model\"", ",", "default", "=", "\"visual-base\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Visual module\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cross_model\"", ",", "default", "=", "\"cross-base\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Cross module\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--decoder_model\"", ",", "default", "=", "\"decoder-base\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Decoder module\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--init_model\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Initial model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_lower_case\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Set this flag if you are using an uncased model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_proportion\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Proportion of training to perform linear learning rate warmup for. E.g., 0.1 = 10%% of training.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gradient_accumulation_steps'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of updates steps to accumulate before performing a backward/update pass.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--n_gpu'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Changed in the execute process.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--cache_dir\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Where do you want to store the pre-trained models downloaded from s3\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16_opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O1'", ",", "\n", "help", "=", "\"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3'].\"", "\n", "\"See details at https://nvidia.github.io/apex/amp.html\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--world_size\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"distribted training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"distribted training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--coef_lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'coefficient for bert branch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_mil'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether use MIL as Miech et. al. (2020).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sampled_use_mil'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether use MIL, has a high priority than use_mil.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--text_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "\"Layer NO. of text.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "\"Layer NO. of visual.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cross_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Layer NO. of cross.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"Layer NO. of decoder.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--stage_two'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether training with decoder.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain_enhance_vmodal'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Enhance visual and other modalities when pretraining.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--load_checkpoint\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint_model\"", ",", "default", "=", "\"pytorch_model.bin.checkpoint\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "\n", "help", "=", "\"Save the last model as a checkpoint.\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "sampled_use_mil", ":", "# sample from each video, has a higher priority than use_mil.", "\n", "        ", "args", ".", "use_mil", "=", "True", "\n", "\n", "# Check paramenters", "\n", "", "if", "args", ".", "gradient_accumulation_steps", "<", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid gradient_accumulation_steps parameter: {}, should be >= 1\"", ".", "format", "(", "\n", "args", ".", "gradient_accumulation_steps", ")", ")", "\n", "", "if", "not", "args", ".", "do_pretrain", ":", "\n", "        ", "raise", "ValueError", "(", "\"`do_pretrain` must be True.\"", ")", "\n", "\n", "", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "args", ".", "gradient_accumulation_steps", ")", "\n", "\n", "args", ".", "checkpoint_model", "=", "'{}_{}_{}_{}.checkpoint'", ".", "format", "(", "args", ".", "checkpoint_model", ",", "args", ".", "bert_model", ",", "args", ".", "max_words", ",", "args", ".", "max_frames", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.set_seed_logger": [[115, 141], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.distributed.get_world_size", "torch.cuda.set_device", "util.get_logger", "os.path.exists", "os.makedirs", "os.path.join", "util.get_logger.info", "sorted", "util.get_logger.info"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.util.get_logger"], ["", "def", "set_seed_logger", "(", "args", ")", ":", "\n", "    ", "global", "logger", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "# if you are using multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "args", ".", "world_size", "=", "world_size", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "logger", "=", "get_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"log.txt\"", ")", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Effective parameters:\"", ")", "\n", "for", "key", "in", "sorted", "(", "args", ".", "__dict__", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"  <<< {}: {}\"", ".", "format", "(", "key", ",", "args", ".", "__dict__", "[", "key", "]", ")", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.init_device": [[142, 156], ["torch.device", "torch.cuda.device_count", "logger.info", "ValueError", "torch.cuda.is_available"], "function", ["None"], ["", "def", "init_device", "(", "args", ",", "local_rank", ")", ":", "\n", "    ", "global", "logger", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "local_rank", ")", "\n", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "logger", ".", "info", "(", "\"device: {} n_gpu: {}\"", ".", "format", "(", "device", ",", "n_gpu", ")", ")", "\n", "args", ".", "n_gpu", "=", "n_gpu", "\n", "\n", "if", "args", ".", "batch_size", "%", "args", ".", "n_gpu", "!=", "0", "or", "args", ".", "batch_size_val", "%", "args", ".", "n_gpu", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid batch_size/batch_size_val and n_gpu parameter: {}%{} and {}%{}, should be == 0\"", ".", "format", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "n_gpu", ",", "args", ".", "batch_size_val", ",", "args", ".", "n_gpu", ")", ")", "\n", "\n", "", "return", "device", ",", "n_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.init_model": [[157, 172], ["modules.modeling.UniVL.from_pretrained", "UniVL.from_pretrained.to", "torch.load", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained"], ["", "def", "init_model", "(", "args", ",", "device", ",", "n_gpu", ",", "local_rank", ")", ":", "\n", "\n", "    ", "if", "args", ".", "init_model", ":", "\n", "        ", "model_state_dict", "=", "torch", ".", "load", "(", "args", ".", "init_model", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "model_state_dict", "=", "None", "\n", "\n", "# Prepare model", "\n", "", "cache_dir", "=", "args", ".", "cache_dir", "if", "args", ".", "cache_dir", "else", "os", ".", "path", ".", "join", "(", "str", "(", "PYTORCH_PRETRAINED_BERT_CACHE", ")", ",", "'distributed'", ")", "\n", "model", "=", "UniVL", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "args", ".", "visual_model", ",", "args", ".", "cross_model", ",", "args", ".", "decoder_model", ",", "\n", "cache_dir", "=", "cache_dir", ",", "state_dict", "=", "model_state_dict", ",", "task_config", "=", "args", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.prep_optimizer": [[173, 206], ["hasattr", "list", "modules.optimization.BertAdam", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.named_parameters", "any", "any"], "function", ["None"], ["", "def", "prep_optimizer", "(", "args", ",", "model", ",", "num_train_optimization_steps", ",", "device", ",", "n_gpu", ",", "local_rank", ",", "coef_lr", "=", "1.", ")", ":", "\n", "\n", "    ", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "param_optimizer", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "\n", "no_decay_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "param_optimizer", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", "\n", "decay_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "param_optimizer", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", "\n", "\n", "no_decay_bert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "no_decay_param_tp", "if", "\"bert.\"", "in", "n", "]", "\n", "no_decay_nobert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "no_decay_param_tp", "if", "\"bert.\"", "not", "in", "n", "]", "\n", "\n", "decay_bert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "decay_param_tp", "if", "\"bert.\"", "in", "n", "]", "\n", "decay_nobert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "decay_param_tp", "if", "\"bert.\"", "not", "in", "n", "]", "\n", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "no_decay_bert_param_tp", "]", ",", "'weight_decay'", ":", "0.01", ",", "'lr'", ":", "args", ".", "lr", "*", "coef_lr", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "no_decay_nobert_param_tp", "]", ",", "'weight_decay'", ":", "0.01", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "decay_bert_param_tp", "]", ",", "'weight_decay'", ":", "0.0", ",", "'lr'", ":", "args", ".", "lr", "*", "coef_lr", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "decay_nobert_param_tp", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "\n", "scheduler", "=", "None", "\n", "optimizer", "=", "BertAdam", "(", "optimizer_grouped_parameters", ",", "lr", "=", "args", ".", "lr", ",", "warmup", "=", "args", ".", "warmup_proportion", ",", "\n", "schedule", "=", "'warmup_linear'", ",", "t_total", "=", "num_train_optimization_steps", ",", "weight_decay", "=", "0.01", ",", "\n", "max_grad_norm", "=", "1.0", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "\n", "output_device", "=", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "return", "optimizer", ",", "scheduler", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.dataloader_pretrain": [[207, 244], ["pickle.load", "dataloaders.dataloader_howto100m.Youtube_DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "logger.info", "open", "logger.info", "len", "len"], "function", ["None"], ["", "def", "dataloader_pretrain", "(", "args", ",", "tokenizer", ",", "only_sim", "=", "False", ")", ":", "\n", "    ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading captions: {}'", ".", "format", "(", "args", ".", "data_path", ")", ")", "\n", "", "data_dict", "=", "pickle", ".", "load", "(", "open", "(", "args", ".", "data_path", ",", "'rb'", ")", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Done, data_dict length: {}'", ".", "format", "(", "len", "(", "data_dict", ")", ")", ")", "\n", "\n", "", "dataset", "=", "Youtube_DataLoader", "(", "\n", "csv", "=", "args", ".", "train_csv", ",", "\n", "features_path", "=", "args", ".", "features_path", ",", "\n", "data_dict", "=", "data_dict", ",", "\n", "min_time", "=", "args", ".", "min_time", ",", "\n", "max_words", "=", "args", ".", "max_words", ",", "\n", "min_words", "=", "args", ".", "min_words", ",", "\n", "feature_framerate", "=", "args", ".", "feature_framerate", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "n_pair", "=", "args", ".", "n_pair", ",", "\n", "max_frames", "=", "args", ".", "max_frames", ",", "\n", "use_mil", "=", "args", ".", "use_mil", ",", "\n", "only_sim", "=", "only_sim", ",", "\n", "sampled_use_mil", "=", "args", ".", "sampled_use_mil", ",", "\n", "pretrain_enhance_vmodal", "=", "args", ".", "pretrain_enhance_vmodal", ",", "\n", "video_dim", "=", "args", ".", "video_dim", ",", "\n", ")", "\n", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", "//", "args", ".", "n_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_thread_reader", ",", "\n", "pin_memory", "=", "False", ",", "\n", "shuffle", "=", "(", "sampler", "is", "None", ")", ",", "\n", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "return", "dataloader", ",", "len", "(", "dataset", ")", ",", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.convert_state_dict_type": [[245, 257], ["isinstance", "collections.OrderedDict", "state_dict.items", "isinstance", "main_pretrain.convert_state_dict_type", "torch.is_tensor", "main_pretrain.convert_state_dict_type", "state_dict.type"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.convert_state_dict_type", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.convert_state_dict_type"], ["", "def", "convert_state_dict_type", "(", "state_dict", ",", "ttype", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "state_dict", ",", "dict", ")", ":", "\n", "        ", "cpu_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "cpu_dict", "[", "k", "]", "=", "convert_state_dict_type", "(", "v", ")", "\n", "", "return", "cpu_dict", "\n", "", "elif", "isinstance", "(", "state_dict", ",", "list", ")", ":", "\n", "        ", "return", "[", "convert_state_dict_type", "(", "v", ")", "for", "v", "in", "state_dict", "]", "\n", "", "elif", "torch", ".", "is_tensor", "(", "state_dict", ")", ":", "\n", "        ", "return", "state_dict", ".", "type", "(", "ttype", ")", "\n", "", "else", ":", "\n", "        ", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.save_model": [[258, 277], ["os.path.join", "torch.save", "logger.info", "hasattr", "model_to_save.state_dict", "os.path.join", "torch.save", "logger.info", "model_to_save.state_dict", "main_pretrain.convert_state_dict_type", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.convert_state_dict_type"], ["", "", "def", "save_model", "(", "epoch", ",", "args", ",", "model", ",", "local_rank", ",", "type_name", "=", "\"\"", ",", "global_step", "=", "-", "1", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_dir", ",", "\"pytorch_model.bin.{}{}\"", ".", "format", "(", "\"\"", "if", "type_name", "==", "\"\"", "else", "type_name", "+", "\".\"", ",", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "model_to_save", ".", "state_dict", "(", ")", ",", "output_model_file", ")", "\n", "logger", ".", "info", "(", "\"Model saved to %s\"", ",", "output_model_file", ")", "\n", "\n", "if", "global_step", "!=", "-", "1", "and", "optimizer", "is", "not", "None", ":", "\n", "        ", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'global_step'", ":", "global_step", ",", "\n", "'model_state_dict'", ":", "model_to_save", ".", "state_dict", "(", ")", ",", "\n", "'last_optimizer_state'", ":", "convert_state_dict_type", "(", "optimizer", ".", "state_dict", "(", ")", ")", ",", "\n", "}", "\n", "checkpoint_model_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "checkpoint_model", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "checkpoint_model_file", ")", "\n", "logger", ".", "info", "(", "\"Checkpoint is saved. use `load_checkpoint` to recovery it.\"", ")", "\n", "\n", "", "return", "output_model_file", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.load_model": [[278, 309], ["os.path.join", "os.path.join", "os.path.exists", "torch.load", "modules.modeling.UniVL.from_pretrained", "UniVL.from_pretrained.to", "os.path.exists", "len", "os.path.join", "logger.info", "torch.load", "modules.modeling.UniVL.from_pretrained", "UniVL.from_pretrained.to", "str", "logger.info", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained"], ["", "def", "load_model", "(", "epoch", ",", "args", ",", "n_gpu", ",", "device", ",", "model", ",", "global_step", "=", "0", ",", "model_file", "=", "None", ")", ":", "\n", "    ", "if", "model_file", "is", "None", "or", "len", "(", "model_file", ")", "==", "0", ":", "\n", "        ", "model_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"pytorch_model.bin.{}\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "", "last_optim_state", "=", "None", "\n", "checkpoint_model_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "checkpoint_model", ")", "\n", "if", "epoch", "==", "-", "1", "and", "args", ".", "load_checkpoint", "and", "os", ".", "path", ".", "exists", "(", "checkpoint_model_file", ")", ":", "\n", "        ", "checkpoint_state", "=", "torch", ".", "load", "(", "checkpoint_model_file", ",", "map_location", "=", "'cpu'", ")", "\n", "epoch", "=", "checkpoint_state", "[", "'epoch'", "]", "\n", "global_step", "=", "checkpoint_state", "[", "'global_step'", "]", "\n", "model_state_dict", "=", "checkpoint_state", "[", "'model_state_dict'", "]", "\n", "last_optim_state", "=", "checkpoint_state", "[", "'last_optimizer_state'", "]", "\n", "cache_dir", "=", "args", ".", "cache_dir", "if", "args", ".", "cache_dir", "else", "os", ".", "path", ".", "join", "(", "str", "(", "PYTORCH_PRETRAINED_BERT_CACHE", ")", ",", "'distributed'", ")", "\n", "model", "=", "UniVL", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "args", ".", "visual_model", ",", "args", ".", "cross_model", ",", "args", ".", "decoder_model", ",", "\n", "cache_dir", "=", "cache_dir", ",", "state_dict", "=", "model_state_dict", ",", "task_config", "=", "args", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Checkpoint loaded from %s\"", ",", "checkpoint_model_file", ")", "\n", "", "", "elif", "os", ".", "path", ".", "exists", "(", "model_file", ")", ":", "\n", "        ", "model_state_dict", "=", "torch", ".", "load", "(", "model_file", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Model loaded from %s\"", ",", "model_file", ")", "\n", "\n", "", "cache_dir", "=", "args", ".", "cache_dir", "if", "args", ".", "cache_dir", "else", "os", ".", "path", ".", "join", "(", "str", "(", "PYTORCH_PRETRAINED_BERT_CACHE", ")", ",", "'distributed'", ")", "\n", "model", "=", "UniVL", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "args", ".", "visual_model", ",", "args", ".", "cross_model", ",", "args", ".", "decoder_model", ",", "\n", "cache_dir", "=", "cache_dir", ",", "state_dict", "=", "model_state_dict", ",", "task_config", "=", "args", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "epoch", ",", "global_step", ",", "last_optim_state", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.train_epoch": [[310, 358], ["torch.cuda.empty_cache", "model.train", "time.time", "enumerate", "tuple", "model", "loss.mean.backward", "float", "len", "loss.mean.mean", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "optimizer.zero_grad", "t.to", "model.parameters", "scheduler.step", "logger.info", "time.time", "len", "float", "str", "time.time", "sorted", "list", "set", "optimizer.get_lr"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.step", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.step", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.get_lr"], ["", "def", "train_epoch", "(", "epoch", ",", "args", ",", "model", ",", "train_dataloader", ",", "device", ",", "n_gpu", ",", "optimizer", ",", "scheduler", ",", "global_step", ",", "local_rank", "=", "0", ")", ":", "\n", "    ", "global", "logger", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "log_step", "=", "args", ".", "n_display", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "total_loss", "=", "0", "\n", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "for", "t", "in", "batch", ")", "\n", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", "=", "batch", "\n", "\n", "loss", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "video", ",", "video_mask", ",", "\n", "pairs_masked_text", "=", "pairs_masked_text", ",", "pairs_token_labels", "=", "pairs_token_labels", ",", "\n", "masked_video", "=", "masked_video", ",", "video_labels_index", "=", "video_labels_index", ",", "\n", "input_caption_ids", "=", "pairs_input_caption_ids", ",", "decoder_mask", "=", "pairs_decoder_mask", ",", "\n", "output_caption_ids", "=", "pairs_output_caption_ids", ")", "\n", "\n", "if", "n_gpu", ">", "1", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "            ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "total_loss", "+=", "float", "(", "loss", ")", "\n", "if", "(", "step", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "log_step", "==", "0", "and", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Epoch: %d/%s, Step: %d/%d, Lr: %s, Loss: %f, Time/step: %f\"", ",", "epoch", "+", "1", ",", "\n", "args", ".", "epochs", ",", "step", "+", "1", ",", "\n", "len", "(", "train_dataloader", ")", ",", "\"-\"", ".", "join", "(", "[", "str", "(", "'%.6f'", "%", "itm", ")", "for", "itm", "in", "sorted", "(", "list", "(", "set", "(", "optimizer", ".", "get_lr", "(", ")", ")", ")", ")", "]", ")", ",", "\n", "float", "(", "loss", ")", ",", "\n", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "(", "log_step", "*", "args", ".", "gradient_accumulation_steps", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "", "total_loss", "=", "total_loss", "/", "len", "(", "train_dataloader", ")", "\n", "return", "total_loss", ",", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.main": [[359, 407], ["main_pretrain.get_args", "main_pretrain.set_seed_logger", "main_pretrain.init_device", "modules.tokenization.BertTokenizer.from_pretrained", "main_pretrain.init_model", "main_pretrain.dataloader_pretrain", "main_pretrain.prep_optimizer", "hasattr", "main_pretrain.load_model", "optimizer.load_state_dict", "logger.info", "logger.info", "logger.info", "logger.info", "sampler.set_epoch", "main_pretrain.train_epoch", "int", "logger.warning", "range", "logger.info", "main_pretrain.save_model", "len"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.get_args", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.set_seed_logger", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.init_device", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.init_model", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_pretrain.dataloader_pretrain", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.prep_optimizer", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.load_model", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.train_epoch", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.save_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "logger", "\n", "args", "=", "get_args", "(", ")", "\n", "args", "=", "set_seed_logger", "(", "args", ")", "\n", "device", ",", "n_gpu", "=", "init_device", "(", "args", ",", "args", ".", "local_rank", ")", "\n", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "do_lower_case", "=", "args", ".", "do_lower_case", ")", "\n", "model", "=", "init_model", "(", "args", ",", "device", ",", "n_gpu", ",", "args", ".", "local_rank", ")", "\n", "only_sim", "=", "model", ".", "module", ".", "_stage_one", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ".", "_stage_one", "\n", "\n", "train_dataloader", ",", "train_length", ",", "sampler", "=", "dataloader_pretrain", "(", "args", ",", "tokenizer", ",", "only_sim", "=", "only_sim", ")", "\n", "num_train_optimization_steps", "=", "(", "int", "(", "len", "(", "train_dataloader", ")", "+", "args", ".", "gradient_accumulation_steps", "-", "1", ")", "\n", "/", "args", ".", "gradient_accumulation_steps", ")", "*", "args", ".", "epochs", "\n", "\n", "global_step", "=", "0", "\n", "epoch", "=", "-", "1", "\n", "last_optim_state", "=", "None", "\n", "if", "args", ".", "load_checkpoint", ":", "\n", "        ", "epoch", ",", "global_step", ",", "last_optim_state", ",", "model", "=", "load_model", "(", "epoch", ",", "args", ",", "n_gpu", ",", "device", ",", "model", ",", "global_step", "=", "global_step", ")", "\n", "epoch", "+=", "1", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Will continue to epoch: {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "", "", "epoch", "=", "0", "if", "epoch", "<", "0", "else", "epoch", "\n", "\n", "coef_lr", "=", "args", ".", "coef_lr", "\n", "if", "args", ".", "init_model", ":", "\n", "        ", "coef_lr", "=", "1.0", "\n", "\n", "", "optimizer", ",", "scheduler", ",", "model", "=", "prep_optimizer", "(", "args", ",", "model", ",", "num_train_optimization_steps", ",", "device", ",", "n_gpu", ",", "args", ".", "local_rank", ",", "coef_lr", "=", "coef_lr", ")", "\n", "if", "last_optim_state", "is", "not", "None", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "last_optim_state", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"***** Running pretraining *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "train_length", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "batch_size", ")", "\n", "logger", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_optimization_steps", "*", "args", ".", "gradient_accumulation_steps", ")", "\n", "\n", "", "iter_ls_", "=", "[", "itm", "for", "itm", "in", "range", "(", "args", ".", "epochs", ")", "if", "itm", ">=", "epoch", "]", "\n", "for", "epoch", "in", "iter_ls_", ":", "\n", "        ", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "tr_loss", ",", "global_step", "=", "train_epoch", "(", "epoch", ",", "args", ",", "model", ",", "train_dataloader", ",", "device", ",", "n_gpu", ",", "optimizer", ",", "\n", "scheduler", ",", "global_step", ",", "local_rank", "=", "args", ".", "local_rank", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch %d/%s Finished, Train Loss: %f\"", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "tr_loss", ")", "\n", "save_model", "(", "epoch", ",", "args", ",", "model", ",", "args", ".", "local_rank", ",", "type_name", "=", "\"pretrain\"", ",", "global_step", "=", "global_step", ",", "optimizer", "=", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.metrics.compute_metrics": [[8, 21], ["numpy.sort", "numpy.diag", "numpy.where", "float", "len", "float", "len", "float", "len", "numpy.median", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "compute_metrics", "(", "x", ")", ":", "\n", "    ", "sx", "=", "np", ".", "sort", "(", "-", "x", ",", "axis", "=", "1", ")", "\n", "d", "=", "np", ".", "diag", "(", "-", "x", ")", "\n", "d", "=", "d", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "ind", "=", "sx", "-", "d", "\n", "ind", "=", "np", ".", "where", "(", "ind", "==", "0", ")", "\n", "ind", "=", "ind", "[", "1", "]", "\n", "metrics", "=", "{", "}", "\n", "metrics", "[", "'R1'", "]", "=", "float", "(", "np", ".", "sum", "(", "ind", "==", "0", ")", ")", "/", "len", "(", "ind", ")", "\n", "metrics", "[", "'R5'", "]", "=", "float", "(", "np", ".", "sum", "(", "ind", "<", "5", ")", ")", "/", "len", "(", "ind", ")", "\n", "metrics", "[", "'R10'", "]", "=", "float", "(", "np", ".", "sum", "(", "ind", "<", "10", ")", ")", "/", "len", "(", "ind", ")", "\n", "metrics", "[", "'MR'", "]", "=", "np", ".", "median", "(", "ind", ")", "+", "1", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.metrics.print_computed_metrics": [[22, 28], ["print"], "function", ["None"], ["", "def", "print_computed_metrics", "(", "metrics", ")", ":", "\n", "    ", "r1", "=", "metrics", "[", "'R1'", "]", "\n", "r5", "=", "metrics", "[", "'R5'", "]", "\n", "r10", "=", "metrics", "[", "'R10'", "]", "\n", "mr", "=", "metrics", "[", "'MR'", "]", "\n", "print", "(", "'R@1: {:.4f} - R@5: {:.4f} - R@10: {:.4f} - Median R: {}'", ".", "format", "(", "r1", ",", "r5", ",", "r10", ",", "mr", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.get_args": [[27, 108], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "ValueError", "ValueError"], "function", ["None"], ["def", "get_args", "(", "description", "=", "'UniVL on Retrieval Task'", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_pretrain\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_train\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_eval\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether to run eval on the dev set.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_csv'", ",", "type", "=", "str", ",", "default", "=", "'data/youcookii_singlef_train.csv'", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--val_csv'", ",", "type", "=", "str", ",", "default", "=", "'data/youcookii_singlef_val.csv'", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "'data/youcookii_caption.pickle'", ",", "help", "=", "'data pickle file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--features_path'", ",", "type", "=", "str", ",", "default", "=", "'data/youcookii_videos_feature.pickle'", ",", "help", "=", "'feature path'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_thread_reader'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'upper epoch limit'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "type", "=", "int", ",", "default", "=", "3500", ",", "help", "=", "'batch size eval'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'Learning rate exp epoch decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_display'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Information display frequence'", ")", "\n", "parser", ".", "add_argument", "(", "'--video_dim'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'video feature dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_words'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--max_frames'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--feature_framerate'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--margin'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'margin for loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--hard_negative_rate'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'rate of intra negative sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--negative_weighting'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Weight the loss for intra negative'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_pair'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Num of pair to output from data loader'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"The output directory where the model predictions and checkpoints will be written.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--bert_model\"", ",", "default", "=", "\"bert-base-uncased\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Bert pre-trained model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--visual_model\"", ",", "default", "=", "\"visual-base\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Visual module\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cross_model\"", ",", "default", "=", "\"cross-base\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Cross module\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--decoder_model\"", ",", "default", "=", "\"decoder-base\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Decoder module\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--init_model\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Initial model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_lower_case\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Set this flag if you are using an uncased model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_proportion\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Proportion of training to perform linear learning rate warmup for. E.g., 0.1 = 10%% of training.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gradient_accumulation_steps'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of updates steps to accumulate before performing a backward/update pass.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--n_gpu'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Changed in the execute process.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--cache_dir\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Where do you want to store the pre-trained models downloaded from s3\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16_opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O1'", ",", "\n", "help", "=", "\"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3'].\"", "\n", "\"See details at https://nvidia.github.io/apex/amp.html\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--task_type\"", ",", "default", "=", "\"retrieval\"", ",", "type", "=", "str", ",", "help", "=", "\"Point the task `retrieval` to finetune.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--datatype\"", ",", "default", "=", "\"youcook\"", ",", "type", "=", "str", ",", "help", "=", "\"Point the dataset `youcook` to finetune.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--world_size\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"distribted training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"distribted training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--coef_lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'coefficient for bert branch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_mil'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether use MIL as Miech et. al. (2020).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sampled_use_mil'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether MIL, has a high priority than use_mil.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--text_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "\"Layer NO. of text.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "\"Layer NO. of visual.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cross_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Layer NO. of cross.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"Layer NO. of decoder.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_sim_after_cross'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Test retrieval after cross encoder.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--expand_msrvtt_sentences'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Check paramenters", "\n", "if", "args", ".", "gradient_accumulation_steps", "<", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid gradient_accumulation_steps parameter: {}, should be >= 1\"", ".", "format", "(", "\n", "args", ".", "gradient_accumulation_steps", ")", ")", "\n", "", "if", "not", "args", ".", "do_train", "and", "not", "args", ".", "do_eval", ":", "\n", "        ", "raise", "ValueError", "(", "\"At least one of `do_train` or `do_eval` must be True.\"", ")", "\n", "\n", "", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "args", ".", "gradient_accumulation_steps", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.set_seed_logger": [[109, 136], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.distributed.get_world_size", "torch.cuda.set_device", "util.get_logger", "os.path.exists", "os.makedirs", "os.path.join", "util.get_logger.info", "sorted", "util.get_logger.info"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.util.get_logger"], ["", "def", "set_seed_logger", "(", "args", ")", ":", "\n", "    ", "global", "logger", "\n", "# predefining random initial seeds", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "# if you are using multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "args", ".", "world_size", "=", "world_size", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "logger", "=", "get_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"log.txt\"", ")", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Effective parameters:\"", ")", "\n", "for", "key", "in", "sorted", "(", "args", ".", "__dict__", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"  <<< {}: {}\"", ".", "format", "(", "key", ",", "args", ".", "__dict__", "[", "key", "]", ")", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.init_device": [[137, 151], ["torch.device", "torch.cuda.device_count", "logger.info", "ValueError", "torch.cuda.is_available"], "function", ["None"], ["", "def", "init_device", "(", "args", ",", "local_rank", ")", ":", "\n", "    ", "global", "logger", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "local_rank", ")", "\n", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "logger", ".", "info", "(", "\"device: {} n_gpu: {}\"", ".", "format", "(", "device", ",", "n_gpu", ")", ")", "\n", "args", ".", "n_gpu", "=", "n_gpu", "\n", "\n", "if", "args", ".", "batch_size", "%", "args", ".", "n_gpu", "!=", "0", "or", "args", ".", "batch_size_val", "%", "args", ".", "n_gpu", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid batch_size/batch_size_val and n_gpu parameter: {}%{} and {}%{}, should be == 0\"", ".", "format", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "n_gpu", ",", "args", ".", "batch_size_val", ",", "args", ".", "n_gpu", ")", ")", "\n", "\n", "", "return", "device", ",", "n_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.init_model": [[152, 167], ["modules.modeling.UniVL.from_pretrained", "UniVL.from_pretrained.to", "torch.load", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained"], ["", "def", "init_model", "(", "args", ",", "device", ",", "n_gpu", ",", "local_rank", ")", ":", "\n", "\n", "    ", "if", "args", ".", "init_model", ":", "\n", "        ", "model_state_dict", "=", "torch", ".", "load", "(", "args", ".", "init_model", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "model_state_dict", "=", "None", "\n", "\n", "# Prepare model", "\n", "", "cache_dir", "=", "args", ".", "cache_dir", "if", "args", ".", "cache_dir", "else", "os", ".", "path", ".", "join", "(", "str", "(", "PYTORCH_PRETRAINED_BERT_CACHE", ")", ",", "'distributed'", ")", "\n", "model", "=", "UniVL", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "args", ".", "visual_model", ",", "args", ".", "cross_model", ",", "args", ".", "decoder_model", ",", "\n", "cache_dir", "=", "cache_dir", ",", "state_dict", "=", "model_state_dict", ",", "task_config", "=", "args", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.prep_optimizer": [[168, 201], ["hasattr", "list", "modules.optimization.BertAdam", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.named_parameters", "any", "any"], "function", ["None"], ["", "def", "prep_optimizer", "(", "args", ",", "model", ",", "num_train_optimization_steps", ",", "device", ",", "n_gpu", ",", "local_rank", ",", "coef_lr", "=", "1.", ")", ":", "\n", "\n", "    ", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "param_optimizer", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "\n", "no_decay_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "param_optimizer", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", "\n", "decay_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "param_optimizer", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", "\n", "\n", "no_decay_bert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "no_decay_param_tp", "if", "\"bert.\"", "in", "n", "]", "\n", "no_decay_nobert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "no_decay_param_tp", "if", "\"bert.\"", "not", "in", "n", "]", "\n", "\n", "decay_bert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "decay_param_tp", "if", "\"bert.\"", "in", "n", "]", "\n", "decay_nobert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "decay_param_tp", "if", "\"bert.\"", "not", "in", "n", "]", "\n", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "no_decay_bert_param_tp", "]", ",", "'weight_decay'", ":", "0.01", ",", "'lr'", ":", "args", ".", "lr", "*", "coef_lr", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "no_decay_nobert_param_tp", "]", ",", "'weight_decay'", ":", "0.01", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "decay_bert_param_tp", "]", ",", "'weight_decay'", ":", "0.0", ",", "'lr'", ":", "args", ".", "lr", "*", "coef_lr", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "decay_nobert_param_tp", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "\n", "scheduler", "=", "None", "\n", "optimizer", "=", "BertAdam", "(", "optimizer_grouped_parameters", ",", "lr", "=", "args", ".", "lr", ",", "warmup", "=", "args", ".", "warmup_proportion", ",", "\n", "schedule", "=", "'warmup_linear'", ",", "t_total", "=", "num_train_optimization_steps", ",", "weight_decay", "=", "0.01", ",", "\n", "max_grad_norm", "=", "1.0", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "\n", "output_device", "=", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "return", "optimizer", ",", "scheduler", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.dataloader_youcook_train": [[202, 225], ["dataloaders.dataloader_youcook_retrieval.Youcook_DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "len"], "function", ["None"], ["", "def", "dataloader_youcook_train", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "youcook_dataset", "=", "Youcook_DataLoader", "(", "\n", "csv", "=", "args", ".", "train_csv", ",", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "features_path", "=", "args", ".", "features_path", ",", "\n", "max_words", "=", "args", ".", "max_words", ",", "\n", "feature_framerate", "=", "args", ".", "feature_framerate", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_frames", "=", "args", ".", "max_frames", ",", "\n", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "youcook_dataset", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "youcook_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", "//", "args", ".", "n_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_thread_reader", ",", "\n", "pin_memory", "=", "False", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "return", "dataloader", ",", "len", "(", "youcook_dataset", ")", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.dataloader_youcook_test": [[226, 248], ["dataloaders.dataloader_youcook_retrieval.Youcook_DataLoader", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "logger.info", "len", "len"], "function", ["None"], ["", "def", "dataloader_youcook_test", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "youcook_testset", "=", "Youcook_DataLoader", "(", "\n", "csv", "=", "args", ".", "val_csv", ",", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "features_path", "=", "args", ".", "features_path", ",", "\n", "max_words", "=", "args", ".", "max_words", ",", "\n", "feature_framerate", "=", "args", ".", "feature_framerate", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_frames", "=", "args", ".", "max_frames", ",", "\n", ")", "\n", "\n", "test_sampler", "=", "SequentialSampler", "(", "youcook_testset", ")", "\n", "dataloader_youcook", "=", "DataLoader", "(", "\n", "youcook_testset", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "batch_size", "=", "args", ".", "batch_size_val", ",", "\n", "num_workers", "=", "args", ".", "num_thread_reader", ",", "\n", "pin_memory", "=", "False", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'YoucookII validation pairs: {}'", ".", "format", "(", "len", "(", "youcook_testset", ")", ")", ")", "\n", "\n", "return", "dataloader_youcook", ",", "len", "(", "youcook_testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.dataloader_msrvtt_train": [[249, 273], ["dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "len"], "function", ["None"], ["", "def", "dataloader_msrvtt_train", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "msrvtt_dataset", "=", "MSRVTT_TrainDataLoader", "(", "\n", "csv_path", "=", "args", ".", "train_csv", ",", "\n", "json_path", "=", "args", ".", "data_path", ",", "\n", "features_path", "=", "args", ".", "features_path", ",", "\n", "max_words", "=", "args", ".", "max_words", ",", "\n", "feature_framerate", "=", "args", ".", "feature_framerate", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_frames", "=", "args", ".", "max_frames", ",", "\n", "unfold_sentences", "=", "args", ".", "expand_msrvtt_sentences", ",", "\n", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "msrvtt_dataset", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "msrvtt_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", "//", "args", ".", "n_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_thread_reader", ",", "\n", "pin_memory", "=", "False", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "return", "dataloader", ",", "len", "(", "msrvtt_dataset", ")", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.dataloader_msrvtt_test": [[274, 291], ["dataloaders.dataloader_msrvtt_retrieval.MSRVTT_DataLoader", "torch.utils.data.DataLoader", "len"], "function", ["None"], ["", "def", "dataloader_msrvtt_test", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "msrvtt_testset", "=", "MSRVTT_DataLoader", "(", "\n", "csv_path", "=", "args", ".", "val_csv", ",", "\n", "features_path", "=", "args", ".", "features_path", ",", "\n", "max_words", "=", "args", ".", "max_words", ",", "\n", "feature_framerate", "=", "args", ".", "feature_framerate", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_frames", "=", "args", ".", "max_frames", ",", "\n", ")", "\n", "dataloader_msrvtt", "=", "DataLoader", "(", "\n", "msrvtt_testset", ",", "\n", "batch_size", "=", "args", ".", "batch_size_val", ",", "\n", "num_workers", "=", "args", ".", "num_thread_reader", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "return", "dataloader_msrvtt", ",", "len", "(", "msrvtt_testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.save_model": [[292, 300], ["os.path.join", "torch.save", "logger.info", "hasattr", "model_to_save.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "epoch", ",", "args", ",", "model", ",", "type_name", "=", "\"\"", ")", ":", "\n", "# Only save the model it-self", "\n", "    ", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_dir", ",", "\"pytorch_model.bin.{}{}\"", ".", "format", "(", "\"\"", "if", "type_name", "==", "\"\"", "else", "type_name", "+", "\".\"", ",", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "model_to_save", ".", "state_dict", "(", ")", ",", "output_model_file", ")", "\n", "logger", ".", "info", "(", "\"Model saved to %s\"", ",", "output_model_file", ")", "\n", "return", "output_model_file", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.load_model": [[301, 317], ["os.path.exists", "os.path.join", "torch.load", "modules.modeling.UniVL.from_pretrained", "UniVL.from_pretrained.to", "len", "logger.info", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained"], ["", "def", "load_model", "(", "epoch", ",", "args", ",", "n_gpu", ",", "device", ",", "model_file", "=", "None", ")", ":", "\n", "    ", "if", "model_file", "is", "None", "or", "len", "(", "model_file", ")", "==", "0", ":", "\n", "        ", "model_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"pytorch_model.bin.{}\"", ".", "format", "(", "epoch", ")", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "model_file", ")", ":", "\n", "        ", "model_state_dict", "=", "torch", ".", "load", "(", "model_file", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Model loaded from %s\"", ",", "model_file", ")", "\n", "# Prepare model", "\n", "", "cache_dir", "=", "args", ".", "cache_dir", "if", "args", ".", "cache_dir", "else", "os", ".", "path", ".", "join", "(", "str", "(", "PYTORCH_PRETRAINED_BERT_CACHE", ")", ",", "'distributed'", ")", "\n", "model", "=", "UniVL", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "args", ".", "visual_model", ",", "args", ".", "cross_model", ",", "args", ".", "decoder_model", ",", "\n", "cache_dir", "=", "cache_dir", ",", "state_dict", "=", "model_state_dict", ",", "task_config", "=", "args", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "None", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.train_epoch": [[318, 366], ["torch.cuda.empty_cache", "model.train", "time.time", "enumerate", "model", "loss.mean.backward", "float", "len", "tuple", "loss.mean.mean", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "optimizer.zero_grad", "model.parameters", "scheduler.step", "logger.info", "time.time", "t.to", "len", "float", "str", "time.time", "sorted", "list", "set", "optimizer.get_lr"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.step", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.step", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.get_lr"], ["", "def", "train_epoch", "(", "epoch", ",", "args", ",", "model", ",", "train_dataloader", ",", "device", ",", "n_gpu", ",", "optimizer", ",", "scheduler", ",", "global_step", ",", "local_rank", "=", "0", ")", ":", "\n", "    ", "global", "logger", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "log_step", "=", "args", ".", "n_display", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "total_loss", "=", "0", "\n", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "if", "n_gpu", "==", "1", ":", "\n", "# multi-gpu does scattering it-self", "\n", "            ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "for", "t", "in", "batch", ")", "\n", "\n", "", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", "=", "batch", "\n", "loss", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "video", ",", "video_mask", ",", "\n", "pairs_masked_text", "=", "pairs_masked_text", ",", "pairs_token_labels", "=", "pairs_token_labels", ",", "\n", "masked_video", "=", "masked_video", ",", "video_labels_index", "=", "video_labels_index", ")", "\n", "\n", "if", "n_gpu", ">", "1", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "# mean() to average on multi-gpu.", "\n", "", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "            ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "total_loss", "+=", "float", "(", "loss", ")", "\n", "if", "(", "step", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "# Update learning rate schedule", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "log_step", "==", "0", "and", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Epoch: %d/%s, Step: %d/%d, Lr: %s, Loss: %f, Time/step: %f\"", ",", "epoch", "+", "1", ",", "\n", "args", ".", "epochs", ",", "step", "+", "1", ",", "\n", "len", "(", "train_dataloader", ")", ",", "\"-\"", ".", "join", "(", "[", "str", "(", "'%.6f'", "%", "itm", ")", "for", "itm", "in", "sorted", "(", "list", "(", "set", "(", "optimizer", ".", "get_lr", "(", ")", ")", ")", ")", "]", ")", ",", "\n", "float", "(", "loss", ")", ",", "\n", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "(", "log_step", "*", "args", ".", "gradient_accumulation_steps", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "", "total_loss", "=", "total_loss", "/", "len", "(", "train_dataloader", ")", "\n", "return", "total_loss", ",", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval._run_on_single_gpu": [[367, 382], ["enumerate", "enumerate", "numpy.concatenate", "sim_matrix.append", "model.get_similarity_logits", "b1b2_logits.cpu().detach().numpy.cpu().detach().numpy", "np.concatenate.append", "tuple", "b1b2_logits.cpu().detach().numpy.cpu().detach", "b1b2_logits.cpu().detach().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_similarity_logits"], ["", "def", "_run_on_single_gpu", "(", "model", ",", "batch_list_t", ",", "batch_list_v", ",", "batch_sequence_output_list", ",", "batch_visual_output_list", ")", ":", "\n", "    ", "sim_matrix", "=", "[", "]", "\n", "for", "idx1", ",", "b1", "in", "enumerate", "(", "batch_list_t", ")", ":", "\n", "        ", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "b1", "\n", "sequence_output", "=", "batch_sequence_output_list", "[", "idx1", "]", "\n", "each_row", "=", "[", "]", "\n", "for", "idx2", ",", "b2", "in", "enumerate", "(", "batch_list_v", ")", ":", "\n", "            ", "_", ",", "_", ",", "_", ",", "video", ",", "video_mask", ",", "_", ",", "_", ",", "_", ",", "_", "=", "b2", "\n", "visual_output", "=", "batch_visual_output_list", "[", "idx2", "]", "\n", "b1b2_logits", "=", "model", ".", "get_similarity_logits", "(", "sequence_output", ",", "visual_output", ",", "input_mask", ",", "video_mask", ")", "\n", "b1b2_logits", "=", "b1b2_logits", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "each_row", ".", "append", "(", "b1b2_logits", ")", "\n", "", "each_row", "=", "np", ".", "concatenate", "(", "tuple", "(", "each_row", ")", ",", "axis", "=", "-", "1", ")", "\n", "sim_matrix", ".", "append", "(", "each_row", ")", "\n", "", "return", "sim_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.eval_epoch": [[383, 451], ["hasattr", "model.to.eval", "metrics.compute_metrics", "logger.info", "logger.info", "model.to.module.to", "model.to.to", "torch.no_grad", "enumerate", "tuple", "model.to.get_sequence_visual_output", "batch_sequence_output_list.append", "batch_visual_output_list.append", "batch_list.append", "print", "list", "len", "util.parallel_apply", "range", "numpy.concatenate", "main_task_retrieval._run_on_single_gpu", "len", "len", "range", "len", "tuple", "t.to", "len", "batch_list_t_splits.append", "batch_list_v_splits.append", "batch_t_output_splits.append", "batch_v_output_splits.append", "torch.device", "batch_list_t_splits.append", "batch_list_v_splits.append", "batch_t_output_splits.append", "batch_v_output_splits.append", "tuple", "tuple", "b.to", "b.to", "str", "t.to", "t.to"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.metrics.compute_metrics", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_sequence_visual_output", "home.repos.pwc.inspect_result.microsoft_UniVL.None.util.parallel_apply", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval._run_on_single_gpu"], ["", "def", "eval_epoch", "(", "args", ",", "model", ",", "test_dataloader", ",", "device", ",", "n_gpu", ")", ":", "\n", "\n", "    ", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "batch_list", "=", "[", "]", "\n", "batch_sequence_output_list", ",", "batch_visual_output_list", "=", "[", "]", ",", "[", "]", "\n", "for", "bid", ",", "batch", "in", "enumerate", "(", "test_dataloader", ")", ":", "\n", "            ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "device", ")", "for", "t", "in", "batch", ")", "\n", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "video", ",", "video_mask", ",", "_", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "sequence_output", ",", "visual_output", "=", "model", ".", "get_sequence_visual_output", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "video", ",", "video_mask", ")", "\n", "\n", "batch_sequence_output_list", ".", "append", "(", "sequence_output", ")", "\n", "batch_visual_output_list", ".", "append", "(", "visual_output", ")", "\n", "batch_list", ".", "append", "(", "batch", ")", "\n", "\n", "print", "(", "\"{}/{}\\r\"", ".", "format", "(", "bid", ",", "len", "(", "test_dataloader", ")", ")", ",", "end", "=", "\"\"", ")", "\n", "\n", "", "if", "n_gpu", ">", "1", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "n_gpu", ")", ")", "\n", "batch_list_t_splits", "=", "[", "]", "\n", "batch_list_v_splits", "=", "[", "]", "\n", "batch_t_output_splits", "=", "[", "]", "\n", "batch_v_output_splits", "=", "[", "]", "\n", "bacth_len", "=", "len", "(", "batch_list", ")", "\n", "split_len", "=", "(", "bacth_len", "+", "n_gpu", "-", "1", ")", "//", "n_gpu", "\n", "for", "dev_id", "in", "device_ids", ":", "\n", "                ", "s_", ",", "e_", "=", "dev_id", "*", "split_len", ",", "(", "dev_id", "+", "1", ")", "*", "split_len", "\n", "if", "dev_id", "==", "0", ":", "\n", "                    ", "batch_list_t_splits", ".", "append", "(", "batch_list", "[", "s_", ":", "e_", "]", ")", "\n", "batch_list_v_splits", ".", "append", "(", "batch_list", ")", "\n", "\n", "batch_t_output_splits", ".", "append", "(", "batch_sequence_output_list", "[", "s_", ":", "e_", "]", ")", "\n", "batch_v_output_splits", ".", "append", "(", "batch_visual_output_list", ")", "\n", "", "else", ":", "\n", "                    ", "devc", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "str", "(", "dev_id", ")", ")", ")", "\n", "devc_batch_list", "=", "[", "tuple", "(", "t", ".", "to", "(", "devc", ")", "for", "t", "in", "b", ")", "for", "b", "in", "batch_list", "[", "s_", ":", "e_", "]", "]", "\n", "batch_list_t_splits", ".", "append", "(", "devc_batch_list", ")", "\n", "devc_batch_list", "=", "[", "tuple", "(", "t", ".", "to", "(", "devc", ")", "for", "t", "in", "b", ")", "for", "b", "in", "batch_list", "]", "\n", "batch_list_v_splits", ".", "append", "(", "devc_batch_list", ")", "\n", "\n", "devc_batch_list", "=", "[", "b", ".", "to", "(", "devc", ")", "for", "b", "in", "batch_sequence_output_list", "[", "s_", ":", "e_", "]", "]", "\n", "batch_t_output_splits", ".", "append", "(", "devc_batch_list", ")", "\n", "devc_batch_list", "=", "[", "b", ".", "to", "(", "devc", ")", "for", "b", "in", "batch_visual_output_list", "]", "\n", "batch_v_output_splits", ".", "append", "(", "devc_batch_list", ")", "\n", "\n", "", "", "parameters_tuple_list", "=", "[", "(", "batch_list_t_splits", "[", "dev_id", "]", ",", "batch_list_v_splits", "[", "dev_id", "]", ",", "\n", "batch_t_output_splits", "[", "dev_id", "]", ",", "batch_v_output_splits", "[", "dev_id", "]", ")", "for", "dev_id", "in", "device_ids", "]", "\n", "parallel_outputs", "=", "parallel_apply", "(", "_run_on_single_gpu", ",", "model", ",", "parameters_tuple_list", ",", "device_ids", ")", "\n", "sim_matrix", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "parallel_outputs", ")", ")", ":", "\n", "                ", "sim_matrix", "+=", "parallel_outputs", "[", "idx", "]", "\n", "", "sim_matrix", "=", "np", ".", "concatenate", "(", "tuple", "(", "sim_matrix", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "sim_matrix", "=", "_run_on_single_gpu", "(", "model", ",", "batch_list", ",", "batch_list", ",", "batch_sequence_output_list", ",", "batch_visual_output_list", ")", "\n", "\n", "", "", "metrics", "=", "compute_metrics", "(", "sim_matrix", ")", "\n", "logger", ".", "info", "(", "'\\t Length-T: {}, Length-V:{}'", ".", "format", "(", "len", "(", "sim_matrix", ")", ",", "len", "(", "sim_matrix", "[", "0", "]", ")", ")", ")", "\n", "logger", ".", "info", "(", "'\\t>>>  R@1: {:.4f} - R@5: {:.4f} - R@10: {:.4f} - Median R: {}'", ".", "\n", "format", "(", "metrics", "[", "'R1'", "]", ",", "metrics", "[", "'R5'", "]", ",", "metrics", "[", "'R10'", "]", ",", "metrics", "[", "'MR'", "]", ")", ")", "\n", "\n", "R1", "=", "metrics", "[", "'R1'", "]", "\n", "return", "R1", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_retrieval.main": [[456, 513], ["main_task_retrieval.get_args", "main_task_retrieval.set_seed_logger", "main_task_retrieval.init_device", "modules.tokenization.BertTokenizer.from_pretrained", "main_task_retrieval.init_model", "logger.info", "logger.info", "logger.info", "logger.info", "main_task_retrieval.prep_optimizer", "range", "len", "logger.info", "logger.info", "logger.info", "logger.info", "train_sampler.set_epoch", "main_task_retrieval.train_epoch", "main_task_retrieval.load_model", "main_task_retrieval.eval_epoch", "int", "logger.info", "main_task_retrieval.save_model", "main_task_retrieval.eval_epoch", "logger.info", "main_task_retrieval.eval_epoch", "len"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.get_args", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.set_seed_logger", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.init_device", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.init_model", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.prep_optimizer", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.train_epoch", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.load_model", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.eval_epoch", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.save_model", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.eval_epoch", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.eval_epoch"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "logger", "\n", "args", "=", "get_args", "(", ")", "\n", "args", "=", "set_seed_logger", "(", "args", ")", "\n", "device", ",", "n_gpu", "=", "init_device", "(", "args", ",", "args", ".", "local_rank", ")", "\n", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "do_lower_case", "=", "args", ".", "do_lower_case", ")", "\n", "\n", "assert", "args", ".", "task_type", "==", "\"retrieval\"", "\n", "model", "=", "init_model", "(", "args", ",", "device", ",", "n_gpu", ",", "args", ".", "local_rank", ")", "\n", "\n", "assert", "args", ".", "datatype", "in", "DATALOADER_DICT", "\n", "test_dataloader", ",", "test_length", "=", "DATALOADER_DICT", "[", "args", ".", "datatype", "]", "[", "\"val\"", "]", "(", "args", ",", "tokenizer", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"***** Running test *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "test_length", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "batch_size_val", ")", "\n", "logger", ".", "info", "(", "\"  Num steps = %d\"", ",", "len", "(", "test_dataloader", ")", ")", "\n", "\n", "", "if", "args", ".", "do_train", ":", "\n", "        ", "train_dataloader", ",", "train_length", ",", "train_sampler", "=", "DATALOADER_DICT", "[", "args", ".", "datatype", "]", "[", "\"train\"", "]", "(", "args", ",", "tokenizer", ")", "\n", "num_train_optimization_steps", "=", "(", "int", "(", "len", "(", "train_dataloader", ")", "+", "args", ".", "gradient_accumulation_steps", "-", "1", ")", "\n", "/", "args", ".", "gradient_accumulation_steps", ")", "*", "args", ".", "epochs", "\n", "\n", "coef_lr", "=", "args", ".", "coef_lr", "\n", "if", "args", ".", "init_model", ":", "\n", "            ", "coef_lr", "=", "1.0", "\n", "", "optimizer", ",", "scheduler", ",", "model", "=", "prep_optimizer", "(", "args", ",", "model", ",", "num_train_optimization_steps", ",", "device", ",", "n_gpu", ",", "args", ".", "local_rank", ",", "coef_lr", "=", "coef_lr", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "train_length", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "batch_size", ")", "\n", "logger", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_optimization_steps", "*", "args", ".", "gradient_accumulation_steps", ")", "\n", "\n", "", "best_score", "=", "0.00001", "\n", "best_output_model_file", "=", "None", "\n", "global_step", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "tr_loss", ",", "global_step", "=", "train_epoch", "(", "epoch", ",", "args", ",", "model", ",", "train_dataloader", ",", "device", ",", "n_gpu", ",", "optimizer", ",", "\n", "scheduler", ",", "global_step", ",", "local_rank", "=", "args", ".", "local_rank", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Epoch %d/%s Finished, Train Loss: %f\"", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "tr_loss", ")", "\n", "output_model_file", "=", "save_model", "(", "epoch", ",", "args", ",", "model", ",", "type_name", "=", "\"\"", ")", "\n", "\n", "R1", "=", "eval_epoch", "(", "args", ",", "model", ",", "test_dataloader", ",", "device", ",", "n_gpu", ")", "\n", "if", "best_score", "<=", "R1", ":", "\n", "                    ", "best_score", "=", "R1", "\n", "best_output_model_file", "=", "output_model_file", "\n", "", "logger", ".", "info", "(", "\"The best model is: {}, the R1 is: {:.4f}\"", ".", "format", "(", "best_output_model_file", ",", "best_score", ")", ")", "\n", "", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "model", "=", "load_model", "(", "-", "1", ",", "args", ",", "n_gpu", ",", "device", ",", "model_file", "=", "best_output_model_file", ")", "\n", "eval_epoch", "(", "args", ",", "model", ",", "test_dataloader", ",", "device", ",", "n_gpu", ")", "\n", "", "", "elif", "args", ".", "do_eval", ":", "\n", "        ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "eval_epoch", "(", "args", ",", "model", ",", "test_dataloader", ",", "device", ",", "n_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.util.get_a_var": [[7, 20], ["isinstance", "isinstance", "isinstance", "isinstance", "map", "map", "isinstance", "obj.items", "isinstance"], "function", ["None"], ["def", "get_a_var", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "obj", "\n", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "or", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "        ", "for", "result", "in", "map", "(", "get_a_var", ",", "obj", ")", ":", "\n", "            ", "if", "isinstance", "(", "result", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "return", "result", "\n", "", "", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "for", "result", "in", "map", "(", "get_a_var", ",", "obj", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "result", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "return", "result", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.util.parallel_apply": [[21, 61], ["torch.parallel.replicate", "threading.Lock", "torch.is_grad_enabled", "torch.is_grad_enabled", "range", "len", "len", "torch.set_grad_enabled", "torch.set_grad_enabled", "get_a_var().get_device", "len", "util.parallel_apply._worker"], "function", ["None"], ["", "def", "parallel_apply", "(", "fct", ",", "model", ",", "inputs", ",", "device_ids", ")", ":", "\n", "    ", "modules", "=", "nn", ".", "parallel", ".", "replicate", "(", "model", ",", "device_ids", ")", "\n", "assert", "len", "(", "modules", ")", "==", "len", "(", "inputs", ")", "\n", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "results", "=", "{", "}", "\n", "grad_enabled", "=", "torch", ".", "is_grad_enabled", "(", ")", "\n", "\n", "def", "_worker", "(", "i", ",", "module", ",", "input", ")", ":", "\n", "        ", "torch", ".", "set_grad_enabled", "(", "grad_enabled", ")", "\n", "device", "=", "get_a_var", "(", "input", ")", ".", "get_device", "(", ")", "\n", "try", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "device", ")", ":", "\n", "# this also avoids accidental slicing of `input` if it is a Tensor", "\n", "                ", "if", "not", "isinstance", "(", "input", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                    ", "input", "=", "(", "input", ",", ")", "\n", "", "output", "=", "fct", "(", "module", ",", "*", "input", ")", "\n", "", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "output", "\n", "", "", "except", "Exception", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "ExceptionWrapper", "(", "where", "=", "\"in replica {} on device {}\"", ".", "format", "(", "i", ",", "device", ")", ")", "\n", "\n", "", "", "", "if", "len", "(", "modules", ")", ">", "1", ":", "\n", "        ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "_worker", ",", "args", "=", "(", "i", ",", "module", ",", "input", ")", ")", "\n", "for", "i", ",", "(", "module", ",", "input", ")", "in", "enumerate", "(", "zip", "(", "modules", ",", "inputs", ")", ")", "]", "\n", "\n", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "_worker", "(", "0", ",", "modules", "[", "0", "]", ",", "inputs", "[", "0", "]", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "output", "=", "results", "[", "i", "]", "\n", "if", "isinstance", "(", "output", ",", "ExceptionWrapper", ")", ":", "\n", "            ", "output", ".", "reraise", "(", ")", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.util.get_logger": [[62, 74], ["logging.getLogger", "logging.getLogger.setLevel", "logging.basicConfig", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger().addHandler", "logging.Formatter", "logging.getLogger"], "function", ["None"], ["", "def", "get_logger", "(", "filename", "=", "None", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'logger'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s - %(levelname)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "handler", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(asctime)s:%(levelname)s: %(message)s'", ")", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "handler", ")", "\n", "", "return", "logger", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.get_args": [[28, 109], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "ValueError", "ValueError"], "function", ["None"], ["def", "get_args", "(", "description", "=", "'UniVL on Caption Task'", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_pretrain\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_train\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_eval\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether to run eval on the dev set.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_csv'", ",", "type", "=", "str", ",", "default", "=", "'data/youcookii_singlef_train.csv'", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--val_csv'", ",", "type", "=", "str", ",", "default", "=", "'data/youcookii_singlef_val.csv'", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "'data/youcookii_caption_transcript.pickle'", ",", "\n", "help", "=", "'caption and transcription pickle file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--features_path'", ",", "type", "=", "str", ",", "default", "=", "'data/youcookii_videos_feature.pickle'", ",", "\n", "help", "=", "'feature path for 2D features'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_thread_reader'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'upper epoch limit'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_val'", ",", "type", "=", "int", ",", "default", "=", "3500", ",", "help", "=", "'batch size eval'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'Learning rate exp epoch decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_display'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Information display frequence'", ")", "\n", "parser", ".", "add_argument", "(", "'--video_dim'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'video feature dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_words'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--max_frames'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--feature_framerate'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--min_time'", ",", "type", "=", "float", ",", "default", "=", "5.0", ",", "help", "=", "'Gather small clips'", ")", "\n", "parser", ".", "add_argument", "(", "'--margin'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'margin for loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--hard_negative_rate'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'rate of intra negative sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--negative_weighting'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Weight the loss for intra negative'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_pair'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Num of pair to output from data loader'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"The output directory where the model predictions and checkpoints will be written.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--bert_model\"", ",", "default", "=", "\"bert-base-uncased\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"Bert pre-trained model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--visual_model\"", ",", "default", "=", "\"visual-base\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Visual module\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cross_model\"", ",", "default", "=", "\"cross-base\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Cross module\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--decoder_model\"", ",", "default", "=", "\"decoder-base\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Decoder module\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--init_model\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"Initial model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_lower_case\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Set this flag if you are using an uncased model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_proportion\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Proportion of training to perform linear learning rate warmup for. E.g., 0.1 = 10%% of training.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gradient_accumulation_steps'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of updates steps to accumulate before performing a backward/update pass.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--n_gpu'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Changed in the execute process.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--cache_dir\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Where do you want to store the pre-trained models downloaded from s3\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16_opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O1'", ",", "\n", "help", "=", "\"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3'].\"", "\n", "\"See details at https://nvidia.github.io/apex/amp.html\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--task_type\"", ",", "default", "=", "\"caption\"", ",", "type", "=", "str", ",", "help", "=", "\"Point the task `caption` to finetune.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--datatype\"", ",", "default", "=", "\"youcook\"", ",", "type", "=", "str", ",", "help", "=", "\"Point the dataset `youcook` to finetune.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--world_size\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"distribted training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"distribted training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--coef_lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'coefficient for bert branch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_mil'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether use MIL as Miech et. al. (2020).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sampled_use_mil'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether use MIL, has a high priority than use_mil.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--text_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "\"Layer NO. of text.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "\"Layer NO. of visual.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cross_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Layer NO. of cross.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder_num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"Layer NO. of decoder.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--stage_two'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Whether training with decoder.\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Check paramenters", "\n", "if", "args", ".", "gradient_accumulation_steps", "<", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid gradient_accumulation_steps parameter: {}, should be >= 1\"", ".", "format", "(", "\n", "args", ".", "gradient_accumulation_steps", ")", ")", "\n", "", "if", "not", "args", ".", "do_train", "and", "not", "args", ".", "do_eval", ":", "\n", "        ", "raise", "ValueError", "(", "\"At least one of `do_train` or `do_eval` must be True.\"", ")", "\n", "\n", "", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "args", ".", "gradient_accumulation_steps", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.set_seed_logger": [[110, 137], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.distributed.get_world_size", "torch.cuda.set_device", "util.get_logger", "os.path.exists", "os.makedirs", "os.path.join", "util.get_logger.info", "sorted", "util.get_logger.info"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.util.get_logger"], ["", "def", "set_seed_logger", "(", "args", ")", ":", "\n", "    ", "global", "logger", "\n", "# predefining random initial seeds", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "# if you are using multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "args", ".", "world_size", "=", "world_size", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "logger", "=", "get_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"log.txt\"", ")", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Effective parameters:\"", ")", "\n", "for", "key", "in", "sorted", "(", "args", ".", "__dict__", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"  <<< {}: {}\"", ".", "format", "(", "key", ",", "args", ".", "__dict__", "[", "key", "]", ")", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.init_device": [[138, 152], ["torch.device", "torch.cuda.device_count", "logger.info", "ValueError", "torch.cuda.is_available"], "function", ["None"], ["", "def", "init_device", "(", "args", ",", "local_rank", ")", ":", "\n", "    ", "global", "logger", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "local_rank", ")", "\n", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "logger", ".", "info", "(", "\"device: {} n_gpu: {}\"", ".", "format", "(", "device", ",", "n_gpu", ")", ")", "\n", "args", ".", "n_gpu", "=", "n_gpu", "\n", "\n", "if", "args", ".", "batch_size", "%", "args", ".", "n_gpu", "!=", "0", "or", "args", ".", "batch_size_val", "%", "args", ".", "n_gpu", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid batch_size/batch_size_val and n_gpu parameter: {}%{} and {}%{}, should be == 0\"", ".", "format", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "n_gpu", ",", "args", ".", "batch_size_val", ",", "args", ".", "n_gpu", ")", ")", "\n", "\n", "", "return", "device", ",", "n_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.init_model": [[153, 168], ["modules.modeling.UniVL.from_pretrained", "UniVL.from_pretrained.to", "torch.load", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained"], ["", "def", "init_model", "(", "args", ",", "device", ",", "n_gpu", ",", "local_rank", ")", ":", "\n", "\n", "    ", "if", "args", ".", "init_model", ":", "\n", "        ", "model_state_dict", "=", "torch", ".", "load", "(", "args", ".", "init_model", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "model_state_dict", "=", "None", "\n", "\n", "# Prepare model", "\n", "", "cache_dir", "=", "args", ".", "cache_dir", "if", "args", ".", "cache_dir", "else", "os", ".", "path", ".", "join", "(", "str", "(", "PYTORCH_PRETRAINED_BERT_CACHE", ")", ",", "'distributed'", ")", "\n", "model", "=", "UniVL", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "args", ".", "visual_model", ",", "args", ".", "cross_model", ",", "args", ".", "decoder_model", ",", "\n", "cache_dir", "=", "cache_dir", ",", "state_dict", "=", "model_state_dict", ",", "task_config", "=", "args", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.prep_optimizer": [[169, 202], ["hasattr", "list", "modules.optimization.BertAdam", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.named_parameters", "any", "any"], "function", ["None"], ["", "def", "prep_optimizer", "(", "args", ",", "model", ",", "num_train_optimization_steps", ",", "device", ",", "n_gpu", ",", "local_rank", ",", "coef_lr", "=", "1.", ")", ":", "\n", "\n", "    ", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "param_optimizer", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "\n", "no_decay_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "param_optimizer", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", "\n", "decay_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "param_optimizer", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", "\n", "\n", "no_decay_bert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "no_decay_param_tp", "if", "\"bert.\"", "in", "n", "]", "\n", "no_decay_nobert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "no_decay_param_tp", "if", "\"bert.\"", "not", "in", "n", "]", "\n", "\n", "decay_bert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "decay_param_tp", "if", "\"bert.\"", "in", "n", "]", "\n", "decay_nobert_param_tp", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "decay_param_tp", "if", "\"bert.\"", "not", "in", "n", "]", "\n", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "no_decay_bert_param_tp", "]", ",", "'weight_decay'", ":", "0.01", ",", "'lr'", ":", "args", ".", "lr", "*", "coef_lr", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "no_decay_nobert_param_tp", "]", ",", "'weight_decay'", ":", "0.01", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "decay_bert_param_tp", "]", ",", "'weight_decay'", ":", "0.0", ",", "'lr'", ":", "args", ".", "lr", "*", "coef_lr", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "decay_nobert_param_tp", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "\n", "scheduler", "=", "None", "\n", "optimizer", "=", "BertAdam", "(", "optimizer_grouped_parameters", ",", "lr", "=", "args", ".", "lr", ",", "warmup", "=", "args", ".", "warmup_proportion", ",", "\n", "schedule", "=", "'warmup_linear'", ",", "t_total", "=", "num_train_optimization_steps", ",", "weight_decay", "=", "0.01", ",", "\n", "max_grad_norm", "=", "1.0", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "\n", "output_device", "=", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "return", "optimizer", ",", "scheduler", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.dataloader_youcook_train": [[203, 226], ["dataloaders.dataloader_youcook_caption.Youcook_Caption_DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "len"], "function", ["None"], ["", "def", "dataloader_youcook_train", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "youcook_dataset", "=", "Youcook_Caption_DataLoader", "(", "\n", "csv", "=", "args", ".", "train_csv", ",", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "features_path", "=", "args", ".", "features_path", ",", "\n", "max_words", "=", "args", ".", "max_words", ",", "\n", "feature_framerate", "=", "args", ".", "feature_framerate", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_frames", "=", "args", ".", "max_frames", ",", "\n", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "youcook_dataset", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "youcook_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", "//", "args", ".", "n_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_thread_reader", ",", "\n", "pin_memory", "=", "False", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "return", "dataloader", ",", "len", "(", "youcook_dataset", ")", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.dataloader_youcook_test": [[227, 250], ["dataloaders.dataloader_youcook_caption.Youcook_Caption_DataLoader", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "logger.info", "len", "len"], "function", ["None"], ["", "def", "dataloader_youcook_test", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "youcook_testset", "=", "Youcook_Caption_DataLoader", "(", "\n", "csv", "=", "args", ".", "val_csv", ",", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "features_path", "=", "args", ".", "features_path", ",", "\n", "max_words", "=", "args", ".", "max_words", ",", "\n", "feature_framerate", "=", "args", ".", "feature_framerate", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_frames", "=", "args", ".", "max_frames", ",", "\n", ")", "\n", "\n", "test_sampler", "=", "SequentialSampler", "(", "youcook_testset", ")", "\n", "dataloader_youcook", "=", "DataLoader", "(", "\n", "youcook_testset", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "batch_size", "=", "args", ".", "batch_size_val", ",", "\n", "num_workers", "=", "args", ".", "num_thread_reader", ",", "\n", "pin_memory", "=", "False", ",", "\n", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'YoucookII validation pairs: {}'", ".", "format", "(", "len", "(", "youcook_testset", ")", ")", ")", "\n", "", "return", "dataloader_youcook", ",", "len", "(", "youcook_testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.dataloader_msrvtt_train": [[251, 275], ["dataloaders.dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "len"], "function", ["None"], ["", "def", "dataloader_msrvtt_train", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "msrvtt_dataset", "=", "MSRVTT_Caption_DataLoader", "(", "\n", "csv_path", "=", "args", ".", "train_csv", ",", "\n", "json_path", "=", "args", ".", "data_path", ",", "\n", "features_path", "=", "args", ".", "features_path", ",", "\n", "max_words", "=", "args", ".", "max_words", ",", "\n", "feature_framerate", "=", "args", ".", "feature_framerate", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_frames", "=", "args", ".", "max_frames", ",", "\n", "split_type", "=", "\"train\"", ",", "\n", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "msrvtt_dataset", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "msrvtt_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", "//", "args", ".", "n_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_thread_reader", ",", "\n", "pin_memory", "=", "False", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "return", "dataloader", ",", "len", "(", "msrvtt_dataset", ")", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.dataloader_msrvtt_test": [[276, 298], ["dataloaders.dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "len"], "function", ["None"], ["", "def", "dataloader_msrvtt_test", "(", "args", ",", "tokenizer", ",", "split_type", "=", "\"test\"", ",", ")", ":", "\n", "    ", "msrvtt_testset", "=", "MSRVTT_Caption_DataLoader", "(", "\n", "csv_path", "=", "args", ".", "val_csv", ",", "\n", "json_path", "=", "args", ".", "data_path", ",", "\n", "features_path", "=", "args", ".", "features_path", ",", "\n", "max_words", "=", "args", ".", "max_words", ",", "\n", "feature_framerate", "=", "args", ".", "feature_framerate", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_frames", "=", "args", ".", "max_frames", ",", "\n", "split_type", "=", "split_type", ",", "\n", ")", "\n", "\n", "test_sampler", "=", "SequentialSampler", "(", "msrvtt_testset", ")", "\n", "dataloader_msrvtt", "=", "DataLoader", "(", "\n", "msrvtt_testset", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "batch_size", "=", "args", ".", "batch_size_val", ",", "\n", "num_workers", "=", "args", ".", "num_thread_reader", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "return", "dataloader_msrvtt", ",", "len", "(", "msrvtt_testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.convert_state_dict_type": [[299, 311], ["isinstance", "collections.OrderedDict", "state_dict.items", "isinstance", "main_task_caption.convert_state_dict_type", "torch.is_tensor", "main_task_caption.convert_state_dict_type", "state_dict.type"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.convert_state_dict_type", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.convert_state_dict_type"], ["", "def", "convert_state_dict_type", "(", "state_dict", ",", "ttype", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "state_dict", ",", "dict", ")", ":", "\n", "        ", "cpu_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "cpu_dict", "[", "k", "]", "=", "convert_state_dict_type", "(", "v", ")", "\n", "", "return", "cpu_dict", "\n", "", "elif", "isinstance", "(", "state_dict", ",", "list", ")", ":", "\n", "        ", "return", "[", "convert_state_dict_type", "(", "v", ")", "for", "v", "in", "state_dict", "]", "\n", "", "elif", "torch", ".", "is_tensor", "(", "state_dict", ")", ":", "\n", "        ", "return", "state_dict", ".", "type", "(", "ttype", ")", "\n", "", "else", ":", "\n", "        ", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.save_model": [[312, 320], ["os.path.join", "torch.save", "logger.info", "hasattr", "model_to_save.state_dict"], "function", ["None"], ["", "", "def", "save_model", "(", "epoch", ",", "args", ",", "model", ",", "type_name", "=", "\"\"", ")", ":", "\n", "# Only save the model it-self", "\n", "    ", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_dir", ",", "\"pytorch_model.bin.{}{}\"", ".", "format", "(", "\"\"", "if", "type_name", "==", "\"\"", "else", "type_name", "+", "\".\"", ",", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "model_to_save", ".", "state_dict", "(", ")", ",", "output_model_file", ")", "\n", "logger", ".", "info", "(", "\"Model saved to %s\"", ",", "output_model_file", ")", "\n", "return", "output_model_file", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.load_model": [[321, 337], ["os.path.exists", "os.path.join", "torch.load", "modules.modeling.UniVL.from_pretrained", "UniVL.from_pretrained.to", "len", "logger.info", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained"], ["", "def", "load_model", "(", "epoch", ",", "args", ",", "n_gpu", ",", "device", ",", "model_file", "=", "None", ")", ":", "\n", "    ", "if", "model_file", "is", "None", "or", "len", "(", "model_file", ")", "==", "0", ":", "\n", "        ", "model_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"pytorch_model.bin.{}\"", ".", "format", "(", "epoch", ")", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "model_file", ")", ":", "\n", "        ", "model_state_dict", "=", "torch", ".", "load", "(", "model_file", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Model loaded from %s\"", ",", "model_file", ")", "\n", "# Prepare model", "\n", "", "cache_dir", "=", "args", ".", "cache_dir", "if", "args", ".", "cache_dir", "else", "os", ".", "path", ".", "join", "(", "str", "(", "PYTORCH_PRETRAINED_BERT_CACHE", ")", ",", "'distributed'", ")", "\n", "model", "=", "UniVL", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "args", ".", "visual_model", ",", "args", ".", "cross_model", ",", "args", ".", "decoder_model", ",", "\n", "cache_dir", "=", "cache_dir", ",", "state_dict", "=", "model_state_dict", ",", "task_config", "=", "args", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "None", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.train_epoch": [[338, 392], ["torch.cuda.empty_cache", "model.train", "time.time", "enumerate", "tuple", "model", "loss.mean.backward", "float", "len", "loss.mean.mean", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "optimizer.zero_grad", "t.to", "model.parameters", "scheduler.step", "logger.info", "time.time", "len", "float", "str", "time.time", "sorted", "list", "set", "optimizer.get_lr"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.step", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.step", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.get_lr"], ["", "def", "train_epoch", "(", "epoch", ",", "args", ",", "model", ",", "train_dataloader", ",", "tokenizer", ",", "device", ",", "n_gpu", ",", "optimizer", ",", "scheduler", ",", "\n", "global_step", ",", "nlgEvalObj", "=", "None", ",", "local_rank", "=", "0", ")", ":", "\n", "    ", "global", "logger", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "log_step", "=", "args", ".", "n_display", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "total_loss", "=", "0", "\n", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "# if n_gpu == 1:", "\n", "#     # multi-gpu does scattering it-self", "\n", "#     batch = tuple(t.to(device) for t in batch)", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "for", "t", "in", "batch", ")", "\n", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", "=", "batch", "\n", "\n", "loss", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "video", ",", "video_mask", ",", "\n", "pairs_masked_text", "=", "pairs_masked_text", ",", "pairs_token_labels", "=", "pairs_token_labels", ",", "\n", "masked_video", "=", "masked_video", ",", "video_labels_index", "=", "video_labels_index", ",", "\n", "input_caption_ids", "=", "pairs_input_caption_ids", ",", "decoder_mask", "=", "pairs_decoder_mask", ",", "\n", "output_caption_ids", "=", "pairs_output_caption_ids", ")", "\n", "\n", "if", "n_gpu", ">", "1", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "# mean() to average on multi-gpu.", "\n", "", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "            ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "total_loss", "+=", "float", "(", "loss", ")", "\n", "if", "(", "step", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "# Update learning rate schedule", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "log_step", "==", "0", "and", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Epoch: %d/%s, Step: %d/%d, Lr: %s, Loss: %f, Time/step: %f\"", ",", "epoch", "+", "1", ",", "\n", "args", ".", "epochs", ",", "step", "+", "1", ",", "\n", "len", "(", "train_dataloader", ")", ",", "\"-\"", ".", "join", "(", "[", "str", "(", "'%.6f'", "%", "itm", ")", "for", "itm", "in", "sorted", "(", "list", "(", "set", "(", "optimizer", ".", "get_lr", "(", ")", ")", ")", ")", "]", ")", ",", "\n", "float", "(", "loss", ")", ",", "\n", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "(", "log_step", "*", "args", ".", "gradient_accumulation_steps", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "", "total_loss", "=", "total_loss", "/", "len", "(", "train_dataloader", ")", "\n", "return", "total_loss", ",", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.get_inst_idx_to_tensor_position_map": [[395, 398], ["enumerate"], "function", ["None"], ["", "def", "get_inst_idx_to_tensor_position_map", "(", "inst_idx_list", ")", ":", "\n", "    ", "''' Indicate the position of an instance in a tensor. '''", "\n", "return", "{", "inst_idx", ":", "tensor_position", "for", "tensor_position", ",", "inst_idx", "in", "enumerate", "(", "inst_idx_list", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collect_active_part": [[400, 412], ["beamed_tensor.view.size", "len", "beamed_tensor.view.view", "beamed_tensor.view.index_select", "beamed_tensor.view.view"], "function", ["None"], ["", "def", "collect_active_part", "(", "beamed_tensor", ",", "curr_active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", ":", "\n", "    ", "''' Collect tensor parts associated to active instances. '''", "\n", "\n", "_", ",", "*", "d_hs", "=", "beamed_tensor", ".", "size", "(", ")", "\n", "n_curr_active_inst", "=", "len", "(", "curr_active_inst_idx", ")", "\n", "new_shape", "=", "(", "n_curr_active_inst", "*", "n_bm", ",", "*", "d_hs", ")", "\n", "\n", "beamed_tensor", "=", "beamed_tensor", ".", "view", "(", "n_prev_active_inst", ",", "-", "1", ")", "\n", "beamed_tensor", "=", "beamed_tensor", ".", "index_select", "(", "0", ",", "curr_active_inst_idx", ")", "\n", "beamed_tensor", "=", "beamed_tensor", ".", "view", "(", "*", "new_shape", ")", "\n", "\n", "return", "beamed_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collate_active_info": [[414, 433], ["isinstance", "len", "torch.LongTensor().to", "main_task_caption.collect_active_part", "main_task_caption.collect_active_part", "main_task_caption.collect_active_part", "main_task_caption.collect_active_part", "main_task_caption.collect_active_part", "main_task_caption.get_inst_idx_to_tensor_position_map", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collect_active_part", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collect_active_part", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collect_active_part", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collect_active_part", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collect_active_part", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.get_inst_idx_to_tensor_position_map"], ["", "def", "collate_active_info", "(", "input_tuples", ",", "inst_idx_to_position_map", ",", "active_inst_idx_list", ",", "n_bm", ",", "device", ")", ":", "\n", "    ", "assert", "isinstance", "(", "input_tuples", ",", "tuple", ")", "\n", "sequence_output_rpt", ",", "visual_output_rpt", ",", "input_ids_rpt", ",", "input_mask_rpt", ",", "video_mask_rpt", "=", "input_tuples", "\n", "\n", "# Sentences which are still active are collected,", "\n", "# so the decoder will not run on completed sentences.", "\n", "n_prev_active_inst", "=", "len", "(", "inst_idx_to_position_map", ")", "\n", "active_inst_idx", "=", "[", "inst_idx_to_position_map", "[", "k", "]", "for", "k", "in", "active_inst_idx_list", "]", "\n", "active_inst_idx", "=", "torch", ".", "LongTensor", "(", "active_inst_idx", ")", ".", "to", "(", "device", ")", "\n", "\n", "active_sequence_output_rpt", "=", "collect_active_part", "(", "sequence_output_rpt", ",", "active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", "\n", "active_visual_output_rpt", "=", "collect_active_part", "(", "visual_output_rpt", ",", "active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", "\n", "active_input_ids_rpt", "=", "collect_active_part", "(", "input_ids_rpt", ",", "active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", "\n", "active_input_mask_rpt", "=", "collect_active_part", "(", "input_mask_rpt", ",", "active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", "\n", "active_video_mask_rpt", "=", "collect_active_part", "(", "video_mask_rpt", ",", "active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", "\n", "active_inst_idx_to_position_map", "=", "get_inst_idx_to_tensor_position_map", "(", "active_inst_idx_list", ")", "\n", "\n", "return", "(", "active_sequence_output_rpt", ",", "active_visual_output_rpt", ",", "active_input_ids_rpt", ",", "active_input_mask_rpt", ",", "active_video_mask_rpt", ")", ",", "active_inst_idx_to_position_map", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.beam_decode_step": [[434, 478], ["isinstance", "len", "main_task_caption.beam_decode_step.prepare_beam_dec_seq"], "function", ["None"], ["", "def", "beam_decode_step", "(", "decoder", ",", "inst_dec_beams", ",", "len_dec_seq", ",", "\n", "inst_idx_to_position_map", ",", "n_bm", ",", "device", ",", "input_tuples", ",", "decoder_length", "=", "None", ")", ":", "\n", "\n", "    ", "assert", "isinstance", "(", "input_tuples", ",", "tuple", ")", "\n", "\n", "''' Decode and update beam status, and then return active beam idx'''", "\n", "def", "prepare_beam_dec_seq", "(", "inst_dec_beams", ",", "len_dec_seq", ")", ":", "\n", "        ", "dec_partial_seq", "=", "[", "b", ".", "get_current_state", "(", ")", "for", "b", "in", "inst_dec_beams", "if", "not", "b", ".", "done", "]", "\n", "dec_partial_seq", "=", "torch", ".", "stack", "(", "dec_partial_seq", ")", ".", "to", "(", "device", ")", "\n", "dec_partial_seq", "=", "dec_partial_seq", ".", "view", "(", "-", "1", ",", "len_dec_seq", ")", "\n", "return", "dec_partial_seq", "\n", "\n", "", "def", "predict_word", "(", "next_decoder_ids", ",", "n_active_inst", ",", "n_bm", ",", "device", ",", "input_tuples", ")", ":", "\n", "        ", "sequence_output_rpt", ",", "visual_output_rpt", ",", "input_ids_rpt", ",", "input_mask_rpt", ",", "video_mask_rpt", "=", "input_tuples", "\n", "next_decoder_mask", "=", "torch", ".", "ones", "(", "next_decoder_ids", ".", "size", "(", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", ".", "to", "(", "device", ")", "\n", "\n", "dec_output", "=", "decoder", "(", "sequence_output_rpt", ",", "visual_output_rpt", ",", "input_ids_rpt", ",", "input_mask_rpt", ",", "\n", "video_mask_rpt", ",", "next_decoder_ids", ",", "next_decoder_mask", ",", "shaped", "=", "True", ",", "get_logits", "=", "True", ")", "\n", "dec_output", "=", "dec_output", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "word_prob", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "dec_output", ",", "dim", "=", "1", ")", "\n", "word_prob", "=", "word_prob", ".", "view", "(", "n_active_inst", ",", "n_bm", ",", "-", "1", ")", "\n", "return", "word_prob", "\n", "\n", "", "def", "collect_active_inst_idx_list", "(", "inst_beams", ",", "word_prob", ",", "inst_idx_to_position_map", ",", "decoder_length", "=", "None", ")", ":", "\n", "        ", "active_inst_idx_list", "=", "[", "]", "\n", "for", "inst_idx", ",", "inst_position", "in", "inst_idx_to_position_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "decoder_length", "is", "None", ":", "\n", "                ", "is_inst_complete", "=", "inst_beams", "[", "inst_idx", "]", ".", "advance", "(", "word_prob", "[", "inst_position", "]", ")", "\n", "", "else", ":", "\n", "                ", "is_inst_complete", "=", "inst_beams", "[", "inst_idx", "]", ".", "advance", "(", "word_prob", "[", "inst_position", "]", ",", "word_length", "=", "decoder_length", "[", "inst_idx", "]", ")", "\n", "", "if", "not", "is_inst_complete", ":", "\n", "                ", "active_inst_idx_list", "+=", "[", "inst_idx", "]", "\n", "\n", "", "", "return", "active_inst_idx_list", "\n", "\n", "", "n_active_inst", "=", "len", "(", "inst_idx_to_position_map", ")", "\n", "dec_seq", "=", "prepare_beam_dec_seq", "(", "inst_dec_beams", ",", "len_dec_seq", ")", "\n", "word_prob", "=", "predict_word", "(", "dec_seq", ",", "n_active_inst", ",", "n_bm", ",", "device", ",", "input_tuples", ")", "\n", "\n", "# Update the beam with predicted word prob information and collect incomplete instances", "\n", "active_inst_idx_list", "=", "collect_active_inst_idx_list", "(", "inst_dec_beams", ",", "word_prob", ",", "inst_idx_to_position_map", ",", "\n", "decoder_length", "=", "decoder_length", ")", "\n", "\n", "return", "active_inst_idx_list", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collect_hypothesis_and_scores": [[479, 488], ["range", "len", "inst_dec_beams[].sort_scores", "inst_dec_beams[].get_hypothesis"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.sort_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.get_hypothesis"], ["", "def", "collect_hypothesis_and_scores", "(", "inst_dec_beams", ",", "n_best", ")", ":", "\n", "    ", "all_hyp", ",", "all_scores", "=", "[", "]", ",", "[", "]", "\n", "for", "inst_idx", "in", "range", "(", "len", "(", "inst_dec_beams", ")", ")", ":", "\n", "        ", "scores", ",", "tail_idxs", "=", "inst_dec_beams", "[", "inst_idx", "]", ".", "sort_scores", "(", ")", "\n", "all_scores", "+=", "[", "scores", "[", ":", "n_best", "]", "]", "\n", "\n", "hyps", "=", "[", "inst_dec_beams", "[", "inst_idx", "]", ".", "get_hypothesis", "(", "i", ")", "for", "i", "in", "tail_idxs", "[", ":", "n_best", "]", "]", "\n", "all_hyp", "+=", "[", "hyps", "]", "\n", "", "return", "all_hyp", ",", "all_scores", "\n", "# >----------------------------------------", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.eval_epoch": [[490, 619], ["hasattr", "model.module.to.eval", "os.path.join", "os.path.join", "nlgEvalObj.compute_metrics", "logger.info", "logger.info", "model.module.to.module.to", "tuple", "hasattr", "os.path.join", "logger.info", "open", "open", "range", "torch.no_grad", "model.module.to.get_sequence_visual_output", "sequence_output.size", "visual_output.size", "input_ids.view.view", "input_mask.view.view", "video_mask.view.view", "sequence_output.repeat().view", "visual_output.repeat().view", "input_ids.view.repeat().view", "input_mask.view.repeat().view", "video_mask.view.repeat().view", "list", "main_task_caption.get_inst_idx_to_tensor_position_map", "range", "main_task_caption.collect_hypothesis_and_scores", "pairs_output_caption_ids.view.view", "pairs_output_caption_ids.view.cpu().detach().numpy", "enumerate", "enumerate", "open", "writer.write", "enumerate", "writer.write", "writer.write", "len", "all_caption_lists.append", "list", "t.to", "modules.beam.Beam", "range", "main_task_caption.beam_decode_step", "main_task_caption.collate_active_info", "tokenizer.convert_ids_to_tokens", "decode_text.replace().strip().strip.replace().strip().strip", "all_result_lists.append", "tokenizer.convert_ids_to_tokens", "decode_text.replace().strip().strip.replace().strip().strip", "all_caption_lists.append", "writer.write", "zip", "sequence_output.repeat", "visual_output.repeat", "input_ids.view.repeat", "input_mask.view.repeat", "video_mask.view.repeat", "range", "range", "pairs_output_caption_ids.view.cpu().detach", "tokenizer.convert_ids_to_tokens.index", "tokenizer.convert_ids_to_tokens.index", "tokenizer.convert_ids_to_tokens.index", "tokenizer.convert_ids_to_tokens.index", "decode_text.replace().strip().strip.replace().strip", "decode_text.replace().strip().strip.replace().strip", "pairs_output_caption_ids.view.cpu", "decode_text.replace().strip().strip.replace", "decode_text.replace().strip().strip.replace"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.metrics.compute_metrics", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_sequence_visual_output", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.get_inst_idx_to_tensor_position_map", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collect_hypothesis_and_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.beam_decode_step", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.collate_active_info", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_ids_to_tokens"], ["", "def", "eval_epoch", "(", "args", ",", "model", ",", "test_dataloader", ",", "tokenizer", ",", "device", ",", "n_gpu", ",", "nlgEvalObj", "=", "None", ",", "test_set", "=", "None", ")", ":", "\n", "\n", "    ", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "model", ".", "_stage_one", ":", "\n", "        ", "return", "0.", "\n", "\n", "", "all_result_lists", "=", "[", "]", "\n", "all_caption_lists", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch", "in", "test_dataloader", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "for", "t", "in", "batch", ")", "\n", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", "=", "batch", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sequence_output", ",", "visual_output", "=", "model", ".", "get_sequence_visual_output", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "video", ",", "video_mask", ")", "\n", "# -- Repeat data for beam search", "\n", "n_bm", "=", "5", "# beam_size", "\n", "device", "=", "sequence_output", ".", "device", "\n", "n_inst", ",", "len_s", ",", "d_h", "=", "sequence_output", ".", "size", "(", ")", "\n", "_", ",", "len_v", ",", "v_h", "=", "visual_output", ".", "size", "(", ")", "\n", "\n", "decoder", "=", "model", ".", "decoder_caption", "\n", "\n", "# Note: shaped first, then decoder need the parameter shaped=True", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "input_mask", "=", "input_mask", ".", "view", "(", "-", "1", ",", "input_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "video_mask", "=", "video_mask", ".", "view", "(", "-", "1", ",", "video_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "sequence_output_rpt", "=", "sequence_output", ".", "repeat", "(", "1", ",", "n_bm", ",", "1", ")", ".", "view", "(", "n_inst", "*", "n_bm", ",", "len_s", ",", "d_h", ")", "\n", "visual_output_rpt", "=", "visual_output", ".", "repeat", "(", "1", ",", "n_bm", ",", "1", ")", ".", "view", "(", "n_inst", "*", "n_bm", ",", "len_v", ",", "v_h", ")", "\n", "input_ids_rpt", "=", "input_ids", ".", "repeat", "(", "1", ",", "n_bm", ")", ".", "view", "(", "n_inst", "*", "n_bm", ",", "len_s", ")", "\n", "input_mask_rpt", "=", "input_mask", ".", "repeat", "(", "1", ",", "n_bm", ")", ".", "view", "(", "n_inst", "*", "n_bm", ",", "len_s", ")", "\n", "video_mask_rpt", "=", "video_mask", ".", "repeat", "(", "1", ",", "n_bm", ")", ".", "view", "(", "n_inst", "*", "n_bm", ",", "len_v", ")", "\n", "\n", "# -- Prepare beams", "\n", "inst_dec_beams", "=", "[", "Beam", "(", "n_bm", ",", "device", "=", "device", ",", "tokenizer", "=", "tokenizer", ")", "for", "_", "in", "range", "(", "n_inst", ")", "]", "\n", "# -- Bookkeeping for active or not", "\n", "active_inst_idx_list", "=", "list", "(", "range", "(", "n_inst", ")", ")", "\n", "inst_idx_to_position_map", "=", "get_inst_idx_to_tensor_position_map", "(", "active_inst_idx_list", ")", "\n", "# -- Decode", "\n", "for", "len_dec_seq", "in", "range", "(", "1", ",", "args", ".", "max_words", "+", "1", ")", ":", "\n", "                ", "active_inst_idx_list", "=", "beam_decode_step", "(", "decoder", ",", "inst_dec_beams", ",", "\n", "len_dec_seq", ",", "inst_idx_to_position_map", ",", "n_bm", ",", "device", ",", "\n", "(", "sequence_output_rpt", ",", "visual_output_rpt", ",", "input_ids_rpt", ",", "input_mask_rpt", ",", "video_mask_rpt", ")", ")", "\n", "\n", "if", "not", "active_inst_idx_list", ":", "\n", "                    ", "break", "# all instances have finished their path to <EOS>", "\n", "\n", "", "(", "sequence_output_rpt", ",", "visual_output_rpt", ",", "input_ids_rpt", ",", "input_mask_rpt", ",", "video_mask_rpt", ")", ",", "inst_idx_to_position_map", "=", "collate_active_info", "(", "(", "sequence_output_rpt", ",", "visual_output_rpt", ",", "input_ids_rpt", ",", "input_mask_rpt", ",", "video_mask_rpt", ")", ",", "\n", "inst_idx_to_position_map", ",", "active_inst_idx_list", ",", "n_bm", ",", "device", ")", "\n", "\n", "", "batch_hyp", ",", "batch_scores", "=", "collect_hypothesis_and_scores", "(", "inst_dec_beams", ",", "1", ")", "\n", "result_list", "=", "[", "batch_hyp", "[", "i", "]", "[", "0", "]", "for", "i", "in", "range", "(", "n_inst", ")", "]", "\n", "\n", "pairs_output_caption_ids", "=", "pairs_output_caption_ids", ".", "view", "(", "-", "1", ",", "pairs_output_caption_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "caption_list", "=", "pairs_output_caption_ids", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "re_idx", ",", "re_list", "in", "enumerate", "(", "result_list", ")", ":", "\n", "                ", "decode_text_list", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "re_list", ")", "\n", "if", "\"[SEP]\"", "in", "decode_text_list", ":", "\n", "                    ", "SEP_index", "=", "decode_text_list", ".", "index", "(", "\"[SEP]\"", ")", "\n", "decode_text_list", "=", "decode_text_list", "[", ":", "SEP_index", "]", "\n", "", "if", "\"[PAD]\"", "in", "decode_text_list", ":", "\n", "                    ", "PAD_index", "=", "decode_text_list", ".", "index", "(", "\"[PAD]\"", ")", "\n", "decode_text_list", "=", "decode_text_list", "[", ":", "PAD_index", "]", "\n", "", "decode_text", "=", "' '", ".", "join", "(", "decode_text_list", ")", "\n", "decode_text", "=", "decode_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", ".", "strip", "(", "\"##\"", ")", ".", "strip", "(", ")", "\n", "all_result_lists", ".", "append", "(", "decode_text", ")", "\n", "\n", "", "for", "re_idx", ",", "re_list", "in", "enumerate", "(", "caption_list", ")", ":", "\n", "                ", "decode_text_list", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "re_list", ")", "\n", "if", "\"[SEP]\"", "in", "decode_text_list", ":", "\n", "                    ", "SEP_index", "=", "decode_text_list", ".", "index", "(", "\"[SEP]\"", ")", "\n", "decode_text_list", "=", "decode_text_list", "[", ":", "SEP_index", "]", "\n", "", "if", "\"[PAD]\"", "in", "decode_text_list", ":", "\n", "                    ", "PAD_index", "=", "decode_text_list", ".", "index", "(", "\"[PAD]\"", ")", "\n", "decode_text_list", "=", "decode_text_list", "[", ":", "PAD_index", "]", "\n", "", "decode_text", "=", "' '", ".", "join", "(", "decode_text_list", ")", "\n", "decode_text", "=", "decode_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", ".", "strip", "(", "\"##\"", ")", ".", "strip", "(", ")", "\n", "all_caption_lists", ".", "append", "(", "decode_text", ")", "\n", "\n", "# Save full results", "\n", "", "", "", "if", "test_set", "is", "not", "None", "and", "hasattr", "(", "test_set", ",", "'iter2video_pairs_dict'", ")", ":", "\n", "        ", "hyp_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"hyp_complete_results.txt\"", ")", "\n", "with", "open", "(", "hyp_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "\"{}\\t{}\\t{}\\n\"", ".", "format", "(", "\"video_id\"", ",", "\"start_time\"", ",", "\"caption\"", ")", ")", "\n", "for", "idx", ",", "pre_txt", "in", "enumerate", "(", "all_result_lists", ")", ":", "\n", "                ", "video_id", ",", "sub_id", "=", "test_set", ".", "iter2video_pairs_dict", "[", "idx", "]", "\n", "start_time", "=", "test_set", ".", "data_dict", "[", "video_id", "]", "[", "'start'", "]", "[", "sub_id", "]", "\n", "writer", ".", "write", "(", "\"{}\\t{}\\t{}\\n\"", ".", "format", "(", "video_id", ",", "start_time", ",", "pre_txt", ")", ")", "\n", "", "", "logger", ".", "info", "(", "\"File of complete results is saved in {}\"", ".", "format", "(", "hyp_path", ")", ")", "\n", "\n", "# Save pure results", "\n", "", "hyp_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"hyp.txt\"", ")", "\n", "with", "open", "(", "hyp_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "        ", "for", "pre_txt", "in", "all_result_lists", ":", "\n", "            ", "writer", ".", "write", "(", "pre_txt", "+", "\"\\n\"", ")", "\n", "\n", "", "", "ref_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"ref.txt\"", ")", "\n", "with", "open", "(", "ref_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "        ", "for", "ground_txt", "in", "all_caption_lists", ":", "\n", "            ", "writer", ".", "write", "(", "ground_txt", "+", "\"\\n\"", ")", "\n", "\n", "", "", "if", "args", ".", "datatype", "==", "\"msrvtt\"", ":", "\n", "        ", "all_caption_lists", "=", "[", "]", "\n", "sentences_dict", "=", "test_dataloader", ".", "dataset", ".", "sentences_dict", "\n", "video_sentences_dict", "=", "test_dataloader", ".", "dataset", ".", "video_sentences_dict", "\n", "for", "idx", "in", "range", "(", "len", "(", "sentences_dict", ")", ")", ":", "\n", "            ", "video_id", ",", "_", "=", "sentences_dict", "[", "idx", "]", "\n", "sentences", "=", "video_sentences_dict", "[", "video_id", "]", "\n", "all_caption_lists", ".", "append", "(", "sentences", ")", "\n", "", "all_caption_lists", "=", "[", "list", "(", "itms", ")", "for", "itms", "in", "zip", "(", "*", "all_caption_lists", ")", "]", "\n", "", "else", ":", "\n", "        ", "all_caption_lists", "=", "[", "all_caption_lists", "]", "\n", "\n", "# Evaluate", "\n", "", "metrics_nlg", "=", "nlgEvalObj", ".", "compute_metrics", "(", "ref_list", "=", "all_caption_lists", ",", "hyp_list", "=", "all_result_lists", ")", "\n", "logger", ".", "info", "(", "\">>>  BLEU_1: {:.4f}, BLEU_2: {:.4f}, BLEU_3: {:.4f}, BLEU_4: {:.4f}\"", ".", "\n", "format", "(", "metrics_nlg", "[", "\"Bleu_1\"", "]", ",", "metrics_nlg", "[", "\"Bleu_2\"", "]", ",", "metrics_nlg", "[", "\"Bleu_3\"", "]", ",", "metrics_nlg", "[", "\"Bleu_4\"", "]", ")", ")", "\n", "logger", ".", "info", "(", "\">>>  METEOR: {:.4f}, ROUGE_L: {:.4f}, CIDEr: {:.4f}\"", ".", "format", "(", "metrics_nlg", "[", "\"METEOR\"", "]", ",", "metrics_nlg", "[", "\"ROUGE_L\"", "]", ",", "metrics_nlg", "[", "\"CIDEr\"", "]", ")", ")", "\n", "\n", "Bleu_4", "=", "metrics_nlg", "[", "\"Bleu_4\"", "]", "\n", "return", "Bleu_4", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.main": [[624, 687], ["main_task_caption.get_args", "main_task_caption.set_seed_logger", "main_task_caption.init_device", "modules.tokenization.BertTokenizer.from_pretrained", "main_task_caption.init_model", "nlgeval.NLGEval", "logger.info", "logger.info", "logger.info", "logger.info", "main_task_caption.prep_optimizer", "range", "len", "logger.info", "logger.info", "logger.info", "logger.info", "train_sampler.set_epoch", "main_task_caption.train_epoch", "main_task_caption.load_model", "main_task_caption.eval_epoch", "int", "logger.info", "main_task_caption.save_model", "main_task_caption.eval_epoch", "main_task_caption.eval_epoch", "logger.info", "logger.warning", "len"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.get_args", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.set_seed_logger", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.init_device", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.init_model", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.prep_optimizer", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.train_epoch", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.load_model", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.eval_epoch", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.save_model", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.eval_epoch", "home.repos.pwc.inspect_result.microsoft_UniVL.None.main_task_caption.eval_epoch"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "logger", "\n", "args", "=", "get_args", "(", ")", "\n", "args", "=", "set_seed_logger", "(", "args", ")", "\n", "device", ",", "n_gpu", "=", "init_device", "(", "args", ",", "args", ".", "local_rank", ")", "\n", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "do_lower_case", "=", "args", ".", "do_lower_case", ")", "\n", "model", "=", "init_model", "(", "args", ",", "device", ",", "n_gpu", ",", "args", ".", "local_rank", ")", "\n", "\n", "assert", "args", ".", "task_type", "==", "\"caption\"", "\n", "nlgEvalObj", "=", "NLGEval", "(", "no_overlap", "=", "False", ",", "no_skipthoughts", "=", "True", ",", "no_glove", "=", "True", ",", "metrics_to_omit", "=", "None", ")", "\n", "\n", "assert", "args", ".", "datatype", "in", "DATALOADER_DICT", "\n", "test_dataloader", ",", "test_length", "=", "DATALOADER_DICT", "[", "args", ".", "datatype", "]", "[", "\"val\"", "]", "(", "args", ",", "tokenizer", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"***** Running test *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "test_length", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "batch_size_val", ")", "\n", "logger", ".", "info", "(", "\"  Num steps = %d\"", ",", "len", "(", "test_dataloader", ")", ")", "\n", "\n", "", "if", "args", ".", "do_train", ":", "\n", "        ", "train_dataloader", ",", "train_length", ",", "train_sampler", "=", "DATALOADER_DICT", "[", "args", ".", "datatype", "]", "[", "\"train\"", "]", "(", "args", ",", "tokenizer", ")", "\n", "num_train_optimization_steps", "=", "(", "int", "(", "len", "(", "train_dataloader", ")", "+", "args", ".", "gradient_accumulation_steps", "-", "1", ")", "\n", "/", "args", ".", "gradient_accumulation_steps", ")", "*", "args", ".", "epochs", "\n", "\n", "coef_lr", "=", "args", ".", "coef_lr", "\n", "if", "args", ".", "init_model", ":", "\n", "            ", "coef_lr", "=", "1.0", "\n", "", "optimizer", ",", "scheduler", ",", "model", "=", "prep_optimizer", "(", "args", ",", "model", ",", "num_train_optimization_steps", ",", "device", ",", "n_gpu", ",", "args", ".", "local_rank", ",", "coef_lr", "=", "coef_lr", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "train_length", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "batch_size", ")", "\n", "logger", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_optimization_steps", "*", "args", ".", "gradient_accumulation_steps", ")", "\n", "\n", "", "best_score", "=", "0.00001", "\n", "best_output_model_file", "=", "None", "\n", "global_step", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "tr_loss", ",", "global_step", "=", "train_epoch", "(", "epoch", ",", "args", ",", "model", ",", "train_dataloader", ",", "tokenizer", ",", "device", ",", "n_gpu", ",", "optimizer", ",", "\n", "scheduler", ",", "global_step", ",", "nlgEvalObj", "=", "nlgEvalObj", ",", "local_rank", "=", "args", ".", "local_rank", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Epoch %d/%s Finished, Train Loss: %f\"", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "tr_loss", ")", "\n", "output_model_file", "=", "save_model", "(", "epoch", ",", "args", ",", "model", ",", "type_name", "=", "\"\"", ")", "\n", "if", "epoch", ">", "0", ":", "\n", "                    ", "Bleu_4", "=", "eval_epoch", "(", "args", ",", "model", ",", "test_dataloader", ",", "tokenizer", ",", "device", ",", "n_gpu", ",", "nlgEvalObj", "=", "nlgEvalObj", ")", "\n", "if", "best_score", "<=", "Bleu_4", ":", "\n", "                        ", "best_score", "=", "Bleu_4", "\n", "best_output_model_file", "=", "output_model_file", "\n", "", "logger", ".", "info", "(", "\"The best model is: {}, the Bleu_4 is: {:.4f}\"", ".", "format", "(", "best_output_model_file", ",", "best_score", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Skip the evaluation after {}-th epoch.\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "", "", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "model", "=", "load_model", "(", "-", "1", ",", "args", ",", "n_gpu", ",", "device", ",", "model_file", "=", "best_output_model_file", ")", "\n", "eval_epoch", "(", "args", ",", "model", ",", "test_dataloader", ",", "tokenizer", ",", "device", ",", "n_gpu", ",", "nlgEvalObj", "=", "nlgEvalObj", ")", "\n", "", "", "elif", "args", ".", "do_eval", ":", "\n", "        ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "eval_epoch", "(", "args", ",", "model", ",", "test_dataloader", ",", "tokenizer", ",", "device", ",", "n_gpu", ",", "nlgEvalObj", "=", "nlgEvalObj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertConfig.__init__": [[61, 116], ["isinstance", "json.loads.items", "isinstance", "open", "json.loads", "ValueError", "reader.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ")", ":", "\n", "        ", "\"\"\"Constructs BertConfig.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `BertModel`.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler. If string, \"gelu\", \"relu\" and \"swish\" are supported.\n            hidden_dropout_prob: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n                `BertModel`.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertEmbeddings.__init__": [[121, 131], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "until_module.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertEmbeddings.forward": [[132, 147], ["input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "module_bert.BertEmbeddings.word_embeddings", "module_bert.BertEmbeddings.position_embeddings", "module_bert.BertEmbeddings.token_type_embeddings", "module_bert.BertEmbeddings.LayerNorm", "module_bert.BertEmbeddings.dropout", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertSelfAttention.__init__": [[150, 165], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertSelfAttention.transpose_for_scores": [[166, 170], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertSelfAttention.forward": [[171, 198], ["module_bert.BertSelfAttention.query", "module_bert.BertSelfAttention.key", "module_bert.BertSelfAttention.value", "module_bert.BertSelfAttention.transpose_for_scores", "module_bert.BertSelfAttention.transpose_for_scores", "module_bert.BertSelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "module_bert.BertSelfAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "module_bert.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertSelfOutput.__init__": [[201, 206], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "until_module.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertSelfOutput.forward": [[207, 212], ["module_bert.BertSelfOutput.dense", "module_bert.BertSelfOutput.dropout", "module_bert.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertAttention.__init__": [[215, 219], ["torch.nn.Module.__init__", "module_bert.BertSelfAttention", "module_bert.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertAttention.forward": [[220, 224], ["module_bert.BertAttention.self", "module_bert.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", ",", "input_tensor", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertIntermediate.__init__": [[227, 232], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "isinstance"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertIntermediate.forward": [[233, 237], ["module_bert.BertIntermediate.dense", "module_bert.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertOutput.__init__": [[240, 245], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "until_module.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertOutput.forward": [[246, 251], ["module_bert.BertOutput.dense", "module_bert.BertOutput.dropout", "module_bert.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertLayer.__init__": [[254, 259], ["torch.nn.Module.__init__", "module_bert.BertAttention", "module_bert.BertIntermediate", "module_bert.BertOutput"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertLayer.forward": [[260, 265], ["module_bert.BertLayer.attention", "module_bert.BertLayer.intermediate", "module_bert.BertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertEncoder.__init__": [[268, 272], ["torch.nn.Module.__init__", "module_bert.BertLayer", "torch.nn.ModuleList", "torch.nn.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "BertLayer", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertEncoder.forward": [[273, 282], ["layer_module", "all_encoder_layers.append", "all_encoder_layers.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertPooler.__init__": [[285, 289], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertPooler.forward": [[290, 297], ["module_bert.BertPooler.dense", "module_bert.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertPredictionHeadTransform.__init__": [[300, 306], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "until_module.LayerNorm", "isinstance"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertPredictionHeadTransform.forward": [[307, 312], ["module_bert.BertPredictionHeadTransform.dense", "module_bert.BertPredictionHeadTransform.transform_act_fn", "module_bert.BertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertLMPredictionHead.__init__": [[315, 326], ["torch.nn.Module.__init__", "module_bert.BertPredictionHeadTransform", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "bert_model_embedding_weights.size", "bert_model_embedding_weights.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "bert_model_embedding_weights.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "BertPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "bert_model_embedding_weights", ".", "size", "(", "1", ")", ",", "\n", "bert_model_embedding_weights", ".", "size", "(", "0", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "bert_model_embedding_weights", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "bert_model_embedding_weights", ".", "size", "(", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertLMPredictionHead.forward": [[327, 331], ["module_bert.BertLMPredictionHead.transform", "module_bert.BertLMPredictionHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertOnlyMLMHead.__init__": [[334, 337], ["torch.nn.Module.__init__", "module_bert.BertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ",", "bert_model_embedding_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertOnlyMLMHead.forward": [[338, 341], ["module_bert.BertOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertOnlyNSPHead.__init__": [[344, 347], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyNSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertOnlyNSPHead.forward": [[348, 351], ["module_bert.BertOnlyNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertPreTrainingHeads.__init__": [[354, 358], ["torch.nn.Module.__init__", "module_bert.BertLMPredictionHead", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertPreTrainingHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ",", "bert_model_embedding_weights", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertPreTrainingHeads.forward": [[359, 363], ["module_bert.BertPreTrainingHeads.predictions", "module_bert.BertPreTrainingHeads.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ",", "pooled_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertModel.__init__": [[409, 415], ["until_module.PreTrainedModel.__init__", "module_bert.BertEmbeddings", "module_bert.BertEncoder", "module_bert.BertPooler", "module_bert.BertModel.apply"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_bert.BertModel.forward": [[417, 448], ["torch.ones_like.unsqueeze().unsqueeze", "torch.ones_like.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "module_bert.BertModel.embeddings", "module_bert.BertModel.encoder", "module_bert.BertModel.pooler", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like.unsqueeze", "torch.ones_like.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "\n", "        ", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones_like", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "token_type_ids", ")", "\n", "encoded_layers", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "extended_attention_mask", ",", "\n", "output_all_encoded_layers", "=", "output_all_encoded_layers", ")", "\n", "sequence_output", "=", "encoded_layers", "[", "-", "1", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "encoded_layers", "=", "encoded_layers", "[", "-", "1", "]", "\n", "", "return", "encoded_layers", ",", "pooled_output", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualConfig.__init__": [[51, 102], ["isinstance", "json.loads.items", "isinstance", "open", "json.loads", "ValueError", "reader.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "4096", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "3", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "initializer_range", "=", "0.02", ")", ":", "\n", "        ", "\"\"\"Constructs VisualConfig.\n\n        Args:\n            vocab_size_or_config_json_file: Size of the encoder layers and the pooler layer.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler. If string, \"gelu\", \"relu\" and \"swish\" are supported.\n            hidden_dropout_prob: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualEmbeddings.__init__": [[107, 117], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Embedding", "torch.nn.Embedding", "until_module.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Linear", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualEmbeddings.forward": [[118, 132], ["input_embeddings.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "module_visual.VisualEmbeddings.word_embeddings", "module_visual.VisualEmbeddings.position_embeddings", "module_visual.VisualEmbeddings.LayerNorm", "module_visual.VisualEmbeddings.dropout", "input_embeddings.size", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_embeddings", ")", ":", "\n", "        ", "seq_length", "=", "input_embeddings", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_embeddings", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_embeddings", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_embeddings", ")", "\n", "# words_embeddings = self.transform_act_fn(words_embeddings)", "\n", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "\n", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualSelfAttention.__init__": [[134, 149], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualSelfAttention.transpose_for_scores": [[150, 154], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualSelfAttention.forward": [[155, 182], ["module_visual.VisualSelfAttention.query", "module_visual.VisualSelfAttention.key", "module_visual.VisualSelfAttention.value", "module_visual.VisualSelfAttention.transpose_for_scores", "module_visual.VisualSelfAttention.transpose_for_scores", "module_visual.VisualSelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "module_visual.VisualSelfAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "module_visual.VisualSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in VisualModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualSelfOutput.__init__": [[185, 190], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "until_module.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualSelfOutput.forward": [[191, 196], ["module_visual.VisualSelfOutput.dense", "module_visual.VisualSelfOutput.dropout", "module_visual.VisualSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualAttention.__init__": [[199, 203], ["torch.nn.Module.__init__", "module_visual.VisualSelfAttention", "module_visual.VisualSelfOutput"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "VisualSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "VisualSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualAttention.forward": [[204, 208], ["module_visual.VisualAttention.self", "module_visual.VisualAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", ",", "input_tensor", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualIntermediate.__init__": [[211, 216], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "isinstance"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualIntermediate.forward": [[217, 221], ["module_visual.VisualIntermediate.dense", "module_visual.VisualIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualOutput.__init__": [[224, 229], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "until_module.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualOutput.forward": [[230, 235], ["module_visual.VisualOutput.dense", "module_visual.VisualOutput.dropout", "module_visual.VisualOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualLayer.__init__": [[238, 243], ["torch.nn.Module.__init__", "module_visual.VisualAttention", "module_visual.VisualIntermediate", "module_visual.VisualOutput"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "VisualAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "VisualIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "VisualOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualLayer.forward": [[244, 249], ["module_visual.VisualLayer.attention", "module_visual.VisualLayer.intermediate", "module_visual.VisualLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualEncoder.__init__": [[252, 256], ["torch.nn.Module.__init__", "module_visual.VisualLayer", "torch.nn.ModuleList", "torch.nn.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "VisualLayer", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualEncoder.forward": [[257, 266], ["layer_module", "all_encoder_layers.append", "all_encoder_layers.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualPooler.__init__": [[269, 273], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualPooler.forward": [[274, 281], ["module_visual.VisualPooler.dense", "module_visual.VisualPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualPredictionHeadTransform.__init__": [[284, 290], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "until_module.LayerNorm", "isinstance"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualPredictionHeadTransform.forward": [[291, 296], ["module_visual.VisualPredictionHeadTransform.dense", "module_visual.VisualPredictionHeadTransform.transform_act_fn", "module_visual.VisualPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualLMPredictionHead.__init__": [[299, 307], ["torch.nn.Module.__init__", "module_visual.VisualPredictionHeadTransform", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "visual_model_embedding_weights.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "visual_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "VisualLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "VisualPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "weight", "=", "visual_model_embedding_weights", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "visual_model_embedding_weights", ".", "size", "(", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualLMPredictionHead.forward": [[308, 312], ["module_visual.VisualLMPredictionHead.transform", "module_visual.VisualLMPredictionHead.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "hidden_states", ".", "matmul", "(", "self", ".", "weight", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualOnlyMLMHead.__init__": [[315, 318], ["torch.nn.Module.__init__", "module_visual.VisualLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "visual_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "VisualOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "VisualLMPredictionHead", "(", "config", ",", "visual_model_embedding_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualOnlyMLMHead.forward": [[319, 322], ["module_visual.VisualOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualOnlyNSPHead.__init__": [[325, 328], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualOnlyNSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualOnlyNSPHead.forward": [[329, 332], ["module_visual.VisualOnlyNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualPreTrainingHeads.__init__": [[335, 339], ["torch.nn.Module.__init__", "module_visual.VisualLMPredictionHead", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "visual_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "VisualPreTrainingHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "VisualLMPredictionHead", "(", "config", ",", "visual_model_embedding_weights", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualPreTrainingHeads.forward": [[340, 344], ["module_visual.VisualPreTrainingHeads.predictions", "module_visual.VisualPreTrainingHeads.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ",", "pooled_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualModel.__init__": [[390, 396], ["until_module.PreTrainedModel.__init__", "module_visual.VisualEmbeddings", "module_visual.VisualEncoder", "module_visual.VisualPooler", "module_visual.VisualModel.apply"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VisualModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "embeddings", "=", "VisualEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "VisualEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "VisualPooler", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_visual.VisualModel.forward": [[397, 426], ["torch.ones.unsqueeze().unsqueeze", "torch.ones.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "module_visual.VisualModel.embeddings", "module_visual.VisualModel.encoder", "module_visual.VisualModel.pooler", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "video.size", "video.size", "torch.ones.unsqueeze", "torch.ones.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "video", ",", "attention_mask", "=", "None", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "\n", "        ", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "video", ".", "size", "(", "0", ")", ",", "video", ".", "size", "(", "1", ")", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "embedding_output", "=", "self", ".", "embeddings", "(", "video", ")", "\n", "encoded_layers", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "extended_attention_mask", ",", "\n", "output_all_encoded_layers", "=", "output_all_encoded_layers", ")", "\n", "sequence_output", "=", "encoded_layers", "[", "-", "1", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "encoded_layers", "=", "encoded_layers", "[", "-", "1", "]", "\n", "", "return", "encoded_layers", ",", "pooled_output", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVLPreTrainedModel.__init__": [[43, 55], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "bert_config", ",", "visual_config", ",", "cross_config", ",", "decoder_config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "# utilize bert config as base config", "\n", "        ", "super", "(", "UniVLPreTrainedModel", ",", "self", ")", ".", "__init__", "(", "bert_config", ")", "\n", "self", ".", "bert_config", "=", "bert_config", "\n", "self", ".", "visual_config", "=", "visual_config", "\n", "self", ".", "cross_config", "=", "cross_config", "\n", "self", ".", "decoder_config", "=", "decoder_config", "\n", "\n", "self", ".", "bert", "=", "None", "\n", "self", ".", "visual", "=", "None", "\n", "self", ".", "cross", "=", "None", "\n", "self", ".", "decoder", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVLPreTrainedModel.from_pretrained": [[56, 82], ["modules.module_bert.BertConfig.get_config", "modules.module_visual.VisualConfig.get_config", "modules.module_cross.CrossConfig.get_config", "modules.module_decoder.DecoderConfig.get_config", "cls", "kwargs.keys", "cls.init_preweight", "hasattr"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.get_config", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.get_config", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.get_config", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.get_config", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.PreTrainedModel.init_preweight"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_bert_name", ",", "visual_model_name", ",", "cross_model_name", ",", "decoder_model_name", ",", "\n", "state_dict", "=", "None", ",", "cache_dir", "=", "None", ",", "type_vocab_size", "=", "2", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "task_config", "=", "None", "\n", "if", "\"task_config\"", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "task_config", "=", "kwargs", "[", "\"task_config\"", "]", "\n", "if", "not", "hasattr", "(", "task_config", ",", "\"local_rank\"", ")", ":", "\n", "                ", "task_config", ".", "__dict__", "[", "\"local_rank\"", "]", "=", "0", "\n", "", "elif", "task_config", ".", "local_rank", "==", "-", "1", ":", "\n", "                ", "task_config", ".", "local_rank", "=", "0", "\n", "\n", "", "", "bert_config", ",", "state_dict", "=", "BertConfig", ".", "get_config", "(", "pretrained_bert_name", ",", "cache_dir", ",", "type_vocab_size", ",", "state_dict", ",", "task_config", "=", "task_config", ")", "\n", "visual_config", ",", "_", "=", "VisualConfig", ".", "get_config", "(", "visual_model_name", ",", "cache_dir", ",", "type_vocab_size", ",", "state_dict", "=", "None", ",", "task_config", "=", "task_config", ")", "\n", "cross_config", ",", "_", "=", "CrossConfig", ".", "get_config", "(", "cross_model_name", ",", "cache_dir", ",", "type_vocab_size", ",", "state_dict", "=", "None", ",", "task_config", "=", "task_config", ")", "\n", "decoder_config", ",", "_", "=", "DecoderConfig", ".", "get_config", "(", "decoder_model_name", ",", "cache_dir", ",", "type_vocab_size", ",", "state_dict", "=", "None", ",", "task_config", "=", "task_config", ")", "\n", "\n", "model", "=", "cls", "(", "bert_config", ",", "visual_config", ",", "cross_config", ",", "decoder_config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "assert", "model", ".", "bert", "is", "not", "None", "\n", "assert", "model", ".", "visual", "is", "not", "None", "\n", "\n", "if", "state_dict", "is", "not", "None", ":", "\n", "            ", "model", "=", "cls", ".", "init_preweight", "(", "model", ",", "state_dict", ",", "task_config", "=", "task_config", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.NormalizeVideo.__init__": [[84, 87], ["torch.nn.Module.__init__", "modules.until_module.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_config", ")", ":", "\n", "        ", "super", "(", "NormalizeVideo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "visual_norm2d", "=", "LayerNorm", "(", "task_config", ".", "video_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.NormalizeVideo.forward": [[88, 93], ["torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "torch.as_tensor().float", "modeling.NormalizeVideo.view", "modeling.NormalizeVideo.visual_norm2d", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "video", ")", ":", "\n", "        ", "video", "=", "torch", ".", "as_tensor", "(", "video", ")", ".", "float", "(", ")", "\n", "video", "=", "video", ".", "view", "(", "-", "1", ",", "video", ".", "shape", "[", "-", "2", "]", ",", "video", ".", "shape", "[", "-", "1", "]", ")", "\n", "video", "=", "self", ".", "visual_norm2d", "(", "video", ")", "\n", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.__init__": [[110, 187], ["modeling.UniVLPreTrainedModel.__init__", "modeling.check_attr", "modeling.show_log", "modeling.update_attr", "modules.module_bert.BertModel", "modeling.update_attr", "modules.module_visual.VisualModel", "modeling.NormalizeVideo", "modules.until_module.MILNCELoss", "modules.until_module.MaxMarginRankingLoss", "modeling.UniVL.apply", "modeling.check_attr", "modeling.show_log", "modeling.update_attr", "modules.module_cross.CrossModel", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "modeling.update_attr", "modules.module_decoder.DecoderModel", "modules.module_bert.BertOnlyMLMHead", "modules.module_visual.VisualOnlyMLMHead", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "modules.until_module.CrossEn", "modules.until_module.CrossEn"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.check_attr", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.show_log", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.update_attr", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.update_attr", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.check_attr", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.show_log", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.update_attr", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.update_attr"], ["    ", "def", "__init__", "(", "self", ",", "bert_config", ",", "visual_config", ",", "cross_config", ",", "decoder_config", ",", "task_config", ")", ":", "\n", "        ", "super", "(", "UniVL", ",", "self", ")", ".", "__init__", "(", "bert_config", ",", "visual_config", ",", "cross_config", ",", "decoder_config", ")", "\n", "self", ".", "task_config", "=", "task_config", "\n", "self", ".", "ignore_video_index", "=", "-", "1", "\n", "\n", "assert", "self", ".", "task_config", ".", "max_words", "<=", "bert_config", ".", "max_position_embeddings", "\n", "assert", "self", ".", "task_config", ".", "max_words", "<=", "decoder_config", ".", "max_target_embeddings", "\n", "assert", "self", ".", "task_config", ".", "max_frames", "<=", "visual_config", ".", "max_position_embeddings", "\n", "assert", "self", ".", "task_config", ".", "max_words", "+", "self", ".", "task_config", ".", "max_frames", "<=", "cross_config", ".", "max_position_embeddings", "\n", "\n", "self", ".", "_stage_one", "=", "True", "\n", "self", ".", "_stage_two", "=", "False", "\n", "\n", "if", "check_attr", "(", "'stage_two'", ",", "self", ".", "task_config", ")", ":", "\n", "            ", "self", ".", "_stage_one", "=", "False", "\n", "self", ".", "_stage_two", "=", "self", ".", "task_config", ".", "stage_two", "\n", "", "show_log", "(", "task_config", ",", "\"Stage-One:{}, Stage-Two:{}\"", ".", "format", "(", "self", ".", "_stage_one", ",", "self", ".", "_stage_two", ")", ")", "\n", "\n", "self", ".", "train_sim_after_cross", "=", "False", "\n", "if", "self", ".", "_stage_one", "and", "check_attr", "(", "'train_sim_after_cross'", ",", "self", ".", "task_config", ")", ":", "\n", "            ", "self", ".", "train_sim_after_cross", "=", "True", "\n", "show_log", "(", "task_config", ",", "\"Test retrieval after cross encoder.\"", ")", "\n", "\n", "# Text Encoder ===>", "\n", "", "bert_config", "=", "update_attr", "(", "\"bert_config\"", ",", "bert_config", ",", "\"num_hidden_layers\"", ",", "\n", "self", ".", "task_config", ",", "\"text_num_hidden_layers\"", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "bert_config", ")", "\n", "bert_word_embeddings_weight", "=", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ".", "weight", "\n", "bert_position_embeddings_weight", "=", "self", ".", "bert", ".", "embeddings", ".", "position_embeddings", ".", "weight", "\n", "# <=== End of Text Encoder", "\n", "\n", "# Video Encoder ===>", "\n", "visual_config", "=", "update_attr", "(", "\"visual_config\"", ",", "visual_config", ",", "\"num_hidden_layers\"", ",", "\n", "self", ".", "task_config", ",", "\"visual_num_hidden_layers\"", ")", "\n", "self", ".", "visual", "=", "VisualModel", "(", "visual_config", ")", "\n", "visual_word_embeddings_weight", "=", "self", ".", "visual", ".", "embeddings", ".", "word_embeddings", ".", "weight", "\n", "# <=== End of Video Encoder", "\n", "\n", "if", "self", ".", "_stage_one", "is", "False", "or", "self", ".", "train_sim_after_cross", ":", "\n", "# Cross Encoder ===>", "\n", "            ", "cross_config", "=", "update_attr", "(", "\"cross_config\"", ",", "cross_config", ",", "\"num_hidden_layers\"", ",", "\n", "self", ".", "task_config", ",", "\"cross_num_hidden_layers\"", ")", "\n", "self", ".", "cross", "=", "CrossModel", "(", "cross_config", ")", "\n", "# <=== End of Cross Encoder", "\n", "\n", "if", "self", ".", "train_sim_after_cross", "is", "False", ":", "\n", "# Decoder ===>", "\n", "                ", "decoder_config", "=", "update_attr", "(", "\"decoder_config\"", ",", "decoder_config", ",", "\"num_decoder_layers\"", ",", "\n", "self", ".", "task_config", ",", "\"decoder_num_hidden_layers\"", ")", "\n", "self", ".", "decoder", "=", "DecoderModel", "(", "decoder_config", ",", "bert_word_embeddings_weight", ",", "bert_position_embeddings_weight", ")", "\n", "# <=== End of Decoder", "\n", "\n", "", "if", "self", ".", "task_config", ".", "do_pretrain", ":", "\n", "                ", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "bert_config", ",", "bert_word_embeddings_weight", ")", "\n", "self", ".", "cls_visual", "=", "VisualOnlyMLMHead", "(", "visual_config", ",", "visual_word_embeddings_weight", ")", "\n", "self", ".", "alm_loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "\n", "", "self", ".", "similarity_dense", "=", "nn", ".", "Linear", "(", "bert_config", ".", "hidden_size", ",", "1", ")", "\n", "self", ".", "decoder_loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "\n", "", "self", ".", "normalize_video", "=", "NormalizeVideo", "(", "task_config", ")", "\n", "\n", "mILNCELoss", "=", "MILNCELoss", "(", "batch_size", "=", "task_config", ".", "batch_size", "//", "task_config", ".", "n_gpu", ",", "n_pair", "=", "task_config", ".", "n_pair", ",", ")", "\n", "maxMarginRankingLoss", "=", "MaxMarginRankingLoss", "(", "margin", "=", "task_config", ".", "margin", ",", "\n", "negative_weighting", "=", "task_config", ".", "negative_weighting", ",", "\n", "batch_size", "=", "task_config", ".", "batch_size", "//", "task_config", ".", "n_gpu", ",", "\n", "n_pair", "=", "task_config", ".", "n_pair", ",", "\n", "hard_negative_rate", "=", "task_config", ".", "hard_negative_rate", ",", ")", "\n", "\n", "if", "task_config", ".", "use_mil", ":", "\n", "            ", "self", ".", "loss_fct", "=", "CrossEn", "(", ")", "if", "self", ".", "_stage_two", "else", "mILNCELoss", "\n", "self", ".", "_pretrain_sim_loss_fct", "=", "mILNCELoss", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_fct", "=", "CrossEn", "(", ")", "if", "self", ".", "_stage_two", "else", "maxMarginRankingLoss", "\n", "self", ".", "_pretrain_sim_loss_fct", "=", "maxMarginRankingLoss", "\n", "\n", "", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.forward": [[188, 272], ["input_ids.view.view.view", "token_type_ids.view.view.view", "attention_mask.view.view.view", "video_mask.view.view.view", "modeling.UniVL.normalize_video", "modeling.UniVL.get_sequence_visual_output", "input_caption_ids.view.view.view", "decoder_mask.view.view.view", "modeling.UniVL.get_similarity_logits", "modeling.UniVL.loss_fct", "pairs_masked_text.view.view.view", "pairs_token_labels.view.view.view", "modeling.UniVL.normalize_video", "video_labels_index.view.view.view", "modeling.UniVL.get_sequence_visual_output", "modeling.UniVL._get_cross_output", "torch.split", "torch.split", "torch.split", "torch.split", "modeling.UniVL._calculate_mlm_loss", "modeling.UniVL._calculate_mfm_loss", "modeling.UniVL.get_similarity_logits", "modeling.UniVL._pretrain_sim_loss_fct", "output_caption_ids.view.view.view", "modeling.UniVL.decoder_loss_fct", "modeling.UniVL.loss_fct", "modeling.UniVL._get_decoder_score", "decoder_scores.view", "output_caption_ids.view.view.view", "modeling.UniVL.get_similarity_logits", "attention_mask.view.view.size", "video_mask.view.view.size", "modeling.UniVL._get_decoder_score", "modeling.UniVL.get_similarity_logits"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_sequence_visual_output", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_similarity_logits", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_sequence_visual_output", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._get_cross_output", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._calculate_mlm_loss", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._calculate_mfm_loss", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_similarity_logits", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._get_decoder_score", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_similarity_logits", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._get_decoder_score", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_similarity_logits"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "video", ",", "video_mask", "=", "None", ",", "\n", "pairs_masked_text", "=", "None", ",", "pairs_token_labels", "=", "None", ",", "masked_video", "=", "None", ",", "video_labels_index", "=", "None", ",", "\n", "input_caption_ids", "=", "None", ",", "decoder_mask", "=", "None", ",", "output_caption_ids", "=", "None", ")", ":", "\n", "\n", "        ", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "video_mask", "=", "video_mask", ".", "view", "(", "-", "1", ",", "video_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "video", "=", "self", ".", "normalize_video", "(", "video", ")", "\n", "\n", "if", "input_caption_ids", "is", "not", "None", ":", "\n", "            ", "input_caption_ids", "=", "input_caption_ids", ".", "view", "(", "-", "1", ",", "input_caption_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "decoder_mask", "=", "decoder_mask", ".", "view", "(", "-", "1", ",", "decoder_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "sequence_output", ",", "visual_output", "=", "self", ".", "get_sequence_visual_output", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "\n", "video", ",", "video_mask", ",", "shaped", "=", "True", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss", "=", "0.", "\n", "if", "self", ".", "_stage_one", ":", "\n", "                ", "sim_matrix", "=", "self", ".", "get_similarity_logits", "(", "sequence_output", ",", "visual_output", ",", "attention_mask", ",", "\n", "video_mask", ",", "shaped", "=", "True", ")", "\n", "sim_loss", "=", "self", ".", "loss_fct", "(", "sim_matrix", ")", "\n", "loss", "+=", "sim_loss", "\n", "\n", "", "if", "self", ".", "_stage_two", ":", "\n", "                ", "if", "self", ".", "task_config", ".", "do_pretrain", ":", "\n", "                    ", "pairs_masked_text", "=", "pairs_masked_text", ".", "view", "(", "-", "1", ",", "pairs_masked_text", ".", "shape", "[", "-", "1", "]", ")", "\n", "pairs_token_labels", "=", "pairs_token_labels", ".", "view", "(", "-", "1", ",", "pairs_token_labels", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "masked_video", "=", "self", ".", "normalize_video", "(", "masked_video", ")", "\n", "video_labels_index", "=", "video_labels_index", ".", "view", "(", "-", "1", ",", "video_labels_index", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "sequence_output_alm", ",", "visual_output_alm", "=", "self", ".", "get_sequence_visual_output", "(", "pairs_masked_text", ",", "token_type_ids", ",", "\n", "attention_mask", ",", "masked_video", ",", "video_mask", ",", "shaped", "=", "True", ")", "\n", "\n", "cross_output", ",", "pooled_output", ",", "concat_mask", "=", "self", ".", "_get_cross_output", "(", "sequence_output_alm", ",", "visual_output_alm", ",", "attention_mask", ",", "video_mask", ")", "\n", "sequence_cross_output", ",", "visual_cross_output", "=", "torch", ".", "split", "(", "cross_output", ",", "[", "attention_mask", ".", "size", "(", "-", "1", ")", ",", "video_mask", ".", "size", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "alm_loss", "=", "self", ".", "_calculate_mlm_loss", "(", "sequence_cross_output", ",", "pairs_token_labels", ")", "\n", "loss", "+=", "alm_loss", "\n", "\n", "nce_loss", "=", "self", ".", "_calculate_mfm_loss", "(", "visual_cross_output", ",", "video", ",", "video_mask", ",", "video_labels_index", ")", "\n", "loss", "+=", "nce_loss", "\n", "\n", "sim_matrix", "=", "self", ".", "get_similarity_logits", "(", "sequence_output", ",", "visual_output", ",", "attention_mask", ",", "video_mask", ",", "\n", "shaped", "=", "True", ",", "_pretrain_joint", "=", "True", ")", "\n", "sim_loss_joint", "=", "self", ".", "_pretrain_sim_loss_fct", "(", "sim_matrix", ")", "\n", "loss", "+=", "sim_loss_joint", "\n", "\n", "", "if", "(", "input_caption_ids", "is", "not", "None", ")", "and", "(", "self", ".", "task_config", ".", "do_pretrain", "\n", "or", "(", "self", ".", "task_config", ".", "do_pretrain", "is", "False", "and", "self", ".", "task_config", ".", "task_type", "==", "\"caption\"", ")", ")", ":", "\n", "                    ", "if", "self", ".", "task_config", ".", "do_pretrain", ":", "\n", "                        ", "decoder_scores", ",", "res_tuples", "=", "self", ".", "_get_decoder_score", "(", "sequence_output_alm", ",", "visual_output_alm", ",", "\n", "input_ids", ",", "attention_mask", ",", "video_mask", ",", "\n", "input_caption_ids", ",", "decoder_mask", ",", "shaped", "=", "True", ")", "\n", "", "elif", "self", ".", "task_config", ".", "task_type", "==", "\"caption\"", ":", "\n", "                        ", "decoder_scores", ",", "res_tuples", "=", "self", ".", "_get_decoder_score", "(", "sequence_output", ",", "visual_output", ",", "\n", "input_ids", ",", "attention_mask", ",", "video_mask", ",", "\n", "input_caption_ids", ",", "decoder_mask", ",", "shaped", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "\n", "\n", "", "output_caption_ids", "=", "output_caption_ids", ".", "view", "(", "-", "1", ",", "output_caption_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "decoder_loss", "=", "self", ".", "decoder_loss_fct", "(", "decoder_scores", ".", "view", "(", "-", "1", ",", "self", ".", "bert_config", ".", "vocab_size", ")", ",", "output_caption_ids", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "+=", "decoder_loss", "\n", "\n", "", "if", "self", ".", "task_config", ".", "do_pretrain", "or", "self", ".", "task_config", ".", "task_type", "==", "\"retrieval\"", ":", "\n", "                    ", "if", "self", ".", "task_config", ".", "do_pretrain", ":", "\n", "                        ", "sim_matrix_text_visual", "=", "self", ".", "get_similarity_logits", "(", "sequence_output_alm", ",", "visual_output_alm", ",", "\n", "attention_mask", ",", "video_mask", ",", "shaped", "=", "True", ")", "\n", "", "elif", "self", ".", "task_config", ".", "task_type", "==", "\"retrieval\"", ":", "\n", "                        ", "sim_matrix_text_visual", "=", "self", ".", "get_similarity_logits", "(", "sequence_output", ",", "visual_output", ",", "\n", "attention_mask", ",", "video_mask", ",", "shaped", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "\n", "\n", "", "sim_loss_text_visual", "=", "self", ".", "loss_fct", "(", "sim_matrix_text_visual", ")", "\n", "loss", "+=", "sim_loss_text_visual", "\n", "\n", "", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._calculate_mlm_loss": [[273, 277], ["modeling.UniVL.cls", "modeling.UniVL.alm_loss_fct", "modeling.UniVL.view", "pairs_token_labels.view"], "methods", ["None"], ["", "", "def", "_calculate_mlm_loss", "(", "self", ",", "sequence_output_alm", ",", "pairs_token_labels", ")", ":", "\n", "        ", "alm_scores", "=", "self", ".", "cls", "(", "sequence_output_alm", ")", "\n", "alm_loss", "=", "self", ".", "alm_loss_fct", "(", "alm_scores", ".", "view", "(", "-", "1", ",", "self", ".", "bert_config", ".", "vocab_size", ")", ",", "pairs_token_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "alm_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._calculate_mfm_loss": [[278, 298], ["modeling.UniVL.cls_visual", "modeling.UniVL.view", "video.permute", "video_tr.view.view.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "video_mask.to", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.log_softmax", "torch.log_softmax", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "nce_loss.mean.mean.masked_select", "nce_loss.mean.mean.mean", "video_mask.to.view", "video_mask.to.view", "video_labels_index_mask.view"], "methods", ["None"], ["", "def", "_calculate_mfm_loss", "(", "self", ",", "visual_output_alm", ",", "video", ",", "video_mask", ",", "video_labels_index", ")", ":", "\n", "        ", "afm_scores", "=", "self", ".", "cls_visual", "(", "visual_output_alm", ")", "\n", "afm_scores_tr", "=", "afm_scores", ".", "view", "(", "-", "1", ",", "afm_scores", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "video_tr", "=", "video", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "video_tr", "=", "video_tr", ".", "view", "(", "video_tr", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "logits_matrix", "=", "torch", ".", "mm", "(", "afm_scores_tr", ",", "video_tr", ")", "\n", "video_mask_float", "=", "video_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", "\n", "mask_matrix", "=", "torch", ".", "mm", "(", "video_mask_float", ".", "view", "(", "-", "1", ",", "1", ")", ",", "video_mask_float", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "masked_logits", "=", "logits_matrix", "+", "(", "1.", "-", "mask_matrix", ")", "*", "-", "1e8", "\n", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "masked_logits", ",", "dim", "=", "-", "1", ")", "\n", "logpt", "=", "torch", ".", "diag", "(", "logpt", ")", "\n", "nce_loss", "=", "-", "logpt", "\n", "\n", "video_labels_index_mask", "=", "(", "video_labels_index", "!=", "self", ".", "ignore_video_index", ")", "\n", "nce_loss", "=", "nce_loss", ".", "masked_select", "(", "video_labels_index_mask", ".", "view", "(", "-", "1", ")", ")", "\n", "nce_loss", "=", "nce_loss", ".", "mean", "(", ")", "\n", "return", "nce_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_sequence_visual_output": [[299, 314], ["modeling.UniVL.bert", "modeling.UniVL.visual", "input_ids.view.view.view", "token_type_ids.view.view.view", "attention_mask.view.view.view", "video_mask.view.view.view", "modeling.UniVL.normalize_video"], "methods", ["None"], ["", "def", "get_sequence_visual_output", "(", "self", ",", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "video", ",", "video_mask", ",", "shaped", "=", "False", ")", ":", "\n", "        ", "if", "shaped", "is", "False", ":", "\n", "            ", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "video_mask", "=", "video_mask", ".", "view", "(", "-", "1", ",", "video_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "video", "=", "self", ".", "normalize_video", "(", "video", ")", "\n", "\n", "", "encoded_layers", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ")", "\n", "sequence_output", "=", "encoded_layers", "[", "-", "1", "]", "\n", "\n", "visual_layers", ",", "_", "=", "self", ".", "visual", "(", "video", ",", "video_mask", ",", "output_all_encoded_layers", "=", "True", ")", "\n", "visual_output", "=", "visual_layers", "[", "-", "1", "]", "\n", "\n", "return", "sequence_output", ",", "visual_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._get_cross_output": [[315, 326], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling.UniVL.cross"], "methods", ["None"], ["", "def", "_get_cross_output", "(", "self", ",", "sequence_output", ",", "visual_output", ",", "attention_mask", ",", "video_mask", ")", ":", "\n", "        ", "concat_features", "=", "torch", ".", "cat", "(", "(", "sequence_output", ",", "visual_output", ")", ",", "dim", "=", "1", ")", "# concatnate tokens and frames", "\n", "concat_mask", "=", "torch", ".", "cat", "(", "(", "attention_mask", ",", "video_mask", ")", ",", "dim", "=", "1", ")", "\n", "text_type_", "=", "torch", ".", "zeros_like", "(", "attention_mask", ")", "\n", "video_type_", "=", "torch", ".", "ones_like", "(", "video_mask", ")", "\n", "concat_type", "=", "torch", ".", "cat", "(", "(", "text_type_", ",", "video_type_", ")", ",", "dim", "=", "1", ")", "\n", "\n", "cross_layers", ",", "pooled_output", "=", "self", ".", "cross", "(", "concat_features", ",", "concat_type", ",", "concat_mask", ",", "output_all_encoded_layers", "=", "True", ")", "\n", "cross_output", "=", "cross_layers", "[", "-", "1", "]", "\n", "\n", "return", "cross_output", ",", "pooled_output", ",", "concat_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._mean_pooling_for_similarity": [[327, 340], ["attention_mask.to().unsqueeze", "video_mask.to().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "attention_mask.to", "video_mask.to"], "methods", ["None"], ["", "def", "_mean_pooling_for_similarity", "(", "self", ",", "sequence_output", ",", "visual_output", ",", "attention_mask", ",", "video_mask", ",", ")", ":", "\n", "        ", "attention_mask_un", "=", "attention_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "attention_mask_un", "[", ":", ",", "0", ",", ":", "]", "=", "0.", "\n", "sequence_output", "=", "sequence_output", "*", "attention_mask_un", "\n", "text_out", "=", "torch", ".", "sum", "(", "sequence_output", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "attention_mask_un", ",", "dim", "=", "1", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "video_mask_un", "=", "video_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "visual_output", "=", "visual_output", "*", "video_mask_un", "\n", "video_mask_un_sum", "=", "torch", ".", "sum", "(", "video_mask_un", ",", "dim", "=", "1", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "video_mask_un_sum", "[", "video_mask_un_sum", "==", "0.", "]", "=", "1.", "\n", "video_out", "=", "torch", ".", "sum", "(", "visual_output", ",", "dim", "=", "1", ")", "/", "video_mask_un_sum", "\n", "\n", "return", "text_out", ",", "video_out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._cross_similarity": [[341, 376], ["sequence_output.size", "visual_output.size", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "len", "sequence_output_row.unsqueeze().repeat", "sequence_output_l.view.view.view", "attention_mask_row.unsqueeze().repeat", "attention_mask_l.view.view.view", "sequence_output_row.size", "visual_output.unsqueeze().repeat", "visual_output_r.view.view.view", "video_mask.unsqueeze().repeat", "video_mask_r.view.view.view", "modeling.UniVL._get_cross_output", "modeling.UniVL.similarity_dense().squeeze().view", "retrieve_logits_list.append", "sequence_output_row.unsqueeze", "attention_mask_row.unsqueeze", "visual_output.unsqueeze", "video_mask.unsqueeze", "modeling.UniVL.similarity_dense().squeeze", "modeling.UniVL.similarity_dense"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._get_cross_output"], ["", "def", "_cross_similarity", "(", "self", ",", "sequence_output", ",", "visual_output", ",", "attention_mask", ",", "video_mask", ")", ":", "\n", "        ", "b_text", ",", "s_text", ",", "h_text", "=", "sequence_output", ".", "size", "(", ")", "\n", "b_visual", ",", "s_visual", ",", "h_visual", "=", "visual_output", ".", "size", "(", ")", "\n", "\n", "retrieve_logits_list", "=", "[", "]", "\n", "step_size", "=", "5", "\n", "\n", "split_size", "=", "[", "step_size", "]", "*", "(", "b_text", "//", "step_size", ")", "\n", "release_size", "=", "b_text", "-", "sum", "(", "split_size", ")", "\n", "if", "release_size", ">", "0", ":", "\n", "            ", "split_size", "+=", "[", "release_size", "]", "\n", "\n", "", "sequence_output_splits", "=", "torch", ".", "split", "(", "sequence_output", ",", "split_size", ",", "dim", "=", "0", ")", "\n", "attention_mask_splits", "=", "torch", ".", "split", "(", "attention_mask", ",", "split_size", ",", "dim", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "split_size", ")", ")", ":", "\n", "            ", "sequence_output_row", "=", "sequence_output_splits", "[", "i", "]", "\n", "attention_mask_row", "=", "attention_mask_splits", "[", "i", "]", "\n", "sequence_output_l", "=", "sequence_output_row", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "b_visual", ",", "1", ",", "1", ")", "\n", "sequence_output_l", "=", "sequence_output_l", ".", "view", "(", "-", "1", ",", "s_text", ",", "h_text", ")", "\n", "attention_mask_l", "=", "attention_mask_row", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "b_visual", ",", "1", ")", "\n", "attention_mask_l", "=", "attention_mask_l", ".", "view", "(", "-", "1", ",", "s_text", ")", "\n", "\n", "step_truth", "=", "sequence_output_row", ".", "size", "(", "0", ")", "\n", "visual_output_r", "=", "visual_output", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "step_truth", ",", "1", ",", "1", ",", "1", ")", "\n", "visual_output_r", "=", "visual_output_r", ".", "view", "(", "-", "1", ",", "s_visual", ",", "h_visual", ")", "\n", "video_mask_r", "=", "video_mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "step_truth", ",", "1", ",", "1", ")", "\n", "video_mask_r", "=", "video_mask_r", ".", "view", "(", "-", "1", ",", "s_visual", ")", "\n", "\n", "cross_output", ",", "pooled_output", ",", "concat_mask", "=", "self", ".", "_get_cross_output", "(", "sequence_output_l", ",", "visual_output_r", ",", "attention_mask_l", ",", "video_mask_r", ")", "\n", "retrieve_logits_row", "=", "self", ".", "similarity_dense", "(", "pooled_output", ")", ".", "squeeze", "(", "-", "1", ")", ".", "view", "(", "step_truth", ",", "b_visual", ")", "\n", "\n", "retrieve_logits_list", ".", "append", "(", "retrieve_logits_row", ")", "\n", "", "retrieve_logits", "=", "torch", ".", "cat", "(", "retrieve_logits_list", ",", "dim", "=", "0", ")", "\n", "return", "retrieve_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.get_similarity_logits": [[377, 392], ["attention_mask.view.view.view", "video_mask.view.view.view", "modeling.UniVL._cross_similarity", "modeling.UniVL._mean_pooling_for_similarity", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.t"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._cross_similarity", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._mean_pooling_for_similarity"], ["", "def", "get_similarity_logits", "(", "self", ",", "sequence_output", ",", "visual_output", ",", "attention_mask", ",", "video_mask", ",", "shaped", "=", "False", ",", "_pretrain_joint", "=", "False", ")", ":", "\n", "        ", "if", "shaped", "is", "False", ":", "\n", "            ", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "video_mask", "=", "video_mask", ".", "view", "(", "-", "1", ",", "video_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "(", "self", ".", "_stage_two", "and", "_pretrain_joint", "is", "False", ")", "or", "self", ".", "train_sim_after_cross", ":", "\n", "            ", "retrieve_logits", "=", "self", ".", "_cross_similarity", "(", "sequence_output", ",", "visual_output", ",", "attention_mask", ",", "video_mask", ")", "\n", "", "else", ":", "\n", "            ", "text_out", ",", "video_out", "=", "self", ".", "_mean_pooling_for_similarity", "(", "sequence_output", ",", "visual_output", ",", "attention_mask", ",", "video_mask", ")", "\n", "if", "self", ".", "task_config", ".", "use_mil", "is", "False", ":", "\n", "                ", "text_out", "=", "F", ".", "normalize", "(", "text_out", ",", "dim", "=", "-", "1", ")", "\n", "video_out", "=", "F", ".", "normalize", "(", "video_out", ",", "dim", "=", "-", "1", ")", "\n", "", "retrieve_logits", "=", "torch", ".", "matmul", "(", "text_out", ",", "video_out", ".", "t", "(", ")", ")", "\n", "\n", "", "return", "retrieve_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._get_decoder_score": [[393, 408], ["modeling.UniVL._get_cross_output", "modeling.UniVL.decoder", "input_ids.view.view.view", "attention_mask.view.view.view", "video_mask.view.view.view", "input_caption_ids.view.view.view", "decoder_mask.view.view.view"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._get_cross_output"], ["", "def", "_get_decoder_score", "(", "self", ",", "sequence_output", ",", "visual_output", ",", "input_ids", ",", "attention_mask", ",", "video_mask", ",", "input_caption_ids", ",", "decoder_mask", ",", "shaped", "=", "False", ")", ":", "\n", "\n", "        ", "if", "shaped", "is", "False", ":", "\n", "            ", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "video_mask", "=", "video_mask", ".", "view", "(", "-", "1", ",", "video_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "input_caption_ids", "=", "input_caption_ids", ".", "view", "(", "-", "1", ",", "input_caption_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "decoder_mask", "=", "decoder_mask", ".", "view", "(", "-", "1", ",", "decoder_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "res_tuples", "=", "(", ")", "\n", "cross_output", ",", "pooled_output", ",", "concat_mask", "=", "self", ".", "_get_cross_output", "(", "sequence_output", ",", "visual_output", ",", "attention_mask", ",", "video_mask", ")", "\n", "decoder_scores", "=", "self", ".", "decoder", "(", "input_caption_ids", ",", "encoder_outs", "=", "cross_output", ",", "answer_mask", "=", "decoder_mask", ",", "encoder_mask", "=", "concat_mask", ")", "\n", "\n", "return", "decoder_scores", ",", "res_tuples", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL.decoder_caption": [[409, 429], ["modeling.UniVL._get_decoder_score", "torch.max", "torch.max", "torch.max", "torch.max", "input_ids.view.view.view", "attention_mask.view.view.view", "video_mask.view.view.view", "input_caption_ids.view.view.view", "decoder_mask.view.view.view"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.UniVL._get_decoder_score"], ["", "def", "decoder_caption", "(", "self", ",", "sequence_output", ",", "visual_output", ",", "input_ids", ",", "attention_mask", ",", "video_mask", ",", "input_caption_ids", ",", "decoder_mask", ",", "\n", "shaped", "=", "False", ",", "get_logits", "=", "False", ")", ":", "\n", "        ", "if", "shaped", "is", "False", ":", "\n", "            ", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "video_mask", "=", "video_mask", ".", "view", "(", "-", "1", ",", "video_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "input_caption_ids", "=", "input_caption_ids", ".", "view", "(", "-", "1", ",", "input_caption_ids", ".", "shape", "[", "-", "1", "]", ")", "\n", "decoder_mask", "=", "decoder_mask", ".", "view", "(", "-", "1", ",", "decoder_mask", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "decoder_scores", ",", "_", "=", "self", ".", "_get_decoder_score", "(", "sequence_output", ",", "visual_output", ",", "\n", "input_ids", ",", "attention_mask", ",", "video_mask", ",", "\n", "input_caption_ids", ",", "decoder_mask", ",", "shaped", "=", "True", ")", "\n", "\n", "if", "get_logits", ":", "\n", "            ", "return", "decoder_scores", "\n", "\n", "", "_", ",", "decoder_scores_result", "=", "torch", ".", "max", "(", "decoder_scores", ",", "-", "1", ")", "\n", "\n", "return", "decoder_scores_result", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.show_log": [[94, 97], ["logger.warning"], "function", ["None"], ["", "", "def", "show_log", "(", "task_config", ",", "info", ")", ":", "\n", "    ", "if", "task_config", "is", "None", "or", "task_config", ".", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.update_attr": [[98, 105], ["hasattr", "setattr", "modeling.show_log", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.show_log"], ["", "", "def", "update_attr", "(", "target_name", ",", "target_config", ",", "target_attr_name", ",", "source_config", ",", "source_attr_name", ",", "default_value", "=", "None", ")", ":", "\n", "    ", "if", "hasattr", "(", "source_config", ",", "source_attr_name", ")", ":", "\n", "        ", "if", "default_value", "is", "None", "or", "getattr", "(", "source_config", ",", "source_attr_name", ")", "!=", "default_value", ":", "\n", "            ", "setattr", "(", "target_config", ",", "target_attr_name", ",", "getattr", "(", "source_config", ",", "source_attr_name", ")", ")", "\n", "show_log", "(", "source_config", ",", "\"Set {}.{}: {}.\"", ".", "format", "(", "target_name", ",", "\n", "target_attr_name", ",", "getattr", "(", "target_config", ",", "target_attr_name", ")", ")", ")", "\n", "", "", "return", "target_config", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.modeling.check_attr": [[106, 108], ["hasattr"], "function", ["None"], ["", "def", "check_attr", "(", "target_name", ",", "task_config", ")", ":", "\n", "    ", "return", "hasattr", "(", "task_config", ",", "target_name", ")", "and", "task_config", ".", "__dict__", "[", "target_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.LayerNorm.__init__": [[41, 48], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "\"\"\"Construct a layernorm module in the TF style (epsilon inside the square root).\n        \"\"\"", "\n", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.LayerNorm.forward": [[49, 54], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.PreTrainedModel.__init__": [[59, 69], ["torch.nn.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PreTrainedModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "PretrainedConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `PretrainedConfig`. \"", "\n", "\"To create a model from a Google pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.PreTrainedModel.init_weights": [[70, 86], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.beta.data.zero_", "module.gamma.data.fill_", "module.bias.data.zero_", "module.weight.data.fill_", "dir", "dir"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "LayerNorm", ")", ":", "\n", "            ", "if", "'beta'", "in", "dir", "(", "module", ")", "and", "'gamma'", "in", "dir", "(", "module", ")", ":", "\n", "                ", "module", ".", "beta", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "gamma", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "else", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.PreTrainedModel.resize_token_embeddings": [[87, 89], ["None"], "methods", ["None"], ["", "", "def", "resize_token_embeddings", "(", "self", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.PreTrainedModel.init_preweight": [[90, 147], ["state_dict.copy.copy.keys", "zip", "getattr", "state_dict.copy.copy.copy", "until_module.PreTrainedModel.init_preweight.load"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "init_preweight", "(", "cls", ",", "model", ",", "state_dict", ",", "prefix", "=", "None", ",", "task_config", "=", "None", ")", ":", "\n", "        ", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "", "if", "prefix", "is", "not", "None", ":", "\n", "            ", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "prefix", "+", "key", ")", "\n", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "                ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "", "", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "model", ",", "prefix", "=", "''", ")", "\n", "\n", "if", "prefix", "is", "None", "and", "(", "task_config", "is", "None", "or", "task_config", ".", "local_rank", "==", "0", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"-\"", "*", "20", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Weights of {} not initialized from pretrained model: {}\"", "\n", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ",", "\"\\n   \"", "+", "\"\\n   \"", ".", "join", "(", "missing_keys", ")", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Weights from pretrained model not used in {}: {}\"", "\n", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ",", "\"\\n   \"", "+", "\"\\n   \"", ".", "join", "(", "unexpected_keys", ")", ")", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "                ", "logger", ".", "error", "(", "\"Weights from pretrained model cause errors in {}: {}\"", "\n", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ",", "\"\\n   \"", "+", "\"\\n   \"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.PreTrainedModel.dtype": [[148, 164], ["next", "until_module.PreTrainedModel._named_members", "next", "until_module.PreTrainedModel.parameters", "module.__dict__.items", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :obj:`torch.dtype`: The dtype of the module (assuming that all the module parameters have the same dtype).\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "\n", "", "except", "StopIteration", ":", "\n", "# For nn.DataParallel compatibility in PyTorch 1.5", "\n", "            ", "def", "find_tensor_attributes", "(", "module", ":", "nn", ".", "Module", ")", ":", "\n", "                ", "tuples", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "module", ".", "__dict__", ".", "items", "(", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "]", "\n", "return", "tuples", "\n", "\n", "", "gen", "=", "self", ".", "_named_members", "(", "get_members_fn", "=", "find_tensor_attributes", ")", "\n", "first_tuple", "=", "next", "(", "gen", ")", "\n", "return", "first_tuple", "[", "1", "]", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.PreTrainedModel.from_pretrained": [[165, 178], ["cls", "cls.init_preweight"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.PreTrainedModel.init_preweight"], ["", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "config", ",", "state_dict", "=", "None", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a PreTrainedModel from a pre-trained model file or a pytorch state dict.\n        Download and cache the pre-trained model file if needed.\n        \"\"\"", "\n", "# Instantiate model.", "\n", "model", "=", "cls", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "if", "state_dict", "is", "None", ":", "\n", "            ", "return", "model", "\n", "", "model", "=", "cls", ".", "init_preweight", "(", "model", ",", "state_dict", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.CrossEn.__init__": [[183, 185], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "CrossEn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.CrossEn.forward": [[186, 192], ["torch.log_softmax", "torch.log_softmax", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "nce_loss.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sim_matrix", ")", ":", "\n", "        ", "logpt", "=", "F", ".", "log_softmax", "(", "sim_matrix", ",", "dim", "=", "-", "1", ")", "\n", "logpt", "=", "torch", ".", "diag", "(", "logpt", ")", "\n", "nce_loss", "=", "-", "logpt", "\n", "sim_loss", "=", "nce_loss", ".", "mean", "(", ")", "\n", "return", "sim_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.MILNCELoss.__init__": [[194, 200], ["torch.nn.Module.__init__", "float", "torch.__version__.split", "torch.__version__.split", "torch.__version__.split", "torch.__version__.split"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", "=", "1", ",", "n_pair", "=", "1", ",", ")", ":", "\n", "        ", "super", "(", "MILNCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_pair", "=", "n_pair", "\n", "torch_v", "=", "float", "(", "\".\"", ".", "join", "(", "torch", ".", "__version__", ".", "split", "(", "\".\"", ")", "[", ":", "2", "]", ")", ")", "\n", "self", ".", "bool_dtype", "=", "torch", ".", "bool", "if", "torch_v", ">=", "1.3", "else", "torch", ".", "uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.MILNCELoss.forward": [[201, 222], ["numpy.eye", "numpy.kron", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "sim_matrix.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log_softmax", "torch.log_softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "new_logpt.masked_select().mean", "numpy.ones", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "new_logpt.masked_select", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like.to", "torch.zeros_like.to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sim_matrix", ")", ":", "\n", "        ", "mm_mask", "=", "np", ".", "eye", "(", "self", ".", "batch_size", ")", "\n", "mm_mask", "=", "np", ".", "kron", "(", "mm_mask", ",", "np", ".", "ones", "(", "(", "self", ".", "n_pair", ",", "self", ".", "n_pair", ")", ")", ")", "\n", "mm_mask", "=", "torch", ".", "tensor", "(", "mm_mask", ")", ".", "float", "(", ")", ".", "to", "(", "sim_matrix", ".", "device", ")", "\n", "\n", "from_text_matrix", "=", "sim_matrix", "+", "mm_mask", "*", "-", "1e12", "\n", "from_video_matrix", "=", "sim_matrix", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "new_sim_matrix", "=", "torch", ".", "cat", "(", "[", "from_video_matrix", ",", "from_text_matrix", "]", ",", "dim", "=", "-", "1", ")", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "new_sim_matrix", ",", "dim", "=", "-", "1", ")", "\n", "\n", "mm_mask_logpt", "=", "torch", ".", "cat", "(", "[", "mm_mask", ",", "torch", ".", "zeros_like", "(", "mm_mask", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "masked_logpt", "=", "logpt", "+", "(", "torch", ".", "ones_like", "(", "mm_mask_logpt", ")", "-", "mm_mask_logpt", ")", "*", "-", "1e12", "\n", "\n", "new_logpt", "=", "-", "torch", ".", "logsumexp", "(", "masked_logpt", ",", "dim", "=", "-", "1", ")", "\n", "\n", "logpt_choice", "=", "torch", ".", "zeros_like", "(", "new_logpt", ")", "\n", "mark_ind", "=", "torch", ".", "arange", "(", "self", ".", "batch_size", ")", ".", "to", "(", "sim_matrix", ".", "device", ")", "*", "self", ".", "n_pair", "+", "(", "self", ".", "n_pair", "//", "2", ")", "\n", "logpt_choice", "[", "mark_ind", "]", "=", "1", "\n", "sim_loss", "=", "new_logpt", ".", "masked_select", "(", "logpt_choice", ".", "to", "(", "dtype", "=", "self", ".", "bool_dtype", ")", ")", ".", "mean", "(", ")", "\n", "return", "sim_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.MaxMarginRankingLoss.__init__": [[224, 244], ["torch.nn.Module.__init__", "numpy.kron", "numpy.kron.float", "numpy.ones", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "margin", "=", "1.0", ",", "\n", "negative_weighting", "=", "False", ",", "\n", "batch_size", "=", "1", ",", "\n", "n_pair", "=", "1", ",", "\n", "hard_negative_rate", "=", "0.5", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MaxMarginRankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "n_pair", "=", "n_pair", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "easy_negative_rate", "=", "1", "-", "hard_negative_rate", "\n", "self", ".", "easy_negative_rate", "=", "easy_negative_rate", "\n", "self", ".", "negative_weighting", "=", "negative_weighting", "\n", "if", "n_pair", ">", "1", "and", "batch_size", ">", "1", ":", "\n", "            ", "alpha", "=", "easy_negative_rate", "/", "(", "(", "batch_size", "-", "1", ")", "*", "(", "1", "-", "easy_negative_rate", ")", ")", "\n", "mm_mask", "=", "(", "1", "-", "alpha", ")", "*", "np", ".", "eye", "(", "self", ".", "batch_size", ")", "+", "alpha", "\n", "mm_mask", "=", "np", ".", "kron", "(", "mm_mask", ",", "np", ".", "ones", "(", "(", "n_pair", ",", "n_pair", ")", ")", ")", "\n", "mm_mask", "=", "torch", ".", "tensor", "(", "mm_mask", ")", "*", "(", "batch_size", "*", "(", "1", "-", "easy_negative_rate", ")", ")", "\n", "self", ".", "mm_mask", "=", "mm_mask", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.MaxMarginRankingLoss.forward": [[245, 252], ["torch.diag", "torch.diag", "torch.diag", "torch.diag", "max_margin.mean", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "until_module.MaxMarginRankingLoss.mm_mask.to", "torch.diag.view", "torch.diag.view", "torch.diag.view", "torch.diag.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "d", "=", "torch", ".", "diag", "(", "x", ")", "\n", "max_margin", "=", "F", ".", "relu", "(", "self", ".", "margin", "+", "x", "-", "d", ".", "view", "(", "-", "1", ",", "1", ")", ")", "+", "F", ".", "relu", "(", "self", ".", "margin", "+", "x", "-", "d", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "if", "self", ".", "negative_weighting", "and", "self", ".", "n_pair", ">", "1", "and", "self", ".", "batch_size", ">", "1", ":", "\n", "            ", "max_margin", "=", "max_margin", "*", "self", ".", "mm_mask", ".", "to", "(", "max_margin", ".", "device", ")", "\n", "", "return", "max_margin", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.gelu": [[28, 34], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Implementation of the gelu activation function.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.swish": [[35, 37], ["torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.__init__": [[66, 85], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "warmup", "=", "-", "1", ",", "t_total", "=", "-", "1", ",", "schedule", "=", "'warmup_linear'", ",", "\n", "b1", "=", "0.9", ",", "b2", "=", "0.999", ",", "e", "=", "1e-6", ",", "weight_decay", "=", "0.01", ",", "\n", "max_grad_norm", "=", "1.0", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "schedule", "not", "in", "SCHEDULES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid schedule parameter: {}\"", ".", "format", "(", "schedule", ")", ")", "\n", "", "if", "not", "0.0", "<=", "warmup", "<", "1.0", "and", "not", "warmup", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid warmup: {} - should be in [0.0, 1.0[ or -1\"", ".", "format", "(", "warmup", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b1", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid b1 parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "b1", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b2", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid b2 parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "b2", ")", ")", "\n", "", "if", "not", "e", ">=", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "e", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "schedule", "=", "schedule", ",", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "\n", "b1", "=", "b1", ",", "b2", "=", "b2", ",", "e", "=", "e", ",", "weight_decay", "=", "weight_decay", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "super", "(", "BertAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.get_lr": [[86, 102], ["lr.append", "len", "schedule_fct"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "return", "[", "0", "]", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "SCHEDULES", "[", "group", "[", "'schedule'", "]", "]", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "", "lr", ".", "append", "(", "lr_scheduled", ")", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.BertAdam.step": [[103, 169], ["closure", "next_m.mul_().add_", "next_v.mul_().addcmul_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "next_m.mul_", "next_v.mul_", "next_v.sqrt", "schedule_fct"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'next_m'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'next_v'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "next_m", ",", "next_v", "=", "state", "[", "'next_m'", "]", ",", "state", "[", "'next_v'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'b1'", "]", ",", "group", "[", "'b2'", "]", "\n", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                    ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "# next_m.mul_(beta1).add_(1 - beta1, grad) --> pytorch 1.7", "\n", "", "next_m", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", ",", "alpha", "=", "1", "-", "beta1", ")", "\n", "# next_v.mul_(beta2).addcmul_(1 - beta2, grad, grad) --> pytorch 1.7", "\n", "next_v", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "grad", ",", "grad", ",", "value", "=", "1", "-", "beta2", ")", "\n", "update", "=", "next_m", "/", "(", "next_v", ".", "sqrt", "(", ")", "+", "group", "[", "'e'", "]", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                    ", "update", "+=", "group", "[", "'weight_decay'", "]", "*", "p", ".", "data", "\n", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "SCHEDULES", "[", "group", "[", "'schedule'", "]", "]", "\n", "progress", "=", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "progress", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "update_with_lr", "=", "lr_scheduled", "*", "update", "\n", "p", ".", "data", ".", "add_", "(", "-", "update_with_lr", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.warmup_cosine": [[26, 30], ["torch.cos"], "function", ["None"], ["def", "warmup_cosine", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "0.5", "*", "(", "1.0", "+", "torch", ".", "cos", "(", "math", ".", "pi", "*", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.warmup_constant": [[31, 37], ["None"], "function", ["None"], ["", "def", "warmup_constant", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "\"\"\" Linearly increases learning rate over `warmup`*`t_total` (as provided to BertAdam) training steps.\n        Learning rate is 1. afterwards. \"\"\"", "\n", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.optimization.warmup_linear": [[38, 44], ["max"], "function", ["None"], ["", "def", "warmup_linear", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "\"\"\" Specifies a triangular learning rate schedule where peak is reached at `warmup`*`t_total`-th (as provided to BertAdam) training step.\n        After `t_total`-th training step, learning rate is zero. \"\"\"", "\n", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "max", "(", "(", "x", "-", "1.", ")", "/", "(", "warmup", "-", "1.", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.get_config": [[40, 100], ["os.path.join", "os.path.isdir", "os.path.join", "cls.from_json_file", "os.path.dirname", "os.path.exists", "file_utils.cached_path", "tempfile.mkdtemp", "logger.info", "os.path.join", "os.path.exists", "shutil.rmtree", "os.path.abspath", "logger.info", "logger.info", "logger.info", "tarfile.open", "archive.extractall", "torch.load", "logger.error", "logger.info"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.cached_path"], ["@", "classmethod", "\n", "def", "get_config", "(", "cls", ",", "pretrained_model_name", ",", "cache_dir", ",", "type_vocab_size", ",", "state_dict", ",", "task_config", "=", "None", ")", ":", "\n", "        ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "pretrained_model_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "archive_file", ")", "is", "False", ":", "\n", "            ", "if", "pretrained_model_name", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                ", "archive_file", "=", "cls", ".", "pretrained_model_archive_map", "[", "pretrained_model_name", "]", "\n", "", "else", ":", "\n", "                ", "archive_file", "=", "pretrained_model_name", "\n", "\n", "# redirect to the cache, if necessary", "\n", "", "", "try", ":", "\n", "            ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "cache_dir", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "if", "task_config", "is", "None", "or", "task_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list. \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name", ",", "\n", "archive_file", ")", ")", "\n", "", "return", "None", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "            ", "if", "task_config", "is", "None", "or", "task_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading archive file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "task_config", "is", "None", "or", "task_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading archive file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "", "", "tempdir", "=", "None", "\n", "if", "os", ".", "path", ".", "isdir", "(", "resolved_archive_file", ")", ":", "\n", "            ", "serialization_dir", "=", "resolved_archive_file", "\n", "", "else", ":", "\n", "# Extract archive to temp dir", "\n", "            ", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "if", "task_config", "is", "None", "or", "task_config", ".", "local_rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"extracting archive file {} to temp dir {}\"", ".", "format", "(", "\n", "resolved_archive_file", ",", "tempdir", ")", ")", "\n", "", "with", "tarfile", ".", "open", "(", "resolved_archive_file", ",", "'r:gz'", ")", "as", "archive", ":", "\n", "                ", "archive", ".", "extractall", "(", "tempdir", ")", "\n", "", "serialization_dir", "=", "tempdir", "\n", "# Load config", "\n", "", "config_file", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "cls", ".", "config_name", ")", "\n", "config", "=", "cls", ".", "from_json_file", "(", "config_file", ")", "\n", "config", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "if", "task_config", "is", "None", "or", "task_config", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Model config {}\"", ".", "format", "(", "config", ")", ")", "\n", "\n", "", "if", "state_dict", "is", "None", ":", "\n", "            ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "cls", ".", "weights_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "weights_path", ")", ":", "\n", "                ", "state_dict", "=", "torch", ".", "load", "(", "weights_path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "                ", "if", "task_config", "is", "None", "or", "task_config", ".", "local_rank", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Weight doesn't exsits. {}\"", ".", "format", "(", "weights_path", ")", ")", "\n", "\n", "", "", "", "if", "tempdir", ":", "\n", "# Clean up temp dir", "\n", "            ", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "\n", "", "return", "config", ",", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.from_dict": [[101, 108], ["cls", "json_object.items"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "cls", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.from_json_file": [[109, 115], ["cls.from_dict", "open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.__repr__": [[116, 118], ["str", "until_config.PretrainedConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.to_dict": [[119, 123], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.to_json_string": [[124, 127], ["json.dumps", "until_config.PretrainedConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_config.PretrainedConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Constants.__init__": [[11, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "PAD", "=", "0", "\n", "self", ".", "UNK", "=", "1", "\n", "self", ".", "BOS", "=", "2", "\n", "self", ".", "EOS", "=", "3", "\n", "self", ".", "PAD_WORD", "=", "'[PAD]'", "\n", "self", ".", "UNK_WORD", "=", "'[UNK]'", "\n", "self", ".", "BOS_WORD", "=", "'[CLS]'", "\n", "self", ".", "EOS_WORD", "=", "'[SEP]'", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Constants.from_tokenizer": [[21, 29], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_tokenizer", "(", "cls", ",", "tokenizer", ")", ":", "\n", "        ", "instance", "=", "cls", "(", ")", "\n", "instance", ".", "PAD", "=", "tokenizer", ".", "vocab", "[", "instance", ".", "PAD_WORD", "]", "\n", "instance", ".", "UNK", "=", "tokenizer", ".", "vocab", "[", "instance", ".", "UNK_WORD", "]", "\n", "instance", ".", "BOS", "=", "tokenizer", ".", "vocab", "[", "instance", ".", "BOS_WORD", "]", "\n", "instance", ".", "EOS", "=", "tokenizer", ".", "vocab", "[", "instance", ".", "EOS_WORD", "]", "\n", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.__init__": [[33, 50], ["torch.zeros", "beam.Constants", "beam.Constants.from_tokenizer", "torch.full"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Constants.from_tokenizer"], ["def", "__init__", "(", "self", ",", "size", ",", "device", "=", "False", ",", "tokenizer", "=", "None", ")", ":", "\n", "        ", "if", "tokenizer", "is", "None", ":", "\n", "            ", "self", ".", "constants", "=", "Constants", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "constants", "=", "Constants", ".", "from_tokenizer", "(", "tokenizer", ")", "\n", "\n", "", "self", ".", "size", "=", "size", "\n", "self", ".", "_done", "=", "False", "\n", "# The score for each interface on the beam.", "\n", "self", ".", "scores", "=", "torch", ".", "zeros", "(", "(", "size", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "all_scores", "=", "[", "]", "\n", "\n", "# The backpointers at each time-step.", "\n", "self", ".", "prev_ks", "=", "[", "]", "\n", "\n", "# The outputs at each time-step.", "\n", "self", ".", "next_ys", "=", "[", "torch", ".", "full", "(", "(", "size", ",", ")", ",", "self", ".", "constants", ".", "BOS", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.get_current_state": [[51, 54], ["beam.Beam.get_tentative_hypothesis"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.get_tentative_hypothesis"], ["", "def", "get_current_state", "(", "self", ")", ":", "\n", "        ", "\"Get the outputs for the current timestep.\"", "\n", "return", "self", ".", "get_tentative_hypothesis", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.get_current_origin": [[55, 58], ["None"], "methods", ["None"], ["", "def", "get_current_origin", "(", "self", ")", ":", "\n", "        ", "\"Get the backpointers for the current timestep.\"", "\n", "return", "self", ".", "prev_ks", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.done": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "done", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_done", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.advance": [[63, 86], ["word_prob.size", "beam_lk.view", "beam_lk.view.topk", "beam.Beam.all_scores.append", "beam.Beam.prev_ks.append", "beam.Beam.next_ys.append", "len", "[].item", "beam.Beam.scores.unsqueeze().expand_as", "beam.Beam.scores.unsqueeze"], "methods", ["None"], ["", "def", "advance", "(", "self", ",", "word_prob", ",", "word_length", "=", "None", ")", ":", "\n", "\n", "        ", "\"Update beam status and check if finished or not.\"", "\n", "num_words", "=", "word_prob", ".", "size", "(", "1", ")", "\n", "# Sum the previous scores.", "\n", "if", "len", "(", "self", ".", "prev_ks", ")", ">", "0", ":", "\n", "            ", "beam_lk", "=", "word_prob", "+", "self", ".", "scores", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "word_prob", ")", "\n", "", "else", ":", "\n", "            ", "beam_lk", "=", "word_prob", "[", "0", "]", "\n", "", "flat_beam_lk", "=", "beam_lk", ".", "view", "(", "-", "1", ")", "\n", "best_scores", ",", "best_scores_id", "=", "flat_beam_lk", ".", "topk", "(", "self", ".", "size", ",", "0", ",", "True", ",", "True", ")", "# 1st sort", "\n", "self", ".", "all_scores", ".", "append", "(", "self", ".", "scores", ")", "\n", "self", ".", "scores", "=", "best_scores", "\n", "# bestScoresId is flattened as a (beam x word) array,", "\n", "# so we need to calculate which word and beam each score came from", "\n", "prev_k", "=", "best_scores_id", "//", "num_words", "\n", "self", ".", "prev_ks", ".", "append", "(", "prev_k", ")", "\n", "self", ".", "next_ys", ".", "append", "(", "best_scores_id", "-", "prev_k", "*", "num_words", ")", "\n", "# End condition is when top-of-beam is EOS.", "\n", "if", "self", ".", "next_ys", "[", "-", "1", "]", "[", "0", "]", ".", "item", "(", ")", "==", "self", ".", "constants", ".", "EOS", ":", "\n", "            ", "self", ".", "_done", "=", "True", "\n", "\n", "", "return", "self", ".", "_done", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.sort_scores": [[87, 90], ["torch.sort"], "methods", ["None"], ["", "def", "sort_scores", "(", "self", ")", ":", "\n", "        ", "\"Sort the scores.\"", "\n", "return", "torch", ".", "sort", "(", "self", ".", "scores", ",", "0", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.get_the_best_score_and_idx": [[91, 95], ["beam.Beam.sort_scores"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.sort_scores"], ["", "def", "get_the_best_score_and_idx", "(", "self", ")", ":", "\n", "        ", "\"Get the score of the best in the beam.\"", "\n", "scores", ",", "ids", "=", "self", ".", "sort_scores", "(", ")", "\n", "return", "scores", "[", "1", "]", ",", "ids", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.get_tentative_hypothesis": [[96, 108], ["len", "beam.Beam.next_ys[].unsqueeze", "beam.Beam.sort_scores", "torch.LongTensor", "beam.Beam.get_hypothesis"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.sort_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.get_hypothesis"], ["", "def", "get_tentative_hypothesis", "(", "self", ")", ":", "\n", "        ", "\"Get the decoded sequence for the current timestep.\"", "\n", "\n", "if", "len", "(", "self", ".", "next_ys", ")", "==", "1", ":", "\n", "            ", "dec_seq", "=", "self", ".", "next_ys", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "keys", "=", "self", ".", "sort_scores", "(", ")", "\n", "hyps", "=", "[", "self", ".", "get_hypothesis", "(", "k", ")", "for", "k", "in", "keys", "]", "\n", "hyps", "=", "[", "[", "self", ".", "constants", ".", "BOS", "]", "+", "h", "for", "h", "in", "hyps", "]", "\n", "dec_seq", "=", "torch", ".", "LongTensor", "(", "hyps", ")", "\n", "\n", "", "return", "dec_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.beam.Beam.get_hypothesis": [[109, 117], ["range", "list", "hyp.append", "map", "len", "x.item"], "methods", ["None"], ["", "def", "get_hypothesis", "(", "self", ",", "k", ")", ":", "\n", "        ", "\"\"\" Walk back to construct the full hypothesis. \"\"\"", "\n", "hyp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "prev_ks", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "hyp", ".", "append", "(", "self", ".", "next_ys", "[", "j", "+", "1", "]", "[", "k", "]", ")", "\n", "k", "=", "self", ".", "prev_ks", "[", "j", "]", "[", "k", "]", "\n", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "item", "(", ")", ",", "hyp", "[", ":", ":", "-", "1", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossConfig.__init__": [[51, 106], ["isinstance", "json.loads.items", "isinstance", "open", "json.loads", "ValueError", "reader.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ")", ":", "\n", "        ", "\"\"\"Constructs CrossConfig.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `CrossModel`.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler. If string, \"gelu\", \"relu\" and \"swish\" are supported.\n            hidden_dropout_prob: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n                `CrossModel`.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossEmbeddings.__init__": [[112, 122], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "until_module.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossEmbeddings.forward": [[123, 139], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "module_cross.CrossEmbeddings.token_type_embeddings", "module_cross.CrossEmbeddings.position_embeddings", "module_cross.CrossEmbeddings.LayerNorm", "module_cross.CrossEmbeddings.dropout", "concat_embeddings.size", "concat_embeddings.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "concat_embeddings.size", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "concat_embeddings", ",", "concat_type", "=", "None", ")", ":", "\n", "\n", "        ", "batch_size", ",", "seq_length", "=", "concat_embeddings", ".", "size", "(", "0", ")", ",", "concat_embeddings", ".", "size", "(", "1", ")", "\n", "if", "concat_type", "is", "None", ":", "\n", "            ", "concat_type", "=", "torch", ".", "zeros", "(", "batch_size", ",", "concat_type", ")", ".", "to", "(", "concat_embeddings", ".", "device", ")", "\n", "\n", "", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "concat_embeddings", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "concat_embeddings", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "concat_type", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "\n", "embeddings", "=", "concat_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossSelfAttention.__init__": [[141, 156], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossSelfAttention.transpose_for_scores": [[157, 161], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossSelfAttention.forward": [[162, 189], ["module_cross.CrossSelfAttention.query", "module_cross.CrossSelfAttention.key", "module_cross.CrossSelfAttention.value", "module_cross.CrossSelfAttention.transpose_for_scores", "module_cross.CrossSelfAttention.transpose_for_scores", "module_cross.CrossSelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "module_cross.CrossSelfAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "module_cross.CrossSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in CrossModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossSelfOutput.__init__": [[192, 197], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "until_module.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossSelfOutput.forward": [[198, 203], ["module_cross.CrossSelfOutput.dense", "module_cross.CrossSelfOutput.dropout", "module_cross.CrossSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossAttention.__init__": [[206, 210], ["torch.nn.Module.__init__", "module_cross.CrossSelfAttention", "module_cross.CrossSelfOutput"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "CrossSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "CrossSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossAttention.forward": [[211, 215], ["module_cross.CrossAttention.self", "module_cross.CrossAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", ",", "input_tensor", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossIntermediate.__init__": [[218, 223], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "isinstance"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossIntermediate.forward": [[224, 228], ["module_cross.CrossIntermediate.dense", "module_cross.CrossIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossOutput.__init__": [[231, 236], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "until_module.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossOutput.forward": [[237, 242], ["module_cross.CrossOutput.dense", "module_cross.CrossOutput.dropout", "module_cross.CrossOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossLayer.__init__": [[245, 250], ["torch.nn.Module.__init__", "module_cross.CrossAttention", "module_cross.CrossIntermediate", "module_cross.CrossOutput"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "CrossAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "CrossIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "CrossOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossLayer.forward": [[251, 256], ["module_cross.CrossLayer.attention", "module_cross.CrossLayer.intermediate", "module_cross.CrossLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossEncoder.__init__": [[259, 263], ["torch.nn.Module.__init__", "module_cross.CrossLayer", "torch.nn.ModuleList", "torch.nn.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "CrossLayer", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossEncoder.forward": [[264, 273], ["layer_module", "all_encoder_layers.append", "all_encoder_layers.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossPooler.__init__": [[276, 280], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossPooler.forward": [[281, 288], ["module_cross.CrossPooler.dense", "module_cross.CrossPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossPredictionHeadTransform.__init__": [[291, 297], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "until_module.LayerNorm", "isinstance"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossPredictionHeadTransform.forward": [[298, 303], ["module_cross.CrossPredictionHeadTransform.dense", "module_cross.CrossPredictionHeadTransform.transform_act_fn", "module_cross.CrossPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossLMPredictionHead.__init__": [[306, 317], ["torch.nn.Module.__init__", "module_cross.CrossPredictionHeadTransform", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "cross_model_embedding_weights.size", "cross_model_embedding_weights.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cross_model_embedding_weights.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "cross_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "CrossLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "CrossPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "cross_model_embedding_weights", ".", "size", "(", "1", ")", ",", "\n", "cross_model_embedding_weights", ".", "size", "(", "0", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "cross_model_embedding_weights", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "cross_model_embedding_weights", ".", "size", "(", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossLMPredictionHead.forward": [[318, 322], ["module_cross.CrossLMPredictionHead.transform", "module_cross.CrossLMPredictionHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossOnlyMLMHead.__init__": [[325, 328], ["torch.nn.Module.__init__", "module_cross.CrossLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "cross_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "CrossOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "CrossLMPredictionHead", "(", "config", ",", "cross_model_embedding_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossOnlyMLMHead.forward": [[329, 332], ["module_cross.CrossOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossOnlyNSPHead.__init__": [[335, 338], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossOnlyNSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossOnlyNSPHead.forward": [[339, 342], ["module_cross.CrossOnlyNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossPreTrainingHeads.__init__": [[345, 349], ["torch.nn.Module.__init__", "module_cross.CrossLMPredictionHead", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "cross_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "CrossPreTrainingHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "CrossLMPredictionHead", "(", "config", ",", "cross_model_embedding_weights", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossPreTrainingHeads.forward": [[350, 354], ["module_cross.CrossPreTrainingHeads.predictions", "module_cross.CrossPreTrainingHeads.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ",", "pooled_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossModel.__init__": [[357, 363], ["until_module.PreTrainedModel.__init__", "module_cross.CrossEmbeddings", "module_cross.CrossEncoder", "module_cross.CrossPooler", "module_cross.CrossModel.apply"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CrossModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "embeddings", "=", "CrossEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "CrossEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "CrossPooler", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_cross.CrossModel.forward": [[364, 395], ["torch.ones.unsqueeze().unsqueeze", "torch.ones.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "module_cross.CrossModel.embeddings", "module_cross.CrossModel.encoder", "module_cross.CrossModel.pooler", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "concat_input.size", "concat_input.size", "torch.ones.unsqueeze", "torch.ones.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "concat_input", ",", "concat_type", "=", "None", ",", "attention_mask", "=", "None", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "\n", "        ", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "concat_input", ".", "size", "(", "0", ")", ",", "concat_input", ".", "size", "(", "1", ")", ")", "\n", "", "if", "concat_type", "is", "None", ":", "\n", "            ", "concat_type", "=", "torch", ".", "zeros_like", "(", "attention_mask", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "embedding_output", "=", "self", ".", "embeddings", "(", "concat_input", ",", "concat_type", ")", "\n", "encoded_layers", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "extended_attention_mask", ",", "\n", "output_all_encoded_layers", "=", "output_all_encoded_layers", ")", "\n", "sequence_output", "=", "encoded_layers", "[", "-", "1", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "encoded_layers", "=", "encoded_layers", "[", "-", "1", "]", "\n", "", "return", "encoded_layers", ",", "pooled_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.url_to_filename": [[30, 46], ["url.encode", "hashlib.sha256", "hashlib.sha256.hexdigest", "etag.encode", "hashlib.sha256", "hashlib.sha256.hexdigest"], "function", ["None"], ["def", "url_to_filename", "(", "url", ":", "str", ",", "etag", ":", "str", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Convert `url` into a hashed filename in a repeatable way.\n    If `etag` is specified, append its hash to the url's, delimited\n    by a period.\n    \"\"\"", "\n", "url_bytes", "=", "url", ".", "encode", "(", "'utf-8'", ")", "\n", "url_hash", "=", "sha256", "(", "url_bytes", ")", "\n", "filename", "=", "url_hash", ".", "hexdigest", "(", ")", "\n", "\n", "if", "etag", ":", "\n", "        ", "etag_bytes", "=", "etag", ".", "encode", "(", "'utf-8'", ")", "\n", "etag_hash", "=", "sha256", "(", "etag_bytes", ")", "\n", "filename", "+=", "'.'", "+", "etag_hash", ".", "hexdigest", "(", ")", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.filename_to_url": [[48, 72], ["isinstance", "os.path.join", "str", "os.path.exists", "FileNotFoundError", "os.path.exists", "FileNotFoundError", "open", "json.load"], "function", ["None"], ["", "def", "filename_to_url", "(", "filename", ":", "str", ",", "cache_dir", ":", "Union", "[", "str", ",", "Path", "]", "=", "None", ")", "->", "Tuple", "[", "str", ",", "str", "]", ":", "\n", "    ", "\"\"\"\n    Return the url and etag (which may be ``None``) stored for `filename`.\n    Raise ``FileNotFoundError`` if `filename` or its stored metadata do not exist.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_PRETRAINED_BERT_CACHE", "\n", "", "if", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"file {} not found\"", ".", "format", "(", "cache_path", ")", ")", "\n", "\n", "", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"file {} not found\"", ".", "format", "(", "meta_path", ")", ")", "\n", "\n", "", "with", "open", "(", "meta_path", ")", "as", "meta_file", ":", "\n", "        ", "metadata", "=", "json", ".", "load", "(", "meta_file", ")", "\n", "", "url", "=", "metadata", "[", "'url'", "]", "\n", "etag", "=", "metadata", "[", "'etag'", "]", "\n", "\n", "return", "url", ",", "etag", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.cached_path": [[74, 102], ["isinstance", "isinstance", "urllib.parse.urlparse", "str", "str", "file_utils.get_from_cache", "os.path.exists", "FileNotFoundError", "ValueError"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.get_from_cache"], ["", "def", "cached_path", "(", "url_or_filename", ":", "Union", "[", "str", ",", "Path", "]", ",", "cache_dir", ":", "Union", "[", "str", ",", "Path", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_PRETRAINED_BERT_CACHE", "\n", "", "if", "isinstance", "(", "url_or_filename", ",", "Path", ")", ":", "\n", "        ", "url_or_filename", "=", "str", "(", "url_or_filename", ")", "\n", "", "if", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "\n", "if", "parsed", ".", "scheme", "in", "(", "'http'", ",", "'https'", ",", "'s3'", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "cache_dir", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "url_or_filename", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "url_or_filename", "\n", "", "elif", "parsed", ".", "scheme", "==", "''", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "FileNotFoundError", "(", "\"file {} not found\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.split_s3_path": [[104, 115], ["urllib.parse.urlparse", "s3_path.startswith", "ValueError"], "function", ["None"], ["", "", "def", "split_s3_path", "(", "url", ":", "str", ")", "->", "Tuple", "[", "str", ",", "str", "]", ":", "\n", "    ", "\"\"\"Split a full s3 path into the bucket name and path.\"\"\"", "\n", "parsed", "=", "urlparse", "(", "url", ")", "\n", "if", "not", "parsed", ".", "netloc", "or", "not", "parsed", ".", "path", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad s3 path {}\"", ".", "format", "(", "url", ")", ")", "\n", "", "bucket_name", "=", "parsed", ".", "netloc", "\n", "s3_path", "=", "parsed", ".", "path", "\n", "# Remove '/' at beginning of path.", "\n", "if", "s3_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "        ", "s3_path", "=", "s3_path", "[", "1", ":", "]", "\n", "", "return", "bucket_name", ",", "s3_path", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.s3_request": [[117, 134], ["functools.wraps", "func", "int", "FileNotFoundError"], "function", ["None"], ["", "def", "s3_request", "(", "func", ":", "Callable", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for s3 requests in order to create more helpful error\n    messages.\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "url", ":", "str", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "func", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "ClientError", "as", "exc", ":", "\n", "            ", "if", "int", "(", "exc", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", ")", "==", "404", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "\"file {} not found\"", ".", "format", "(", "url", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.s3_etag": [[136, 143], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Object"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_etag", "(", "url", ":", "str", ")", "->", "Optional", "[", "str", "]", ":", "\n", "    ", "\"\"\"Check ETag on S3 object.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_object", "=", "s3_resource", ".", "Object", "(", "bucket_name", ",", "s3_path", ")", "\n", "return", "s3_object", ".", "e_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.s3_get": [[145, 151], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Bucket().download_fileobj", "boto3.resource.Bucket"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_get", "(", "url", ":", "str", ",", "temp_file", ":", "IO", ")", "->", "None", ":", "\n", "    ", "\"\"\"Pull a file directly from S3.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_resource", ".", "Bucket", "(", "bucket_name", ")", ".", "download_fileobj", "(", "s3_path", ",", "temp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.http_get": [[153, 163], ["requests.get", "requests.get.headers.get", "tqdm.tqdm", "requests.get.iter_content", "tqdm.tqdm.close", "int", "tqdm.tqdm.update", "temp_file.write", "len"], "function", ["None"], ["", "def", "http_get", "(", "url", ":", "str", ",", "temp_file", ":", "IO", ")", "->", "None", ":", "\n", "    ", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "content_length", "=", "req", ".", "headers", ".", "get", "(", "'Content-Length'", ")", "\n", "total", "=", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "total", ")", "\n", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.get_from_cache": [[165, 222], ["isinstance", "os.makedirs", "url.startswith", "file_utils.url_to_filename", "os.path.join", "str", "file_utils.s3_etag", "requests.head", "requests.head.headers.get", "os.path.exists", "IOError", "tempfile.NamedTemporaryFile", "logger.info", "url.startswith", "temp_file.flush", "temp_file.seek", "logger.info", "logger.info", "logger.info", "file_utils.s3_get", "file_utils.http_get", "open", "shutil.copyfileobj", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.url_to_filename", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.s3_etag", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.s3_get", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.http_get"], ["", "def", "get_from_cache", "(", "url", ":", "str", ",", "cache_dir", ":", "Union", "[", "str", ",", "Path", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Given a URL, look for the corresponding dataset in the local cache.\n    If it's not there, download it. Then return the path to the cached file.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_PRETRAINED_BERT_CACHE", "\n", "", "if", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Get eTag to add to filename, if it exists.", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "        ", "etag", "=", "s3_etag", "(", "url", ")", "\n", "", "else", ":", "\n", "        ", "response", "=", "requests", ".", "head", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "            ", "raise", "IOError", "(", "\"HEAD request failed for url {} with status code {}\"", "\n", ".", "format", "(", "url", ",", "response", ".", "status_code", ")", ")", "\n", "", "etag", "=", "response", ".", "headers", ".", "get", "(", "\"ETag\"", ")", "\n", "\n", "", "filename", "=", "url_to_filename", "(", "url", ",", "etag", ")", "\n", "\n", "# get cache path to put the file", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "temp_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s not found in cache, downloading to %s\"", ",", "url", ",", "temp_file", ".", "name", ")", "\n", "\n", "# GET file object", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "                ", "s3_get", "(", "url", ",", "temp_file", ")", "\n", "", "else", ":", "\n", "                ", "http_get", "(", "url", ",", "temp_file", ")", "\n", "\n", "# we are copying the file before closing it, so flush to avoid truncation", "\n", "", "temp_file", ".", "flush", "(", ")", "\n", "# shutil.copyfileobj() starts at the current position, so go to the start", "\n", "temp_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "\"copying %s to cache at %s\"", ",", "temp_file", ".", "name", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "cache_file", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "temp_file", ",", "cache_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"creating metadata file for %s\"", ",", "cache_path", ")", "\n", "meta", "=", "{", "'url'", ":", "url", ",", "'etag'", ":", "etag", "}", "\n", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "with", "open", "(", "meta_path", ",", "'w'", ")", "as", "meta_file", ":", "\n", "                ", "json", ".", "dump", "(", "meta", ",", "meta_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"removing temp file %s\"", ",", "temp_file", ".", "name", ")", "\n", "\n", "", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.read_set_from_file": [[224, 234], ["set", "open", "set.add", "line.rstrip"], "function", ["None"], ["", "def", "read_set_from_file", "(", "filename", ":", "str", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "'''\n    Extract a de-duped collection (set) of text from a file.\n    Expected file format is one item per line.\n    '''", "\n", "collection", "=", "set", "(", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file_", ":", "\n", "        ", "for", "line", "in", "file_", ":", "\n", "            ", "collection", ".", "add", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "", "", "return", "collection", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.get_file_extension": [[236, 240], ["os.path.splitext", "ext.lower"], "function", ["None"], ["", "def", "get_file_extension", "(", "path", ":", "str", ",", "dot", "=", "True", ",", "lower", ":", "bool", "=", "True", ")", ":", "\n", "    ", "ext", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "[", "1", "]", "\n", "ext", "=", "ext", "if", "dot", "else", "ext", "[", "1", ":", "]", "\n", "return", "ext", ".", "lower", "(", ")", "if", "lower", "else", "ext", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.__init__": [[78, 89], ["tokenization.load_vocab", "collections.OrderedDict", "tokenization.BasicTokenizer", "tokenization.WordpieceTokenizer", "os.path.isfile", "ValueError", "int", "tokenization.BertTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ",", "max_len", "=", "None", ",", "never_split", "=", "(", "\"[UNK]\"", ",", "\"[SEP]\"", ",", "\"[MASK]\"", ",", "\"[CLS]\"", ")", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can't find a vocabulary file at path '{}'. To load the vocabulary from a Google pretrained \"", "\n", "\"model use `tokenizer = BertTokenizer.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ",", "never_split", "=", "never_split", ")", "\n", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "self", ".", "max_len", "=", "max_len", "if", "max_len", "is", "not", "None", "else", "int", "(", "1e12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.tokenize": [[90, 96], ["tokenization.BertTokenizer.basic_tokenizer.tokenize", "tokenization.BertTokenizer.wordpiece_tokenizer.tokenize", "split_tokens.append"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ")", ":", "\n", "            ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids": [[97, 113], ["len", "ValueError", "ids.append", "logger.error", "ids.append", "len"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of tokens into ids using the vocab.\"\"\"", "\n", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "token", "not", "in", "self", ".", "vocab", ":", "\n", "                ", "ids", ".", "append", "(", "self", ".", "vocab", "[", "\"[UNK]\"", "]", ")", "\n", "logger", ".", "error", "(", "\"Cannot find token '{}' in vocab. Using [UNK] insetad\"", ".", "format", "(", "token", ")", ")", "\n", "", "else", ":", "\n", "                ", "ids", ".", "append", "(", "self", ".", "vocab", "[", "token", "]", ")", "\n", "", "", "if", "len", "(", "ids", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Token indices sequence length is longer than the specified maximum \"", "\n", "\" sequence length for this BERT model ({} > {}). Running this\"", "\n", "\" sequence through BERT will result in indexing errors\"", ".", "format", "(", "len", "(", "ids", ")", ",", "self", ".", "max_len", ")", "\n", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_ids_to_tokens": [[114, 120], ["tokens.append"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of ids in tokens using the vocab.\"\"\"", "\n", "tokens", "=", "[", "]", "\n", "for", "i", "in", "ids", ":", "\n", "            ", "tokens", ".", "append", "(", "self", ".", "ids_to_tokens", "[", "i", "]", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.from_pretrained": [[121, 163], ["os.path.join", "os.path.isdir", "print", "cls", "os.path.dirname", "os.path.exists", "os.path.join", "file_utils.cached_path", "logger.info", "logger.info", "min", "os.path.abspath", "logger.error", "kwargs.get", "int"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.file_utils.cached_path"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name", ",", "cache_dir", "=", "None", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a PreTrainedBertModel from a pre-trained model file.\n        Download and cache the pre-trained model file if needed.\n        \"\"\"", "\n", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "pretrained_model_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "vocab_file", ")", "is", "False", ":", "\n", "            ", "if", "pretrained_model_name", "in", "PRETRAINED_VOCAB_ARCHIVE_MAP", ":", "\n", "                ", "vocab_file", "=", "PRETRAINED_VOCAB_ARCHIVE_MAP", "[", "pretrained_model_name", "]", "\n", "", "else", ":", "\n", "                ", "vocab_file", "=", "pretrained_model_name", "\n", "", "", "if", "os", ".", "path", ".", "isdir", "(", "vocab_file", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_file", ",", "VOCAB_NAME", ")", "\n", "# redirect to the cache, if necessary", "\n", "", "print", "(", "vocab_file", ")", "\n", "try", ":", "\n", "            ", "resolved_vocab_file", "=", "cached_path", "(", "vocab_file", ",", "cache_dir", "=", "cache_dir", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found. \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name", ",", "\n", "vocab_file", ")", ")", "\n", "return", "None", "\n", "", "if", "resolved_vocab_file", "==", "vocab_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading vocabulary file {}\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading vocabulary file {} from cache at {}\"", ".", "format", "(", "\n", "vocab_file", ",", "resolved_vocab_file", ")", ")", "\n", "", "if", "pretrained_model_name", "in", "PRETRAINED_VOCAB_POSITIONAL_EMBEDDINGS_SIZE_MAP", ":", "\n", "# if we're using a pretrained model, ensure the tokenizer wont index sequences longer", "\n", "# than the number of positional embeddings", "\n", "            ", "max_len", "=", "PRETRAINED_VOCAB_POSITIONAL_EMBEDDINGS_SIZE_MAP", "[", "pretrained_model_name", "]", "\n", "kwargs", "[", "'max_len'", "]", "=", "min", "(", "kwargs", ".", "get", "(", "'max_len'", ",", "int", "(", "1e12", ")", ")", ",", "max_len", ")", "\n", "kwargs", "[", "'never_split'", "]", "=", "(", "\"[UNK]\"", ",", "\"[SEP]\"", ",", "\"[PAD]\"", ",", "\"[CLS]\"", ",", "\"[MASK]\"", ")", "\n", "\n", "# Instantiate tokenizer.", "\n", "", "tokenizer", "=", "cls", "(", "resolved_vocab_file", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.add_tokens": [[164, 197], ["collections.OrderedDict", "tokenization.BertTokenizer.vocab.keys", "collections.OrderedDict", "model.resize_token_embeddings", "isinstance", "to_add_tokens.append", "len", "len", "tokenization.BertTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.until_module.PreTrainedModel.resize_token_embeddings"], ["", "def", "add_tokens", "(", "self", ",", "new_tokens", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        Add a list of new tokens to the tokenizer class. If the new tokens are not in the\n        vocabulary, they are added to it with indices starting from length of the current vocabulary.\n        Args:\n            new_tokens: list of string. Each string is a token to add. Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the ``unk_token`` to them).\n        Returns:\n            Number of tokens added to the vocabulary.\n        Examples::\n            # Let's see how to increase the vocabulary of Bert model and tokenizer\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n            model = BertModel.from_pretrained('bert-base-uncased')\n            num_added_toks = tokenizer.add_tokens(['new_tok1', 'my_new-tok2'])\n            print('We have added', num_added_toks, 'tokens')\n            model.resize_token_embeddings(len(tokenizer))  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e. the length of the tokenizer.\n        \"\"\"", "\n", "\n", "to_add_tokens", "=", "[", "]", "\n", "for", "token", "in", "new_tokens", ":", "\n", "            ", "assert", "isinstance", "(", "token", ",", "str", ")", "\n", "to_add_tokens", ".", "append", "(", "token", ")", "\n", "# logger.info(\"Adding %s to the vocabulary\", token)", "\n", "\n", "", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "token", "in", "self", ".", "vocab", ".", "keys", "(", ")", ":", "\n", "            ", "vocab", "[", "token", "]", "=", "self", ".", "vocab", "[", "token", "]", "\n", "", "for", "token", "in", "to_add_tokens", ":", "\n", "            ", "vocab", "[", "token", "]", "=", "len", "(", "vocab", ")", "\n", "", "self", ".", "vocab", "=", "self", ".", "wordpiece_tokenizer", ".", "vocab", "=", "vocab", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "\n", "model", ".", "resize_token_embeddings", "(", "new_num_tokens", "=", "len", "(", "vocab", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer.__init__": [[201, 209], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ",", "never_split", "=", "(", "\"[UNK]\"", ",", "\"[SEP]\"", ",", "\"[PAD]\"", ",", "\"[CLS]\"", ",", "\"[MASK]\"", ")", ")", ":", "\n", "        ", "\"\"\"Constructs a BasicTokenizer.\n\n        Args:\n          do_lower_case: Whether to lower case the input.\n        \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "never_split", "=", "never_split", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer.tokenize": [[210, 230], ["tokenization.BasicTokenizer._clean_text", "tokenization.BasicTokenizer._tokenize_chinese_chars", "tokenization.whitespace_tokenize", "tokenization.whitespace_tokenize", "split_tokens.extend", "tokenization.BasicTokenizer.lower", "tokenization.BasicTokenizer._run_strip_accents", "tokenization.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", "and", "token", "not", "in", "self", ".", "never_split", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._run_strip_accents": [[231, 241], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._run_split_on_punc": [[242, 263], ["list", "len", "tokenization._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "if", "text", "in", "self", ".", "never_split", ":", "\n", "            ", "return", "[", "text", "]", "\n", "", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._tokenize_chinese_chars": [[264, 276], ["ord", "tokenization.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._is_chinese_char": [[277, 298], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BasicTokenizer._clean_text": [[299, 311], ["ord", "tokenization._is_whitespace", "tokenization._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization._is_whitespace", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.__init__": [[315, 319], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ",", "max_input_chars_per_word", "=", "100", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize": [[320, 370], ["tokenization.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer`.\n\n        Returns:\n          A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.load_vocab": [[51, 64], ["collections.OrderedDict", "open", "reader.readline", "token.strip.strip"], "function", ["None"], ["def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "index", "=", "0", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "token", "=", "reader", ".", "readline", "(", ")", "\n", "if", "not", "token", ":", "\n", "                ", "break", "\n", "", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.whitespace_tokenize": [[66, 73], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a peice of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization._is_whitespace": [[371, 381], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization._is_control": [[383, 393], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization._is_punctuation": [[395, 409], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderConfig.__init__": [[51, 109], ["isinstance", "json.loads.items", "isinstance", "open", "json.loads", "ValueError", "reader.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "max_target_embeddings", "=", "128", ",", "\n", "num_decoder_layers", "=", "1", ")", ":", "\n", "        ", "\"\"\"Constructs DecoderConfig.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `DecoderModel`.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler. If string, \"gelu\", \"relu\" and \"swish\" are supported.\n            hidden_dropout_prob: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n                `DecoderModel`.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n            max_target_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            num_decoder_layers:\n        \"\"\"", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "max_target_embeddings", "=", "max_target_embeddings", "\n", "self", ".", "num_decoder_layers", "=", "num_decoder_layers", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertSelfOutput.__init__": [[113, 118], ["torch.nn.Module.__init__", "torch.nn.Linear", "until_module.LayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertSelfOutput.forward": [[119, 124], ["module_decoder.BertSelfOutput.dense", "module_decoder.BertSelfOutput.dropout", "module_decoder.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertIntermediate.__init__": [[126, 131], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertIntermediate.forward": [[132, 136], ["module_decoder.BertIntermediate.dense", "module_decoder.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertOutput.__init__": [[139, 144], ["torch.nn.Module.__init__", "torch.nn.Linear", "until_module.LayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertOutput.forward": [[145, 150], ["module_decoder.BertOutput.dense", "module_decoder.BertOutput.dropout", "module_decoder.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertPredictionHeadTransform.__init__": [[153, 159], ["torch.nn.Module.__init__", "torch.nn.Linear", "until_module.LayerNorm", "isinstance"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertPredictionHeadTransform.forward": [[160, 165], ["module_decoder.BertPredictionHeadTransform.dense", "module_decoder.BertPredictionHeadTransform.transform_act_fn", "module_decoder.BertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertLMPredictionHead.__init__": [[168, 179], ["torch.nn.Module.__init__", "module_decoder.BertPredictionHeadTransform", "torch.nn.Linear", "torch.nn.Parameter", "decoder_model_embedding_weights.size", "decoder_model_embedding_weights.size", "torch.zeros", "decoder_model_embedding_weights.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "decoder_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "BertPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "decoder_model_embedding_weights", ".", "size", "(", "1", ")", ",", "\n", "decoder_model_embedding_weights", ".", "size", "(", "0", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "decoder_model_embedding_weights", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "decoder_model_embedding_weights", ".", "size", "(", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertLMPredictionHead.forward": [[180, 184], ["module_decoder.BertLMPredictionHead.transform", "module_decoder.BertLMPredictionHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertOnlyMLMHead.__init__": [[187, 190], ["torch.nn.Module.__init__", "module_decoder.BertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "decoder_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ",", "decoder_model_embedding_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.BertOnlyMLMHead.forward": [[191, 194], ["module_decoder.BertOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.__init__": [[198, 214], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores": [[215, 219], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.forward": [[220, 248], ["module_decoder.MultiHeadAttention.query", "module_decoder.MultiHeadAttention.key", "module_decoder.MultiHeadAttention.value", "module_decoder.MultiHeadAttention.transpose_for_scores", "module_decoder.MultiHeadAttention.transpose_for_scores", "module_decoder.MultiHeadAttention.transpose_for_scores", "torch.matmul", "module_decoder.MultiHeadAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "module_decoder.MultiHeadAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.MultiHeadAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "q", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "k", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "v", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "return", "context_layer", ",", "attention_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.PositionwiseFeedForward.__init__": [[252, 258], ["torch.nn.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.LayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Conv1d", "(", "d_in", ",", "d_hid", ",", "1", ")", "# position-wise", "\n", "self", ".", "w_2", "=", "nn", ".", "Conv1d", "(", "d_hid", ",", "d_in", ",", "1", ")", "# position-wise", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.PositionwiseFeedForward.forward": [[259, 267], ["x.transpose", "module_decoder.PositionwiseFeedForward.w_2", "module_decoder.PositionwiseFeedForward.transpose", "module_decoder.PositionwiseFeedForward.dropout", "module_decoder.PositionwiseFeedForward.layer_norm", "module_decoder.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "output", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "w_2", "(", "ACT2FN", "[", "\"gelu\"", "]", "(", "self", ".", "w_1", "(", "output", ")", ")", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderAttention.__init__": [[269, 273], ["torch.nn.Module.__init__", "module_decoder.MultiHeadAttention", "module_decoder.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DecoderAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "att", "=", "MultiHeadAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderAttention.forward": [[274, 278], ["module_decoder.DecoderAttention.att", "module_decoder.DecoderAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "attention_mask", ")", ":", "\n", "        ", "att_output", ",", "attention_probs", "=", "self", ".", "att", "(", "q", ",", "k", ",", "v", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "att_output", ",", "q", ")", "\n", "return", "attention_output", ",", "attention_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderLayer.__init__": [[280, 286], ["torch.nn.Module.__init__", "module_decoder.DecoderAttention", "module_decoder.DecoderAttention", "module_decoder.BertIntermediate", "module_decoder.BertOutput"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "DecoderAttention", "(", "config", ")", "\n", "self", ".", "enc_attn", "=", "DecoderAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderLayer.forward": [[287, 293], ["module_decoder.DecoderLayer.slf_attn", "module_decoder.DecoderLayer.enc_attn", "module_decoder.DecoderLayer.intermediate", "module_decoder.DecoderLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_input", ",", "enc_output", ",", "slf_attn_mask", "=", "None", ",", "dec_enc_attn_mask", "=", "None", ")", ":", "\n", "        ", "slf_output", ",", "_", "=", "self", ".", "slf_attn", "(", "dec_input", ",", "dec_input", ",", "dec_input", ",", "slf_attn_mask", ")", "\n", "dec_output", ",", "dec_att_scores", "=", "self", ".", "enc_attn", "(", "slf_output", ",", "enc_output", ",", "enc_output", ",", "dec_enc_attn_mask", ")", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "dec_output", ")", "\n", "dec_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "dec_output", ")", "\n", "return", "dec_output", ",", "dec_att_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderEmbeddings.__init__": [[297, 308], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "until_module.LayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "decoder_word_embeddings_weight", ",", "decoder_position_embeddings_weight", ")", ":", "\n", "        ", "super", "(", "DecoderEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_target_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "word_embeddings", ".", "weight", "=", "decoder_word_embeddings_weight", "\n", "self", ".", "position_embeddings", ".", "weight", "=", "decoder_position_embeddings_weight", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderEmbeddings.forward": [[309, 321], ["input_ids.size", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "module_decoder.DecoderEmbeddings.word_embeddings", "module_decoder.DecoderEmbeddings.position_embeddings", "module_decoder.DecoderEmbeddings.LayerNorm", "module_decoder.DecoderEmbeddings.dropout", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "\n", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.Decoder.__init__": [[323, 327], ["torch.nn.Module.__init__", "module_decoder.DecoderLayer", "torch.nn.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "DecoderLayer", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "num_decoder_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.Decoder.forward": [[328, 341], ["layer_module", "all_encoder_layers.append", "all_dec_att_probs.append", "all_encoder_layers.append", "all_dec_att_probs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "encoder_outs", ",", "self_attn_mask", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "False", ")", ":", "\n", "        ", "dec_att_scores", "=", "None", "\n", "all_encoder_layers", "=", "[", "]", "\n", "all_dec_att_probs", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", ",", "dec_att_scores", "=", "layer_module", "(", "hidden_states", ",", "encoder_outs", ",", "self_attn_mask", ",", "attention_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "all_dec_att_probs", ".", "append", "(", "dec_att_scores", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "all_dec_att_probs", ".", "append", "(", "dec_att_scores", ")", "\n", "", "return", "all_encoder_layers", ",", "all_dec_att_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderClassifier.__init__": [[343, 346], ["torch.nn.Module.__init__", "module_decoder.BertOnlyMLMHead"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "embedding_weights", ")", ":", "\n", "        ", "super", "(", "DecoderClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "config", ",", "embedding_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderClassifier.forward": [[347, 350], ["module_decoder.DecoderClassifier.cls"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "cls_scores", "=", "self", ".", "cls", "(", "hidden_states", ")", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderModel.__init__": [[363, 371], ["until_module.PreTrainedModel.__init__", "module_decoder.DecoderEmbeddings", "module_decoder.Decoder", "module_decoder.DecoderClassifier", "module_decoder.DecoderModel.apply"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "decoder_word_embeddings_weight", ",", "decoder_position_embeddings_weight", ")", ":", "\n", "        ", "super", "(", "DecoderModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "max_target_length", "=", "config", ".", "max_target_embeddings", "\n", "self", ".", "embeddings", "=", "DecoderEmbeddings", "(", "config", ",", "decoder_word_embeddings_weight", ",", "decoder_position_embeddings_weight", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "config", ")", "\n", "self", ".", "classifier", "=", "DecoderClassifier", "(", "config", ",", "decoder_word_embeddings_weight", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.modules.module_decoder.DecoderModel.forward": [[372, 407], ["module_decoder.DecoderModel.embeddings", "encoder_mask.unsqueeze().unsqueeze", "extended_encoder_mask.to.to.to", "answer_mask.unsqueeze().unsqueeze", "extended_answer_mask.to.to.to", "module_decoder.DecoderModel.size", "torch.triu", "torch.triu.unsqueeze().expand().unsqueeze", "module_decoder.DecoderModel.decoder", "module_decoder.DecoderModel.classifier", "torch.ones", "encoder_mask.unsqueeze", "answer_mask.unsqueeze", "torch.triu.unsqueeze().expand", "torch.triu.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "encoder_outs", "=", "None", ",", "answer_mask", "=", "None", ",", "encoder_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_ids (LongTensor): previous decoder outputs of shape `(batch, tgt_len)`, for input feeding/teacher forcing\n            encoder_outs (Tensor, optional): output from the encoder, used for encoder-side attention\n\n        Returns:\n            tuple:\n                - the last decoder layer's output of shape `(batch, tgt_len, vocab)`\n                - the last decoder layer's attention weights of shape `(batch, tgt_len, src_len)`\n        \"\"\"", "\n", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ")", "\n", "\n", "extended_encoder_mask", "=", "encoder_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "# b x 1 x 1 x ls", "\n", "extended_encoder_mask", "=", "extended_encoder_mask", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_encoder_mask", "=", "(", "1.0", "-", "extended_encoder_mask", ")", "*", "-", "10000.0", "\n", "\n", "extended_answer_mask", "=", "answer_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "extended_answer_mask", "=", "extended_answer_mask", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ")", "# fp16 compatibility", "\n", "\n", "sz_b", ",", "len_s", ",", "_", "=", "embedding_output", ".", "size", "(", ")", "\n", "subsequent_mask", "=", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "len_s", ",", "len_s", ")", ",", "device", "=", "embedding_output", ".", "device", ",", "dtype", "=", "embedding_output", ".", "dtype", ")", ",", "diagonal", "=", "1", ")", "\n", "self_attn_mask", "=", "subsequent_mask", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "sz_b", ",", "-", "1", ",", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "# b x 1 x ls x ls", "\n", "slf_attn_mask", "=", "(", "(", "1.0", "-", "extended_answer_mask", ")", "+", "self_attn_mask", ")", ".", "gt", "(", "0", ")", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ")", "\n", "self_attn_mask", "=", "slf_attn_mask", "*", "-", "10000.0", "\n", "\n", "decoded_layers", ",", "dec_att_scores", "=", "self", ".", "decoder", "(", "embedding_output", ",", "\n", "encoder_outs", ",", "\n", "self_attn_mask", ",", "\n", "extended_encoder_mask", ",", "\n", ")", "\n", "sequence_output", "=", "decoded_layers", "[", "-", "1", "]", "\n", "cls_scores", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "return", "cls_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.__init__": [[17, 64], ["pandas.read_csv", "json.load", "pickle.load", "collections.defaultdict", "len", "open", "open", "range", "len", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.video_sentences_dict[].append", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.video_sentences_dict[].append", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "csv_path", ",", "\n", "json_path", ",", "\n", "features_path", ",", "\n", "tokenizer", ",", "\n", "max_words", "=", "30", ",", "\n", "feature_framerate", "=", "1.0", ",", "\n", "max_frames", "=", "100", ",", "\n", "split_type", "=", "\"\"", "\n", ")", ":", "\n", "        ", "self", ".", "csv", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "self", ".", "data", "=", "json", ".", "load", "(", "open", "(", "json_path", ",", "'r'", ")", ")", "\n", "self", ".", "feature_dict", "=", "pickle", ".", "load", "(", "open", "(", "features_path", ",", "'rb'", ")", ")", "\n", "self", ".", "feature_framerate", "=", "feature_framerate", "\n", "self", ".", "max_words", "=", "max_words", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n", "self", ".", "feature_size", "=", "self", ".", "feature_dict", "[", "self", ".", "csv", "[", "'video_id'", "]", ".", "values", "[", "0", "]", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n", "assert", "split_type", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "# Train: video0 : video6512 (6513)", "\n", "# Val: video6513 : video7009 (497)", "\n", "# Test: video7010 : video9999 (2990)", "\n", "video_ids", "=", "[", "self", ".", "data", "[", "'videos'", "]", "[", "idx", "]", "[", "'video_id'", "]", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "data", "[", "'videos'", "]", ")", ")", "]", "\n", "split_dict", "=", "{", "\"train\"", ":", "video_ids", "[", ":", "6513", "]", ",", "\"val\"", ":", "video_ids", "[", "6513", ":", "6513", "+", "497", "]", ",", "\"test\"", ":", "video_ids", "[", "6513", "+", "497", ":", "]", "}", "\n", "choiced_video_ids", "=", "split_dict", "[", "split_type", "]", "\n", "\n", "self", ".", "sample_len", "=", "0", "\n", "self", ".", "sentences_dict", "=", "{", "}", "\n", "self", ".", "video_sentences_dict", "=", "defaultdict", "(", "list", ")", "\n", "if", "split_type", "==", "\"train\"", ":", "# expand all sentence to train", "\n", "            ", "for", "itm", "in", "self", ".", "data", "[", "'sentences'", "]", ":", "\n", "                ", "if", "itm", "[", "'video_id'", "]", "in", "choiced_video_ids", ":", "\n", "                    ", "self", ".", "sentences_dict", "[", "len", "(", "self", ".", "sentences_dict", ")", "]", "=", "(", "itm", "[", "'video_id'", "]", ",", "itm", "[", "'caption'", "]", ")", "\n", "self", ".", "video_sentences_dict", "[", "itm", "[", "'video_id'", "]", "]", ".", "append", "(", "itm", "[", "'caption'", "]", ")", "\n", "", "", "", "elif", "split_type", "==", "\"val\"", "or", "split_type", "==", "\"test\"", ":", "\n", "            ", "for", "itm", "in", "self", ".", "data", "[", "'sentences'", "]", ":", "\n", "                ", "if", "itm", "[", "'video_id'", "]", "in", "choiced_video_ids", ":", "\n", "                    ", "self", ".", "video_sentences_dict", "[", "itm", "[", "'video_id'", "]", "]", ".", "append", "(", "itm", "[", "'caption'", "]", ")", "\n", "", "", "for", "vid", "in", "choiced_video_ids", ":", "\n", "                ", "self", ".", "sentences_dict", "[", "len", "(", "self", ".", "sentences_dict", ")", "]", "=", "(", "vid", ",", "self", ".", "video_sentences_dict", "[", "vid", "]", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "sample_len", "=", "len", "(", "self", ".", "sentences_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.__len__": [[65, 67], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_len", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader._get_text": [[68, 169], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "words.copy", "enumerate", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.tokenizer.convert_tokens_to_ids", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.tokenizer.convert_tokens_to_ids", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.tokenizer.convert_tokens_to_ids", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.tokenizer.convert_tokens_to_ids", "numpy.array", "numpy.array", "numpy.array", "len", "random.random", "len", "len", "len", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.append", "input_mask.append", "segment_ids.append", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.append", "token_labels.append", "len", "len", "len", "len", "len", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.tokenizer.tokenize", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader._get_single_text", "len", "len", "len", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.append", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.append", "decoder_mask.append", "len", "len", "len", "token_labels.append", "token_labels.append", "token_labels.append", "len", "token_labels.append", "random.choice", "list", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.tokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_single_text"], ["", "def", "_get_text", "(", "self", ",", "video_id", ",", "caption", "=", "None", ")", ":", "\n", "        ", "k", "=", "1", "\n", "choice_video_ids", "=", "[", "video_id", "]", "\n", "pairs_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_mask", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_segment", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_masked_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_token_labels", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "pairs_input_caption_ids", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_output_caption_ids", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_decoder_mask", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "for", "i", ",", "video_id", "in", "enumerate", "(", "choice_video_ids", ")", ":", "\n", "            ", "words", "=", "[", "]", "\n", "words", "=", "[", "\"[CLS]\"", "]", "+", "words", "\n", "total_length_with_CLS", "=", "self", ".", "max_words", "-", "1", "\n", "if", "len", "(", "words", ")", ">", "total_length_with_CLS", ":", "\n", "                ", "words", "=", "words", "[", ":", "total_length_with_CLS", "]", "\n", "", "words", "=", "words", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "# Mask Language Model <-----", "\n", "token_labels", "=", "[", "]", "\n", "masked_tokens", "=", "words", ".", "copy", "(", ")", "\n", "for", "token_id", ",", "token", "in", "enumerate", "(", "masked_tokens", ")", ":", "\n", "                ", "if", "token_id", "==", "0", "or", "token_id", "==", "len", "(", "masked_tokens", ")", "-", "1", ":", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "continue", "\n", "", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                    ", "prob", "/=", "0.15", "\n", "# 80% randomly change token to mask token", "\n", "if", "prob", "<", "0.8", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "\"[MASK]\"", "\n", "# 10% randomly change token to random token", "\n", "", "elif", "prob", "<", "0.9", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "tokenizer", ".", "vocab", ".", "items", "(", ")", ")", ")", "[", "0", "]", "\n", "# -> rest 10% randomly keep current token", "\n", "# append current token to output (we will predict these later)", "\n", "", "try", ":", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "token", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "# For unknown words (should not occur with BPE vocab)", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "\"[UNK]\"", "]", ")", "\n", "# print(\"Cannot find token '{}' in vocab. Using [UNK] insetad\".format(token))", "\n", "", "", "else", ":", "\n", "# no masking token (will be ignored by loss function later)", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "# -----> Mask Language Model", "\n", "\n", "", "", "input_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "masked_token_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "masked_tokens", ")", "\n", "while", "len", "(", "input_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "masked_token_ids", ".", "append", "(", "0", ")", "\n", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "input_mask", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "segment_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "masked_token_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "token_labels", ")", "==", "self", ".", "max_words", "\n", "\n", "pairs_text", "[", "i", "]", "=", "np", ".", "array", "(", "input_ids", ")", "\n", "pairs_mask", "[", "i", "]", "=", "np", ".", "array", "(", "input_mask", ")", "\n", "pairs_segment", "[", "i", "]", "=", "np", ".", "array", "(", "segment_ids", ")", "\n", "pairs_masked_text", "[", "i", "]", "=", "np", ".", "array", "(", "masked_token_ids", ")", "\n", "pairs_token_labels", "[", "i", "]", "=", "np", ".", "array", "(", "token_labels", ")", "\n", "\n", "# For generate captions", "\n", "if", "caption", "is", "not", "None", ":", "\n", "                ", "caption_words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "caption", ")", "\n", "", "else", ":", "\n", "                ", "caption_words", "=", "self", ".", "_get_single_text", "(", "video_id", ")", "\n", "", "if", "len", "(", "caption_words", ")", ">", "total_length_with_CLS", ":", "\n", "                ", "caption_words", "=", "caption_words", "[", ":", "total_length_with_CLS", "]", "\n", "", "input_caption_words", "=", "[", "\"[CLS]\"", "]", "+", "caption_words", "\n", "output_caption_words", "=", "caption_words", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "# For generate captions", "\n", "input_caption_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_caption_words", ")", "\n", "output_caption_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "output_caption_words", ")", "\n", "decoder_mask", "=", "[", "1", "]", "*", "len", "(", "input_caption_ids", ")", "\n", "while", "len", "(", "input_caption_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                ", "input_caption_ids", ".", "append", "(", "0", ")", "\n", "output_caption_ids", ".", "append", "(", "0", ")", "\n", "decoder_mask", ".", "append", "(", "0", ")", "\n", "", "assert", "len", "(", "input_caption_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "output_caption_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "decoder_mask", ")", "==", "self", ".", "max_words", "\n", "\n", "pairs_input_caption_ids", "[", "i", "]", "=", "np", ".", "array", "(", "input_caption_ids", ")", "\n", "pairs_output_caption_ids", "[", "i", "]", "=", "np", ".", "array", "(", "output_caption_ids", ")", "\n", "pairs_decoder_mask", "[", "i", "]", "=", "np", ".", "array", "(", "decoder_mask", ")", "\n", "\n", "", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", ",", "choice_video_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader._get_single_text": [[170, 175], ["random.randint", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.tokenizer.tokenize", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "_get_single_text", "(", "self", ",", "video_id", ")", ":", "\n", "        ", "rind", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "sentences", "[", "video_id", "]", ")", "-", "1", ")", "\n", "caption", "=", "self", ".", "sentences", "[", "video_id", "]", "[", "rind", "]", "\n", "words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "caption", ")", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader._get_video": [[176, 216], ["numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "numpy.zeros.copy", "enumerate", "numpy.array", "len", "enumerate", "len", "len", "len", "print", "range", "len", "random.random", "video_labels_index[].append", "video_labels_index[].append", "video_labels_index[].append"], "methods", ["None"], ["", "def", "_get_video", "(", "self", ",", "choice_video_ids", ")", ":", "\n", "        ", "video_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "choice_video_ids", ")", ",", "self", ".", "max_frames", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "max_video_length", "=", "[", "0", "]", "*", "len", "(", "choice_video_ids", ")", "\n", "\n", "video", "=", "np", ".", "zeros", "(", "(", "len", "(", "choice_video_ids", ")", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "video_id", "in", "enumerate", "(", "choice_video_ids", ")", ":", "\n", "            ", "video_slice", "=", "self", ".", "feature_dict", "[", "video_id", "]", "\n", "\n", "if", "self", ".", "max_frames", "<", "video_slice", ".", "shape", "[", "0", "]", ":", "\n", "                ", "video_slice", "=", "video_slice", "[", ":", "self", ".", "max_frames", "]", "\n", "\n", "", "slice_shape", "=", "video_slice", ".", "shape", "\n", "max_video_length", "[", "i", "]", "=", "max_video_length", "[", "i", "]", "if", "max_video_length", "[", "i", "]", ">", "slice_shape", "[", "0", "]", "else", "slice_shape", "[", "0", "]", "\n", "if", "len", "(", "video_slice", ")", "<", "1", ":", "\n", "                ", "print", "(", "\"video_id: {}\"", ".", "format", "(", "video_id", ")", ")", "\n", "", "else", ":", "\n", "                ", "video", "[", "i", "]", "[", ":", "slice_shape", "[", "0", "]", "]", "=", "video_slice", "\n", "\n", "", "", "for", "i", ",", "v_length", "in", "enumerate", "(", "max_video_length", ")", ":", "\n", "            ", "video_mask", "[", "i", "]", "[", ":", "v_length", "]", "=", "[", "1", "]", "*", "v_length", "\n", "\n", "# Mask Frame Model <-----", "\n", "", "video_labels_index", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "choice_video_ids", ")", ")", "]", "\n", "masked_video", "=", "video", ".", "copy", "(", ")", "\n", "for", "i", ",", "video_pair_", "in", "enumerate", "(", "masked_video", ")", ":", "\n", "            ", "for", "j", ",", "_", "in", "enumerate", "(", "video_pair_", ")", ":", "\n", "                ", "if", "j", "<", "max_video_length", "[", "i", "]", ":", "\n", "                    ", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                        ", "masked_video", "[", "i", "]", "[", "j", "]", "=", "[", "0.", "]", "*", "video", ".", "shape", "[", "-", "1", "]", "\n", "video_labels_index", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "", "else", ":", "\n", "                        ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "", "video_labels_index", "=", "np", ".", "array", "(", "video_labels_index", ",", "dtype", "=", "np", ".", "long", ")", "\n", "# -----> Mask Frame Model", "\n", "\n", "return", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader.__getitem__": [[217, 230], ["dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader._get_text", "dataloader_msrvtt_caption.MSRVTT_Caption_DataLoader._get_video"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_text", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_video"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "video_id", ",", "caption", "=", "self", ".", "sentences_dict", "[", "idx", "]", "\n", "\n", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", ",", "choice_video_ids", "=", "self", ".", "_get_text", "(", "video_id", ",", "caption", ")", "\n", "\n", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "=", "self", ".", "_get_video", "(", "choice_video_ids", ")", "\n", "\n", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_caption.Youcook_Caption_DataLoader.__init__": [[17, 52], ["pandas.read_csv", "pickle.load", "pickle.load", "open", "open", "len", "range", "enumerate"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "csv", ",", "\n", "data_path", ",", "\n", "features_path", ",", "\n", "tokenizer", ",", "\n", "feature_framerate", "=", "1.0", ",", "\n", "max_words", "=", "30", ",", "\n", "max_frames", "=", "100", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n        \"\"\"", "\n", "self", ".", "csv", "=", "pd", ".", "read_csv", "(", "csv", ")", "\n", "self", ".", "data_dict", "=", "pickle", ".", "load", "(", "open", "(", "data_path", ",", "'rb'", ")", ")", "\n", "self", ".", "feature_dict", "=", "pickle", ".", "load", "(", "open", "(", "features_path", ",", "'rb'", ")", ")", "\n", "self", ".", "feature_framerate", "=", "feature_framerate", "\n", "self", ".", "max_words", "=", "max_words", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n", "self", ".", "feature_size", "=", "self", ".", "feature_dict", "[", "self", ".", "csv", "[", "\"feature_file\"", "]", ".", "values", "[", "0", "]", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# Get iterator video ids", "\n", "video_id_list", "=", "[", "itm", "for", "itm", "in", "self", ".", "csv", "[", "'video_id'", "]", ".", "values", "]", "\n", "self", ".", "video_id2idx_dict", "=", "{", "video_id", ":", "id", "for", "id", ",", "video_id", "in", "enumerate", "(", "video_id_list", ")", "}", "\n", "# Get all captions", "\n", "self", ".", "iter2video_pairs_dict", "=", "{", "}", "\n", "iter_idx_", "=", "0", "\n", "for", "video_id", "in", "video_id_list", ":", "\n", "            ", "data_dict", "=", "self", ".", "data_dict", "[", "video_id", "]", "\n", "n_caption", "=", "len", "(", "data_dict", "[", "'start'", "]", ")", "\n", "for", "sub_id", "in", "range", "(", "n_caption", ")", ":", "\n", "                ", "self", ".", "iter2video_pairs_dict", "[", "iter_idx_", "]", "=", "(", "video_id", ",", "sub_id", ")", "\n", "iter_idx_", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_caption.Youcook_Caption_DataLoader.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "iter2video_pairs_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_caption.Youcook_Caption_DataLoader._get_text": [[56, 166], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "dataloader_youcook_caption.Youcook_Caption_DataLoader.tokenizer.tokenize", "dataloader_youcook_caption.Youcook_Caption_DataLoader.copy", "enumerate", "dataloader_youcook_caption.Youcook_Caption_DataLoader.tokenizer.convert_tokens_to_ids", "dataloader_youcook_caption.Youcook_Caption_DataLoader.tokenizer.convert_tokens_to_ids", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "dataloader_youcook_caption.Youcook_Caption_DataLoader.tokenizer.tokenize", "dataloader_youcook_caption.Youcook_Caption_DataLoader.tokenizer.convert_tokens_to_ids", "dataloader_youcook_caption.Youcook_Caption_DataLoader.tokenizer.convert_tokens_to_ids", "numpy.array", "numpy.array", "numpy.array", "len", "random.random", "len", "len", "len", "dataloader_youcook_caption.Youcook_Caption_DataLoader.append", "input_mask.append", "segment_ids.append", "dataloader_youcook_caption.Youcook_Caption_DataLoader.append", "token_labels.append", "len", "len", "len", "len", "len", "len", "len", "len", "dataloader_youcook_caption.Youcook_Caption_DataLoader.append", "dataloader_youcook_caption.Youcook_Caption_DataLoader.append", "decoder_mask.append", "len", "len", "len", "token_labels.append", "token_labels.append", "token_labels.append", "len", "token_labels.append", "random.choice", "list", "dataloader_youcook_caption.Youcook_Caption_DataLoader.tokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids"], ["", "def", "_get_text", "(", "self", ",", "video_id", ",", "sub_id", ")", ":", "\n", "        ", "data_dict", "=", "self", ".", "data_dict", "[", "video_id", "]", "\n", "k", "=", "1", "\n", "r_ind", "=", "[", "sub_id", "]", "\n", "\n", "starts", "=", "np", ".", "zeros", "(", "k", ")", "\n", "ends", "=", "np", ".", "zeros", "(", "k", ")", "\n", "pairs_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_mask", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_segment", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_masked_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_token_labels", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "pairs_input_caption_ids", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_output_caption_ids", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_decoder_mask", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "ind", "=", "r_ind", "[", "i", "]", "\n", "start_", ",", "end_", "=", "data_dict", "[", "'start'", "]", "[", "ind", "]", ",", "data_dict", "[", "'end'", "]", "[", "ind", "]", "\n", "starts", "[", "i", "]", ",", "ends", "[", "i", "]", "=", "start_", ",", "end_", "\n", "total_length_with_CLS", "=", "self", ".", "max_words", "-", "1", "\n", "words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "data_dict", "[", "'transcript'", "]", "[", "ind", "]", ")", "\n", "\n", "words", "=", "[", "\"[CLS]\"", "]", "+", "words", "\n", "if", "len", "(", "words", ")", ">", "total_length_with_CLS", ":", "\n", "                ", "words", "=", "words", "[", ":", "total_length_with_CLS", "]", "\n", "", "words", "=", "words", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "# Mask Language Model <-----", "\n", "token_labels", "=", "[", "]", "\n", "masked_tokens", "=", "words", ".", "copy", "(", ")", "\n", "for", "token_id", ",", "token", "in", "enumerate", "(", "masked_tokens", ")", ":", "\n", "                ", "if", "token_id", "==", "0", "or", "token_id", "==", "len", "(", "masked_tokens", ")", "-", "1", ":", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "continue", "\n", "", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                    ", "prob", "/=", "0.15", "\n", "\n", "# 80% randomly change token to mask token", "\n", "if", "prob", "<", "0.8", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "\"[MASK]\"", "\n", "\n", "# 10% randomly change token to random token", "\n", "", "elif", "prob", "<", "0.9", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "tokenizer", ".", "vocab", ".", "items", "(", ")", ")", ")", "[", "0", "]", "\n", "\n", "# -> rest 10% randomly keep current token", "\n", "\n", "# append current token to output (we will predict these later)", "\n", "", "try", ":", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "token", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "# For unknown words (should not occur with BPE vocab)", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "\"[UNK]\"", "]", ")", "\n", "# print(\"Cannot find token '{}' in vocab. Using [UNK] insetad\".format(token))", "\n", "", "", "else", ":", "\n", "# no masking token (will be ignored by loss function later)", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "# -----> Mask Language Model", "\n", "\n", "", "", "input_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "masked_token_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "masked_tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "while", "len", "(", "input_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "masked_token_ids", ".", "append", "(", "0", ")", "\n", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "input_mask", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "segment_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "masked_token_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "token_labels", ")", "==", "self", ".", "max_words", "\n", "\n", "pairs_text", "[", "i", "]", "=", "np", ".", "array", "(", "input_ids", ")", "\n", "pairs_mask", "[", "i", "]", "=", "np", ".", "array", "(", "input_mask", ")", "\n", "pairs_segment", "[", "i", "]", "=", "np", ".", "array", "(", "segment_ids", ")", "\n", "pairs_masked_text", "[", "i", "]", "=", "np", ".", "array", "(", "masked_token_ids", ")", "\n", "pairs_token_labels", "[", "i", "]", "=", "np", ".", "array", "(", "token_labels", ")", "\n", "\n", "# For generate captions", "\n", "caption_words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "data_dict", "[", "'text'", "]", "[", "ind", "]", ")", "\n", "if", "len", "(", "caption_words", ")", ">", "total_length_with_CLS", ":", "\n", "                ", "caption_words", "=", "caption_words", "[", ":", "total_length_with_CLS", "]", "\n", "", "input_caption_words", "=", "[", "\"[CLS]\"", "]", "+", "caption_words", "\n", "output_caption_words", "=", "caption_words", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "# For generate captions", "\n", "input_caption_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_caption_words", ")", "\n", "output_caption_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "output_caption_words", ")", "\n", "decoder_mask", "=", "[", "1", "]", "*", "len", "(", "input_caption_ids", ")", "\n", "while", "len", "(", "input_caption_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                ", "input_caption_ids", ".", "append", "(", "0", ")", "\n", "output_caption_ids", ".", "append", "(", "0", ")", "\n", "decoder_mask", ".", "append", "(", "0", ")", "\n", "", "assert", "len", "(", "input_caption_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "output_caption_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "decoder_mask", ")", "==", "self", ".", "max_words", "\n", "\n", "pairs_input_caption_ids", "[", "i", "]", "=", "np", ".", "array", "(", "input_caption_ids", ")", "\n", "pairs_output_caption_ids", "[", "i", "]", "=", "np", ".", "array", "(", "output_caption_ids", ")", "\n", "pairs_decoder_mask", "[", "i", "]", "=", "np", ".", "array", "(", "decoder_mask", ")", "\n", "\n", "", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", ",", "starts", ",", "ends", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_caption.Youcook_Caption_DataLoader._get_video": [[167, 211], ["numpy.zeros", "numpy.zeros", "range", "enumerate", "numpy.zeros.copy", "enumerate", "numpy.array", "len", "len", "int", "enumerate", "len", "len", "int", "len", "print", "range", "len", "random.random", "video_labels_index[].append", "video_labels_index[].append", "video_labels_index[].append"], "methods", ["None"], ["", "def", "_get_video", "(", "self", ",", "idx", ",", "s", ",", "e", ")", ":", "\n", "        ", "video_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "s", ")", ",", "self", ".", "max_frames", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "max_video_length", "=", "[", "0", "]", "*", "len", "(", "s", ")", "\n", "\n", "video_features", "=", "self", ".", "feature_dict", "[", "self", ".", "csv", "[", "\"feature_file\"", "]", ".", "values", "[", "idx", "]", "]", "\n", "video", "=", "np", ".", "zeros", "(", "(", "len", "(", "s", ")", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "s", ")", ")", ":", "\n", "            ", "start", "=", "int", "(", "s", "[", "i", "]", "*", "self", ".", "feature_framerate", ")", "\n", "end", "=", "int", "(", "e", "[", "i", "]", "*", "self", ".", "feature_framerate", ")", "+", "1", "\n", "video_slice", "=", "video_features", "[", "start", ":", "end", "]", "\n", "\n", "if", "self", ".", "max_frames", "<", "video_slice", ".", "shape", "[", "0", "]", ":", "\n", "                ", "video_slice", "=", "video_slice", "[", ":", "self", ".", "max_frames", "]", "\n", "\n", "", "slice_shape", "=", "video_slice", ".", "shape", "\n", "max_video_length", "[", "i", "]", "=", "max_video_length", "[", "i", "]", "if", "max_video_length", "[", "i", "]", ">", "slice_shape", "[", "0", "]", "else", "slice_shape", "[", "0", "]", "\n", "if", "len", "(", "video_slice", ")", "<", "1", ":", "\n", "                ", "print", "(", "\"video_id: {}, start: {}, end: {}\"", ".", "format", "(", "self", ".", "csv", "[", "\"video_id\"", "]", ".", "values", "[", "idx", "]", ",", "start", ",", "end", ")", ")", "\n", "# pass", "\n", "", "else", ":", "\n", "                ", "video", "[", "i", "]", "[", ":", "slice_shape", "[", "0", "]", "]", "=", "video_slice", "\n", "\n", "", "", "for", "i", ",", "v_length", "in", "enumerate", "(", "max_video_length", ")", ":", "\n", "            ", "video_mask", "[", "i", "]", "[", ":", "v_length", "]", "=", "[", "1", "]", "*", "v_length", "\n", "\n", "# Mask Frame Model <-----", "\n", "", "video_labels_index", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "s", ")", ")", "]", "\n", "masked_video", "=", "video", ".", "copy", "(", ")", "\n", "for", "i", ",", "video_pair_", "in", "enumerate", "(", "masked_video", ")", ":", "\n", "            ", "for", "j", ",", "_", "in", "enumerate", "(", "video_pair_", ")", ":", "\n", "                ", "if", "j", "<", "max_video_length", "[", "i", "]", ":", "\n", "                    ", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                        ", "masked_video", "[", "i", "]", "[", "j", "]", "=", "[", "0.", "]", "*", "video", ".", "shape", "[", "-", "1", "]", "\n", "video_labels_index", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "", "else", ":", "\n", "                        ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "", "video_labels_index", "=", "np", ".", "array", "(", "video_labels_index", ",", "dtype", "=", "np", ".", "long", ")", "\n", "# -----> Mask Frame Model", "\n", "\n", "return", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_caption.Youcook_Caption_DataLoader.__getitem__": [[212, 226], ["dataloader_youcook_caption.Youcook_Caption_DataLoader._get_text", "dataloader_youcook_caption.Youcook_Caption_DataLoader._get_video"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_text", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_video"], ["", "def", "__getitem__", "(", "self", ",", "feature_idx", ")", ":", "\n", "\n", "        ", "video_id", ",", "sub_id", "=", "self", ".", "iter2video_pairs_dict", "[", "feature_idx", "]", "\n", "idx", "=", "self", ".", "video_id2idx_dict", "[", "video_id", "]", "\n", "\n", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", ",", "starts", ",", "ends", "=", "self", ".", "_get_text", "(", "video_id", ",", "sub_id", ")", "\n", "\n", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "=", "self", ".", "_get_video", "(", "idx", ",", "starts", ",", "ends", ")", "\n", "\n", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader.__init__": [[18, 99], ["pandas.read_csv", "len", "len", "len", "enumerate", "range", "list", "sub_list.append", "range", "numpy.arange", "numpy.arange", "len", "sub_list.append", "len", "sub_list.append"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "csv", ",", "\n", "features_path", ",", "\n", "data_dict", ",", "\n", "tokenizer", ",", "\n", "min_time", "=", "10.0", ",", "\n", "feature_framerate", "=", "1.0", ",", "\n", "max_words", "=", "30", ",", "\n", "min_words", "=", "0", ",", "\n", "n_pair", "=", "-", "1", ",", "\n", "max_frames", "=", "100", ",", "\n", "with_long_context", "=", "True", ",", "\n", "use_mil", "=", "False", ",", "\n", "only_sim", "=", "False", ",", "# set automatically from model choice", "\n", "sampled_use_mil", "=", "False", ",", "\n", "pretrain_enhance_vmodal", "=", "False", ",", "\n", "video_dim", "=", "1024", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n        \"\"\"", "\n", "self", ".", "csv", "=", "pd", ".", "read_csv", "(", "csv", ")", "\n", "self", ".", "features_path", "=", "features_path", "\n", "self", ".", "data_dict", "=", "data_dict", "\n", "self", ".", "min_time", "=", "min_time", "\n", "self", ".", "feature_framerate", "=", "feature_framerate", "\n", "self", ".", "max_words", "=", "max_words", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "min_words", "=", "min_words", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "n_pair", "=", "n_pair", "\n", "self", ".", "with_long_context", "=", "with_long_context", "\n", "self", ".", "feature_size", "=", "video_dim", "\n", "\n", "self", ".", "only_sim", "=", "only_sim", "\n", "self", ".", "pretrain_enhance_vmodal", "=", "pretrain_enhance_vmodal", "\n", "self", ".", "iter_num", "=", "len", "(", "self", ".", "csv", ")", "\n", "\n", "self", ".", "use_mil", "=", "use_mil", "\n", "self", ".", "sampled_use_mil", "=", "sampled_use_mil", "\n", "if", "self", ".", "sampled_use_mil", ":", "# sample from each video, has a higher priority than use_mil.", "\n", "            ", "self", ".", "use_mil", "=", "True", "\n", "\n", "", "if", "self", ".", "use_mil", ":", "\n", "            ", "positive_n_pair", "=", "self", ".", "n_pair", "\n", "# Get iterator video ids", "\n", "video_id_list", "=", "[", "itm", "for", "itm", "in", "self", ".", "csv", "[", "'video_id'", "]", ".", "values", "]", "\n", "self", ".", "video_id2idx_dict", "=", "{", "video_id", ":", "id", "for", "id", ",", "video_id", "in", "enumerate", "(", "video_id_list", ")", "}", "\n", "# Get all captions", "\n", "self", ".", "iter2video_pairs_dict", "=", "{", "}", "\n", "self", ".", "iter2video_pairslist_dict", "=", "{", "}", "\n", "iter_idx_mil_", "=", "0", "\n", "for", "video_id", "in", "video_id_list", ":", "\n", "                ", "data_dict", "=", "self", ".", "data_dict", "[", "video_id", "]", "\n", "n_caption", "=", "len", "(", "data_dict", "[", "'start'", "]", ")", "\n", "\n", "sub_list", "=", "[", "]", "\n", "if", "self", ".", "n_pair", "<", "0", "or", "self", ".", "n_pair", "==", "1", ":", "\n", "                    ", "for", "sub_id", "in", "range", "(", "n_caption", ")", ":", "\n", "                        ", "sub_list", ".", "append", "(", "[", "sub_id", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "sb_ls_", "=", "list", "(", "range", "(", "n_caption", ")", ")", "\n", "if", "self", ".", "n_pair", ">", "n_caption", ":", "\n", "                        ", "sb_ls_", "=", "sb_ls_", "*", "(", "self", ".", "n_pair", "//", "n_caption", "+", "1", ")", "\n", "sb_ls_", "=", "sb_ls_", "[", ":", "self", ".", "n_pair", "]", "\n", "for", "sub_id", "in", "np", ".", "arange", "(", "0", ",", "len", "(", "sb_ls_", ")", ",", "self", ".", "n_pair", ")", ":", "\n", "                            ", "sub_list", ".", "append", "(", "sb_ls_", "[", "sub_id", ":", "sub_id", "+", "self", ".", "n_pair", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "sb_ls_", "=", "sb_ls_", "+", "sb_ls_", "[", ":", "(", "(", "(", "n_caption", "+", "positive_n_pair", "-", "1", ")", "//", "positive_n_pair", ")", "*", "positive_n_pair", "-", "n_caption", ")", "]", "\n", "for", "sub_id", "in", "np", ".", "arange", "(", "0", ",", "len", "(", "sb_ls_", ")", ",", "positive_n_pair", ")", ":", "\n", "                            ", "pos_ls", "=", "sb_ls_", "[", "sub_id", ":", "sub_id", "+", "positive_n_pair", "]", "\n", "sub_list", ".", "append", "(", "pos_ls", ")", "\n", "\n", "", "", "", "for", "sub_e", "in", "sub_list", ":", "\n", "                    ", "self", ".", "iter2video_pairs_dict", "[", "iter_idx_mil_", "]", "=", "(", "video_id", ",", "sub_e", ")", "\n", "iter_idx_mil_", "+=", "1", "\n", "", "self", ".", "iter2video_pairslist_dict", "[", "video_id", "]", "=", "sub_list", "\n", "\n", "", "", "if", "self", ".", "use_mil", "and", "self", ".", "sampled_use_mil", "is", "False", ":", "\n", "            ", "self", ".", "iter_num", "=", "len", "(", "self", ".", "iter2video_pairs_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader.__len__": [[100, 102], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iter_num", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader._mask_tokens": [[103, 126], ["words.copy", "enumerate", "random.random", "token_labels.append", "token_labels.append", "token_labels.append", "len", "token_labels.append", "random.choice", "list", "dataloader_howto100m.Youtube_DataLoader.tokenizer.vocab.items"], "methods", ["None"], ["", "def", "_mask_tokens", "(", "self", ",", "words", ")", ":", "\n", "        ", "token_labels", "=", "[", "]", "\n", "masked_tokens", "=", "words", ".", "copy", "(", ")", "\n", "\n", "for", "token_id", ",", "token", "in", "enumerate", "(", "masked_tokens", ")", ":", "\n", "            ", "if", "token_id", "==", "0", "or", "token_id", "==", "len", "(", "masked_tokens", ")", "-", "1", ":", "\n", "                ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "continue", "\n", "", "prob", "=", "random", ".", "random", "(", ")", "\n", "if", "prob", "<", "0.15", ":", "\n", "                ", "prob", "/=", "0.15", "\n", "if", "prob", "<", "0.8", ":", "\n", "                    ", "masked_tokens", "[", "token_id", "]", "=", "\"[MASK]\"", "\n", "", "elif", "prob", "<", "0.9", ":", "\n", "                    ", "masked_tokens", "[", "token_id", "]", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "tokenizer", ".", "vocab", ".", "items", "(", ")", ")", ")", "[", "0", "]", "\n", "", "try", ":", "\n", "                    ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "token", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "\"[UNK]\"", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "\n", "", "", "return", "masked_tokens", ",", "token_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader._get_text": [[127, 229], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "len", "dataloader_howto100m.Youtube_DataLoader._get_single_transcript", "words.copy", "dataloader_howto100m.Youtube_DataLoader.tokenizer.convert_tokens_to_ids", "numpy.array", "numpy.array", "numpy.array", "range", "numpy.random.shuffle", "len", "len", "len", "len", "dataloader_howto100m.Youtube_DataLoader.append", "input_mask.append", "segment_ids.append", "len", "len", "len", "dataloader_howto100m.Youtube_DataLoader._mask_tokens", "dataloader_howto100m.Youtube_DataLoader.tokenizer.convert_tokens_to_ids", "dataloader_howto100m.Youtube_DataLoader._mask_tokens", "masked_input_caption_words.copy", "dataloader_howto100m.Youtube_DataLoader.tokenizer.convert_tokens_to_ids", "dataloader_howto100m.Youtube_DataLoader.tokenizer.convert_tokens_to_ids", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.choice", "numpy.array", "numpy.random.choice", "numpy.concatenate", "len", "len", "dataloader_howto100m.Youtube_DataLoader.append", "token_labels.append", "len", "len", "len", "len", "dataloader_howto100m.Youtube_DataLoader.append", "dataloader_howto100m.Youtube_DataLoader.append", "decoder_mask.append", "len", "len", "len", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader._get_single_transcript", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader._mask_tokens", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader._mask_tokens", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids"], ["", "def", "_get_text", "(", "self", ",", "video_id", ",", "n_pair_max", ",", "sub_ids", "=", "None", ",", "only_sim", "=", "False", ",", "enhance_vmodel", "=", "False", ")", ":", "\n", "        ", "data_dict", "=", "self", ".", "data_dict", "[", "video_id", "]", "\n", "\n", "if", "self", ".", "use_mil", ":", "\n", "            ", "k", "=", "len", "(", "sub_ids", ")", "\n", "r_ind", "=", "sub_ids", "\n", "", "else", ":", "\n", "            ", "n_caption", "=", "len", "(", "data_dict", "[", "'start'", "]", ")", "\n", "if", "n_pair_max", "==", "-", "1", ":", "\n", "                ", "k", "=", "n_caption", "\n", "r_ind", "=", "range", "(", "n_caption", ")", "\n", "", "else", ":", "\n", "                ", "k", "=", "n_pair_max", "\n", "if", "k", "<=", "n_caption", ":", "\n", "                    ", "r_ind", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n_caption", ")", ",", "k", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "r_ind_must", "=", "np", ".", "array", "(", "range", "(", "n_caption", ")", ")", "\n", "r_ind_rand", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "n_caption", ")", ",", "k", "-", "n_caption", ",", "replace", "=", "True", ")", "\n", "r_ind", "=", "np", ".", "concatenate", "(", "(", "r_ind_must", ",", "r_ind_rand", ")", ",", "axis", "=", "0", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "r_ind", ")", "\n", "\n", "", "", "starts", "=", "np", ".", "zeros", "(", "k", ")", "\n", "ends", "=", "np", ".", "zeros", "(", "k", ")", "\n", "pairs_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_mask", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_segment", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_masked_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_token_labels", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "pairs_input_caption_ids", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_output_caption_ids", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_decoder_mask", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "ind", "=", "r_ind", "[", "i", "]", "\n", "words", ",", "start_", ",", "end_", "=", "self", ".", "_get_single_transcript", "(", "data_dict", ",", "ind", ",", "with_long_context", "=", "self", ".", "with_long_context", ")", "\n", "caption_words", "=", "words", ".", "copy", "(", ")", "\n", "starts", "[", "i", "]", ",", "ends", "[", "i", "]", "=", "start_", ",", "end_", "\n", "\n", "if", "enhance_vmodel", ":", "\n", "                ", "words", "=", "[", "]", "# mask all input text", "\n", "\n", "", "words", "=", "[", "\"[CLS]\"", "]", "+", "words", "\n", "total_length_with_CLS", "=", "self", ".", "max_words", "-", "1", "\n", "if", "len", "(", "words", ")", ">", "total_length_with_CLS", ":", "\n", "                ", "words", "=", "words", "[", ":", "total_length_with_CLS", "]", "\n", "", "words", "=", "words", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "input_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "while", "len", "(", "input_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "input_mask", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "segment_ids", ")", "==", "self", ".", "max_words", "\n", "\n", "pairs_text", "[", "i", "]", "=", "np", ".", "array", "(", "input_ids", ")", "\n", "pairs_mask", "[", "i", "]", "=", "np", ".", "array", "(", "input_mask", ")", "\n", "pairs_segment", "[", "i", "]", "=", "np", ".", "array", "(", "segment_ids", ")", "\n", "\n", "if", "only_sim", "is", "False", ":", "\n", "# For generate captions", "\n", "                ", "if", "len", "(", "caption_words", ")", ">", "total_length_with_CLS", ":", "\n", "                    ", "caption_words", "=", "caption_words", "[", ":", "total_length_with_CLS", "]", "\n", "", "input_caption_words", "=", "[", "\"[CLS]\"", "]", "+", "caption_words", "\n", "output_caption_words", "=", "caption_words", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "masked_tokens", ",", "token_labels", "=", "self", ".", "_mask_tokens", "(", "words", ")", "\n", "masked_token_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "masked_tokens", ")", "\n", "masked_input_caption_words", ",", "input_token_labels", "=", "self", ".", "_mask_tokens", "(", "input_caption_words", ")", "\n", "input_caption_words", "=", "masked_input_caption_words", ".", "copy", "(", ")", "\n", "\n", "while", "len", "(", "masked_token_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                    ", "masked_token_ids", ".", "append", "(", "0", ")", "\n", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "", "assert", "len", "(", "masked_token_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "token_labels", ")", "==", "self", ".", "max_words", "\n", "\n", "# For generate captions", "\n", "input_caption_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_caption_words", ")", "\n", "output_caption_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "output_caption_words", ")", "\n", "decoder_mask", "=", "[", "1", "]", "*", "len", "(", "input_caption_ids", ")", "\n", "while", "len", "(", "input_caption_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                    ", "input_caption_ids", ".", "append", "(", "0", ")", "\n", "output_caption_ids", ".", "append", "(", "0", ")", "\n", "decoder_mask", ".", "append", "(", "0", ")", "\n", "", "assert", "len", "(", "input_caption_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "output_caption_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "decoder_mask", ")", "==", "self", ".", "max_words", "\n", "\n", "pairs_masked_text", "[", "i", "]", "=", "np", ".", "array", "(", "masked_token_ids", ")", "\n", "pairs_token_labels", "[", "i", "]", "=", "np", ".", "array", "(", "token_labels", ")", "\n", "\n", "pairs_input_caption_ids", "[", "i", "]", "=", "np", ".", "array", "(", "input_caption_ids", ")", "\n", "pairs_output_caption_ids", "[", "i", "]", "=", "np", ".", "array", "(", "output_caption_ids", ")", "\n", "pairs_decoder_mask", "[", "i", "]", "=", "np", ".", "array", "(", "decoder_mask", ")", "\n", "\n", "", "", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", ",", "starts", ",", "ends", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader._get_single_transcript": [[230, 257], ["dataloader_howto100m.Youtube_DataLoader.tokenizer.tokenize", "str", "dataloader_howto100m.Youtube_DataLoader.tokenizer.tokenize", "dataloader_howto100m.Youtube_DataLoader.tokenizer.tokenize", "len", "str", "str", "dataloader_howto100m.Youtube_DataLoader.extend", "len", "dataloader_howto100m.Youtube_DataLoader.tokenizer.tokenize", "dataloader_howto100m.Youtube_DataLoader.extend", "len", "len", "str", "len", "dataloader_howto100m.Youtube_DataLoader.tokenizer.tokenize", "str"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "_get_single_transcript", "(", "self", ",", "data_dict", ",", "ind", ",", "with_long_context", "=", "True", ")", ":", "\n", "        ", "start", ",", "end", "=", "ind", ",", "ind", "\n", "words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "str", "(", "data_dict", "[", "'text'", "]", "[", "ind", "]", ")", ")", "\n", "diff", "=", "data_dict", "[", "'end'", "]", "[", "end", "]", "-", "data_dict", "[", "'start'", "]", "[", "start", "]", "\n", "while", "with_long_context", "and", "(", "len", "(", "words", ")", "<", "self", ".", "min_words", "or", "diff", "<", "self", ".", "min_time", ")", ":", "\n", "            ", "if", "start", ">", "0", "and", "end", "<", "len", "(", "data_dict", "[", "'end'", "]", ")", "-", "1", ":", "\n", "                ", "next_words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "str", "(", "data_dict", "[", "'text'", "]", "[", "end", "+", "1", "]", ")", ")", "\n", "prev_words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "str", "(", "data_dict", "[", "'text'", "]", "[", "start", "-", "1", "]", ")", ")", "\n", "d1", "=", "data_dict", "[", "'end'", "]", "[", "end", "+", "1", "]", "-", "data_dict", "[", "'start'", "]", "[", "start", "]", "\n", "d2", "=", "data_dict", "[", "'end'", "]", "[", "end", "]", "-", "data_dict", "[", "'start'", "]", "[", "start", "-", "1", "]", "\n", "if", "(", "self", ".", "min_time", ">", "0", "and", "d2", "<=", "d1", ")", "or", "(", "self", ".", "min_time", "==", "0", "and", "len", "(", "next_words", ")", "<=", "len", "(", "prev_words", ")", ")", ":", "\n", "                    ", "start", "-=", "1", "\n", "words", "=", "prev_words", "+", "words", "\n", "", "else", ":", "\n", "                    ", "end", "+=", "1", "\n", "words", ".", "extend", "(", "next_words", ")", "\n", "", "", "elif", "start", ">", "0", ":", "\n", "                ", "words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "str", "(", "data_dict", "[", "'text'", "]", "[", "start", "-", "1", "]", ")", ")", "+", "words", "\n", "start", "-=", "1", "\n", "", "elif", "end", "<", "len", "(", "data_dict", "[", "'end'", "]", ")", "-", "1", ":", "\n", "                ", "words", ".", "extend", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "str", "(", "data_dict", "[", "'text'", "]", "[", "end", "+", "1", "]", ")", ")", ")", "\n", "end", "+=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "diff", "=", "data_dict", "[", "'end'", "]", "[", "end", "]", "-", "data_dict", "[", "'start'", "]", "[", "start", "]", "\n", "", "return", "words", ",", "data_dict", "[", "'start'", "]", "[", "start", "]", ",", "data_dict", "[", "'end'", "]", "[", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader._expand_video_slice": [[258, 286], ["int", "int", "len", "int", "int", "len", "len"], "methods", ["None"], ["", "def", "_expand_video_slice", "(", "self", ",", "s", ",", "e", ",", "si", ",", "ei", ",", "fps", ",", "video_features", ")", ":", "\n", "        ", "start", "=", "int", "(", "s", "[", "si", "]", "*", "fps", ")", "\n", "end", "=", "int", "(", "e", "[", "ei", "]", "*", "fps", ")", "+", "1", "\n", "\n", "if", "start", ">", "end", ":", "\n", "            ", "start", ",", "end", "=", "end", ",", "start", "\n", "", "video_slice", "=", "video_features", "[", "start", ":", "end", "]", "\n", "\n", "expand_left", "=", "True", "\n", "while", "len", "(", "video_slice", ")", "<", "1", ":", "\n", "            ", "if", "si", "==", "0", "and", "ei", "==", "len", "(", "s", ")", "-", "1", ":", "\n", "                ", "break", "\n", "", "if", "expand_left", ":", "\n", "                ", "expand_left", "=", "False", "\n", "si", "=", "si", "-", "1", "if", "si", ">", "0", "else", "si", "\n", "", "else", ":", "\n", "                ", "expand_left", "=", "True", "\n", "ei", "=", "ei", "+", "1", "if", "ei", "<", "len", "(", "e", ")", "-", "1", "else", "ei", "\n", "", "start", "=", "int", "(", "s", "[", "si", "]", "*", "fps", ")", "\n", "end", "=", "int", "(", "e", "[", "ei", "]", "*", "fps", ")", "+", "1", "\n", "if", "start", ">", "end", ":", "\n", "                ", "start", ",", "end", "=", "end", ",", "start", "\n", "", "video_slice", "=", "video_features", "[", "start", ":", "end", "]", "\n", "\n", "", "if", "self", ".", "max_frames", "<", "video_slice", ".", "shape", "[", "0", "]", ":", "\n", "            ", "video_slice", "=", "video_slice", "[", ":", "self", ".", "max_frames", "]", "\n", "\n", "", "return", "video_slice", ",", "start", ",", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader._get_video": [[287, 333], ["numpy.zeros", "numpy.zeros", "os.path.join", "enumerate", "numpy.zeros.copy", "numpy.array", "len", "numpy.load", "range", "enumerate", "len", "len", "len", "dataloader_howto100m.Youtube_DataLoader._expand_video_slice", "print", "range", "enumerate", "len", "ValueError", "len", "len", "random.random", "video_labels_index[].append", "video_labels_index[].append", "video_labels_index[].append"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader._expand_video_slice"], ["", "def", "_get_video", "(", "self", ",", "idx", ",", "s", ",", "e", ",", "only_sim", "=", "False", ")", ":", "\n", "        ", "video_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "s", ")", ",", "self", ".", "max_frames", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "max_video_length", "=", "[", "0", "]", "*", "len", "(", "s", ")", "\n", "\n", "video", "=", "np", ".", "zeros", "(", "(", "len", "(", "s", ")", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "feature_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "features_path", ",", "self", ".", "csv", "[", "\"feature_file\"", "]", ".", "values", "[", "idx", "]", ")", "\n", "try", ":", "\n", "            ", "video_features", "=", "np", ".", "load", "(", "feature_file", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "s", ")", ")", ":", "\n", "                ", "if", "len", "(", "video_features", ")", "<", "1", ":", "\n", "                    ", "raise", "ValueError", "(", "\"{} is empty.\"", ".", "format", "(", "feature_file", ")", ")", "\n", "", "video_slice", ",", "start", ",", "end", "=", "self", ".", "_expand_video_slice", "(", "s", ",", "e", ",", "i", ",", "i", ",", "self", ".", "feature_framerate", ",", "video_features", ")", "\n", "slice_shape", "=", "video_slice", ".", "shape", "\n", "max_video_length", "[", "i", "]", "=", "max_video_length", "[", "i", "]", "if", "max_video_length", "[", "i", "]", ">", "slice_shape", "[", "0", "]", "else", "slice_shape", "[", "0", "]", "\n", "if", "len", "(", "video_slice", ")", "<", "1", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "video", "[", "i", "]", "[", ":", "slice_shape", "[", "0", "]", "]", "=", "video_slice", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"video_id: {} error.\"", ".", "format", "(", "feature_file", ")", ")", "\n", "\n", "", "for", "i", ",", "v_length", "in", "enumerate", "(", "max_video_length", ")", ":", "\n", "            ", "video_mask", "[", "i", "]", "[", ":", "v_length", "]", "=", "[", "1", "]", "*", "v_length", "\n", "\n", "# Mask Frame Model <-----", "\n", "", "video_labels_index", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "s", ")", ")", "]", "\n", "masked_video", "=", "video", ".", "copy", "(", ")", "\n", "if", "only_sim", "is", "False", ":", "\n", "            ", "for", "i", ",", "video_pair_", "in", "enumerate", "(", "masked_video", ")", ":", "\n", "                ", "for", "j", ",", "_", "in", "enumerate", "(", "video_pair_", ")", ":", "\n", "                    ", "if", "j", "<", "max_video_length", "[", "i", "]", ":", "\n", "                        ", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                            ", "masked_video", "[", "i", "]", "[", "j", "]", "=", "[", "0.", "]", "*", "video", ".", "shape", "[", "-", "1", "]", "\n", "video_labels_index", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "", "else", ":", "\n", "                            ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                        ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "", "", "video_labels_index", "=", "np", ".", "array", "(", "video_labels_index", ",", "dtype", "=", "np", ".", "long", ")", "\n", "# -----> Mask Frame Model", "\n", "\n", "return", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader.second_to_stamp": [[334, 338], ["divmod", "divmod"], "methods", ["None"], ["", "def", "second_to_stamp", "(", "self", ",", "in_seconds", ")", ":", "\n", "        ", "m", ",", "s", "=", "divmod", "(", "in_seconds", ",", "60", ")", "\n", "h", ",", "m2", "=", "divmod", "(", "m", ",", "60", ")", "\n", "return", "\"%02d:%02d:%02d\"", "%", "(", "h", ",", "m2", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_howto100m.Youtube_DataLoader.__getitem__": [[339, 370], ["dataloader_howto100m.Youtube_DataLoader._get_text", "dataloader_howto100m.Youtube_DataLoader._get_video", "numpy.random.randint", "random.random", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_text", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_video"], ["", "def", "__getitem__", "(", "self", ",", "feature_idx", ")", ":", "\n", "        ", "if", "self", ".", "sampled_use_mil", ":", "# sample from each video, has a higher priority than use_mil.", "\n", "            ", "idx", "=", "feature_idx", "\n", "video_id", "=", "self", ".", "csv", "[", "'video_id'", "]", ".", "values", "[", "idx", "]", "\n", "sub_list", "=", "self", ".", "iter2video_pairslist_dict", "[", "video_id", "]", "\n", "ranint", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "sub_list", ")", ")", "\n", "sub_ids", "=", "sub_list", "[", "ranint", "]", "\n", "", "elif", "self", ".", "use_mil", ":", "\n", "            ", "video_id", ",", "sub_ids", "=", "self", ".", "iter2video_pairs_dict", "[", "feature_idx", "]", "\n", "idx", "=", "self", ".", "video_id2idx_dict", "[", "video_id", "]", "\n", "", "else", ":", "\n", "            ", "idx", "=", "feature_idx", "\n", "video_id", "=", "self", ".", "csv", "[", "'video_id'", "]", ".", "values", "[", "idx", "]", "\n", "sub_ids", "=", "None", "\n", "\n", "", "enhance_vmodel", "=", "False", "\n", "if", "self", ".", "only_sim", "is", "False", "and", "self", ".", "pretrain_enhance_vmodal", ":", "\n", "            ", "prob", "=", "random", ".", "random", "(", ")", "\n", "if", "prob", "<", "0.15", ":", "# mask all text by rate 0.15", "\n", "                ", "enhance_vmodel", "=", "True", "\n", "\n", "", "", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", ",", "starts", ",", "ends", "=", "self", ".", "_get_text", "(", "video_id", ",", "self", ".", "n_pair", ",", "sub_ids", ",", "only_sim", "=", "self", ".", "only_sim", ",", "enhance_vmodel", "=", "enhance_vmodel", ")", "\n", "\n", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "=", "self", ".", "_get_video", "(", "idx", ",", "starts", ",", "ends", ",", "only_sim", "=", "self", ".", "only_sim", ")", "\n", "\n", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", ",", "pairs_input_caption_ids", ",", "pairs_decoder_mask", ",", "pairs_output_caption_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_retrieval.Youcook_DataLoader.__init__": [[15, 48], ["pandas.read_csv", "pickle.load", "pickle.load", "open", "open", "len", "range", "enumerate"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "csv", ",", "\n", "data_path", ",", "\n", "features_path", ",", "\n", "tokenizer", ",", "\n", "feature_framerate", "=", "1.0", ",", "\n", "max_words", "=", "30", ",", "\n", "max_frames", "=", "100", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n        \"\"\"", "\n", "self", ".", "csv", "=", "pd", ".", "read_csv", "(", "csv", ")", "\n", "self", ".", "data_dict", "=", "pickle", ".", "load", "(", "open", "(", "data_path", ",", "'rb'", ")", ")", "\n", "self", ".", "feature_dict", "=", "pickle", ".", "load", "(", "open", "(", "features_path", ",", "'rb'", ")", ")", "\n", "self", ".", "feature_framerate", "=", "feature_framerate", "\n", "self", ".", "max_words", "=", "max_words", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n", "# Get iterator video ids", "\n", "video_id_list", "=", "[", "itm", "for", "itm", "in", "self", ".", "csv", "[", "'video_id'", "]", ".", "values", "]", "\n", "self", ".", "video_id2idx_dict", "=", "{", "video_id", ":", "id", "for", "id", ",", "video_id", "in", "enumerate", "(", "video_id_list", ")", "}", "\n", "# Get all captions", "\n", "self", ".", "iter2video_pairs_dict", "=", "{", "}", "\n", "iter_idx_", "=", "0", "\n", "for", "video_id", "in", "video_id_list", ":", "\n", "            ", "data_dict", "=", "self", ".", "data_dict", "[", "video_id", "]", "\n", "n_caption", "=", "len", "(", "data_dict", "[", "'start'", "]", ")", "\n", "for", "sub_id", "in", "range", "(", "n_caption", ")", ":", "\n", "                ", "self", ".", "iter2video_pairs_dict", "[", "iter_idx_", "]", "=", "(", "video_id", ",", "sub_id", ")", "\n", "iter_idx_", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_retrieval.Youcook_DataLoader.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "iter2video_pairs_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_retrieval.Youcook_DataLoader._get_text": [[52, 133], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "dataloader_youcook_retrieval.Youcook_DataLoader.tokenizer.tokenize", "dataloader_youcook_retrieval.Youcook_DataLoader.copy", "enumerate", "dataloader_youcook_retrieval.Youcook_DataLoader.tokenizer.convert_tokens_to_ids", "dataloader_youcook_retrieval.Youcook_DataLoader.tokenizer.convert_tokens_to_ids", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "random.random", "len", "len", "len", "dataloader_youcook_retrieval.Youcook_DataLoader.append", "input_mask.append", "segment_ids.append", "dataloader_youcook_retrieval.Youcook_DataLoader.append", "token_labels.append", "len", "len", "len", "len", "len", "token_labels.append", "token_labels.append", "token_labels.append", "len", "token_labels.append", "random.choice", "list", "dataloader_youcook_retrieval.Youcook_DataLoader.tokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids"], ["", "def", "_get_text", "(", "self", ",", "video_id", ",", "sub_id", ")", ":", "\n", "        ", "data_dict", "=", "self", ".", "data_dict", "[", "video_id", "]", "\n", "k", ",", "r_ind", "=", "1", ",", "[", "sub_id", "]", "\n", "\n", "starts", "=", "np", ".", "zeros", "(", "k", ")", "\n", "ends", "=", "np", ".", "zeros", "(", "k", ")", "\n", "pairs_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_mask", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_segment", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_masked_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_token_labels", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "ind", "=", "r_ind", "[", "i", "]", "\n", "words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "data_dict", "[", "'text'", "]", "[", "ind", "]", ")", "\n", "start_", ",", "end_", "=", "data_dict", "[", "'start'", "]", "[", "ind", "]", ",", "data_dict", "[", "'end'", "]", "[", "ind", "]", "\n", "starts", "[", "i", "]", ",", "ends", "[", "i", "]", "=", "start_", ",", "end_", "\n", "\n", "words", "=", "[", "\"[CLS]\"", "]", "+", "words", "\n", "total_length_with_CLS", "=", "self", ".", "max_words", "-", "1", "\n", "if", "len", "(", "words", ")", ">", "total_length_with_CLS", ":", "\n", "                ", "words", "=", "words", "[", ":", "total_length_with_CLS", "]", "\n", "", "words", "=", "words", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "# Mask Language Model <-----", "\n", "token_labels", "=", "[", "]", "\n", "masked_tokens", "=", "words", ".", "copy", "(", ")", "\n", "for", "token_id", ",", "token", "in", "enumerate", "(", "masked_tokens", ")", ":", "\n", "                ", "if", "token_id", "==", "0", "or", "token_id", "==", "len", "(", "masked_tokens", ")", "-", "1", ":", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "continue", "\n", "", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                    ", "prob", "/=", "0.15", "\n", "\n", "# 80% randomly change token to mask token", "\n", "if", "prob", "<", "0.8", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "\"[MASK]\"", "\n", "\n", "# 10% randomly change token to random token", "\n", "", "elif", "prob", "<", "0.9", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "tokenizer", ".", "vocab", ".", "items", "(", ")", ")", ")", "[", "0", "]", "\n", "\n", "# -> rest 10% randomly keep current token", "\n", "\n", "# append current token to output (we will predict these later)", "\n", "", "try", ":", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "token", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "# For unknown words (should not occur with BPE vocab)", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "\"[UNK]\"", "]", ")", "\n", "# print(\"Cannot find token '{}' in vocab. Using [UNK] insetad\".format(token))", "\n", "", "", "else", ":", "\n", "# no masking token (will be ignored by loss function later)", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "# -----> Mask Language Model", "\n", "\n", "", "", "input_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "masked_token_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "masked_tokens", ")", "\n", "while", "len", "(", "input_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "masked_token_ids", ".", "append", "(", "0", ")", "\n", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "input_mask", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "segment_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "masked_token_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "token_labels", ")", "==", "self", ".", "max_words", "\n", "\n", "pairs_text", "[", "i", "]", "=", "np", ".", "array", "(", "input_ids", ")", "\n", "pairs_mask", "[", "i", "]", "=", "np", ".", "array", "(", "input_mask", ")", "\n", "pairs_segment", "[", "i", "]", "=", "np", ".", "array", "(", "segment_ids", ")", "\n", "pairs_masked_text", "[", "i", "]", "=", "np", ".", "array", "(", "masked_token_ids", ")", "\n", "pairs_token_labels", "[", "i", "]", "=", "np", ".", "array", "(", "token_labels", ")", "\n", "\n", "", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "starts", ",", "ends", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_retrieval.Youcook_DataLoader._get_video": [[134, 177], ["numpy.zeros", "numpy.zeros", "range", "enumerate", "numpy.zeros.copy", "enumerate", "numpy.array", "len", "len", "int", "enumerate", "len", "len", "int", "len", "print", "range", "len", "random.random", "video_labels_index[].append", "video_labels_index[].append", "video_labels_index[].append"], "methods", ["None"], ["", "def", "_get_video", "(", "self", ",", "idx", ",", "s", ",", "e", ")", ":", "\n", "        ", "video_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "s", ")", ",", "self", ".", "max_frames", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "max_video_length", "=", "[", "0", "]", "*", "len", "(", "s", ")", "\n", "\n", "video_features", "=", "self", ".", "feature_dict", "[", "self", ".", "csv", "[", "\"feature_file\"", "]", ".", "values", "[", "idx", "]", "]", "\n", "video", "=", "np", ".", "zeros", "(", "(", "len", "(", "s", ")", ",", "self", ".", "max_frames", ",", "video_features", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "s", ")", ")", ":", "\n", "            ", "start", "=", "int", "(", "s", "[", "i", "]", "*", "self", ".", "feature_framerate", ")", "\n", "end", "=", "int", "(", "e", "[", "i", "]", "*", "self", ".", "feature_framerate", ")", "+", "1", "\n", "video_slice", "=", "video_features", "[", "start", ":", "end", "]", "\n", "\n", "if", "self", ".", "max_frames", "<", "video_slice", ".", "shape", "[", "0", "]", ":", "\n", "                ", "video_slice", "=", "video_slice", "[", ":", "self", ".", "max_frames", "]", "\n", "\n", "", "slice_shape", "=", "video_slice", ".", "shape", "\n", "max_video_length", "[", "i", "]", "=", "max_video_length", "[", "i", "]", "if", "max_video_length", "[", "i", "]", ">", "slice_shape", "[", "0", "]", "else", "slice_shape", "[", "0", "]", "\n", "if", "len", "(", "video_slice", ")", "<", "1", ":", "\n", "                ", "print", "(", "\"video_id: {}, start: {}, end: {}\"", ".", "format", "(", "self", ".", "csv", "[", "\"video_id\"", "]", ".", "values", "[", "idx", "]", ",", "start", ",", "end", ")", ")", "\n", "", "else", ":", "\n", "                ", "video", "[", "i", "]", "[", ":", "slice_shape", "[", "0", "]", "]", "=", "video_slice", "\n", "\n", "", "", "for", "i", ",", "v_length", "in", "enumerate", "(", "max_video_length", ")", ":", "\n", "            ", "video_mask", "[", "i", "]", "[", ":", "v_length", "]", "=", "[", "1", "]", "*", "v_length", "\n", "\n", "# Mask Frame Model <-----", "\n", "", "video_labels_index", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "s", ")", ")", "]", "\n", "masked_video", "=", "video", ".", "copy", "(", ")", "\n", "for", "i", ",", "video_pair_", "in", "enumerate", "(", "masked_video", ")", ":", "\n", "            ", "for", "j", ",", "_", "in", "enumerate", "(", "video_pair_", ")", ":", "\n", "                ", "if", "j", "<", "max_video_length", "[", "i", "]", ":", "\n", "                    ", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                        ", "masked_video", "[", "i", "]", "[", "j", "]", "=", "[", "0.", "]", "*", "video", ".", "shape", "[", "-", "1", "]", "\n", "video_labels_index", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "", "else", ":", "\n", "                        ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "", "video_labels_index", "=", "np", ".", "array", "(", "video_labels_index", ",", "dtype", "=", "np", ".", "long", ")", "\n", "# -----> Mask Frame Model", "\n", "\n", "return", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_youcook_retrieval.Youcook_DataLoader.__getitem__": [[178, 190], ["dataloader_youcook_retrieval.Youcook_DataLoader._get_text", "dataloader_youcook_retrieval.Youcook_DataLoader._get_video"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_text", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_video"], ["", "def", "__getitem__", "(", "self", ",", "feature_idx", ")", ":", "\n", "\n", "        ", "video_id", ",", "sub_id", "=", "self", ".", "iter2video_pairs_dict", "[", "feature_idx", "]", "\n", "idx", "=", "self", ".", "video_id2idx_dict", "[", "video_id", "]", "\n", "\n", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "starts", ",", "ends", "=", "self", ".", "_get_text", "(", "video_id", ",", "sub_id", ")", "\n", "\n", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "=", "self", ".", "_get_video", "(", "idx", ",", "starts", ",", "ends", ")", "\n", "\n", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_DataLoader.__init__": [[17, 34], ["pandas.read_csv", "pickle.load", "open"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "csv_path", ",", "\n", "features_path", ",", "\n", "tokenizer", ",", "\n", "max_words", "=", "30", ",", "\n", "feature_framerate", "=", "1.0", ",", "\n", "max_frames", "=", "100", ",", "\n", ")", ":", "\n", "        ", "self", ".", "data", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "self", ".", "feature_dict", "=", "pickle", ".", "load", "(", "open", "(", "features_path", ",", "'rb'", ")", ")", "\n", "self", ".", "feature_framerate", "=", "feature_framerate", "\n", "self", ".", "max_words", "=", "max_words", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n", "self", ".", "feature_size", "=", "self", ".", "feature_dict", "[", "self", ".", "data", "[", "'video_id'", "]", ".", "values", "[", "0", "]", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_DataLoader.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_DataLoader._get_text": [[38, 111], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "dataloader_msrvtt_retrieval.MSRVTT_DataLoader.tokenizer.tokenize", "dataloader_msrvtt_retrieval.MSRVTT_DataLoader.copy", "enumerate", "dataloader_msrvtt_retrieval.MSRVTT_DataLoader.tokenizer.convert_tokens_to_ids", "dataloader_msrvtt_retrieval.MSRVTT_DataLoader.tokenizer.convert_tokens_to_ids", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "random.random", "len", "len", "len", "dataloader_msrvtt_retrieval.MSRVTT_DataLoader.append", "input_mask.append", "segment_ids.append", "dataloader_msrvtt_retrieval.MSRVTT_DataLoader.append", "token_labels.append", "len", "len", "len", "len", "len", "token_labels.append", "token_labels.append", "token_labels.append", "len", "token_labels.append", "random.choice", "list", "dataloader_msrvtt_retrieval.MSRVTT_DataLoader.tokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids"], ["", "def", "_get_text", "(", "self", ",", "video_id", ",", "sentence", ")", ":", "\n", "        ", "choice_video_ids", "=", "[", "video_id", "]", "\n", "n_caption", "=", "len", "(", "choice_video_ids", ")", "\n", "\n", "k", "=", "n_caption", "\n", "pairs_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_mask", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_segment", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_masked_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_token_labels", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "for", "i", ",", "video_id", "in", "enumerate", "(", "choice_video_ids", ")", ":", "\n", "            ", "words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "sentence", ")", "\n", "\n", "words", "=", "[", "\"[CLS]\"", "]", "+", "words", "\n", "total_length_with_CLS", "=", "self", ".", "max_words", "-", "1", "\n", "if", "len", "(", "words", ")", ">", "total_length_with_CLS", ":", "\n", "                ", "words", "=", "words", "[", ":", "total_length_with_CLS", "]", "\n", "", "words", "=", "words", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "# Mask Language Model <-----", "\n", "token_labels", "=", "[", "]", "\n", "masked_tokens", "=", "words", ".", "copy", "(", ")", "\n", "for", "token_id", ",", "token", "in", "enumerate", "(", "masked_tokens", ")", ":", "\n", "                ", "if", "token_id", "==", "0", "or", "token_id", "==", "len", "(", "masked_tokens", ")", "-", "1", ":", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "continue", "\n", "", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                    ", "prob", "/=", "0.15", "\n", "# 80% randomly change token to mask token", "\n", "if", "prob", "<", "0.8", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "\"[MASK]\"", "\n", "# 10% randomly change token to random token", "\n", "", "elif", "prob", "<", "0.9", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "tokenizer", ".", "vocab", ".", "items", "(", ")", ")", ")", "[", "0", "]", "\n", "# -> rest 10% randomly keep current token", "\n", "# append current token to output (we will predict these later)", "\n", "", "try", ":", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "token", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "# For unknown words (should not occur with BPE vocab)", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "\"[UNK]\"", "]", ")", "\n", "# print(\"Cannot find token '{}' in vocab. Using [UNK] insetad\".format(token))", "\n", "", "", "else", ":", "\n", "# no masking token (will be ignored by loss function later)", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "# -----> Mask Language Model", "\n", "\n", "", "", "input_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "masked_token_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "masked_tokens", ")", "\n", "while", "len", "(", "input_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "masked_token_ids", ".", "append", "(", "0", ")", "\n", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "input_mask", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "segment_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "masked_token_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "token_labels", ")", "==", "self", ".", "max_words", "\n", "\n", "pairs_text", "[", "i", "]", "=", "np", ".", "array", "(", "input_ids", ")", "\n", "pairs_mask", "[", "i", "]", "=", "np", ".", "array", "(", "input_mask", ")", "\n", "pairs_segment", "[", "i", "]", "=", "np", ".", "array", "(", "segment_ids", ")", "\n", "pairs_masked_text", "[", "i", "]", "=", "np", ".", "array", "(", "masked_token_ids", ")", "\n", "pairs_token_labels", "[", "i", "]", "=", "np", ".", "array", "(", "token_labels", ")", "\n", "\n", "", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "choice_video_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_DataLoader._get_video": [[112, 152], ["numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "numpy.zeros.copy", "enumerate", "numpy.array", "len", "enumerate", "len", "len", "len", "print", "range", "len", "random.random", "video_labels_index[].append", "video_labels_index[].append", "video_labels_index[].append"], "methods", ["None"], ["", "def", "_get_video", "(", "self", ",", "choice_video_ids", ")", ":", "\n", "        ", "video_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "choice_video_ids", ")", ",", "self", ".", "max_frames", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "max_video_length", "=", "[", "0", "]", "*", "len", "(", "choice_video_ids", ")", "\n", "\n", "video", "=", "np", ".", "zeros", "(", "(", "len", "(", "choice_video_ids", ")", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "video_id", "in", "enumerate", "(", "choice_video_ids", ")", ":", "\n", "            ", "video_slice", "=", "self", ".", "feature_dict", "[", "video_id", "]", "\n", "\n", "if", "self", ".", "max_frames", "<", "video_slice", ".", "shape", "[", "0", "]", ":", "\n", "                ", "video_slice", "=", "video_slice", "[", ":", "self", ".", "max_frames", "]", "\n", "\n", "", "slice_shape", "=", "video_slice", ".", "shape", "\n", "max_video_length", "[", "i", "]", "=", "max_video_length", "[", "i", "]", "if", "max_video_length", "[", "i", "]", ">", "slice_shape", "[", "0", "]", "else", "slice_shape", "[", "0", "]", "\n", "if", "len", "(", "video_slice", ")", "<", "1", ":", "\n", "                ", "print", "(", "\"video_id: {}\"", ".", "format", "(", "video_id", ")", ")", "\n", "", "else", ":", "\n", "                ", "video", "[", "i", "]", "[", ":", "slice_shape", "[", "0", "]", "]", "=", "video_slice", "\n", "\n", "", "", "for", "i", ",", "v_length", "in", "enumerate", "(", "max_video_length", ")", ":", "\n", "            ", "video_mask", "[", "i", "]", "[", ":", "v_length", "]", "=", "[", "1", "]", "*", "v_length", "\n", "\n", "# Mask Frame Model <-----", "\n", "", "video_labels_index", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "choice_video_ids", ")", ")", "]", "\n", "masked_video", "=", "video", ".", "copy", "(", ")", "\n", "for", "i", ",", "video_pair_", "in", "enumerate", "(", "masked_video", ")", ":", "\n", "            ", "for", "j", ",", "_", "in", "enumerate", "(", "video_pair_", ")", ":", "\n", "                ", "if", "j", "<", "max_video_length", "[", "i", "]", ":", "\n", "                    ", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                        ", "masked_video", "[", "i", "]", "[", "j", "]", "=", "[", "0.", "]", "*", "video", ".", "shape", "[", "-", "1", "]", "\n", "video_labels_index", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "", "else", ":", "\n", "                        ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "", "video_labels_index", "=", "np", ".", "array", "(", "video_labels_index", ",", "dtype", "=", "np", ".", "long", ")", "\n", "# -----> Mask Frame Model", "\n", "\n", "return", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_DataLoader.__getitem__": [[153, 164], ["dataloader_msrvtt_retrieval.MSRVTT_DataLoader._get_text", "dataloader_msrvtt_retrieval.MSRVTT_DataLoader._get_video"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_text", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_video"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "video_id", "=", "self", ".", "data", "[", "'video_id'", "]", ".", "values", "[", "idx", "]", "\n", "sentence", "=", "self", ".", "data", "[", "'sentence'", "]", ".", "values", "[", "idx", "]", "\n", "\n", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "choice_video_ids", "=", "self", ".", "_get_text", "(", "video_id", ",", "sentence", ")", "\n", "\n", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "=", "self", ".", "_get_video", "(", "choice_video_ids", ")", "\n", "\n", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__init__": [[167, 215], ["pandas.read_csv", "json.load", "pickle.load", "open", "open", "list", "len", "collections.defaultdict", "set", "collections.defaultdict", "len", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.sentences[].append", "set.add", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.children_video_ids[].append", "itm[].split", "len"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "csv_path", ",", "\n", "json_path", ",", "\n", "features_path", ",", "\n", "tokenizer", ",", "\n", "max_words", "=", "30", ",", "\n", "feature_framerate", "=", "1.0", ",", "\n", "max_frames", "=", "100", ",", "\n", "unfold_sentences", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "csv", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "self", ".", "data", "=", "json", ".", "load", "(", "open", "(", "json_path", ",", "'r'", ")", ")", "\n", "self", ".", "feature_dict", "=", "pickle", ".", "load", "(", "open", "(", "features_path", ",", "'rb'", ")", ")", "\n", "self", ".", "feature_framerate", "=", "feature_framerate", "\n", "self", ".", "max_words", "=", "max_words", "\n", "self", ".", "max_frames", "=", "max_frames", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n", "self", ".", "feature_size", "=", "self", ".", "feature_dict", "[", "self", ".", "csv", "[", "'video_id'", "]", ".", "values", "[", "0", "]", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n", "self", ".", "unfold_sentences", "=", "unfold_sentences", "\n", "self", ".", "sample_len", "=", "0", "\n", "if", "self", ".", "unfold_sentences", ":", "\n", "            ", "train_video_ids", "=", "list", "(", "self", ".", "csv", "[", "'video_id'", "]", ".", "values", ")", "\n", "self", ".", "sentences_dict", "=", "{", "}", "\n", "for", "itm", "in", "self", ".", "data", "[", "'sentences'", "]", ":", "\n", "                ", "if", "itm", "[", "'video_id'", "]", "in", "train_video_ids", ":", "\n", "                    ", "self", ".", "sentences_dict", "[", "len", "(", "self", ".", "sentences_dict", ")", "]", "=", "(", "itm", "[", "'video_id'", "]", ",", "itm", "[", "'caption'", "]", ")", "\n", "", "", "self", ".", "sample_len", "=", "len", "(", "self", ".", "sentences_dict", ")", "\n", "", "else", ":", "\n", "            ", "num_sentences", "=", "0", "\n", "self", ".", "sentences", "=", "defaultdict", "(", "list", ")", "\n", "s_video_id_set", "=", "set", "(", ")", "\n", "for", "itm", "in", "self", ".", "data", "[", "'sentences'", "]", ":", "\n", "                ", "self", ".", "sentences", "[", "itm", "[", "'video_id'", "]", "]", ".", "append", "(", "itm", "[", "'caption'", "]", ")", "\n", "num_sentences", "+=", "1", "\n", "s_video_id_set", ".", "add", "(", "itm", "[", "'video_id'", "]", ")", "\n", "\n", "# Use to find the clips in the same video", "\n", "", "self", ".", "parent_ids", "=", "{", "}", "\n", "self", ".", "children_video_ids", "=", "defaultdict", "(", "list", ")", "\n", "for", "itm", "in", "self", ".", "data", "[", "'videos'", "]", ":", "\n", "                ", "vid", "=", "itm", "[", "\"video_id\"", "]", "\n", "url_posfix", "=", "itm", "[", "\"url\"", "]", ".", "split", "(", "\"?v=\"", ")", "[", "-", "1", "]", "\n", "self", ".", "parent_ids", "[", "vid", "]", "=", "url_posfix", "\n", "self", ".", "children_video_ids", "[", "url_posfix", "]", ".", "append", "(", "vid", ")", "\n", "", "self", ".", "sample_len", "=", "len", "(", "self", ".", "csv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__len__": [[216, 218], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_len", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_text": [[219, 293], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.copy", "enumerate", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.tokenizer.convert_tokens_to_ids", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.tokenizer.convert_tokens_to_ids", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.tokenizer.tokenize", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_single_text", "len", "random.random", "len", "len", "len", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.append", "input_mask.append", "segment_ids.append", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.append", "token_labels.append", "len", "len", "len", "len", "len", "token_labels.append", "token_labels.append", "token_labels.append", "len", "token_labels.append", "random.choice", "list", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.tokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_single_text"], ["", "def", "_get_text", "(", "self", ",", "video_id", ",", "caption", "=", "None", ")", ":", "\n", "        ", "k", "=", "1", "\n", "choice_video_ids", "=", "[", "video_id", "]", "\n", "pairs_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_mask", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_segment", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_masked_text", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "pairs_token_labels", "=", "np", ".", "zeros", "(", "(", "k", ",", "self", ".", "max_words", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "for", "i", ",", "video_id", "in", "enumerate", "(", "choice_video_ids", ")", ":", "\n", "            ", "if", "caption", "is", "not", "None", ":", "\n", "                ", "words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "caption", ")", "\n", "", "else", ":", "\n", "                ", "words", "=", "self", ".", "_get_single_text", "(", "video_id", ")", "\n", "\n", "", "words", "=", "[", "\"[CLS]\"", "]", "+", "words", "\n", "total_length_with_CLS", "=", "self", ".", "max_words", "-", "1", "\n", "if", "len", "(", "words", ")", ">", "total_length_with_CLS", ":", "\n", "                ", "words", "=", "words", "[", ":", "total_length_with_CLS", "]", "\n", "", "words", "=", "words", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "# Mask Language Model <-----", "\n", "token_labels", "=", "[", "]", "\n", "masked_tokens", "=", "words", ".", "copy", "(", ")", "\n", "for", "token_id", ",", "token", "in", "enumerate", "(", "masked_tokens", ")", ":", "\n", "                ", "if", "token_id", "==", "0", "or", "token_id", "==", "len", "(", "masked_tokens", ")", "-", "1", ":", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "continue", "\n", "", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                    ", "prob", "/=", "0.15", "\n", "# 80% randomly change token to mask token", "\n", "if", "prob", "<", "0.8", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "\"[MASK]\"", "\n", "# 10% randomly change token to random token", "\n", "", "elif", "prob", "<", "0.9", ":", "\n", "                        ", "masked_tokens", "[", "token_id", "]", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "tokenizer", ".", "vocab", ".", "items", "(", ")", ")", ")", "[", "0", "]", "\n", "# -> rest 10% randomly keep current token", "\n", "# append current token to output (we will predict these later)", "\n", "", "try", ":", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "token", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "# For unknown words (should not occur with BPE vocab)", "\n", "                        ", "token_labels", ".", "append", "(", "self", ".", "tokenizer", ".", "vocab", "[", "\"[UNK]\"", "]", ")", "\n", "# print(\"Cannot find token '{}' in vocab. Using [UNK] insetad\".format(token))", "\n", "", "", "else", ":", "\n", "# no masking token (will be ignored by loss function later)", "\n", "                    ", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "# -----> Mask Language Model", "\n", "\n", "", "", "input_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "masked_token_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "masked_tokens", ")", "\n", "while", "len", "(", "input_ids", ")", "<", "self", ".", "max_words", ":", "\n", "                ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "masked_token_ids", ".", "append", "(", "0", ")", "\n", "token_labels", ".", "append", "(", "-", "1", ")", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "input_mask", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "segment_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "masked_token_ids", ")", "==", "self", ".", "max_words", "\n", "assert", "len", "(", "token_labels", ")", "==", "self", ".", "max_words", "\n", "\n", "pairs_text", "[", "i", "]", "=", "np", ".", "array", "(", "input_ids", ")", "\n", "pairs_mask", "[", "i", "]", "=", "np", ".", "array", "(", "input_mask", ")", "\n", "pairs_segment", "[", "i", "]", "=", "np", ".", "array", "(", "segment_ids", ")", "\n", "pairs_masked_text", "[", "i", "]", "=", "np", ".", "array", "(", "masked_token_ids", ")", "\n", "pairs_token_labels", "[", "i", "]", "=", "np", ".", "array", "(", "token_labels", ")", "\n", "\n", "", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "choice_video_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_single_text": [[294, 299], ["random.randint", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.tokenizer.tokenize", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.modules.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "_get_single_text", "(", "self", ",", "video_id", ")", ":", "\n", "        ", "rind", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "sentences", "[", "video_id", "]", ")", "-", "1", ")", "\n", "caption", "=", "self", ".", "sentences", "[", "video_id", "]", "[", "rind", "]", "\n", "words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "caption", ")", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_video": [[300, 340], ["numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "numpy.zeros.copy", "enumerate", "numpy.array", "len", "enumerate", "len", "len", "len", "print", "range", "len", "random.random", "video_labels_index[].append", "video_labels_index[].append", "video_labels_index[].append"], "methods", ["None"], ["", "def", "_get_video", "(", "self", ",", "choice_video_ids", ")", ":", "\n", "        ", "video_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "choice_video_ids", ")", ",", "self", ".", "max_frames", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "max_video_length", "=", "[", "0", "]", "*", "len", "(", "choice_video_ids", ")", "\n", "\n", "video", "=", "np", ".", "zeros", "(", "(", "len", "(", "choice_video_ids", ")", ",", "self", ".", "max_frames", ",", "self", ".", "feature_size", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "video_id", "in", "enumerate", "(", "choice_video_ids", ")", ":", "\n", "            ", "video_slice", "=", "self", ".", "feature_dict", "[", "video_id", "]", "\n", "\n", "if", "self", ".", "max_frames", "<", "video_slice", ".", "shape", "[", "0", "]", ":", "\n", "                ", "video_slice", "=", "video_slice", "[", ":", "self", ".", "max_frames", "]", "\n", "\n", "", "slice_shape", "=", "video_slice", ".", "shape", "\n", "max_video_length", "[", "i", "]", "=", "max_video_length", "[", "i", "]", "if", "max_video_length", "[", "i", "]", ">", "slice_shape", "[", "0", "]", "else", "slice_shape", "[", "0", "]", "\n", "if", "len", "(", "video_slice", ")", "<", "1", ":", "\n", "                ", "print", "(", "\"video_id: {}\"", ".", "format", "(", "video_id", ")", ")", "\n", "", "else", ":", "\n", "                ", "video", "[", "i", "]", "[", ":", "slice_shape", "[", "0", "]", "]", "=", "video_slice", "\n", "\n", "", "", "for", "i", ",", "v_length", "in", "enumerate", "(", "max_video_length", ")", ":", "\n", "            ", "video_mask", "[", "i", "]", "[", ":", "v_length", "]", "=", "[", "1", "]", "*", "v_length", "\n", "\n", "# Mask Frame Model <-----", "\n", "", "video_labels_index", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "choice_video_ids", ")", ")", "]", "\n", "masked_video", "=", "video", ".", "copy", "(", ")", "\n", "for", "i", ",", "video_pair_", "in", "enumerate", "(", "masked_video", ")", ":", "\n", "            ", "for", "j", ",", "_", "in", "enumerate", "(", "video_pair_", ")", ":", "\n", "                ", "if", "j", "<", "max_video_length", "[", "i", "]", ":", "\n", "                    ", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "0.15", ":", "\n", "                        ", "masked_video", "[", "i", "]", "[", "j", "]", "=", "[", "0.", "]", "*", "video", ".", "shape", "[", "-", "1", "]", "\n", "video_labels_index", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "", "else", ":", "\n", "                        ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "video_labels_index", "[", "i", "]", ".", "append", "(", "-", "1", ")", "\n", "", "", "", "video_labels_index", "=", "np", ".", "array", "(", "video_labels_index", ",", "dtype", "=", "np", ".", "long", ")", "\n", "# -----> Mask Frame Model", "\n", "\n", "return", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader.__getitem__": [[341, 353], ["dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_text", "dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_video"], "methods", ["home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_text", "home.repos.pwc.inspect_result.microsoft_UniVL.dataloaders.dataloader_msrvtt_retrieval.MSRVTT_TrainDataLoader._get_video"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "unfold_sentences", ":", "\n", "            ", "video_id", ",", "caption", "=", "self", ".", "sentences_dict", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "video_id", ",", "caption", "=", "self", ".", "csv", "[", "'video_id'", "]", ".", "values", "[", "idx", "]", ",", "None", "\n", "", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "choice_video_ids", "=", "self", ".", "_get_text", "(", "video_id", ",", "caption", ")", "\n", "\n", "video", ",", "video_mask", ",", "masked_video", ",", "video_labels_index", "=", "self", ".", "_get_video", "(", "choice_video_ids", ")", "\n", "\n", "return", "pairs_text", ",", "pairs_mask", ",", "pairs_segment", ",", "video", ",", "video_mask", ",", "pairs_masked_text", ",", "pairs_token_labels", ",", "masked_video", ",", "video_labels_index", "\n", "", "", ""]]}