{"home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.conv_unit": [[20, 26], ["Conv2D", "LeakyReLU"], "function", ["None"], ["def", "conv_unit", "(", "inputs", ",", "nb_filter", ")", ":", "\n", "    ", "kernel", "=", "3", "\n", "x", "=", "Conv2D", "(", "nb_filter", ",", "(", "kernel", ",", "kernel", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "inputs", ")", "\n", "#x = BatchNormalization() (x)", "\n", "x", "=", "LeakyReLU", "(", "alpha", "=", "0.0", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.conv_block": [[27, 31], ["models.conv_unit", "models.conv_unit"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.conv_unit", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.conv_unit"], ["", "def", "conv_block", "(", "inputs", ",", "nb_filter", ")", ":", "\n", "    ", "x", "=", "conv_unit", "(", "inputs", ",", "nb_filter", ")", "\n", "x", "=", "conv_unit", "(", "x", ",", "nb_filter", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.Upsample_conv": [[32, 37], ["UpSampling2D", "Conv2D", "LeakyReLU"], "function", ["None"], ["", "def", "Upsample_conv", "(", "inputs", ",", "nb_filter", ")", ":", "\n", "    ", "x", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "interpolation", "=", "'bilinear'", ")", "(", "inputs", ")", "\n", "x", "=", "Conv2D", "(", "nb_filter", ",", "(", "1", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "LeakyReLU", "(", "alpha", "=", "0.0", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.skip_block": [[38, 42], ["add"], "function", ["None"], ["", "def", "skip_block", "(", "de", ",", "en", ")", ":", "\n", "    ", "concat", "=", "add", "(", "[", "en", ",", "de", "]", ")", "\n", "#concat = concatenate([en, de],axis=-1)", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.DAB_block": [[43, 63], ["keras.int_shape", "add", "AveragePooling2D", "Dense", "Activation", "Multiply", "Lambda", "Activation", "Multiply", "Conv2D", "Activation", "Multiply", "keras.mean"], "function", ["None"], ["", "def", "DAB_block", "(", "concat", ")", ":", "## CA+SA+PA", "\n", "# CA", "\n", "    ", "shape", "=", "K", ".", "int_shape", "(", "concat", ")", "\n", "x", "=", "AveragePooling2D", "(", "pool_size", "=", "(", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ")", ",", "padding", "=", "'same'", ")", "(", "concat", ")", "\n", "x", "=", "Dense", "(", "shape", "[", "3", "]", ")", "(", "x", ")", "\n", "score_c", "=", "Activation", "(", "'sigmoid'", ")", "(", "x", ")", "\n", "CA", "=", "Multiply", "(", ")", "(", "[", "concat", ",", "score_c", "]", ")", "\n", "\n", "# SA", "\n", "s_avg", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "mean", "(", "x", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "(", "concat", ")", "\n", "score_s", "=", "Activation", "(", "'sigmoid'", ")", "(", "s_avg", ")", "\n", "SA", "=", "Multiply", "(", ")", "(", "[", "concat", ",", "score_s", "]", ")", "\n", "\n", "# PA", "\n", "x", "=", "Conv2D", "(", "shape", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "concat", ")", "\n", "score_p", "=", "Activation", "(", "'sigmoid'", ")", "(", "x", ")", "\n", "PA", "=", "Multiply", "(", ")", "(", "[", "concat", ",", "score_p", "]", ")", "\n", "\n", "out", "=", "add", "(", "[", "CA", ",", "SA", ",", "PA", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.PFF_3": [[64, 82], ["keras.int_shape", "concatenate", "models.DAB_block", "DepthwiseConv2D", "Conv2D", "Conv2D", "UpSampling2D", "Multiply", "Multiply", "Conv2D", "LeakyReLU"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.DAB_block"], ["", "def", "PFF_3", "(", "pre", ",", "cur", ",", "nex", ")", ":", "\n", "    ", "shape", "=", "K", ".", "int_shape", "(", "cur", ")", "\n", "\n", "down", "=", "DepthwiseConv2D", "(", "2", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "pre", ")", "\n", "down", "=", "Conv2D", "(", "shape", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "down", ")", "\n", "\n", "up", "=", "Conv2D", "(", "shape", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "nex", ")", "\n", "up", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "interpolation", "=", "'bilinear'", ")", "(", "up", ")", "\n", "\n", "mul_low", "=", "Multiply", "(", ")", "(", "[", "down", ",", "cur", "]", ")", "\n", "mul_high", "=", "Multiply", "(", ")", "(", "[", "up", ",", "cur", "]", ")", "\n", "\n", "concat", "=", "concatenate", "(", "[", "mul_low", ",", "mul_high", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "att", "=", "DAB_block", "(", "concat", ")", "\n", "x", "=", "Conv2D", "(", "shape", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "att", ")", "\n", "x", "=", "LeakyReLU", "(", "alpha", "=", "0.0", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.PFF_2_pre": [[83, 95], ["keras.int_shape", "concatenate", "models.DAB_block", "Conv2D", "UpSampling2D", "Multiply", "Conv2D", "LeakyReLU"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.DAB_block"], ["", "def", "PFF_2_pre", "(", "cur", ",", "nex", ")", ":", "\n", "    ", "shape", "=", "K", ".", "int_shape", "(", "cur", ")", "\n", "up", "=", "Conv2D", "(", "shape", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "nex", ")", "\n", "up", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "interpolation", "=", "'bilinear'", ")", "(", "up", ")", "\n", "mul", "=", "Multiply", "(", ")", "(", "[", "cur", ",", "up", "]", ")", "\n", "\n", "concat", "=", "concatenate", "(", "[", "cur", ",", "mul", "]", ",", "axis", "=", "-", "1", ")", "\n", "att", "=", "DAB_block", "(", "concat", ")", "\n", "x", "=", "Conv2D", "(", "shape", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "att", ")", "\n", "x", "=", "LeakyReLU", "(", "alpha", "=", "0.0", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.PFF_2_nex": [[96, 107], ["keras.int_shape", "concatenate", "models.DAB_block", "DepthwiseConv2D", "Conv2D", "Multiply", "Conv2D", "LeakyReLU"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.DAB_block"], ["", "def", "PFF_2_nex", "(", "pre", ",", "cur", ")", ":", "\n", "    ", "shape", "=", "K", ".", "int_shape", "(", "cur", ")", "\n", "down", "=", "DepthwiseConv2D", "(", "2", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "pre", ")", "\n", "down", "=", "Conv2D", "(", "shape", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "down", ")", "\n", "mul", "=", "Multiply", "(", ")", "(", "[", "down", ",", "cur", "]", ")", "\n", "\n", "concat", "=", "concatenate", "(", "[", "cur", ",", "mul", "]", ",", "axis", "=", "-", "1", ")", "\n", "att", "=", "DAB_block", "(", "concat", ")", "\n", "x", "=", "Conv2D", "(", "shape", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "att", ")", "\n", "x", "=", "LeakyReLU", "(", "alpha", "=", "0.0", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.PMCNet": [[108, 145], ["EfficientNetB0", "EfficientNetB0.load_weights", "models.PFF_2_nex", "models.PFF_3", "models.PFF_3", "models.PFF_2_pre", "add", "add", "add", "add", "models.Upsample_conv", "models.skip_block", "models.conv_block", "models.Upsample_conv", "models.skip_block", "models.conv_block", "models.Upsample_conv", "models.skip_block", "models.conv_block", "models.Upsample_conv", "models.conv_block", "Model", "Model.summary", "EfficientNetB0.get_layer", "EfficientNetB0.get_layer", "EfficientNetB0.get_layer", "EfficientNetB0.get_layer", "Conv2D"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNetB0", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.PFF_2_nex", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.PFF_3", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.PFF_3", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.PFF_2_pre", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.Upsample_conv", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.skip_block", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.conv_block", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.Upsample_conv", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.skip_block", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.conv_block", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.Upsample_conv", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.skip_block", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.conv_block", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.Upsample_conv", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.models.conv_block"], ["", "def", "PMCNet", "(", "img_rows", ",", "img_cols", ",", "color_type", ",", "num_class", ")", ":", "\n", "    ", "base_model", "=", "EfficientNetB0", "(", "include_top", "=", "False", ",", "weights", "=", "None", ",", "input_shape", "=", "(", "img_rows", ",", "img_cols", ",", "color_type", ")", ")", "\n", "base_model", ".", "load_weights", "(", "\"./weights/EfficientNetB0.h5\"", ")", "\n", "nb_filter", "=", "[", "32", ",", "96", ",", "144", ",", "240", ",", "672", "]", "\n", "conv2_1", "=", "base_model", ".", "get_layer", "(", "\"swish_4\"", ")", ".", "output", "\n", "conv3_1", "=", "base_model", ".", "get_layer", "(", "\"swish_10\"", ")", ".", "output", "\n", "conv4_1", "=", "base_model", ".", "get_layer", "(", "\"swish_16\"", ")", ".", "output", "\n", "conv5_1", "=", "base_model", ".", "get_layer", "(", "\"swish_34\"", ")", ".", "output", "\n", "\n", "conv5_1_Att_PFF", "=", "PFF_2_nex", "(", "conv4_1", ",", "conv5_1", ")", "\n", "conv4_1_Att_PFF", "=", "PFF_3", "(", "conv3_1", ",", "conv4_1", ",", "conv5_1", ")", "\n", "conv3_1_Att_PFF", "=", "PFF_3", "(", "conv2_1", ",", "conv3_1", ",", "conv4_1", ")", "\n", "conv2_1_Att_PFF", "=", "PFF_2_pre", "(", "conv2_1", ",", "conv3_1", ")", "\n", "\n", "conv2_1_Att_PFF", "=", "add", "(", "[", "conv2_1_Att_PFF", ",", "conv2_1", "]", ")", "\n", "conv3_1_Att_PFF", "=", "add", "(", "[", "conv3_1_Att_PFF", ",", "conv3_1", "]", ")", "\n", "conv4_1_Att_PFF", "=", "add", "(", "[", "conv4_1_Att_PFF", ",", "conv4_1", "]", ")", "\n", "conv5_1_Att_PFF", "=", "add", "(", "[", "conv5_1_Att_PFF", ",", "conv5_1", "]", ")", "\n", "\n", "de4", "=", "Upsample_conv", "(", "conv5_1_Att_PFF", ",", "nb_filter", "[", "3", "]", ")", "\n", "concat4", "=", "skip_block", "(", "de4", ",", "conv4_1_Att_PFF", ")", "\n", "concat4", "=", "conv_block", "(", "concat4", ",", "nb_filter", "[", "3", "]", ")", "\n", "\n", "de3", "=", "Upsample_conv", "(", "concat4", ",", "nb_filter", "[", "2", "]", ")", "\n", "concat3", "=", "skip_block", "(", "de3", ",", "conv3_1_Att_PFF", ")", "\n", "concat3", "=", "conv_block", "(", "concat3", ",", "nb_filter", "[", "2", "]", ")", "\n", "\n", "de2", "=", "Upsample_conv", "(", "concat3", ",", "nb_filter", "[", "1", "]", ")", "\n", "concat2", "=", "skip_block", "(", "de2", ",", "conv2_1_Att_PFF", ")", "\n", "concat2", "=", "conv_block", "(", "concat2", ",", "nb_filter", "[", "1", "]", ")", "\n", "\n", "out", "=", "Upsample_conv", "(", "concat2", ",", "nb_filter", "[", "0", "]", ")", "\n", "out", "=", "conv_block", "(", "out", ",", "nb_filter", "[", "0", "]", ")", "\n", "out", "=", "Conv2D", "(", "num_class", ",", "(", "1", ",", "1", ")", ",", "activation", "=", "'softmax'", ",", "padding", "=", "'same'", ")", "(", "out", ")", "\n", "model", "=", "Model", "(", "base_model", ".", "input", ",", "out", ")", "\n", "model", ".", "summary", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.train.multi_class": [[15, 18], ["keras.categorical_crossentropy"], "function", ["None"], ["def", "multi_class", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "CE", "=", "K", ".", "categorical_crossentropy", "(", "y_true", ",", "y_pred", ")", "\n", "return", "CE", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.train.step_decay": [[19, 24], ["math.pow"], "function", ["None"], ["", "def", "step_decay", "(", "epoch", ")", ":", "\n", "    ", "initial_lrate", "=", "0.0001", "\n", "epochs_drop", "=", "60", "\n", "lrate", "=", "initial_lrate", "*", "math", ".", "pow", "(", "1", "-", "(", "1", "+", "epoch", ")", "/", "epochs_drop", ",", "0.9", ")", "\n", "return", "lrate", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.Evaluator.__init__": [[17, 20], ["list", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "Dice", "=", "list", "(", ")", "\n", "self", ".", "IoU_polyp", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.Evaluator.evaluate": [[21, 49], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "\n", "        ", "pred_binary", "=", "pred", "\n", "pred_binary_inverse", "=", "(", "pred_binary", "==", "0", ")", "\n", "\n", "gt_binary", "=", "(", "gt", ">=", "0.5", ")", "\n", "gt_binary_inverse", "=", "(", "gt_binary", "==", "0", ")", "\n", "\n", "TP", "=", "(", "pred_binary", "*", "gt_binary", ")", ".", "sum", "(", ")", "\n", "FP", "=", "(", "pred_binary", "*", "gt_binary_inverse", ")", ".", "sum", "(", ")", "\n", "TN", "=", "(", "pred_binary_inverse", "*", "gt_binary_inverse", ")", ".", "sum", "(", ")", "\n", "FN", "=", "(", "pred_binary_inverse", "*", "gt_binary", ")", ".", "sum", "(", ")", "\n", "\n", "if", "TP", "==", "0", ":", "\n", "            ", "TP", "=", "0.1", "\n", "# recall", "\n", "", "Recall", "=", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "# Precision or positive predictive value", "\n", "Precision", "=", "TP", "/", "(", "TP", "+", "FP", ")", "\n", "#Specificity = TN / (TN + FP)", "\n", "# F1 score = Dice", "\n", "Dice", "=", "2", "*", "Precision", "*", "Recall", "/", "(", "Precision", "+", "Recall", ")", "\n", "# Overall accuracy", "\n", "Accuracy", "=", "(", "TP", "+", "TN", ")", "/", "(", "TP", "+", "FP", "+", "FN", "+", "TN", ")", "\n", "# IoU for poly", "\n", "IoU_polyp", "=", "TP", "/", "(", "TP", "+", "FP", "+", "FN", ")", "\n", "\n", "return", "Dice", ",", "IoU_polyp", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.Evaluator.update": [[51, 55], ["utils.Evaluator.evaluate", "utils.Evaluator.Dice.append", "utils.Evaluator.IoU_polyp.append"], "methods", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.Evaluator.evaluate"], ["", "def", "update", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "dice", ",", "ioU_polyp", "=", "self", ".", "evaluate", "(", "pred", ",", "gt", ")", "\n", "self", ".", "Dice", ".", "append", "(", "dice", ")", "\n", "self", ".", "IoU_polyp", ".", "append", "(", "ioU_polyp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.Evaluator.show": [[56, 59], ["round", "round", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "show", "(", "self", ")", ":", "\n", "\n", "        ", "return", "round", "(", "np", ".", "mean", "(", "self", ".", "Dice", ")", "*", "100", ",", "2", ")", ",", "round", "(", "np", ".", "mean", "(", "self", ".", "IoU_polyp", ")", "*", "100", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.resize_label": [[62, 68], ["range", "numpy.array", "len", "cv2.resize", "new_mask.append"], "function", ["None"], ["", "", "def", "resize_label", "(", "masks", ",", "w", ",", "h", ")", ":", "\n", "    ", "new_mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "masks", ")", ")", ":", "\n", "        ", "label", "=", "cv2", ".", "resize", "(", "masks", "[", "i", "]", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "new_mask", ".", "append", "(", "label", ")", "\n", "", "return", "np", ".", "array", "(", "new_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.make_label": [[69, 73], ["keras.utils.to_categorical"], "function", ["None"], ["", "def", "make_label", "(", "label", ")", ":", "\n", "\n", "    ", "new", "=", "to_categorical", "(", "label", ",", "3", ")", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.dataGenerator": [[74, 90], ["keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "zip", "utils.make_label"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.make_label"], ["", "def", "dataGenerator", "(", "batch_size", ",", "target_size", ",", "train_path", ",", "image_folder", "=", "'images'", ",", "mask_folder", "=", "'masks'", ",", "\n", "seed", "=", "100", ",", "image_color_mode", "=", "\"rgb\"", ",", "mask_color_mode", "=", "\"grayscale\"", ")", ":", "\n", "\n", "    ", "image_datagen", "=", "ImageDataGenerator", "(", "fill_mode", "=", "'nearest'", ")", "\n", "mask_datagen", "=", "ImageDataGenerator", "(", "fill_mode", "=", "'nearest'", ")", "\n", "\n", "image_generator", "=", "image_datagen", ".", "flow_from_directory", "(", "train_path", ",", "classes", "=", "[", "image_folder", "]", ",", "class_mode", "=", "None", ",", "\n", "color_mode", "=", "image_color_mode", ",", "target_size", "=", "target_size", ",", "batch_size", "=", "batch_size", ",", "seed", "=", "seed", ")", "\n", "\n", "mask_generator", "=", "mask_datagen", ".", "flow_from_directory", "(", "train_path", ",", "classes", "=", "[", "mask_folder", "]", ",", "class_mode", "=", "None", ",", "\n", "color_mode", "=", "mask_color_mode", ",", "target_size", "=", "target_size", ",", "batch_size", "=", "batch_size", ",", "seed", "=", "seed", ")", "\n", "\n", "train_generator", "=", "zip", "(", "image_generator", ",", "mask_generator", ")", "\n", "for", "(", "img", ",", "mask", ")", "in", "train_generator", ":", "\n", "        ", "labels", "=", "make_label", "(", "mask", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "yield", "(", "img", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.get_full_test_data": [[91, 112], ["os.listdir", "sorted", "len", "numpy.empty", "numpy.empty", "PIL.Image.open", "numpy.asarray", "cv2.resize", "PIL.Image.open", "numpy.asarray", "cv2.resize"], "function", ["None"], ["", "", "def", "get_full_test_data", "(", "imgs_dir", ",", "label_dir", ",", "h", ",", "w", ")", ":", "\n", "    ", "iter_tot", "=", "0", "\n", "image_names", "=", "os", ".", "listdir", "(", "imgs_dir", ")", "\n", "image_names", "=", "sorted", "(", "image_names", ")", "\n", "images_num", "=", "len", "(", "image_names", ")", "\n", "images", "=", "np", ".", "empty", "(", "(", "images_num", ",", "h", ",", "w", ",", "3", ")", ")", "\n", "labels", "=", "np", ".", "empty", "(", "(", "images_num", ",", "h", ",", "w", ")", ")", "\n", "\n", "for", "name", "in", "(", "image_names", ")", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "imgs_dir", "+", "name", ")", "\n", "#image = image.resize((h,h))", "\n", "image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "label", "=", "Image", ".", "open", "(", "label_dir", "+", "name", "[", ":", "-", "4", "]", "+", "'.png'", ")", "\n", "#label = label.resize((h,h))", "\n", "label", "=", "np", ".", "asarray", "(", "label", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "images", "[", "iter_tot", "]", "=", "image", "\n", "labels", "[", "iter_tot", "]", "=", "label", "\n", "iter_tot", "=", "iter_tot", "+", "1", "\n", "", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.get_scores": [[113, 117], ["pred.flatten", "label.flatten"], "function", ["None"], ["", "def", "get_scores", "(", "pred", ",", "label", ")", ":", "\n", "    ", "y_pred", "=", "pred", ".", "flatten", "(", ")", "\n", "y_true", "=", "label", ".", "flatten", "(", ")", "\n", "return", "y_pred", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.PR_AUC": [[118, 123], ["utils.get_scores", "precision_recall_curve", "auc"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.get_scores"], ["", "def", "PR_AUC", "(", "pred", ",", "label", ")", ":", "\n", "    ", "y_pred", ",", "y_true", "=", "get_scores", "(", "pred", ",", "label", ")", "\n", "precision", ",", "recall", ",", "thresholds", "=", "precision_recall_curve", "(", "y_true", ",", "y_pred", ")", "\n", "pr_auc", "=", "auc", "(", "recall", ",", "precision", ")", "\n", "return", "pr_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.save_results": [[124, 144], ["numpy.argmax", "len", "range", "numpy.zeros", "numpy.zeros", "cv2.imwrite", "str"], "function", ["None"], ["", "def", "save_results", "(", "images", ",", "probs", ",", "lables", ",", "save_dir", ",", "h", ",", "w", ")", ":", "\n", "    ", "predictions", "=", "np", ".", "argmax", "(", "probs", ",", "axis", "=", "-", "1", ")", "\n", "test_num", "=", "len", "(", "images", ")", "\n", "for", "i", "in", "range", "(", "test_num", ")", ":", "\n", "        ", "gray_image", "=", "images", "[", "i", "]", "\n", "label", "=", "lables", "[", "i", "]", "\n", "pred", "=", "predictions", "[", "i", "]", "\n", "\n", "label_vis", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "label_vis", "[", "label", "==", "1", "]", "=", "[", "255", ",", "0", ",", "0", "]", "\n", "label_vis", "[", "label", "==", "2", "]", "=", "[", "0", ",", "255", ",", "0", "]", "\n", "label_vis", "[", "label", "==", "3", "]", "=", "[", "0", ",", "0", ",", "255", "]", "\n", "label_vis", "[", "label", "==", "4", "]", "=", "[", "255", ",", "0", ",", "255", "]", "\n", "\n", "pred_vis", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "pred_vis", "[", "pred", "==", "1", "]", "=", "[", "255", ",", "0", ",", "0", "]", "\n", "pred_vis", "[", "pred", "==", "2", "]", "=", "[", "0", ",", "255", ",", "0", "]", "\n", "pred_vis", "[", "pred", "==", "3", "]", "=", "[", "0", ",", "0", ",", "255", "]", "\n", "pred_vis", "[", "pred", "==", "4", "]", "=", "[", "255", ",", "0", ",", "255", "]", "\n", "cv2", ".", "imwrite", "(", "save_dir", "+", "'Pred'", "+", "str", "(", "i", ")", "+", "'.png'", ",", "pred_vis", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.Multi_dataGenerator": [[148, 172], ["keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "zip", "utils.make_label", "utils.resize_label", "utils.resize_label", "utils.resize_label", "utils.resize_label", "utils.make_label", "utils.make_label", "utils.make_label", "utils.make_label"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.make_label", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.resize_label", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.resize_label", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.resize_label", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.resize_label", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.make_label", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.make_label", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.make_label", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.None.utils.make_label"], ["", "", "def", "Multi_dataGenerator", "(", "batch_size", ",", "target_size", ",", "train_path", ",", "image_folder", "=", "'images'", ",", "mask_folder", "=", "'masks'", ",", "\n", "seed", "=", "1000", ",", "image_color_mode", "=", "\"rgb\"", ",", "mask_color_mode", "=", "\"grayscale\"", ")", ":", "\n", "    ", "w", ",", "h", "=", "1440", ",", "960", "\n", "image_datagen", "=", "ImageDataGenerator", "(", "fill_mode", "=", "'nearest'", ")", "\n", "mask_datagen", "=", "ImageDataGenerator", "(", "fill_mode", "=", "'nearest'", ")", "\n", "\n", "image_generator", "=", "image_datagen", ".", "flow_from_directory", "(", "train_path", ",", "classes", "=", "[", "image_folder", "]", ",", "class_mode", "=", "None", ",", "\n", "color_mode", "=", "image_color_mode", ",", "target_size", "=", "target_size", ",", "batch_size", "=", "batch_size", ",", "seed", "=", "seed", ")", "\n", "\n", "mask_generator", "=", "mask_datagen", ".", "flow_from_directory", "(", "train_path", ",", "classes", "=", "[", "mask_folder", "]", ",", "class_mode", "=", "None", ",", "\n", "color_mode", "=", "mask_color_mode", ",", "target_size", "=", "target_size", ",", "batch_size", "=", "batch_size", ",", "seed", "=", "seed", ")", "\n", "\n", "train_generator", "=", "zip", "(", "image_generator", ",", "mask_generator", ")", "\n", "for", "(", "img", ",", "mask", ")", "in", "train_generator", ":", "\n", "        ", "labels", "=", "make_label", "(", "mask", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "label_2", "=", "resize_label", "(", "mask", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "w", "//", "2", ",", "h", "//", "2", ")", "\n", "label_4", "=", "resize_label", "(", "mask", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "w", "//", "4", ",", "h", "//", "4", ")", "\n", "label_8", "=", "resize_label", "(", "mask", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "w", "//", "8", ",", "h", "//", "8", ")", "\n", "label_16", "=", "resize_label", "(", "mask", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "w", "//", "16", ",", "h", "//", "16", ")", "\n", "label_2", "=", "make_label", "(", "label_2", ")", "\n", "label_4", "=", "make_label", "(", "label_4", ")", "\n", "label_8", "=", "make_label", "(", "label_8", ")", "\n", "label_16", "=", "make_label", "(", "label_16", ")", "\n", "yield", "(", "img", ",", "[", "labels", ",", "label_2", ",", "label_4", ",", "label_8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.layers.Swish.call": [[22, 24], ["tensorflow.nn.swish"], "methods", ["None"], ["    ", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "swish", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.layers.DropConnect.__init__": [[27, 30], ["keras.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.layers.DropConnect.__init__"], ["    ", "def", "__init__", "(", "self", ",", "drop_connect_rate", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "drop_connect_rate", "=", "drop_connect_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.layers.DropConnect.call": [[31, 46], ["keras.in_train_phase", "keras.in_train_phase", "tensorflow.random_uniform", "tensorflow.floor", "tensorflow.shape", "tensorflow.div"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "None", ")", ":", "\n", "        ", "def", "drop_connect", "(", ")", ":", "\n", "            ", "keep_prob", "=", "1.0", "-", "self", ".", "drop_connect_rate", "\n", "\n", "# Compute drop_connect tensor", "\n", "batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "\n", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "inputs", ".", "dtype", "\n", ")", "\n", "binary_tensor", "=", "tf", ".", "floor", "(", "random_tensor", ")", "\n", "output", "=", "tf", ".", "div", "(", "inputs", ",", "keep_prob", ")", "*", "binary_tensor", "\n", "return", "output", "\n", "\n", "", "return", "K", ".", "in_train_phase", "(", "drop_connect", ",", "inputs", ",", "training", "=", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.layers.DropConnect.get_config": [[47, 51], ["super().get_config"], "methods", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.layers.DropConnect.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", ")", ".", "get_config", "(", ")", "\n", "config", "[", "\"drop_connect_rate\"", "]", "=", "self", ".", "drop_connect_rate", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.BlockDecoder._decode_block_string": [[138, 161], ["isinstance", "block_string.split", "BlockArgs", "re.split", "ValueError", "len", "len", "int", "int", "int", "int", "int", "float", "int", "int"], "methods", ["None"], ["def", "_decode_block_string", "(", "self", ",", "block_string", ")", ":", "\n", "        ", "\"\"\"Gets a block through a string notation of arguments.\"\"\"", "\n", "assert", "isinstance", "(", "block_string", ",", "str", ")", "\n", "ops", "=", "block_string", ".", "split", "(", "\"_\"", ")", "\n", "options", "=", "{", "}", "\n", "for", "op", "in", "ops", ":", "\n", "            ", "splits", "=", "re", ".", "split", "(", "r\"(\\d.*)\"", ",", "op", ")", "\n", "if", "len", "(", "splits", ")", ">=", "2", ":", "\n", "                ", "key", ",", "value", "=", "splits", "[", ":", "2", "]", "\n", "options", "[", "key", "]", "=", "value", "\n", "\n", "", "", "if", "\"s\"", "not", "in", "options", "or", "len", "(", "options", "[", "\"s\"", "]", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Strides options should be a pair of integers.\"", ")", "\n", "\n", "", "return", "BlockArgs", "(", "\n", "kernel_size", "=", "int", "(", "options", "[", "\"k\"", "]", ")", ",", "\n", "num_repeat", "=", "int", "(", "options", "[", "\"r\"", "]", ")", ",", "\n", "input_filters", "=", "int", "(", "options", "[", "\"i\"", "]", ")", ",", "\n", "output_filters", "=", "int", "(", "options", "[", "\"o\"", "]", ")", ",", "\n", "expand_ratio", "=", "int", "(", "options", "[", "\"e\"", "]", ")", ",", "\n", "id_skip", "=", "(", "\"noskip\"", "not", "in", "block_string", ")", ",", "\n", "se_ratio", "=", "float", "(", "options", "[", "\"se\"", "]", ")", "if", "\"se\"", "in", "options", "else", "None", ",", "\n", "strides", "=", "[", "int", "(", "options", "[", "\"s\"", "]", "[", "0", "]", ")", ",", "int", "(", "options", "[", "\"s\"", "]", "[", "1", "]", ")", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.BlockDecoder._encode_block_string": [[163, 178], ["args.append", "args.append"], "methods", ["None"], ["", "def", "_encode_block_string", "(", "self", ",", "block", ")", ":", "\n", "        ", "\"\"\"Encodes a block to a string.\"\"\"", "\n", "args", "=", "[", "\n", "\"r%d\"", "%", "block", ".", "num_repeat", ",", "\n", "\"k%d\"", "%", "block", ".", "kernel_size", ",", "\n", "\"s%d%d\"", "%", "(", "block", ".", "strides", "[", "0", "]", ",", "block", ".", "strides", "[", "1", "]", ")", ",", "\n", "\"e%s\"", "%", "block", ".", "expand_ratio", ",", "\n", "\"i%d\"", "%", "block", ".", "input_filters", ",", "\n", "\"o%d\"", "%", "block", ".", "output_filters", ",", "\n", "]", "\n", "if", "block", ".", "se_ratio", ">", "0", "and", "block", ".", "se_ratio", "<=", "1", ":", "\n", "            ", "args", ".", "append", "(", "\"se%s\"", "%", "block", ".", "se_ratio", ")", "\n", "", "if", "block", ".", "id_skip", "is", "False", ":", "\n", "            ", "args", ".", "append", "(", "\"noskip\"", ")", "\n", "", "return", "\"_\"", ".", "join", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.BlockDecoder.decode": [[179, 193], ["isinstance", "blocks_args.append", "params.BlockDecoder._decode_block_string"], "methods", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.BlockDecoder._decode_block_string"], ["", "def", "decode", "(", "self", ",", "string_list", ")", ":", "\n", "        ", "\"\"\"Decodes a list of string notations to specify blocks inside the network.\n\n    Args:\n      string_list: a list of strings, each string is a notation of block.\n\n    Returns:\n      A list of namedtuples to represent blocks arguments.\n    \"\"\"", "\n", "assert", "isinstance", "(", "string_list", ",", "list", ")", "\n", "blocks_args", "=", "[", "]", "\n", "for", "block_string", "in", "string_list", ":", "\n", "            ", "blocks_args", ".", "append", "(", "self", ".", "_decode_block_string", "(", "block_string", ")", ")", "\n", "", "return", "blocks_args", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.BlockDecoder.encode": [[194, 206], ["block_strings.append", "params.BlockDecoder._encode_block_string"], "methods", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.BlockDecoder._encode_block_string"], ["", "def", "encode", "(", "self", ",", "blocks_args", ")", ":", "\n", "        ", "\"\"\"Encodes a list of Blocks to a list of strings.\n\n    Args:\n      blocks_args: A list of namedtuples to represent blocks arguments.\n    Returns:\n      a list of strings, each string is a notation of block.\n    \"\"\"", "\n", "block_strings", "=", "[", "]", "\n", "for", "block", "in", "blocks_args", ":", "\n", "            ", "block_strings", ".", "append", "(", "self", ".", "_encode_block_string", "(", "block", ")", ")", "\n", "", "return", "block_strings", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.efficientnet_params": [[119, 133], ["None"], "function", ["None"], ["def", "efficientnet_params", "(", "model_name", ")", ":", "\n", "    ", "\"\"\"Get efficientnet params based on model name.\"\"\"", "\n", "params_dict", "=", "{", "\n", "# (width_coefficient, depth_coefficient, resolution, dropout_rate)", "\n", "\"efficientnet-b0\"", ":", "(", "1.0", ",", "1.0", ",", "224", ",", "0.2", ")", ",", "\n", "\"efficientnet-b1\"", ":", "(", "1.0", ",", "1.1", ",", "240", ",", "0.2", ")", ",", "\n", "\"efficientnet-b2\"", ":", "(", "1.1", ",", "1.2", ",", "260", ",", "0.3", ")", ",", "\n", "\"efficientnet-b3\"", ":", "(", "1.2", ",", "1.4", ",", "300", ",", "0.3", ")", ",", "\n", "\"efficientnet-b4\"", ":", "(", "1.4", ",", "1.8", ",", "380", ",", "0.4", ")", ",", "\n", "\"efficientnet-b5\"", ":", "(", "1.6", ",", "2.2", ",", "456", ",", "0.4", ")", ",", "\n", "\"efficientnet-b6\"", ":", "(", "1.8", ",", "2.6", ",", "528", ",", "0.5", ")", ",", "\n", "\"efficientnet-b7\"", ":", "(", "2.0", ",", "3.1", ",", "600", ",", "0.5", ")", ",", "\n", "}", "\n", "return", "params_dict", "[", "model_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.efficientnet": [[208, 238], ["GlobalParams", "params.BlockDecoder", "params.BlockDecoder.decode"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.BlockDecoder.decode"], ["", "", "def", "efficientnet", "(", "\n", "width_coefficient", "=", "None", ",", "\n", "depth_coefficient", "=", "None", ",", "\n", "dropout_rate", "=", "0.2", ",", "\n", "drop_connect_rate", "=", "0.2", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Creates a efficientnet model.\"\"\"", "\n", "blocks_args", "=", "[", "\n", "\"r1_k3_s11_e1_i32_o16_se0.25\"", ",", "\n", "\"r2_k3_s22_e6_i16_o24_se0.25\"", ",", "\n", "\"r2_k5_s22_e6_i24_o40_se0.25\"", ",", "\n", "\"r3_k3_s22_e6_i40_o80_se0.25\"", ",", "\n", "\"r3_k5_s11_e6_i80_o112_se0.25\"", ",", "\n", "\"r4_k5_s22_e6_i112_o192_se0.25\"", ",", "\n", "\"r1_k3_s11_e6_i192_o320_se0.25\"", ",", "\n", "]", "\n", "global_params", "=", "GlobalParams", "(", "\n", "batch_norm_momentum", "=", "0.99", ",", "\n", "batch_norm_epsilon", "=", "1e-3", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "\n", "drop_connect_rate", "=", "drop_connect_rate", ",", "\n", "data_format", "=", "\"channels_last\"", ",", "\n", "num_classes", "=", "1000", ",", "\n", "width_coefficient", "=", "width_coefficient", ",", "\n", "depth_coefficient", "=", "depth_coefficient", ",", "\n", "depth_divisor", "=", "8", ",", "\n", "min_depth", "=", "None", ",", "\n", ")", "\n", "decoder", "=", "BlockDecoder", "(", ")", "\n", "return", "decoder", ".", "decode", "(", "blocks_args", ")", ",", "global_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.get_model_params": [[240, 260], ["model_name.startswith", "params.efficientnet_params", "params.efficientnet", "NotImplementedError", "global_params._replace._replace"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.efficientnet_params", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.efficientnet"], ["", "def", "get_model_params", "(", "model_name", ",", "override_params", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get the block args and global params for a given model.\"\"\"", "\n", "if", "model_name", ".", "startswith", "(", "\"efficientnet\"", ")", ":", "\n", "        ", "width_coefficient", ",", "depth_coefficient", ",", "input_shape", ",", "dropout_rate", "=", "efficientnet_params", "(", "\n", "model_name", "\n", ")", "\n", "blocks_args", ",", "global_params", "=", "efficientnet", "(", "\n", "width_coefficient", ",", "depth_coefficient", ",", "dropout_rate", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"model name is not pre-defined: %s\"", "%", "model_name", ")", "\n", "\n", "", "if", "override_params", ":", "\n", "# ValueError will be raised here if override_params has fields not included", "\n", "# in global_params.", "\n", "        ", "global_params", "=", "global_params", ".", "_replace", "(", "**", "override_params", ")", "\n", "\n", "# print('global_params= %s', global_params)", "\n", "# print('blocks_args= %s', blocks_args)", "\n", "", "return", "blocks_args", ",", "global_params", ",", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.preprocessing.center_crop_and_resize": [[29, 53], ["int", "skimage.transform.resize", "MAP_INTERPOLATION_TO_ORDER.keys", "min"], "function", ["None"], ["def", "center_crop_and_resize", "(", "image", ",", "image_size", ",", "crop_padding", "=", "32", ",", "interpolation", "=", "\"bicubic\"", ")", ":", "\n", "    ", "assert", "image", ".", "ndim", "in", "{", "2", ",", "3", "}", "\n", "assert", "interpolation", "in", "MAP_INTERPOLATION_TO_ORDER", ".", "keys", "(", ")", "\n", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "padded_center_crop_size", "=", "int", "(", "\n", "(", "image_size", "/", "(", "image_size", "+", "crop_padding", ")", ")", "*", "min", "(", "h", ",", "w", ")", "\n", ")", "\n", "offset_height", "=", "(", "(", "h", "-", "padded_center_crop_size", ")", "+", "1", ")", "//", "2", "\n", "offset_width", "=", "(", "(", "w", "-", "padded_center_crop_size", ")", "+", "1", ")", "//", "2", "\n", "\n", "image_crop", "=", "image", "[", "\n", "offset_height", ":", "padded_center_crop_size", "+", "offset_height", ",", "\n", "offset_width", ":", "padded_center_crop_size", "+", "offset_width", ",", "\n", "]", "\n", "resized_image", "=", "resize", "(", "\n", "image_crop", ",", "\n", "(", "image_size", ",", "image_size", ")", ",", "\n", "order", "=", "MAP_INTERPOLATION_TO_ORDER", "[", "interpolation", "]", ",", "\n", "preserve_range", "=", "True", ",", "\n", ")", "\n", "\n", "return", "resized_image", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.preprocessing.preprocess_input": [[55, 63], ["numpy.array", "numpy.array"], "function", ["None"], ["", "def", "preprocess_input", "(", "x", ")", ":", "\n", "    ", "assert", "x", ".", "ndim", "in", "(", "3", ",", "4", ")", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "\n", "x", "=", "x", "-", "np", ".", "array", "(", "MEAN_RGB", ")", "\n", "x", "=", "x", "/", "np", ".", "array", "(", "STDDEV_RGB", ")", "\n", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.round_filters": [[56, 73], ["max", "int", "int"], "function", ["None"], ["def", "round_filters", "(", "filters", ",", "global_params", ")", ":", "\n", "    ", "\"\"\"Round number of filters based on depth multiplier.\"\"\"", "\n", "orig_f", "=", "filters", "\n", "multiplier", "=", "global_params", ".", "width_coefficient", "\n", "divisor", "=", "global_params", ".", "depth_divisor", "\n", "min_depth", "=", "global_params", ".", "min_depth", "\n", "if", "not", "multiplier", ":", "\n", "        ", "return", "filters", "\n", "\n", "", "filters", "*=", "multiplier", "\n", "min_depth", "=", "min_depth", "or", "divisor", "\n", "new_filters", "=", "max", "(", "min_depth", ",", "int", "(", "filters", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_filters", "<", "0.9", "*", "filters", ":", "\n", "        ", "new_filters", "+=", "divisor", "\n", "# print('round_filter input={} output={}'.format(orig_f, new_filters))", "\n", "", "return", "int", "(", "new_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.round_repeats": [[75, 81], ["int", "math.ceil"], "function", ["None"], ["", "def", "round_repeats", "(", "repeats", ",", "global_params", ")", ":", "\n", "    ", "\"\"\"Round number of filters based on depth multiplier.\"\"\"", "\n", "multiplier", "=", "global_params", ".", "depth_coefficient", "\n", "if", "not", "multiplier", ":", "\n", "        ", "return", "repeats", "\n", "", "return", "int", "(", "math", ".", "ceil", "(", "multiplier", "*", "repeats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.SEBlock": [[83, 119], ["max", "int", "keras.Lambda", "keras.Conv2D", "layers.Swish", "keras.Conv2D", "keras.Activation", "keras.Multiply", "keras.mean"], "function", ["None"], ["", "def", "SEBlock", "(", "block_args", ",", "global_params", ")", ":", "\n", "    ", "num_reduced_filters", "=", "max", "(", "1", ",", "int", "(", "block_args", ".", "input_filters", "*", "block_args", ".", "se_ratio", ")", ")", "\n", "filters", "=", "block_args", ".", "input_filters", "*", "block_args", ".", "expand_ratio", "\n", "if", "global_params", ".", "data_format", "==", "\"channels_first\"", ":", "\n", "        ", "channel_axis", "=", "1", "\n", "spatial_dims", "=", "[", "2", ",", "3", "]", "\n", "", "else", ":", "\n", "        ", "channel_axis", "=", "-", "1", "\n", "spatial_dims", "=", "[", "1", ",", "2", "]", "\n", "\n", "", "def", "block", "(", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "x", "=", "KL", ".", "Lambda", "(", "lambda", "a", ":", "K", ".", "mean", "(", "a", ",", "axis", "=", "spatial_dims", ",", "keepdims", "=", "True", ")", ")", "(", "x", ")", "\n", "x", "=", "KL", ".", "Conv2D", "(", "\n", "num_reduced_filters", ",", "\n", "kernel_size", "=", "[", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", "]", ",", "\n", "kernel_initializer", "=", "conv_kernel_initializer", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "use_bias", "=", "True", ",", "\n", ")", "(", "x", ")", "\n", "x", "=", "Swish", "(", ")", "(", "x", ")", "\n", "# Excite", "\n", "x", "=", "KL", ".", "Conv2D", "(", "\n", "filters", ",", "\n", "kernel_size", "=", "[", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", "]", ",", "\n", "kernel_initializer", "=", "conv_kernel_initializer", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "use_bias", "=", "True", ",", "\n", ")", "(", "x", ")", "\n", "x", "=", "KL", ".", "Activation", "(", "\"sigmoid\"", ")", "(", "x", ")", "\n", "out", "=", "KL", ".", "Multiply", "(", ")", "(", "[", "x", ",", "inputs", "]", ")", "\n", "return", "out", "\n", "\n", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.MBConvBlock": [[121, 202], ["keras.DepthwiseConv2D", "keras.BatchNormalization", "layers.Swish", "keras.Conv2D", "keras.BatchNormalization", "keras.Conv2D", "keras.BatchNormalization", "layers.Swish", "model.SEBlock", "all", "keras.Add", "layers.DropConnect"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.SEBlock"], ["", "def", "MBConvBlock", "(", "block_args", ",", "global_params", ",", "drop_connect_rate", "=", "None", ")", ":", "\n", "    ", "batch_norm_momentum", "=", "global_params", ".", "batch_norm_momentum", "\n", "batch_norm_epsilon", "=", "global_params", ".", "batch_norm_epsilon", "\n", "\n", "if", "global_params", ".", "data_format", "==", "\"channels_first\"", ":", "\n", "        ", "channel_axis", "=", "1", "\n", "spatial_dims", "=", "[", "2", ",", "3", "]", "\n", "", "else", ":", "\n", "        ", "channel_axis", "=", "-", "1", "\n", "spatial_dims", "=", "[", "1", ",", "2", "]", "\n", "\n", "", "has_se", "=", "(", "\n", "(", "block_args", ".", "se_ratio", "is", "not", "None", ")", "\n", "and", "(", "block_args", ".", "se_ratio", ">", "0", ")", "\n", "and", "(", "block_args", ".", "se_ratio", "<=", "1", ")", "\n", ")", "\n", "\n", "filters", "=", "block_args", ".", "input_filters", "*", "block_args", ".", "expand_ratio", "\n", "kernel_size", "=", "block_args", ".", "kernel_size", "\n", "\n", "def", "block", "(", "inputs", ")", ":", "\n", "\n", "        ", "if", "block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "x", "=", "KL", ".", "Conv2D", "(", "\n", "filters", ",", "\n", "kernel_size", "=", "[", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", "]", ",", "\n", "kernel_initializer", "=", "conv_kernel_initializer", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "use_bias", "=", "False", ",", "\n", ")", "(", "inputs", ")", "\n", "x", "=", "KL", ".", "BatchNormalization", "(", "\n", "axis", "=", "channel_axis", ",", "\n", "momentum", "=", "batch_norm_momentum", ",", "\n", "epsilon", "=", "batch_norm_epsilon", ",", "\n", ")", "(", "x", ")", "\n", "x", "=", "Swish", "(", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "inputs", "\n", "\n", "", "x", "=", "KL", ".", "DepthwiseConv2D", "(", "\n", "[", "kernel_size", ",", "kernel_size", "]", ",", "\n", "strides", "=", "block_args", ".", "strides", ",", "\n", "depthwise_initializer", "=", "conv_kernel_initializer", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "use_bias", "=", "False", ",", "\n", ")", "(", "x", ")", "\n", "x", "=", "KL", ".", "BatchNormalization", "(", "\n", "axis", "=", "channel_axis", ",", "momentum", "=", "batch_norm_momentum", ",", "epsilon", "=", "batch_norm_epsilon", "\n", ")", "(", "x", ")", "\n", "x", "=", "Swish", "(", ")", "(", "x", ")", "\n", "\n", "if", "has_se", ":", "\n", "            ", "x", "=", "SEBlock", "(", "block_args", ",", "global_params", ")", "(", "x", ")", "\n", "\n", "# output phase", "\n", "\n", "", "x", "=", "KL", ".", "Conv2D", "(", "\n", "block_args", ".", "output_filters", ",", "\n", "kernel_size", "=", "[", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", "]", ",", "\n", "kernel_initializer", "=", "conv_kernel_initializer", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "use_bias", "=", "False", ",", "\n", ")", "(", "x", ")", "\n", "x", "=", "KL", ".", "BatchNormalization", "(", "\n", "axis", "=", "channel_axis", ",", "momentum", "=", "batch_norm_momentum", ",", "epsilon", "=", "batch_norm_epsilon", "\n", ")", "(", "x", ")", "\n", "\n", "if", "block_args", ".", "id_skip", ":", "\n", "            ", "if", "(", "\n", "all", "(", "s", "==", "1", "for", "s", "in", "block_args", ".", "strides", ")", "\n", "and", "block_args", ".", "input_filters", "==", "block_args", ".", "output_filters", "\n", ")", ":", "\n", "# only apply drop_connect if skip presents.", "\n", "                ", "if", "drop_connect_rate", ":", "\n", "                    ", "x", "=", "DropConnect", "(", "drop_connect_rate", ")", "(", "x", ")", "\n", "", "x", "=", "KL", ".", "Add", "(", ")", "(", "[", "x", ",", "inputs", "]", ")", "\n", "", "", "return", "x", "\n", "\n", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNet": [[204, 300], ["sum", "keras.Model", "keras.Input", "keras.Conv2D", "keras.BatchNormalization", "layers.Swish", "block_args._replace._replace", "six.moves.xrange", "keras.Conv2D", "keras.BatchNormalization", "layers.Swish", "keras.is_keras_tensor", "keras.Input", "model.MBConvBlock", "block_args._replace._replace", "keras.GlobalAveragePooling2D", "keras.Dense", "keras.Activation", "model.round_filters", "model.round_filters", "model.round_filters", "model.round_repeats", "model.MBConvBlock", "model.round_filters", "keras.Dropout", "keras.GlobalAveragePooling2D", "keras.GlobalMaxPooling2D"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.MBConvBlock", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.round_filters", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.round_filters", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.round_filters", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.round_repeats", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.MBConvBlock", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.round_filters"], ["", "def", "EfficientNet", "(", "\n", "input_shape", ",", "block_args_list", ",", "global_params", ",", "input_tensor", "=", "None", ",", "include_top", "=", "True", ",", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "batch_norm_momentum", "=", "global_params", ".", "batch_norm_momentum", "\n", "batch_norm_epsilon", "=", "global_params", ".", "batch_norm_epsilon", "\n", "if", "global_params", ".", "data_format", "==", "\"channels_first\"", ":", "\n", "        ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "        ", "channel_axis", "=", "-", "1", "\n", "\n", "# Stem part", "\n", "", "if", "input_tensor", "is", "None", ":", "\n", "        ", "inputs", "=", "KL", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "K", ".", "is_keras_tensor", "(", "input_tensor", ")", ":", "\n", "            ", "inputs", "=", "KL", ".", "Input", "(", "tensor", "=", "input_tensor", ",", "shape", "=", "input_shape", ")", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "input_tensor", "\n", "", "", "x", "=", "inputs", "\n", "x", "=", "KL", ".", "Conv2D", "(", "\n", "filters", "=", "round_filters", "(", "32", ",", "global_params", ")", ",", "\n", "kernel_size", "=", "[", "3", ",", "3", "]", ",", "\n", "strides", "=", "[", "2", ",", "2", "]", ",", "\n", "kernel_initializer", "=", "conv_kernel_initializer", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "use_bias", "=", "False", ",", "\n", ")", "(", "x", ")", "\n", "x", "=", "KL", ".", "BatchNormalization", "(", "\n", "axis", "=", "channel_axis", ",", "momentum", "=", "batch_norm_momentum", ",", "epsilon", "=", "batch_norm_epsilon", "\n", ")", "(", "x", ")", "\n", "x", "=", "Swish", "(", ")", "(", "x", ")", "\n", "\n", "# Blocks part", "\n", "block_idx", "=", "1", "\n", "n_blocks", "=", "sum", "(", "[", "block_args", ".", "num_repeat", "for", "block_args", "in", "block_args_list", "]", ")", "\n", "drop_rate", "=", "global_params", ".", "drop_connect_rate", "or", "0", "\n", "drop_rate_dx", "=", "drop_rate", "/", "n_blocks", "\n", "\n", "for", "block_args", "in", "block_args_list", ":", "\n", "        ", "assert", "block_args", ".", "num_repeat", ">", "0", "\n", "# Update block input and output filters based on depth multiplier.", "\n", "block_args", "=", "block_args", ".", "_replace", "(", "\n", "input_filters", "=", "round_filters", "(", "block_args", ".", "input_filters", ",", "global_params", ")", ",", "\n", "output_filters", "=", "round_filters", "(", "block_args", ".", "output_filters", ",", "global_params", ")", ",", "\n", "num_repeat", "=", "round_repeats", "(", "block_args", ".", "num_repeat", ",", "global_params", ")", ",", "\n", ")", "\n", "\n", "# The first block needs to take care of stride and filter size increase.", "\n", "x", "=", "MBConvBlock", "(", "\n", "block_args", ",", "global_params", ",", "drop_connect_rate", "=", "drop_rate_dx", "*", "block_idx", "\n", ")", "(", "x", ")", "\n", "block_idx", "+=", "1", "\n", "\n", "if", "block_args", ".", "num_repeat", ">", "1", ":", "\n", "            ", "block_args", "=", "block_args", ".", "_replace", "(", "\n", "input_filters", "=", "block_args", ".", "output_filters", ",", "strides", "=", "[", "1", ",", "1", "]", "\n", ")", "\n", "\n", "", "for", "_", "in", "xrange", "(", "block_args", ".", "num_repeat", "-", "1", ")", ":", "\n", "            ", "x", "=", "MBConvBlock", "(", "\n", "block_args", ",", "global_params", ",", "drop_connect_rate", "=", "drop_rate_dx", "*", "block_idx", "\n", ")", "(", "x", ")", "\n", "block_idx", "+=", "1", "\n", "\n", "# Head part", "\n", "", "", "x", "=", "KL", ".", "Conv2D", "(", "\n", "filters", "=", "round_filters", "(", "1280", ",", "global_params", ")", ",", "\n", "kernel_size", "=", "[", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", "]", ",", "\n", "kernel_initializer", "=", "conv_kernel_initializer", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "use_bias", "=", "False", ",", "\n", ")", "(", "x", ")", "\n", "x", "=", "KL", ".", "BatchNormalization", "(", "\n", "axis", "=", "channel_axis", ",", "momentum", "=", "batch_norm_momentum", ",", "epsilon", "=", "batch_norm_epsilon", "\n", ")", "(", "x", ")", "\n", "x", "=", "Swish", "(", ")", "(", "x", ")", "\n", "\n", "if", "include_top", ":", "\n", "        ", "x", "=", "KL", ".", "GlobalAveragePooling2D", "(", "data_format", "=", "global_params", ".", "data_format", ")", "(", "x", ")", "\n", "if", "global_params", ".", "dropout_rate", ">", "0", ":", "\n", "            ", "x", "=", "KL", ".", "Dropout", "(", "global_params", ".", "dropout_rate", ")", "(", "x", ")", "\n", "", "x", "=", "KL", ".", "Dense", "(", "\n", "global_params", ".", "num_classes", ",", "kernel_initializer", "=", "dense_kernel_initializer", "\n", ")", "(", "x", ")", "\n", "x", "=", "KL", ".", "Activation", "(", "\"softmax\"", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "if", "pooling", "==", "\"avg\"", ":", "\n", "            ", "x", "=", "KL", ".", "GlobalAveragePooling2D", "(", "data_format", "=", "global_params", ".", "data_format", ")", "(", "x", ")", "\n", "", "elif", "pooling", "==", "\"max\"", ":", "\n", "            ", "x", "=", "KL", ".", "GlobalMaxPooling2D", "(", "data_format", "=", "global_params", ".", "data_format", ")", "(", "x", ")", "\n", "\n", "", "", "outputs", "=", "x", "\n", "model", "=", "KM", ".", "Model", "(", "inputs", ",", "outputs", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model._get_model_by_name": [[302, 389], ["params.get_model_params", "model.EfficientNet", "ValueError", "ValueError", "ValueError", "keras.utils.get_file", "EfficientNet.load_weights"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.params.get_model_params", "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNet"], ["", "def", "_get_model_by_name", "(", "\n", "model_name", ",", "\n", "input_shape", "=", "None", ",", "\n", "input_tensor", "=", "None", ",", "\n", "include_top", "=", "True", ",", "\n", "weights", "=", "None", ",", "\n", "classes", "=", "1000", ",", "\n", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Re-Implementation of EfficientNet for Keras\n\n    Reference:\n        https://arxiv.org/abs/1807.11626\n\n    Args:\n        input_shape: optional, if ``None`` default_input_shape is used\n            EfficientNetB0 - (224, 224, 3)\n            EfficientNetB1 - (240, 240, 3)\n            EfficientNetB2 - (260, 260, 3)\n            EfficientNetB3 - (300, 300, 3)\n            EfficientNetB4 - (380, 380, 3)\n            EfficientNetB5 - (456, 456, 3)\n            EfficientNetB6 - (528, 528, 3)\n            EfficientNetB7 - (600, 600, 3)\n        input_tensor: optional, if ``None`` default_input_tensor is used\n        include_top: whether to include the fully-connected\n            layer at the top of the network.\n        weights: one of `None` (random initialization),\n              'imagenet' (pre-training on ImageNet).\n        classes: optional number of classes to classify images\n            into, only to be specified if `include_top` is True, and\n            if no `weights` argument is specified.\n        pooling: optional [None, 'avg', 'max'], if ``include_top=False``\n            add global pooling on top of the network\n            - avg: GlobalAveragePooling2D\n            - max: GlobalMaxPooling2D\n\n    Returns:\n        A Keras model instance.\n\n    \"\"\"", "\n", "if", "weights", "not", "in", "{", "None", ",", "\"imagenet\"", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Parameter `weights` should be one of [None, \"imagenet\"]'", ")", "\n", "\n", "", "if", "weights", "==", "\"imagenet\"", "and", "model_name", "not", "in", "IMAGENET_WEIGHTS", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"There are not pretrained weights for {} model.\"", ".", "format", "(", "model_name", ")", "\n", ")", "\n", "\n", "", "if", "weights", "==", "\"imagenet\"", "and", "include_top", "and", "classes", "!=", "1000", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"If using `weights` and `include_top`\"", "\" `classes` should be 1000\"", "\n", ")", "\n", "\n", "", "block_agrs_list", ",", "global_params", ",", "default_input_shape", "=", "get_model_params", "(", "\n", "model_name", ",", "override_params", "=", "{", "\"num_classes\"", ":", "classes", "}", "\n", ")", "\n", "\n", "if", "input_shape", "is", "None", ":", "\n", "        ", "input_shape", "=", "(", "default_input_shape", ",", "default_input_shape", ",", "3", ")", "\n", "\n", "", "model", "=", "EfficientNet", "(", "\n", "input_shape", ",", "\n", "block_agrs_list", ",", "\n", "global_params", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "include_top", "=", "include_top", ",", "\n", "pooling", "=", "pooling", ",", "\n", ")", "\n", "\n", "model", ".", "name", "=", "model_name", "\n", "\n", "if", "weights", ":", "\n", "        ", "if", "not", "include_top", ":", "\n", "            ", "weights_name", "=", "model_name", "+", "\"-notop\"", "\n", "", "else", ":", "\n", "            ", "weights_name", "=", "model_name", "\n", "", "weights", "=", "IMAGENET_WEIGHTS", "[", "weights_name", "]", "\n", "weights_path", "=", "get_file", "(", "\n", "weights", "[", "\"name\"", "]", ",", "\n", "weights", "[", "\"url\"", "]", ",", "\n", "cache_subdir", "=", "\"models\"", ",", "\n", "md5_hash", "=", "weights", "[", "\"md5\"", "]", ",", "\n", ")", "\n", "model", ".", "load_weights", "(", "weights_path", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNetB0": [[391, 402], ["model._get_model_by_name"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model._get_model_by_name"], ["", "def", "EfficientNetB0", "(", "\n", "include_top", "=", "True", ",", "input_shape", "=", "None", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "return", "_get_model_by_name", "(", "\n", "\"efficientnet-b0\"", ",", "\n", "include_top", "=", "include_top", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "weights", "=", "weights", ",", "\n", "classes", "=", "classes", ",", "\n", "pooling", "=", "pooling", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNetB1": [[405, 416], ["model._get_model_by_name"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model._get_model_by_name"], ["", "def", "EfficientNetB1", "(", "\n", "include_top", "=", "True", ",", "input_shape", "=", "None", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "return", "_get_model_by_name", "(", "\n", "\"efficientnet-b1\"", ",", "\n", "include_top", "=", "include_top", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "weights", "=", "weights", ",", "\n", "classes", "=", "classes", ",", "\n", "pooling", "=", "pooling", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNetB2": [[419, 430], ["model._get_model_by_name"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model._get_model_by_name"], ["", "def", "EfficientNetB2", "(", "\n", "include_top", "=", "True", ",", "input_shape", "=", "None", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "return", "_get_model_by_name", "(", "\n", "\"efficientnet-b2\"", ",", "\n", "include_top", "=", "include_top", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "weights", "=", "weights", ",", "\n", "classes", "=", "classes", ",", "\n", "pooling", "=", "pooling", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNetB3": [[433, 444], ["model._get_model_by_name"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model._get_model_by_name"], ["", "def", "EfficientNetB3", "(", "\n", "include_top", "=", "True", ",", "input_shape", "=", "None", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "return", "_get_model_by_name", "(", "\n", "\"efficientnet-b3\"", ",", "\n", "include_top", "=", "include_top", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "weights", "=", "weights", ",", "\n", "classes", "=", "classes", ",", "\n", "pooling", "=", "pooling", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNetB4": [[447, 458], ["model._get_model_by_name"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model._get_model_by_name"], ["", "def", "EfficientNetB4", "(", "\n", "include_top", "=", "True", ",", "input_shape", "=", "None", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "return", "_get_model_by_name", "(", "\n", "\"efficientnet-b4\"", ",", "\n", "include_top", "=", "include_top", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "weights", "=", "weights", ",", "\n", "classes", "=", "classes", ",", "\n", "pooling", "=", "pooling", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNetB5": [[461, 472], ["model._get_model_by_name"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model._get_model_by_name"], ["", "def", "EfficientNetB5", "(", "\n", "include_top", "=", "True", ",", "input_shape", "=", "None", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "return", "_get_model_by_name", "(", "\n", "\"efficientnet-b5\"", ",", "\n", "include_top", "=", "include_top", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "weights", "=", "weights", ",", "\n", "classes", "=", "classes", ",", "\n", "pooling", "=", "pooling", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNetB6": [[475, 486], ["model._get_model_by_name"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model._get_model_by_name"], ["", "def", "EfficientNetB6", "(", "\n", "include_top", "=", "True", ",", "input_shape", "=", "None", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "return", "_get_model_by_name", "(", "\n", "\"efficientnet-b6\"", ",", "\n", "include_top", "=", "include_top", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "weights", "=", "weights", ",", "\n", "classes", "=", "classes", ",", "\n", "pooling", "=", "pooling", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model.EfficientNetB7": [[489, 500], ["model._get_model_by_name"], "function", ["home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.model._get_model_by_name"], ["", "def", "EfficientNetB7", "(", "\n", "include_top", "=", "True", ",", "input_shape", "=", "None", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "pooling", "=", "None", "\n", ")", ":", "\n", "    ", "return", "_get_model_by_name", "(", "\n", "\"efficientnet-b7\"", ",", "\n", "include_top", "=", "include_top", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "weights", "=", "weights", ",", "\n", "classes", "=", "classes", ",", "\n", "pooling", "=", "pooling", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.initializers.EfficientConv2DKernelInitializer.__call__": [[41, 46], ["keras.floatx", "int", "tensorflow.random_normal", "numpy.sqrt"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "kernel_height", ",", "kernel_width", ",", "_", ",", "out_filters", "=", "shape", "\n", "fan_out", "=", "int", "(", "kernel_height", "*", "kernel_width", "*", "out_filters", ")", "\n", "return", "tf", ".", "random_normal", "(", "\n", "shape", ",", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ",", "dtype", "=", "dtype", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nkuhealong_pmcnet.efficientnet.initializers.EfficientDenseKernelInitializer.__call__": [[65, 82], ["keras.floatx", "tensorflow.random_uniform", "numpy.sqrt"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initialization for dense kernels.\n\n        This initialization is equal to\n          tf.variance_scaling_initializer(scale=1.0/3.0, mode='fan_out',\n                                          distribution='uniform').\n        It is written out explicitly here for clarity.\n\n        Args:\n          shape: shape of variable\n          dtype: dtype of variable\n\n        Returns:\n          an initialization for the variable\n        \"\"\"", "\n", "init_range", "=", "1.0", "/", "np", ".", "sqrt", "(", "shape", "[", "1", "]", ")", "\n", "return", "tf", ".", "random_uniform", "(", "shape", ",", "-", "init_range", ",", "init_range", ",", "dtype", "=", "dtype", ")", "\n", "\n"]]}