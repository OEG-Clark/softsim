{"home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground_final.bad_estimate": [[10, 24], ["os.listdir", "os.path.exists", "os.makedirs", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "pymatting.load_image", "pymatting.load_image", "pymatting.estimate_foreground_cf", "pymatting.save_image", "os.path.join", "os.path.join", "len", "os.path.join", "os.path.splitext", "os.path.splitext", "int"], "function", ["None"], ["def", "bad_estimate", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "bad_fg_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "bad_fg_path", ")", "\n", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "config", ".", "fg_path", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "img", "=", "pymatting", ".", "load_image", "(", "os", ".", "path", ".", "join", "(", "config", ".", "fg_path", ",", "f", ")", ")", "\n", "alpha", "=", "pymatting", ".", "load_image", "(", "os", ".", "path", ".", "join", "(", "config", ".", "alpha_path", ",", "f", ")", ")", "\n", "foreground", "=", "pymatting", ".", "estimate_foreground_cf", "(", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "img", ",", "alpha", ",", "ichol_kwargs", "=", "{", "\"max_nnz\"", ":", "int", "(", "4e9", ")", "}", ")", "\n", "foreground", "=", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "img", "+", "(", "1", "-", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "*", "foreground", "\n", "\n", "assert", "(", "len", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", ")", "==", "2", ")", "\n", "the_name", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "+", "\".png\"", "\n", "pymatting", ".", "save_image", "(", "os", ".", "path", ".", "join", "(", "config", ".", "bad_fg_path", ",", "the_name", ")", ",", "foreground", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground_final.my_refine_foreground_iteration": [[25, 61], ["numpy.pad", "range", "numpy.pad"], "function", ["None"], ["", "", "", "def", "my_refine_foreground_iteration", "(", "img", ",", "alpha", ",", "init_estimate", ",", "kappa", ",", "iter_num", ")", ":", "\n", "    ", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "alpha_pad", "=", "np", ".", "pad", "(", "alpha", ",", "(", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "'reflect'", ")", "\n", "alpha_shift_1", "=", "alpha_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "0", ":", "w", "]", "\n", "alpha_shift_2", "=", "alpha_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "2", ":", "(", "w", "+", "2", ")", "]", "\n", "alpha_shift_3", "=", "alpha_pad", "[", "0", ":", "h", ",", "1", ":", "(", "w", "+", "1", ")", "]", "\n", "alpha_shift_4", "=", "alpha_pad", "[", "2", ":", "(", "h", "+", "2", ")", ",", "1", ":", "(", "w", "+", "1", ")", "]", "\n", "\n", "q", "=", "(", "1", "-", "alpha", ")", "**", "2", "\n", "q1", "=", "(", "1", "-", "alpha_shift_1", ")", "**", "2", "\n", "q2", "=", "(", "1", "-", "alpha_shift_2", ")", "**", "2", "\n", "q3", "=", "(", "1", "-", "alpha_shift_3", ")", "**", "2", "\n", "q4", "=", "(", "1", "-", "alpha_shift_4", ")", "**", "2", "\n", "\n", "denominator", "=", "alpha", "**", "2", "+", "4", "*", "kappa", "*", "q", "+", "kappa", "*", "(", "q1", "+", "q2", "+", "q3", "+", "q4", ")", "\n", "denominator", "=", "denominator", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "term1", "=", "(", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "/", "denominator", ")", "*", "img", "\n", "\n", "w1", "=", "kappa", "*", "(", "q", "+", "q1", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "w2", "=", "kappa", "*", "(", "q", "+", "q2", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "w3", "=", "kappa", "*", "(", "q", "+", "q3", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "w4", "=", "kappa", "*", "(", "q", "+", "q4", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "the_result", "=", "init_estimate", "\n", "for", "t", "in", "range", "(", "iter_num", ")", ":", "\n", "        ", "the_result_pad", "=", "np", ".", "pad", "(", "the_result", ",", "(", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'reflect'", ")", "\n", "\n", "the_result", "=", "term1", "+", "(", "\n", "w1", "*", "the_result_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "0", ":", "w", ",", ":", "]", "+", "\n", "w2", "*", "the_result_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "2", ":", "(", "w", "+", "2", ")", ",", ":", "]", "+", "\n", "w3", "*", "the_result_pad", "[", "0", ":", "h", ",", "1", ":", "(", "w", "+", "1", ")", ",", ":", "]", "+", "\n", "w4", "*", "the_result_pad", "[", "2", ":", "(", "h", "+", "2", ")", ",", "1", ":", "(", "w", "+", "1", ")", ",", ":", "]", "\n", ")", "/", "denominator", "\n", "", "return", "the_result", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground_final.my_refine_foreground": [[62, 77], ["range", "cv2.resize", "reestimate_foreground_final.my_refine_foreground_iteration", "cv2.resize", "cv2.resize", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.my_refine_foreground_iteration"], ["", "def", "my_refine_foreground", "(", "img", ",", "alpha", ",", "init_estimate", ")", ":", "\n", "    ", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "the_estimate", "=", "init_estimate", "\n", "for", "scale", "in", "range", "(", "6", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "if", "scale", "!=", "0", ":", "\n", "            ", "scaled_img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "w", "//", "2", "**", "scale", ",", "h", "//", "2", "**", "scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "scaled_alpha", "=", "cv2", ".", "resize", "(", "alpha", ",", "(", "w", "//", "2", "**", "scale", ",", "h", "//", "2", "**", "scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "else", ":", "\n", "            ", "scaled_img", "=", "img", "\n", "scaled_alpha", "=", "alpha", "\n", "", "the_estimate", "=", "cv2", ".", "resize", "(", "the_estimate", ",", "(", "w", "//", "2", "**", "scale", ",", "h", "//", "2", "**", "scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "the_estimate", "=", "my_refine_foreground_iteration", "(", "scaled_img", ",", "scaled_alpha", ",", "the_estimate", ",", "kappa", "=", "1", ",", "iter_num", "=", "2", "**", "scale", "*", "20", ")", "\n", "\n", "", "the_estimate", "=", "(", "np", ".", "clip", "(", "the_estimate", ",", "0", ",", "1", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "the_estimate", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground_final.new_estimate": [[78, 91], ["os.listdir", "os.path.exists", "os.makedirs", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "reestimate_foreground_final.my_refine_foreground", "cv2.imwrite", "cv2.imread", "len", "os.path.join", "cv2.imread", "os.path.join", "os.path.splitext", "os.path.splitext", "os.path.join"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.my_refine_foreground"], ["", "def", "new_estimate", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "new_fg_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "new_fg_path", ")", "\n", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "config", ".", "fg_path", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "fg", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "config", ".", "fg_path", ",", "f", ")", ")", "[", ":", ",", ":", ",", ":", "3", "]", "/", "255.", "\n", "alpha", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "config", ".", "alpha_path", ",", "f", ")", ",", "0", ")", "/", "255.", "\n", "foreground", "=", "my_refine_foreground", "(", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "fg", ",", "alpha", ",", "fg", ")", "\n", "\n", "assert", "(", "len", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", ")", "==", "2", ")", "\n", "the_name", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "+", "\".png\"", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "config", ".", "new_fg_path", ",", "the_name", ")", ",", "foreground", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground_haha.bad_estimate": [[10, 24], ["os.listdir", "os.path.exists", "os.makedirs", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "pymatting.load_image", "pymatting.load_image", "pymatting.estimate_foreground_cf", "pymatting.save_image", "os.path.join", "os.path.join", "len", "os.path.join", "os.path.splitext", "os.path.splitext", "int"], "function", ["None"], ["def", "bad_estimate", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "bad_fg_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "bad_fg_path", ")", "\n", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "config", ".", "fg_path", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "img", "=", "pymatting", ".", "load_image", "(", "os", ".", "path", ".", "join", "(", "config", ".", "fg_path", ",", "f", ")", ")", "\n", "alpha", "=", "pymatting", ".", "load_image", "(", "os", ".", "path", ".", "join", "(", "config", ".", "alpha_path", ",", "f", ")", ")", "\n", "foreground", "=", "pymatting", ".", "estimate_foreground_cf", "(", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "img", ",", "alpha", ",", "ichol_kwargs", "=", "{", "\"max_nnz\"", ":", "int", "(", "4e9", ")", "}", ")", "\n", "foreground", "=", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "img", "+", "(", "1", "-", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "*", "foreground", "\n", "\n", "assert", "(", "len", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", ")", "==", "2", ")", "\n", "the_name", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "+", "\".png\"", "\n", "pymatting", ".", "save_image", "(", "os", ".", "path", ".", "join", "(", "config", ".", "bad_fg_path", ",", "the_name", ")", ",", "foreground", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground_haha.my_refine_foreground_iteration": [[25, 61], ["numpy.pad", "range", "numpy.pad"], "function", ["None"], ["", "", "", "def", "my_refine_foreground_iteration", "(", "img", ",", "alpha", ",", "init_estimate", ",", "iter_num", ")", ":", "\n", "    ", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "alpha_pad", "=", "np", ".", "pad", "(", "alpha", ",", "(", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "'reflect'", ")", "\n", "alpha_shift_1", "=", "alpha_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "0", ":", "w", "]", "\n", "alpha_shift_2", "=", "alpha_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "2", ":", "(", "w", "+", "2", ")", "]", "\n", "alpha_shift_3", "=", "alpha_pad", "[", "0", ":", "h", ",", "1", ":", "(", "w", "+", "1", ")", "]", "\n", "alpha_shift_4", "=", "alpha_pad", "[", "2", ":", "(", "h", "+", "2", ")", ",", "1", ":", "(", "w", "+", "1", ")", "]", "\n", "\n", "q", "=", "(", "1", "-", "alpha", ")", "**", "2", "\n", "q1", "=", "(", "1", "-", "alpha_shift_1", ")", "**", "2", "\n", "q2", "=", "(", "1", "-", "alpha_shift_2", ")", "**", "2", "\n", "q3", "=", "(", "1", "-", "alpha_shift_3", ")", "**", "2", "\n", "q4", "=", "(", "1", "-", "alpha_shift_4", ")", "**", "2", "\n", "\n", "denominator", "=", "alpha", "**", "2", "+", "q", "+", "(", "q1", "+", "q2", "+", "q3", "+", "q4", ")", "/", "4", "\n", "denominator", "=", "denominator", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "term1", "=", "(", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "/", "denominator", ")", "*", "img", "\n", "\n", "w1", "=", "(", "q", "+", "q1", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "w2", "=", "(", "q", "+", "q2", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "w3", "=", "(", "q", "+", "q3", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "w4", "=", "(", "q", "+", "q4", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "the_result", "=", "init_estimate", "\n", "for", "t", "in", "range", "(", "iter_num", ")", ":", "\n", "        ", "the_result_pad", "=", "np", ".", "pad", "(", "the_result", ",", "(", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'reflect'", ")", "\n", "\n", "the_result", "=", "term1", "+", "(", "\n", "w1", "*", "the_result_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "0", ":", "w", ",", ":", "]", "+", "\n", "w2", "*", "the_result_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "2", ":", "(", "w", "+", "2", ")", ",", ":", "]", "+", "\n", "w3", "*", "the_result_pad", "[", "0", ":", "h", ",", "1", ":", "(", "w", "+", "1", ")", ",", ":", "]", "+", "\n", "w4", "*", "the_result_pad", "[", "2", ":", "(", "h", "+", "2", ")", ",", "1", ":", "(", "w", "+", "1", ")", ",", ":", "]", "\n", ")", "/", "4", "/", "denominator", "\n", "", "return", "the_result", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground_haha.my_refine_foreground": [[62, 77], ["range", "cv2.resize", "reestimate_foreground_haha.my_refine_foreground_iteration", "cv2.resize", "cv2.resize", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.my_refine_foreground_iteration"], ["", "def", "my_refine_foreground", "(", "img", ",", "alpha", ",", "init_estimate", ")", ":", "\n", "    ", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "the_estimate", "=", "init_estimate", "\n", "for", "scale", "in", "range", "(", "6", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "if", "scale", "!=", "0", ":", "\n", "            ", "scaled_img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "w", "//", "2", "**", "scale", ",", "h", "//", "2", "**", "scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "scaled_alpha", "=", "cv2", ".", "resize", "(", "alpha", ",", "(", "w", "//", "2", "**", "scale", ",", "h", "//", "2", "**", "scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "else", ":", "\n", "            ", "scaled_img", "=", "img", "\n", "scaled_alpha", "=", "alpha", "\n", "", "the_estimate", "=", "cv2", ".", "resize", "(", "the_estimate", ",", "(", "w", "//", "2", "**", "scale", ",", "h", "//", "2", "**", "scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "the_estimate", "=", "my_refine_foreground_iteration", "(", "scaled_img", ",", "scaled_alpha", ",", "the_estimate", ",", "2", "**", "scale", "*", "20", ")", "\n", "\n", "", "the_estimate", "=", "(", "np", ".", "clip", "(", "the_estimate", ",", "0", ",", "1", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "the_estimate", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground_haha.new_estimate": [[78, 91], ["os.listdir", "os.path.exists", "os.makedirs", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "reestimate_foreground_haha.my_refine_foreground", "cv2.imwrite", "cv2.imread", "len", "os.path.join", "cv2.imread", "os.path.join", "os.path.splitext", "os.path.splitext", "os.path.join"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.my_refine_foreground"], ["", "def", "new_estimate", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "new_fg_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "new_fg_path", ")", "\n", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "config", ".", "fg_path", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "fg", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "config", ".", "fg_path", ",", "f", ")", ")", "[", ":", ",", ":", ",", ":", "3", "]", "/", "255.", "\n", "alpha", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "config", ".", "alpha_path", ",", "f", ")", ",", "0", ")", "/", "255.", "\n", "foreground", "=", "my_refine_foreground", "(", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "fg", ",", "alpha", ",", "fg", ")", "\n", "\n", "assert", "(", "len", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", ")", "==", "2", ")", "\n", "the_name", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "+", "\".png\"", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "config", ".", "new_fg_path", ",", "the_name", ")", ",", "foreground", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train_fine_tuning.get_args": [[24, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Fine Image Matting'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "\"Checkpoint that the model resume from\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train_fine_tuning.my_worker_init_fn": [[31, 33], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["", "def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train_fine_tuning.get_dataset": [[34, 42], ["matting.data.data_no_aug.MatDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_dataset", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "MatDataset", "(", "args", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "train_set", ",", "\n", "num_workers", "=", "config", ".", "threads", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train_fine_tuning.build_model": [[43, 60], ["matting.models.model.theModel", "torch.DataParallel", "os.path.isfile", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "logger.info"], "function", ["None"], ["", "def", "build_model", "(", "args", ",", "logger", ")", ":", "\n", "\n", "    ", "model", "=", "theModel", "(", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "start_epoch", "=", "1", "\n", "\n", "ifResume", "=", "False", "\n", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "ifResume", "=", "True", "\n", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "resume", ",", "ckpt", "[", "'epoch'", "]", ")", ")", "\n", "\n", "", "return", "start_epoch", ",", "model", ",", "ifResume", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train_fine_tuning.train": [[61, 100], ["model.eval", "time.time", "enumerate", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model", "my_alpha_loss_multiscale", "my_alpha_loss_multiscale.item", "optimizer.zero_grad", "total_loss.backward", "optimizer.step", "lr_scheduler.step", "img_norm.cuda.cuda", "alpha.cuda.cuda", "trimap.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "time.time", "len", "logger.info"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.my_alpha_loss_multiscale"], ["", "def", "train", "(", "args", ",", "model", ",", "optimizer", ",", "train_loader", ",", "lr_scheduler", ",", "epoch", ",", "logger", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "sum_loss", "=", "0", "\n", "sum_loss_alpha", "=", "0", "\n", "sum_loss_comp", "=", "0", "\n", "for", "iteration", ",", "batch", "in", "enumerate", "(", "train_loader", ",", "1", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "img_norm", "=", "batch", "[", "0", "]", "\n", "alpha", "=", "batch", "[", "1", "]", "\n", "trimap", "=", "batch", "[", "2", "]", "\n", "img_info", "=", "batch", "[", "-", "1", "]", "\n", "\n", "if", "config", ".", "cuda", ":", "\n", "            ", "img_norm", "=", "img_norm", ".", "cuda", "(", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "trimap", "=", "trimap", ".", "cuda", "(", ")", "\n", "\n", "", "if", "config", ".", "input_format", "==", "\"BGR\"", ":", "\n", "            ", "img_norm", "=", "img_norm", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "", "out", "=", "model", "(", "torch", ".", "cat", "(", "(", "img_norm", ",", "trimap", "/", "255.", ")", ",", "1", ")", ")", "\n", "pred_mattes", "=", "out", "[", "'alpha'", "]", "\n", "loss", "=", "my_alpha_loss_multiscale", "(", "alpha", ",", "trimap", ",", "pred_mattes", ")", "\n", "#loss_coarse = my_alpha_loss_multiscale(alpha, trimap, out['alpha_coarse'])", "\n", "sum_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_loss", "=", "loss", "#+ 0.2 * loss_coarse", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "iteration", "%", "config", ".", "printFreq", "==", "0", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "num_iter", "=", "len", "(", "train_loader", ")", "\n", "speed", "=", "(", "t1", "-", "t0", ")", "/", "iteration", "\n", "\n", "logger", ".", "info", "(", "\"Epoch[{}/{}]({}/{}) Lr:{:.7f} Avg_Loss:{:.3f} Speed:{:.2f}s/iter\"", ".", "format", "(", "epoch", ",", "config", ".", "nEpochs", ",", "iteration", ",", "num_iter", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "sum_loss", "/", "iteration", ",", "speed", ")", ")", "\n", "\n", "", "lr_scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train_fine_tuning.checkpoint": [[101, 111], ["torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "os.path.exists", "os.makedirs", "model.state_dict", "matting.config.saveDir"], "function", ["None"], ["", "", "def", "checkpoint", "(", "epoch", ",", "save_dir", ",", "model", ",", "logger", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "epoch_str", "=", "\"e{}\"", ".", "format", "(", "epoch", ")", "\n", "model_out_path", "=", "\"{}/ckpt_{}.pth\"", ".", "format", "(", "save_dir", ",", "epoch_str", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "model_out_path", ")", "\n", "logger", ".", "info", "(", "\"Checkpoint saved to {}\"", ".", "format", "(", "model_out_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train_fine_tuning.main": [[112, 170], ["train_fine_tuning.get_args", "matting.utils.utils.get_logger", "matting.utils.utils.get_logger.info", "matting.utils.utils.get_logger", "matting.utils.utils.get_logger.info", "train_fine_tuning.get_dataset", "matting.utils.utils.get_logger.info", "train_fine_tuning.build_model", "model.cuda.named_parameters", "torch.lr_scheduler.LambdaLR", "range", "os.path.join", "os.path.join", "Exception", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "model.cuda.cuda", "torch.Adam", "int", "train_fine_tuning.train", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "norm_params.append", "train_fine_tuning.checkpoint", "matting.utils.utils.get_logger.info", "tools.test.test", "prelu_params.append", "learning_params.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting.get_args", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.utils.get_logger", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.utils.get_logger", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.get_dataset", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.build_model", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.train", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.checkpoint", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting.test"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "logger", "=", "get_logger", "(", "os", ".", "path", ".", "join", "(", "config", ".", "saveDir", ",", "\"log.txt\"", ")", ",", "\"mainLogger\"", ")", "\n", "logger", ".", "info", "(", "\"Loading args: \\n{}\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "logger_test", "=", "get_logger", "(", "os", ".", "path", ".", "join", "(", "config", ".", "saveDir", ",", "\"log_test.txt\"", ")", ",", "\"testLogger\"", ")", "\n", "\n", "if", "config", ".", "cuda", "and", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"No GPU found\"", ")", "\n", "", "if", "config", ".", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "111", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "111", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loading dataset:\"", ")", "\n", "train_loader", "=", "get_dataset", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Building model:\"", ")", "\n", "start_epoch", ",", "model", ",", "ifResume", "=", "build_model", "(", "args", ",", "logger", ")", "\n", "if", "config", ".", "cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "backbone_params", "=", "[", "]", "\n", "prelu_params", "=", "[", "]", "\n", "norm_params", "=", "[", "]", "\n", "learning_params", "=", "[", "]", "\n", "for", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "\"norm\"", "in", "param", "[", "0", "]", "or", "\"bn\"", "in", "param", "[", "0", "]", ":", "\n", "            ", "norm_params", ".", "append", "(", "param", "[", "1", "]", ")", "\n", "", "elif", "\"prelu\"", "in", "param", "[", "0", "]", ":", "\n", "            ", "prelu_params", ".", "append", "(", "param", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "learning_params", ".", "append", "(", "param", "[", "1", "]", ")", "\n", "", "", "param_groups", "=", "[", "\n", "{", "\"params\"", ":", "learning_params", ",", "\"initial_lr\"", ":", "config", ".", "lr", "}", ",", "\n", "{", "\"params\"", ":", "norm_params", ",", "\"weight_decay\"", ":", "1e-5", ",", "\"initial_lr\"", ":", "config", ".", "lr", "}", ",", "\n", "{", "\"params\"", ":", "prelu_params", ",", "\"weight_decay\"", ":", "0", ",", "\"initial_lr\"", ":", "config", ".", "lr", "}", ",", "\n", "]", "\n", "\n", "if", "config", ".", "opt_method", "==", "\"Adam\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "param_groups", ",", "lr", "=", "config", ".", "lr", ",", "weight_decay", "=", "config", ".", "weight_decay", ")", "\n", "\n", "", "def", "lr_func", "(", "iteration", ")", ":", "\n", "        ", "tmp", "=", "int", "(", "iteration", "/", "(", "len", "(", "train_loader", ")", ")", "/", "20", ")", "\n", "return", "1", "/", "(", "2", "**", "tmp", ")", "\n", "\n", "", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_func", ",", "(", "start_epoch", "-", "1", ")", "*", "len", "(", "train_loader", ")", "-", "1", ")", "\n", "\n", "# training", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "config", ".", "nEpochs", "+", "1", ")", ":", "\n", "        ", "train", "(", "args", ",", "model", ",", "optimizer", ",", "train_loader", ",", "lr_scheduler", ",", "epoch", ",", "logger", ")", "\n", "if", "epoch", ">", "0", "and", "epoch", "%", "config", ".", "ckptSaveFreq", "==", "0", ":", "\n", "            ", "checkpoint", "(", "epoch", ",", "config", ".", "saveDir", ",", "model", ",", "logger", ")", "\n", "", "if", "epoch", ">", "0", "and", "config", ".", "testFreq", ">", "0", "and", "epoch", "%", "20", "==", "0", ":", "\n", "            ", "logger_test", ".", "info", "(", "\"Epoch: {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "test", "(", "args", ",", "model", ",", "logger_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.get_args": [[25, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Fine Image Matting'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "\"Checkpoint that the model resume from\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.my_worker_init_fn": [[32, 34], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["", "def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.get_dataset": [[35, 43], ["matting.data.data_baseline.MatDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_dataset", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "MatDataset", "(", "args", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "train_set", ",", "\n", "num_workers", "=", "config", ".", "threads", ",", "\n", "batch_size", "=", "config", ".", "batchSize", ",", "\n", "shuffle", "=", "True", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.build_model": [[44, 61], ["matting.models.model.theModel", "torch.DataParallel", "os.path.isfile", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "logger.info"], "function", ["None"], ["", "def", "build_model", "(", "args", ",", "logger", ")", ":", "\n", "\n", "    ", "model", "=", "theModel", "(", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "start_epoch", "=", "1", "\n", "\n", "ifResume", "=", "False", "\n", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "ifResume", "=", "True", "\n", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "resume", ",", "ckpt", "[", "'epoch'", "]", ")", ")", "\n", "\n", "", "return", "start_epoch", ",", "model", ",", "ifResume", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.train": [[62, 104], ["model.train", "time.time", "enumerate", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model", "my_alpha_loss_multiscale", "my_alpha_loss_multiscale.item", "optimizer.zero_grad", "total_loss.backward", "optimizer.step", "lr_scheduler.step", "fg_norm.cuda.cuda", "bg_norm.cuda.cuda", "alpha.cuda.cuda", "trimap.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "time.time", "len", "logger.info"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.train", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.my_alpha_loss_multiscale"], ["", "def", "train", "(", "args", ",", "model", ",", "optimizer", ",", "train_loader", ",", "lr_scheduler", ",", "epoch", ",", "logger", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "sum_loss", "=", "0", "\n", "sum_loss_alpha", "=", "0", "\n", "sum_loss_comp", "=", "0", "\n", "for", "iteration", ",", "batch", "in", "enumerate", "(", "train_loader", ",", "1", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "fg_norm", "=", "batch", "[", "0", "]", "\n", "bg_norm", "=", "batch", "[", "1", "]", "\n", "alpha", "=", "batch", "[", "2", "]", "\n", "trimap", "=", "batch", "[", "3", "]", "\n", "img_info", "=", "batch", "[", "-", "1", "]", "\n", "\n", "if", "config", ".", "cuda", ":", "\n", "            ", "fg_norm", "=", "fg_norm", ".", "cuda", "(", ")", "\n", "bg_norm", "=", "bg_norm", ".", "cuda", "(", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "trimap", "=", "trimap", ".", "cuda", "(", ")", "\n", "\n", "", "img_norm", "=", "fg_norm", "*", "alpha", "/", "255.", "+", "bg_norm", "*", "(", "1", "-", "alpha", "/", "255.", ")", "\n", "if", "config", ".", "input_format", "==", "\"BGR\"", ":", "\n", "            ", "img_norm", "=", "img_norm", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "", "out", "=", "model", "(", "torch", ".", "cat", "(", "(", "img_norm", ",", "trimap", "/", "255.", ")", ",", "1", ")", ")", "\n", "pred_mattes", "=", "out", "[", "'alpha'", "]", "\n", "loss", "=", "my_alpha_loss_multiscale", "(", "alpha", ",", "trimap", ",", "pred_mattes", ")", "\n", "#loss_coarse = my_alpha_loss_multiscale(alpha, trimap, out['alpha_coarse'])", "\n", "sum_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_loss", "=", "loss", "#+ 0.2 * loss_coarse", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "iteration", "%", "config", ".", "printFreq", "==", "0", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "num_iter", "=", "len", "(", "train_loader", ")", "\n", "speed", "=", "(", "t1", "-", "t0", ")", "/", "iteration", "\n", "\n", "logger", ".", "info", "(", "\"Epoch[{}/{}]({}/{}) Lr:{:.7f} Avg_Loss:{:.3f} Speed:{:.2f}s/iter\"", ".", "format", "(", "epoch", ",", "config", ".", "nEpochs", ",", "iteration", ",", "num_iter", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "sum_loss", "/", "iteration", ",", "speed", ")", ")", "\n", "\n", "", "lr_scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.checkpoint": [[105, 115], ["torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "os.path.exists", "os.makedirs", "model.state_dict", "matting.config.saveDir"], "function", ["None"], ["", "", "def", "checkpoint", "(", "epoch", ",", "save_dir", ",", "model", ",", "logger", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "epoch_str", "=", "\"e{}\"", ".", "format", "(", "epoch", ")", "\n", "model_out_path", "=", "\"{}/ckpt_{}.pth\"", ".", "format", "(", "save_dir", ",", "epoch_str", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "model_out_path", ")", "\n", "logger", ".", "info", "(", "\"Checkpoint saved to {}\"", ".", "format", "(", "model_out_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.main": [[116, 174], ["train.get_args", "matting.utils.utils.get_logger", "matting.utils.utils.get_logger.info", "matting.utils.utils.get_logger", "matting.utils.utils.get_logger.info", "train.get_dataset", "matting.utils.utils.get_logger.info", "train.build_model", "model.cuda.named_parameters", "torch.lr_scheduler.LambdaLR", "range", "os.path.join", "os.path.join", "Exception", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "model.cuda.cuda", "torch.Adam", "int", "train.train", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "norm_params.append", "train.checkpoint", "matting.utils.utils.get_logger.info", "tools.test.test", "prelu_params.append", "learning_params.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting.get_args", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.utils.get_logger", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.utils.get_logger", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.get_dataset", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.build_model", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.train", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.checkpoint", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting.test"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "logger", "=", "get_logger", "(", "os", ".", "path", ".", "join", "(", "config", ".", "saveDir", ",", "\"log.txt\"", ")", ",", "\"mainLogger\"", ")", "\n", "logger", ".", "info", "(", "\"Loading args: \\n{}\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "logger_test", "=", "get_logger", "(", "os", ".", "path", ".", "join", "(", "config", ".", "saveDir", ",", "\"log_test.txt\"", ")", ",", "\"testLogger\"", ")", "\n", "\n", "if", "config", ".", "cuda", "and", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"No GPU found\"", ")", "\n", "", "if", "config", ".", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "111", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "111", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loading dataset:\"", ")", "\n", "train_loader", "=", "get_dataset", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Building model:\"", ")", "\n", "start_epoch", ",", "model", ",", "ifResume", "=", "build_model", "(", "args", ",", "logger", ")", "\n", "if", "config", ".", "cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "backbone_params", "=", "[", "]", "\n", "prelu_params", "=", "[", "]", "\n", "norm_params", "=", "[", "]", "\n", "learning_params", "=", "[", "]", "\n", "for", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "\"norm\"", "in", "param", "[", "0", "]", "or", "\"bn\"", "in", "param", "[", "0", "]", ":", "\n", "            ", "norm_params", ".", "append", "(", "param", "[", "1", "]", ")", "\n", "", "elif", "\"prelu\"", "in", "param", "[", "0", "]", ":", "\n", "            ", "prelu_params", ".", "append", "(", "param", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "learning_params", ".", "append", "(", "param", "[", "1", "]", ")", "\n", "", "", "param_groups", "=", "[", "\n", "{", "\"params\"", ":", "learning_params", ",", "\"initial_lr\"", ":", "config", ".", "lr", "}", ",", "\n", "{", "\"params\"", ":", "norm_params", ",", "\"weight_decay\"", ":", "1e-5", ",", "\"initial_lr\"", ":", "config", ".", "lr", "}", ",", "\n", "{", "\"params\"", ":", "prelu_params", ",", "\"weight_decay\"", ":", "0", ",", "\"initial_lr\"", ":", "config", ".", "lr", "}", ",", "\n", "]", "\n", "\n", "if", "config", ".", "opt_method", "==", "\"Adam\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "param_groups", ",", "lr", "=", "config", ".", "lr", ",", "weight_decay", "=", "config", ".", "weight_decay", ")", "\n", "\n", "", "def", "lr_func", "(", "iteration", ")", ":", "\n", "        ", "tmp", "=", "int", "(", "iteration", "/", "(", "len", "(", "train_loader", ")", ")", "/", "20", ")", "\n", "return", "1", "/", "(", "2", "**", "tmp", ")", "\n", "\n", "", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_func", ",", "(", "start_epoch", "-", "1", ")", "*", "len", "(", "train_loader", ")", "-", "1", ")", "\n", "\n", "# training", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "config", ".", "nEpochs", "+", "1", ")", ":", "\n", "        ", "train", "(", "args", ",", "model", ",", "optimizer", ",", "train_loader", ",", "lr_scheduler", ",", "epoch", ",", "logger", ")", "\n", "if", "epoch", ">", "0", "and", "epoch", "%", "config", ".", "ckptSaveFreq", "==", "0", ":", "\n", "            ", "checkpoint", "(", "epoch", ",", "config", ".", "saveDir", ",", "model", ",", "logger", ")", "\n", "", "if", "epoch", ">", "0", "and", "config", ".", "testFreq", ">", "0", "and", "epoch", "%", "config", ".", "testFreq", "==", "0", ":", "\n", "            ", "logger_test", ".", "info", "(", "\"Epoch: {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "test", "(", "args", ",", "model", ",", "logger_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.stat.main": [[9, 23], ["os.listdir", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "cv2.imread", "cv2.imread", "numpy.sum", "print", "os.path.join", "os.path.join"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "#train_fg_path = config.fg_path", "\n", "#train_alpha_path = config.alpha_path", "\n", "    ", "train_fg_path", "=", "\"/mnt/d/DataSets/Adobe_Deep_Matting_Dataset/all_fg\"", "\n", "train_alpha_path", "=", "\"/mnt/d/DataSets/Adobe_Deep_Matting_Dataset/all_alpha\"", "\n", "\n", "my_sum", "=", "0", "\n", "for", "f", "in", "os", ".", "listdir", "(", "train_fg_path", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "train_fg_path", ",", "f", ")", ")", "\n", "alpha", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "train_alpha_path", ",", "f", ")", ",", "0", ")", "\n", "my_sum", "+=", "np", ".", "sum", "(", "(", "alpha", "<", "255", ")", "&", "(", "alpha", ">", "0", ")", ")", "\n", "print", "(", "my_sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test.get_args": [[19, 26], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'DeepImageMatting'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"checkpoint that model resume from\"", ")", "\n", "parser", ".", "add_argument", "(", "'--testResDir'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"where prediction result save to\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test.gen_dataset": [[27, 42], ["os.listdir", "os.listdir.sort", "len", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "sample_set.append"], "function", ["None"], ["", "def", "gen_dataset", "(", "imgdir", ",", "trimapdir", ")", ":", "\n", "        ", "sample_set", "=", "[", "]", "\n", "img_ids", "=", "os", ".", "listdir", "(", "imgdir", ")", "\n", "img_ids", ".", "sort", "(", ")", "\n", "cnt", "=", "len", "(", "img_ids", ")", "\n", "cur", "=", "1", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "img_name", "=", "os", ".", "path", ".", "join", "(", "imgdir", ",", "img_id", ")", "\n", "trimap_name", "=", "os", ".", "path", ".", "join", "(", "trimapdir", ",", "img_id", ")", "\n", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "img_name", ")", ")", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "trimap_name", ")", ")", "\n", "sample_set", ".", "append", "(", "(", "img_name", ",", "trimap_name", ")", ")", "\n", "\n", "", "return", "sample_set", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test.test": [[43, 146], ["model.eval", "os.listdir", "os.listdir.sort", "len", "unique_ids.copy", "unique_ids.copy.copy", "img_id.split", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "cv2.imread", "cv2.imread", "numpy.clip", "logger.info", "logger.info", "unique_ids.keys", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "matting.inference.inference_aug", "os.path.join", "os.path.exists", "matting.utils.eval_loss.eval_mse", "matting.utils.eval_loss.eval_sad", "img_id.split", "cv2.imwrite", "logger.info", "logger.info", "os.path.join.split", "cv2.imread", "matting.utils.eval_loss.eval_gradient_loss", "matting.utils.eval_loss.eval_connectivity_loss", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_aug", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_mse", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_sad", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_gradient_loss", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_connectivity_loss"], ["", "def", "test", "(", "args", ",", "model", ",", "logger", ",", "saveImg", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "sample_set", "=", "[", "]", "\n", "img_ids", "=", "os", ".", "listdir", "(", "config", ".", "test_img_path", ")", "\n", "img_ids", "=", "[", "img_id", "for", "img_id", "in", "img_ids", "if", "img_id", "[", "-", "4", ":", "]", "==", "\".png\"", "]", "\n", "img_ids", ".", "sort", "(", ")", "\n", "cnt", "=", "len", "(", "img_ids", ")", "\n", "\n", "unique_ids", "=", "{", "}", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "        ", "tmp", "=", "img_id", ".", "split", "(", "\"_\"", ")", "\n", "del", "tmp", "[", "-", "1", "]", "\n", "tmp", "=", "\"_\"", ".", "join", "(", "tmp", ")", "\n", "if", "tmp", "not", "in", "unique_ids", ".", "keys", "(", ")", ":", "\n", "            ", "unique_ids", "[", "tmp", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "unique_ids", "[", "tmp", "]", "+=", "1", "\n", "", "", "unique_ids_mse", "=", "unique_ids", ".", "copy", "(", ")", "\n", "for", "img_id", "in", "unique_ids_mse", ":", "\n", "        ", "unique_ids_mse", "[", "img_id", "]", "=", "0.", "\n", "", "unique_ids_sad", "=", "unique_ids_mse", ".", "copy", "(", ")", "\n", "\n", "mse_diffs", "=", "0.", "\n", "sad_diffs", "=", "0.", "\n", "grad_diffs", "=", "0.", "\n", "connect_diffs", "=", "0.", "\n", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "test_img_path", ",", "img_id", ")", "\n", "trimap_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "test_trimap_path", ",", "img_id", ")", "\n", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "img_path", ")", ")", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "trimap_path", ")", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "trimap", "=", "cv2", ".", "imread", "(", "trimap_path", ",", "0", ")", "\n", "\n", "assert", "(", "img", ".", "shape", "[", ":", "2", "]", "==", "trimap", ".", "shape", "[", ":", "2", "]", ")", "\n", "\n", "img_info", "=", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "origin_pred_mattes", "=", "inference_aug", "(", "model", ",", "img", ",", "trimap", ")", "\n", "\n", "# only care about the unknown region", "\n", "", "origin_pred_mattes", "[", "trimap", "==", "255", "]", "=", "1.", "\n", "origin_pred_mattes", "[", "trimap", "==", "0", "]", "=", "0.", "\n", "\n", "origin_pred_mattes", "=", "np", ".", "clip", "(", "origin_pred_mattes", ",", "0", ",", "1", ")", "\n", "\n", "# origin trimap", "\n", "#pixel = float((trimap == 128).sum())", "\n", "\n", "# eval if gt alpha is given", "\n", "if", "config", ".", "test_alpha_path", "!=", "''", ":", "\n", "            ", "alpha_name", "=", "os", ".", "path", ".", "join", "(", "config", ".", "test_alpha_path", ",", "img_info", "[", "0", "]", ")", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "alpha_name", ")", ")", "\n", "alpha", "=", "cv2", ".", "imread", "(", "alpha_name", ",", "0", ")", "/", "255.", "\n", "assert", "(", "alpha", ".", "shape", "==", "origin_pred_mattes", ".", "shape", ")", "\n", "\n", "#mse_diff = ((origin_pred_mattes - alpha) ** 2).sum() / pixel", "\n", "#sad_diff = np.abs(origin_pred_mattes - alpha).sum() / 1000.", "\n", "mse_diff", "=", "eval_mse", "(", "origin_pred_mattes", ",", "alpha", ",", "trimap", ")", "\n", "sad_diff", "=", "eval_sad", "(", "origin_pred_mattes", ",", "alpha", ",", "trimap", ")", "\n", "if", "config", ".", "if_test_grad", ":", "\n", "                ", "grad_diff", "=", "eval_gradient_loss", "(", "origin_pred_mattes", ",", "alpha", ",", "trimap", ")", "\n", "", "if", "config", ".", "if_test_connect", ":", "\n", "                ", "connect_diff", "=", "eval_connectivity_loss", "(", "origin_pred_mattes", ",", "alpha", ",", "trimap", ")", "\n", "\n", "\n", "", "tmp", "=", "img_id", ".", "split", "(", "\"_\"", ")", "\n", "del", "tmp", "[", "-", "1", "]", "\n", "tmp", "=", "\"_\"", ".", "join", "(", "tmp", ")", "\n", "unique_ids_mse", "[", "tmp", "]", "+=", "mse_diff", "\n", "unique_ids_sad", "[", "tmp", "]", "+=", "sad_diff", "\n", "mse_diffs", "+=", "mse_diff", "\n", "sad_diffs", "+=", "sad_diff", "\n", "if", "config", ".", "if_test_grad", ":", "\n", "                ", "grad_diffs", "+=", "grad_diff", "\n", "", "if", "config", ".", "if_test_connect", ":", "\n", "                ", "connect_diffs", "+=", "connect_diff", "\n", "\n", "", "", "origin_pred_mattes", "=", "(", "origin_pred_mattes", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "saveImg", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "testResDir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "args", ".", "testResDir", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "testResDir", ",", "img_info", "[", "0", "]", ")", ",", "origin_pred_mattes", ")", "\n", "\n", "", "", "if", "config", ".", "test_alpha_path", "!=", "''", ":", "\n", "        ", "for", "ids", "in", "unique_ids", ":", "\n", "            ", "unique_ids_mse", "[", "ids", "]", "/=", "unique_ids", "[", "ids", "]", "\n", "unique_ids_sad", "[", "ids", "]", "/=", "unique_ids", "[", "ids", "]", "\n", "#logger.info(\" {}: Eval-MSE: {} Eval-SAD: {}\".format(ids, unique_ids_mse[ids], unique_ids_sad[ids]))", "\n", "", "logger", ".", "info", "(", "\"Eval MSE: {}\"", ".", "format", "(", "mse_diffs", "/", "cnt", ")", ")", "\n", "logger", ".", "info", "(", "\"Eval SAD: {}\"", ".", "format", "(", "sad_diffs", "/", "cnt", ")", ")", "\n", "if", "config", ".", "if_test_grad", ":", "\n", "            ", "logger", ".", "info", "(", "\"Eval gradient loss: {}\"", ".", "format", "(", "grad_diffs", "/", "cnt", ")", ")", "\n", "", "if", "config", ".", "if_test_connect", ":", "\n", "            ", "logger", ".", "info", "(", "\"Eval connectivity loss; {}\"", ".", "format", "(", "connect_diffs", "/", "cnt", ")", ")", "\n", "", "", "return", "sad_diffs", "/", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting_training_set.get_args": [[19, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'DeepImageMatting'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"checkpoint that model resume from\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting_training_set.compute_gradient": [[26, 34], ["cv2.Sobel", "cv2.Sobel", "cv2.convertScaleAbs", "cv2.convertScaleAbs", "cv2.addWeighted", "cv2.cvtColor"], "function", ["None"], ["", "def", "compute_gradient", "(", "img", ")", ":", "\n", "    ", "x", "=", "cv2", ".", "Sobel", "(", "img", ",", "cv2", ".", "CV_16S", ",", "1", ",", "0", ")", "\n", "y", "=", "cv2", ".", "Sobel", "(", "img", ",", "cv2", ".", "CV_16S", ",", "0", ",", "1", ")", "\n", "absX", "=", "cv2", ".", "convertScaleAbs", "(", "x", ")", "\n", "absY", "=", "cv2", ".", "convertScaleAbs", "(", "y", ")", "\n", "grad", "=", "cv2", ".", "addWeighted", "(", "absX", ",", "0.5", ",", "absY", ",", "0.5", ",", "0", ")", "\n", "grad", "=", "cv2", ".", "cvtColor", "(", "grad", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting_training_set.test": [[35, 91], ["model.eval", "os.listdir", "os.listdir.sort", "len", "print", "print", "print", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "cv2.imread", "cv2.imread", "numpy.clip", "matting.utils.eval_loss.eval_mse", "matting.utils.eval_loss.eval_sad", "matting.utils.eval_loss.eval_gradient_loss", "matting.utils.eval_loss.eval_connectivity_loss", "cv2.imwrite", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "matting.inference.inference_aug", "cv2.imread", "os.path.exists", "os.makedirs", "os.path.join", "len", "len", "len", "len", "os.path.join.split"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_mse", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_sad", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_gradient_loss", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_connectivity_loss", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_aug"], ["", "def", "test", "(", "model", ",", "test_img_path", ",", "test_trimap_path", ",", "test_alpha_path", ",", "output_path", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "sample_set", "=", "[", "]", "\n", "img_ids", "=", "os", ".", "listdir", "(", "test_img_path", ")", "\n", "img_ids", "=", "[", "img_id", "for", "img_id", "in", "img_ids", "if", "img_id", "[", "-", "4", ":", "]", "==", "\".png\"", "]", "\n", "img_ids", ".", "sort", "(", ")", "\n", "cnt", "=", "len", "(", "img_ids", ")", "\n", "\n", "mse_diffs", "=", "0.", "\n", "sad_diffs", "=", "0.", "\n", "grad_diffs", "=", "0.", "\n", "connect_diffs", "=", "0.", "\n", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "test_img_path", ",", "img_id", ")", "\n", "trimap_path", "=", "os", ".", "path", ".", "join", "(", "test_trimap_path", ",", "img_id", ")", "\n", "alpha_path", "=", "os", ".", "path", ".", "join", "(", "test_alpha_path", ",", "img_id", ")", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "img_path", ")", ")", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "trimap_path", ")", ")", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "alpha_path", ")", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "trimap", "=", "cv2", ".", "imread", "(", "trimap_path", ",", "0", ")", "\n", "assert", "(", "img", ".", "shape", "[", ":", "2", "]", "==", "trimap", ".", "shape", "[", ":", "2", "]", ")", "\n", "img_info", "=", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "#origin_pred_mattes = inference_rotation_multiscale(model, img, trimap)", "\n", "origin_pred_mattes", "=", "inference_aug", "(", "model", ",", "img", ",", "trimap", ")", "\n", "\n", "", "origin_pred_mattes", "[", "trimap", "==", "255", "]", "=", "1.", "\n", "origin_pred_mattes", "[", "trimap", "==", "0", "]", "=", "0.", "\n", "\n", "origin_pred_mattes", "=", "np", ".", "clip", "(", "origin_pred_mattes", ",", "0", ",", "1", ")", "\n", "\n", "alpha", "=", "cv2", ".", "imread", "(", "alpha_path", ",", "0", ")", "/", "255.", "\n", "assert", "(", "alpha", ".", "shape", "==", "origin_pred_mattes", ".", "shape", ")", "\n", "mse_diff", "=", "eval_mse", "(", "origin_pred_mattes", ",", "alpha", ",", "trimap", ")", "\n", "sad_diff", "=", "eval_sad", "(", "origin_pred_mattes", ",", "alpha", ",", "trimap", ")", "\n", "grad_diff", "=", "eval_gradient_loss", "(", "origin_pred_mattes", ",", "alpha", ",", "trimap", ")", "\n", "connect_diff", "=", "eval_connectivity_loss", "(", "origin_pred_mattes", ",", "alpha", ",", "trimap", ")", "\n", "\n", "mse_diffs", "+=", "mse_diff", ";", "\n", "sad_diffs", "+=", "sad_diff", ";", "\n", "grad_diffs", "+=", "grad_diff", ";", "\n", "connect_diffs", "+=", "connect_diff", ";", "\n", "\n", "origin_pred_mattes", "=", "(", "origin_pred_mattes", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "img_info", "[", "0", "]", ")", ",", "origin_pred_mattes", ")", "\n", "", "print", "(", "\"MSE\"", ",", "mse_diffs", "/", "len", "(", "img_ids", ")", ")", "\n", "print", "(", "\"SAD\"", ",", "sad_diffs", "/", "len", "(", "img_ids", ")", ")", "\n", "print", "(", "\"GRAD\"", ",", "grad_diffs", "/", "len", "(", "img_ids", ")", ")", "\n", "print", "(", "\"CONN\"", ",", "connect_diffs", "/", "len", "(", "img_ids", ")", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.bad_estimate": [[10, 24], ["os.listdir", "os.path.exists", "os.makedirs", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "pymatting.load_image", "pymatting.load_image", "pymatting.estimate_foreground_cf", "pymatting.save_image", "os.path.join", "os.path.join", "len", "os.path.join", "os.path.splitext", "os.path.splitext", "int"], "function", ["None"], ["def", "bad_estimate", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "bad_fg_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "bad_fg_path", ")", "\n", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "config", ".", "fg_path", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "img", "=", "pymatting", ".", "load_image", "(", "os", ".", "path", ".", "join", "(", "config", ".", "fg_path", ",", "f", ")", ")", "\n", "alpha", "=", "pymatting", ".", "load_image", "(", "os", ".", "path", ".", "join", "(", "config", ".", "alpha_path", ",", "f", ")", ")", "\n", "foreground", "=", "pymatting", ".", "estimate_foreground_cf", "(", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "img", ",", "alpha", ",", "ichol_kwargs", "=", "{", "\"max_nnz\"", ":", "int", "(", "4e9", ")", "}", ")", "\n", "foreground", "=", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "img", "+", "(", "1", "-", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "*", "foreground", "\n", "\n", "assert", "(", "len", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", ")", "==", "2", ")", "\n", "the_name", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "+", "\".png\"", "\n", "pymatting", ".", "save_image", "(", "os", ".", "path", ".", "join", "(", "config", ".", "bad_fg_path", ",", "the_name", ")", ",", "foreground", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.my_refine_foreground_iteration": [[27, 57], ["numpy.pad", "range", "numpy.pad"], "function", ["None"], ["", "", "", "def", "my_refine_foreground_iteration", "(", "img", ",", "alpha", ",", "init_estimate", ",", "iter_num", ")", ":", "\n", "    ", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "alpha_pad", "=", "np", ".", "pad", "(", "alpha", ",", "(", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "'reflect'", ")", "\n", "alpha_shift_1", "=", "alpha_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "0", ":", "w", "]", "\n", "alpha_shift_2", "=", "alpha_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "2", ":", "(", "w", "+", "2", ")", "]", "\n", "alpha_shift_3", "=", "alpha_pad", "[", "0", ":", "h", ",", "1", ":", "(", "w", "+", "1", ")", "]", "\n", "alpha_shift_4", "=", "alpha_pad", "[", "2", ":", "(", "h", "+", "2", ")", ",", "1", ":", "(", "w", "+", "1", ")", "]", "\n", "\n", "denominator", "=", "4", "*", "alpha", "**", "2", "+", "4", "*", "(", "2", "-", "alpha", ")", "-", "alpha_shift_1", "-", "alpha_shift_2", "-", "alpha_shift_3", "-", "alpha_shift_4", "\n", "denominator", "=", "denominator", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "term1", "=", "(", "4", "*", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "/", "denominator", ")", "*", "img", "\n", "\n", "w1", "=", "(", "2", "-", "alpha", "-", "alpha_shift_1", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "w2", "=", "(", "2", "-", "alpha", "-", "alpha_shift_2", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "w3", "=", "(", "2", "-", "alpha", "-", "alpha_shift_3", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "w4", "=", "(", "2", "-", "alpha", "-", "alpha_shift_4", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "the_result", "=", "init_estimate", "\n", "for", "t", "in", "range", "(", "iter_num", ")", ":", "\n", "        ", "the_result_pad", "=", "np", ".", "pad", "(", "the_result", ",", "(", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'reflect'", ")", "\n", "\n", "the_result", "=", "term1", "+", "(", "\n", "w1", "*", "the_result_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "0", ":", "w", ",", ":", "]", "+", "\n", "w2", "*", "the_result_pad", "[", "1", ":", "(", "h", "+", "1", ")", ",", "2", ":", "(", "w", "+", "2", ")", ",", ":", "]", "+", "\n", "w3", "*", "the_result_pad", "[", "0", ":", "h", ",", "1", ":", "(", "w", "+", "1", ")", ",", ":", "]", "+", "\n", "w4", "*", "the_result_pad", "[", "2", ":", "(", "h", "+", "2", ")", ",", "1", ":", "(", "w", "+", "1", ")", ",", ":", "]", "\n", ")", "/", "denominator", "\n", "", "return", "the_result", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.my_refine_foreground": [[58, 69], ["range", "cv2.resize", "cv2.resize", "cv2.resize", "reestimate_foreground.my_refine_foreground_iteration", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.my_refine_foreground_iteration"], ["", "def", "my_refine_foreground", "(", "img", ",", "alpha", ",", "init_estimate", ")", ":", "\n", "    ", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "the_estimate", "=", "init_estimate", "\n", "for", "scale", "in", "range", "(", "5", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "scaled_img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "w", "//", "2", "**", "scale", ",", "h", "//", "2", "**", "scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "scaled_alpha", "=", "cv2", ".", "resize", "(", "alpha", ",", "(", "w", "//", "2", "**", "scale", ",", "h", "//", "2", "**", "scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "the_estimate", "=", "cv2", ".", "resize", "(", "the_estimate", ",", "(", "w", "//", "2", "**", "scale", ",", "h", "//", "2", "**", "scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "the_estimate", "=", "my_refine_foreground_iteration", "(", "scaled_img", ",", "scaled_alpha", ",", "the_estimate", ",", "2", "**", "scale", "*", "10", ")", "\n", "\n", "", "the_estimate", "=", "(", "np", ".", "clip", "(", "the_estimate", ",", "0", ",", "1", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "the_estimate", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.new_estimate": [[70, 83], ["os.listdir", "os.path.exists", "os.makedirs", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "reestimate_foreground.my_refine_foreground", "cv2.imwrite", "cv2.imread", "len", "os.path.join", "cv2.imread", "os.path.join", "os.path.splitext", "os.path.splitext", "os.path.join"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.reestimate_foreground.my_refine_foreground"], ["", "def", "new_estimate", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "new_fg_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "new_fg_path", ")", "\n", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "config", ".", "fg_path", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "fg", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "config", ".", "fg_path", ",", "f", ")", ")", "[", ":", ",", ":", ",", ":", "3", "]", "/", "255.", "\n", "alpha", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "config", ".", "alpha_path", ",", "f", ")", ",", "0", ")", "/", "255.", "\n", "foreground", "=", "my_refine_foreground", "(", "alpha", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "fg", ",", "alpha", ",", "fg", ")", "\n", "\n", "assert", "(", "len", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", ")", "==", "2", ")", "\n", "the_name", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "+", "\".png\"", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "config", ".", "new_fg_path", ",", "the_name", ")", ",", "foreground", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting.get_args": [[18, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'DeepImageMatting'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"checkpoint that model resume from\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting.compute_gradient": [[25, 33], ["cv2.Sobel", "cv2.Sobel", "cv2.convertScaleAbs", "cv2.convertScaleAbs", "cv2.addWeighted", "cv2.cvtColor"], "function", ["None"], ["", "def", "compute_gradient", "(", "img", ")", ":", "\n", "    ", "x", "=", "cv2", ".", "Sobel", "(", "img", ",", "cv2", ".", "CV_16S", ",", "1", ",", "0", ")", "\n", "y", "=", "cv2", ".", "Sobel", "(", "img", ",", "cv2", ".", "CV_16S", ",", "0", ",", "1", ")", "\n", "absX", "=", "cv2", ".", "convertScaleAbs", "(", "x", ")", "\n", "absY", "=", "cv2", ".", "convertScaleAbs", "(", "y", ")", "\n", "grad", "=", "cv2", ".", "addWeighted", "(", "absX", ",", "0.5", ",", "absY", ",", "0.5", ",", "0", ")", "\n", "grad", "=", "cv2", ".", "cvtColor", "(", "grad", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.test_alpha_matting.test": [[34, 65], ["model.eval", "os.listdir", "os.listdir.sort", "len", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "cv2.imread", "cv2.imread", "numpy.clip", "cv2.imwrite", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "matting.inference.inference_rotation_multiscale", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join.split"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation_multiscale"], ["", "def", "test", "(", "model", ",", "test_img_path", ",", "test_trimap_path", ",", "output_path", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "sample_set", "=", "[", "]", "\n", "img_ids", "=", "os", ".", "listdir", "(", "test_img_path", ")", "\n", "img_ids", "=", "[", "img_id", "for", "img_id", "in", "img_ids", "if", "img_id", "[", "-", "4", ":", "]", "==", "\".png\"", "]", "\n", "img_ids", ".", "sort", "(", ")", "\n", "cnt", "=", "len", "(", "img_ids", ")", "\n", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "test_img_path", ",", "img_id", ")", "\n", "trimap_path", "=", "os", ".", "path", ".", "join", "(", "test_trimap_path", ",", "img_id", ")", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "img_path", ")", ")", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "trimap_path", ")", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "trimap", "=", "cv2", ".", "imread", "(", "trimap_path", ",", "0", ")", "\n", "assert", "(", "img", ".", "shape", "[", ":", "2", "]", "==", "trimap", ".", "shape", "[", ":", "2", "]", ")", "\n", "img_info", "=", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "origin_pred_mattes", "=", "inference_rotation_multiscale", "(", "model", ",", "img", ",", "trimap", ")", "\n", "\n", "", "origin_pred_mattes", "[", "trimap", "==", "255", "]", "=", "1.", "\n", "origin_pred_mattes", "[", "trimap", "==", "0", "]", "=", "0.", "\n", "\n", "origin_pred_mattes", "=", "np", ".", "clip", "(", "origin_pred_mattes", ",", "0", ",", "1", ")", "\n", "origin_pred_mattes", "=", "(", "origin_pred_mattes", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "img_info", "[", "0", "]", ")", ",", "origin_pred_mattes", ")", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference": [[16, 72], ["np.pad.copy", "numpy.pad", "numpy.pad", "int", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.pad", "torchvision.transforms.Compose", "cv2.cvtColor", "transforms.Compose.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model", "numpy.clip", "tensor_img.cuda.cuda", "tensor_trimap.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "pred_mattes.cpu.cpu", "pred_mattes.cpu.numpy", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "transforms.Compose.", "np.pad.astype", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["def", "inference", "(", "model", ",", "img", ",", "trimap", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "origin_trimap", "=", "trimap", ".", "copy", "(", ")", "\n", "\n", "# pad to meet h % 64 == 0 and w % 64 == 0", "\n", "theDivider", "=", "64", "\n", "if", "h", "%", "theDivider", "==", "0", ":", "\n", "        ", "pad_h", "=", "0", "\n", "", "else", ":", "\n", "        ", "pad_h", "=", "theDivider", "-", "h", "%", "theDivider", "\n", "\n", "", "if", "w", "%", "theDivider", "==", "0", ":", "\n", "        ", "pad_w", "=", "0", "\n", "", "else", ":", "\n", "        ", "pad_w", "=", "theDivider", "-", "w", "%", "theDivider", "\n", "", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "trimap", "=", "np", ".", "pad", "(", "trimap", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "\n", "# additional zero padding", "\n", "add_pad", "=", "32", "\n", "tmp", "=", "int", "(", "add_pad", "/", "2", ")", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "tmp", ",", "tmp", ")", ",", "(", "tmp", ",", "tmp", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "tmp", ",", "tmp", ")", ",", "(", "tmp", ",", "tmp", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "\"constant\"", ")", "\n", "trimap", "=", "np", ".", "pad", "(", "trimap", ",", "(", "(", "tmp", ",", "tmp", ")", ",", "(", "tmp", ",", "tmp", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "trimap", "=", "np", ".", "pad", "(", "trimap", ",", "(", "(", "tmp", ",", "tmp", ")", ",", "(", "tmp", ",", "tmp", ")", ")", ",", "mode", "=", "\"constant\"", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "config", ".", "mean", ",", "std", "=", "config", ".", "std", ")", "\n", "]", ")", "\n", "\n", "img_rgb", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "tensor_img", "=", "normalize", "(", "img_rgb", ")", ".", "unsqueeze", "(", "0", ")", "\n", "tensor_trimap", "=", "torch", ".", "from_numpy", "(", "trimap", ".", "astype", "(", "np", ".", "float32", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "\n", "if", "config", ".", "cuda", ":", "\n", "        ", "tensor_img", "=", "tensor_img", ".", "cuda", "(", ")", "\n", "tensor_trimap", "=", "tensor_trimap", ".", "cuda", "(", ")", "\n", "\n", "", "if", "config", ".", "input_format", "==", "\"RGB\"", ":", "\n", "        ", "input_t", "=", "torch", ".", "cat", "(", "(", "tensor_img", ",", "tensor_trimap", "/", "255.", ")", ",", "1", ")", "\n", "", "elif", "config", ".", "input_format", "==", "\"BGR\"", ":", "\n", "        ", "input_t", "=", "torch", ".", "cat", "(", "(", "tensor_img", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "tensor_trimap", "/", "255.", ")", ",", "1", ")", "\n", "\n", "", "out", "=", "model", "(", "input_t", ")", "\n", "pred_mattes", "=", "out", "[", "'alpha'", "]", "\n", "if", "config", ".", "cuda", ":", "\n", "        ", "pred_mattes", "=", "pred_mattes", ".", "cpu", "(", ")", "\n", "", "pred_mattes", "=", "pred_mattes", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "pred_mattes", "=", "np", ".", "clip", "(", "pred_mattes", ",", "0", ",", "1", ")", "\n", "\n", "pred_mattes", "=", "pred_mattes", "[", "add_pad", ":", "(", "h", "+", "add_pad", ")", ",", "add_pad", ":", "(", "w", "+", "add_pad", ")", "]", "\n", "\n", "pred_mattes", "[", "origin_trimap", ">", "200", "]", "=", "1", "\n", "pred_mattes", "[", "origin_trimap", "<", "50", "]", "=", "0", "\n", "return", "pred_mattes", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_aug": [[74, 99], ["inference.inference", "min", "min", "cv2.resize", "cv2.resize", "img.copy", "trimap.copy", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference"], ["", "def", "inference_aug", "(", "model", ",", "img", ",", "trimap", ")", ":", "\n", "    ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "# resize", "\n", "if", "config", ".", "max_size", "<", "h", "or", "config", ".", "max_size", "<", "w", ":", "\n", "        ", "new_h", "=", "min", "(", "config", ".", "max_size", ",", "h", ")", "\n", "new_w", "=", "min", "(", "config", ".", "max_size", ",", "w", ")", "\n", "# resize for network input, to Tensor", "\n", "scale_img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "scale_trimap", "=", "cv2", ".", "resize", "(", "trimap", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "ifResize", "=", "True", "\n", "", "else", ":", "\n", "        ", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "scale_img", "=", "img", ".", "copy", "(", ")", "\n", "scale_trimap", "=", "trimap", ".", "copy", "(", ")", "\n", "ifResize", "=", "False", "\n", "\n", "", "pred_mattes", "=", "inference", "(", "model", ",", "scale_img", ",", "scale_trimap", ")", "\n", "\n", "if", "ifResize", ":", "\n", "# resize to original size", "\n", "        ", "pred_mattes", "=", "cv2", ".", "resize", "(", "pred_mattes", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "assert", "(", "pred_mattes", ".", "shape", "==", "trimap", ".", "shape", ")", "\n", "\n", "return", "pred_mattes", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation": [[101, 192], ["inference.inference", "all_preds.append", "cv2.flip", "cv2.flip", "inference.inference", "cv2.flip", "all_preds.append", "cv2.flip", "cv2.flip", "inference.inference", "cv2.flip", "all_preds.append", "cv2.flip", "cv2.flip", "inference.inference", "cv2.flip", "all_preds.append", "img.copy.transpose", "trimap.copy.transpose", "inference.inference", "cv2.resize.transpose", "all_preds.append", "img.copy.transpose", "cv2.flip", "trimap.copy.transpose", "cv2.flip", "inference.inference", "cv2.flip", "cv2.resize.transpose", "all_preds.append", "img.copy.transpose", "cv2.flip", "trimap.copy.transpose", "cv2.flip", "inference.inference", "cv2.flip", "cv2.resize.transpose", "all_preds.append", "img.copy.transpose", "cv2.flip", "trimap.copy.transpose", "cv2.flip", "inference.inference", "cv2.flip", "cv2.resize.transpose", "all_preds.append", "numpy.zeros", "min", "min", "cv2.resize", "cv2.resize", "img.copy", "trimap.copy", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference"], ["", "def", "inference_rotation", "(", "model", ",", "img", ",", "trimap", ")", ":", "\n", "    ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "# resize", "\n", "if", "config", ".", "max_size", "<", "h", "or", "config", ".", "max_size", "<", "w", ":", "\n", "        ", "new_h", "=", "min", "(", "config", ".", "max_size", ",", "h", ")", "\n", "new_w", "=", "min", "(", "config", ".", "max_size", ",", "w", ")", "\n", "# resize for network input, to Tensor", "\n", "scale_img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "scale_trimap", "=", "cv2", ".", "resize", "(", "trimap", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "ifResize", "=", "True", "\n", "", "else", ":", "\n", "        ", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "scale_img", "=", "img", ".", "copy", "(", ")", "\n", "scale_trimap", "=", "trimap", ".", "copy", "(", ")", "\n", "ifResize", "=", "False", "\n", "\n", "", "all_preds", "=", "[", "]", "\n", "# original", "\n", "pred_mattes", "=", "inference", "(", "model", ",", "scale_img", ",", "scale_trimap", ")", "\n", "all_preds", ".", "append", "(", "pred_mattes", ")", "\n", "\n", "# horizontal flip", "\n", "tmp_img", "=", "cv2", ".", "flip", "(", "scale_img", ",", "1", ")", "\n", "tmp_trimap", "=", "cv2", ".", "flip", "(", "scale_trimap", ",", "1", ")", "\n", "pred_mattes", "=", "inference", "(", "model", ",", "tmp_img", ",", "tmp_trimap", ")", "\n", "pred_mattes", "=", "cv2", ".", "flip", "(", "pred_mattes", ",", "1", ")", "\n", "all_preds", ".", "append", "(", "pred_mattes", ")", "\n", "\n", "# vertical flip", "\n", "tmp_img", "=", "cv2", ".", "flip", "(", "scale_img", ",", "0", ")", "\n", "tmp_trimap", "=", "cv2", ".", "flip", "(", "scale_trimap", ",", "0", ")", "\n", "pred_mattes", "=", "inference", "(", "model", ",", "tmp_img", ",", "tmp_trimap", ")", "\n", "pred_mattes", "=", "cv2", ".", "flip", "(", "pred_mattes", ",", "0", ")", "\n", "all_preds", ".", "append", "(", "pred_mattes", ")", "\n", "\n", "# horizontal and vertical flip", "\n", "tmp_img", "=", "cv2", ".", "flip", "(", "scale_img", ",", "-", "1", ")", "\n", "tmp_trimap", "=", "cv2", ".", "flip", "(", "scale_trimap", ",", "-", "1", ")", "\n", "pred_mattes", "=", "inference", "(", "model", ",", "tmp_img", ",", "tmp_trimap", ")", "\n", "pred_mattes", "=", "cv2", ".", "flip", "(", "pred_mattes", ",", "-", "1", ")", "\n", "all_preds", ".", "append", "(", "pred_mattes", ")", "\n", "\n", "# transpose", "\n", "tmp_img", "=", "scale_img", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "tmp_trimap", "=", "scale_trimap", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "pred_mattes", "=", "inference", "(", "model", ",", "tmp_img", ",", "tmp_trimap", ")", "\n", "pred_mattes", "=", "pred_mattes", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "all_preds", ".", "append", "(", "pred_mattes", ")", "\n", "\n", "# transpose -> horizontal flip", "\n", "tmp_img", "=", "scale_img", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "tmp_img", "=", "cv2", ".", "flip", "(", "tmp_img", ",", "1", ")", "\n", "tmp_trimap", "=", "scale_trimap", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "tmp_trimap", "=", "cv2", ".", "flip", "(", "tmp_trimap", ",", "1", ")", "\n", "pred_mattes", "=", "inference", "(", "model", ",", "tmp_img", ",", "tmp_trimap", ")", "\n", "pred_mattes", "=", "cv2", ".", "flip", "(", "pred_mattes", ",", "1", ")", "\n", "pred_mattes", "=", "pred_mattes", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "all_preds", ".", "append", "(", "pred_mattes", ")", "\n", "\n", "# transpose -> vertical flip", "\n", "tmp_img", "=", "scale_img", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "tmp_img", "=", "cv2", ".", "flip", "(", "tmp_img", ",", "0", ")", "\n", "tmp_trimap", "=", "scale_trimap", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "tmp_trimap", "=", "cv2", ".", "flip", "(", "tmp_trimap", ",", "0", ")", "\n", "pred_mattes", "=", "inference", "(", "model", ",", "tmp_img", ",", "tmp_trimap", ")", "\n", "pred_mattes", "=", "cv2", ".", "flip", "(", "pred_mattes", ",", "0", ")", "\n", "pred_mattes", "=", "pred_mattes", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "all_preds", ".", "append", "(", "pred_mattes", ")", "\n", "\n", "# transpose -> horizontal and vertical flip", "\n", "tmp_img", "=", "scale_img", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "tmp_img", "=", "cv2", ".", "flip", "(", "tmp_img", ",", "-", "1", ")", "\n", "tmp_trimap", "=", "scale_trimap", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "tmp_trimap", "=", "cv2", ".", "flip", "(", "tmp_trimap", ",", "-", "1", ")", "\n", "pred_mattes", "=", "inference", "(", "model", ",", "tmp_img", ",", "tmp_trimap", ")", "\n", "pred_mattes", "=", "cv2", ".", "flip", "(", "pred_mattes", ",", "-", "1", ")", "\n", "pred_mattes", "=", "pred_mattes", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "all_preds", ".", "append", "(", "pred_mattes", ")", "\n", "\n", "final_matte", "=", "np", ".", "zeros", "(", "all_preds", "[", "0", "]", ".", "shape", ")", "\n", "for", "matte", "in", "all_preds", ":", "\n", "        ", "final_matte", "=", "final_matte", "+", "matte", "\n", "", "pred_mattes", "=", "final_matte", "/", "8", "\n", "\n", "if", "ifResize", ":", "\n", "# resize to original size", "\n", "        ", "pred_mattes", "=", "cv2", ".", "resize", "(", "pred_mattes", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "assert", "(", "pred_mattes", ".", "shape", "==", "trimap", ".", "shape", ")", "\n", "\n", "return", "pred_mattes", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation_permute": [[193, 229], ["inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "inference.inference_rotation", "all_preds.append", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation"], ["", "def", "inference_rotation_permute", "(", "model", ",", "img", ",", "trimap", ")", ":", "\n", "    ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "all_preds", "=", "[", "]", "\n", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "img", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "img", "[", ":", ",", ":", ",", "[", "0", ",", "2", ",", "1", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "img", "[", ":", ",", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "img", "[", ":", ",", ":", ",", "[", "1", ",", "2", ",", "0", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "img", "[", ":", ",", ":", ",", "[", "2", ",", "0", ",", "1", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "255", "-", "img", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "255", "-", "img", "[", ":", ",", ":", ",", "[", "0", ",", "2", ",", "1", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "255", "-", "img", "[", ":", ",", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "255", "-", "img", "[", ":", ",", ":", ",", "[", "1", ",", "2", ",", "0", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "255", "-", "img", "[", ":", ",", ":", ",", "[", "2", ",", "0", ",", "1", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "255", "-", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ",", "trimap", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "\n", "\n", "final_matte", "=", "np", ".", "zeros", "(", "all_preds", "[", "0", "]", ".", "shape", ")", "\n", "for", "matte", "in", "all_preds", ":", "\n", "        ", "final_matte", "=", "final_matte", "+", "matte", "\n", "", "pred_mattes", "=", "final_matte", "/", "12", "\n", "return", "pred_mattes", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation_multiscale": [[233, 250], ["numpy.zeros", "int", "int", "cv2.resize", "cv2.resize", "inference.inference_rotation", "cv2.resize", "all_preds.append"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.matting.inference.inference_rotation"], ["", "def", "inference_rotation_multiscale", "(", "model", ",", "img", ",", "trimap", ")", ":", "\n", "    ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "all_preds", "=", "[", "]", "\n", "for", "scale", "in", "[", "0.8", ",", "1", ",", "1.25", "]", ":", "\n", "        ", "new_w", "=", "int", "(", "scale", "*", "w", ")", "\n", "new_h", "=", "int", "(", "scale", "*", "h", ")", "\n", "scale_img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "scale_trimap", "=", "cv2", ".", "resize", "(", "trimap", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "tmp", "=", "inference_rotation", "(", "model", ",", "scale_img", ",", "scale_trimap", ")", "\n", "tmp", "=", "cv2", ".", "resize", "(", "tmp", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "all_preds", ".", "append", "(", "tmp", ")", "\n", "\n", "", "final_matte", "=", "np", ".", "zeros", "(", "all_preds", "[", "0", "]", ".", "shape", ")", "\n", "for", "matte", "in", "all_preds", ":", "\n", "        ", "final_matte", "=", "final_matte", "+", "matte", "\n", "", "pred_mattes", "=", "final_matte", "/", "3", "\n", "return", "pred_mattes", "\n", "", ""]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.cross_entropy_loss": [[8, 17], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cross_entropy", "weighted.sum", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["def", "cross_entropy_loss", "(", "three", ",", "alpha", ",", "trimap", ")", ":", "\n", "    ", "trimap_opt", "=", "torch", ".", "zeros", "(", "alpha", ".", "shape", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "trimap_opt", "[", "alpha", ">", "0", "]", "=", "1", "\n", "trimap_opt", "[", "alpha", "==", "255", "]", "=", "2", "\n", "weighted", "=", "(", "trimap", "==", "128", ")", ".", "float", "(", ")", "\n", "tmp", "=", "F", ".", "cross_entropy", "(", "three", ",", "trimap_opt", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "tmp", "=", "(", "tmp", "*", "weighted", "[", ":", ",", "0", ",", ":", ",", ":", "]", ")", ".", "sum", "(", ")", "/", "weighted", ".", "sum", "(", ")", "\n", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.gen_simple_alpha_loss": [[18, 29], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda.sum"], "function", ["None"], ["", "def", "gen_simple_alpha_loss", "(", "alpha", ",", "trimap", ",", "pred_mattes", ")", ":", "\n", "    ", "weighted", "=", "torch", ".", "zeros", "(", "trimap", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "weighted", "[", "trimap", "==", "128", "]", "=", "1.", "\n", "alpha_f", "=", "alpha", "/", "255.", "\n", "diff", "=", "pred_mattes", "-", "alpha_f", "\n", "diff", "=", "diff", "*", "weighted", "\n", "alpha_loss", "=", "torch", ".", "sqrt", "(", "diff", "**", "2", "+", "1e-12", ")", "\n", "\n", "alpha_loss_weighted", "=", "alpha_loss", ".", "sum", "(", ")", "/", "(", "weighted", ".", "sum", "(", ")", "+", "1.", ")", "\n", "\n", "return", "alpha_loss_weighted", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.my_alpha_loss": [[30, 47], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "pred_mattes.detach", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda.sum"], "function", ["None"], ["", "def", "my_alpha_loss", "(", "alpha", ",", "trimap", ",", "pred_mattes", ")", ":", "\n", "    ", "weighted", "=", "torch", ".", "zeros", "(", "trimap", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "weighted", "[", "trimap", "==", "128", "]", "=", "1.", "\n", "\n", "alpha_f", "=", "alpha", "/", "255.", "\n", "pred_mattes_detach", "=", "pred_mattes", ".", "detach", "(", ")", "\n", "tmp1", "=", "(", "(", "alpha_f", ">", "0.999", ")", "*", "(", "pred_mattes_detach", ">", "1", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "tmp2", "=", "(", "(", "alpha_f", "<", "0.001", ")", "*", "(", "pred_mattes_detach", "<", "0", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "alpha_f", "=", "(", "tmp1", "+", "tmp2", ")", "*", "pred_mattes_detach", "+", "(", "1", "-", "tmp1", "-", "tmp2", ")", "*", "alpha_f", "\n", "diff", "=", "pred_mattes", "-", "alpha_f", "\n", "diff", "=", "diff", "*", "weighted", "\n", "alpha_loss", "=", "torch", ".", "sqrt", "(", "diff", "**", "2", "+", "1e-4", ")", "\n", "#alpha_loss = diff.abs()", "\n", "\n", "alpha_loss_weighted", "=", "alpha_loss", ".", "sum", "(", ")", "/", "(", "weighted", ".", "sum", "(", ")", "+", "1.", ")", "\n", "\n", "return", "alpha_loss_weighted", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.my_alpha_loss_add_l2": [[48, 68], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "pred_mattes.detach", "diff_squared.sum", "torch.sqrt().sum", "torch.sqrt().sum", "torch.sqrt().sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros().cuda.sum", "torch.sqrt().sum.detach"], "function", ["None"], ["", "def", "my_alpha_loss_add_l2", "(", "alpha", ",", "trimap", ",", "pred_mattes", ")", ":", "\n", "    ", "weighted", "=", "torch", ".", "zeros", "(", "trimap", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "weighted", "[", "trimap", "==", "128", "]", "=", "1.", "\n", "\n", "alpha_f", "=", "alpha", "/", "255.", "\n", "pred_mattes_detach", "=", "pred_mattes", ".", "detach", "(", ")", "\n", "tmp1", "=", "(", "(", "alpha_f", ">", "0.999", ")", "*", "(", "pred_mattes_detach", ">", "1", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "tmp2", "=", "(", "(", "alpha_f", "<", "0.001", ")", "*", "(", "pred_mattes_detach", "<", "0", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "alpha_f", "=", "(", "tmp1", "+", "tmp2", ")", "*", "pred_mattes_detach", "+", "(", "1", "-", "tmp1", "-", "tmp2", ")", "*", "alpha_f", "\n", "diff", "=", "pred_mattes", "-", "alpha_f", "\n", "diff", "=", "diff", "*", "weighted", "\n", "diff_squared", "=", "diff", "**", "2", "\n", "alpha_loss_l2", "=", "diff_squared", ".", "sum", "(", ")", "\n", "alpha_loss_l1", "=", "torch", ".", "sqrt", "(", "diff_squared", "+", "1e-4", ")", ".", "sum", "(", ")", "\n", "\n", "alpha_loss_l1_weighted", "=", "alpha_loss_l1", "/", "(", "weighted", ".", "sum", "(", ")", "+", "1.", ")", "\n", "\n", "alpha_loss_l2_weighted", "=", "alpha_loss_l2", "/", "(", "2", "*", "alpha_loss_l1", ".", "detach", "(", ")", "+", "1e-4", ")", "\n", "\n", "return", "alpha_loss_l1_weighted", "+", "0.25", "*", "alpha_loss_l2_weighted", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.my_alpha_loss_multiscale": [[69, 91], ["trimap_big[].unsqueeze", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "pred_mattes.detach", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.avg_pool2d", "torch.avg_pool2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "F.avg_pool2d.sum"], "function", ["None"], ["", "def", "my_alpha_loss_multiscale", "(", "alpha", ",", "trimap_big", ",", "pred_mattes", ")", ":", "\n", "    ", "trimap", "=", "trimap_big", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "\n", "weighted", "=", "torch", ".", "zeros", "(", "trimap", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "weighted", "[", "trimap", "==", "128", "]", "=", "1.", "\n", "\n", "alpha_f", "=", "alpha", "/", "255.", "\n", "pred_mattes_detach", "=", "pred_mattes", ".", "detach", "(", ")", "\n", "tmp1", "=", "(", "(", "alpha_f", ">", "0.999", ")", "*", "(", "pred_mattes_detach", ">", "1", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "tmp2", "=", "(", "(", "alpha_f", "<", "0.001", ")", "*", "(", "pred_mattes_detach", "<", "0", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "alpha_f", "=", "(", "tmp1", "+", "tmp2", ")", "*", "pred_mattes_detach", "+", "(", "1", "-", "tmp1", "-", "tmp2", ")", "*", "alpha_f", "\n", "diff", "=", "pred_mattes", "-", "alpha_f", "\n", "#diff = diff * weighted", "\n", "\n", "loss_sum", "=", "torch", ".", "tensor", "(", "0", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "alpha_loss", "=", "torch", ".", "sqrt", "(", "diff", "**", "2", "+", "1e-6", ")", "\n", "alpha_loss_weighted", "=", "(", "alpha_loss", "*", "weighted", ")", ".", "sum", "(", ")", "/", "(", "weighted", ".", "sum", "(", ")", "+", "1.", ")", "\n", "loss_sum", "=", "loss_sum", "+", "alpha_loss_weighted", "/", "2", "**", "i", "\n", "diff", "=", "F", ".", "avg_pool2d", "(", "diff", ",", "kernel_size", "=", "2", ")", "\n", "weighted", "=", "F", ".", "avg_pool2d", "(", "weighted", ",", "kernel_size", "=", "2", ")", "\n", "\n", "", "return", "loss_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.my_alpha_loss_weight": [[92, 111], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "pred_mattes.detach", "alpha_loss.sum", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "my_alpha_loss_weight", "(", "alpha", ",", "trimap", ",", "pred_mattes", ",", "theMul", ")", ":", "\n", "    ", "weighted", "=", "torch", ".", "zeros", "(", "trimap", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "weighted", "[", "trimap", "==", "128", "]", "=", "1.", "\n", "\n", "alpha_f", "=", "alpha", "/", "255.", "\n", "tmp", "=", "(", "theMul", "*", "alpha_f", "*", "(", "1", "-", "alpha_f", ")", "+", "1", ")", "\n", "weighted", "=", "weighted", "*", "tmp", "\n", "\n", "pred_mattes_detach", "=", "pred_mattes", ".", "detach", "(", ")", "\n", "tmp1", "=", "(", "(", "alpha_f", ">", "0.99", ")", "*", "(", "pred_mattes_detach", ">", "1", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "tmp2", "=", "(", "(", "alpha_f", "<", "0.01", ")", "*", "(", "pred_mattes_detach", "<", "0", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "alpha_f", "=", "(", "tmp1", "+", "tmp2", ")", "*", "pred_mattes_detach", "+", "(", "1", "-", "tmp1", "-", "tmp2", ")", "*", "alpha_f", "\n", "diff", "=", "pred_mattes", "-", "alpha_f", "\n", "diff", "=", "diff", "*", "weighted", "\n", "alpha_loss", "=", "diff", "**", "2", "\n", "\n", "alpha_loss_weighted", "=", "alpha_loss", ".", "sum", "(", ")", "/", "(", "(", "weighted", "**", "2", ")", ".", "sum", "(", ")", "+", "1.", ")", "\n", "\n", "return", "alpha_loss_weighted", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.my_alpha_loss_weight_inverse": [[112, 131], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "pred_mattes.detach", "alpha_loss.sum", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "my_alpha_loss_weight_inverse", "(", "alpha", ",", "trimap", ",", "pred_mattes", ",", "theMul", ")", ":", "\n", "    ", "weighted", "=", "torch", ".", "zeros", "(", "trimap", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "weighted", "[", "trimap", "==", "128", "]", "=", "1.", "\n", "\n", "alpha_f", "=", "alpha", "/", "255.", "\n", "tmp", "=", "(", "1", "/", "2", "-", "alpha_f", "*", "(", "1", "-", "alpha_f", ")", ")", "**", "theMul", "\n", "weighted", "=", "weighted", "*", "tmp", "\n", "\n", "pred_mattes_detach", "=", "pred_mattes", ".", "detach", "(", ")", "\n", "tmp1", "=", "(", "(", "alpha_f", ">", "0.99", ")", "*", "(", "pred_mattes_detach", ">", "1", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "tmp2", "=", "(", "(", "alpha_f", "<", "0.01", ")", "*", "(", "pred_mattes_detach", "<", "0", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "alpha_f", "=", "(", "tmp1", "+", "tmp2", ")", "*", "pred_mattes_detach", "+", "(", "1", "-", "tmp1", "-", "tmp2", ")", "*", "alpha_f", "\n", "diff", "=", "pred_mattes", "-", "alpha_f", "\n", "diff", "=", "diff", "*", "weighted", "\n", "alpha_loss", "=", "diff", "**", "2", "\n", "\n", "alpha_loss_weighted", "=", "alpha_loss", ".", "sum", "(", ")", "/", "(", "(", "weighted", "**", "2", ")", ".", "sum", "(", ")", "+", "1.", ")", "\n", "\n", "return", "alpha_loss_weighted", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.gen_loss": [[132, 155], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "wi.cuda.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "gen_loss", "(", "img", ",", "alpha", ",", "fg", ",", "bg", ",", "trimap", ",", "pred_mattes", ")", ":", "\n", "    ", "wi", "=", "torch", ".", "zeros", "(", "trimap", ".", "shape", ")", "\n", "wi", "[", "trimap", "==", "128", "]", "=", "1.", "\n", "t_wi", "=", "wi", ".", "cuda", "(", ")", "\n", "t3_wi", "=", "torch", ".", "cat", "(", "(", "wi", ",", "wi", ",", "wi", ")", ",", "1", ")", ".", "cuda", "(", ")", "\n", "unknown_region_size", "=", "t_wi", ".", "sum", "(", ")", "\n", "\n", "#assert(t_wi.shape == pred_mattes.shape)", "\n", "#assert(t3_wi.shape == img.shape)", "\n", "\n", "# alpha diff", "\n", "alpha", "=", "alpha", "/", "255.", "\n", "alpha_loss", "=", "torch", ".", "sqrt", "(", "(", "pred_mattes", "-", "alpha", ")", "**", "2", "+", "1e-12", ")", "\n", "alpha_loss", "=", "(", "alpha_loss", "*", "t_wi", ")", ".", "sum", "(", ")", "/", "(", "unknown_region_size", "+", "1.", ")", "\n", "\n", "# composite rgb loss", "\n", "pred_mattes_3", "=", "torch", ".", "cat", "(", "(", "pred_mattes", ",", "pred_mattes", ",", "pred_mattes", ")", ",", "1", ")", "\n", "comp", "=", "pred_mattes_3", "*", "fg", "+", "(", "1.", "-", "pred_mattes_3", ")", "*", "bg", "\n", "comp_loss", "=", "torch", ".", "sqrt", "(", "(", "comp", "-", "img", ")", "**", "2", "+", "1e-12", ")", "/", "255.", "\n", "comp_loss", "=", "(", "comp_loss", "*", "t3_wi", ")", ".", "sum", "(", ")", "/", "(", "unknown_region_size", "+", "1.", ")", "/", "3.", "\n", "\n", "#print(\"Loss: AlphaLoss:{} CompLoss:{}\".format(alpha_loss, comp_loss))", "\n", "return", "alpha_loss", ",", "comp_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.loss.gen_alpha_pred_loss": [[157, 169], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.cuda", "wi.cuda.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "gen_alpha_pred_loss", "(", "alpha", ",", "pred_alpha", ",", "trimap", ")", ":", "\n", "    ", "wi", "=", "torch", ".", "zeros", "(", "trimap", ".", "shape", ")", "\n", "wi", "[", "trimap", "==", "128", "]", "=", "1.", "\n", "t_wi", "=", "wi", ".", "cuda", "(", ")", "\n", "unknown_region_size", "=", "t_wi", ".", "sum", "(", ")", "\n", "\n", "# alpha diff", "\n", "alpha", "=", "alpha", "/", "255.", "\n", "alpha_loss", "=", "torch", ".", "sqrt", "(", "(", "pred_alpha", "-", "alpha", ")", "**", "2", "+", "1e-12", ")", "\n", "alpha_loss", "=", "(", "alpha_loss", "*", "t_wi", ")", ".", "sum", "(", ")", "/", "(", "unknown_region_size", "+", "1.", ")", "\n", "\n", "return", "alpha_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.utils.get_logger": [[4, 23], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_logger", "(", "saveName", ",", "logName", "=", "\"Matting\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "logName", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s-%(filename)s:%(message)s\"", ")", "\n", "\n", "# log file stream", "\n", "handler", "=", "logging", ".", "FileHandler", "(", "saveName", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "# log console stream", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "logger", ".", "addHandler", "(", "console", ")", "\n", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_mse": [[10, 13], ["float"], "function", ["None"], ["def", "eval_mse", "(", "pred", ",", "gt", ",", "trimap", ")", ":", "\n", "    ", "pixel", "=", "float", "(", "(", "trimap", "==", "128", ")", ".", "sum", "(", ")", ")", "\n", "return", "(", "(", "pred", "-", "gt", ")", "**", "2", ")", ".", "sum", "(", ")", "/", "pixel", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_sad": [[14, 16], ["numpy.abs().sum", "numpy.abs"], "function", ["None"], ["", "def", "eval_sad", "(", "pred", ",", "gt", ",", "trimap", ")", ":", "\n", "    ", "return", "np", ".", "abs", "(", "pred", "-", "gt", ")", ".", "sum", "(", ")", "/", "1000.", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.gauss": [[17, 20], ["math.exp", "math.sqrt"], "function", ["None"], ["", "def", "gauss", "(", "x", ",", "sigma", ")", ":", "\n", "    ", "y", "=", "math", ".", "exp", "(", "-", "x", "**", "2", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "/", "(", "sigma", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.dgauss": [[21, 24], ["eval_loss.gauss"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.gauss"], ["", "def", "dgauss", "(", "x", ",", "sigma", ")", ":", "\n", "    ", "y", "=", "-", "x", "*", "gauss", "(", "x", ",", "sigma", ")", "/", "sigma", "**", "2", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.gaussgradient": [[26, 43], ["int", "numpy.zeros", "range", "scipy.ndimage.convolve", "scipy.ndimage.convolve", "math.sqrt", "range", "numpy.sqrt", "numpy.sum", "math.log", "eval_loss.gauss", "eval_loss.dgauss", "numpy.abs", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.gauss", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.dgauss"], ["", "def", "gaussgradient", "(", "img", ",", "sigma", ")", ":", "\n", "    ", "epsilon", "=", "1e-2", "\n", "halfsize", "=", "sigma", "*", "math", ".", "sqrt", "(", "-", "2", "*", "math", ".", "log", "(", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "*", "sigma", "*", "epsilon", ")", ")", "\n", "halfsize", "=", "int", "(", "halfsize", ")", "\n", "size", "=", "2", "*", "halfsize", "+", "1", "\n", "hx", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ")", ")", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "size", ")", ":", "\n", "            ", "index1", "=", "i", "-", "halfsize", "\n", "index2", "=", "j", "-", "halfsize", "\n", "hx", "[", "i", ",", "j", "]", "=", "gauss", "(", "index1", ",", "sigma", ")", "*", "dgauss", "(", "index2", ",", "sigma", ")", "\n", "\n", "", "", "hx", "=", "hx", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "abs", "(", "hx", ")", "**", "2", ")", ")", "\n", "hy", "=", "hx", ".", "T", "\n", "gx", "=", "ndimage", ".", "convolve", "(", "img", ",", "hx", ",", "mode", "=", "'nearest'", ")", "\n", "gy", "=", "ndimage", ".", "convolve", "(", "img", ",", "hy", ",", "mode", "=", "'nearest'", ")", "\n", "return", "gx", ",", "gy", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_gradient_loss": [[44, 52], ["eval_loss.gaussgradient", "numpy.sqrt", "eval_loss.gaussgradient", "numpy.sqrt", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.gaussgradient", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.gaussgradient"], ["", "def", "eval_gradient_loss", "(", "pred", ",", "gt", ",", "trimap", ")", ":", "\n", "    ", "pred_x", ",", "pred_y", "=", "gaussgradient", "(", "pred", ",", "1.4", ")", "\n", "pred_map", "=", "np", ".", "sqrt", "(", "pred_x", "**", "2", "+", "pred_y", "**", "2", ")", "\n", "gt_x", ",", "gt_y", "=", "gaussgradient", "(", "gt", ",", "1.4", ")", "\n", "gt_map", "=", "np", ".", "sqrt", "(", "gt_x", "**", "2", "+", "gt_y", "**", "2", ")", "\n", "\n", "error_map", "=", "(", "pred_map", "-", "gt_map", ")", "**", "2", "\n", "return", "np", ".", "sum", "(", "error_map", "*", "(", "trimap", "==", "128", ")", ")", "/", "1000.", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.utils.eval_loss.eval_connectivity_loss": [[54, 89], ["numpy.arange", "numpy.zeros", "range", "numpy.sum", "numpy.zeros", "skimage.measure.label", "skimage.measure.regionprops", "numpy.argmax", "numpy.zeros", "numpy.sum", "numpy.abs"], "function", ["None"], ["", "def", "eval_connectivity_loss", "(", "pred", ",", "gt", ",", "trimap", ")", ":", "\n", "    ", "h", ",", "w", "=", "pred", ".", "shape", "\n", "step", "=", "0.1", "\n", "thresh_steps", "=", "np", ".", "arange", "(", "0", ",", "1", "+", "step", ",", "step", ")", "\n", "l_map", "=", "np", ".", "zeros", "(", "pred", ".", "shape", ")", "-", "1", "\n", "dist_maps", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "thresh_steps", ".", "size", ")", ")", "\n", "for", "ii", "in", "range", "(", "1", ",", "thresh_steps", ".", "size", ")", ":", "\n", "        ", "pred_alpha_thresh", "=", "pred", ">=", "thresh_steps", "[", "ii", "]", "\n", "gt_alpha_thresh", "=", "gt", ">=", "thresh_steps", "[", "ii", "]", "\n", "\n", "tmp_map", "=", "(", "pred_alpha_thresh", "*", "gt_alpha_thresh", ")", "*", "1", "\n", "if", "np", ".", "sum", "(", "tmp_map", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "cc", "=", "measure", ".", "label", "(", "\n", "tmp_map", ",", "\n", "background", "=", "0", ",", "\n", "connectivity", "=", "1", "\n", ")", "\n", "cc", "=", "measure", ".", "regionprops", "(", "cc", ")", "\n", "size_vec", "=", "[", "c", ".", "area", "for", "c", "in", "cc", "]", "\n", "max_id", "=", "np", ".", "argmax", "(", "size_vec", ")", "\n", "coords", "=", "cc", "[", "max_id", "]", ".", "coords", "\n", "omega", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "omega", "[", "coords", "[", ":", ",", "0", "]", ",", "coords", "[", ":", ",", "1", "]", "]", "=", "1", "\n", "\n", "flag", "=", "(", "l_map", "==", "-", "1", ")", "&", "(", "omega", "==", "0", ")", "\n", "l_map", "[", "flag", "]", "=", "thresh_steps", "[", "ii", "-", "1", "]", "\n", "", "l_map", "[", "l_map", "==", "-", "1", "]", "=", "1", "\n", "\n", "pred_d", "=", "pred", "-", "l_map", "\n", "gt_d", "=", "gt", "-", "l_map", "\n", "pred_phi", "=", "1", "-", "pred_d", "*", "(", "pred_d", ">=", "0.15", ")", "\n", "gt_phi", "=", "1", "-", "gt_d", "*", "(", "gt_d", ">=", "0.15", ")", "\n", "loss", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "pred_phi", "-", "gt_phi", ")", "*", "(", "trimap", "==", "128", ")", ")", "\n", "return", "loss", "/", "1000.", "\n", "", ""]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.models.model_tmp.theModel.__init__": [[12, 19], ["torch.Module.__init__", "backbone.mmclassification.resnet.ResNetV1d", "skip.skip.skipModule_simple", "decoder.decoder_FAM.decoderModule"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "theModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lastStage", "=", "5", "\n", "image_channel", "=", "4", "\n", "self", ".", "backbone", "=", "ResNetV1d", "(", "in_channels", "=", "image_channel", ",", "depth", "=", "50", ")", "\n", "self", ".", "skip", "=", "skipModule_simple", "(", "self", ".", "backbone", ".", "_out_feature_channels", ",", "lastStage", "=", "5", ",", "image_channel", "=", "image_channel", ",", "ifPPM", "=", "False", ")", "\n", "self", ".", "decoder", "=", "decoderModule", "(", "self", ".", "skip", ".", "outChannels", ",", "lastStage", "=", "5", ",", "image_channel", "=", "image_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.models.model_tmp.theModel.forward": [[20, 28], ["model_tmp.theModel.backbone", "model_tmp.theModel.skip", "model_tmp.theModel.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#encoder_out = self.backbone(x[:,:4,:,:])", "\n", "        ", "encoder_out", "=", "self", ".", "backbone", "(", "x", ")", "\n", "skip_out", "=", "self", ".", "skip", "(", "x", ",", "encoder_out", ")", "\n", "decoder_out", "=", "self", ".", "decoder", "(", "skip_out", ")", "\n", "out", "=", "{", "}", "\n", "out", "[", "'alpha'", "]", "=", "decoder_out", "[", "'alpha'", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.models.model_tmp.test_time_model.__init__": [[31, 50], ["torch.Module.__init__", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "simple_model", ")", ":", "\n", "        ", "super", "(", "test_time_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# model", "\n", "self", ".", "backbone", "=", "simple_model", ".", "backbone", "\n", "self", ".", "skip", "=", "simple_model", ".", "skip", "\n", "self", ".", "decoder", "=", "simple_model", ".", "decoder", "\n", "# hyperparameter to be optimized", "\n", "self", ".", "hyper_stages", "=", "[", "5", "]", "\n", "self", ".", "A", "=", "{", "}", "\n", "self", ".", "B", "=", "{", "}", "\n", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "            ", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "torch", ".", "zeros", "(", "[", "1", ",", "simple_model", ".", "skip", ".", "outChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", ",", "1", ",", "1", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "requires_grad", "=", "True", "\n", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "torch", ".", "zeros", "(", "[", "1", ",", "simple_model", ".", "skip", ".", "outChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", ",", "1", ",", "1", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "requires_grad", "=", "True", "\n", "\n", "# laplacian kernel", "\n", "", "self", ".", "laplacian_kernel", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ",", "3", ",", "3", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "self", ".", "laplacian_kernel", "[", "0", ",", "0", ",", "1", ",", "1", "]", "=", "-", "8", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.models.model_tmp.test_time_model.forward": [[50, 107], ["x[].detach", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.abs.sum", "torch.abs.sum", "torch.abs.sum", "torch.abs.sum", "torch.abs.sum", "torch.abs.sum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_tmp.test_time_model.backbone", "model_tmp.test_time_model.skip", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "range", "model_tmp.test_time_model.decoder", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "print", "loss.backward", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_tmp.test_time_model.A[].add_", "model_tmp.test_time_model.B[].add_", "str", "str", "str", "str", "model_tmp.test_time_model.A[].grad.detach().zero_", "model_tmp.test_time_model.B[].grad.detach().zero_", "str", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "str", "model_tmp.test_time_model.A[].grad.detach", "model_tmp.test_time_model.B[].grad.detach", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ")", "\n", "\n", "", "trimap_detach", "=", "x", "[", ":", ",", "3", ":", "4", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "pos_detach", "=", "(", "trimap_detach", ">", "0.75", ")", "*", "1.", "\n", "neg_detach", "=", "(", "trimap_detach", "<", "0.25", ")", "*", "1.", "\n", "unknown_detach", "=", "1", "-", "pos_detach", "-", "neg_detach", "\n", "pos_edge_detach", "=", "F", ".", "conv2d", "(", "pos_detach", ",", "self", ".", "laplacian_kernel", ",", "padding", "=", "1", ")", "\n", "pos_edge_detach", "=", "torch", ".", "abs", "(", "pos_edge_detach", ")", "\n", "pos_edge_detach", "=", "pos_edge_detach", "*", "unknown_detach", "\n", "pos_pixel_number", "=", "pos_edge_detach", ".", "sum", "(", ")", "+", "0.1", "\n", "\n", "neg_edge_detach", "=", "F", ".", "conv2d", "(", "neg_detach", ",", "self", ".", "laplacian_kernel", ",", "padding", "=", "1", ")", "\n", "neg_edge_detach", "=", "torch", ".", "abs", "(", "neg_edge_detach", ")", "\n", "neg_edge_detach", "=", "neg_edge_detach", "*", "unknown_detach", "\n", "neg_pixel_number", "=", "neg_edge_detach", ".", "sum", "(", ")", "+", "0.1", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "encoder_out", "=", "self", ".", "backbone", "(", "x", ")", "\n", "skip_out", "=", "self", ".", "skip", "(", "x", ",", "encoder_out", ")", "\n", "\n", "", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "skip_out_orig", "=", "{", "}", "\n", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "                ", "skip_out_orig", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "skip_out", "[", "'stage'", "+", "str", "(", "i", ")", "]", "\n", "\n", "", "for", "the_step", "in", "range", "(", "10", ")", ":", "\n", "                ", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "                    ", "skip_out", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "skip_out_orig", "[", "'stage'", "+", "str", "(", "i", ")", "]", "*", "torch", ".", "sigmoid", "(", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ")", "*", "2", "+", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", "\n", "\n", "", "decoder_out", "=", "self", ".", "decoder", "(", "skip_out", ")", "\n", "decoder_out", "[", "'alpha'", "]", "=", "torch", ".", "clamp", "(", "decoder_out", "[", "'alpha'", "]", ",", "0", ",", "1", ")", "\n", "loss", "=", "(", "(", "1", "-", "decoder_out", "[", "'alpha'", "]", ")", "*", "pos_edge_detach", ")", ".", "sum", "(", ")", "/", "pos_pixel_number", "+", "(", "decoder_out", "[", "'alpha'", "]", "*", "neg_edge_detach", ")", ".", "sum", "(", ")", "/", "neg_pixel_number", "\n", "print", "(", "\"loss 1 \"", ",", "the_step", ",", "\":\"", ",", "loss", ")", "\n", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "                        ", "if", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", "is", "not", "None", ":", "\n", "                            ", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", ".", "detach", "(", ")", ".", "zero_", "(", ")", "\n", "", "if", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", "is", "not", "None", ":", "\n", "                            ", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", ".", "detach", "(", ")", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "loss", ".", "backward", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "                        ", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "add_", "(", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", ",", "alpha", "=", "-", "1e-1", ")", "\n", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "add_", "(", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", ",", "alpha", "=", "-", "1e-1", ")", "\n", "\n", "", "", "", "", "out", "=", "{", "}", "\n", "out", "[", "'alpha'", "]", "=", "decoder_out", "[", "'alpha'", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.models.model.theModel.__init__": [[12, 19], ["torch.Module.__init__", "backbone.mmclassification.resnet.ResNetV1d", "skip.skip_aspp.skipModule_simple", "decoder.decoder_simple.decoderModule"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "theModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lastStage", "=", "5", "\n", "image_channel", "=", "4", "\n", "self", ".", "backbone", "=", "ResNetV1d", "(", "in_channels", "=", "image_channel", ",", "depth", "=", "50", ")", "\n", "self", ".", "skip", "=", "skipModule_simple", "(", "self", ".", "backbone", ".", "_out_feature_channels", ",", "image_channel", "=", "image_channel", ",", "ifASPP", "=", "False", ")", "\n", "self", ".", "decoder", "=", "decoderModule", "(", "self", ".", "skip", ".", "outChannels", ",", "lastStage", "=", "5", ",", "image_channel", "=", "image_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.models.model.theModel.forward": [[20, 28], ["model.theModel.backbone", "model.theModel.skip", "model.theModel.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#encoder_out = self.backbone(x[:,:4,:,:])", "\n", "        ", "encoder_out", "=", "self", ".", "backbone", "(", "x", ")", "\n", "skip_out", "=", "self", ".", "skip", "(", "x", ",", "encoder_out", ")", "\n", "decoder_out", "=", "self", ".", "decoder", "(", "skip_out", ")", "\n", "out", "=", "{", "}", "\n", "out", "[", "'alpha'", "]", "=", "decoder_out", "[", "'alpha'", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.models.model.test_time_model.__init__": [[31, 74], ["torch.Module.__init__", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "simple_model", ")", ":", "\n", "        ", "super", "(", "test_time_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# model", "\n", "self", ".", "backbone", "=", "simple_model", ".", "backbone", "\n", "self", ".", "skip", "=", "simple_model", ".", "skip", "\n", "self", ".", "decoder", "=", "simple_model", ".", "decoder", "\n", "# hyperparameter to be optimized", "\n", "self", ".", "hyper_stages", "=", "[", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "self", ".", "A", "=", "{", "}", "\n", "self", ".", "B", "=", "{", "}", "\n", "#for i in self.hyper_stages:", "\n", "#    self.A[ 'stage' + str(i) ] = torch.zeros([1, simple_model.skip.outChannels[ 'stage' + str(i) ], 16, 16]).cuda()", "\n", "#    self.A[ 'stage' + str(i) ].requires_grad = True", "\n", "#    self.B[ 'stage' + str(i) ] = torch.zeros([1, simple_model.skip.outChannels[ 'stage' + str(i) ], 16, 16]).cuda()", "\n", "#    self.B[ 'stage' + str(i) ].requires_grad = True", "\n", "\n", "self", ".", "the_channels", "=", "{", "\n", "'stage0'", ":", "1", ",", "\n", "'stage1'", ":", "64", ",", "\n", "'stage2'", ":", "64", ",", "\n", "'stage3'", ":", "128", ",", "\n", "'stage4'", ":", "256", ",", "\n", "'stage5'", ":", "512", ",", "\n", "}", "\n", "\n", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "            ", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "the_channels", "[", "'stage'", "+", "str", "(", "i", ")", "]", ",", "2", "**", "(", "8", "-", "i", ")", ",", "2", "**", "(", "8", "-", "i", ")", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "requires_grad", "=", "True", "\n", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "the_channels", "[", "'stage'", "+", "str", "(", "i", ")", "]", ",", "2", "**", "(", "8", "-", "i", ")", ",", "2", "**", "(", "8", "-", "i", ")", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "requires_grad", "=", "True", "\n", "#self.A[ 'stage4'] = torch.zeros([1, 256, 16, 16]).cuda()", "\n", "#self.A[ 'stage4'].requires_grad = True", "\n", "#self.B[ 'stage4'] = torch.zeros([1, 256, 16, 16]).cuda()", "\n", "#self.B[ 'stage4'].requires_grad = True", "\n", "\n", "#self.A[ 'stage3'] = torch.zeros([1, 128, 16, 16]).cuda()", "\n", "#self.A[ 'stage3'].requires_grad = True", "\n", "#self.B[ 'stage3'] = torch.zeros([1, 128, 16, 16]).cuda()", "\n", "#self.B[ 'stage3'].requires_grad = True", "\n", "\n", "# laplacian kernel", "\n", "", "self", ".", "laplacian_kernel", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ",", "3", ",", "3", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "self", ".", "laplacian_kernel", "[", "0", ",", "0", ",", "1", ",", "1", "]", "=", "-", "8", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.models.model.test_time_model.forward": [[74, 187], ["x[].detach", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.abs.sum", "torch.abs.sum", "torch.abs.sum", "torch.abs.sum", "torch.abs.sum", "torch.abs.sum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.test_time_model.backbone", "model.test_time_model.skip", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "range", "model.test_time_model.decoder", "model.test_time_model.decoder.decoder_5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.test_time_model.decoder.decoder_4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.test_time_model.decoder.decoder_3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.test_time_model.decoder.decoder_2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.test_time_model.decoder.decoder_1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.test_time_model.decoder.final_final", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss.backward", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "unknown_detach.sum", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "loss.item", "loss_edge.item", "loss_preserve.item", "model.test_time_model.A[].add_", "model.test_time_model.B[].add_", "str", "str", "str", "str", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "model.test_time_model.A[].grad.detach().zero_", "model.test_time_model.B[].grad.detach().zero_", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "model.test_time_model.A[].grad.detach", "model.test_time_model.B[].grad.detach", "original_alpha.detach", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ")", "\n", "\n", "", "trimap_detach", "=", "x", "[", ":", ",", "3", ":", "4", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "pos_detach", "=", "(", "trimap_detach", ">", "0.75", ")", "*", "1.", "\n", "neg_detach", "=", "(", "trimap_detach", "<", "0.25", ")", "*", "1.", "\n", "unknown_detach", "=", "1", "-", "pos_detach", "-", "neg_detach", "\n", "pos_edge_detach", "=", "F", ".", "conv2d", "(", "pos_detach", ",", "self", ".", "laplacian_kernel", ",", "padding", "=", "1", ")", "\n", "pos_edge_detach", "=", "torch", ".", "abs", "(", "pos_edge_detach", ")", "\n", "pos_edge_detach", "=", "(", "pos_edge_detach", ">", "0", ")", "*", "unknown_detach", "\n", "pos_pixel_number", "=", "pos_edge_detach", ".", "sum", "(", ")", "+", "0.1", "\n", "\n", "neg_edge_detach", "=", "F", ".", "conv2d", "(", "neg_detach", ",", "self", ".", "laplacian_kernel", ",", "padding", "=", "1", ")", "\n", "neg_edge_detach", "=", "torch", ".", "abs", "(", "neg_edge_detach", ")", "\n", "neg_edge_detach", "=", "(", "neg_edge_detach", ">", "0", ")", "*", "unknown_detach", "\n", "neg_pixel_number", "=", "neg_edge_detach", ".", "sum", "(", ")", "+", "0.1", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "encoder_out", "=", "self", ".", "backbone", "(", "x", ")", "\n", "skip_out", "=", "self", ".", "skip", "(", "x", ",", "encoder_out", ")", "\n", "\n", "", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "skip_out_orig", "=", "{", "}", "\n", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "                ", "skip_out_orig", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "skip_out", "[", "'stage'", "+", "str", "(", "i", ")", "]", "\n", "\n", "", "original_alpha", "=", "self", ".", "decoder", "(", "skip_out", ")", "[", "'alpha'", "]", "\n", "for", "the_step", "in", "range", "(", "100", ")", ":", "\n", "\n", "#for i in self.hyper_stages:", "\n", "#    A = F.interpolate(self.A['stage'+str(i)], skip_out_orig['stage'+str(i)].shape[2:], mode = \"bicubic\")", "\n", "#    B = F.interpolate(self.B['stage'+str(i)], skip_out_orig['stage'+str(i)].shape[2:], mode = \"bicubic\")", "\n", "#    #skip_out['stage'+str(i)] = skip_out_orig['stage'+str(i)] * torch.sigmoid(A) * 2 + B", "\n", "#    skip_out['stage'+str(i)] = skip_out_orig['stage'+str(i)] * torch.exp(A) + B", "\n", "\n", "#decoder_out = self.decoder( skip_out )", "\n", "\n", "# stage 5 to stage 4", "\n", "                ", "tmp", "=", "self", ".", "decoder", ".", "decoder_5", "(", "skip_out", "[", "'stage5'", "]", ")", "\n", "if", "5", "in", "self", ".", "hyper_stages", ":", "\n", "                    ", "A", "=", "F", ".", "interpolate", "(", "self", ".", "A", "[", "'stage5'", "]", ",", "skip_out", "[", "'stage5'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "B", "=", "F", ".", "interpolate", "(", "self", ".", "B", "[", "'stage5'", "]", ",", "skip_out", "[", "'stage5'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "tmp", "=", "tmp", "*", "torch", ".", "exp", "(", "A", ")", "+", "B", "\n", "\n", "", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "skip_out", "[", "'stage4'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "skip_out", "[", "'stage4'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "# stage 4 to stage 3", "\n", "tmp", "=", "self", ".", "decoder", ".", "decoder_4", "(", "tmp", ")", "\n", "if", "4", "in", "self", ".", "hyper_stages", ":", "\n", "                    ", "A", "=", "F", ".", "interpolate", "(", "self", ".", "A", "[", "'stage4'", "]", ",", "skip_out", "[", "'stage4'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "B", "=", "F", ".", "interpolate", "(", "self", ".", "B", "[", "'stage4'", "]", ",", "skip_out", "[", "'stage4'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "tmp", "=", "tmp", "*", "torch", ".", "exp", "(", "A", ")", "+", "B", "\n", "", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "skip_out", "[", "'stage3'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "skip_out", "[", "'stage3'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "# stage 3 to stage 2", "\n", "tmp", "=", "self", ".", "decoder", ".", "decoder_3", "(", "tmp", ")", "\n", "if", "3", "in", "self", ".", "hyper_stages", ":", "\n", "                    ", "A", "=", "F", ".", "interpolate", "(", "self", ".", "A", "[", "'stage3'", "]", ",", "skip_out", "[", "'stage3'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "B", "=", "F", ".", "interpolate", "(", "self", ".", "B", "[", "'stage3'", "]", ",", "skip_out", "[", "'stage3'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "tmp", "=", "tmp", "*", "torch", ".", "exp", "(", "A", ")", "+", "B", "\n", "", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "skip_out", "[", "'stage2'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "skip_out", "[", "'stage2'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "# stage 2 to stage 1", "\n", "tmp", "=", "self", ".", "decoder", ".", "decoder_2", "(", "tmp", ")", "\n", "if", "2", "in", "self", ".", "hyper_stages", ":", "\n", "                    ", "A", "=", "F", ".", "interpolate", "(", "self", ".", "A", "[", "'stage2'", "]", ",", "skip_out", "[", "'stage2'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "B", "=", "F", ".", "interpolate", "(", "self", ".", "B", "[", "'stage2'", "]", ",", "skip_out", "[", "'stage2'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "tmp", "=", "tmp", "*", "torch", ".", "exp", "(", "A", ")", "+", "B", "\n", "", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "skip_out", "[", "'stage1'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "skip_out", "[", "'stage1'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "\n", "tmp", "=", "self", ".", "decoder", ".", "decoder_1", "(", "tmp", ")", "\n", "if", "1", "in", "self", ".", "hyper_stages", ":", "\n", "                    ", "A", "=", "F", ".", "interpolate", "(", "self", ".", "A", "[", "'stage1'", "]", ",", "skip_out", "[", "'stage1'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "B", "=", "F", ".", "interpolate", "(", "self", ".", "B", "[", "'stage1'", "]", ",", "skip_out", "[", "'stage1'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ")", "\n", "tmp", "=", "tmp", "*", "torch", ".", "exp", "(", "A", ")", "+", "B", "\n", "", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "skip_out", "[", "'stage0'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "skip_out", "[", "'stage0'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "decoder_out", "=", "{", "}", "\n", "decoder_out", "[", "'alpha'", "]", "=", "self", ".", "decoder", ".", "final_final", "(", "tmp", ")", "\n", "\n", "decoder_out", "[", "'alpha'", "]", "=", "torch", ".", "clamp", "(", "decoder_out", "[", "'alpha'", "]", ",", "0", ",", "1", ")", "\n", "#loss_edge = ((1 - decoder_out['alpha']) ** 2 * pos_edge_detach).sum() / pos_pixel_number + \\", "\n", "#(decoder_out['alpha'] ** 2 * neg_edge_detach).sum() / neg_pixel_number", "\n", "loss_edge", "=", "(", "(", "(", "1", "-", "decoder_out", "[", "'alpha'", "]", ")", "**", "2", "*", "pos_edge_detach", ")", ".", "sum", "(", ")", "+", "(", "decoder_out", "[", "'alpha'", "]", "**", "2", "*", "neg_edge_detach", ")", ".", "sum", "(", ")", ")", "/", "(", "pos_pixel_number", "+", "neg_pixel_number", ")", "\n", "\n", "loss_preserve", "=", "(", "torch", ".", "abs", "(", "decoder_out", "[", "'alpha'", "]", "-", "original_alpha", ".", "detach", "(", ")", ")", "*", "unknown_detach", ")", ".", "sum", "(", ")", "/", "unknown_detach", ".", "sum", "(", ")", "\n", "\n", "loss", "=", "loss_edge", "+", "0.1", "*", "loss_preserve", "**", "2", "\n", "if", "the_step", "%", "10", "==", "0", ":", "\n", "                    ", "print", "(", "\"Step \"", ",", "the_step", ",", "\":\"", ",", "\"Total Loss\"", ",", "loss", ".", "item", "(", ")", ",", "\"Edge loss: \"", ",", "loss_edge", ".", "item", "(", ")", ",", "\"Preservation loss: \"", ",", "loss_preserve", ".", "item", "(", ")", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "                        ", "if", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", "is", "not", "None", ":", "\n", "                            ", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", ".", "detach", "(", ")", ".", "zero_", "(", ")", "\n", "", "if", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", "is", "not", "None", ":", "\n", "                            ", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", ".", "detach", "(", ")", ".", "zero_", "(", ")", "\n", "", "", "", "loss", ".", "backward", "(", ")", "\n", "\n", "lr", "=", "20", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "i", "in", "self", ".", "hyper_stages", ":", "\n", "                        ", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "add_", "(", "self", ".", "A", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", ",", "alpha", "=", "-", "lr", ")", "\n", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "add_", "(", "self", ".", "B", "[", "'stage'", "+", "str", "(", "i", ")", "]", ".", "grad", ",", "alpha", "=", "-", "lr", ")", "\n", "\n", "", "", "", "", "out", "=", "{", "}", "\n", "out", "[", "'alpha'", "]", "=", "decoder_out", "[", "'alpha'", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.models.modelsummary.get_model_summary": [[19, 136], ["collections.namedtuple", "model.eval", "model.apply", "model", "hook.remove", "str", "isinstance", "isinstance", "summary.append", "hooks.append", "str", "module.parameters", "hasattr", "isinstance", "collections.namedtuple.", "isinstance", "isinstance", "module.register_forward_hook", "str.find", "str.find", "str.find", "param_.view().size", "str.find", "list", "param_.view", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "input[].size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.prod", "torch.prod", "input[].size", "list", "torch.LongTensor", "torch.LongTensor", "len", "len", "len", "len", "len", "len", "len", "len", "len", "module.weight.data.size", "list", "list", "str", "str", "str", "output.size", "output.size"], "function", ["None"], ["def", "get_model_summary", "(", "model", ",", "*", "input_tensors", ",", "item_length", "=", "26", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param model:\n    :param input_tensors:\n    :param item_length:\n    :return:\n    \"\"\"", "\n", "\n", "summary", "=", "[", "]", "\n", "\n", "ModuleDetails", "=", "namedtuple", "(", "\n", "\"Layer\"", ",", "[", "\"name\"", ",", "\"input_size\"", ",", "\"num_parameters\"", ",", "\"multiply_adds\"", "]", ")", "\n", "hooks", "=", "[", "]", "\n", "layer_instances", "=", "{", "}", "\n", "\n", "def", "add_hooks", "(", "module", ")", ":", "\n", "\n", "        ", "def", "hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "class_name", "=", "str", "(", "module", ".", "__class__", ".", "__name__", ")", "\n", "\n", "instance_index", "=", "1", "\n", "if", "class_name", "not", "in", "layer_instances", ":", "\n", "                ", "layer_instances", "[", "class_name", "]", "=", "instance_index", "\n", "", "else", ":", "\n", "                ", "instance_index", "=", "layer_instances", "[", "class_name", "]", "+", "1", "\n", "layer_instances", "[", "class_name", "]", "=", "instance_index", "\n", "\n", "", "layer_name", "=", "class_name", "+", "\"_\"", "+", "str", "(", "instance_index", ")", "\n", "\n", "params", "=", "0", "\n", "\n", "if", "class_name", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ":", "\n", "                ", "for", "param_", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                    ", "params", "+=", "param_", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "\n", "", "", "flops", "=", "\"Not Available\"", "\n", "if", "class_name", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "and", "hasattr", "(", "module", ",", "\"weight\"", ")", ":", "\n", "                ", "flops", "=", "(", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "weight", ".", "data", ".", "size", "(", ")", ")", ")", ")", "*", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "output", ".", "size", "(", ")", ")", "[", "2", ":", "]", ")", ")", ")", ".", "item", "(", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "flops", "=", "(", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "output", ".", "size", "(", ")", ")", ")", ")", "*", "input", "[", "0", "]", ".", "size", "(", "1", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "                ", "input", "=", "input", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output", ",", "list", ")", ":", "\n", "                ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "summary", ".", "append", "(", "\n", "ModuleDetails", "(", "\n", "name", "=", "layer_name", ",", "\n", "input_size", "=", "list", "(", "input", "[", "0", "]", ".", "size", "(", ")", ")", ",", "\n", "# output_size=list(output.size()),", "\n", "num_parameters", "=", "params", ",", "\n", "multiply_adds", "=", "flops", ")", "\n", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "module", ",", "nn", ".", "ModuleList", ")", "and", "not", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", "and", "module", "!=", "model", ":", "\n", "            ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "add_hooks", ")", "\n", "\n", "space_len", "=", "item_length", "\n", "\n", "model", "(", "*", "input_tensors", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "details", "=", "''", "\n", "if", "verbose", ":", "\n", "        ", "details", "=", "\"Model Summary\"", "+", "os", ".", "linesep", "+", "\"Name{}Input Size{}Output Size{}Parameters{}Multiply Adds (Flops){}\"", ".", "format", "(", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Name\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Input Size\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Output Size\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Parameters\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Multiply Adds (Flops)\"", ")", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "\n", "", "params_sum", "=", "0", "\n", "flops_sum", "=", "0", "\n", "for", "layer", "in", "summary", ":", "\n", "        ", "params_sum", "+=", "layer", ".", "num_parameters", "\n", "if", "layer", ".", "multiply_adds", "!=", "\"Not Available\"", ":", "\n", "            ", "flops_sum", "+=", "layer", ".", "multiply_adds", "\n", "", "if", "verbose", ":", "\n", "            ", "details", "+=", "\"{}{}{}{}{}{}{}{}{}{}\"", ".", "format", "(", "\n", "layer", ".", "name", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "layer", ".", "name", ")", ")", ",", "\n", "layer", ".", "input_size", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "input_size", ")", ")", ")", ",", "\n", "# layer.output_size,", "\n", "# ' ' * (space_len - len(str(layer.output_size))),", "\n", "layer", ".", "num_parameters", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "num_parameters", ")", ")", ")", ",", "\n", "layer", ".", "multiply_adds", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "multiply_adds", ")", ")", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "\n", "", "", "details", "+=", "os", ".", "linesep", "+", "\"Total Parameters: {:,}\"", ".", "format", "(", "params_sum", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "details", "+=", "\"Total Multiply Adds (For Convolution and Linear Layers only): {:,} GFLOPs\"", ".", "format", "(", "flops_sum", "/", "(", "1024", "**", "3", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "details", "+=", "\"Number of Layers\"", "+", "os", ".", "linesep", "\n", "for", "layer", "in", "layer_instances", ":", "\n", "        ", "details", "+=", "\"{} : {} layers   \"", ".", "format", "(", "layer", ",", "layer_instances", "[", "layer", "]", ")", "\n", "\n", "", "return", "details", "", "", ""]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip_aspp.PPM.__init__": [[7, 16], ["torch.Module.__init__", "skip_aspp.PPM.add_module", "torch.Sequential", "torch.Sequential", "torch.Sequential", "str", "collections.OrderedDict", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "PPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scales", "=", "[", "1", ",", "2", ",", "3", ",", "6", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "self", ".", "add_module", "(", "\"ppm\"", "+", "str", "(", "scale", ")", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"aap\"", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "scale", ")", ")", ",", "\n", "(", "\"conv\"", ",", "nn", ".", "Conv2d", "(", "in_dim", ",", "in_dim", "//", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"norm\"", ",", "nn", ".", "BatchNorm2d", "(", "in_dim", "//", "4", ")", ")", ",", "\n", "(", "\"prelu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip_aspp.PPM.forward": [[17, 23], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "out.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "getattr", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_size", "=", "x", ".", "size", "(", ")", "\n", "out", "=", "[", "x", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "out", ".", "append", "(", "F", ".", "interpolate", "(", "getattr", "(", "self", ",", "\"ppm\"", "+", "str", "(", "scale", ")", ")", "(", "x", ")", ",", "x_size", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "out", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip_aspp.ASPPConv.__init__": [[26, 33], ["torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dilation", ")", ":", "\n", "        ", "modules", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "\n", "super", "(", "ASPPConv", ",", "self", ")", ".", "__init__", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip_aspp.ASPPPooling.__init__": [[36, 42], ["torch.Sequential.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ASPPPooling", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip_aspp.ASPPPooling.forward": [[43, 48], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "mod"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "for", "mod", "in", "self", ":", "\n", "            ", "x", "=", "mod", "(", "x", ")", "\n", "", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip_aspp.ASPP.__init__": [[51, 72], ["torch.Module.__init__", "modules.append", "tuple", "modules.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.append", "skip_aspp.ASPPPooling", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "skip_aspp.ASPPConv", "len"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "atrous_rates", ",", "out_channels", "=", "256", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "\n", "rates", "=", "tuple", "(", "atrous_rates", ")", "\n", "for", "rate", "in", "rates", ":", "\n", "            ", "modules", ".", "append", "(", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate", ")", ")", "\n", "\n", "", "modules", ".", "append", "(", "ASPPPooling", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "len", "(", "self", ".", "convs", ")", "*", "out_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip_aspp.ASPP.forward": [[73, 79], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "skip_aspp.ASPP.project", "torch.cat.append", "torch.cat.append", "torch.cat.append", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "res", ".", "append", "(", "conv", "(", "x", ")", ")", "\n", "", "res", "=", "torch", ".", "cat", "(", "res", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "project", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip_aspp.skipModule_simple.__init__": [[81, 107], ["torch.Module.__init__", "range", "skip_aspp.skipModule_simple.apply", "skip_aspp.ASPP", "skip_aspp.ASPP", "skip_aspp.ASPP", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "isinstance", "m.bias.data.fill_", "m.weight.data.fill_", "m.bias.data.fill_", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChannels", ",", "image_channel", "=", "4", ",", "ifASPP", "=", "True", ")", ":", "\n", "        ", "super", "(", "skipModule_simple", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "outChannels", "=", "{", "'stage0'", ":", "image_channel", ",", "\n", "}", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "5", "+", "1", ")", ":", "\n", "            ", "self", ".", "outChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "inChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", "\n", "\n", "# ASPP", "\n", "", "self", ".", "ifASPP", "=", "ifASPP", "\n", "if", "self", ".", "ifASPP", ":", "\n", "#ASPP(in_channels, [12, 24, 36])", "\n", "            ", "self", ".", "aspp5", "=", "ASPP", "(", "self", ".", "outChannels", "[", "'stage5'", "]", ",", "[", "3", ",", "6", ",", "9", "]", ",", "self", ".", "outChannels", "[", "'stage5'", "]", ")", "\n", "self", ".", "aspp4", "=", "ASPP", "(", "self", ".", "outChannels", "[", "'stage4'", "]", ",", "[", "6", ",", "12", ",", "18", "]", ",", "self", ".", "outChannels", "[", "'stage4'", "]", ")", "\n", "self", ".", "aspp3", "=", "ASPP", "(", "self", ".", "outChannels", "[", "'stage3'", "]", ",", "[", "12", ",", "24", ",", "36", "]", ",", "self", ".", "outChannels", "[", "'stage3'", "]", ")", "\n", "\n", "", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip_aspp.skipModule_simple.forward": [[108, 117], ["range", "getattr", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "inFeatures", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "5", "+", "1", ")", ":", "\n", "            ", "out", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "inFeatures", "[", "'stage'", "+", "str", "(", "i", ")", "]", "\n", "if", "self", ".", "ifASPP", "and", "i", ">=", "3", ":", "\n", "                ", "out", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "getattr", "(", "self", ",", "'aspp'", "+", "str", "(", "i", ")", ")", "(", "inFeatures", "[", "'stage'", "+", "str", "(", "i", ")", "]", ")", "\n", "\n", "", "", "out", "[", "'stage0'", "]", "=", "image", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.PPM.__init__": [[7, 16], ["torch.Module.__init__", "skip.PPM.add_module", "torch.Sequential", "torch.Sequential", "torch.Sequential", "str", "collections.OrderedDict", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "PPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scales", "=", "[", "1", ",", "2", ",", "3", ",", "6", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "self", ".", "add_module", "(", "\"ppm\"", "+", "str", "(", "scale", ")", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"aap\"", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "scale", ")", ")", ",", "\n", "(", "\"conv\"", ",", "nn", ".", "Conv2d", "(", "in_dim", ",", "in_dim", "//", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"norm\"", ",", "nn", ".", "BatchNorm2d", "(", "in_dim", "//", "4", ")", ")", ",", "\n", "(", "\"prelu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.PPM.forward": [[17, 23], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "out.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "getattr", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_size", "=", "x", ".", "size", "(", ")", "\n", "out", "=", "[", "x", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "out", ".", "append", "(", "F", ".", "interpolate", "(", "getattr", "(", "self", ",", "\"ppm\"", "+", "str", "(", "scale", ")", ")", "(", "x", ")", ",", "x_size", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "out", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.skipModule_simple.__init__": [[25, 51], ["torch.Module.__init__", "range", "skip.skipModule_simple.apply", "skip.PPM", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "isinstance", "m.bias.data.fill_", "m.weight.data.fill_", "m.bias.data.fill_", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChannels", ",", "lastStage", "=", "4", ",", "image_channel", "=", "4", ",", "ifPPM", "=", "True", ")", ":", "\n", "        ", "super", "(", "skipModule_simple", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lastStage", "=", "lastStage", "\n", "\n", "self", ".", "outChannels", "=", "{", "'stage0'", ":", "image_channel", ",", "\n", "}", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "lastStage", "+", "1", ")", ":", "\n", "            ", "self", ".", "outChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "inChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", "\n", "\n", "# PPM", "\n", "", "self", ".", "ifPPM", "=", "ifPPM", "\n", "if", "self", ".", "ifPPM", ":", "\n", "            ", "self", ".", "ppm", "=", "PPM", "(", "self", ".", "outChannels", "[", "'stage'", "+", "str", "(", "self", ".", "lastStage", ")", "]", ")", "\n", "self", ".", "outChannels", "[", "'stage'", "+", "str", "(", "self", ".", "lastStage", ")", "]", "=", "self", ".", "outChannels", "[", "'stage'", "+", "str", "(", "self", ".", "lastStage", ")", "]", "*", "2", "\n", "\n", "", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.skipModule_simple.forward": [[52, 60], ["range", "skip.skipModule_simple.ppm", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "inFeatures", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "lastStage", "+", "1", ")", ":", "\n", "            ", "out", "[", "'stage'", "+", "str", "(", "i", ")", "]", "=", "inFeatures", "[", "'stage'", "+", "str", "(", "i", ")", "]", "\n", "", "if", "self", ".", "ifPPM", ":", "\n", "            ", "out", "[", "'stage'", "+", "str", "(", "self", ".", "lastStage", ")", "]", "=", "self", ".", "ppm", "(", "out", "[", "'stage'", "+", "str", "(", "self", ".", "lastStage", ")", "]", ")", "\n", "", "out", "[", "'stage0'", "]", "=", "image", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.skip_attention.__init__": [[84, 92], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ")", ":", "\n", "        ", "super", "(", "skip_attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "oup", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "pconv", "=", "nn", ".", "Conv2d", "(", "oup", ",", "oup", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.skip_attention.forward": [[93, 101], ["skip.skip_attention.conv1", "skip.skip_attention.norm1", "skip.skip_attention.relu1", "skip.skip_attention.avg_pool", "skip.skip_attention.pconv", "torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.norm1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv1", "(", "x", ")", "\n", "fea", "=", "self", ".", "norm1", "(", "fea", ")", "\n", "fea", "=", "self", ".", "relu1", "(", "fea", ")", "\n", "\n", "w", "=", "self", ".", "avg_pool", "(", "fea", ")", "\n", "w", "=", "self", ".", "pconv", "(", "w", ")", "\n", "return", "fea", "*", "(", "F", ".", "relu6", "(", "w", "+", "3.0", ",", "inplace", "=", "True", ")", "/", "6.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.trimap_process.__init__": [[103, 111], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "trimap_process", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", "\n", "self", ".", "maxpool8", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "8", ",", "stride", "=", "8", ")", "\n", "self", ".", "maxpool16", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "16", ",", "stride", "=", "16", ")", "\n", "self", ".", "maxpool32", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "32", ",", "stride", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.trimap_process.forward": [[112, 153], ["skip.trimap_process.maxpool4", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool4", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool4", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool4", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool2", "skip.trimap_process.maxpool2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "skip.trimap_process.relu", "skip.trimap_process.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "trimap", "=", "image", "[", ":", ",", "3", ",", ":", ",", ":", "]", "\n", "trimap", "=", "trimap", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "F_mask", "=", "self", ".", "relu", "(", "trimap", "-", "3.", "/", "4.", ")", "*", "4", "\n", "B_mask", "=", "self", ".", "relu", "(", "1.", "/", "4.", "-", "trimap", ")", "*", "4", "\n", "trimaps", "=", "{", "}", "\n", "trimaps", "[", "'stage2_F_large'", "]", "=", "self", ".", "maxpool4", "(", "F_mask", ")", "\n", "trimaps", "[", "'stage3_F_large'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage2_F_large'", "]", ")", "\n", "trimaps", "[", "'stage4_F_large'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage3_F_large'", "]", ")", "\n", "trimaps", "[", "'stage5_F_large'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage4_F_large'", "]", ")", "\n", "\n", "trimaps", "[", "'stage2_F_small'", "]", "=", "self", ".", "maxpool4", "(", "1", "-", "F_mask", ")", "\n", "trimaps", "[", "'stage3_F_small'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage2_F_small'", "]", ")", "\n", "trimaps", "[", "'stage4_F_small'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage3_F_small'", "]", ")", "\n", "trimaps", "[", "'stage5_F_small'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage4_F_small'", "]", ")", "\n", "trimaps", "[", "'stage2_F_small'", "]", "=", "1", "-", "trimaps", "[", "'stage2_F_small'", "]", "\n", "trimaps", "[", "'stage3_F_small'", "]", "=", "1", "-", "trimaps", "[", "'stage3_F_small'", "]", "\n", "trimaps", "[", "'stage4_F_small'", "]", "=", "1", "-", "trimaps", "[", "'stage4_F_small'", "]", "\n", "trimaps", "[", "'stage5_F_small'", "]", "=", "1", "-", "trimaps", "[", "'stage5_F_small'", "]", "\n", "\n", "trimaps", "[", "'stage2_B_large'", "]", "=", "self", ".", "maxpool4", "(", "B_mask", ")", "\n", "trimaps", "[", "'stage3_B_large'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage2_B_large'", "]", ")", "\n", "trimaps", "[", "'stage4_B_large'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage3_B_large'", "]", ")", "\n", "trimaps", "[", "'stage5_B_large'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage4_B_large'", "]", ")", "\n", "\n", "trimaps", "[", "'stage2_B_small'", "]", "=", "self", ".", "maxpool4", "(", "1", "-", "B_mask", ")", "\n", "trimaps", "[", "'stage3_B_small'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage2_B_small'", "]", ")", "\n", "trimaps", "[", "'stage4_B_small'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage3_B_small'", "]", ")", "\n", "trimaps", "[", "'stage5_B_small'", "]", "=", "self", ".", "maxpool2", "(", "trimaps", "[", "'stage4_B_small'", "]", ")", "\n", "trimaps", "[", "'stage2_B_small'", "]", "=", "1", "-", "trimaps", "[", "'stage2_B_small'", "]", "\n", "trimaps", "[", "'stage3_B_small'", "]", "=", "1", "-", "trimaps", "[", "'stage3_B_small'", "]", "\n", "trimaps", "[", "'stage4_B_small'", "]", "=", "1", "-", "trimaps", "[", "'stage4_B_small'", "]", "\n", "trimaps", "[", "'stage5_B_small'", "]", "=", "1", "-", "trimaps", "[", "'stage5_B_small'", "]", "\n", "\n", "out", "=", "{", "}", "\n", "out", "[", "'stage0'", "]", "=", "torch", ".", "cat", "(", "[", "F_mask", ",", "B_mask", "]", ",", "1", ")", "\n", "out", "[", "'stage2'", "]", "=", "torch", ".", "cat", "(", "[", "trimaps", "[", "'stage2_F_small'", "]", ",", "trimaps", "[", "'stage2_F_large'", "]", ",", "trimaps", "[", "'stage2_B_small'", "]", ",", "trimaps", "[", "'stage2_B_large'", "]", "]", ",", "1", ")", "\n", "out", "[", "'stage3'", "]", "=", "torch", ".", "cat", "(", "[", "trimaps", "[", "'stage3_F_small'", "]", ",", "trimaps", "[", "'stage3_F_large'", "]", ",", "trimaps", "[", "'stage3_B_small'", "]", ",", "trimaps", "[", "'stage3_B_large'", "]", "]", ",", "1", ")", "\n", "out", "[", "'stage4'", "]", "=", "torch", ".", "cat", "(", "[", "trimaps", "[", "'stage4_F_small'", "]", ",", "trimaps", "[", "'stage4_F_large'", "]", ",", "trimaps", "[", "'stage4_B_small'", "]", ",", "trimaps", "[", "'stage4_B_large'", "]", "]", ",", "1", ")", "\n", "out", "[", "'stage5'", "]", "=", "torch", ".", "cat", "(", "[", "trimaps", "[", "'stage5_F_small'", "]", ",", "trimaps", "[", "'stage5_F_large'", "]", ",", "trimaps", "[", "'stage5_B_small'", "]", ",", "trimaps", "[", "'stage5_B_large'", "]", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.skipModule.__init__": [[156, 184], ["torch.Module.__init__", "skip.skip_attention", "skip.skip_attention", "skip.skip_attention", "skip.skip_attention", "skip.trimap_process", "skip.skipModule.apply", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "isinstance", "m.bias.data.fill_", "m.weight.data.fill_", "m.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChannels", ")", ":", "\n", "        ", "super", "(", "skipModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outChannels", "=", "{", "\n", "'stage0'", ":", "16", ",", "\n", "'stage1'", ":", "32", ",", "\n", "'stage2'", ":", "64", ",", "\n", "'stage3'", ":", "128", ",", "\n", "'stage4'", ":", "256", ",", "\n", "'stage5'", ":", "512", ",", "\n", "}", "\n", "#self.skip0 = skip_attention(3, self.outChannels['stage0'])", "\n", "#self.skip1 = skip_attention(inChannels['stage1'] + 4, self.outChannels['stage1'])", "\n", "self", ".", "skip2", "=", "skip_attention", "(", "inChannels", "[", "'stage2'", "]", "+", "4", ",", "self", ".", "outChannels", "[", "'stage2'", "]", ")", "\n", "self", ".", "skip3", "=", "skip_attention", "(", "inChannels", "[", "'stage3'", "]", "+", "4", ",", "self", ".", "outChannels", "[", "'stage3'", "]", ")", "\n", "self", ".", "skip4", "=", "skip_attention", "(", "inChannels", "[", "'stage4'", "]", "+", "4", ",", "self", ".", "outChannels", "[", "'stage4'", "]", ")", "\n", "self", ".", "skip5", "=", "skip_attention", "(", "inChannels", "[", "'stage5'", "]", "+", "4", ",", "self", ".", "outChannels", "[", "'stage5'", "]", ")", "\n", "self", ".", "trimap_process", "=", "trimap_process", "(", ")", "\n", "\n", "# initialize weights", "\n", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.skip.skip.skipModule.forward": [[185, 195], ["skip.skipModule.trimap_process", "skip.skipModule.skip2", "skip.skipModule.skip3", "skip.skipModule.skip4", "skip.skipModule.skip5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "inFeatures", ")", ":", "\n", "        ", "trimaps", "=", "self", ".", "trimap_process", "(", "image", ")", "\n", "out", "=", "{", "}", "\n", "out", "[", "'stage0'", "]", "=", "image", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "out", "[", "'stage1'", "]", "=", "inFeatures", "[", "'stage1'", "]", "\n", "out", "[", "'stage2'", "]", "=", "self", ".", "skip2", "(", "torch", ".", "cat", "(", "[", "inFeatures", "[", "'stage2'", "]", ",", "trimaps", "[", "'stage2'", "]", "]", ",", "1", ")", ")", "\n", "out", "[", "'stage3'", "]", "=", "self", ".", "skip3", "(", "torch", ".", "cat", "(", "[", "inFeatures", "[", "'stage3'", "]", ",", "trimaps", "[", "'stage3'", "]", "]", ",", "1", ")", ")", "\n", "out", "[", "'stage4'", "]", "=", "self", ".", "skip4", "(", "torch", ".", "cat", "(", "[", "inFeatures", "[", "'stage4'", "]", ",", "trimaps", "[", "'stage4'", "]", "]", ",", "1", ")", ")", "\n", "out", "[", "'stage5'", "]", "=", "self", ".", "skip5", "(", "torch", ".", "cat", "(", "[", "inFeatures", "[", "'stage5'", "]", ",", "trimaps", "[", "'stage5'", "]", "]", ",", "1", ")", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_FAM.my_conv.__init__": [[8, 16], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ")", ":", "\n", "        ", "super", "(", "my_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "oup", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "oup", ",", "oup", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_FAM.my_conv.forward": [[17, 25], ["decoder_FAM.my_conv.conv1", "decoder_FAM.my_conv.norm1", "decoder_FAM.my_conv.relu1", "decoder_FAM.my_conv.avg_pool", "decoder_FAM.my_conv.fc", "torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.norm1"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv1", "(", "input", ")", "\n", "fea", "=", "self", ".", "norm1", "(", "fea", ")", "\n", "fea", "=", "self", ".", "relu1", "(", "fea", ")", "\n", "\n", "w", "=", "self", ".", "avg_pool", "(", "fea", ")", "\n", "w", "=", "self", ".", "fc", "(", "w", ")", "\n", "return", "fea", "*", "(", "F", ".", "relu6", "(", "w", "+", "3.0", ",", "inplace", "=", "True", ")", "/", "6.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_FAM.FAM_module.__init__": [[27, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "left_channels", ",", "down_channels", ",", "m_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "FAM_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "left_conv", "=", "nn", ".", "Conv2d", "(", "left_channels", ",", "m_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "down_conv", "=", "nn", ".", "Conv2d", "(", "down_channels", ",", "m_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "flow_make", "=", "nn", ".", "Conv2d", "(", "2", "*", "m_channels", ",", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "final_conv", "=", "nn", ".", "Conv2d", "(", "2", "*", "m_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_FAM.FAM_module.forward": [[34, 43], ["decoder_FAM.FAM_module.down_conv", "decoder_FAM.FAM_module.left_conv", "torch.interpolate", "torch.interpolate", "torch.interpolate", "decoder_FAM.FAM_module.flow_make", "decoder_FAM.FAM_module.flow_warp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_FAM.FAM_module.final_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_FAM.FAM_module.flow_warp"], ["", "def", "forward", "(", "self", ",", "left_feature", ",", "down_feature", ")", ":", "\n", "        ", "down_feature", "=", "self", ".", "down_conv", "(", "down_feature", ")", "\n", "left_feature", "=", "self", ".", "left_conv", "(", "left_feature", ")", "\n", "left_shape", "=", "left_feature", ".", "shape", "[", "2", "]", ",", "left_feature", ".", "shape", "[", "3", "]", "\n", "down_feature_upsampled", "=", "F", ".", "interpolate", "(", "down_feature", ",", "size", "=", "left_shape", ",", "mode", "=", "\"bilinear\"", ")", "\n", "flow", "=", "self", ".", "flow_make", "(", "torch", ".", "cat", "(", "[", "down_feature_upsampled", ",", "left_feature", "]", ",", "1", ")", ")", "\n", "feature", "=", "self", ".", "flow_warp", "(", "down_feature", ",", "flow", ",", "size", "=", "left_shape", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "[", "feature", ",", "left_feature", "]", ",", "1", ")", "\n", "return", "self", ".", "final_conv", "(", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_FAM.FAM_module.flow_warp": [[44, 55], ["input.size", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as().to", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as", "flow.permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "grid.repeat().type_as().to.repeat().type_as().to.repeat"], "methods", ["None"], ["", "def", "flow_warp", "(", "self", ",", "input", ",", "flow", ",", "size", ")", ":", "\n", "        ", "out_h", ",", "out_w", "=", "size", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "norm", "=", "torch", ".", "tensor", "(", "[", "[", "[", "[", "out_w", ",", "out_h", "]", "]", "]", "]", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "h", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_h", ")", ".", "view", "(", "out_h", ",", "1", ")", ".", "repeat", "(", "1", ",", "out_w", ")", "\n", "w", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_w", ")", ".", "view", "(", "1", ",", "out_w", ")", ".", "repeat", "(", "out_h", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "w", ".", "unsqueeze", "(", "2", ")", ",", "h", ".", "unsqueeze", "(", "2", ")", ")", ",", "2", ")", "\n", "grid", "=", "grid", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "grid", "=", "grid", "+", "flow", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "/", "norm", "\n", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_FAM.decoderModule.__init__": [[57, 97], ["torch.Module.__init__", "range", "decoder_FAM.FAM_module", "torch.Sequential", "torch.Sequential", "torch.Sequential", "decoder_FAM.decoderModule.apply", "decoder_FAM.decoderModule.add_module", "collections.OrderedDict", "isinstance", "decoder_FAM.my_conv", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "isinstance", "str", "m.bias.data.fill_", "m.weight.data.fill_", "m.bias.data.fill_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChannels", ",", "lastStage", "=", "4", ",", "image_channel", "=", "4", ")", ":", "\n", "        ", "super", "(", "decoderModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lastStage", "=", "lastStage", "\n", "self", ".", "outChannels", "=", "{", "'stage0'", ":", "1", ",", "\n", "'stage1'", ":", "64", ",", "\n", "'stage2'", ":", "64", ",", "\n", "'stage3'", ":", "128", ",", "\n", "'stage4'", ":", "256", ",", "\n", "'stage5'", ":", "512", ",", "\n", "}", "\n", "self", ".", "inChannels", "=", "{", "'stage0'", ":", "inChannels", "[", "'stage0'", "]", "+", "self", ".", "outChannels", "[", "'stage1'", "]", ",", "\n", "'stage1'", ":", "inChannels", "[", "'stage1'", "]", "+", "self", ".", "outChannels", "[", "'stage2'", "]", ",", "\n", "'stage2'", ":", "inChannels", "[", "'stage2'", "]", "+", "self", ".", "outChannels", "[", "'stage3'", "]", ",", "\n", "'stage3'", ":", "inChannels", "[", "'stage3'", "]", "+", "self", ".", "outChannels", "[", "'stage4'", "]", ",", "\n", "'stage4'", ":", "inChannels", "[", "'stage4'", "]", "+", "self", ".", "outChannels", "[", "'stage5'", "]", ",", "\n", "'stage5'", ":", "inChannels", "[", "'stage5'", "]", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "lastStage", "+", "1", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"decoder_\"", "+", "str", "(", "i", ")", ",", "\n", "my_conv", "(", "self", ".", "inChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", ",", "self", ".", "outChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", ")", "\n", ")", "\n", "", "self", ".", "final_fusion", "=", "FAM_module", "(", "left_channels", "=", "image_channel", ",", "down_channels", "=", "self", ".", "outChannels", "[", "'stage1'", "]", ",", "m_channels", "=", "32", ",", "out_channels", "=", "32", ")", "\n", "self", ".", "final_final", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", ",", "\n", "(", "\"relu2\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", ",", "\n", "(", "\"relu3\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"conv3\"", ",", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "3", ",", "1", ",", "1", ")", ")", ",", "\n", "]", ")", "\n", ")", "\n", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_FAM.decoderModule.forward": [[99, 132], ["decoder_FAM.decoderModule.decoder_5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_FAM.decoderModule.decoder_4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_FAM.decoderModule.decoder_3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_FAM.decoderModule.decoder_2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_FAM.decoderModule.decoder_1", "decoder_FAM.decoderModule.final_fusion", "decoder_FAM.decoderModule.final_final", "list", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "#trimap = features['stage0'][:,3:4,:,:]", "\n", "        ", "out", "=", "{", "}", "\n", "theStages", "=", "list", "(", "range", "(", "2", ",", "self", ".", "lastStage", "+", "1", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "#for stage in theStages:", "\n", "#    tmp = getattr(self, \"decoder_\"+str(stage))(features['stage'+str(stage)])", "\n", "#    tmp = F.interpolate(tmp, features['stage'+str(stage-1)].shape[2:], mode = \"nearest\")", "\n", "#    features['stage'+str(stage-1)] = torch.cat([features['stage'+str(stage-1)], tmp], 1)", "\n", "\n", "# stage 5 to stage 4", "\n", "tmp", "=", "self", ".", "decoder_5", "(", "features", "[", "'stage5'", "]", ")", "\n", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "features", "[", "'stage4'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "features", "[", "'stage4'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "# stage 4 to stage 3", "\n", "tmp", "=", "self", ".", "decoder_4", "(", "tmp", ")", "\n", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "features", "[", "'stage3'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "features", "[", "'stage3'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "# stage 3 to stage 2", "\n", "tmp", "=", "self", ".", "decoder_3", "(", "tmp", ")", "\n", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "features", "[", "'stage2'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "features", "[", "'stage2'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "# stage 2 to stage 1", "\n", "tmp", "=", "self", ".", "decoder_2", "(", "tmp", ")", "\n", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "features", "[", "'stage1'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "features", "[", "'stage1'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "\n", "tmp", "=", "self", ".", "decoder_1", "(", "tmp", ")", "\n", "alpha", "=", "self", ".", "final_fusion", "(", "features", "[", "'stage0'", "]", ",", "tmp", ")", "\n", "alpha", "=", "self", ".", "final_final", "(", "alpha", ")", "\n", "out", "[", "'alpha'", "]", "=", "alpha", "\n", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_simple.my_conv.__init__": [[8, 16], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ")", ":", "\n", "        ", "super", "(", "my_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "oup", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "oup", ",", "oup", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_simple.my_conv.forward": [[17, 25], ["decoder_simple.my_conv.conv1", "decoder_simple.my_conv.norm1", "decoder_simple.my_conv.relu1", "decoder_simple.my_conv.avg_pool", "decoder_simple.my_conv.fc", "torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.norm1"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv1", "(", "input", ")", "\n", "fea", "=", "self", ".", "norm1", "(", "fea", ")", "\n", "fea", "=", "self", ".", "relu1", "(", "fea", ")", "\n", "\n", "w", "=", "self", ".", "avg_pool", "(", "fea", ")", "\n", "w", "=", "self", ".", "fc", "(", "w", ")", "\n", "return", "fea", "*", "(", "F", ".", "relu6", "(", "w", "+", "3.0", ",", "inplace", "=", "True", ")", "/", "6.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_simple.decoderModule.__init__": [[27, 66], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "decoder_simple.decoderModule.apply", "decoder_simple.decoderModule.add_module", "collections.OrderedDict", "isinstance", "decoder_simple.my_conv", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "isinstance", "str", "m.bias.data.fill_", "m.weight.data.fill_", "m.bias.data.fill_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChannels", ",", "lastStage", "=", "4", ",", "image_channel", "=", "4", ")", ":", "\n", "        ", "super", "(", "decoderModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lastStage", "=", "lastStage", "\n", "self", ".", "outChannels", "=", "{", "'stage0'", ":", "1", ",", "\n", "'stage1'", ":", "64", ",", "\n", "'stage2'", ":", "64", ",", "\n", "'stage3'", ":", "128", ",", "\n", "'stage4'", ":", "256", ",", "\n", "'stage5'", ":", "512", ",", "\n", "}", "\n", "self", ".", "inChannels", "=", "{", "'stage0'", ":", "inChannels", "[", "'stage0'", "]", "+", "self", ".", "outChannels", "[", "'stage1'", "]", ",", "\n", "'stage1'", ":", "inChannels", "[", "'stage1'", "]", "+", "self", ".", "outChannels", "[", "'stage2'", "]", ",", "\n", "'stage2'", ":", "inChannels", "[", "'stage2'", "]", "+", "self", ".", "outChannels", "[", "'stage3'", "]", ",", "\n", "'stage3'", ":", "inChannels", "[", "'stage3'", "]", "+", "self", ".", "outChannels", "[", "'stage4'", "]", ",", "\n", "'stage4'", ":", "inChannels", "[", "'stage4'", "]", "+", "self", ".", "outChannels", "[", "'stage5'", "]", ",", "\n", "'stage5'", ":", "inChannels", "[", "'stage5'", "]", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "lastStage", "+", "1", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"decoder_\"", "+", "str", "(", "i", ")", ",", "\n", "my_conv", "(", "self", ".", "inChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", ",", "self", ".", "outChannels", "[", "'stage'", "+", "str", "(", "i", ")", "]", ")", "\n", ")", "\n", "", "self", ".", "final_final", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "68", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", ",", "\n", "(", "\"relu2\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", ",", "\n", "(", "\"relu3\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"conv3\"", ",", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "3", ",", "1", ",", "1", ")", ")", ",", "\n", "]", ")", "\n", ")", "\n", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.decoder.decoder_simple.decoderModule.forward": [[68, 101], ["decoder_simple.decoderModule.decoder_5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_simple.decoderModule.decoder_4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_simple.decoderModule.decoder_3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_simple.decoderModule.decoder_2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_simple.decoderModule.decoder_1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder_simple.decoderModule.final_final", "list", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "#trimap = features['stage0'][:,3:4,:,:]", "\n", "        ", "out", "=", "{", "}", "\n", "theStages", "=", "list", "(", "range", "(", "2", ",", "self", ".", "lastStage", "+", "1", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "#for stage in theStages:", "\n", "#    tmp = getattr(self, \"decoder_\"+str(stage))(features['stage'+str(stage)])", "\n", "#    tmp = F.interpolate(tmp, features['stage'+str(stage-1)].shape[2:], mode = \"nearest\")", "\n", "#    features['stage'+str(stage-1)] = torch.cat([features['stage'+str(stage-1)], tmp], 1)", "\n", "\n", "# stage 5 to stage 4", "\n", "tmp", "=", "self", ".", "decoder_5", "(", "features", "[", "'stage5'", "]", ")", "\n", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "features", "[", "'stage4'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "features", "[", "'stage4'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "# stage 4 to stage 3", "\n", "tmp", "=", "self", ".", "decoder_4", "(", "tmp", ")", "\n", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "features", "[", "'stage3'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "features", "[", "'stage3'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "# stage 3 to stage 2", "\n", "tmp", "=", "self", ".", "decoder_3", "(", "tmp", ")", "\n", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "features", "[", "'stage2'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "features", "[", "'stage2'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "# stage 2 to stage 1", "\n", "tmp", "=", "self", ".", "decoder_2", "(", "tmp", ")", "\n", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "features", "[", "'stage1'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "features", "[", "'stage1'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "\n", "tmp", "=", "self", ".", "decoder_1", "(", "tmp", ")", "\n", "tmp", "=", "F", ".", "interpolate", "(", "tmp", ",", "features", "[", "'stage0'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "[", "features", "[", "'stage0'", "]", ",", "tmp", "]", ",", "1", ")", "\n", "alpha", "=", "self", ".", "final_final", "(", "tmp", ")", "\n", "out", "[", "'alpha'", "]", "=", "alpha", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.BasicBlock.__init__": [[33, 84], ["dict", "torch.Module.__init__", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_conv_layer", "resnet.BasicBlock.add_module", "mmcv.cnn.build_conv_layer", "resnet.BasicBlock.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "expansion", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "expansion", "=", "expansion", "\n", "assert", "self", ".", "expansion", "==", "1", "\n", "assert", "out_channels", "%", "expansion", "==", "0", "\n", "self", ".", "mid_channels", "=", "out_channels", "//", "expansion", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "self", ".", "mid_channels", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "out_channels", ",", "postfix", "=", "2", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "self", ".", "mid_channels", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "self", ".", "mid_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.BasicBlock.norm1": [[85, 88], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.BasicBlock.norm2": [[89, 92], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.BasicBlock.forward": [[93, 120], ["resnet.BasicBlock.relu", "resnet.BasicBlock.conv1", "resnet.BasicBlock.norm1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.norm2", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "resnet.BasicBlock.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.checkpoint", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.checkpoint", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.checkpoint"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.Bottleneck.__init__": [[145, 214], ["dict", "torch.Module.__init__", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_conv_layer", "resnet.Bottleneck.add_module", "mmcv.cnn.build_conv_layer", "resnet.Bottleneck.add_module", "mmcv.cnn.build_conv_layer", "resnet.Bottleneck.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "expansion", "=", "4", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "expansion", "=", "expansion", "\n", "assert", "out_channels", "%", "expansion", "==", "0", "\n", "self", ".", "mid_channels", "=", "out_channels", "//", "expansion", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "if", "self", ".", "style", "==", "'pytorch'", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "1", "\n", "self", ".", "conv2_stride", "=", "stride", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "stride", "\n", "self", ".", "conv2_stride", "=", "1", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "self", ".", "mid_channels", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "self", ".", "mid_channels", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "out_channels", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "self", ".", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "self", ".", "mid_channels", ",", "\n", "self", ".", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "self", ".", "mid_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.Bottleneck.norm1": [[215, 218], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.Bottleneck.norm2": [[219, 222], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.Bottleneck.norm3": [[223, 226], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm3", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm3_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.Bottleneck.forward": [[227, 258], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.norm1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.norm2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.Bottleneck.norm3", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.checkpoint", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.checkpoint", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.tools.train.checkpoint"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResLayer.__init__": [[317, 378], ["dict", "resnet.get_expansion", "layers.append", "range", "torch.Sequential.__init__", "torch.Sequential.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Sequential.append", "block", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.get_expansion", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "expansion", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "avg_down", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "block", "=", "block", "\n", "self", ".", "expansion", "=", "get_expansion", "(", "block", ",", "expansion", ")", "\n", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "in_channels", "!=", "out_channels", ":", "\n", "            ", "downsample", "=", "[", "]", "\n", "conv_stride", "=", "stride", "\n", "if", "avg_down", "and", "stride", "!=", "1", ":", "\n", "                ", "conv_stride", "=", "1", "\n", "downsample", ".", "append", "(", "\n", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", "=", "stride", ",", "\n", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "\n", "count_include_pad", "=", "False", ")", ")", "\n", "", "downsample", ".", "extend", "(", "[", "\n", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "conv_stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "out_channels", ")", "[", "1", "]", "\n", "]", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "downsample", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "expansion", "=", "self", ".", "expansion", ",", "\n", "stride", "=", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "**", "kwargs", ")", ")", "\n", "in_channels", "=", "out_channels", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "expansion", "=", "self", ".", "expansion", ",", "\n", "stride", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "**", "kwargs", ")", ")", "\n", "", "super", "(", "ResLayer", ",", "self", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.__init__": [[442, 524], ["dict", "torch.Module.__init__", "resnet.get_expansion", "resnet.ResNet._make_stem_layer", "enumerate", "resnet.ResNet._freeze_stages", "dict", "dict", "KeyError", "len", "len", "max", "resnet.ResNet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.get_expansion", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "in_channels", "=", "3", ",", "\n", "stem_channels", "=", "64", ",", "\n", "base_channels", "=", "64", ",", "\n", "expansion", "=", "None", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "3", ",", ")", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "deep_stem", "=", "False", ",", "\n", "avg_down", "=", "False", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "True", ",", "\n", "init_cfg", "=", "[", "\n", "dict", "(", "type", "=", "'Kaiming'", ",", "layer", "=", "[", "'Conv2d'", "]", ")", ",", "\n", "dict", "(", "\n", "type", "=", "'Constant'", ",", "\n", "val", "=", "1", ",", "\n", "layer", "=", "[", "'_BatchNorm'", ",", "'GroupNorm'", "]", ")", "\n", "]", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "f'invalid depth {depth} for resnet'", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n", "self", ".", "stem_channels", "=", "stem_channels", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "deep_stem", "=", "deep_stem", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "expansion", "=", "get_expansion", "(", "self", ".", "block", ",", "expansion", ")", "\n", "\n", "self", ".", "_make_stem_layer", "(", "in_channels", ",", "stem_channels", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "_in_channels", "=", "stem_channels", "\n", "_out_channels", "=", "base_channels", "*", "self", ".", "expansion", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "res_layer", "=", "self", ".", "make_res_layer", "(", "\n", "block", "=", "self", ".", "block", ",", "\n", "num_blocks", "=", "num_blocks", ",", "\n", "in_channels", "=", "_in_channels", ",", "\n", "out_channels", "=", "_out_channels", ",", "\n", "expansion", "=", "self", ".", "expansion", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "avg_down", "=", "self", ".", "avg_down", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", "\n", "_in_channels", "=", "_out_channels", "\n", "_out_channels", "*=", "2", "\n", "layer_name", "=", "f'layer{i + 1}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n", "self", ".", "feat_dim", "=", "res_layer", "[", "-", "1", "]", ".", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.make_res_layer": [[525, 527], ["resnet.ResLayer"], "methods", ["None"], ["", "def", "make_res_layer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ResLayer", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.norm1": [[528, 531], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet._make_stem_layer": [[532, 576], ["torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_norm_layer", "resnet.ResNet.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["None"], ["", "def", "_make_stem_layer", "(", "self", ",", "in_channels", ",", "stem_channels", ")", ":", "\n", "        ", "if", "self", ".", "deep_stem", ":", "\n", "            ", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "stem_channels", "//", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "inplace", "=", "True", ")", ",", "\n", "ConvModule", "(", "\n", "stem_channels", "//", "2", ",", "\n", "stem_channels", "//", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "inplace", "=", "True", ")", ",", "\n", "ConvModule", "(", "\n", "stem_channels", "//", "2", ",", "\n", "stem_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "stem_channels", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "stem_channels", ",", "postfix", "=", "1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet._freeze_stages": [[577, 594], ["range", "getattr", "getattr.eval", "getattr.parameters", "resnet.ResNet.stem.eval", "resnet.ResNet.stem.parameters", "resnet.ResNet.norm1.eval", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "if", "self", ".", "deep_stem", ":", "\n", "                ", "self", ".", "stem", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "stem", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "norm1", ".", "eval", "(", ")", "\n", "for", "m", "in", "[", "self", ".", "conv1", ",", "self", ".", "norm1", "]", ":", "\n", "                    ", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "f'layer{i}'", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.init_weights": [[596, 605], ["super().init_weights", "resnet.ResNet.modules", "isinstance", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.init_weights"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "\n", "if", "self", ".", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "constant_init", "(", "m", ".", "norm3", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "constant_init", "(", "m", ".", "norm2", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.forward": [[606, 627], ["resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.stem", "resnet.ResNet.conv1", "resnet.ResNet.norm1", "resnet.ResNet.relu"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.norm1"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#import pdb", "\n", "#pdb.set_trace()", "\n", "        ", "outputs", "=", "{", "}", "\n", "if", "self", ".", "deep_stem", ":", "\n", "            ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "outputs", "[", "'stage1'", "]", "=", "x", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "outputs", "[", "'stage2'", "]", "=", "x", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "outputs", "[", "'stage3'", "]", "=", "x", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "outputs", "[", "'stage4'", "]", "=", "x", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "outputs", "[", "'stage5'", "]", "=", "x", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.train": [[628, 636], ["super().train", "resnet.ResNet._freeze_stages", "resnet.ResNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet.train", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNet._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.ResNetV1d.__init__": [[648, 674], ["resnet.ResNet.__init__", "resnet.ResNetV1d.state_dict", "resnet.ResNetV1d.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNetV1d", ",", "self", ")", ".", "__init__", "(", "\n", "deep_stem", "=", "True", ",", "avg_down", "=", "True", ",", "**", "kwargs", ")", "\n", "model_path", "=", "\"pretrained/resnetv1d50_b32x8_imagenet_20210531-db14775a.pth\"", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "model_path", ")", "[", "'state_dict'", "]", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "name", "in", "pretrained_dict", ":", "\n", "#import pdb", "\n", "#pdb.set_trace()", "\n", "            ", "model_name", "=", "name", "[", "9", ":", "]", "\n", "if", "model_name", "not", "in", "model_dict", ":", "\n", "                ", "print", "(", "name", ",", "\" not in model_dict!!!!!!!!!\"", ")", "\n", "continue", "\n", "", "if", "model_name", "==", "\"stem.0.conv.weight\"", ":", "\n", "                ", "model_dict", "[", "model_name", "]", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "=", "pretrained_dict", "[", "name", "]", "[", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "model_dict", "[", "model_name", "]", "[", ":", ",", "3", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "continue", "\n", "", "model_dict", "[", "model_name", "]", "=", "pretrained_dict", "[", "name", "]", "\n", "", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"#########################################\"", ")", "\n", "self", ".", "_out_feature_channels", "=", "{", "\n", "\"stage1\"", ":", "64", ",", "\n", "\"stage2\"", ":", "256", ",", "\n", "\"stage3\"", ":", "512", ",", "\n", "\"stage4\"", ":", "1024", ",", "\n", "\"stage5\"", ":", "2048", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.mmclassification.resnet.get_expansion": [[260, 293], ["isinstance", "hasattr", "TypeError", "issubclass", "issubclass", "TypeError"], "function", ["None"], ["", "", "def", "get_expansion", "(", "block", ",", "expansion", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get the expansion of a residual block.\n\n    The block expansion will be obtained by the following order:\n\n    1. If ``expansion`` is given, just return it.\n    2. If ``block`` has the attribute ``expansion``, then return\n       ``block.expansion``.\n    3. Return the default value according the the block type:\n       1 for ``BasicBlock`` and 4 for ``Bottleneck``.\n\n    Args:\n        block (class): The block class.\n        expansion (int | None): The given expansion ratio.\n\n    Returns:\n        int: The expansion of the block.\n    \"\"\"", "\n", "if", "isinstance", "(", "expansion", ",", "int", ")", ":", "\n", "        ", "assert", "expansion", ">", "0", "\n", "", "elif", "expansion", "is", "None", ":", "\n", "        ", "if", "hasattr", "(", "block", ",", "'expansion'", ")", ":", "\n", "            ", "expansion", "=", "block", ".", "expansion", "\n", "", "elif", "issubclass", "(", "block", ",", "BasicBlock", ")", ":", "\n", "            ", "expansion", "=", "1", "\n", "", "elif", "issubclass", "(", "block", ",", "Bottleneck", ")", ":", "\n", "            ", "expansion", "=", "4", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "f'expansion is not specified for {block.__name__}'", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'expansion must be an integer or None'", ")", "\n", "\n", "", "return", "expansion", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.random_rotation.__init__": [[42, 46], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "degrees", "=", "[", "-", "180", ",", "180", "]", "\n", "self", ".", "center_h_range", "=", "[", "-", "10", ",", "10", "]", "\n", "self", ".", "center_w_range", "=", "[", "-", "10", ",", "10", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.random_rotation.__call__": [[47, 68], ["random.randint", "cv2.getRotationMatrix2D", "data_online_official.random_warpAffine", "data_online_official.random_warpAffine", "random.randint", "cv2.getRotationMatrix2D", "data_online_official.random_warpAffine", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine"], ["", "def", "__call__", "(", "self", ",", "alpha", ",", "fg", ",", "bg", ")", ":", "\n", "        ", "h", "=", "fg", ".", "shape", "[", "0", "]", "\n", "w", "=", "fg", ".", "shape", "[", "1", "]", "\n", "\n", "# alpha and fg", "\n", "centerh", "=", "h", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_h_range", "[", "0", "]", ",", "self", ".", "center_h_range", "[", "1", "]", ")", "\n", "centerw", "=", "w", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_w_range", "[", "0", "]", ",", "self", ".", "center_w_range", "[", "1", "]", ")", "\n", "fg_degree", "=", "random", ".", "randint", "(", "self", ".", "degrees", "[", "0", "]", ",", "self", ".", "degrees", "[", "1", "]", ")", "\n", "rot_mat", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "centerw", ",", "centerh", ")", ",", "fg_degree", ",", "1", ")", "\n", "\n", "alpha", "=", "random_warpAffine", "(", "alpha", ",", "rot_mat", ",", "(", "w", ",", "h", ")", ")", "\n", "fg", "=", "random_warpAffine", "(", "fg", ",", "rot_mat", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "# bg", "\n", "bg_centerh", "=", "h", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_h_range", "[", "0", "]", ",", "self", ".", "center_h_range", "[", "1", "]", ")", "\n", "bg_centerw", "=", "w", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_w_range", "[", "0", "]", ",", "self", ".", "center_w_range", "[", "1", "]", ")", "\n", "bg_degree", "=", "random", ".", "randint", "(", "self", ".", "degrees", "[", "0", "]", ",", "self", ".", "degrees", "[", "1", "]", ")", "\n", "bg_rot_mat", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "bg_centerw", ",", "bg_centerh", ")", ",", "bg_degree", ",", "1", ")", "\n", "bg", "=", "random_warpAffine", "(", "bg", ",", "bg_rot_mat", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.MatDataset.__init__": [[138, 168], ["logging.getLogger", "len", "data_online_official.MatDataset.logger.info", "data_online_official.random_rotation", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len", "len", "os.path.exists", "os.path.exists", "os.path.exists"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"DeepImageMatting\"", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "train_size_h", "=", "config", ".", "train_size_h", "\n", "self", ".", "train_size_w", "=", "config", ".", "train_size_w", "\n", "self", ".", "crop_size_h", "=", "config", ".", "crop_size_h", "\n", "self", ".", "crop_size_w", "=", "config", ".", "crop_size_w", "\n", "assert", "(", "len", "(", "self", ".", "crop_size_h", ")", "==", "len", "(", "self", ".", "crop_size_w", ")", ")", "\n", "\n", "self", ".", "total_fg_list", "=", "config", ".", "total_fg_list", "\n", "self", ".", "total_alpha_list", "=", "config", ".", "total_alpha_list", "\n", "self", ".", "total_bg_list", "=", "config", ".", "total_bg_list", "\n", "\n", "self", ".", "cnt", "=", "len", "(", "self", ".", "total_fg_list", ")", "\n", "assert", "(", "self", ".", "cnt", ">", "0", ")", "\n", "\n", "for", "name", "in", "self", ".", "total_fg_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "", "for", "name", "in", "self", ".", "total_alpha_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "", "for", "name", "in", "self", ".", "total_bg_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Matting Dataset foreground number: {}\"", ".", "format", "(", "self", ".", "cnt", ")", ")", "\n", "\n", "self", ".", "random_rotation", "=", "random_rotation", "(", ")", "\n", "self", ".", "ColorJitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.2", ",", "contrast", "=", "0.2", ",", "saturation", "=", "0.2", ")", "\n", "self", ".", "ToTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "config", ".", "mean", ",", "std", "=", "config", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.MatDataset.__len__": [[169, 171], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "total_bg_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.MatDataset.__getitem__": [[172, 305], ["random.randint", "cv2.imread", "img_info.append", "data_online_official.random_resize", "random.randint", "max", "data_online_official.random_crop", "data_online_official.random_flip", "data_online_official.original_trimap", "PIL.Image.fromarray", "data_online_official.MatDataset.ColorJitter", "data_online_official.MatDataset.ToTensor", "PIL.Image.fromarray", "data_online_official.MatDataset.ColorJitter", "data_online_official.MatDataset.ToTensor", "torch.from_numpy", "torch.from_numpy", "data_online_official.MatDataset.normalize", "data_online_official.MatDataset.normalize", "cv2.imread", "cv2.imread", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "random.random", "data_online_official.MatDataset.random_rotation", "float", "float", "int", "int", "data_online_official.random_resize", "data_online_official.random_resize", "data_online_official.random_resize", "data_online_official.random_resize", "data_online_official.random_resize", "data_online_official.random_resize", "random.random", "random.random", "random.random", "random.random", "random.randint", "random.randint", "cv2.GaussianBlur", "cv2.GaussianBlur", "random.random", "cv2.resize", "cv2.resize", "cv2.cvtColor", "cv2.cvtColor", "len", "len", "random.random", "data_online_official.gamma_aug", "data_online_official.gamma_aug", "random.random", "cv2.resize", "cv2.resize", "random.random", "cv2.resize", "cv2.resize", "gamma_aug.astype", "torch.from_numpy.astype", "random.random", "numpy.random.permutation", "random.random"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.random_crop", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_flip", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.original_trimap", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.gamma_aug", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.gamma_aug"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_bg_path", "=", "self", ".", "total_bg_list", "[", "index", "]", "\n", "fg_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "total_fg_list", ")", "-", "1", ")", "\n", "image_alpha_path", "=", "self", ".", "total_alpha_list", "[", "fg_index", "]", "\n", "image_fg_path", "=", "self", ".", "total_fg_list", "[", "fg_index", "]", "\n", "\n", "img_info", "=", "[", "image_fg_path", ",", "image_alpha_path", ",", "image_bg_path", "]", "\n", "\n", "# read fg, alpha", "\n", "alpha", "=", "cv2", ".", "imread", "(", "image_alpha_path", ",", "0", ")", "\n", "fg", "=", "cv2", ".", "imread", "(", "image_fg_path", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "bg", "=", "cv2", ".", "imread", "(", "image_bg_path", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "bh", ",", "bw", ",", "bc", ",", "=", "fg", ".", "shape", "\n", "if", "self", ".", "train_size_h", ">", "bh", ":", "\n", "            ", "tmp", "=", "self", ".", "train_size_h", "-", "bh", "\n", "fg", "=", "cv2", ".", "copyMakeBorder", "(", "fg", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "alpha", "=", "cv2", ".", "copyMakeBorder", "(", "alpha", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "bh", ",", "bw", ",", "bc", ",", "=", "fg", ".", "shape", "\n", "", "if", "self", ".", "train_size_w", ">", "bw", ":", "\n", "            ", "tmp", "=", "self", ".", "train_size_w", "-", "bw", "\n", "fg", "=", "cv2", ".", "copyMakeBorder", "(", "fg", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "alpha", "=", "cv2", ".", "copyMakeBorder", "(", "alpha", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "bh", ",", "bw", ",", "bc", ",", "=", "fg", ".", "shape", "\n", "\n", "", "img_info", ".", "append", "(", "fg", ".", "shape", ")", "\n", "\n", "bg", "=", "random_resize", "(", "bg", ",", "(", "bw", ",", "bh", ")", ")", "\n", "\n", "#### random rotation", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "alpha", ",", "fg", ",", "bg", "=", "self", ".", "random_rotation", "(", "alpha", ",", "fg", ",", "bg", ")", "\n", "\n", "", "rand_ind", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "crop_size_h", ")", "-", "1", ")", "\n", "cur_crop_h", "=", "self", ".", "crop_size_h", "[", "rand_ind", "]", "\n", "cur_crop_w", "=", "self", ".", "crop_size_w", "[", "rand_ind", "]", "\n", "\n", "wratio", "=", "float", "(", "cur_crop_w", ")", "/", "bw", "\n", "hratio", "=", "float", "(", "cur_crop_h", ")", "/", "bh", "\n", "ratio", "=", "max", "(", "wratio", ",", "hratio", ")", "\n", "if", "ratio", ">", "1", ":", "\n", "            ", "nbw", "=", "int", "(", "bw", "*", "ratio", "+", "1.0", ")", "\n", "nbh", "=", "int", "(", "bh", "*", "ratio", "+", "1.0", ")", "\n", "alpha", "=", "random_resize", "(", "alpha", ",", "(", "nbw", ",", "nbh", ")", ")", "\n", "fg", "=", "random_resize", "(", "fg", ",", "(", "nbw", ",", "nbh", ")", ")", "\n", "bg", "=", "random_resize", "(", "bg", ",", "(", "nbw", ",", "nbh", ")", ")", "\n", "\n", "", "alpha", ",", "fg", ",", "bg", "=", "random_crop", "(", "alpha", ",", "fg", ",", "bg", ",", "cur_crop_h", ",", "cur_crop_w", ")", "\n", "alpha", ",", "fg", ",", "bg", "=", "random_flip", "(", "alpha", ",", "fg", ",", "bg", ")", "\n", "\n", "if", "self", ".", "train_size_h", "!=", "fg", ".", "shape", "[", "0", "]", "or", "self", ".", "train_size_w", "!=", "fg", ".", "shape", "[", "1", "]", ":", "\n", "            ", "alpha", "=", "random_resize", "(", "alpha", ",", "(", "self", ".", "train_size_w", ",", "self", ".", "train_size_h", ")", ")", "\n", "fg", "=", "random_resize", "(", "fg", ",", "(", "self", ".", "train_size_w", ",", "self", ".", "train_size_h", ")", ")", "\n", "bg", "=", "random_resize", "(", "bg", ",", "(", "self", ".", "train_size_w", ",", "self", ".", "train_size_h", ")", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "# gamma is from 0.5 to 2", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "alpha", "=", "gamma_aug", "(", "alpha", ",", "random", ".", "random", "(", ")", "/", "2", "+", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "alpha", "=", "gamma_aug", "(", "alpha", ",", "random", ".", "random", "(", ")", "+", "1.", ")", "\n", "\n", "#if random.random() < 0.3:", "\n", "#    tmp = [random.random() * 255 for i in range(3)]", "\n", "#    for i in range(3):", "\n", "#        weight = random.random()", "\n", "#        fg[:,:,i] = fg[:,:,i] * weight + tmp[i] * (1-weight)", "\n", "\n", "", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "fg", "=", "255", "-", "fg", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "fg", "=", "fg", "[", ":", ",", ":", ",", "np", ".", "random", ".", "permutation", "(", "3", ")", "]", "\n", "\n", "", "trimap_dict", "=", "original_trimap", "(", "alpha", ")", "\n", "trimap", "=", "trimap_dict", "[", "'trimap'", "]", "\n", "## debug", "\n", "#cv2.imwrite(\"result/debug/debug_{}_fg.png\".format(index),fg)", "\n", "#cv2.imwrite(\"result/debug/debug_{}_bg.png\".format(index),bg)", "\n", "#cv2.imwrite(\"result/debug/debug_{}_trimap.png\".format(index),trimap)", "\n", "\n", "#########", "\n", "\n", "###################################", "\n", "# blur", "\n", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "t1", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "t2", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "fg", "=", "cv2", ".", "GaussianBlur", "(", "fg", ",", "(", "2", "*", "t1", "+", "1", ",", "2", "*", "t2", "+", "1", ")", ",", "0", ")", "\n", "bg", "=", "cv2", ".", "GaussianBlur", "(", "bg", ",", "(", "2", "*", "t1", "+", "1", ",", "2", "*", "t2", "+", "1", ")", ",", "0", ")", "\n", "#if random.random() < 0.3:", "\n", "#    t1 = random.randint(1,3)", "\n", "#    t2 = random.randint(1,3)", "\n", "#    if random.random() < 0.5:", "\n", "#        alpha = cv2.blur(alpha, (2*t1 + 1, 2*t2+1))", "\n", "#    else:", "\n", "#        alpha = cv2.GaussianBlur(alpha, (2*t1 + 1, 2*t2+1), 0)", "\n", "# sharpen", "\n", "#if random.random() < 0.0:", "\n", "#    kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])", "\n", "#    fg = cv2.filter2D(fg, -1, kernel)", "\n", "#    bg = cv2.filter2D(bg, -1, kernel)", "\n", "##################################", "\n", "\n", "# resize", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "h", ",", "w", "=", "fg", ".", "shape", "[", "0", "]", ",", "fg", ".", "shape", "[", "1", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "fg", "=", "cv2", ".", "resize", "(", "fg", ",", "(", "960", ",", "960", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "", "else", ":", "\n", "                ", "fg", "=", "cv2", ".", "resize", "(", "fg", ",", "(", "320", ",", "320", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "", "fg", "=", "cv2", ".", "resize", "(", "fg", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "bg", "=", "cv2", ".", "resize", "(", "bg", ",", "(", "960", ",", "960", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "", "else", ":", "\n", "                ", "bg", "=", "cv2", ".", "resize", "(", "bg", ",", "(", "320", ",", "320", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "", "bg", "=", "cv2", ".", "resize", "(", "bg", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "", "fg_rgb", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "fg", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "fg_rgb", "=", "self", ".", "ColorJitter", "(", "fg_rgb", ")", "\n", "fg_norm", "=", "self", ".", "ToTensor", "(", "fg_rgb", ")", "\n", "\n", "bg_rgb", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "bg", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "bg_rgb", "=", "self", ".", "ColorJitter", "(", "bg_rgb", ")", "\n", "bg_norm", "=", "self", ".", "ToTensor", "(", "bg_rgb", ")", "\n", "\n", "alpha", "=", "torch", ".", "from_numpy", "(", "alpha", ".", "astype", "(", "np", ".", "float32", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "trimap", "=", "torch", ".", "from_numpy", "(", "trimap", ".", "astype", "(", "np", ".", "float32", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "\n", "fg_norm", "=", "self", ".", "normalize", "(", "fg_norm", ")", "\n", "bg_norm", "=", "self", ".", "normalize", "(", "bg_norm", ")", "\n", "\n", "\n", "return", "fg_norm", ",", "bg_norm", ",", "alpha", ",", "trimap", ",", "img_info", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.random_resize": [[16, 19], ["random.randint", "cv2.resize", "len"], "function", ["None"], ["def", "random_resize", "(", "input", ",", "size", ")", ":", "\n", "    ", "tmp", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "interpolation_list", ")", "-", "1", ")", "\n", "return", "cv2", ".", "resize", "(", "input", ",", "size", ",", "interpolation", "=", "interpolation_list", "[", "tmp", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.random_warpAffine": [[20, 23], ["random.randint", "cv2.warpAffine", "len"], "function", ["None"], ["", "def", "random_warpAffine", "(", "input", ",", "rot_mat", ",", "size", ")", ":", "\n", "    ", "tmp", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "interpolation_list", ")", "-", "1", ")", "\n", "return", "cv2", ".", "warpAffine", "(", "input", ",", "rot_mat", ",", "size", ",", "flags", "=", "interpolation_list", "[", "tmp", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.original_trimap": [[24, 40], ["numpy.equal().astype", "numpy.not_equal().astype", "cv2.distanceTransform", "numpy.logical_or", "trimap.astype", "numpy.logical_and", "numpy.logical_and", "numpy.equal", "numpy.not_equal", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["", "def", "original_trimap", "(", "alpha", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "\n", "fg", "=", "np", ".", "equal", "(", "alpha", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "fg_wide", "=", "np", ".", "not_equal", "(", "alpha", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "unknown", "=", "fg_wide", "-", "fg", "\n", "\n", "distanceTrans", "=", "cv2", ".", "distanceTransform", "(", "1", "-", "unknown", ",", "cv2", ".", "DIST_L2", ",", "0", ")", "\n", "unknown", "=", "np", ".", "logical_or", "(", "np", ".", "logical_and", "(", "distanceTrans", "<=", "np", ".", "random", ".", "randint", "(", "1", ",", "25", ")", ",", "fg", "<", "1", ")", ",", "np", ".", "logical_and", "(", "distanceTrans", "<=", "np", ".", "random", ".", "randint", "(", "1", ",", "25", ")", ",", "fg", ">", "0", ")", ")", "\n", "trimap", "=", "fg", "*", "255", "\n", "trimap", "[", "unknown", "]", "=", "128", "\n", "\n", "out", "[", "'trimap'", "]", "=", "trimap", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.gamma_aug": [[70, 75], ["random.random", "pow", "pow"], "function", ["None"], ["", "", "def", "gamma_aug", "(", "img", ",", "gamma", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "return", "(", "255.", "*", "pow", "(", "img", "/", "255.", ",", "gamma", ")", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "255.", "*", "(", "1", "-", "pow", "(", "1", "-", "img", "/", "255.", ",", "gamma", ")", ")", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.random_crop": [[76, 120], ["numpy.where", "int", "int", "int", "int", "len", "unknown.sum", "numpy.random.randint", "len", "unknown[].sum"], "function", ["None"], ["", "", "def", "random_crop", "(", "alpha", ",", "fg", ",", "bg", ",", "crop_h", ",", "crop_w", ")", ":", "\n", "    ", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "unknown", "=", "(", "alpha", ">", "0", ")", "&", "(", "alpha", "<", "255", ")", "\n", "target", "=", "np", ".", "where", "(", "alpha", ">", "0", ")", "\n", "delta_h", "=", "int", "(", "crop_h", "/", "2", ")", "\n", "delta_w", "=", "int", "(", "crop_w", "/", "2", ")", "\n", "center_h", "=", "int", "(", "h", "/", "2", ")", "\n", "center_w", "=", "int", "(", "w", "/", "2", ")", "\n", "if", "len", "(", "target", "[", "0", "]", ")", ">", "0", ":", "\n", "        ", "tmp_counter", "=", "0", "\n", "unknown_ratio", "=", "unknown", ".", "sum", "(", ")", "/", "(", "h", "*", "w", ")", "\n", "while", "True", ":", "\n", "            ", "tmp_counter", "+=", "1", "\n", "rand_ind", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "target", "[", "0", "]", ")", ")", "\n", "center_h", "=", "target", "[", "0", "]", "[", "rand_ind", "]", "\n", "if", "center_h", "<", "delta_h", ":", "\n", "                ", "center_h", "=", "delta_h", "\n", "", "if", "center_h", ">", "h", "-", "delta_h", ":", "\n", "                ", "center_h", "=", "h", "-", "delta_h", "\n", "", "center_w", "=", "target", "[", "1", "]", "[", "rand_ind", "]", "\n", "if", "center_w", "<", "delta_w", ":", "\n", "                ", "center_w", "=", "delta_w", "\n", "", "if", "center_w", ">", "w", "-", "delta_w", ":", "\n", "                ", "center_w", "=", "w", "-", "delta_w", "\n", "\n", "", "start_h", "=", "center_h", "-", "delta_h", "\n", "start_w", "=", "center_w", "-", "delta_w", "\n", "end_h", "=", "center_h", "+", "delta_h", "\n", "end_w", "=", "center_w", "+", "delta_w", "\n", "tmp", "=", "unknown", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", ".", "sum", "(", ")", "/", "(", "4", "*", "delta_h", "*", "delta_w", ")", "\n", "if", "tmp", ">=", "unknown_ratio", "*", "0.8", ":", "\n", "                ", "break", "\n", "", "if", "tmp_counter", ">=", "5", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "start_h", "=", "center_h", "-", "delta_h", "\n", "start_w", "=", "center_w", "-", "delta_w", "\n", "end_h", "=", "center_h", "+", "delta_h", "\n", "end_w", "=", "center_w", "+", "delta_w", "\n", "\n", "alpha", "=", "alpha", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "fg", "=", "fg", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "bg", "=", "bg", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.random_flip": [[121, 128], ["random.random", "cv2.flip", "cv2.flip", "random.random", "cv2.flip"], "function", ["None"], ["", "def", "random_flip", "(", "alpha", ",", "fg", ",", "bg", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "fg", "=", "cv2", ".", "flip", "(", "fg", ",", "1", ")", "\n", "alpha", "=", "cv2", ".", "flip", "(", "alpha", ",", "1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "bg", "=", "cv2", ".", "flip", "(", "bg", ",", "1", ")", "\n", "", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official.get_files": [[130, 136], ["os.listdir", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "res.append", "os.path.join"], "function", ["None"], ["", "def", "get_files", "(", "mydir", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "mydir", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "res", ".", "append", "(", "os", ".", "path", ".", "join", "(", "mydir", ",", "f", ")", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.random_rotation.__init__": [[42, 46], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "degrees", "=", "[", "-", "180", ",", "180", "]", "\n", "self", ".", "center_h_range", "=", "[", "-", "10", ",", "10", "]", "\n", "self", ".", "center_w_range", "=", "[", "-", "10", ",", "10", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.random_rotation.__call__": [[47, 68], ["random.randint", "cv2.getRotationMatrix2D", "data_online_official_backup.random_warpAffine", "data_online_official_backup.random_warpAffine", "random.randint", "cv2.getRotationMatrix2D", "data_online_official_backup.random_warpAffine", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine"], ["", "def", "__call__", "(", "self", ",", "alpha", ",", "fg", ",", "bg", ")", ":", "\n", "        ", "h", "=", "fg", ".", "shape", "[", "0", "]", "\n", "w", "=", "fg", ".", "shape", "[", "1", "]", "\n", "\n", "# alpha and fg", "\n", "centerh", "=", "h", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_h_range", "[", "0", "]", ",", "self", ".", "center_h_range", "[", "1", "]", ")", "\n", "centerw", "=", "w", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_w_range", "[", "0", "]", ",", "self", ".", "center_w_range", "[", "1", "]", ")", "\n", "fg_degree", "=", "random", ".", "randint", "(", "self", ".", "degrees", "[", "0", "]", ",", "self", ".", "degrees", "[", "1", "]", ")", "\n", "rot_mat", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "centerw", ",", "centerh", ")", ",", "fg_degree", ",", "1", ")", "\n", "\n", "alpha", "=", "random_warpAffine", "(", "alpha", ",", "rot_mat", ",", "(", "w", ",", "h", ")", ")", "\n", "fg", "=", "random_warpAffine", "(", "fg", ",", "rot_mat", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "# bg", "\n", "bg_centerh", "=", "h", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_h_range", "[", "0", "]", ",", "self", ".", "center_h_range", "[", "1", "]", ")", "\n", "bg_centerw", "=", "w", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_w_range", "[", "0", "]", ",", "self", ".", "center_w_range", "[", "1", "]", ")", "\n", "bg_degree", "=", "random", ".", "randint", "(", "self", ".", "degrees", "[", "0", "]", ",", "self", ".", "degrees", "[", "1", "]", ")", "\n", "bg_rot_mat", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "bg_centerw", ",", "bg_centerh", ")", ",", "bg_degree", ",", "1", ")", "\n", "bg", "=", "random_warpAffine", "(", "bg", ",", "bg_rot_mat", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.MatDataset.__init__": [[138, 168], ["logging.getLogger", "len", "data_online_official_backup.MatDataset.logger.info", "data_online_official_backup.random_rotation", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len", "len", "os.path.exists", "os.path.exists", "os.path.exists"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"DeepImageMatting\"", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "train_size_h", "=", "config", ".", "train_size_h", "\n", "self", ".", "train_size_w", "=", "config", ".", "train_size_w", "\n", "self", ".", "crop_size_h", "=", "config", ".", "crop_size_h", "\n", "self", ".", "crop_size_w", "=", "config", ".", "crop_size_w", "\n", "assert", "(", "len", "(", "self", ".", "crop_size_h", ")", "==", "len", "(", "self", ".", "crop_size_w", ")", ")", "\n", "\n", "self", ".", "total_fg_list", "=", "config", ".", "total_fg_list", "\n", "self", ".", "total_alpha_list", "=", "config", ".", "total_alpha_list", "\n", "self", ".", "total_bg_list", "=", "config", ".", "total_bg_list", "\n", "\n", "self", ".", "cnt", "=", "len", "(", "self", ".", "total_fg_list", ")", "\n", "assert", "(", "self", ".", "cnt", ">", "0", ")", "\n", "\n", "for", "name", "in", "self", ".", "total_fg_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "", "for", "name", "in", "self", ".", "total_alpha_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "", "for", "name", "in", "self", ".", "total_bg_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Matting Dataset foreground number: {}\"", ".", "format", "(", "self", ".", "cnt", ")", ")", "\n", "\n", "self", ".", "random_rotation", "=", "random_rotation", "(", ")", "\n", "self", ".", "ColorJitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.2", ",", "contrast", "=", "0.2", ",", "saturation", "=", "0.2", ")", "\n", "self", ".", "ToTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "config", ".", "mean", ",", "std", "=", "config", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.MatDataset.__len__": [[169, 171], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "total_bg_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.MatDataset.__getitem__": [[172, 296], ["random.randint", "cv2.imread", "img_info.append", "data_online_official_backup.random_resize", "random.randint", "max", "data_online_official_backup.random_crop", "data_online_official_backup.random_flip", "data_online_official_backup.original_trimap", "PIL.Image.fromarray", "data_online_official_backup.MatDataset.ColorJitter", "data_online_official_backup.MatDataset.ToTensor", "PIL.Image.fromarray", "data_online_official_backup.MatDataset.ColorJitter", "data_online_official_backup.MatDataset.ToTensor", "torch.from_numpy", "torch.from_numpy", "data_online_official_backup.MatDataset.normalize", "data_online_official_backup.MatDataset.normalize", "cv2.imread", "cv2.imread", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "random.random", "data_online_official_backup.MatDataset.random_rotation", "float", "float", "int", "int", "data_online_official_backup.random_resize", "data_online_official_backup.random_resize", "data_online_official_backup.random_resize", "data_online_official_backup.random_resize", "data_online_official_backup.random_resize", "data_online_official_backup.random_resize", "random.random", "random.random", "random.random", "random.random", "random.randint", "random.randint", "cv2.blur", "cv2.blur", "random.random", "random.randint", "random.randint", "cv2.blur", "random.random", "numpy.array", "cv2.filter2D", "cv2.filter2D", "random.random", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.cvtColor", "cv2.cvtColor", "len", "len", "random.random", "data_online_official_backup.gamma_aug", "data_online_official_backup.gamma_aug", "gamma_aug.astype", "torch.from_numpy.astype", "random.random", "numpy.random.permutation", "random.random"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.random_crop", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_flip", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.original_trimap", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.gamma_aug", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.gamma_aug"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_bg_path", "=", "self", ".", "total_bg_list", "[", "index", "]", "\n", "fg_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "total_fg_list", ")", "-", "1", ")", "\n", "image_alpha_path", "=", "self", ".", "total_alpha_list", "[", "fg_index", "]", "\n", "image_fg_path", "=", "self", ".", "total_fg_list", "[", "fg_index", "]", "\n", "\n", "img_info", "=", "[", "image_fg_path", ",", "image_alpha_path", ",", "image_bg_path", "]", "\n", "\n", "# read fg, alpha", "\n", "alpha", "=", "cv2", ".", "imread", "(", "image_alpha_path", ",", "0", ")", "\n", "fg", "=", "cv2", ".", "imread", "(", "image_fg_path", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "bg", "=", "cv2", ".", "imread", "(", "image_bg_path", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "bh", ",", "bw", ",", "bc", ",", "=", "fg", ".", "shape", "\n", "if", "self", ".", "train_size_h", ">", "bh", ":", "\n", "            ", "tmp", "=", "self", ".", "train_size_h", "-", "bh", "\n", "fg", "=", "cv2", ".", "copyMakeBorder", "(", "fg", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "alpha", "=", "cv2", ".", "copyMakeBorder", "(", "alpha", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "bh", ",", "bw", ",", "bc", ",", "=", "fg", ".", "shape", "\n", "", "if", "self", ".", "train_size_w", ">", "bw", ":", "\n", "            ", "tmp", "=", "self", ".", "train_size_w", "-", "bw", "\n", "fg", "=", "cv2", ".", "copyMakeBorder", "(", "fg", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "alpha", "=", "cv2", ".", "copyMakeBorder", "(", "alpha", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "bh", ",", "bw", ",", "bc", ",", "=", "fg", ".", "shape", "\n", "\n", "", "img_info", ".", "append", "(", "fg", ".", "shape", ")", "\n", "\n", "bg", "=", "random_resize", "(", "bg", ",", "(", "bw", ",", "bh", ")", ")", "\n", "\n", "#### random rotation", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "alpha", ",", "fg", ",", "bg", "=", "self", ".", "random_rotation", "(", "alpha", ",", "fg", ",", "bg", ")", "\n", "\n", "", "rand_ind", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "crop_size_h", ")", "-", "1", ")", "\n", "cur_crop_h", "=", "self", ".", "crop_size_h", "[", "rand_ind", "]", "\n", "cur_crop_w", "=", "self", ".", "crop_size_w", "[", "rand_ind", "]", "\n", "\n", "wratio", "=", "float", "(", "cur_crop_w", ")", "/", "bw", "\n", "hratio", "=", "float", "(", "cur_crop_h", ")", "/", "bh", "\n", "ratio", "=", "max", "(", "wratio", ",", "hratio", ")", "\n", "if", "ratio", ">", "1", ":", "\n", "            ", "nbw", "=", "int", "(", "bw", "*", "ratio", "+", "1.0", ")", "\n", "nbh", "=", "int", "(", "bh", "*", "ratio", "+", "1.0", ")", "\n", "alpha", "=", "random_resize", "(", "alpha", ",", "(", "nbw", ",", "nbh", ")", ")", "\n", "fg", "=", "random_resize", "(", "fg", ",", "(", "nbw", ",", "nbh", ")", ")", "\n", "bg", "=", "random_resize", "(", "bg", ",", "(", "nbw", ",", "nbh", ")", ")", "\n", "\n", "", "alpha", ",", "fg", ",", "bg", "=", "random_crop", "(", "alpha", ",", "fg", ",", "bg", ",", "cur_crop_h", ",", "cur_crop_w", ")", "\n", "alpha", ",", "fg", ",", "bg", "=", "random_flip", "(", "alpha", ",", "fg", ",", "bg", ")", "\n", "\n", "if", "self", ".", "train_size_h", "!=", "fg", ".", "shape", "[", "0", "]", "or", "self", ".", "train_size_w", "!=", "fg", ".", "shape", "[", "1", "]", ":", "\n", "            ", "alpha", "=", "random_resize", "(", "alpha", ",", "(", "self", ".", "train_size_w", ",", "self", ".", "train_size_h", ")", ")", "\n", "fg", "=", "random_resize", "(", "fg", ",", "(", "self", ".", "train_size_w", ",", "self", ".", "train_size_h", ")", ")", "\n", "bg", "=", "random_resize", "(", "bg", ",", "(", "self", ".", "train_size_w", ",", "self", ".", "train_size_h", ")", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "# gamma is from 0.5 to 2", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "alpha", "=", "gamma_aug", "(", "alpha", ",", "random", ".", "random", "(", ")", "/", "2", "+", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "alpha", "=", "gamma_aug", "(", "alpha", ",", "random", ".", "random", "(", ")", "+", "1.", ")", "\n", "\n", "#if random.random() < 0.2:", "\n", "#    tmp = [random.random() * 255 for i in range(3)]", "\n", "#    for i in range(3):", "\n", "#        weight = random.random()", "\n", "#        fg[:,:,i] = fg[:,:,i] * weight + tmp[i] * (1-weight)", "\n", "\n", "", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "fg", "=", "255", "-", "fg", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "fg", "=", "fg", "[", ":", ",", ":", ",", "np", ".", "random", ".", "permutation", "(", "3", ")", "]", "\n", "\n", "", "trimap_dict", "=", "original_trimap", "(", "alpha", ")", "\n", "trimap", "=", "trimap_dict", "[", "'trimap'", "]", "\n", "## debug", "\n", "#cv2.imwrite(\"result/debug/debug_{}_fg.png\".format(index),fg)", "\n", "#cv2.imwrite(\"result/debug/debug_{}_bg.png\".format(index),bg)", "\n", "#cv2.imwrite(\"result/debug/debug_{}_trimap.png\".format(index),trimap)", "\n", "\n", "#########", "\n", "\n", "###################################", "\n", "# blur", "\n", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "t1", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "t2", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "fg", "=", "cv2", ".", "blur", "(", "fg", ",", "(", "2", "*", "t1", "+", "1", ",", "2", "*", "t2", "+", "1", ")", ")", "\n", "bg", "=", "cv2", ".", "blur", "(", "bg", ",", "(", "2", "*", "t1", "+", "1", ",", "2", "*", "t2", "+", "1", ")", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "t1", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "t2", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "alpha", "=", "cv2", ".", "blur", "(", "alpha", ",", "(", "2", "*", "t1", "+", "1", ",", "2", "*", "t2", "+", "1", ")", ")", "\n", "# sharpen", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "kernel", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "-", "1", ",", "5", ",", "-", "1", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", "]", ")", "\n", "fg", "=", "cv2", ".", "filter2D", "(", "fg", ",", "-", "1", ",", "kernel", ")", "\n", "bg", "=", "cv2", ".", "filter2D", "(", "bg", ",", "-", "1", ",", "kernel", ")", "\n", "##################################", "\n", "\n", "# resize", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "h", ",", "w", "=", "fg", ".", "shape", "[", "0", "]", ",", "fg", ".", "shape", "[", "1", "]", "\n", "fg", "=", "cv2", ".", "resize", "(", "fg", ",", "(", "960", ",", "960", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "fg", "=", "cv2", ".", "resize", "(", "fg", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "bg", "=", "cv2", ".", "resize", "(", "bg", ",", "(", "960", ",", "960", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "bg", "=", "cv2", ".", "resize", "(", "bg", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "", "fg_rgb", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "fg", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "fg_rgb", "=", "self", ".", "ColorJitter", "(", "fg_rgb", ")", "\n", "fg_norm", "=", "self", ".", "ToTensor", "(", "fg_rgb", ")", "\n", "\n", "bg_rgb", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "bg", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "bg_rgb", "=", "self", ".", "ColorJitter", "(", "bg_rgb", ")", "\n", "bg_norm", "=", "self", ".", "ToTensor", "(", "bg_rgb", ")", "\n", "\n", "alpha", "=", "torch", ".", "from_numpy", "(", "alpha", ".", "astype", "(", "np", ".", "float32", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "trimap", "=", "torch", ".", "from_numpy", "(", "trimap", ".", "astype", "(", "np", ".", "float32", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "\n", "fg_norm", "=", "self", ".", "normalize", "(", "fg_norm", ")", "\n", "bg_norm", "=", "self", ".", "normalize", "(", "bg_norm", ")", "\n", "\n", "\n", "return", "fg_norm", ",", "bg_norm", ",", "alpha", ",", "trimap", ",", "img_info", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.random_resize": [[16, 19], ["random.randint", "cv2.resize", "len"], "function", ["None"], ["def", "random_resize", "(", "input", ",", "size", ")", ":", "\n", "    ", "tmp", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "interpolation_list", ")", "-", "1", ")", "\n", "return", "cv2", ".", "resize", "(", "input", ",", "size", ",", "interpolation", "=", "interpolation_list", "[", "tmp", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.random_warpAffine": [[20, 23], ["random.randint", "cv2.warpAffine", "len"], "function", ["None"], ["", "def", "random_warpAffine", "(", "input", ",", "rot_mat", ",", "size", ")", ":", "\n", "    ", "tmp", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "interpolation_list", ")", "-", "1", ")", "\n", "return", "cv2", ".", "warpAffine", "(", "input", ",", "rot_mat", ",", "size", ",", "flags", "=", "interpolation_list", "[", "tmp", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.original_trimap": [[24, 40], ["numpy.equal().astype", "numpy.not_equal().astype", "cv2.distanceTransform", "numpy.logical_or", "trimap.astype", "numpy.logical_and", "numpy.logical_and", "numpy.equal", "numpy.not_equal", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["", "def", "original_trimap", "(", "alpha", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "\n", "fg", "=", "np", ".", "equal", "(", "alpha", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "fg_wide", "=", "np", ".", "not_equal", "(", "alpha", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "unknown", "=", "fg_wide", "-", "fg", "\n", "\n", "distanceTrans", "=", "cv2", ".", "distanceTransform", "(", "1", "-", "unknown", ",", "cv2", ".", "DIST_L2", ",", "0", ")", "\n", "unknown", "=", "np", ".", "logical_or", "(", "np", ".", "logical_and", "(", "distanceTrans", "<=", "np", ".", "random", ".", "randint", "(", "1", ",", "25", ")", ",", "fg", "<", "1", ")", ",", "np", ".", "logical_and", "(", "distanceTrans", "<=", "np", ".", "random", ".", "randint", "(", "1", ",", "25", ")", ",", "fg", ">", "0", ")", ")", "\n", "trimap", "=", "fg", "*", "255", "\n", "trimap", "[", "unknown", "]", "=", "128", "\n", "\n", "out", "[", "'trimap'", "]", "=", "trimap", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.gamma_aug": [[70, 75], ["random.random", "pow", "pow"], "function", ["None"], ["", "", "def", "gamma_aug", "(", "img", ",", "gamma", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "return", "(", "255.", "*", "pow", "(", "img", "/", "255.", ",", "gamma", ")", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "255.", "*", "(", "1", "-", "pow", "(", "1", "-", "img", "/", "255.", ",", "gamma", ")", ")", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.random_crop": [[76, 120], ["numpy.where", "int", "int", "int", "int", "len", "unknown.sum", "numpy.random.randint", "len", "unknown[].sum"], "function", ["None"], ["", "", "def", "random_crop", "(", "alpha", ",", "fg", ",", "bg", ",", "crop_h", ",", "crop_w", ")", ":", "\n", "    ", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "unknown", "=", "(", "alpha", ">", "0", ")", "&", "(", "alpha", "<", "255", ")", "\n", "target", "=", "np", ".", "where", "(", "alpha", ">", "0", ")", "\n", "delta_h", "=", "int", "(", "crop_h", "/", "2", ")", "\n", "delta_w", "=", "int", "(", "crop_w", "/", "2", ")", "\n", "center_h", "=", "int", "(", "h", "/", "2", ")", "\n", "center_w", "=", "int", "(", "w", "/", "2", ")", "\n", "if", "len", "(", "target", "[", "0", "]", ")", ">", "0", ":", "\n", "        ", "tmp_counter", "=", "0", "\n", "unknown_ratio", "=", "unknown", ".", "sum", "(", ")", "/", "(", "h", "*", "w", ")", "\n", "while", "True", ":", "\n", "            ", "tmp_counter", "+=", "1", "\n", "rand_ind", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "target", "[", "0", "]", ")", ")", "\n", "center_h", "=", "target", "[", "0", "]", "[", "rand_ind", "]", "\n", "if", "center_h", "<", "delta_h", ":", "\n", "                ", "center_h", "=", "delta_h", "\n", "", "if", "center_h", ">", "h", "-", "delta_h", ":", "\n", "                ", "center_h", "=", "h", "-", "delta_h", "\n", "", "center_w", "=", "target", "[", "1", "]", "[", "rand_ind", "]", "\n", "if", "center_w", "<", "delta_w", ":", "\n", "                ", "center_w", "=", "delta_w", "\n", "", "if", "center_w", ">", "w", "-", "delta_w", ":", "\n", "                ", "center_w", "=", "w", "-", "delta_w", "\n", "\n", "", "start_h", "=", "center_h", "-", "delta_h", "\n", "start_w", "=", "center_w", "-", "delta_w", "\n", "end_h", "=", "center_h", "+", "delta_h", "\n", "end_w", "=", "center_w", "+", "delta_w", "\n", "tmp", "=", "unknown", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", ".", "sum", "(", ")", "/", "(", "4", "*", "delta_h", "*", "delta_w", ")", "\n", "if", "tmp", ">=", "unknown_ratio", "*", "0.8", ":", "\n", "                ", "break", "\n", "", "if", "tmp_counter", ">=", "5", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "start_h", "=", "center_h", "-", "delta_h", "\n", "start_w", "=", "center_w", "-", "delta_w", "\n", "end_h", "=", "center_h", "+", "delta_h", "\n", "end_w", "=", "center_w", "+", "delta_w", "\n", "\n", "alpha", "=", "alpha", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "fg", "=", "fg", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "bg", "=", "bg", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.random_flip": [[121, 128], ["random.random", "cv2.flip", "cv2.flip", "random.random", "cv2.flip"], "function", ["None"], ["", "def", "random_flip", "(", "alpha", ",", "fg", ",", "bg", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "fg", "=", "cv2", ".", "flip", "(", "fg", ",", "1", ")", "\n", "alpha", "=", "cv2", ".", "flip", "(", "alpha", ",", "1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "bg", "=", "cv2", ".", "flip", "(", "bg", ",", "1", ")", "\n", "", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_online_official_backup.get_files": [[130, 136], ["os.listdir", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "res.append", "os.path.join"], "function", ["None"], ["", "def", "get_files", "(", "mydir", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "mydir", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "res", ".", "append", "(", "os", ".", "path", ".", "join", "(", "mydir", ",", "f", ")", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.random_rotation.__init__": [[42, 46], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "degrees", "=", "[", "-", "180", ",", "180", "]", "\n", "self", ".", "center_h_range", "=", "[", "-", "10", ",", "10", "]", "\n", "self", ".", "center_w_range", "=", "[", "-", "10", ",", "10", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.random_rotation.__call__": [[47, 68], ["random.randint", "cv2.getRotationMatrix2D", "data_baseline.random_warpAffine", "data_baseline.random_warpAffine", "random.randint", "cv2.getRotationMatrix2D", "data_baseline.random_warpAffine", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine"], ["", "def", "__call__", "(", "self", ",", "alpha", ",", "fg", ",", "bg", ")", ":", "\n", "        ", "h", "=", "fg", ".", "shape", "[", "0", "]", "\n", "w", "=", "fg", ".", "shape", "[", "1", "]", "\n", "\n", "# alpha and fg", "\n", "centerh", "=", "h", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_h_range", "[", "0", "]", ",", "self", ".", "center_h_range", "[", "1", "]", ")", "\n", "centerw", "=", "w", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_w_range", "[", "0", "]", ",", "self", ".", "center_w_range", "[", "1", "]", ")", "\n", "fg_degree", "=", "random", ".", "randint", "(", "self", ".", "degrees", "[", "0", "]", ",", "self", ".", "degrees", "[", "1", "]", ")", "\n", "rot_mat", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "centerw", ",", "centerh", ")", ",", "fg_degree", ",", "1", ")", "\n", "\n", "alpha", "=", "random_warpAffine", "(", "alpha", ",", "rot_mat", ",", "(", "w", ",", "h", ")", ")", "\n", "fg", "=", "random_warpAffine", "(", "fg", ",", "rot_mat", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "# bg", "\n", "bg_centerh", "=", "h", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_h_range", "[", "0", "]", ",", "self", ".", "center_h_range", "[", "1", "]", ")", "\n", "bg_centerw", "=", "w", "//", "2", "+", "random", ".", "randint", "(", "self", ".", "center_w_range", "[", "0", "]", ",", "self", ".", "center_w_range", "[", "1", "]", ")", "\n", "bg_degree", "=", "random", ".", "randint", "(", "self", ".", "degrees", "[", "0", "]", ",", "self", ".", "degrees", "[", "1", "]", ")", "\n", "bg_rot_mat", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "bg_centerw", ",", "bg_centerh", ")", ",", "bg_degree", ",", "1", ")", "\n", "bg", "=", "random_warpAffine", "(", "bg", ",", "bg_rot_mat", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.MatDataset.__init__": [[138, 168], ["logging.getLogger", "len", "data_baseline.MatDataset.logger.info", "data_baseline.random_rotation", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len", "len", "os.path.exists", "os.path.exists", "os.path.exists"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"DeepImageMatting\"", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "train_size_h", "=", "config", ".", "train_size_h", "\n", "self", ".", "train_size_w", "=", "config", ".", "train_size_w", "\n", "self", ".", "crop_size_h", "=", "config", ".", "crop_size_h", "\n", "self", ".", "crop_size_w", "=", "config", ".", "crop_size_w", "\n", "assert", "(", "len", "(", "self", ".", "crop_size_h", ")", "==", "len", "(", "self", ".", "crop_size_w", ")", ")", "\n", "\n", "self", ".", "total_fg_list", "=", "config", ".", "total_fg_list", "\n", "self", ".", "total_alpha_list", "=", "config", ".", "total_alpha_list", "\n", "self", ".", "total_bg_list", "=", "config", ".", "total_bg_list", "\n", "\n", "self", ".", "cnt", "=", "len", "(", "self", ".", "total_fg_list", ")", "\n", "assert", "(", "self", ".", "cnt", ">", "0", ")", "\n", "\n", "for", "name", "in", "self", ".", "total_fg_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "", "for", "name", "in", "self", ".", "total_alpha_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "", "for", "name", "in", "self", ".", "total_bg_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Matting Dataset foreground number: {}\"", ".", "format", "(", "self", ".", "cnt", ")", ")", "\n", "\n", "self", ".", "random_rotation", "=", "random_rotation", "(", ")", "\n", "self", ".", "ColorJitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.2", ",", "contrast", "=", "0.2", ",", "saturation", "=", "0.2", ")", "\n", "self", ".", "ToTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "config", ".", "mean", ",", "std", "=", "config", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.MatDataset.__len__": [[169, 171], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "total_bg_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.MatDataset.__getitem__": [[172, 287], ["random.randint", "cv2.imread", "img_info.append", "data_baseline.random_resize", "random.randint", "max", "data_baseline.random_crop", "data_baseline.random_flip", "data_baseline.original_trimap", "PIL.Image.fromarray", "data_baseline.MatDataset.ToTensor", "PIL.Image.fromarray", "data_baseline.MatDataset.ToTensor", "torch.from_numpy", "torch.from_numpy", "data_baseline.MatDataset.normalize", "data_baseline.MatDataset.normalize", "cv2.imread", "cv2.imread", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "random.random", "data_baseline.MatDataset.random_rotation", "float", "float", "int", "int", "data_baseline.random_resize", "data_baseline.random_resize", "data_baseline.random_resize", "data_baseline.random_resize", "data_baseline.random_resize", "data_baseline.random_resize", "random.random", "random.random", "range", "random.random", "random.random", "random.random", "random.randint", "random.randint", "cv2.blur", "cv2.blur", "random.random", "random.randint", "random.randint", "cv2.blur", "random.random", "numpy.array", "cv2.filter2D", "cv2.filter2D", "cv2.cvtColor", "cv2.cvtColor", "len", "len", "random.random", "data_baseline.gamma_aug", "data_baseline.gamma_aug", "random.random", "gamma_aug.astype", "torch.from_numpy.astype", "random.random", "range", "random.random", "numpy.random.permutation", "random.random"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.random_crop", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_flip", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.original_trimap", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.gamma_aug", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.gamma_aug"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_bg_path", "=", "self", ".", "total_bg_list", "[", "index", "]", "\n", "fg_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "total_fg_list", ")", "-", "1", ")", "\n", "image_alpha_path", "=", "self", ".", "total_alpha_list", "[", "fg_index", "]", "\n", "image_fg_path", "=", "self", ".", "total_fg_list", "[", "fg_index", "]", "\n", "\n", "img_info", "=", "[", "image_fg_path", ",", "image_alpha_path", ",", "image_bg_path", "]", "\n", "\n", "# read fg, alpha", "\n", "alpha", "=", "cv2", ".", "imread", "(", "image_alpha_path", ",", "0", ")", "\n", "fg", "=", "cv2", ".", "imread", "(", "image_fg_path", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "bg", "=", "cv2", ".", "imread", "(", "image_bg_path", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "bh", ",", "bw", ",", "bc", ",", "=", "fg", ".", "shape", "\n", "if", "self", ".", "train_size_h", ">", "bh", ":", "\n", "            ", "tmp", "=", "self", ".", "train_size_h", "-", "bh", "\n", "fg", "=", "cv2", ".", "copyMakeBorder", "(", "fg", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "alpha", "=", "cv2", ".", "copyMakeBorder", "(", "alpha", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "bh", ",", "bw", ",", "bc", ",", "=", "fg", ".", "shape", "\n", "", "if", "self", ".", "train_size_w", ">", "bw", ":", "\n", "            ", "tmp", "=", "self", ".", "train_size_w", "-", "bw", "\n", "fg", "=", "cv2", ".", "copyMakeBorder", "(", "fg", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "alpha", "=", "cv2", ".", "copyMakeBorder", "(", "alpha", ",", "tmp", ",", "tmp", ",", "tmp", ",", "tmp", ",", "cv2", ".", "BORDER_DEFAULT", ")", "\n", "bh", ",", "bw", ",", "bc", ",", "=", "fg", ".", "shape", "\n", "\n", "", "img_info", ".", "append", "(", "fg", ".", "shape", ")", "\n", "\n", "bg", "=", "random_resize", "(", "bg", ",", "(", "bw", ",", "bh", ")", ")", "\n", "\n", "#### random rotation", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "alpha", ",", "fg", ",", "bg", "=", "self", ".", "random_rotation", "(", "alpha", ",", "fg", ",", "bg", ")", "\n", "\n", "", "rand_ind", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "crop_size_h", ")", "-", "1", ")", "\n", "cur_crop_h", "=", "self", ".", "crop_size_h", "[", "rand_ind", "]", "\n", "cur_crop_w", "=", "self", ".", "crop_size_w", "[", "rand_ind", "]", "\n", "\n", "wratio", "=", "float", "(", "cur_crop_w", ")", "/", "bw", "\n", "hratio", "=", "float", "(", "cur_crop_h", ")", "/", "bh", "\n", "ratio", "=", "max", "(", "wratio", ",", "hratio", ")", "\n", "if", "ratio", ">", "1", ":", "\n", "            ", "nbw", "=", "int", "(", "bw", "*", "ratio", "+", "1.0", ")", "\n", "nbh", "=", "int", "(", "bh", "*", "ratio", "+", "1.0", ")", "\n", "alpha", "=", "random_resize", "(", "alpha", ",", "(", "nbw", ",", "nbh", ")", ")", "\n", "fg", "=", "random_resize", "(", "fg", ",", "(", "nbw", ",", "nbh", ")", ")", "\n", "bg", "=", "random_resize", "(", "bg", ",", "(", "nbw", ",", "nbh", ")", ")", "\n", "\n", "", "alpha", ",", "fg", ",", "bg", "=", "random_crop", "(", "alpha", ",", "fg", ",", "bg", ",", "cur_crop_h", ",", "cur_crop_w", ")", "\n", "alpha", ",", "fg", ",", "bg", "=", "random_flip", "(", "alpha", ",", "fg", ",", "bg", ")", "\n", "\n", "if", "self", ".", "train_size_h", "!=", "fg", ".", "shape", "[", "0", "]", "or", "self", ".", "train_size_w", "!=", "fg", ".", "shape", "[", "1", "]", ":", "\n", "            ", "alpha", "=", "random_resize", "(", "alpha", ",", "(", "self", ".", "train_size_w", ",", "self", ".", "train_size_h", ")", ")", "\n", "fg", "=", "random_resize", "(", "fg", ",", "(", "self", ".", "train_size_w", ",", "self", ".", "train_size_h", ")", ")", "\n", "bg", "=", "random_resize", "(", "bg", ",", "(", "self", ".", "train_size_w", ",", "self", ".", "train_size_h", ")", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "# gamma is from 0.5 to 2", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "alpha", "=", "gamma_aug", "(", "alpha", ",", "random", ".", "random", "(", ")", "/", "2", "+", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "alpha", "=", "gamma_aug", "(", "alpha", ",", "random", ".", "random", "(", ")", "+", "1.", ")", "\n", "\n", "", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "tmp", "=", "[", "random", ".", "random", "(", ")", "*", "255", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "weight", "=", "random", ".", "random", "(", ")", "\n", "fg", "[", ":", ",", ":", ",", "i", "]", "=", "fg", "[", ":", ",", ":", ",", "i", "]", "*", "weight", "+", "tmp", "[", "i", "]", "*", "(", "1", "-", "weight", ")", "\n", "\n", "", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "fg", "=", "255", "-", "fg", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "            ", "fg", "=", "fg", "[", ":", ",", ":", ",", "np", ".", "random", ".", "permutation", "(", "3", ")", "]", "\n", "\n", "", "trimap_dict", "=", "original_trimap", "(", "alpha", ")", "\n", "trimap", "=", "trimap_dict", "[", "'trimap'", "]", "\n", "## debug", "\n", "#cv2.imwrite(\"result/debug/debug_{}_fg.png\".format(index),fg)", "\n", "#cv2.imwrite(\"result/debug/debug_{}_bg.png\".format(index),bg)", "\n", "#cv2.imwrite(\"result/debug/debug_{}_trimap.png\".format(index),trimap)", "\n", "\n", "#########", "\n", "\n", "###################################", "\n", "# blur", "\n", "if", "random", ".", "random", "(", ")", "<", "0.0", ":", "\n", "            ", "t1", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "t2", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "fg", "=", "cv2", ".", "blur", "(", "fg", ",", "(", "2", "*", "t1", "+", "1", ",", "2", "*", "t2", "+", "1", ")", ")", "\n", "bg", "=", "cv2", ".", "blur", "(", "bg", ",", "(", "2", "*", "t1", "+", "1", ",", "2", "*", "t2", "+", "1", ")", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.0", ":", "\n", "            ", "t1", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "t2", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "alpha", "=", "cv2", ".", "blur", "(", "alpha", ",", "(", "2", "*", "t1", "+", "1", ",", "2", "*", "t2", "+", "1", ")", ")", "\n", "# sharpen", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.0", ":", "\n", "            ", "kernel", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "-", "1", ",", "5", ",", "-", "1", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", "]", ")", "\n", "fg", "=", "cv2", ".", "filter2D", "(", "fg", ",", "-", "1", ",", "kernel", ")", "\n", "bg", "=", "cv2", ".", "filter2D", "(", "bg", ",", "-", "1", ",", "kernel", ")", "\n", "##################################", "\n", "\n", "", "fg_rgb", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "fg", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "#fg_rgb = self.ColorJitter(fg_rgb)", "\n", "fg_norm", "=", "self", ".", "ToTensor", "(", "fg_rgb", ")", "\n", "\n", "bg_rgb", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "bg", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "#bg_rgb = self.ColorJitter(bg_rgb)", "\n", "bg_norm", "=", "self", ".", "ToTensor", "(", "bg_rgb", ")", "\n", "\n", "alpha", "=", "torch", ".", "from_numpy", "(", "alpha", ".", "astype", "(", "np", ".", "float32", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "trimap", "=", "torch", ".", "from_numpy", "(", "trimap", ".", "astype", "(", "np", ".", "float32", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "\n", "fg_norm", "=", "self", ".", "normalize", "(", "fg_norm", ")", "\n", "bg_norm", "=", "self", ".", "normalize", "(", "bg_norm", ")", "\n", "\n", "return", "fg_norm", ",", "bg_norm", ",", "alpha", ",", "trimap", ",", "img_info", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.random_resize": [[16, 19], ["random.randint", "cv2.resize", "len"], "function", ["None"], ["def", "random_resize", "(", "input", ",", "size", ")", ":", "\n", "    ", "tmp", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "interpolation_list", ")", "-", "1", ")", "\n", "return", "cv2", ".", "resize", "(", "input", ",", "size", ",", "interpolation", "=", "interpolation_list", "[", "tmp", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.random_warpAffine": [[20, 23], ["random.randint", "cv2.warpAffine", "len"], "function", ["None"], ["", "def", "random_warpAffine", "(", "input", ",", "rot_mat", ",", "size", ")", ":", "\n", "    ", "tmp", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "interpolation_list", ")", "-", "1", ")", "\n", "return", "cv2", ".", "warpAffine", "(", "input", ",", "rot_mat", ",", "size", ",", "flags", "=", "interpolation_list", "[", "tmp", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.original_trimap": [[24, 40], ["numpy.equal().astype", "numpy.not_equal().astype", "cv2.distanceTransform", "numpy.logical_or", "trimap.astype", "numpy.logical_and", "numpy.logical_and", "numpy.equal", "numpy.not_equal", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["", "def", "original_trimap", "(", "alpha", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "\n", "fg", "=", "np", ".", "equal", "(", "alpha", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "fg_wide", "=", "np", ".", "not_equal", "(", "alpha", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "unknown", "=", "fg_wide", "-", "fg", "\n", "\n", "distanceTrans", "=", "cv2", ".", "distanceTransform", "(", "1", "-", "unknown", ",", "cv2", ".", "DIST_L2", ",", "0", ")", "\n", "unknown", "=", "np", ".", "logical_or", "(", "np", ".", "logical_and", "(", "distanceTrans", "<=", "np", ".", "random", ".", "randint", "(", "1", ",", "25", ")", ",", "fg", "<", "1", ")", ",", "np", ".", "logical_and", "(", "distanceTrans", "<=", "np", ".", "random", ".", "randint", "(", "1", ",", "25", ")", ",", "fg", ">", "0", ")", ")", "\n", "trimap", "=", "fg", "*", "255", "\n", "trimap", "[", "unknown", "]", "=", "128", "\n", "\n", "out", "[", "'trimap'", "]", "=", "trimap", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.gamma_aug": [[70, 75], ["random.random", "pow", "pow"], "function", ["None"], ["", "", "def", "gamma_aug", "(", "img", ",", "gamma", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "return", "(", "255.", "*", "pow", "(", "img", "/", "255.", ",", "gamma", ")", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "255.", "*", "(", "1", "-", "pow", "(", "1", "-", "img", "/", "255.", ",", "gamma", ")", ")", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.random_crop": [[76, 120], ["numpy.where", "int", "int", "int", "int", "len", "unknown.sum", "numpy.random.randint", "len", "unknown[].sum"], "function", ["None"], ["", "", "def", "random_crop", "(", "alpha", ",", "fg", ",", "bg", ",", "crop_h", ",", "crop_w", ")", ":", "\n", "    ", "h", ",", "w", "=", "alpha", ".", "shape", "\n", "unknown", "=", "(", "alpha", ">", "0", ")", "&", "(", "alpha", "<", "255", ")", "\n", "target", "=", "np", ".", "where", "(", "alpha", ">", "0", ")", "\n", "delta_h", "=", "int", "(", "crop_h", "/", "2", ")", "\n", "delta_w", "=", "int", "(", "crop_w", "/", "2", ")", "\n", "center_h", "=", "int", "(", "h", "/", "2", ")", "\n", "center_w", "=", "int", "(", "w", "/", "2", ")", "\n", "if", "len", "(", "target", "[", "0", "]", ")", ">", "0", ":", "\n", "        ", "tmp_counter", "=", "0", "\n", "unknown_ratio", "=", "unknown", ".", "sum", "(", ")", "/", "(", "h", "*", "w", ")", "\n", "while", "True", ":", "\n", "            ", "tmp_counter", "+=", "1", "\n", "rand_ind", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "target", "[", "0", "]", ")", ")", "\n", "center_h", "=", "target", "[", "0", "]", "[", "rand_ind", "]", "\n", "if", "center_h", "<", "delta_h", ":", "\n", "                ", "center_h", "=", "delta_h", "\n", "", "if", "center_h", ">", "h", "-", "delta_h", ":", "\n", "                ", "center_h", "=", "h", "-", "delta_h", "\n", "", "center_w", "=", "target", "[", "1", "]", "[", "rand_ind", "]", "\n", "if", "center_w", "<", "delta_w", ":", "\n", "                ", "center_w", "=", "delta_w", "\n", "", "if", "center_w", ">", "w", "-", "delta_w", ":", "\n", "                ", "center_w", "=", "w", "-", "delta_w", "\n", "\n", "", "start_h", "=", "center_h", "-", "delta_h", "\n", "start_w", "=", "center_w", "-", "delta_w", "\n", "end_h", "=", "center_h", "+", "delta_h", "\n", "end_w", "=", "center_w", "+", "delta_w", "\n", "tmp", "=", "unknown", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", ".", "sum", "(", ")", "/", "(", "4", "*", "delta_h", "*", "delta_w", ")", "\n", "if", "tmp", ">=", "unknown_ratio", "*", "0.8", ":", "\n", "                ", "break", "\n", "", "if", "tmp_counter", ">=", "5", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "start_h", "=", "center_h", "-", "delta_h", "\n", "start_w", "=", "center_w", "-", "delta_w", "\n", "end_h", "=", "center_h", "+", "delta_h", "\n", "end_w", "=", "center_w", "+", "delta_w", "\n", "\n", "alpha", "=", "alpha", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "fg", "=", "fg", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "bg", "=", "bg", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.random_flip": [[121, 128], ["random.random", "cv2.flip", "cv2.flip", "random.random", "cv2.flip"], "function", ["None"], ["", "def", "random_flip", "(", "alpha", ",", "fg", ",", "bg", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "fg", "=", "cv2", ".", "flip", "(", "fg", ",", "1", ")", "\n", "alpha", "=", "cv2", ".", "flip", "(", "alpha", ",", "1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "bg", "=", "cv2", ".", "flip", "(", "bg", ",", "1", ")", "\n", "", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_baseline.get_files": [[130, 136], ["os.listdir", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "res.append", "os.path.join"], "function", ["None"], ["", "def", "get_files", "(", "mydir", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "mydir", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "res", ".", "append", "(", "os", ".", "path", ".", "join", "(", "mydir", ",", "f", ")", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.MatDataset.__init__": [[37, 58], ["logging.getLogger", "len", "data_no_aug.MatDataset.logger.info", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"DeepImageMatting\"", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "cnt", "=", "len", "(", "config", ".", "fine_tuning_img_list", ")", "\n", "assert", "(", "self", ".", "cnt", ">", "0", ")", "\n", "\n", "for", "name", "in", "config", ".", "fine_tuning_img_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "", "for", "name", "in", "config", ".", "fine_tuning_alpha_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "", "for", "name", "in", "config", ".", "fine_tuning_trimap1_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "", "for", "name", "in", "config", ".", "fine_tuning_trimap2_list", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "name", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Matting Dataset image number: {}\"", ".", "format", "(", "self", ".", "cnt", ")", ")", "\n", "\n", "self", ".", "ToTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "config", ".", "mean", ",", "std", "=", "config", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.MatDataset.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "config", ".", "fine_tuning_img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.MatDataset.__getitem__": [[62, 158], ["cv2.imread", "cv2.imread", "img_info.append", "numpy.pad", "numpy.pad", "numpy.pad", "PIL.Image.fromarray", "data_no_aug.MatDataset.ToTensor", "torch.from_numpy", "torch.from_numpy", "data_no_aug.MatDataset.normalize", "random.random", "cv2.imread", "random.random", "cv2.flip", "cv2.flip", "cv2.flip", "random.random", "cv2.flip", "cv2.flip", "cv2.flip", "random.random", "img.transpose.transpose.transpose", "alpha.transpose.transpose.transpose", "trimap.transpose.transpose.transpose", "random.random", "random.random", "cv2.cvtColor", "alpha.transpose.transpose.astype", "trimap.transpose.transpose.astype", "numpy.random.permutation"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_path", "=", "config", ".", "fine_tuning_img_list", "[", "index", "]", "\n", "alpha_path", "=", "config", ".", "fine_tuning_alpha_list", "[", "index", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "trimap_path", "=", "config", ".", "fine_tuning_trimap1_list", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "trimap_path", "=", "config", ".", "fine_tuning_trimap2_list", "[", "index", "]", "\n", "\n", "\n", "", "img_info", "=", "[", "image_path", ",", "alpha_path", ",", "trimap_path", "]", "\n", "\n", "# read fg, alpha", "\n", "img", "=", "cv2", ".", "imread", "(", "image_path", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "alpha", "=", "cv2", ".", "imread", "(", "alpha_path", ",", "0", ")", "\n", "trimap", "=", "cv2", ".", "imread", "(", "trimap_path", ",", "0", ")", "\n", "\n", "img_info", ".", "append", "(", "img", ".", "shape", ")", "\n", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "# pad to meet h % 64 ==0 and w % 64 == 0", "\n", "theDivider", "=", "64", "\n", "if", "h", "%", "theDivider", "==", "0", ":", "\n", "            ", "pad_h", "=", "0", "\n", "", "else", ":", "\n", "            ", "pad_h", "=", "theDivider", "-", "h", "%", "theDivider", "\n", "\n", "", "if", "w", "%", "theDivider", "==", "0", ":", "\n", "            ", "pad_w", "=", "0", "\n", "", "else", ":", "\n", "            ", "pad_w", "=", "theDivider", "-", "w", "%", "theDivider", "\n", "", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "alpha", "=", "np", ".", "pad", "(", "alpha", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "trimap", "=", "np", ".", "pad", "(", "trimap", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "alpha", "=", "cv2", ".", "flip", "(", "alpha", ",", "1", ")", "\n", "trimap", "=", "cv2", ".", "flip", "(", "trimap", ",", "1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "cv2", ".", "flip", "(", "img", ",", "0", ")", "\n", "alpha", "=", "cv2", ".", "flip", "(", "alpha", ",", "0", ")", "\n", "trimap", "=", "cv2", ".", "flip", "(", "trimap", ",", "0", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "alpha", "=", "alpha", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "trimap", "=", "trimap", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.2", ":", "\n", "            ", "img", "=", "255", "-", "img", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.2", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", "np", ".", "random", ".", "permutation", "(", "3", ")", "]", "\n", "\n", "## debug", "\n", "#cv2.imwrite(\"result/debug/debug_{}_img.png\".format(index), img)", "\n", "#cv2.imwrite(\"result/debug/debug_{}_alpha.png\".format(index), alpha)", "\n", "#cv2.imwrite(\"result/debug/debug_{}_trimap.png\".format(index), trimap)", "\n", "\n", "#########", "\n", "\n", "###################################", "\n", "# blur", "\n", "#if random.random() < 0.3:", "\n", "#    t1 = random.randint(0,2)", "\n", "#    t2 = random.randint(0,2)", "\n", "#    fg = cv2.blur(fg, (2*t1 + 1, 2*t2+1))", "\n", "#    alpha = cv2.blur(alpha, (2*t1 + 1, 2*t2+1))", "\n", "# sharpen", "\n", "#if random.random() < 0.3:", "\n", "#    kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])", "\n", "#    fg = cv2.filter2D(fg, -1, kernel)", "\n", "#    alpha = cv2.filter2D(alpha, -1, kernel)", "\n", "##################################", "\n", "\n", "", "img_rgb", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "img_norm", "=", "self", ".", "ToTensor", "(", "img_rgb", ")", "\n", "\n", "##################################", "\n", "# blur", "\n", "#if random.random() < 0.3:", "\n", "#    t1 = random.randint(0,2)", "\n", "#    t2 = random.randint(0,2)", "\n", "#    bg = cv2.blur(bg, (2*t1 + 1, 2* t2 + 1))", "\n", "# sharpen", "\n", "#if random.random() < 0.3:", "\n", "#    kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])", "\n", "#    bg = cv2.filter2D(bg, -1, kernel)", "\n", "##################################", "\n", "\n", "alpha", "=", "torch", ".", "from_numpy", "(", "alpha", ".", "astype", "(", "np", ".", "float32", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "trimap", "=", "torch", ".", "from_numpy", "(", "trimap", ".", "astype", "(", "np", ".", "float32", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "\n", "img_norm", "=", "self", ".", "normalize", "(", "img_norm", ")", "\n", "\n", "return", "img_norm", ",", "alpha", ",", "trimap", ",", "img_info", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_resize": [[15, 17], ["cv2.resize"], "function", ["None"], ["def", "random_resize", "(", "input", ",", "size", ")", ":", "\n", "    ", "return", "cv2", ".", "resize", "(", "input", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_warpAffine": [[18, 20], ["cv2.warpAffine"], "function", ["None"], ["", "def", "random_warpAffine", "(", "input", ",", "rot_mat", ",", "size", ")", ":", "\n", "    ", "return", "cv2", ".", "warpAffine", "(", "input", ",", "rot_mat", ",", "size", ",", "flags", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.random_flip": [[21, 28], ["random.random", "cv2.flip", "cv2.flip", "random.random", "cv2.flip"], "function", ["None"], ["", "def", "random_flip", "(", "alpha", ",", "fg", ",", "bg", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "fg", "=", "cv2", ".", "flip", "(", "fg", ",", "1", ")", "\n", "alpha", "=", "cv2", ".", "flip", "(", "alpha", ",", "1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "bg", "=", "cv2", ".", "flip", "(", "bg", ",", "1", ")", "\n", "", "return", "alpha", ",", "fg", ",", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.data_no_aug.get_files": [[29, 35], ["os.listdir", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "res.append", "os.path.join"], "function", ["None"], ["", "def", "get_files", "(", "mydir", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "mydir", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".jpg\"", ")", "or", "f", ".", "endswith", "(", "\".png\"", ")", "or", "f", ".", "endswith", "(", "\".jpeg\"", ")", "or", "f", ".", "endswith", "(", "\".JPG\"", ")", ":", "\n", "            ", "res", ".", "append", "(", "os", ".", "path", ".", "join", "(", "mydir", ",", "f", ")", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__init__": [[8, 22], ["math.ceil", "numpy.zeros", "range", "math.sqrt", "numpy.zeros.copy().transpose", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "math.sqrt", "numpy.zeros.copy", "numpy.zeros.astype", "np.zeros.copy().transpose.astype", "eval_measure.gaussGradient.gauss", "eval_measure.gaussGradient.dgauss", "math.log", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.gauss", "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.dgauss"], ["    ", "def", "__init__", "(", "self", ",", "sigma", ")", ":", "\n", "        ", "epsilon", "=", "1e-2", "\n", "halfsize", "=", "math", ".", "ceil", "(", "sigma", "*", "math", ".", "sqrt", "(", "-", "2", "*", "math", ".", "log", "(", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "*", "sigma", "*", "epsilon", ")", ")", ")", "\n", "size", "=", "2", "*", "halfsize", "+", "1", "\n", "self", ".", "halfsize", "=", "halfsize", "\n", "hx", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ")", ")", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "size", ")", ":", "\n", "                ", "u", "=", "(", "i", "-", "halfsize", ",", "j", "-", "halfsize", ")", "\n", "hx", "[", "i", ",", "j", "]", "=", "self", ".", "gauss", "(", "u", "[", "0", "]", ",", "sigma", ")", "*", "self", ".", "dgauss", "(", "u", "[", "1", "]", ",", "sigma", ")", "\n", "", "", "hx", "/=", "math", ".", "sqrt", "(", "(", "hx", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "hy", "=", "hx", ".", "copy", "(", ")", ".", "transpose", "(", ")", "\n", "self", ".", "hx", "=", "torch", ".", "FloatTensor", "(", "hx", ".", "astype", "(", "float", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "self", ".", "hy", "=", "torch", ".", "FloatTensor", "(", "hy", ".", "astype", "(", "float", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.gauss": [[23, 25], ["math.sqrt"], "methods", ["None"], ["", "def", "gauss", "(", "self", ",", "x", ",", "sigma", ")", ":", "\n", "        ", "return", "math", ".", "e", "**", "(", "-", "x", "**", "2", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "/", "(", "sigma", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.dgauss": [[26, 28], ["eval_measure.gaussGradient.gauss"], "methods", ["home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.gauss"], ["", "def", "dgauss", "(", "self", ",", "x", ",", "sigma", ")", ":", "\n", "        ", "return", "-", "x", "*", "self", ".", "gauss", "(", "x", ",", "sigma", ")", "/", "sigma", "**", "2", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.gaussGradient.__call__": [[28, 32], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gx", "=", "F", ".", "conv2d", "(", "img", ",", "self", ".", "hx", ",", "padding", "=", "self", ".", "halfsize", ")", "\n", "gy", "=", "F", ".", "conv2d", "(", "img", ",", "self", ".", "hy", ",", "padding", "=", "self", ".", "halfsize", ")", "\n", "return", "gx", ",", "gy", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.data.eval_measure.compute_gradient_loss": [[34, 42], ["theGaussGradient", "theGaussGradient"], "function", ["None"], ["", "", "def", "compute_gradient_loss", "(", "pred", ",", "target", ",", "trimap", ",", "theGaussGradient", ")", ":", "\n", "    ", "pred_x", ",", "pred_y", "=", "theGaussGradient", "(", "pred", ")", "\n", "target_x", ",", "target_y", "=", "theGaussGradient", "(", "target", ")", "\n", "pred_amp", "=", "(", "pred_x", "**", "2", "+", "pred_y", "**", "2", ")", "**", "0.5", "\n", "target_amp", "=", "(", "target_x", "**", "2", "+", "target_y", "**", "2", ")", "**", "0.5", "\n", "error_map", "=", "(", "pred_amp", "-", "target_amp", ")", "**", "2", "\n", "loss", "=", "(", "error_map", "*", "(", "trimap", "==", "128", ")", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kfeng123_LSA-Matting.misc.composite_testset.composite4": [[38, 64], ["fg.getbbox", "bg.crop.crop", "fg.load", "bg.crop.load", "a.load", "range", "range", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "composite4", "(", "fg", ",", "bg", ",", "a", ",", "w", ",", "h", ")", ":", "\n", "\n", "    ", "bbox", "=", "fg", ".", "getbbox", "(", ")", "\n", "bg", "=", "bg", ".", "crop", "(", "(", "0", ",", "0", ",", "w", ",", "h", ")", ")", "\n", "\n", "fg_list", "=", "fg", ".", "load", "(", ")", "\n", "bg_list", "=", "bg", ".", "load", "(", ")", "\n", "a_list", "=", "a", ".", "load", "(", ")", "\n", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "alpha", "=", "a_list", "[", "x", ",", "y", "]", "[", "0", "]", "/", "255", "\n", "t", "=", "fg_list", "[", "x", ",", "y", "]", "[", "0", "]", "\n", "t2", "=", "bg_list", "[", "x", ",", "y", "]", "[", "0", "]", "\n", "if", "alpha", ">=", "1", ":", "\n", "                ", "r", "=", "int", "(", "fg_list", "[", "x", ",", "y", "]", "[", "0", "]", ")", "\n", "g", "=", "int", "(", "fg_list", "[", "x", ",", "y", "]", "[", "1", "]", ")", "\n", "b", "=", "int", "(", "fg_list", "[", "x", ",", "y", "]", "[", "2", "]", ")", "\n", "bg_list", "[", "x", ",", "y", "]", "=", "(", "r", ",", "g", ",", "b", ",", "255", ")", "\n", "", "elif", "alpha", ">", "0", ":", "\n", "                ", "r", "=", "int", "(", "alpha", "*", "fg_list", "[", "x", ",", "y", "]", "[", "0", "]", "+", "(", "1", "-", "alpha", ")", "*", "bg_list", "[", "x", ",", "y", "]", "[", "0", "]", ")", "\n", "g", "=", "int", "(", "alpha", "*", "fg_list", "[", "x", ",", "y", "]", "[", "1", "]", "+", "(", "1", "-", "alpha", ")", "*", "bg_list", "[", "x", ",", "y", "]", "[", "1", "]", ")", "\n", "b", "=", "int", "(", "alpha", "*", "fg_list", "[", "x", ",", "y", "]", "[", "2", "]", "+", "(", "1", "-", "alpha", ")", "*", "bg_list", "[", "x", ",", "y", "]", "[", "2", "]", ")", "\n", "bg_list", "[", "x", ",", "y", "]", "=", "(", "r", ",", "g", ",", "b", ",", "255", ")", "\n", "\n", "", "", "", "return", "bg", "\n", "\n"]]}