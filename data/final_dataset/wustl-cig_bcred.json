{"home.repos.pwc.inspect_result.wustl-cig_bcred.None.iterAlgs.redEst": [[12, 159], ["rObj.init", "range", "os.path.abspath", "os.path.exists", "print", "os.makedirs", "numpy.zeros", "time.time", "dObj.grad", "dObj.grad", "loss.append", "dist.append", "timer.append", "numpy.log10", "print", "shutil.rmtree", "rObj.red", "time.time", "rObj.red", "snr.append", "util.save_mat", "util.save_img", "rObj.prox", "numpy.linalg.norm", "rObj.eval", "rObj.prox", "evaluateSnr", "print", "print", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.clip", "print", "exit", "numpy.clip", "numpy.linalg.norm", "rObj.eval", "print", "exit", "numpy.sqrt", "xtrue.flatten", "gfull.flatten", "g_robj.flatten", "numpy.linalg.norm", "xtrue.flatten", "x.flatten", "x.flatten", "Px.flatten", "x.flatten", "Px.flatten", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.init", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.grad", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.grad", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.red", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.red", "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.save_mat", "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.save_img", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.prox", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.eval", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.prox", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.eval"], ["def", "redEst", "(", "dObj", ",", "rObj", ",", "\n", "numIter", "=", "100", ",", "step", "=", "1", ",", "accelerate", "=", "False", ",", "mode", "=", "'RED'", ",", "useNoise", "=", "True", ",", "\n", "verbose", "=", "False", ",", "is_save", "=", "False", ",", "save_path", "=", "'red_intermediate_results'", ",", "xtrue", "=", "None", ",", "xinit", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Regularization by Denoising (RED)\n    \n    ### INPUT:\n    dObj       ~ data fidelity term, measurement/forward model\n    rObj       ~ regularizer term\n    numIter    ~ total number of iterations\n    accelerate ~ use APGM or PGM\n    mode       ~ RED update or PROX update\n    useNoise.  ~ true if CNN predict noise; false if CNN predict clean image\n    step       ~ step-size\n    verbose    ~ if true print info of each iteration\n    is_save    ~ if true save the reconstruction of each iteration\n    save_path  ~ the save path for is_save\n    xtrue      ~ the ground truth of the image, for tracking purpose\n    xinit      ~ initialization of x (zero otherwise)\n\n    ### OUTPUT:\n    x     ~ reconstruction of the algorithm\n    outs  ~ detailed information including cost, snr, step-size and time of each iteration\n\n    \"\"\"", "\n", "\n", "########### HELPER FUNCTION ###########", "\n", "\n", "evaluateSnr", "=", "lambda", "xtrue", ",", "x", ":", "20", "*", "np", ".", "log10", "(", "np", ".", "linalg", ".", "norm", "(", "xtrue", ".", "flatten", "(", "'F'", ")", ")", "/", "np", ".", "linalg", ".", "norm", "(", "xtrue", ".", "flatten", "(", "'F'", ")", "-", "x", ".", "flatten", "(", "'F'", ")", ")", ")", "\n", "\n", "########### INITIALIZATION ###########", "\n", "\n", "# initialize save foler", "\n", "if", "is_save", ":", "\n", "        ", "abs_save_path", "=", "os", ".", "path", ".", "abspath", "(", "save_path", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "\"Removing '{:}'\"", ".", "format", "(", "abs_save_path", ")", ")", "\n", "shutil", ".", "rmtree", "(", "abs_save_path", ",", "ignore_errors", "=", "True", ")", "\n", "# make new path", "\n", "", "print", "(", "\"Allocating '{:}'\"", ".", "format", "(", "abs_save_path", ")", ")", "\n", "os", ".", "makedirs", "(", "abs_save_path", ")", "\n", "\n", "#initialize info data", "\n", "", "if", "xtrue", "is", "not", "None", ":", "\n", "        ", "xtrueSet", "=", "True", "\n", "snr", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "xtrueSet", "=", "False", "\n", "\n", "", "loss", "=", "[", "]", "\n", "dist", "=", "[", "]", "\n", "timer", "=", "[", "]", "\n", "\n", "# initialize variables", "\n", "if", "xinit", "is", "not", "None", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "xinit", "=", "np", ".", "zeros", "(", "dObj", ".", "sigSize", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "x", "=", "xinit", "\n", "s", "=", "x", "# gradient update", "\n", "t", "=", "1.", "# controls acceleration", "\n", "p", ",", "pfull", "=", "rObj", ".", "init", "(", "1", ",", "dObj", ".", "sigSize", "[", "0", "]", ")", "# dual variable for TV", "\n", "p", "=", "p", "[", "0", "]", "\n", "\n", "########### BC-RED (EPOCH) ############", "\n", "\n", "for", "indIter", "in", "range", "(", "numIter", ")", ":", "\n", "        ", "timeStart", "=", "time", ".", "time", "(", ")", "\n", "# get gradient", "\n", "g", ",", "_", "=", "dObj", ".", "grad", "(", "s", ")", "\n", "if", "mode", "==", "'RED'", ":", "\n", "            ", "g_robj", ",", "p", "=", "rObj", ".", "red", "(", "s", ",", "step", ",", "p", ",", "useNoise", "=", "useNoise", ",", "extend_p", "=", "None", ")", "\n", "xnext", "=", "s", "-", "step", "*", "(", "g", "+", "g_robj", ")", "\n", "", "elif", "mode", "==", "'PROX'", ":", "\n", "            ", "xnext", ",", "p", "=", "rObj", ".", "prox", "(", "np", ".", "clip", "(", "s", "-", "step", "*", "g", ",", "0", ",", "np", ".", "inf", ")", ",", "step", ",", "p", ")", "# clip to [0, inf]", "\n", "", "elif", "mode", "==", "'GRAD'", ":", "\n", "            ", "xnext", "=", "s", "-", "step", "*", "g", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"No such mode option\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "timeEnd", "=", "time", ".", "time", "(", ")", "-", "timeStart", "\n", "\n", "\n", "########### LOG INFO ###########", "\n", "\n", "# calculate full gradient for convergence plot", "\n", "gfull", ",", "dfull", "=", "dObj", ".", "grad", "(", "x", ")", "\n", "if", "mode", "==", "'RED'", ":", "\n", "            ", "g_robj", ",", "pfull", "=", "rObj", ".", "red", "(", "x", ",", "step", ",", "pfull", ",", "useNoise", "=", "useNoise", ",", "extend_p", "=", "None", ")", "\n", "Px", "=", "x", "-", "step", "*", "(", "gfull", "+", "g_robj", ")", "\n", "# Gx", "\n", "diff", "=", "np", ".", "linalg", ".", "norm", "(", "gfull", ".", "flatten", "(", "'F'", ")", "+", "g_robj", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "obj", "=", "dfull", "+", "rObj", ".", "eval", "(", "x", ")", "\n", "", "elif", "mode", "==", "'PROX'", ":", "\n", "            ", "Px", ",", "pfull", "=", "rObj", ".", "prox", "(", "np", ".", "clip", "(", "x", "-", "step", "*", "gfull", ",", "0", ",", "np", ".", "inf", ")", ",", "step", ",", "pfull", ")", "\n", "# x-Px", "\n", "diff", "=", "np", ".", "linalg", ".", "norm", "(", "x", ".", "flatten", "(", "'F'", ")", "-", "Px", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "obj", "=", "dfull", "+", "rObj", ".", "eval", "(", "x", ")", "\n", "", "elif", "mode", "==", "'GRAD'", ":", "\n", "# x-Px", "\n", "            ", "Px", "=", "x", "-", "step", "*", "g", "\n", "diff", "=", "np", ".", "linalg", ".", "norm", "(", "x", ".", "flatten", "(", "'F'", ")", "-", "Px", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "obj", "=", "dfull", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"No such mode option\"", ")", "\n", "exit", "(", ")", "\n", "\n", "# acceleration", "\n", "", "if", "accelerate", ":", "\n", "            ", "tnext", "=", "0.5", "*", "(", "1", "+", "np", ".", "sqrt", "(", "1", "+", "4", "*", "t", "*", "t", ")", ")", "\n", "", "else", ":", "\n", "            ", "tnext", "=", "1", "\n", "", "s", "=", "xnext", "+", "(", "(", "t", "-", "1", ")", "/", "tnext", ")", "*", "(", "xnext", "-", "x", ")", "\n", "\n", "# output info", "\n", "# cost[indIter] = data", "\n", "loss", ".", "append", "(", "obj", ")", "\n", "dist", ".", "append", "(", "diff", ")", "\n", "timer", ".", "append", "(", "timeEnd", ")", "\n", "# evaluateTol(x, xnext)", "\n", "if", "xtrueSet", ":", "\n", "            ", "snr", ".", "append", "(", "evaluateSnr", "(", "xtrue", ",", "x", ")", ")", "\n", "\n", "# update", "\n", "", "t", "=", "tnext", "\n", "x", "=", "xnext", "\n", "\n", "# save & print", "\n", "if", "is_save", ":", "\n", "            ", "util", ".", "save_mat", "(", "xnext", ",", "abs_save_path", "+", "'/iter_{}_mat.mat'", ".", "format", "(", "indIter", "+", "1", ")", ")", "\n", "util", ".", "save_img", "(", "xnext", ",", "abs_save_path", "+", "'/iter_{}_img.tif'", ".", "format", "(", "indIter", "+", "1", ")", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "if", "xtrueSet", ":", "\n", "                ", "print", "(", "'[redEst: '", "+", "str", "(", "indIter", "+", "1", ")", "+", "'/'", "+", "str", "(", "numIter", ")", "+", "']'", "+", "' [||Gx_k||^2/||Gx_0||^2: %.5e]'", "%", "(", "dist", "[", "indIter", "]", "/", "dist", "[", "0", "]", ")", "+", "' [snr: %.2f]'", "%", "(", "snr", "[", "indIter", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'[redEst: '", "+", "str", "(", "indIter", "+", "1", ")", "+", "'/'", "+", "str", "(", "numIter", ")", "+", "']'", "+", "' [||Gx_k||^2/||Gx_0||^2: %.5e]'", "%", "(", "dist", "[", "indIter", "]", "/", "dist", "[", "0", "]", ")", ")", "\n", "\n", "# summarize outs", "\n", "", "", "outs", "=", "{", "\n", "'dist'", ":", "dist", "/", "dist", "[", "0", "]", ",", "\n", "'snr'", ":", "snr", ",", "\n", "'time'", ":", "timer", "\n", "}", "\n", "\n", "", "return", "x", ",", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.iterAlgs.bcredEst": [[161, 308], ["util.extract_nonoverlap_patches", "rObj.init", "dObj.res", "range", "os.path.abspath", "os.path.exists", "print", "os.makedirs", "numpy.zeros", "numpy.random.permutation", "dObj.grad", "rObj.red", "loss.append", "dist.append", "time.time", "range", "timer.append", "numpy.log10", "print", "shutil.rmtree", "rObj.eval", "snr.append", "dObj.gradBloc", "util.putback_nonoverlap_patches", "time.time", "util.save_mat", "util.save_img", "numpy.linalg.norm", "evaluateSnr", "rObj.red", "util.extract_padding_patches", "util.extract_padding_patches", "rObj.red", "print", "print", "numpy.linalg.norm", "numpy.linalg.norm", "gfull_tot.flatten", "dObj.fmultPatch", "xtrue.flatten", "xtrue.flatten", "x.flatten", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.extract_nonoverlap_patches", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.init", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.res", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.grad", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.red", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.eval", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.gradBloc", "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.putback_nonoverlap_patches", "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.save_mat", "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.save_img", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.red", "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.extract_padding_patches", "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.extract_padding_patches", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.red", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmultPatch"], ["", "def", "bcredEst", "(", "dObj", ",", "rObj", ",", "\n", "num_patch", "=", "16", ",", "patch_size", "=", "40", ",", "pad", "=", "None", ",", "numIter", "=", "100", ",", "step", "=", "1", ",", "useNoise", "=", "True", ",", "\n", "verbose", "=", "False", ",", "is_save", "=", "False", ",", "save_path", "=", "'bcred_intermediate_results'", ",", "xtrue", "=", "None", ",", "xinit", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Block Coordinate Regularization by Denoising (BCRED)\n    \n    ### INPUT:\n    dObj       ~ the data fidelity term, measurement/forward model\n    rObj       ~ the regularizer term\n    num_patch  ~ the number of blocks assigned (Patches should not overlap with each other)\n    patch_size ~ the spatial size of a patch (block)\n    pad        ~ the pad size for block-wise denoising / set to 'None' if you want to use the full denoiser \n    numIter    ~ the total number of iterations\n    step       ~ the step-size\n    verbose    ~ if true print info of each iteration\n    is_save    ~ if true save the reconstruction of each iteration\n    save_path  ~ the save path for is_save\n    xtrue      ~ the ground truth of the image, for tracking purpose\n    xinit      ~ the initial value of x \n\n    ### OUTPUT:\n    x     ~ reconstruction of the algorithm\n    outs  ~ detailed information including cost, snr, step-size and time of each iteration\n    \n    \"\"\"", "\n", "\n", "########### HELPER FUNCTION ###########", "\n", "\n", "evaluateSnr", "=", "lambda", "xtrue", ",", "x", ":", "20", "*", "np", ".", "log10", "(", "np", ".", "linalg", ".", "norm", "(", "xtrue", ".", "flatten", "(", "'F'", ")", ")", "/", "np", ".", "linalg", ".", "norm", "(", "xtrue", ".", "flatten", "(", "'F'", ")", "-", "x", ".", "flatten", "(", "'F'", ")", ")", ")", "\n", "\n", "########### INITIALIZATION ###########", "\n", "\n", "# initialize save foler", "\n", "if", "is_save", ":", "\n", "        ", "abs_save_path", "=", "os", ".", "path", ".", "abspath", "(", "save_path", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "\"Removing '{:}'\"", ".", "format", "(", "abs_save_path", ")", ")", "\n", "shutil", ".", "rmtree", "(", "abs_save_path", ",", "ignore_errors", "=", "True", ")", "\n", "# make new path", "\n", "", "print", "(", "\"Allocating '{:}'\"", ".", "format", "(", "abs_save_path", ")", ")", "\n", "os", ".", "makedirs", "(", "abs_save_path", ")", "\n", "\n", "#initialize info data", "\n", "", "if", "xtrue", "is", "not", "None", ":", "\n", "        ", "xtrueSet", "=", "True", "\n", "snr", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "xtrueSet", "=", "False", "\n", "\n", "", "loss", "=", "[", "]", "\n", "dist", "=", "[", "]", "\n", "timer", "=", "[", "]", "\n", "\n", "# initialize variables", "\n", "if", "xinit", "is", "not", "None", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "xinit", "=", "np", ".", "zeros", "(", "dObj", ".", "sigSize", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "x", "=", "xinit", "\n", "xnext", "=", "x", "\n", "x_patches", "=", "util", ".", "extract_nonoverlap_patches", "(", "x", ",", "num_patch", ",", "patch_size", ")", "\n", "xnext_patches", "=", "x_patches", "\n", "\n", "# helper variable", "\n", "p", ",", "pfull", "=", "rObj", ".", "init", "(", "num_patch", ",", "patch_size", "+", "2", "*", "pad", ")", "# dual variable for TV", "\n", "res", "=", "dObj", ".", "res", "(", "x", ")", "# compute the residual Ax-y for xinit", "\n", "\n", "\n", "########### BC-RED (EPOCH) ############", "\n", "\n", "for", "indIter", "in", "range", "(", "numIter", ")", ":", "\n", "\n", "# randomize order of patches", "\n", "        ", "patchInd", "=", "np", ".", "random", ".", "permutation", "(", "num_patch", ")", "\n", "\n", "# calculate full gradient (g = Sx)", "\n", "gfull_data", ",", "dcost", "=", "dObj", ".", "grad", "(", "x", ")", "\n", "gfull_robj", ",", "pfull", "=", "rObj", ".", "red", "(", "x", ",", "step", ",", "pfull", ",", "useNoise", "=", "useNoise", ",", "extend_p", "=", "None", ")", "\n", "gfull_tot", "=", "gfull_data", "+", "gfull_robj", "\n", "\n", "# calculate the loss for showing back-compatibility of PROX-TV", "\n", "obj", "=", "dcost", "+", "rObj", ".", "eval", "(", "x", ")", "\n", "\n", "# cost[indIter] = data", "\n", "loss", ".", "append", "(", "obj", ")", "\n", "dist", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "gfull_tot", ".", "flatten", "(", "'F'", ")", ")", "**", "2", ")", "\n", "if", "xtrueSet", ":", "\n", "            ", "snr", ".", "append", "(", "evaluateSnr", "(", "xtrue", ",", "x", ")", ")", "\n", "\n", "# set up a timer", "\n", "", "timeStart", "=", "time", ".", "time", "(", ")", "\n", "\n", "## Inner Loop ##", "\n", "for", "i", "in", "range", "(", "num_patch", ")", ":", "\n", "\n", "# extract patch", "\n", "            ", "patch_idx", "=", "patchInd", "[", "i", "]", "\n", "cur_patch", "=", "x_patches", "[", "patch_idx", ",", ":", ",", ":", "]", "\n", "\n", "# get gradient of data-fit for the extracted block", "\n", "g_data", "=", "dObj", ".", "gradBloc", "(", "res", ",", "patch_idx", ")", "\n", "\n", "# denoise the block with padding & get the full gradient G", "\n", "if", "pad", "is", "None", ":", "\n", "                ", "g_robj", ",", "p", "[", "patch_idx", ",", "...", "]", "=", "rObj", ".", "red", "(", "x", ",", "step", ",", "p", "[", "patch_idx", ",", "...", "]", ",", "useNoise", "=", "useNoise", ",", "extend_p", "=", "None", ")", "\n", "g_robj_patch", "=", "util", ".", "extract_padding_patches", "(", "g_robj", ",", "patch_idx", ",", "extend_p", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "padded_patch", "=", "util", ".", "extract_padding_patches", "(", "x", ",", "patch_idx", ",", "extend_p", "=", "pad", ")", "\n", "g_robj_patch", ",", "p", "[", "patch_idx", ",", "...", "]", "=", "rObj", ".", "red", "(", "padded_patch", ",", "step", ",", "p", "[", "patch_idx", ",", "...", "]", ",", "useNoise", "=", "useNoise", ",", "extend_p", "=", "pad", ")", "\n", "\n", "", "g_tot", "=", "g_data", "+", "g_robj_patch", "\n", "\n", "# update the selected block", "\n", "xnext_patches", "[", "patch_idx", ",", ":", ",", ":", "]", "=", "cur_patch", "-", "step", "*", "g_tot", "\n", "xnext", "=", "util", ".", "putback_nonoverlap_patches", "(", "xnext_patches", ")", "\n", "\n", "# update", "\n", "res", "=", "res", "-", "step", "*", "dObj", ".", "fmultPatch", "(", "g_tot", ",", "patch_idx", ")", "\n", "x", "=", "xnext", "\n", "x_patches", "=", "xnext_patches", "\n", "\n", "# end of the timer ", "\n", "", "timeEnd", "=", "time", ".", "time", "(", ")", "-", "timeStart", "\n", "timer", ".", "append", "(", "timeEnd", ")", "\n", "\n", "########### LOG INFO ###########", "\n", "\n", "# save & print", "\n", "if", "is_save", ":", "\n", "            ", "util", ".", "save_mat", "(", "xnext", ",", "abs_save_path", "+", "'/iter_{}_mat.mat'", ".", "format", "(", "indIter", "+", "1", ")", ")", "\n", "util", ".", "save_img", "(", "xnext", ",", "abs_save_path", "+", "'/iter_{}_img.tif'", ".", "format", "(", "indIter", "+", "1", ")", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "if", "xtrueSet", ":", "\n", "                ", "print", "(", "'[bcredEst: '", "+", "str", "(", "indIter", "+", "1", ")", "+", "'/'", "+", "str", "(", "numIter", ")", "+", "']'", "+", "' [||Gx_k||^2/||Gx_0||^2: %.5e]'", "%", "(", "dist", "[", "indIter", "]", "/", "dist", "[", "0", "]", ")", "+", "' [snr: %.2f]'", "%", "(", "snr", "[", "indIter", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'[bcredEst: '", "+", "str", "(", "indIter", "+", "1", ")", "+", "'/'", "+", "str", "(", "numIter", ")", "+", "']'", "+", "' [||Gx_k||^2/||Gx_0||: %.5e]'", "%", "(", "dist", "[", "indIter", "]", "/", "dist", "[", "0", "]", ")", ")", "\n", "\n", "# summarize outs", "\n", "", "", "outs", "=", "{", "\n", "'dist'", ":", "dist", "/", "dist", "[", "0", "]", ",", "\n", "'snr'", ":", "snr", ",", "\n", "'time'", ":", "timer", "\n", "}", "\n", "\n", "\n", "", "return", "x", ",", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.to_rgb": [[11, 22], ["numpy.atleast_3d", "numpy.amin", "numpy.amax", "numpy.tile", "numpy.isnan", "numpy.np.uint8"], "function", ["None"], ["def", "to_rgb", "(", "img", ")", ":", "\n", "    ", "img", "=", "np", ".", "atleast_3d", "(", "img", ")", "\n", "channels", "=", "img", ".", "shape", "[", "2", "]", "\n", "if", "channels", "<", "3", ":", "\n", "        ", "img", "=", "np", ".", "tile", "(", "img", ",", "3", ")", "\n", "\n", "", "img", "[", "np", ".", "isnan", "(", "img", ")", "]", "=", "0", "\n", "img", "-=", "np", ".", "amin", "(", "img", ")", "\n", "img", "/=", "np", ".", "amax", "(", "img", ")", "\n", "img", "*=", "255", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.to_double": [[24, 33], ["numpy.atleast_3d", "numpy.amin", "numpy.amax", "numpy.tile", "numpy.isnan"], "function", ["None"], ["", "def", "to_double", "(", "img", ")", ":", "\n", "    ", "img", "=", "np", ".", "atleast_3d", "(", "img", ")", "\n", "channels", "=", "img", ".", "shape", "[", "2", "]", "\n", "if", "channels", "<", "3", ":", "\n", "        ", "img", "=", "np", ".", "tile", "(", "img", ",", "3", ")", "\n", "", "img", "[", "np", ".", "isnan", "(", "img", ")", "]", "=", "0", "\n", "img", "-=", "np", ".", "amin", "(", "img", ")", "\n", "img", "/=", "np", ".", "amax", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.save_mat": [[35, 37], ["scipy.savemat"], "function", ["None"], ["", "def", "save_mat", "(", "img", ",", "path", ")", ":", "\n", "    ", "sio", ".", "savemat", "(", "path", ",", "{", "'img'", ":", "img", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.save_img": [[39, 42], ["util.to_rgb", "scipy.imsave", "to_rgb.round().astype", "to_rgb.round"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.to_rgb"], ["", "def", "save_img", "(", "img", ",", "path", ")", ":", "\n", "    ", "img", "=", "to_rgb", "(", "img", ")", "\n", "smisc", ".", "imsave", "(", "path", ",", "img", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.addwgn": [[44, 59], ["numpy.isreal", "numpy.nditer", "numpy.linalg.norm", "numpy.random.randn", "x.flatten", "numpy.random.randn", "numpy.linalg.norm", "numpy.shape", "numpy.shape", "numpy.random.randn", "np.random.randn.flatten", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape"], "function", ["None"], ["", "def", "addwgn", "(", "x", ",", "inputSnr", ")", ":", "\n", "    ", "noiseNorm", "=", "np", ".", "linalg", ".", "norm", "(", "x", ".", "flatten", "(", "'F'", ")", ")", "*", "10", "**", "(", "-", "inputSnr", "/", "20", ")", "\n", "xBool", "=", "np", ".", "isreal", "(", "x", ")", "\n", "real", "=", "True", "\n", "for", "e", "in", "np", ".", "nditer", "(", "xBool", ")", ":", "\n", "        ", "if", "e", "==", "False", ":", "\n", "            ", "real", "=", "False", "\n", "", "", "if", "(", "real", "==", "True", ")", ":", "\n", "        ", "noise", "=", "np", ".", "random", ".", "randn", "(", "np", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "np", ".", "shape", "(", "x", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "noise", "=", "np", ".", "random", ".", "randn", "(", "np", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "np", ".", "shape", "(", "x", ")", "[", "1", "]", ")", "+", "1j", "*", "np", ".", "random", ".", "randn", "(", "np", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "np", ".", "shape", "(", "x", ")", "[", "1", "]", ")", "\n", "\n", "", "noise", "=", "noise", "/", "np", ".", "linalg", ".", "norm", "(", "noise", ".", "flatten", "(", "'F'", ")", ")", "*", "noiseNorm", "\n", "y", "=", "x", "+", "noise", "\n", "return", "y", ",", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.extract_nonoverlap_patches": [[61, 70], ["numpy.zeros", "range", "range"], "function", ["None"], ["", "def", "extract_nonoverlap_patches", "(", "x", ",", "num_blocks", ",", "block_size", ")", ":", "\n", "    ", "patches", "=", "np", ".", "zeros", "(", "[", "num_blocks", ",", "block_size", ",", "block_size", "]", ")", "\n", "nx", ",", "ny", "=", "x", ".", "shape", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "nx", "-", "block_size", "+", "1", ",", "block_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "ny", "-", "block_size", "+", "1", ",", "block_size", ")", ":", "\n", "            ", "patches", "[", "count", ",", ":", "]", "=", "x", "[", "i", ":", "i", "+", "block_size", ",", "j", ":", "j", "+", "block_size", "]", "\n", "count", "=", "count", "+", "1", "\n", "", "", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.putback_nonoverlap_patches": [[72, 82], ["int", "numpy.zeros", "range", "range", "numpy.sqrt"], "function", ["None"], ["", "def", "putback_nonoverlap_patches", "(", "patches", ")", ":", "\n", "    ", "num_blocks", ",", "block_size", ",", "_", "=", "patches", ".", "shape", "\n", "nx", "=", "ny", "=", "int", "(", "np", ".", "sqrt", "(", "num_blocks", ")", "*", "block_size", ")", "\n", "x", "=", "np", ".", "zeros", "(", "[", "nx", ",", "ny", "]", ")", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "nx", "-", "block_size", "+", "1", ",", "block_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "ny", "-", "block_size", "+", "1", ",", "block_size", ")", ":", "\n", "            ", "x", "[", "i", ":", "i", "+", "block_size", ",", "j", ":", "j", "+", "block_size", "]", "=", "patches", "[", "count", "]", "\n", "count", "=", "count", "+", "1", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.extract_padding_patches": [[84, 113], ["numpy.pad", "numpy.zeros", "extended_patches[].squeeze", "len", "len", "int", "numpy.zeros", "range", "list", "list", "range", "len", "range", "range", "numpy.sqrt"], "function", ["None"], ["", "def", "extract_padding_patches", "(", "x_input", ",", "patch_index", ",", "extend_p", "=", "5", ",", "num_blocks", "=", "16", ",", "block_size", "=", "40", ",", "pad_mode", "=", "'reflect'", ")", ":", "\n", "    ", "assert", "len", "(", "x_input", ".", "shape", ")", "!=", "0", ",", "\"Input is empty.\"", "\n", "if", "extend_p", "is", "None", ":", "extend_p", "=", "0", "\n", "if", "len", "(", "x_input", ".", "shape", ")", "==", "3", ":", "\n", "        ", "num_blocks", ",", "block_size", ",", "_", "=", "x_input", ".", "shape", "\n", "nx", "=", "ny", "=", "int", "(", "np", ".", "sqrt", "(", "num_blocks", ")", "*", "block_size", ")", "\n", "x", "=", "np", ".", "zeros", "(", "[", "nx", ",", "ny", "]", ")", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "nx", "-", "block_size", "+", "1", ",", "block_size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "ny", "-", "block_size", "+", "1", ",", "block_size", ")", ":", "\n", "                ", "x", "[", "i", ":", "i", "+", "block_size", ",", "j", ":", "j", "+", "block_size", "]", "=", "x_input", "[", "count", "]", "\n", "count", "=", "count", "+", "1", "\n", "", "", "x_input", "=", "x", "\n", "", "elif", "len", "(", "x_input", ".", "shape", ")", "==", "2", ":", "\n", "        ", "pass", "\n", "\n", "", "x_input_padded", "=", "np", ".", "pad", "(", "x_input", ",", "(", "(", "extend_p", ",", ")", ",", "(", "extend_p", ",", ")", ")", ",", "pad_mode", ")", "\n", "x_shape0", ",", "x_shape1", "=", "(", "x_input_padded", ".", "shape", "[", "0", "]", ",", "x_input_padded", ".", "shape", "[", "1", "]", ")", "\n", "patch_size", "=", "block_size", "+", "2", "*", "extend_p", "\n", "h_idx_list", "=", "list", "(", "range", "(", "0", ",", "x_shape0", "-", "patch_size", ",", "block_size", ")", ")", "+", "[", "x_shape0", "-", "patch_size", "]", "\n", "w_idx_list", "=", "list", "(", "range", "(", "0", ",", "x_shape1", "-", "patch_size", ",", "block_size", ")", ")", "+", "[", "x_shape1", "-", "patch_size", "]", "\n", "extended_patches", "=", "np", ".", "zeros", "(", "[", "num_blocks", ",", "patch_size", ",", "patch_size", "]", ")", "\n", "count", "=", "0", "\n", "for", "h_idx", "in", "h_idx_list", ":", "\n", "        ", "for", "w_idx", "in", "w_idx_list", ":", "\n", "# print(h_idx, w_idx)", "\n", "            ", "extended_patches", "[", "count", ",", "...", "]", "=", "x_input_padded", "[", "h_idx", ":", "h_idx", "+", "patch_size", ",", "w_idx", ":", "w_idx", "+", "patch_size", "]", "\n", "count", "=", "count", "+", "1", "\n", "", "", "return", "extended_patches", "[", "patch_index", ",", "...", "]", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.powerIter": [[115, 141], ["numpy.random.randn", "range", "numpy.linalg.norm", "A", "np.random.randn.flatten", "numpy.dot", "numpy.linalg.norm", "numpy.abs", "numpy.abs", "print", "A.flatten", "np.random.randn.flatten", "numpy.linalg.norm", "A.flatten", "np.random.randn.flatten"], "function", ["None"], ["", "def", "powerIter", "(", "A", ",", "imgSize", ",", "iters", "=", "100", ",", "tol", "=", "1e-6", ",", "verbose", "=", "False", ")", ":", "\n", "# compute singular value for A'*A", "\n", "# A should be a function (lambda:x)", "\n", "    ", "x", "=", "np", ".", "random", ".", "randn", "(", "imgSize", "[", "0", "]", ",", "imgSize", "[", "1", "]", ")", "\n", "x", "=", "x", "/", "np", ".", "linalg", ".", "norm", "(", "x", ".", "flatten", "(", "'F'", ")", ")", "\n", "lam", "=", "1", "\n", "for", "i", "in", "range", "(", "iters", ")", ":", "\n", "# apply Ax", "\n", "        ", "xnext", "=", "A", "(", "x", ")", "\n", "# xnext' * x / norm(x)^2", "\n", "lamNext", "=", "np", ".", "dot", "(", "xnext", ".", "flatten", "(", "'F'", ")", ",", "x", ".", "flatten", "(", "'F'", ")", ")", "/", "np", ".", "linalg", ".", "norm", "(", "x", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "# only take the real part", "\n", "lamNext", "=", "lamNext", ".", "real", "\n", "# normalize xnext", "\n", "xnext", "=", "xnext", "/", "np", ".", "linalg", ".", "norm", "(", "xnext", ".", "flatten", "(", "'F'", ")", ")", "\n", "# compute relative difference", "\n", "relDiff", "=", "np", ".", "abs", "(", "lamNext", "-", "lam", ")", "/", "np", ".", "abs", "(", "lam", ")", "\n", "x", "=", "xnext", "\n", "lam", "=", "lamNext", "\n", "# verbose", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'[{}/{}] lam = {}, relative Diff = {:0.4f}'", ".", "format", "(", "i", ",", "iter", ",", "lam", ",", "relDiff", ")", ")", "\n", "# stopping criterion", "\n", "", "if", "relDiff", "<", "tol", ":", "\n", "            ", "break", "\n", "", "", "return", "lam", "\n", "", ""]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.DataClass.DataClass.eval": [[9, 12], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.DataClass.DataClass.grad": [[12, 15], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.DataClass.DataClass.draw": [[15, 18], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "draw", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.__init__": [[61, 68], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "y", ",", "sigSize", ",", "mask", ",", "theta", "=", "None", ",", "num_blocks", "=", "16", ",", "block_size", "=", "40", ")", ":", "\n", "        ", "self", ".", "y", "=", "y", "\n", "self", ".", "sigSize", "=", "sigSize", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "theta", "=", "theta", "# here theta is a list of degrees", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.size": [[69, 71], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sigSize", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.eval": [[72, 74], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.res": [[75, 78], ["RadonEffClass.RadonEffClass.fmult"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmult"], ["", "def", "res", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "fmult", "(", "x", ",", "self", ".", "theta", ")", "\n", "return", "z", "-", "self", ".", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.grad": [[79, 85], ["RadonEffClass.RadonEffClass.res", "RadonEffClass.RadonEffClass.ftran", "numpy.linalg.norm", "RadonEffClass.RadonEffClass.flatten"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.res", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran"], ["", "def", "grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", "\n", "g", "=", "self", ".", "ftran", "(", "res", ",", "self", ".", "theta", ")", "\n", "g", "=", "g", ".", "real", "\n", "d", "=", "np", ".", "linalg", ".", "norm", "(", "res", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "return", "g", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.gradRes": [[86, 88], ["RadonEffClass.RadonEffClass.ftran"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran"], ["", "def", "gradRes", "(", "self", ",", "res", ")", ":", "\n", "        ", "return", "self", ".", "ftran", "(", "res", ",", "self", ".", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.gradBloc": [[89, 92], ["RadonEffClass.RadonEffClass.ftranBloc"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.ftranBloc"], ["", "def", "gradBloc", "(", "self", ",", "res", ",", "block_idx", ")", ":", "# need to be fixed", "\n", "        ", "g_block", "=", "self", ".", "ftranBloc", "(", "res", ",", "block_idx", ",", "self", ".", "mask", ",", "self", ".", "sigSize", ",", "self", ".", "num_blocks", ",", "self", ".", "block_size", ",", "self", ".", "theta", ")", "\n", "return", "g_block", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.fmultPatch": [[93, 95], ["RadonEffClass.RadonEffClass.fmultBloc"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.fmultBloc"], ["", "def", "fmultPatch", "(", "self", ",", "patch", ",", "block_idx", ")", ":", "\n", "        ", "return", "self", ".", "fmultBloc", "(", "patch", ",", "block_idx", ",", "self", ".", "sigSize", ",", "self", ".", "num_blocks", ",", "self", ".", "block_size", ",", "self", ".", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.draw": [[96, 98], ["None"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.fmult": [[99, 103], ["skimage.transform.radon"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fmult", "(", "x", ",", "theta", ")", ":", "\n", "        ", "z", "=", "skimage", ".", "transform", ".", "radon", "(", "x", ",", "theta", "=", "theta", ",", "circle", "=", "False", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.ftran": [[104, 108], ["skimage.transform.iradon"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ftran", "(", "z", ",", "theta", ")", ":", "# output_size, theta):", "\n", "        ", "x", "=", "skimage", ".", "transform", ".", "iradon", "(", "z", ",", "theta", "=", "theta", ",", "filter", "=", "None", ",", "circle", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.fmultBloc": [[109, 146], ["numpy.zeros", "skimage.transform.radon", "numpy.zeros", "range", "int", "int", "int", "RadonEffClass.sinogram_linear_interpolation", "numpy.array", "numpy.sqrt", "numpy.sin", "float", "numpy.cos", "float"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.sinogram_linear_interpolation"], ["", "@", "staticmethod", "\n", "def", "fmultBloc", "(", "x_block", ",", "block_idx", ",", "sigSize", ",", "num_blocks", ",", "block_size", ",", "theta", ")", ":", "\n", "        ", "dummy", "=", "np", ".", "zeros", "(", "[", "num_blocks", ",", "block_size", ",", "block_size", "]", ")", "\n", "dummy", "[", "block_idx", ",", ":", ",", ":", "]", "=", "x_block", "\n", "# num of blocks every row", "\n", "coordinate_x", "=", "block_idx", "//", "int", "(", "num_blocks", "**", "0.5", ")", "\n", "coordinate_y", "=", "block_idx", "%", "int", "(", "num_blocks", "**", "0.5", ")", "\n", "\n", "block_coordinate", "=", "[", "coordinate_x", ",", "coordinate_y", "]", "\n", "\n", "sinogram", "=", "skimage", ".", "transform", ".", "radon", "(", "x_block", ",", "theta", "=", "theta", ",", "circle", "=", "False", ")", "\n", "block_size", "=", "x_block", ".", "shape", "[", "0", "]", "\n", "\n", "block_movement_v", ",", "block_movement_h", "=", "(", "np", ".", "array", "(", "block_coordinate", ")", "+", "1", ")", "*", "block_size", "-", "block_size", "//", "2", "# [10 10]", "\n", "H", ",", "W", "=", "sigSize", "# [160 160]", "\n", "assert", "H", "==", "W", ",", "\"Image should be squared.\"", "\n", "\n", "T_length", "=", "int", "(", "np", ".", "sqrt", "(", "2", ")", "*", "H", ")", "+", "1", "\n", "shifted_sinogram_interp", "=", "np", ".", "zeros", "(", "[", "T_length", ",", "sinogram", ".", "shape", "[", "1", "]", "]", ")", "\n", "\n", "# distance from center", "\n", "block_movement_h_center", "=", "H", "/", "2", "-", "block_movement_h", "# 70", "\n", "block_movement_v_center", "=", "H", "/", "2", "-", "block_movement_v", "# 70", "\n", "\n", "delta_v", "=", "-", "block_movement_h_center", "\n", "delta_h", "=", "block_movement_v_center", "\n", "\n", "for", "column_num", "in", "range", "(", "sinogram", ".", "shape", "[", "1", "]", ")", ":", "\n", "# put the sinogram into the same column, but shited rows", "\n", "            ", "th", "=", "(", "np", ".", "pi", "/", "180.0", ")", "*", "theta", "[", "column_num", "]", "\n", "\n", "position_start", "=", "float", "(", "T_length", ")", "/", "2", "-", "float", "(", "sinogram", ".", "shape", "[", "0", "]", "/", "2", ")", "+", "delta_v", "*", "np", ".", "cos", "(", "th", ")", "+", "delta_h", "*", "np", ".", "sin", "(", "th", ")", "\n", "shifted_sinogram_interp", "=", "sinogram_linear_interpolation", "(", "sinogram", ",", "shifted_sinogram_interp", ",", "column_num", ",", "\n", "position_start", ")", "\n", "", "z", "=", "shifted_sinogram_interp", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.RadonEffClass.ftranBloc": [[147, 183], ["numpy.multiply", "numpy.zeros", "numpy.zeros", "range", "skimage.transform.iradon", "int", "int", "int", "RadonEffClass.sinogram_linear_inverse_interpolation", "len", "len", "int", "int", "numpy.array", "numpy.sqrt", "numpy.sin", "float", "numpy.cos", "numpy.sqrt", "numpy.sqrt", "float"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.sinogram_linear_inverse_interpolation"], ["", "@", "staticmethod", "\n", "def", "ftranBloc", "(", "z", ",", "block_idx", ",", "mask", ",", "sigSize", ",", "num_blocks", ",", "block_size", ",", "theta", ")", ":", "# dummy variables", "\n", "        ", "shifted_res_patch", "=", "np", ".", "multiply", "(", "z", ",", "mask", "[", "block_idx", "]", ")", "\n", "\n", "######inverse interpolation to get original patch size######", "\n", "sinogram", "=", "np", ".", "zeros", "(", "(", "int", "(", "np", ".", "sqrt", "(", "2", ")", "*", "block_size", ")", "+", "1", ",", "len", "(", "theta", ")", ")", ")", "\n", "res_patch", "=", "np", ".", "zeros", "(", "(", "num_blocks", ",", "int", "(", "np", ".", "sqrt", "(", "2", ")", "*", "block_size", ")", "+", "1", ",", "len", "(", "theta", ")", ")", ")", "\n", "shifted_sinogram_interp", "=", "shifted_res_patch", "\n", "# num of blocks every row", "\n", "coordinate_x", "=", "block_idx", "//", "int", "(", "num_blocks", "**", "0.5", ")", "\n", "coordinate_y", "=", "block_idx", "%", "int", "(", "num_blocks", "**", "0.5", ")", "\n", "\n", "block_coordinate", "=", "[", "coordinate_x", ",", "coordinate_y", "]", "\n", "block_movement_v", ",", "block_movement_h", "=", "(", "np", ".", "array", "(", "block_coordinate", ")", "+", "1", ")", "*", "block_size", "-", "block_size", "//", "2", "\n", "\n", "H", ",", "W", "=", "sigSize", "# [160 160]", "\n", "assert", "H", "==", "W", ",", "\"Image should be squared.\"", "\n", "T_length", "=", "int", "(", "np", ".", "sqrt", "(", "2", ")", "*", "H", ")", "+", "1", "\n", "# distance from center", "\n", "block_movement_h_center", "=", "H", "/", "2", "-", "block_movement_h", "\n", "block_movement_v_center", "=", "H", "/", "2", "-", "block_movement_v", "\n", "\n", "delta_v", "=", "-", "block_movement_h_center", "\n", "delta_h", "=", "block_movement_v_center", "\n", "\n", "for", "column_num", "in", "range", "(", "sinogram", ".", "shape", "[", "1", "]", ")", ":", "\n", "# put the sinogram into the same column, but shited rows", "\n", "            ", "th", "=", "(", "np", ".", "pi", "/", "180.0", ")", "*", "theta", "[", "column_num", "]", "\n", "position_start", "=", "float", "(", "T_length", ")", "/", "2", "-", "float", "(", "sinogram", ".", "shape", "[", "0", "]", "/", "2", ")", "+", "delta_v", "*", "np", ".", "cos", "(", "th", ")", "+", "delta_h", "*", "np", ".", "sin", "(", "th", ")", "\n", "# linear interpolation", "\n", "sinogram", "[", ":", ",", "column_num", "]", "=", "sinogram_linear_inverse_interpolation", "(", "shifted_sinogram_interp", ",", "sinogram", ",", "\n", "column_num", ",", "position_start", ")", "\n", "", "res_patch", "[", "block_idx", "]", "=", "sinogram", "\n", "g_data", "=", "skimage", ".", "transform", ".", "iradon", "(", "res_patch", "[", "block_idx", "]", ",", "theta", ",", "filter", "=", "None", ",", "circle", "=", "False", ")", "\n", "return", "g_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.sinogram_linear_interpolation": [[11, 31], ["int", "numpy.zeros", "numpy.round", "round", "round", "round"], "function", ["None"], ["def", "sinogram_linear_interpolation", "(", "sinogram", ",", "shifted_sinogram_interp", ",", "column_num", ",", "position_start", ")", ":", "\n", "    ", "row_start", "=", "int", "(", "np", ".", "round", "(", "position_start", ")", ")", "\n", "row_end", "=", "row_start", "+", "sinogram", ".", "shape", "[", "0", "]", "\n", "\n", "shift_sinogram", "=", "np", ".", "zeros", "(", "sinogram", ".", "shape", "[", "0", "]", ")", "\n", "\n", "length", "=", "sinogram", ".", "shape", "[", "0", "]", "-", "1", "\n", "if", "round", "(", "position_start", ")", "-", "position_start", ">=", "0", ":", "\n", "        ", "step", "=", "round", "(", "position_start", ")", "-", "position_start", "\n", "shift_sinogram", "[", ":", "length", "]", "=", "(", "sinogram", "[", "1", ":", ",", "column_num", "]", "-", "sinogram", "[", "0", ":", "length", ",", "column_num", "]", ")", "*", "step", "+", "sinogram", "[", "\n", "0", ":", "length", ",", "\n", "column_num", "]", "\n", "shift_sinogram", "[", "length", "]", "=", "sinogram", "[", "length", ",", "column_num", "]", "\n", "", "else", ":", "\n", "        ", "step", "=", "1", "-", "position_start", "+", "round", "(", "position_start", ")", "\n", "shift_sinogram", "[", "0", "]", "=", "sinogram", "[", "0", ",", "column_num", "]", "\n", "shift_sinogram", "[", "1", ":", "]", "=", "(", "sinogram", "[", "1", ":", ",", "column_num", "]", "-", "sinogram", "[", "0", ":", "length", ",", "column_num", "]", ")", "*", "step", "+", "sinogram", "[", "0", ":", "length", ",", "\n", "column_num", "]", "\n", "", "shifted_sinogram_interp", "[", "row_start", ":", "row_end", ",", "column_num", "]", "=", "shift_sinogram", "[", ":", "]", "\n", "return", "shifted_sinogram_interp", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonEffClass.sinogram_linear_inverse_interpolation": [[33, 53], ["int", "numpy.zeros", "numpy.round", "round", "round", "round"], "function", ["None"], ["", "def", "sinogram_linear_inverse_interpolation", "(", "shifted_sinogram_interp", ",", "sinogram", ",", "column_num", ",", "position_start", ")", ":", "\n", "    ", "row_start", "=", "int", "(", "np", ".", "round", "(", "position_start", ")", ")", "\n", "row_end", "=", "row_start", "+", "sinogram", ".", "shape", "[", "0", "]", "\n", "ishift_sinogram", "=", "np", ".", "zeros", "(", "shifted_sinogram_interp", ".", "shape", "[", "0", "]", ")", "\n", "\n", "#    length = shifted_sinogram_interp.shape[0] - 1", "\n", "if", "round", "(", "position_start", ")", "-", "position_start", ">=", "0", ":", "\n", "        ", "step", "=", "1", "-", "round", "(", "position_start", ")", "+", "position_start", "\n", "ishift_sinogram", "[", "row_start", "]", "=", "shifted_sinogram_interp", "[", "row_start", ",", "column_num", "]", "\n", "ishift_sinogram", "[", "row_start", "+", "1", ":", "row_end", "]", "=", "(", "shifted_sinogram_interp", "[", "row_start", "+", "1", ":", "row_end", ",", "column_num", "]", "-", "shifted_sinogram_interp", "[", "row_start", ":", "row_end", "-", "1", ",", "column_num", "]", ")", "*", "step", "+", "shifted_sinogram_interp", "[", "row_start", ":", "row_end", "-", "1", ",", "column_num", "]", "\n", "", "else", ":", "\n", "        ", "step", "=", "-", "round", "(", "position_start", ")", "+", "position_start", "\n", "ishift_sinogram", "[", "row_start", ":", "row_end", "-", "1", "]", "=", "(", "shifted_sinogram_interp", "[", "row_start", "+", "1", ":", "row_end", ",", "column_num", "]", "-", "shifted_sinogram_interp", "[", "row_start", ":", "row_end", "-", "1", ",", "column_num", "]", ")", "*", "step", "+", "shifted_sinogram_interp", "[", "row_start", ":", "row_end", "-", "1", ",", "column_num", "]", "\n", "ishift_sinogram", "[", "row_end", "]", "=", "shifted_sinogram_interp", "[", "row_end", ",", "column_num", "]", "\n", "", "sinogram", "[", ":", ",", "column_num", "]", "=", "ishift_sinogram", "[", "row_start", ":", "row_end", "]", "\n", "return", "ishift_sinogram", "[", "row_start", ":", "row_end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.__init__": [[19, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "y", ",", "mask", ",", "num_blocks", "=", "16", ",", "block_size", "=", "32", ")", ":", "\n", "        ", "self", ".", "y", "=", "y", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "sigSize", "=", "mask", ".", "shape", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.size": [[26, 29], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "sigSize", "=", "self", ".", "sigSize", "\n", "return", "sigSize", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.eval": [[30, 34], ["FourierClass.FourierClass.fmult", "numpy.power", "numpy.linalg.norm", "FourierClass.FourierClass.y.flatten", "FourierClass.FourierClass.flatten"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmult"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "fmult", "(", "x", ",", "self", ".", "mask", ")", "\n", "d", "=", "0.5", "*", "np", ".", "power", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "y", ".", "flatten", "(", "'F'", ")", "-", "z", ".", "flatten", "(", "'F'", ")", ")", ",", "2", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.res": [[35, 38], ["FourierClass.FourierClass.fmult"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmult"], ["", "def", "res", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "fmult", "(", "x", ",", "self", ".", "mask", ")", "\n", "return", "z", "-", "self", ".", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.grad": [[39, 45], ["FourierClass.FourierClass.res", "FourierClass.FourierClass.ftran", "numpy.linalg.norm", "FourierClass.FourierClass.flatten"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.res", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran"], ["", "def", "grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", "\n", "g", "=", "self", ".", "ftran", "(", "res", ",", "self", ".", "mask", ")", "\n", "g", "=", "g", ".", "real", "\n", "d", "=", "np", ".", "linalg", ".", "norm", "(", "res", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "return", "g", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.gradRes": [[46, 48], ["FourierClass.FourierClass.ftran"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran"], ["", "def", "gradRes", "(", "self", ",", "res", ")", ":", "\n", "        ", "return", "self", ".", "ftran", "(", "res", ",", "self", ".", "mask", ")", ".", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.gradBloc": [[49, 53], ["FourierClass.FourierClass.ftran", "FourierClass.FourierClass.ftranBloc"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.ftranBloc"], ["", "def", "gradBloc", "(", "self", ",", "res", ",", "block_idx", ")", ":", "# need to be fixed", "\n", "        ", "g", "=", "self", ".", "ftran", "(", "res", ",", "self", ".", "mask", ")", "\n", "g_block", "=", "self", ".", "ftranBloc", "(", "res", ",", "block_idx", ",", "self", ".", "num_blocks", ",", "self", ".", "block_size", ",", "self", ".", "mask", ")", "\n", "return", "g_block", ".", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.fmultPatch": [[54, 56], ["FourierClass.FourierClass.fmultBloc"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.fmultBloc"], ["", "def", "fmultPatch", "(", "self", ",", "patch", ",", "block_idx", ")", ":", "\n", "        ", "return", "self", ".", "fmultBloc", "(", "patch", ",", "block_idx", ",", "self", ".", "num_blocks", ",", "self", ".", "block_size", ",", "self", ".", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.draw": [[57, 60], ["None"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "x", ")", ":", "\n", "# plt.imshow(np.real(x),cmap='gray')", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.genMask": [[61, 95], ["math.ceil", "numpy.linspace", "numpy.zeros", "range", "sys.stderr.write", "sys.exit", "numpy.ceil", "numpy.sqrt", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "ix.astype.astype.astype", "iy.astype.astype.astype", "range", "numpy.sum", "decimal.Decimal().quantize", "decimal.Decimal().quantize", "len", "numpy.power", "decimal.Decimal", "decimal.Decimal", "math.cos", "math.sin"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "genMask", "(", "imgSize", ",", "numLines", ")", ":", "\n", "        ", "if", "imgSize", "[", "0", "]", "%", "2", "!=", "0", "or", "imgSize", "[", "1", "]", "%", "2", "!=", "0", ":", "\n", "            ", "sys", ".", "stderr", ".", "write", "(", "'image must be even sized! '", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "center", "=", "np", ".", "ceil", "(", "imgSize", "/", "2", ")", "+", "1", "\n", "freqMax", "=", "math", ".", "ceil", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "(", "imgSize", "/", "2", ")", ",", "2", ")", ",", "axis", "=", "0", ")", ")", ")", "\n", "ang", "=", "np", ".", "linspace", "(", "0", ",", "math", ".", "pi", ",", "num", "=", "numLines", "+", "1", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "imgSize", ",", "dtype", "=", "bool", ")", "\n", "\n", "for", "indLine", "in", "range", "(", "0", ",", "numLines", ")", ":", "\n", "            ", "ix", "=", "np", ".", "zeros", "(", "2", "*", "freqMax", "+", "1", ")", "\n", "iy", "=", "np", ".", "zeros", "(", "2", "*", "freqMax", "+", "1", ")", "\n", "ind", "=", "np", ".", "zeros", "(", "2", "*", "freqMax", "+", "1", ",", "dtype", "=", "bool", ")", "\n", "for", "i", "in", "range", "(", "2", "*", "freqMax", "+", "1", ")", ":", "\n", "                ", "ix", "[", "i", "]", "=", "decimal", ".", "Decimal", "(", "center", "[", "1", "]", "+", "(", "-", "freqMax", "+", "i", ")", "*", "math", ".", "cos", "(", "ang", "[", "indLine", "]", ")", ")", ".", "quantize", "(", "0", ",", "rounding", "=", "decimal", ".", "ROUND_HALF_UP", ")", "\n", "", "for", "i", "in", "range", "(", "2", "*", "freqMax", "+", "1", ")", ":", "\n", "                ", "iy", "[", "i", "]", "=", "decimal", ".", "Decimal", "(", "center", "[", "0", "]", "+", "(", "-", "freqMax", "+", "i", ")", "*", "math", ".", "sin", "(", "ang", "[", "indLine", "]", ")", ")", ".", "quantize", "(", "0", ",", "rounding", "=", "decimal", ".", "ROUND_HALF_UP", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "2", "*", "freqMax", "+", "1", ")", ":", "\n", "                ", "if", "(", "ix", "[", "k", "]", ">=", "1", ")", "&", "(", "ix", "[", "k", "]", "<=", "imgSize", "[", "1", "]", ")", "&", "(", "iy", "[", "k", "]", ">=", "1", ")", "&", "(", "iy", "[", "k", "]", "<=", "imgSize", "[", "0", "]", ")", ":", "\n", "                    ", "ind", "[", "k", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "ind", "[", "k", "]", "=", "False", "\n", "\n", "", "", "ix", "=", "ix", "[", "ind", "]", "\n", "iy", "=", "iy", "[", "ind", "]", "\n", "ix", "=", "ix", ".", "astype", "(", "np", ".", "int64", ")", "\n", "iy", "=", "iy", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "ix", ")", ")", ":", "\n", "                ", "mask", "[", "iy", "[", "i", "]", "-", "1", "]", "[", "ix", "[", "i", "]", "-", "1", "]", "=", "True", "\n", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.fmult": [[96, 101], ["numpy.multiply", "math.sqrt", "numpy.fft.fftshift", "numpy.fft.fft2"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fmult", "(", "x", ",", "mask", ")", ":", "\n", "        ", "numPix", "=", "x", ".", "size", "\n", "z", "=", "np", ".", "multiply", "(", "mask", ",", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "x", ")", ")", ")", "/", "math", ".", "sqrt", "(", "numPix", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.ftran": [[102, 107], ["numpy.multiply", "numpy.fft.ifft2", "numpy.sqrt", "numpy.fft.ifftshift", "numpy.multiply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ftran", "(", "z", ",", "mask", ")", ":", "\n", "        ", "numPix", "=", "z", ".", "size", "\n", "x", "=", "np", ".", "multiply", "(", "np", ".", "fft", ".", "ifft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "np", ".", "multiply", "(", "mask", ",", "z", ")", ")", ")", ",", "np", ".", "sqrt", "(", "numPix", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.fmultBloc": [[108, 115], ["numpy.zeros", "util.putback_nonoverlap_patches", "numpy.multiply", "math.sqrt", "numpy.fft.fftshift", "numpy.fft.fft2"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.putback_nonoverlap_patches"], ["", "@", "staticmethod", "\n", "def", "fmultBloc", "(", "x_block", ",", "block_idx", ",", "num_blocks", ",", "block_size", ",", "mask", ")", ":", "\n", "        ", "dummy", "=", "np", ".", "zeros", "(", "[", "num_blocks", ",", "block_size", ",", "block_size", "]", ")", "\n", "dummy", "[", "block_idx", ",", ":", ",", ":", "]", "=", "x_block", "\n", "dummy_image", "=", "putback_nonoverlap_patches", "(", "dummy", ")", "\n", "z", "=", "np", ".", "multiply", "(", "mask", ",", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "dummy_image", ")", ")", ")", "/", "math", ".", "sqrt", "(", "dummy_image", ".", "size", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.FourierClass.FourierClass.ftranBloc": [[116, 121], ["numpy.multiply", "util.extract_nonoverlap_patches", "numpy.fft.ifft2", "numpy.sqrt", "numpy.fft.ifftshift", "numpy.multiply"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.extract_nonoverlap_patches"], ["", "@", "staticmethod", "\n", "def", "ftranBloc", "(", "z", ",", "block_idx", ",", "num_blocks", ",", "block_size", ",", "mask", ")", ":", "\n", "        ", "x", "=", "np", ".", "multiply", "(", "np", ".", "fft", ".", "ifft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "np", ".", "multiply", "(", "mask", ",", "z", ")", ")", ")", ",", "np", ".", "sqrt", "(", "z", ".", "size", ")", ")", "\n", "x_list", "=", "extract_nonoverlap_patches", "(", "x", ",", "num_blocks", ",", "block_size", ")", "\n", "return", "x_list", "[", "block_idx", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.__init__": [[19, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "y", ",", "sigSize", ",", "theta", "=", "None", ",", "num_blocks", "=", "16", ",", "block_size", "=", "32", ")", ":", "\n", "        ", "self", ".", "y", "=", "y", "\n", "self", ".", "sigSize", "=", "sigSize", "\n", "self", ".", "theta", "=", "theta", "# here theta is a list of degrees", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.size": [[26, 29], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "sigSize", "=", "self", ".", "sigSize", "\n", "return", "sigSize", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.eval": [[30, 34], ["RadonClass.RadonClass.fmult", "numpy.linalg.norm", "RadonClass.RadonClass.flatten", "RadonClass.RadonClass.y.flatten"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmult"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "fmult", "(", "x", ",", "self", ".", "A", ")", "\n", "d", "=", "np", ".", "linalg", ".", "norm", "(", "z", ".", "flatten", "(", "'F'", ")", "-", "self", ".", "y", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.res": [[35, 38], ["RadonClass.RadonClass.fmult"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmult"], ["", "def", "res", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "fmult", "(", "x", ",", "self", ".", "theta", ")", "\n", "return", "z", "-", "self", ".", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.grad": [[39, 45], ["RadonClass.RadonClass.res", "RadonClass.RadonClass.ftran", "numpy.linalg.norm", "RadonClass.RadonClass.flatten"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.res", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran"], ["", "def", "grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", "\n", "g", "=", "self", ".", "ftran", "(", "res", ",", "self", ".", "theta", ")", "\n", "g", "=", "g", ".", "real", "\n", "d", "=", "np", ".", "linalg", ".", "norm", "(", "res", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "return", "g", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.gradRes": [[46, 48], ["RadonClass.RadonClass.ftran"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran"], ["", "def", "gradRes", "(", "self", ",", "res", ")", ":", "\n", "        ", "return", "self", ".", "ftran", "(", "res", ",", "self", ".", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.gradBloc": [[49, 53], ["RadonClass.RadonClass.ftran", "RadonClass.RadonClass.ftranBloc"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.ftranBloc"], ["", "def", "gradBloc", "(", "self", ",", "res", ",", "block_idx", ")", ":", "# need to be fixed", "\n", "        ", "g", "=", "self", ".", "ftran", "(", "res", ",", "self", ".", "theta", ")", "\n", "g_block", "=", "self", ".", "ftranBloc", "(", "res", ",", "block_idx", ",", "self", ".", "num_blocks", ",", "self", ".", "block_size", ",", "self", ".", "theta", ")", "\n", "return", "g_block", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.fmultPatch": [[54, 56], ["RadonClass.RadonClass.fmultBloc"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.fmultBloc"], ["", "def", "fmultPatch", "(", "self", ",", "patch", ",", "block_idx", ")", ":", "\n", "        ", "return", "self", ".", "fmultBloc", "(", "patch", ",", "block_idx", ",", "self", ".", "num_blocks", ",", "self", ".", "block_size", ",", "self", ".", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.draw": [[57, 60], ["None"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "x", ")", ":", "\n", "# plt.imshow(np.real(x),cmap='gray')", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.fmult": [[62, 66], ["skimage.transform.radon"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fmult", "(", "x", ",", "theta", ")", ":", "\n", "        ", "z", "=", "skimage", ".", "transform", ".", "radon", "(", "x", ",", "theta", "=", "theta", ",", "circle", "=", "False", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.ftran": [[67, 71], ["skimage.transform.iradon"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ftran", "(", "z", ",", "theta", ")", ":", "# output_size, theta):", "\n", "        ", "x", "=", "skimage", ".", "transform", ".", "iradon", "(", "z", ",", "theta", "=", "theta", ",", "filter", "=", "None", ",", "circle", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.ftranBloc": [[72, 77], ["skimage.transform.iradon", "util.extract_nonoverlap_patches"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.extract_nonoverlap_patches"], ["", "@", "staticmethod", "\n", "def", "ftranBloc", "(", "z", ",", "block_idx", ",", "num_blocks", ",", "block_size", ",", "theta", ")", ":", "\n", "        ", "x", "=", "skimage", ".", "transform", ".", "iradon", "(", "z", ",", "theta", "=", "theta", ",", "filter", "=", "None", ",", "circle", "=", "False", ")", "\n", "x_list", "=", "extract_nonoverlap_patches", "(", "x", ",", "num_blocks", ",", "block_size", ")", "\n", "return", "x_list", "[", "block_idx", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RadonClass.RadonClass.fmultBloc": [[78, 85], ["numpy.zeros", "util.putback_nonoverlap_patches", "skimage.transform.radon"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.None.util.putback_nonoverlap_patches"], ["", "@", "staticmethod", "\n", "def", "fmultBloc", "(", "x_block", ",", "block_idx", ",", "num_blocks", ",", "block_size", ",", "theta", ")", ":", "\n", "        ", "dummy", "=", "np", ".", "zeros", "(", "[", "num_blocks", ",", "block_size", ",", "block_size", "]", ")", "\n", "dummy", "[", "block_idx", ",", ":", ",", ":", "]", "=", "x_block", "\n", "dummy_image", "=", "putback_nonoverlap_patches", "(", "dummy", ")", "\n", "z", "=", "skimage", ".", "transform", ".", "radon", "(", "dummy_image", ",", "theta", "=", "theta", ",", "circle", "=", "False", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.__init__": [[7, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "y", ",", "sigSize", ",", "A", ",", "A_patches", ")", ":", "\n", "        ", "self", ".", "y", "=", "y", "\n", "self", ".", "A", "=", "A", "\n", "self", ".", "A_patches", "=", "A_patches", "\n", "self", ".", "sigSize", "=", "sigSize", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.eval": [[13, 17], ["RandomClass.RandomClass.fmult", "numpy.linalg.norm", "RandomClass.RandomClass.flatten", "RandomClass.RandomClass.y.flatten"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmult"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "fmult", "(", "x", ",", "self", ".", "A", ")", "\n", "d", "=", "np", ".", "linalg", ".", "norm", "(", "z", ".", "flatten", "(", "'F'", ")", "-", "self", ".", "y", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.res": [[18, 21], ["RandomClass.RandomClass.fmult"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmult"], ["", "def", "res", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "fmult", "(", "x", ",", "self", ".", "A", ")", "\n", "return", "z", "-", "self", ".", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.gradBloc": [[22, 25], ["RandomClass.RandomClass.ftran"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran"], ["", "def", "gradBloc", "(", "self", ",", "res", ",", "block_idx", ")", ":", "\n", "        ", "g", "=", "self", ".", "ftran", "(", "res", ",", "self", ".", "A_patches", "[", "block_idx", ",", ":", ",", ":", "]", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.gradRes": [[26, 28], ["RandomClass.RandomClass.ftran"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran"], ["", "def", "gradRes", "(", "self", ",", "res", ")", ":", "\n", "        ", "return", "self", ".", "ftran", "(", "res", ",", "self", ".", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.grad": [[29, 33], ["RandomClass.RandomClass.res", "numpy.linalg.norm", "RandomClass.RandomClass.ftran", "RandomClass.RandomClass.flatten"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.res", "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran"], ["", "def", "grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", "\n", "d", "=", "np", ".", "linalg", ".", "norm", "(", "res", ".", "flatten", "(", "'F'", ")", ")", "**", "2", "\n", "return", "self", ".", "ftran", "(", "res", ",", "self", ".", "A", ")", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmultPatch": [[34, 37], ["RandomClass.RandomClass.fmult"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmult"], ["", "def", "fmultPatch", "(", "self", ",", "patch", ",", "block_idx", ")", ":", "\n", "        ", "result", "=", "self", ".", "fmult", "(", "patch", ",", "self", ".", "A_patches", "[", "block_idx", ",", ":", ",", ":", "]", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.draw": [[38, 41], ["None"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "x", ")", ":", "\n", "# plt.imshow(np.real(x),cmap='gray')", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.genMeas": [[42, 67], ["int", "int", "range", "numpy.random.randn", "numpy.sqrt", "int", "range", "numpy.array", "numpy.sqrt", "int", "range", "numpy.concatenate", "A_patches.append", "numpy.sqrt", "sub_matrix.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "genMeas", "(", "sigSize", ",", "num_blocks", ",", "block_size", ",", "downsample_rate", "=", "1", ")", ":", "\n", "# downsample rate is the downsample rate of nx and ny", "\n", "# size of image should be the power of 2", "\n", "# num of blocks better to be power of 2", "\n", "        ", "nx", "=", "sigSize", "[", "0", "]", "# size of width", "\n", "ny", "=", "sigSize", "[", "1", "]", "# size of height", "\n", "dx", "=", "int", "(", "downsample_rate", "*", "nx", ")", "# downsample size of width", "\n", "dy", "=", "int", "(", "downsample_rate", "*", "ny", ")", "# downsample size of height", "\n", "A", "=", "np", ".", "random", ".", "randn", "(", "dx", "*", "dy", ",", "nx", "*", "ny", ")", "/", "np", ".", "sqrt", "(", "dx", "*", "dy", ")", "\n", "\n", "# generate patch-wise A, first horizontal, then vertical", "\n", "A_patches", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "int", "(", "np", ".", "sqrt", "(", "num_blocks", ")", ")", ")", ":", "# loop over rows", "\n", "            ", "joffset", "=", "j", "*", "block_size", "\n", "for", "i", "in", "range", "(", "int", "(", "np", ".", "sqrt", "(", "num_blocks", ")", ")", ")", ":", "# loop over columns", "\n", "                ", "ioffset", "=", "joffset", "+", "i", "*", "block_size", "*", "ny", "\n", "sub_matrix", "=", "[", "]", "\n", "for", "z", "in", "range", "(", "block_size", ")", ":", "\n", "                    ", "start_ind", "=", "ioffset", "+", "z", "*", "ny", "\n", "end_ind", "=", "start_ind", "+", "block_size", "\n", "sub_matrix", ".", "append", "(", "A", "[", ":", ",", "start_ind", ":", "end_ind", "]", ")", "\n", "", "patch", "=", "np", ".", "concatenate", "(", "sub_matrix", ",", "axis", "=", "1", ")", "\n", "A_patches", ".", "append", "(", "patch", ")", "\n", "", "", "return", "A", ",", "np", ".", "array", "(", "A_patches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.fmult": [[68, 74], ["int", "numpy.dot", "numpy.dot.reshape", "numpy.sqrt", "x.flatten"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fmult", "(", "x", ",", "A", ")", ":", "\n", "        ", "meas_size_sq", "=", "A", ".", "shape", "[", "0", "]", "\n", "meas_size", "=", "int", "(", "np", ".", "sqrt", "(", "meas_size_sq", ")", ")", "\n", "z", "=", "np", ".", "dot", "(", "A", ",", "x", ".", "flatten", "(", "'F'", ")", ")", "\n", "return", "z", ".", "reshape", "(", "meas_size", ",", "meas_size", ",", "order", "=", "'F'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.DataFidelities.RandomClass.RandomClass.ftran": [[75, 81], ["int", "numpy.dot", "numpy.dot.reshape", "numpy.sqrt", "z.flatten"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ftran", "(", "z", ",", "A", ")", ":", "\n", "        ", "block_size_sq", "=", "A", ".", "shape", "[", "1", "]", "\n", "block_size", "=", "int", "(", "np", ".", "sqrt", "(", "block_size_sq", ")", ")", "\n", "x", "=", "np", ".", "dot", "(", "A", ".", "T", ",", "z", ".", "flatten", "(", "'F'", ")", ")", "\n", "return", "x", ".", "reshape", "(", "block_size", ",", "block_size", ",", "order", "=", "'F'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.RegularizerClass.__init__": [[21, 24], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.RegularizerClass.prox": [[25, 28], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "prox", "(", "self", ",", "z", ",", "step", ",", "pin", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.RegularizerClass.eval": [[29, 32], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "eval", "(", "self", ",", "z", ",", "step", ",", "pin", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.RegularizerClass.name": [[33, 35], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.TVClass.__init__": [[39, 46], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sigSize", ",", "tau", ",", "sigma", ",", "bc", "=", "'reflexive'", ",", "bounds", "=", "np", ".", "array", "(", "[", "-", "math", ".", "inf", ",", "math", ".", "inf", "]", ")", ",", "maxiter", "=", "100", ")", ":", "\n", "        ", "self", ".", "sigSize", "=", "sigSize", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "bc", "=", "bc", "\n", "self", ".", "bounds", "=", "bounds", "\n", "self", ".", "maxiter", "=", "maxiter", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.TVClass.init": [[47, 51], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "num_blocks", ",", "block_size", ")", ":", "\n", "        ", "p", "=", "np", ".", "zeros", "(", "(", "num_blocks", ",", "block_size", ",", "block_size", ",", "2", ")", ")", "\n", "pfull", "=", "np", ".", "zeros", "(", "(", "self", ".", "sigSize", "[", "0", "]", ",", "self", ".", "sigSize", "[", "1", "]", ",", "2", ")", ")", "\n", "return", "p", ",", "pfull", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.TVClass.eval": [[52, 59], ["numpy.array", "numpy.array", "scipy.ndimage.filters.correlate", "scipy.ndimage.filters.correlate", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.power", "numpy.power", "numpy.absolute", "numpy.absolute"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "filter1", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "-", "1", "]", ",", "[", "1", "]", "]", ")", "\n", "filter2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "1", "]", "]", ")", "\n", "dx", "=", "scipy", ".", "ndimage", ".", "filters", ".", "correlate", "(", "x", ",", "filter1", ",", "mode", "=", "'wrap'", ")", "\n", "dy", "=", "scipy", ".", "ndimage", ".", "filters", ".", "correlate", "(", "x", ",", "filter2", ",", "mode", "=", "'wrap'", ")", "\n", "r", "=", "self", ".", "sigma", "*", "np", ".", "sum", "(", "np", ".", "sum", "(", "np", ".", "sqrt", "(", "np", ".", "power", "(", "np", ".", "absolute", "(", "dx", ")", ",", "2", ")", "+", "np", ".", "power", "(", "np", ".", "absolute", "(", "dy", ")", ",", "2", ")", ")", ")", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.TVClass.red": [[60, 70], ["denoiseTV"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.denoiseTV"], ["", "def", "red", "(", "self", ",", "s", ",", "step", ",", "pin", ",", "useNoise", "=", "None", ",", "extend_p", "=", "None", ")", ":", "\n", "        ", "extend_p", "=", "0", "if", "extend_p", "is", "None", "else", "extend_p", "\n", "padded_x", ",", "padded_y", "=", "s", ".", "shape", "\n", "patch_x", "=", "padded_x", "-", "extend_p", "*", "2", "\n", "patch_y", "=", "padded_y", "-", "extend_p", "*", "2", "\n", "\n", "[", "x", ",", "pout", ",", "_", ",", "_", "]", "=", "denoiseTV", "(", "s", ",", "self", ".", "sigma", "/", "self", ".", "tau", ",", "pin", ",", "bc", "=", "self", ".", "bc", ",", "maxiter", "=", "self", ".", "maxiter", ",", "bounds", "=", "self", ".", "bounds", ")", "\n", "noise", "=", "self", ".", "tau", "*", "(", "s", "-", "x", ")", "\n", "noise", "=", "noise", "if", "extend_p", "is", "None", "else", "noise", "[", "extend_p", ":", "extend_p", "+", "patch_x", ",", "extend_p", ":", "extend_p", "+", "patch_y", "]", "\n", "return", "noise", ",", "pout", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.TVClass.prox": [[71, 74], ["denoiseTV"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.denoiseTV"], ["", "def", "prox", "(", "self", ",", "z", ",", "step", ",", "pin", ")", ":", "\n", "        ", "[", "x", ",", "pout", ",", "_", ",", "_", "]", "=", "denoiseTV", "(", "z", ",", "step", "*", "self", ".", "tau", ",", "pin", ",", "bc", "=", "self", ".", "bc", ",", "maxiter", "=", "self", ".", "maxiter", ",", "bounds", "=", "self", ".", "bounds", ")", "\n", "return", "x", ",", "pout", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.TVClass.name": [[75, 77], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'TV'", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.__init__": [[89, 122], ["tensorflow.reset_default_graph", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "dncnn", "tensorflow.reduce_max", "robjects_tf.DnCNNClass._get_vars", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.Session", "tensorflow.global_variables_initializer", "robjects_tf.DnCNNClass.sess.run", "robjects_tf.DnCNNClass.restore"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.nets_tf.dncnn", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass._get_vars", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.restore"], ["def", "__init__", "(", "self", ",", "sigSize", ",", "tau", ",", "model_path", ",", "img_channels", "=", "1", ",", "truth_channels", "=", "1", ")", ":", "\n", "        ", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "# basic variables", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "truth_channels", "=", "truth_channels", "\n", "self", ".", "tau", "=", "tau", "\n", "\n", "# reused variables", "\n", "self", ".", "nx", "=", "sigSize", "[", "0", "]", "\n", "self", ".", "ny", "=", "sigSize", "[", "1", "]", "\n", "\n", "# placeholders for input x and y", "\n", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "None", ",", "None", ",", "self", ".", "img_channels", "]", ")", "\n", "self", ".", "y", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "shape", "=", "[", "None", ",", "None", ",", "None", ",", "self", ".", "truth_channels", "]", ")", "\n", "self", ".", "phase", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'phase'", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "#dropout (keep probability)", "\n", "\n", "# variables need to be calculated", "\n", "self", ".", "recons", ",", "self", ".", "input_shape_of_conv_layer", "=", "dncnn", "(", "self", ".", "x", ")", "# use simple version of DnCNN", "\n", "\n", "self", ".", "amax", "=", "tf", ".", "reduce_max", "(", "self", ".", "recons", ")", "\n", "self", ".", "vars", "=", "self", ".", "_get_vars", "(", ")", "\n", "self", ".", "convolutional_operators", "=", "[", "v", "for", "v", "in", "self", ".", "vars", "if", "'kernel:'", "in", "v", ".", "name", "]", "\n", "\n", "# load pretrained net to sess", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "per_process_gpu_memory_fraction", "=", "0.4", "\n", "session", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "self", ".", "restore", "(", "self", ".", "sess", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass._get_vars": [[123, 128], ["tensorflow.global_variables", "lst_vars.append"], "methods", ["None"], ["", "def", "_get_vars", "(", "self", ")", ":", "\n", "        ", "lst_vars", "=", "[", "]", "\n", "for", "v", "in", "tf", ".", "global_variables", "(", ")", ":", "\n", "            ", "lst_vars", ".", "append", "(", "v", ")", "\n", "", "return", "lst_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.init": [[129, 132], ["numpy.zeros"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "dummy1", ",", "dummy2", ")", ":", "\n", "        ", "p", "=", "np", ".", "zeros", "(", "[", "self", ".", "nx", ",", "self", ".", "ny", "]", ")", "\n", "return", "p", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.red": [[133, 157], ["len", "numpy.expand_dims", "robjects_tf.DnCNNClass.sess.run", "numpy.expand_dims", "len", "numpy.expand_dims", "robjects_tf.DnCNNClass.sess.run", "print", "exit", "robjects_tf.DnCNNClass.squeeze", "robjects_tf.DnCNNClass.squeeze"], "methods", ["None"], ["", "def", "red", "(", "self", ",", "s", ",", "step", ",", "pin", ",", "useNoise", "=", "False", ",", "extend_p", "=", "None", ",", "prob", "=", "1.", ",", "phase", "=", "False", ")", ":", "\n", "        ", "if", "len", "(", "s", ".", "shape", ")", "==", "2", ":", "\n", "# reshape", "\n", "            ", "stemp", "=", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "s", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", "\n", "xtemp", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "recons", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "stemp", ",", "\n", "self", ".", "keep_prob", ":", "prob", ",", "\n", "self", ".", "phase", ":", "phase", "}", ")", "\n", "", "elif", "len", "(", "s", ".", "shape", ")", "==", "3", ":", "\n", "# reshape", "\n", "            ", "stemp", "=", "np", ".", "expand_dims", "(", "s", ",", "axis", "=", "-", "1", ")", "\n", "xtemp", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "recons", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "stemp", ",", "\n", "self", ".", "keep_prob", ":", "prob", ",", "\n", "self", ".", "phase", ":", "phase", "}", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Incorrect s.shape'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "if", "useNoise", ":", "\n", "            ", "noise", "=", "self", ".", "tau", "*", "xtemp", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "            ", "noise", "=", "self", ".", "tau", "*", "(", "s", "-", "xtemp", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "noise", "=", "noise", "if", "extend_p", "is", "None", "else", "noise", "[", "extend_p", ":", "extend_p", "+", "40", ",", "extend_p", ":", "extend_p", "+", "40", "]", "\n", "return", "noise", ",", "pin", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.prox": [[158, 178], ["len", "numpy.expand_dims", "robjects_tf.DnCNNClass.sess.run", "robjects_tf.DnCNNClass.squeeze", "numpy.expand_dims", "len", "numpy.expand_dims", "robjects_tf.DnCNNClass.sess.run", "print", "exit"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "s", ",", "step", ",", "pin", ",", "prob", "=", "1.", ",", "phase", "=", "False", ")", ":", "\n", "        ", "if", "len", "(", "s", ".", "shape", ")", "==", "2", ":", "\n", "# reshape", "\n", "            ", "s", "=", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "s", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", "\n", "xtemp", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "recons", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "s", ",", "\n", "self", ".", "keep_prob", ":", "prob", ",", "\n", "self", ".", "phase", ":", "phase", "}", ")", "\n", "\n", "", "elif", "len", "(", "s", ".", "shape", ")", "==", "3", ":", "\n", "# reshape", "\n", "            ", "s", "=", "np", ".", "expand_dims", "(", "s", ",", "axis", "=", "-", "1", ")", "\n", "xtemp", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "recons", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "s", ",", "\n", "self", ".", "keep_prob", ":", "prob", ",", "\n", "self", ".", "phase", ":", "phase", "}", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Incorrect s.shape'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "return", "xtemp", ".", "squeeze", "(", ")", ",", "pin", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.eval": [[179, 181], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.name": [[182, 184], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'DnCNN'", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.restore": [[185, 189], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "logging.info"], "methods", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.robjects_tf.DnCNNClass.restore"], ["", "def", "restore", "(", "self", ",", "sess", ",", "model_path", ")", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "self", ".", "vars", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "model_path", ")", "\n", "logging", ".", "info", "(", "\"Model restored from file: %s\"", "%", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.denoiseTV": [[11, 111], ["numpy.array", "denoiseTV.project", "print", "print", "print", "print", "print", "numpy.array", "range", "denoiseTV.Lipschitz", "denoiseTV.projectL2", "numpy.array", "numpy.array", "range", "numpy.linalg.norm", "numpy.linalg.norm", "denoiseTV.projectL2", "denoiseTV.AdjTVOp2D", "denoiseTV.AdjTVOp2D", "denoiseTV.TVOp2D", "projectL2.flatten", "numpy.sqrt", "denoiseTV.project", "denoiseTV.cost", "denoiseTV.dualcost", "print", "denoiseTV.project", "denoiseTV.cost", "denoiseTV.dualcost", "print", "numpy.linalg.norm", "numpy.linalg.norm", "denoiseTV.project", "projectL2.flatten", "np.array.flatten", "numpy.log10", "denoiseTV.AdjTVOp2D", "denoiseTV.TVOp2D", "denoiseTV.project", "denoiseTV.cost", "denoiseTV.dualcost", "print", "denoiseTV.project", "denoiseTV.cost", "denoiseTV.dualcost", "print", "denoiseTV.AdjTVOp2D", "denoiseTV.AdjTVOp2D", "denoiseTV.project", "numpy.log10", "numpy.power", "numpy.linalg.norm", "numpy.linalg.norm", "denoiseTV.AdjTVOp2D", "denoiseTV.AdjTVOp2D", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.project", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.Lipschitz", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.projectL2", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.projectL2", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.AdjTVOp2D", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.AdjTVOp2D", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.TVOp2D", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.project", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.cost", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.dualcost", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.project", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.cost", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.dualcost", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.project", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.AdjTVOp2D", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.TVOp2D", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.project", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.cost", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.dualcost", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.project", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.cost", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.dualcost", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.AdjTVOp2D", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.AdjTVOp2D", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.project", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.AdjTVOp2D", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.AdjTVOp2D"], ["def", "denoiseTV", "(", "y", ",", "lambd", ",", "pin", ",", "maxiter", "=", "100", ",", "L", "=", "8", ",", "tol", "=", "1e-5", ",", "optim", "=", "'fgp'", ",", "verbose", "=", "False", ",", "img", "=", "np", ".", "array", "(", "[", "]", ")", ",", "bounds", "=", "[", "-", "math", ".", "inf", ",", "math", ".", "inf", "]", ",", "bc", "=", "'reflexive'", ")", ":", "\n", "    ", "P", "=", "pin", "\n", "\n", "if", "L", "==", "0", ":", "\n", "        ", "L", "=", "Lipschitz", "(", "y", ")", "/", "1.25", "\n", "\n", "", "count", "=", "0", "\n", "flag", "=", "False", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'******************************************\\n'", ")", "\n", "print", "(", "'**     Denoising with TV Regularizer    **\\n'", ")", "\n", "print", "(", "'******************************************\\n'", ")", "\n", "print", "(", "'#iter     relative-dif   \\t fun_val         Duality Gap    \\t   ISNR\\n'", ")", "\n", "print", "(", "'====================================================================\\n'", ")", "\n", "\n", "", "if", "optim", "==", "'fgp'", ":", "\n", "        ", "t", "=", "1", "\n", "F", "=", "np", ".", "array", "(", "P", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "maxiter", "+", "1", ")", ":", "\n", "            ", "K", "=", "y", "-", "lambd", "*", "AdjTVOp2D", "(", "F", ",", "bc", ")", "\n", "Pnew", "=", "F", "+", "(", "1", "/", "(", "L", "*", "lambd", ")", ")", "*", "TVOp2D", "(", "project", "(", "K", ",", "bounds", ")", ",", "bc", ")", "\n", "Pnew", "=", "projectL2", "(", "Pnew", ")", "\n", "\n", "re", "=", "np", ".", "linalg", ".", "norm", "(", "Pnew", ".", "flatten", "(", "'F'", ")", "-", "P", ".", "flatten", "(", "'F'", ")", ")", "/", "np", ".", "linalg", ".", "norm", "(", "Pnew", ".", "flatten", "(", "'F'", ")", ")", "\n", "if", "re", "<", "tol", ":", "\n", "                ", "count", "=", "count", "+", "1", "\n", "", "else", ":", "\n", "                ", "count", "=", "0", "\n", "\n", "", "tnew", "=", "(", "1", "+", "np", ".", "sqrt", "(", "1", "+", "4", "*", "np", ".", "power", "(", "t", ",", "2", ")", ")", ")", "/", "2", "\n", "F", "=", "np", ".", "array", "(", "Pnew", "+", "(", "t", "-", "1", ")", "/", "tnew", "*", "(", "Pnew", "-", "P", ")", ")", "\n", "P", "=", "np", ".", "array", "(", "Pnew", ")", "\n", "t", "=", "tnew", "\n", "\n", "if", "verbose", ":", "\n", "                ", "if", "img", ".", "size", "==", "0", ":", "\n", "                    ", "k", "=", "y", "-", "lambd", "*", "AdjTVOp2D", "(", "P", ",", "bc", ")", "\n", "x", "=", "project", "(", "k", ",", "bounds", ")", "\n", "fun_val", ",", "_", "=", "cost", "(", "y", ",", "x", ",", "lambd", ",", "bc", ")", "\n", "dual_fun_val", "=", "dualcost", "(", "y", ",", "k", ",", "bounds", ")", "\n", "dual_gap", "=", "(", "fun_val", "-", "dual_fun_val", ")", "\n", "print", "(", "\"{} \\t {} \\t {} \\t {}\"", ".", "format", "(", "i", ",", "re", ",", "fun_val", ",", "dual_gap", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "k", "=", "y", "-", "lambd", "*", "AdjTVOp2D", "(", "P", ",", "bc", ")", "\n", "x", "=", "project", "(", "k", ",", "bounds", ")", "\n", "fun_val", "=", "cost", "(", "y", ",", "x", ",", "lambd", ",", "bc", ")", "\n", "dual_fun_val", "=", "dualcost", "(", "y", ",", "k", ",", "bounds", ")", "\n", "dual_gap", "=", "(", "fun_val", "-", "dual_fun_val", ")", "\n", "ISNR", "=", "20", "*", "np", ".", "log10", "(", "np", ".", "linalg", ".", "norm", "(", "y", "-", "img", ",", "ord", "=", "'fro'", ")", "/", "np", ".", "linalg", ".", "norm", "(", "x", "-", "img", ",", "ord", "=", "'fro'", ")", ")", "\n", "print", "(", "\"%3d \\t \"", "%", "(", "i", ")", "+", "\"%10.5f \\t \"", "%", "(", "re", ")", "+", "\"%10.5f \\t \"", "%", "(", "fun_val", ")", "+", "\"%2.8f \\t \"", "%", "(", "dual_gap", ")", "+", "\"%2.8f\\n\"", "%", "(", "ISNR", ")", ")", "\n", "\n", "", "", "if", "count", ">=", "5", ":", "\n", "                ", "flag", "=", "True", "\n", "itera", "=", "i", "\n", "break", "\n", "\n", "", "", "", "elif", "optim", "==", "'gp'", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "maxiter", "+", "1", ")", ":", "\n", "\n", "            ", "K", "=", "y", "-", "lambd", "*", "AdjTVOp2D", "(", "P", ",", "bc", ")", "\n", "Pnew", "=", "P", "+", "(", "1", "/", "(", "L", "*", "lambd", ")", ")", "*", "TVOp2D", "(", "project", "(", "K", ",", "bounds", ")", ",", "bc", ")", "\n", "Pnew", "=", "projectL2", "(", "Pnew", ")", ";", "\n", "\n", "re", "=", "np", ".", "linalg", ".", "norm", "(", "Pnew", "[", ":", "]", "-", "P", "[", ":", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "Pnew", "[", ":", "]", ")", "\n", "if", "re", "<", "tol", ":", "\n", "                ", "count", "=", "count", "+", "1", "\n", "", "else", ":", "\n", "                ", "count", "=", "0", "\n", "\n", "", "P", "=", "Pnew", "\n", "\n", "if", "verbose", ":", "\n", "                ", "if", "img", ".", "size", "==", "0", ":", "\n", "                    ", "k", "=", "y", "-", "lambd", "*", "AdjTVOp2D", "(", "P", ",", "bc", ")", "\n", "x", "=", "project", "(", "k", ",", "bounds", ")", "\n", "fun_val", ",", "_", "=", "cost", "(", "y", ",", "x", ",", "lambd", ",", "bc", ")", "\n", "dual_fun_val", "=", "dualcost", "(", "y", ",", "k", ",", "bounds", ")", "\n", "dual_gap", "=", "(", "fun_val", "-", "dual_fun_val", ")", "\n", "print", "(", "\"{} \\t {} \\t {} \\t {}\"", ".", "format", "(", "i", ",", "re", ",", "fun_val", ",", "dual_gap", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "k", "=", "y", "-", "lambd", "*", "AdjTVOp2D", "(", "P", ",", "bc", ")", "\n", "x", "=", "project", "(", "k", ",", "bounds", ")", "\n", "fun_val", "=", "cost", "(", "y", ",", "x", ",", "lambd", ",", "bc", ")", "\n", "dual_fun_val", "=", "dualcost", "(", "y", ",", "k", ",", "bounds", ")", "\n", "dual_gap", "=", "(", "fun_val", "-", "dual_fun_val", ")", "\n", "ISNR", "=", "20", "*", "np", ".", "log10", "(", "np", ".", "linalg", ".", "norm", "(", "y", "-", "img", ",", "ord", "=", "'fro'", ")", "/", "np", ".", "linalg", ".", "norm", "(", "x", "-", "img", ",", "ord", "=", "'fro'", ")", ")", "\n", "print", "(", "\"%3d \\t \"", "%", "(", "i", ")", "+", "\"%10.5f \\t \"", "%", "(", "re", ")", "+", "\"%10.5f \\t \"", "%", "(", "fun_val", ")", "+", "\"%2.8f \\t \"", "%", "(", "dual_gap", ")", "+", "\"%2.8f\\n\"", "%", "(", "ISNR", ")", ")", "\n", "\n", "", "", "if", "count", ">=", "5", ":", "\n", "                ", "flag", "=", "True", "\n", "itera", "=", "i", "\n", "break", "\n", "\n", "", "", "", "if", "not", "flag", ":", "\n", "        ", "itera", "=", "maxiter", "\n", "", "x", "=", "project", "(", "y", "-", "lambd", "*", "AdjTVOp2D", "(", "P", ",", "bc", ")", ",", "bounds", ")", "\n", "return", "x", ",", "P", ",", "itera", ",", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.TVOp2D": [[113, 121], ["numpy.array", "numpy.array", "numpy.zeros", "scipy.ndimage.filters.correlate", "scipy.ndimage.filters.correlate"], "function", ["None"], ["", "def", "TVOp2D", "(", "f", ",", "bc", ")", ":", "\n", "    ", "filter1", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "-", "1", "]", ",", "[", "1", "]", "]", ")", "\n", "filter2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "1", "]", "]", ")", "\n", "[", "r", ",", "c", "]", "=", "f", ".", "shape", "\n", "Df", "=", "np", ".", "zeros", "(", "[", "r", ",", "c", ",", "2", "]", ")", "\n", "Df", "[", ":", ",", ":", ",", "0", "]", "=", "scipy", ".", "ndimage", ".", "filters", ".", "correlate", "(", "f", ",", "filter1", ",", "mode", "=", "'wrap'", ")", "\n", "Df", "[", ":", ",", ":", ",", "1", "]", "=", "scipy", ".", "ndimage", ".", "filters", ".", "correlate", "(", "f", ",", "filter2", ",", "mode", "=", "'wrap'", ")", "\n", "return", "Df", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.AdjTVOp2D": [[123, 132], ["numpy.array", "numpy.array", "scipy.ndimage.filters.correlate", "scipy.ndimage.filters.correlate"], "function", ["None"], ["", "def", "AdjTVOp2D", "(", "P", ",", "bc", ")", ":", "\n", "    ", "filter1", "=", "np", ".", "array", "(", "[", "[", "1", "]", ",", "[", "-", "1", "]", ",", "[", "0", "]", "]", ")", "\n", "filter2", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "1", ",", "0", "]", "]", ")", "\n", "P1", "=", "P", "[", ":", ",", ":", ",", "0", "]", "\n", "P1", "=", "scipy", ".", "ndimage", ".", "filters", ".", "correlate", "(", "P1", ",", "filter1", ",", "mode", "=", "'wrap'", ")", "\n", "P2", "=", "P", "[", ":", ",", ":", ",", "1", "]", "\n", "P2", "=", "scipy", ".", "ndimage", ".", "filters", ".", "correlate", "(", "P2", ",", "filter2", ",", "mode", "=", "'wrap'", ")", "\n", "g", "=", "P1", "+", "P2", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.projectL2": [[134, 137], ["numpy.divide", "numpy.tile", "numpy.maximum", "numpy.sqrt", "numpy.sum", "numpy.power"], "function", ["None"], ["", "def", "projectL2", "(", "B", ")", ":", "\n", "    ", "PB", "=", "np", ".", "divide", "(", "B", ",", "np", ".", "tile", "(", "np", ".", "maximum", "(", "1", ",", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "B", ",", "2", ")", ",", "2", ")", ")", ")", "[", "...", ",", "None", "]", ",", "(", "1", ",", "1", ",", "2", ")", ")", ")", "\n", "return", "PB", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.project": [[139, 155], ["numpy.array", "numpy.isfinite", "numpy.array", "numpy.isfinite", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "project", "(", "x", ",", "bounds", ")", ":", "\n", "    ", "lb", "=", "bounds", "[", "0", "]", "\n", "ub", "=", "bounds", "[", "1", "]", "\n", "if", "lb", "==", "-", "math", ".", "inf", "and", "ub", "==", "math", ".", "inf", ":", "\n", "        ", "Px", "=", "np", ".", "array", "(", "x", ")", "\n", "", "elif", "lb", "==", "-", "math", ".", "inf", "and", "np", ".", "isfinite", "(", "ub", ")", ":", "\n", "        ", "x", "[", "x", ">", "ub", "]", "=", "ub", "\n", "Px", "=", "np", ".", "array", "(", "x", ")", "\n", "", "elif", "ub", "==", "math", ".", "inf", "and", "np", ".", "isfinite", "(", "lb", ")", ":", "\n", "        ", "x", "[", "x", "<", "lb", "]", "=", "lb", "\n", "Px", "=", "np", ".", "array", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "x", "[", "x", "<", "lb", "]", "=", "lb", "\n", "x", "[", "x", ">", "ub", "]", "=", "ub", "\n", "Px", "=", "np", ".", "array", "(", "x", ")", "\n", "", "return", "Px", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.cost": [[157, 166], ["numpy.array", "numpy.array", "scipy.ndimage.filters.correlate", "scipy.ndimage.filters.correlate", "numpy.sqrt", "numpy.sum", "numpy.power", "numpy.power", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cost", "(", "y", ",", "f", ",", "lambd", ",", "bc", ")", ":", "\n", "    ", "filter1", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "-", "1", "]", ",", "[", "1", "]", "]", ")", "\n", "filter2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "1", "]", "]", ")", "\n", "fx", "=", "scipy", ".", "ndimage", ".", "filters", ".", "correlate", "(", "f", ",", "filter1", ",", "mode", "=", "'wrap'", ")", "\n", "fy", "=", "scipy", ".", "ndimage", ".", "filters", ".", "correlate", "(", "f", ",", "filter2", ",", "mode", "=", "'wrap'", ")", "\n", "TVf", "=", "np", ".", "sqrt", "(", "np", ".", "power", "(", "fx", ",", "2", ")", "+", "np", ".", "power", "(", "fy", ",", "2", ")", ")", "\n", "TVnorm", "=", "np", ".", "sum", "(", "TVf", "[", ":", "]", ")", "\n", "Q", "=", "0.5", "*", "np", ".", "linalg", ".", "norm", "(", "y", "-", "f", ",", "ord", "=", "'fro'", ")", "**", "2", "+", "lambd", "*", "TVnorm", "\n", "return", "Q", ",", "TVnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.dualcost": [[168, 172], ["denoiseTV.project", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.power", "numpy.power", "numpy.power"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.project"], ["", "def", "dualcost", "(", "y", ",", "f", ",", "bounds", ")", ":", "\n", "    ", "r", "=", "f", "-", "project", "(", "f", ",", "bounds", ")", "\n", "Q", "=", "0.5", "*", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "r", "[", ":", "]", ",", "2", ")", ")", "+", "np", ".", "sum", "(", "np", ".", "power", "(", "y", "[", ":", "]", ",", "2", ")", ")", "-", "np", ".", "sum", "(", "np", ".", "power", "(", "f", "[", ":", "]", ",", "2", ")", ")", ")", "\n", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.denoiseTV.Lipschitz": [[174, 189], ["numpy.zeros", "numpy.array", "np.roll.transpose", "numpy.roll", "numpy.roll", "numpy.roll", "numpy.roll", "numpy.max", "numpy.absolute", "numpy.absolute", "numpy.power", "numpy.power", "numpy.fft.fft2", "numpy.fft.fft2"], "function", ["None"], ["", "def", "Lipschitz", "(", "y", ")", ":", "\n", "    ", "[", "r", ",", "c", "]", "=", "y", ".", "shape", "\n", "hx", "=", "np", ".", "zeros", "(", "[", "3", ",", "3", "]", ")", "\n", "hx", "[", ":", ",", "1", "]", "=", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "0", "]", ")", "\n", "hy", "=", "hx", ".", "transpose", "(", ")", "\n", "hx", "[", "r", "-", "1", ",", "c", "-", "1", "]", "=", "0", "\n", "hy", "[", "r", "-", "1", ",", "c", "-", "1", "]", "=", "0", "\n", "hx", "=", "np", ".", "roll", "(", "hx", ",", "-", "1", ",", "axis", "=", "1", ")", "\n", "hx", "=", "np", ".", "roll", "(", "hx", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "hy", "=", "np", ".", "roll", "(", "hy", ",", "-", "1", ",", "axis", "=", "1", ")", "\n", "hy", "=", "np", ".", "roll", "(", "hy", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "\n", "Op_eig", "=", "np", ".", "absolute", "(", "np", ".", "power", "(", "np", ".", "fft", ".", "fft2", "(", "hx", ")", ",", "2", ")", ")", "+", "np", ".", "absolute", "(", "np", ".", "power", "(", "np", ".", "fft", ".", "fft2", "(", "hy", ")", ",", "2", ")", ")", "\n", "L", "=", "np", ".", "max", "(", "Op_eig", "[", ":", "]", ")", "\n", "return", "L", "", "", ""]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.log": [[6, 10], ["tensorflow.log", "tensorflow.log", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.log", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.log"], ["def", "log", "(", "x", ",", "base", ")", ":", "\n", "    ", "numerator", "=", "tf", ".", "log", "(", "x", ")", "\n", "denominator", "=", "tf", ".", "log", "(", "tf", ".", "constant", "(", "base", ",", "dtype", "=", "numerator", ".", "dtype", ")", ")", "\n", "return", "numerator", "/", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.weight_variable": [[11, 14], ["tensorflow.truncated_normal", "tensorflow.Variable"], "function", ["None"], ["", "def", "weight_variable", "(", "shape", ",", "name", "=", "'weight'", ",", "stddev", "=", "0.1", ")", ":", "\n", "    ", "initial", "=", "tf", ".", "truncated_normal", "(", "shape", ",", "stddev", "=", "stddev", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.rescale": [[15, 21], ["tensorflow.reduce_max", "tensorflow.reduce_min"], "function", ["None"], ["", "def", "rescale", "(", "array_x", ")", ":", "# convert to [0,1]", "\n", "    ", "amax", "=", "tf", ".", "reduce_max", "(", "array_x", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "amin", "=", "tf", ".", "reduce_min", "(", "array_x", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "rescaled", "=", "array_x", "-", "amin", "\n", "rescaled", "=", "rescaled", "/", "amax", "\n", "return", "rescaled", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.mse_array": [[24, 30], ["tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.scalar_mul", "tensorflow.squared_difference"], "function", ["None"], ["", "def", "mse_array", "(", "array_x", ",", "array_y", ",", "size", ")", ":", "\n", "    ", "rescale_x", "=", "array_x", "\n", "rescale_y", "=", "array_y", "\n", "se", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "squared_difference", "(", "rescale_x", ",", "rescale_y", ")", ",", "1", ")", "\n", "inv_size", "=", "tf", ".", "to_float", "(", "1", "/", "size", ")", "\n", "return", "tf", ".", "scalar_mul", "(", "inv_size", ",", "se", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d_bn_relu": [[35, 43], ["tensorflow.contrib.layers.conv2d", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d"], ["", "def", "conv2d_bn_relu", "(", "x", ",", "w_size", ",", "num_outputs", ",", "keep_prob_", ",", "phase", ",", "scope", ")", ":", "# output size should be the same.", "\n", "    ", "conv_2d", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "x", ",", "num_outputs", ",", "w_size", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "# elu is an alternative", "\n", "normalizer_fn", "=", "tf", ".", "layers", ".", "batch_normalization", ",", "\n", "normalizer_params", "=", "{", "'training'", ":", "phase", "}", ",", "\n", "scope", "=", "scope", ")", "\n", "\n", "return", "tf", ".", "nn", ".", "dropout", "(", "conv_2d", ",", "keep_prob_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.deconv2d_bn_relu": [[44, 53], ["tensorflow.contrib.layers.conv2d_transpose", "tensorflow.nn.dropout"], "function", ["None"], ["", "def", "deconv2d_bn_relu", "(", "x", ",", "w_size", ",", "num_outputs", ",", "stride", ",", "keep_prob_", ",", "phase", ",", "scope", ")", ":", "\n", "    ", "conv_2d", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d_transpose", "(", "x", ",", "num_outputs", ",", "w_size", ",", "\n", "stride", "=", "stride", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "# elu is an alternative", "\n", "normalizer_fn", "=", "tf", ".", "layers", ".", "batch_normalization", ",", "\n", "normalizer_params", "=", "{", "'training'", ":", "phase", "}", ",", "\n", "scope", "=", "scope", ")", "\n", "\n", "return", "tf", ".", "nn", ".", "dropout", "(", "conv_2d", ",", "keep_prob_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d_relu": [[54, 59], ["tensorflow.contrib.layers.conv2d", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d"], ["", "def", "conv2d_relu", "(", "x", ",", "w_size", ",", "num_outputs", ",", "keep_prob_", ",", "scope", ")", ":", "\n", "    ", "conv_2d", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "x", ",", "num_outputs", ",", "w_size", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "scope", "=", "scope", ")", "\n", "return", "tf", ".", "nn", ".", "dropout", "(", "conv_2d", ",", "keep_prob_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d_bn": [[60, 67], ["tensorflow.contrib.layers.conv2d", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d"], ["", "def", "conv2d_bn", "(", "x", ",", "w_size", ",", "num_outputs", ",", "keep_prob_", ",", "phase", ",", "scope", ")", ":", "\n", "    ", "conv_2d", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "x", ",", "num_outputs", ",", "w_size", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "tf", ".", "layers", ".", "batch_normalization", ",", "\n", "normalizer_params", "=", "{", "'training'", ":", "phase", "}", ",", "\n", "scope", "=", "scope", ")", "\n", "return", "tf", ".", "nn", ".", "dropout", "(", "conv_2d", ",", "keep_prob_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d": [[68, 74], ["tensorflow.contrib.layers.conv2d", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d"], ["", "def", "conv2d", "(", "x", ",", "w_size", ",", "num_outputs", ",", "keep_prob_", ",", "scope", ")", ":", "\n", "    ", "conv_2d", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "x", ",", "num_outputs", ",", "w_size", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "scope", "=", "scope", ")", "\n", "return", "tf", ".", "nn", ".", "dropout", "(", "conv_2d", ",", "keep_prob_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.max_pool": [[75, 77], ["tensorflow.nn.max_pool"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.max_pool"], ["", "def", "max_pool", "(", "x", ",", "n", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "max_pool", "(", "x", ",", "ksize", "=", "[", "1", ",", "n", ",", "n", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "n", ",", "n", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.concat": [[78, 80], ["tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.concat"], ["", "def", "concat", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "return", "tf", ".", "concat", "(", "[", "x1", ",", "x2", "]", ",", "3", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.nets_tf.dncnn": [[14, 28], ["range", "tensorflow.variable_scope", "input_shape_of_conv_layer.append", "tensorflow.layers.conv2d", "tensorflow.variable_scope", "input_shape_of_conv_layer.append", "tensorflow.layers.conv2d", "tensorflow.variable_scope", "input_shape_of_conv_layer.append", "tensorflow.layers.conv2d", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d", "home.repos.pwc.inspect_result.wustl-cig_bcred.Regularizers.layers_tf.conv2d"], ["def", "dncnn", "(", "input", ",", "output_channels", "=", "1", ")", ":", "\n", "    ", "input_shape_of_conv_layer", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'block1'", ")", ":", "\n", "        ", "input_shape_of_conv_layer", ".", "append", "(", "[", "input", ".", "shape", "[", "1", "]", ",", "input", ".", "shape", "[", "2", "]", "]", ")", "\n", "output", "=", "tf", ".", "layers", ".", "conv2d", "(", "input", ",", "64", ",", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "", "for", "layers", "in", "range", "(", "2", ",", "6", "+", "1", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'block%d'", "%", "layers", ")", ":", "\n", "            ", "input_shape_of_conv_layer", ".", "append", "(", "[", "input", ".", "shape", "[", "1", "]", ",", "input", ".", "shape", "[", "2", "]", "]", ")", "\n", "output", "=", "tf", ".", "layers", ".", "conv2d", "(", "output", ",", "64", ",", "3", ",", "padding", "=", "'same'", ",", "name", "=", "'conv%d'", "%", "layers", ",", "use_bias", "=", "True", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'block7'", ")", ":", "\n", "        ", "input_shape_of_conv_layer", ".", "append", "(", "[", "input", ".", "shape", "[", "1", "]", ",", "input", ".", "shape", "[", "2", "]", "]", ")", "\n", "output", "=", "tf", ".", "layers", ".", "conv2d", "(", "output", ",", "output_channels", ",", "3", ",", "padding", "=", "'same'", ")", "\n", "", "return", "output", ",", "input_shape_of_conv_layer", "\n", "", ""]]}