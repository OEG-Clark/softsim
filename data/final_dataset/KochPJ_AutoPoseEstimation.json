{"home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.acquire_new_data_from_object": [[24, 145], ["data_generation.DepthCam", "list", "os.listdir", "print", "input", "input", "pipeline.utils.get_selection", "print", "print", "print", "input", "data_generation.get_data", "os.path.join", "print", "input", "print", "input", "print", "print", "bool", "os.listdir", "pipeline.utils.get_selection", "os.path.join", "os.listdir.index", "input", "open", "json.load().get", "int", "os.path.join", "print", "print", "json.load"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.data_generation.getData.get_data", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["def", "acquire_new_data_from_object", "(", ")", ":", "\n", "# create Depth Cam", "\n", "    ", "DC", "=", "data_gen", ".", "DepthCam", "(", "fps", "=", "30", ",", "height", "=", "480", ",", "width", "=", "640", ")", "\n", "#DC = None", "\n", "\n", "robot_path", "=", "'viewpointsPath3.json'", "\n", "\n", "turn_selection", "=", "[", "'no turns'", ",", "'Turn once 180\u00b0'", ",", "'Turn 3 x 90\u00b0'", "]", "\n", "names", "=", "list", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation/data'", ")", ")", ")", "\n", "turns", "=", "None", "\n", "symmetric", "=", "False", "\n", "runs", "=", "[", "]", "\n", "continue_at", "=", "0", "\n", "\n", "while", "True", ":", "\n", "        ", "print", "(", "'____________________________________________________________________'", ")", "\n", "name", "=", "input", "(", "'Enter name of the new object: '", ")", "\n", "if", "name", "in", "names", ":", "\n", "            ", "print", "(", "'A object with the name \"{}\" does already exist. Please find a different name.'", ".", "format", "(", "name", ")", ")", "\n", "continue_selection", "=", "[", "'True'", ",", "'False'", "]", "\n", "while", "True", ":", "\n", "                ", "continue_sel", "=", "input", "(", "'do you want to continue from a given run?'", ")", "\n", "if", "continue_sel", "not", "in", "continue_selection", ":", "\n", "                    ", "print", "(", "'input \"{}\" is not valid.'", ".", "format", "(", "symmetric", ")", ")", "\n", "continue", "\n", "", "elif", "continue_sel", "==", "'True'", ":", "\n", "                    ", "while", "True", ":", "\n", "                        ", "continue_at", "=", "input", "(", "'continue at run: '", ")", "\n", "try", ":", "\n", "                            ", "continue_at", "=", "int", "(", "continue_at", ")", "\n", "if", "continue_at", "<", "0", ":", "\n", "                                ", "print", "(", "'continue at \"{}\" can not be negative.'", ".", "format", "(", "continue_at", ")", ")", "\n", "continue", "\n", "", "break", "\n", "", "except", ":", "\n", "                            ", "print", "(", "'input \"{}\" is not valid'", ".", "format", "(", "continue_at", ")", ")", "\n", "continue", "\n", "", "", "break", "\n", "", "else", ":", "\n", "                    ", "continue_at", "=", "0", "\n", "break", "\n", "\n", "", "", "", "selection", "=", "input", "(", "\n", "'New Object Name is: \"{}\", type \"r\" to rename, \"b\" to return, or hit any other key to continue.'", ".", "format", "(", "\n", "name", ")", ")", "\n", "if", "selection", "==", "'r'", ":", "\n", "            ", "continue", "\n", "", "elif", "selection", "==", "'b'", ":", "\n", "            ", "return", "print", "(", "'Returning to Main Menu'", ")", "\n", "", "turns", "=", "get_selection", "(", "turn_selection", ",", "'Select if and how the object is Turned'", ")", "\n", "if", "not", "turns", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "symmetric_selection", "=", "[", "'True'", ",", "'False'", "]", "\n", "while", "True", ":", "\n", "\n", "                ", "symmetric", "=", "input", "(", "'Is the object symmetric? Type \"True\" or \"False\":'", ")", "\n", "if", "symmetric", "not", "in", "symmetric_selection", ":", "\n", "                    ", "print", "(", "'input \"{}\" is not valid.'", ".", "format", "(", "symmetric", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "symmetric", "=", "bool", "(", "symmetric", ")", "\n", "hand_eye_calibs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hand_eye_calibration'", ",", "'data'", ")", ")", "\n", "\n", "hand_eye_calibs", "=", "[", "cal", "for", "cal", "in", "hand_eye_calibs", "if", "'.json'", "in", "cal", "]", "\n", "if", "'meta.json'", "in", "hand_eye_calibs", ":", "\n", "                        ", "index", "=", "hand_eye_calibs", ".", "index", "(", "'meta.json'", ")", "\n", "del", "hand_eye_calibs", "[", "index", "]", "\n", "\n", "", "hand_eye_calibration", "=", "get_selection", "(", "hand_eye_calibs", ",", "'Select the current hand eye calibration'", ")", "\n", "if", "hand_eye_calibration", ":", "\n", "                        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hand_eye_calibration'", ",", "'data'", ",", "hand_eye_calibration", ")", ")", "as", "f", ":", "\n", "                            ", "hand_eye_calibration", "=", "json", ".", "load", "(", "f", ")", ".", "get", "(", "'tf'", ")", "\n", "", "break", "\n", "\n", "\n", "\n", "", "", "", "break", "\n", "\n", "", "", "if", "turns", "==", "turn_selection", "[", "0", "]", ":", "\n", "        ", "runs", "=", "[", "[", "'background'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "0", "}", ",", "\n", "'Getting Background. Clear the table.'", "]", ",", "\n", "[", "'foreground'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "0", "}", ",", "\n", "'Set the object into the table center.'", "]", "]", "\n", "", "elif", "turns", "==", "turn_selection", "[", "1", "]", ":", "\n", "        ", "runs", "=", "[", "[", "'background'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "0", "}", ",", "\n", "'Getting Background. Clear the table.'", "]", ",", "\n", "[", "'foreground'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "0", "}", ",", "\n", "'Set the object into the table center.'", "]", ",", "\n", "[", "'foreground180'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "180", "}", ",", "\n", "'Rotate the object \"180\u00b0\" around its vertical axis.'", "]", "]", "\n", "", "elif", "turns", "==", "turn_selection", "[", "2", "]", ":", "\n", "        ", "runs", "=", "[", "[", "'background'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "0", "}", ",", "\n", "'Getting Background. Clear the table.'", "]", ",", "\n", "[", "'foreground'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "0", "}", ",", "\n", "'Set the object into the table center.'", "]", ",", "\n", "[", "'foreground90'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "90", "}", ",", "\n", "'Rotate the object \"90\u00b0\" clock wise around its vertical axis. Total offset from start =  90\u00b0'", "]", ",", "\n", "[", "'foreground180'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "180", "}", ",", "\n", "'Rotate the object \"90\u00b0\" clock wise around its vertical axis. Total offset from start =  180\u00b0'", "]", ",", "\n", "[", "'foreground270'", ",", "\n", "{", "'x'", ":", "0", ",", "'y'", ":", "0", ",", "'z'", ":", "0", ",", "'a'", ":", "0", ",", "'b'", ":", "0", ",", "'c'", ":", "270", "}", ",", "\n", "'Rotate the object \"90\u00b0\" clock wise around its vertical axis. Total offset from start = 270\u00b0'", "]", "]", "\n", "\n", "\n", "", "for", "run", "in", "runs", "[", "continue_at", ":", "]", ":", "\n", "        ", "print", "(", "'____________________________________________________________________'", ")", "\n", "print", "(", "'Current name is: \"{}\"'", ".", "format", "(", "'{}/{}'", ".", "format", "(", "name", ",", "run", "[", "0", "]", ")", ")", ")", "\n", "print", "(", "'Instructions: {}.'", ".", "format", "(", "run", "[", "2", "]", ")", ")", "\n", "input", "(", "'Hit any key to continue if the instructions have been followed and leave the robots field of view.'", ")", "\n", "data_gen", ".", "get_data", "(", "DC", ",", "robot_path", ",", "name", ",", "run", "[", "0", "]", ",", "run", "[", "1", "]", ",", "symmetric", ",", "hand_eye_calibration", ")", "\n", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.create_labels": [[147, 237], ["sorted", "print", "os.listdir", "print", "pipeline.utils.get_selection", "input", "time.time", "print", "print", "elapsed_times.append", "os.path.join", "print", "isinstance", "print", "print", "os.path.join", "label_generator.load_point_cloud", "print", "label_generator.create_pose_label", "time.time", "len", "np.round", "np.round", "background_subtraction.utils.get_mask_prediction", "np.round", "np.sum", "np.mean", "pathlib.Path().resolve", "label_generator.create_labels", "print", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.load_point_cloud", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.create_labels.create_pose_label", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_mask_prediction", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.create_labels.create_labels"], ["", "def", "create_labels", "(", ")", ":", "\n", "    ", "names", "=", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ",", "'data_generation/data'", ")", ")", ")", "\n", "while", "True", ":", "\n", "        ", "print", "(", "'____________________________________________________________________'", ")", "\n", "object_names", "=", "get_selection", "(", "names", ",", "'Select the objects for which labels will be created. \\n '", "\n", "'you can select multiple objects by separating them with a \",\" '", "\n", "'(e.g. \"1,2\")'", ",", "multi_selection", "=", "True", ")", "\n", "if", "not", "object_names", ":", "\n", "            ", "return", "print", "(", "'Returning to Main Menu'", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "object_names", ",", "list", ")", ":", "\n", "            ", "object_names", "=", "[", "object_names", "]", "\n", "\n", "", "selection", "=", "input", "(", "\n", "'The Selected objects are: \"{}\", type \"r\" to reselect, or hit any other key to continue.'", ".", "format", "(", "object_names", ")", ")", "\n", "if", "selection", "==", "'r'", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "n_viewpoints", "=", "30", "\n", "min_friends", "=", "20", "\n", "min_dist", "=", "5", "\n", "nb_neighbors", "=", "20", "\n", "\n", "threshold", "=", "10", "\n", "voxel_size", "=", "2", "\n", "voxel_size_out", "=", "5", "\n", "\n", "l_arrow", "=", "75", "\n", "global_regression", "=", "False", "\n", "icp_point2point", "=", "True", "\n", "icp_point2plane", "=", "False", "\n", "mode", "=", "'pred'", "\n", "\n", "plot", "=", "False", "\n", "get_segmentation_labels", "=", "True", "\n", "get_target_point_cloud", "=", "False", "\n", "get_target_pose_label", "=", "False", "\n", "\n", "elapsed_times", "=", "[", "]", "\n", "for", "object_name", "in", "object_names", ":", "\n", "        ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Object name: {}'", ".", "format", "(", "object_name", ")", ")", "\n", "if", "get_segmentation_labels", ":", "\n", "            ", "print", "(", "'getting labels'", ")", "\n", "if", "mode", "==", "'pred'", ":", "\n", "                ", "get_mask_prediction", "(", "object_name", ",", "root", ",", "reference_point", "=", "reference_point", ",", "plot", "=", "plot", ",", "use_cuda", "=", "False", ")", "\n", "", "elif", "mode", "==", "'gen'", ":", "\n", "                ", "label_gen", ".", "create_labels", "(", "object_name", ",", "root", ",", "reference_point", ",", "plot", "=", "plot", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'mode not supported'", ")", "\n", "return", "False", "\n", "\n", "", "", "if", "get_target_point_cloud", ":", "\n", "            ", "print", "(", "'getting point cloud'", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pc_reconstruction/data'", ")", "\n", "label_gen", ".", "load_point_cloud", "(", "object_name", ",", "\n", "save_dir", ",", "\n", "root", ",", "\n", "reference_point", "=", "reference_point", ",", "\n", "mode", "=", "mode", ",", "\n", "n_viewpoints", "=", "n_viewpoints", ",", "\n", "min_friends", "=", "min_friends", ",", "\n", "min_dist", "=", "min_dist", ",", "\n", "nb_neighbors", "=", "nb_neighbors", ",", "\n", "threshold", "=", "threshold", ",", "\n", "voxel_size", "=", "voxel_size", ",", "\n", "voxel_size_out", "=", "voxel_size_out", ",", "\n", "l_arrow", "=", "l_arrow", ",", "\n", "global_regression", "=", "global_regression", ",", "\n", "icp_point2point", "=", "icp_point2point", ",", "\n", "icp_point2plane", "=", "icp_point2plane", ",", "\n", "plot", "=", "plot", ")", "\n", "\n", "", "if", "get_target_pose_label", ":", "\n", "            ", "print", "(", "'getting pose label'", ")", "\n", "label_gen", ".", "create_pose_label", "(", "root", ",", "\n", "object_name", ",", "\n", "global_regression", ",", "\n", "icp_point2point", ",", "\n", "icp_point2plane", ",", "\n", "plot", "=", "plot", ",", "\n", "view_label", "=", "plot", ",", "\n", "with_extra", "=", "False", ")", "\n", "", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "print", "(", "'elapsed time {} sec'", ".", "format", "(", "np", ".", "round", "(", "elapsed_time", ",", "2", ")", ")", ")", "\n", "elapsed_times", ".", "append", "(", "elapsed_time", ")", "\n", "", "print", "(", "'Elapsed time for \"{}\" objects: {} sec, with a per object time of: {} sec'", ".", "format", "(", "\n", "len", "(", "object_names", ")", ",", "np", ".", "round", "(", "np", ".", "sum", "(", "elapsed_times", ")", ",", "2", ")", ",", "np", ".", "round", "(", "np", ".", "mean", "(", "elapsed_times", ")", ",", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.create_pose_data": [[238, 287], ["os.path.join", "sorted", "os.listdir", "print", "print", "pipeline.utils.get_selection", "open", "os.path.join", "classes.append", "print", "pipeline.utils.get_True_or_False", "label_generator.create_pose_data", "open.readline", "print", "pipeline.utils.get_True_or_False", "os.listdir", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.create_labels.create_pose_data", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False"], ["", "def", "create_pose_data", "(", ")", ":", "\n", "    ", "seg_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data_sets/segmentation'", ")", "\n", "seg_names", "=", "sorted", "(", "os", ".", "listdir", "(", "seg_path", ")", ")", "\n", "if", "not", "seg_names", ":", "\n", "        ", "print", "(", "'There are not segmentation datasets. Please create and train a segmentation dataset first.'", ")", "\n", "return", "False", "\n", "\n", "", "while", "True", ":", "\n", "        ", "print", "(", "'____________________________________________________________________'", ")", "\n", "ds_name", "=", "get_selection", "(", "seg_names", ",", "'Select which segmentation dataset is transformed.'", ")", "\n", "if", "not", "ds_name", ":", "\n", "            ", "return", "False", "\n", "\n", "", "classes", "=", "[", "]", "\n", "input_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "seg_path", ",", "ds_name", ",", "'classes.txt'", ")", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "", "classes", ".", "append", "(", "input_line", ")", "\n", "\n", "", "extra_available", "=", "True", "\n", "for", "cls", "in", "classes", ":", "\n", "            ", "if", "not", "'extra'", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation/data'", ",", "cls", ")", ")", ")", ":", "\n", "                ", "extra_available", "=", "False", "\n", "break", "\n", "\n", "", "", "while", "True", ":", "\n", "            ", "print", "(", "'_______________________'", ")", "\n", "use_new_pred", ",", "move_on", "=", "get_True_or_False", "(", "'Use trained model to recompute segmentation '", "\n", "'mask gained by background subtraction'", ",", "default", "=", "True", ")", "\n", "if", "not", "move_on", ":", "\n", "                ", "break", "\n", "\n", "", "if", "extra_available", ":", "\n", "                ", "print", "(", "'_______________________'", ")", "\n", "get_extra_labels", ",", "move_on", "=", "get_True_or_False", "(", "'Get Extra Labels'", ",", "default", "=", "True", ")", "\n", "if", "not", "move_on", ":", "\n", "                    ", "continue", "\n", "", "", "else", ":", "\n", "                ", "get_extra_labels", "=", "False", "\n", "", "return", "label_gen", ".", "create_pose_data", "(", "root", ",", "\n", "classes", ",", "\n", "ds_name", ",", "\n", "reference_point", "=", "reference_point", ",", "\n", "new_pred", "=", "use_new_pred", ",", "\n", "get_extra_labels", "=", "get_extra_labels", ",", "\n", "plot", "=", "False", ",", "\n", "use_cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.create_dataset": [[289, 391], ["print", "pipeline.utils.get_selection", "os.path.join", "os.listdir", "print", "os.path.exists", "os.makedirs", "os.path.join", "sorted", "print", "input", "input", "os.path.join", "sorted", "os.listdir", "print", "print", "pipeline.utils.get_selection", "open", "print", "os.listdir", "print", "pipeline.utils.get_selection", "isinstance", "label_generator.make_train_and_test_dataset", "print", "print", "enumerate", "print", "os.path.join", "classes.append", "print", "pipeline.utils.get_True_or_False", "label_generator.make_train_and_test_dataset", "print", "print", "enumerate", "print", "print", "open.readline", "print", "pipeline.utils.get_True_or_False", "print", "len", "os.listdir", "len", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.make_train_and_test_dataset.make_train_and_test_dataset", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.make_train_and_test_dataset.make_train_and_test_dataset", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False"], ["", "", "", "def", "create_dataset", "(", ")", ":", "\n", "\n", "    ", "while", "True", ":", "\n", "        ", "print", "(", "'____________________________________________________________________'", ")", "\n", "data_set_type", "=", "get_selection", "(", "[", "'segmentation'", ",", "'pose_estimation'", "]", ",", "'Select the data set type'", ")", "\n", "if", "not", "data_set_type", ":", "\n", "            ", "return", "print", "(", "'Returning to Main Menu'", ")", "\n", "\n", "", "data_set_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data_sets'", ",", "data_set_type", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_set_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_set_path", ")", "\n", "", "names", "=", "os", ".", "listdir", "(", "data_set_path", ")", "\n", "if", "data_set_type", "==", "'segmentation'", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "print", "(", "'____________________________________________________________________'", ")", "\n", "name", "=", "input", "(", "'Enter name of the new data set: '", ")", "\n", "if", "name", "in", "names", ":", "\n", "                    ", "print", "(", "'A data set with the name \"{}\" does already exist. Please find a different name.'", ".", "format", "(", "name", ")", ")", "\n", "continue", "\n", "\n", "", "selection", "=", "input", "(", "\n", "'The new data set name is: \"{}\", type \"r\" to rename, \"b\" to return, or hit any other key to continue.'", ".", "format", "(", "\n", "name", ")", ")", "\n", "if", "selection", "==", "'r'", ":", "\n", "                    ", "continue", "\n", "", "elif", "selection", "==", "'b'", ":", "\n", "                    ", "break", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data'", ")", "\n", "objects", "=", "sorted", "(", "os", ".", "listdir", "(", "path", ")", ")", "\n", "while", "True", ":", "\n", "                    ", "print", "(", "'____________________________________________________________________'", ")", "\n", "object_names", "=", "get_selection", "(", "objects", ",", "'Select objects to include into the new dataset. '", "\n", "'\\n Select multiple objects by separating them with a comma. (e.g. \"1,2\")'", ",", "\n", "multi_selection", "=", "True", ")", "\n", "if", "not", "object_names", ":", "\n", "                        ", "break", "\n", "\n", "", "if", "isinstance", "(", "object_names", ",", "str", ")", ":", "\n", "                        ", "object_names", "=", "[", "object_names", "]", "\n", "\n", "", "data_set_gen", ".", "make_train_and_test_dataset", "(", "object_names", ",", "data_set_type", ",", "name", ")", "\n", "print", "(", "'____________________________________________________________________'", ")", "\n", "print", "(", "'Created new \"{}\" data set \"{}\", with \"{}\" objects: '", ".", "format", "(", "data_set_type", ",", "name", ",", "len", "(", "object_names", ")", ")", ")", "\n", "for", "i", ",", "object_name", "in", "enumerate", "(", "object_names", ")", ":", "\n", "                        ", "print", "(", "'{}   : {}'", ".", "format", "(", "i", "+", "1", ",", "object_name", ")", ")", "\n", "", "return", "print", "(", "'Returning to Main Menu'", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "seg_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data_sets/segmentation'", ")", "\n", "seg_names", "=", "sorted", "(", "os", ".", "listdir", "(", "seg_path", ")", ")", "\n", "if", "not", "seg_names", ":", "\n", "                ", "print", "(", "'There are not segmentation datasets. Please create and train a segmentation dataset first.'", ")", "\n", "continue", "\n", "", "while", "True", ":", "\n", "                ", "print", "(", "'____________________________________________________________________'", ")", "\n", "ds_name", "=", "get_selection", "(", "seg_names", ",", "'Select which segmentation dataset is transformed.'", ")", "\n", "if", "not", "ds_name", ":", "\n", "                    ", "break", "\n", "\n", "", "classes", "=", "[", "]", "\n", "input_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "seg_path", ",", "ds_name", ",", "'classes.txt'", ")", ")", "\n", "while", "1", ":", "\n", "                    ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                        ", "break", "\n", "\n", "", "classes", ".", "append", "(", "input_line", ")", "\n", "\n", "", "extra_available", "=", "True", "\n", "for", "cls", "in", "classes", ":", "\n", "                    ", "if", "not", "'extra'", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation/data'", ",", "cls", ")", ")", ")", ":", "\n", "                        ", "extra_available", "=", "False", "\n", "break", "\n", "\n", "", "", "while", "True", ":", "\n", "                    ", "print", "(", "'_______________________'", ")", "\n", "use_new_pred", ",", "move_on", "=", "get_True_or_False", "(", "'Use masks generated by the segmentaiton model?'", ",", "default", "=", "True", ")", "\n", "if", "not", "move_on", ":", "\n", "                        ", "break", "\n", "\n", "\n", "", "if", "extra_available", ":", "\n", "                        ", "print", "(", "'_______________________'", ")", "\n", "get_extra_labels", ",", "move_on", "=", "get_True_or_False", "(", "'Use Extra Labels'", ",", "default", "=", "True", ")", "\n", "if", "not", "move_on", ":", "\n", "                            ", "continue", "\n", "", "", "else", ":", "\n", "                        ", "get_extra_labels", "=", "False", "\n", "\n", "\n", "", "data_set_gen", ".", "make_train_and_test_dataset", "(", "classes", ",", "\n", "data_set_type", ",", "\n", "ds_name", ",", "\n", "p_test", "=", "0.2", ",", "\n", "use_extra_data", "=", "get_extra_labels", ")", "\n", "print", "(", "'____________________________________________________________________'", ")", "\n", "print", "(", "'Created new \"{}\" data set \"{}\", with \"{}\" objects: '", ".", "format", "(", "data_set_type", ",", "ds_name", ",", "\n", "len", "(", "classes", ")", ")", ")", "\n", "for", "i", ",", "object_name", "in", "enumerate", "(", "classes", ")", ":", "\n", "                        ", "print", "(", "'{}   : {}'", ".", "format", "(", "i", "+", "1", ",", "object_name", ")", ")", "\n", "", "return", "print", "(", "'Returning to Main Menu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.train_segmentation": [[393, 424], ["os.path.join", "os.path.exists", "print", "sorted", "os.listdir", "print", "pipeline.utils.get_selection", "print", "segmentation.segmentation_training", "segmentation.segmentation_training", "print", "print"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.__init__.segmentation_training", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.__init__.segmentation_training"], ["", "", "", "", "", "def", "train_segmentation", "(", ")", ":", "\n", "    ", "segmentation_data_sets_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator'", ",", "'data_sets'", ",", "'segmentation'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "segmentation_data_sets_path", ")", ":", "\n", "        ", "segmentation_data_sets", "=", "sorted", "(", "os", ".", "listdir", "(", "segmentation_data_sets_path", ")", ")", "\n", "if", "segmentation_data_sets", ":", "\n", "\n", "            ", "print", "(", "'____________________________________________________________________'", ")", "\n", "data_set", "=", "get_selection", "(", "segmentation_data_sets", ",", "'Visualization Menu'", ")", "\n", "if", "not", "data_set", ":", "\n", "                ", "return", "print", "(", "'Returning to Main Menu'", ")", "\n", "\n", "", "segmentation_config", "=", "{", "'name'", ":", "'Unet'", ",", "\n", "'encoder_name'", ":", "'resnet34'", ",", "\n", "'encoder_weights'", ":", "'imagenet'", ",", "\n", "'activation'", ":", "'softmax'", "}", "\n", "training_config", "=", "{", "\n", "'epochs'", ":", "500", ",", "\n", "'batch_size'", ":", "4", ",", "\n", "'optimizer'", ":", "'Adam'", ",", "\n", "'lr'", ":", "1e-4", ",", "\n", "'weight_decay'", ":", "0.0", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "4", ",", "\n", "'momentum'", ":", "0.9", ",", "\n", "'dataset_name'", ":", "data_set", "}", "\n", "\n", "print", "(", "'Training {} model on the \"{}\" segmentation data set.'", ".", "format", "(", "segmentation_config", "[", "'name'", "]", ",", "\n", "data_set", ")", ")", "\n", "segmentation", ".", "segmentation_training", "(", "training_config", ",", "segmentation_config", ")", "\n", "return", "print", "(", "'Finished Training. Returning to Main Menu'", ")", "\n", "", "", "return", "print", "(", "'No segmentation data set available'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.train_pose_estimation": [[426, 438], ["os.path.join", "os.path.exists", "sorted", "os.listdir", "print", "pipeline.utils.get_selection", "DenseFusion.main", "print", "print"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.createPath.main"], ["", "def", "train_pose_estimation", "(", ")", ":", "\n", "    ", "pose_estimation_data_sets_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator'", ",", "'data_sets'", ",", "'pose_estimation'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "pose_estimation_data_sets_path", ")", ":", "\n", "        ", "pose_estimation_data_sets", "=", "sorted", "(", "os", ".", "listdir", "(", "pose_estimation_data_sets_path", ")", ")", "\n", "if", "pose_estimation_data_sets", ":", "\n", "            ", "print", "(", "'____________________________________________________________________'", ")", "\n", "data_set", "=", "get_selection", "(", "pose_estimation_data_sets", ",", "'Visualization Menu'", ")", "\n", "if", "not", "data_set", ":", "\n", "                ", "return", "print", "(", "'Returning to Main Menu'", ")", "\n", "", "pose_estimation", ".", "main", "(", "data_set", ",", "root", ",", "p_viewpoints", "=", "1.0", ",", "p_extra_data", "=", "0.0", ",", "label_mode", "=", "'new_pred'", ",", "\n", "show_sample", "=", "False", ")", "\n", "return", "print", "(", "'Finished Training. Returning to Main Menu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.run_live_prediction": [[455, 562], ["os.path.join", "os.path.exists", "sorted", "print", "os.listdir", "print", "print", "pipeline.utils.get_selection", "print", "os.listdir", "pipeline.utils.get_selection", "os.path.join", "os.listdir.index", "open", "np.array().reshape", "print", "pipeline.utils.get_selection", "pipeline.utils.get_prediction_models", "os.path.join", "open", "open.close", "print", "os.path.join", "os.path.join", "data.append", "data_generation.DepthCam", "robot_controller.TestController.RobotController", "data_gen.DepthCam.get_intrinsics", "print", "np.array", "open.readline", "data_gen.DepthCam.get_depth_scale", "data_gen.DepthCam.get_frames", "pipeline.utils.full_prediction", "pipeline.utils.get_robot2object", "cv2.imshow", "print", "os.path.join", "pipeline.utils.full_prediction", "print", "print", "json.load().get", "cv2.cvtColor", "cv2.waitKey", "open", "Image.open().convert", "open", "Image.open", "np.array", "open", "json.load", "prediction[].keys", "np.hstack", "random.sample", "os.path.join", "os.path.join", "os.path.join", "json.load", "Image.open"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_prediction_models", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_depth_scale", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_frames", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.full_prediction", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_robot2object", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.full_prediction", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["def", "run_live_prediction", "(", ")", ":", "\n", "    ", "pose_estimation_data_sets_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator'", ",", "'data_sets'", ",", "'pose_estimation'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "pose_estimation_data_sets_path", ")", ":", "\n", "        ", "pose_estimation_data_sets", "=", "sorted", "(", "os", ".", "listdir", "(", "pose_estimation_data_sets_path", ")", ")", "\n", "if", "pose_estimation_data_sets", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "print", "(", "'____________________________________________________________________'", ")", "\n", "data_set_name", "=", "get_selection", "(", "pose_estimation_data_sets", ",", "'Visualization Menu'", ")", "\n", "if", "not", "data_set_name", ":", "\n", "                    ", "return", "print", "(", "'Returning to Main Menu'", ")", "\n", "\n", "", "while", "True", ":", "\n", "                    ", "hand_eye_calibs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hand_eye_calibration'", ",", "'data'", ")", ")", "\n", "\n", "hand_eye_calibs", "=", "[", "cal", "for", "cal", "in", "hand_eye_calibs", "if", "'.json'", "in", "cal", "]", "\n", "if", "'meta.json'", "in", "hand_eye_calibs", ":", "\n", "                        ", "index", "=", "hand_eye_calibs", ".", "index", "(", "'meta.json'", ")", "\n", "del", "hand_eye_calibs", "[", "index", "]", "\n", "\n", "", "hand_eye_calibration", "=", "get_selection", "(", "hand_eye_calibs", ",", "'Select the current hand eye calibration'", ")", "\n", "if", "not", "hand_eye_calibration", ":", "\n", "                        ", "break", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hand_eye_calibration'", ",", "'data'", ",", "hand_eye_calibration", ")", ")", "as", "f", ":", "\n", "                        ", "end2cam", "=", "np", ".", "array", "(", "json", ".", "load", "(", "f", ")", ".", "get", "(", "'tf'", ")", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "\n", "", "pred_types", "=", "[", "'Camera Stream'", ",", "'Sample from test set'", "]", "\n", "while", "True", ":", "\n", "                        ", "print", "(", "'____________________________________________________________________'", ")", "\n", "pred_type", "=", "get_selection", "(", "pred_types", ",", "'What to predict'", ")", "\n", "if", "not", "pred_type", ":", "\n", "                            ", "break", "\n", "\n", "", "segmentor", ",", "estimator", ",", "refiner", ",", "classes", ",", "to_tensor", ",", "normalize", ",", "point_clouds", ",", "device", ",", "cuda", "=", "get_prediction_models", "(", "\n", "root", ",", "data_set_name", ")", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation'", ",", "'data'", ")", "\n", "\n", "data", "=", "[", "]", "\n", "input_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "pose_estimation_data_sets_path", ",", "data_set_name", ",", "'test_data_list.txt'", ")", ")", "\n", "while", "1", ":", "\n", "                            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                                ", "break", "\n", "\n", "", "data", ".", "append", "(", "input_line", ")", "\n", "", "input_file", ".", "close", "(", ")", "\n", "\n", "print", "(", "'____________________________________________________________________'", ")", "\n", "if", "pred_type", "==", "pred_types", "[", "0", "]", ":", "\n", "                            ", "DC", "=", "data_gen", ".", "DepthCam", "(", "fps", "=", "30", ",", "height", "=", "480", ",", "width", "=", "640", ")", "\n", "controller", "=", "RobotController", "(", ")", "\n", "intr", "=", "DC", ".", "get_intrinsics", "(", ")", "\n", "meta", "=", "{", "'intr'", ":", "{", "\n", "'width'", ":", "intr", ".", "width", ",", "\n", "'height'", ":", "intr", ".", "height", ",", "\n", "'ppx'", ":", "intr", ".", "ppx", ",", "\n", "'ppy'", ":", "intr", ".", "ppy", ",", "\n", "'fx'", ":", "intr", ".", "fx", ",", "\n", "'fy'", ":", "intr", ".", "fy", ",", "\n", "'coeffs'", ":", "intr", ".", "coeffs", "\n", "}", ",", "'depth_scale'", ":", "DC", ".", "get_depth_scale", "(", ")", "}", "\n", "\n", "while", "True", ":", "\n", "                                ", "cam_data", "=", "DC", ".", "get_frames", "(", ")", "\n", "prediction", "=", "full_prediction", "(", "cam_data", "[", "'image'", "]", ",", "cam_data", "[", "'depth'", "]", ",", "meta", ",", "segmentor", ",", "estimator", ",", "refiner", ",", "to_tensor", ",", "normalize", ",", "device", ",", "\n", "cuda", ",", "color_dict", ",", "class_names", "=", "classes", ",", "point_clouds", "=", "point_clouds", ",", "plot", "=", "False", ",", "\n", "color_prediction", "=", "True", ",", "bbox", "=", "True", ",", "put_text", "=", "True", ")", "\n", "prediction", "=", "get_robot2object", "(", "prediction", ",", "controller", ",", "end2cam", ")", "\n", "cv2", ".", "imshow", "(", "\"Pose Estimation\"", ",", "cv2", ".", "cvtColor", "(", "np", ".", "hstack", "(", "(", "prediction", "[", "'segmented_prediction'", "]", ",", "\n", "prediction", "[", "'pose_prediction'", "]", ")", "\n", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "if", "cv2", ".", "waitKey", "(", "1", ")", "==", "27", ":", "\n", "                                    ", "break", "\n", "#print(prediction['predictions'])", "\n", "\n", "", "print", "(", "'fps'", ",", "1", "/", "prediction", "[", "'elapsed_times'", "]", "[", "'total'", "]", ")", "\n", "\n", "", "print", "(", "'not implemented'", ")", "\n", "continue", "#", "\n", "", "if", "pred_type", "==", "pred_types", "[", "1", "]", ":", "\n", "\n", "                            ", "while", "True", ":", "\n", "                                ", "sample_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "random", ".", "sample", "(", "data", ",", "1", ")", "[", "0", "]", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "sample_path", "+", "'.color.png'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                                    ", "image", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "sample_path", "+", "'.depth.png'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                                    ", "depth", "=", "Image", ".", "open", "(", "f", ")", "\n", "depth", "=", "np", ".", "array", "(", "depth", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "sample_path", "+", "'.meta.json'", ")", ")", "as", "json_file", ":", "\n", "                                    ", "meta", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "prediction", "=", "full_prediction", "(", "image", ",", "depth", ",", "meta", ",", "segmentor", ",", "estimator", ",", "refiner", ",", "to_tensor", ",", "normalize", ",", "device", ",", "\n", "cuda", ",", "color_dict", ",", "class_names", "=", "classes", ",", "point_clouds", "=", "point_clouds", ",", "plot", "=", "False", ",", "\n", "color_prediction", "=", "False", ")", "\n", "\n", "print", "(", "prediction", "[", "'predictions'", "]", ".", "keys", "(", ")", ")", "\n", "print", "(", "'fps'", ",", "1", "/", "prediction", "[", "'elapsed_times'", "]", "[", "'total'", "]", ")", "\n", "", "", "else", ":", "\n", "                            ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "", "", "", "else", ":", "\n", "            ", "return", "print", "(", "'No pose estimation data set available'", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "print", "(", "'No pose estimation data set available'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.visualise": [[564, 575], ["print", "pipeline.utils.get_selection", "list", "print", "sorted", "v.keys"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection"], ["", "", "def", "visualise", "(", ")", ":", "\n", "    ", "v", "=", "{", "'Point Cloud'", ":", "visualise_pointcloud", ",", "\n", "'Segmentation Mask'", ":", "visualise_segmentation_maks", ",", "\n", "'Pose Label'", ":", "visualise_pose_label", "}", "\n", "while", "True", ":", "\n", "        ", "print", "(", "'____________________________________________________________________'", ")", "\n", "selection", "=", "get_selection", "(", "list", "(", "sorted", "(", "v", ".", "keys", "(", ")", ")", ")", ",", "'Visualization Menu'", ",", "with_return", "=", "True", ")", "\n", "if", "not", "selection", ":", "\n", "            ", "print", "(", "'Returning to Main Menu'", ")", "\n", "break", "\n", "", "v", "[", "selection", "]", "(", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.create_extra_labels_with_segmentation_model": [[576, 612], ["os.path.join", "sorted", "os.path.exists", "print", "os.listdir", "print", "print", "pipeline.utils.get_selection", "os.path.join", "sorted", "print", "os.path.exists", "print", "os.listdir", "print", "len", "print", "pipeline.utils.get_selection", "torch.load", "segmentation.get_model", "segmentation_utils.get_model.load_state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_model"], ["", "", "def", "create_extra_labels_with_segmentation_model", "(", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator'", ",", "'data'", ",", "'data_sets'", ",", "'segmentation'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "return", "print", "(", "'No data set available'", ")", "\n", "\n", "", "dirs", "=", "sorted", "(", "os", ".", "listdir", "(", "path", ")", ")", "\n", "if", "not", "dirs", ":", "\n", "        ", "return", "print", "(", "'No data set available'", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "print", "(", "'____________________________________________________________________'", ")", "\n", "data_set", "=", "get_selection", "(", "dirs", ",", "'Select for which data set extra labels will be generated for the extra data'", ")", "\n", "if", "not", "data_set", ":", "\n", "            ", "return", "print", "(", "'Returning to Main Menu'", ")", "\n", "", "segmentation_model_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'segmentation'", ",", "'trained_models'", ",", "data_set", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "segmentation_model_path", ")", ":", "\n", "            ", "return", "print", "(", "'A Segmentation Model for the \"{}\" segmentation data set has not been trained yet.'", ".", "format", "(", "data_set", ")", ")", "\n", "\n", "", "trained_models", "=", "sorted", "(", "os", ".", "listdir", "(", "segmentation_model_path", ")", ")", "\n", "if", "not", "trained_models", ":", "\n", "            ", "return", "print", "(", "'No Segmentaion Model Trained for the \"{}\" segmentation data set.'", ".", "format", "(", "data_set", ")", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "if", "len", "(", "trained_models", ")", "<", "1", ":", "\n", "                ", "model_name", "=", "trained_models", "[", "0", "]", "\n", "print", "(", "'Selected the trained model \"{}\", since it is the only option.'", ".", "format", "(", "model_name", ")", ")", "\n", "", "else", ":", "\n", "\n", "                ", "model_name", "=", "get_selection", "(", "trained_models", ",", "'Select trained Model'", ")", "\n", "if", "not", "model_name", ":", "\n", "                    ", "break", "\n", "\n", "", "model_cp", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "segmentation_model_path", ",", "model_name", ")", ")", "\n", "model", "=", "segmentation_utils", ".", "get_model", "(", "model_cp", "[", "'name'", "]", ",", "model_cp", "[", "'segmentation_config'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "model_cp", "[", "'state_dict'", "]", ")", "\n", "del", "model_cp", "[", "'state_dict'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.teach_grasping": [[614, 770], ["os.path.join", "os.path.exists", "print", "sorted", "os.listdir", "print", "pipeline.utils.get_selection", "os.listdir", "pipeline.utils.get_selection", "pipeline.utils.get_prediction_models", "open", "open.close", "print", "data_generation.DepthCam", "robot_controller.TestController.RobotController", "data_gen.DepthCam.get_intrinsics", "print", "os.path.join", "os.path.join", "os.path.exists", "print", "os.path.join", "os.listdir.index", "open", "np.array().reshape", "os.path.join", "data.append", "data_gen.DepthCam.get_depth_scale", "os.path.exists", "os.makedirs", "len", "pipeline.utils.get_True_or_False", "len", "print", "os.path.join", "open.readline", "list", "data_gen.DepthCam.get_frames", "pipeline.utils.full_prediction", "pipeline.utils.get_robot2object", "cv2.imshow", "list", "np.array", "open", "json.load", "meta.keys", "cv2.cvtColor", "cv2.waitKey", "prediction[].keys", "print", "json.load().get", "np.hstack", "len", "transforms3d.euler.quat2euler", "np.rad2deg", "print", "pipeline.utils.get_True_or_False", "print", "print", "print", "json.load", "input", "pipeline.utils.get_True_or_False", "robot_controller.TestController.RobotController.get_pose", "np.linalg.norm", "np.zeros", "transforms3d.axangles.axangle2mat", "transforms3d.euler.mat2euler", "np.rad2deg", "print", "print", "float", "float", "float", "float", "open", "json.dump", "os.path.join"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_prediction_models", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_depth_scale", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_frames", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.full_prediction", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_robot2object", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "", "", "", "def", "teach_grasping", "(", ")", ":", "\n", "    ", "pose_estimation_data_sets_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator'", ",", "'data_sets'", ",", "'pose_estimation'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "pose_estimation_data_sets_path", ")", ":", "\n", "        ", "pose_estimation_data_sets", "=", "sorted", "(", "os", ".", "listdir", "(", "pose_estimation_data_sets_path", ")", ")", "\n", "if", "pose_estimation_data_sets", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "print", "(", "'____________________________________________________________________'", ")", "\n", "data_set_name", "=", "get_selection", "(", "pose_estimation_data_sets", ",", "'Visualization Menu'", ")", "\n", "if", "not", "data_set_name", ":", "\n", "                    ", "break", "\n", "\n", "", "while", "True", ":", "\n", "                    ", "hand_eye_calibs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hand_eye_calibration'", ",", "'data'", ")", ")", "\n", "\n", "hand_eye_calibs", "=", "[", "cal", "for", "cal", "in", "hand_eye_calibs", "if", "'.json'", "in", "cal", "]", "\n", "if", "'meta.json'", "in", "hand_eye_calibs", ":", "\n", "                        ", "index", "=", "hand_eye_calibs", ".", "index", "(", "'meta.json'", ")", "\n", "del", "hand_eye_calibs", "[", "index", "]", "\n", "\n", "", "hand_eye_calibration", "=", "get_selection", "(", "hand_eye_calibs", ",", "'Select the current hand eye calibration'", ")", "\n", "if", "not", "hand_eye_calibration", ":", "\n", "                        ", "break", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hand_eye_calibration'", ",", "'data'", ",", "hand_eye_calibration", ")", ")", "as", "f", ":", "\n", "                        ", "end2cam", "=", "np", ".", "array", "(", "json", ".", "load", "(", "f", ")", ".", "get", "(", "'tf'", ")", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "\n", "", "segmentor", ",", "estimator", ",", "refiner", ",", "classes", ",", "to_tensor", ",", "normalize", ",", "point_clouds", ",", "device", ",", "cuda", "=", "get_prediction_models", "(", "\n", "root", ",", "data_set_name", ")", "\n", "\n", "data", "=", "[", "]", "\n", "input_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "pose_estimation_data_sets_path", ",", "data_set_name", ",", "'test_data_list.txt'", ")", ")", "\n", "while", "1", ":", "\n", "                        ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                            ", "break", "\n", "\n", "", "data", ".", "append", "(", "input_line", ")", "\n", "", "input_file", ".", "close", "(", ")", "\n", "\n", "print", "(", "'Get camera and robot controller'", ")", "\n", "DC", "=", "data_gen", ".", "DepthCam", "(", "fps", "=", "30", ",", "height", "=", "480", ",", "width", "=", "640", ")", "\n", "#print('got camera')", "\n", "controller", "=", "RobotController", "(", ")", "\n", "#print('got robot controller')", "\n", "intr", "=", "DC", ".", "get_intrinsics", "(", ")", "\n", "meta", "=", "{", "'intr'", ":", "{", "\n", "'width'", ":", "intr", ".", "width", ",", "\n", "'height'", ":", "intr", ".", "height", ",", "\n", "'ppx'", ":", "intr", ".", "ppx", ",", "\n", "'ppy'", ":", "intr", ".", "ppy", ",", "\n", "'fx'", ":", "intr", ".", "fx", ",", "\n", "'fy'", ":", "intr", ".", "fy", ",", "\n", "'coeffs'", ":", "intr", ".", "coeffs", "\n", "}", ",", "'depth_scale'", ":", "DC", ".", "get_depth_scale", "(", ")", "}", "\n", "\n", "print", "(", "'got all required objects'", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pipeline'", ",", "'data'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "meta_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}_grasping_deltas.json'", ".", "format", "(", "data_set_name", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "with", "open", "(", "meta_path", ")", "as", "f", ":", "\n", "                                ", "save_meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "except", ":", "\n", "                            ", "save_meta", "=", "{", "}", "\n", "", "", "else", ":", "\n", "                        ", "save_meta", "=", "{", "}", "\n", "\n", "", "print", "(", "'meta: {}'", ".", "format", "(", "save_meta", ")", ")", "\n", "i", "=", "0", "\n", "while", "0", "<=", "i", "<", "len", "(", "classes", ")", ":", "\n", "                        ", "cls", "=", "classes", "[", "i", "]", "\n", "teach", ",", "move_on", "=", "get_True_or_False", "(", "'Teach object the object \"{}\"?'", ".", "format", "(", "cls", ")", ")", "\n", "if", "not", "move_on", ":", "\n", "                            ", "i", "-=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                            ", "i", "+=", "1", "\n", "\n", "", "if", "not", "teach", ":", "\n", "                            ", "continue", "\n", "\n", "", "if", "cls", "not", "in", "list", "(", "meta", ".", "keys", "(", ")", ")", ":", "\n", "                            ", "save_meta", "[", "cls", "]", "=", "{", "}", "\n", "\n", "", "while", "True", ":", "\n", "                            ", "cam_data", "=", "DC", ".", "get_frames", "(", ")", "\n", "prediction", "=", "full_prediction", "(", "cam_data", "[", "'image'", "]", ",", "cam_data", "[", "'depth'", "]", ",", "meta", ",", "segmentor", ",", "estimator", ",", "\n", "refiner", ",", "to_tensor", ",", "normalize", ",", "device", ",", "\n", "cuda", ",", "color_dict", ",", "class_names", "=", "classes", ",", "point_clouds", "=", "point_clouds", ",", "\n", "plot", "=", "False", ",", "\n", "color_prediction", "=", "True", ",", "bbox", "=", "True", ",", "put_text", "=", "True", ")", "\n", "prediction", "=", "get_robot2object", "(", "prediction", ",", "controller", ",", "end2cam", ")", "\n", "stop", "=", "False", "\n", "cv2", ".", "imshow", "(", "\"Pose Estimation\"", ",", "cv2", ".", "cvtColor", "(", "np", ".", "hstack", "(", "(", "prediction", "[", "'segmented_prediction'", "]", ",", "\n", "prediction", "[", "'pose_prediction'", "]", ")", "\n", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "if", "cv2", ".", "waitKey", "(", "1", ")", "==", "27", ":", "\n", "                                ", "stop", "=", "True", "\n", "\n", "", "preds", "=", "list", "(", "prediction", "[", "'predictions'", "]", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "preds", ")", ">", "1", "or", "cls", "not", "in", "preds", ":", "\n", "                                ", "print", "(", "'Include only the object \"{}\" into the scene. Found objects: \"{}\"'", ".", "format", "(", "cls", ",", "preds", ")", ")", "\n", "continue", "\n", "", "elif", "stop", ":", "\n", "                                ", "pos", "=", "prediction", "[", "'predictions'", "]", "[", "cls", "]", "[", "'position'", "]", "\n", "rot", "=", "transforms3d", ".", "euler", ".", "quat2euler", "(", "prediction", "[", "'predictions'", "]", "[", "cls", "]", "[", "'rotation'", "]", ")", "\n", "c_rot", "=", "np", ".", "rad2deg", "(", "rot", "[", "2", "]", ")", "\n", "print", "(", "'pos: {}, c rotation: {}'", ".", "format", "(", "pos", ",", "c_rot", ")", ")", "\n", "retake", ",", "move_on", "=", "get_True_or_False", "(", "'Retake Pose?'", ",", "default", "=", "False", ")", "\n", "if", "not", "retake", "and", "move_on", ":", "\n", "                                    ", "print", "(", "'Now teach the grasping Pose'", ")", "\n", "print", "(", "'Move the Robot to the grasping pose'", ")", "\n", "while", "True", ":", "\n", "                                        ", "input", "(", "'press any key too teach current position'", ")", "\n", "teach_position", ",", "move_on", "=", "get_True_or_False", "(", "'Teach position?'", ",", "default", "=", "True", ")", "\n", "if", "not", "teach_position", "or", "not", "move_on", ":", "\n", "                                            ", "continue", "\n", "\n", "", "pose", "=", "controller", ".", "get_pose", "(", "return_mm", "=", "False", ")", "\n", "r", "=", "[", "pose", "[", "'a'", "]", ",", "pose", "[", "'b'", "]", ",", "pose", "[", "'c'", "]", "]", "\n", "anlge", "=", "np", ".", "linalg", ".", "norm", "(", "r", ")", "\n", "axis", "=", "r", "/", "anlge", "\n", "robot2end", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "robot2end", "[", "3", ",", "3", "]", "=", "1", "\n", "robot2end", "[", ":", "3", ",", ":", "3", "]", "=", "transforms3d", ".", "axangles", ".", "axangle2mat", "(", "axis", ",", "anlge", ")", "\n", "robot2end", "[", ":", "3", ",", "3", "]", "=", "[", "pose", "[", "'x'", "]", ",", "pose", "[", "'y'", "]", ",", "pose", "[", "'z'", "]", "]", "\n", "\n", "robot_rot", "=", "transforms3d", ".", "euler", ".", "mat2euler", "(", "robot2end", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "c_rot_robot", "=", "np", ".", "rad2deg", "(", "robot_rot", "[", "2", "]", ")", "\n", "robot_pos", "=", "robot2end", "[", ":", "3", ",", "3", "]", "\n", "\n", "pos_diff", "=", "robot_pos", "-", "pos", "\n", "rot_diff", "=", "c_rot_robot", "-", "c_rot", "\n", "print", "(", "'robot pos: {}, robot c rotation: {}'", ".", "format", "(", "robot_pos", ",", "c_rot_robot", ")", ")", "\n", "print", "(", "'pos diff: {}, c rotation diff: {}'", ".", "format", "(", "pos_diff", ",", "rot_diff", ")", ")", "\n", "\n", "save_meta", "[", "cls", "]", "[", "'delta_x'", "]", "=", "float", "(", "pos_diff", "[", "0", "]", ")", "\n", "save_meta", "[", "cls", "]", "[", "'delta_y'", "]", "=", "float", "(", "pos_diff", "[", "1", "]", ")", "\n", "save_meta", "[", "cls", "]", "[", "'delta_z'", "]", "=", "float", "(", "pos_diff", "[", "2", "]", ")", "\n", "save_meta", "[", "cls", "]", "[", "'delta_c'", "]", "=", "float", "(", "rot_diff", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\n", "'{}_grasping_deltas.json'", ".", "format", "(", "data_set_name", ")", ")", ",", "\n", "'w'", ")", "as", "f", ":", "\n", "                                            ", "json", ".", "dump", "(", "save_meta", ",", "f", ")", "\n", "", "break", "\n", "", "break", "\n", "", "", "else", ":", "\n", "                                ", "print", "(", "'Press esc in the the Pose Estimation window to capture the pose.'", ")", "\n", "\n", "", "", "", "if", "i", "==", "len", "(", "classes", ")", ":", "\n", "                        ", "return", "print", "(", "'Finished teaching'", ")", "\n", "", "", "", "", "", "return", "print", "(", "'no pose estimation dataset'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.grasp": [[772, 972], ["os.path.join", "os.path.exists", "print", "sorted", "os.listdir", "print", "pipeline.utils.get_selection", "os.listdir", "pipeline.utils.get_selection", "pipeline.utils.get_prediction_models", "open", "open.close", "data_generation.DepthCam", "robot_controller.TestController.RobotController", "data_gen.DepthCam.get_intrinsics", "os.path.join", "os.path.join", "print", "print", "os.path.join", "os.listdir.index", "open", "np.array().reshape", "os.path.join", "data.append", "data_gen.DepthCam.get_depth_scale", "pipeline.move_to_grasp_position", "print", "pipeline.move_home", "print", "os.path.join", "open.readline", "open", "json.load", "print", "list", "print", "pipeline.utils.get_selection", "print", "np.array", "json.load.keys", "json.load().get", "print", "pipeline.get_predictions", "print", "print", "json.load", "print", "pipeline.utils.get_selection", "print", "print", "transforms3d.quaternions.quat2mat", "np.rad2deg", "print", "print", "transforms3d.euler.euler2mat", "robot_controller.TestController.RobotController.get_pose", "np.linalg.norm", "transforms3d.axangles.axangle2mat", "np.dot", "transforms3d.axangles.mat2axangle", "print", "print", "print", "print", "robot_controller.TestController.RobotController.close_gripper", "time.sleep", "print", "robot_controller.TestController.RobotController.open_gripper", "time.sleep", "print", "print", "list", "transforms3d.euler.mat2euler", "np.deg2rad", "pipeline.approach_object", "print", "pipeline.move_down", "print", "pipeline.approach_object", "print", "pipeline.move_down", "print", "pipeline.approach_object", "print", "pipeline.return_2_grasp_position", "print", "predictions.keys"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_prediction_models", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_depth_scale", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.move_to_grasp_position", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.move_home", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.get_predictions", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.close_gripper", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.open_gripper", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.approach_object", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.move_down", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.approach_object", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.move_down", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.approach_object", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.return_2_grasp_position"], ["", "def", "grasp", "(", ")", ":", "\n", "    ", "pose_estimation_data_sets_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator'", ",", "'data_sets'", ",", "'pose_estimation'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "pose_estimation_data_sets_path", ")", ":", "\n", "        ", "pose_estimation_data_sets", "=", "sorted", "(", "os", ".", "listdir", "(", "pose_estimation_data_sets_path", ")", ")", "\n", "if", "pose_estimation_data_sets", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "print", "(", "'____________________________________________________________________'", ")", "\n", "data_set_name", "=", "get_selection", "(", "pose_estimation_data_sets", ",", "'Visualization Menu'", ")", "\n", "if", "not", "data_set_name", ":", "\n", "                    ", "break", "\n", "\n", "", "while", "True", ":", "\n", "                    ", "hand_eye_calibs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hand_eye_calibration'", ",", "'data'", ")", ")", "\n", "\n", "hand_eye_calibs", "=", "[", "cal", "for", "cal", "in", "hand_eye_calibs", "if", "'.json'", "in", "cal", "]", "\n", "if", "'meta.json'", "in", "hand_eye_calibs", ":", "\n", "                        ", "index", "=", "hand_eye_calibs", ".", "index", "(", "'meta.json'", ")", "\n", "del", "hand_eye_calibs", "[", "index", "]", "\n", "\n", "", "hand_eye_calibration", "=", "get_selection", "(", "hand_eye_calibs", ",", "'Select the current hand eye calibration'", ")", "\n", "if", "not", "hand_eye_calibration", ":", "\n", "                        ", "break", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hand_eye_calibration'", ",", "'data'", ",", "hand_eye_calibration", ")", ")", "as", "f", ":", "\n", "                        ", "end2cam", "=", "np", ".", "array", "(", "json", ".", "load", "(", "f", ")", ".", "get", "(", "'tf'", ")", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "\n", "", "segmentor", ",", "estimator", ",", "refiner", ",", "classes", ",", "to_tensor", ",", "normalize", ",", "point_clouds", ",", "device", ",", "cuda", "=", "get_prediction_models", "(", "\n", "root", ",", "data_set_name", ")", "\n", "\n", "data", "=", "[", "]", "\n", "input_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "pose_estimation_data_sets_path", ",", "data_set_name", ",", "'test_data_list.txt'", ")", ")", "\n", "while", "1", ":", "\n", "                        ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                            ", "break", "\n", "\n", "", "data", ".", "append", "(", "input_line", ")", "\n", "", "input_file", ".", "close", "(", ")", "\n", "\n", "DC", "=", "data_gen", ".", "DepthCam", "(", "fps", "=", "30", ",", "height", "=", "480", ",", "width", "=", "640", ")", "\n", "controller", "=", "RobotController", "(", ")", "\n", "intr", "=", "DC", ".", "get_intrinsics", "(", ")", "\n", "meta", "=", "{", "'intr'", ":", "{", "\n", "'width'", ":", "intr", ".", "width", ",", "\n", "'height'", ":", "intr", ".", "height", ",", "\n", "'ppx'", ":", "intr", ".", "ppx", ",", "\n", "'ppy'", ":", "intr", ".", "ppy", ",", "\n", "'fx'", ":", "intr", ".", "fx", ",", "\n", "'fy'", ":", "intr", ".", "fy", ",", "\n", "'coeffs'", ":", "intr", ".", "coeffs", "\n", "}", ",", "'depth_scale'", ":", "DC", ".", "get_depth_scale", "(", ")", "}", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pipeline'", ",", "'data'", ")", "\n", "meta_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}_grasping_deltas.json'", ".", "format", "(", "data_set_name", ")", ")", "\n", "\n", "try", ":", "\n", "                        ", "with", "open", "(", "meta_path", ")", "as", "f", ":", "\n", "                            ", "save_meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "except", ":", "\n", "                        ", "return", "print", "(", "'Grasping has not been teached for the objects of the dataset \"{}\"'", ".", "format", "(", "\n", "data_set_name", ")", ")", "\n", "", "print", "(", "'Taught objects: {}'", ".", "format", "(", "list", "(", "save_meta", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "vel", "=", "0.6", "\n", "grasping_vel", "=", "0.1", "\n", "# get object position", "\n", "if", "not", "grasp_utils", ".", "move_to_grasp_position", "(", "controller", ",", "vel", "=", "vel", ")", ":", "\n", "                        ", "return", "print", "(", "'could not move to grasp position'", ")", "\n", "\n", "", "selections", "=", "[", "'View Predictions'", ",", "'Get Predictions'", ",", "'Grasp_object'", "]", "\n", "\n", "predictions", "=", "{", "}", "\n", "prediction_dict", "=", "{", "\n", "'meta'", ":", "meta", ",", "\n", "'segmentor'", ":", "segmentor", ",", "\n", "'estimator'", ":", "estimator", ",", "\n", "'refiner'", ":", "refiner", ",", "\n", "'to_tensor'", ":", "to_tensor", ",", "\n", "'normalize'", ":", "normalize", ",", "\n", "'device'", ":", "device", ",", "\n", "'cuda'", ":", "cuda", ",", "\n", "'color_dict'", ":", "color_dict", ",", "\n", "'class_names'", ":", "classes", ",", "\n", "'point_clouds'", ":", "point_clouds", ",", "\n", "'plot'", ":", "True", ",", "\n", "'color_prediction'", ":", "True", ",", "\n", "'put_text'", ":", "True", "\n", "}", "\n", "try", ":", "\n", "                        ", "while", "True", ":", "\n", "                            ", "print", "(", "'______________________________________________________'", ")", "\n", "task", "=", "get_selection", "(", "selections", ",", "'Select what to do'", ")", "\n", "if", "not", "task", ":", "\n", "                                ", "break", "\n", "\n", "", "elif", "task", "==", "selections", "[", "0", "]", ":", "\n", "                                ", "print", "(", "predictions", ")", "\n", "", "elif", "task", "==", "selections", "[", "1", "]", ":", "\n", "                                ", "success", ",", "predictions", "=", "grasp_utils", ".", "get_predictions", "(", "controller", ",", "DC", ",", "end2cam", ",", "prediction_dict", ",", "vel", "=", "vel", ")", "\n", "if", "not", "success", ":", "\n", "                                    ", "print", "(", "'cloud not get the predictions'", ")", "\n", "continue", "\n", "", "print", "(", "'got predictions:'", ")", "\n", "print", "(", "predictions", ")", "\n", "\n", "", "elif", "task", "==", "selections", "[", "2", "]", ":", "\n", "                                ", "if", "not", "predictions", ":", "\n", "                                    ", "print", "(", "'No objects found'", ")", "\n", "continue", "\n", "# list objects", "\n", "# select object", "\n", "", "cls", "=", "get_selection", "(", "list", "(", "predictions", ".", "keys", "(", ")", ")", ",", "'Select object to grasp'", ")", "\n", "if", "not", "cls", ":", "\n", "                                    ", "continue", "\n", "\n", "", "pos", "=", "predictions", "[", "cls", "]", "[", "'position'", "]", "\n", "print", "(", "'ori pos: {}'", ".", "format", "(", "pos", ")", ")", "\n", "pos", "[", "0", "]", "+=", "save_meta", "[", "cls", "]", "[", "'delta_x'", "]", "\n", "pos", "[", "1", "]", "+=", "save_meta", "[", "cls", "]", "[", "'delta_y'", "]", "\n", "pos", "[", "2", "]", "+=", "save_meta", "[", "cls", "]", "[", "'delta_z'", "]", "\n", "print", "(", "'moved pos: {}'", ".", "format", "(", "pos", ")", ")", "\n", "\n", "rotation", "=", "transforms3d", ".", "quaternions", ".", "quat2mat", "(", "predictions", "[", "cls", "]", "[", "'rotation'", "]", ")", "\n", "eulers", "=", "np", ".", "rad2deg", "(", "transforms3d", ".", "euler", ".", "mat2euler", "(", "rotation", ")", ")", "\n", "print", "(", "'eulers'", ",", "eulers", ")", "\n", "print", "(", "'moved z '", ",", "eulers", "[", "2", "]", "+", "save_meta", "[", "cls", "]", "[", "'delta_c'", "]", ")", "\n", "rotation", "=", "transforms3d", ".", "euler", ".", "euler2mat", "(", "0", ",", "\n", "0", ",", "\n", "np", ".", "deg2rad", "(", "\n", "eulers", "[", "2", "]", "+", "save_meta", "[", "cls", "]", "[", "'delta_c'", "]", ")", ")", "\n", "\n", "\n", "pose", "=", "controller", ".", "get_pose", "(", "return_mm", "=", "False", ")", "\n", "r", "=", "[", "pose", "[", "'a'", "]", ",", "pose", "[", "'b'", "]", ",", "pose", "[", "'c'", "]", "]", "\n", "anlge", "=", "np", ".", "linalg", ".", "norm", "(", "r", ")", "\n", "axis", "=", "r", "/", "anlge", "\n", "robot2end", "=", "transforms3d", ".", "axangles", ".", "axangle2mat", "(", "axis", ",", "anlge", ")", "\n", "\n", "rotation", "=", "np", ".", "dot", "(", "rotation", ",", "robot2end", ")", "\n", "vec", ",", "theta", "=", "transforms3d", ".", "axangles", ".", "mat2axangle", "(", "rotation", ")", "\n", "rotation", "=", "vec", "*", "theta", "\n", "print", "(", "rotation", ",", "vec", ",", "theta", ")", "\n", "\n", "# approach object", "\n", "print", "(", "'approach object'", ")", "\n", "if", "not", "grasp_utils", ".", "approach_object", "(", "pos", ",", "rotation", ",", "controller", ",", "vel", "=", "vel", ")", ":", "\n", "                                    ", "print", "(", "'could not approach object'", ")", "\n", "continue", "\n", "\n", "# move down", "\n", "", "print", "(", "'move down'", ")", "\n", "if", "not", "grasp_utils", ".", "move_down", "(", "pos", ",", "rotation", ",", "controller", ",", "vel", "=", "grasping_vel", ")", ":", "\n", "                                    ", "print", "(", "'could not move down'", ")", "\n", "continue", "\n", "\n", "# grasp", "\n", "", "print", "(", "'grasp'", ")", "\n", "controller", ".", "close_gripper", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "# move up", "\n", "print", "(", "'move up'", ")", "\n", "if", "not", "grasp_utils", ".", "approach_object", "(", "pos", ",", "rotation", ",", "controller", ",", "vel", "=", "grasping_vel", ",", "moveType", "=", "'l'", ")", ":", "\n", "                                    ", "print", "(", "'could not approach object'", ")", "\n", "continue", "\n", "\n", "# move down", "\n", "", "if", "not", "grasp_utils", ".", "move_down", "(", "pos", ",", "rotation", ",", "controller", ",", "vel", "=", "grasping_vel", ")", ":", "\n", "                                    ", "print", "(", "'could not move down'", ")", "\n", "continue", "\n", "\n", "# release", "\n", "", "controller", ".", "open_gripper", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "# move up", "\n", "if", "not", "grasp_utils", ".", "approach_object", "(", "pos", ",", "rotation", ",", "controller", ",", "vel", "=", "grasping_vel", ",", "moveType", "=", "'l'", ")", ":", "\n", "                                    ", "print", "(", "'could not approach object'", ")", "\n", "continue", "\n", "\n", "# move to start position", "\n", "", "if", "not", "grasp_utils", ".", "return_2_grasp_position", "(", "controller", ",", "vel", "=", "vel", ")", ":", "\n", "                                    ", "print", "(", "'could not return to grasp position'", ")", "\n", "continue", "\n", "", "print", "(", "'not implemented'", ")", "\n", "", "else", ":", "\n", "                                ", "break", "\n", "", "", "", "except", "ValueError", ":", "\n", "                        ", "print", "(", "ValueError", ")", "\n", "\n", "\n", "# move  home", "\n", "", "if", "not", "grasp_utils", ".", "move_home", "(", "controller", ",", "vel", "=", "vel", ")", ":", "\n", "                        ", "return", "print", "(", "'could not move home'", ")", "\n", "\n", "", "return", "print", "(", "'returning to main menu'", ")", "\n", "\n", "\n", "\n", "", "", "", "", "return", "print", "(", "'no pose estimation dataset'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.None.main.main": [[973, 992], ["print", "pipeline.utils.get_selection", "list", "sorted", "s.keys"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection"], ["", "def", "main", "(", ")", ":", "\n", "    ", "s", "=", "{", "'Acquire New Data from Object'", ":", "acquire_new_data_from_object", ",", "\n", "'Create Labels'", ":", "create_labels", ",", "\n", "'Create Pose labels'", ":", "create_pose_data", ",", "\n", "'Create Data Set'", ":", "create_dataset", ",", "\n", "'Train Segmentation Model'", ":", "train_segmentation", ",", "\n", "'Train Pose Estimation Model'", ":", "train_pose_estimation", ",", "\n", "'Run Live Prediction'", ":", "run_live_prediction", ",", "\n", "'Visualise'", ":", "visualise", ",", "\n", "'Teach Grasping'", ":", "teach_grasping", ",", "\n", "'Grasp objects'", ":", "grasp", "}", "\n", "\n", "while", "True", ":", "\n", "        ", "print", "(", "'____________________________________________________________________'", ")", "\n", "selection", "=", "get_selection", "(", "list", "(", "sorted", "(", "s", ".", "keys", "(", ")", ")", ")", ",", "'Main Menu'", ",", "with_exit", "=", "True", ",", "with_return", "=", "False", ")", "\n", "if", "selection", "==", "'exit'", ":", "\n", "            ", "break", "\n", "", "else", ":", "\n", "            ", "s", "[", "selection", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.dataset.SegmentationDataset.__init__": [[15, 97], ["torch.utils.data.dataset.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "open", "os.path.join", "open", "transforms.Compose", "dataset.SegmentationDataset.dirs.append", "dataset.SegmentationDataset.classes.append", "len", "enumerate", "print", "transforms.ToTensor", "list", "list", "print", "print", "transforms.Compose", "pathlib.Path().resolve", "open.readline", "open.readline", "Image.open", "dataset.SegmentationDataset.toTensor", "dataset.SegmentationDataset.mean.append", "dataset.SegmentationDataset.std.append", "np.mean", "np.mean", "toTensor", "normalize", "dataset.SegmentationDataset.labels.append", "np.array", "np.array", "colorJitter", "rotate", "CropAndZoom", "pathlib.Path", "torch.mean().numpy", "torch.std().numpy", "range", "range", "torch.mean", "torch.std"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["    ", "def", "__init__", "(", "self", ",", "data_set_name", ",", "mode", ",", "mean", "=", "None", ",", "std", "=", "None", ",", "label_mode", "=", "'pred'", ",", "plot", "=", "False", ")", ":", "\n", "        ", "super", "(", "SegmentationDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "classes", "=", "[", "]", "\n", "self", ".", "dirs", "=", "[", "]", "\n", "\n", "pkg_path", "=", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "'data_generation'", ",", "'data'", ")", "\n", "self", ".", "label_root", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "'label_generator'", ",", "'data'", ")", "\n", "self", ".", "label_mode", "=", "label_mode", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "plot", "=", "plot", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'{}_data_list.txt'", ".", "format", "(", "mode", ")", ")", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "dirs", ".", "append", "(", "input_line", ")", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'classes.txt'", ")", "\n", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "classes", ".", "append", "(", "input_line", ")", "\n", "\n", "", "self", ".", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "+", "1", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "            ", "found", "=", "False", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "                ", "if", "cls", "in", "d", ":", "\n", "                    ", "found", "=", "True", "\n", "self", ".", "labels", ".", "append", "(", "i", "+", "1", ")", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "raise", "ValueError", "\n", "\n", "", "", "if", "not", "std", "or", "not", "mean", ":", "\n", "            ", "print", "(", "'compute mean and std'", ")", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mean", "=", "[", "]", "\n", "self", ".", "std", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "d", ")", ")", "\n", "image", "=", "self", ".", "toTensor", "(", "image", ")", "\n", "self", ".", "mean", ".", "append", "(", "[", "torch", ".", "mean", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "std", ".", "append", "(", "[", "torch", ".", "std", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "\n", "", "self", ".", "mean", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "mean", ")", ",", "axis", "=", "0", ")", ")", "\n", "self", ".", "std", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "std", ")", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "'mean = {}'", ".", "format", "(", "self", ".", "mean", ")", ")", "\n", "print", "(", "'std = {}'", ".", "format", "(", "self", ".", "std", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "augmentations", "=", "transforms", ".", "Compose", "(", "[", "colorJitter", "(", ")", ",", "\n", "rotate", "(", ")", ",", "\n", "CropAndZoom", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augmentations", "=", "None", "\n", "\n", "", "self", ".", "preprocess", "=", "transforms", ".", "Compose", "(", "[", "toTensor", "(", ")", ",", "\n", "normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.dataset.SegmentationDataset.__getitem__": [[98, 113], ["Image.open", "Image.open", "np.array", "dataset.SegmentationDataset.preprocess", "dataset.SegmentationDataset.augmentations", "dataset.SegmentationDataset.plot_data"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.dataset.SegmentationDataset.plot_data"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "dirs", "[", "index", "]", ")", ")", "\n", "#depth = Image.open('{0}/{1}.depth.png'.format(self.root, self.dirs[index]))", "\n", "label", "=", "Image", ".", "open", "(", "'{0}/{1}.{2}.label.png'", ".", "format", "(", "self", ".", "label_root", ",", "self", ".", "dirs", "[", "index", "]", ",", "self", ".", "label_mode", ")", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "augmentations", "(", "[", "img", ",", "label", "]", ")", "\n", "\n", "", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "label", "[", "label", "!=", "0", "]", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "plot", ":", "\n", "            ", "self", ".", "plot_data", "(", "img", ",", "label", ",", "index", ")", "\n", "\n", "", "img", ",", "label", "=", "self", ".", "preprocess", "(", "[", "img", ",", "label", "]", ")", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.dataset.SegmentationDataset.__len__": [[114, 116], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dirs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.dataset.SegmentationDataset.plot_data": [[118, 145], ["np.array", "matplotlib.cla", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "np.array", "np.zeros", "np.array", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.show", "copy.deepcopy", "np.array", "copy.deepcopy"], "methods", ["None"], ["", "def", "plot_data", "(", "self", ",", "image", ",", "label", ",", "index", ")", ":", "\n", "        ", "label", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "label", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "title", "(", "'Image {}'", ".", "format", "(", "index", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "label", ")", "\n", "cls_id", "=", "self", ".", "labels", "[", "index", "]", "\n", "plt", ".", "title", "(", "'Label: {}, {}'", ".", "format", "(", "cls_id", ",", "self", ".", "classes", "[", "cls_id", "-", "1", "]", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "added", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "image", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "red", "=", "np", ".", "zeros", "(", "added", ".", "shape", ")", "\n", "red", "[", ":", ",", ":", ",", "0", "]", "=", "255", "\n", "#print(np.unique(label))", "\n", "added", "[", "label", "!=", "0", "]", "=", "added", "[", "label", "!=", "0", "]", "*", "0.7", "+", "red", "[", "label", "!=", "0", "]", "*", "0.3", "\n", "added", "[", "added", "<", "0", "]", "=", "0", "\n", "added", "[", "added", ">", "255", "]", "=", "255", "\n", "added", "=", "np", ".", "array", "(", "added", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "added", ")", "\n", "plt", ".", "title", "(", "'Added'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.__init__.CP.__init__": [[17, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_losses", "=", "[", "]", "\n", "self", ".", "train_iou_scores", "=", "[", "]", "\n", "self", ".", "valid_losses", "=", "[", "]", "\n", "self", ".", "valid_iou_scores", "=", "[", "]", "\n", "self", ".", "train_iou_per_class", "=", "[", "]", "\n", "self", ".", "valid_iou_per_class", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.__init__.segmentation_training": [[27, 245], ["print", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "print", "segmentation.dataset.SegmentationDataset", "segmentation.dataset.SegmentationDataset", "print", "utils.get_model", "torch.cuda.is_available", "nn.DataParallel.to", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "print", "segmentation.utils.IoU", "__init__.CP", "print", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.remove", "print", "torch.cuda.device_count", "torch.device", "torch.device", "torch.nn.DataParallel", "training_config.get", "print", "torch.optim.Adam", "print", "torch.optim.SGD", "print", "print", "nn.DataParallel.train", "segmentation.utils.IoU.reset", "segmentation.utils.IoU.value", "CP.train_losses.append", "CP.train_iou_scores.append", "CP.train_iou_per_class.append", "print", "print", "numpy.array", "numpy.round", "print", "nn.DataParallel.eval", "segmentation.utils.IoU.reset", "segmentation.utils.IoU.value", "CP.valid_iou_scores.append", "CP.valid_iou_per_class.append", "CP.valid_losses.append", "print", "print", "numpy.array", "numpy.round", "print", "print", "print", "pathlib.Path().resolve", "pathlib.Path().resolve", "os.path.join", "print", "nn.DataParallel.parameters", "nn.DataParallel.parameters", "len", "len", "img.to.to", "label.cpu.to", "nn.DataParallel.", "segmentation.utils.jaccard_loss", "currentloss.append", "segmentation.utils.IoU.add", "torch.optim.SGD.zero_grad", "segmentation.utils.jaccard_loss.backward", "torch.optim.SGD.step", "numpy.mean", "numpy.mean", "torch.no_grad", "numpy.mean", "numpy.mean", "torch.save", "open", "json.dump", "float", "img.to.to", "label.cpu.to", "nn.DataParallel.", "segmentation.utils.jaccard_loss", "currentloss.append", "segmentation.utils.IoU.add", "nn.DataParallel.module.state_dict", "nn.DataParallel.state_dict", "os.path.join", "os.path.join", "pathlib.Path", "pathlib.Path", "float", "torch.cuda.is_available", "pred.cpu.numpy", "label.cpu.numpy", "matplotlib.cla", "matplotlib.subplots", "range", "fig.suptitle", "matplotlib.savefig", "pred.cpu.cpu", "label.cpu.cpu", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "os.path.join", "numpy.argmax", "list", "pred[].transpose", "list", "numpy.unique", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_model", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.jaccard_loss", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.jaccard_loss", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add"], ["", "", "def", "segmentation_training", "(", "training_config", ",", "segmentation_config", ")", ":", "\n", "\n", "    ", "print", "(", "'create paths'", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ",", "'trained_models'", ",", "training_config", "[", "'dataset_name'", "]", ")", "\n", "logs_path", "=", "os", ".", "path", ".", "join", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ",", "'logs'", ",", "training_config", "[", "'dataset_name'", "]", ")", "\n", "logs_images", "=", "os", ".", "path", ".", "join", "(", "logs_path", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "logs_images", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "logs_images", ")", "\n", "\n", "", "for", "img", "in", "os", ".", "listdir", "(", "logs_images", ")", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "logs_images", ",", "img", ")", ")", "\n", "\n", "", "if", "segmentation_config", "[", "'encoder_weights'", "]", "==", "'imagenet'", ":", "\n", "        ", "print", "(", "'use imagenet mean and std'", ")", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "training_config", "[", "'dataset_name'", "]", "==", "'full_12_classes'", ":", "\n", "        ", "print", "(", "'use full_12_classes mean and std'", ")", "\n", "mean", "=", "[", "0.7423757", ",", "0.74199075", ",", "0.7420199", "]", "\n", "std", "=", "[", "0.1662702", ",", "0.16652738", ",", "0.16721568", "]", "\n", "", "else", ":", "\n", "        ", "mean", "=", "None", "\n", "std", "=", "None", "\n", "\n", "", "print", "(", "'create datasets'", ")", "\n", "train_dataset", "=", "SegmentationDataset", "(", "training_config", "[", "'dataset_name'", "]", ",", "\n", "'train'", ",", "\n", "mean", "=", "mean", ",", "\n", "std", "=", "std", ",", "\n", "plot", "=", "False", ")", "\n", "test_dataset", "=", "SegmentationDataset", "(", "training_config", "[", "'dataset_name'", "]", ",", "\n", "'test'", ",", "\n", "mean", "=", "train_dataset", ".", "mean", ",", "\n", "std", "=", "train_dataset", ".", "std", ")", "\n", "segmentation_config", "[", "'classes'", "]", "=", "train_dataset", ".", "n_classes", "\n", "\n", "print", "(", "'create model'", ")", "\n", "name", "=", "segmentation_config", "[", "'name'", "]", "\n", "del", "segmentation_config", "[", "'name'", "]", "\n", "model", "=", "utils", ".", "get_model", "(", "name", ",", "segmentation_config", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "multi_gpu", "=", "True", "\n", "", "else", ":", "\n", "        ", "multi_gpu", "=", "False", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "pin_memory", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "", "else", ":", "\n", "        ", "pin_memory", "=", "False", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "if", "multi_gpu", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "'create optimizer, dataloader and metric'", ")", "\n", "\n", "if", "training_config", ".", "get", "(", "'optimizer'", ")", "==", "'Adam'", ":", "\n", "        ", "print", "(", "'use Adam optimizer: lr = {}'", ".", "format", "(", "training_config", "[", "'lr'", "]", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "training_config", "[", "'lr'", "]", ",", "\n", "weight_decay", "=", "training_config", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'use SGD optimizer: lr = {}'", ".", "format", "(", "training_config", "[", "'lr'", "]", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "training_config", "[", "'lr'", "]", ",", "\n", "momentum", "=", "training_config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "training_config", "[", "'weight_decay'", "]", ",", "\n", "nesterov", "=", "True", ")", "\n", "\n", "\n", "\n", "", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "training_config", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "training_config", "[", "'shuffle'", "]", ",", "\n", "num_workers", "=", "training_config", "[", "'num_workers'", "]", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "training_config", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "training_config", "[", "'shuffle'", "]", ",", "\n", "num_workers", "=", "training_config", "[", "'num_workers'", "]", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "print", "(", "'class names: {}'", ".", "format", "(", "train_dataset", ".", "classes", ")", ")", "\n", "print", "(", "'n classes: {}'", ".", "format", "(", "train_dataset", ".", "n_classes", ")", ")", "\n", "print", "(", "'n train batches: {}'", ".", "format", "(", "len", "(", "train_dataloader", ")", ")", ")", "\n", "print", "(", "'n valid batches: {}'", ".", "format", "(", "len", "(", "test_dataloader", ")", ")", ")", "\n", "\n", "\n", "metric", "=", "IoU", "(", "num_classes", "=", "train_dataset", ".", "n_classes", ")", "\n", "\n", "#scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='max', patience=50, verbose=True, factor=0.1)", "\n", "\n", "best_iou_score", "=", "0", "\n", "best_epoch", "=", "0", "\n", "cp", "=", "CP", "(", ")", "\n", "\n", "print", "(", "'start training'", ")", "\n", "for", "i", "in", "range", "(", "training_config", "[", "'epochs'", "]", ")", ":", "\n", "        ", "print", "(", "'__________________________________________________'", ")", "\n", "print", "(", "'Epoch {}/{}'", ".", "format", "(", "i", ",", "training_config", "[", "'epochs'", "]", "-", "1", ")", ")", "\n", "currentloss", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "metric", ".", "reset", "(", ")", "\n", "for", "img", ",", "label", "in", "train_dataloader", ":", "\n", "            ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "pred", "=", "model", "(", "img", ")", "\n", "loss", "=", "jaccard_loss", "(", "label", ",", "pred", ")", "\n", "currentloss", ".", "append", "(", "float", "(", "loss", ".", "data", ")", ")", "\n", "metric", ".", "add", "(", "pred", ",", "label", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "iou_per_class", ",", "iou_score", "=", "metric", ".", "value", "(", ")", "\n", "cp", ".", "train_losses", ".", "append", "(", "np", ".", "mean", "(", "currentloss", ")", ")", "\n", "cp", ".", "train_iou_scores", ".", "append", "(", "iou_score", ")", "\n", "cp", ".", "train_iou_per_class", ".", "append", "(", "iou_per_class", ")", "\n", "print", "(", "'train Loss: {}'", ".", "format", "(", "cp", ".", "train_losses", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "'train mIoU: {}'", ".", "format", "(", "iou_score", ")", ")", "\n", "per_class_mean", "=", "np", ".", "array", "(", "cp", ".", "train_iou_per_class", ")", "\n", "per_class_mean", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "per_class_mean", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "print", "(", "'train per class mIOU: {}'", ".", "format", "(", "per_class_mean", ")", ")", "\n", "\n", "currentloss", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "metric", ".", "reset", "(", ")", "\n", "first_valid", "=", "False", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "img", ",", "label", "in", "test_dataloader", ":", "\n", "                ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "pred", "=", "model", "(", "img", ")", "\n", "loss", "=", "jaccard_loss", "(", "label", ",", "pred", ")", "\n", "currentloss", ".", "append", "(", "float", "(", "loss", ".", "data", ")", ")", "\n", "metric", ".", "add", "(", "pred", ",", "label", ")", "\n", "\n", "if", "first_valid", ":", "\n", "                    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                        ", "pred", "=", "pred", ".", "cpu", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", "\n", "\n", "", "pred", "=", "pred", ".", "numpy", "(", ")", "\n", "label", "=", "label", ".", "numpy", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "2", ",", "4", ",", "constrained_layout", "=", "True", ",", "figsize", "=", "(", "25", ",", "12", ")", ")", "\n", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                        ", "axs", "[", "0", ",", "j", "]", ".", "imshow", "(", "label", "[", "j", "]", ")", "\n", "axs", "[", "0", ",", "j", "]", ".", "set_title", "(", "'label {}'", ".", "format", "(", "list", "(", "np", ".", "unique", "(", "label", "[", "j", "]", ")", ")", ")", ")", "\n", "axs", "[", "0", ",", "j", "]", ".", "set_axis_off", "(", ")", "\n", "\n", "axs", "[", "1", ",", "j", "]", ".", "imshow", "(", "np", ".", "argmax", "(", "pred", "[", "j", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "axis", "=", "2", ")", ")", "\n", "axs", "[", "1", ",", "j", "]", ".", "set_title", "(", "'prediction {}'", ".", "format", "(", "list", "(", "np", ".", "unique", "(", "pred", "[", "j", "]", ")", ")", ")", ")", "\n", "axs", "[", "1", ",", "j", "]", ".", "set_axis_off", "(", ")", "\n", "\n", "\n", "", "fig", ".", "suptitle", "(", "'epoch {}'", ".", "format", "(", "i", ")", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "logs_images", ",", "'valid_{}.png'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "first_valid", "=", "False", "\n", "\n", "", "", "", "iou_per_class", ",", "iou_score", "=", "metric", ".", "value", "(", ")", "\n", "cp", ".", "valid_iou_scores", ".", "append", "(", "iou_score", ")", "\n", "cp", ".", "valid_iou_per_class", ".", "append", "(", "iou_per_class", ")", "\n", "cp", ".", "valid_losses", ".", "append", "(", "np", ".", "mean", "(", "currentloss", ")", ")", "\n", "print", "(", "'valid Loss: {}'", ".", "format", "(", "cp", ".", "valid_losses", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "'valid mIoU: {}'", ".", "format", "(", "iou_score", ")", ")", "\n", "\n", "per_class_mean", "=", "np", ".", "array", "(", "cp", ".", "valid_iou_per_class", ")", "\n", "per_class_mean", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "per_class_mean", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "print", "(", "'valid per class mIOU: {}'", ".", "format", "(", "per_class_mean", ")", ")", "\n", "\n", "#scheduler.step(iou_score)", "\n", "\n", "\n", "if", "cp", ".", "valid_iou_scores", "[", "-", "1", "]", ">", "best_iou_score", ":", "\n", "            ", "best_iou_score", "=", "cp", ".", "valid_iou_scores", "[", "-", "1", "]", "\n", "best_epoch", "=", "i", "\n", "if", "multi_gpu", ":", "\n", "                ", "state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "", "checkpoint", "=", "{", "'state_dict'", ":", "state_dict", ",", "\n", "'epoch'", ":", "i", ",", "\n", "'iou'", ":", "best_iou_score", ",", "\n", "'train_iou_scores'", ":", "cp", ".", "train_iou_scores", ",", "\n", "'train_losses'", ":", "cp", ".", "train_losses", ",", "\n", "'train_loss'", ":", "cp", ".", "train_losses", "[", "-", "1", "]", ",", "\n", "'valid_iou_scores'", ":", "cp", ".", "valid_iou_scores", ",", "\n", "'valid_losses'", ":", "cp", ".", "valid_losses", ",", "\n", "'training_config'", ":", "training_config", ",", "\n", "'name'", ":", "name", ",", "\n", "'segmentation_config'", ":", "segmentation_config", "}", "\n", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}_{}.ckpt'", ".", "format", "(", "name", ",", "\n", "segmentation_config", "[", "'encoder_name'", "]", ")", ")", ")", "\n", "\n", "\n", "", "print", "(", "'best iou: {}'", ".", "format", "(", "best_iou_score", ")", ")", "\n", "print", "(", "'best_epoch: {}'", ".", "format", "(", "best_epoch", ")", ")", "\n", "\n", "logs", "=", "{", "'best_iou_score'", ":", "best_iou_score", ",", "\n", "'best_iou_score_epoch'", ":", "best_epoch", ",", "\n", "'train_iou_scores'", ":", "cp", ".", "train_iou_scores", ",", "\n", "'train_losses'", ":", "cp", ".", "train_losses", ",", "\n", "'valid_iou_scores'", ":", "cp", ".", "valid_iou_scores", ",", "\n", "'valid_losses'", ":", "cp", ".", "valid_losses", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logs_path", ",", "'{}_{}.json'", ".", "format", "(", "name", ",", "segmentation_config", "[", "'encoder_name'", "]", ")", ")", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "logs", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.HFlipDefault.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "0.5", "\n", "self", ".", "hflip", "=", "transforms", ".", "functional", ".", "hflip", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.HFlipDefault.__call__": [[17, 24], ["numpy.random.rand", "utils.HFlipDefault.hflip", "utils.HFlipDefault.hflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "p", ":", "\n", "            ", "img", "=", "self", ".", "hflip", "(", "img", ")", "\n", "label", "=", "self", ".", "hflip", "(", "label", ")", "\n", "\n", "", "return", "[", "img", ",", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.rotate.__init__": [[26, 29], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "rotation", "=", "transforms", ".", "functional", ".", "rotate", "\n", "self", ".", "range", "=", "[", "-", "180", ",", "180", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.rotate.__call__": [[30, 36], ["random.uniform", "utils.rotate.rotation", "utils.rotate.rotation"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "image", ",", "label", "=", "data", "\n", "angle", "=", "random", ".", "uniform", "(", "self", ".", "range", "[", "0", "]", ",", "self", ".", "range", "[", "1", "]", ")", "\n", "image", "=", "self", ".", "rotation", "(", "image", ",", "angle", ")", "\n", "label", "=", "self", ".", "rotation", "(", "label", ",", "angle", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.colorJitter.__init__": [[38, 43], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "ColorJitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.2", ",", "\n", "contrast", "=", "0.2", ",", "\n", "saturation", "=", "0.2", ",", "\n", "hue", "=", "0.05", ")", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.colorJitter.__call__": [[43, 47], ["utils.colorJitter.ColorJitter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "ColorJitter", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.normalize.__init__": [[49, 51], ["torchvision.transforms.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.normalize.__call__": [[52, 56], ["utils.normalize.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "normalize", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.toTensor.__init__": [[58, 60], ["torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.toTensor.__call__": [[61, 67], ["utils.toTensor.toTensor", "torch.from_numpy", "label.long.long.long", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "label", "=", "label", ".", "long", "(", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.Metric.reset": [[121, 123], ["None"], "methods", ["None"], ["def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.Metric.add": [[124, 126], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.Metric.value": [[127, 129], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.ConfusionMatrix.__init__": [[141, 148], ["object.__init__", "numpy.ndarray", "utils.ConfusionMatrix.reset"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "normalized", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conf", "=", "np", ".", "ndarray", "(", "(", "num_classes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "normalized", "=", "normalized", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.ConfusionMatrix.reset": [[149, 151], ["utils.ConfusionMatrix.conf.fill"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf", ".", "fill", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.ConfusionMatrix.add": [[152, 201], ["torch.is_tensor", "torch.is_tensor", "numpy.bincount", "numpy.bincount.reshape", "numpy.argmax.cpu().numpy", "numpy.argmax.cpu().numpy", "numpy.ndim", "numpy.argmax", "numpy.ndim", "numpy.argmax", "x.astype", "numpy.argmax.cpu", "numpy.argmax.cpu", "numpy.argmax.max", "numpy.argmax.min", "numpy.argmax.max", "numpy.argmax.min", "numpy.argmax.sum"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "predicted", ",", "target", ")", ":", "\n", "        ", "\"\"\"Computes the confusion matrix\n        The shape of the confusion matrix is K x K, where K is the number\n        of classes.\n        Keyword arguments:\n        - predicted (Tensor or numpy.ndarray): Can be an N x K tensor/array of\n        predicted scores obtained from the model for N examples and K classes,\n        or an N-tensor/array of integer values between 0 and K-1.\n        - target (Tensor or numpy.ndarray): Can be an N x K tensor/array of\n        ground-truth classes for N examples and K classes, or an N-tensor/array\n        of integer values between 0 and K-1.\n        \"\"\"", "\n", "# If target and/or predicted are tensors, convert them to numpy arrays", "\n", "if", "torch", ".", "is_tensor", "(", "predicted", ")", ":", "\n", "            ", "predicted", "=", "predicted", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "            ", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "assert", "predicted", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ",", "'number of targets and predicted outputs do not match'", "\n", "\n", "if", "np", ".", "ndim", "(", "predicted", ")", "!=", "1", ":", "\n", "            ", "assert", "predicted", ".", "shape", "[", "1", "]", "==", "self", ".", "num_classes", ",", "'number of predictions does not match size of confusion matrix'", "\n", "predicted", "=", "np", ".", "argmax", "(", "predicted", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "predicted", ".", "max", "(", ")", "<", "self", ".", "num_classes", ")", "and", "(", "predicted", ".", "min", "(", ")", ">=", "0", ")", ",", "'predicted values are not between 0 and k-1'", "\n", "\n", "", "if", "np", ".", "ndim", "(", "target", ")", "!=", "1", ":", "\n", "            ", "assert", "target", ".", "shape", "[", "1", "]", "==", "self", ".", "num_classes", ",", "'Onehot target does not match size of confusion matrix'", "\n", "assert", "(", "target", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "target", "<=", "1", ")", ".", "all", "(", ")", ",", "'in one-hot encoding, target values should be 0 or 1'", "\n", "assert", "(", "target", ".", "sum", "(", "1", ")", "==", "1", ")", ".", "all", "(", ")", ",", "'multi-label setting is not supported'", "\n", "target", "=", "np", ".", "argmax", "(", "target", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "target", ".", "max", "(", ")", "<", "self", ".", "num_classes", ")", "and", "(", "target", ".", "min", "(", ")", ">=", "0", ")", ",", "'target values are not between 0 and k-1'", "\n", "\n", "# hack for bincounting 2 arrays together", "\n", "", "x", "=", "predicted", "+", "self", ".", "num_classes", "*", "target", "\n", "bincount_2d", "=", "np", ".", "bincount", "(", "\n", "x", ".", "astype", "(", "np", ".", "int32", ")", ",", "minlength", "=", "self", ".", "num_classes", "**", "2", ")", "\n", "assert", "bincount_2d", ".", "size", "==", "self", ".", "num_classes", "**", "2", "\n", "conf", "=", "bincount_2d", ".", "reshape", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "self", ".", "conf", "+=", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.ConfusionMatrix.value": [[202, 214], ["utils.ConfusionMatrix.conf.astype", "utils.ConfusionMatrix.sum().clip", "utils.ConfusionMatrix.sum"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            Confustion matrix of K rows and K columns, where rows corresponds\n            to ground-truth targets and columns corresponds to predicted\n            targets.\n        \"\"\"", "\n", "if", "self", ".", "normalized", ":", "\n", "            ", "conf", "=", "self", ".", "conf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "conf", "/", "conf", ".", "sum", "(", "1", ")", ".", "clip", "(", "min", "=", "1e-12", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.IoU.__init__": [[232, 245], ["object.__init__", "utils.ConfusionMatrix", "isinstance", "tuple", "ValueError"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "normalized", "=", "False", ",", "ignore_index", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conf_metric", "=", "ConfusionMatrix", "(", "num_classes", ",", "normalized", ")", "\n", "\n", "if", "ignore_index", "is", "None", ":", "\n", "            ", "self", ".", "ignore_index", "=", "None", "\n", "", "elif", "isinstance", "(", "ignore_index", ",", "int", ")", ":", "\n", "            ", "self", ".", "ignore_index", "=", "(", "ignore_index", ",", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "ignore_index", "=", "tuple", "(", "ignore_index", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "raise", "ValueError", "(", "\"'ignore_index' must be an int or iterable\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.IoU.reset": [[246, 248], ["utils.IoU.conf_metric.reset"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset"], ["", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf_metric", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.IoU.add": [[249, 274], ["utils.IoU.conf_metric.add", "predicted.size", "target.size", "predicted.dim", "predicted.max", "target.dim", "target.max", "predicted.view", "target.view", "predicted.dim", "predicted.dim", "target.dim", "target.dim"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add"], ["", "def", "add", "(", "self", ",", "predicted", ",", "target", ")", ":", "\n", "        ", "\"\"\"Adds the predicted and target pair to the IoU metric.\n        Keyword arguments:\n        - predicted (Tensor): Can be a (N, K, H, W) tensor of\n        predicted scores obtained from the model for N examples and K classes,\n        or (N, H, W) tensor of integer values between 0 and K-1.\n        - target (Tensor): Can be a (N, K, H, W) tensor of\n        target scores for N examples and K classes, or (N, H, W) tensor of\n        integer values between 0 and K-1.\n        \"\"\"", "\n", "# Dimensions check", "\n", "assert", "predicted", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "'number of targets and predicted outputs do not match'", "\n", "assert", "predicted", ".", "dim", "(", ")", "==", "3", "or", "predicted", ".", "dim", "(", ")", "==", "4", ",", "\"predictions must be of dimension (N, H, W) or (N, K, H, W)\"", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "or", "target", ".", "dim", "(", ")", "==", "4", ",", "\"targets must be of dimension (N, H, W) or (N, K, H, W)\"", "\n", "\n", "# If the tensor is in categorical format convert it to integer format", "\n", "if", "predicted", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "_", ",", "predicted", "=", "predicted", ".", "max", "(", "1", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "_", ",", "target", "=", "target", ".", "max", "(", "1", ")", "\n", "\n", "", "self", ".", "conf_metric", ".", "add", "(", "predicted", ".", "view", "(", "-", "1", ")", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.IoU.value": [[275, 297], ["utils.IoU.conf_metric.value", "numpy.diag", "numpy.sum", "numpy.sum", "numpy.errstate", "numpy.nanmean"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the IoU and mean IoU.\n        The mean computation ignores NaN elements of the IoU array.\n        Returns:\n            Tuple: (IoU, mIoU). The first output is the per class IoU,\n            for K classes it's numpy.ndarray with K elements. The second output,\n            is the mean IoU.\n        \"\"\"", "\n", "conf_matrix", "=", "self", ".", "conf_metric", ".", "value", "(", ")", "\n", "if", "self", ".", "ignore_index", "is", "not", "None", ":", "\n", "            ", "for", "index", "in", "self", ".", "ignore_index", ":", "\n", "                ", "conf_matrix", "[", ":", ",", "self", ".", "ignore_index", "]", "=", "0", "\n", "conf_matrix", "[", "self", ".", "ignore_index", ",", ":", "]", "=", "0", "\n", "", "", "true_positive", "=", "np", ".", "diag", "(", "conf_matrix", ")", "\n", "false_positive", "=", "np", ".", "sum", "(", "conf_matrix", ",", "0", ")", "-", "true_positive", "\n", "false_negative", "=", "np", ".", "sum", "(", "conf_matrix", ",", "1", ")", "-", "true_positive", "\n", "\n", "# Just in case we get a division by 0, ignore/hide the error", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "            ", "iou", "=", "true_positive", "/", "(", "true_positive", "+", "false_positive", "+", "false_negative", ")", "\n", "\n", "", "return", "iou", ",", "np", ".", "nanmean", "(", "iou", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.CropAndZoom.__init__": [[362, 371], ["int", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "bbox_increase", "=", "1.1", "\n", "self", ".", "to_small", "=", "0.8", "\n", "self", ".", "to_big", "=", "1.2", "\n", "self", ".", "size", "=", "False", "\n", "self", ".", "output_size", "=", "480", "\n", "self", ".", "max_zoom", "=", "2", "\n", "self", ".", "max_l", "=", "480", "\n", "self", ".", "min_l", "=", "int", "(", "float", "(", "self", ".", "output_size", ")", "/", "self", ".", "max_zoom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.CropAndZoom.__call__": [[372, 435], ["numpy.array", "utils.CropAndZoom.get_extreme_points", "utils.CropAndZoom.get_size", "utils.CropAndZoom.get_bbox", "utils.CropAndZoom.random_zoom", "utils.CropAndZoom.get_size", "image_PIL.resize.resize.crop", "label_PIL.resize.resize.crop", "image_PIL.resize.resize.resize", "label_PIL.resize.resize.resize", "copy.deepcopy", "float", "float", "float", "float", "utils.CropAndZoom.get_bbox", "utils.CropAndZoom.get_size", "utils.CropAndZoom.move_bbox_inside", "utils.CropAndZoom.get_bbox", "utils.CropAndZoom.move_bbox_inside", "int", "numpy.random.randint", "utils.CropAndZoom.move_bbox_inside", "utils.CropAndZoom.get_bbox", "utils.CropAndZoom.move_bbox_inside", "int", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_extreme_points", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.CropAndZoom.random_zoom", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "image_PIL", ",", "label_PIL", "=", "data", "\n", "label", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "label_PIL", ")", ")", "\n", "# get some variables", "\n", "self", ".", "size", "=", "label", ".", "shape", "# height, width", "\n", "extreme_points", "=", "self", ".", "get_extreme_points", "(", "label", ")", "\n", "h", ",", "w", ",", "c", "=", "self", ".", "get_size", "(", "extreme_points", ")", "\n", "h_ratio", "=", "float", "(", "h", ")", "/", "float", "(", "self", ".", "output_size", ")", "\n", "w_ratio", "=", "float", "(", "w", ")", "/", "float", "(", "self", ".", "output_size", ")", "\n", "h_w_ratio", "=", "h_ratio", "/", "w_ratio", "\n", "ls", "=", "[", "h", ",", "w", "]", "\n", "bigger", "=", "0", "\n", "if", "w_ratio", ">", "h_ratio", ":", "\n", "            ", "bigger", "=", "1", "\n", "\n", "# create bbox", "\n", "", "bbox", "=", "self", ".", "get_bbox", "(", "c", ",", "ls", "[", "bigger", "]", "*", "self", ".", "bbox_increase", ")", "\n", "bbox", "=", "self", ".", "random_zoom", "(", "bbox", ")", "\n", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "# height = width", "\n", "\n", "# adapt bbox", "\n", "if", "h_w_ratio", "<=", "self", ".", "to_big", "and", "h_w_ratio", ">=", "self", ".", "to_small", ":", "\n", "# case: square", "\n", "            ", "if", "bbox_h", "<=", "self", ".", "size", "[", "0", "]", "and", "bbox_w", "<=", "self", ".", "size", "[", "0", "]", ":", "\n", "# if the bbox is not to big, ensure that it is inside the image", "\n", "                ", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "", "else", ":", "\n", "# if the box is to big, slide random along the horizontal axis of the bbox and then create it as big as", "\n", "# possible and ensure that it is inside the image", "\n", "                ", "bbox_c", "[", "1", "]", "=", "int", "(", "bbox_c", "[", "1", "]", "-", "(", "w", "/", "2", ")", ")", "+", "np", ".", "random", ".", "randint", "(", "0", ",", "w", ")", "\n", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "size", "[", "0", "]", "-", "2", ")", "\n", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "", "", "else", ":", "\n", "# case: rectangular", "\n", "# slide the bbox randomly along the bigger axis", "\n", "            ", "bbox_c", "[", "bigger", "]", "=", "int", "(", "bbox_c", "[", "bigger", "]", "-", "(", "ls", "[", "bigger", "]", "/", "2", ")", ")", "+", "np", ".", "random", ".", "randint", "(", "0", ",", "ls", "[", "bigger", "]", ")", "\n", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "bbox_h", ")", "\n", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "# height = width", "\n", "\n", "if", "bbox_h", "<=", "self", ".", "size", "[", "0", "]", "and", "bbox_w", "<=", "self", ".", "size", "[", "0", "]", ":", "\n", "# if the bbox is not to big, ensure that it is inside the image", "\n", "                ", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "size", "[", "0", "]", "-", "2", ")", "\n", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "\n", "# create patch and set label id", "\n", "", "", "image_PIL", "=", "image_PIL", ".", "crop", "(", "box", "=", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", ",", "bbox", "[", "1", "]", "]", ")", "\n", "label_PIL", "=", "label_PIL", ".", "crop", "(", "box", "=", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", ",", "bbox", "[", "1", "]", "]", ")", "\n", "\n", "image_PIL", "=", "image_PIL", ".", "resize", "(", "size", "=", "(", "self", ".", "output_size", ",", "self", ".", "output_size", ")", ")", "\n", "label_PIL", "=", "label_PIL", ".", "resize", "(", "size", "=", "(", "self", ".", "output_size", ",", "self", ".", "output_size", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "\n", "'''\n            cv2.resize(image[bbox[0]:bbox[1], bbox[2]:bbox[3]], dsize=(self.output_size, self.output_size),\n                       interpolation=cv2.INTER_NEAREST), dtype=np.float)\n        target_out = np.array(\n            cv2.resize(label[bbox[0]:bbox[1], bbox[2]:bbox[3]], dsize=(512, 512), interpolation=cv2.INTER_NEAREST),\n            dtype=np.uint8)\n        '''", "\n", "\n", "return", "[", "image_PIL", ",", "label_PIL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.CropAndZoom.resize_bbox_to_max_zoom": [[436, 443], ["utils.CropAndZoom.get_size", "utils.CropAndZoom.get_bbox", "utils.CropAndZoom.get_bbox"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox"], ["", "def", "resize_bbox_to_max_zoom", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "\n", "if", "bbox_h", ">", "self", ".", "max_l", ":", "\n", "            ", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "max_l", ")", "\n", "", "elif", "bbox_h", "<", "self", ".", "min_l", ":", "\n", "            ", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "min_l", ")", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.CropAndZoom.random_zoom": [[444, 449], ["utils.CropAndZoom.get_size", "int", "utils.CropAndZoom.get_bbox", "random.uniform"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox"], ["", "def", "random_zoom", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "\n", "h", "=", "int", "(", "random", ".", "uniform", "(", "self", ".", "min_l", ",", "self", ".", "max_l", ")", ")", "\n", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "h", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.CropAndZoom.get_extreme_points": [[450, 463], ["numpy.where", "numpy.argmax", "numpy.argmax", "numpy.argmin", "numpy.argmin", "numpy.array"], "methods", ["None"], ["", "def", "get_extreme_points", "(", "self", ",", "label", ")", ":", "\n", "        ", "label_pos", "=", "np", ".", "where", "(", "label", "==", "255", ")", "\n", "label_x", "=", "label_pos", "[", "0", "]", "\n", "label_y", "=", "label_pos", "[", "1", "]", "\n", "arg_max_x", "=", "np", ".", "argmax", "(", "label_x", ")", "\n", "arg_max_y", "=", "np", ".", "argmax", "(", "label_y", ")", "\n", "arg_min_x", "=", "np", ".", "argmin", "(", "label_x", ")", "\n", "arg_min_y", "=", "np", ".", "argmin", "(", "label_y", ")", "\n", "extreme_points", "=", "np", ".", "array", "(", "\n", "[", "label_x", "[", "arg_min_x", "]", ",", "label_x", "[", "arg_max_x", "]", ",", "\n", "label_y", "[", "arg_min_y", "]", ",", "label_y", "[", "arg_max_y", "]", "]", ")", "# used for plotting [up, down, left, right]", "\n", "\n", "return", "extreme_points", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.CropAndZoom.get_size": [[464, 469], ["int", "int"], "methods", ["None"], ["", "def", "get_size", "(", "self", ",", "extreme_points", ")", ":", "\n", "        ", "h", "=", "extreme_points", "[", "1", "]", "-", "extreme_points", "[", "0", "]", "\n", "w", "=", "extreme_points", "[", "3", "]", "-", "extreme_points", "[", "2", "]", "\n", "c", "=", "[", "extreme_points", "[", "0", "]", "+", "int", "(", "h", "/", "2", ")", ",", "extreme_points", "[", "2", "]", "+", "int", "(", "w", "/", "2", ")", "]", "# [height, width] (x,y)", "\n", "return", "h", ",", "w", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.CropAndZoom.get_bbox": [[470, 474], ["int"], "methods", ["None"], ["", "def", "get_bbox", "(", "self", ",", "c", ",", "l", ")", ":", "\n", "        ", "half", "=", "int", "(", "l", "/", "2", ")", "\n", "bbox", "=", "[", "c", "[", "0", "]", "-", "half", ",", "c", "[", "0", "]", "+", "half", ",", "c", "[", "1", "]", "-", "half", ",", "c", "[", "1", "]", "+", "half", "]", "# [up, down, left, right]", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.CropAndZoom.move_bbox_inside": [[475, 488], ["None"], "methods", ["None"], ["", "def", "move_bbox_inside", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "move", "=", "[", "0", ",", "0", "]", "\n", "if", "bbox", "[", "0", "]", "<", "0", ":", "\n", "            ", "move", "[", "0", "]", "=", "bbox", "[", "0", "]", "\n", "", "elif", "bbox", "[", "1", "]", ">", "self", ".", "size", "[", "0", "]", ":", "\n", "            ", "move", "[", "0", "]", "=", "bbox", "[", "1", "]", "-", "self", ".", "size", "[", "0", "]", "\n", "\n", "", "if", "bbox", "[", "2", "]", "<", "0", ":", "\n", "            ", "move", "[", "1", "]", "=", "bbox", "[", "2", "]", "\n", "", "elif", "bbox", "[", "3", "]", ">", "self", ".", "size", "[", "1", "]", ":", "\n", "            ", "move", "[", "1", "]", "=", "bbox", "[", "3", "]", "-", "self", ".", "size", "[", "1", "]", "\n", "", "bbox", "=", "[", "bbox", "[", "0", "]", "-", "move", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "move", "[", "0", "]", ",", "bbox", "[", "2", "]", "-", "move", "[", "1", "]", ",", "bbox", "[", "3", "]", "-", "move", "[", "1", "]", "]", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.jaccard_loss": [[71, 115], ["torch.unique", "true_1_hot.permute().float.type", "torch.sum", "torch.sum", "jacc_loss.mean.mean", "true_1_hot.permute().float.permute().float", "torch.cat", "torch.sigmoid", "torch.cat", "true_1_hot.permute().float.permute().float", "torch.nn.functional.softmax", "logits.type", "tuple", "torch.eye", "torch.eye", "range", "true.squeeze", "true_1_hot.permute().float.permute", "true.squeeze", "true_1_hot.permute().float.permute", "true.ndimension"], "function", ["None"], ["", "", "def", "jaccard_loss", "(", "true", ",", "logits", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"Computes the Jaccard loss, a.k.a the IoU loss.\n    Note that PyTorch optimizers minimize a loss. In this\n    case, we would like to maximize the jaccard loss so we\n    return the negated jaccard loss.\n    Args:\n        true: a tensor of shape [B, H, W] or [B, 1, H, W].\n        logits: a tensor of shape [B, C, H, W]. Corresponds to\n            the raw output or logits of the model.\n        eps: added to the denominator for numerical stability.\n    Returns:\n        jacc_loss: the Jaccard loss.\n    \"\"\"", "\n", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "# unique = torch.unique(true)[1:]", "\n", "unique", "=", "torch", ".", "unique", "(", "true", ")", "\n", "#print('unique', unique)", "\n", "if", "num_classes", "==", "1", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", "+", "1", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "true_1_hot_f", "=", "true_1_hot", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "true_1_hot_s", "=", "true_1_hot", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "true_1_hot", "=", "torch", ".", "cat", "(", "[", "true_1_hot_s", ",", "true_1_hot_f", "]", ",", "dim", "=", "1", ")", "\n", "pos_prob", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "neg_prob", "=", "1", "-", "pos_prob", "\n", "probas", "=", "torch", ".", "cat", "(", "[", "pos_prob", ",", "neg_prob", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "probas", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "true_1_hot", "=", "true_1_hot", ".", "type", "(", "logits", ".", "type", "(", ")", ")", "\n", "dims", "=", "(", "0", ",", ")", "+", "tuple", "(", "range", "(", "2", ",", "true", ".", "ndimension", "(", ")", ")", ")", "\n", "intersection", "=", "torch", ".", "sum", "(", "probas", "*", "true_1_hot", ",", "dims", ")", "\n", "cardinality", "=", "torch", ".", "sum", "(", "probas", "+", "true_1_hot", ",", "dims", ")", "\n", "union", "=", "cardinality", "-", "intersection", "\n", "#jacc_loss = (intersection / (union + eps)).mean()", "\n", "jacc_loss", "=", "(", "intersection", "/", "(", "union", "+", "eps", ")", ")", "\n", "#print('jacc_loss', jacc_loss, jacc_loss.shape)", "\n", "#print(jacc_loss.mean(dim=1), jacc_loss.mean(dim=1).shape, jacc_loss.mean())", "\n", "jacc_loss", "=", "jacc_loss", "[", "unique", "]", "\n", "jacc_loss", "=", "jacc_loss", ".", "mean", "(", ")", "\n", "#print('mean', jacc_loss)", "\n", "#print('out', (1 - jacc_loss))", "\n", "return", "(", "1", "-", "jacc_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.animate": [[298, 321], ["matplotlib.cla", "fig.suptitle", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "open", "json.load", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "numpy.round"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "", "def", "animate", "(", "i", ",", "fig", ",", "axs", ",", "path", ",", "mean_cca", "=", "True", ")", ":", "\n", "\n", "\n", "    ", "with", "open", "(", "path", ")", "as", "json_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "plt", ".", "cla", "(", ")", "\n", "fig", ".", "suptitle", "(", "'Best mIou: {} in epoch: {}'", ".", "format", "(", "np", ".", "round", "(", "config", "[", "'best_iou_score'", "]", ",", "4", ")", ",", "config", "[", "'best_iou_score_epoch'", "]", ")", ",", "fontsize", "=", "16", ")", "\n", "axs", "[", "0", "]", ".", "plot", "(", "config", "[", "'losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "0", "]", ".", "set_title", "(", "'jaccard loss'", ")", "\n", "axs", "[", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", "]", ".", "plot", "(", "config", "[", "'iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "1", "]", ".", "set_title", "(", "'mean IoU'", ")", "\n", "axs", "[", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "if", "mean_cca", ":", "\n", "        ", "axs", "[", "2", "]", ".", "plot", "(", "config", "[", "'iou_cca_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "2", "]", ".", "set_title", "(", "'mean cca IoU'", ")", "\n", "axs", "[", "2", "]", ".", "set_ylabel", "(", "'cca mIoU'", ")", "\n", "axs", "[", "2", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.animate2": [[322, 349], ["matplotlib.cla", "fig.suptitle", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "open", "json.load", "numpy.round"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "", "def", "animate2", "(", "i", ",", "fig", ",", "axs", ",", "path", ")", ":", "\n", "\n", "\n", "    ", "with", "open", "(", "path", ")", "as", "json_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "plt", ".", "cla", "(", ")", "\n", "fig", ".", "suptitle", "(", "'Best mIou: {} in epoch: {}'", ".", "format", "(", "np", ".", "round", "(", "config", "[", "'best_iou_score'", "]", ",", "4", ")", ",", "config", "[", "'best_iou_score_epoch'", "]", ")", ",", "fontsize", "=", "16", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "plot", "(", "config", "[", "'train_losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_title", "(", "'train jaccard loss'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "0", ",", "1", "]", ".", "plot", "(", "config", "[", "'train_iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_title", "(", "'train mean IoU'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", ",", "0", "]", ".", "plot", "(", "config", "[", "'valid_losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_title", "(", "'valid jaccard loss'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", ",", "1", "]", ".", "plot", "(", "config", "[", "'valid_iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_title", "(", "'valid mean IoU'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.segmentation.utils.get_model": [[356, 360], ["model."], "function", ["None"], ["def", "get_model", "(", "name", ",", "segmentation_config", ")", ":", "\n", "    ", "model", "=", "nets", "[", "name", "]", "\n", "model", "=", "model", "(", "**", "segmentation_config", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.BasicBlock.__init__": [[21, 28], ["torch.Module.__init__", "extractors.conv3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU", "extractors.conv3x3"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.conv3x3", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.BasicBlock.forward": [[29, 44], ["extractors.BasicBlock.conv1", "extractors.BasicBlock.relu", "extractors.BasicBlock.conv2", "extractors.BasicBlock.relu", "extractors.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.Bottleneck.__init__": [[48, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.Bottleneck.forward": [[58, 76], ["extractors.Bottleneck.conv1", "extractors.Bottleneck.relu", "extractors.Bottleneck.conv2", "extractors.Bottleneck.relu", "extractors.Bottleneck.conv3", "extractors.Bottleneck.relu", "extractors.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.ResNet.__init__": [[79, 98], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "extractors.ResNet._make_layer", "extractors.ResNet._make_layer", "extractors.ResNet._make_layer", "extractors.ResNet._make_layer", "extractors.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.ResNet._make_layer", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.ResNet._make_layer", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.ResNet._make_layer", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", "=", "(", "3", ",", "4", ",", "23", ",", "3", ")", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.ResNet._make_layer": [[99, 113], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.ResNet.forward": [[114, 125], ["extractors.ResNet.conv1", "extractors.ResNet.relu", "extractors.ResNet.maxpool", "extractors.ResNet.layer1", "extractors.ResNet.layer2", "extractors.ResNet.layer3", "extractors.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x_3", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x_3", ")", "\n", "\n", "return", "x", ",", "x_3", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.load_weights_sequential": [[8, 13], ["collections.OrderedDict", "zip", "target.load_state_dict", "target.state_dict().items", "source_state.items", "target.state_dict"], "function", ["None"], ["def", "load_weights_sequential", "(", "target", ",", "source_state", ")", ":", "\n", "    ", "new_dict", "=", "OrderedDict", "(", ")", "\n", "for", "(", "k1", ",", "v1", ")", ",", "(", "k2", ",", "v2", ")", "in", "zip", "(", "target", ".", "state_dict", "(", ")", ".", "items", "(", ")", ",", "source_state", ".", "items", "(", ")", ")", ":", "\n", "        ", "new_dict", "[", "k1", "]", "=", "v2", "\n", "", "target", ".", "load_state_dict", "(", "new_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.conv3x3": [[14, 17], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.resnet18": [[127, 130], ["extractors.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.resnet34": [[131, 134], ["extractors.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.resnet50": [[135, 138], ["extractors.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.resnet101": [[139, 142], ["extractors.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.extractors.resnet152": [[143, 146], ["extractors.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.pspnet.PSPModule.__init__": [[8, 14], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Conv2d", "torch.nn.ReLU", "pspnet.PSPModule._make_stage", "len"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.pspnet.PSPModule._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "out_features", "=", "1024", ",", "sizes", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ")", ":", "\n", "        ", "super", "(", "PSPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stages", "=", "[", "]", "\n", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_stage", "(", "features", ",", "size", ")", "for", "size", "in", "sizes", "]", ")", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Conv2d", "(", "features", "*", "(", "len", "(", "sizes", ")", "+", "1", ")", ",", "out_features", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.pspnet.PSPModule._make_stage": [[15, 19], ["torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Sequential"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "features", ",", "size", ")", ":", "\n", "        ", "prior", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "size", ",", "size", ")", ")", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "features", ",", "features", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "return", "nn", ".", "Sequential", "(", "prior", ",", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.pspnet.PSPModule.forward": [[20, 25], ["pspnet.PSPModule.bottleneck", "pspnet.PSPModule.relu", "feats.size", "feats.size", "torch.cat", "torch.nn.functional.upsample", "stage"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "h", ",", "w", "=", "feats", ".", "size", "(", "2", ")", ",", "feats", ".", "size", "(", "3", ")", "\n", "priors", "=", "[", "F", ".", "upsample", "(", "input", "=", "stage", "(", "feats", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "for", "stage", "in", "self", ".", "stages", "]", "+", "[", "feats", "]", "\n", "bottle", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "priors", ",", "1", ")", ")", "\n", "return", "self", ".", "relu", "(", "bottle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.pspnet.PSPUpsample.__init__": [[28, 34], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Upsample", "torch.nn.Conv2d", "torch.nn.PReLU"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "PSPUpsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.pspnet.PSPUpsample.forward": [[36, 38], ["pspnet.PSPUpsample.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.pspnet.PSPNet.__init__": [[41, 62], ["torch.nn.Module.__init__", "pspnet.PSPModule", "torch.nn.Dropout2d", "pspnet.PSPUpsample", "pspnet.PSPUpsample", "pspnet.PSPUpsample", "torch.nn.Dropout2d", "torch.nn.Sequential", "torch.nn.Sequential", "getattr", "torch.nn.Conv2d", "torch.nn.LogSoftmax", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", "=", "21", ",", "sizes", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "psp_size", "=", "2048", ",", "deep_features_size", "=", "1024", ",", "backend", "=", "'resnet18'", ",", "\n", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", "PSPNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feats", "=", "getattr", "(", "extractors", ",", "backend", ")", "(", "pretrained", ")", "\n", "self", ".", "psp", "=", "PSPModule", "(", "psp_size", ",", "1024", ",", "sizes", ")", "\n", "self", ".", "drop_1", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.3", ")", "\n", "\n", "self", ".", "up_1", "=", "PSPUpsample", "(", "1024", ",", "256", ")", "\n", "self", ".", "up_2", "=", "PSPUpsample", "(", "256", ",", "64", ")", "\n", "self", ".", "up_3", "=", "PSPUpsample", "(", "64", ",", "64", ")", "\n", "\n", "self", ".", "drop_2", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.15", ")", "\n", "self", ".", "final", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", ")", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "deep_features_size", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "n_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.pspnet.PSPNet.forward": [[64, 78], ["pspnet.PSPNet.feats", "pspnet.PSPNet.psp", "pspnet.PSPNet.drop_1", "pspnet.PSPNet.up_1", "pspnet.PSPNet.drop_2", "pspnet.PSPNet.up_2", "pspnet.PSPNet.drop_2", "pspnet.PSPNet.up_3", "pspnet.PSPNet.final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", ",", "class_f", "=", "self", ".", "feats", "(", "x", ")", "\n", "p", "=", "self", ".", "psp", "(", "f", ")", "\n", "p", "=", "self", ".", "drop_1", "(", "p", ")", "\n", "\n", "p", "=", "self", ".", "up_1", "(", "p", ")", "\n", "p", "=", "self", ".", "drop_2", "(", "p", ")", "\n", "\n", "p", "=", "self", ".", "up_2", "(", "p", ")", "\n", "p", "=", "self", ".", "drop_2", "(", "p", ")", "\n", "\n", "p", "=", "self", ".", "up_3", "(", "p", ")", "\n", "\n", "return", "self", ".", "final", "(", "p", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.Arcball.__init__": [[1538, 1562], ["numpy.array", "numpy.array", "numpy.array", "transformations.quaternion_from_matrix", "transformations.vector_norm", "ValueError"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_from_matrix", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm"], ["def", "__init__", "(", "self", ",", "initial", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize virtual trackball control.\n\n        initial : quaternion or rotation matrix\n\n        \"\"\"", "\n", "self", ".", "_axis", "=", "None", "\n", "self", ".", "_axes", "=", "None", "\n", "self", ".", "_radius", "=", "1.0", "\n", "self", ".", "_center", "=", "[", "0.0", ",", "0.0", "]", "\n", "self", ".", "_vdown", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "self", ".", "_constrain", "=", "False", "\n", "if", "initial", "is", "None", ":", "\n", "            ", "self", ".", "_qdown", "=", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "            ", "initial", "=", "numpy", ".", "array", "(", "initial", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "if", "initial", ".", "shape", "==", "(", "4", ",", "4", ")", ":", "\n", "                ", "self", ".", "_qdown", "=", "quaternion_from_matrix", "(", "initial", ")", "\n", "", "elif", "initial", ".", "shape", "==", "(", "4", ",", ")", ":", "\n", "                ", "initial", "/=", "vector_norm", "(", "initial", ")", "\n", "self", ".", "_qdown", "=", "initial", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"initial not a quaternion or matrix\"", ")", "\n", "", "", "self", ".", "_qnow", "=", "self", ".", "_qpre", "=", "self", ".", "_qdown", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.Arcball.place": [[1563, 1575], ["float"], "methods", ["None"], ["", "def", "place", "(", "self", ",", "center", ",", "radius", ")", ":", "\n", "        ", "\"\"\"Place Arcball, e.g. when window size changes.\n\n        center : sequence[2]\n            Window coordinates of trackball center.\n        radius : float\n            Radius of trackball in window coordinates.\n\n        \"\"\"", "\n", "self", ".", "_radius", "=", "float", "(", "radius", ")", "\n", "self", ".", "_center", "[", "0", "]", "=", "center", "[", "0", "]", "\n", "self", ".", "_center", "[", "1", "]", "=", "center", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.Arcball.setaxes": [[1576, 1582], ["transformations.unit_vector"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector"], ["", "def", "setaxes", "(", "self", ",", "*", "axes", ")", ":", "\n", "        ", "\"\"\"Set axes to constrain rotations.\"\"\"", "\n", "if", "axes", "is", "None", ":", "\n", "            ", "self", ".", "_axes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axes", "=", "[", "unit_vector", "(", "axis", ")", "for", "axis", "in", "axes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.Arcball.constrain": [[1588, 1592], ["bool"], "methods", ["None"], ["", "@", "constrain", ".", "setter", "\n", "def", "constrain", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Set state of constrain to axis mode.\"\"\"", "\n", "self", ".", "_constrain", "=", "bool", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.Arcball.down": [[1593, 1602], ["transformations.arcball_map_to_sphere", "transformations.arcball_nearest_axis", "transformations.arcball_constrain_to_axis"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.arcball_map_to_sphere", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.arcball_nearest_axis", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.arcball_constrain_to_axis"], ["", "def", "down", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Set initial cursor window coordinates and pick constrain-axis.\"\"\"", "\n", "self", ".", "_vdown", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "self", ".", "_qdown", "=", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "if", "self", ".", "_constrain", "and", "self", ".", "_axes", "is", "not", "None", ":", "\n", "            ", "self", ".", "_axis", "=", "arcball_nearest_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axes", ")", "\n", "self", ".", "_vdown", "=", "arcball_constrain_to_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axis", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axis", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.Arcball.drag": [[1603, 1615], ["transformations.arcball_map_to_sphere", "numpy.cross", "transformations.arcball_constrain_to_axis", "numpy.dot", "transformations.quaternion_multiply", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.arcball_map_to_sphere", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.arcball_constrain_to_axis", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_multiply"], ["", "", "def", "drag", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Update current cursor window coordinates.\"\"\"", "\n", "vnow", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "if", "self", ".", "_axis", "is", "not", "None", ":", "\n", "            ", "vnow", "=", "arcball_constrain_to_axis", "(", "vnow", ",", "self", ".", "_axis", ")", "\n", "", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "t", "=", "numpy", ".", "cross", "(", "self", ".", "_vdown", ",", "vnow", ")", "\n", "if", "numpy", ".", "dot", "(", "t", ",", "t", ")", "<", "_EPS", ":", "\n", "            ", "self", ".", "_qnow", "=", "self", ".", "_qdown", "\n", "", "else", ":", "\n", "            ", "q", "=", "[", "numpy", ".", "dot", "(", "self", ".", "_vdown", ",", "vnow", ")", ",", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", "]", "\n", "self", ".", "_qnow", "=", "quaternion_multiply", "(", "q", ",", "self", ".", "_qdown", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.Arcball.next": [[1616, 1620], ["transformations.quaternion_slerp"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_slerp"], ["", "", "def", "next", "(", "self", ",", "acceleration", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Continue rotation in direction of last drag.\"\"\"", "\n", "q", "=", "quaternion_slerp", "(", "self", ".", "_qpre", ",", "self", ".", "_qnow", ",", "2.0", "+", "acceleration", ",", "False", ")", "\n", "self", ".", "_qpre", ",", "self", ".", "_qnow", "=", "self", ".", "_qnow", ",", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.Arcball.matrix": [[1621, 1624], ["transformations.quaternion_matrix"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix"], ["", "def", "matrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return homogeneous rotation matrix.\"\"\"", "\n", "return", "quaternion_matrix", "(", "self", ".", "_qnow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.identity_matrix": [[207, 220], ["numpy.identity"], "function", ["None"], ["def", "identity_matrix", "(", ")", ":", "\n", "    ", "\"\"\"Return 4x4 identity/unit matrix.\n\n    >>> I = identity_matrix()\n    >>> numpy.allclose(I, numpy.dot(I, I))\n    True\n    >>> numpy.sum(I), numpy.trace(I)\n    (4.0, 4.0)\n    >>> numpy.allclose(I, numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.translation_matrix": [[222, 233], ["numpy.identity"], "function", ["None"], ["", "def", "translation_matrix", "(", "direction", ")", ":", "\n", "    ", "\"\"\"Return matrix to translate by direction vector.\n\n    >>> v = numpy.random.random(3) - 0.5\n    >>> numpy.allclose(v, translation_matrix(v)[:3, 3])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "[", ":", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.translation_from_matrix": [[235, 245], ["[].copy", "numpy.array"], "function", ["None"], ["", "def", "translation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return translation vector from translation matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = translation_from_matrix(translation_matrix(v0))\n    >>> numpy.allclose(v0, v1)\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "matrix", ",", "copy", "=", "False", ")", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.reflection_matrix": [[247, 271], ["transformations.unit_vector", "numpy.identity", "numpy.outer", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector"], ["", "def", "reflection_matrix", "(", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to mirror at plane defined by point and normal vector.\n\n    >>> v0 = numpy.random.random(4) - 0.5\n    >>> v0[3] = 1.\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> R = reflection_matrix(v0, v1)\n    >>> numpy.allclose(2, numpy.trace(R))\n    True\n    >>> numpy.allclose(v0, numpy.dot(R, v0))\n    True\n    >>> v2 = v0.copy()\n    >>> v2[:3] += v1\n    >>> v3 = v0.copy()\n    >>> v2[:3] -= v1\n    >>> numpy.allclose(v2, numpy.dot(R, v3))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "2.0", "*", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "(", "2.0", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", ")", "*", "normal", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.reflection_from_matrix": [[273, 300], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.where", "len", "ValueError", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "numpy.real"], "function", ["None"], ["", "def", "reflection_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return mirror plane point and normal vector from reflection matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> M0 = reflection_matrix(v0, v1)\n    >>> point, normal = reflection_from_matrix(M0)\n    >>> M1 = reflection_matrix(point, normal)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "# normal: unit eigenvector corresponding to eigenvalue -1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "+", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue -1'", ")", "\n", "", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: any unit eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.rotation_matrix": [[302, 344], ["math.sin", "math.cos", "transformations.unit_vector", "numpy.diag", "numpy.array", "numpy.identity", "numpy.outer", "numpy.array", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector"], ["", "def", "rotation_matrix", "(", "angle", ",", "direction", ",", "point", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to rotate about axis defined by point and direction.\n\n    >>> R = rotation_matrix(math.pi/2, [0, 0, 1], [1, 0, 0])\n    >>> numpy.allclose(numpy.dot(R, [0, 0, 0, 1]), [1, -1, 0, 1])\n    True\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(angle-2*math.pi, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(-angle, -direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> I = numpy.identity(4, numpy.float64)\n    >>> numpy.allclose(I, rotation_matrix(math.pi*2, direc))\n    True\n    >>> numpy.allclose(2, numpy.trace(rotation_matrix(math.pi/2,\n    ...                                               direc, point)))\n    True\n\n    \"\"\"", "\n", "sina", "=", "math", ".", "sin", "(", "angle", ")", "\n", "cosa", "=", "math", ".", "cos", "(", "angle", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "# rotation matrix around unit vector", "\n", "R", "=", "numpy", ".", "diag", "(", "[", "cosa", ",", "cosa", ",", "cosa", "]", ")", "\n", "R", "+=", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "*", "(", "1.0", "-", "cosa", ")", "\n", "direction", "*=", "sina", "\n", "R", "+=", "numpy", ".", "array", "(", "[", "[", "0.0", ",", "-", "direction", "[", "2", "]", ",", "direction", "[", "1", "]", "]", ",", "\n", "[", "direction", "[", "2", "]", ",", "0.0", ",", "-", "direction", "[", "0", "]", "]", ",", "\n", "[", "-", "direction", "[", "1", "]", ",", "direction", "[", "0", "]", ",", "0.0", "]", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "if", "point", "is", "not", "None", ":", "\n", "# rotation not around origin", "\n", "        ", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "point", "-", "numpy", ".", "dot", "(", "R", ",", "point", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.rotation_from_matrix": [[346, 384], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "math.atan2", "numpy.where", "len", "ValueError", "numpy.where", "len", "ValueError", "abs", "numpy.real", "numpy.real", "numpy.trace", "abs", "abs", "abs", "numpy.real", "numpy.real"], "function", ["None"], ["", "def", "rotation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return rotation angle and axis from rotation matrix.\n\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> angle, direc, point = rotation_from_matrix(R0)\n    >>> R1 = rotation_matrix(angle, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n\n    \"\"\"", "\n", "R", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "R33", "=", "R", "[", ":", "3", ",", ":", "3", "]", "\n", "# direction: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "W", "=", "numpy", ".", "linalg", ".", "eig", "(", "R33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "W", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "Q", "=", "numpy", ".", "linalg", ".", "eig", "(", "R", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "Q", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# rotation angle depending on direction", "\n", "cosa", "=", "(", "numpy", ".", "trace", "(", "R33", ")", "-", "1.0", ")", "/", "2.0", "\n", "if", "abs", "(", "direction", "[", "2", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "1", ",", "0", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "1", "]", ")", "/", "direction", "[", "2", "]", "\n", "", "elif", "abs", "(", "direction", "[", "1", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "0", ",", "2", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "sina", "=", "(", "R", "[", "2", ",", "1", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "1", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "0", "]", "\n", "", "angle", "=", "math", ".", "atan2", "(", "sina", ",", "cosa", ")", "\n", "return", "angle", ",", "direction", ",", "point", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.scale_matrix": [[386, 418], ["numpy.diag", "transformations.unit_vector", "numpy.identity", "numpy.outer", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector"], ["", "def", "scale_matrix", "(", "factor", ",", "origin", "=", "None", ",", "direction", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to scale by factor around origin in direction.\n\n    Use factor -1 for point symmetry.\n\n    >>> v = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v[3] = 1\n    >>> S = scale_matrix(-1.234)\n    >>> numpy.allclose(numpy.dot(S, v)[:3], -1.234*v[:3])\n    True\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S = scale_matrix(factor, origin)\n    >>> S = scale_matrix(factor, origin, direct)\n\n    \"\"\"", "\n", "if", "direction", "is", "None", ":", "\n", "# uniform scaling", "\n", "        ", "M", "=", "numpy", ".", "diag", "(", "[", "factor", ",", "factor", ",", "factor", ",", "1.0", "]", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "origin", "[", ":", "3", "]", "\n", "M", "[", ":", "3", ",", "3", "]", "*=", "1.0", "-", "factor", "\n", "", "", "else", ":", "\n", "# nonuniform scaling", "\n", "        ", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "factor", "=", "1.0", "-", "factor", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "factor", "*", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "(", "factor", "*", "numpy", ".", "dot", "(", "origin", "[", ":", "3", "]", ",", "direction", ")", ")", "*", "direction", "\n", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.scale_from_matrix": [[420, 459], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.trace", "numpy.linalg.eig", "numpy.real().squeeze", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.real", "numpy.where", "numpy.real", "abs", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm"], ["", "def", "scale_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return scaling factor, origin and direction from scaling matrix.\n\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S0 = scale_matrix(factor, origin)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n    >>> S0 = scale_matrix(factor, origin, direct)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "factor", "=", "numpy", ".", "trace", "(", "M33", ")", "-", "2.0", "\n", "try", ":", "\n", "# direction: unit eigenvector corresponding to eigenvalue factor", "\n", "        ", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "factor", ")", "<", "1e-8", ")", "[", "0", "]", "[", "0", "]", "\n", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "", "except", "IndexError", ":", "\n", "# uniform scaling", "\n", "        ", "factor", "=", "(", "factor", "+", "2.0", ")", "/", "3.0", "\n", "direction", "=", "None", "\n", "# origin: any eigenvector corresponding to eigenvalue 1", "\n", "", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "origin", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "origin", "/=", "origin", "[", "3", "]", "\n", "return", "factor", ",", "origin", ",", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.projection_matrix": [[461, 521], ["numpy.identity", "numpy.array", "transformations.unit_vector", "numpy.array", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.outer", "numpy.array", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector"], ["", "def", "projection_matrix", "(", "point", ",", "normal", ",", "direction", "=", "None", ",", "\n", "perspective", "=", "None", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to project onto plane defined by point and normal.\n\n    Using either perspective point, projection direction, or none of both.\n\n    If pseudo is True, perspective projections will preserve relative depth\n    such that Perspective = dot(Orthogonal, PseudoPerspective).\n\n    >>> P = projection_matrix([0, 0, 0], [1, 0, 0])\n    >>> numpy.allclose(P[1:, 1:], numpy.identity(4)[1:, 1:])\n    True\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> P1 = projection_matrix(point, normal, direction=direct)\n    >>> P2 = projection_matrix(point, normal, perspective=persp)\n    >>> P3 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> is_same_transform(P2, numpy.dot(P0, P3))\n    True\n    >>> P = projection_matrix([3, 0, 0], [1, 1, 0], [1, 0, 0])\n    >>> v0 = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(P, v0)\n    >>> numpy.allclose(v1[1], v0[1])\n    True\n    >>> numpy.allclose(v1[0], 3-v1[1])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "# perspective projection", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "perspective", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "\n", "copy", "=", "False", ")", "\n", "M", "[", "0", ",", "0", "]", "=", "M", "[", "1", ",", "1", "]", "=", "M", "[", "2", ",", "2", "]", "=", "numpy", ".", "dot", "(", "perspective", "-", "point", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "perspective", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "# preserve relative depth", "\n", "            ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "(", "perspective", "+", "normal", ")", "\n", "", "else", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "perspective", "\n", "", "M", "[", "3", ",", ":", "3", "]", "=", "-", "normal", "\n", "M", "[", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "perspective", ",", "normal", ")", "\n", "", "elif", "direction", "is", "not", "None", ":", "\n", "# parallel projection", "\n", "        ", "direction", "=", "numpy", ".", "array", "(", "direction", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "scale", "=", "numpy", ".", "dot", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "/", "scale", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "*", "(", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "/", "scale", ")", "\n", "", "else", ":", "\n", "# orthogonal projection", "\n", "        ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "normal", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.projection_from_matrix": [[523, 594], ["numpy.array", "numpy.linalg.eig", "numpy.where", "len", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "transformations.vector_norm", "numpy.linalg.eig", "len", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.where", "numpy.real().squeeze", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.dot", "abs", "numpy.real", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm"], ["", "def", "projection_from_matrix", "(", "matrix", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return projection plane and perspective point from projection matrix.\n\n    Return values are same as arguments for projection_matrix function:\n    point, normal, direction, perspective, and pseudo.\n\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, direct)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=False)\n    >>> result = projection_from_matrix(P0, pseudo=False)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> result = projection_from_matrix(P0, pseudo=True)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "pseudo", "and", "len", "(", "i", ")", ":", "\n", "# point: any eigenvector corresponding to eigenvalue 1", "\n", "        ", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# direction: unit eigenvector corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'no eigenvector corresponding to eigenvalue 0'", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "# normal: unit eigenvector of M33.T corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", ":", "\n", "# parallel projection", "\n", "            ", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "normal", "/=", "vector_norm", "(", "normal", ")", "\n", "return", "point", ",", "normal", ",", "direction", ",", "None", ",", "False", "\n", "", "else", ":", "\n", "# orthogonal projection, where normal equals direction vector", "\n", "            ", "return", "point", ",", "direction", ",", "None", ",", "None", ",", "False", "\n", "", "", "else", ":", "\n", "# perspective projection", "\n", "        ", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", ">", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'no eigenvector not corresponding to eigenvalue 0'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "normal", "=", "-", "M", "[", "3", ",", ":", "3", "]", "\n", "perspective", "=", "M", "[", ":", "3", ",", "3", "]", "/", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "            ", "perspective", "-=", "normal", "\n", "", "return", "point", ",", "normal", ",", "None", ",", "perspective", ",", "pseudo", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.clip_matrix": [[596, 646], ["numpy.array", "ValueError", "ValueError"], "function", ["None"], ["", "", "def", "clip_matrix", "(", "left", ",", "right", ",", "bottom", ",", "top", ",", "near", ",", "far", ",", "perspective", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to obtain normalized device coordinates from frustum.\n\n    The frustum bounds are axis-aligned along x (left, right),\n    y (bottom, top) and z (near, far).\n\n    Normalized device coordinates are in range [-1, 1] if coordinates are\n    inside the frustum.\n\n    If perspective is True the frustum is a truncated pyramid with the\n    perspective point at origin and direction along z axis, otherwise an\n    orthographic canonical view volume (a box).\n\n    Homogeneous coordinates transformed by the perspective clip matrix\n    need to be dehomogenized (divided by w coordinate).\n\n    >>> frustum = numpy.random.rand(6)\n    >>> frustum[1] += frustum[0]\n    >>> frustum[3] += frustum[2]\n    >>> frustum[5] += frustum[4]\n    >>> M = clip_matrix(perspective=False, *frustum)\n    >>> numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    array([-1., -1., -1.,  1.])\n    >>> numpy.dot(M, [frustum[1], frustum[3], frustum[5], 1])\n    array([ 1.,  1.,  1.,  1.])\n    >>> M = clip_matrix(perspective=True, *frustum)\n    >>> v = numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    >>> v / v[3]\n    array([-1., -1., -1.,  1.])\n    >>> v = numpy.dot(M, [frustum[1], frustum[3], frustum[4], 1])\n    >>> v / v[3]\n    array([ 1.,  1., -1.,  1.])\n\n    \"\"\"", "\n", "if", "left", ">=", "right", "or", "bottom", ">=", "top", "or", "near", ">=", "far", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid frustum'", ")", "\n", "", "if", "perspective", ":", "\n", "        ", "if", "near", "<=", "_EPS", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid frustum: near <= 0'", ")", "\n", "", "t", "=", "2.0", "*", "near", "\n", "M", "=", "[", "[", "t", "/", "(", "left", "-", "right", ")", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "right", "-", "left", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "t", "/", "(", "bottom", "-", "top", ")", ",", "(", "top", "+", "bottom", ")", "/", "(", "top", "-", "bottom", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", ",", "t", "*", "far", "/", "(", "far", "-", "near", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "-", "1.0", ",", "0.0", "]", "]", "\n", "", "else", ":", "\n", "        ", "M", "=", "[", "[", "2.0", "/", "(", "right", "-", "left", ")", ",", "0.0", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "left", "-", "right", ")", "]", ",", "\n", "[", "0.0", ",", "2.0", "/", "(", "top", "-", "bottom", ")", ",", "0.0", ",", "(", "top", "+", "bottom", ")", "/", "(", "bottom", "-", "top", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "2.0", "/", "(", "far", "-", "near", ")", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "\n", "", "return", "numpy", ".", "array", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.shear_matrix": [[648, 677], ["transformations.unit_vector", "transformations.unit_vector", "math.tan", "numpy.identity", "abs", "ValueError", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector"], ["", "def", "shear_matrix", "(", "angle", ",", "direction", ",", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to shear by angle along direction vector on shear plane.\n\n    The shear plane is defined by a point and normal vector. The direction\n    vector must be orthogonal to the plane's normal vector.\n\n    A point P is transformed by the shear matrix into P\" such that\n    the vector P-P\" is parallel to the direction vector and its extent is\n    given by the angle of P-P'-P\", where P' is the orthogonal projection\n    of P onto the shear plane.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S = shear_matrix(angle, direct, point, normal)\n    >>> numpy.allclose(1, numpy.linalg.det(S))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "if", "abs", "(", "numpy", ".", "dot", "(", "normal", ",", "direction", ")", ")", ">", "1e-6", ":", "\n", "        ", "raise", "ValueError", "(", "'direction and normal vectors are not orthogonal'", ")", "\n", "", "angle", "=", "math", ".", "tan", "(", "angle", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "+=", "angle", "*", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "-", "angle", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "*", "direction", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.shear_from_matrix": [[679, 722], ["numpy.array", "numpy.linalg.eig", "numpy.dot", "transformations.vector_norm", "math.atan", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.real().squeeze", "numpy.cross", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.identity", "numpy.real", "abs", "numpy.real", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm"], ["", "def", "shear_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return shear angle, direction and plane from shear matrix.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S0 = shear_matrix(angle, direct, point, normal)\n    >>> angle, direct, point, normal = shear_from_matrix(S0)\n    >>> S1 = shear_matrix(angle, direct, point, normal)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "# normal: cross independent eigenvectors corresponding to the eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-4", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'no two linear independent eigenvectors found %s'", "%", "w", ")", "\n", "", "V", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", ".", "T", "\n", "lenorm", "=", "-", "1.0", "\n", "for", "i0", ",", "i1", "in", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "2", ")", ")", ":", "\n", "        ", "n", "=", "numpy", ".", "cross", "(", "V", "[", "i0", "]", ",", "V", "[", "i1", "]", ")", "\n", "w", "=", "vector_norm", "(", "n", ")", "\n", "if", "w", ">", "lenorm", ":", "\n", "            ", "lenorm", "=", "w", "\n", "normal", "=", "n", "\n", "", "", "normal", "/=", "lenorm", "\n", "# direction and angle", "\n", "direction", "=", "numpy", ".", "dot", "(", "M33", "-", "numpy", ".", "identity", "(", "3", ")", ",", "normal", ")", "\n", "angle", "=", "vector_norm", "(", "direction", ")", "\n", "direction", "/=", "angle", "\n", "angle", "=", "math", ".", "atan", "(", "angle", ")", "\n", "# point: eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "angle", ",", "direction", ",", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.decompose_matrix": [[724, 807], ["M.copy", "numpy.zeros", "any", "M[].copy", "M[].copy", "transformations.vector_norm", "numpy.dot", "transformations.vector_norm", "numpy.dot", "numpy.dot", "transformations.vector_norm", "math.asin", "math.cos", "numpy.array", "abs", "ValueError", "numpy.linalg.det", "ValueError", "numpy.dot", "numpy.array", "numpy.dot", "numpy.negative", "numpy.negative", "math.atan2", "math.atan2", "math.atan2", "abs", "numpy.linalg.inv", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm"], ["", "def", "decompose_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return sequence of transformations from transformation matrix.\n\n    matrix : array_like\n        Non-degenerative homogeneous transformation matrix\n\n    Return tuple of:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    Raise ValueError if matrix is of wrong type or degenerative.\n\n    >>> T0 = translation_matrix([1, 2, 3])\n    >>> scale, shear, angles, trans, persp = decompose_matrix(T0)\n    >>> T1 = translation_matrix(trans)\n    >>> numpy.allclose(T0, T1)\n    True\n    >>> S = scale_matrix(0.123)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(S)\n    >>> scale[0]\n    0.123\n    >>> R0 = euler_matrix(1, 2, 3)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(R0)\n    >>> R1 = euler_matrix(*angles)\n    >>> numpy.allclose(R0, R1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", ".", "T", "\n", "if", "abs", "(", "M", "[", "3", ",", "3", "]", ")", "<", "_EPS", ":", "\n", "        ", "raise", "ValueError", "(", "'M[3, 3] is zero'", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "P", "=", "M", ".", "copy", "(", ")", "\n", "P", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "if", "not", "numpy", ".", "linalg", ".", "det", "(", "P", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'matrix is singular'", ")", "\n", "\n", "", "scale", "=", "numpy", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "shear", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "angles", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "\n", "if", "any", "(", "abs", "(", "M", "[", ":", "3", ",", "3", "]", ")", ">", "_EPS", ")", ":", "\n", "        ", "perspective", "=", "numpy", ".", "dot", "(", "M", "[", ":", ",", "3", "]", ",", "numpy", ".", "linalg", ".", "inv", "(", "P", ".", "T", ")", ")", "\n", "M", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "", "else", ":", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "\n", "", "translate", "=", "M", "[", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "M", "[", "3", ",", ":", "3", "]", "=", "0.0", "\n", "\n", "row", "=", "M", "[", ":", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "scale", "[", "0", "]", "=", "vector_norm", "(", "row", "[", "0", "]", ")", "\n", "row", "[", "0", "]", "/=", "scale", "[", "0", "]", "\n", "shear", "[", "0", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "0", "]", "\n", "scale", "[", "1", "]", "=", "vector_norm", "(", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "0", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "1", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "1", "]", "\n", "shear", "[", "2", "]", "=", "numpy", ".", "dot", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "1", "]", "*", "shear", "[", "2", "]", "\n", "scale", "[", "2", "]", "=", "vector_norm", "(", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "/=", "scale", "[", "2", "]", "\n", "shear", "[", "1", ":", "]", "/=", "scale", "[", "2", "]", "\n", "\n", "if", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "numpy", ".", "cross", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", ")", "<", "0", ":", "\n", "        ", "numpy", ".", "negative", "(", "scale", ",", "scale", ")", "\n", "numpy", ".", "negative", "(", "row", ",", "row", ")", "\n", "\n", "", "angles", "[", "1", "]", "=", "math", ".", "asin", "(", "-", "row", "[", "0", ",", "2", "]", ")", "\n", "if", "math", ".", "cos", "(", "angles", "[", "1", "]", ")", ":", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "row", "[", "1", ",", "2", "]", ",", "row", "[", "2", ",", "2", "]", ")", "\n", "angles", "[", "2", "]", "=", "math", ".", "atan2", "(", "row", "[", "0", ",", "1", "]", ",", "row", "[", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "# angles[0] = math.atan2(row[1, 0], row[1, 1])", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "-", "row", "[", "2", ",", "1", "]", ",", "row", "[", "1", ",", "1", "]", ")", "\n", "angles", "[", "2", "]", "=", "0.0", "\n", "\n", "", "return", "scale", ",", "shear", ",", "angles", ",", "translate", ",", "perspective", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.compose_matrix": [[809, 860], ["numpy.identity", "numpy.identity", "numpy.dot", "numpy.identity", "numpy.dot", "transformations.euler_matrix", "numpy.dot", "numpy.identity", "numpy.dot", "numpy.identity", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.euler_matrix"], ["", "def", "compose_matrix", "(", "scale", "=", "None", ",", "shear", "=", "None", ",", "angles", "=", "None", ",", "translate", "=", "None", ",", "\n", "perspective", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return transformation matrix from sequence of transformations.\n\n    This is the inverse of the decompose_matrix function.\n\n    Sequence of transformations:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    >>> scale = numpy.random.random(3) - 0.5\n    >>> shear = numpy.random.random(3) - 0.5\n    >>> angles = (numpy.random.random(3) - 0.5) * (2*math.pi)\n    >>> trans = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(4) - 0.5\n    >>> M0 = compose_matrix(scale, shear, angles, trans, persp)\n    >>> result = decompose_matrix(M0)\n    >>> M1 = compose_matrix(*result)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "        ", "P", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "P", "[", "3", ",", ":", "]", "=", "perspective", "[", ":", "4", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "P", ")", "\n", "", "if", "translate", "is", "not", "None", ":", "\n", "        ", "T", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "T", "[", ":", "3", ",", "3", "]", "=", "translate", "[", ":", "3", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "T", ")", "\n", "", "if", "angles", "is", "not", "None", ":", "\n", "        ", "R", "=", "euler_matrix", "(", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ",", "'sxyz'", ")", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "R", ")", "\n", "", "if", "shear", "is", "not", "None", ":", "\n", "        ", "Z", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "Z", "[", "1", ",", "2", "]", "=", "shear", "[", "2", "]", "\n", "Z", "[", "0", ",", "2", "]", "=", "shear", "[", "1", "]", "\n", "Z", "[", "0", ",", "1", "]", "=", "shear", "[", "0", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "Z", ")", "\n", "", "if", "scale", "is", "not", "None", ":", "\n", "        ", "S", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "S", "[", "0", ",", "0", "]", "=", "scale", "[", "0", "]", "\n", "S", "[", "1", ",", "1", "]", "=", "scale", "[", "1", "]", "\n", "S", "[", "2", ",", "2", "]", "=", "scale", "[", "2", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "S", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.orthogonalization_matrix": [[862, 887], ["numpy.radians", "numpy.sin", "numpy.cos", "numpy.array", "math.sqrt"], "function", ["None"], ["", "def", "orthogonalization_matrix", "(", "lengths", ",", "angles", ")", ":", "\n", "    ", "\"\"\"Return orthogonalization matrix for crystallographic cell coordinates.\n\n    Angles are expected in degrees.\n\n    The de-orthogonalization matrix is the inverse.\n\n    >>> O = orthogonalization_matrix([10, 10, 10], [90, 90, 90])\n    >>> numpy.allclose(O[:3, :3], numpy.identity(3, float) * 10)\n    True\n    >>> O = orthogonalization_matrix([9.8, 12.0, 15.5], [87.2, 80.7, 69.7])\n    >>> numpy.allclose(numpy.sum(O), 43.063229)\n    True\n\n    \"\"\"", "\n", "a", ",", "b", ",", "c", "=", "lengths", "\n", "angles", "=", "numpy", ".", "radians", "(", "angles", ")", "\n", "sina", ",", "sinb", ",", "_", "=", "numpy", ".", "sin", "(", "angles", ")", "\n", "cosa", ",", "cosb", ",", "cosg", "=", "numpy", ".", "cos", "(", "angles", ")", "\n", "co", "=", "(", "cosa", "*", "cosb", "-", "cosg", ")", "/", "(", "sina", "*", "sinb", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "a", "*", "sinb", "*", "math", ".", "sqrt", "(", "1.0", "-", "co", "*", "co", ")", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "-", "a", "*", "sinb", "*", "co", ",", "b", "*", "sina", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "a", "*", "cosb", ",", "b", "*", "cosa", ",", "c", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.affine_matrix_from_points": [[889, 996], ["numpy.array", "numpy.array", "numpy.identity", "t0.reshape", "numpy.identity", "t1.reshape", "numpy.dot", "ValueError", "numpy.mean", "numpy.mean", "numpy.concatenate", "numpy.linalg.svd", "numpy.dot", "numpy.concatenate", "numpy.vstack", "math.sqrt", "numpy.linalg.inv", "numpy.dot", "numpy.linalg.pinv", "numpy.linalg.svd", "numpy.dot", "numpy.identity", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.linalg.eigh", "transformations.vector_norm", "transformations.quaternion_matrix", "numpy.zeros", "numpy.dot", "numpy.linalg.det", "numpy.outer", "numpy.sum", "numpy.sum", "numpy.roll", "numpy.roll", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix"], ["", "def", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "True", ",", "scale", "=", "True", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return affine transform matrix to register two point sets.\n\n    v0 and v1 are shape (ndims, \\*) arrays of at least ndims non-homogeneous\n    coordinates, where ndims is the dimensionality of the coordinate space.\n\n    If shear is False, a similarity transformation matrix is returned.\n    If also scale is False, a rigid/Euclidean transformation matrix\n    is returned.\n\n    By default the algorithm by Hartley and Zissermann [15] is used.\n    If usesvd is True, similarity and Euclidean transformation matrices\n    are calculated by minimizing the weighted sum of squared deviations\n    (RMSD) according to the algorithm by Kabsch [8].\n    Otherwise, and if ndims is 3, the quaternion based algorithm by Horn [9]\n    is used, which is slower when using this Python implementation.\n\n    The returned matrix performs rotation, translation and uniform scaling\n    (if specified).\n\n    >>> v0 = [[0, 1031, 1031, 0], [0, 0, 1600, 1600]]\n    >>> v1 = [[675, 826, 826, 677], [55, 52, 281, 277]]\n    >>> affine_matrix_from_points(v0, v1)\n    array([[   0.14549,    0.00062,  675.50008],\n           [   0.00048,    0.14094,   53.24971],\n           [   0.     ,    0.     ,    1.     ]])\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> S = scale_matrix(random.random())\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-8, 300).reshape(3, -1)\n    >>> M = affine_matrix_from_points(v0[:3], v1[:3])\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n\n    More examples in superimposition_matrix()\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n", "ndims", "=", "v0", ".", "shape", "[", "0", "]", "\n", "if", "ndims", "<", "2", "or", "v0", ".", "shape", "[", "1", "]", "<", "ndims", "or", "v0", ".", "shape", "!=", "v1", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'input arrays are of wrong shape or type'", ")", "\n", "\n", "# move centroids to origin", "\n", "", "t0", "=", "-", "numpy", ".", "mean", "(", "v0", ",", "axis", "=", "1", ")", "\n", "M0", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M0", "[", ":", "ndims", ",", "ndims", "]", "=", "t0", "\n", "v0", "+=", "t0", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "t1", "=", "-", "numpy", ".", "mean", "(", "v1", ",", "axis", "=", "1", ")", "\n", "M1", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M1", "[", ":", "ndims", ",", "ndims", "]", "=", "t1", "\n", "v1", "+=", "t1", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "\n", "if", "shear", ":", "\n", "# Affine transformation", "\n", "        ", "A", "=", "numpy", ".", "concatenate", "(", "(", "v0", ",", "v1", ")", ",", "axis", "=", "0", ")", "\n", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "A", ".", "T", ")", "\n", "vh", "=", "vh", "[", ":", "ndims", "]", ".", "T", "\n", "B", "=", "vh", "[", ":", "ndims", "]", "\n", "C", "=", "vh", "[", "ndims", ":", "2", "*", "ndims", "]", "\n", "t", "=", "numpy", ".", "dot", "(", "C", ",", "numpy", ".", "linalg", ".", "pinv", "(", "B", ")", ")", "\n", "t", "=", "numpy", ".", "concatenate", "(", "(", "t", ",", "numpy", ".", "zeros", "(", "(", "ndims", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "M", "=", "numpy", ".", "vstack", "(", "(", "t", ",", "(", "(", "0.0", ",", ")", "*", "ndims", ")", "+", "(", "1.0", ",", ")", ")", ")", "\n", "", "elif", "usesvd", "or", "ndims", "!=", "3", ":", "\n", "# Rigid transformation via SVD of covariance matrix", "\n", "        ", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "numpy", ".", "dot", "(", "v1", ",", "v0", ".", "T", ")", ")", "\n", "# rotation matrix from SVD orthonormal bases", "\n", "R", "=", "numpy", ".", "dot", "(", "u", ",", "vh", ")", "\n", "if", "numpy", ".", "linalg", ".", "det", "(", "R", ")", "<", "0.0", ":", "\n", "# R does not constitute right handed system", "\n", "            ", "R", "-=", "numpy", ".", "outer", "(", "u", "[", ":", ",", "ndims", "-", "1", "]", ",", "vh", "[", "ndims", "-", "1", ",", ":", "]", "*", "2.0", ")", "\n", "s", "[", "-", "1", "]", "*=", "-", "1.0", "\n", "# homogeneous transformation matrix", "\n", "", "M", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "=", "R", "\n", "", "else", ":", "\n", "# Rigid transformation matrix via quaternion", "\n", "# compute symmetric matrix N", "\n", "        ", "xx", ",", "yy", ",", "zz", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "1", ")", "\n", "xy", ",", "yz", ",", "zx", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "1", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "xz", ",", "yx", ",", "zy", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "2", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "N", "=", "[", "[", "xx", "+", "yy", "+", "zz", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "yz", "-", "zy", ",", "xx", "-", "yy", "-", "zz", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "zx", "-", "xz", ",", "xy", "+", "yx", ",", "yy", "-", "xx", "-", "zz", ",", "0.0", "]", ",", "\n", "[", "xy", "-", "yx", ",", "zx", "+", "xz", ",", "yz", "+", "zy", ",", "zz", "-", "xx", "-", "yy", "]", "]", "\n", "# quaternion: eigenvector corresponding to most positive eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "N", ")", "\n", "q", "=", "V", "[", ":", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "q", "/=", "vector_norm", "(", "q", ")", "# unit quaternion", "\n", "# homogeneous transformation matrix", "\n", "M", "=", "quaternion_matrix", "(", "q", ")", "\n", "\n", "", "if", "scale", "and", "not", "shear", ":", "\n", "# Affine transformation; scale is ratio of RMS deviations from centroid", "\n", "        ", "v0", "*=", "v0", "\n", "v1", "*=", "v1", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "*=", "math", ".", "sqrt", "(", "numpy", ".", "sum", "(", "v1", ")", "/", "numpy", ".", "sum", "(", "v0", ")", ")", "\n", "\n", "# move centroids back", "\n", "", "M", "=", "numpy", ".", "dot", "(", "numpy", ".", "linalg", ".", "inv", "(", "M1", ")", ",", "numpy", ".", "dot", "(", "M", ",", "M0", ")", ")", "\n", "M", "/=", "M", "[", "ndims", ",", "ndims", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.superimposition_matrix": [[998, 1047], ["transformations.affine_matrix_from_points", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.affine_matrix_from_points"], ["", "def", "superimposition_matrix", "(", "v0", ",", "v1", ",", "scale", "=", "False", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return matrix to transform given 3D point set into second point set.\n\n    v0 and v1 are shape (3, \\*) or (4, \\*) arrays of at least 3 points.\n\n    The parameters scale and usesvd are explained in the more general\n    affine_matrix_from_points function.\n\n    The returned matrix is a similarity or Euclidean transformation matrix.\n    This function has a fast C implementation in transformations.c.\n\n    >>> v0 = numpy.random.rand(3, 10)\n    >>> M = superimposition_matrix(v0, v0)\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> v0 = [[1,0,0], [0,1,0], [0,0,1], [1,1,1]]\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> S = scale_matrix(random.random())\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-9, 300).reshape(3, -1)\n    >>> M = superimposition_matrix(v0, v1, scale=True)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v = numpy.empty((4, 100, 3))\n    >>> v[:, :, 0] = v0\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0]))\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "return", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "False", ",", "\n", "scale", "=", "scale", ",", "usesvd", "=", "usesvd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.euler_matrix": [[1049, 1110], ["numpy.identity", "math.sin", "math.sin", "math.sin", "math.cos", "math.cos", "math.cos"], "function", ["None"], ["", "def", "euler_matrix", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> R = euler_matrix(1, 2, 3, 'syxz')\n    >>> numpy.allclose(numpy.sum(R[0]), -1.34786452)\n    True\n    >>> R = euler_matrix(1, 2, 3, (0, 1, 0, 1))\n    >>> numpy.allclose(numpy.sum(R[0]), -0.383436184)\n    True\n    >>> ai, aj, ak = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n    >>> for axes in _TUPLE2AXES.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "ai", ",", "aj", ",", "ak", "=", "-", "ai", ",", "-", "aj", ",", "-", "ak", "\n", "\n", "", "si", ",", "sj", ",", "sk", "=", "math", ".", "sin", "(", "ai", ")", ",", "math", ".", "sin", "(", "aj", ")", ",", "math", ".", "sin", "(", "ak", ")", "\n", "ci", ",", "cj", ",", "ck", "=", "math", ".", "cos", "(", "ai", ")", ",", "math", ".", "cos", "(", "aj", ")", ",", "math", ".", "cos", "(", "ak", ")", "\n", "cc", ",", "cs", "=", "ci", "*", "ck", ",", "ci", "*", "sk", "\n", "sc", ",", "ss", "=", "si", "*", "ck", ",", "si", "*", "sk", "\n", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "repetition", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "si", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "ci", "\n", "M", "[", "j", ",", "i", "]", "=", "sj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "-", "cj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "-", "cj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "*", "ck", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "sc", "+", "cs", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "cc", "-", "ss", "\n", "", "else", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "*", "ck", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "sc", "-", "cs", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "cc", "+", "ss", "\n", "M", "[", "j", ",", "i", "]", "=", "cj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "sj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "sj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "si", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "ci", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.euler_from_matrix": [[1112, 1168], ["numpy.array", "math.sqrt", "math.sqrt", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "axes.lower"], "function", ["None"], ["", "def", "euler_from_matrix", "(", "matrix", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from rotation matrix for specified axis sequence.\n\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    Note that many Euler angle triplets can describe one matrix.\n\n    >>> R0 = euler_matrix(1, 2, 3, 'syxz')\n    >>> al, be, ga = euler_from_matrix(R0, 'syxz')\n    >>> R1 = euler_matrix(al, be, ga, 'syxz')\n    >>> numpy.allclose(R0, R1)\n    True\n    >>> angles = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R0 = euler_matrix(axes=axes, *angles)\n    ...    R1 = euler_matrix(axes=axes, *euler_from_matrix(R0, axes))\n    ...    if not numpy.allclose(R0, R1): print(axes, \"failed\")\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "if", "repetition", ":", "\n", "        ", "sy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "j", "]", "*", "M", "[", "i", ",", "j", "]", "+", "M", "[", "i", ",", "k", "]", "*", "M", "[", "i", ",", "k", "]", ")", "\n", "if", "sy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "i", ",", "j", "]", ",", "M", "[", "i", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "-", "M", "[", "k", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "0.0", "\n", "", "", "else", ":", "\n", "        ", "cy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "i", "]", "*", "M", "[", "i", ",", "i", "]", "+", "M", "[", "j", ",", "i", "]", "*", "M", "[", "j", ",", "i", "]", ")", "\n", "if", "cy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "k", ",", "j", "]", ",", "M", "[", "k", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "0.0", "\n", "\n", "", "", "if", "parity", ":", "\n", "        ", "ax", ",", "ay", ",", "az", "=", "-", "ax", ",", "-", "ay", ",", "-", "az", "\n", "", "if", "frame", ":", "\n", "        ", "ax", ",", "az", "=", "az", ",", "ax", "\n", "", "return", "ax", ",", "ay", ",", "az", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.euler_from_quaternion": [[1170, 1179], ["transformations.euler_from_matrix", "transformations.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.euler_from_matrix", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix"], ["", "def", "euler_from_quaternion", "(", "quaternion", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from quaternion for specified axis sequence.\n\n    >>> angles = euler_from_quaternion([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(angles, [0.123, 0, 0])\n    True\n\n    \"\"\"", "\n", "return", "euler_from_matrix", "(", "quaternion_matrix", "(", "quaternion", ")", ",", "axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_from_euler": [[1181, 1236], ["math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.empty", "axes.lower"], "function", ["None"], ["", "def", "quaternion_from_euler", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return quaternion from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> q = quaternion_from_euler(1, 2, 3, 'ryxz')\n    >>> numpy.allclose(q, [0.435953, 0.310622, -0.718287, 0.444435])\n    True\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "+", "1", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "-", "1", "]", "+", "1", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "]", "+", "1", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "aj", "=", "-", "aj", "\n", "\n", "", "ai", "/=", "2.0", "\n", "aj", "/=", "2.0", "\n", "ak", "/=", "2.0", "\n", "ci", "=", "math", ".", "cos", "(", "ai", ")", "\n", "si", "=", "math", ".", "sin", "(", "ai", ")", "\n", "cj", "=", "math", ".", "cos", "(", "aj", ")", "\n", "sj", "=", "math", ".", "sin", "(", "aj", ")", "\n", "ck", "=", "math", ".", "cos", "(", "ak", ")", "\n", "sk", "=", "math", ".", "sin", "(", "ak", ")", "\n", "cc", "=", "ci", "*", "ck", "\n", "cs", "=", "ci", "*", "sk", "\n", "sc", "=", "si", "*", "ck", "\n", "ss", "=", "si", "*", "sk", "\n", "\n", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "if", "repetition", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "(", "cc", "-", "ss", ")", "\n", "q", "[", "i", "]", "=", "cj", "*", "(", "cs", "+", "sc", ")", "\n", "q", "[", "j", "]", "=", "sj", "*", "(", "cc", "+", "ss", ")", "\n", "q", "[", "k", "]", "=", "sj", "*", "(", "cs", "-", "sc", ")", "\n", "", "else", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "cc", "+", "sj", "*", "ss", "\n", "q", "[", "i", "]", "=", "cj", "*", "sc", "-", "sj", "*", "cs", "\n", "q", "[", "j", "]", "=", "cj", "*", "ss", "+", "sj", "*", "cc", "\n", "q", "[", "k", "]", "=", "cj", "*", "cs", "-", "sj", "*", "sc", "\n", "", "if", "parity", ":", "\n", "        ", "q", "[", "j", "]", "*=", "-", "1.0", "\n", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_about_axis": [[1238, 1252], ["numpy.array", "transformations.vector_norm", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm"], ["", "def", "quaternion_about_axis", "(", "angle", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return quaternion for rotation about axis.\n\n    >>> q = quaternion_about_axis(0.123, [1, 0, 0])\n    >>> numpy.allclose(q, [0.99810947, 0.06146124, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "axis", "[", "0", "]", ",", "axis", "[", "1", "]", ",", "axis", "[", "2", "]", "]", ")", "\n", "qlen", "=", "vector_norm", "(", "q", ")", "\n", "if", "qlen", ">", "_EPS", ":", "\n", "        ", "q", "*=", "math", ".", "sin", "(", "angle", "/", "2.0", ")", "/", "qlen", "\n", "", "q", "[", "0", "]", "=", "math", ".", "cos", "(", "angle", "/", "2.0", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix": [[1254, 1279], ["numpy.array", "numpy.dot", "math.sqrt", "numpy.outer", "numpy.array", "numpy.identity"], "function", ["None"], ["", "def", "quaternion_matrix", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from quaternion.\n\n    >>> M = quaternion_matrix([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(M, rotation_matrix(0.123, [1, 0, 0]))\n    True\n    >>> M = quaternion_matrix([1, 0, 0, 0])\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> M = quaternion_matrix([0, 1, 0, 0])\n    >>> numpy.allclose(M, numpy.diag([1, -1, -1, 1]))\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "n", "=", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "if", "n", "<", "_EPS", ":", "\n", "        ", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "", "q", "*=", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", "\n", "q", "=", "numpy", ".", "outer", "(", "q", ",", "q", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "1.0", "-", "q", "[", "2", ",", "2", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "1", ",", "2", "]", "-", "q", "[", "3", ",", "0", "]", ",", "q", "[", "1", ",", "3", "]", "+", "q", "[", "2", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "2", "]", "+", "q", "[", "3", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "2", ",", "3", "]", "-", "q", "[", "1", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "3", "]", "-", "q", "[", "2", ",", "0", "]", ",", "q", "[", "2", ",", "3", "]", "+", "q", "[", "1", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "2", ",", "2", "]", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_from_matrix": [[1281, 1364], ["numpy.array", "numpy.empty", "numpy.trace", "numpy.array", "numpy.linalg.eigh", "numpy.negative", "math.sqrt", "numpy.argmax"], "function", ["None"], ["", "def", "quaternion_from_matrix", "(", "matrix", ",", "isprecise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return quaternion from rotation matrix.\n\n    If isprecise is True, the input matrix is assumed to be a precise rotation\n    matrix and a faster algorithm is used.\n\n    >>> q = quaternion_from_matrix(numpy.identity(4), True)\n    >>> numpy.allclose(q, [1, 0, 0, 0])\n    True\n    >>> q = quaternion_from_matrix(numpy.diag([1, -1, -1, 1]))\n    >>> numpy.allclose(q, [0, 1, 0, 0]) or numpy.allclose(q, [0, -1, 0, 0])\n    True\n    >>> R = rotation_matrix(0.123, (1, 2, 3))\n    >>> q = quaternion_from_matrix(R, True)\n    >>> numpy.allclose(q, [0.9981095, 0.0164262, 0.0328524, 0.0492786])\n    True\n    >>> R = [[-0.545, 0.797, 0.260, 0], [0.733, 0.603, -0.313, 0],\n    ...      [-0.407, 0.021, -0.913, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.19069, 0.43736, 0.87485, -0.083611])\n    True\n    >>> R = [[0.395, 0.362, 0.843, 0], [-0.626, 0.796, -0.056, 0],\n    ...      [-0.677, -0.498, 0.529, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.82336615, -0.13610694, 0.46344705, -0.29792603])\n    True\n    >>> R = random_rotation_matrix()\n    >>> q = quaternion_from_matrix(R)\n    >>> is_same_transform(R, quaternion_matrix(q))\n    True\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n    >>> R = euler_matrix(0.0, 0.0, numpy.pi/2.0)\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "4", ",", ":", "4", "]", "\n", "if", "isprecise", ":", "\n", "        ", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "t", "=", "numpy", ".", "trace", "(", "M", ")", "\n", "if", "t", ">", "M", "[", "3", ",", "3", "]", ":", "\n", "            ", "q", "[", "0", "]", "=", "t", "\n", "q", "[", "3", "]", "=", "M", "[", "1", ",", "0", "]", "-", "M", "[", "0", ",", "1", "]", "\n", "q", "[", "2", "]", "=", "M", "[", "0", ",", "2", "]", "-", "M", "[", "2", ",", "0", "]", "\n", "q", "[", "1", "]", "=", "M", "[", "2", ",", "1", "]", "-", "M", "[", "1", ",", "2", "]", "\n", "", "else", ":", "\n", "            ", "i", ",", "j", ",", "k", "=", "0", ",", "1", ",", "2", "\n", "if", "M", "[", "1", ",", "1", "]", ">", "M", "[", "0", ",", "0", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "1", ",", "2", ",", "0", "\n", "", "if", "M", "[", "2", ",", "2", "]", ">", "M", "[", "i", ",", "i", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "2", ",", "0", ",", "1", "\n", "", "t", "=", "M", "[", "i", ",", "i", "]", "-", "(", "M", "[", "j", ",", "j", "]", "+", "M", "[", "k", ",", "k", "]", ")", "+", "M", "[", "3", ",", "3", "]", "\n", "q", "[", "i", "]", "=", "t", "\n", "q", "[", "j", "]", "=", "M", "[", "i", ",", "j", "]", "+", "M", "[", "j", ",", "i", "]", "\n", "q", "[", "k", "]", "=", "M", "[", "k", ",", "i", "]", "+", "M", "[", "i", ",", "k", "]", "\n", "q", "[", "3", "]", "=", "M", "[", "k", ",", "j", "]", "-", "M", "[", "j", ",", "k", "]", "\n", "q", "=", "q", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", "]", "\n", "", "q", "*=", "0.5", "/", "math", ".", "sqrt", "(", "t", "*", "M", "[", "3", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "        ", "m00", "=", "M", "[", "0", ",", "0", "]", "\n", "m01", "=", "M", "[", "0", ",", "1", "]", "\n", "m02", "=", "M", "[", "0", ",", "2", "]", "\n", "m10", "=", "M", "[", "1", ",", "0", "]", "\n", "m11", "=", "M", "[", "1", ",", "1", "]", "\n", "m12", "=", "M", "[", "1", ",", "2", "]", "\n", "m20", "=", "M", "[", "2", ",", "0", "]", "\n", "m21", "=", "M", "[", "2", ",", "1", "]", "\n", "m22", "=", "M", "[", "2", ",", "2", "]", "\n", "# symmetric matrix K", "\n", "K", "=", "numpy", ".", "array", "(", "[", "[", "m00", "-", "m11", "-", "m22", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m01", "+", "m10", ",", "m11", "-", "m00", "-", "m22", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m02", "+", "m20", ",", "m12", "+", "m21", ",", "m22", "-", "m00", "-", "m11", ",", "0.0", "]", ",", "\n", "[", "m21", "-", "m12", ",", "m02", "-", "m20", ",", "m10", "-", "m01", ",", "m00", "+", "m11", "+", "m22", "]", "]", ")", "\n", "K", "/=", "3.0", "\n", "# quaternion is eigenvector of K that corresponds to largest eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "q", "=", "V", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "", "if", "q", "[", "0", "]", "<", "0.0", ":", "\n", "        ", "numpy", ".", "negative", "(", "q", ",", "q", ")", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_multiply": [[1366, 1381], ["numpy.array"], "function", ["None"], ["", "def", "quaternion_multiply", "(", "quaternion1", ",", "quaternion0", ")", ":", "\n", "    ", "\"\"\"Return multiplication of two quaternions.\n\n    >>> q = quaternion_multiply([4, 1, -2, 3], [8, -5, 6, 7])\n    >>> numpy.allclose(q, [28, -44, -14, 48])\n    True\n\n    \"\"\"", "\n", "w0", ",", "x0", ",", "y0", ",", "z0", "=", "quaternion0", "\n", "w1", ",", "x1", ",", "y1", ",", "z1", "=", "quaternion1", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "-", "x1", "*", "x0", "-", "y1", "*", "y0", "-", "z1", "*", "z0", "+", "w1", "*", "w0", ",", "\n", "x1", "*", "w0", "+", "y1", "*", "z0", "-", "z1", "*", "y0", "+", "w1", "*", "x0", ",", "\n", "-", "x1", "*", "z0", "+", "y1", "*", "w0", "+", "z1", "*", "x0", "+", "w1", "*", "y0", ",", "\n", "x1", "*", "y0", "-", "y1", "*", "x0", "+", "z1", "*", "w0", "+", "w1", "*", "z0", "]", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_conjugate": [[1383, 1395], ["numpy.array", "numpy.negative"], "function", ["None"], ["", "def", "quaternion_conjugate", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return conjugate of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_conjugate(q0)\n    >>> q1[0] == q0[0] and all(q1[1:] == -q0[1:])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_inverse": [[1397, 1409], ["numpy.array", "numpy.negative", "numpy.dot"], "function", ["None"], ["", "def", "quaternion_inverse", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return inverse of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_inverse(q0)\n    >>> numpy.allclose(quaternion_multiply(q0, q1), [1, 0, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "/", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_real": [[1411, 1419], ["float"], "function", ["None"], ["", "def", "quaternion_real", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return real part of quaternion.\n\n    >>> quaternion_real([3, 0, 1, 2])\n    3.0\n\n    \"\"\"", "\n", "return", "float", "(", "quaternion", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_imag": [[1421, 1429], ["numpy.array"], "function", ["None"], ["", "def", "quaternion_imag", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return imaginary part of quaternion.\n\n    >>> quaternion_imag([3, 0, 1, 2])\n    array([ 0.,  1.,  2.])\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "quaternion", "[", "1", ":", "4", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_slerp": [[1431, 1470], ["transformations.unit_vector", "transformations.unit_vector", "numpy.dot", "abs", "numpy.negative", "math.acos", "abs", "math.sin", "math.sin", "math.sin", "abs"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector"], ["", "def", "quaternion_slerp", "(", "quat0", ",", "quat1", ",", "fraction", ",", "spin", "=", "0", ",", "shortestpath", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return spherical linear interpolation between two quaternions.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = random_quaternion()\n    >>> q = quaternion_slerp(q0, q1, 0)\n    >>> numpy.allclose(q, q0)\n    True\n    >>> q = quaternion_slerp(q0, q1, 1, 1)\n    >>> numpy.allclose(q, q1)\n    True\n    >>> q = quaternion_slerp(q0, q1, 0.5)\n    >>> angle = math.acos(numpy.dot(q0, q))\n    >>> numpy.allclose(2, math.acos(numpy.dot(q0, q1)) / angle) or \\\n        numpy.allclose(2, math.acos(-numpy.dot(q0, q1)) / angle)\n    True\n\n    \"\"\"", "\n", "q0", "=", "unit_vector", "(", "quat0", "[", ":", "4", "]", ")", "\n", "q1", "=", "unit_vector", "(", "quat1", "[", ":", "4", "]", ")", "\n", "if", "fraction", "==", "0.0", ":", "\n", "        ", "return", "q0", "\n", "", "elif", "fraction", "==", "1.0", ":", "\n", "        ", "return", "q1", "\n", "", "d", "=", "numpy", ".", "dot", "(", "q0", ",", "q1", ")", "\n", "if", "abs", "(", "abs", "(", "d", ")", "-", "1.0", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "if", "shortestpath", "and", "d", "<", "0.0", ":", "\n", "# invert rotation", "\n", "        ", "d", "=", "-", "d", "\n", "numpy", ".", "negative", "(", "q1", ",", "q1", ")", "\n", "", "angle", "=", "math", ".", "acos", "(", "d", ")", "+", "spin", "*", "math", ".", "pi", "\n", "if", "abs", "(", "angle", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "isin", "=", "1.0", "/", "math", ".", "sin", "(", "angle", ")", "\n", "q0", "*=", "math", ".", "sin", "(", "(", "1.0", "-", "fraction", ")", "*", "angle", ")", "*", "isin", "\n", "q1", "*=", "math", ".", "sin", "(", "fraction", "*", "angle", ")", "*", "isin", "\n", "q0", "+=", "q1", "\n", "return", "q0", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.random_quaternion": [[1472, 1498], ["numpy.sqrt", "numpy.sqrt", "numpy.array", "numpy.random.rand", "len", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "random_quaternion", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random unit quaternion.\n\n    rand: array like or None\n        Three independent random variables that are uniformly distributed\n        between 0 and 1.\n\n    >>> q = random_quaternion()\n    >>> numpy.allclose(1, vector_norm(q))\n    True\n    >>> q = random_quaternion(numpy.random.random(3))\n    >>> len(q.shape), q.shape[0]==4\n    (1, True)\n\n    \"\"\"", "\n", "if", "rand", "is", "None", ":", "\n", "        ", "rand", "=", "numpy", ".", "random", ".", "rand", "(", "3", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "rand", ")", "==", "3", "\n", "", "r1", "=", "numpy", ".", "sqrt", "(", "1.0", "-", "rand", "[", "0", "]", ")", "\n", "r2", "=", "numpy", ".", "sqrt", "(", "rand", "[", "0", "]", ")", "\n", "pi2", "=", "math", ".", "pi", "*", "2.0", "\n", "t1", "=", "pi2", "*", "rand", "[", "1", "]", "\n", "t2", "=", "pi2", "*", "rand", "[", "2", "]", "\n", "return", "numpy", ".", "array", "(", "[", "numpy", ".", "cos", "(", "t2", ")", "*", "r2", ",", "numpy", ".", "sin", "(", "t1", ")", "*", "r1", ",", "\n", "numpy", ".", "cos", "(", "t1", ")", "*", "r1", ",", "numpy", ".", "sin", "(", "t2", ")", "*", "r2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.random_rotation_matrix": [[1500, 1513], ["transformations.quaternion_matrix", "transformations.random_quaternion"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.random_quaternion"], ["", "def", "random_rotation_matrix", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random rotation matrix.\n\n    rand: array like\n        Three independent random variables that are uniformly distributed\n        between 0 and 1 for each returned quaternion.\n\n    >>> R = random_rotation_matrix()\n    >>> numpy.allclose(numpy.dot(R.T, R), numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "quaternion_matrix", "(", "random_quaternion", "(", "rand", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.arcball_map_to_sphere": [[1626, 1637], ["math.sqrt", "numpy.array", "numpy.array", "math.sqrt"], "function", ["None"], ["", "", "def", "arcball_map_to_sphere", "(", "point", ",", "center", ",", "radius", ")", ":", "\n", "    ", "\"\"\"Return unit sphere coordinates from window coordinates.\"\"\"", "\n", "v0", "=", "(", "point", "[", "0", "]", "-", "center", "[", "0", "]", ")", "/", "radius", "\n", "v1", "=", "(", "center", "[", "1", "]", "-", "point", "[", "1", "]", ")", "/", "radius", "\n", "n", "=", "v0", "*", "v0", "+", "v1", "*", "v1", "\n", "if", "n", ">", "1.0", ":", "\n", "# position outside of sphere", "\n", "        ", "n", "=", "math", ".", "sqrt", "(", "n", ")", "\n", "return", "numpy", ".", "array", "(", "[", "v0", "/", "n", ",", "v1", "/", "n", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "v0", ",", "v1", ",", "math", ".", "sqrt", "(", "1.0", "-", "n", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.arcball_constrain_to_axis": [[1639, 1653], ["numpy.array", "numpy.array", "transformations.vector_norm", "transformations.unit_vector", "numpy.dot", "numpy.array", "numpy.negative"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector"], ["", "", "def", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return sphere point perpendicular to axis.\"\"\"", "\n", "v", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "a", "=", "numpy", ".", "array", "(", "axis", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v", "-=", "a", "*", "numpy", ".", "dot", "(", "a", ",", "v", ")", "# on plane", "\n", "n", "=", "vector_norm", "(", "v", ")", "\n", "if", "n", ">", "_EPS", ":", "\n", "        ", "if", "v", "[", "2", "]", "<", "0.0", ":", "\n", "            ", "numpy", ".", "negative", "(", "v", ",", "v", ")", "\n", "", "v", "/=", "n", "\n", "return", "v", "\n", "", "if", "a", "[", "2", "]", "==", "1.0", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "return", "unit_vector", "(", "[", "-", "a", "[", "1", "]", ",", "a", "[", "0", "]", ",", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.arcball_nearest_axis": [[1655, 1666], ["numpy.array", "numpy.dot", "transformations.arcball_constrain_to_axis"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.arcball_constrain_to_axis"], ["", "def", "arcball_nearest_axis", "(", "point", ",", "axes", ")", ":", "\n", "    ", "\"\"\"Return axis, which arc is nearest to point.\"\"\"", "\n", "point", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "nearest", "=", "None", "\n", "mx", "=", "-", "1.0", "\n", "for", "axis", "in", "axes", ":", "\n", "        ", "t", "=", "numpy", ".", "dot", "(", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ",", "point", ")", "\n", "if", "t", ">", "mx", ":", "\n", "            ", "nearest", "=", "axis", "\n", "mx", "=", "t", "\n", "", "", "return", "nearest", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm": [[1688, 1725], ["numpy.array", "numpy.atleast_1d", "numpy.sqrt", "numpy.sum", "numpy.sqrt", "math.sqrt", "numpy.sum", "numpy.dot"], "function", ["None"], ["def", "vector_norm", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return length, i.e. Euclidean norm, of ndarray along axis.\n\n    >>> v = numpy.random.random(3)\n    >>> n = vector_norm(v)\n    >>> numpy.allclose(n, numpy.linalg.norm(v))\n    True\n    >>> v = numpy.random.rand(6, 5, 3)\n    >>> n = vector_norm(v, axis=-1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=2)))\n    True\n    >>> n = vector_norm(v, axis=1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> v = numpy.random.rand(5, 4, 3)\n    >>> n = numpy.empty((5, 3))\n    >>> vector_norm(v, axis=1, out=n)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> vector_norm([])\n    0.0\n    >>> vector_norm([1])\n    1.0\n\n    \"\"\"", "\n", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "return", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "", "data", "*=", "data", "\n", "out", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "data", "*=", "data", "\n", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ",", "out", "=", "out", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.unit_vector": [[1727, 1769], ["numpy.atleast_1d", "numpy.sqrt", "numpy.array", "numpy.sum", "numpy.expand_dims", "math.sqrt", "numpy.array", "numpy.dot"], "function", ["None"], ["", "", "def", "unit_vector", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return ndarray normalized by length, i.e. Euclidean norm, along axis.\n\n    >>> v0 = numpy.random.random(3)\n    >>> v1 = unit_vector(v0)\n    >>> numpy.allclose(v1, v0 / numpy.linalg.norm(v0))\n    True\n    >>> v0 = numpy.random.rand(5, 4, 3)\n    >>> v1 = unit_vector(v0, axis=-1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=2)), 2)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = unit_vector(v0, axis=1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=1)), 1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = numpy.empty((5, 4, 3))\n    >>> unit_vector(v0, axis=1, out=v1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> list(unit_vector([]))\n    []\n    >>> list(unit_vector([1]))\n    [1.0]\n\n    \"\"\"", "\n", "if", "out", "is", "None", ":", "\n", "        ", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "data", "/=", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "return", "data", "\n", "", "", "else", ":", "\n", "        ", "if", "out", "is", "not", "data", ":", "\n", "            ", "out", "[", ":", "]", "=", "numpy", ".", "array", "(", "data", ",", "copy", "=", "False", ")", "\n", "", "data", "=", "out", "\n", "", "length", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", "*", "data", ",", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "length", ",", "length", ")", "\n", "if", "axis", "is", "not", "None", ":", "\n", "        ", "length", "=", "numpy", ".", "expand_dims", "(", "length", ",", "axis", ")", "\n", "", "data", "/=", "length", "\n", "if", "out", "is", "None", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.random_vector": [[1771, 1784], ["numpy.random.random"], "function", ["None"], ["", "", "def", "random_vector", "(", "size", ")", ":", "\n", "    ", "\"\"\"Return array of random doubles in the half-open interval [0.0, 1.0).\n\n    >>> v = random_vector(10000)\n    >>> numpy.all(v >= 0) and numpy.all(v < 1)\n    True\n    >>> v0 = random_vector(10)\n    >>> v1 = random_vector(10)\n    >>> numpy.any(v0 == v1)\n    False\n\n    \"\"\"", "\n", "return", "numpy", ".", "random", ".", "random", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_product": [[1786, 1805], ["numpy.cross"], "function", ["None"], ["", "def", "vector_product", "(", "v0", ",", "v1", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return vector perpendicular to vectors.\n\n    >>> v = vector_product([2, 0, 0], [0, 3, 0])\n    >>> numpy.allclose(v, [0, 0, 6])\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> v = vector_product(v0, v1)\n    >>> numpy.allclose(v, [[0, 0, 0, 0], [0, 0, 6, 6], [0, -6, 0, -6]])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> v = vector_product(v0, v1, axis=1)\n    >>> numpy.allclose(v, [[0, 0, 6], [0, -6, 0], [6, 0, 0], [0, -6, 6]])\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "cross", "(", "v0", ",", "v1", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.angle_between_vectors": [[1807, 1837], ["numpy.array", "numpy.array", "numpy.sum", "numpy.clip", "numpy.arccos", "transformations.vector_norm", "transformations.vector_norm", "numpy.fabs"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.vector_norm"], ["", "def", "angle_between_vectors", "(", "v0", ",", "v1", ",", "directed", "=", "True", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return angle between vectors.\n\n    If directed is False, the input vectors are interpreted as undirected axes,\n    i.e. the maximum angle is pi/2.\n\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3])\n    >>> numpy.allclose(a, math.pi)\n    True\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3], directed=False)\n    >>> numpy.allclose(a, 0)\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> a = angle_between_vectors(v0, v1)\n    >>> numpy.allclose(a, [0, 1.5708, 1.5708, 0.95532])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> a = angle_between_vectors(v0, v1, axis=1)\n    >>> numpy.allclose(a, [1.5708, 1.5708, 1.5708, 0.95532])\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "dot", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "axis", ")", "\n", "dot", "/=", "vector_norm", "(", "v0", ",", "axis", "=", "axis", ")", "*", "vector_norm", "(", "v1", ",", "axis", "=", "axis", ")", "\n", "dot", "=", "numpy", ".", "clip", "(", "dot", ",", "-", "1.0", ",", "1.0", ")", "\n", "return", "numpy", ".", "arccos", "(", "dot", "if", "directed", "else", "numpy", ".", "fabs", "(", "dot", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.inverse_matrix": [[1839, 1853], ["numpy.linalg.inv"], "function", ["None"], ["", "def", "inverse_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return inverse of square transformation matrix.\n\n    >>> M0 = random_rotation_matrix()\n    >>> M1 = inverse_matrix(M0.T)\n    >>> numpy.allclose(M1, numpy.linalg.inv(M0.T))\n    True\n    >>> for size in range(1, 7):\n    ...     M0 = numpy.random.rand(size, size)\n    ...     M1 = inverse_matrix(M0)\n    ...     if not numpy.allclose(M1, numpy.linalg.inv(M0)): print(size)\n\n    \"\"\"", "\n", "return", "numpy", ".", "linalg", ".", "inv", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.concatenate_matrices": [[1855, 1869], ["numpy.identity", "numpy.dot"], "function", ["None"], ["", "def", "concatenate_matrices", "(", "*", "matrices", ")", ":", "\n", "    ", "\"\"\"Return concatenation of series of transformation matrices.\n\n    >>> M = numpy.random.rand(16).reshape((4, 4)) - 0.5\n    >>> numpy.allclose(M, concatenate_matrices(M))\n    True\n    >>> numpy.allclose(numpy.dot(M, M.T), concatenate_matrices(M, M.T))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "for", "i", "in", "matrices", ":", "\n", "        ", "M", "=", "numpy", ".", "dot", "(", "M", ",", "i", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.is_same_transform": [[1871, 1885], ["numpy.array", "numpy.array", "numpy.allclose"], "function", ["None"], ["", "def", "is_same_transform", "(", "matrix0", ",", "matrix1", ")", ":", "\n", "    ", "\"\"\"Return True if two matrices perform same transformation.\n\n    >>> is_same_transform(numpy.identity(4), numpy.identity(4))\n    True\n    >>> is_same_transform(numpy.identity(4), random_rotation_matrix())\n    False\n\n    \"\"\"", "\n", "matrix0", "=", "numpy", ".", "array", "(", "matrix0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix0", "/=", "matrix0", "[", "3", ",", "3", "]", "\n", "matrix1", "=", "numpy", ".", "array", "(", "matrix1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix1", "/=", "matrix1", "[", "3", ",", "3", "]", "\n", "return", "numpy", ".", "allclose", "(", "matrix0", ",", "matrix1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.is_same_quaternion": [[1887, 1892], ["numpy.array", "numpy.array", "numpy.allclose", "numpy.allclose"], "function", ["None"], ["", "def", "is_same_quaternion", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "\"\"\"Return True if two quaternions are equal.\"\"\"", "\n", "q0", "=", "numpy", ".", "array", "(", "q0", ")", "\n", "q1", "=", "numpy", ".", "array", "(", "q1", ")", "\n", "return", "numpy", ".", "allclose", "(", "q0", ",", "q1", ")", "or", "numpy", ".", "allclose", "(", "q0", ",", "-", "q1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations._import_module": [[1894, 1924], ["dir", "import_module", "import_module", "getattr", "warnings.warn", "attr.startswith", "globals", "globals", "globals", "globals", "warnings.warn"], "function", ["None"], ["", "def", "_import_module", "(", "name", ",", "package", "=", "None", ",", "warn", "=", "True", ",", "prefix", "=", "'_py_'", ",", "ignore", "=", "'_'", ")", ":", "\n", "    ", "\"\"\"Try import all public attributes from module into global namespace.\n\n    Existing attributes with name clashes are renamed with prefix.\n    Attributes starting with underscore are ignored by default.\n\n    Return True on successful import.\n\n    \"\"\"", "\n", "import", "warnings", "\n", "from", "importlib", "import", "import_module", "\n", "try", ":", "\n", "        ", "if", "not", "package", ":", "\n", "            ", "module", "=", "import_module", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "module", "=", "import_module", "(", "'.'", "+", "name", ",", "package", "=", "package", ")", "\n", "", "", "except", "ImportError", ":", "\n", "        ", "if", "warn", ":", "\n", "            ", "warnings", ".", "warn", "(", "'failed to import module %s'", "%", "name", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "attr", "in", "dir", "(", "module", ")", ":", "\n", "            ", "if", "ignore", "and", "attr", ".", "startswith", "(", "ignore", ")", ":", "\n", "                ", "continue", "\n", "", "if", "prefix", ":", "\n", "                ", "if", "attr", "in", "globals", "(", ")", ":", "\n", "                    ", "globals", "(", ")", "[", "prefix", "+", "attr", "]", "=", "globals", "(", ")", "[", "attr", "]", "\n", "", "elif", "warn", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'no Python implementation of '", "+", "attr", ")", "\n", "", "", "globals", "(", ")", "[", "attr", "]", "=", "getattr", "(", "module", ",", "attr", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.loss_refiner.Loss_refine.__init__": [[69, 73], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points_mesh", ",", "sym_list", ")", ":", "\n", "        ", "super", "(", "Loss_refine", ",", "self", ")", ".", "__init__", "(", "True", ")", "\n", "self", ".", "num_pt_mesh", "=", "num_points_mesh", "\n", "self", ".", "sym_list", "=", "sym_list", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.loss_refiner.Loss_refine.forward": [[75, 77], ["loss_refiner.loss_calculation"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.loss.loss_calculation"], ["", "def", "forward", "(", "self", ",", "pred_r", ",", "pred_t", ",", "target", ",", "model_points", ",", "idx", ",", "points", ")", ":", "\n", "        ", "return", "loss_calculation", "(", "pred_r", ",", "pred_t", ",", "target", ",", "model_points", ",", "idx", ",", "points", ",", "self", ".", "num_pt_mesh", ",", "self", ".", "sym_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.loss_refiner.loss_calculation": [[12, 65], ["DenseFusion.lib.knn.__init__.KNearestNeighbor", "pred_r.view.view", "pred_t.contiguous().view.view", "pred_r.view.size", "len", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "base.contiguous().transpose().contiguous.contiguous().transpose().contiguous", "model_points.view().repeat().view.view().repeat().view", "target.view().permute().contiguous.view().repeat().view", "pred_t.contiguous().view.contiguous().view", "torch.add", "torch.add", "torch.add", "torch.mean", "torch.mean", "torch.mean", "points.view.view", "ori_base[].view().contiguous", "t.repeat().contiguous().view", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.bmm().contiguous", "ori_target[].view().contiguous", "t.repeat().contiguous().view", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.bmm", "torch.bmm", "torch.bmm", "idx[].item", "target[].transpose().contiguous().view", "pred.view().permute().contiguous.permute().contiguous().view", "DenseFusion.lib.knn.__init__.KNearestNeighbor.", "torch.index_select", "torch.index_select", "torch.index_select", "target.view().permute().contiguous.view().permute().contiguous", "pred.view().permute().contiguous.view().permute().contiguous", "torch.norm", "torch.norm", "torch.norm", "torch.bmm().contiguous.detach", "torch.bmm().contiguous.detach", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "base.contiguous().transpose().contiguous.contiguous().transpose", "model_points.view().repeat().view.view().repeat", "target.view().permute().contiguous.view().repeat", "pred_t.contiguous().view.contiguous", "target.view().permute().contiguous.unsqueeze", "pred.view().permute().contiguous.unsqueeze", "ori_base[].view", "t.repeat().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "ori_target[].view", "t.repeat().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.norm", "torch.norm", "torch.norm", "target[].transpose().contiguous", "pred.view().permute().contiguous.permute().contiguous", "knn.view", "target.view().permute().contiguous.view().permute", "pred.view().permute().contiguous.view().permute", "torch.cat", "torch.cat", "torch.cat", "base.contiguous().transpose().contiguous.contiguous", "model_points.view().repeat().view.view", "target.view().permute().contiguous.view", "t.repeat", "t.repeat", "target[].transpose", "pred.view().permute().contiguous.permute", "target.view().permute().contiguous.view", "pred.view().permute().contiguous.view"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add"], ["def", "loss_calculation", "(", "pred_r", ",", "pred_t", ",", "target", ",", "model_points", ",", "idx", ",", "points", ",", "num_point_mesh", ",", "sym_list", ")", ":", "\n", "    ", "knn", "=", "KNearestNeighbor", "(", "1", ")", "\n", "pred_r", "=", "pred_r", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "pred_t", "=", "pred_t", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "bs", ",", "num_p", ",", "_", "=", "pred_r", ".", "size", "(", ")", "\n", "num_input_points", "=", "len", "(", "points", "[", "0", "]", ")", "\n", "\n", "pred_r", "=", "pred_r", "/", "(", "torch", ".", "norm", "(", "pred_r", ",", "dim", "=", "2", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ")", "\n", "\n", "base", "=", "torch", ".", "cat", "(", "(", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ")", ",", "dim", "=", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ",", "3", ",", "3", ")", "\n", "\n", "ori_base", "=", "base", "\n", "base", "=", "base", ".", "contiguous", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "model_points", "=", "model_points", ".", "view", "(", "bs", ",", "1", ",", "num_point_mesh", ",", "3", ")", ".", "repeat", "(", "1", ",", "num_p", ",", "1", ",", "1", ")", ".", "view", "(", "bs", "*", "num_p", ",", "num_point_mesh", ",", "3", ")", "\n", "target", "=", "target", ".", "view", "(", "bs", ",", "1", ",", "num_point_mesh", ",", "3", ")", ".", "repeat", "(", "1", ",", "num_p", ",", "1", ",", "1", ")", ".", "view", "(", "bs", "*", "num_p", ",", "num_point_mesh", ",", "3", ")", "\n", "ori_target", "=", "target", "\n", "pred_t", "=", "pred_t", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ",", "1", ",", "3", ")", "\n", "ori_t", "=", "pred_t", "\n", "\n", "pred", "=", "torch", ".", "add", "(", "torch", ".", "bmm", "(", "model_points", ",", "base", ")", ",", "pred_t", ")", "\n", "\n", "if", "idx", "[", "0", "]", ".", "item", "(", ")", "in", "sym_list", ":", "\n", "        ", "target", "=", "target", "[", "0", "]", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "3", ",", "-", "1", ")", "\n", "pred", "=", "pred", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "3", ",", "-", "1", ")", "\n", "inds", "=", "knn", "(", "target", ".", "unsqueeze", "(", "0", ")", ",", "pred", ".", "unsqueeze", "(", "0", ")", ")", "\n", "target", "=", "torch", ".", "index_select", "(", "target", ",", "1", ",", "inds", ".", "view", "(", "-", "1", ")", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "3", ",", "bs", "*", "num_p", ",", "num_point_mesh", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "pred", "=", "pred", ".", "view", "(", "3", ",", "bs", "*", "num_p", ",", "num_point_mesh", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "dis", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "(", "pred", "-", "target", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "t", "=", "ori_t", "[", "0", "]", "\n", "points", "=", "points", ".", "view", "(", "1", ",", "num_input_points", ",", "3", ")", "\n", "\n", "ori_base", "=", "ori_base", "[", "0", "]", ".", "view", "(", "1", ",", "3", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "ori_t", "=", "t", ".", "repeat", "(", "bs", "*", "num_input_points", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "bs", "*", "num_input_points", ",", "3", ")", "\n", "new_points", "=", "torch", ".", "bmm", "(", "(", "points", "-", "ori_t", ")", ",", "ori_base", ")", ".", "contiguous", "(", ")", "\n", "\n", "new_target", "=", "ori_target", "[", "0", "]", ".", "view", "(", "1", ",", "num_point_mesh", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "ori_t", "=", "t", ".", "repeat", "(", "num_point_mesh", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "num_point_mesh", ",", "3", ")", "\n", "new_target", "=", "torch", ".", "bmm", "(", "(", "new_target", "-", "ori_t", ")", ",", "ori_base", ")", ".", "contiguous", "(", ")", "\n", "\n", "# print('------------> ', dis.item(), idx[0].item())", "\n", "del", "knn", "\n", "return", "dis", ",", "new_points", ".", "detach", "(", ")", ",", "new_target", ".", "detach", "(", ")", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.ModifiedResnet.__init__": [[29, 34], ["torch.Module.__init__", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "usegpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModifiedResnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "psp_models", "[", "'resnet18'", ".", "lower", "(", ")", "]", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.ModifiedResnet.forward": [[35, 38], ["network.ModifiedResnet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.PoseNetFeat.__init__": [[40, 53], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ")", ":", "\n", "        ", "super", "(", "PoseNetFeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "e_conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "32", ",", "64", ",", "1", ")", "\n", "self", ".", "e_conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "512", ",", "1", ")", "\n", "self", ".", "conv6", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "1024", ",", "1", ")", "\n", "\n", "self", ".", "ap1", "=", "torch", ".", "nn", ".", "AvgPool1d", "(", "num_points", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.PoseNetFeat.forward": [[53, 69], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network.PoseNetFeat.ap1", "ap_x.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network.PoseNetFeat.conv1", "network.PoseNetFeat.e_conv1", "network.PoseNetFeat.conv2", "network.PoseNetFeat.e_conv2", "network.PoseNetFeat.conv5", "network.PoseNetFeat.conv6", "ap_x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "emb", "=", "F", ".", "relu", "(", "self", ".", "e_conv1", "(", "emb", ")", ")", "\n", "pointfeat_1", "=", "torch", ".", "cat", "(", "(", "x", ",", "emb", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "emb", "=", "F", ".", "relu", "(", "self", ".", "e_conv2", "(", "emb", ")", ")", "\n", "pointfeat_2", "=", "torch", ".", "cat", "(", "(", "x", ",", "emb", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "pointfeat_2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv6", "(", "x", ")", ")", "\n", "\n", "ap_x", "=", "self", ".", "ap1", "(", "x", ")", "\n", "\n", "ap_x", "=", "ap_x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "num_points", ")", "\n", "return", "torch", ".", "cat", "(", "[", "pointfeat_1", ",", "pointfeat_2", ",", "ap_x", "]", ",", "1", ")", "#128 + 256 + 1024", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.PoseNet.__init__": [[71, 94], ["torch.Module.__init__", "network.ModifiedResnet", "network.PoseNetFeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ",", "num_obj", ")", ":", "\n", "        ", "super", "(", "PoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "cnn", "=", "ModifiedResnet", "(", ")", "\n", "self", ".", "feat", "=", "PoseNetFeat", "(", "num_points", ")", "\n", "\n", "self", ".", "conv1_r", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1408", ",", "640", ",", "1", ")", "\n", "self", ".", "conv1_t", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1408", ",", "640", ",", "1", ")", "\n", "self", ".", "conv1_c", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1408", ",", "640", ",", "1", ")", "\n", "\n", "self", ".", "conv2_r", "=", "torch", ".", "nn", ".", "Conv1d", "(", "640", ",", "256", ",", "1", ")", "\n", "self", ".", "conv2_t", "=", "torch", ".", "nn", ".", "Conv1d", "(", "640", ",", "256", ",", "1", ")", "\n", "self", ".", "conv2_c", "=", "torch", ".", "nn", ".", "Conv1d", "(", "640", ",", "256", ",", "1", ")", "\n", "\n", "self", ".", "conv3_r", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3_t", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3_c", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "conv4_r", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "num_obj", "*", "4", ",", "1", ")", "#quaternion", "\n", "self", ".", "conv4_t", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "num_obj", "*", "3", ",", "1", ")", "#translation", "\n", "self", ".", "conv4_c", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "num_obj", "*", "1", ",", "1", ")", "#confidence", "\n", "\n", "self", ".", "num_obj", "=", "num_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.PoseNet.forward": [[95, 133], ["network.PoseNet.cnn", "network.PoseNet.size", "network.PoseNet.view", "choose.repeat.repeat.repeat", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "x.transpose().contiguous.transpose().contiguous.transpose().contiguous", "network.PoseNet.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network.PoseNet.conv4_r().view", "network.PoseNet.conv4_t().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "out_rx.contiguous().transpose().contiguous.contiguous().transpose().contiguous.contiguous().transpose().contiguous", "out_cx.contiguous().transpose().contiguous.contiguous().transpose().contiguous.contiguous().transpose().contiguous", "out_tx.contiguous().transpose().contiguous.contiguous().transpose().contiguous.contiguous().transpose().contiguous", "network.PoseNet.conv1_r", "network.PoseNet.conv1_t", "network.PoseNet.conv1_c", "network.PoseNet.conv2_r", "network.PoseNet.conv2_t", "network.PoseNet.conv2_c", "network.PoseNet.conv3_r", "network.PoseNet.conv3_t", "network.PoseNet.conv3_c", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather().contiguous.detach", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "x.transpose().contiguous.transpose().contiguous.transpose", "network.PoseNet.conv4_r", "network.PoseNet.conv4_t", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "out_rx.contiguous().transpose().contiguous.contiguous().transpose().contiguous.contiguous().transpose", "out_cx.contiguous().transpose().contiguous.contiguous().transpose().contiguous.contiguous().transpose", "out_tx.contiguous().transpose().contiguous.contiguous().transpose().contiguous.contiguous().transpose", "network.PoseNet.conv4_c", "out_rx.contiguous().transpose().contiguous.contiguous().transpose().contiguous.contiguous", "out_cx.contiguous().transpose().contiguous.contiguous().transpose().contiguous.contiguous", "out_tx.contiguous().transpose().contiguous.contiguous().transpose().contiguous.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "x", ",", "choose", ",", "obj", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "cnn", "(", "img", ")", "\n", "\n", "bs", ",", "di", ",", "_", ",", "_", "=", "out_img", ".", "size", "(", ")", "\n", "\n", "emb", "=", "out_img", ".", "view", "(", "bs", ",", "di", ",", "-", "1", ")", "\n", "choose", "=", "choose", ".", "repeat", "(", "1", ",", "di", ",", "1", ")", "\n", "emb", "=", "torch", ".", "gather", "(", "emb", ",", "2", ",", "choose", ")", ".", "contiguous", "(", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ap_x", "=", "self", ".", "feat", "(", "x", ",", "emb", ")", "\n", "\n", "rx", "=", "F", ".", "relu", "(", "self", ".", "conv1_r", "(", "ap_x", ")", ")", "\n", "tx", "=", "F", ".", "relu", "(", "self", ".", "conv1_t", "(", "ap_x", ")", ")", "\n", "cx", "=", "F", ".", "relu", "(", "self", ".", "conv1_c", "(", "ap_x", ")", ")", "\n", "\n", "rx", "=", "F", ".", "relu", "(", "self", ".", "conv2_r", "(", "rx", ")", ")", "\n", "tx", "=", "F", ".", "relu", "(", "self", ".", "conv2_t", "(", "tx", ")", ")", "\n", "cx", "=", "F", ".", "relu", "(", "self", ".", "conv2_c", "(", "cx", ")", ")", "\n", "\n", "rx", "=", "F", ".", "relu", "(", "self", ".", "conv3_r", "(", "rx", ")", ")", "\n", "tx", "=", "F", ".", "relu", "(", "self", ".", "conv3_t", "(", "tx", ")", ")", "\n", "cx", "=", "F", ".", "relu", "(", "self", ".", "conv3_c", "(", "cx", ")", ")", "\n", "\n", "rx", "=", "self", ".", "conv4_r", "(", "rx", ")", ".", "view", "(", "bs", ",", "self", ".", "num_obj", ",", "4", ",", "self", ".", "num_points", ")", "\n", "tx", "=", "self", ".", "conv4_t", "(", "tx", ")", ".", "view", "(", "bs", ",", "self", ".", "num_obj", ",", "3", ",", "self", ".", "num_points", ")", "\n", "cx", "=", "torch", ".", "sigmoid", "(", "self", ".", "conv4_c", "(", "cx", ")", ")", ".", "view", "(", "bs", ",", "self", ".", "num_obj", ",", "1", ",", "self", ".", "num_points", ")", "\n", "\n", "b", "=", "0", "\n", "out_rx", "=", "torch", ".", "index_select", "(", "rx", "[", "b", "]", ",", "0", ",", "obj", "[", "b", "]", ")", "\n", "out_tx", "=", "torch", ".", "index_select", "(", "tx", "[", "b", "]", ",", "0", ",", "obj", "[", "b", "]", ")", "\n", "out_cx", "=", "torch", ".", "index_select", "(", "cx", "[", "b", "]", ",", "0", ",", "obj", "[", "b", "]", ")", "\n", "\n", "out_rx", "=", "out_rx", ".", "contiguous", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "out_cx", "=", "out_cx", ".", "contiguous", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "out_tx", "=", "out_tx", ".", "contiguous", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "out_rx", ",", "out_tx", ",", "out_cx", ",", "emb", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.PoseRefineNetFeat.__init__": [[137, 150], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ")", ":", "\n", "        ", "super", "(", "PoseRefineNetFeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "e_conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "32", ",", "64", ",", "1", ")", "\n", "self", ".", "e_conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv1d", "(", "384", ",", "512", ",", "1", ")", "\n", "self", ".", "conv6", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "1024", ",", "1", ")", "\n", "\n", "self", ".", "ap1", "=", "torch", ".", "nn", ".", "AvgPool1d", "(", "num_points", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.PoseRefineNetFeat.forward": [[151, 169], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network.PoseRefineNetFeat.ap1", "ap_x.view.view.view", "network.PoseRefineNetFeat.conv1", "network.PoseRefineNetFeat.e_conv1", "network.PoseRefineNetFeat.conv2", "network.PoseRefineNetFeat.e_conv2", "network.PoseRefineNetFeat.conv5", "network.PoseRefineNetFeat.conv6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "emb", "=", "F", ".", "relu", "(", "self", ".", "e_conv1", "(", "emb", ")", ")", "\n", "pointfeat_1", "=", "torch", ".", "cat", "(", "[", "x", ",", "emb", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "emb", "=", "F", ".", "relu", "(", "self", ".", "e_conv2", "(", "emb", ")", ")", "\n", "pointfeat_2", "=", "torch", ".", "cat", "(", "[", "x", ",", "emb", "]", ",", "dim", "=", "1", ")", "\n", "\n", "pointfeat_3", "=", "torch", ".", "cat", "(", "[", "pointfeat_1", ",", "pointfeat_2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "pointfeat_3", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv6", "(", "x", ")", ")", "\n", "\n", "ap_x", "=", "self", ".", "ap1", "(", "x", ")", "\n", "\n", "ap_x", "=", "ap_x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "return", "ap_x", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.PoseRefineNet.__init__": [[171, 186], ["torch.Module.__init__", "network.PoseRefineNetFeat", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points", ",", "num_obj", ")", ":", "\n", "        ", "super", "(", "PoseRefineNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "feat", "=", "PoseRefineNetFeat", "(", "num_points", ")", "\n", "\n", "self", ".", "conv1_r", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "conv1_t", "=", "torch", ".", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "\n", "self", ".", "conv2_r", "=", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "128", ")", "\n", "self", ".", "conv2_t", "=", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "128", ")", "\n", "\n", "self", ".", "conv3_r", "=", "torch", ".", "nn", ".", "Linear", "(", "128", ",", "num_obj", "*", "4", ")", "#quaternion", "\n", "self", ".", "conv3_t", "=", "torch", ".", "nn", ".", "Linear", "(", "128", ",", "num_obj", "*", "3", ")", "#translation", "\n", "\n", "self", ".", "num_obj", "=", "num_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.network.PoseRefineNet.forward": [[187, 207], ["x.transpose().contiguous.transpose().contiguous.transpose().contiguous", "network.PoseRefineNet.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network.PoseRefineNet.conv3_r().view", "network.PoseRefineNet.conv3_t().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "x.transpose().contiguous.transpose().contiguous.size", "network.PoseRefineNet.conv1_r", "network.PoseRefineNet.conv1_t", "network.PoseRefineNet.conv2_r", "network.PoseRefineNet.conv2_t", "x.transpose().contiguous.transpose().contiguous.transpose", "network.PoseRefineNet.conv3_r", "network.PoseRefineNet.conv3_t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "emb", ",", "obj", ")", ":", "\n", "        ", "bs", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ap_x", "=", "self", ".", "feat", "(", "x", ",", "emb", ")", "\n", "\n", "rx", "=", "F", ".", "relu", "(", "self", ".", "conv1_r", "(", "ap_x", ")", ")", "\n", "tx", "=", "F", ".", "relu", "(", "self", ".", "conv1_t", "(", "ap_x", ")", ")", "\n", "\n", "rx", "=", "F", ".", "relu", "(", "self", ".", "conv2_r", "(", "rx", ")", ")", "\n", "tx", "=", "F", ".", "relu", "(", "self", ".", "conv2_t", "(", "tx", ")", ")", "\n", "\n", "rx", "=", "self", ".", "conv3_r", "(", "rx", ")", ".", "view", "(", "bs", ",", "self", ".", "num_obj", ",", "4", ")", "\n", "tx", "=", "self", ".", "conv3_t", "(", "tx", ")", ".", "view", "(", "bs", ",", "self", ".", "num_obj", ",", "3", ")", "\n", "\n", "b", "=", "0", "\n", "out_rx", "=", "torch", ".", "index_select", "(", "rx", "[", "b", "]", ",", "0", ",", "obj", "[", "b", "]", ")", "\n", "out_tx", "=", "torch", ".", "index_select", "(", "tx", "[", "b", "]", ",", "0", ",", "obj", "[", "b", "]", ")", "\n", "\n", "return", "out_rx", ",", "out_tx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.loss.Loss.__init__": [[78, 82], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_points_mesh", ",", "sym_list", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", "True", ")", "\n", "self", ".", "num_pt_mesh", "=", "num_points_mesh", "\n", "self", ".", "sym_list", "=", "sym_list", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.loss.Loss.forward": [[83, 86], ["loss.loss_calculation"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.loss.loss_calculation"], ["", "def", "forward", "(", "self", ",", "pred_r", ",", "pred_t", ",", "pred_c", ",", "target", ",", "model_points", ",", "idx", ",", "points", ",", "w", ",", "refine", ")", ":", "\n", "\n", "        ", "return", "loss_calculation", "(", "pred_r", ",", "pred_t", ",", "pred_c", ",", "target", ",", "model_points", ",", "idx", ",", "points", ",", "w", ",", "refine", ",", "self", ".", "num_pt_mesh", ",", "self", ".", "sym_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.loss.loss_calculation": [[12, 74], ["DenseFusion.lib.knn.__init__.KNearestNeighbor", "pred_c.view.size", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "base.contiguous().transpose().contiguous.contiguous().transpose().contiguous", "model_points.view().repeat().view.view().repeat().view", "target.view().permute().contiguous.view().repeat().view", "pred_t.contiguous().view.contiguous().view", "points.view.contiguous().view", "pred_c.view.contiguous().view", "torch.add", "torch.add", "torch.add", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.mean", "torch.mean", "torch.mean", "pred_c.view.view", "torch.max", "torch.max", "torch.max", "dis.view.view", "points.view.view", "ori_base[].view().contiguous", "t.repeat().contiguous().view", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.bmm().contiguous", "ori_target[].view().contiguous", "t.repeat().contiguous().view", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.bmm().contiguous.detach", "torch.bmm().contiguous.detach", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "base.contiguous().transpose().contiguous.contiguous().transpose", "model_points.view().repeat().view.view().repeat", "target.view().permute().contiguous.view().repeat", "pred_t.contiguous().view.contiguous", "points.view.contiguous", "pred_c.view.contiguous", "idx[].item", "target[].transpose().contiguous().view", "pred.view().permute().contiguous.permute().contiguous().view", "DenseFusion.lib.knn.__init__.KNearestNeighbor.", "torch.index_select", "torch.index_select", "torch.index_select", "target.view().permute().contiguous.view().permute().contiguous", "pred.view().permute().contiguous.view().permute().contiguous", "ori_base[].view", "t.repeat().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "ori_target[].view", "t.repeat().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.norm", "torch.norm", "torch.norm", "target.view().permute().contiguous.unsqueeze", "pred.view().permute().contiguous.unsqueeze", "torch.add", "torch.add", "torch.add", "torch.log", "torch.log", "torch.log", "torch.cat", "torch.cat", "torch.cat", "base.contiguous().transpose().contiguous.contiguous", "model_points.view().repeat().view.view", "target.view().permute().contiguous.view", "target[].transpose().contiguous", "pred.view().permute().contiguous.permute().contiguous", "knn.view().detach", "target.view().permute().contiguous.view().permute", "pred.view().permute().contiguous.view().permute", "torch.mul", "torch.mul", "torch.mul", "t.repeat", "t.repeat", "target[].transpose", "pred.view().permute().contiguous.permute", "knn.view", "target.view().permute().contiguous.view", "pred.view().permute().contiguous.view"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add"], ["def", "loss_calculation", "(", "pred_r", ",", "pred_t", ",", "pred_c", ",", "target", ",", "model_points", ",", "idx", ",", "points", ",", "w", ",", "refine", ",", "num_point_mesh", ",", "sym_list", ")", ":", "\n", "    ", "knn", "=", "KNearestNeighbor", "(", "1", ")", "\n", "bs", ",", "num_p", ",", "_", "=", "pred_c", ".", "size", "(", ")", "\n", "\n", "pred_r", "=", "pred_r", "/", "(", "torch", ".", "norm", "(", "pred_r", ",", "dim", "=", "2", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ")", "\n", "\n", "base", "=", "torch", ".", "cat", "(", "(", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ")", ",", "dim", "=", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ",", "3", ",", "3", ")", "\n", "\n", "ori_base", "=", "base", "\n", "base", "=", "base", ".", "contiguous", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "model_points", "=", "model_points", ".", "view", "(", "bs", ",", "1", ",", "num_point_mesh", ",", "3", ")", ".", "repeat", "(", "1", ",", "num_p", ",", "1", ",", "1", ")", ".", "view", "(", "bs", "*", "num_p", ",", "num_point_mesh", ",", "3", ")", "\n", "target", "=", "target", ".", "view", "(", "bs", ",", "1", ",", "num_point_mesh", ",", "3", ")", ".", "repeat", "(", "1", ",", "num_p", ",", "1", ",", "1", ")", ".", "view", "(", "bs", "*", "num_p", ",", "num_point_mesh", ",", "3", ")", "\n", "ori_target", "=", "target", "\n", "pred_t", "=", "pred_t", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ",", "1", ",", "3", ")", "\n", "ori_t", "=", "pred_t", "\n", "points", "=", "points", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ",", "1", ",", "3", ")", "\n", "pred_c", "=", "pred_c", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ")", "\n", "\n", "pred", "=", "torch", ".", "add", "(", "torch", ".", "bmm", "(", "model_points", ",", "base", ")", ",", "points", "+", "pred_t", ")", "\n", "\n", "if", "not", "refine", ":", "\n", "        ", "if", "idx", "[", "0", "]", ".", "item", "(", ")", "in", "sym_list", ":", "\n", "            ", "target", "=", "target", "[", "0", "]", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "3", ",", "-", "1", ")", "\n", "pred", "=", "pred", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "3", ",", "-", "1", ")", "\n", "inds", "=", "knn", "(", "target", ".", "unsqueeze", "(", "0", ")", ",", "pred", ".", "unsqueeze", "(", "0", ")", ")", "\n", "target", "=", "torch", ".", "index_select", "(", "target", ",", "1", ",", "inds", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "3", ",", "bs", "*", "num_p", ",", "num_point_mesh", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "pred", "=", "pred", ".", "view", "(", "3", ",", "bs", "*", "num_p", ",", "num_point_mesh", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "", "dis", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "(", "pred", "-", "target", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "1", ")", "\n", "std", "=", "torch", ".", "std", "(", "torch", ".", "norm", "(", "(", "pred", "-", "target", ")", ",", "dim", "=", "2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "#loss = torch.mean((dis * pred_c - w * torch.log(pred_c)), dim=0)", "\n", "loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "add", "(", "dis", ",", "torch", ".", "mul", "(", "std", ",", "2", ")", ")", "*", "pred_c", "-", "w", "*", "torch", ".", "log", "(", "pred_c", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "pred_c", "=", "pred_c", ".", "view", "(", "bs", ",", "num_p", ")", "\n", "how_max", ",", "which_max", "=", "torch", ".", "max", "(", "pred_c", ",", "1", ")", "\n", "dis", "=", "dis", ".", "view", "(", "bs", ",", "num_p", ")", "\n", "\n", "\n", "t", "=", "ori_t", "[", "which_max", "[", "0", "]", "]", "+", "points", "[", "which_max", "[", "0", "]", "]", "\n", "points", "=", "points", ".", "view", "(", "1", ",", "bs", "*", "num_p", ",", "3", ")", "\n", "\n", "ori_base", "=", "ori_base", "[", "which_max", "[", "0", "]", "]", ".", "view", "(", "1", ",", "3", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "ori_t", "=", "t", ".", "repeat", "(", "bs", "*", "num_p", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "bs", "*", "num_p", ",", "3", ")", "\n", "new_points", "=", "torch", ".", "bmm", "(", "(", "points", "-", "ori_t", ")", ",", "ori_base", ")", ".", "contiguous", "(", ")", "\n", "\n", "new_target", "=", "ori_target", "[", "0", "]", ".", "view", "(", "1", ",", "num_point_mesh", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "ori_t", "=", "t", ".", "repeat", "(", "num_point_mesh", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "num_point_mesh", ",", "3", ")", "\n", "new_target", "=", "torch", ".", "bmm", "(", "(", "new_target", "-", "ori_t", ")", ",", "ori_base", ")", ".", "contiguous", "(", ")", "\n", "\n", "# print('------------> ', dis[0][which_max[0]].item(), pred_c[0][which_max[0]].item(), idx[0].item())", "\n", "del", "knn", "\n", "return", "loss", ",", "dis", "[", "0", "]", "[", "which_max", "[", "0", "]", "]", ",", "new_points", ".", "detach", "(", ")", ",", "new_target", ".", "detach", "(", ")", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.utils.setup_logger": [[3, 16], ["logging.getLogger", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["from", "torchvision", "import", "transforms", "\n", "from", "torch", ".", "nn", "import", "functional", "as", "F", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "json", "\n", "import", "segmentation_models_pytorch", "as", "smp", "\n", "import", "random", "\n", "import", "copy", "\n", "from", "PIL", "import", "Image", "\n", "\n", "class", "HFlipDefault", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "0.5", "\n", "self", ".", "hflip", "=", "transforms", ".", "functional", ".", "hflip", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.knn.setup.get_extensions": [[16, 56], ["os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "os.path.join", "extension"], "function", ["None"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"src\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "sources", "=", "main_file", "+", "source_cpu", "\n", "extension", "=", "CppExtension", "\n", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "define_macros", "=", "[", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "sources", "+=", "source_cuda", "\n", "define_macros", "+=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "extra_compile_args", "[", "\"nvcc\"", "]", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "\n", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"knn_pytorch.knn_pytorch\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", ")", "\n", "]", "\n", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.knn.__init__.KNearestNeighbor.__init__": [[12, 14], ["None"], "methods", ["None"], ["nets", "=", "{", "'Unet'", ":", "smp", ".", "Unet", ",", "\n", "'PsPNet'", ":", "smp", ".", "PSPNet", ",", "\n", "'LinkNet'", ":", "smp", ".", "Linknet", "}", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.knn.__init__.KNearestNeighbor.forward": [[15, 24], ["ref.float().cuda.float().cuda.float().cuda", "query.float().cuda.float().cuda.float().cuda", "torch.empty().long().cuda", "DenseFusion.lib.knn.knn_pytorch.knn", "ref.float().cuda.float().cuda.float", "query.float().cuda.float().cuda.float", "torch.empty().long", "torch.empty"], "methods", ["None"], ["\n", "class", "CP", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_losses", "=", "[", "]", "\n", "self", ".", "train_iou_scores", "=", "[", "]", "\n", "self", ".", "valid_losses", "=", "[", "]", "\n", "self", ".", "valid_iou_scores", "=", "[", "]", "\n", "self", ".", "train_iou_per_class", "=", "[", "]", "\n", "self", ".", "valid_iou_per_class", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.knn.__init__.TestKNearestNeighbor.test_forward": [[28, 42], ["__init__.KNearestNeighbor", "torch.autograd.Variable", "torch.autograd.Variable", "KNearestNeighbor.", "gc.get_objects", "print", "torch.rand", "torch.rand", "torch.is_tensor", "print", "type", "obj.size", "functools.reduce", "len", "obj.size", "obj.size"], "methods", ["None"], ["\n", "    ", "print", "(", "'create paths'", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ",", "'trained_models'", ",", "training_config", "[", "'dataset_name'", "]", ")", "\n", "logs_path", "=", "os", ".", "path", ".", "join", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ",", "'logs'", ",", "training_config", "[", "'dataset_name'", "]", ")", "\n", "logs_images", "=", "os", ".", "path", ".", "join", "(", "logs_path", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "logs_images", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "logs_images", ")", "\n", "\n", "", "for", "img", "in", "os", ".", "listdir", "(", "logs_images", ")", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "logs_images", ",", "img", ")", ")", "\n", "\n", "", "if", "segmentation_config", "[", "'encoder_weights'", "]", "==", "'imagenet'", ":", "\n", "        ", "print", "(", "'use imagenet mean and std'", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.ycb.dataset.PoseDataset.__init__": [[19, 96], ["open", "open.close", "len", "len", "len", "open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torchvision.ColorJitter", "torchvision.Normalize", "print", "open.readline", "dataset.PoseDataset.list.append", "open.readline", "open", "numpy.array", "numpy.array", "open.close", "len", "dataset.PoseDataset.real.append", "dataset.PoseDataset.syn.append", "open.readline", "input_line[].split", "dataset.PoseDataset.cld[].append", "range", "range", "float", "float", "float", "range", "range"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close"], ["self", ".", "dirs", "=", "[", "]", "\n", "\n", "pkg_path", "=", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "'data_generation'", ",", "'data'", ")", "\n", "self", ".", "label_root", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "'label_generator'", ",", "'data'", ")", "\n", "self", ".", "label_mode", "=", "label_mode", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "plot", "=", "plot", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'{}_data_list.txt'", ".", "format", "(", "mode", ")", ")", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "dirs", ".", "append", "(", "input_line", ")", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'classes.txt'", ")", "\n", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "classes", ".", "append", "(", "input_line", ")", "\n", "\n", "", "self", ".", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "+", "1", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "            ", "found", "=", "False", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "                ", "if", "cls", "in", "d", ":", "\n", "                    ", "found", "=", "True", "\n", "self", ".", "labels", ".", "append", "(", "i", "+", "1", ")", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "raise", "ValueError", "\n", "\n", "", "", "if", "not", "std", "or", "not", "mean", ":", "\n", "            ", "print", "(", "'compute mean and std'", ")", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mean", "=", "[", "]", "\n", "self", ".", "std", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "d", ")", ")", "\n", "image", "=", "self", ".", "toTensor", "(", "image", ")", "\n", "self", ".", "mean", ".", "append", "(", "[", "torch", ".", "mean", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "std", ".", "append", "(", "[", "torch", ".", "std", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "\n", "", "self", ".", "mean", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "mean", ")", ",", "axis", "=", "0", ")", ")", "\n", "self", ".", "std", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "std", ")", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "'mean = {}'", ".", "format", "(", "self", ".", "mean", ")", ")", "\n", "print", "(", "'std = {}'", ".", "format", "(", "self", ".", "std", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "augmentations", "=", "transforms", ".", "Compose", "(", "[", "colorJitter", "(", ")", ",", "\n", "rotate", "(", ")", ",", "\n", "CropAndZoom", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augmentations", "=", "None", "\n", "\n", "", "self", ".", "preprocess", "=", "transforms", ".", "Compose", "(", "[", "toTensor", "(", ")", ",", "\n", "normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.ycb.dataset.PoseDataset.__getitem__": [[97, 233], ["PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "scipy.loadmat", "scipy.loadmat", "numpy.getmaskarray", "numpy.getmaskarray", "meta[].flatten().astype", "dataset.get_bbox", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "[].astype", "[].astype", "[].astype", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.delete", "numpy.delete", "numpy.dot", "numpy.dot", "PIL.Image.open", "PIL.Image.open", "numpy.masked_equal", "numpy.masked_equal", "range", "numpy.random.randint", "numpy.random.randint", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "dataset.PoseDataset.trancolor", "numpy.transpose", "numpy.transpose", "random.choice", "numpy.array", "numpy.array", "mask[].flatten().nonzero", "len", "numpy.zeros", "numpy.zeros", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.pad", "numpy.pad", "numpy.add", "numpy.add", "random.sample", "random.sample", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataset.PoseDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "int", "random.choice", "numpy.array", "numpy.array", "numpy.transpose", "numpy.transpose", "numpy.array", "numpy.array", "random.sample", "meta[].flatten", "len", "numpy.masked_not_equal", "numpy.masked_not_equal", "numpy.masked_equal", "numpy.masked_equal", "len", "dataset.PoseDataset.trancolor", "numpy.transpose", "numpy.transpose", "numpy.random.normal", "numpy.random.normal", "[].flatten", "random.uniform", "len", "range", "numpy.add.astype", "numpy.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.add.astype", "numpy.delete.astype", "dataset.PoseDataset.trancolor", "PIL.Image.open", "numpy.unique().tolist", "numpy.unique().tolist", "len", "numpy.getmaskarray", "numpy.getmaskarray", "len", "numpy.array", "numpy.array", "PIL.Image.open().convert", "range", "mask[].flatten", "numpy.zeros.nonzero", "len", "len", "len", "img_masked.astype", "PIL.Image.open().convert", "numpy.masked_not_equal", "numpy.masked_not_equal", "mask.nonzero", "len", "depth[].flatten", "dataset.PoseDataset.xmap[].flatten", "dataset.PoseDataset.ymap[].flatten", "int", "numpy.unique", "numpy.unique", "t_label.nonzero", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "dirs", "[", "index", "]", ")", ")", "\n", "#depth = Image.open('{0}/{1}.depth.png'.format(self.root, self.dirs[index]))", "\n", "label", "=", "Image", ".", "open", "(", "'{0}/{1}.{2}.label.png'", ".", "format", "(", "self", ".", "label_root", ",", "self", ".", "dirs", "[", "index", "]", ",", "self", ".", "label_mode", ")", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "augmentations", "(", "[", "img", ",", "label", "]", ")", "\n", "\n", "", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "label", "[", "label", "!=", "0", "]", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "plot", ":", "\n", "            ", "self", ".", "plot_data", "(", "img", ",", "label", ",", "index", ")", "\n", "\n", "", "img", ",", "label", "=", "self", ".", "preprocess", "(", "[", "img", ",", "label", "]", ")", "\n", "return", "img", ",", "label", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dirs", ")", "\n", "\n", "\n", "", "def", "plot_data", "(", "self", ",", "image", ",", "label", ",", "index", ")", ":", "\n", "        ", "label", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "label", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "title", "(", "'Image {}'", ".", "format", "(", "index", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "label", ")", "\n", "cls_id", "=", "self", ".", "labels", "[", "index", "]", "\n", "plt", ".", "title", "(", "'Label: {}, {}'", ".", "format", "(", "cls_id", ",", "self", ".", "classes", "[", "cls_id", "-", "1", "]", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "added", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "image", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "red", "=", "np", ".", "zeros", "(", "added", ".", "shape", ")", "\n", "red", "[", ":", ",", ":", ",", "0", "]", "=", "255", "\n", "#print(np.unique(label))", "\n", "added", "[", "label", "!=", "0", "]", "=", "added", "[", "label", "!=", "0", "]", "*", "0.7", "+", "red", "[", "label", "!=", "0", "]", "*", "0.3", "\n", "added", "[", "added", "<", "0", "]", "=", "0", "\n", "added", "[", "added", ">", "255", "]", "=", "255", "\n", "added", "=", "np", ".", "array", "(", "added", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "added", ")", "\n", "plt", ".", "title", "(", "'Added'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.ycb.dataset.PoseDataset.__len__": [[234, 236], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.ycb.dataset.PoseDataset.get_sym_list": [[237, 239], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.ycb.dataset.PoseDataset.get_num_points_mesh": [[240, 245], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.ycb.dataset.get_bbox": [[251, 290], ["numpy.any", "numpy.any", "range", "range", "len", "len", "int", "int", "int", "int", "int", "int", "numpy.where", "numpy.where"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.PoseDataset.__init__": [[24, 156], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "open.close", "len", "open", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.Normalize", "torchvision.Normalize", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.PoseDataset.list.append", "numpy.array", "numpy.array", "numpy.random.shuffle", "numpy.random.shuffle", "enumerate", "numpy.delete", "numpy.delete", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.PoseDataset.class_id_names.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "open", "numpy.array", "numpy.array", "open.close", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open.readline", "dataset.PoseDataset.list[].split", "open", "open.close", "len", "numpy.arange", "numpy.arange", "numpy.random.shuffle", "numpy.random.shuffle", "int", "open.readline", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "input_line[].split", "dataset.PoseDataset.cld[].append", "numpy.array.append", "int", "remove_list_ids.append", "numpy.array.append", "list", "open.readline", "range", "range", "l.split", "int", "open.readline", "open", "json.load", "len", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "open", "json.load", "bool", "range", "range", "len", "dataset.PoseDataset.extra_data.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.PoseDataset.symmetry_obj_idx.append", "xyz.append", "xyz.append", "float", "float"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["self", ".", "label_mode", "=", "label_mode", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "plot", "=", "plot", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'{}_data_list.txt'", ".", "format", "(", "mode", ")", ")", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "dirs", ".", "append", "(", "input_line", ")", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'classes.txt'", ")", "\n", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "classes", ".", "append", "(", "input_line", ")", "\n", "\n", "", "self", ".", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "+", "1", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "            ", "found", "=", "False", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "                ", "if", "cls", "in", "d", ":", "\n", "                    ", "found", "=", "True", "\n", "self", ".", "labels", ".", "append", "(", "i", "+", "1", ")", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "raise", "ValueError", "\n", "\n", "", "", "if", "not", "std", "or", "not", "mean", ":", "\n", "            ", "print", "(", "'compute mean and std'", ")", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mean", "=", "[", "]", "\n", "self", ".", "std", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "d", ")", ")", "\n", "image", "=", "self", ".", "toTensor", "(", "image", ")", "\n", "self", ".", "mean", ".", "append", "(", "[", "torch", ".", "mean", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "std", ".", "append", "(", "[", "torch", ".", "std", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "\n", "", "self", ".", "mean", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "mean", ")", ",", "axis", "=", "0", ")", ")", "\n", "self", ".", "std", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "std", ")", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "'mean = {}'", ".", "format", "(", "self", ".", "mean", ")", ")", "\n", "print", "(", "'std = {}'", ".", "format", "(", "self", ".", "std", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "augmentations", "=", "transforms", ".", "Compose", "(", "[", "colorJitter", "(", ")", ",", "\n", "rotate", "(", ")", ",", "\n", "CropAndZoom", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augmentations", "=", "None", "\n", "\n", "", "self", ".", "preprocess", "=", "transforms", ".", "Compose", "(", "[", "toTensor", "(", ")", ",", "\n", "normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "]", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "dirs", "[", "index", "]", ")", ")", "\n", "#depth = Image.open('{0}/{1}.depth.png'.format(self.root, self.dirs[index]))", "\n", "label", "=", "Image", ".", "open", "(", "'{0}/{1}.{2}.label.png'", ".", "format", "(", "self", ".", "label_root", ",", "self", ".", "dirs", "[", "index", "]", ",", "self", ".", "label_mode", ")", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "augmentations", "(", "[", "img", ",", "label", "]", ")", "\n", "\n", "", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "label", "[", "label", "!=", "0", "]", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "plot", ":", "\n", "            ", "self", ".", "plot_data", "(", "img", ",", "label", ",", "index", ")", "\n", "\n", "", "img", ",", "label", "=", "self", ".", "preprocess", "(", "[", "img", ",", "label", "]", ")", "\n", "return", "img", ",", "label", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dirs", ")", "\n", "\n", "\n", "", "def", "plot_data", "(", "self", ",", "image", ",", "label", ",", "index", ")", ":", "\n", "        ", "label", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "label", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "title", "(", "'Image {}'", ".", "format", "(", "index", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "label", ")", "\n", "cls_id", "=", "self", ".", "labels", "[", "index", "]", "\n", "plt", ".", "title", "(", "'Label: {}, {}'", ".", "format", "(", "cls_id", ",", "self", ".", "classes", "[", "cls_id", "-", "1", "]", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "added", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "image", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "red", "=", "np", ".", "zeros", "(", "added", ".", "shape", ")", "\n", "red", "[", ":", ",", ":", ",", "0", "]", "=", "255", "\n", "#print(np.unique(label))", "\n", "added", "[", "label", "!=", "0", "]", "=", "added", "[", "label", "!=", "0", "]", "*", "0.7", "+", "red", "[", "label", "!=", "0", "]", "*", "0.3", "\n", "added", "[", "added", "<", "0", "]", "=", "0", "\n", "added", "[", "added", ">", "255", "]", "=", "255", "\n", "added", "=", "np", ".", "array", "(", "added", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "added", ")", "\n", "plt", ".", "title", "(", "'Added'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.PoseDataset.__getitem__": [[158, 327], ["dataset.PoseDataset.class_id_names.index", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.dot", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.getmaskarray", "numpy.getmaskarray", "dataset.get_bbox", "numpy.getmaskarray", "numpy.getmaskarray", "[].astype", "[].astype", "[].astype", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "random.sample", "random.sample", "random.sample", "random.sample", "numpy.delete", "numpy.delete", "numpy.dot", "numpy.dot", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "dataset.PoseDataset.trancolor", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "numpy.identity", "numpy.identity", "transforms3d.euler.euler2mat", "PIL.Image.open.rotate", "PIL.Image.open.rotate", "PIL.Image.open.rotate", "numpy.dot", "numpy.dot", "numpy.masked_equal", "numpy.masked_equal", "numpy.masked_not_equal", "numpy.masked_not_equal", "numpy.array", "numpy.array", "mask[].flatten().nonzero", "len", "numpy.zeros", "numpy.zeros", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.pad", "numpy.pad", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "matplotlib.subplots", "fig.suptitle", "matplotlib.subplot", "pc_reconstruction.pointcloud2image", "matplotlib.imshow", "matplotlib.title", "matplotlib.subplot", "matplotlib.title", "pc_reconstruction.pointcloud2image", "matplotlib.imshow", "matplotlib.show", "numpy.transpose", "numpy.transpose", "print", "open", "json.load", "open", "json.load", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "numpy.deg2rad", "numpy.deg2rad", "numpy.array", "numpy.array", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array", "numpy.array", "len", "range", "len", "PIL.Image.open.copy", "PIL.Image.open.copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataset.PoseDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "PIL.Image.open.copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataset.PoseDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "print", "open", "json.load", "open", "json.load", "numpy.arange", "numpy.arange", "numpy.random.shuffle", "numpy.random.shuffle", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "mask[].flatten", "numpy.zeros.nonzero", "len", "numpy.array", "numpy.array", "numpy.add.astype", "numpy.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.add.astype", "numpy.delete.astype", "numpy.add.astype", "numpy.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.add.astype", "numpy.delete.astype", "range", "len", "depth[].flatten", "dataset.PoseDataset.xmap[].flatten", "dataset.PoseDataset.ymap[].flatten", "img_masked.astype", "int", "img_masked.astype", "int"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.PoseDataset.__len__": [[329, 331], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.PoseDataset.get_sym_list": [[332, 334], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.PoseDataset.get_num_points_mesh": [[335, 337], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.get_bbox": [[342, 381], ["numpy.any", "numpy.any", "range", "range", "len", "len", "int", "int", "int", "int", "int", "int", "numpy.where", "numpy.where"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.crop_and_zoom": [[383, 469], ["dataset.get_extreme_points", "dataset.get_size", "print", "random.uniform", "random.uniform", "dataset.get_bbox_my", "dataset.resize_bbox_to_max_zoom", "dataset.get_size", "dataset.get_size", "int", "int", "numpy.sqrt", "numpy.arccos", "numpy.sqrt", "image.resize.resize", "label.resize.resize", "depth.resize.resize", "numpy.array", "float", "float", "float", "float", "dataset.get_bbox_my", "dataset.get_size", "numpy.cos", "dataset.move_bbox_inside", "dataset.get_bbox_my", "dataset.move_bbox_inside", "int", "numpy.random.randint", "dataset.move_bbox_inside", "dataset.get_bbox_my", "dataset.move_bbox_inside", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "int", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_extreme_points", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.resize_bbox_to_max_zoom", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.get_extreme_points": [[473, 487], ["numpy.where", "numpy.argmax", "numpy.argmax", "numpy.argmin", "numpy.argmin", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.get_size": [[488, 493], ["int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.get_bbox_my": [[494, 498], ["int"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.move_bbox_inside": [[499, 512], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented.dataset.resize_bbox_to_max_zoom": [[513, 520], ["dataset.get_size", "dataset.get_bbox_my", "dataset.get_bbox_my"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDataset.dataset.PoseDataset.__init__": [[20, 89], ["open", "open.close", "len", "open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torchvision.ColorJitter", "torchvision.Normalize", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.PoseDataset.list.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.PoseDataset.class_id_names.append", "open", "numpy.array", "numpy.array", "print", "open.close", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open.readline", "open.readline", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "input_line[].split", "dataset.PoseDataset.cld[].append", "len", "open.readline", "range", "range", "xyz.append", "range", "range", "float"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close"], ["\n", "pkg_path", "=", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "'data_generation'", ",", "'data'", ")", "\n", "self", ".", "label_root", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "'label_generator'", ",", "'data'", ")", "\n", "self", ".", "label_mode", "=", "label_mode", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "plot", "=", "plot", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'{}_data_list.txt'", ".", "format", "(", "mode", ")", ")", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "dirs", ".", "append", "(", "input_line", ")", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'classes.txt'", ")", "\n", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "classes", ".", "append", "(", "input_line", ")", "\n", "\n", "", "self", ".", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "+", "1", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "            ", "found", "=", "False", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "                ", "if", "cls", "in", "d", ":", "\n", "                    ", "found", "=", "True", "\n", "self", ".", "labels", ".", "append", "(", "i", "+", "1", ")", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "raise", "ValueError", "\n", "\n", "", "", "if", "not", "std", "or", "not", "mean", ":", "\n", "            ", "print", "(", "'compute mean and std'", ")", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mean", "=", "[", "]", "\n", "self", ".", "std", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "d", ")", ")", "\n", "image", "=", "self", ".", "toTensor", "(", "image", ")", "\n", "self", ".", "mean", ".", "append", "(", "[", "torch", ".", "mean", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "std", ".", "append", "(", "[", "torch", ".", "std", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "\n", "", "self", ".", "mean", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "mean", ")", ",", "axis", "=", "0", ")", ")", "\n", "self", ".", "std", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "std", ")", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "'mean = {}'", ".", "format", "(", "self", ".", "mean", ")", ")", "\n", "print", "(", "'std = {}'", ".", "format", "(", "self", ".", "std", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "augmentations", "=", "transforms", ".", "Compose", "(", "[", "colorJitter", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDataset.dataset.PoseDataset.__getitem__": [[91, 227], ["PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.getmaskarray", "dataset.get_bbox", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "[].astype", "[].astype", "[].astype", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.delete", "numpy.delete", "numpy.dot", "numpy.dot", "PIL.Image.open", "open", "json.load", "PIL.Image.open", "open", "json.load", "numpy.masked_equal", "numpy.masked_equal", "dataset.PoseDataset.class_id_names.index", "numpy.masked_not_equal", "numpy.masked_not_equal", "numpy.masked_equal", "numpy.masked_equal", "dataset.PoseDataset.trancolor", "numpy.transpose", "numpy.transpose", "mask[].flatten().nonzero", "len", "numpy.zeros", "numpy.zeros", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.pad", "numpy.pad", "numpy.add", "numpy.add", "random.sample", "random.sample", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataset.PoseDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.array", "numpy.array", "random.uniform", "len", "range", "numpy.add.astype", "numpy.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.add.astype", "numpy.delete.astype", "numpy.array", "numpy.array", "range", "mask[].flatten", "numpy.zeros.nonzero", "len", "len", "len", "img_masked.astype", "len", "depth[].flatten", "dataset.PoseDataset.xmap[].flatten", "dataset.PoseDataset.ymap[].flatten", "int"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add"], ["CropAndZoom", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augmentations", "=", "None", "\n", "\n", "", "self", ".", "preprocess", "=", "transforms", ".", "Compose", "(", "[", "toTensor", "(", ")", ",", "\n", "normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "]", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "dirs", "[", "index", "]", ")", ")", "\n", "#depth = Image.open('{0}/{1}.depth.png'.format(self.root, self.dirs[index]))", "\n", "label", "=", "Image", ".", "open", "(", "'{0}/{1}.{2}.label.png'", ".", "format", "(", "self", ".", "label_root", ",", "self", ".", "dirs", "[", "index", "]", ",", "self", ".", "label_mode", ")", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "augmentations", "(", "[", "img", ",", "label", "]", ")", "\n", "\n", "", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "label", "[", "label", "!=", "0", "]", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "plot", ":", "\n", "            ", "self", ".", "plot_data", "(", "img", ",", "label", ",", "index", ")", "\n", "\n", "", "img", ",", "label", "=", "self", ".", "preprocess", "(", "[", "img", ",", "label", "]", ")", "\n", "return", "img", ",", "label", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dirs", ")", "\n", "\n", "\n", "", "def", "plot_data", "(", "self", ",", "image", ",", "label", ",", "index", ")", ":", "\n", "        ", "label", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "label", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "title", "(", "'Image {}'", ".", "format", "(", "index", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "label", ")", "\n", "cls_id", "=", "self", ".", "labels", "[", "index", "]", "\n", "plt", ".", "title", "(", "'Label: {}, {}'", ".", "format", "(", "cls_id", ",", "self", ".", "classes", "[", "cls_id", "-", "1", "]", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "added", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "image", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "red", "=", "np", ".", "zeros", "(", "added", ".", "shape", ")", "\n", "red", "[", ":", ",", ":", ",", "0", "]", "=", "255", "\n", "#print(np.unique(label))", "\n", "added", "[", "label", "!=", "0", "]", "=", "added", "[", "label", "!=", "0", "]", "*", "0.7", "+", "red", "[", "label", "!=", "0", "]", "*", "0.3", "\n", "added", "[", "added", "<", "0", "]", "=", "0", "\n", "added", "[", "added", ">", "255", "]", "=", "255", "\n", "added", "=", "np", ".", "array", "(", "added", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "added", ")", "\n", "plt", ".", "title", "(", "'Added'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDataset.dataset.PoseDataset.__len__": [[228, 230], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDataset.dataset.PoseDataset.get_sym_list": [[231, 233], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDataset.dataset.PoseDataset.get_num_points_mesh": [[234, 239], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDataset.dataset.get_bbox": [[245, 284], ["numpy.any", "numpy.any", "range", "range", "len", "len", "int", "int", "int", "int", "int", "int", "numpy.where", "numpy.where"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.PoseDataset.__init__": [[24, 94], ["open", "open.close", "len", "open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.Normalize", "torchvision.Normalize", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.PoseDataset.list.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.PoseDataset.class_id_names.append", "open", "numpy.array", "numpy.array", "open.close", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open.readline", "open.readline", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "input_line[].split", "dataset.PoseDataset.cld[].append", "open.readline", "range", "range", "xyz.append", "range", "range", "float"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close"], ["self", ".", "label_mode", "=", "label_mode", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "plot", "=", "plot", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'{}_data_list.txt'", ".", "format", "(", "mode", ")", ")", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "dirs", ".", "append", "(", "input_line", ")", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'classes.txt'", ")", "\n", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "classes", ".", "append", "(", "input_line", ")", "\n", "\n", "", "self", ".", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "+", "1", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "            ", "found", "=", "False", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "                ", "if", "cls", "in", "d", ":", "\n", "                    ", "found", "=", "True", "\n", "self", ".", "labels", ".", "append", "(", "i", "+", "1", ")", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "raise", "ValueError", "\n", "\n", "", "", "if", "not", "std", "or", "not", "mean", ":", "\n", "            ", "print", "(", "'compute mean and std'", ")", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mean", "=", "[", "]", "\n", "self", ".", "std", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "d", ")", ")", "\n", "image", "=", "self", ".", "toTensor", "(", "image", ")", "\n", "self", ".", "mean", ".", "append", "(", "[", "torch", ".", "mean", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "std", ".", "append", "(", "[", "torch", ".", "std", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "\n", "", "self", ".", "mean", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "mean", ")", ",", "axis", "=", "0", ")", ")", "\n", "self", ".", "std", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "std", ")", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "'mean = {}'", ".", "format", "(", "self", ".", "mean", ")", ")", "\n", "print", "(", "'std = {}'", ".", "format", "(", "self", ".", "std", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "augmentations", "=", "transforms", ".", "Compose", "(", "[", "colorJitter", "(", ")", ",", "\n", "rotate", "(", ")", ",", "\n", "CropAndZoom", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augmentations", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.PoseDataset.__getitem__": [[96, 240], ["PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.dot", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.getmaskarray", "numpy.getmaskarray", "dataset.get_bbox", "numpy.getmaskarray", "numpy.getmaskarray", "[].astype", "[].astype", "[].astype", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.delete", "numpy.delete", "numpy.dot", "numpy.dot", "open", "json.load", "open", "json.load", "dataset.PoseDataset.class_id_names.index", "dataset.PoseDataset.trancolor", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "numpy.identity", "numpy.identity", "transforms3d.euler.euler2mat", "img.rotate.rotate.rotate", "label.rotate.rotate.rotate", "numpy.array.rotate", "numpy.dot", "numpy.dot", "dataset.crop_and_zoom", "print", "print", "print", "numpy.array", "numpy.array", "numpy.masked_equal", "numpy.masked_equal", "numpy.masked_not_equal", "numpy.masked_not_equal", "numpy.array", "numpy.array", "mask[].flatten().nonzero", "len", "numpy.zeros", "numpy.zeros", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.pad", "numpy.pad", "numpy.add", "numpy.add", "random.sample", "random.sample", "random.sample", "random.sample", "random.sample", "random.sample", "random.sample", "random.sample", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "matplotlib.subplot", "pc_reconstruction.pointcloud2image", "matplotlib.imshow", "matplotlib.title", "matplotlib.subplot", "pc_reconstruction.pointcloud2image", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "numpy.transpose", "numpy.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataset.PoseDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.deg2rad", "numpy.deg2rad", "numpy.array", "numpy.array", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array", "numpy.array", "len", "range", "img.rotate.rotate.copy", "img.rotate.rotate.copy", "numpy.add.astype", "numpy.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.add.astype", "numpy.delete.astype", "mask[].flatten", "numpy.zeros.nonzero", "len", "len", "len", "numpy.array", "numpy.array", "img_masked.astype", "len", "depth[].flatten", "dataset.PoseDataset.xmap[].flatten", "dataset.PoseDataset.ymap[].flatten", "int"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.crop_and_zoom", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image"], ["normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "]", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "dirs", "[", "index", "]", ")", ")", "\n", "#depth = Image.open('{0}/{1}.depth.png'.format(self.root, self.dirs[index]))", "\n", "label", "=", "Image", ".", "open", "(", "'{0}/{1}.{2}.label.png'", ".", "format", "(", "self", ".", "label_root", ",", "self", ".", "dirs", "[", "index", "]", ",", "self", ".", "label_mode", ")", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "augmentations", "(", "[", "img", ",", "label", "]", ")", "\n", "\n", "", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "label", "[", "label", "!=", "0", "]", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "plot", ":", "\n", "            ", "self", ".", "plot_data", "(", "img", ",", "label", ",", "index", ")", "\n", "\n", "", "img", ",", "label", "=", "self", ".", "preprocess", "(", "[", "img", ",", "label", "]", ")", "\n", "return", "img", ",", "label", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dirs", ")", "\n", "\n", "\n", "", "def", "plot_data", "(", "self", ",", "image", ",", "label", ",", "index", ")", ":", "\n", "        ", "label", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "label", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "title", "(", "'Image {}'", ".", "format", "(", "index", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "label", ")", "\n", "cls_id", "=", "self", ".", "labels", "[", "index", "]", "\n", "plt", ".", "title", "(", "'Label: {}, {}'", ".", "format", "(", "cls_id", ",", "self", ".", "classes", "[", "cls_id", "-", "1", "]", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "added", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "image", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "red", "=", "np", ".", "zeros", "(", "added", ".", "shape", ")", "\n", "red", "[", ":", ",", ":", ",", "0", "]", "=", "255", "\n", "#print(np.unique(label))", "\n", "added", "[", "label", "!=", "0", "]", "=", "added", "[", "label", "!=", "0", "]", "*", "0.7", "+", "red", "[", "label", "!=", "0", "]", "*", "0.3", "\n", "added", "[", "added", "<", "0", "]", "=", "0", "\n", "added", "[", "added", ">", "255", "]", "=", "255", "\n", "added", "=", "np", ".", "array", "(", "added", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "added", ")", "\n", "plt", ".", "title", "(", "'Added'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.PoseDataset.__len__": [[241, 243], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.PoseDataset.get_sym_list": [[244, 246], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.PoseDataset.get_num_points_mesh": [[247, 252], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox": [[258, 297], ["numpy.any", "numpy.any", "range", "range", "len", "len", "int", "int", "int", "int", "int", "int", "numpy.where", "numpy.where"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.crop_and_zoom": [[299, 395], ["dataset.get_extreme_points", "dataset.get_size", "random.uniform", "random.uniform", "dataset.get_bbox_my", "dataset.resize_bbox_to_max_zoom", "dataset.get_size", "dataset.get_size", "int", "int", "numpy.sqrt", "numpy.arccos", "numpy.sqrt", "print", "numpy.array", "numpy.identity", "image.resize.resize", "label.resize.resize", "depth.resize.resize", "numpy.array", "float", "float", "float", "float", "dataset.get_bbox_my", "dataset.get_size", "numpy.cos", "dataset.move_bbox_inside", "dataset.get_bbox_my", "dataset.move_bbox_inside", "int", "numpy.random.randint", "dataset.move_bbox_inside", "dataset.get_bbox_my", "dataset.move_bbox_inside", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "int", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_extreme_points", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.resize_bbox_to_max_zoom", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_extreme_points": [[399, 413], ["numpy.where", "numpy.argmax", "numpy.argmax", "numpy.argmin", "numpy.argmin", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size": [[414, 419], ["int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my": [[420, 424], ["int"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.move_bbox_inside": [[425, 438], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.resize_bbox_to_max_zoom": [[439, 446], ["dataset.get_size", "dataset.get_bbox_my", "dataset.get_bbox_my"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_size", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.myDatasetAugmented2.dataset.get_bbox_my"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.__init__": [[25, 89], ["len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torchvision.ColorJitter", "torchvision.Normalize", "open", "yaml.load", "dataset.ply_vtx", "print", "open", "open", "open.readline", "dataset.PoseDataset.list_rgb.append", "dataset.PoseDataset.list_depth.append", "dataset.PoseDataset.list_obj.append", "dataset.PoseDataset.list_rank.append", "dataset.PoseDataset.list_label.append", "dataset.PoseDataset.list_label.append", "int", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.ply_vtx", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["self", ".", "mode", "=", "mode", "\n", "self", ".", "plot", "=", "plot", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'{}_data_list.txt'", ".", "format", "(", "mode", ")", ")", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "dirs", ".", "append", "(", "input_line", ")", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'classes.txt'", ")", "\n", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "classes", ".", "append", "(", "input_line", ")", "\n", "\n", "", "self", ".", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "+", "1", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "            ", "found", "=", "False", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "                ", "if", "cls", "in", "d", ":", "\n", "                    ", "found", "=", "True", "\n", "self", ".", "labels", ".", "append", "(", "i", "+", "1", ")", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "raise", "ValueError", "\n", "\n", "", "", "if", "not", "std", "or", "not", "mean", ":", "\n", "            ", "print", "(", "'compute mean and std'", ")", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mean", "=", "[", "]", "\n", "self", ".", "std", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "d", ")", ")", "\n", "image", "=", "self", ".", "toTensor", "(", "image", ")", "\n", "self", ".", "mean", ".", "append", "(", "[", "torch", ".", "mean", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "std", ".", "append", "(", "[", "torch", ".", "std", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "\n", "", "self", ".", "mean", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "mean", ")", ",", "axis", "=", "0", ")", ")", "\n", "self", ".", "std", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "std", ")", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "'mean = {}'", ".", "format", "(", "self", ".", "mean", ")", ")", "\n", "print", "(", "'std = {}'", ".", "format", "(", "self", ".", "std", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "augmentations", "=", "transforms", ".", "Compose", "(", "[", "colorJitter", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.__getitem__": [[90, 196], ["PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.transpose", "numpy.transpose", "numpy.resize", "numpy.resize", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "[].astype", "[].astype", "[].astype", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "random.sample", "numpy.delete", "numpy.delete", "numpy.dot", "numpy.dot", "PIL.Image.open", "PIL.Image.open", "range", "numpy.masked_not_equal", "numpy.masked_not_equal", "numpy.getmaskarray", "numpy.getmaskarray", "dataset.PoseDataset.trancolor", "numpy.array", "numpy.array", "dataset.get_bbox", "dataset.get_bbox", "numpy.array", "numpy.array", "mask[].flatten().nonzero", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "numpy.zeros", "numpy.zeros", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.pad", "numpy.pad", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataset.PoseDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "numpy.masked_equal", "numpy.masked_equal", "numpy.getmaskarray", "numpy.getmaskarray", "dataset.mask_to_bbox", "random.uniform", "len", "range", "len", "numpy.add.astype", "numpy.pad.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.add.astype", "numpy.delete.astype", "numpy.array", "numpy.array", "numpy.masked_equal", "numpy.masked_equal", "range", "mask[].flatten", "numpy.zeros.nonzero", "len", "img_masked.astype", "dataset.PoseDataset.objlist.index", "numpy.array", "numpy.array", "len", "depth[].flatten", "dataset.PoseDataset.xmap[].flatten", "dataset.PoseDataset.ymap[].flatten"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.mask_to_bbox"], ["rotate", "(", ")", ",", "\n", "CropAndZoom", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augmentations", "=", "None", "\n", "\n", "", "self", ".", "preprocess", "=", "transforms", ".", "Compose", "(", "[", "toTensor", "(", ")", ",", "\n", "normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "]", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "dirs", "[", "index", "]", ")", ")", "\n", "#depth = Image.open('{0}/{1}.depth.png'.format(self.root, self.dirs[index]))", "\n", "label", "=", "Image", ".", "open", "(", "'{0}/{1}.{2}.label.png'", ".", "format", "(", "self", ".", "label_root", ",", "self", ".", "dirs", "[", "index", "]", ",", "self", ".", "label_mode", ")", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "augmentations", "(", "[", "img", ",", "label", "]", ")", "\n", "\n", "", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "label", "[", "label", "!=", "0", "]", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "plot", ":", "\n", "            ", "self", ".", "plot_data", "(", "img", ",", "label", ",", "index", ")", "\n", "\n", "", "img", ",", "label", "=", "self", ".", "preprocess", "(", "[", "img", ",", "label", "]", ")", "\n", "return", "img", ",", "label", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dirs", ")", "\n", "\n", "\n", "", "def", "plot_data", "(", "self", ",", "image", ",", "label", ",", "index", ")", ":", "\n", "        ", "label", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "label", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "title", "(", "'Image {}'", ".", "format", "(", "index", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "label", ")", "\n", "cls_id", "=", "self", ".", "labels", "[", "index", "]", "\n", "plt", ".", "title", "(", "'Label: {}, {}'", ".", "format", "(", "cls_id", ",", "self", ".", "classes", "[", "cls_id", "-", "1", "]", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "added", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "image", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "red", "=", "np", ".", "zeros", "(", "added", ".", "shape", ")", "\n", "red", "[", ":", ",", ":", ",", "0", "]", "=", "255", "\n", "#print(np.unique(label))", "\n", "added", "[", "label", "!=", "0", "]", "=", "added", "[", "label", "!=", "0", "]", "*", "0.7", "+", "red", "[", "label", "!=", "0", "]", "*", "0.3", "\n", "added", "[", "added", "<", "0", "]", "=", "0", "\n", "added", "[", "added", ">", "255", "]", "=", "255", "\n", "added", "=", "np", ".", "array", "(", "added", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "added", ")", "\n", "plt", ".", "title", "(", "'Added'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.__len__": [[197, 199], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.get_sym_list": [[200, 202], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.get_num_points_mesh": [[203, 208], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.mask_to_bbox": [[216, 231], ["mask.astype.astype", "cv2.findContours", "cv2.boundingRect"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.get_bbox": [[233, 276], ["range", "range", "len", "len", "int", "int", "int", "int", "int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.ply_vtx": [[278, 290], ["open", "open.readline", "open.readline", "int", "range", "numpy.array", "open.readline().strip", "open.readline().strip", "pts.append", "open.readline().split", "numpy.float32", "open.readline", "open.readline", "open.readline", "open.readline().split", "open.readline"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval_ycb.get_bbox": [[54, 91], ["range", "range", "int", "int", "int", "int", "len", "len", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "get_bbox", "(", "posecnn_rois", ")", ":", "\n", "    ", "rmin", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "3", "]", ")", "+", "1", "\n", "rmax", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "5", "]", ")", "-", "1", "\n", "cmin", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "2", "]", ")", "+", "1", "\n", "cmax", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "4", "]", ")", "-", "1", "\n", "r_b", "=", "rmax", "-", "rmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "r_b", ">", "border_list", "[", "tt", "]", "and", "r_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "r_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "c_b", "=", "cmax", "-", "cmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "c_b", ">", "border_list", "[", "tt", "]", "and", "c_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "c_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "center", "=", "[", "int", "(", "(", "rmin", "+", "rmax", ")", "/", "2", ")", ",", "int", "(", "(", "cmin", "+", "cmax", ")", "/", "2", ")", "]", "\n", "rmin", "=", "center", "[", "0", "]", "-", "int", "(", "r_b", "/", "2", ")", "\n", "rmax", "=", "center", "[", "0", "]", "+", "int", "(", "r_b", "/", "2", ")", "\n", "cmin", "=", "center", "[", "1", "]", "-", "int", "(", "c_b", "/", "2", ")", "\n", "cmax", "=", "center", "[", "1", "]", "+", "int", "(", "c_b", "/", "2", ")", "\n", "if", "rmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "rmin", "\n", "rmin", "=", "0", "\n", "rmax", "+=", "delt", "\n", "", "if", "cmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "cmin", "\n", "cmin", "=", "0", "\n", "cmax", "+=", "delt", "\n", "", "if", "rmax", ">", "img_width", ":", "\n", "        ", "delt", "=", "rmax", "-", "img_width", "\n", "rmax", "=", "img_width", "\n", "rmin", "-=", "delt", "\n", "", "if", "cmax", ">", "img_length", ":", "\n", "        ", "delt", "=", "cmax", "-", "img_length", "\n", "cmax", "=", "img_length", "\n", "cmin", "-=", "delt", "\n", "", "return", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.test_data_set.main": [[24, 42], ["DenseFusion.datasets.myDatasetAugmented2.dataset.PoseDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "data_set_name", "=", "'bluedude_solo'", "\n", "opt", ".", "num_points", "=", "1000", "# number of points on the input pointcloud", "\n", "\n", "opt", ".", "refine_start", "=", "False", "\n", "\n", "dataset", "=", "PoseDataset", "(", "'train'", ",", "\n", "opt", ".", "num_points", ",", "\n", "True", ",", "\n", "opt", ".", "noise_trans", ",", "\n", "opt", ".", "refine_start", ",", "\n", "data_set_name", ",", "\n", "show_sample", "=", "True", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader", ",", "0", ")", ":", "\n", "        ", "print", "(", "i", ")", "\n", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "idx", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox": [[54, 91], ["range", "range", "int", "int", "int", "int", "len", "len", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "get_bbox", "(", "posecnn_rois", ")", ":", "\n", "    ", "rmin", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "3", "]", ")", "+", "1", "\n", "rmax", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "5", "]", ")", "-", "1", "\n", "cmin", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "2", "]", ")", "+", "1", "\n", "cmax", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "4", "]", ")", "-", "1", "\n", "r_b", "=", "rmax", "-", "rmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "r_b", ">", "border_list", "[", "tt", "]", "and", "r_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "r_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "c_b", "=", "cmax", "-", "cmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "c_b", ">", "border_list", "[", "tt", "]", "and", "c_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "c_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "center", "=", "[", "int", "(", "(", "rmin", "+", "rmax", ")", "/", "2", ")", ",", "int", "(", "(", "cmin", "+", "cmax", ")", "/", "2", ")", "]", "\n", "rmin", "=", "center", "[", "0", "]", "-", "int", "(", "r_b", "/", "2", ")", "\n", "rmax", "=", "center", "[", "0", "]", "+", "int", "(", "r_b", "/", "2", ")", "\n", "cmin", "=", "center", "[", "1", "]", "-", "int", "(", "c_b", "/", "2", ")", "\n", "cmax", "=", "center", "[", "1", "]", "+", "int", "(", "c_b", "/", "2", ")", "\n", "if", "rmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "rmin", "\n", "rmin", "=", "0", "\n", "rmax", "+=", "delt", "\n", "", "if", "cmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "cmin", "\n", "cmin", "=", "0", "\n", "cmax", "+=", "delt", "\n", "", "if", "rmax", ">", "img_width", ":", "\n", "        ", "delt", "=", "rmax", "-", "img_width", "\n", "rmax", "=", "img_width", "\n", "rmin", "-=", "delt", "\n", "", "if", "cmax", ">", "img_length", ":", "\n", "        ", "delt", "=", "cmax", "-", "img_length", "\n", "cmax", "=", "img_length", "\n", "cmin", "-=", "delt", "\n", "", "return", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.main": [[93, 184], ["DenseFusion.lib.network.PoseNet", "DenseFusion.lib.network.PoseNet.cuda", "DenseFusion.lib.network.PoseNet.load_state_dict", "DenseFusion.lib.network.PoseNet.eval", "DenseFusion.lib.network.PoseRefineNet", "DenseFusion.lib.network.PoseRefineNet.cuda", "DenseFusion.lib.network.PoseRefineNet.load_state_dict", "DenseFusion.lib.network.PoseRefineNet.eval", "DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "scipy.savemat", "scipy.savemat", "print", "DenseFusion.lib.network.PoseNet.", "pred_c.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pred_t.view.view", "cloud.view", "[].view().cpu().data.numpy", "[].view().cpu().data.numpy", "numpy.append", "my_result_wo_refine.append", "range", "my_result.append", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "np.append.tolist", "torch.autograd.Variable().cuda().view().repeat().contiguous().view", "DenseFusion.lib.transformations.quaternion_matrix", "torch.autograd.Variable().cuda().view", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.bmm().contiguous", "torch.bmm().contiguous", "DenseFusion.lib.network.PoseRefineNet.", "pred_r.view.view", "pred_r.view.view().cpu().data.numpy", "pred_t.view.view().cpu().data.numpy", "DenseFusion.lib.transformations.quaternion_matrix", "numpy.dot", "copy.deepcopy", "DenseFusion.lib.transformations.quaternion_from_matrix", "numpy.array", "numpy.append", "np.append.tolist", "print", "my_result_wo_refine.append", "my_result.append", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "[].view().cpu", "[].view().cpu", "torch.autograd.Variable().cuda().view().repeat().contiguous", "torch.autograd.Variable().cuda", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "pred_r.view.view().cpu", "pred_t.view.view().cpu", "range", "range", "[].view", "[].view", "torch.autograd.Variable().cuda().view().repeat", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pred_r.view.view", "pred_t.view.view", "torch.autograd.Variable().cuda().view", "my_mat[].astype", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "[].view().cpu().data.numpy.astype"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_from_matrix"], ["", "def", "main", "(", "data_set_name", ",", "root", ",", "save_extra", "=", "''", ",", "load_pretrained", "=", "True", ",", "load_trained", "=", "False", ",", "load_name", "=", "''", ",", "\n", "label_mode", "=", "'new_pred'", ",", "p_extra_data", "=", "0.0", ",", "p_viewpoints", "=", "1.0", ",", "show_sample", "=", "False", ",", "plot_train", "=", "False", ",", "device_num", "=", "0", ")", ":", "\n", "\n", "\n", "    ", "estimator", "=", "PoseNet", "(", "num_points", "=", "num_points", ",", "num_obj", "=", "num_obj", ")", "\n", "estimator", ".", "cuda", "(", ")", "\n", "estimator", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "model", ")", ")", "\n", "estimator", ".", "eval", "(", ")", "\n", "\n", "refiner", "=", "PoseRefineNet", "(", "num_points", "=", "num_points", ",", "num_obj", "=", "num_obj", ")", "\n", "refiner", ".", "cuda", "(", ")", "\n", "refiner", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "refine_model", ")", ")", "\n", "refiner", ".", "eval", "(", ")", "\n", "\n", "test_dataset", "=", "PoseDataset", "(", "'test'", ",", "\n", "opt", ".", "num_points", ",", "\n", "False", ",", "\n", "0.0", ",", "\n", "opt", ".", "refine_start", ",", "\n", "data_set_name", ",", "\n", "root", ",", "\n", "show_sample", "=", "show_sample", ",", "\n", "label_mode", "=", "label_mode", ",", "\n", "p_extra_data", "=", "p_extra_data", ",", "\n", "p_viewpoints", "=", "p_viewpoints", ")", "\n", "my_result_wo_refine", "=", "[", "]", "\n", "my_result", "=", "[", "]", "\n", "\n", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opt", ".", "workers", ")", "\n", "for", "now", ",", "data", "in", "enumerate", "(", "testdataloader", ",", "0", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "cloud", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "idx", ",", "intr", ",", "np_img", "=", "data", "\n", "cloud", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "idx", "=", "Variable", "(", "cloud", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "choose", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "img", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "target", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "model_points", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "idx", ")", ".", "cuda", "(", ")", "\n", "\n", "pred_r", ",", "pred_t", ",", "pred_c", ",", "emb", "=", "estimator", "(", "img", ",", "cloud", ",", "choose", ",", "idx", ")", "\n", "\n", "\n", "pred_r", "=", "pred_r", "/", "torch", ".", "norm", "(", "pred_r", ",", "dim", "=", "2", ")", ".", "view", "(", "1", ",", "num_points", ",", "1", ")", "\n", "\n", "pred_c", "=", "pred_c", ".", "view", "(", "bs", ",", "num_points", ")", "\n", "how_max", ",", "which_max", "=", "torch", ".", "max", "(", "pred_c", ",", "1", ")", "\n", "pred_t", "=", "pred_t", ".", "view", "(", "bs", "*", "num_points", ",", "1", ",", "3", ")", "\n", "points", "=", "cloud", ".", "view", "(", "bs", "*", "num_points", ",", "1", ",", "3", ")", "\n", "\n", "my_r", "=", "pred_r", "[", "0", "]", "[", "which_max", "[", "0", "]", "]", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "my_t", "=", "(", "points", "+", "pred_t", ")", "[", "which_max", "[", "0", "]", "]", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "my_pred", "=", "np", ".", "append", "(", "my_r", ",", "my_t", ")", "\n", "my_result_wo_refine", ".", "append", "(", "my_pred", ".", "tolist", "(", ")", ")", "\n", "\n", "for", "ite", "in", "range", "(", "0", ",", "iteration", ")", ":", "\n", "                ", "T", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "my_t", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ")", ".", "repeat", "(", "num_points", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "num_points", ",", "3", ")", "\n", "my_mat", "=", "quaternion_matrix", "(", "my_r", ")", "\n", "R", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "my_mat", "[", ":", "3", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "3", ")", "\n", "my_mat", "[", "0", ":", "3", ",", "3", "]", "=", "my_t", "\n", "\n", "new_cloud", "=", "torch", ".", "bmm", "(", "(", "cloud", "-", "T", ")", ",", "R", ")", ".", "contiguous", "(", ")", "\n", "pred_r", ",", "pred_t", "=", "refiner", "(", "new_cloud", ",", "emb", ",", "idx", ")", "\n", "pred_r", "=", "pred_r", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "pred_r", "=", "pred_r", "/", "(", "torch", ".", "norm", "(", "pred_r", ",", "dim", "=", "2", ")", ".", "view", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "my_r_2", "=", "pred_r", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "my_t_2", "=", "pred_t", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "my_mat_2", "=", "quaternion_matrix", "(", "my_r_2", ")", "\n", "\n", "my_mat_2", "[", "0", ":", "3", ",", "3", "]", "=", "my_t_2", "\n", "\n", "my_mat_final", "=", "np", ".", "dot", "(", "my_mat", ",", "my_mat_2", ")", "\n", "my_r_final", "=", "copy", ".", "deepcopy", "(", "my_mat_final", ")", "\n", "my_r_final", "[", "0", ":", "3", ",", "3", "]", "=", "0", "\n", "my_r_final", "=", "quaternion_from_matrix", "(", "my_r_final", ",", "True", ")", "\n", "my_t_final", "=", "np", ".", "array", "(", "[", "my_mat_final", "[", "0", "]", "[", "3", "]", ",", "my_mat_final", "[", "1", "]", "[", "3", "]", ",", "my_mat_final", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "\n", "my_pred", "=", "np", ".", "append", "(", "my_r_final", ",", "my_t_final", ")", "\n", "my_r", "=", "my_r_final", "\n", "my_t", "=", "my_t_final", "\n", "\n", "# Here 'my_pred' is the final pose estimation result after refinement ('my_r': quaternion, 'my_t': translation)", "\n", "", "my_result", ".", "append", "(", "my_pred", ".", "tolist", "(", ")", ")", "\n", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "print", "(", "\"PoseCNN Detector Lost {0} at No.{1} keyframe\"", ".", "format", "(", "itemid", ",", "now", ")", ")", "\n", "my_result_wo_refine", ".", "append", "(", "[", "0.0", "for", "i", "in", "range", "(", "7", ")", "]", ")", "\n", "my_result", ".", "append", "(", "[", "0.0", "for", "i", "in", "range", "(", "7", ")", "]", ")", "\n", "\n", "", "scio", ".", "savemat", "(", "'{0}/{1}.mat'", ".", "format", "(", "result_wo_refine_dir", ",", "'%04d'", "%", "now", ")", ",", "{", "'poses'", ":", "my_result_wo_refine", "}", ")", "\n", "scio", ".", "savemat", "(", "'{0}/{1}.mat'", ".", "format", "(", "result_refine_dir", ",", "'%04d'", "%", "now", ")", ",", "{", "'poses'", ":", "my_result", "}", ")", "\n", "print", "(", "\"Finish No.{0} keyframe\"", ".", "format", "(", "now", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.train.main": [[31, 421], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "print", "os.path.join", "os.path.join", "os.path.join", "print", "DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset", "DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset", "print", "print", "DenseFusion.lib.network.PoseNet", "DenseFusion.lib.network.PoseNet.cuda", "DenseFusion.lib.network.PoseRefineNet", "DenseFusion.lib.network.PoseRefineNet.cuda", "print", "torch.Adam", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset.get_sym_list", "DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset.get_num_points_mesh", "print", "DenseFusion.lib.loss.Loss", "DenseFusion.lib.loss_refiner.Loss_refine", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "DenseFusion.lib.network.PoseNet.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "DenseFusion.lib.network.PoseNet.load_state_dict", "DenseFusion.lib.network.PoseRefineNet.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "DenseFusion.lib.network.PoseRefineNet.load_state_dict", "DenseFusion.lib.network.PoseNet.parameters", "os.listdir", "os.listdir", "time.time", "optim.Adam.zero_grad", "range", "refiner_losses.append", "losses.append", "train_dists.append", "DenseFusion.lib.network.PoseNet.eval", "DenseFusion.lib.network.PoseRefineNet.eval", "enumerate", "test_dists.append", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "DenseFusion.lib.network.PoseNet.load_state_dict", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "DenseFusion.lib.network.PoseRefineNet.load_state_dict", "len", "len", "os.remove", "DenseFusion.lib.network.PoseNet.eval", "DenseFusion.lib.network.PoseRefineNet.train", "DenseFusion.lib.network.PoseNet.train", "enumerate", "numpy.mean", "numpy.mean", "sorted", "matplotlib.pyplot.cla", "matplotlib.pyplot.close", "matplotlib.pyplot.subplots", "DenseFusion.lib.network.PoseNet.", "DenseFusion.lib.loss.Loss.", "dis.item", "fig.suptitle", "matplotlib.pyplot.savefig", "open", "json.dump", "print", "time.time", "print", "torch.Adam", "print", "int", "print", "torch.Adam", "print", "DenseFusion.lib.loss.Loss", "DenseFusion.lib.loss_refiner.Loss_refine", "os.remove", "os.path.join", "DenseFusion.lib.network.PoseNet.", "DenseFusion.lib.loss.Loss.", "epoch_losses.append", "dis.item", "optim.Adam.step", "optim.Adam.zero_grad", "list", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "os.path.join", "matplotlib.pyplot.close", "matplotlib.pyplot.cla", "matplotlib.pyplot.subplots", "axs[].plot", "axs[].set_title", "axs[].set_xlabel", "axs[].set_ylabel", "axs[].plot", "axs[].set_title", "axs[].set_xlabel", "axs[].set_ylabel", "axs[].plot", "axs[].set_title", "axs[].set_xlabel", "axs[].set_ylabel", "axs[].plot", "axs[].set_title", "axs[].set_xlabel", "axs[].set_ylabel", "matplotlib.pyplot.savefig", "os.path.join", "DenseFusion.lib.network.PoseRefineNet.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "DenseFusion.lib.network.PoseNet.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.round", "numpy.round", "DenseFusion.lib.network.PoseNet.parameters", "DenseFusion.lib.network.PoseRefineNet.parameters", "os.path.join", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "loss.item", "range", "epoch_losses_refiner.append", "loss.backward", "epoch_losses_refiner.append", "optim.Adam.step", "optim.Adam.zero_grad", "numpy.random.choice", "my_estimator_prediction", "DenseFusion.lib.network.PoseRefineNet.", "DenseFusion.lib.loss_refiner.Loss_refine.", "numpy.dot", "numpy.add", "target[].data.cpu().numpy", "np_img[].data.numpy", "pc_reconstruction.pointcloud2image", "pc_reconstruction.pointcloud2image", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "os.path.join", "DenseFusion.lib.network.PoseRefineNet.", "DenseFusion.lib.loss_refiner.Loss_refine.", "dis.backward", "dis.item", "list", "int", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "DenseFusion.lib.transformations.quaternion_matrix", "model_points[].data.cpu().numpy", "np_img[].data.numpy.copy", "np_img[].data.numpy.copy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "my_refined_prediction", "target[].data.cpu", "len", "model_points[].data.cpu"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.get_sym_list", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.get_num_points_mesh", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.utils.my_estimator_prediction", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.utils.my_refined_prediction"], ["def", "main", "(", "data_set_name", ",", "root", ",", "save_extra", "=", "''", ",", "load_pretrained", "=", "True", ",", "load_trained", "=", "False", ",", "load_name", "=", "''", ",", "\n", "label_mode", "=", "'new_pred'", ",", "p_extra_data", "=", "0.0", ",", "p_viewpoints", "=", "1.0", ",", "show_sample", "=", "False", ",", "plot_train", "=", "False", ",", "device_num", "=", "0", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of data loading workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "0.0001", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_rate'", ",", "default", "=", "0.3", ",", "help", "=", "'learning rate decay rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--w'", ",", "default", "=", "0.015", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_rate'", ",", "default", "=", "0.3", ",", "help", "=", "'learning rate decay rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay_margin'", ",", "default", "=", "0.016", ",", "help", "=", "'margin to decay lr & w'", ")", "\n", "parser", ".", "add_argument", "(", "'--refine_margin'", ",", "default", "=", "0.010", ",", "help", "=", "'margin to start the training of iterative refinement'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_trans'", ",", "default", "=", "0.03", ",", "\n", "help", "=", "'range of the random noise of translation added to the training data'", ")", "\n", "parser", ".", "add_argument", "(", "'--iteration'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of refinement iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--nepoch'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'max number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--refine_epoch_margin'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'max number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'which epoch to start'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "opt", ".", "manualSeed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device_num", ")", "\n", "\n", "random", ".", "seed", "(", "opt", ".", "manualSeed", ")", "\n", "torch", ".", "manual_seed", "(", "opt", ".", "manualSeed", ")", "\n", "\n", "print", "(", "'bs'", ",", "opt", ".", "batch_size", ",", "'it'", ",", "opt", ".", "iteration", ")", "\n", "\n", "opt", ".", "refine_start", "=", "False", "\n", "opt", ".", "num_points", "=", "1000", "#number of points on the input pointcloud", "\n", "opt", ".", "outf", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion/trained_models'", ",", "data_set_name", "+", "save_extra", ")", "#folder to save trained models", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "outf", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "outf", ")", "\n", "", "opt", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion/experiments/logs'", ",", "data_set_name", "+", "save_extra", ")", "#folder to save logs", "\n", "opt", ".", "log_dir_images", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion/experiments/logs'", ",", "data_set_name", "+", "save_extra", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "log_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "log_dir_images", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "log_dir_images", ")", "\n", "\n", "\n", "", "opt", ".", "repeat_epoch", "=", "1", "#number of repeat times for one epoch training", "\n", "print", "(", "'create datasets'", ")", "\n", "dataset", "=", "PoseDataset", "(", "'train'", ",", "\n", "opt", ".", "num_points", ",", "\n", "True", ",", "\n", "0.0", ",", "\n", "opt", ".", "refine_start", ",", "\n", "data_set_name", ",", "\n", "root", ",", "\n", "show_sample", "=", "show_sample", ",", "\n", "label_mode", "=", "label_mode", ",", "\n", "p_extra_data", "=", "p_extra_data", ",", "\n", "p_viewpoints", "=", "p_viewpoints", ")", "\n", "\n", "test_dataset", "=", "PoseDataset", "(", "'test'", ",", "\n", "opt", ".", "num_points", ",", "\n", "False", ",", "\n", "0.0", ",", "\n", "opt", ".", "refine_start", ",", "\n", "data_set_name", ",", "\n", "root", ",", "\n", "show_sample", "=", "show_sample", ",", "\n", "label_mode", "=", "label_mode", ",", "\n", "p_extra_data", "=", "p_extra_data", ",", "\n", "p_viewpoints", "=", "p_viewpoints", ")", "\n", "\n", "\n", "opt", ".", "num_objects", "=", "dataset", ".", "num_classes", "#number of object classes in the dataset", "\n", "print", "(", "'n classes: {}'", ".", "format", "(", "dataset", ".", "num_classes", ")", ")", "\n", "\n", "print", "(", "'create models'", ")", "\n", "estimator", "=", "PoseNet", "(", "num_points", "=", "opt", ".", "num_points", ",", "num_obj", "=", "opt", ".", "num_objects", ")", "\n", "estimator", ".", "cuda", "(", ")", "\n", "refiner", "=", "PoseRefineNet", "(", "num_points", "=", "opt", ".", "num_points", ",", "num_obj", "=", "opt", ".", "num_objects", ")", "\n", "refiner", ".", "cuda", "(", ")", "\n", "\n", "if", "load_pretrained", ":", "\n", "# load the pretrained estimator model on the ycb dataset, leave the last layer due to mismatch", "\n", "        ", "init_state_dict", "=", "estimator", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion/trained_models/pose_model.pth'", ")", ")", "\n", "pretrained_dict", "[", "'conv4_r.weight'", "]", "=", "init_state_dict", "[", "'conv4_r.weight'", "]", "\n", "pretrained_dict", "[", "'conv4_r.bias'", "]", "=", "init_state_dict", "[", "'conv4_r.bias'", "]", "\n", "pretrained_dict", "[", "'conv4_t.weight'", "]", "=", "init_state_dict", "[", "'conv4_t.weight'", "]", "\n", "pretrained_dict", "[", "'conv4_t.bias'", "]", "=", "init_state_dict", "[", "'conv4_t.bias'", "]", "\n", "pretrained_dict", "[", "'conv4_c.weight'", "]", "=", "init_state_dict", "[", "'conv4_c.weight'", "]", "\n", "pretrained_dict", "[", "'conv4_c.bias'", "]", "=", "init_state_dict", "[", "'conv4_c.bias'", "]", "\n", "estimator", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "\n", "del", "init_state_dict", "\n", "del", "pretrained_dict", "\n", "\n", "# load the pretrained refiner model on the ycb dataset, leave the last layer due to mismatch", "\n", "init_state_dict", "=", "refiner", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion/trained_models/pose_refine_model.pth'", ")", ")", "\n", "pretrained_dict", "[", "'conv3_r.weight'", "]", "=", "init_state_dict", "[", "'conv3_r.weight'", "]", "\n", "pretrained_dict", "[", "'conv3_r.bias'", "]", "=", "init_state_dict", "[", "'conv3_r.bias'", "]", "\n", "pretrained_dict", "[", "'conv3_t.weight'", "]", "=", "init_state_dict", "[", "'conv3_t.weight'", "]", "\n", "pretrained_dict", "[", "'conv3_t.bias'", "]", "=", "init_state_dict", "[", "'conv3_t.bias'", "]", "\n", "refiner", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "\n", "del", "init_state_dict", "\n", "del", "pretrained_dict", "\n", "", "elif", "load_trained", ":", "\n", "        ", "loading_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion/trained_models/{}/pose_model.pth'", ".", "format", "(", "load_name", ")", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "loading_path", ")", "\n", "estimator", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "\n", "loading_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion/trained_models/{}/pose_refine_model.pth'", ".", "format", "(", "load_name", ")", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "loading_path", ")", "\n", "refiner", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "del", "pretrained_dict", "\n", "\n", "\n", "", "print", "(", "'create optimizer and dataloader'", ")", "\n", "#opt.refine_start = False", "\n", "opt", ".", "decay_start", "=", "False", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "estimator", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "\n", "#dataloader = torch.utils.data.DataLoader(dataset, batch_size=2, shuffle=True, num_workers=opt.workers,", "\n", "#                                         collate_fn=collate_fn)", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "opt", ".", "workers", ")", "\n", "\n", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opt", ".", "workers", ")", "\n", "\n", "opt", ".", "sym_list", "=", "dataset", ".", "get_sym_list", "(", ")", "\n", "opt", ".", "num_points_mesh", "=", "dataset", ".", "get_num_points_mesh", "(", ")", "\n", "\n", "print", "(", "'>>>>>>>>----------Dataset loaded!---------<<<<<<<<\\nlength of the training set: {0}'", "\n", "'\\nlength of the testing set: {1}\\nnumber of sample points on mesh: {2}\\nsymmetry object list: {3}'", ".", "format", "(", "\n", "len", "(", "dataset", ")", ",", "len", "(", "test_dataset", ")", ",", "opt", ".", "num_points_mesh", ",", "opt", ".", "sym_list", ")", ")", "\n", "\n", "criterion", "=", "Loss", "(", "opt", ".", "num_points_mesh", ",", "opt", ".", "sym_list", ")", "\n", "criterion_refine", "=", "Loss_refine", "(", "opt", ".", "num_points_mesh", ",", "opt", ".", "sym_list", ")", "\n", "\n", "best_test", "=", "np", ".", "Inf", "\n", "best_test_epoch", "=", "0", "\n", "best_train", "=", "np", ".", "Inf", "\n", "best_train_epoch", "=", "0", "\n", "if", "opt", ".", "start_epoch", "==", "1", ":", "\n", "        ", "for", "log", "in", "os", ".", "listdir", "(", "opt", ".", "log_dir", ")", ":", "\n", "            ", "if", "log", "!=", "'images'", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "log", ")", ")", "\n", "", "", "for", "img", "in", "os", ".", "listdir", "(", "opt", ".", "log_dir_images", ")", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir_images", ",", "img", ")", ")", "\n", "\n", "", "", "train_dists", "=", "[", "]", "\n", "test_dists", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "refiner_losses", "=", "[", "]", "\n", "best_loss", "=", "np", ".", "inf", "\n", "best_loss_epoch", "=", "0", "\n", "elapsed_times", "=", "0.0", "\n", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "start_epoch", ",", "opt", ".", "nepoch", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_count", "=", "0", "\n", "train_dis_avg", "=", "0.0", "\n", "\n", "if", "opt", ".", "refine_start", ":", "\n", "            ", "estimator", ".", "eval", "(", ")", "\n", "refiner", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "estimator", ".", "train", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "epoch_losses", "=", "[", "]", "\n", "epoch_losses_refiner", "=", "[", "]", "\n", "for", "rep", "in", "range", "(", "opt", ".", "repeat_epoch", ")", ":", "\n", "#for batch in dataloader:", "\n", "#points, choose, img, target, model_points, idx = batch", "\n", "#print(points.shape, choose.shape, img.shape, target.shape, model_points.shape)", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader", ",", "0", ")", ":", "\n", "                ", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "idx", "=", "data", "\n", "\n", "#print(points.shape, choose.shape, img.shape, target.shape, model_points.shape)", "\n", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "idx", "=", "Variable", "(", "points", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "choose", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "img", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "target", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "model_points", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "idx", ")", ".", "cuda", "(", ")", "\n", "pred_r", ",", "pred_t", ",", "pred_c", ",", "emb", "=", "estimator", "(", "img", ",", "points", ",", "choose", ",", "idx", ")", "\n", "loss", ",", "dis", ",", "new_points", ",", "new_target", ",", "pred", "=", "criterion", "(", "pred_r", ",", "pred_t", ",", "pred_c", ",", "target", ",", "model_points", ",", "idx", ",", "points", ",", "opt", ".", "w", ",", "opt", ".", "refine_start", ")", "\n", "epoch_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "if", "opt", ".", "refine_start", ":", "\n", "                    ", "for", "ite", "in", "range", "(", "0", ",", "opt", ".", "iteration", ")", ":", "\n", "                        ", "pred_r", ",", "pred_t", "=", "refiner", "(", "new_points", ",", "emb", ",", "idx", ")", "\n", "dis", ",", "new_points", ",", "new_target", ",", "pred", "=", "criterion_refine", "(", "pred_r", ",", "pred_t", ",", "new_target", ",", "model_points", ",", "idx", ",", "new_points", ")", "\n", "dis", ".", "backward", "(", ")", "\n", "", "epoch_losses_refiner", ".", "append", "(", "dis", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "epoch_losses_refiner", ".", "append", "(", "0", ")", "\n", "", "train_dis_avg", "+=", "dis", ".", "item", "(", ")", "\n", "train_count", "+=", "1", "\n", "\n", "# make step after one epoch", "\n", "if", "train_count", "%", "opt", ".", "batch_size", "==", "0", ":", "\n", "                    ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# make last step of epoch if something is remaining", "\n", "", "", "if", "train_count", "%", "opt", ".", "batch_size", "!=", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "refiner_losses", ".", "append", "(", "np", ".", "mean", "(", "epoch_losses_refiner", ")", ")", "\n", "losses", ".", "append", "(", "np", ".", "mean", "(", "epoch_losses", ")", ")", "\n", "if", "losses", "[", "-", "1", "]", "<", "best_loss", ":", "\n", "            ", "best_loss", "=", "losses", "[", "-", "1", "]", "\n", "best_loss_epoch", "=", "epoch", "\n", "\n", "", "train_dists", ".", "append", "(", "train_dis_avg", "/", "train_count", ")", "\n", "if", "train_dists", "[", "-", "1", "]", "<", "best_train", ":", "\n", "            ", "best_train_epoch", "=", "epoch", "\n", "best_train", "=", "train_dists", "[", "-", "1", "]", "\n", "\n", "", "test_dis", "=", "0.0", "\n", "test_count", "=", "0", "\n", "estimator", ".", "eval", "(", ")", "\n", "refiner", ".", "eval", "(", ")", "\n", "\n", "if", "plot_train", ":", "\n", "# plot randomly selected validation preds", "\n", "            ", "jj", "=", "0", "\n", "x_axis", "=", "0", "\n", "fig_x", "=", "4", "\n", "fig_y", "=", "4", "\n", "log_indexes", "=", "sorted", "(", "list", "(", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "testdataloader", ")", ")", ")", ",", "int", "(", "fig_x", "*", "(", "fig_y", "/", "2", ")", ")", ",", "replace", "=", "False", ")", ")", ")", "\n", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "fig_x", ",", "fig_y", ",", "constrained_layout", "=", "True", ",", "figsize", "=", "(", "25", ",", "15", ")", ")", "\n", "\n", "", "for", "j", ",", "data", "in", "enumerate", "(", "testdataloader", ",", "0", ")", ":", "\n", "            ", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "idx", ",", "intr", ",", "np_img", "=", "data", "\n", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "idx", "=", "Variable", "(", "points", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "choose", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "img", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "target", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "model_points", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "idx", ")", ".", "cuda", "(", ")", "\n", "pred_r", ",", "pred_t", ",", "pred_c", ",", "emb", "=", "estimator", "(", "img", ",", "points", ",", "choose", ",", "idx", ")", "\n", "\n", "if", "plot_train", ":", "\n", "                ", "if", "j", "in", "log_indexes", ":", "\n", "                    ", "my_pred", ",", "my_r", ",", "my_t", "=", "my_estimator_prediction", "(", "pred_r", ",", "pred_t", ",", "pred_c", ",", "opt", ".", "num_points", ",", "1", ",", "points", ")", "\n", "\n", "", "", "_", ",", "dis", ",", "new_points", ",", "new_target", ",", "pred", "=", "criterion", "(", "pred_r", ",", "pred_t", ",", "pred_c", ",", "target", ",", "model_points", ",", "idx", ",", "points", ",", "opt", ".", "w", ",", "opt", ".", "refine_start", ")", "\n", "if", "opt", ".", "refine_start", ":", "\n", "                ", "for", "ite", "in", "range", "(", "0", ",", "opt", ".", "iteration", ")", ":", "\n", "                    ", "pred_r", ",", "pred_t", "=", "refiner", "(", "new_points", ",", "emb", ",", "idx", ")", "\n", "\n", "if", "plot_train", ":", "\n", "                        ", "if", "j", "in", "log_indexes", ":", "\n", "                            ", "my_pred", ",", "my_r", ",", "my_t", "=", "my_refined_prediction", "(", "pred_r", ",", "pred_t", ",", "my_r", ",", "my_t", ")", "\n", "\n", "", "", "dis", ",", "new_points", ",", "new_target", ",", "pred", "=", "criterion_refine", "(", "pred_r", ",", "pred_t", ",", "new_target", ",", "model_points", ",", "idx", ",", "new_points", ")", "\n", "\n", "", "", "if", "plot_train", ":", "\n", "                ", "if", "j", "in", "log_indexes", ":", "\n", "                    ", "if", "jj", "==", "4", ":", "\n", "                        ", "jj", "=", "0", "\n", "x_axis", "+=", "1", "\n", "\n", "", "my_r", "=", "quaternion_matrix", "(", "my_r", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "np_pred", "=", "np", ".", "dot", "(", "model_points", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "my_r", ".", "T", ")", "\n", "np_pred", "=", "np", ".", "add", "(", "np_pred", ",", "my_t", ")", "\n", "np_target", "=", "target", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np_img", "=", "np_img", "[", "0", "]", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "image_target", "=", "pc_utils", ".", "pointcloud2image", "(", "np_img", ".", "copy", "(", ")", ",", "np_target", ",", "3", ",", "intr", ")", "\n", "image_prediction", "=", "pc_utils", ".", "pointcloud2image", "(", "np_img", ".", "copy", "(", ")", ",", "np_pred", ",", "3", ",", "intr", ")", "\n", "\n", "axs", "[", "x_axis", ",", "jj", "]", ".", "imshow", "(", "image_target", ")", "\n", "axs", "[", "x_axis", ",", "jj", "]", ".", "set_title", "(", "'target {}'", ".", "format", "(", "j", ")", ")", "\n", "axs", "[", "x_axis", ",", "jj", "]", ".", "set_axis_off", "(", ")", "\n", "jj", "+=", "1", "\n", "\n", "axs", "[", "x_axis", ",", "jj", "]", ".", "imshow", "(", "image_prediction", ")", "\n", "axs", "[", "x_axis", ",", "jj", "]", ".", "set_title", "(", "'prediction {}'", ".", "format", "(", "j", ")", ")", "\n", "axs", "[", "x_axis", ",", "jj", "]", ".", "set_axis_off", "(", ")", "\n", "jj", "+=", "1", "\n", "\n", "", "", "test_dis", "+=", "dis", ".", "item", "(", ")", "\n", "test_count", "+=", "1", "\n", "\n", "", "test_dis", "=", "test_dis", "/", "test_count", "\n", "\n", "test_dists", ".", "append", "(", "test_dis", ")", "\n", "\n", "if", "plot_train", ":", "\n", "            ", "fig", ".", "suptitle", "(", "'epoch {}, with a average dist: {}'", ".", "format", "(", "epoch", ",", "test_dis", ")", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir_images", ",", "'test_images_epoch_{}.png'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n", "if", "epoch", ">", "1", ":", "\n", "                ", "plt", ".", "close", "(", "'all'", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "2", ",", "2", ",", "constrained_layout", "=", "True", ",", "figsize", "=", "(", "30", ",", "20", ")", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "plot", "(", "losses", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_title", "(", "'Training estimator loss'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_ylabel", "(", "'Loss'", ")", "\n", "\n", "axs", "[", "0", ",", "1", "]", ".", "plot", "(", "refiner_losses", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_title", "(", "'Training refiner loss'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_ylabel", "(", "'Loss'", ")", "\n", "\n", "axs", "[", "1", ",", "0", "]", ".", "plot", "(", "train_dists", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_title", "(", "'Training Avg. distance'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_ylabel", "(", "'Avg. distance [m]'", ")", "\n", "\n", "axs", "[", "1", ",", "1", "]", ".", "plot", "(", "test_dists", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_title", "(", "'Test Avg. distance'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_ylabel", "(", "'Avg. distance [m]'", ")", "\n", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir_images", ",", "'losses.png'", ")", ")", "\n", "\n", "", "", "out_dict", "=", "{", "\n", "'losses'", ":", "losses", ",", "\n", "'refiner_losses'", ":", "refiner_losses", ",", "\n", "'train_dists'", ":", "train_dists", ",", "\n", "'test_dists'", ":", "test_dists", "\n", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "'losses.json'", ")", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "out_dict", ",", "outfile", ")", "\n", "", "del", "out_dict", "\n", "\n", "\n", "print", "(", "'>>>>>>>>----------Epoch {0} finished---------<<<<<<<<'", ".", "format", "(", "epoch", ")", ")", "\n", "if", "test_dis", "<=", "best_test", ":", "\n", "            ", "best_test", "=", "test_dis", "\n", "best_test_epoch", "=", "epoch", "\n", "if", "opt", ".", "refine_start", ":", "\n", "                ", "state_dict", "=", "refiner", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "'{0}/pose_refine_model.pth'", ".", "format", "(", "opt", ".", "outf", ")", ")", "\n", "del", "state_dict", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "estimator", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "'{0}/pose_model.pth'", ".", "format", "(", "opt", ".", "outf", ")", ")", "\n", "del", "state_dict", "\n", "\n", "", "print", "(", "'>>>>>>>>----------MODEL SAVED---------<<<<<<<<'", ")", "\n", "\n", "", "t_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "elapsed_times", "+=", "t_elapsed", "/", "3600", "\n", "print", "(", "'elapsed time: {} min, total elapsed time: {} hours'", ".", "format", "(", "\n", "np", ".", "round", "(", "t_elapsed", "/", "60", ",", "2", ")", ",", "np", ".", "round", "(", "elapsed_times", ")", ",", "2", ")", ")", "\n", "\n", "print", "(", "'Train loss           : {}'", ".", "format", "(", "losses", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "'Best train loss {}   : {}'", ".", "format", "(", "best_loss_epoch", ",", "best_loss", ")", ")", "\n", "print", "(", "'Train dist           : {}'", ".", "format", "(", "train_dists", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "'Best train dist {}   : {}'", ".", "format", "(", "best_train_epoch", ",", "best_train", ")", ")", "\n", "print", "(", "'Test dist            : {}'", ".", "format", "(", "test_dists", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "'Best test dist {}    : {}'", ".", "format", "(", "best_test_epoch", ",", "best_test", ")", ")", "\n", "\n", "\n", "\n", "# changing stuff during training if...", "\n", "if", "best_test", "<", "opt", ".", "decay_margin", "and", "not", "opt", ".", "decay_start", ":", "\n", "            ", "print", "(", "'decay lr'", ")", "\n", "opt", ".", "decay_start", "=", "True", "\n", "opt", ".", "lr", "*=", "opt", ".", "lr_rate", "\n", "opt", ".", "w", "*=", "opt", ".", "w_rate", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "estimator", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "\n", "\n", "", "if", "(", "best_test", "<", "opt", ".", "refine_margin", "or", "epoch", ">=", "opt", ".", "refine_epoch_margin", ")", "and", "not", "opt", ".", "refine_start", ":", "\n", "#print('train refiner')", "\n", "            ", "opt", ".", "refine_start", "=", "True", "\n", "print", "(", "'bs'", ",", "opt", ".", "batch_size", ",", "'it'", ",", "opt", ".", "iteration", ")", "\n", "opt", ".", "batch_size", "=", "int", "(", "opt", ".", "batch_size", "/", "opt", ".", "iteration", ")", "\n", "print", "(", "'new bs'", ",", "opt", ".", "batch_size", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "refiner", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "\n", "#dataloader = torch.utils.data.DataLoader(dataset, batch_size=1, shuffle=True, num_workers=opt.workers)", "\n", "#testdataloader = torch.utils.data.DataLoader(test_dataset, batch_size=1, shuffle=False, num_workers=opt.workers)", "\n", "\n", "#opt.sym_list = dataset.get_sym_list()", "\n", "#opt.num_points_mesh = dataset.get_num_points_mesh()", "\n", "\n", "print", "(", "'>>>>>>>>----------train refiner!---------<<<<<<<<'", ")", "\n", "criterion", "=", "Loss", "(", "opt", ".", "num_points_mesh", ",", "opt", ".", "sym_list", ")", "\n", "criterion_refine", "=", "Loss_refine", "(", "opt", ".", "num_points_mesh", ",", "opt", ".", "sym_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.utils.my_estimator_prediction": [[7, 19], ["pred_c.view.view", "torch.max", "pred_t.view.view", "cloud.view", "[].view().cpu().data.numpy", "[].view().cpu().data.numpy", "numpy.append", "torch.norm().view", "torch.norm", "[].view().cpu", "[].view().cpu", "[].view", "[].view"], "function", ["None"], ["import", "segmentation_models_pytorch", "as", "smp", "\n", "import", "random", "\n", "import", "copy", "\n", "from", "PIL", "import", "Image", "\n", "\n", "class", "HFlipDefault", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "0.5", "\n", "self", ".", "hflip", "=", "transforms", ".", "functional", ".", "hflip", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "p", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.utils.my_refined_prediction": [[20, 41], ["DenseFusion.lib.transformations.quaternion_matrix", "pred_r.view.view", "pred_r.view.view().cpu().data.numpy", "pred_t.view().cpu().data.numpy", "DenseFusion.lib.transformations.quaternion_matrix", "numpy.dot", "copy.deepcopy", "DenseFusion.lib.transformations.quaternion_from_matrix", "numpy.array", "numpy.append", "torch.norm().view", "torch.norm", "pred_r.view.view().cpu", "pred_t.view().cpu", "pred_r.view.view", "pred_t.view"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_from_matrix"], ["            ", "img", "=", "self", ".", "hflip", "(", "img", ")", "\n", "label", "=", "self", ".", "hflip", "(", "label", ")", "\n", "\n", "", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "rotate", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "rotation", "=", "transforms", ".", "functional", ".", "rotate", "\n", "self", ".", "range", "=", "[", "-", "180", ",", "180", "]", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "image", ",", "label", "=", "data", "\n", "angle", "=", "random", ".", "uniform", "(", "self", ".", "range", "[", "0", "]", ",", "self", ".", "range", "[", "1", "]", ")", "\n", "image", "=", "self", ".", "rotation", "(", "image", ",", "angle", ")", "\n", "label", "=", "self", ".", "rotation", "(", "label", ",", "angle", ")", "\n", "return", "image", ",", "label", "\n", "\n", "", "", "class", "colorJitter", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "ColorJitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.2", ",", "\n", "contrast", "=", "0.2", ",", "\n", "saturation", "=", "0.2", ",", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.utils.get_new_points": [[43, 87], ["pred_c.view.size", "torch.cat().contiguous().view", "pred_t.contiguous().view.contiguous().view", "points.view.contiguous().view", "pred_c.view.contiguous().view", "pred_c.view.view", "torch.max", "points.view.view", "ori_base[].view().contiguous", "t.repeat().contiguous().view", "torch.bmm().contiguous", "torch.bmm().contiguous.detach", "torch.norm().view", "torch.cat().contiguous", "pred_t.contiguous().view.contiguous", "points.view.contiguous", "pred_c.view.contiguous", "ori_base[].view", "t.repeat().contiguous", "torch.bmm", "torch.norm", "torch.cat", "t.repeat"], "function", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "ColorJitter", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "normalize", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "normalize", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "toTensor", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "label", "=", "label", ".", "long", "(", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "\n", "\n", "\n", "", "", "def", "jaccard_loss", "(", "true", ",", "logits", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"Computes the Jaccard loss, a.k.a the IoU loss.\n    Note that PyTorch optimizers minimize a loss. In this\n    case, we would like to maximize the jaccard loss so we\n    return the negated jaccard loss.\n    Args:\n        true: a tensor of shape [B, H, W] or [B, 1, H, W].\n        logits: a tensor of shape [B, C, H, W]. Corresponds to\n            the raw output or logits of the model.\n        eps: added to the denominator for numerical stability.\n    Returns:\n        jacc_loss: the Jaccard loss.\n    \"\"\"", "\n", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "# unique = torch.unique(true)[1:]", "\n", "unique", "=", "torch", ".", "unique", "(", "true", ")", "\n", "#print('unique', unique)", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.loss.Loss.__init__": [[26, 28], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ")", ",", "dim", "=", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", "*", "num_p", ",", "3", ",", "3", ")", "\n", "\n", "ori_base", "=", "base", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.loss.Loss.forward": [[29, 31], ["loss.loss_calculation"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.loss.loss_calculation"], ["base", "=", "base", ".", "contiguous", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "model_points", "=", "model_points", ".", "view", "(", "bs", ",", "1", ",", "num_point_mesh", ",", "3", ")", ".", "repeat", "(", "1", ",", "num_p", ",", "1", ",", "1", ")", ".", "view", "(", "bs", "*", "num_p", ",", "num_point_mesh", ",", "3", ")", "\n", "target", "=", "target", ".", "view", "(", "bs", ",", "1", ",", "num_point_mesh", ",", "3", ")", ".", "repeat", "(", "1", ",", "num_p", ",", "1", ",", "1", ")", ".", "view", "(", "bs", "*", "num_p", ",", "num_point_mesh", ",", "3", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.loss.loss_calculation": [[13, 22], ["target.view().view().contiguous.view().view().contiguous", "semantic.view().transpose().contiguous().view().contiguous.view().transpose().contiguous().view().contiguous", "CEloss", "semantic.view().transpose().contiguous().view().contiguous.size", "target.view().view().contiguous.view().view", "semantic.view().transpose().contiguous().view().contiguous.view().transpose().contiguous().view", "target.view().view().contiguous.view", "semantic.view().transpose().contiguous().view().contiguous.view().transpose().contiguous", "semantic.view().transpose().contiguous().view().contiguous.view().transpose", "semantic.view().transpose().contiguous().view().contiguous.view"], "function", ["None"], ["    ", "knn", "=", "KNearestNeighbor", "(", "1", ")", "\n", "bs", ",", "num_p", ",", "_", "=", "pred_c", ".", "size", "(", ")", "\n", "\n", "pred_r", "=", "pred_r", "/", "(", "torch", ".", "norm", "(", "pred_r", ",", "dim", "=", "2", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ")", "\n", "\n", "base", "=", "torch", ".", "cat", "(", "(", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "2", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "-", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "1", "]", "*", "pred_r", "[", ":", ",", ":", ",", "2", "]", "+", "2.0", "*", "pred_r", "[", ":", ",", ":", ",", "3", "]", "*", "pred_r", "[", ":", ",", ":", ",", "0", "]", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ",", "(", "1.0", "-", "2.0", "*", "(", "pred_r", "[", ":", ",", ":", ",", "1", "]", "**", "2", "+", "pred_r", "[", ":", ",", ":", ",", "3", "]", "**", "2", ")", ")", ".", "view", "(", "bs", ",", "num_p", ",", "1", ")", ","]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.data_controller.SegDataset.__init__": [[18, 42], ["open", "open.close", "len", "len", "torchvision.transforms.ColorJitter", "torchvision.transforms.Normalize", "numpy.array", "numpy.array", "open.readline", "data_controller.SegDataset.path.append", "copy.deepcopy", "data_controller.SegDataset.real_path.append", "copy.deepcopy", "range", "range"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "txtlist", ",", "use_noise", ",", "length", ")", ":", "\n", "        ", "self", ".", "path", "=", "[", "]", "\n", "self", ".", "real_path", "=", "[", "]", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "self", ".", "root", "=", "root_dir", "\n", "input_file", "=", "open", "(", "txtlist", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "", "if", "input_line", "[", "-", "1", ":", "]", "==", "'\\n'", ":", "\n", "                ", "input_line", "=", "input_line", "[", ":", "-", "1", "]", "\n", "", "self", ".", "path", ".", "append", "(", "copy", ".", "deepcopy", "(", "input_line", ")", ")", "\n", "if", "input_line", "[", ":", "5", "]", "==", "'data/'", ":", "\n", "                ", "self", ".", "real_path", ".", "append", "(", "copy", ".", "deepcopy", "(", "input_line", ")", ")", "\n", "", "", "input_file", ".", "close", "(", ")", "\n", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "data_len", "=", "len", "(", "self", ".", "path", ")", "\n", "self", ".", "back_len", "=", "len", "(", "self", ".", "real_path", ")", "\n", "\n", "self", ".", "trancolor", "=", "transforms", ".", "ColorJitter", "(", "0.2", ",", "0.2", ",", "0.2", ",", "0.05", ")", "\n", "self", ".", "norm", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "back_front", "=", "np", ".", "array", "(", "[", "[", "1", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.data_controller.SegDataset.__getitem__": [[43, 94], ["random.randint", "numpy.array", "numpy.array", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat", "meta[].flatten().astype", "numpy.append", "numpy.append", "copy.deepcopy", "numpy.transpose", "numpy.transpose", "data_controller.SegDataset.norm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "PIL.Image.open().convert", "PIL.ImageEnhance.Brightness().enhance().filter", "numpy.array", "numpy.array", "random.randint", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.getmaskarray", "numpy.getmaskarray", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "random.randint", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.astype", "torch.from_numpy.astype", "PIL.Image.open().convert", "data_controller.SegDataset.trancolor", "PIL.ImageFilter.GaussianBlur", "data_controller.SegDataset.trancolor", "data_controller.SegDataset.trancolor", "PIL.Image.open", "numpy.masked_equal", "numpy.masked_equal", "numpy.random.normal", "numpy.random.normal", "numpy.fliplr", "numpy.fliplr", "numpy.fliplr", "numpy.fliplr", "meta[].flatten", "numpy.flipud.astype", "PIL.Image.open().convert", "PIL.Image.open", "PIL.ImageEnhance.Brightness().enhance", "PIL.Image.open().convert", "numpy.flipud", "numpy.flipud", "numpy.flipud", "numpy.flipud", "PIL.Image.open", "numpy.fliplr", "numpy.fliplr", "numpy.flipud", "numpy.flipud", "numpy.fliplr", "numpy.fliplr", "numpy.flipud", "numpy.flipud", "PIL.Image.open", "PIL.ImageEnhance.Brightness", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "data_len", "-", "10", ")", "\n", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-label.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "path", "[", "index", "]", ")", ")", ")", "\n", "meta", "=", "scio", ".", "loadmat", "(", "'{0}/{1}-meta.mat'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "path", "[", "index", "]", ")", ")", "\n", "if", "not", "self", ".", "use_noise", ":", "\n", "            ", "rgb", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "path", "[", "index", "]", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "rgb", "=", "np", ".", "array", "(", "self", ".", "trancolor", "(", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "path", "[", "index", "]", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "path", "[", "index", "]", "[", ":", "8", "]", "==", "'data_syn'", ":", "\n", "            ", "rgb", "=", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "path", "[", "index", "]", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "rgb", "=", "ImageEnhance", ".", "Brightness", "(", "rgb", ")", ".", "enhance", "(", "1.5", ")", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "0.8", ")", ")", "\n", "rgb", "=", "np", ".", "array", "(", "self", ".", "trancolor", "(", "rgb", ")", ")", "\n", "seed", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "back_len", "-", "10", ")", "\n", "back", "=", "np", ".", "array", "(", "self", ".", "trancolor", "(", "Image", ".", "open", "(", "'{0}/{1}-color.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "path", "[", "seed", "]", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "back_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "'{0}/{1}-label.png'", ".", "format", "(", "self", ".", "root", ",", "self", ".", "path", "[", "seed", "]", ")", ")", ")", "\n", "mask", "=", "ma", ".", "getmaskarray", "(", "ma", ".", "masked_equal", "(", "label", ",", "0", ")", ")", "\n", "back", "=", "np", ".", "transpose", "(", "back", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "rgb", "=", "np", ".", "transpose", "(", "rgb", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "rgb", "=", "rgb", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "5.0", ",", "size", "=", "rgb", ".", "shape", ")", "\n", "rgb", "=", "back", "*", "mask", "+", "rgb", "\n", "label", "=", "back_label", "*", "mask", "+", "label", "\n", "rgb", "=", "np", ".", "transpose", "(", "rgb", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "#scipy.misc.imsave('embedding_final/rgb_{0}.png'.format(index), rgb)", "\n", "#scipy.misc.imsave('embedding_final/label_{0}.png'.format(index), label)", "\n", "\n", "", "if", "self", ".", "use_noise", ":", "\n", "            ", "choice", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "if", "choice", "==", "0", ":", "\n", "                ", "rgb", "=", "np", ".", "fliplr", "(", "rgb", ")", "\n", "label", "=", "np", ".", "fliplr", "(", "label", ")", "\n", "", "elif", "choice", "==", "1", ":", "\n", "                ", "rgb", "=", "np", ".", "flipud", "(", "rgb", ")", "\n", "label", "=", "np", ".", "flipud", "(", "label", ")", "\n", "", "elif", "choice", "==", "2", ":", "\n", "                ", "rgb", "=", "np", ".", "fliplr", "(", "rgb", ")", "\n", "rgb", "=", "np", ".", "flipud", "(", "rgb", ")", "\n", "label", "=", "np", ".", "fliplr", "(", "label", ")", "\n", "label", "=", "np", ".", "flipud", "(", "label", ")", "\n", "\n", "\n", "", "", "obj", "=", "meta", "[", "'cls_indexes'", "]", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "obj", "=", "np", ".", "append", "(", "obj", ",", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "target", "=", "copy", ".", "deepcopy", "(", "label", ")", "\n", "\n", "rgb", "=", "np", ".", "transpose", "(", "rgb", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "rgb", "=", "self", ".", "norm", "(", "torch", ".", "from_numpy", "(", "rgb", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "target", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "\n", "return", "rgb", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.data_controller.SegDataset.__len__": [[96, 98], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.segnet.SegNet.__init__": [[7, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nbr", "=", "3", ",", "label_nbr", "=", "22", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "batchNorm_momentum", "=", "0.1", "\n", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "input_nbr", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn11", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn12", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "\n", "self", ".", "conv21", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn21", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv22", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn22", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "\n", "self", ".", "conv31", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn31", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv32", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn32", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv33", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn33", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "\n", "self", ".", "conv41", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn41", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv42", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn42", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv43", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn43", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "\n", "self", ".", "conv51", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn51", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv52", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn52", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv53", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn53", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "\n", "self", ".", "conv53d", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn53d", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv52d", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn52d", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv51d", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn51d", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "\n", "self", ".", "conv43d", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn43d", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv42d", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn42d", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv41d", "=", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn41d", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "\n", "self", ".", "conv33d", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn33d", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv32d", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn32d", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv31d", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn31d", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "\n", "self", ".", "conv22d", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn22d", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv21d", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn21d", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "\n", "self", ".", "conv12d", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn12d", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "batchNorm_momentum", ")", "\n", "self", ".", "conv11d", "=", "nn", ".", "Conv2d", "(", "64", ",", "label_nbr", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.vanilla_segmentation.segnet.SegNet.forward": [[74, 122], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_unpool2d", "torch.max_unpool2d", "torch.max_unpool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_unpool2d", "torch.max_unpool2d", "torch.max_unpool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_unpool2d", "torch.max_unpool2d", "torch.max_unpool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_unpool2d", "torch.max_unpool2d", "torch.max_unpool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_unpool2d", "torch.max_unpool2d", "torch.max_unpool2d", "torch.relu", "torch.relu", "torch.relu", "segnet.SegNet.conv11d", "segnet.SegNet.bn11", "segnet.SegNet.bn12", "segnet.SegNet.bn21", "segnet.SegNet.bn22", "segnet.SegNet.bn31", "segnet.SegNet.bn32", "segnet.SegNet.bn33", "segnet.SegNet.bn41", "segnet.SegNet.bn42", "segnet.SegNet.bn43", "segnet.SegNet.bn51", "segnet.SegNet.bn52", "segnet.SegNet.bn53", "segnet.SegNet.bn53d", "segnet.SegNet.bn52d", "segnet.SegNet.bn51d", "segnet.SegNet.bn43d", "segnet.SegNet.bn42d", "segnet.SegNet.bn41d", "segnet.SegNet.bn33d", "segnet.SegNet.bn32d", "segnet.SegNet.bn31d", "segnet.SegNet.bn22d", "segnet.SegNet.bn21d", "segnet.SegNet.bn12d", "segnet.SegNet.conv11", "segnet.SegNet.conv12", "segnet.SegNet.conv21", "segnet.SegNet.conv22", "segnet.SegNet.conv31", "segnet.SegNet.conv32", "segnet.SegNet.conv33", "segnet.SegNet.conv41", "segnet.SegNet.conv42", "segnet.SegNet.conv43", "segnet.SegNet.conv51", "segnet.SegNet.conv52", "segnet.SegNet.conv53", "segnet.SegNet.conv53d", "segnet.SegNet.conv52d", "segnet.SegNet.conv51d", "segnet.SegNet.conv43d", "segnet.SegNet.conv42d", "segnet.SegNet.conv41d", "segnet.SegNet.conv33d", "segnet.SegNet.conv32d", "segnet.SegNet.conv31d", "segnet.SegNet.conv22d", "segnet.SegNet.conv21d", "segnet.SegNet.conv12d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x11", "=", "F", ".", "relu", "(", "self", ".", "bn11", "(", "self", ".", "conv11", "(", "x", ")", ")", ")", "\n", "x12", "=", "F", ".", "relu", "(", "self", ".", "bn12", "(", "self", ".", "conv12", "(", "x11", ")", ")", ")", "\n", "x1p", ",", "id1", "=", "F", ".", "max_pool2d", "(", "x12", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "\n", "x21", "=", "F", ".", "relu", "(", "self", ".", "bn21", "(", "self", ".", "conv21", "(", "x1p", ")", ")", ")", "\n", "x22", "=", "F", ".", "relu", "(", "self", ".", "bn22", "(", "self", ".", "conv22", "(", "x21", ")", ")", ")", "\n", "x2p", ",", "id2", "=", "F", ".", "max_pool2d", "(", "x22", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "\n", "x31", "=", "F", ".", "relu", "(", "self", ".", "bn31", "(", "self", ".", "conv31", "(", "x2p", ")", ")", ")", "\n", "x32", "=", "F", ".", "relu", "(", "self", ".", "bn32", "(", "self", ".", "conv32", "(", "x31", ")", ")", ")", "\n", "x33", "=", "F", ".", "relu", "(", "self", ".", "bn33", "(", "self", ".", "conv33", "(", "x32", ")", ")", ")", "\n", "x3p", ",", "id3", "=", "F", ".", "max_pool2d", "(", "x33", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "\n", "x41", "=", "F", ".", "relu", "(", "self", ".", "bn41", "(", "self", ".", "conv41", "(", "x3p", ")", ")", ")", "\n", "x42", "=", "F", ".", "relu", "(", "self", ".", "bn42", "(", "self", ".", "conv42", "(", "x41", ")", ")", ")", "\n", "x43", "=", "F", ".", "relu", "(", "self", ".", "bn43", "(", "self", ".", "conv43", "(", "x42", ")", ")", ")", "\n", "x4p", ",", "id4", "=", "F", ".", "max_pool2d", "(", "x43", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "\n", "x51", "=", "F", ".", "relu", "(", "self", ".", "bn51", "(", "self", ".", "conv51", "(", "x4p", ")", ")", ")", "\n", "x52", "=", "F", ".", "relu", "(", "self", ".", "bn52", "(", "self", ".", "conv52", "(", "x51", ")", ")", ")", "\n", "x53", "=", "F", ".", "relu", "(", "self", ".", "bn53", "(", "self", ".", "conv53", "(", "x52", ")", ")", ")", "\n", "x5p", ",", "id5", "=", "F", ".", "max_pool2d", "(", "x53", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "\n", "x5d", "=", "F", ".", "max_unpool2d", "(", "x5p", ",", "id5", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x53d", "=", "F", ".", "relu", "(", "self", ".", "bn53d", "(", "self", ".", "conv53d", "(", "x5d", ")", ")", ")", "\n", "x52d", "=", "F", ".", "relu", "(", "self", ".", "bn52d", "(", "self", ".", "conv52d", "(", "x53d", ")", ")", ")", "\n", "x51d", "=", "F", ".", "relu", "(", "self", ".", "bn51d", "(", "self", ".", "conv51d", "(", "x52d", ")", ")", ")", "\n", "\n", "x4d", "=", "F", ".", "max_unpool2d", "(", "x51d", ",", "id4", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x43d", "=", "F", ".", "relu", "(", "self", ".", "bn43d", "(", "self", ".", "conv43d", "(", "x4d", ")", ")", ")", "\n", "x42d", "=", "F", ".", "relu", "(", "self", ".", "bn42d", "(", "self", ".", "conv42d", "(", "x43d", ")", ")", ")", "\n", "x41d", "=", "F", ".", "relu", "(", "self", ".", "bn41d", "(", "self", ".", "conv41d", "(", "x42d", ")", ")", ")", "\n", "\n", "x3d", "=", "F", ".", "max_unpool2d", "(", "x41d", ",", "id3", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x33d", "=", "F", ".", "relu", "(", "self", ".", "bn33d", "(", "self", ".", "conv33d", "(", "x3d", ")", ")", ")", "\n", "x32d", "=", "F", ".", "relu", "(", "self", ".", "bn32d", "(", "self", ".", "conv32d", "(", "x33d", ")", ")", ")", "\n", "x31d", "=", "F", ".", "relu", "(", "self", ".", "bn31d", "(", "self", ".", "conv31d", "(", "x32d", ")", ")", ")", "\n", "\n", "x2d", "=", "F", ".", "max_unpool2d", "(", "x31d", ",", "id2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x22d", "=", "F", ".", "relu", "(", "self", ".", "bn22d", "(", "self", ".", "conv22d", "(", "x2d", ")", ")", ")", "\n", "x21d", "=", "F", ".", "relu", "(", "self", ".", "bn21d", "(", "self", ".", "conv21d", "(", "x22d", ")", ")", ")", "\n", "\n", "x1d", "=", "F", ".", "max_unpool2d", "(", "x21d", ",", "id1", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x12d", "=", "F", ".", "relu", "(", "self", ".", "bn12d", "(", "self", ".", "conv12d", "(", "x1d", ")", ")", ")", "\n", "x11d", "=", "self", ".", "conv11d", "(", "x12d", ")", "\n", "\n", "return", "x11d", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.plot_pose_exp_results.main": [[9, 94], ["os.path.join", "sorted", "results.items", "print", "list", "os.path.join", "print", "key.split", "len", "range", "print", "numpy.round", "numpy.argmin", "numpy.round", "os.listdir", "open", "json.load", "float", "float", "matplotlib.subplots", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "matplotlib.show", "len", "len", "len", "print", "numpy.min", "numpy.min", "numpy.argmin", "float", "fig.suptitle", "fig.suptitle", "numpy.round", "str", "str"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["def", "main", "(", ")", ":", "\n", "    ", "exp_name", "=", "'full_12_classes'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion'", ",", "'experiments'", ",", "'logs'", ",", "exp_name", ")", "\n", "dirs", "=", "sorted", "(", "list", "(", "os", ".", "listdir", "(", "path", ")", ")", ")", "\n", "show_plot", "=", "True", "\n", "results", "=", "{", "}", "\n", "for", "d", "in", "dirs", ":", "\n", "        ", "path2", "=", "os", ".", "path", ".", "join", "(", "path", ",", "d", ",", "'losses.json'", ")", "\n", "\n", "with", "open", "(", "path2", ")", "as", "jfile", ":", "\n", "            ", "results", "[", "d", "]", "=", "json", ".", "load", "(", "jfile", ")", "\n", "\n", "", "", "exp_results", "=", "{", "'bs pred'", ":", "{", "'pw'", ":", "{", "}", ",", "'pe'", ":", "{", "}", "}", ",", "\n", "'sm pred'", ":", "{", "'pw'", ":", "{", "}", ",", "'pe'", ":", "{", "}", "}", "}", "\n", "for", "key", ",", "logs", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "key", ")", "\n", "name", "=", "key", ".", "split", "(", "'_'", ")", "\n", "pw", "=", "float", "(", "name", "[", "3", "]", "[", "2", ":", "]", ")", "*", "100", "\n", "pe", "=", "float", "(", "name", "[", "4", "]", "[", "2", ":", "]", ")", "*", "100", "\n", "\n", "if", "show_plot", ":", "\n", "\n", "            ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "4", ",", "1", ",", "constrained_layout", "=", "True", ")", "\n", "if", "pe", "!=", "0", ":", "\n", "                ", "pe2", "=", "float", "(", "np", ".", "round", "(", "pe", "/", "(", "100", "+", "pe", ")", "*", "100", ",", "2", ")", ")", "\n", "fig", ".", "suptitle", "(", "\n", "'Training Results of the pose estimation with {}% extra data.'", ".", "format", "(", "pe2", ")", ")", "\n", "", "else", ":", "\n", "                ", "fig", ".", "suptitle", "(", "\n", "'Training Results of the pose estimation with {}% view points'", ".", "format", "(", "pw", ")", ")", "\n", "", "axs", "[", "0", "]", ".", "plot", "(", "logs", "[", "'losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "0", "]", ".", "set_title", "(", "'Estimator Loss'", ")", "\n", "axs", "[", "0", "]", ".", "set_ylabel", "(", "'Dense Fusion Loss'", ")", "\n", "axs", "[", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", "]", ".", "plot", "(", "logs", "[", "'refiner_losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "1", "]", ".", "set_title", "(", "'Refiner Loss'", ")", "\n", "axs", "[", "1", "]", ".", "set_ylabel", "(", "'Dense Fusion Loss'", ")", "\n", "axs", "[", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "2", "]", ".", "plot", "(", "logs", "[", "'train_dists'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "2", "]", ".", "set_title", "(", "'Train ADD'", ")", "\n", "axs", "[", "2", "]", ".", "set_ylabel", "(", "'ADD [m]'", ")", "\n", "axs", "[", "2", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "3", "]", ".", "plot", "(", "logs", "[", "'test_dists'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "3", "]", ".", "set_title", "(", "'Validation ADD'", ")", "\n", "axs", "[", "3", "]", ".", "set_ylabel", "(", "'ADD [m]'", ")", "\n", "axs", "[", "3", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "start_ref", "=", "len", "(", "logs", "[", "'refiner_losses'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "logs", "[", "'refiner_losses'", "]", ")", ")", ":", "\n", "            ", "if", "logs", "[", "'refiner_losses'", "]", "[", "i", "]", "!=", "0", ":", "\n", "                ", "start_ref", "=", "i", "\n", "break", "\n", "\n", "", "", "print", "(", "start_ref", ",", "len", "(", "logs", "[", "'refiner_losses'", "]", ")", ")", "\n", "if", "len", "(", "logs", "[", "'refiner_losses'", "]", ")", "<", "499", ":", "\n", "            ", "print", "(", "'logs to small, continuing'", ")", "\n", "continue", "\n", "\n", "", "best_estimator", "=", "np", ".", "round", "(", "np", ".", "min", "(", "logs", "[", "'test_dists'", "]", "[", ":", "start_ref", "]", ")", ",", "4", ")", "\n", "best_estimator_epoch", "=", "np", ".", "argmin", "(", "logs", "[", "'test_dists'", "]", "[", ":", "start_ref", "]", ")", "\n", "\n", "best_refiner", "=", "np", ".", "round", "(", "np", ".", "min", "(", "logs", "[", "'test_dists'", "]", "[", "start_ref", ":", "]", ")", ",", "4", ")", "\n", "best_refiner_epoch", "=", "np", ".", "argmin", "(", "logs", "[", "'test_dists'", "]", "[", "start_ref", ":", "]", ")", "+", "start_ref", "\n", "\n", "if", "'new'", "in", "name", ":", "\n", "            ", "name", "=", "'sm pred'", "\n", "", "else", ":", "\n", "            ", "name", "=", "'bs pred'", "\n", "\n", "", "if", "pe", "!=", "0", ":", "\n", "\n", "            ", "exp_results", "[", "name", "]", "[", "'pe'", "]", "[", "str", "(", "pe", ")", "]", "=", "{", "'best_estimator'", ":", "best_estimator", ",", "\n", "'best_estimator_epoch'", ":", "best_estimator_epoch", ",", "\n", "'best_refiner'", ":", "best_refiner", ",", "\n", "'best_refiner_epoch'", ":", "best_refiner_epoch", "}", "\n", "", "else", ":", "\n", "            ", "exp_results", "[", "name", "]", "[", "'pw'", "]", "[", "str", "(", "pw", ")", "]", "=", "{", "'best_estimator'", ":", "best_estimator", ",", "\n", "'best_estimator_epoch'", ":", "best_estimator_epoch", ",", "\n", "'best_refiner'", ":", "best_refiner", ",", "\n", "'best_refiner_epoch'", ":", "best_refiner_epoch", "}", "\n", "", "", "print", "(", "exp_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.select_samples_for_gt_test.main": [[9, 52], ["os.path.join", "list", "os.path.join", "os.path.join", "enumerate", "os.listdir", "os.path.exists", "os.makedirs", "os.path.exists", "os.path.join", "enumerate", "open", "json.dump", "open", "json.load", "print", "os.path.join", "os.path.join", "int", "numpy.array", "numpy.random.shuffle", "list", "os.path.exists", "os.makedirs", "Image.open().convert.save", "len", "len", "len", "open", "PIL.Image.open().convert", "os.path.join", "os.path.join", "sorted", "PIL.Image.open", "list", "os.listdir"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["def", "main", "(", ")", ":", "\n", "    ", "p", "=", "0.2", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation'", ",", "'data'", ")", "\n", "classes", "=", "list", "(", "os", ".", "listdir", "(", "path", ")", ")", "\n", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'experiments'", ",", "'data'", ",", "'gt_test'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "gt_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "gt_path", ")", "\n", "\n", "", "json_path", "=", "os", ".", "path", ".", "join", "(", "gt_path", ",", "'meta.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "json_path", ")", ":", "\n", "        ", "meta", "=", "{", "'p'", ":", "p", "}", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "json_path", ")", "as", "f", ":", "\n", "            ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "\n", "", "", "rotations", "=", "[", "'foreground'", ",", "'foreground180'", "]", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "cls_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "cls", ")", "\n", "for", "j", ",", "rot", "in", "enumerate", "(", "rotations", ")", ":", "\n", "            ", "print", "(", "'cls {}/{}, rot {}/{}'", ".", "format", "(", "i", ",", "len", "(", "classes", ")", ",", "j", ",", "len", "(", "rotations", ")", ")", ")", "\n", "rot_path", "=", "os", ".", "path", ".", "join", "(", "cls_path", ",", "rot", ")", "\n", "name", "=", "'{}_{}'", ".", "format", "(", "cls", ",", "rot", ")", "\n", "if", "not", "name", "in", "meta", ":", "\n", "                ", "samples", "=", "np", ".", "array", "(", "[", "s", "for", "s", "in", "sorted", "(", "list", "(", "os", ".", "listdir", "(", "rot_path", ")", ")", ")", "if", "'.color.png'", "in", "s", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "samples", ")", "\n", "meta", "[", "name", "]", "=", "list", "(", "samples", ")", "\n", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "gt_path", ",", "cls", ",", "rot", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "n", "=", "int", "(", "len", "(", "meta", "[", "name", "]", ")", "*", "meta", "[", "'p'", "]", ")", "\n", "for", "sample", "in", "meta", "[", "name", "]", "[", ":", "n", "]", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "rot_path", ",", "sample", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "x", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "x", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "sample", ")", ")", "\n", "\n", "\n", "", "", "", "with", "open", "(", "json_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "meta", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.gt_test.main": [[9, 157], ["os.path.join", "os.path.join", "os.path.join", "print", "os.path.join", "enumerate", "enumerate", "list", "os.path.isdir", "print", "os.path.join", "os.path.join", "os.path.join", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "print", "print", "print", "print", "print", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array", "ious_gt_vs_new_pred.append", "ious_gt_vs_pred.append", "ious_pred_vs_new_pred.append", "ious_gt_vs_gen.append", "ious_gen_vs_pred.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "len", "len", "list", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "PIL.Image.open().convert", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.show", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.show", "np.array.copy", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.show", "np.array.copy", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.show", "gt_test.compute_IoU", "gt_test.compute_IoU", "gt_test.compute_IoU", "gt_test.compute_IoU", "gt_test.compute_IoU", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "os.listdir", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "len", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.gt_test.compute_IoU", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.gt_test.compute_IoU", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.gt_test.compute_IoU", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.gt_test.compute_IoU", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.gt_test.compute_IoU", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["def", "main", "(", ")", ":", "\n", "\n", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator'", ",", "'data'", ")", "\n", "path2", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation'", ",", "'data'", ")", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'experiments'", ",", "'data'", ",", "'gt_test'", ")", "\n", "classes", "=", "[", "d", "for", "d", "in", "list", "(", "os", ".", "listdir", "(", "gt_path", ")", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "gt_path", ",", "d", ")", ")", "]", "\n", "print", "(", "'classes'", ",", "classes", ")", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'experiments'", ",", "'data'", ",", "'gt_test'", ")", "\n", "\n", "plot_labels", "=", "False", "\n", "c0", "=", "0.7", "\n", "c1", "=", "1.0", "-", "c0", "\n", "ch1", "=", "2", "# color pred", "\n", "ch2", "=", "0", "# color new pred and gen", "\n", "\n", "\n", "ious_gt_vs_new_pred", "=", "[", "]", "\n", "ious_gt_vs_pred", "=", "[", "]", "\n", "ious_pred_vs_new_pred", "=", "[", "]", "\n", "ious_gt_vs_gen", "=", "[", "]", "\n", "ious_gen_vs_pred", "=", "[", "]", "\n", "ious_1", "=", "0", "\n", "ious_2", "=", "0", "\n", "ious_3", "=", "0", "\n", "ious_4", "=", "0", "\n", "ious_5", "=", "0", "\n", "total_samples", "=", "0", "\n", "\n", "rotations", "=", "[", "'foreground'", ",", "'foreground180'", "]", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "#if cls != 'Joint':", "\n", "#    continue", "\n", "\n", "        ", "for", "j", ",", "rot", "in", "enumerate", "(", "rotations", ")", ":", "\n", "            ", "print", "(", "'cls {}/{}, rot {}/{}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "classes", ")", ",", "j", "+", "1", ",", "len", "(", "rotations", ")", ")", ")", "\n", "rot_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "cls", ",", "rot", ")", "\n", "rot_path2", "=", "os", ".", "path", ".", "join", "(", "path2", ",", "cls", ",", "rot", ")", "\n", "gt_rot_path", "=", "os", ".", "path", ".", "join", "(", "gt_path", ",", "cls", ",", "rot", ")", "\n", "\n", "tag", "=", "'.color.mask.0.png'", "\n", "samples", "=", "[", "s", "[", ":", "-", "len", "(", "tag", ")", "]", "for", "s", "in", "list", "(", "os", ".", "listdir", "(", "gt_rot_path", ")", ")", "if", "tag", "in", "s", "]", "\n", "\n", "for", "sample", "in", "samples", ":", "\n", "                ", "gt_sample_path", "=", "os", ".", "path", ".", "join", "(", "gt_rot_path", ",", "'{}{}'", ".", "format", "(", "sample", ",", "tag", ")", ")", "\n", "new_pred_path", "=", "os", ".", "path", ".", "join", "(", "rot_path", ",", "'{}.new_pred.label.png'", ".", "format", "(", "sample", ")", ")", "\n", "pred_path", "=", "os", ".", "path", ".", "join", "(", "rot_path", ",", "'{}.pred.label.png'", ".", "format", "(", "sample", ")", ")", "\n", "gen_path", "=", "os", ".", "path", ".", "join", "(", "rot_path", ",", "'{}.gen.label.png'", ".", "format", "(", "sample", ")", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "rot_path2", ",", "'{}.color.png'", ".", "format", "(", "sample", ")", ")", "\n", "\n", "\n", "gt_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_sample_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "new_pred_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "new_pred_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "pred_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "gen_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gen_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "image", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "plot_labels", ":", "\n", "                    ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'RGB Image'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "gt_label", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'Human Hand annotation'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "pred_label", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'Background Subtraction'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "4", ")", "\n", "plt", ".", "imshow", "(", "new_pred_label", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'Segmentation Model'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "plot_labels", ":", "\n", "                    ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'RGB Image'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "gt_label", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'Human Hand annotation'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "gen_label", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'Classical Approach'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "4", ")", "\n", "plt", ".", "imshow", "(", "pred_label", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'Deep Learning Approach'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "plot_labels", ":", "\n", "                    ", "added", "=", "image", ".", "copy", "(", ")", "\n", "\n", "added", "[", ":", ",", ":", ",", "ch1", "]", "[", "pred_label", "!=", "0", "]", "=", "added", "[", ":", ",", ":", ",", "ch1", "]", "[", "pred_label", "!=", "0", "]", "*", "c0", "+", "pred_label", "[", "pred_label", "!=", "0", "]", "*", "c1", "\n", "added", "[", ":", ",", ":", ",", "ch2", "]", "[", "new_pred_label", "!=", "0", "]", "=", "added", "[", ":", ",", ":", ",", "ch2", "]", "[", "new_pred_label", "!=", "0", "]", "*", "c0", "+", "new_pred_label", "[", "new_pred_label", "!=", "0", "]", "*", "c1", "\n", "plt", ".", "imshow", "(", "added", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'Background Subtraction vs Segmentation Model'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "added", "=", "image", ".", "copy", "(", ")", "\n", "added", "[", ":", ",", ":", ",", "ch1", "]", "[", "pred_label", "!=", "0", "]", "=", "added", "[", ":", ",", ":", ",", "ch1", "]", "[", "pred_label", "!=", "0", "]", "*", "c0", "+", "pred_label", "[", "pred_label", "!=", "0", "]", "*", "c1", "\n", "added", "[", ":", ",", ":", ",", "ch2", "]", "[", "gen_label", "!=", "0", "]", "=", "added", "[", ":", ",", ":", ",", "ch2", "]", "[", "gen_label", "!=", "0", "]", "*", "c0", "+", "gen_label", "[", "gen_label", "!=", "0", "]", "*", "c1", "\n", "plt", ".", "imshow", "(", "added", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'Deep Learning vs Classical'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "ious_gt_vs_new_pred", ".", "append", "(", "compute_IoU", "(", "gt_label", ",", "new_pred_label", ")", ")", "\n", "ious_gt_vs_pred", ".", "append", "(", "compute_IoU", "(", "gt_label", ",", "pred_label", ")", ")", "\n", "ious_pred_vs_new_pred", ".", "append", "(", "compute_IoU", "(", "pred_label", ",", "new_pred_label", ")", ")", "\n", "ious_gt_vs_gen", ".", "append", "(", "compute_IoU", "(", "gt_label", ",", "gen_label", ")", ")", "\n", "ious_gen_vs_pred", ".", "append", "(", "compute_IoU", "(", "gen_label", ",", "pred_label", ")", ")", "\n", "\n", "if", "ious_gt_vs_new_pred", "[", "-", "1", "]", "[", "0", "]", ">=", "0.5", ":", "\n", "                    ", "ious_1", "+=", "1", "\n", "", "if", "ious_gt_vs_pred", "[", "-", "1", "]", "[", "0", "]", ">=", "0.5", ":", "\n", "                    ", "ious_2", "+=", "1", "\n", "", "if", "ious_pred_vs_new_pred", "[", "-", "1", "]", "[", "0", "]", ">=", "0.5", ":", "\n", "                    ", "ious_3", "+=", "1", "\n", "", "if", "ious_gt_vs_gen", "[", "-", "1", "]", "[", "0", "]", ">=", "0.5", ":", "\n", "                    ", "ious_4", "+=", "1", "\n", "", "if", "ious_gen_vs_pred", "[", "-", "1", "]", "[", "0", "]", ">=", "0.5", ":", "\n", "                    ", "ious_5", "+=", "1", "\n", "", "total_samples", "+=", "1", "\n", "\n", "", "iou_gt_vs_new_pred", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "ious_gt_vs_new_pred", ")", ",", "axis", "=", "0", ")", ",", "4", ")", "\n", "iou_gt_vs_pred", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "ious_gt_vs_pred", ")", ",", "axis", "=", "0", ")", ",", "4", ")", "\n", "iou_pred_vs_new_pred", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "ious_pred_vs_new_pred", ")", ",", "axis", "=", "0", ")", ",", "4", ")", "\n", "iou_gt_vs_gen", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "ious_gt_vs_gen", ")", ",", "axis", "=", "0", ")", ",", "4", ")", "\n", "iou_gen_vs_pred", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "ious_gen_vs_pred", ")", ",", "axis", "=", "0", ")", ",", "4", ")", "\n", "\n", "ious_1_out", "=", "np", ".", "round", "(", "ious_1", "/", "total_samples", ",", "4", ")", "\n", "ious_2_out", "=", "np", ".", "round", "(", "ious_2", "/", "total_samples", ",", "4", ")", "\n", "ious_3_out", "=", "np", ".", "round", "(", "ious_3", "/", "total_samples", ",", "4", ")", "\n", "ious_4_out", "=", "np", ".", "round", "(", "ious_4", "/", "total_samples", ",", "4", ")", "\n", "ious_5_out", "=", "np", ".", "round", "(", "ious_5", "/", "total_samples", ",", "4", ")", "\n", "\n", "print", "(", "'gt_vs_new_pred:      iou = {}, accuracy = {}, precision = {}, recall = {}, iou >= 0.5: {}'", ".", "format", "(", "*", "iou_gt_vs_new_pred", ",", "ious_1_out", ")", ")", "\n", "print", "(", "'gt_vs_pred:          iou = {}, accuracy = {}, precision = {}, recall = {}, iou >= 0.5: {} '", ".", "format", "(", "*", "iou_gt_vs_pred", ",", "ious_2_out", ")", ")", "\n", "print", "(", "'pred_vs_new_pred:    iou = {}, accuracy = {}, precision = {}, recall = {}, iou >= 0.5: {} '", ".", "format", "(", "*", "iou_pred_vs_new_pred", ",", "ious_3_out", ")", ")", "\n", "print", "(", "'gt_vs_gen:           iou = {}, accuracy = {}, precision = {}, recall = {}, iou >= 0.5: {} '", ".", "format", "(", "*", "iou_gt_vs_gen", ",", "ious_4_out", ")", ")", "\n", "print", "(", "'gen_vs_pred:         iou = {}, accuracy = {}, precision = {}, recall = {}, iou >= 0.5: {} '", ".", "format", "(", "*", "iou_gen_vs_pred", ",", "ious_5_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.gt_test.compute_IoU": [[160, 195], ["numpy.ndarray.flatten", "numpy.ndarray.flatten", "numpy.unique", "enumerate", "float", "float", "float", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["", "", "", "def", "compute_IoU", "(", "ground_truth", ",", "label", ")", ":", "\n", "# flatten image, set 255 to 1 and background to 3 such that we can count tp, fp, fn, tn", "\n", "    ", "ground_truth_flat", "=", "np", ".", "ndarray", ".", "flatten", "(", "ground_truth", ")", "\n", "ground_truth_flat", "[", "ground_truth_flat", "!=", "0", "]", "=", "1", "\n", "ground_truth_flat", "[", "ground_truth_flat", "==", "0", "]", "=", "3", "\n", "\n", "# flatten label as well", "\n", "label_flat", "=", "np", ".", "ndarray", ".", "flatten", "(", "label", ")", "\n", "label_flat", "[", "label_flat", "!=", "0", "]", "=", "1", "\n", "\n", "# compute difference, and get uniques and their counts", "\n", "diff", "=", "ground_truth_flat", "-", "label_flat", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "diff", ",", "return_counts", "=", "True", ")", "\n", "\n", "# count tp, fp and fn", "\n", "tp", "=", "0", "\n", "tn", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "for", "j", ",", "i", "in", "enumerate", "(", "unique", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "tp", "=", "counts", "[", "j", "]", "\n", "", "elif", "i", "==", "1", ":", "\n", "            ", "fp", "=", "counts", "[", "j", "]", "\n", "", "elif", "i", "==", "2", ":", "\n", "            ", "fn", "=", "counts", "[", "j", "]", "\n", "", "elif", "i", "==", "3", ":", "\n", "            ", "tn", "=", "counts", "[", "j", "]", "\n", "\n", "\n", "", "", "iou", "=", "float", "(", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fp", "+", "fn", ")", ")", "\n", "accuracy", "=", "(", "tp", "+", "tn", ")", "/", "(", "tp", "+", "tn", "+", "fp", "+", "fn", ")", "\n", "precision", "=", "float", "(", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fp", ")", ")", "\n", "recall", "=", "float", "(", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", ")", ")", "\n", "return", "[", "iou", ",", "accuracy", ",", "precision", ",", "recall", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.gt_test.change_contrast": [[197, 219], ["cv2.cvtColor", "cv2.split", "cv2.createCLAHE", "cv2.createCLAHE.apply", "cv2.merge", "cv2.cvtColor", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "change_contrast", "(", "image", ")", ":", "\n", "\n", "#print('change contrast')", "\n", "#cv2.imshow('input', np.array(image, dtype=np.uint8))", "\n", "    ", "lab", "=", "cv2", ".", "cvtColor", "(", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "cv2", ".", "COLOR_BGR2LAB", ")", "\n", "#cv2.imshow(\"lab\", lab)", "\n", "\n", "l", ",", "a", ",", "b", "=", "cv2", ".", "split", "(", "lab", ")", "\n", "#cv2.imshow('l_channel', l)", "\n", "#cv2.imshow('a_channel', a)", "\n", "#cv2.imshow('b_channel', b)", "\n", "\n", "clahe", "=", "cv2", ".", "createCLAHE", "(", "clipLimit", "=", "3.0", ",", "tileGridSize", "=", "(", "8", ",", "8", ")", ")", "\n", "cl", "=", "clahe", ".", "apply", "(", "l", ")", "\n", "#cv2.imshow('CLAHE output', cl)", "\n", "limg", "=", "cv2", ".", "merge", "(", "(", "cl", ",", "a", ",", "b", ")", ")", "\n", "#cv2.imshow('limg', limg)", "\n", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "limg", ",", "cv2", ".", "COLOR_LAB2BGR", ")", "\n", "#cv2.imshow('final', image)", "\n", "\n", "return", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval.main": [[12, 30], ["get_prediction_models", "print", "eval.eval"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_prediction_models", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval"], ["import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "import", "torch", ".", "nn", ".", "parallel", "\n", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "import", "torch", ".", "optim", "as", "optim", "\n", "import", "torch", ".", "utils", ".", "data", "\n", "import", "torchvision", ".", "datasets", "as", "dset", "\n", "import", "torchvision", ".", "transforms", "as", "transforms", "\n", "import", "torchvision", ".", "utils", "as", "vutils", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "torch", ".", "autograd", "import", "Variable", "\n", "from", "DenseFusion", ".", "datasets", ".", "myDatasetAugmented", ".", "dataset", "import", "PoseDataset", "\n", "from", "DenseFusion", ".", "lib", ".", "network", "import", "PoseNet", ",", "PoseRefineNet", "\n", "from", "DenseFusion", ".", "lib", ".", "transformations", "import", "euler_matrix", ",", "quaternion_matrix", ",", "quaternion_from_matrix", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_root'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'dataset root dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'resume PoseNet model'", ")", "\n", "parser", ".", "add_argument", "(", "'--refine_model'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'resume PoseRefineNet model'", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval.eval": [[32, 100], ["DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset", "DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset.get_sym_list", "DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset.get_num_points_mesh", "torch.utils.data.DataLoader", "DenseFusion.lib.loss.Loss", "DenseFusion.lib.loss_refiner.Loss_refine", "enumerate", "results.items", "print", "estimator", "DenseFusion.lib.loss.Loss.", "dists.append", "[].append", "results.items", "np.round", "print", "np.round", "np.round", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "dis.item", "dis.item", "np.mean", "refiner", "DenseFusion.lib.loss_refiner.Loss_refine.", "len", "np.round", "np.round", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "np.mean"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.get_sym_list", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.get_num_points_mesh"], ["\n", "norm", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "border_list", "=", "[", "-", "1", ",", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "400", ",", "440", ",", "480", ",", "520", ",", "560", ",", "600", ",", "640", ",", "680", "]", "\n", "xmap", "=", "np", ".", "array", "(", "[", "[", "j", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "ymap", "=", "np", ".", "array", "(", "[", "[", "i", "for", "i", "in", "range", "(", "640", ")", "]", "for", "j", "in", "range", "(", "480", ")", "]", ")", "\n", "cam_cx", "=", "312.9869", "\n", "cam_cy", "=", "241.3109", "\n", "cam_fx", "=", "1066.778", "\n", "cam_fy", "=", "1067.487", "\n", "cam_scale", "=", "10000.0", "\n", "num_obj", "=", "21", "\n", "img_width", "=", "480", "\n", "img_length", "=", "640", "\n", "num_points", "=", "1000", "\n", "num_points_mesh", "=", "500", "\n", "iteration", "=", "2", "\n", "bs", "=", "1", "\n", "dataset_config_dir", "=", "'datasets/ycb/dataset_config'", "\n", "ycb_toolbox_dir", "=", "'YCB_Video_toolbox'", "\n", "result_wo_refine_dir", "=", "'experiments/eval_result/ycb/Densefusion_wo_refine_result'", "\n", "result_refine_dir", "=", "'experiments/eval_result/ycb/Densefusion_iterative_result'", "\n", "\n", "def", "get_bbox", "(", "posecnn_rois", ")", ":", "\n", "    ", "rmin", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "3", "]", ")", "+", "1", "\n", "rmax", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "5", "]", ")", "-", "1", "\n", "cmin", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "2", "]", ")", "+", "1", "\n", "cmax", "=", "int", "(", "posecnn_rois", "[", "idx", "]", "[", "4", "]", ")", "-", "1", "\n", "r_b", "=", "rmax", "-", "rmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "r_b", ">", "border_list", "[", "tt", "]", "and", "r_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "r_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "c_b", "=", "cmax", "-", "cmin", "\n", "for", "tt", "in", "range", "(", "len", "(", "border_list", ")", ")", ":", "\n", "        ", "if", "c_b", ">", "border_list", "[", "tt", "]", "and", "c_b", "<", "border_list", "[", "tt", "+", "1", "]", ":", "\n", "            ", "c_b", "=", "border_list", "[", "tt", "+", "1", "]", "\n", "break", "\n", "", "", "center", "=", "[", "int", "(", "(", "rmin", "+", "rmax", ")", "/", "2", ")", ",", "int", "(", "(", "cmin", "+", "cmax", ")", "/", "2", ")", "]", "\n", "rmin", "=", "center", "[", "0", "]", "-", "int", "(", "r_b", "/", "2", ")", "\n", "rmax", "=", "center", "[", "0", "]", "+", "int", "(", "r_b", "/", "2", ")", "\n", "cmin", "=", "center", "[", "1", "]", "-", "int", "(", "c_b", "/", "2", ")", "\n", "cmax", "=", "center", "[", "1", "]", "+", "int", "(", "c_b", "/", "2", ")", "\n", "if", "rmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "rmin", "\n", "rmin", "=", "0", "\n", "rmax", "+=", "delt", "\n", "", "if", "cmin", "<", "0", ":", "\n", "        ", "delt", "=", "-", "cmin", "\n", "cmin", "=", "0", "\n", "cmax", "+=", "delt", "\n", "", "if", "rmax", ">", "img_width", ":", "\n", "        ", "delt", "=", "rmax", "-", "img_width", "\n", "rmax", "=", "img_width", "\n", "rmin", "-=", "delt", "\n", "", "if", "cmax", ">", "img_length", ":", "\n", "        ", "delt", "=", "cmax", "-", "img_length", "\n", "cmax", "=", "img_length", "\n", "cmin", "-=", "delt", "\n", "", "return", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "\n", "\n", "\n", "", "def", "main", "(", "data_set_name", ",", "root", ",", "save_extra", "=", "''", ",", "load_pretrained", "=", "True", ",", "load_trained", "=", "False", ",", "load_name", "=", "''", ",", "\n", "label_mode", "=", "'new_pred'", ",", "p_extra_data", "=", "0.0", ",", "p_viewpoints", "=", "1.0", ",", "show_sample", "=", "False", ",", "plot_train", "=", "False", ",", "device_num", "=", "0", ")", ":", "\n", "\n", "\n", "    ", "estimator", "=", "PoseNet", "(", "num_points", "=", "num_points", ",", "num_obj", "=", "num_obj", ")", "\n", "estimator", ".", "cuda", "(", ")", "\n", "estimator", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "model", ")", ")", "\n", "estimator", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.train_pose_estimation_exp.main": [[12, 50], ["os.path.join", "os.path.join", "enumerate", "os.path.exists", "os.makedirs", "runs.append", "runs.append", "print", "print", "time.time", "DenseFusion.main", "print", "print", "copy.deepcopy", "copy.deepcopy", "time.time", "open", "json.dump", "len", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.createPath.main", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["def", "main", "(", ")", ":", "\n", "    ", "data_set", "=", "'full_12_classes'", "\n", "\n", "stats_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'experiments'", ",", "'data'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "stats_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "stats_path", ")", "\n", "", "stats_path", "=", "os", ".", "path", ".", "join", "(", "stats_path", ",", "'{}_stats.json'", ".", "format", "(", "data_set", ")", ")", "\n", "default_run", "=", "{", "'pw'", ":", "1.0", ",", "'pe'", ":", "0.0", ",", "'lm'", ":", "'new_pred'", "}", "\n", "runs", "=", "[", "{", "'pw'", ":", "1.0", ",", "'pe'", ":", "0.0", ",", "'lm'", ":", "'pred'", "}", "]", "\n", "#runs = []", "\n", "#pws = [0.25, 0.5, 0.75, 1.0]", "\n", "pws", "=", "[", "]", "\n", "for", "pw", "in", "pws", ":", "\n", "        ", "runs", ".", "append", "(", "copy", ".", "deepcopy", "(", "default_run", ")", ")", "\n", "runs", "[", "-", "1", "]", "[", "'pw'", "]", "=", "pw", "\n", "\n", "", "pes", "=", "[", "0.75", ",", "1.0", "]", "\n", "for", "pe", "in", "pes", ":", "\n", "        ", "runs", ".", "append", "(", "copy", ".", "deepcopy", "(", "default_run", ")", ")", "\n", "runs", "[", "-", "1", "]", "[", "'pe'", "]", "=", "pe", "\n", "\n", "", "stats", "=", "{", "}", "\n", "for", "i", ",", "run", "in", "enumerate", "(", "runs", ")", ":", "\n", "        ", "print", "(", "'run {}/{}: {}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "runs", ")", ",", "run", ")", ")", "\n", "print", "(", "'________________________________________'", ")", "\n", "\n", "save_extra", "=", "'_pw{}_pe{}_{}'", ".", "format", "(", "run", "[", "'pw'", "]", ",", "run", "[", "'pe'", "]", ",", "run", "[", "'lm'", "]", ")", "\n", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "pose_estimation", ".", "main", "(", "data_set", ",", "root", ",", "p_viewpoints", "=", "run", "[", "'pw'", "]", ",", "p_extra_data", "=", "run", "[", "'pe'", "]", ",", "label_mode", "=", "run", "[", "'lm'", "]", ",", "\n", "show_sample", "=", "False", ",", "save_extra", "=", "save_extra", ",", "device_num", "=", "1", ")", "\n", "t_elapsed", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "stats", "[", "'run{}'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "{", "'run'", ":", "run", ",", "'t_elapsed'", ":", "t_elapsed", "}", "\n", "\n", "print", "(", "'elapsed time: {}, total elapsed time: {}'", ".", "format", "(", "t_elapsed", ",", "np", ".", "mean", "(", "[", "stats", "[", "key", "]", "[", "'t_elapsed'", "]", "for", "key", "in", "stats", "]", ")", ")", ")", "\n", "print", "(", "'________________________________________'", ")", "\n", "with", "open", "(", "stats_path", ",", "'w'", ")", "as", "jfile", ":", "\n", "            ", "json", ".", "dump", "(", "stats", ",", "jfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.main": [[11, 47], ["eval_exp.get_classes", "print", "os.path.join", "len", "os.path.join", "sorted", "print", "enumerate", "list", "eval_exp.get_models", "eval_exp.eval", "os.listdir", "len", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.get_classes", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.get_models", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["def", "main", "(", ")", ":", "\n", "    ", "pass", "\n", "data_set_name", "=", "'exp12'", "\n", "exp_name", "=", "'full_12_classes'", "\n", "classes", "=", "get_classes", "(", "data_set_name", ")", "\n", "print", "(", "classes", ")", "\n", "results_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'experiments'", ",", "'data'", ",", "'{}_exp_eval_results.json'", ".", "format", "(", "exp_name", ")", ")", "\n", "\n", "num_objects", "=", "len", "(", "classes", ")", "\n", "\n", "exp_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion'", ",", "'trained_models'", ",", "data_set_name", ",", "exp_name", ")", "\n", "exps", "=", "sorted", "(", "list", "(", "os", ".", "listdir", "(", "exp_path", ")", ")", ")", "\n", "\n", "exps", "=", "[", "'full_12_classes_pw1.0_pe1.0_new_pred'", "]", "\n", "print", "(", "exps", ")", "\n", "results", "=", "{", "}", "\n", "for", "i", ",", "exp", "in", "enumerate", "(", "exps", ")", ":", "\n", "        ", "run", "=", "'run: {}/{}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "exps", ")", ")", "\n", "\n", "estimator", ",", "refiner", "=", "get_models", "(", "data_set_name", ",", "exp_name", ",", "exp", ",", "num_objects", ")", "\n", "\n", "num_points", "=", "1000", "\n", "refine_start", "=", "True", "\n", "show_sample", "=", "False", "\n", "label_mode", "=", "'new_pred'", "\n", "p_extra_data", "=", "'0.0'", "\n", "p_viewpoints", "=", "'1.0'", "\n", "workers", "=", "8", "\n", "iteration", "=", "2", "\n", "w", "=", "0.015", "\n", "\n", "results", "[", "exp", "]", "=", "eval", "(", "num_points", ",", "refine_start", ",", "data_set_name", ",", "show_sample", ",", "label_mode", ",", "p_extra_data", ",", "\n", "p_viewpoints", ",", "estimator", ",", "w", ",", "refiner", ",", "iteration", ",", "workers", ",", "classes", ",", "run", ")", "\n", "\n", "with", "open", "(", "results_path", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval": [[49, 126], ["DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset", "DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset.get_sym_list", "DenseFusion.datasets.myDatasetAugmented.dataset.PoseDataset.get_num_points_mesh", "torch.utils.data.DataLoader", "DenseFusion.lib.loss.Loss", "DenseFusion.lib.loss_refiner.Loss_refine", "enumerate", "results.items", "float", "float", "print", "estimator", "DenseFusion.lib.loss.Loss.", "dists.append", "[].append", "results.items", "np.round", "print", "float", "float", "np.round", "Variable().cuda", "Variable().cuda", "Variable().cuda", "Variable().cuda", "Variable().cuda", "Variable().cuda", "range", "dis.item", "dis.item", "np.round", "np.round", "np.mean", "refiner", "DenseFusion.lib.loss_refiner.Loss_refine.", "len", "np.round", "np.round", "np.mean", "Variable", "Variable", "Variable", "Variable", "Variable", "Variable", "np.mean"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.get_sym_list", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.linemod.dataset.PoseDataset.get_num_points_mesh"], ["", "", "", "def", "eval", "(", "num_points", ",", "refine_start", ",", "data_set_name", ",", "show_sample", ",", "label_mode", ",", "p_extra_data", ",", "p_viewpoints", ",", "\n", "estimator", ",", "w", ",", "refiner", ",", "iteration", ",", "workers", ",", "classes", ",", "run", ")", ":", "\n", "\n", "    ", "results", "=", "{", "cls", ":", "{", "'<2'", ":", "0", ",", "'>=2'", ":", "0", ",", "'dis'", ":", "[", "]", "}", "for", "cls", "in", "classes", "}", "\n", "dists", "=", "[", "]", "\n", "test_dataset", "=", "PoseDataset", "(", "'test'", ",", "\n", "num_points", ",", "\n", "False", ",", "\n", "0.0", ",", "\n", "refine_start", ",", "\n", "data_set_name", ",", "\n", "root", ",", "\n", "show_sample", "=", "show_sample", ",", "\n", "label_mode", "=", "label_mode", ",", "\n", "p_extra_data", "=", "p_extra_data", ",", "\n", "p_viewpoints", "=", "p_viewpoints", ")", "\n", "\n", "sym_list", "=", "test_dataset", ".", "get_sym_list", "(", ")", "\n", "num_points_mesh", "=", "test_dataset", ".", "get_num_points_mesh", "(", ")", "\n", "\n", "testdataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "workers", ")", "\n", "\n", "criterion", "=", "Loss", "(", "num_points_mesh", ",", "sym_list", ")", "\n", "criterion_refine", "=", "Loss_refine", "(", "num_points_mesh", ",", "sym_list", ")", "\n", "\n", "\n", "total_less", "=", "0", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "testdataloader", ",", "0", ")", ":", "\n", "        ", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "idx", ",", "intr", ",", "np_img", "=", "data", "\n", "cls_key", "=", "classes", "[", "idx", "]", "\n", "#print(cls_key)", "\n", "points", ",", "choose", ",", "img", ",", "target", ",", "model_points", ",", "idx", "=", "Variable", "(", "points", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "choose", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "img", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "target", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "model_points", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "idx", ")", ".", "cuda", "(", ")", "\n", "pred_r", ",", "pred_t", ",", "pred_c", ",", "emb", "=", "estimator", "(", "img", ",", "points", ",", "choose", ",", "idx", ")", "\n", "\n", "\n", "\n", "_", ",", "dis", ",", "new_points", ",", "new_target", ",", "pred", "=", "criterion", "(", "pred_r", ",", "pred_t", ",", "pred_c", ",", "target", ",", "model_points", ",", "idx", ",", "points", ",", "\n", "w", ",", "refine_start", ")", "\n", "if", "refine_start", ":", "\n", "            ", "for", "ite", "in", "range", "(", "0", ",", "iteration", ")", ":", "\n", "                ", "pred_r", ",", "pred_t", "=", "refiner", "(", "new_points", ",", "emb", ",", "idx", ")", "\n", "dis", ",", "new_points", ",", "new_target", ",", "pred", "=", "criterion_refine", "(", "pred_r", ",", "pred_t", ",", "new_target", ",", "model_points", ",", "idx", ",", "\n", "new_points", ")", "\n", "\n", "", "", "dists", ".", "append", "(", "dis", ".", "item", "(", ")", ")", "\n", "if", "dists", "[", "-", "1", "]", "<", "0.02", ":", "\n", "            ", "results", "[", "cls_key", "]", "[", "'<2'", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "results", "[", "cls_key", "]", "[", "'>=2'", "]", "+=", "1", "\n", "", "results", "[", "cls_key", "]", "[", "'dis'", "]", ".", "append", "(", "dis", ".", "item", "(", ")", ")", "\n", "\n", "total_less", "=", "0", "\n", "total_more", "=", "0", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "total_less", "+=", "v", "[", "'<2'", "]", "\n", "total_more", "+=", "v", "[", "'>=2'", "]", "\n", "", "total_less", "=", "np", ".", "round", "(", "total_less", "/", "(", "total_more", "+", "total_less", ")", "*", "100", ",", "2", ")", "\n", "\n", "print", "(", "'{} | sample {}/{} | dis: {}, average ADD-s: {}, total <2: {}'", ".", "format", "(", "run", ",", "\n", "j", "+", "1", ",", "\n", "len", "(", "testdataloader", ")", ",", "\n", "np", ".", "round", "(", "dists", "[", "-", "1", "]", ",", "5", ")", ",", "\n", "np", ".", "round", "(", "np", ".", "mean", "(", "dists", ")", ",", "5", ")", ",", "\n", "total_less", ")", ")", "\n", "\n", "", "for", "key", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "results", "[", "key", "]", "[", "'p'", "]", "=", "float", "(", "np", ".", "round", "(", "v", "[", "'<2'", "]", "/", "(", "v", "[", "'>=2'", "]", "+", "v", "[", "'<2'", "]", ")", "*", "100", ",", "2", ")", ")", "\n", "results", "[", "key", "]", "[", "'dis'", "]", "=", "float", "(", "np", ".", "round", "(", "np", ".", "mean", "(", "v", "[", "'dis'", "]", ")", ",", "5", ")", ")", "\n", "", "results", "[", "'average_add'", "]", "=", "float", "(", "np", ".", "round", "(", "np", ".", "mean", "(", "dists", ")", ",", "5", ")", ")", "\n", "results", "[", "'total_less_then_two'", "]", "=", "float", "(", "total_less", ")", "\n", "print", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.get_classes": [[128, 137], ["open", "os.path.join", "classes.append", "open.readline"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "get_classes", "(", "data_set_name", ")", ":", "\n", "    ", "class_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator'", ",", "'data_sets'", ",", "'segmentation'", ",", "data_set_name", ",", "'classes.txt'", ")", ")", "\n", "classes", "=", "[", "]", "\n", "while", "1", ":", "\n", "        ", "class_input", "=", "class_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "class_input", ":", "\n", "            ", "break", "\n", "", "classes", ".", "append", "(", "class_input", ")", "\n", "", "return", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.get_models": [[138, 165], ["torch.cuda.is_available", "print", "print", "os.path.join", "PoseNet", "PoseRefineNet", "os.path.join", "torch.load", "PoseNet.load_state_dict", "os.path.join", "torch.load", "PoseRefineNet.load_state_dict", "PoseNet.to", "PoseRefineNet.to", "PoseNet.eval", "PoseRefineNet.eval", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval"], ["", "def", "get_models", "(", "data_set_name", ",", "exp_name", ",", "exp", ",", "num_objects", ")", ":", "\n", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "cuda", "=", "True", "\n", "", "else", ":", "\n", "        ", "cuda", "=", "False", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "print", "(", "cuda", ",", "device", ")", "\n", "\n", "print", "(", "'create estimator and refiner models'", ")", "\n", "pose_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'DenseFusion'", ",", "'trained_models'", ",", "data_set_name", ",", "exp_name", ",", "exp", ")", "\n", "num_points", "=", "1000", "\n", "estimator", "=", "PoseNet", "(", "num_points", "=", "num_points", ",", "num_obj", "=", "num_objects", ")", "\n", "refiner", "=", "PoseRefineNet", "(", "num_points", "=", "num_points", ",", "num_obj", "=", "num_objects", ")", "\n", "loading_path", "=", "os", ".", "path", ".", "join", "(", "pose_path", ",", "'pose_model.pth'", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "loading_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "estimator", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "loading_path", "=", "os", ".", "path", ".", "join", "(", "pose_path", ",", "'pose_refine_model.pth'", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "loading_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "refiner", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "\n", "estimator", ".", "to", "(", "device", ")", "\n", "refiner", ".", "to", "(", "device", ")", "\n", "estimator", ".", "eval", "(", ")", "\n", "refiner", ".", "eval", "(", ")", "\n", "return", "estimator", ",", "refiner", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.__init__": [[7, 21], ["DepthCam.DepthCam.init_pipeline"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.init_pipeline"], ["    ", "def", "__init__", "(", "self", ",", "fps", "=", "6", ",", "height", "=", "480", ",", "width", "=", "640", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "fps", "=", "fps", "\n", "\n", "\n", "self", ".", "pipe", "=", "None", "\n", "self", ".", "config", "=", "None", "\n", "self", ".", "profile", "=", "None", "\n", "self", ".", "align", "=", "None", "\n", "self", ".", "colorizer", "=", "None", "\n", "self", ".", "depth_sensor", "=", "None", "\n", "self", ".", "init_pipeline", "(", ")", "\n", "self", ".", "repairing", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.init_pipeline": [[22, 37], ["pyrealsense2.pipeline", "pyrealsense2.config", "DepthCam.DepthCam.config.enable_stream", "DepthCam.DepthCam.config.enable_stream", "DepthCam.DepthCam.pipe.start", "pyrealsense2.align", "pyrealsense2.colorizer", "DepthCam.DepthCam.profile.get_device().first_depth_sensor", "DepthCam.DepthCam.color_sensor.set_option", "DepthCam.DepthCam.color_sensor.set_option", "DepthCam.DepthCam.color_sensor.set_option", "DepthCam.DepthCam.color_sensor.set_option", "DepthCam.DepthCam.profile.get_device().query_sensors", "DepthCam.DepthCam.profile.get_device", "DepthCam.DepthCam.profile.get_device"], "methods", ["None"], ["", "def", "init_pipeline", "(", "self", ")", ":", "\n", "        ", "self", ".", "pipe", "=", "rs", ".", "pipeline", "(", ")", "\n", "self", ".", "config", "=", "rs", ".", "config", "(", ")", "\n", "self", ".", "config", ".", "enable_stream", "(", "rs", ".", "stream", ".", "depth", ",", "640", ",", "480", ",", "rs", ".", "format", ".", "z16", ",", "self", ".", "fps", ")", "\n", "self", ".", "config", ".", "enable_stream", "(", "rs", ".", "stream", ".", "color", ",", "self", ".", "width", ",", "self", ".", "height", ",", "rs", ".", "format", ".", "rgb8", ",", "self", ".", "fps", ")", "\n", "self", ".", "profile", "=", "self", ".", "pipe", ".", "start", "(", "self", ".", "config", ")", "\n", "self", ".", "align", "=", "rs", ".", "align", "(", "rs", ".", "stream", ".", "color", ")", "\n", "self", ".", "colorizer", "=", "rs", ".", "colorizer", "(", ")", "\n", "self", ".", "depth_sensor", "=", "self", ".", "profile", ".", "get_device", "(", ")", ".", "first_depth_sensor", "(", ")", "\n", "\n", "self", ".", "color_sensor", "=", "self", ".", "profile", ".", "get_device", "(", ")", ".", "query_sensors", "(", ")", "[", "1", "]", "\n", "self", ".", "color_sensor", ".", "set_option", "(", "rs", ".", "option", ".", "enable_auto_white_balance", ",", "False", ")", "\n", "self", ".", "color_sensor", ".", "set_option", "(", "rs", ".", "option", ".", "enable_auto_exposure", ",", "False", ")", "\n", "self", ".", "color_sensor", ".", "set_option", "(", "rs", ".", "option", ".", "exposure", ",", "200.0", ")", "\n", "self", ".", "color_sensor", ".", "set_option", "(", "rs", ".", "option", ".", "white_balance", ",", "3200.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.stream": [[38, 66], ["DepthCam.DepthCam.pipe.stop", "DepthCam.DepthCam.get_frames", "time.sleep", "numpy.array", "cv2.addWeighted", "cv2.imshow", "cv2.waitKey", "cv2.cvtColor"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_frames"], ["", "def", "stream", "(", "self", ",", "fps", "=", "30", ",", "show_color", "=", "True", ",", "show_depth", "=", "False", ",", "show_depth_color", "=", "False", ",", "show_added", "=", "False", ")", ":", "\n", "        ", "while", "True", ":", "\n", "\n", "            ", "return_depth_colorized", "=", "False", "\n", "if", "show_depth_color", "or", "show_added", ":", "\n", "                ", "return_depth_colorized", "=", "True", "\n", "", "out", "=", "self", ".", "get_frames", "(", "return_depth_colorized", "=", "return_depth_colorized", ")", "\n", "image", "=", "out", "[", "'image'", "]", "\n", "depth", "=", "out", "[", "'depth'", "]", "\n", "\n", "if", "show_color", ":", "\n", "                ", "show", "=", "image", "\n", "", "if", "show_depth", ":", "\n", "\n", "                ", "show", "=", "np", ".", "array", "(", "depth", "/", "2000", "*", "255", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "show_depth_color", ":", "\n", "                ", "show", "=", "out", "[", "'depth_colorized'", "]", "\n", "", "if", "show_added", ":", "\n", "                ", "depth_colorized", "=", "out", "[", "'depth_colorized'", "]", "\n", "show", "=", "cv2", ".", "addWeighted", "(", "image", ",", "0.7", ",", "depth_colorized", ",", "0.3", ",", "0", ")", "\n", "\n", "cv2", ".", "imshow", "(", "'stream'", ",", "cv2", ".", "cvtColor", "(", "show", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "", "if", "cv2", ".", "waitKey", "(", "1", ")", "==", "27", ":", "\n", "                ", "break", "\n", "\n", "", "time", ".", "sleep", "(", "1", "/", "fps", ")", "\n", "\n", "", "self", ".", "pipe", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_frames": [[67, 153], ["DepthCam.DepthCam.pipe.try_wait_for_frames", "print", "time.sleep", "time.time", "time.time", "DepthCam.DepthCam.pipe.try_wait_for_frames", "DepthCam.DepthCam.align.process", "numpy.array", "numpy.array", "range", "DepthCam.DepthCam.profile.get_stream().as_video_stream_profile().get_intrinsics", "DepthCam.DepthCam.profile.get_device().first_depth_sensor().get_depth_scale", "DepthCam.DepthCam.get_color_frame().get_data", "DepthCam.DepthCam.get_depth_frame().get_data", "numpy.array", "time.sleep", "DepthCam.DepthCam.pipe.try_wait_for_frames", "DepthCam.DepthCam.colorizer.colorize().get_data", "DepthCam.DepthCam.init_pipeline", "DepthCam.DepthCam.profile.get_stream().as_video_stream_profile", "DepthCam.DepthCam.profile.get_device().first_depth_sensor", "DepthCam.DepthCam.get_color_frame", "DepthCam.DepthCam.get_depth_frame", "print", "DepthCam.DepthCam.colorizer.colorize", "DepthCam.DepthCam.profile.get_stream", "DepthCam.DepthCam.profile.get_device", "DepthCam.DepthCam.get_depth_frame"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_depth_scale", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.data_generation.getData.get_data", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.data_generation.getData.get_data", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.data_generation.getData.get_data", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.init_pipeline"], ["", "def", "get_frames", "(", "self", ",", "return_intrinsics", "=", "False", ",", "\n", "return_depth_colorized", "=", "False", ",", "\n", "with_repair", "=", "True", ",", "\n", "return_first_try", "=", "False", ",", "\n", "return_first", "=", "False", ",", "\n", "secure_image", "=", "False", ",", "\n", "check_state", "=", "False", ")", ":", "\n", "\n", "        ", "first_try", "=", "True", "\n", "while", "True", ":", "\n", "\n", "            ", "if", "secure_image", ":", "\n", "# check if the current state is not broken and only a old image is in the stack", "\n", "                ", "t", "=", "time", ".", "time", "(", ")", "+", "1", "\n", "while", "time", ".", "time", "(", ")", "<", "t", ":", "\n", "                    ", "success", ",", "frames", "=", "self", ".", "pipe", ".", "try_wait_for_frames", "(", ")", "\n", "if", "not", "success", ":", "\n", "                        ", "break", "\n", "", "", "", "else", ":", "\n", "                ", "success", ",", "frames", "=", "self", ".", "pipe", ".", "try_wait_for_frames", "(", ")", "\n", "\n", "", "if", "success", ":", "\n", "                ", "try", ":", "\n", "\n", "# checks if the next images are ready", "\n", "                    ", "if", "check_state", ":", "\n", "                        ", "check", "=", "True", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                            ", "check", ",", "f", "=", "self", ".", "pipe", ".", "try_wait_for_frames", "(", ")", "\n", "if", "not", "check", ":", "\n", "                                ", "return", "None", ",", "False", "\n", "\n", "\n", "", "", "", "frames", "=", "self", ".", "align", ".", "process", "(", "frames", ")", "\n", "out", "=", "{", "'frames'", ":", "frames", "}", "\n", "\n", "\n", "if", "return_intrinsics", ":", "\n", "                        ", "intr", "=", "self", ".", "profile", ".", "get_stream", "(", "rs", ".", "stream", ".", "depth", ")", ".", "as_video_stream_profile", "(", ")", ".", "get_intrinsics", "(", ")", "\n", "out", "[", "'intr'", "]", "=", "intr", "\n", "depth_scale", "=", "self", ".", "profile", ".", "get_device", "(", ")", ".", "first_depth_sensor", "(", ")", ".", "get_depth_scale", "(", ")", "\n", "out", "[", "'depth_scale'", "]", "=", "depth_scale", "\n", "\n", "\n", "", "image", "=", "np", ".", "array", "(", "frames", ".", "get_color_frame", "(", ")", ".", "get_data", "(", ")", ")", "\n", "depth", "=", "np", ".", "array", "(", "frames", ".", "get_depth_frame", "(", ")", ".", "get_data", "(", ")", ")", "\n", "out", "[", "'image'", "]", "=", "image", "\n", "out", "[", "'depth'", "]", "=", "depth", "\n", "\n", "if", "return_depth_colorized", ":", "\n", "                        ", "depth_colorized", "=", "np", ".", "array", "(", "self", ".", "colorizer", ".", "colorize", "(", "frames", ".", "get_depth_frame", "(", ")", ")", ".", "get_data", "(", ")", ")", "\n", "out", "[", "'depth_colorized'", "]", "=", "depth_colorized", "\n", "\n", "", "if", "with_repair", ":", "\n", "                        ", "self", ".", "repairing", "=", "False", "\n", "\n", "", "if", "return_first_try", ":", "\n", "                        ", "return", "out", ",", "first_try", "\n", "", "else", ":", "\n", "                        ", "return", "out", "\n", "\n", "", "", "except", ":", "\n", "                    ", "success", "=", "False", "\n", "\n", "", "", "if", "not", "success", ":", "\n", "                ", "print", "(", "'failed to get images'", ")", "\n", "first_try", "=", "False", "\n", "\n", "if", "return_first", ":", "\n", "                    ", "return", "None", ",", "first_try", "\n", "\n", "", "if", "with_repair", ":", "\n", "                    ", "self", ".", "repairing", "=", "True", "\n", "while", "True", ":", "\n", "                        ", "try", ":", "\n", "                            ", "self", ".", "init_pipeline", "(", ")", "\n", "break", "\n", "", "except", ":", "\n", "                            ", "print", "(", "'init pipelie failed, trying again'", ")", "\n", "continue", "\n", "\n", "", "", "", "else", ":", "\n", "                    ", "while", "self", ".", "repairing", ":", "\n", "                        ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "", "", "time", ".", "sleep", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics": [[154, 158], ["DepthCam.DepthCam.profile.get_stream().as_video_stream_profile().get_intrinsics", "DepthCam.DepthCam.profile.get_stream().as_video_stream_profile", "DepthCam.DepthCam.profile.get_stream"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics"], ["", "", "", "def", "get_intrinsics", "(", "self", ")", ":", "\n", "        ", "intr", "=", "self", ".", "profile", ".", "get_stream", "(", "rs", ".", "stream", ".", "color", ")", ".", "as_video_stream_profile", "(", ")", ".", "get_intrinsics", "(", ")", "\n", "\n", "return", "intr", "\n", "", "def", "get_depth_scale", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_depth_scale": [[158, 161], ["DepthCam.DepthCam.depth_sensor.get_depth_scale"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_depth_scale"], ["", "def", "get_depth_scale", "(", "self", ")", ":", "\n", "        ", "depth_scale", "=", "self", ".", "depth_sensor", ".", "get_depth_scale", "(", ")", "\n", "return", "depth_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.Arrow3D.__init__": [[381, 384], ["matplotlib.patches.FancyArrowPatch.__init__"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "xs", ",", "ys", ",", "zs", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "FancyArrowPatch", ".", "__init__", "(", "self", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_verts3d", "=", "xs", ",", "ys", ",", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.Arrow3D.draw": [[385, 390], ["mpl_toolkits.mplot3d.proj3d.proj_transform", "create_pointcloud.Arrow3D.set_positions", "matplotlib.patches.FancyArrowPatch.draw"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.Arrow3D.draw"], ["", "def", "draw", "(", "self", ",", "renderer", ")", ":", "\n", "        ", "xs3d", ",", "ys3d", ",", "zs3d", "=", "self", ".", "_verts3d", "\n", "xs", ",", "ys", ",", "zs", "=", "proj3d", ".", "proj_transform", "(", "xs3d", ",", "ys3d", ",", "zs3d", ",", "renderer", ".", "M", ")", "\n", "self", ".", "set_positions", "(", "(", "xs", "[", "0", "]", ",", "ys", "[", "0", "]", ")", ",", "(", "xs", "[", "1", "]", ",", "ys", "[", "1", "]", ")", ")", "\n", "FancyArrowPatch", ".", "draw", "(", "self", ",", "renderer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.load_robot_path_pos": [[15, 31], ["os.path.join", "enumerate", "open", "json.load", "x.append", "y.append", "z.append"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["def", "load_robot_path_pos", "(", "robot_path", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "'./../robot_controller/robot_path'", ",", "robot_path", ")", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "z", "=", "[", "]", "\n", "robot_home", "=", "[", "data", "[", "'cart_pose'", "]", "[", "0", "]", "[", "'x'", "]", "*", "1000", ",", "data", "[", "'cart_pose'", "]", "[", "0", "]", "[", "'y'", "]", "*", "1000", ",", "data", "[", "'cart_pose'", "]", "[", "0", "]", "[", "'z'", "]", "*", "1000", "]", "\n", "for", "i", ",", "pose", "in", "enumerate", "(", "data", "[", "'cart_pose'", "]", ")", ":", "\n", "        ", "if", "data", "[", "'via_points'", "]", "[", "i", "]", "==", "'0'", ":", "\n", "            ", "x", ".", "append", "(", "pose", "[", "'x'", "]", "*", "1000", ")", "\n", "y", ".", "append", "(", "pose", "[", "'y'", "]", "*", "1000", ")", "\n", "z", ".", "append", "(", "pose", "[", "'z'", "]", "*", "1000", ")", "\n", "\n", "", "", "return", "[", "x", ",", "y", ",", "z", "]", ",", "robot_home", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.plot_robot_viewpoints": [[33, 44], ["create_pointcloud.load_robot_path_pos", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.load_robot_path_pos"], ["", "def", "plot_robot_viewpoints", "(", ")", ":", "\n", "    ", "robot_path", "=", "'viewpointsPath.json'", "\n", "[", "x", ",", "y", ",", "z", "]", ",", "robot_home", "=", "load_robot_path_pos", "(", "robot_path", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "scatter", "(", "x", ",", "y", ",", "z", ",", "c", "=", "'r'", ",", "marker", "=", "'o'", ")", "\n", "ax", ".", "scatter", "(", "robot_home", "[", "0", "]", ",", "robot_home", "[", "1", "]", ",", "robot_home", "[", "2", "]", ",", "c", "=", "'g'", ",", "marker", "=", "'^'", ")", "\n", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z Label'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.get_view_distribution": [[46, 175], ["numpy.array", "range", "numpy.array", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "enumerate", "enumerate", "new_selection.append", "numpy.array", "numpy.array().reshape", "json.load.get", "json.load.get", "numpy.array().reshape", "pyrealsense2.intrinsics", "meta.get.get", "meta.get.get", "meta.get.get", "meta.get.get", "meta.get.get", "meta.get.get", "meta.get.get", "numpy.dot", "np.array.append", "range", "np.array.append", "enumerate", "copy.deepcopy", "c_point_cloud.voxel_down_sample.voxel_down_sample", "len", "enumerate", "np.array.append", "numpy.argmin", "len", "enumerate", "new_selection.append", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "numpy.array", "range", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.show", "open", "json.load", "list", "numpy.identity", "numpy.dot", "next_arrow.append", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "len", "create_pointcloud.Arrow3D", "fig.add_subplot.add_artist", "os.path.join", "numpy.array", "numpy.array", "int", "copy.deepcopy", "c_point_cloud.voxel_down_sample.voxel_down_sample", "numpy.random.choice", "numpy.linalg.norm", "json.load.get", "numpy.linalg.norm", "numpy.arange", "numpy.array", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "get_view_distribution", "(", "data_path", ",", "d", ",", "n", ",", "n_viewpoints", ",", "plot", "=", "False", ",", "l_arrow", "=", "30", ",", "\n", "reference_point", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ")", ":", "\n", "    ", "points", "=", "[", "]", "\n", "arrows", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "n", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "d", ",", "'{:06d}.meta.json'", ".", "format", "(", "idx", ")", ")", ")", "as", "f", ":", "\n", "            ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "robotEndEff2Cam", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'hand_eye_calibration'", ")", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "intr", "=", "meta", ".", "get", "(", "'intr'", ")", "\n", "robot2endEff_tf", "=", "meta", ".", "get", "(", "'robot2endEff_tf'", ")", "\n", "robot2endEff_tf", "=", "np", ".", "array", "(", "robot2endEff_tf", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "depth_intrinsic", "=", "rs", ".", "intrinsics", "(", ")", "\n", "depth_intrinsic", ".", "width", "=", "intr", ".", "get", "(", "'width'", ")", "\n", "depth_intrinsic", ".", "height", "=", "intr", ".", "get", "(", "'height'", ")", "\n", "depth_intrinsic", ".", "ppx", "=", "intr", ".", "get", "(", "'ppx'", ")", "\n", "depth_intrinsic", ".", "ppy", "=", "intr", ".", "get", "(", "'ppy'", ")", "\n", "depth_intrinsic", ".", "fx", "=", "intr", ".", "get", "(", "'fx'", ")", "\n", "depth_intrinsic", ".", "fy", "=", "intr", ".", "get", "(", "'fy'", ")", "\n", "depth_intrinsic", ".", "model", "=", "rs", ".", "distortion", ".", "inverse_brown_conrady", "\n", "depth_intrinsic", ".", "coeffs", "=", "intr", ".", "get", "(", "'coeffs'", ")", "\n", "robot2Cam_ft", "=", "np", ".", "dot", "(", "robot2endEff_tf", ",", "robotEndEff2Cam", ")", "\n", "points", ".", "append", "(", "list", "(", "robot2Cam_ft", "[", ":", "3", ",", "3", "]", ")", ")", "\n", "\n", "next_arrow", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "new_arrow", "=", "np", ".", "identity", "(", "4", ")", "\n", "new_arrow", "[", "i", ",", "3", "]", "=", "l_arrow", "\n", "new_arrow", "=", "np", ".", "dot", "(", "robot2Cam_ft", ",", "new_arrow", ")", "\n", "next_arrow", ".", "append", "(", "new_arrow", "[", ":", "3", ",", "3", "]", ")", "\n", "", "arrows", ".", "append", "(", "next_arrow", ")", "\n", "\n", "", "points", "=", "np", ".", "array", "(", "points", ")", "\n", "point_cloud", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "point_cloud", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "points", ")", "\n", "\n", "voxel_size", "=", "np", ".", "inf", "\n", "for", "i", ",", "p1", "in", "enumerate", "(", "points", ")", ":", "\n", "        ", "for", "j", ",", "p2", "in", "enumerate", "(", "points", ")", ":", "\n", "            ", "if", "i", "!=", "j", ":", "\n", "                ", "dist", "=", "int", "(", "np", ".", "linalg", ".", "norm", "(", "p2", "-", "p1", ")", ")", "\n", "if", "dist", "<", "voxel_size", ":", "\n", "                    ", "voxel_size", "=", "dist", "\n", "\n", "", "", "if", "voxel_size", "==", "0", ":", "\n", "                ", "break", "\n", "", "", "if", "voxel_size", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "c_point_cloud", "=", "copy", ".", "deepcopy", "(", "point_cloud", ")", "\n", "c_point_cloud", "=", "c_point_cloud", ".", "voxel_down_sample", "(", "voxel_size", "=", "voxel_size", ")", "\n", "l", "=", "len", "(", "np", ".", "array", "(", "c_point_cloud", ".", "points", ")", ")", "\n", "if", "l", "==", "n_viewpoints", ":", "\n", "            ", "selected_points", "=", "np", ".", "array", "(", "c_point_cloud", ".", "points", ")", "\n", "break", "\n", "", "elif", "l", "<", "n_viewpoints", ":", "\n", "            ", "voxel_size", "-=", "1", "\n", "c_point_cloud", "=", "copy", ".", "deepcopy", "(", "point_cloud", ")", "\n", "c_point_cloud", "=", "c_point_cloud", ".", "voxel_down_sample", "(", "voxel_size", "=", "voxel_size", ")", "\n", "selected_points", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "np", ".", "array", "(", "c_point_cloud", ".", "points", ")", ")", ")", ",", "replace", "=", "False", ",", "size", "=", "n_viewpoints", ")", "\n", "selected_points", "=", "np", ".", "array", "(", "c_point_cloud", ".", "points", ")", "[", "selected_points", "]", "\n", "break", "\n", "", "else", ":", "\n", "            ", "voxel_size", "+=", "1", "\n", "\n", "", "", "selection", "=", "[", "]", "\n", "for", "i", ",", "p1", "in", "enumerate", "(", "selected_points", ")", ":", "\n", "        ", "min_dist", "=", "np", ".", "inf", "\n", "min_dist_index", "=", "0", "\n", "for", "j", ",", "p2", "in", "enumerate", "(", "points", ")", ":", "\n", "            ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "p2", "-", "p1", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                ", "min_dist", "=", "dist", "\n", "min_dist_index", "=", "j", "\n", "", "", "selection", ".", "append", "(", "min_dist_index", ")", "\n", "\n", "", "points", "=", "points", "[", "selection", "]", "\n", "\n", "new_selection", "=", "[", "]", "\n", "new_selection", ".", "append", "(", "np", ".", "argmin", "(", "np", ".", "linalg", ".", "norm", "(", "points", ",", "axis", "=", "1", ")", ")", ")", "\n", "while", "len", "(", "new_selection", ")", "!=", "n_viewpoints", ":", "\n", "            ", "min_dist", "=", "np", ".", "inf", "\n", "min_dist_index", "=", "0", "\n", "for", "j", ",", "p", "in", "enumerate", "(", "points", ")", ":", "\n", "                ", "if", "j", "not", "in", "new_selection", ":", "\n", "                    ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "p", "-", "points", "[", "new_selection", "[", "-", "1", "]", "]", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                        ", "min_dist", "=", "dist", "\n", "min_dist_index", "=", "j", "\n", "", "", "", "new_selection", ".", "append", "(", "min_dist_index", ")", "\n", "\n", "", "selection", "=", "np", ".", "array", "(", "selection", ")", "\n", "new_selection", "=", "selection", "[", "new_selection", "]", "\n", "\n", "\n", "if", "plot", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "robot_home", "=", "[", "0.46051215031184256", ",", "-", "193.22331249713898", ",", "1000.9851455688477", "]", "\n", "ax", ".", "scatter", "(", "robot_home", "[", "0", "]", ",", "robot_home", "[", "1", "]", ",", "robot_home", "[", "2", "]", ",", "c", "=", "'g'", ",", "marker", "=", "'^'", ")", "\n", "ax", ".", "scatter", "(", "reference_point", "[", "0", "]", ",", "reference_point", "[", "1", "]", ",", "reference_point", "[", "2", "]", ",", "c", "=", "'b'", ",", "marker", "=", "'o'", ")", "\n", "vXs", "=", "points", "[", ":", ",", "0", "]", "\n", "vYs", "=", "points", "[", ":", ",", "1", "]", "\n", "vZs", "=", "points", "[", ":", ",", "2", "]", "\n", "ax", ".", "scatter", "(", "vXs", ",", "vYs", ",", "vZs", ",", "c", "=", "'r'", ",", "marker", "=", "'x'", ")", "\n", "arrows", "=", "np", ".", "array", "(", "arrows", ")", "\n", "arrows", "=", "arrows", "[", "selection", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "arrows", ")", ")", ":", "\n", "            ", "cax", ",", "cay", ",", "caz", "=", "arrows", "[", "i", "]", "\n", "cx", "=", "vXs", "[", "i", "]", "\n", "cy", "=", "vYs", "[", "i", "]", "\n", "cz", "=", "vZs", "[", "i", "]", "\n", "#a = Arrow3D([cx, cax[0]], [cy, cax[1]], [cz, cax[2]], color='r')", "\n", "#ax.add_artist(a)", "\n", "#a = Arrow3D([cx, cay[0]], [cy, cay[1]], [cz, cay[2]], color='b')", "\n", "#ax.add_artist(a)", "\n", "a", "=", "Arrow3D", "(", "[", "cx", ",", "caz", "[", "0", "]", "]", ",", "[", "cy", ",", "caz", "[", "1", "]", "]", ",", "[", "cz", ",", "caz", "[", "2", "]", "]", ",", "color", "=", "'g'", ")", "\n", "ax", ".", "add_artist", "(", "a", ")", "\n", "\n", "", "ax", ".", "set_xlim", "(", "[", "-", "700", ",", "500", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "1200", ",", "0", "]", ")", "\n", "ax", ".", "set_zlim", "(", "[", "-", "200", ",", "1000", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'X [mm]'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y [mm]'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z [mm]'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "new_selection", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.load_point_cloud": [[181, 379], ["numpy.array", "os.path.join", "os.listdir", "os.path.join", "os.path.join", "numpy.array", "len", "open3d.geometry.PointCloud", "pc_reconstruction.align_point_clouds", "open3d.io.write_point_cloud", "open3d.io.write_point_cloud", "point_cloud.voxel_down_sample.voxel_down_sample", "point_cloud.voxel_down_sample.translate", "open3d.io.write_point_cloud", "open3d.io.write_point_cloud", "copy.deepcopy", "point_cloud_big_out.voxel_down_sample.translate", "numpy.array", "os.listdir.index", "ValueError", "os.path.exists", "os.makedirs", "os.listdir", "len", "create_pointcloud.get_view_distribution", "os.path.join", "point_cloud.voxel_down_sample.rotate", "print", "open3d.io.write_point_cloud", "open3d.io.write_point_cloud", "point_clouds.append", "open3d.geometry.PointCloud", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open3d.visualization.draw_geometries", "point_cloud_big_out.voxel_down_sample.voxel_down_sample", "len", "open", "os.path.join", "print", "json.load.get", "numpy.array().reshape", "json.load.get", "numpy.array().reshape", "numpy.dot", "json.load.get", "pc_reconstruction.get_surface", "print", "os.path.join", "os.path.join", "copy.deepcopy", "numpy.array", "point_cloud_big_out.voxel_down_sample.voxel_down_sample", "os.path.join", "f.write", "open", "json.load", "numpy.array().reshape", "open", "numpy.array", "open", "numpy.array", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.imshow", "copy.deepcopy", "numpy.zeros", "numpy.array", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.show", "len", "copy.deepcopy", "pc_reconstruction.icp_regression", "source.transform.transform", "open3d.utility.Vector3dVector", "point_cloud.voxel_down_sample.voxel_down_sample", "len", "pc_reconstruction.get_my_source_center", "pc_reconstruction.get_my_source_center", "os.path.join", "numpy.array", "numpy.array", "os.path.join", "PIL.Image.open", "os.path.join", "PIL.Image.open", "open", "numpy.array", "numpy.array", "numpy.array", "open3d.visualization.draw_geometries", "numpy.concatenate", "print", "open3d.visualization.draw_geometries", "numpy.array", "json.load.get", "numpy.array", "os.path.join", "PIL.Image.open().convert", "numpy.array", "numpy.array", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.align_point_clouds", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.get_view_distribution", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_surface", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.icp_regression", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_my_source_center", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_my_source_center", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "load_point_cloud", "(", "object_name", ",", "\n", "save_dir", ",", "\n", "root", ",", "\n", "reference_point", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "mode", "=", "'gen'", ",", "\n", "n_viewpoints", "=", "10", ",", "\n", "min_friends", "=", "10", ",", "\n", "voxel_size", "=", "5", ",", "\n", "voxel_size_out", "=", "10", ",", "\n", "threshold", "=", "50", ",", "\n", "min_dist", "=", "10", ",", "\n", "nb_neighbors", "=", "5", ",", "\n", "l_arrow", "=", "30", ",", "\n", "global_regression", "=", "False", ",", "\n", "icp_point2point", "=", "True", ",", "\n", "icp_point2plane", "=", "True", ",", "\n", "plot", "=", "False", ")", ":", "\n", "\n", "    ", "object_label_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data'", ",", "object_name", ")", "\n", "\n", "dirs", "=", "os", ".", "listdir", "(", "object_label_path", ")", "\n", "# remove extra labels if they exist", "\n", "try", ":", "\n", "        ", "i", "=", "dirs", ".", "index", "(", "'extra'", ")", "\n", "del", "dirs", "[", "i", "]", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "not", "dirs", ":", "\n", "        ", "raise", "ValueError", "(", "'no labels obtained yet'", ")", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation/data'", ",", "object_name", ")", "\n", "\n", "pcd_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "object_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pcd_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "pcd_path", ")", "\n", "\n", "", "counter", "=", "0", "\n", "n_dirs", "=", "np", ".", "array", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "object_label_path", ",", "dirs", "[", "0", "]", ")", ")", ")", "\n", "n_dirs", "=", "[", "d", "for", "d", "in", "n_dirs", "if", "'.{}.label.png'", ".", "format", "(", "mode", ")", "in", "d", "]", "\n", "n", "=", "len", "(", "n_dirs", ")", "\n", "ns", "=", "len", "(", "dirs", ")", "*", "n_viewpoints", "\n", "\n", "point_clouds", "=", "[", "]", "\n", "point_cloud", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "\n", "for", "d", "in", "dirs", ":", "\n", "        ", "idx_selection", "=", "get_view_distribution", "(", "data_path", ",", "d", ",", "n", ",", "n_viewpoints", ",", "plot", "=", "plot", ",", "l_arrow", "=", "l_arrow", ",", "reference_point", "=", "reference_point", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "object_label_path", ",", "d", ")", "\n", "first_surface", "=", "True", "\n", "\n", "for", "idx", "in", "idx_selection", ":", "\n", "            ", "counter", "+=", "1", "\n", "print", "(", "'number = {}/{}, idx = {}'", ".", "format", "(", "counter", ",", "ns", ",", "idx", ")", ")", "# prints the progress in the terminal", "\n", "# load for the given index the background, object frame and ground truth", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "d", ",", "'{:06d}.meta.json'", ".", "format", "(", "idx", ")", ")", ")", "as", "f", ":", "\n", "                ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "intr", "=", "meta", ".", "get", "(", "'intr'", ")", "\n", "\n", "robotEndEff2Cam", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'hand_eye_calibration'", ")", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "robot2endEff_tf", "=", "meta", ".", "get", "(", "'robot2endEff_tf'", ")", "\n", "robot2endEff_tf", "=", "np", ".", "array", "(", "robot2endEff_tf", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "robot2Cam_ft", "=", "np", ".", "dot", "(", "robot2endEff_tf", ",", "robotEndEff2Cam", ")", "\n", "point_cloud_tf", "=", "meta", ".", "get", "(", "'object_pose'", ")", "\n", "point_cloud_tf", "=", "np", ".", "array", "(", "point_cloud_tf", ",", "dtype", "=", "np", ".", "float64", ")", ".", "reshape", "(", "4", ",", "4", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "d", ",", "'{:06d}.depth.png'", ".", "format", "(", "idx", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "depth_frame", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "'{:06d}.{}.label.png'", ".", "format", "(", "idx", ",", "mode", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "if", "plot", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "d", ",", "'{:06d}.color.png'", ".", "format", "(", "idx", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "color_frame", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "color_frame", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "label", ")", "\n", "\n", "added", "=", "copy", ".", "deepcopy", "(", "color_frame", ")", "\n", "red", "=", "np", ".", "zeros", "(", "color_frame", ".", "shape", ")", "\n", "red", "[", ":", ",", ":", ",", "0", "]", "=", "255", "\n", "added", "[", "label", "!=", "0", "]", "=", "added", "[", "label", "!=", "0", "]", "*", "0.7", "+", "red", "[", "label", "!=", "0", "]", "*", "0.3", "\n", "added", "[", "added", "<", "0", "]", "=", "0", "\n", "added", "[", "added", ">", "255", "]", "=", "255", "\n", "added", "=", "np", ".", "array", "(", "added", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "added", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "# get the surface pointcloud of the label and depthframe", "\n", "", "source", "=", "utils", ".", "get_surface", "(", "label", ",", "\n", "depth_frame", ",", "\n", "intr", ",", "\n", "robot2Cam_ft", ",", "\n", "min_friends", ",", "\n", "min_dist", ",", "\n", "nb_neighbors", ",", "\n", "voxel_size", "=", "voxel_size", ")", "\n", "#print('n points source', len(np.array(source.points)))", "\n", "if", "len", "(", "np", ".", "array", "(", "source", ".", "points", ")", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "first_surface", ":", "\n", "                ", "first_surface", "=", "False", "\n", "# transformation from the source camera to the target camera", "\n", "point_cloud", ".", "points", "=", "copy", ".", "deepcopy", "(", "source", ".", "points", ")", "\n", "if", "plot", ":", "\n", "                    ", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "point_cloud", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "# convert source and target numpy pc to open3d pc", "\n", "                ", "target", ",", "source", ",", "init_tf", "=", "utils", ".", "icp_regression", "(", "point_cloud", ",", "\n", "source", ",", "\n", "voxel_size", "=", "voxel_size", ",", "\n", "threshold", "=", "threshold", ",", "\n", "global_regression", "=", "global_regression", ",", "\n", "icp_point2point", "=", "icp_point2point", ",", "\n", "icp_point2plane", "=", "icp_point2plane", ",", "\n", "plot", "=", "plot", ")", "\n", "\n", "# transform source", "\n", "source", "=", "source", ".", "transform", "(", "init_tf", ")", "\n", "\n", "point_cloud", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "\n", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "source", ".", "points", ")", ",", "np", ".", "array", "(", "target", ".", "points", ")", ")", ")", ")", "\n", "\n", "point_cloud", "=", "point_cloud", ".", "voxel_down_sample", "(", "voxel_size", "=", "voxel_size", ")", "\n", "\n", "if", "plot", ":", "\n", "                    ", "print", "(", "'new pc'", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "point_cloud", "]", ")", "\n", "", "", "print", "(", "'n points'", ",", "len", "(", "np", ".", "array", "(", "point_cloud", ".", "points", ")", ")", ")", "\n", "\n", "\n", "", "point_cloud", ".", "rotate", "(", "R", "=", "point_cloud_tf", ",", "center", "=", "True", ")", "\n", "\n", "#save point cloud", "\n", "print", "(", "'save to: {}'", ".", "format", "(", "pcd_path", ")", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "os", ".", "path", ".", "join", "(", "pcd_path", ",", "'{}.pcd'", ".", "format", "(", "d", ")", ")", ",", "point_cloud", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "os", ".", "path", ".", "join", "(", "pcd_path", ",", "'{}.ply'", ".", "format", "(", "d", ")", ")", ",", "point_cloud", ")", "\n", "\n", "# append to point cloud list and reset", "\n", "point_clouds", ".", "append", "(", "copy", ".", "deepcopy", "(", "point_cloud", ")", ")", "\n", "point_cloud", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "\n", "", "point_cloud", "=", "utils", ".", "align_point_clouds", "(", "point_clouds", ",", "\n", "min_friends", "=", "min_friends", ",", "\n", "min_dist", "=", "min_dist", ",", "\n", "nb_neighbors", "=", "nb_neighbors", ",", "\n", "plot", "=", "plot", ",", "\n", "global_regression", "=", "global_regression", ",", "\n", "icp_point2point", "=", "icp_point2point", ",", "\n", "icp_point2plane", "=", "icp_point2plane", ",", "\n", "voxel_size", "=", "voxel_size", ",", "\n", "threshold", "=", "threshold", ")", "\n", "\n", "\n", "# save pc with coords out in the robot world", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "os", ".", "path", ".", "join", "(", "pcd_path", ",", "'{}_out.pcd'", ".", "format", "(", "object_name", ")", ")", ",", "point_cloud", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "os", ".", "path", ".", "join", "(", "pcd_path", ",", "'{}_out.ply'", ".", "format", "(", "object_name", ")", ")", ",", "point_cloud", ")", "\n", "# move the pointcloud into the robot origin and save", "\n", "\n", "point_cloud_down", "=", "point_cloud", ".", "voxel_down_sample", "(", "voxel_size", "=", "voxel_size_out", ")", "\n", "# get points for ptl plot", "\n", "\n", "\n", "point_cloud_down", ".", "translate", "(", "translation", "=", "-", "utils", ".", "get_my_source_center", "(", "point_cloud_down", ")", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "os", ".", "path", ".", "join", "(", "pcd_path", ",", "'{}.pcd'", ".", "format", "(", "object_name", ")", ")", ",", "point_cloud_down", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "os", ".", "path", ".", "join", "(", "pcd_path", ",", "'{}.ply'", ".", "format", "(", "object_name", ")", ")", ",", "point_cloud_down", ")", "\n", "\n", "# output for training with dense fusion", "\n", "point_cloud_big_out", "=", "copy", ".", "deepcopy", "(", "point_cloud", ")", "\n", "point_cloud_big_out", ".", "translate", "(", "translation", "=", "-", "utils", ".", "get_my_source_center", "(", "point_cloud_big_out", ")", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "point_cloud_down", "]", ")", "\n", "\n", "\n", "\n", "", "while", "True", ":", "\n", "        ", "voxel_size", "+=", "0.1", "\n", "pc_store", "=", "point_cloud_big_out", ".", "voxel_down_sample", "(", "voxel_size", "=", "voxel_size", ")", "\n", "n_points", "=", "len", "(", "np", ".", "array", "(", "pc_store", ".", "points", ")", ")", "\n", "if", "n_points", "<", "1000", ":", "\n", "            ", "point_cloud_big_out", "=", "point_cloud_big_out", ".", "voxel_down_sample", "(", "voxel_size", "=", "voxel_size", "-", "0.1", ")", "\n", "break", "\n", "\n", "", "", "points", "=", "np", ".", "array", "(", "point_cloud_big_out", ".", "points", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "pcd_path", ",", "'{}.xyz'", ".", "format", "(", "object_name", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "points", ":", "\n", "            ", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "return", "point_cloud", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.plot_point_cloud": [[391, 444], ["create_pointcloud.load_point_cloud", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "range", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.show", "len", "create_pointcloud.Arrow3D", "fig.add_subplot.add_artist", "create_pointcloud.Arrow3D", "fig.add_subplot.add_artist", "create_pointcloud.Arrow3D", "fig.add_subplot.add_artist"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.load_point_cloud"], ["", "", "def", "plot_point_cloud", "(", "object_name", ")", ":", "\n", "    ", "save_dir", "=", "'./data'", "\n", "#with open('./../hand_eye_calibration/data/handEye3_tf.json') as f:", "\n", "#    robotEndEff2Cam = json.load(f).get('tf')", "\n", "#    robotEndEff2Cam = np.array(robotEndEff2Cam).reshape((4, 4))", "\n", "robotEndEff2Cam", "=", "None", "\n", "[", "Xs", ",", "Ys", ",", "Zs", "]", ",", "[", "vXs", ",", "vYs", ",", "vZs", "]", ",", "arrows", "=", "load_point_cloud", "(", "object_name", ",", "\n", "robotEndEff2Cam", ",", "\n", "save_dir", ",", "\n", "n_viewpoints", "=", "10", ",", "\n", "min_friends", "=", "20", ",", "\n", "min_dist", "=", "5", ",", "\n", "nb_neighbors", "=", "20", ",", "\n", "n_points", "=", "1000", ",", "\n", "threshold", "=", "10", ",", "\n", "voxel_size", "=", "1", ",", "\n", "voxel_size_out", "=", "5", ",", "\n", "l_arrow", "=", "75", ",", "\n", "voxel_size_selection", "=", "100", ",", "\n", "global_regression", "=", "False", ",", "\n", "icp_point2point", "=", "True", ",", "\n", "icp_point2plane", "=", "False", ",", "\n", "both_half_way", "=", "False", ",", "\n", "plot", "=", "False", ",", "\n", "matplot", "=", "True", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "robot_home", "=", "[", "0.46051215031184256", ",", "-", "193.22331249713898", ",", "1000.9851455688477", "]", "\n", "ax", ".", "scatter", "(", "robot_home", "[", "0", "]", ",", "robot_home", "[", "1", "]", ",", "robot_home", "[", "2", "]", ",", "c", "=", "'g'", ",", "marker", "=", "'^'", ")", "\n", "ax", ".", "scatter", "(", "vXs", ",", "vYs", ",", "vZs", ",", "c", "=", "'r'", ",", "marker", "=", "'x'", ")", "\n", "ax", ".", "scatter", "(", "Xs", ",", "Ys", ",", "Zs", ",", "c", "=", "'b'", ",", "marker", "=", "'o'", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "arrows", ")", ")", ":", "\n", "        ", "cax", ",", "cay", ",", "caz", "=", "arrows", "[", "i", "]", "\n", "cx", "=", "vXs", "[", "i", "]", "\n", "cy", "=", "vYs", "[", "i", "]", "\n", "cz", "=", "vZs", "[", "i", "]", "\n", "a", "=", "Arrow3D", "(", "[", "cx", ",", "cax", "[", "0", "]", "]", ",", "[", "cy", ",", "cax", "[", "1", "]", "]", ",", "[", "cz", ",", "cax", "[", "2", "]", "]", ",", "color", "=", "'r'", ")", "\n", "ax", ".", "add_artist", "(", "a", ")", "\n", "a", "=", "Arrow3D", "(", "[", "cx", ",", "cay", "[", "0", "]", "]", ",", "[", "cy", ",", "cay", "[", "1", "]", "]", ",", "[", "cz", ",", "cay", "[", "2", "]", "]", ",", "color", "=", "'b'", ")", "\n", "ax", ".", "add_artist", "(", "a", ")", "\n", "a", "=", "Arrow3D", "(", "[", "cx", ",", "caz", "[", "0", "]", "]", ",", "[", "cy", ",", "caz", "[", "1", "]", "]", ",", "[", "cz", ",", "caz", "[", "2", "]", "]", ",", "color", "=", "'g'", ")", "\n", "ax", ".", "add_artist", "(", "a", ")", "\n", "\n", "\n", "", "ax", ".", "set_xlim", "(", "[", "-", "700", ",", "500", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "1200", ",", "0", "]", ")", "\n", "ax", ".", "set_zlim", "(", "[", "-", "200", ",", "1000", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z Label'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.draw_registration_result": [[10, 17], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.paint_uniform_color", "copy.deepcopy.paint_uniform_color", "copy.deepcopy.transform", "open3d.visualization.draw_geometries"], "function", ["None"], ["def", "draw_registration_result", "(", "source", ",", "target", ",", "transformation", ")", ":", "\n", "    ", "source_temp", "=", "copy", ".", "deepcopy", "(", "source", ")", "\n", "target_temp", "=", "copy", ".", "deepcopy", "(", "target", ")", "\n", "source_temp", ".", "paint_uniform_color", "(", "[", "1", ",", "0.706", ",", "0", "]", ")", "\n", "target_temp", ".", "paint_uniform_color", "(", "[", "0", ",", "0.651", ",", "0.929", "]", ")", "\n", "source_temp", ".", "transform", "(", "transformation", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "source_temp", ",", "target_temp", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.preprocess_point_cloud": [[19, 34], ["pcd.voxel_down_sample", "pcd.voxel_down_sample.estimate_normals", "open3d.registration.compute_fpfh_feature", "open3d.geometry.KDTreeSearchParamHybrid", "open3d.geometry.KDTreeSearchParamHybrid"], "function", ["None"], ["", "def", "preprocess_point_cloud", "(", "pcd", ",", "voxel_size", ")", ":", "\n", "#print(\":: Downsample with a voxel size %.3f.\" % voxel_size)", "\n", "    ", "pcd_down", "=", "pcd", ".", "voxel_down_sample", "(", "voxel_size", ")", "\n", "\n", "radius_normal", "=", "voxel_size", "*", "2", "\n", "#print(\":: Estimate normal with search radius %.3f.\" % radius_normal)", "\n", "pcd_down", ".", "estimate_normals", "(", "\n", "o3d", ".", "geometry", ".", "KDTreeSearchParamHybrid", "(", "radius", "=", "radius_normal", ",", "max_nn", "=", "30", ")", ")", "\n", "\n", "radius_feature", "=", "voxel_size", "*", "5", "\n", "#print(\":: Compute FPFH feature with search radius %.3f.\" % radius_feature)", "\n", "pcd_fpfh", "=", "o3d", ".", "registration", ".", "compute_fpfh_feature", "(", "\n", "pcd_down", ",", "\n", "o3d", ".", "geometry", ".", "KDTreeSearchParamHybrid", "(", "radius", "=", "radius_feature", ",", "max_nn", "=", "100", ")", ")", "\n", "return", "pcd_down", ",", "pcd_fpfh", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.execute_global_registration": [[36, 50], ["open3d.registration.registration_ransac_based_on_feature_matching", "open3d.registration.TransformationEstimationPointToPoint", "open3d.registration.RANSACConvergenceCriteria", "open3d.registration.CorrespondenceCheckerBasedOnEdgeLength", "open3d.registration.CorrespondenceCheckerBasedOnDistance"], "function", ["None"], ["", "def", "execute_global_registration", "(", "source_down", ",", "target_down", ",", "source_fpfh", ",", "\n", "target_fpfh", ",", "voxel_size", ")", ":", "\n", "    ", "distance_threshold", "=", "voxel_size", "*", "1.5", "\n", "#print(\":: RANSAC registration on downsampled point clouds.\")", "\n", "#print(\"   Since the downsampling voxel size is %.3f,\" % voxel_size)", "\n", "#print(\"   we use a liberal distance threshold %.3f.\" % distance_threshold)", "\n", "result", "=", "o3d", ".", "registration", ".", "registration_ransac_based_on_feature_matching", "(", "\n", "source_down", ",", "target_down", ",", "source_fpfh", ",", "target_fpfh", ",", "distance_threshold", ",", "\n", "o3d", ".", "registration", ".", "TransformationEstimationPointToPoint", "(", "False", ")", ",", "4", ",", "[", "\n", "o3d", ".", "registration", ".", "CorrespondenceCheckerBasedOnEdgeLength", "(", "0.9", ")", ",", "\n", "o3d", ".", "registration", ".", "CorrespondenceCheckerBasedOnDistance", "(", "\n", "distance_threshold", ")", "\n", "]", ",", "o3d", ".", "registration", ".", "RANSACConvergenceCriteria", "(", "4000000", ",", "500", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.refine_registration": [[51, 60], ["open3d.registration.registration_icp", "open3d.registration.TransformationEstimationPointToPlane"], "function", ["None"], ["", "def", "refine_registration", "(", "source", ",", "target", ",", "result_ransac", ",", "voxel_size", ")", ":", "\n", "    ", "distance_threshold", "=", "voxel_size", "*", "0.4", "\n", "#print(\":: Point-to-plane ICP registration is applied on original point\")", "\n", "#print(\"   clouds to refine the alignment. This time we use a strict\")", "\n", "#print(\"   distance threshold %.3f.\" % distance_threshold)", "\n", "result", "=", "o3d", ".", "registration", ".", "registration_icp", "(", "\n", "source", ",", "target", ",", "distance_threshold", ",", "result_ransac", ".", "transformation", ",", "\n", "o3d", ".", "registration", ".", "TransformationEstimationPointToPlane", "(", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.icp_regression": [[63, 123], ["open3d_utils.preprocess_point_cloud", "open3d_utils.preprocess_point_cloud", "numpy.identity", "open3d.registration.ICPConvergenceCriteria", "copy.deepcopy", "print", "open3d_utils.draw_registration_result", "open3d_utils.execute_global_registration", "print", "open3d_utils.draw_registration_result", "open3d.registration.registration_icp", "print", "open3d_utils.draw_registration_result", "open3d.registration.registration_icp", "print", "open3d_utils.draw_registration_result", "open3d.registration.TransformationEstimationPointToPoint", "open3d.registration.TransformationEstimationPointToPlane"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.preprocess_point_cloud", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.preprocess_point_cloud", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.draw_registration_result", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.execute_global_registration", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.draw_registration_result", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.draw_registration_result", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.draw_registration_result"], ["", "def", "icp_regression", "(", "target", ",", "\n", "source", ",", "\n", "voxel_size", "=", "5", ",", "\n", "threshold", "=", "100", ",", "\n", "global_regression", "=", "False", ",", "\n", "icp_point2point", "=", "True", ",", "\n", "icp_point2plane", "=", "True", ",", "\n", "plot", "=", "False", ")", ":", "\n", "\n", "    ", "target", ",", "target_fpfh", "=", "preprocess_point_cloud", "(", "copy", ".", "deepcopy", "(", "target", ")", ",", "voxel_size", ")", "\n", "source", ",", "source_fpfh", "=", "preprocess_point_cloud", "(", "source", ",", "voxel_size", ")", "\n", "init_tf", "=", "np", ".", "identity", "(", "4", ")", "\n", "\n", "criteria", "=", "o3d", ".", "registration", ".", "ICPConvergenceCriteria", "(", "relative_fitness", "=", "1e-2", ",", "\n", "relative_rmse", "=", "1e-2", ",", "\n", "max_iteration", "=", "100", ",", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "print", "(", "'init'", ",", "init_tf", ")", "\n", "draw_registration_result", "(", "source", ",", "target", ",", "init_tf", ")", "\n", "\n", "", "if", "global_regression", ":", "\n", "# global regression", "\n", "        ", "init_tf", "=", "execute_global_registration", "(", "source", ",", "\n", "target", ",", "\n", "source_fpfh", ",", "\n", "target_fpfh", ",", "\n", "voxel_size", "\n", ")", ".", "transformation", "\n", "if", "plot", ":", "\n", "            ", "print", "(", "'global_regression'", ",", "init_tf", ")", "\n", "draw_registration_result", "(", "source", ",", "target", ",", "init_tf", ")", "\n", "\n", "", "", "if", "icp_point2point", ":", "\n", "# iterative closest point PointToPoint regression", "\n", "        ", "init_tf", "=", "o3d", ".", "registration", ".", "registration_icp", "(", "source", ",", "\n", "target", ",", "\n", "threshold", ",", "\n", "init_tf", ",", "\n", "o3d", ".", "registration", ".", "TransformationEstimationPointToPoint", "(", ")", ",", "\n", "criteria", "\n", ")", ".", "transformation", "\n", "if", "plot", ":", "\n", "            ", "print", "(", "'point2point'", ",", "init_tf", ")", "\n", "draw_registration_result", "(", "source", ",", "target", ",", "init_tf", ")", "\n", "\n", "", "", "if", "icp_point2plane", ":", "\n", "# iterative closest point PointToPlane regression", "\n", "        ", "init_tf", "=", "o3d", ".", "registration", ".", "registration_icp", "(", "source", ",", "\n", "target", ",", "\n", "threshold", ",", "\n", "init_tf", ",", "\n", "o3d", ".", "registration", ".", "TransformationEstimationPointToPlane", "(", ")", ",", "\n", "criteria", "\n", ")", ".", "transformation", "\n", "if", "plot", ":", "\n", "            ", "print", "(", "'point2plane'", ",", "init_tf", ")", "\n", "draw_registration_result", "(", "source", ",", "target", ",", "init_tf", ")", "\n", "\n", "", "", "return", "target", ",", "source", ",", "init_tf", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.align_point_clouds": [[125, 169], ["enumerate", "numpy.array", "numpy.array", "open3d_utils.icp_regression", "source.transform.transform", "open3d.utility.Vector3dVector", "target.voxel_down_sample.voxel_down_sample", "target.voxel_down_sample.remove_radius_outlier", "numpy.array", "numpy.std", "target.voxel_down_sample.remove_statistical_outlier", "target.voxel_down_sample.get_center", "source.transform.get_center", "source.transform.translate", "numpy.concatenate", "target.voxel_down_sample.compute_mahalanobis_distance", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.icp_regression"], ["", "def", "align_point_clouds", "(", "point_clouds", ",", "\n", "min_friends", ",", "\n", "min_dist", ",", "\n", "nb_neighbors", ",", "\n", "plot", "=", "False", ",", "\n", "global_regression", "=", "False", ",", "\n", "icp_point2point", "=", "True", ",", "\n", "icp_point2plane", "=", "False", ",", "\n", "voxel_size", "=", "5", ",", "\n", "threshold", "=", "50", ")", ":", "\n", "\n", "    ", "target", "=", "point_clouds", "[", "0", "]", "\n", "for", "k", ",", "source", "in", "enumerate", "(", "point_clouds", "[", "1", ":", "]", ")", ":", "\n", "        ", "t_center", "=", "np", ".", "array", "(", "target", ".", "get_center", "(", ")", ")", "\n", "s_center", "=", "np", ".", "array", "(", "source", ".", "get_center", "(", ")", ")", "\n", "diff", "=", "s_center", "-", "t_center", "# -800 -810 -10 + 20", "\n", "if", "diff", "[", "1", "]", ">", "-", "30", ":", "\n", "            ", "move", "=", "[", "0", ",", "-", "30", "-", "diff", "[", "1", "]", ",", "0", "]", "\n", "source", ".", "translate", "(", "translation", "=", "move", ")", "\n", "\n", "", "target", ",", "source", ",", "init_tf", "=", "icp_regression", "(", "target", ",", "\n", "source", ",", "\n", "voxel_size", "=", "voxel_size", ",", "\n", "threshold", "=", "threshold", ",", "\n", "global_regression", "=", "global_regression", ",", "\n", "icp_point2point", "=", "True", ",", "\n", "icp_point2plane", "=", "False", ",", "\n", "plot", "=", "plot", ")", "\n", "# transform source", "\n", "source", "=", "source", ".", "transform", "(", "init_tf", ")", "\n", "target", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "\n", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "source", ".", "points", ")", ",", "np", ".", "array", "(", "target", ".", "points", ")", ")", ")", ")", "\n", "\n", "target", "=", "target", ".", "voxel_down_sample", "(", "voxel_size", "=", "voxel_size", ")", "\n", "\n", "# post process", "\n", "target", ",", "out", "=", "target", ".", "remove_radius_outlier", "(", "nb_points", "=", "min_friends", ",", "\n", "radius", "=", "min_dist", ")", "\n", "dist", "=", "np", ".", "array", "(", "target", ".", "compute_mahalanobis_distance", "(", ")", ")", "\n", "std_ratio", "=", "np", ".", "std", "(", "dist", ")", "\n", "target", ",", "out", "=", "target", ".", "remove_statistical_outlier", "(", "nb_neighbors", "=", "nb_neighbors", ",", "\n", "std_ratio", "=", "std_ratio", ")", "\n", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_surface": [[171, 214], ["numpy.where", "range", "numpy.array", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "surface.voxel_down_sample.voxel_down_sample", "numpy.abs", "numpy.abs", "surface.voxel_down_sample.remove_radius_outlier", "numpy.abs", "numpy.abs", "surface.voxel_down_sample.remove_statistical_outlier", "len", "np.array.append", "numpy.array", "numpy.array", "numpy.std", "numpy.array", "numpy.std", "numpy.identity", "numpy.dot", "points.append", "surface.voxel_down_sample.compute_mahalanobis_distance", "surface.voxel_down_sample.compute_mahalanobis_distance", "intr.get", "intr.get", "intr.get", "intr.get"], "function", ["None"], ["", "def", "get_surface", "(", "label", ",", "depth_frame", ",", "intr", ",", "robot2Cam_ft", ",", "min_friends", ",", "min_dist", ",", "nb_neighbors", ",", "voxel_size", ")", ":", "\n", "    ", "points", "=", "[", "]", "\n", "pos", "=", "[", "]", "\n", "x", ",", "y", "=", "np", ".", "where", "(", "label", "!=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "        ", "pos", ".", "append", "(", "[", "x", "[", "i", "]", ",", "y", "[", "i", "]", "]", ")", "\n", "", "pos", "=", "np", ".", "array", "(", "pos", ")", "\n", "\n", "for", "p", "in", "pos", ":", "\n", "        ", "p2", "=", "depth_frame", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", "]", "\n", "if", "p2", "!=", "0", ":", "\n", "            ", "px", "=", "p", "[", "1", "]", "\n", "py", "=", "p", "[", "0", "]", "\n", "ppx", "=", "px", "-", "intr", ".", "get", "(", "'ppx'", ")", "\n", "ppy", "=", "py", "-", "intr", ".", "get", "(", "'ppy'", ")", "\n", "\n", "p0", "=", "ppx", "*", "p2", "/", "intr", ".", "get", "(", "'fx'", ")", "\n", "p1", "=", "ppy", "*", "p2", "/", "intr", ".", "get", "(", "'fy'", ")", "\n", "cam2obj", "=", "np", ".", "identity", "(", "4", ")", "\n", "cam2obj", "[", "0", ":", "3", ",", "3", "]", "=", "[", "p0", ",", "p1", ",", "p2", "]", "\n", "robot2obj_tf", "=", "np", ".", "dot", "(", "robot2Cam_ft", ",", "cam2obj", ")", "\n", "points", ".", "append", "(", "robot2obj_tf", "[", ":", "3", ",", "3", "]", ")", "\n", "\n", "\n", "", "", "surface", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "surface", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "array", "(", "points", ")", ")", "\n", "\n", "surface", "=", "surface", ".", "voxel_down_sample", "(", "voxel_size", "=", "voxel_size", ")", "\n", "\n", "dist", "=", "np", ".", "abs", "(", "np", ".", "array", "(", "surface", ".", "compute_mahalanobis_distance", "(", ")", ")", ")", "\n", "std_ratio", "=", "np", ".", "abs", "(", "np", ".", "std", "(", "dist", ")", ")", "\n", "#print(std_ratio, min_friends, min_dist)", "\n", "\n", "# post process", "\n", "surface", ",", "out", "=", "surface", ".", "remove_radius_outlier", "(", "nb_points", "=", "min_friends", ",", "radius", "=", "min_dist", ")", "\n", "#print('after remove radius outliners', len(np.array(surface.points)))", "\n", "dist", "=", "np", ".", "abs", "(", "np", ".", "array", "(", "surface", ".", "compute_mahalanobis_distance", "(", ")", ")", ")", "\n", "std_ratio", "=", "np", ".", "abs", "(", "np", ".", "std", "(", "dist", ")", ")", "\n", "#print(std_ratio, nb_neighbors)", "\n", "surface", ",", "out", "=", "surface", ".", "remove_statistical_outlier", "(", "nb_neighbors", "=", "nb_neighbors", ",", "\n", "std_ratio", "=", "std_ratio", ")", "\n", "#print('after remove stat outliners', len(np.array(surface.points)))", "\n", "return", "surface", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pixels2points": [[215, 232], ["points.append", "intr.get", "intr.get", "intr.get", "intr.get"], "function", ["None"], ["", "def", "pixels2points", "(", "pixels", ",", "depth", ",", "intr", ")", ":", "\n", "    ", "points", "=", "[", "]", "\n", "for", "p", "in", "pixels", ":", "\n", "\n", "        ", "p2", "=", "depth", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", "]", "\n", "#print(p, p2)", "\n", "if", "p2", "!=", "0", ":", "\n", "            ", "px", "=", "p", "[", "1", "]", "\n", "py", "=", "p", "[", "0", "]", "\n", "ppx", "=", "px", "-", "intr", ".", "get", "(", "'ppx'", ")", "\n", "ppy", "=", "py", "-", "intr", ".", "get", "(", "'ppy'", ")", "\n", "\n", "p0", "=", "ppx", "*", "p2", "/", "intr", ".", "get", "(", "'fx'", ")", "\n", "p1", "=", "ppy", "*", "p2", "/", "intr", ".", "get", "(", "'fy'", ")", "\n", "points", ".", "append", "(", "[", "p0", ",", "p1", ",", "p2", "]", ")", "\n", "\n", "", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.points2pixel": [[233, 244], ["int", "int", "pixels.append", "intr.get", "intr.get", "intr.get", "intr.get"], "function", ["None"], ["", "def", "points2pixel", "(", "points", ",", "intr", ")", ":", "\n", "    ", "pixels", "=", "[", "]", "\n", "for", "point", "in", "points", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "point", "\n", "p1", "=", "(", "x", "/", "(", "z", "/", "intr", ".", "get", "(", "'fx'", ")", ")", ")", "\n", "p1", "=", "int", "(", "p1", "+", "intr", ".", "get", "(", "'ppx'", ")", ")", "\n", "p0", "=", "(", "y", "/", "(", "z", "/", "intr", ".", "get", "(", "'fy'", ")", ")", ")", "\n", "p0", "=", "int", "(", "p0", "+", "intr", ".", "get", "(", "'ppy'", ")", ")", "\n", "pixels", ".", "append", "(", "[", "p0", ",", "p1", "]", ")", "\n", "\n", "", "return", "pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image": [[246, 271], ["int", "numpy.zeros", "isinstance", "open3d_utils.points2pixel", "enumerate", "numpy.array"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.points2pixel"], ["", "def", "pointcloud2image", "(", "image", ",", "point_cloud", ",", "point_size", ",", "intr", ",", "color", "=", "None", ")", ":", "\n", "\n", "    ", "step", "=", "int", "(", "(", "point_size", "-", "1", ")", "/", "2", ")", "\n", "\n", "mark", "=", "np", ".", "zeros", "(", "(", "point_size", ",", "point_size", ",", "3", ")", ")", "\n", "if", "not", "color", ":", "\n", "        ", "mark", "[", ":", ",", ":", ",", "0", "]", "=", "255", "\n", "", "else", ":", "\n", "        ", "for", "i", ",", "c", "in", "enumerate", "(", "color", ")", ":", "\n", "            ", "mark", "[", ":", ",", ":", ",", "i", "]", "=", "c", "\n", "\n", "", "", "if", "isinstance", "(", "point_cloud", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "points", "=", "point_cloud", "\n", "", "else", ":", "\n", "        ", "points", "=", "np", ".", "array", "(", "point_cloud", ".", "points", ")", "\n", "", "pixels", "=", "points2pixel", "(", "points", ",", "intr", ")", "\n", "\n", "for", "x", ",", "y", "in", "pixels", ":", "\n", "        ", "try", ":", "\n", "            ", "image", "[", "x", "-", "step", ":", "x", "+", "step", "+", "1", ",", "y", "-", "step", ":", "y", "+", "step", "+", "1", ",", ":", "]", "=", "mark", "*", "0.3", "+", "image", "[", "x", "-", "step", ":", "x", "+", "step", "+", "1", ",", "y", "-", "step", ":", "y", "+", "step", "+", "1", ",", ":", "]", "*", "0.7", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_my_source_center": [[273, 293], ["numpy.array", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "source.get_center"], "function", ["None"], ["", "def", "get_my_source_center", "(", "source", ")", ":", "\n", "    ", "source_points", "=", "np", ".", "array", "(", "source", ".", "points", ")", "\n", "x_min", "=", "np", ".", "min", "(", "source_points", "[", ":", ",", "0", "]", ")", "\n", "x_max", "=", "np", ".", "max", "(", "source_points", "[", ":", ",", "0", "]", ")", "\n", "\n", "y_min", "=", "np", ".", "min", "(", "source_points", "[", ":", ",", "1", "]", ")", "\n", "y_max", "=", "np", ".", "max", "(", "source_points", "[", ":", ",", "1", "]", ")", "\n", "\n", "z_min", "=", "np", ".", "min", "(", "source_points", "[", ":", ",", "2", "]", ")", "\n", "z_max", "=", "np", ".", "max", "(", "source_points", "[", ":", ",", "2", "]", ")", "\n", "\n", "source_center", "=", "np", ".", "array", "(", "source", ".", "get_center", "(", ")", ")", "\n", "my_source_center", "=", "np", ".", "array", "(", "[", "x_min", "+", "(", "x_max", "-", "x_min", ")", "/", "2", ",", "\n", "y_min", "+", "(", "y_max", "-", "y_min", ")", "/", "2", ",", "\n", "z_min", "+", "(", "z_max", "-", "z_min", ")", "/", "2", "]", ")", "\n", "\n", "#print('source_center: {}'.format(source_center))", "\n", "#print('my_source_center: {}'.format(my_source_center))", "\n", "#print('diff from source of: {}'.format(source_center-my_source_center))", "\n", "return", "my_source_center", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_new_position": [[295, 330], ["numpy.array", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "numpy.subtract", "print", "print", "enumerate", "numpy.array", "numpy.mean", "source.get_center", "mathutils.geometry.intersect_line_line", "numpy.array", "numpy.array", "np.array.append", "numpy.subtract"], "function", ["None"], ["", "def", "get_new_position", "(", "position_vectors", ",", "source", ")", ":", "\n", "\n", "    ", "source_points", "=", "np", ".", "array", "(", "source", ".", "points", ")", "\n", "x_min", "=", "np", ".", "min", "(", "source_points", "[", ":", ",", "0", "]", ")", "\n", "x_max", "=", "np", ".", "max", "(", "source_points", "[", ":", ",", "0", "]", ")", "\n", "\n", "y_min", "=", "np", ".", "min", "(", "source_points", "[", ":", ",", "1", "]", ")", "\n", "y_max", "=", "np", ".", "max", "(", "source_points", "[", ":", ",", "1", "]", ")", "\n", "\n", "z_min", "=", "np", ".", "min", "(", "source_points", "[", ":", ",", "2", "]", ")", "\n", "z_max", "=", "np", ".", "max", "(", "source_points", "[", ":", ",", "2", "]", ")", "\n", "\n", "source_center", "=", "np", ".", "array", "(", "source", ".", "get_center", "(", ")", ")", "\n", "my_source_center", "=", "np", ".", "array", "(", "[", "x_min", "+", "(", "x_max", "-", "x_min", ")", "/", "2", ",", "\n", "y_min", "+", "(", "y_max", "-", "y_min", ")", "/", "2", ",", "\n", "z_min", "+", "(", "z_max", "-", "z_min", ")", "/", "2", "]", ")", "\n", "\n", "shift2mycenter", "=", "np", ".", "subtract", "(", "source_center", ",", "my_source_center", ")", "\n", "\n", "print", "(", "'my_source_center: {}'", ".", "format", "(", "my_source_center", ")", ")", "\n", "print", "(", "'diff from source of: {}'", ".", "format", "(", "shift2mycenter", ")", ")", "\n", "\n", "points", "=", "[", "]", "\n", "for", "i", ",", "line0", "in", "enumerate", "(", "position_vectors", "[", ":", "-", "1", "]", ")", ":", "\n", "        ", "for", "line1", "in", "position_vectors", "[", "i", "+", "1", ":", "]", ":", "\n", "            ", "p0", ",", "p1", "=", "intersect_line_line", "(", "line0", "[", "0", "]", ",", "line0", "[", "1", "]", ",", "line1", "[", "0", "]", ",", "line1", "[", "1", "]", ")", "\n", "p0", "=", "np", ".", "array", "(", "p0", ")", "\n", "p1", "=", "np", ".", "array", "(", "p1", ")", "\n", "center_point", "=", "p0", "+", "(", "np", ".", "subtract", "(", "p1", ",", "p0", ")", "/", "2", ")", "\n", "points", ".", "append", "(", "center_point", ")", "\n", "", "", "points", "=", "np", ".", "array", "(", "points", ")", "\n", "position", "=", "np", ".", "mean", "(", "points", ",", "axis", "=", "0", ")", "\n", "position", "=", "position", "+", "shift2mycenter", "\n", "\n", "return", "position", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_surface_positions": [[332, 383], ["os.path.join", "os.listdir", "os.path.join", "numpy.array", "len", "os.path.join", "range", "numpy.array", "ValueError", "os.listdir", "json.load.get", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "open3d_utils.get_surface", "positions.append", "os.path.join", "open", "json.load", "open", "numpy.array", "open", "numpy.array", "os.path.join", "numpy.array", "numpy.array", "os.path.join", "PIL.Image.open", "os.path.join", "PIL.Image.open", "list", "list", "json.load.get", "json.load.get", "get_surface.get_center"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_surface", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "get_surface_positions", "(", "root", ",", "\n", "object_name", ",", "\n", "d", ",", "\n", "min_friends", ",", "\n", "min_dist", ",", "\n", "nb_neighbors", ",", "\n", "mode", "=", "'gen'", ",", "\n", "voxel_size", "=", "5", ")", ":", "\n", "\n", "    ", "object_label_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data'", ",", "object_name", ")", "\n", "dirs", "=", "os", ".", "listdir", "(", "object_label_path", ")", "\n", "if", "not", "dirs", ":", "\n", "        ", "raise", "ValueError", "(", "'no labels obtained yet'", ")", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation/data'", ",", "object_name", ")", "\n", "\n", "n_dirs", "=", "np", ".", "array", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "object_label_path", ",", "dirs", "[", "0", "]", ")", ")", ")", "\n", "n_dirs", "=", "[", "d", "for", "d", "in", "n_dirs", "if", "'.{}.label.png'", ".", "format", "(", "mode", ")", "in", "d", "]", "\n", "\n", "n", "=", "len", "(", "n_dirs", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "object_label_path", ",", "d", ")", "\n", "positions", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "n", ")", ":", "\n", "# load for the given index the background, object frame and ground truth", "\n", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "d", ",", "'{:06d}.meta.json'", ".", "format", "(", "idx", ")", ")", ")", "as", "f", ":", "\n", "            ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "intr", "=", "meta", ".", "get", "(", "'intr'", ")", "\n", "robotEndEff2Cam", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'hand_eye_calibration'", ")", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "robot2endEff_tf", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'robot2endEff_tf'", ")", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "robot2Cam_ft", "=", "np", ".", "dot", "(", "robot2endEff_tf", ",", "robotEndEff2Cam", ")", "\n", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "d", ",", "'{:06d}.depth.png'", ".", "format", "(", "idx", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "depth_frame", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "'{:06d}.{}.label.png'", ".", "format", "(", "idx", ",", "mode", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# get the surface pointcloud of the label and depthframe", "\n", "", "source", "=", "get_surface", "(", "label", ",", "\n", "depth_frame", ",", "\n", "intr", ",", "\n", "robot2Cam_ft", ",", "\n", "min_friends", ",", "\n", "min_dist", ",", "\n", "nb_neighbors", ",", "\n", "voxel_size", "=", "voxel_size", ")", "\n", "positions", ".", "append", "(", "[", "list", "(", "source", ".", "get_center", "(", ")", ")", ",", "list", "(", "robot2Cam_ft", "[", ":", "3", ",", "3", "]", ")", "]", ")", "\n", "", "return", "np", ".", "array", "(", "positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.data_generation.getData.get_extra_samples": [[12, 31], ["controller.get_pose", "numpy.array", "time.sleep", "stop", "controller.get_pose", "numpy.array", "numpy.linalg.norm", "stop", "getData.get_extra_data_sample"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.data_generation.getData.get_extra_data_sample"], ["def", "get_extra_samples", "(", "stop", ",", "controller", ",", "DC", ",", "extra_save_dir", ",", "object_pose", ",", "symmetric", ",", "hand_eye_calibration", ",", "view_point_id", ",", "min_dist_travelled", ")", ":", "\n", "\n", "    ", "pose", "=", "controller", ".", "get_pose", "(", "return_mm", "=", "True", ")", "\n", "last_pos", "=", "np", ".", "array", "(", "[", "pose", "[", "'x'", "]", ",", "pose", "[", "'y'", "]", ",", "pose", "[", "'z'", "]", "]", ")", "\n", "while", "True", ":", "\n", "\n", "        ", "time", ".", "sleep", "(", "0.1", ")", "\n", "if", "stop", "(", ")", ":", "\n", "            ", "break", "\n", "\n", "", "pose", "=", "controller", ".", "get_pose", "(", "return_mm", "=", "True", ")", "\n", "current_pos", "=", "np", ".", "array", "(", "[", "pose", "[", "'x'", "]", ",", "pose", "[", "'y'", "]", ",", "pose", "[", "'z'", "]", "]", ")", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "(", "current_pos", "-", "last_pos", ")", ")", "\n", "if", "dist", ">=", "min_dist_travelled", ":", "\n", "            ", "if", "get_extra_data_sample", "(", "controller", ",", "DC", ",", "extra_save_dir", ",", "object_pose", ",", "symmetric", ",", "hand_eye_calibration", ",", "view_point_id", ")", ":", "\n", "                ", "last_pos", "=", "current_pos", "\n", "\n", "", "", "if", "stop", "(", ")", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.data_generation.getData.get_extra_data_sample": [[33, 85], ["controller.get_pose", "list", "DC.get_frames", "numpy.identity", "transforms3d.euler.euler2mat", "list", "numpy.linalg.norm", "numpy.zeros", "transforms3d.axangles.axangle2mat", "trans_mat.flatten.flatten", "range", "list", "DC.get_intrinsics", "time.time", "DC.get_depth_scale", "imageio.imwrite", "imageio.imwrite", "controller.get_joints", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad", "object_pose.get", "object_pose.get", "object_pose.get", "list.flatten", "len", "float", "open", "json.dump", "object_pose.get", "object_pose.get", "object_pose.get"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_frames", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_depth_scale", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "", "", "def", "get_extra_data_sample", "(", "controller", ",", "DC", ",", "extra_save_dir", ",", "object_pose", ",", "symmetric", ",", "hand_eye_calibration", ",", "view_point_id", ")", ":", "\n", "\n", "# get meta data", "\n", "    ", "meta", "=", "{", "}", "\n", "meta", "[", "'pose'", "]", "=", "controller", ".", "get_pose", "(", "return_mm", "=", "True", ")", "\n", "meta", "[", "'joints'", "]", "=", "list", "(", "controller", ".", "get_joints", "(", ")", ")", "\n", "\n", "# get and write frames", "\n", "out", ",", "success", "=", "DC", ".", "get_frames", "(", "with_repair", "=", "False", ",", "return_first_try", "=", "True", ",", "return_first", "=", "True", ",", "check_state", "=", "True", ")", "\n", "if", "not", "success", ":", "\n", "        ", "return", "False", "\n", "\n", "", "object_tf", "=", "np", ".", "identity", "(", "4", ")", "\n", "object_tf", "[", ":", "3", ",", ":", "3", "]", "=", "transforms3d", ".", "euler", ".", "euler2mat", "(", "np", ".", "deg2rad", "(", "object_pose", ".", "get", "(", "'a'", ")", ")", ",", "\n", "np", ".", "deg2rad", "(", "object_pose", ".", "get", "(", "'b'", ")", ")", ",", "\n", "np", ".", "deg2rad", "(", "object_pose", ".", "get", "(", "'c'", ")", ")", ")", "\n", "object_tf", "[", ":", "3", ",", "3", "]", "=", "[", "object_pose", ".", "get", "(", "'z'", ")", ",", "object_pose", ".", "get", "(", "'y'", ")", ",", "object_pose", ".", "get", "(", "'z'", ")", "]", "\n", "object_tf", "=", "list", "(", "object_tf", ".", "flatten", "(", ")", ")", "\n", "\n", "meta", "[", "'object_pose'", "]", "=", "object_tf", "\n", "r", "=", "[", "meta", "[", "'pose'", "]", "[", "'a'", "]", ",", "meta", "[", "'pose'", "]", "[", "'b'", "]", ",", "meta", "[", "'pose'", "]", "[", "'c'", "]", "]", "\n", "anlge", "=", "np", ".", "linalg", ".", "norm", "(", "r", ")", "\n", "axis", "=", "r", "/", "anlge", "\n", "trans_mat", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "trans_mat", "[", "3", ",", "3", "]", "=", "1", "\n", "trans_mat", "[", ":", "3", ",", ":", "3", "]", "=", "transforms3d", ".", "axangles", ".", "axangle2mat", "(", "axis", ",", "anlge", ")", "\n", "trans_mat", "[", ":", "3", ",", "3", "]", "=", "[", "meta", "[", "'pose'", "]", "[", "'x'", "]", ",", "meta", "[", "'pose'", "]", "[", "'y'", "]", ",", "meta", "[", "'pose'", "]", "[", "'z'", "]", "]", "\n", "trans_mat", "=", "trans_mat", ".", "flatten", "(", ")", "\n", "for", "value", "in", "range", "(", "len", "(", "trans_mat", ")", ")", ":", "\n", "        ", "trans_mat", "[", "value", "]", "=", "float", "(", "trans_mat", "[", "value", "]", ")", "\n", "", "meta", "[", "'robot2endEff_tf'", "]", "=", "list", "(", "trans_mat", ")", "\n", "\n", "intr", "=", "DC", ".", "get_intrinsics", "(", ")", "\n", "meta", "[", "'intr'", "]", "=", "{", "'width'", ":", "intr", ".", "width", ",", "\n", "'height'", ":", "intr", ".", "height", ",", "\n", "'ppx'", ":", "intr", ".", "ppx", ",", "\n", "'ppy'", ":", "intr", ".", "ppy", ",", "\n", "'fx'", ":", "intr", ".", "fx", ",", "\n", "'fy'", ":", "intr", ".", "fy", ",", "\n", "'coeffs'", ":", "intr", ".", "coeffs", "\n", "}", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "meta", "[", "'depth_scale'", "]", "=", "DC", ".", "get_depth_scale", "(", ")", "\n", "meta", "[", "'symmetric'", "]", "=", "symmetric", "\n", "meta", "[", "'hand_eye_calibration'", "]", "=", "hand_eye_calibration", "\n", "meta", "[", "'view_point_id'", "]", "=", "view_point_id", "\n", "imageio", ".", "imwrite", "(", "extra_save_dir", "+", "'/{}.color.png'", ".", "format", "(", "t", ")", ",", "out", "[", "'image'", "]", ")", "\n", "imageio", ".", "imwrite", "(", "extra_save_dir", "+", "'/{}.depth.png'", ".", "format", "(", "t", ")", ",", "out", "[", "'depth'", "]", ")", "\n", "\n", "with", "open", "(", "extra_save_dir", "+", "'/{}.meta.json'", ".", "format", "(", "t", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "meta", ",", "f", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.data_generation.getData.get_data": [[89, 231], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "robot_controller.TestController.RobotController", "os.path.join", "print", "robot_controller.TestController.RobotController.is_home", "str", "os.path.exists", "os.makedirs", "str", "str", "open", "json.load", "str", "os.path.exists", "os.makedirs", "str", "os.path.exists", "os.makedirs", "robot_controller.TestController.RobotController.is_home", "enumerate", "print", "print", "print", "print", "robot_controller.TestController.RobotController.move_joints", "print", "pathlib.Path().resolve", "threading.Thread", "threading.Thread.start", "numpy.deg2rad", "robot_controller.TestController.RobotController.is_moving", "print", "time.sleep", "threading.Thread.join", "int", "time.sleep", "list", "robot_controller.TestController.RobotController.get_pose", "numpy.identity", "transforms3d.euler.euler2mat", "list", "numpy.linalg.norm", "numpy.zeros", "transforms3d.axangles.axangle2mat", "trans_mat.flatten.flatten", "range", "list", "DC.get_frames", "DC.get_intrinsics", "DC.get_depth_scale", "imageio.imwrite", "imageio.imwrite", "print", "print", "pathlib.Path().resolve", "pathlib.Path().resolve", "pathlib.Path().resolve", "pathlib.Path().resolve", "open", "json.load", "time.sleep", "print", "int", "robot_controller.TestController.RobotController.at_target", "int", "robot_controller.TestController.RobotController.get_joints", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad", "object_pose.get", "object_pose.get", "object_pose.get", "list.flatten", "len", "float", "open", "json.dump", "pathlib.Path", "object_pose.get", "object_pose.get", "object_pose.get", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_home", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_home", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_frames", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_depth_scale", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "get_data", "(", "DC", ",", "robot_path", ",", "name", ",", "run", ",", "object_pose", ",", "symmetric", ",", "hand_eye_calibration", ")", ":", "\n", "\n", "    ", "if", "symmetric", ":", "\n", "        ", "symmetric", "=", "1", "\n", "", "else", ":", "\n", "        ", "symmetric", "=", "0", "\n", "\n", "", "global", "moving_robot", "\n", "dir", "=", "os", ".", "path", ".", "join", "(", "str", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ")", ",", "'data'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "str", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", ")", ",", "'robot_controller/robot_path'", ",", "robot_path", ")", "\n", "state_path", "=", "os", ".", "path", ".", "join", "(", "str", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", ")", ",", "'data_generation/state.json'", ")", "\n", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "save_dir", "=", "os", ".", "path", ".", "join", "(", "str", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", ")", ",", "'data_generation/data'", ",", "name", ",", "run", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "#controller = None", "\n", "", "controller", "=", "RobotController", "(", ")", "\n", "vel", "=", "0.60", "\n", "acc", "=", "0.3", "\n", "min_dist_travelled", "=", "25", "# mm", "\n", "extra_save_dir", "=", "os", ".", "path", ".", "join", "(", "str", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", ")", ",", "'data_generation/data'", ",", "name", ",", "'extra'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "extra_save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "extra_save_dir", ")", "\n", "\n", "#input('start obtaining images')", "\n", "", "thread", "=", "None", "\n", "stop", "=", "None", "\n", "print", "(", "'robot home = '", ",", "controller", ".", "is_home", "(", ")", ")", "\n", "if", "controller", ".", "is_home", "(", ")", ":", "\n", "# get images", "\n", "# move to images", "\n", "        ", "point", "=", "0", "\n", "for", "i", ",", "joints", "in", "enumerate", "(", "data", "[", "'joints'", "]", ")", ":", "\n", "\n", "            ", "while", "True", ":", "\n", "                ", "with", "open", "(", "state_path", ")", "as", "f", ":", "\n", "                    ", "state_check", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "state_check", "[", "'state'", "]", "==", "1", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "time", ".", "sleep", "(", "1", ")", "\n", "print", "(", "'paused'", ")", "\n", "\n", "", "", "print", "(", "'_______________________________________________'", ")", "\n", "print", "(", "'position: {}'", ".", "format", "(", "i", ")", ")", "\n", "\n", "\n", "if", "run", "!=", "'background'", "and", "int", "(", "data", "[", "'via_points'", "]", "[", "i", "]", ")", "==", "0", ":", "\n", "# take every second run an extra image", "\n", "                ", "stop", "=", "False", "\n", "thread", "=", "Thread", "(", "target", "=", "get_extra_samples", ",", "args", "=", "(", "lambda", ":", "stop", ",", "\n", "controller", ",", "\n", "DC", ",", "\n", "extra_save_dir", ",", "\n", "object_pose", ",", "\n", "symmetric", ",", "\n", "hand_eye_calibration", ",", "\n", "point", ",", "\n", "min_dist_travelled", ")", ")", "\n", "thread", ".", "daemon", "=", "False", "\n", "thread", ".", "start", "(", ")", "\n", "\n", "\n", "\n", "", "print", "(", "'start moving'", ")", "\n", "controller", ".", "move_joints", "(", "np", ".", "deg2rad", "(", "joints", ")", ",", "moveType", "=", "'p'", ",", "vel", "=", "vel", ")", "\n", "\n", "while", "(", "not", "controller", ".", "at_target", "(", "joints", ")", ")", "or", "controller", ".", "is_moving", "(", ")", ":", "\n", "                ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "\n", "", "if", "run", "!=", "'background'", "and", "int", "(", "data", "[", "'via_points'", "]", "[", "i", "]", ")", "==", "0", ":", "\n", "                ", "stop", "=", "True", "\n", "thread", ".", "join", "(", ")", "\n", "\n", "\n", "", "print", "(", "'at target'", ")", "\n", "\n", "if", "int", "(", "data", "[", "'via_points'", "]", "[", "i", "]", ")", "==", "0", ":", "\n", "                ", "time", ".", "sleep", "(", "0.5", ")", "\n", "meta", "=", "{", "}", "\n", "# get meta data", "\n", "meta", "[", "'joints'", "]", "=", "list", "(", "controller", ".", "get_joints", "(", ")", ")", "\n", "meta", "[", "'pose'", "]", "=", "controller", ".", "get_pose", "(", "return_mm", "=", "True", ")", "\n", "object_tf", "=", "np", ".", "identity", "(", "4", ")", "\n", "object_tf", "[", ":", "3", ",", ":", "3", "]", "=", "transforms3d", ".", "euler", ".", "euler2mat", "(", "np", ".", "deg2rad", "(", "object_pose", ".", "get", "(", "'a'", ")", ")", ",", "\n", "np", ".", "deg2rad", "(", "object_pose", ".", "get", "(", "'b'", ")", ")", ",", "\n", "np", ".", "deg2rad", "(", "object_pose", ".", "get", "(", "'c'", ")", ")", ")", "\n", "object_tf", "[", ":", "3", ",", "3", "]", "=", "[", "object_pose", ".", "get", "(", "'z'", ")", ",", "object_pose", ".", "get", "(", "'y'", ")", ",", "object_pose", ".", "get", "(", "'z'", ")", "]", "\n", "object_tf", "=", "list", "(", "object_tf", ".", "flatten", "(", ")", ")", "\n", "\n", "meta", "[", "'object_pose'", "]", "=", "object_tf", "\n", "r", "=", "[", "meta", "[", "'pose'", "]", "[", "'a'", "]", ",", "meta", "[", "'pose'", "]", "[", "'b'", "]", ",", "meta", "[", "'pose'", "]", "[", "'c'", "]", "]", "\n", "anlge", "=", "np", ".", "linalg", ".", "norm", "(", "r", ")", "\n", "axis", "=", "r", "/", "anlge", "\n", "trans_mat", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "trans_mat", "[", "3", ",", "3", "]", "=", "1", "\n", "trans_mat", "[", ":", "3", ",", ":", "3", "]", "=", "transforms3d", ".", "axangles", ".", "axangle2mat", "(", "axis", ",", "anlge", ")", "\n", "trans_mat", "[", ":", "3", ",", "3", "]", "=", "[", "meta", "[", "'pose'", "]", "[", "'x'", "]", ",", "meta", "[", "'pose'", "]", "[", "'y'", "]", ",", "meta", "[", "'pose'", "]", "[", "'z'", "]", "]", "\n", "trans_mat", "=", "trans_mat", ".", "flatten", "(", ")", "\n", "for", "value", "in", "range", "(", "len", "(", "trans_mat", ")", ")", ":", "\n", "                    ", "trans_mat", "[", "value", "]", "=", "float", "(", "trans_mat", "[", "value", "]", ")", "\n", "", "meta", "[", "'robot2endEff_tf'", "]", "=", "list", "(", "trans_mat", ")", "\n", "\n", "\n", "# get and write frames", "\n", "out", "=", "DC", ".", "get_frames", "(", "with_repair", "=", "True", ",", "secure_image", "=", "True", ")", "\n", "\n", "intr", "=", "DC", ".", "get_intrinsics", "(", ")", "\n", "meta", "[", "'intr'", "]", "=", "{", "'width'", ":", "intr", ".", "width", ",", "\n", "'height'", ":", "intr", ".", "height", ",", "\n", "'ppx'", ":", "intr", ".", "ppx", ",", "\n", "'ppy'", ":", "intr", ".", "ppy", ",", "\n", "'fx'", ":", "intr", ".", "fx", ",", "\n", "'fy'", ":", "intr", ".", "fy", ",", "\n", "'coeffs'", ":", "intr", ".", "coeffs", "\n", "}", "\n", "meta", "[", "'depth_scale'", "]", "=", "DC", ".", "get_depth_scale", "(", ")", "\n", "meta", "[", "'symmetric'", "]", "=", "symmetric", "\n", "meta", "[", "'hand_eye_calibration'", "]", "=", "hand_eye_calibration", "\n", "meta", "[", "'view_point_id'", "]", "=", "point", "\n", "imageio", ".", "imwrite", "(", "save_dir", "+", "'/{:06d}.color.png'", ".", "format", "(", "point", ")", ",", "out", "[", "'image'", "]", ")", "\n", "imageio", ".", "imwrite", "(", "save_dir", "+", "'/{:06d}.depth.png'", ".", "format", "(", "point", ")", ",", "out", "[", "'depth'", "]", ")", "\n", "with", "open", "(", "save_dir", "+", "'/{:06d}.meta.json'", ".", "format", "(", "point", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "json", ".", "dump", "(", "meta", ",", "f", ")", "\n", "", "point", "+=", "1", "\n", "print", "(", "'got data sample'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'via point'", ")", "\n", "\n", "", "", "moving_robot", "=", "False", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'robot not in home position'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.move_to_grasp_position": [[28, 45], ["print", "print", "controller.move_joints", "print", "controller.move_joints", "controller.is_home", "controller.is_home", "np.deg2rad", "controller.is_moving", "print", "time.sleep", "np.deg2rad", "controller.is_moving", "print", "time.sleep", "controller.at_target", "controller.at_target"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_home", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_home", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target"], ["def", "move_to_grasp_position", "(", "controller", ",", "vel", "=", "0.1", ")", ":", "\n", "    ", "print", "(", "'robot home = '", ",", "controller", ".", "is_home", "(", ")", ")", "\n", "if", "not", "controller", ".", "is_home", "(", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "print", "(", "'move to via point'", ")", "\n", "controller", ".", "move_joints", "(", "np", ".", "deg2rad", "(", "constraints", "[", "'via_point'", "]", "[", "1", "]", ")", ",", "moveType", "=", "'p'", ",", "vel", "=", "vel", ")", "\n", "while", "(", "not", "controller", ".", "at_target", "(", "constraints", "[", "'via_point'", "]", "[", "1", "]", ")", ")", "or", "controller", ".", "is_moving", "(", ")", ":", "\n", "        ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "", "print", "(", "'move to grasp position'", ")", "\n", "controller", ".", "move_joints", "(", "np", ".", "deg2rad", "(", "constraints", "[", "'grasp_pos'", "]", "[", "1", "]", ")", ",", "moveType", "=", "'p'", ",", "vel", "=", "vel", ")", "\n", "while", "(", "not", "controller", ".", "at_target", "(", "constraints", "[", "'grasp_pos'", "]", "[", "1", "]", ")", ")", "or", "controller", ".", "is_moving", "(", ")", ":", "\n", "        ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.move_home": [[47, 63], ["print", "controller.move_joints", "print", "controller.move_joints", "controller.at_target", "np.deg2rad", "controller.is_moving", "print", "time.sleep", "np.deg2rad", "controller.is_moving", "print", "time.sleep", "controller.at_target", "controller.at_target"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target"], ["", "def", "move_home", "(", "controller", ",", "vel", "=", "0.1", ")", ":", "\n", "    ", "if", "not", "controller", ".", "at_target", "(", "constraints", "[", "'grasp_pos'", "]", "[", "1", "]", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "print", "(", "'move to via point'", ")", "\n", "controller", ".", "move_joints", "(", "np", ".", "deg2rad", "(", "constraints", "[", "'via_point'", "]", "[", "1", "]", ")", ",", "moveType", "=", "'p'", ",", "vel", "=", "vel", ")", "\n", "while", "(", "not", "controller", ".", "at_target", "(", "constraints", "[", "'via_point'", "]", "[", "1", "]", ")", ")", "or", "controller", ".", "is_moving", "(", ")", ":", "\n", "        ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "", "print", "(", "'move to home'", ")", "\n", "controller", ".", "move_joints", "(", "np", ".", "deg2rad", "(", "constraints", "[", "'home'", "]", "[", "1", "]", ")", ",", "moveType", "=", "'p'", ",", "vel", "=", "vel", ")", "\n", "while", "(", "not", "controller", ".", "at_target", "(", "constraints", "[", "'home'", "]", "[", "1", "]", ")", ")", "or", "controller", ".", "is_moving", "(", ")", ":", "\n", "        ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.get_predictions": [[64, 107], ["enumerate", "print", "controller.move_joints", "predictions.keys", "controller.at_target", "print", "controller.move_joints", "DC.get_frames", "full_prediction", "get_robot2object", "np.deg2rad", "controller.is_moving", "print", "time.sleep", "np.mean", "np.mean", "np.deg2rad", "controller.is_moving", "print", "time.sleep", "[].append", "[].append", "controller.at_target", "len", "len", "del_keys.append", "np.array", "np.array", "len", "controller.at_target", "predictions.keys"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_frames", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.full_prediction", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_robot2object", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target"], ["", "def", "get_predictions", "(", "controller", ",", "DC", ",", "end2cam", ",", "prediction_dict", ",", "vel", "=", "0.1", ")", ":", "\n", "    ", "predictions", "=", "{", "}", "\n", "if", "not", "controller", ".", "at_target", "(", "constraints", "[", "'grasp_pos'", "]", "[", "1", "]", ")", ":", "\n", "        ", "return", "False", ",", "predictions", "\n", "\n", "", "for", "i", ",", "joints", "in", "enumerate", "(", "constraints", "[", "'view_points'", "]", ")", ":", "\n", "\n", "        ", "print", "(", "'move to view point {}/{}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "constraints", "[", "'view_points'", "]", ")", ")", ")", "\n", "controller", ".", "move_joints", "(", "np", ".", "deg2rad", "(", "joints", "[", "1", "]", ")", ",", "moveType", "=", "'p'", ",", "vel", "=", "vel", ")", "\n", "while", "(", "not", "controller", ".", "at_target", "(", "joints", "[", "1", "]", ")", ")", "or", "controller", ".", "is_moving", "(", ")", ":", "\n", "            ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "", "cam_data", "=", "DC", ".", "get_frames", "(", ")", "\n", "prediction", "=", "full_prediction", "(", "cam_data", "[", "'image'", "]", ",", "cam_data", "[", "'depth'", "]", ",", "**", "prediction_dict", ")", "\n", "prediction", "=", "get_robot2object", "(", "prediction", ",", "controller", ",", "end2cam", ")", "\n", "\n", "for", "cls", "in", "prediction", "[", "'predictions'", "]", ":", "\n", "            ", "if", "cls", "not", "in", "predictions", ".", "keys", "(", ")", ":", "\n", "                ", "predictions", "[", "cls", "]", "=", "{", "'position'", ":", "[", "]", ",", "\n", "'rotation'", ":", "[", "]", "}", "\n", "", "predictions", "[", "cls", "]", "[", "'position'", "]", ".", "append", "(", "prediction", "[", "'predictions'", "]", "[", "cls", "]", "[", "'position'", "]", ")", "\n", "predictions", "[", "cls", "]", "[", "'rotation'", "]", ".", "append", "(", "prediction", "[", "'predictions'", "]", "[", "cls", "]", "[", "'rotation'", "]", ")", "\n", "\n", "", "", "print", "(", "'move to grasp position'", ")", "\n", "controller", ".", "move_joints", "(", "np", ".", "deg2rad", "(", "constraints", "[", "'grasp_pos'", "]", "[", "1", "]", ")", ",", "moveType", "=", "'p'", ",", "vel", "=", "vel", ")", "\n", "while", "(", "not", "controller", ".", "at_target", "(", "constraints", "[", "'grasp_pos'", "]", "[", "1", "]", ")", ")", "or", "controller", ".", "is_moving", "(", ")", ":", "\n", "        ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "", "del_keys", "=", "[", "]", "\n", "for", "cls", "in", "predictions", ".", "keys", "(", ")", ":", "\n", "        ", "if", "len", "(", "predictions", "[", "cls", "]", "[", "'position'", "]", ")", "!=", "len", "(", "constraints", "[", "'view_points'", "]", ")", ":", "\n", "            ", "del_keys", ".", "append", "(", "cls", ")", "\n", "continue", "\n", "\n", "", "predictions", "[", "cls", "]", "[", "'position'", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "predictions", "[", "cls", "]", "[", "'position'", "]", ")", ",", "axis", "=", "0", ")", "\n", "predictions", "[", "cls", "]", "[", "'rotation'", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "predictions", "[", "cls", "]", "[", "'rotation'", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "key", "in", "del_keys", ":", "\n", "        ", "del", "predictions", "[", "key", "]", "\n", "\n", "", "return", "True", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.check_object_position_constraints": [[108, 133], ["print", "print", "print"], "function", ["None"], ["", "def", "check_object_position_constraints", "(", "pos", ")", ":", "\n", "    ", "in_x", "=", "False", "\n", "in_y", "=", "False", "\n", "in_z", "=", "False", "\n", "if", "constraints", "[", "'max_x'", "]", ">", "pos", "[", "0", "]", ">", "constraints", "[", "'min_x'", "]", ":", "\n", "        ", "in_x", "=", "True", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not in x, x = {}, max_x = {}, min_x = {}'", ".", "format", "(", "pos", "[", "0", "]", ",", "constraints", "[", "'max_x'", "]", ",", "constraints", "[", "'min_x'", "]", ")", ")", "\n", "\n", "", "if", "constraints", "[", "'max_y'", "]", ">", "pos", "[", "1", "]", ">", "constraints", "[", "'min_y'", "]", ":", "\n", "        ", "in_y", "=", "True", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not in y, y = {}, max_y = {}, min_y = {}'", ".", "format", "(", "pos", "[", "1", "]", ",", "constraints", "[", "'max_y'", "]", ",", "constraints", "[", "'min_y'", "]", ")", ")", "\n", "\n", "", "if", "constraints", "[", "'max_z'", "]", ">", "pos", "[", "2", "]", ">", "constraints", "[", "'min_z'", "]", ":", "\n", "        ", "in_z", "=", "True", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not in z, z = {}, max_z = {}, min_z = {}'", ".", "format", "(", "pos", "[", "2", "]", ",", "constraints", "[", "'max_z'", "]", ",", "constraints", "[", "'min_z'", "]", ")", ")", "\n", "\n", "", "if", "in_x", "and", "in_y", "and", "in_z", ":", "\n", "        ", "check", "=", "True", "\n", "", "else", ":", "\n", "        ", "check", "=", "False", "\n", "\n", "", "return", "check", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.approach_object": [[135, 158], ["get_True_or_False", "controller.move_to_pose", "controller.is_moving", "grasping_utils.check_object_position_constraints", "print", "print", "time.sleep"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.check_object_position_constraints"], ["", "def", "approach_object", "(", "pos", ",", "rotation", ",", "controller", ",", "moveType", "=", "'p'", ",", "vel", "=", "0.1", ",", "acc", "=", "0.1", ")", ":", "\n", "    ", "if", "not", "check_object_position_constraints", "(", "pos", ")", ":", "\n", "        ", "print", "(", "'The object does not fulfill the position constraints'", ")", "\n", "return", "False", "\n", "\n", "", "pose", "=", "{", "\n", "'x'", ":", "pos", "[", "0", "]", ",", "\n", "'y'", ":", "pos", "[", "1", "]", ",", "\n", "'z'", ":", "pos", "[", "2", "]", "+", "constraints", "[", "'approach_dist'", "]", ",", "\n", "'a'", ":", "rotation", "[", "0", "]", ",", "\n", "'b'", ":", "rotation", "[", "1", "]", ",", "\n", "'c'", ":", "rotation", "[", "2", "]", ",", "\n", "}", "\n", "\n", "move_to_pose", ",", "move_on", "=", "get_True_or_False", "(", "'Move to pose {}'", ".", "format", "(", "pose", ")", ",", "default", "=", "True", ")", "\n", "if", "not", "move_to_pose", "or", "not", "move_on", ":", "\n", "        ", "return", "False", "\n", "\n", "", "controller", ".", "move_to_pose", "(", "pose", ",", "moveType", "=", "moveType", ",", "vel", "=", "vel", ",", "acc", "=", "acc", ")", "\n", "while", "controller", ".", "is_moving", "(", ")", ":", "\n", "        ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.return_2_grasp_position": [[160, 167], ["print", "controller.move_joints", "np.deg2rad", "controller.is_moving", "print", "time.sleep", "controller.at_target"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target"], ["", "def", "return_2_grasp_position", "(", "controller", ",", "vel", "=", "0.1", ")", ":", "\n", "    ", "print", "(", "'move to grasp position'", ")", "\n", "controller", ".", "move_joints", "(", "np", ".", "deg2rad", "(", "constraints", "[", "'grasp_pos'", "]", "[", "1", "]", ")", ",", "moveType", "=", "'p'", ",", "vel", "=", "vel", ")", "\n", "while", "(", "not", "controller", ".", "at_target", "(", "constraints", "[", "'grasp_pos'", "]", "[", "1", "]", ")", ")", "or", "controller", ".", "is_moving", "(", ")", ":", "\n", "        ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.move_down": [[169, 189], ["get_True_or_False", "controller.move_to_pose", "controller.is_moving", "print", "time.sleep"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving"], ["", "def", "move_down", "(", "pos", ",", "rotation", ",", "controller", ",", "moveType", "=", "'l'", ",", "vel", "=", "0.1", ",", "acc", "=", "0.1", ")", ":", "\n", "    ", "pose", "=", "{", "\n", "'x'", ":", "pos", "[", "0", "]", ",", "\n", "'y'", ":", "pos", "[", "1", "]", ",", "\n", "'z'", ":", "pos", "[", "2", "]", ",", "\n", "'a'", ":", "rotation", "[", "0", "]", ",", "\n", "'b'", ":", "rotation", "[", "1", "]", ",", "\n", "'c'", ":", "rotation", "[", "2", "]", ",", "\n", "}", "\n", "\n", "move_to_pose", ",", "move_on", "=", "get_True_or_False", "(", "'Move to pose {}'", ".", "format", "(", "pose", ")", ",", "default", "=", "True", ")", "\n", "if", "not", "move_to_pose", "or", "not", "move_on", ":", "\n", "        ", "return", "False", "\n", "\n", "", "controller", ".", "move_to_pose", "(", "pose", ",", "moveType", "=", "moveType", ",", "vel", "=", "vel", ",", "acc", "=", "acc", ")", "\n", "while", "controller", ".", "is_moving", "(", ")", ":", "\n", "        ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.grasping_utils.main": [[190, 224], ["robot_controller.TestController.RobotController", "print", "robot_controller.TestController.RobotController.get_pose", "np.linalg.norm", "np.zeros", "transforms3d.axangles.axangle2mat", "np.rad2deg", "transforms3d.axangles.mat2axangle", "transforms3d.euler.euler2mat", "np.rad2deg", "np.dot", "np.rad2deg", "transforms3d.axangles.mat2axangle", "print", "print", "print", "print", "print", "print", "time.sleep", "transforms3d.euler.mat2euler", "transforms3d.euler.mat2euler", "np.linalg.inv", "transforms3d.euler.mat2euler", "np.deg2rad"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose"], ["", "def", "main", "(", ")", ":", "\n", "    ", "controller", "=", "RobotController", "(", ")", "\n", "while", "True", ":", "\n", "        ", "print", "(", "'______________________________________________________________________________________________'", ")", "\n", "\n", "\n", "pose", "=", "controller", ".", "get_pose", "(", "return_mm", "=", "True", ")", "\n", "r", "=", "[", "pose", "[", "'a'", "]", ",", "pose", "[", "'b'", "]", ",", "pose", "[", "'c'", "]", "]", "\n", "anlge", "=", "np", ".", "linalg", ".", "norm", "(", "r", ")", "\n", "axis", "=", "r", "/", "anlge", "\n", "robot2end", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "robot2end", "[", "3", ",", "3", "]", "=", "1", "\n", "robot2end", "[", ":", "3", ",", ":", "3", "]", "=", "transforms3d", ".", "axangles", ".", "axangle2mat", "(", "axis", ",", "anlge", ")", "\n", "robot2end", "[", ":", "3", ",", "3", "]", "=", "[", "pose", "[", "'x'", "]", ",", "pose", "[", "'y'", "]", ",", "pose", "[", "'z'", "]", "]", "\n", "euler", "=", "np", ".", "rad2deg", "(", "transforms3d", ".", "euler", ".", "mat2euler", "(", "robot2end", "[", ":", "3", ",", ":", "3", "]", ")", ")", "\n", "axis", ",", "angle", "=", "transforms3d", ".", "axangles", ".", "mat2axangle", "(", "robot2end", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "r1", "=", "axis", "*", "angle", "\n", "\n", "tf", "=", "transforms3d", ".", "euler", ".", "euler2mat", "(", "*", "np", ".", "deg2rad", "(", "[", "0", ",", "0", ",", "180", "]", ")", ")", "\n", "euler1", "=", "np", ".", "rad2deg", "(", "transforms3d", ".", "euler", ".", "mat2euler", "(", "tf", ")", ")", "\n", "tf", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "tf", ")", ",", "robot2end", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "euler2", "=", "np", ".", "rad2deg", "(", "transforms3d", ".", "euler", ".", "mat2euler", "(", "tf", ")", ")", "\n", "axis", ",", "angle", "=", "transforms3d", ".", "axangles", ".", "mat2axangle", "(", "tf", ")", "\n", "r2", "=", "axis", "*", "angle", "\n", "\n", "#print('joints', controller.get_joints())", "\n", "print", "(", "'r'", ",", "r", ")", "\n", "print", "(", "'r1'", ",", "r1", ")", "\n", "print", "(", "'r2'", ",", "r2", ")", "\n", "print", "(", "'euler'", ",", "euler", ")", "\n", "print", "(", "'euler1'", ",", "euler1", ")", "\n", "print", "(", "'euler2'", ",", "euler2", ")", "\n", "#print('rot mat', robot2end[:3, :3])", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.CancellationToken.__init__": [[186, 188], ["None"], "methods", ["None"], ["assert", "(", "target", ".", "sum", "(", "1", ")", "==", "1", ")", ".", "all", "(", ")", ",", "'multi-label setting is not supported'", "\n", "target", "=", "np", ".", "argmax", "(", "target", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.CancellationToken.cancel": [[189, 191], ["None"], "methods", ["None"], ["", "else", ":", "\n", "            ", "assert", "(", "target", ".", "max", "(", ")", "<", "self", ".", "num_classes", ")", "and", "(", "target", ".", "min", "(", ")", ">=", "0", ")", ",", "'target values are not between 0 and k-1'", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection": [[24, 120], ["enumerate", "options_list.append", "input", "input", "list", "int", "len", "numpy.unique", "print", "print", "len", "print", "len", "selections.append", "len", "numpy.sum", "print", "print", "int", "selections.append", "int", "len"], "function", ["None"], ["\n", "", "", "class", "rotate", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "rotation", "=", "transforms", ".", "functional", ".", "rotate", "\n", "self", ".", "range", "=", "[", "-", "180", ",", "180", "]", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "image", ",", "label", "=", "data", "\n", "angle", "=", "random", ".", "uniform", "(", "self", ".", "range", "[", "0", "]", ",", "self", ".", "range", "[", "1", "]", ")", "\n", "image", "=", "self", ".", "rotation", "(", "image", ",", "angle", ")", "\n", "label", "=", "self", ".", "rotation", "(", "label", ",", "angle", ")", "\n", "return", "image", ",", "label", "\n", "\n", "", "", "class", "colorJitter", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "ColorJitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.2", ",", "\n", "contrast", "=", "0.2", ",", "\n", "saturation", "=", "0.2", ",", "\n", "hue", "=", "0.05", ")", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "ColorJitter", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "normalize", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "normalize", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "toTensor", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "label", "=", "label", ".", "long", "(", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "\n", "\n", "\n", "", "", "def", "jaccard_loss", "(", "true", ",", "logits", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"Computes the Jaccard loss, a.k.a the IoU loss.\n    Note that PyTorch optimizers minimize a loss. In this\n    case, we would like to maximize the jaccard loss so we\n    return the negated jaccard loss.\n    Args:\n        true: a tensor of shape [B, H, W] or [B, 1, H, W].\n        logits: a tensor of shape [B, C, H, W]. Corresponds to\n            the raw output or logits of the model.\n        eps: added to the denominator for numerical stability.\n    Returns:\n        jacc_loss: the Jaccard loss.\n    \"\"\"", "\n", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "# unique = torch.unique(true)[1:]", "\n", "unique", "=", "torch", ".", "unique", "(", "true", ")", "\n", "#print('unique', unique)", "\n", "if", "num_classes", "==", "1", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", "+", "1", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "true_1_hot_f", "=", "true_1_hot", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "true_1_hot_s", "=", "true_1_hot", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "true_1_hot", "=", "torch", ".", "cat", "(", "[", "true_1_hot_s", ",", "true_1_hot_f", "]", ",", "dim", "=", "1", ")", "\n", "pos_prob", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "neg_prob", "=", "1", "-", "pos_prob", "\n", "probas", "=", "torch", ".", "cat", "(", "[", "pos_prob", ",", "neg_prob", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "probas", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "true_1_hot", "=", "true_1_hot", ".", "type", "(", "logits", ".", "type", "(", ")", ")", "\n", "dims", "=", "(", "0", ",", ")", "+", "tuple", "(", "range", "(", "2", ",", "true", ".", "ndimension", "(", ")", ")", ")", "\n", "intersection", "=", "torch", ".", "sum", "(", "probas", "*", "true_1_hot", ",", "dims", ")", "\n", "cardinality", "=", "torch", ".", "sum", "(", "probas", "+", "true_1_hot", ",", "dims", ")", "\n", "union", "=", "cardinality", "-", "intersection", "\n", "#jacc_loss = (intersection / (union + eps)).mean()", "\n", "jacc_loss", "=", "(", "intersection", "/", "(", "union", "+", "eps", ")", ")", "\n", "#print('jacc_loss', jacc_loss, jacc_loss.shape)", "\n", "#print(jacc_loss.mean(dim=1), jacc_loss.mean(dim=1).shape, jacc_loss.mean())", "\n", "jacc_loss", "=", "jacc_loss", "[", "unique", "]", "\n", "jacc_loss", "=", "jacc_loss", ".", "mean", "(", ")", "\n", "#print('mean', jacc_loss)", "\n", "#print('out', (1 - jacc_loss))", "\n", "return", "(", "1", "-", "jacc_loss", ")", "\n", "\n", "\n", "", "class", "Metric", "(", "object", ")", ":", "\n", "    ", "\"\"\"Base class for all metrics.\n    From: https://github.com/pytorch/tnt/blob/master/torchnet/meter/meter.py\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.visualise_pointcloud": [[122, 158], ["os.path.join", "sorted", "print", "os.listdir", "len", "print", "print", "utils.get_selection", "os.path.join", "sorted", "len", "print", "print", "utils.get_selection", "os.path.join", "open3d.io.read_point_cloud", "numpy.array", "numpy.round", "numpy.round", "numpy.round", "print", "open3d.visualization.draw_geometries", "os.listdir", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection"], ["        ", "pass", "\n", "\n", "", "def", "add", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "class", "ConfusionMatrix", "(", "Metric", ")", ":", "\n", "    ", "\"\"\"Constructs a confusion matrix for a multi-class classification problems.\n    Does not support multi-label, multi-class problems.\n    Keyword arguments:\n    - num_classes (int): number of classes in the classification problem.\n    - normalized (boolean, optional): Determines whether or not the confusion\n    matrix is normalized or not. Default: False.\n    Modified from: https://github.com/pytorch/tnt/blob/master/torchnet/meter/confusionmeter.py\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "num_classes", ",", "normalized", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conf", "=", "np", ".", "ndarray", "(", "(", "num_classes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "normalized", "=", "normalized", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf", ".", "fill", "(", "0", ")", "\n", "\n", "", "def", "add", "(", "self", ",", "predicted", ",", "target", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_True_or_False": [[160, 183], ["input", "input", "input", "print", "print"], "function", ["None"], ["\n", "# If target and/or predicted are tensors, convert them to numpy arrays", "\n", "if", "torch", ".", "is_tensor", "(", "predicted", ")", ":", "\n", "            ", "predicted", "=", "predicted", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "            ", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "assert", "predicted", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ",", "'number of targets and predicted outputs do not match'", "\n", "\n", "if", "np", ".", "ndim", "(", "predicted", ")", "!=", "1", ":", "\n", "            ", "assert", "predicted", ".", "shape", "[", "1", "]", "==", "self", ".", "num_classes", ",", "'number of predictions does not match size of confusion matrix'", "\n", "predicted", "=", "np", ".", "argmax", "(", "predicted", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "predicted", ".", "max", "(", ")", "<", "self", ".", "num_classes", ")", "and", "(", "predicted", ".", "min", "(", ")", ">=", "0", ")", ",", "'predicted values are not between 0 and k-1'", "\n", "\n", "", "if", "np", ".", "ndim", "(", "target", ")", "!=", "1", ":", "\n", "            ", "assert", "target", ".", "shape", "[", "1", "]", "==", "self", ".", "num_classes", ",", "'Onehot target does not match size of confusion matrix'", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.stop_visualise": [[192, 197], ["input", "cancellationToken.cancel", "matplotlib.close", "print"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.CancellationToken.cancel", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close"], ["\n", "# hack for bincounting 2 arrays together", "\n", "", "x", "=", "predicted", "+", "self", ".", "num_classes", "*", "target", "\n", "bincount_2d", "=", "np", ".", "bincount", "(", "\n", "x", ".", "astype", "(", "np", ".", "int32", ")", ",", "minlength", "=", "self", ".", "num_classes", "**", "2", ")", "\n", "assert", "bincount_2d", ".", "size", "==", "self", ".", "num_classes", "**", "2", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.visualise_segmentation_maks": [[199, 300], ["os.path.join", "sorted", "print", "os.listdir", "len", "print", "print", "utils.get_selection", "os.path.join", "sorted", "os.listdir", "print", "print", "utils.get_selection", "os.path.join", "list", "os.listdir", "print", "print", "len", "numpy.array", "numpy.random.shuffle", "os.path.join", "os.path.join", "utils.CancellationToken", "threading.Thread", "threading.Thread.start", "sorted.append", "sorted.append", "sorted.append", "len", "print", "sorted", "utils.get_selection", "matplotlib.cla", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "copy.deepcopy", "numpy.zeros", "numpy.array", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.show", "len", "open", "numpy.array", "open", "numpy.array", "os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["\n", "self", ".", "conf", "+=", "conf", "\n", "\n", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            Confustion matrix of K rows and K columns, where rows corresponds\n            to ground-truth targets and columns corresponds to predicted\n            targets.\n        \"\"\"", "\n", "if", "self", ".", "normalized", ":", "\n", "            ", "conf", "=", "self", ".", "conf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "conf", "/", "conf", ".", "sum", "(", "1", ")", ".", "clip", "(", "min", "=", "1e-12", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conf", "\n", "\n", "\n", "\n", "", "", "", "class", "IoU", "(", "Metric", ")", ":", "\n", "    ", "\"\"\"Computes the intersection over union (IoU) per class and corresponding\n    mean (mIoU).\n    Intersection over union (IoU) is a common evaluation metric for semantic\n    segmentation. The predictions are first accumulated in a confusion matrix\n    and the IoU is computed from it as follows:\n        IoU = true_positive / (true_positive + false_positive + false_negative).\n    Keyword arguments:\n    - num_classes (int): number of classes in the classification problem\n    - normalized (boolean, optional): Determines whether or not the confusion\n    matrix is normalized or not. Default: False.\n    - ignore_index (int or iterable, optional): Index of the classes to ignore\n    when computing the IoU. Can be an int, or any iterable of ints.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "num_classes", ",", "normalized", "=", "False", ",", "ignore_index", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conf_metric", "=", "ConfusionMatrix", "(", "num_classes", ",", "normalized", ")", "\n", "\n", "if", "ignore_index", "is", "None", ":", "\n", "            ", "self", ".", "ignore_index", "=", "None", "\n", "", "elif", "isinstance", "(", "ignore_index", ",", "int", ")", ":", "\n", "            ", "self", ".", "ignore_index", "=", "(", "ignore_index", ",", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "ignore_index", "=", "tuple", "(", "ignore_index", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "raise", "ValueError", "(", "\"'ignore_index' must be an int or iterable\"", ")", "\n", "\n", "", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf_metric", ".", "reset", "(", ")", "\n", "\n", "", "def", "add", "(", "self", ",", "predicted", ",", "target", ")", ":", "\n", "        ", "\"\"\"Adds the predicted and target pair to the IoU metric.\n        Keyword arguments:\n        - predicted (Tensor): Can be a (N, K, H, W) tensor of\n        predicted scores obtained from the model for N examples and K classes,\n        or (N, H, W) tensor of integer values between 0 and K-1.\n        - target (Tensor): Can be a (N, K, H, W) tensor of\n        target scores for N examples and K classes, or (N, H, W) tensor of\n        integer values between 0 and K-1.\n        \"\"\"", "\n", "# Dimensions check", "\n", "assert", "predicted", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "'number of targets and predicted outputs do not match'", "\n", "assert", "predicted", ".", "dim", "(", ")", "==", "3", "or", "predicted", ".", "dim", "(", ")", "==", "4", ",", "\"predictions must be of dimension (N, H, W) or (N, K, H, W)\"", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "or", "target", ".", "dim", "(", ")", "==", "4", ",", "\"targets must be of dimension (N, H, W) or (N, K, H, W)\"", "\n", "\n", "# If the tensor is in categorical format convert it to integer format", "\n", "if", "predicted", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "_", ",", "predicted", "=", "predicted", ".", "max", "(", "1", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "_", ",", "target", "=", "target", ".", "max", "(", "1", ")", "\n", "\n", "", "self", ".", "conf_metric", ".", "add", "(", "predicted", ".", "view", "(", "-", "1", ")", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the IoU and mean IoU.\n        The mean computation ignores NaN elements of the IoU array.\n        Returns:\n            Tuple: (IoU, mIoU). The first output is the per class IoU,\n            for K classes it's numpy.ndarray with K elements. The second output,\n            is the mean IoU.\n        \"\"\"", "\n", "conf_matrix", "=", "self", ".", "conf_metric", ".", "value", "(", ")", "\n", "if", "self", ".", "ignore_index", "is", "not", "None", ":", "\n", "            ", "for", "index", "in", "self", ".", "ignore_index", ":", "\n", "                ", "conf_matrix", "[", ":", ",", "self", ".", "ignore_index", "]", "=", "0", "\n", "conf_matrix", "[", "self", ".", "ignore_index", ",", ":", "]", "=", "0", "\n", "", "", "true_positive", "=", "np", ".", "diag", "(", "conf_matrix", ")", "\n", "false_positive", "=", "np", ".", "sum", "(", "conf_matrix", ",", "0", ")", "-", "true_positive", "\n", "false_negative", "=", "np", ".", "sum", "(", "conf_matrix", ",", "1", ")", "-", "true_positive", "\n", "\n", "# Just in case we get a division by 0, ignore/hide the error", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "            ", "iou", "=", "true_positive", "/", "(", "true_positive", "+", "false_positive", "+", "false_negative", ")", "\n", "\n", "", "return", "iou", ",", "np", ".", "nanmean", "(", "iou", "[", "1", ":", "]", ")", "\n", "\n", "", "", "def", "animate", "(", "i", ",", "fig", ",", "axs", ",", "path", ",", "mean_cca", "=", "True", ")", ":", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.visualise_pose_label": [[302, 379], ["os.path.join", "sorted", "print", "os.listdir", "len", "print", "print", "utils.get_selection", "os.path.join", "sorted", "os.listdir", "print", "print", "utils.get_selection", "os.path.join", "list", "len", "numpy.array", "numpy.random.shuffle", "os.path.join", "os.path.join", "utils.CancellationToken", "threading.Thread", "threading.Thread.start", "os.listdir", "print", "numpy.identity", "open3d.io.read_point_cloud", "o3d.io.read_point_cloud.transform", "pc_reconstruction.pointcloud2image", "matplotlib.cla", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.show", "open", "numpy.array", "open", "json.load", "json.load.get", "open", "json.load", "numpy.array", "numpy.array().reshape", "copy.deepcopy", "os.path.join", "PIL.Image.open().convert", "os.path.join", "os.path.join", "json.load.get", "numpy.array", "PIL.Image.open", "json.load.get"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_selection", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["        ", "config", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "plt", ".", "cla", "(", ")", "\n", "fig", ".", "suptitle", "(", "'Best mIou: {} in epoch: {}'", ".", "format", "(", "np", ".", "round", "(", "config", "[", "'best_iou_score'", "]", ",", "4", ")", ",", "config", "[", "'best_iou_score_epoch'", "]", ")", ",", "fontsize", "=", "16", ")", "\n", "axs", "[", "0", "]", ".", "plot", "(", "config", "[", "'losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "0", "]", ".", "set_title", "(", "'jaccard loss'", ")", "\n", "axs", "[", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", "]", ".", "plot", "(", "config", "[", "'iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "1", "]", ".", "set_title", "(", "'mean IoU'", ")", "\n", "axs", "[", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "if", "mean_cca", ":", "\n", "        ", "axs", "[", "2", "]", ".", "plot", "(", "config", "[", "'iou_cca_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "2", "]", ".", "set_title", "(", "'mean cca IoU'", ")", "\n", "axs", "[", "2", "]", ".", "set_ylabel", "(", "'cca mIoU'", ")", "\n", "axs", "[", "2", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "", "", "def", "animate2", "(", "i", ",", "fig", ",", "axs", ",", "path", ")", ":", "\n", "\n", "\n", "    ", "with", "open", "(", "path", ")", "as", "json_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "plt", ".", "cla", "(", ")", "\n", "fig", ".", "suptitle", "(", "'Best mIou: {} in epoch: {}'", ".", "format", "(", "np", ".", "round", "(", "config", "[", "'best_iou_score'", "]", ",", "4", ")", ",", "config", "[", "'best_iou_score_epoch'", "]", ")", ",", "fontsize", "=", "16", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "plot", "(", "config", "[", "'train_losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_title", "(", "'train jaccard loss'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "0", ",", "1", "]", ".", "plot", "(", "config", "[", "'train_iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_title", "(", "'train mean IoU'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", ",", "0", "]", ".", "plot", "(", "config", "[", "'valid_losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_title", "(", "'valid jaccard loss'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", ",", "1", "]", ".", "plot", "(", "config", "[", "'valid_iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_title", "(", "'valid mean IoU'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "\n", "\n", "", "nets", "=", "{", "'Unet'", ":", "smp", ".", "Unet", ",", "\n", "'PsPNet'", ":", "smp", ".", "PSPNet", ",", "\n", "'LinkNet'", ":", "smp", ".", "Linknet", "}", "\n", "\n", "def", "get_model", "(", "name", ",", "segmentation_config", ")", ":", "\n", "    ", "model", "=", "nets", "[", "name", "]", "\n", "model", "=", "model", "(", "**", "segmentation_config", ")", "\n", "return", "model", "\n", "\n", "", "class", "CropAndZoom", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "bbox_increase", "=", "1.1", "\n", "self", ".", "to_small", "=", "0.8", "\n", "self", ".", "to_big", "=", "1.2", "\n", "self", ".", "size", "=", "False", "\n", "self", ".", "output_size", "=", "480", "\n", "self", ".", "max_zoom", "=", "2", "\n", "self", ".", "max_l", "=", "480", "\n", "self", ".", "min_l", "=", "int", "(", "float", "(", "self", ".", "output_size", ")", "/", "self", ".", "max_zoom", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "image_PIL", ",", "label_PIL", "=", "data", "\n", "label", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "label_PIL", ")", ")", "\n", "# get some variables", "\n", "self", ".", "size", "=", "label", ".", "shape", "# height, width", "\n", "extreme_points", "=", "self", ".", "get_extreme_points", "(", "label", ")", "\n", "h", ",", "w", ",", "c", "=", "self", ".", "get_size", "(", "extreme_points", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_robot2object": [[381, 409], ["len", "controller.get_pose", "numpy.linalg.norm", "numpy.zeros", "transforms3d.axangles.axangle2mat", "numpy.dot", "prediction[].keys", "numpy.zeros", "numpy.dot", "transforms3d.quaternions.mat2quat", "print", "transforms3d.quaternions.quat2mat", "print"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose"], ["w_ratio", "=", "float", "(", "w", ")", "/", "float", "(", "self", ".", "output_size", ")", "\n", "h_w_ratio", "=", "h_ratio", "/", "w_ratio", "\n", "ls", "=", "[", "h", ",", "w", "]", "\n", "bigger", "=", "0", "\n", "if", "w_ratio", ">", "h_ratio", ":", "\n", "            ", "bigger", "=", "1", "\n", "\n", "# create bbox", "\n", "", "bbox", "=", "self", ".", "get_bbox", "(", "c", ",", "ls", "[", "bigger", "]", "*", "self", ".", "bbox_increase", ")", "\n", "bbox", "=", "self", ".", "random_zoom", "(", "bbox", ")", "\n", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "# height = width", "\n", "\n", "# adapt bbox", "\n", "if", "h_w_ratio", "<=", "self", ".", "to_big", "and", "h_w_ratio", ">=", "self", ".", "to_small", ":", "\n", "# case: square", "\n", "            ", "if", "bbox_h", "<=", "self", ".", "size", "[", "0", "]", "and", "bbox_w", "<=", "self", ".", "size", "[", "0", "]", ":", "\n", "# if the bbox is not to big, ensure that it is inside the image", "\n", "                ", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "", "else", ":", "\n", "# if the box is to big, slide random along the horizontal axis of the bbox and then create it as big as", "\n", "# possible and ensure that it is inside the image", "\n", "                ", "bbox_c", "[", "1", "]", "=", "int", "(", "bbox_c", "[", "1", "]", "-", "(", "w", "/", "2", ")", ")", "+", "np", ".", "random", ".", "randint", "(", "0", ",", "w", ")", "\n", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "size", "[", "0", "]", "-", "2", ")", "\n", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "", "", "else", ":", "\n", "# case: rectangular", "\n", "# slide the bbox randomly along the bigger axis", "\n", "            ", "bbox_c", "[", "bigger", "]", "=", "int", "(", "bbox_c", "[", "bigger", "]", "-", "(", "ls", "[", "bigger", "]", "/", "2", ")", ")", "+", "np", ".", "random", ".", "randint", "(", "0", ",", "ls", "[", "bigger", "]", ")", "\n", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "bbox_h", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.full_prediction": [[410, 642], ["time.time", "copy.deepcopy", "to_tensor", "normalize", "x.unsqueeze.to", "x.unsqueeze.unsqueeze", "segmentor.predict", "torch.nn.functional.softmax", "torch.argmax().numpy", "numpy.unique", "enumerate", "time.time", "numpy.array", "numpy.array", "output_dict[].keys", "numpy.array", "numpy.array", "pred.cpu.cpu", "numpy.array", "time.time", "numpy.getmaskarray", "DenseFusion.datasets.myDatasetAugmented.dataset.get_bbox", "numpy.getmaskarray", "[].astype", "[].astype", "[].astype", "numpy.array", "numpy.concatenate", "torch.from_numpy().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "normalize().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "estimator", "DenseFusion.tools.utils.get_new_points", "DenseFusion.tools.utils.my_estimator_prediction", "range", "DenseFusion.tools.utils.my_refined_prediction", "numpy.array", "time.time", "matplotlib.subplots", "fig.suptitle", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.show", "print", "time.time", "copy.deepcopy", "copy.deepcopy", "torch.argmax", "copy.deepcopy", "cv2.connectedComponents", "numpy.unique", "numpy.array", "numpy.masked_equal", "numpy.masked_not_equal", "mask[].flatten().nonzero", "len", "len", "numpy.zeros", "numpy.random.shuffle", "numpy.pad", "numpy.transpose", "refiner", "numpy.dot", "numpy.add", "pc_reconstruction.pointcloud2image", "del_keys.append", "pred[].numpy", "numpy.array", "numpy.mean", "enumerate", "range", "range", "len", "torch.from_numpy().unsqueeze", "torch.LongTensor().unsqueeze", "normalize().unsqueeze", "torch.LongTensor().unsqueeze", "DenseFusion.lib.transformations.quaternion_matrix", "del_keys.append", "numpy.zeros", "DenseFusion.datasets.myDatasetAugmented.dataset.get_bbox", "cv2.rectangle", "DenseFusion.datasets.myDatasetAugmented.dataset.get_bbox", "range", "range", "mask[].flatten", "np.zeros.nonzero", "numpy.array", "cv2.putText", "del_keys.append", "cv2.putText", "cv2.putText", "len", "depth[].flatten", "xmap[].flatten", "ymap[].flatten", "torch.from_numpy", "torch.LongTensor", "normalize", "torch.LongTensor", "class_names.index", "torch.from_numpy().unsqueeze().to.astype", "np.pad.astype", "torch.from_numpy", "normalize().unsqueeze().to.astype", "int", "class_names.index"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.utils.get_new_points", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.utils.my_estimator_prediction", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.utils.my_refined_prediction", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.connectedComponents", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.lib.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.tools.eval.get_bbox"], ["bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "# height = width", "\n", "\n", "if", "bbox_h", "<=", "self", ".", "size", "[", "0", "]", "and", "bbox_w", "<=", "self", ".", "size", "[", "0", "]", ":", "\n", "# if the bbox is not to big, ensure that it is inside the image", "\n", "                ", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "size", "[", "0", "]", "-", "2", ")", "\n", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "\n", "# create patch and set label id", "\n", "", "", "image_PIL", "=", "image_PIL", ".", "crop", "(", "box", "=", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", ",", "bbox", "[", "1", "]", "]", ")", "\n", "label_PIL", "=", "label_PIL", ".", "crop", "(", "box", "=", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", ",", "bbox", "[", "1", "]", "]", ")", "\n", "\n", "image_PIL", "=", "image_PIL", ".", "resize", "(", "size", "=", "(", "self", ".", "output_size", ",", "self", ".", "output_size", ")", ")", "\n", "label_PIL", "=", "label_PIL", ".", "resize", "(", "size", "=", "(", "self", ".", "output_size", ",", "self", ".", "output_size", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "\n", "'''\n            cv2.resize(image[bbox[0]:bbox[1], bbox[2]:bbox[3]], dsize=(self.output_size, self.output_size),\n                       interpolation=cv2.INTER_NEAREST), dtype=np.float)\n        target_out = np.array(\n            cv2.resize(label[bbox[0]:bbox[1], bbox[2]:bbox[3]], dsize=(512, 512), interpolation=cv2.INTER_NEAREST),\n            dtype=np.uint8)\n        '''", "\n", "\n", "return", "[", "image_PIL", ",", "label_PIL", "]", "\n", "\n", "", "def", "resize_bbox_to_max_zoom", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "\n", "if", "bbox_h", ">", "self", ".", "max_l", ":", "\n", "            ", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "max_l", ")", "\n", "", "elif", "bbox_h", "<", "self", ".", "min_l", ":", "\n", "            ", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "min_l", ")", "\n", "", "return", "bbox", "\n", "\n", "", "def", "random_zoom", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "\n", "h", "=", "int", "(", "random", ".", "uniform", "(", "self", ".", "min_l", ",", "self", ".", "max_l", ")", ")", "\n", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "h", ")", "\n", "return", "bbox", "\n", "\n", "", "def", "get_extreme_points", "(", "self", ",", "label", ")", ":", "\n", "        ", "label_pos", "=", "np", ".", "where", "(", "label", "==", "255", ")", "\n", "label_x", "=", "label_pos", "[", "0", "]", "\n", "label_y", "=", "label_pos", "[", "1", "]", "\n", "arg_max_x", "=", "np", ".", "argmax", "(", "label_x", ")", "\n", "arg_max_y", "=", "np", ".", "argmax", "(", "label_y", ")", "\n", "arg_min_x", "=", "np", ".", "argmin", "(", "label_x", ")", "\n", "arg_min_y", "=", "np", ".", "argmin", "(", "label_y", ")", "\n", "extreme_points", "=", "np", ".", "array", "(", "\n", "[", "label_x", "[", "arg_min_x", "]", ",", "label_x", "[", "arg_max_x", "]", ",", "\n", "label_y", "[", "arg_min_y", "]", ",", "label_y", "[", "arg_max_y", "]", "]", ")", "# used for plotting [up, down, left, right]", "\n", "\n", "return", "extreme_points", "\n", "\n", "", "def", "get_size", "(", "self", ",", "extreme_points", ")", ":", "\n", "        ", "h", "=", "extreme_points", "[", "1", "]", "-", "extreme_points", "[", "0", "]", "\n", "w", "=", "extreme_points", "[", "3", "]", "-", "extreme_points", "[", "2", "]", "\n", "c", "=", "[", "extreme_points", "[", "0", "]", "+", "int", "(", "h", "/", "2", ")", ",", "extreme_points", "[", "2", "]", "+", "int", "(", "w", "/", "2", ")", "]", "# [height, width] (x,y)", "\n", "return", "h", ",", "w", ",", "c", "\n", "\n", "", "def", "get_bbox", "(", "self", ",", "c", ",", "l", ")", ":", "\n", "        ", "half", "=", "int", "(", "l", "/", "2", ")", "\n", "bbox", "=", "[", "c", "[", "0", "]", "-", "half", ",", "c", "[", "0", "]", "+", "half", ",", "c", "[", "1", "]", "-", "half", ",", "c", "[", "1", "]", "+", "half", "]", "# [up, down, left, right]", "\n", "return", "bbox", "\n", "\n", "", "def", "move_bbox_inside", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "move", "=", "[", "0", ",", "0", "]", "\n", "if", "bbox", "[", "0", "]", "<", "0", ":", "\n", "            ", "move", "[", "0", "]", "=", "bbox", "[", "0", "]", "\n", "", "elif", "bbox", "[", "1", "]", ">", "self", ".", "size", "[", "0", "]", ":", "\n", "            ", "move", "[", "0", "]", "=", "bbox", "[", "1", "]", "-", "self", ".", "size", "[", "0", "]", "\n", "\n", "", "if", "bbox", "[", "2", "]", "<", "0", ":", "\n", "            ", "move", "[", "1", "]", "=", "bbox", "[", "2", "]", "\n", "", "elif", "bbox", "[", "3", "]", ">", "self", ".", "size", "[", "1", "]", ":", "\n", "            ", "move", "[", "1", "]", "=", "bbox", "[", "3", "]", "-", "self", ".", "size", "[", "1", "]", "\n", "", "bbox", "=", "[", "bbox", "[", "0", "]", "-", "move", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "move", "[", "0", "]", ",", "bbox", "[", "2", "]", "-", "move", "[", "1", "]", ",", "bbox", "[", "3", "]", "-", "move", "[", "1", "]", "]", "\n", "return", "bbox", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pipeline.utils.get_prediction_models": [[643, 719], ["torch.cuda.is_available", "print", "open", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "print", "label_generator.create_labels.get_default_model", "label_generator.create_labels.get_default_model.to", "label_generator.create_labels.get_default_model.eval", "print", "os.path.join", "len", "DenseFusion.lib.network.PoseNet", "DenseFusion.lib.network.PoseRefineNet", "os.path.join", "torch.load", "DenseFusion.lib.network.PoseNet.load_state_dict", "os.path.join", "torch.load", "DenseFusion.lib.network.PoseRefineNet.load_state_dict", "DenseFusion.lib.network.PoseNet.to", "DenseFusion.lib.network.PoseRefineNet.to", "DenseFusion.lib.network.PoseNet.eval", "DenseFusion.lib.network.PoseRefineNet.eval", "torch.device", "torch.device", "os.path.join", "classes.append", "os.path.join", "os.path.join", "open", "numpy.array", "open.close", "open.readline", "os.path.join", "input_line[].split", "cld[].append", "len", "torch.device", "torch.device", "list", "open.readline", "os.listdir", "xyz.append", "xyz.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_default_model", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.make_train_and_test_dataset.make_train_and_test_dataset": [[6, 84], ["os.path.join", "print", "print", "print", "os.path.exists", "os.makedirs", "os.path.join", "os.listdir", "open", "open", "open", "pathlib.Path().resolve", "os.path.join", "sorted", "len", "len", "len", "os.path.join", "f.write", "os.path.join", "f.write", "open", "os.path.join", "f.write", "os.listdir.index", "os.listdir", "len", "os.path.join", "f.write", "pathlib.Path", "os.listdir.index", "int", "enumerate", "numpy.round", "extra_train_samples.append", "test_samples.append", "train_samples.append", "iii.append", "os.path.join", "len", "os.path.join", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["def", "make_train_and_test_dataset", "(", "object_names", ",", "\n", "data_set_type", ",", "\n", "save_name", ",", "\n", "p_test", "=", "0.2", ",", "\n", "mode", "=", "'pred'", ",", "\n", "use_extra_data", "=", "False", ")", ":", "\n", "    ", "train_samples", "=", "[", "]", "\n", "test_samples", "=", "[", "]", "\n", "extra_train_samples", "=", "[", "]", "\n", "root", "=", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", "\n", "\n", "given_mode", "=", "mode", "\n", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data_sets'", ",", "data_set_type", ",", "save_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "for", "object_name", "in", "object_names", ":", "\n", "        ", "object_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data'", ",", "object_name", ")", "\n", "dirs", "=", "os", ".", "listdir", "(", "object_path", ")", "\n", "if", "'extra'", "in", "dirs", ":", "\n", "            ", "if", "data_set_type", "==", "'segmentation'", ":", "\n", "                ", "i", "=", "dirs", ".", "index", "(", "'extra'", ")", "\n", "del", "dirs", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "if", "not", "use_extra_data", ":", "\n", "                    ", "i", "=", "dirs", ".", "index", "(", "'extra'", ")", "\n", "del", "dirs", "[", "i", "]", "\n", "\n", "", "", "", "for", "d", "in", "dirs", ":", "\n", "            ", "dir_path", "=", "os", ".", "path", ".", "join", "(", "object_path", ",", "d", ")", "\n", "samples", "=", "sorted", "(", "os", ".", "listdir", "(", "dir_path", ")", ")", "\n", "if", "samples", ":", "\n", "\n", "                ", "if", "d", "==", "'extra'", ":", "\n", "                    ", "mode", "=", "'new_pred'", "\n", "", "else", ":", "\n", "                    ", "mode", "=", "given_mode", "\n", "\n", "", "tag", "=", "'.{}.label.png'", ".", "format", "(", "mode", ")", "\n", "l", "=", "len", "(", "tag", ")", "\n", "samples", "=", "[", "s", "[", ":", "-", "l", "]", "for", "s", "in", "samples", "if", "tag", "in", "s", "]", "\n", "\n", "if", "d", "!=", "'extra'", ":", "\n", "                    ", "step", "=", "int", "(", "np", ".", "round", "(", "len", "(", "samples", ")", "/", "(", "len", "(", "samples", ")", "*", "p_test", ")", ",", "0", ")", ")", "\n", "iii", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "samples", ")", ":", "\n", "                        ", "if", "i", "%", "step", "==", "0", ":", "\n", "                            ", "test_samples", ".", "append", "(", "os", ".", "path", ".", "join", "(", "object_name", ",", "d", ",", "s", ")", ")", "\n", "", "else", ":", "\n", "                            ", "train_samples", ".", "append", "(", "os", ".", "path", ".", "join", "(", "object_name", ",", "d", ",", "s", ")", ")", "\n", "", "if", "object_name", "==", "'Disk'", ":", "\n", "                            ", "iii", ".", "append", "(", "i", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "s", "in", "samples", ":", "\n", "                        ", "extra_train_samples", ".", "append", "(", "os", ".", "path", ".", "join", "(", "object_name", ",", "d", ",", "s", ")", ")", "\n", "\n", "", "", "", "", "", "print", "(", "'number of train samples: {}'", ".", "format", "(", "len", "(", "train_samples", ")", ")", ")", "\n", "print", "(", "'number of train samples: {}'", ".", "format", "(", "len", "(", "test_samples", ")", ")", ")", "\n", "print", "(", "'number of train samples: {}'", ".", "format", "(", "len", "(", "extra_train_samples", ")", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'train_data_list.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "train_samples", ":", "\n", "            ", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test_data_list.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "test_samples", ":", "\n", "            ", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "if", "use_extra_data", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'extra_train_data_list.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "item", "in", "extra_train_samples", ":", "\n", "                ", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'classes.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "object_names", ":", "\n", "            ", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.create_labels.get_default_model": [[20, 38], ["segmentation.utils.get_model", "torch.load", "segmentation.utils.get_model.load_state_dict", "os.path.join", "torch.device"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_model"], ["def", "get_default_model", "(", "root", ",", "ds_name", ",", "n_classes", ")", ":", "\n", "    ", "segmentation_config", "=", "{", "'encoder_name'", ":", "'resnet34'", ",", "\n", "'encoder_weights'", ":", "None", ",", "\n", "'activation'", ":", "'softmax'", ",", "\n", "'in_channels'", ":", "3", ",", "\n", "'classes'", ":", "n_classes", "}", "\n", "name", "=", "'Unet'", "\n", "model", "=", "get_model", "(", "name", ",", "segmentation_config", ")", "\n", "\n", "cp", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\n", "'segmentation'", ",", "\n", "'trained_models'", ",", "\n", "ds_name", ",", "\n", "'{}_{}.ckpt'", ".", "format", "(", "name", ",", "segmentation_config", "[", "'encoder_name'", "]", ")", ")", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "cp", "[", "'state_dict'", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.create_labels.create_pose_data": [[40, 289], ["numpy.array", "create_labels.get_default_model", "get_default_model.to", "get_default_model.eval", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "print", "enumerate", "print", "print", "print", "torch.cuda.is_available", "torch.device", "torch.device", "time.time", "print", "os.path.join", "os.listdir", "time.time", "enumerate", "times_new_pred.append", "time.time", "print", "os.path.join", "pc_reconstruction.create_pointcloud.load_point_cloud", "times_pc.append", "time.time", "print", "create_labels.create_pose_label", "times_pose.append", "print", "print", "print", "print", "print", "print", "print", "elapsed_times.append", "len", "os.listdir.index", "os.path.join", "list", "os.path.join", "sorted", "enumerate", "time.time", "len", "numpy.round", "numpy.round", "os.listdir.index", "os.listdir", "os.path.exists", "os.makedirs", "print", "time.time", "time.time", "time.time", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.sum", "numpy.mean", "transforms.ToTensor.", "transforms.Normalize.", "Image.open().convert.to", "Image.open().convert.unsqueeze", "get_default_model.predict", "torch.nn.functional.softmax", "torch.argmax().numpy", "cv2.connectedComponents", "numpy.array", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum", "len", "len", "len", "open", "json.load", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.linalg.norm", "open", "numpy.array", "open", "PIL.Image.open().convert", "pred[].numpy", "numpy.array", "numpy.unique", "numpy.mean", "matplotlib.subplot", "matplotlib.axis", "matplotlib.title", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.axis", "matplotlib.title", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.axis", "matplotlib.title", "matplotlib.imshow", "matplotlib.show", "PIL.Image.fromarray", "Image.fromarray.save", "print", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "PIL.Image.open", "os.path.join", "numpy.array", "np.array.cpu", "torch.argmax", "numpy.array", "open", "numpy.array", "len", "numpy.sum", "numpy.sum", "numpy.round", "print", "print", "len", "print", "os.path.join", "os.path.join", "print", "os.remove", "os.path.join", "print", "os.remove", "numpy.array", "numpy.array", "PIL.Image.open", "copy.deepcopy", "os.path.join", "PIL.Image.open", "numpy.unique", "numpy.unique", "len", "print", "os.path.join", "os.path.join", "json.load.get", "json.load.get", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_default_model", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.create_pointcloud.load_point_cloud", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.create_labels.create_pose_label", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.connectedComponents", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "create_pose_data", "(", "root", ",", "classes", ",", "ds_name", ",", "reference_point", "=", "np", ".", "array", "(", "[", "]", ")", ",", "new_pred", "=", "True", ",", "get_extra_labels", "=", "False", ",", "\n", "plot", "=", "False", ",", "use_cuda", "=", "True", ")", ":", "\n", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "cuda", "=", "True", "\n", "", "else", ":", "\n", "        ", "cuda", "=", "False", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "if", "new_pred", ":", "\n", "        ", "mode", "=", "'new_pred'", "\n", "", "else", ":", "\n", "        ", "mode", "=", "'pred'", "\n", "\n", "", "model", "=", "get_default_model", "(", "root", ",", "ds_name", ",", "len", "(", "classes", ")", "+", "1", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "print", "(", "'-----------'", ")", "\n", "stats", "=", "{", "'n_samples'", ":", "0", ",", "\n", "'n_extra_samples'", ":", "0", ",", "\n", "'bs_copied'", ":", "0", ",", "\n", "'no_depth_overlap'", ":", "0", ",", "\n", "'not_in_center'", ":", "0", "}", "\n", "\n", "elapsed_times", "=", "[", "]", "\n", "times_new_pred", "=", "[", "]", "\n", "times_pc", "=", "[", "]", "\n", "times_pose", "=", "[", "]", "\n", "for", "class_id", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'class: {}'", ".", "format", "(", "cls", ")", ")", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation'", ",", "'data'", ",", "cls", ")", "\n", "dirs", "=", "os", ".", "listdir", "(", "data_path", ")", "\n", "if", "'background'", "in", "dirs", ":", "\n", "            ", "i", "=", "dirs", ".", "index", "(", "'background'", ")", "\n", "del", "dirs", "[", "i", "]", "\n", "\n", "", "if", "not", "get_extra_labels", ":", "\n", "            ", "if", "'extra'", "in", "dirs", ":", "\n", "                ", "i", "=", "dirs", ".", "index", "(", "'extra'", ")", "\n", "del", "dirs", "[", "i", "]", "\n", "\n", "", "", "t_new_pred", "=", "time", ".", "time", "(", ")", "\n", "for", "k", ",", "d", "in", "enumerate", "(", "dirs", ")", ":", "\n", "            ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "d", ")", "\n", "samples", "=", "list", "(", "os", ".", "listdir", "(", "data_dir", ")", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data'", ",", "cls", ",", "d", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "label_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "label_path", ")", "\n", "\n", "", "samples", "=", "sorted", "(", "[", "d", "[", ":", "-", "10", "]", "for", "d", "in", "samples", "if", "'.color.png'", "in", "d", "]", ")", "\n", "for", "i", ",", "id", "in", "enumerate", "(", "samples", ")", ":", "\n", "                ", "print", "(", "'class {}/{}, rotation {}/{}, sample {}/{}'", ".", "format", "(", "class_id", "+", "1", ",", "len", "(", "classes", ")", ",", "\n", "k", "+", "1", ",", "len", "(", "dirs", ")", ",", "\n", "i", "+", "1", ",", "len", "(", "samples", ")", ")", ")", "\n", "if", "d", "==", "'extra'", "or", "new_pred", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'{}.meta.json'", ".", "format", "(", "id", ")", ")", ")", "as", "f", ":", "\n", "                        ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "robot2endEff_tf", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'robot2endEff_tf'", ")", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "hand_eye_calibration", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'hand_eye_calibration'", ")", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "robot2cam", "=", "np", ".", "dot", "(", "robot2endEff_tf", ",", "hand_eye_calibration", ")", "\n", "pos", "=", "robot2cam", "[", ":", "3", ",", "3", "]", "\n", "measure_dist", "=", "np", ".", "linalg", ".", "norm", "(", "reference_point", "-", "pos", ")", "\n", "max_measure_dist", "=", "measure_dist", "+", "150", "\n", "min_measure_dist", "=", "measure_dist", "-", "150", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'{}.depth.png'", ".", "format", "(", "id", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "depth", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "depth", "[", "depth", ">", "max_measure_dist", "]", "=", "0", "\n", "depth", "[", "depth", "<", "min_measure_dist", "]", "=", "0", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'{}.color.png'", ".", "format", "(", "id", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "x", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "plot", ":", "\n", "                            ", "x_copy", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "x", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "", "x", "=", "to_tensor", "(", "x", ")", "\n", "x", "=", "normalize", "(", "x", ")", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "pred", "=", "model", ".", "predict", "(", "x", ")", "\n", "pred", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "if", "cuda", ":", "\n", "                        ", "pred", "=", "pred", ".", "cpu", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "pred", "=", "pred", "[", "0", "]", "\n", "", "pred_arg", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "pred_arg", "[", "pred_arg", "!=", "class_id", "+", "1", "]", "=", "0", "\n", "pred", "=", "pred_arg", "*", "pred", "[", "class_id", "+", "1", "]", ".", "numpy", "(", ")", "\n", "\n", "ret", ",", "labels", "=", "cv2", ".", "connectedComponents", "(", "np", ".", "array", "(", "pred_arg", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "connectivity", "=", "8", ")", "\n", "biggest", "=", "1", "\n", "biggest_score", "=", "0", "\n", "for", "u", "in", "np", ".", "unique", "(", "labels", ")", "[", "1", ":", "]", ":", "\n", "                        ", "score", "=", "np", ".", "mean", "(", "pred", "[", "labels", "==", "u", "]", ")", "\n", "if", "score", ">", "biggest_score", ":", "\n", "                            ", "biggest_score", "=", "score", "\n", "biggest", "=", "u", "\n", "\n", "", "", "pred", "[", "labels", "!=", "biggest", "]", "=", "0", "\n", "pred", "[", "pred", "!=", "0", "]", "=", "255", "\n", "pred", "=", "np", ".", "array", "(", "pred", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "plot", ":", "\n", "                        ", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'image'", ")", "\n", "plt", ".", "imshow", "(", "x_copy", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'pred target = {}'", ".", "format", "(", "class_id", "+", "1", ")", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "pred_arg", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'pred cca'", ")", "\n", "plt", ".", "imshow", "(", "pred", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "# check upon we can trust the new prediction", "\n", "", "save", "=", "False", "\n", "if", "d", "!=", "'extra'", ":", "\n", "                        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "'{}.pred.label.png'", ".", "format", "(", "id", ",", "mode", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                            ", "bs_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "len", "(", "np", ".", "unique", "(", "pred", "[", "bs_label", "!=", "0", "]", ")", ")", "<=", "1", ":", "\n", "                            ", "area", "=", "np", ".", "sum", "(", "[", "pred", "!=", "0", "]", ")", "\n", "before_area", "=", "np", ".", "sum", "(", "[", "pred_arg", "!=", "0", "]", ")", "\n", "area_diff", "=", "np", ".", "round", "(", "(", "1", "-", "(", "area", "/", "before_area", ")", ")", "*", "100", ",", "2", ")", "\n", "print", "(", "'no pred, copy background subtraction pred.'", ")", "\n", "print", "(", "'area = {}, area before cca: {}, diff {}%'", ".", "format", "(", "area", ",", "before_area", ",", "area_diff", ")", ")", "\n", "pred", "=", "bs_label", "\n", "save", "=", "True", "\n", "stats", "[", "'bs_copied'", "]", "+=", "1", "\n", "\n", "\n", "", "", "if", "not", "save", ":", "\n", "                        ", "depth_overlap", "=", "True", "\n", "if", "len", "(", "np", ".", "unique", "(", "pred", "[", "depth", "!=", "0", "]", ")", ")", "<=", "1", ":", "\n", "                            ", "print", "(", "'estimated depth does not overlap'", ")", "\n", "depth_overlap", "=", "False", "\n", "stats", "[", "'no_depth_overlap'", "]", "+=", "1", "\n", "\n", "", "if", "depth_overlap", ":", "\n", "                            ", "s0", "=", "pred", ".", "shape", "[", "0", "]", "\n", "s1", "=", "pred", ".", "shape", "[", "1", "]", "\n", "cut0", "=", "30", "\n", "cut1", "=", "50", "\n", "if", "len", "(", "np", ".", "unique", "(", "pred", "[", "cut0", ":", "s0", "-", "cut0", ",", "cut1", ":", "s1", "-", "cut1", "]", ")", ")", ">", "1", ":", "\n", "                                ", "save", "=", "True", "\n", "", "else", ":", "\n", "                                ", "print", "(", "'pred not in center'", ")", "\n", "stats", "[", "'not_in_center'", "]", "+=", "1", "\n", "\n", "", "", "", "if", "save", ":", "\n", "                        ", "if", "d", "==", "'extra'", ":", "\n", "                            ", "stats", "[", "'n_extra_samples'", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "stats", "[", "'n_samples'", "]", "+=", "1", "\n", "", "label", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "# print('save new pred to ', os.path.join(label_path, '{}.new_pred.label.png'.format(id)))", "\n", "label", ".", "save", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "'{}.new_pred.label.png'", ".", "format", "(", "id", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'not saved'", ",", "cls", ",", "d", ",", "id", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "'{}.new_pred.label.png'", ".", "format", "(", "id", ")", ")", ")", ":", "\n", "                            ", "print", "(", "'deleting old image'", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "'{}.new_pred.label.png'", ".", "format", "(", "id", ")", ")", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "'{}.meta.json'", ".", "format", "(", "id", ")", ")", ")", ":", "\n", "                            ", "print", "(", "'deleting old meta data'", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "'{}.meta.json'", ".", "format", "(", "id", ")", ")", ")", "\n", "\n", "", "", "", "", "", "times_new_pred", ".", "append", "(", "time", ".", "time", "(", ")", "-", "t_new_pred", ")", "\n", "\n", "t_pc", "=", "time", ".", "time", "(", ")", "\n", "n_viewpoints", "=", "30", "\n", "min_friends", "=", "20", "\n", "min_dist", "=", "5", "\n", "nb_neighbors", "=", "20", "\n", "\n", "threshold", "=", "10", "\n", "voxel_size", "=", "2", "\n", "voxel_size_out", "=", "5", "\n", "\n", "l_arrow", "=", "75", "\n", "global_regression", "=", "False", "\n", "icp_point2point", "=", "True", "\n", "icp_point2plane", "=", "False", "\n", "\n", "plot", "=", "False", "\n", "print", "(", "'getting point cloud'", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pc_reconstruction/data'", ")", "\n", "load_point_cloud", "(", "cls", ",", "\n", "save_dir", ",", "\n", "root", ",", "\n", "reference_point", "=", "reference_point", ",", "\n", "mode", "=", "mode", ",", "\n", "n_viewpoints", "=", "n_viewpoints", ",", "\n", "min_friends", "=", "min_friends", ",", "\n", "min_dist", "=", "min_dist", ",", "\n", "nb_neighbors", "=", "nb_neighbors", ",", "\n", "threshold", "=", "threshold", ",", "\n", "voxel_size", "=", "voxel_size", ",", "\n", "voxel_size_out", "=", "voxel_size_out", ",", "\n", "l_arrow", "=", "l_arrow", ",", "\n", "global_regression", "=", "global_regression", ",", "\n", "icp_point2point", "=", "icp_point2point", ",", "\n", "icp_point2plane", "=", "icp_point2plane", ",", "\n", "plot", "=", "plot", ")", "\n", "times_pc", ".", "append", "(", "time", ".", "time", "(", ")", "-", "t_pc", ")", "\n", "t_pose", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'getting pose label'", ")", "\n", "create_pose_label", "(", "root", ",", "\n", "cls", ",", "\n", "global_regression", ",", "\n", "icp_point2point", ",", "\n", "icp_point2plane", ",", "\n", "plot", "=", "plot", ",", "\n", "view_label", "=", "plot", ",", "\n", "with_extra", "=", "get_extra_labels", ")", "\n", "times_pose", ".", "append", "(", "time", ".", "time", "(", ")", "-", "t_pose", ")", "\n", "\n", "print", "(", "'_____________________'", ")", "\n", "print", "(", "'stats: {}'", ".", "format", "(", "stats", ")", ")", "\n", "print", "(", "'_____________________'", ")", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "print", "(", "'elapsed time {} sec, seg: {} sec, pc: {} sec, pose: {} sec'", ".", "format", "(", "np", ".", "round", "(", "elapsed_time", ",", "2", ")", ",", "\n", "np", ".", "round", "(", "times_new_pred", "[", "-", "1", "]", ",", "2", ")", ",", "\n", "np", ".", "round", "(", "times_pc", "[", "-", "1", "]", ",", "2", ")", ",", "\n", "np", ".", "round", "(", "times_pose", "[", "-", "1", "]", ",", "2", ")", ")", ")", "\n", "print", "(", "'Avg. task times per object: seg: {}, pc: {}, pose: {}'", ".", "format", "(", "np", ".", "round", "(", "np", ".", "mean", "(", "times_new_pred", ")", ",", "2", ")", ",", "\n", "np", ".", "round", "(", "np", ".", "mean", "(", "times_pc", ")", ",", "2", ")", ",", "\n", "np", ".", "round", "(", "np", ".", "mean", "(", "times_pose", ")", ",", "2", ")", ")", ")", "\n", "print", "(", "'Total time per task: seg: {}, pc: {}, pose: {}'", ".", "format", "(", "np", ".", "round", "(", "np", ".", "sum", "(", "times_new_pred", ")", ",", "2", ")", ",", "\n", "np", ".", "round", "(", "np", ".", "sum", "(", "times_pc", ")", ",", "2", ")", ",", "\n", "np", ".", "round", "(", "np", ".", "sum", "(", "times_pose", ")", ",", "2", ")", ")", ")", "\n", "print", "(", "'_____________________'", ")", "\n", "elapsed_times", ".", "append", "(", "elapsed_time", ")", "\n", "\n", "\n", "", "print", "(", "'____________________________________________________________________________________________'", ")", "\n", "print", "(", "'Elapsed time for \"{}\" objects: {} sec, with a per object time of: {} sec'", ".", "format", "(", "\n", "len", "(", "classes", ")", ",", "np", ".", "round", "(", "np", ".", "sum", "(", "elapsed_times", ")", ",", "2", ")", ",", "np", ".", "round", "(", "np", ".", "mean", "(", "elapsed_times", ")", ",", "2", ")", ")", ")", "\n", "\n", "print", "(", "'____________________________________________________________________________________________'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.create_labels.create_pose_label": [[292, 441], ["os.path.join", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.listdir.index", "os.listdir.index", "len", "ValueError", "os.path.join", "os.path.join", "print", "list", "ValueError", "os.listdir.append", "open3d.io.read_point_cloud", "pc_reconstruction.get_my_source_center", "os.listdir", "numpy.rad2deg", "remember_pos_and_rot.append", "os.listdir", "numpy.identity", "numpy.dot", "numpy.dot", "transforms3d.euler.mat2euler", "numpy.array_equal", "os.path.join", "open3d.io.read_point_cloud", "open3d.io.read_point_cloud", "pc_reconstruction.icp_regression", "print", "numpy.dot", "numpy.rad2deg", "numpy.array", "enumerate", "transforms3d.euler.euler2mat", "numpy.rad2deg", "print", "print", "print", "print", "print", "print", "print", "numpy.array", "open", "json.load", "json.load.get", "numpy.array().reshape", "numpy.array().reshape", "numpy.linalg.inv", "numpy.linalg.inv", "list", "list", "list", "list", "open", "json.dump", "open3d.io.read_point_cloud", "o3d.io.read_point_cloud.transform", "pc_reconstruction.pointcloud2image", "matplotlib.imshow", "matplotlib.show", "numpy.array", "transforms3d.euler.mat2euler", "transforms3d.euler.mat2euler", "transforms3d.euler.mat2euler", "pc_reconstruction.get_my_source_center", "os.path.join", "numpy.array().reshape", "numpy.rad2deg", "numpy.array_equal", "np.rad2deg.flatten", "np.dot.flatten", "np.identity.flatten", "os.path.join", "open", "numpy.array", "open", "json.load", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "transforms3d.euler.mat2euler", "os.path.join", "PIL.Image.open().convert", "os.path.join", "numpy.array().reshape", "o3d.io.read_point_cloud.get_center", "json.load.get", "json.load.get", "numpy.array", "o3d.io.read_point_cloud.get_center", "json.load.get", "PIL.Image.open", "numpy.array", "json.load.get"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_my_source_center", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.icp_regression", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.pointcloud2image", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.pc_reconstruction.open3d_utils.get_my_source_center", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "create_pose_label", "(", "root", ",", "\n", "object_name", ",", "\n", "global_regression", ",", "\n", "icp_point2point", ",", "\n", "icp_point2plane", ",", "\n", "plot", "=", "False", ",", "\n", "view_label", "=", "False", ",", "\n", "with_extra", "=", "False", ")", ":", "\n", "\n", "    ", "object_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation/data'", ",", "object_name", ")", "\n", "dirs", "=", "os", ".", "listdir", "(", "object_path", ")", "\n", "background_path", "=", "os", ".", "path", ".", "join", "(", "object_path", ",", "'background'", ")", "\n", "pc_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pc_reconstruction/data'", ",", "object_name", ",", "'{}_out.ply'", ".", "format", "(", "object_name", ")", ")", "\n", "pco_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pc_reconstruction/data'", ",", "object_name", ",", "'{}.ply'", ".", "format", "(", "object_name", ")", ")", "\n", "\n", "\n", "try", ":", "\n", "        ", "i", "=", "dirs", ".", "index", "(", "'background'", ")", "\n", "del", "dirs", "[", "i", "]", "\n", "", "except", ":", "\n", "        ", "raise", "ValueError", "(", "'background does not exist in object_path: {}'", ".", "format", "(", "object_path", ")", ")", "\n", "\n", "", "if", "'extra'", "in", "dirs", ":", "\n", "        ", "i", "=", "dirs", ".", "index", "(", "'extra'", ")", "\n", "del", "dirs", "[", "i", "]", "\n", "if", "with_extra", ":", "\n", "            ", "dirs", ".", "append", "(", "'extra'", ")", "\n", "\n", "", "", "if", "len", "(", "dirs", ")", "<", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'no foreground'", ")", "\n", "\n", "", "remember_pos_and_rot", "=", "[", "]", "\n", "for", "d", "in", "dirs", ":", "\n", "        ", "pc_position", "=", "None", "\n", "pc_rotation", "=", "None", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "object_path", ",", "d", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data'", ",", "object_name", ",", "d", ")", "\n", "print", "(", "'Getting pc position for {}'", ".", "format", "(", "d", ")", ")", "\n", "if", "d", "!=", "'extra'", ":", "\n", "            ", "source", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "pc_path", ")", "\n", "pc_position", "=", "pc_utils", ".", "get_my_source_center", "(", "source", ")", "\n", "\n", "# exchange with read correct from meta", "\n", "\n", "for", "meta_file", "in", "os", ".", "listdir", "(", "data_path", ")", ":", "\n", "                ", "if", "meta_file", "[", "-", "5", ":", "]", "==", "'.json'", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "meta_file", ")", ")", "as", "f", ":", "\n", "                        ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "pc_rotation", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'object_pose'", ")", ")", ".", "reshape", "(", "4", ",", "4", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "", "break", "\n", "\n", "", "", "old_rotation", "=", "np", ".", "rad2deg", "(", "transforms3d", ".", "euler", ".", "mat2euler", "(", "pc_rotation", ")", ")", "\n", "if", "not", "np", ".", "array_equal", "(", "old_rotation", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", ")", ":", "\n", "\n", "# load point cloud", "\n", "                ", "pc_target_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pc_reconstruction/data'", ",", "object_name", ",", "'{}.ply'", ".", "format", "(", "d", ")", ")", "\n", "\n", "target", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "pc_target_path", ")", "\n", "source", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "pc_path", ")", "\n", "\n", "\n", "#pc_utils.draw_registration_result(source, target, np.identity(4))", "\n", "# match pointcloud to current surface", "\n", "target", ",", "source", ",", "init_tf", "=", "pc_utils", ".", "icp_regression", "(", "target", ",", "\n", "source", ",", "\n", "voxel_size", "=", "5", ",", "\n", "threshold", "=", "10", ",", "\n", "global_regression", "=", "global_regression", ",", "\n", "icp_point2point", "=", "icp_point2point", ",", "\n", "icp_point2plane", "=", "icp_point2plane", ",", "\n", "plot", "=", "plot", ")", "\n", "\n", "\n", "\n", "print", "(", "'requested rotation: {}'", ".", "format", "(", "old_rotation", ")", ")", "\n", "pc_rotation", "=", "np", ".", "dot", "(", "pc_rotation", ",", "init_tf", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "diff_rotation", "=", "np", ".", "rad2deg", "(", "transforms3d", ".", "euler", ".", "mat2euler", "(", "init_tf", "[", ":", "3", ",", ":", "3", "]", ")", ")", "\n", "euler", "=", "np", ".", "array", "(", "transforms3d", ".", "euler", ".", "mat2euler", "(", "pc_rotation", ")", ")", "\n", "# set zeros where there should be no rotations", "\n", "for", "i", ",", "angle", "in", "enumerate", "(", "old_rotation", ")", ":", "\n", "                    ", "if", "angle", "==", "0.0", ":", "\n", "                        ", "euler", "[", "i", "]", "=", "0.0", "\n", "diff_rotation", "[", "i", "]", "=", "0.0", "\n", "\n", "", "", "pc_rotation", "=", "transforms3d", ".", "euler", ".", "euler2mat", "(", "euler", "[", "0", "]", ",", "euler", "[", "1", "]", ",", "euler", "[", "2", "]", ")", "\n", "new_rotation", "=", "np", ".", "rad2deg", "(", "transforms3d", ".", "euler", ".", "mat2euler", "(", "pc_rotation", ")", ")", "\n", "print", "(", "'___'", ")", "\n", "print", "(", "'found rotation: {}'", ".", "format", "(", "new_rotation", ")", ")", "\n", "print", "(", "'diff in rotation: {}'", ".", "format", "(", "diff_rotation", ")", ")", "\n", "print", "(", "'old pc_position: {}'", ".", "format", "(", "pc_position", ")", ")", "\n", "print", "(", "'new pc_position: {}'", ".", "format", "(", "np", ".", "array", "(", "source", ".", "get_center", "(", ")", ")", ")", ")", "\n", "print", "(", "'diff in pc_position: {}'", ".", "format", "(", "np", ".", "array", "(", "source", ".", "get_center", "(", ")", "-", "pc_position", ")", ")", ")", "\n", "print", "(", "'___'", ")", "\n", "pc_position", "=", "np", ".", "array", "(", "pc_utils", ".", "get_my_source_center", "(", "source", ")", ")", "\n", "\n", "", "remember_pos_and_rot", ".", "append", "(", "{", "\n", "'old_rotation'", ":", "old_rotation", ",", "\n", "'pc_position'", ":", "pc_position", ",", "\n", "'pc_rotation'", ":", "pc_rotation", "\n", "}", ")", "\n", "\n", "", "samples", "=", "list", "(", "os", ".", "listdir", "(", "data_path", ")", ")", "\n", "samples", "=", "[", "d", "[", ":", "-", "10", "]", "for", "d", "in", "samples", "if", "'.color.png'", "in", "d", "]", "\n", "for", "id", "in", "samples", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.meta.json'", ".", "format", "(", "id", ")", ")", ")", "as", "f", ":", "\n", "                ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "intr", "=", "meta", ".", "get", "(", "'intr'", ")", "\n", "robotEndEff2Cam", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'hand_eye_calibration'", ")", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "robot2endEff_tf", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'robot2endEff_tf'", ")", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "object_pose", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'object_pose'", ")", ")", ".", "reshape", "(", "4", ",", "4", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n", "", "if", "d", "==", "'extra'", ":", "\n", "                ", "for", "rembered", "in", "remember_pos_and_rot", ":", "\n", "                    ", "object_rotation", "=", "np", ".", "rad2deg", "(", "transforms3d", ".", "euler", ".", "mat2euler", "(", "object_pose", ")", ")", "\n", "if", "np", ".", "array_equal", "(", "object_rotation", ",", "rembered", "[", "'old_rotation'", "]", ")", ":", "\n", "                        ", "pc_position", "=", "rembered", "[", "'pc_position'", "]", "\n", "pc_rotation", "=", "rembered", "[", "'pc_rotation'", "]", "\n", "break", "\n", "\n", "# get the transformation from the camera to the object", "\n", "", "", "", "robot2object", "=", "np", ".", "identity", "(", "4", ")", "\n", "robot2object", "[", ":", "3", ",", ":", "3", "]", "=", "pc_rotation", "\n", "robot2object", "[", ":", "3", ",", "3", "]", "=", "pc_position", "\n", "\n", "cam2robot", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "robotEndEff2Cam", ")", ",", "np", ".", "linalg", ".", "inv", "(", "robot2endEff_tf", ")", ")", "\n", "cam2object", "=", "np", ".", "dot", "(", "cam2robot", ",", "robot2object", ")", "\n", "\n", "object_position", "=", "cam2object", "[", ":", "3", ",", "3", "]", "\n", "object_rotation", "=", "cam2object", "[", ":", "3", ",", ":", "3", "]", "\n", "\n", "pose_label", "=", "{", "'position'", ":", "list", "(", "object_position", ")", ",", "\n", "'rotation'", ":", "list", "(", "object_rotation", ".", "flatten", "(", ")", ")", ",", "\n", "'cls_name'", ":", "object_name", ",", "\n", "'cam2robot'", ":", "list", "(", "cam2robot", ".", "flatten", "(", ")", ")", ",", "\n", "'robot2object'", ":", "list", "(", "robot2object", ".", "flatten", "(", ")", ")", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "label_path", ",", "'{}.meta.json'", ".", "format", "(", "id", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "pose_label", ",", "f", ")", "\n", "\n", "", "if", "view_label", ":", "\n", "# paint the image", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.color.png'", ".", "format", "(", "id", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "image", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "", "point_cloud", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "pco_path", ")", "\n", "point_cloud", ".", "transform", "(", "cam2object", ")", "\n", "image", "=", "pc_utils", ".", "pointcloud2image", "(", "image", ",", "point_cloud", ",", "3", ",", "intr", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.create_labels.create_labels": [[443, 531], ["numpy.array", "os.path.join", "os.listdir", "os.path.join", "int", "os.listdir.index", "os.listdir.index", "len", "ValueError", "len", "os.path.join", "os.path.join", "list", "len", "ValueError", "os.path.exists", "os.makedirs", "range", "print", "label_generator.utils.createLabel_RGBD", "PIL.Image.fromarray", "Image.fromarray.save", "os.listdir", "open", "numpy.array", "open", "numpy.array", "open", "numpy.array", "open", "numpy.array", "numpy.array", "matplotlib.show", "os.path.join", "os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open", "os.path.join", "PIL.Image.open", "open", "json.load", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.linalg.norm", "os.path.join", "PIL.Image.open", "PIL.Image.open", "numpy.array", "numpy.array", "json.load.get", "json.load.get"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.createLabel_RGBD", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "", "", "", "def", "create_labels", "(", "object_name", ",", "root", ",", "reference_point", "=", "np", ".", "array", "(", "[", "]", ")", ",", "plot", "=", "False", ",", "hsv", "=", "False", ",", "both", "=", "True", ")", ":", "\n", "    ", "object_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data_generation/data'", ",", "object_name", ")", "\n", "dirs", "=", "os", ".", "listdir", "(", "object_path", ")", "\n", "background_path", "=", "os", ".", "path", ".", "join", "(", "object_path", ",", "'background'", ")", "\n", "n", "=", "int", "(", "len", "(", "os", ".", "listdir", "(", "background_path", ")", ")", "/", "3", ")", "\n", "\n", "try", ":", "\n", "        ", "i", "=", "dirs", ".", "index", "(", "'background'", ")", "\n", "del", "dirs", "[", "i", "]", "\n", "", "except", ":", "\n", "        ", "raise", "ValueError", "(", "'background does not exist in object_path: {}'", ".", "format", "(", "object_path", ")", ")", "\n", "\n", "", "try", ":", "\n", "        ", "i", "=", "dirs", ".", "index", "(", "'extra'", ")", "\n", "del", "dirs", "[", "i", "]", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "len", "(", "dirs", ")", "<", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'no foreground'", ")", "\n", "\n", "\n", "", "ns", "=", "n", "*", "len", "(", "dirs", ")", "\n", "counter", "=", "0", "\n", "for", "d", "in", "dirs", ":", "\n", "        ", "foreground_path", "=", "os", ".", "path", ".", "join", "(", "object_path", ",", "d", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'label_generator/data'", ",", "object_name", ",", "d", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "\n", "", "indexes", "=", "list", "(", "range", "(", "n", ")", ")", "\n", "#indexes = [32,33]", "\n", "\n", "for", "idx", "in", "indexes", ":", "\n", "            ", "counter", "+=", "1", "\n", "print", "(", "'number = {}/{}'", ".", "format", "(", "counter", ",", "ns", ")", ")", "# prints the progress in the terminal", "\n", "# load for the given index the background, object frame and ground truth", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "background_path", ",", "'{:06d}.color.png'", ".", "format", "(", "idx", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "background_color_frame", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "foreground_path", ",", "'{:06d}.color.png'", ".", "format", "(", "idx", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "foreground_color_frame", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "background_path", ",", "'{:06d}.depth.png'", ".", "format", "(", "idx", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "background_depth_frame", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "foreground_path", ",", "'{:06d}.depth.png'", ".", "format", "(", "idx", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "foreground_depth_frame", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "", "if", "reference_point", "!=", "np", ".", "array", "(", "[", "]", ")", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "foreground_path", ",", "'{:06d}.meta.json'", ".", "format", "(", "idx", ")", ")", ")", "as", "f", ":", "\n", "\n", "                    ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "robot2endEff_tf", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'robot2endEff_tf'", ")", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "hand_eye_calibration", "=", "np", ".", "array", "(", "meta", ".", "get", "(", "'hand_eye_calibration'", ")", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "intr", "=", "meta", "[", "'intr'", "]", "\n", "\n", "robot2cam", "=", "np", ".", "dot", "(", "robot2endEff_tf", ",", "hand_eye_calibration", ")", "\n", "pos", "=", "robot2cam", "[", ":", "3", ",", "3", "]", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "reference_point", "-", "pos", ")", "\n", "", "", "else", ":", "\n", "                ", "dist", "=", "None", "\n", "\n", "#if idx == 50:", "\n", "#    plot = True", "\n", "#else:", "\n", "#    plot = False", "\n", "", "label", "=", "createLabel_RGBD", "(", "background_color_frame", ",", "\n", "foreground_color_frame", ",", "\n", "background_depth_frame", ",", "\n", "foreground_depth_frame", ",", "\n", "plot", "=", "plot", ",", "\n", "threshold", "=", "30", ",", "\n", "hsv", "=", "hsv", ",", "\n", "both", "=", "both", ",", "\n", "intr", "=", "intr", ",", "\n", "close", "=", "6", ",", "\n", "open", "=", "6", ",", "\n", "measure_dist", "=", "dist", ",", "\n", "remove_one_std", "=", "True", "\n", ")", "\n", "\n", "if", "plot", ":", "\n", "                ", "plt", ".", "show", "(", ")", "\n", "\n", "", "label", "=", "Image", ".", "fromarray", "(", "label", ")", "\n", "label", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{:06d}.gen.label.png'", ".", "format", "(", "idx", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.contrast_stretching": [[7, 19], ["numpy.ndarray.flatten", "numpy.min", "numpy.max", "numpy.reshape", "numpy.array"], "function", ["None"], ["import", "segmentation_models_pytorch", "as", "smp", "\n", "import", "random", "\n", "import", "copy", "\n", "from", "PIL", "import", "Image", "\n", "\n", "class", "HFlipDefault", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "0.5", "\n", "self", ".", "hflip", "=", "transforms", ".", "functional", ".", "hflip", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "p", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.connectedComponents": [[21, 24], ["cv2.connectedComponents", "numpy.array"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.connectedComponents"], ["label", "=", "self", ".", "hflip", "(", "label", ")", "\n", "\n", "", "return", "[", "img", ",", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.smoothing": [[26, 31], ["cv2.filter2D", "numpy.ones"], "function", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "rotation", "=", "transforms", ".", "functional", ".", "rotate", "\n", "self", ".", "range", "=", "[", "-", "180", ",", "180", "]", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "image", ",", "label", "=", "data", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.opening": [[33, 37], ["numpy.ones", "cv2.morphologyEx"], "function", ["None"], ["image", "=", "self", ".", "rotation", "(", "image", ",", "angle", ")", "\n", "label", "=", "self", ".", "rotation", "(", "label", ",", "angle", ")", "\n", "return", "image", ",", "label", "\n", "\n", "", "", "class", "colorJitter", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.closing": [[39, 43], ["numpy.ones", "cv2.morphologyEx"], "function", ["None"], ["        ", "self", ".", "ColorJitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.2", ",", "\n", "contrast", "=", "0.2", ",", "\n", "saturation", "=", "0.2", ",", "\n", "hue", "=", "0.05", ")", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.createLabel_RGBD": [[45, 365], ["numpy.array", "numpy.array", "numpy.abs", "range", "numpy.sum", "copy.deepcopy", "numpy.array", "numpy.array", "matplotlib.subplot", "matplotlib.title", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.title", "matplotlib.imshow", "matplotlib.axis", "cv2.cvtColor", "cv2.cvtColor", "numpy.where", "numpy.array", "numpy.abs", "matplotlib.subplot", "matplotlib.axis", "matplotlib.title", "matplotlib.imshow", "int", "matplotlib.subplot", "matplotlib.axis", "matplotlib.title", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "utils.opening", "utils.closing", "matplotlib.subplot", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "utils.connectedComponents", "numpy.unique", "len", "cv2.cvtColor", "cv2.cvtColor", "numpy.concatenate", "numpy.concatenate", "int", "numpy.array", "numpy.array", "numpy.array", "numpy.cross", "numpy.dot", "numpy.where", "numpy.concatenate", "numpy.array().reshape", "utils.smoothing", "matplotlib.subplot", "matplotlib.title", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.title", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "numpy.array", "matplotlib.subplot", "matplotlib.axis", "matplotlib.title", "matplotlib.imshow", "numpy.array", "matplotlib.subplot", "matplotlib.axis", "matplotlib.title", "matplotlib.imshow", "numpy.zeros", "enumerate", "matplotlib.subplot", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "numpy.mean", "numpy.std", "utils.opening", "utils.closing", "utils.connectedComponents", "numpy.unique", "len", "matplotlib.subplot", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "numpy.where", "numpy.where", "numpy.where", "len", "numpy.sort", "numpy.array", "numpy.array", "points.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "matplotlib.subplot", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "numpy.zeros", "enumerate", "int", "int", "int", "int", "zip", "int", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.array", "int", "numpy.max", "numpy.min", "numpy.max", "int", "int", "int", "int", "int", "int", "numpy.mean", "int", "len", "numpy.linalg.norm", "numpy.sum", "len", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.opening", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.closing", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.connectedComponents", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.smoothing", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.opening", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.closing", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.connectedComponents"], ["img", "=", "self", ".", "ColorJitter", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "normalize", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "normalize", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "toTensor", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "label", "=", "label", ".", "long", "(", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "\n", "\n", "\n", "", "", "def", "jaccard_loss", "(", "true", ",", "logits", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"Computes the Jaccard loss, a.k.a the IoU loss.\n    Note that PyTorch optimizers minimize a loss. In this\n    case, we would like to maximize the jaccard loss so we\n    return the negated jaccard loss.\n    Args:\n        true: a tensor of shape [B, H, W] or [B, 1, H, W].\n        logits: a tensor of shape [B, C, H, W]. Corresponds to\n            the raw output or logits of the model.\n        eps: added to the denominator for numerical stability.\n    Returns:\n        jacc_loss: the Jaccard loss.\n    \"\"\"", "\n", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "# unique = torch.unique(true)[1:]", "\n", "unique", "=", "torch", ".", "unique", "(", "true", ")", "\n", "#print('unique', unique)", "\n", "if", "num_classes", "==", "1", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", "+", "1", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "true_1_hot_f", "=", "true_1_hot", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "true_1_hot_s", "=", "true_1_hot", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "true_1_hot", "=", "torch", ".", "cat", "(", "[", "true_1_hot_s", ",", "true_1_hot_f", "]", ",", "dim", "=", "1", ")", "\n", "pos_prob", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "neg_prob", "=", "1", "-", "pos_prob", "\n", "probas", "=", "torch", ".", "cat", "(", "[", "pos_prob", ",", "neg_prob", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "probas", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "true_1_hot", "=", "true_1_hot", ".", "type", "(", "logits", ".", "type", "(", ")", ")", "\n", "dims", "=", "(", "0", ",", ")", "+", "tuple", "(", "range", "(", "2", ",", "true", ".", "ndimension", "(", ")", ")", ")", "\n", "intersection", "=", "torch", ".", "sum", "(", "probas", "*", "true_1_hot", ",", "dims", ")", "\n", "cardinality", "=", "torch", ".", "sum", "(", "probas", "+", "true_1_hot", ",", "dims", ")", "\n", "union", "=", "cardinality", "-", "intersection", "\n", "#jacc_loss = (intersection / (union + eps)).mean()", "\n", "jacc_loss", "=", "(", "intersection", "/", "(", "union", "+", "eps", ")", ")", "\n", "#print('jacc_loss', jacc_loss, jacc_loss.shape)", "\n", "#print(jacc_loss.mean(dim=1), jacc_loss.mean(dim=1).shape, jacc_loss.mean())", "\n", "jacc_loss", "=", "jacc_loss", "[", "unique", "]", "\n", "jacc_loss", "=", "jacc_loss", ".", "mean", "(", ")", "\n", "#print('mean', jacc_loss)", "\n", "#print('out', (1 - jacc_loss))", "\n", "return", "(", "1", "-", "jacc_loss", ")", "\n", "\n", "\n", "", "class", "Metric", "(", "object", ")", ":", "\n", "    ", "\"\"\"Base class for all metrics.\n    From: https://github.com/pytorch/tnt/blob/master/torchnet/meter/meter.py\n    \"\"\"", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "add", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "class", "ConfusionMatrix", "(", "Metric", ")", ":", "\n", "    ", "\"\"\"Constructs a confusion matrix for a multi-class classification problems.\n    Does not support multi-label, multi-class problems.\n    Keyword arguments:\n    - num_classes (int): number of classes in the classification problem.\n    - normalized (boolean, optional): Determines whether or not the confusion\n    matrix is normalized or not. Default: False.\n    Modified from: https://github.com/pytorch/tnt/blob/master/torchnet/meter/confusionmeter.py\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "num_classes", ",", "normalized", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conf", "=", "np", ".", "ndarray", "(", "(", "num_classes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "normalized", "=", "normalized", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf", ".", "fill", "(", "0", ")", "\n", "\n", "", "def", "add", "(", "self", ",", "predicted", ",", "target", ")", ":", "\n", "        ", "\"\"\"Computes the confusion matrix\n        The shape of the confusion matrix is K x K, where K is the number\n        of classes.\n        Keyword arguments:\n        - predicted (Tensor or numpy.ndarray): Can be an N x K tensor/array of\n        predicted scores obtained from the model for N examples and K classes,\n        or an N-tensor/array of integer values between 0 and K-1.\n        - target (Tensor or numpy.ndarray): Can be an N x K tensor/array of\n        ground-truth classes for N examples and K classes, or an N-tensor/array\n        of integer values between 0 and K-1.\n        \"\"\"", "\n", "# If target and/or predicted are tensors, convert them to numpy arrays", "\n", "if", "torch", ".", "is_tensor", "(", "predicted", ")", ":", "\n", "            ", "predicted", "=", "predicted", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "            ", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "assert", "predicted", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ",", "'number of targets and predicted outputs do not match'", "\n", "\n", "if", "np", ".", "ndim", "(", "predicted", ")", "!=", "1", ":", "\n", "            ", "assert", "predicted", ".", "shape", "[", "1", "]", "==", "self", ".", "num_classes", ",", "'number of predictions does not match size of confusion matrix'", "\n", "predicted", "=", "np", ".", "argmax", "(", "predicted", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "predicted", ".", "max", "(", ")", "<", "self", ".", "num_classes", ")", "and", "(", "predicted", ".", "min", "(", ")", ">=", "0", ")", ",", "'predicted values are not between 0 and k-1'", "\n", "\n", "", "if", "np", ".", "ndim", "(", "target", ")", "!=", "1", ":", "\n", "            ", "assert", "target", ".", "shape", "[", "1", "]", "==", "self", ".", "num_classes", ",", "'Onehot target does not match size of confusion matrix'", "\n", "assert", "(", "target", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "target", "<=", "1", ")", ".", "all", "(", ")", ",", "'in one-hot encoding, target values should be 0 or 1'", "\n", "assert", "(", "target", ".", "sum", "(", "1", ")", "==", "1", ")", ".", "all", "(", ")", ",", "'multi-label setting is not supported'", "\n", "target", "=", "np", ".", "argmax", "(", "target", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "target", ".", "max", "(", ")", "<", "self", ".", "num_classes", ")", "and", "(", "target", ".", "min", "(", ")", ">=", "0", ")", ",", "'target values are not between 0 and k-1'", "\n", "\n", "# hack for bincounting 2 arrays together", "\n", "", "x", "=", "predicted", "+", "self", ".", "num_classes", "*", "target", "\n", "bincount_2d", "=", "np", ".", "bincount", "(", "\n", "x", ".", "astype", "(", "np", ".", "int32", ")", ",", "minlength", "=", "self", ".", "num_classes", "**", "2", ")", "\n", "assert", "bincount_2d", ".", "size", "==", "self", ".", "num_classes", "**", "2", "\n", "conf", "=", "bincount_2d", ".", "reshape", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "self", ".", "conf", "+=", "conf", "\n", "\n", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            Confustion matrix of K rows and K columns, where rows corresponds\n            to ground-truth targets and columns corresponds to predicted\n            targets.\n        \"\"\"", "\n", "if", "self", ".", "normalized", ":", "\n", "            ", "conf", "=", "self", ".", "conf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "conf", "/", "conf", ".", "sum", "(", "1", ")", ".", "clip", "(", "min", "=", "1e-12", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conf", "\n", "\n", "\n", "\n", "", "", "", "class", "IoU", "(", "Metric", ")", ":", "\n", "    ", "\"\"\"Computes the intersection over union (IoU) per class and corresponding\n    mean (mIoU).\n    Intersection over union (IoU) is a common evaluation metric for semantic\n    segmentation. The predictions are first accumulated in a confusion matrix\n    and the IoU is computed from it as follows:\n        IoU = true_positive / (true_positive + false_positive + false_negative).\n    Keyword arguments:\n    - num_classes (int): number of classes in the classification problem\n    - normalized (boolean, optional): Determines whether or not the confusion\n    matrix is normalized or not. Default: False.\n    - ignore_index (int or iterable, optional): Index of the classes to ignore\n    when computing the IoU. Can be an int, or any iterable of ints.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "num_classes", ",", "normalized", "=", "False", ",", "ignore_index", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conf_metric", "=", "ConfusionMatrix", "(", "num_classes", ",", "normalized", ")", "\n", "\n", "if", "ignore_index", "is", "None", ":", "\n", "            ", "self", ".", "ignore_index", "=", "None", "\n", "", "elif", "isinstance", "(", "ignore_index", ",", "int", ")", ":", "\n", "            ", "self", ".", "ignore_index", "=", "(", "ignore_index", ",", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "ignore_index", "=", "tuple", "(", "ignore_index", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "raise", "ValueError", "(", "\"'ignore_index' must be an int or iterable\"", ")", "\n", "\n", "", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf_metric", ".", "reset", "(", ")", "\n", "\n", "", "def", "add", "(", "self", ",", "predicted", ",", "target", ")", ":", "\n", "        ", "\"\"\"Adds the predicted and target pair to the IoU metric.\n        Keyword arguments:\n        - predicted (Tensor): Can be a (N, K, H, W) tensor of\n        predicted scores obtained from the model for N examples and K classes,\n        or (N, H, W) tensor of integer values between 0 and K-1.\n        - target (Tensor): Can be a (N, K, H, W) tensor of\n        target scores for N examples and K classes, or (N, H, W) tensor of\n        integer values between 0 and K-1.\n        \"\"\"", "\n", "# Dimensions check", "\n", "assert", "predicted", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "'number of targets and predicted outputs do not match'", "\n", "assert", "predicted", ".", "dim", "(", ")", "==", "3", "or", "predicted", ".", "dim", "(", ")", "==", "4", ",", "\"predictions must be of dimension (N, H, W) or (N, K, H, W)\"", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "or", "target", ".", "dim", "(", ")", "==", "4", ",", "\"targets must be of dimension (N, H, W) or (N, K, H, W)\"", "\n", "\n", "# If the tensor is in categorical format convert it to integer format", "\n", "if", "predicted", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "_", ",", "predicted", "=", "predicted", ".", "max", "(", "1", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "_", ",", "target", "=", "target", ".", "max", "(", "1", ")", "\n", "\n", "", "self", ".", "conf_metric", ".", "add", "(", "predicted", ".", "view", "(", "-", "1", ")", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the IoU and mean IoU.\n        The mean computation ignores NaN elements of the IoU array.\n        Returns:\n            Tuple: (IoU, mIoU). The first output is the per class IoU,\n            for K classes it's numpy.ndarray with K elements. The second output,\n            is the mean IoU.\n        \"\"\"", "\n", "conf_matrix", "=", "self", ".", "conf_metric", ".", "value", "(", ")", "\n", "if", "self", ".", "ignore_index", "is", "not", "None", ":", "\n", "            ", "for", "index", "in", "self", ".", "ignore_index", ":", "\n", "                ", "conf_matrix", "[", ":", ",", "self", ".", "ignore_index", "]", "=", "0", "\n", "conf_matrix", "[", "self", ".", "ignore_index", ",", ":", "]", "=", "0", "\n", "", "", "true_positive", "=", "np", ".", "diag", "(", "conf_matrix", ")", "\n", "false_positive", "=", "np", ".", "sum", "(", "conf_matrix", ",", "0", ")", "-", "true_positive", "\n", "false_negative", "=", "np", ".", "sum", "(", "conf_matrix", ",", "1", ")", "-", "true_positive", "\n", "\n", "# Just in case we get a division by 0, ignore/hide the error", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "            ", "iou", "=", "true_positive", "/", "(", "true_positive", "+", "false_positive", "+", "false_negative", ")", "\n", "\n", "", "return", "iou", ",", "np", ".", "nanmean", "(", "iou", "[", "1", ":", "]", ")", "\n", "\n", "", "", "def", "animate", "(", "i", ",", "fig", ",", "axs", ",", "path", ",", "mean_cca", "=", "True", ")", ":", "\n", "\n", "\n", "    ", "with", "open", "(", "path", ")", "as", "json_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "plt", ".", "cla", "(", ")", "\n", "fig", ".", "suptitle", "(", "'Best mIou: {} in epoch: {}'", ".", "format", "(", "np", ".", "round", "(", "config", "[", "'best_iou_score'", "]", ",", "4", ")", ",", "config", "[", "'best_iou_score_epoch'", "]", ")", ",", "fontsize", "=", "16", ")", "\n", "axs", "[", "0", "]", ".", "plot", "(", "config", "[", "'losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "0", "]", ".", "set_title", "(", "'jaccard loss'", ")", "\n", "axs", "[", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", "]", ".", "plot", "(", "config", "[", "'iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "1", "]", ".", "set_title", "(", "'mean IoU'", ")", "\n", "axs", "[", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "if", "mean_cca", ":", "\n", "        ", "axs", "[", "2", "]", ".", "plot", "(", "config", "[", "'iou_cca_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "2", "]", ".", "set_title", "(", "'mean cca IoU'", ")", "\n", "axs", "[", "2", "]", ".", "set_ylabel", "(", "'cca mIoU'", ")", "\n", "axs", "[", "2", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "", "", "def", "animate2", "(", "i", ",", "fig", ",", "axs", ",", "path", ")", ":", "\n", "\n", "\n", "    ", "with", "open", "(", "path", ")", "as", "json_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "plt", ".", "cla", "(", ")", "\n", "fig", ".", "suptitle", "(", "'Best mIou: {} in epoch: {}'", ".", "format", "(", "np", ".", "round", "(", "config", "[", "'best_iou_score'", "]", ",", "4", ")", ",", "config", "[", "'best_iou_score_epoch'", "]", ")", ",", "fontsize", "=", "16", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "plot", "(", "config", "[", "'train_losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_title", "(", "'train jaccard loss'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "0", ",", "1", "]", ".", "plot", "(", "config", "[", "'train_iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_title", "(", "'train mean IoU'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", ",", "0", "]", ".", "plot", "(", "config", "[", "'valid_losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_title", "(", "'valid jaccard loss'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", ",", "1", "]", ".", "plot", "(", "config", "[", "'valid_iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_title", "(", "'valid mean IoU'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "\n", "\n", "", "nets", "=", "{", "'Unet'", ":", "smp", ".", "Unet", ",", "\n", "'PsPNet'", ":", "smp", ".", "PSPNet", ",", "\n", "'LinkNet'", ":", "smp", ".", "Linknet", "}", "\n", "\n", "def", "get_model", "(", "name", ",", "segmentation_config", ")", ":", "\n", "    ", "model", "=", "nets", "[", "name", "]", "\n", "model", "=", "model", "(", "**", "segmentation_config", ")", "\n", "return", "model", "\n", "\n", "", "class", "CropAndZoom", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "bbox_increase", "=", "1.1", "\n", "self", ".", "to_small", "=", "0.8", "\n", "self", ".", "to_big", "=", "1.2", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.getPoses.take_images": [[12, 49], ["enumerate", "print", "controller.move_joints", "print", "numpy.deg2rad", "controller.at_target", "print", "time.sleep", "int", "time.sleep", "data[].append", "data[].append", "DC.get_frames", "images.append", "depths.append", "cv2.imshow", "cv2.waitKey", "print", "controller.get_joints", "list", "controller.get_pose", "hand_eye_calibration.calib.get_cam_poses", "print", "controller.get_joints", "controller.get_joints", "print"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_frames", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.get_cam_poses", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_joints", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_joints"], ["def", "take_images", "(", "positions", ",", "via_pos", ",", "controller", ",", "vel", ",", "DC", ",", "intr", ")", ":", "\n", "\n", "    ", "images", "=", "[", "]", "\n", "depths", "=", "[", "]", "\n", "data", "=", "{", "'joints'", ":", "[", "]", ",", "\n", "'cart_pose'", ":", "[", "]", "}", "\n", "for", "i", ",", "joints", "in", "enumerate", "(", "positions", ")", ":", "\n", "        ", "print", "(", "'currentjoints = {}, joints = {}, diff = {}'", ".", "format", "(", "controller", ".", "get_joints", "(", ")", ",", "joints", ",", "joints", "-", "controller", ".", "get_joints", "(", ")", ")", ")", "\n", "\n", "controller", ".", "move_joints", "(", "np", ".", "deg2rad", "(", "joints", ")", ",", "moveType", "=", "'p'", ",", "vel", "=", "vel", ")", "\n", "print", "(", "'start moving'", ")", "\n", "while", "not", "controller", ".", "at_target", "(", "joints", ")", ":", "\n", "            ", "print", "(", "'not at target'", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "", "if", "int", "(", "via_pos", "[", "i", "]", ")", "==", "0", ":", "\n", "            ", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "data", "[", "'joints'", "]", ".", "append", "(", "list", "(", "controller", ".", "get_joints", "(", ")", ")", ")", "\n", "data", "[", "'cart_pose'", "]", ".", "append", "(", "controller", ".", "get_pose", "(", "return_mm", "=", "True", ")", ")", "\n", "out", "=", "DC", ".", "get_frames", "(", ")", "\n", "images", ".", "append", "(", "out", "[", "'image'", "]", ")", "\n", "depths", ".", "append", "(", "out", "[", "'depth'", "]", ")", "\n", "cv2", ".", "imshow", "(", "'image'", ",", "out", "[", "'image'", "]", ")", "\n", "cv2", ".", "waitKey", "(", "100", ")", "\n", "\n", "try", ":", "\n", "                ", "_", "=", "get_cam_poses", "(", "[", "out", "[", "'image'", "]", "]", ",", "intr", ")", "\n", "print", "(", "'got cam poses'", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'failed to get cam poses'", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'via point'", ")", "\n", "\n", "\n", "", "", "return", "images", ",", "depths", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.getPoses.get_camera_poses": [[50, 129], ["os.path.join", "DC.get_intrinsics", "robot_controller.TestController.RobotController", "input", "print", "robot_controller.TestController.RobotController.is_home", "os.path.exists", "os.makedirs", "open", "json.load", "robot_controller.TestController.RobotController.is_home", "getPoses.take_images", "numpy.array", "os.path.join", "cv2.FileStorage", "cv2.FileStorage.write", "cv2.FileStorage.release", "hand_eye_calibration.calib.get_cam_poses", "range", "print", "numpy.linalg.norm", "numpy.zeros", "transforms3d.axangles.axangle2mat", "list.flatten", "range", "list", "np.array.append", "os.path.exists", "os.makedirs", "len", "range", "list", "cam_poses.append", "open", "json.dump", "len", "float", "len", "float"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_home", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_home", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.getPoses.take_images", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.get_cam_poses", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "get_camera_poses", "(", "DC", ",", "name", ")", ":", "\n", "    ", "dir", "=", "'./data'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "'/home/kochpaul/projects/masterthesis/robot_controller/robot_path'", ",", "name", ")", "\n", "\n", "intr", "=", "DC", ".", "get_intrinsics", "(", ")", "\n", "meta", "=", "{", "'width'", ":", "intr", ".", "width", ",", "\n", "'height'", ":", "intr", ".", "height", ",", "\n", "'ppx'", ":", "intr", ".", "ppx", ",", "\n", "'ppy'", ":", "intr", ".", "ppy", ",", "\n", "'fx'", ":", "intr", ".", "ppx", ",", "\n", "'fy'", ":", "intr", ".", "ppy", ",", "\n", "'coeffs'", ":", "intr", ".", "coeffs", "\n", "}", "\n", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "\n", "", "controller", "=", "RobotController", "(", ")", "\n", "vel", "=", "0.30", "\n", "\n", "input", "(", "'start obtaining images'", ")", "\n", "print", "(", "'robot home = '", ",", "controller", ".", "is_home", "(", ")", ")", "\n", "if", "controller", ".", "is_home", "(", ")", ":", "\n", "\n", "# get images", "\n", "        ", "images", ",", "depths", ",", "meta2", "=", "take_images", "(", "data", "[", "'joints'", "]", ",", "data", "[", "'via_points'", "]", ",", "controller", ",", "vel", ",", "DC", ",", "intr", ")", "\n", "meta", "[", "'joints'", "]", "=", "meta2", "[", "'joints'", "]", "\n", "meta", "[", "'cart_pose'", "]", "=", "meta2", "[", "'cart_pose'", "]", "\n", "\n", "# get robot poses", "\n", "robot_poses", "=", "[", "]", "\n", "for", "pose", "in", "meta", "[", "'cart_pose'", "]", ":", "\n", "            ", "r", "=", "[", "pose", "[", "'a'", "]", ",", "pose", "[", "'b'", "]", ",", "pose", "[", "'c'", "]", "]", "\n", "anlge", "=", "np", ".", "linalg", ".", "norm", "(", "r", ")", "\n", "axis", "=", "r", "/", "anlge", "\n", "trans_mat", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "trans_mat", "[", "3", ",", "3", "]", "=", "1", "\n", "rot_mat", "=", "transforms3d", ".", "axangles", ".", "axangle2mat", "(", "axis", ",", "anlge", ")", "\n", "trans_mat", "[", ":", "3", ",", ":", "3", "]", "=", "rot_mat", "\n", "trans_mat", "[", ":", "3", ",", "3", "]", "=", "[", "pose", "[", "'x'", "]", ",", "pose", "[", "'y'", "]", ",", "pose", "[", "'z'", "]", "]", "\n", "trans_mat", "=", "trans_mat", ".", "flatten", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "trans_mat", ")", ")", ":", "\n", "                ", "trans_mat", "[", "i", "]", "=", "float", "(", "trans_mat", "[", "i", "]", ")", "\n", "", "trans_mat", "=", "list", "(", "trans_mat", ")", "\n", "robot_poses", ".", "append", "(", "trans_mat", ")", "\n", "", "meta", "[", "'robot_poses'", "]", "=", "robot_poses", "\n", "\n", "robot_poses", "=", "np", ".", "array", "(", "robot_poses", ")", "\n", "\n", "# save robot poses", "\n", "save_path", "=", "'/home/kochpaul/projects/masterthesis/hand_eye_calibration/data'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "robot_poses_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'robot_poses.yaml'", ")", "\n", "fs_write", "=", "cv2", ".", "FileStorage", "(", "robot_poses_path", ",", "cv2", ".", "FILE_STORAGE_WRITE", ")", "\n", "fs_write", ".", "write", "(", "\"poses\"", ",", "robot_poses", ")", "\n", "fs_write", ".", "release", "(", ")", "\n", "\n", "# get and save cam poses", "\n", "cam_poses_np", "=", "get_cam_poses", "(", "images", ",", "intr", ",", "save_path", ")", "\n", "cam_poses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cam_poses_np", ")", ")", ":", "\n", "            ", "pose", "=", "cam_poses_np", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "pose", ")", ")", ":", "\n", "                ", "pose", "[", "j", "]", "=", "float", "(", "pose", "[", "j", "]", ")", "\n", "", "pose", "=", "list", "(", "pose", ")", "\n", "cam_poses", ".", "append", "(", "pose", ")", "\n", "\n", "", "meta", "[", "'cam_poses'", "]", "=", "cam_poses", "\n", "\n", "with", "open", "(", "dir", "+", "'/meta.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "meta", ",", "f", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'robot not in home position'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.get_board": [[10, 22], ["cv2.aruco.Dictionary_get", "cv2.aruco.CharucoBoard_create", "numpy.zeros", "numpy.array"], "function", ["None"], ["def", "get_board", "(", "intr", ")", ":", "\n", "    ", "squaresX", "=", "6", "\n", "squaresY", "=", "7", "\n", "squareLength", "=", "15", "\n", "markerLength", "=", "10", "\n", "aruco_dict", "=", "aruco", ".", "Dictionary_get", "(", "aruco", ".", "DICT_5X5_50", ")", "\n", "board", "=", "cv2", ".", "aruco", ".", "CharucoBoard_create", "(", "squaresX", ",", "squaresY", ",", "squareLength", ",", "markerLength", ",", "aruco_dict", ")", "\n", "distCoeffs", "=", "np", ".", "zeros", "(", "5", ")", "\n", "cameraMatrix", "=", "np", ".", "array", "(", "[", "[", "intr", ".", "fx", ",", "0.", ",", "intr", ".", "ppx", "]", ",", "\n", "[", "0.", ",", "intr", ".", "fy", ",", "intr", ".", "ppy", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "return", "aruco_dict", ",", "board", ",", "distCoeffs", ",", "cameraMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.stream_cam_pose": [[23, 54], ["depth_camera.DepthCam.DepthCam", "depth_camera.DepthCam.DepthCam.get_intrinsics", "calib.get_board", "time.time", "depth_camera.DepthCam.DepthCam.get_intrinsics", "depth_camera.DepthCam.DepthCam.get_frames", "cv2.cvtColor", "cv2.aruco.detectMarkers", "cv2.aruco.interpolateCornersCharuco", "cv2.aruco.estimatePoseCharucoBoard", "numpy.zeros", "print", "cv2.Rodrigues", "time.time", "time.sleep", "input"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.get_board", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_intrinsics", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.depth_camera.DepthCam.DepthCam.get_frames"], ["", "def", "stream_cam_pose", "(", "stop_after_image", "=", "False", ")", ":", "\n", "    ", "cam", "=", "DepthCam", "(", "depth_frame_height", "=", "720", ",", "depth_frame_width", "=", "1280", ",", "color_frame_height", "=", "720", ",", "color_frame_width", "=", "1280", ")", "\n", "intr", "=", "cam", ".", "get_intrinsics", "(", ")", "\n", "aruco_dict", ",", "board", ",", "distCoeffs", ",", "cameraMatrix", "=", "get_board", "(", "intr", ")", "\n", "\n", "fps", "=", "2", "\n", "while", "True", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "intr", "=", "cam", ".", "get_intrinsics", "(", ")", "\n", "out", "=", "cam", ".", "get_frames", "(", ")", "\n", "gray", "=", "cv2", ".", "cvtColor", "(", "out", "[", "'image'", "]", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "corners", ",", "ids", ",", "rejectedImgPoints", "=", "cv2", ".", "aruco", ".", "detectMarkers", "(", "gray", ",", "aruco_dict", ")", "\n", "\n", "imsize", "=", "gray", ".", "shape", "\n", "\n", "\n", "charucoretval", ",", "charucoCorners", ",", "charucoIds", "=", "aruco", ".", "interpolateCornersCharuco", "(", "corners", ",", "ids", ",", "gray", ",", "board", ")", "\n", "rvec", "=", "None", "\n", "tvec", "=", "None", "\n", "retval", ",", "rvec", ",", "tvec", "=", "aruco", ".", "estimatePoseCharucoBoard", "(", "charucoCorners", ",", "charucoIds", ",", "board", ",", "cameraMatrix", ",", "distCoeffs", ",", "rvec", ",", "tvec", ")", "\n", "rmat", "=", "cv2", ".", "Rodrigues", "(", "rvec", ")", "[", "0", "]", "\n", "trans_mat", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "trans_mat", "[", "3", ",", "3", "]", "=", "1", "\n", "trans_mat", "[", ":", "3", ",", ":", "3", "]", "=", "rmat", "\n", "trans_mat", "[", ":", "3", ",", "3", "]", "=", "tvec", "[", ":", ",", "0", "]", "\n", "print", "(", "trans_mat", ")", "\n", "eps", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "if", "eps", "<", "1", "/", "fps", ":", "\n", "            ", "time", ".", "sleep", "(", "1", "/", "fps", "-", "eps", ")", "\n", "", "if", "stop_after_image", ":", "\n", "            ", "input", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.get_cam_poses": [[56, 92], ["calib.get_board", "numpy.array", "cv2.cvtColor", "cv2.aruco.detectMarkers", "print", "os.path.join", "cv2.FileStorage", "cv2.FileStorage.write", "cv2.FileStorage.release", "len", "cv2.aruco.interpolateCornersCharuco", "cv2.aruco.estimatePoseCharucoBoard", "numpy.zeros", "np.array.append", "os.path.exists", "os.makedirs", "cv2.Rodrigues", "np.zeros.flatten"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.get_board"], ["", "", "", "def", "get_cam_poses", "(", "images", ",", "intr", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "aruco_dict", ",", "board", ",", "distCoeffs", ",", "cameraMatrix", "=", "get_board", "(", "intr", ")", "\n", "cam_poses", "=", "[", "]", "\n", "\n", "for", "image", "in", "images", ":", "\n", "        ", "gray", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "corners", ",", "ids", ",", "rejectedImgPoints", "=", "cv2", ".", "aruco", ".", "detectMarkers", "(", "gray", ",", "aruco_dict", ")", "\n", "\n", "if", "len", "(", "corners", ")", ">", "0", ":", "\n", "            ", "charucoretval", ",", "charucoCorners", ",", "charucoIds", "=", "aruco", ".", "interpolateCornersCharuco", "(", "corners", ",", "ids", ",", "gray", ",", "board", ")", "\n", "rvec", "=", "None", "\n", "tvec", "=", "None", "\n", "retval", ",", "rvec", ",", "tvec", "=", "aruco", ".", "estimatePoseCharucoBoard", "(", "charucoCorners", ",", "charucoIds", ",", "board", ",", "cameraMatrix", ",", "distCoeffs", ",", "\n", "rvec", ",", "tvec", ")", "\n", "\n", "rmat", "=", "cv2", ".", "Rodrigues", "(", "rvec", ")", "[", "0", "]", "\n", "trans_mat", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "trans_mat", "[", "3", ",", "3", "]", "=", "1", "\n", "trans_mat", "[", ":", "3", ",", ":", "3", "]", "=", "rmat", "\n", "trans_mat", "[", ":", "3", ",", "3", "]", "=", "tvec", "[", ":", ",", "0", "]", "\n", "cam_poses", ".", "append", "(", "trans_mat", ".", "flatten", "(", ")", ")", "\n", "\n", "\n", "", "", "cam_poses", "=", "np", ".", "array", "(", "cam_poses", ")", "\n", "if", "not", "save_path", ":", "\n", "        ", "print", "(", "cam_poses", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'cam_poses.yaml'", ")", "\n", "fs_write", "=", "cv2", ".", "FileStorage", "(", "save_path", ",", "cv2", ".", "FILE_STORAGE_WRITE", ")", "\n", "fs_write", ".", "write", "(", "\"poses\"", ",", "cam_poses", ")", "\n", "fs_write", ".", "release", "(", ")", "\n", "\n", "\n", "", "return", "cam_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.read_chessboards": [[93, 125], ["calib.get_board", "cv2.imread", "cv2.cvtColor", "cv2.aruco.detectMarkers", "len", "cv2.aruco.interpolateCornersCharuco", "cv2.cornerSubPix", "allCorners.append", "allIds.append", "len"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.get_board"], ["", "def", "read_chessboards", "(", "images", ",", "intr", ")", ":", "\n", "    ", "\"\"\"\n    Charuco base pose estimation.\n    \"\"\"", "\n", "aruco_dict", ",", "board", ",", "distCoeffs", ",", "cameraMatrix", "=", "get_board", "(", "intr", ")", "\n", "allCorners", "=", "[", "]", "\n", "allIds", "=", "[", "]", "\n", "decimator", "=", "0", "\n", "# SUB PIXEL CORNER DETECTION CRITERION", "\n", "criteria", "=", "(", "cv2", ".", "TERM_CRITERIA_EPS", "+", "cv2", ".", "TERM_CRITERIA_MAX_ITER", ",", "100", ",", "0.00001", ")", "\n", "\n", "for", "im", "in", "images", ":", "\n", "        ", "frame", "=", "cv2", ".", "imread", "(", "im", ")", "\n", "gray", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "corners", ",", "ids", ",", "rejectedImgPoints", "=", "cv2", ".", "aruco", ".", "detectMarkers", "(", "gray", ",", "aruco_dict", ")", "\n", "\n", "if", "len", "(", "corners", ")", ">", "0", ":", "\n", "# SUB PIXEL DETECTION", "\n", "            ", "for", "corner", "in", "corners", ":", "\n", "                ", "cv2", ".", "cornerSubPix", "(", "gray", ",", "corner", ",", "\n", "winSize", "=", "(", "3", ",", "3", ")", ",", "\n", "zeroZone", "=", "(", "-", "1", ",", "-", "1", ")", ",", "\n", "criteria", "=", "criteria", ")", "\n", "", "res2", "=", "cv2", ".", "aruco", ".", "interpolateCornersCharuco", "(", "corners", ",", "ids", ",", "gray", ",", "board", ")", "\n", "if", "res2", "[", "1", "]", "is", "not", "None", "and", "res2", "[", "2", "]", "is", "not", "None", "and", "len", "(", "res2", "[", "1", "]", ")", ">", "3", "and", "decimator", "%", "1", "==", "0", ":", "\n", "                ", "allCorners", ".", "append", "(", "res2", "[", "1", "]", ")", "\n", "allIds", ".", "append", "(", "res2", "[", "2", "]", ")", "\n", "\n", "", "", "decimator", "+=", "1", "\n", "\n", "", "imsize", "=", "gray", ".", "shape", "\n", "return", "allCorners", ",", "allIds", ",", "imsize", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.calibrate_camera": [[126, 149], ["calib.get_board", "cv2.aruco.calibrateCameraCharucoExtended"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.get_board"], ["", "def", "calibrate_camera", "(", "allCorners", ",", "allIds", ",", "imsize", ",", "intr", ")", ":", "\n", "    ", "\"\"\"\n    Calibrates the camera using the dected corners.\n    \"\"\"", "\n", "aruco_dict", ",", "board", ",", "distCoeffs", ",", "cameraMatrix", "=", "get_board", "(", "intr", ")", "\n", "\n", "\n", "flags", "=", "(", "cv2", ".", "CALIB_USE_INTRINSIC_GUESS", "+", "cv2", ".", "CALIB_FIX_ASPECT_RATIO", ")", "\n", "#flags = (cv2.CALIB_RATIONAL_MODEL)", "\n", "(", "ret", ",", "camera_matrix", ",", "distortion_coefficients0", ",", "\n", "rotation_vectors", ",", "translation_vectors", ",", "\n", "stdDeviationsIntrinsics", ",", "stdDeviationsExtrinsics", ",", "\n", "perViewErrors", ")", "=", "cv2", ".", "aruco", ".", "calibrateCameraCharucoExtended", "(", "\n", "charucoCorners", "=", "allCorners", ",", "\n", "charucoIds", "=", "allIds", ",", "\n", "board", "=", "board", ",", "\n", "imageSize", "=", "imsize", ",", "\n", "cameraMatrix", "=", "cameraMatrix", ",", "\n", "distCoeffs", "=", "distCoeffs", ",", "\n", "flags", "=", "flags", ",", "\n", "criteria", "=", "(", "cv2", ".", "TERM_CRITERIA_EPS", "&", "cv2", ".", "TERM_CRITERIA_COUNT", ",", "10000", ",", "1e-9", ")", ")", "\n", "\n", "return", "ret", ",", "camera_matrix", ",", "distortion_coefficients0", ",", "rotation_vectors", ",", "translation_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.calibrate": [[151, 157], ["os.listdir", "calib.read_chessboards", "calib.calibrate_camera", "os.path.join"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.read_chessboards", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.calibrate_camera"], ["", "def", "calibrate", "(", "path", ",", "intr", ")", ":", "\n", "    ", "dirs", "=", "os", ".", "listdir", "(", "path", ")", "\n", "images", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "p", ")", "for", "p", "in", "dirs", "]", "\n", "allCorners", ",", "allIds", ",", "imsize", "=", "read_chessboards", "(", "images", ",", "intr", ")", "\n", "ret", ",", "camera_matrix", ",", "distortion_coefficients0", ",", "rotation_vectors", ",", "translation_vectors", "=", "calibrate_camera", "(", "allCorners", ",", "allIds", ",", "imsize", ",", "intr", ")", "\n", "return", "ret", ",", "camera_matrix", ",", "distortion_coefficients0", ",", "rotation_vectors", ",", "translation_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.hand_eye_calibration.calib.apply_calibration": [[158, 161], ["cv2.undistort"], "function", ["None"], ["", "def", "apply_calibration", "(", "image", ",", "camera_matrix", ",", "distortion_coefficients0", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "undistort", "(", "image", ",", "camera_matrix", ",", "distortion_coefficients0", ",", "None", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.dataset.SegmentationDataset.__init__": [[11, 59], ["torch.utils.data.dataset.Dataset.__init__", "len", "transforms.Resize", "transforms.ToTensor", "transforms.Normalize", "transforms.ColorJitter", "print", "print", "list", "list", "print", "range", "np.mean", "np.mean", "load_subtraction", "dataset.SegmentationDataset.toTensor", "dataset.SegmentationDataset.mean.append", "dataset.SegmentationDataset.std.append", "np.array", "np.array", "list", "dataset.SegmentationDataset.dirs.keys", "torch.mean().numpy", "torch.std().numpy", "range", "range", "torch.mean", "torch.std"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.load_subtraction"], ["import", "copy", "\n", "\n", "\n", "class", "SegmentationDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_set_name", ",", "mode", ",", "mean", "=", "None", ",", "std", "=", "None", ",", "label_mode", "=", "'pred'", ",", "plot", "=", "False", ")", ":", "\n", "        ", "super", "(", "SegmentationDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "classes", "=", "[", "]", "\n", "self", ".", "dirs", "=", "[", "]", "\n", "\n", "pkg_path", "=", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "'data_generation'", ",", "'data'", ")", "\n", "self", ".", "label_root", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "'label_generator'", ",", "'data'", ")", "\n", "self", ".", "label_mode", "=", "label_mode", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "plot", "=", "plot", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'{}_data_list.txt'", ".", "format", "(", "mode", ")", ")", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "dirs", ".", "append", "(", "input_line", ")", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "\n", "'label_generator'", ",", "\n", "'data_sets'", ",", "\n", "'segmentation'", ",", "\n", "data_set_name", ",", "\n", "'classes.txt'", ")", "\n", "\n", "input_file", "=", "open", "(", "path", ")", "\n", "while", "1", ":", "\n", "            ", "input_line", "=", "input_file", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "not", "input_line", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "classes", ".", "append", "(", "input_line", ")", "\n", "\n", "", "self", ".", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "+", "1", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "            ", "found", "=", "False", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.dataset.SegmentationDataset.__getitem__": [[60, 87], ["int", "load_subtraction", "dataset.SegmentationDataset.toTensor", "torch.from_numpy", "y.long.long.long", "dataset.SegmentationDataset.normalize", "list", "np.array"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.load_subtraction"], ["for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "                ", "if", "cls", "in", "d", ":", "\n", "                    ", "found", "=", "True", "\n", "self", ".", "labels", ".", "append", "(", "i", "+", "1", ")", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "raise", "ValueError", "\n", "\n", "", "", "if", "not", "std", "or", "not", "mean", ":", "\n", "            ", "print", "(", "'compute mean and std'", ")", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mean", "=", "[", "]", "\n", "self", ".", "std", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dirs", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "'{0}/{1}.color.png'", ".", "format", "(", "self", ".", "root", ",", "d", ")", ")", "\n", "image", "=", "self", ".", "toTensor", "(", "image", ")", "\n", "self", ".", "mean", ".", "append", "(", "[", "torch", ".", "mean", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "std", ".", "append", "(", "[", "torch", ".", "std", "(", "image", "[", ":", ",", ":", ",", "i", "]", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "\n", "", "self", ".", "mean", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "mean", ")", ",", "axis", "=", "0", ")", ")", "\n", "self", ".", "std", "=", "list", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "std", ")", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "'mean = {}'", ".", "format", "(", "self", ".", "mean", ")", ")", "\n", "print", "(", "'std = {}'", ".", "format", "(", "self", ".", "std", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.dataset.SegmentationDataset.__len__": [[88, 90], ["int", "len", "dataset.SegmentationDataset.dirs.keys"], "methods", ["None"], ["", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "augmentations", "=", "transforms", ".", "Compose", "(", "[", "colorJitter", "(", ")", ",", "\n", "rotate", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.__init__.CP.__init__": [[18, 22], ["None"], "methods", ["None"], ["        ", "self", ".", "train_losses", "=", "[", "]", "\n", "self", ".", "train_iou_scores", "=", "[", "]", "\n", "self", ".", "valid_losses", "=", "[", "]", "\n", "self", ".", "valid_iou_scores", "=", "[", "]", "\n", "self", ".", "train_iou_per_class", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.__init__.segmentation_training": [[25, 268], ["str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "int", "enumerate", "background_subtraction.dataset.SegmentationDataset", "background_subtraction.dataset.SegmentationDataset", "background_subtraction.utils.get_model", "background_subtraction.utils.get_model.cuda", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.ReduceLROnPlateau", "background_subtraction.utils.IoU", "background_subtraction.utils.IoU_cca", "background_subtraction.utils.IoU", "background_subtraction.utils.IoU", "background_subtraction.utils.IoU_cca", "background_subtraction.utils.IoU_cca", "background_subtraction.utils.get_model.eval", "__init__.CP", "print", "print", "print", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.remove", "background_subtraction.utils.get_model.parameters", "print", "print", "background_subtraction.utils.IoU.value", "background_subtraction.utils.IoU.value", "background_subtraction.utils.IoU_cca.value", "background_subtraction.utils.IoU_cca.value", "print", "print", "print", "print", "print", "print", "background_subtraction.utils.get_model.train", "CP.losses.append", "print", "background_subtraction.utils.get_model.eval", "background_subtraction.utils.IoU.reset", "background_subtraction.utils.IoU_cca.reset", "background_subtraction.utils.IoU.value", "background_subtraction.utils.IoU_cca.value", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "CP.iou_scores.append", "CP.iou_cca_scores.append", "print", "print", "print", "print", "print", "pathlib.Path().resolve", "os.path.join", "len", "int", "list", "list", "torch.no_grad", "len", "len", "len", "img.cuda.cuda", "label.cuda.cuda", "background_subtraction.utils.get_model.", "background_subtraction.utils.jaccard_loss", "torch.optim.SGD.zero_grad", "background_subtraction.utils.jaccard_loss.backward", "torch.optim.SGD.step", "currentloss.append", "numpy.mean", "torch.no_grad", "torch.save", "open", "json.dump", "range", "range", "img.cuda.cuda", "label.cuda.cuda", "background_subtraction.utils.get_model.", "background_subtraction.utils.IoU.add", "background_subtraction.utils.IoU_cca.add", "torch.rand", "background_subtraction.utils.IoU.add", "background_subtraction.utils.IoU_cca.add", "float", "float", "float", "float", "float", "background_subtraction.utils.do_cca", "model.detach().cpu().numpy", "label.cuda.cpu().numpy", "matplotlib.cla", "matplotlib.subplots", "range", "fig.suptitle", "matplotlib.savefig", "img.cuda.cuda", "label.cuda.cuda", "background_subtraction.utils.get_model.", "background_subtraction.utils.IoU.add", "background_subtraction.utils.IoU_cca.add", "background_subtraction.utils.get_model.state_dict", "os.path.join", "os.path.join", "pathlib.Path", "model.detach", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "os.path.join", "background_subtraction.utils.do_cca", "model.cpu().numpy", "label.cuda.cpu().numpy", "matplotlib.cla", "matplotlib.subplots", "range", "fig.suptitle", "matplotlib.savefig", "model.detach().cpu", "label.cuda.cpu", "numpy.argmax", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "axs[].imshow", "axs[].set_title", "axs[].set_axis_off", "os.path.join", "new_pred[].transpose", "model.cpu", "label.cuda.cpu", "numpy.argmax", "model.detach", "new_pred[].transpose"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_model", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.jaccard_loss", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.do_cca", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.do_cca"], ["\n", "\n", "", "", "def", "segmentation_training", "(", "training_config", ",", "segmentation_config", ")", ":", "\n", "\n", "    ", "print", "(", "'create paths'", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ",", "'trained_models'", ",", "training_config", "[", "'dataset_name'", "]", ")", "\n", "logs_path", "=", "os", ".", "path", ".", "join", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ",", "'logs'", ",", "training_config", "[", "'dataset_name'", "]", ")", "\n", "logs_images", "=", "os", ".", "path", ".", "join", "(", "logs_path", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "logs_images", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "logs_images", ")", "\n", "\n", "", "for", "img", "in", "os", ".", "listdir", "(", "logs_images", ")", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "logs_images", ",", "img", ")", ")", "\n", "\n", "", "if", "segmentation_config", "[", "'encoder_weights'", "]", "==", "'imagenet'", ":", "\n", "        ", "print", "(", "'use imagenet mean and std'", ")", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "training_config", "[", "'dataset_name'", "]", "==", "'full_12_classes'", ":", "\n", "        ", "print", "(", "'use full_12_classes mean and std'", ")", "\n", "mean", "=", "[", "0.7423757", ",", "0.74199075", ",", "0.7420199", "]", "\n", "std", "=", "[", "0.1662702", ",", "0.16652738", ",", "0.16721568", "]", "\n", "", "else", ":", "\n", "        ", "mean", "=", "None", "\n", "std", "=", "None", "\n", "\n", "", "print", "(", "'create datasets'", ")", "\n", "train_dataset", "=", "SegmentationDataset", "(", "training_config", "[", "'dataset_name'", "]", ",", "\n", "'train'", ",", "\n", "mean", "=", "mean", ",", "\n", "std", "=", "std", ",", "\n", "plot", "=", "False", ")", "\n", "test_dataset", "=", "SegmentationDataset", "(", "training_config", "[", "'dataset_name'", "]", ",", "\n", "'test'", ",", "\n", "mean", "=", "train_dataset", ".", "mean", ",", "\n", "std", "=", "train_dataset", ".", "std", ")", "\n", "segmentation_config", "[", "'classes'", "]", "=", "train_dataset", ".", "n_classes", "\n", "\n", "print", "(", "'create model'", ")", "\n", "name", "=", "segmentation_config", "[", "'name'", "]", "\n", "del", "segmentation_config", "[", "'name'", "]", "\n", "model", "=", "utils", ".", "get_model", "(", "name", ",", "segmentation_config", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "multi_gpu", "=", "True", "\n", "", "else", ":", "\n", "        ", "multi_gpu", "=", "False", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "pin_memory", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "", "else", ":", "\n", "        ", "pin_memory", "=", "False", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "if", "multi_gpu", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "'create optimizer, dataloader and metric'", ")", "\n", "\n", "if", "training_config", ".", "get", "(", "'optimizer'", ")", "==", "'Adam'", ":", "\n", "        ", "print", "(", "'use Adam optimizer: lr = {}'", ".", "format", "(", "training_config", "[", "'lr'", "]", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "training_config", "[", "'lr'", "]", ",", "\n", "weight_decay", "=", "training_config", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'use SGD optimizer: lr = {}'", ".", "format", "(", "training_config", "[", "'lr'", "]", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "training_config", "[", "'lr'", "]", ",", "\n", "momentum", "=", "training_config", "[", "'momentum'", "]", ",", "\n", "weight_decay", "=", "training_config", "[", "'weight_decay'", "]", ",", "\n", "nesterov", "=", "True", ")", "\n", "\n", "\n", "\n", "", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "training_config", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "training_config", "[", "'shuffle'", "]", ",", "\n", "num_workers", "=", "training_config", "[", "'num_workers'", "]", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "training_config", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "training_config", "[", "'shuffle'", "]", ",", "\n", "num_workers", "=", "training_config", "[", "'num_workers'", "]", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "print", "(", "'class names: {}'", ".", "format", "(", "train_dataset", ".", "classes", ")", ")", "\n", "print", "(", "'n classes: {}'", ".", "format", "(", "train_dataset", ".", "n_classes", ")", ")", "\n", "print", "(", "'n train batches: {}'", ".", "format", "(", "len", "(", "train_dataloader", ")", ")", ")", "\n", "print", "(", "'n valid batches: {}'", ".", "format", "(", "len", "(", "test_dataloader", ")", ")", ")", "\n", "\n", "\n", "metric", "=", "IoU", "(", "num_classes", "=", "train_dataset", ".", "n_classes", ")", "\n", "\n", "#scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='max', patience=50, verbose=True, factor=0.1)", "\n", "\n", "best_iou_score", "=", "0", "\n", "best_epoch", "=", "0", "\n", "cp", "=", "CP", "(", ")", "\n", "\n", "print", "(", "'start training'", ")", "\n", "for", "i", "in", "range", "(", "training_config", "[", "'epochs'", "]", ")", ":", "\n", "        ", "print", "(", "'__________________________________________________'", ")", "\n", "print", "(", "'Epoch {}/{}'", ".", "format", "(", "i", ",", "training_config", "[", "'epochs'", "]", "-", "1", ")", ")", "\n", "currentloss", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "metric", ".", "reset", "(", ")", "\n", "for", "img", ",", "label", "in", "train_dataloader", ":", "\n", "            ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "pred", "=", "model", "(", "img", ")", "\n", "loss", "=", "jaccard_loss", "(", "label", ",", "pred", ")", "\n", "currentloss", ".", "append", "(", "float", "(", "loss", ".", "data", ")", ")", "\n", "metric", ".", "add", "(", "pred", ",", "label", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "iou_per_class", ",", "iou_score", "=", "metric", ".", "value", "(", ")", "\n", "cp", ".", "train_losses", ".", "append", "(", "np", ".", "mean", "(", "currentloss", ")", ")", "\n", "cp", ".", "train_iou_scores", ".", "append", "(", "iou_score", ")", "\n", "cp", ".", "train_iou_per_class", ".", "append", "(", "iou_per_class", ")", "\n", "print", "(", "'train Loss: {}'", ".", "format", "(", "cp", ".", "train_losses", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "'train mIoU: {}'", ".", "format", "(", "iou_score", ")", ")", "\n", "per_class_mean", "=", "np", ".", "array", "(", "cp", ".", "train_iou_per_class", ")", "\n", "per_class_mean", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "per_class_mean", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "print", "(", "'train per class mIOU: {}'", ".", "format", "(", "per_class_mean", ")", ")", "\n", "\n", "currentloss", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "metric", ".", "reset", "(", ")", "\n", "first_valid", "=", "False", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "img", ",", "label", "in", "test_dataloader", ":", "\n", "                ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "pred", "=", "model", "(", "img", ")", "\n", "loss", "=", "jaccard_loss", "(", "label", ",", "pred", ")", "\n", "currentloss", ".", "append", "(", "float", "(", "loss", ".", "data", ")", ")", "\n", "metric", ".", "add", "(", "pred", ",", "label", ")", "\n", "\n", "if", "first_valid", ":", "\n", "                    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                        ", "pred", "=", "pred", ".", "cpu", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", "\n", "\n", "", "pred", "=", "pred", ".", "numpy", "(", ")", "\n", "label", "=", "label", ".", "numpy", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "2", ",", "4", ",", "constrained_layout", "=", "True", ",", "figsize", "=", "(", "25", ",", "12", ")", ")", "\n", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                        ", "axs", "[", "0", ",", "j", "]", ".", "imshow", "(", "label", "[", "j", "]", ")", "\n", "axs", "[", "0", ",", "j", "]", ".", "set_title", "(", "'label {}'", ".", "format", "(", "list", "(", "np", ".", "unique", "(", "label", "[", "j", "]", ")", ")", ")", ")", "\n", "axs", "[", "0", ",", "j", "]", ".", "set_axis_off", "(", ")", "\n", "\n", "axs", "[", "1", ",", "j", "]", ".", "imshow", "(", "np", ".", "argmax", "(", "pred", "[", "j", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "axis", "=", "2", ")", ")", "\n", "axs", "[", "1", ",", "j", "]", ".", "set_title", "(", "'prediction {}'", ".", "format", "(", "list", "(", "np", ".", "unique", "(", "pred", "[", "j", "]", ")", ")", ")", ")", "\n", "axs", "[", "1", ",", "j", "]", ".", "set_axis_off", "(", ")", "\n", "\n", "\n", "", "fig", ".", "suptitle", "(", "'epoch {}'", ".", "format", "(", "i", ")", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "logs_images", ",", "'valid_{}.png'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "first_valid", "=", "False", "\n", "\n", "", "", "", "iou_per_class", ",", "iou_score", "=", "metric", ".", "value", "(", ")", "\n", "cp", ".", "valid_iou_scores", ".", "append", "(", "iou_score", ")", "\n", "cp", ".", "valid_iou_per_class", ".", "append", "(", "iou_per_class", ")", "\n", "cp", ".", "valid_losses", ".", "append", "(", "np", ".", "mean", "(", "currentloss", ")", ")", "\n", "print", "(", "'valid Loss: {}'", ".", "format", "(", "cp", ".", "valid_losses", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "'valid mIoU: {}'", ".", "format", "(", "iou_score", ")", ")", "\n", "\n", "per_class_mean", "=", "np", ".", "array", "(", "cp", ".", "valid_iou_per_class", ")", "\n", "per_class_mean", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "per_class_mean", ",", "axis", "=", "0", ")", ",", "3", ")", "\n", "print", "(", "'valid per class mIOU: {}'", ".", "format", "(", "per_class_mean", ")", ")", "\n", "\n", "#scheduler.step(iou_score)", "\n", "\n", "\n", "if", "cp", ".", "valid_iou_scores", "[", "-", "1", "]", ">", "best_iou_score", ":", "\n", "            ", "best_iou_score", "=", "cp", ".", "valid_iou_scores", "[", "-", "1", "]", "\n", "best_epoch", "=", "i", "\n", "if", "multi_gpu", ":", "\n", "                ", "state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "", "checkpoint", "=", "{", "'state_dict'", ":", "state_dict", ",", "\n", "'epoch'", ":", "i", ",", "\n", "'iou'", ":", "best_iou_score", ",", "\n", "'train_iou_scores'", ":", "cp", ".", "train_iou_scores", ",", "\n", "'train_losses'", ":", "cp", ".", "train_losses", ",", "\n", "'train_loss'", ":", "cp", ".", "train_losses", "[", "-", "1", "]", ",", "\n", "'valid_iou_scores'", ":", "cp", ".", "valid_iou_scores", ",", "\n", "'valid_losses'", ":", "cp", ".", "valid_losses", ",", "\n", "'training_config'", ":", "training_config", ",", "\n", "'name'", ":", "name", ",", "\n", "'segmentation_config'", ":", "segmentation_config", "}", "\n", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}_{}.ckpt'", ".", "format", "(", "name", ",", "\n", "segmentation_config", "[", "'encoder_name'", "]", ")", ")", ")", "\n", "\n", "\n", "", "print", "(", "'best iou: {}'", ".", "format", "(", "best_iou_score", ")", ")", "\n", "print", "(", "'best_epoch: {}'", ".", "format", "(", "best_epoch", ")", ")", "\n", "\n", "logs", "=", "{", "'best_iou_score'", ":", "best_iou_score", ",", "\n", "'best_iou_score_epoch'", ":", "best_epoch", ",", "\n", "'train_iou_scores'", ":", "cp", ".", "train_iou_scores", ",", "\n", "'train_losses'", ":", "cp", ".", "train_losses", ",", "\n", "'valid_iou_scores'", ":", "cp", ".", "valid_iou_scores", ",", "\n", "'valid_losses'", ":", "cp", ".", "valid_losses", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logs_path", ",", "'{}_{}.json'", ".", "format", "(", "name", ",", "segmentation_config", "[", "'encoder_name'", "]", ")", ")", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "logs", ",", "file", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "segmentation_config", "=", "{", "'name'", ":", "'Unet'", ",", "\n", "'encoder_name'", ":", "'resnet34'", ",", "\n", "'encoder_weights'", ":", "'imagenet'", ",", "\n", "'activation'", ":", "'softmax'", "}", "\n", "training_config", "=", "{", "\n", "'epochs'", ":", "20", ",", "\n", "'batch_size'", ":", "4", ",", "\n", "'lr'", ":", "1e-3", ",", "\n", "'weight_decay'", ":", "0.1", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "0", ",", "\n", "'momentum'", ":", "0.9", ",", "\n", "'dataset_name'", ":", "'bluedude_solo'", "}", "\n", "\n", "segmentation_training", "(", "training_config", ",", "segmentation_config", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.HFlipDefault.__init__": [[17, 20], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "p", ":", "\n", "            ", "img", "=", "self", ".", "hflip", "(", "img", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.HFlipDefault.__call__": [[21, 28], ["numpy.random.rand", "utils.HFlipDefault.hflip", "utils.HFlipDefault.hflip"], "methods", ["None"], ["label", "=", "self", ".", "hflip", "(", "label", ")", "\n", "\n", "", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "rotate", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "rotation", "=", "transforms", ".", "functional", ".", "rotate", "\n", "self", ".", "range", "=", "[", "-", "180", ",", "180", "]", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.colorJitter.__init__": [[30, 35], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "image", ",", "label", "=", "data", "\n", "angle", "=", "random", ".", "uniform", "(", "self", ".", "range", "[", "0", "]", ",", "self", ".", "range", "[", "1", "]", ")", "\n", "image", "=", "self", ".", "rotation", "(", "image", ",", "angle", ")", "\n", "label", "=", "self", ".", "rotation", "(", "label", ",", "angle", ")", "\n", "return", "image", ",", "label", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.colorJitter.__call__": [[35, 39], ["utils.colorJitter.ColorJitter"], "methods", ["None"], ["return", "image", ",", "label", "\n", "\n", "", "", "class", "colorJitter", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "ColorJitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.2", ",", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.normalize.__init__": [[41, 43], ["torchvision.transforms.Normalize"], "methods", ["None"], ["saturation", "=", "0.2", ",", "\n", "hue", "=", "0.05", ")", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.normalize.__call__": [[44, 48], ["utils.normalize.normalize"], "methods", ["None"], ["        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "ColorJitter", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "normalize", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.toTensor.__init__": [[50, 52], ["torchvision.transforms.ToTensor"], "methods", ["None"], ["        ", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.toTensor.__call__": [[53, 59], ["utils.toTensor.toTensor", "torch.from_numpy", "label.long.long.long", "numpy.array"], "methods", ["None"], ["        ", "img", ",", "label", "=", "data", "\n", "img", "=", "self", ".", "normalize", "(", "img", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "", "", "class", "toTensor", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.Metric.reset": [[105, 107], ["None"], "methods", ["None"], ["union", "=", "cardinality", "-", "intersection", "\n", "#jacc_loss = (intersection / (union + eps)).mean()", "\n", "jacc_loss", "=", "(", "intersection", "/", "(", "union", "+", "eps", ")", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.Metric.add": [[108, 110], ["None"], "methods", ["None"], ["#print('jacc_loss', jacc_loss, jacc_loss.shape)", "\n", "#print(jacc_loss.mean(dim=1), jacc_loss.mean(dim=1).shape, jacc_loss.mean())", "\n", "jacc_loss", "=", "jacc_loss", "[", "unique", "]", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.Metric.value": [[111, 113], ["None"], "methods", ["None"], ["jacc_loss", "=", "jacc_loss", ".", "mean", "(", ")", "\n", "#print('mean', jacc_loss)", "\n", "#print('out', (1 - jacc_loss))", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.ConfusionMatrix.__init__": [[125, 132], ["object.__init__", "numpy.ndarray", "utils.ConfusionMatrix.reset"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset"], ["        ", "pass", "\n", "\n", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "class", "ConfusionMatrix", "(", "Metric", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.ConfusionMatrix.reset": [[133, 135], ["utils.ConfusionMatrix.conf.fill"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.ConfusionMatrix.add": [[136, 185], ["torch.is_tensor", "torch.is_tensor", "numpy.bincount", "numpy.bincount.reshape", "numpy.argmax.cpu().numpy", "numpy.argmax.cpu().numpy", "numpy.ndim", "numpy.argmax", "numpy.ndim", "numpy.argmax", "x.astype", "numpy.argmax.cpu", "numpy.argmax.cpu", "numpy.argmax.max", "numpy.argmax.min", "numpy.argmax.max", "numpy.argmax.min", "numpy.argmax.sum"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "num_classes", ",", "normalized", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conf", "=", "np", ".", "ndarray", "(", "(", "num_classes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "normalized", "=", "normalized", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf", ".", "fill", "(", "0", ")", "\n", "\n", "", "def", "add", "(", "self", ",", "predicted", ",", "target", ")", ":", "\n", "        ", "\"\"\"Computes the confusion matrix\n        The shape of the confusion matrix is K x K, where K is the number\n        of classes.\n        Keyword arguments:\n        - predicted (Tensor or numpy.ndarray): Can be an N x K tensor/array of\n        predicted scores obtained from the model for N examples and K classes,\n        or an N-tensor/array of integer values between 0 and K-1.\n        - target (Tensor or numpy.ndarray): Can be an N x K tensor/array of\n        ground-truth classes for N examples and K classes, or an N-tensor/array\n        of integer values between 0 and K-1.\n        \"\"\"", "\n", "# If target and/or predicted are tensors, convert them to numpy arrays", "\n", "if", "torch", ".", "is_tensor", "(", "predicted", ")", ":", "\n", "            ", "predicted", "=", "predicted", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "            ", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "assert", "predicted", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ",", "'number of targets and predicted outputs do not match'", "\n", "\n", "if", "np", ".", "ndim", "(", "predicted", ")", "!=", "1", ":", "\n", "            ", "assert", "predicted", ".", "shape", "[", "1", "]", "==", "self", ".", "num_classes", ",", "'number of predictions does not match size of confusion matrix'", "\n", "predicted", "=", "np", ".", "argmax", "(", "predicted", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "predicted", ".", "max", "(", ")", "<", "self", ".", "num_classes", ")", "and", "(", "predicted", ".", "min", "(", ")", ">=", "0", ")", ",", "'predicted values are not between 0 and k-1'", "\n", "\n", "", "if", "np", ".", "ndim", "(", "target", ")", "!=", "1", ":", "\n", "            ", "assert", "target", ".", "shape", "[", "1", "]", "==", "self", ".", "num_classes", ",", "'Onehot target does not match size of confusion matrix'", "\n", "assert", "(", "target", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "target", "<=", "1", ")", ".", "all", "(", ")", ",", "'in one-hot encoding, target values should be 0 or 1'", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.ConfusionMatrix.value": [[186, 198], ["utils.ConfusionMatrix.conf.astype", "utils.ConfusionMatrix.sum().clip", "utils.ConfusionMatrix.sum"], "methods", ["None"], ["assert", "(", "target", ".", "sum", "(", "1", ")", "==", "1", ")", ".", "all", "(", ")", ",", "'multi-label setting is not supported'", "\n", "target", "=", "np", ".", "argmax", "(", "target", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "target", ".", "max", "(", ")", "<", "self", ".", "num_classes", ")", "and", "(", "target", ".", "min", "(", ")", ">=", "0", ")", ",", "'target values are not between 0 and k-1'", "\n", "\n", "# hack for bincounting 2 arrays together", "\n", "", "x", "=", "predicted", "+", "self", ".", "num_classes", "*", "target", "\n", "bincount_2d", "=", "np", ".", "bincount", "(", "\n", "x", ".", "astype", "(", "np", ".", "int32", ")", ",", "minlength", "=", "self", ".", "num_classes", "**", "2", ")", "\n", "assert", "bincount_2d", ".", "size", "==", "self", ".", "num_classes", "**", "2", "\n", "conf", "=", "bincount_2d", ".", "reshape", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU_cca.__init__": [[240, 253], ["object.__init__", "utils.ConfusionMatrix", "isinstance", "tuple", "ValueError"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "ignore_index", "=", "tuple", "(", "ignore_index", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "raise", "ValueError", "(", "\"'ignore_index' must be an int or iterable\"", ")", "\n", "\n", "", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf_metric", ".", "reset", "(", ")", "\n", "\n", "", "def", "add", "(", "self", ",", "predicted", ",", "target", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU_cca.reset": [[254, 256], ["utils.IoU_cca.conf_metric.reset"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU_cca.add": [[257, 279], ["utils.do_cca", "torch.from_numpy", "utils.IoU_cca.conf_metric.add", "predicted.size", "target.size", "torch.from_numpy.view", "target.view", "predicted.dim", "predicted.dim", "target.dim", "target.dim"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.do_cca", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add"], ["\n", "# Dimensions check", "\n", "assert", "predicted", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "'number of targets and predicted outputs do not match'", "\n", "assert", "predicted", ".", "dim", "(", ")", "==", "3", "or", "predicted", ".", "dim", "(", ")", "==", "4", ",", "\"predictions must be of dimension (N, H, W) or (N, K, H, W)\"", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "or", "target", ".", "dim", "(", ")", "==", "4", ",", "\"targets must be of dimension (N, H, W) or (N, K, H, W)\"", "\n", "\n", "# If the tensor is in categorical format convert it to integer format", "\n", "if", "predicted", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "_", ",", "predicted", "=", "predicted", ".", "max", "(", "1", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "_", ",", "target", "=", "target", ".", "max", "(", "1", ")", "\n", "\n", "", "self", ".", "conf_metric", ".", "add", "(", "predicted", ".", "view", "(", "-", "1", ")", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "def", "value", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU_cca.value": [[280, 302], ["utils.IoU_cca.conf_metric.value", "numpy.diag", "numpy.sum", "numpy.sum", "numpy.errstate", "numpy.nanmean"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value"], ["\n", "conf_matrix", "=", "self", ".", "conf_metric", ".", "value", "(", ")", "\n", "if", "self", ".", "ignore_index", "is", "not", "None", ":", "\n", "            ", "for", "index", "in", "self", ".", "ignore_index", ":", "\n", "                ", "conf_matrix", "[", ":", ",", "self", ".", "ignore_index", "]", "=", "0", "\n", "conf_matrix", "[", "self", ".", "ignore_index", ",", ":", "]", "=", "0", "\n", "", "", "true_positive", "=", "np", ".", "diag", "(", "conf_matrix", ")", "\n", "false_positive", "=", "np", ".", "sum", "(", "conf_matrix", ",", "0", ")", "-", "true_positive", "\n", "false_negative", "=", "np", ".", "sum", "(", "conf_matrix", ",", "1", ")", "-", "true_positive", "\n", "\n", "# Just in case we get a division by 0, ignore/hide the error", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "            ", "iou", "=", "true_positive", "/", "(", "true_positive", "+", "false_positive", "+", "false_negative", ")", "\n", "\n", "", "return", "iou", ",", "np", ".", "nanmean", "(", "iou", "[", "1", ":", "]", ")", "\n", "\n", "", "", "def", "animate", "(", "i", ",", "fig", ",", "axs", ",", "path", ",", "mean_cca", "=", "True", ")", ":", "\n", "\n", "\n", "    ", "with", "open", "(", "path", ")", "as", "json_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "json_file", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.__init__": [[319, 332], ["object.__init__", "utils.ConfusionMatrix", "isinstance", "tuple", "ValueError"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__"], ["axs", "[", "2", "]", ".", "set_ylabel", "(", "'cca mIoU'", ")", "\n", "axs", "[", "2", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "", "", "def", "animate2", "(", "i", ",", "fig", ",", "axs", ",", "path", ")", ":", "\n", "\n", "\n", "    ", "with", "open", "(", "path", ")", "as", "json_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "plt", ".", "cla", "(", ")", "\n", "fig", ".", "suptitle", "(", "'Best mIou: {} in epoch: {}'", ".", "format", "(", "np", ".", "round", "(", "config", "[", "'best_iou_score'", "]", ",", "4", ")", ",", "config", "[", "'best_iou_score_epoch'", "]", ")", ",", "fontsize", "=", "16", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "plot", "(", "config", "[", "'train_losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_title", "(", "'train jaccard loss'", ")", "\n", "axs", "[", "0", ",", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset": [[333, 335], ["utils.IoU.conf_metric.reset"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.reset"], ["axs", "[", "0", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "0", ",", "1", "]", ".", "plot", "(", "config", "[", "'train_iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add": [[336, 361], ["utils.IoU.conf_metric.add", "predicted.size", "target.size", "predicted.dim", "predicted.max", "target.dim", "target.max", "predicted.view", "target.view", "predicted.dim", "predicted.dim", "target.dim", "target.dim"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.add"], ["axs", "[", "0", ",", "1", "]", ".", "set_title", "(", "'train mean IoU'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "0", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", ",", "0", "]", ".", "plot", "(", "config", "[", "'valid_losses'", "]", ",", "c", "=", "'b'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_title", "(", "'valid jaccard loss'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_ylabel", "(", "'1-mIoU'", ")", "\n", "axs", "[", "1", ",", "0", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "axs", "[", "1", ",", "1", "]", ".", "plot", "(", "config", "[", "'valid_iou_scores'", "]", ",", "c", "=", "'r'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_title", "(", "'valid mean IoU'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_ylabel", "(", "'mIoU'", ")", "\n", "axs", "[", "1", ",", "1", "]", ".", "set_xlabel", "(", "'Epochs'", ")", "\n", "\n", "\n", "\n", "", "nets", "=", "{", "'Unet'", ":", "smp", ".", "Unet", ",", "\n", "'PsPNet'", ":", "smp", ".", "PSPNet", ",", "\n", "'LinkNet'", ":", "smp", ".", "Linknet", "}", "\n", "\n", "def", "get_model", "(", "name", ",", "segmentation_config", ")", ":", "\n", "    ", "model", "=", "nets", "[", "name", "]", "\n", "model", "=", "model", "(", "**", "segmentation_config", ")", "\n", "return", "model", "\n", "\n", "", "class", "CropAndZoom", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value": [[362, 384], ["utils.IoU.conf_metric.value", "numpy.diag", "numpy.sum", "numpy.sum", "numpy.errstate", "numpy.nanmean"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.IoU.value"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "bbox_increase", "=", "1.1", "\n", "self", ".", "to_small", "=", "0.8", "\n", "self", ".", "to_big", "=", "1.2", "\n", "self", ".", "size", "=", "False", "\n", "self", ".", "output_size", "=", "480", "\n", "self", ".", "max_zoom", "=", "2", "\n", "self", ".", "max_l", "=", "480", "\n", "self", ".", "min_l", "=", "int", "(", "float", "(", "self", ".", "output_size", ")", "/", "self", ".", "max_zoom", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "image_PIL", ",", "label_PIL", "=", "data", "\n", "label", "=", "np", ".", "array", "(", "copy", ".", "deepcopy", "(", "label_PIL", ")", ")", "\n", "# get some variables", "\n", "self", ".", "size", "=", "label", ".", "shape", "# height, width", "\n", "extreme_points", "=", "self", ".", "get_extreme_points", "(", "label", ")", "\n", "h", ",", "w", ",", "c", "=", "self", ".", "get_size", "(", "extreme_points", ")", "\n", "h_ratio", "=", "float", "(", "h", ")", "/", "float", "(", "self", ".", "output_size", ")", "\n", "w_ratio", "=", "float", "(", "w", ")", "/", "float", "(", "self", ".", "output_size", ")", "\n", "h_w_ratio", "=", "h_ratio", "/", "w_ratio", "\n", "ls", "=", "[", "h", ",", "w", "]", "\n", "bigger", "=", "0", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.jaccard_loss": [[63, 100], ["true_1_hot.permute().float.type", "torch.sum", "torch.sum", "jacc_loss[].mean", "true_1_hot.permute().float.permute().float", "torch.cat", "torch.sigmoid", "torch.cat", "true_1_hot.permute().float.permute().float", "torch.nn.functional.softmax", "logits.type", "tuple", "torch.eye", "torch.eye", "range", "true.squeeze", "true_1_hot.permute().float.permute", "true.squeeze", "true_1_hot.permute().float.permute", "true.ndimension"], "function", ["None"], ["img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "label", "=", "label", ".", "long", "(", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n", "\n", "\n", "\n", "", "", "def", "jaccard_loss", "(", "true", ",", "logits", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"Computes the Jaccard loss, a.k.a the IoU loss.\n    Note that PyTorch optimizers minimize a loss. In this\n    case, we would like to maximize the jaccard loss so we\n    return the negated jaccard loss.\n    Args:\n        true: a tensor of shape [B, H, W] or [B, 1, H, W].\n        logits: a tensor of shape [B, C, H, W]. Corresponds to\n            the raw output or logits of the model.\n        eps: added to the denominator for numerical stability.\n    Returns:\n        jacc_loss: the Jaccard loss.\n    \"\"\"", "\n", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "# unique = torch.unique(true)[1:]", "\n", "unique", "=", "torch", ".", "unique", "(", "true", ")", "\n", "#print('unique', unique)", "\n", "if", "num_classes", "==", "1", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", "+", "1", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "true_1_hot_f", "=", "true_1_hot", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "true_1_hot_s", "=", "true_1_hot", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "true_1_hot", "=", "torch", ".", "cat", "(", "[", "true_1_hot_s", ",", "true_1_hot_f", "]", ",", "dim", "=", "1", ")", "\n", "pos_prob", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "neg_prob", "=", "1", "-", "pos_prob", "\n", "probas", "=", "torch", ".", "cat", "(", "[", "pos_prob", ",", "neg_prob", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "probas", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.do_cca": [[199, 224], ["torch.nn.functional.softmax", "predicted.cpu.numpy", "enumerate", "numpy.concatenate", "predicted.cpu.cpu", "pred.transpose.transpose", "numpy.array", "numpy.array", "cv2.connectedComponents", "numpy.zeros", "np.concatenate.append", "numpy.argmax", "numpy.max", "numpy.unique", "numpy.sum", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.label_generator.utils.connectedComponents"], ["\n", "self", ".", "conf", "+=", "conf", "\n", "\n", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            Confustion matrix of K rows and K columns, where rows corresponds\n            to ground-truth targets and columns corresponds to predicted\n            targets.\n        \"\"\"", "\n", "if", "self", ".", "normalized", ":", "\n", "            ", "conf", "=", "self", ".", "conf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "conf", "/", "conf", ".", "sum", "(", "1", ")", ".", "clip", "(", "min", "=", "1e-12", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conf", "\n", "\n", "\n", "\n", "", "", "", "class", "IoU", "(", "Metric", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.animate": [[386, 402], ["matplotlib.cla", "fig.suptitle", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "axs[].plot", "axs[].set_title", "axs[].set_ylabel", "axs[].set_xlabel", "open", "json.load", "numpy.round"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["            ", "bigger", "=", "1", "\n", "\n", "# create bbox", "\n", "", "bbox", "=", "self", ".", "get_bbox", "(", "c", ",", "ls", "[", "bigger", "]", "*", "self", ".", "bbox_increase", ")", "\n", "bbox", "=", "self", ".", "random_zoom", "(", "bbox", ")", "\n", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "# height = width", "\n", "\n", "# adapt bbox", "\n", "if", "h_w_ratio", "<=", "self", ".", "to_big", "and", "h_w_ratio", ">=", "self", ".", "to_small", ":", "\n", "# case: square", "\n", "            ", "if", "bbox_h", "<=", "self", ".", "size", "[", "0", "]", "and", "bbox_w", "<=", "self", ".", "size", "[", "0", "]", ":", "\n", "# if the bbox is not to big, ensure that it is inside the image", "\n", "                ", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "", "else", ":", "\n", "# if the box is to big, slide random along the horizontal axis of the bbox and then create it as big as", "\n", "# possible and ensure that it is inside the image", "\n", "                ", "bbox_c", "[", "1", "]", "=", "int", "(", "bbox_c", "[", "1", "]", "-", "(", "w", "/", "2", ")", ")", "+", "np", ".", "random", ".", "randint", "(", "0", ",", "w", ")", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_model": [[409, 413], ["model."], "function", ["None"], ["bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "bbox_h", ")", "\n", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "# height = width", "\n", "\n", "if", "bbox_h", "<=", "self", ".", "size", "[", "0", "]", "and", "bbox_w", "<=", "self", ".", "size", "[", "0", "]", ":", "\n", "# if the bbox is not to big, ensure that it is inside the image", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.load_subtraction": [[414, 627], ["PIL.Image.open().convert", "utils.augment", "PIL.Image.open().convert", "utils.augment", "copy.deepcopy().convert", "copy.deepcopy().convert", "PIL.Image.open", "utils.augment", "PIL.Image.open", "utils.augment", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.array", "PIL.Image.open", "utils.augment", "numpy.array", "matplotlib.clf", "matplotlib.cla", "random.uniform", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "os.path.join", "os.path.join", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "numpy.abs", "numpy.abs", "numpy.abs", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "os.path.join", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.show", "numpy.random.rand", "numpy.random.rand", "PIL.Image.open", "PIL.Image.open", "numpy.array", "numpy.array", "copy.deepcopy", "copy.deepcopy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "copy.deepcopy().convert", "numpy.sum", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.augment", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.augment", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.augment", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.augment", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.augment", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["                ", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "size", "[", "0", "]", "-", "2", ")", "\n", "bbox", "=", "self", ".", "move_bbox_inside", "(", "bbox", ")", "\n", "\n", "# create patch and set label id", "\n", "", "", "image_PIL", "=", "image_PIL", ".", "crop", "(", "box", "=", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", ",", "bbox", "[", "1", "]", "]", ")", "\n", "label_PIL", "=", "label_PIL", ".", "crop", "(", "box", "=", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", ",", "bbox", "[", "1", "]", "]", ")", "\n", "\n", "image_PIL", "=", "image_PIL", ".", "resize", "(", "size", "=", "(", "self", ".", "output_size", ",", "self", ".", "output_size", ")", ")", "\n", "label_PIL", "=", "label_PIL", ".", "resize", "(", "size", "=", "(", "self", ".", "output_size", ",", "self", ".", "output_size", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "\n", "'''\n            cv2.resize(image[bbox[0]:bbox[1], bbox[2]:bbox[3]], dsize=(self.output_size, self.output_size),\n                       interpolation=cv2.INTER_NEAREST), dtype=np.float)\n        target_out = np.array(\n            cv2.resize(label[bbox[0]:bbox[1], bbox[2]:bbox[3]], dsize=(512, 512), interpolation=cv2.INTER_NEAREST),\n            dtype=np.uint8)\n        '''", "\n", "\n", "return", "[", "image_PIL", ",", "label_PIL", "]", "\n", "\n", "", "def", "resize_bbox_to_max_zoom", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "\n", "if", "bbox_h", ">", "self", ".", "max_l", ":", "\n", "            ", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "max_l", ")", "\n", "", "elif", "bbox_h", "<", "self", ".", "min_l", ":", "\n", "            ", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "self", ".", "min_l", ")", "\n", "", "return", "bbox", "\n", "\n", "", "def", "random_zoom", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "bbox_h", ",", "bbox_w", ",", "bbox_c", "=", "self", ".", "get_size", "(", "bbox", ")", "\n", "h", "=", "int", "(", "random", ".", "uniform", "(", "self", ".", "min_l", ",", "self", ".", "max_l", ")", ")", "\n", "bbox", "=", "self", ".", "get_bbox", "(", "bbox_c", ",", "h", ")", "\n", "return", "bbox", "\n", "\n", "", "def", "get_extreme_points", "(", "self", ",", "label", ")", ":", "\n", "        ", "label_pos", "=", "np", ".", "where", "(", "label", "==", "255", ")", "\n", "label_x", "=", "label_pos", "[", "0", "]", "\n", "label_y", "=", "label_pos", "[", "1", "]", "\n", "arg_max_x", "=", "np", ".", "argmax", "(", "label_x", ")", "\n", "arg_max_y", "=", "np", ".", "argmax", "(", "label_y", ")", "\n", "arg_min_x", "=", "np", ".", "argmin", "(", "label_x", ")", "\n", "arg_min_y", "=", "np", ".", "argmin", "(", "label_y", ")", "\n", "extreme_points", "=", "np", ".", "array", "(", "\n", "[", "label_x", "[", "arg_min_x", "]", ",", "label_x", "[", "arg_max_x", "]", ",", "\n", "label_y", "[", "arg_min_y", "]", ",", "label_y", "[", "arg_max_y", "]", "]", ")", "# used for plotting [up, down, left, right]", "\n", "\n", "return", "extreme_points", "\n", "\n", "", "def", "get_size", "(", "self", ",", "extreme_points", ")", ":", "\n", "        ", "h", "=", "extreme_points", "[", "1", "]", "-", "extreme_points", "[", "0", "]", "\n", "w", "=", "extreme_points", "[", "3", "]", "-", "extreme_points", "[", "2", "]", "\n", "c", "=", "[", "extreme_points", "[", "0", "]", "+", "int", "(", "h", "/", "2", ")", ",", "extreme_points", "[", "2", "]", "+", "int", "(", "w", "/", "2", ")", "]", "# [height, width] (x,y)", "\n", "return", "h", ",", "w", ",", "c", "\n", "\n", "", "def", "get_bbox", "(", "self", ",", "c", ",", "l", ")", ":", "\n", "        ", "half", "=", "int", "(", "l", "/", "2", ")", "\n", "bbox", "=", "[", "c", "[", "0", "]", "-", "half", ",", "c", "[", "0", "]", "+", "half", ",", "c", "[", "1", "]", "-", "half", ",", "c", "[", "1", "]", "+", "half", "]", "# [up, down, left, right]", "\n", "return", "bbox", "\n", "\n", "", "def", "move_bbox_inside", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "move", "=", "[", "0", ",", "0", "]", "\n", "if", "bbox", "[", "0", "]", "<", "0", ":", "\n", "            ", "move", "[", "0", "]", "=", "bbox", "[", "0", "]", "\n", "", "elif", "bbox", "[", "1", "]", ">", "self", ".", "size", "[", "0", "]", ":", "\n", "            ", "move", "[", "0", "]", "=", "bbox", "[", "1", "]", "-", "self", ".", "size", "[", "0", "]", "\n", "\n", "", "if", "bbox", "[", "2", "]", "<", "0", ":", "\n", "            ", "move", "[", "1", "]", "=", "bbox", "[", "2", "]", "\n", "", "elif", "bbox", "[", "3", "]", ">", "self", ".", "size", "[", "1", "]", ":", "\n", "            ", "move", "[", "1", "]", "=", "bbox", "[", "3", "]", "-", "self", ".", "size", "[", "1", "]", "\n", "", "bbox", "=", "[", "bbox", "[", "0", "]", "-", "move", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "move", "[", "0", "]", ",", "bbox", "[", "2", "]", "-", "move", "[", "1", "]", ",", "bbox", "[", "3", "]", "-", "move", "[", "1", "]", "]", "\n", "return", "bbox", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.augment": [[629, 647], ["resize", "rotate", "utils.colorJitter", "hflip", "vflip"], "function", ["None"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_default_model": [[648, 664], ["utils.get_model", "torch.load", "get_model.load_state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_model"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_mask_prediction": [[666, 874], ["numpy.array", "os.path.join", "os.listdir", "os.path.join", "int", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "utils.get_default_model", "get_default_model.to", "get_default_model.eval", "torch.cuda.is_available", "torch.device", "torch.device", "os.listdir.index", "os.listdir.index", "len", "ValueError", "len", "os.path.join", "os.path.join", "list", "len", "ValueError", "os.path.exists", "os.makedirs", "range", "print", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.concatenate", "numpy.concatenate", "numpy.array", "transforms.ToTensor.", "transforms.Normalize.", "x.unsqueeze.to", "x.unsqueeze.unsqueeze", "get_default_model.predict", "numpy.array", "PIL.Image.fromarray", "Image.fromarray.save", "os.listdir", "open", "numpy.array", "open", "numpy.array", "open", "numpy.array", "open", "numpy.array", "open", "numpy.array", "open", "numpy.array", "numpy.array", "int", "matplotlib.cla", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "utils.do_cca", "torch.argmax().numpy", "numpy.array", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.show", "os.path.join", "os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open().convert().convert", "os.path.join", "PIL.Image.open().convert().convert", "os.path.join", "PIL.Image.open", "os.path.join", "PIL.Image.open", "open", "json.load", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.linalg.norm", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "os.path.join", "np.array.cpu", "torch.argmax", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open().convert", "PIL.Image.open().convert", "numpy.array", "numpy.array", "numpy.sum", "json.load.get", "json.load.get", "PIL.Image.open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.get_default_model", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.experiments.eval_exp.eval", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.background_subtraction.utils.do_cca", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], []], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.UR5RobotClient.__init__": [[5, 7], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "ip", ")", ":", "\n", "\t\t", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.__init__": [[10, 12], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "ip", ")", ":", "\n", "\t\t", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open": [[13, 15], ["None"], "methods", ["None"], ["", "def", "open", "(", "self", ")", ":", "\n", "\t\t", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close": [[16, 18], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "\t\t", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.__init__": [[21, 24], ["TestController.UR5RobotClient", "TestController.GripperClient"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "robotClient", "=", "UR5RobotClient", "(", "''", ")", "\n", "self", ".", "gripperClient", "=", "GripperClient", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_joints": [[25, 27], ["TestController.RobotController.robotClient.GripperClient"], "methods", ["None"], ["", "def", "move_joints", "(", "self", ",", "target", ",", "moveType", "=", "\"p\"", ",", "vel", "=", "0.1", ",", "acc", "=", "0.1", ")", ":", "\n", "\t\t", "self", ".", "robotClient", ".", "GripperClient", "(", "target", ",", "moveType", ",", "vel", ",", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose": [[28, 35], ["TestController.RobotController.robotClient.GetCurrentCartPose"], "methods", ["None"], ["", "def", "get_pose", "(", "self", ",", "return_mm", "=", "True", ")", ":", "\n", "\t\t", "currentPose", "=", "self", ".", "robotClient", ".", "GetCurrentCartPose", "(", ")", "\n", "if", "return_mm", ":", "\n", "\t\t\t", "currentPose", "[", "'x'", "]", "=", "currentPose", "[", "'x'", "]", "*", "1000", "\n", "currentPose", "[", "'y'", "]", "=", "currentPose", "[", "'y'", "]", "*", "1000", "\n", "currentPose", "[", "'z'", "]", "=", "currentPose", "[", "'z'", "]", "*", "1000", "\n", "", "return", "currentPose", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_moving": [[36, 38], ["TestController.RobotController.robotClient.IsRobotMoving"], "methods", ["None"], ["", "def", "is_moving", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "robotClient", ".", "IsRobotMoving", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_joints": [[39, 50], ["TestController.RobotController.robotClient.GetCurrentJointPose", "numpy.degrees", "TestController.RobotController.robotClient.GetCurrentJointPose", "print"], "methods", ["None"], ["", "def", "get_joints", "(", "self", ",", "type", "=", "'deg'", ")", ":", "\n", "\t\t", "if", "type", "==", "'deg'", ":", "\n", "\t\t\t", "currentJoins", "=", "self", ".", "robotClient", ".", "GetCurrentJointPose", "(", ")", "\n", "currentJoints", "=", "np", ".", "degrees", "(", "currentJoins", ")", "\n", "", "elif", "type", "==", "'rad'", ":", "\n", "\t\t\t", "currentJoints", "=", "self", ".", "robotClient", ".", "GetCurrentJointPose", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "'get_joints: wrong type'", ")", "\n", "currentJoints", "=", "-", "1", "\n", "\n", "", "return", "currentJoints", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.move_robot_to_coord_origin": [[51, 73], ["numpy.array", "TestController.RobotController.tfClient.GetTransformMatrix", "TestController.RobotController.robotClient.GetCurrentCartPose", "print", "print", "print", "print", "TestController.RobotController.robotClient.SetPoseTarget"], "methods", ["None"], ["", "def", "move_robot_to_coord_origin", "(", "self", ",", "coord_system", "=", "\"kitting_box2\"", ")", ":", "\n", "\t\t", "tfmat", "=", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "target_pose", "=", "self", ".", "tfClient", ".", "GetTransformMatrix", "(", "\"robot\"", ",", "coord_system", ",", "tfmat", ")", "\n", "\n", "currentPose", "=", "self", ".", "robotClient", ".", "GetCurrentCartPose", "(", ")", "\n", "print", "(", "\"current pose = \"", ")", "\n", "print", "(", "currentPose", ")", "\n", "\n", "currentPose", "[", "'x'", "]", "=", "target_pose", "[", "0", ",", "3", "]", "\n", "currentPose", "[", "'y'", "]", "=", "target_pose", "[", "1", ",", "3", "]", "\n", "#currentPose.z = 0.05", "\n", "\n", "print", "(", "\"target pose = \"", ")", "\n", "print", "(", "currentPose", ")", "\n", "\n", "self", ".", "robotClient", ".", "SetPoseTarget", "(", "currentPose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.is_home": [[74, 85], ["TestController.RobotController.get_joints", "numpy.array", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_joints"], ["", "def", "is_home", "(", "self", ",", "eps", "=", "0.02", ")", ":", "\n", "\t\t", "j", "=", "self", ".", "get_joints", "(", ")", "\n", "t", "=", "np", ".", "array", "(", "[", "0", ",", "-", "90", ",", "0", ",", "-", "90", ",", "0", ",", "0", "]", ")", "\n", "d", "=", "np", ".", "abs", "(", "t", "-", "j", ")", "\n", "home", "=", "True", "\n", "for", "q", "in", "d", ":", "\n", "\t\t\t", "if", "q", ">", "eps", ":", "\n", "\t\t\t\t", "home", "=", "False", "\n", "break", "\n", "\n", "", "", "return", "home", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.at_target": [[86, 98], ["TestController.RobotController.get_joints"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_joints"], ["", "def", "at_target", "(", "self", ",", "t", ",", "type", "=", "'deg'", ",", "eps", "=", "0.02", ")", ":", "\n", "\t\t", "j", "=", "self", ".", "get_joints", "(", "type", "=", "type", ")", "\n", "if", "t", "[", "0", "]", "+", "eps", ">", "j", "[", "0", "]", ">", "t", "[", "0", "]", "-", "eps", "and", "j", "[", "1", "]", "<", "t", "[", "1", "]", "+", "eps", "and", "j", "[", "1", "]", ">", "t", "[", "1", "]", "-", "eps", "and", "j", "[", "2", "]", "<", "t", "[", "2", "]", "+", "eps", "and", "j", "[", "2", "]", ">", "t", "[", "2", "]", "-", "eps", "and", "j", "[", "3", "]", "<", "t", "[", "3", "]", "+", "eps", "and", "j", "[", "3", "]", ">", "t", "[", "3", "]", "-", "eps", "and", "j", "[", "4", "]", "<", "t", "[", "4", "]", "+", "eps", "and", "j", "[", "4", "]", ">", "t", "[", "4", "]", "-", "eps", "and", "j", "[", "5", "]", "<", "t", "[", "5", "]", "+", "eps", "and", "j", "[", "5", "]", ">", "t", "[", "5", "]", "-", "eps", ":", "\n", "\t\t\t", "at_target", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t", "at_target", "=", "False", "\n", "", "return", "at_target", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.close_gripper": [[99, 101], ["TestController.RobotController.gripperClient.close"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.close"], ["", "def", "close_gripper", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "gripperClient", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.open_gripper": [[102, 104], ["TestController.RobotController.gripperClient.open"], "methods", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open"], ["", "def", "open_gripper", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "gripperClient", ".", "open", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.createPath.create_path": [[8, 75], ["print", "TestController.RobotController", "print", "os.path.join", "os.path.exists", "os.makedirs", "input", "list", "TestController.RobotController.get_pose", "open", "json.dump", "TestController.RobotController.get_joints", "len", "range", "data[].append", "data[].append", "len", "print", "data[].append", "data[].append", "print", "data[].append", "print", "data[].append", "print", "data[].append", "print", "data[].append", "print"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_pose", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.GripperClient.open", "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.TestController.RobotController.get_joints"], ["def", "create_path", "(", "name", ")", ":", "\n", "\n", "    ", "path", "=", "'./robot_path'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "print", "(", "'creating Robot Controller'", ")", "\n", "controller", "=", "RobotController", "(", ")", "\n", "\n", "data", "=", "{", "\n", "'joints'", ":", "[", "]", ",", "\n", "'cart_pose'", ":", "[", "]", ",", "\n", "'via_points'", ":", "[", "]", "\n", "}", "\n", "via", "=", "True", "\n", "vias", "=", "0", "\n", "points", "=", "0", "\n", "print", "(", "'starting loop'", ")", "\n", "while", "True", ":", "\n", "        ", "p", "=", "input", "(", "'enter for next position, v for via point, e for exit'", ")", "\n", "if", "p", "==", "'e'", ":", "\n", "            ", "break", "\n", "", "elif", "p", "==", "'v'", ":", "\n", "            ", "via", "=", "True", "\n", "", "else", ":", "\n", "            ", "via", "=", "False", "\n", "\n", "\n", "", "currentJoints", "=", "list", "(", "controller", ".", "get_joints", "(", ")", ")", "\n", "currentPose", "=", "controller", ".", "get_pose", "(", ")", "\n", "if", "len", "(", "data", "[", "'joints'", "]", ")", ">", "0", ":", "\n", "            ", "same", "=", "True", "\n", "for", "i", "in", "range", "(", "len", "(", "currentJoints", ")", ")", ":", "\n", "                ", "if", "currentJoints", "[", "i", "]", "!=", "data", "[", "'joints'", "]", "[", "-", "1", "]", "[", "i", "]", ":", "\n", "                    ", "same", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "same", ":", "\n", "                ", "print", "(", "'same point'", ")", "\n", "", "else", ":", "\n", "                ", "data", "[", "'joints'", "]", ".", "append", "(", "currentJoints", ")", "\n", "data", "[", "'cart_pose'", "]", ".", "append", "(", "currentPose", ")", "\n", "print", "(", ")", "\n", "if", "via", ":", "\n", "                    ", "data", "[", "'via_points'", "]", ".", "append", "(", "'1'", ")", "\n", "vias", "+=", "1", "\n", "print", "(", "'Added via. vias = {}, points = {}, total points = {}, joints = {}'", ".", "format", "(", "vias", ",", "points", ",", "vias", "+", "points", ",", "currentJoints", ")", ")", "\n", "", "else", ":", "\n", "                    ", "points", "+=", "1", "\n", "data", "[", "'via_points'", "]", ".", "append", "(", "'0'", ")", "\n", "print", "(", "'Added point. vias = {}, points = {}, total points = {}, joints = {}'", ".", "format", "(", "vias", ",", "points", ",", "vias", "+", "points", ",", "currentJoints", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "data", "[", "'joints'", "]", ".", "append", "(", "currentJoints", ")", "\n", "data", "[", "'cart_pose'", "]", ".", "append", "(", "currentPose", ")", "\n", "if", "via", ":", "\n", "                ", "data", "[", "'via_points'", "]", ".", "append", "(", "'1'", ")", "\n", "vias", "+=", "1", "\n", "print", "(", "'Added via. vias = {}, points = {}, total points = {}, joints = {}'", ".", "format", "(", "vias", ",", "points", ",", "vias", "+", "points", ",", "currentJoints", ")", ")", "\n", "", "else", ":", "\n", "                ", "points", "+=", "1", "\n", "data", "[", "'via_points'", "]", ".", "append", "(", "'0'", ")", "\n", "print", "(", "'Added point. vias = {}, points = {}, total points = {}, joints = {}'", ".", "format", "(", "vias", ",", "points", ",", "vias", "+", "points", ",", "currentJoints", ")", ")", "\n", "\n", "", "", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'{}.json'", ".", "format", "(", "name", ")", ")", "\n", "\n", "#print(save_path)", "\n", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.createPath.main": [[79, 82], ["createPath.create_path"], "function", ["home.repos.pwc.inspect_result.KochPJ_AutoPoseEstimation.robot_controller.createPath.create_path"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "name", "=", "'handEyeCalibPath4'", "\n", "create_path", "(", "name", ")", "\n", "\n"]]}