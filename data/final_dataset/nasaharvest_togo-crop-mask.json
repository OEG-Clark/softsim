{"home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.utils.visualize.sentinel_as_tci": [[13, 31], ["enumerate", "sentinel_ds.isel", "sentinel_ds.isel", "xarray.xr.open_dataset().FEATURES"], "function", ["None"], ["def", "sentinel_as_tci", "(", "sentinel_ds", ":", "xr", ".", "DataArray", ",", "scale", ":", "bool", "=", "True", ")", "->", "xr", ".", "DataArray", ":", "\n", "    ", "r\"\"\"\n    Get a True Colour Image from Sentinel data exported from Earth Engine\n    :param sentinel_ds: The sentinel data, exported from Earth Engine\n    :param scale: Whether or not to add the factor 10,000 scale\n    :return: A dataframe with true colour bands\n    \"\"\"", "\n", "\n", "band2idx", "=", "{", "\n", "band", ":", "idx", "for", "idx", ",", "band", "in", "enumerate", "(", "sentinel_ds", ".", "attrs", "[", "\"band_descriptions\"", "]", ")", "\n", "}", "\n", "\n", "tci_bands", "=", "[", "\"B4\"", ",", "\"B3\"", ",", "\"B2\"", "]", "\n", "tci_indices", "=", "[", "band2idx", "[", "band", "]", "for", "band", "in", "tci_bands", "]", "\n", "if", "scale", ":", "\n", "        ", "return", "sentinel_ds", ".", "isel", "(", "band", "=", "tci_indices", ")", "/", "10000", "*", "2.5", "\n", "", "else", ":", "\n", "        ", "return", "sentinel_ds", ".", "isel", "(", "band", "=", "tci_indices", ")", "*", "2.5", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.utils.visualize.plot_roc_curve": [[33, 61], ["sklearn.metrics.roc_curve", "matplotlib.subplots", "ax.plot", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "ax.set_title", "ax.legend", "matplotlib.show", "dict", "enumerate", "sklearn.metrics.auc", "matplotlib.scatter", "matplotlib.annotate", "round"], "function", ["None"], ["", "", "def", "plot_roc_curve", "(", "\n", "true", ":", "np", ".", "ndarray", ",", "preds", ":", "np", ".", "ndarray", ",", "threshold_spacing", ":", "Optional", "[", "int", "]", "=", "3", "\n", ")", "->", "None", ":", "\n", "    ", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "true", ",", "preds", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "10", ",", "7", ")", ")", "\n", "ax", ".", "plot", "(", "fpr", ",", "tpr", ",", "label", "=", "\"AUC ROC curve\"", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"--\"", ",", "label", "=", "\"random\"", ")", "\n", "ax", ".", "set_xlabel", "(", "\"False positive rate\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"True positive rate\"", ")", "\n", "ax", ".", "set_title", "(", "f\"AUC ROC: {auc(fpr, tpr)}\"", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "\"lower right\"", ")", "\n", "\n", "if", "threshold_spacing", "is", "not", "None", ":", "\n", "\n", "        ", "bbox_props", "=", "dict", "(", "boxstyle", "=", "\"round\"", ",", "fc", "=", "\"w\"", ",", "ec", "=", "\"0.5\"", ",", "alpha", "=", "0.9", ")", "\n", "\n", "for", "idx", ",", "thresh", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "if", "(", "idx", "+", "1", ")", "%", "threshold_spacing", "==", "0", ":", "\n", "                ", "plt", ".", "scatter", "(", "fpr", "[", "idx", "]", ",", "tpr", "[", "idx", "]", ")", "\n", "plt", ".", "annotate", "(", "\n", "round", "(", "thresh", ",", "2", ")", ",", "\n", "(", "fpr", "[", "idx", "]", ",", "tpr", "[", "idx", "]", ")", ",", "\n", "textcoords", "=", "\"offset points\"", ",", "\n", "xytext", "=", "(", "-", "20", ",", "10", ")", ",", "# distance from text to points (x,y)", "\n", "bbox", "=", "bbox_props", ",", "\n", ")", "\n", "", "", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.utils.visualize.plot_with_mask": [[63, 137], ["sentinel_as_tci().isel", "xarray.open_dataset", "tci.sortby().sortby.sortby().sortby", "preds.transpose().sortby().sortby.transpose().sortby().sortby", "matplotlib.clf", "matplotlib.subplots", "fig.suptitle", "numpy.clip", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].imshow", "tci.sortby().sortby.x.min", "tci.sortby().sortby.x.max", "tci.sortby().sortby.y.min", "tci.sortby().sortby.y.max", "numpy.moveaxis", "cartopy.PlateCarree", "len", "kwargs.update", "numpy.argmax", "len", "fig.colorbar", "matplotlib.FuncFormatter", "fig.colorbar", "visualize.sentinel_as_tci", "tci.sortby().sortby.sortby", "preds.transpose().sortby().sortby.transpose().sortby", "cartopy.PlateCarree", "cartopy.PlateCarree", "cartopy.PlateCarree", "float", "float", "preds.transpose().sortby().sortby.to_array", "ax.ravel().tolist", "range", "ax.ravel().tolist", "xarray.open_dataset", "preds.transpose().sortby().sortby.transpose", "preds.transpose().sortby().sortby.lat.min", "preds.transpose().sortby().sortby.lon.min", "list", "len", "ax.ravel", "ax.ravel"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.utils.visualize.sentinel_as_tci"], ["", "def", "plot_with_mask", "(", "\n", "path_to_org", ":", "Path", ",", "path_to_preds", ":", "Path", ",", "threshold", ":", "float", "=", "0.5", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    The ordering of the dimensions might be funky\n    \"\"\"", "\n", "tci", "=", "sentinel_as_tci", "(", "xr", ".", "open_dataset", "(", "path_to_org", ")", ".", "FEATURES", ",", "scale", "=", "False", ")", ".", "isel", "(", "\n", "time", "=", "-", "1", "\n", ")", "\n", "\n", "preds", "=", "xr", ".", "open_dataset", "(", "path_to_preds", ")", "\n", "\n", "tci", "=", "tci", ".", "sortby", "(", "\"x\"", ")", ".", "sortby", "(", "\"y\"", ")", "\n", "# This feels hacky? but it works", "\n", "preds", "=", "preds", ".", "transpose", "(", "\"lat\"", ",", "\"lon\"", ")", ".", "sortby", "(", "\"lat\"", ",", "ascending", "=", "False", ")", ".", "sortby", "(", "\"lon\"", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "\n", "1", ",", "3", ",", "figsize", "=", "(", "20", ",", "7.5", ")", ",", "subplot_kw", "=", "{", "\"projection\"", ":", "ccrs", ".", "PlateCarree", "(", ")", "}", "\n", ")", "\n", "\n", "fig", ".", "suptitle", "(", "\n", "f\"Model results for tile with bottom left corner:\"", "\n", "f\"\\nat latitude {float(preds.lat.min())}\"", "\n", "f\"\\n and longitude {float(preds.lon.min())}\"", ",", "\n", "fontsize", "=", "15", ",", "\n", ")", "\n", "# ax 1 - original", "\n", "img_extent_1", "=", "(", "tci", ".", "x", ".", "min", "(", ")", ",", "tci", ".", "x", ".", "max", "(", ")", ",", "tci", ".", "y", ".", "min", "(", ")", ",", "tci", ".", "y", ".", "max", "(", ")", ")", "\n", "img", "=", "np", ".", "clip", "(", "np", ".", "moveaxis", "(", "tci", ".", "values", ",", "0", ",", "-", "1", ")", ",", "0", ",", "1", ")", "\n", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "\"True colour image\"", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "img", ",", "origin", "=", "\"upper\"", ",", "extent", "=", "img_extent_1", ",", "transform", "=", "ccrs", ".", "PlateCarree", "(", ")", ")", "\n", "\n", "kwargs", "=", "{", "\n", "\"extent\"", ":", "img_extent_1", ",", "\n", "\"transform\"", ":", "ccrs", ".", "PlateCarree", "(", ")", ",", "\n", "}", "\n", "\n", "if", "len", "(", "preds", ".", "data_vars", ")", "==", "1", ":", "\n", "        ", "raw_preds", "=", "preds", ".", "prediction_0", "\n", "mask", "=", "preds", ".", "prediction_0", ">", "threshold", "\n", "\n", "kwargs", ".", "update", "(", "{", "\"vmin\"", ":", "0", ",", "\"vmax\"", ":", "1", "}", ")", "\n", "", "else", ":", "\n", "        ", "raw_preds", "=", "mask", "=", "np", ".", "argmax", "(", "preds", ".", "to_array", "(", ")", ".", "values", ",", "axis", "=", "0", ")", "\n", "\n", "# ax 2 - mask", "\n", "", "ax", "[", "1", "]", ".", "set_title", "(", "\"Mask\"", ")", "\n", "\n", "im", "=", "ax", "[", "1", "]", ".", "imshow", "(", "raw_preds", ",", "**", "kwargs", ")", "\n", "\n", "# finally, all together", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "\"Mask on top of the true colour image\"", ")", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "img", ",", "origin", "=", "\"upper\"", ",", "extent", "=", "img_extent_1", ",", "transform", "=", "ccrs", ".", "PlateCarree", "(", ")", ")", "\n", "\n", "kwargs", "[", "\"alpha\"", "]", "=", "0.3", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "mask", ",", "**", "kwargs", ")", "\n", "\n", "if", "len", "(", "preds", ".", "data_vars", ")", "==", "1", ":", "\n", "        ", "fig", ".", "colorbar", "(", "\n", "im", ",", "ax", "=", "ax", ".", "ravel", "(", ")", ".", "tolist", "(", ")", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "# This function formatter will replace integers with target names", "\n", "        ", "formatter", "=", "plt", ".", "FuncFormatter", "(", "lambda", "val", ",", "loc", ":", "list", "(", "preds", ".", "data_vars", ")", "[", "val", "]", ")", "\n", "\n", "# We must be sure to specify the ticks matching our target names", "\n", "fig", ".", "colorbar", "(", "\n", "im", ",", "\n", "ticks", "=", "range", "(", "len", "(", "preds", ".", "data_vars", ")", ")", ",", "\n", "format", "=", "formatter", ",", "\n", "ax", "=", "ax", ".", "ravel", "(", ")", ".", "tolist", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.utils.__init__.set_seed": [[12, 16], ["numpy.random.seed", "torch.manual_seed", "random.seed"], "function", ["None"], []], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseDataInstance.isin": [[26, 32], ["None"], "methods", ["None"], ["def", "isin", "(", "self", ",", "bounding_box", ":", "BoundingBox", ")", "->", "bool", ":", "\n", "        ", "return", "(", "\n", "(", "self", ".", "instance_lon", "<=", "bounding_box", ".", "max_lon", ")", "\n", "&", "(", "self", ".", "instance_lon", ">=", "bounding_box", ".", "min_lon", ")", "\n", "&", "(", "self", ".", "instance_lat", "<=", "bounding_box", ".", "max_lat", ")", "\n", "&", "(", "self", ".", "instance_lat", ">=", "bounding_box", ".", "min_lat", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.__init__": [[48, 58], ["src.utils.set_seed", "base.BaseEngineer.get_geospatial_files", "base.BaseEngineer.read_labels", "base.BaseEngineer.savedir.mkdir"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.utils.__init__.set_seed", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.get_geospatial_files", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.togo.TogoEvaluationEngineer.read_labels"], ["def", "__init__", "(", "self", ",", "data_folder", ":", "Path", ")", "->", "None", ":", "\n", "        ", "set_seed", "(", ")", "\n", "self", ".", "data_folder", "=", "data_folder", "\n", "self", ".", "geospatial_files", "=", "self", ".", "get_geospatial_files", "(", "data_folder", ")", "\n", "self", ".", "labels", "=", "self", ".", "read_labels", "(", "data_folder", ")", "\n", "\n", "self", ".", "savedir", "=", "self", ".", "data_folder", "/", "\"features\"", "/", "self", ".", "dataset", "\n", "self", ".", "savedir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "self", ".", "normalizing_dict_interim", ":", "Dict", "[", "str", ",", "Union", "[", "np", ".", "ndarray", ",", "int", "]", "]", "=", "{", "\"n\"", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.get_geospatial_files": [[59, 62], ["list", "sentinel_files.glob"], "methods", ["None"], ["", "def", "get_geospatial_files", "(", "self", ",", "data_folder", ":", "Path", ")", "->", "List", "[", "Path", "]", ":", "\n", "        ", "sentinel_files", "=", "data_folder", "/", "\"raw\"", "/", "self", ".", "sentinel_dataset", "\n", "return", "list", "(", "sentinel_files", ".", "glob", "(", "\"*.tif\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.read_labels": [[63, 67], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "abstractmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.find_nearest": [[68, 73], ["numpy.asarray", "numpy.abs().argmin", "numpy.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "find_nearest", "(", "array", ",", "value", ")", ":", "\n", "        ", "array", "=", "np", ".", "asarray", "(", "array", ")", "\n", "idx", "=", "(", "np", ".", "abs", "(", "array", "-", "value", ")", ")", ".", "argmin", "(", ")", "\n", "return", "array", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.randomly_select_latlon": [[74, 86], ["numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "randomly_select_latlon", "(", "\n", "lat", ":", "np", ".", "ndarray", ",", "lon", ":", "np", ".", "ndarray", ",", "label_lat", ":", "float", ",", "label_lon", ":", "float", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "\n", "        ", "lats", "=", "np", ".", "random", ".", "choice", "(", "lat", ",", "size", "=", "2", ",", "replace", "=", "False", ")", "\n", "lons", "=", "np", ".", "random", ".", "choice", "(", "lon", ",", "size", "=", "2", ",", "replace", "=", "False", ")", "\n", "\n", "if", "(", "lats", "[", "0", "]", "!=", "label_lat", ")", "or", "(", "lons", "[", "0", "]", "!=", "label_lon", ")", ":", "\n", "            ", "return", "lats", "[", "0", "]", ",", "lons", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "lats", "[", "1", "]", ",", "lons", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.process_filename": [[87, 127], ["filename[].split", "datetime.datetime.datetime.strptime", "datetime.datetime.datetime.strptime", "end_date_str.split", "print", "datetime.datetime.datetime", "int", "int", "int"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "process_filename", "(", "\n", "filename", ":", "str", ",", "include_extended_filenames", ":", "bool", "\n", ")", "->", "Optional", "[", "Tuple", "[", "str", ",", "datetime", ",", "datetime", "]", "]", ":", "\n", "        ", "r\"\"\"\n        Given an exported sentinel file, process it to get the start\n        and end dates of the data. This assumes the filename ends with '.tif'\n        \"\"\"", "\n", "date_format", "=", "\"%Y-%m-%d\"", "\n", "\n", "identifier", ",", "start_date_str", ",", "end_date_str", "=", "filename", "[", ":", "-", "4", "]", ".", "split", "(", "\"_\"", ")", "\n", "\n", "start_date", "=", "datetime", ".", "strptime", "(", "start_date_str", ",", "date_format", ")", "\n", "\n", "try", ":", "\n", "            ", "end_date", "=", "datetime", ".", "strptime", "(", "end_date_str", ",", "date_format", ")", "\n", "return", "identifier", ",", "start_date", ",", "end_date", "\n", "\n", "", "except", "ValueError", ":", "\n", "            ", "if", "include_extended_filenames", ":", "\n", "                ", "end_list", "=", "end_date_str", ".", "split", "(", "\"-\"", ")", "\n", "end_year", ",", "end_month", ",", "end_day", "=", "(", "\n", "end_list", "[", "0", "]", ",", "\n", "end_list", "[", "1", "]", ",", "\n", "end_list", "[", "2", "]", ",", "\n", ")", "\n", "\n", "# if we allow extended filenames, we want to", "\n", "# differentiate them too", "\n", "id_number", "=", "end_list", "[", "3", "]", "\n", "identifier", "=", "f\"{identifier}-{id_number}\"", "\n", "\n", "return", "(", "\n", "identifier", ",", "\n", "start_date", ",", "\n", "datetime", "(", "int", "(", "end_year", ")", ",", "int", "(", "end_month", ")", ",", "int", "(", "end_day", ")", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f\"Unexpected filename {filename} - skipping\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.load_tif": [[128, 170], ["len", "len", "xarray.concat", "xarray.open_rasterio().rename", "da.isel", "range", "da_split_by_time.append", "pandas.Index", "range", "xarray.open_rasterio", "slice", "datetime.datetime.timedelta", "len"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "load_tif", "(", "\n", "filepath", ":", "Path", ",", "start_date", ":", "datetime", ",", "days_per_timestep", ":", "int", "\n", ")", "->", "xr", ".", "DataArray", ":", "\n", "        ", "r\"\"\"\n        The sentinel files exported from google earth have all the timesteps\n        concatenated together. This function loads a tif files and splits the\n        timesteps\n        \"\"\"", "\n", "\n", "# this mirrors the eo-learn approach", "\n", "# also, we divide by 10,000, to remove the scaling factor", "\n", "# https://developers.google.com/earth-engine/datasets/catalog/COPERNICUS_S2", "\n", "da", "=", "xr", ".", "open_rasterio", "(", "filepath", ")", ".", "rename", "(", "\"FEATURES\"", ")", "/", "10000", "\n", "\n", "da_split_by_time", ":", "List", "[", "xr", ".", "DataArray", "]", "=", "[", "]", "\n", "\n", "bands_per_timestep", "=", "len", "(", "BANDS", ")", "\n", "num_bands", "=", "len", "(", "da", ".", "band", ")", "\n", "\n", "assert", "(", "\n", "num_bands", "%", "bands_per_timestep", "==", "0", "\n", ")", ",", "f\"Total number of bands not divisible by the expected bands per timestep\"", "\n", "\n", "cur_band", "=", "0", "\n", "while", "cur_band", "+", "bands_per_timestep", "<=", "num_bands", ":", "\n", "            ", "time_specific_da", "=", "da", ".", "isel", "(", "\n", "band", "=", "slice", "(", "cur_band", ",", "cur_band", "+", "bands_per_timestep", ")", "\n", ")", "\n", "time_specific_da", "[", "\"band\"", "]", "=", "range", "(", "bands_per_timestep", ")", "\n", "da_split_by_time", ".", "append", "(", "time_specific_da", ")", "\n", "cur_band", "+=", "bands_per_timestep", "\n", "\n", "", "timesteps", "=", "[", "\n", "start_date", "+", "timedelta", "(", "days", "=", "days_per_timestep", ")", "*", "i", "\n", "for", "i", "in", "range", "(", "len", "(", "da_split_by_time", ")", ")", "\n", "]", "\n", "\n", "combined", "=", "xr", ".", "concat", "(", "da_split_by_time", ",", "pd", ".", "Index", "(", "timesteps", ",", "name", "=", "\"time\"", ")", ")", "\n", "combined", ".", "attrs", "[", "\"band_descriptions\"", "]", "=", "BANDS", "\n", "\n", "return", "combined", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.update_normalizing_values": [[171, 195], ["range", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "update_normalizing_values", "(", "self", ",", "array", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "# given an input array of shape [timesteps, bands]", "\n", "# update the normalizing dict", "\n", "# https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance", "\n", "# https://www.johndcook.com/blog/standard_deviation/", "\n", "        ", "num_bands", "=", "array", ".", "shape", "[", "1", "]", "\n", "\n", "# initialize", "\n", "if", "\"mean\"", "not", "in", "self", ".", "normalizing_dict_interim", ":", "\n", "            ", "self", ".", "normalizing_dict_interim", "[", "\"mean\"", "]", "=", "np", ".", "zeros", "(", "num_bands", ")", "\n", "self", ".", "normalizing_dict_interim", "[", "\"M2\"", "]", "=", "np", ".", "zeros", "(", "num_bands", ")", "\n", "\n", "", "for", "time_idx", "in", "range", "(", "array", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "            ", "self", ".", "normalizing_dict_interim", "[", "\"n\"", "]", "+=", "1", "\n", "\n", "x", "=", "array", "[", "time_idx", ",", ":", "]", "\n", "\n", "delta", "=", "x", "-", "self", ".", "normalizing_dict_interim", "[", "\"mean\"", "]", "\n", "self", ".", "normalizing_dict_interim", "[", "\"mean\"", "]", "+=", "(", "\n", "delta", "/", "self", ".", "normalizing_dict_interim", "[", "\"n\"", "]", "\n", ")", "\n", "self", ".", "normalizing_dict_interim", "[", "\"M2\"", "]", "+=", "delta", "*", "(", "\n", "x", "-", "self", ".", "normalizing_dict_interim", "[", "\"mean\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.calculate_normalizing_dict": [[197, 211], ["numpy.sqrt", "print"], "methods", ["None"], ["", "", "def", "calculate_normalizing_dict", "(", "self", ")", "->", "Optional", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "\n", "        ", "if", "\"mean\"", "not", "in", "self", ".", "normalizing_dict_interim", ":", "\n", "            ", "print", "(", "\n", "\"No normalizing dict calculated! Make sure to call update_normalizing_values\"", "\n", ")", "\n", "return", "None", "\n", "\n", "", "variance", "=", "self", ".", "normalizing_dict_interim", "[", "\"M2\"", "]", "/", "(", "\n", "self", ".", "normalizing_dict_interim", "[", "\"n\"", "]", "-", "1", "\n", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "variance", ")", "\n", "\n", "return", "{", "\"mean\"", ":", "self", ".", "normalizing_dict_interim", "[", "\"mean\"", "]", ",", "\"std\"", ":", "std", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.maxed_nan_to_num": [[212, 222], ["numpy.nan_to_num", "numpy.count_nonzero", "numpy.isnan"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "maxed_nan_to_num", "(", "\n", "array", ":", "np", ".", "ndarray", ",", "nan", ":", "float", ",", "max_ratio", ":", "Optional", "[", "float", "]", "=", "None", "\n", ")", "->", "Optional", "[", "np", ".", "ndarray", "]", ":", "\n", "\n", "        ", "if", "max_ratio", "is", "not", "None", ":", "\n", "            ", "num_nan", "=", "np", ".", "count_nonzero", "(", "np", ".", "isnan", "(", "array", ")", ")", "\n", "if", "(", "num_nan", "/", "array", ".", "size", ")", ">", "max_ratio", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "np", ".", "nan_to_num", "(", "array", ",", "nan", "=", "nan", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.process_single_file": [[223, 236], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "process_single_file", "(", "\n", "self", ",", "\n", "path_to_file", ":", "Path", ",", "\n", "nan_fill", ":", "float", ",", "\n", "max_nan_ratio", ":", "float", ",", "\n", "add_ndvi", ":", "bool", ",", "\n", "calculate_normalizing_dict", ":", "bool", ",", "\n", "start_date", ":", "datetime", ",", "\n", "days_per_timestep", ":", "int", ",", "\n", "is_test", ":", "bool", ",", "\n", ")", "->", "Optional", "[", "BaseDataInstance", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.calculate_ndvi": [[237, 269], ["numpy.append", "warnings.catch_warnings", "warnings.filterwarnings", "numpy.where", "numpy.expand_dims", "ValueError", "src.exporters.sentinel.cloudfree.BANDS.index", "src.exporters.sentinel.cloudfree.BANDS.index", "src.exporters.sentinel.cloudfree.BANDS.index", "src.exporters.sentinel.cloudfree.BANDS.index"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "calculate_ndvi", "(", "input_array", ":", "np", ".", "ndarray", ",", "num_dims", ":", "int", "=", "2", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "r\"\"\"\n        Given an input array of shape [timestep, bands] where\n        bands == len(BANDS), returns an array of shape\n        [timestep, bands + 1] where the extra band is NDVI,\n        (b08 - b04) / (b08 + b04)\n        \"\"\"", "\n", "\n", "if", "num_dims", "==", "2", ":", "\n", "            ", "near_infrared", "=", "input_array", "[", ":", ",", "BANDS", ".", "index", "(", "\"B8\"", ")", "]", "\n", "red", "=", "input_array", "[", ":", ",", "BANDS", ".", "index", "(", "\"B4\"", ")", "]", "\n", "", "elif", "num_dims", "==", "3", ":", "\n", "            ", "near_infrared", "=", "input_array", "[", ":", ",", ":", ",", "BANDS", ".", "index", "(", "\"B8\"", ")", "]", "\n", "red", "=", "input_array", "[", ":", ",", ":", ",", "BANDS", ".", "index", "(", "\"B4\"", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Expected num_dims to be 2 or 3 - got {num_dims}\"", ")", "\n", "\n", "", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "filterwarnings", "(", "\n", "\"ignore\"", ",", "message", "=", "\"invalid value encountered in true_divide\"", "\n", ")", "\n", "# suppress the following warning", "\n", "# RuntimeWarning: invalid value encountered in true_divide", "\n", "# for cases where near_infrared + red == 0", "\n", "# since this is handled in the where condition", "\n", "ndvi", "=", "np", ".", "where", "(", "\n", "(", "near_infrared", "+", "red", ")", ">", "0", ",", "\n", "(", "near_infrared", "-", "red", ")", "/", "(", "near_infrared", "+", "red", ")", ",", "\n", "0", ",", "\n", ")", "\n", "", "return", "np", ".", "append", "(", "input_array", ",", "np", ".", "expand_dims", "(", "ndvi", ",", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.engineer": [[270, 365], ["tqdm.tqdm.tqdm", "base.BaseEngineer.process_filename", "base.BaseEngineer.process_single_file", "base.BaseEngineer.calculate_normalizing_dict", "numpy.random.uniform", "subset_path.mkdir", "print", "str", "str", "save_path.open", "pickle.dump", "save_path.open", "pickle.dump", "start_date.date", "end_date.date"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.process_filename", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.togo.TogoEngineer.process_single_file", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.calculate_normalizing_dict"], ["", "def", "engineer", "(", "\n", "self", ",", "\n", "val_set_size", ":", "float", "=", "0.2", ",", "\n", "test_set_size", ":", "float", "=", "0.0", ",", "\n", "nan_fill", ":", "float", "=", "0.0", ",", "\n", "max_nan_ratio", ":", "float", "=", "0.3", ",", "\n", "checkpoint", ":", "bool", "=", "True", ",", "\n", "add_ndvi", ":", "bool", "=", "True", ",", "\n", "include_extended_filenames", ":", "bool", "=", "True", ",", "\n", "calculate_normalizing_dict", ":", "bool", "=", "True", ",", "\n", "days_per_timestep", ":", "int", "=", "30", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"\n        Run the engineer\n\n        :param val_set_size: The ratio of labels which should be put into the validation set\n        :param test_set_size: The ratio of labels which should be put into the test set.\n            This is 0 by default, since the Togo Evaluation labels are used to calculate\n            test results instead\n        :param nan_fill: The value to use to fill NaNs\n        :param max_nan_ratio: The maximum number of NaNs in an array. Data with more NaNs than\n            this is skipped\n        :param checkpoint: Whether to check in self.data_folder to see if a file has already been\n            engineered. If it is, it is skipped\n        :param add_ndvi: Whether to add NDVI to the raw bands\n        :param include_extended_filenames: Filenames are expected to have the format\n            {identifier}_{start_date}_{end_date}.tif - some have additional strings, i.e.\n            {identifier}_{start_date}_{end_date}{more_strings}.tif. If include_extended_filenames\n            is True, those files get engineered too. Otherwise, they get skipped\n        :param calculate_normalizing_dict: Whether to calculate a normalizing dictionary (i.e. the\n            mean and standard deviation of all training and validation files)\n        :param days_per_timestep: The number of days per timestep. This should match the value\n            passed to the exporter\n        \"\"\"", "\n", "for", "file_path", "in", "tqdm", "(", "self", ".", "geospatial_files", ")", ":", "\n", "\n", "            ", "file_info", "=", "self", ".", "process_filename", "(", "\n", "file_path", ".", "name", ",", "include_extended_filenames", "=", "include_extended_filenames", "\n", ")", "\n", "\n", "if", "file_info", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "identifier", ",", "start_date", ",", "end_date", "=", "file_info", "\n", "\n", "file_name", "=", "f\"{identifier}_{str(start_date.date())}_{str(end_date.date())}\"", "\n", "\n", "if", "checkpoint", ":", "\n", "# we check if the file has already been written", "\n", "                ", "if", "(", "\n", "(", "self", ".", "savedir", "/", "\"validation\"", "/", "f\"{file_name}.pkl\"", ")", ".", "exists", "(", ")", "\n", "or", "(", "self", ".", "savedir", "/", "\"training\"", "/", "f\"{file_name}.pkl\"", ")", ".", "exists", "(", ")", "\n", "or", "(", "self", ".", "savedir", "/", "\"testing\"", "/", "f\"{file_name}.pkl\"", ")", ".", "exists", "(", ")", "\n", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "if", "self", ".", "eval_only", ":", "\n", "                ", "data_subset", "=", "\"testing\"", "\n", "", "else", ":", "\n", "                ", "random_float", "=", "np", ".", "random", ".", "uniform", "(", ")", "\n", "# we split into (val, test, train)", "\n", "if", "random_float", "<=", "(", "val_set_size", "+", "test_set_size", ")", ":", "\n", "                    ", "if", "random_float", "<=", "val_set_size", ":", "\n", "                        ", "data_subset", "=", "\"validation\"", "\n", "", "else", ":", "\n", "                        ", "data_subset", "=", "\"testing\"", "\n", "", "", "else", ":", "\n", "                    ", "data_subset", "=", "\"training\"", "\n", "\n", "", "", "instance", "=", "self", ".", "process_single_file", "(", "\n", "file_path", ",", "\n", "nan_fill", "=", "nan_fill", ",", "\n", "max_nan_ratio", "=", "max_nan_ratio", ",", "\n", "add_ndvi", "=", "add_ndvi", ",", "\n", "calculate_normalizing_dict", "=", "calculate_normalizing_dict", ",", "\n", "start_date", "=", "start_date", ",", "\n", "days_per_timestep", "=", "days_per_timestep", ",", "\n", "is_test", "=", "True", "if", "data_subset", "==", "\"testing\"", "else", "False", ",", "\n", ")", "\n", "if", "instance", "is", "not", "None", ":", "\n", "                ", "subset_path", "=", "self", ".", "savedir", "/", "data_subset", "\n", "subset_path", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "subset_path", "/", "f\"{file_name}.pkl\"", "\n", "with", "save_path", ".", "open", "(", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "instance", ",", "f", ")", "\n", "\n", "", "", "", "if", "calculate_normalizing_dict", ":", "\n", "            ", "normalizing_dict", "=", "self", ".", "calculate_normalizing_dict", "(", ")", "\n", "\n", "if", "normalizing_dict", "is", "not", "None", ":", "\n", "                ", "save_path", "=", "self", ".", "savedir", "/", "\"normalizing_dict.pkl\"", "\n", "with", "save_path", ".", "open", "(", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "normalizing_dict", ",", "f", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"No normalizing dict calculated!\"", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.geowiki.GeoWikiEngineer.read_labels": [[27, 32], ["geowiki.exists", "xarray.open_dataset().to_dataframe().dropna().reset_index", "xarray.open_dataset().to_dataframe().dropna", "xarray.open_dataset().to_dataframe", "xarray.open_dataset"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "geowiki", "=", "data_folder", "/", "\"processed\"", "/", "GeoWikiExporter", ".", "dataset", "/", "\"data.nc\"", "\n", "assert", "geowiki", ".", "exists", "(", ")", ",", "\"GeoWiki processor must be run to load labels\"", "\n", "return", "xr", ".", "open_dataset", "(", "geowiki", ")", ".", "to_dataframe", "(", ")", ".", "dropna", "(", ")", ".", "reset_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.geowiki.GeoWikiEngineer.process_single_file": [[33, 115], ["geowiki.GeoWikiEngineer.load_tif", "geowiki.GeoWikiEngineer.find_nearest", "geowiki.GeoWikiEngineer.find_nearest", "geowiki.GeoWikiEngineer.randomly_select_latlon", "geowiki.GeoWikiEngineer.maxed_nan_to_num", "geowiki.GeoWikiEngineer.maxed_nan_to_num", "float", "float", "float", "float", "len", "geowiki.GeoWikiEngineer.sel().sel", "geowiki.GeoWikiEngineer.sel().sel", "geowiki.GeoWikiEngineer.calculate_ndvi", "geowiki.GeoWikiEngineer.calculate_ndvi", "geowiki.GeoWikiEngineer.update_normalizing_values", "geowiki.GeoWikiDataInstance", "print", "geowiki.GeoWikiEngineer.x.min", "geowiki.GeoWikiEngineer.y.min", "geowiki.GeoWikiEngineer.x.max", "geowiki.GeoWikiEngineer.y.max", "geowiki.GeoWikiEngineer.sel", "geowiki.GeoWikiEngineer.sel"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.load_tif", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.find_nearest", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.find_nearest", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.randomly_select_latlon", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.maxed_nan_to_num", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.maxed_nan_to_num", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.calculate_ndvi", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.calculate_ndvi", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.update_normalizing_values"], ["", "def", "process_single_file", "(", "\n", "self", ",", "\n", "path_to_file", ":", "Path", ",", "\n", "nan_fill", ":", "float", ",", "\n", "max_nan_ratio", ":", "float", ",", "\n", "add_ndvi", ":", "bool", ",", "\n", "calculate_normalizing_dict", ":", "bool", ",", "\n", "start_date", ":", "datetime", ",", "\n", "days_per_timestep", ":", "int", ",", "\n", "is_test", ":", "bool", ",", "\n", ")", "->", "Optional", "[", "GeoWikiDataInstance", "]", ":", "\n", "        ", "r\"\"\"\n        Return a tuple of np.ndarrays of shape [n_timesteps, n_features] for\n        1) the anchor (labelled)\n        \"\"\"", "\n", "\n", "da", "=", "self", ".", "load_tif", "(", "\n", "path_to_file", ",", "days_per_timestep", "=", "days_per_timestep", ",", "start_date", "=", "start_date", "\n", ")", "\n", "\n", "# first, we find the label encompassed within the da", "\n", "\n", "min_lon", ",", "min_lat", "=", "float", "(", "da", ".", "x", ".", "min", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "min", "(", ")", ")", "\n", "max_lon", ",", "max_lat", "=", "float", "(", "da", ".", "x", ".", "max", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "max", "(", ")", ")", "\n", "overlap", "=", "self", ".", "labels", "[", "\n", "(", "\n", "(", "self", ".", "labels", ".", "lon", "<=", "max_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lon", ">=", "min_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", "<=", "max_lat", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", ">=", "min_lat", ")", "\n", ")", "\n", "]", "\n", "if", "len", "(", "overlap", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "label_lat", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lat", "\n", "label_lon", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lon", "\n", "\n", "# we turn the percentage into a fraction", "\n", "crop_probability", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "mean_sumcrop", "/", "100", "\n", "\n", "closest_lon", "=", "self", ".", "find_nearest", "(", "da", ".", "x", ",", "label_lon", ")", "\n", "closest_lat", "=", "self", ".", "find_nearest", "(", "da", ".", "y", ",", "label_lat", ")", "\n", "\n", "labelled_np", "=", "da", ".", "sel", "(", "x", "=", "closest_lon", ")", ".", "sel", "(", "y", "=", "closest_lat", ")", ".", "values", "\n", "\n", "# we randomly select another instance", "\n", "neighbour_lat", ",", "neighbour_lon", "=", "self", ".", "randomly_select_latlon", "(", "\n", "lat", "=", "da", ".", "y", ",", "lon", "=", "da", ".", "x", ",", "label_lat", "=", "label_lat", ",", "label_lon", "=", "label_lon", "\n", ")", "\n", "\n", "neighbour_np", "=", "da", ".", "sel", "(", "x", "=", "neighbour_lon", ")", ".", "sel", "(", "y", "=", "neighbour_lat", ")", ".", "values", "\n", "\n", "if", "add_ndvi", ":", "\n", "            ", "labelled_np", "=", "self", ".", "calculate_ndvi", "(", "labelled_np", ")", "\n", "neighbour_np", "=", "self", ".", "calculate_ndvi", "(", "neighbour_np", ")", "\n", "\n", "", "labelled_array", "=", "self", ".", "maxed_nan_to_num", "(", "\n", "labelled_np", ",", "nan", "=", "nan_fill", ",", "max_ratio", "=", "max_nan_ratio", "\n", ")", "\n", "# we don't check for the neighbouring array, to prevent unnecessarily removing", "\n", "# instances", "\n", "neighbouring_array", "=", "self", ".", "maxed_nan_to_num", "(", "neighbour_np", ",", "nan", "=", "nan_fill", ")", "\n", "\n", "if", "(", "not", "is_test", ")", "and", "calculate_normalizing_dict", ":", "\n", "# we won't use the neighbouring array for now, since tile2vec is", "\n", "# not really working", "\n", "            ", "self", ".", "update_normalizing_values", "(", "labelled_array", ")", "\n", "\n", "", "if", "labelled_array", "is", "not", "None", ":", "\n", "            ", "return", "GeoWikiDataInstance", "(", "\n", "label_lat", "=", "label_lat", ",", "\n", "label_lon", "=", "label_lon", ",", "\n", "crop_probability", "=", "crop_probability", ",", "\n", "instance_lat", "=", "closest_lat", ",", "\n", "instance_lon", "=", "closest_lon", ",", "\n", "labelled_array", "=", "labelled_array", ",", "\n", "neighbouring_array", "=", "neighbouring_array", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Skipping! Too many nan values\"", ")", "\n", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.togo.TogoEngineer.read_labels": [[25, 30], ["togo.exists", "geopandas.read_file"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "togo", "=", "data_folder", "/", "\"processed\"", "/", "TogoProcessor", ".", "dataset", "/", "\"data.geojson\"", "\n", "assert", "togo", ".", "exists", "(", ")", ",", "\"Togo processor must be run to load labels\"", "\n", "return", "geopandas", ".", "read_file", "(", "togo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.togo.TogoEngineer.process_single_file": [[31, 96], ["togo.TogoEngineer.load_tif", "togo.TogoEngineer.find_nearest", "togo.TogoEngineer.find_nearest", "togo.TogoEngineer.maxed_nan_to_num", "float", "float", "float", "float", "len", "togo.TogoEngineer.sel().sel", "togo.TogoEngineer.calculate_ndvi", "togo.TogoEngineer.update_normalizing_values", "togo.TogoDataInstance", "print", "togo.TogoEngineer.x.min", "togo.TogoEngineer.y.min", "togo.TogoEngineer.x.max", "togo.TogoEngineer.y.max", "togo.TogoEngineer.sel", "int"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.load_tif", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.find_nearest", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.find_nearest", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.maxed_nan_to_num", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.calculate_ndvi", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.update_normalizing_values"], ["", "def", "process_single_file", "(", "\n", "self", ",", "\n", "path_to_file", ":", "Path", ",", "\n", "nan_fill", ":", "float", ",", "\n", "max_nan_ratio", ":", "float", ",", "\n", "add_ndvi", ":", "bool", ",", "\n", "calculate_normalizing_dict", ":", "bool", ",", "\n", "start_date", ":", "datetime", ",", "\n", "days_per_timestep", ":", "int", ",", "\n", "is_test", ":", "bool", ",", "\n", ")", "->", "Optional", "[", "TogoDataInstance", "]", ":", "\n", "        ", "r\"\"\"\n        Return a tuple of np.ndarrays of shape [n_timesteps, n_features] for\n        1) the anchor (labelled)\n        \"\"\"", "\n", "\n", "da", "=", "self", ".", "load_tif", "(", "\n", "path_to_file", ",", "days_per_timestep", "=", "days_per_timestep", ",", "start_date", "=", "start_date", "\n", ")", "\n", "\n", "# first, we find the label encompassed within the da", "\n", "\n", "min_lon", ",", "min_lat", "=", "float", "(", "da", ".", "x", ".", "min", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "min", "(", ")", ")", "\n", "max_lon", ",", "max_lat", "=", "float", "(", "da", ".", "x", ".", "max", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "max", "(", ")", ")", "\n", "overlap", "=", "self", ".", "labels", "[", "\n", "(", "\n", "(", "self", ".", "labels", ".", "lon", "<=", "max_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lon", ">=", "min_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", "<=", "max_lat", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", ">=", "min_lat", ")", "\n", ")", "\n", "]", "\n", "if", "len", "(", "overlap", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "label_lat", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lat", "\n", "label_lon", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lon", "\n", "\n", "closest_lon", "=", "self", ".", "find_nearest", "(", "da", ".", "x", ",", "label_lon", ")", "\n", "closest_lat", "=", "self", ".", "find_nearest", "(", "da", ".", "y", ",", "label_lat", ")", "\n", "\n", "labelled_np", "=", "da", ".", "sel", "(", "x", "=", "closest_lon", ")", ".", "sel", "(", "y", "=", "closest_lat", ")", ".", "values", "\n", "\n", "if", "add_ndvi", ":", "\n", "            ", "labelled_np", "=", "self", ".", "calculate_ndvi", "(", "labelled_np", ")", "\n", "\n", "", "labelled_array", "=", "self", ".", "maxed_nan_to_num", "(", "\n", "labelled_np", ",", "nan", "=", "nan_fill", ",", "max_ratio", "=", "max_nan_ratio", "\n", ")", "\n", "\n", "if", "(", "not", "is_test", ")", "and", "calculate_normalizing_dict", ":", "\n", "            ", "self", ".", "update_normalizing_values", "(", "labelled_array", ")", "\n", "\n", "", "if", "labelled_array", "is", "not", "None", ":", "\n", "            ", "return", "TogoDataInstance", "(", "\n", "label_lat", "=", "label_lat", ",", "\n", "label_lon", "=", "label_lon", ",", "\n", "instance_lat", "=", "closest_lat", ",", "\n", "instance_lon", "=", "closest_lon", ",", "\n", "labelled_array", "=", "labelled_array", ",", "\n", "is_crop", "=", "int", "(", "overlap", ".", "iloc", "[", "0", "]", ".", "is_crop", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Skipping! Too many nan values\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.togo.TogoEvaluationEngineer.read_labels": [[103, 108], ["togo.exists", "pandas.read_csv"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "togo", "=", "data_folder", "/", "\"processed\"", "/", "TogoProcessor", ".", "evaluation_dataset", "/", "\"data.csv\"", "\n", "assert", "togo", ".", "exists", "(", ")", ",", "\"Togo processor must be run to load labels\"", "\n", "return", "pd", ".", "read_csv", "(", "togo", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.exporters.base.BaseExporter.__init__": [[19, 26], ["pathlib.Path", "base.BaseExporter.output_folder.mkdir"], "methods", ["None"], ["class", "BaseDataInstance", ":", "\n", "    ", "label_lat", ":", "float", "\n", "label_lon", ":", "float", "\n", "instance_lat", ":", "float", "\n", "instance_lon", ":", "float", "\n", "labelled_array", ":", "np", ".", "ndarray", "\n", "\n", "def", "isin", "(", "self", ",", "bounding_box", ":", "BoundingBox", ")", "->", "bool", ":", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.exporters.geowiki.GeoWikiExporter.download_file": [[25, 47], ["output_path.exists", "print", "urllib.request.urlretrieve", "filename.endswith", "url.split", "print", "print", "zipfile.ZipFile", "zip_file.extractall", "print", "output_path.unlink"], "methods", ["None"], ["dataset", "=", "GeoWikiExporter", ".", "dataset", "\n", "\n", "@", "staticmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "geowiki", "=", "data_folder", "/", "\"processed\"", "/", "GeoWikiExporter", ".", "dataset", "/", "\"data.nc\"", "\n", "assert", "geowiki", ".", "exists", "(", ")", ",", "\"GeoWiki processor must be run to load labels\"", "\n", "return", "xr", ".", "open_dataset", "(", "geowiki", ")", ".", "to_dataframe", "(", ")", ".", "dropna", "(", ")", ".", "reset_index", "(", ")", "\n", "\n", "", "def", "process_single_file", "(", "\n", "self", ",", "\n", "path_to_file", ":", "Path", ",", "\n", "nan_fill", ":", "float", ",", "\n", "max_nan_ratio", ":", "float", ",", "\n", "add_ndvi", ":", "bool", ",", "\n", "calculate_normalizing_dict", ":", "bool", ",", "\n", "start_date", ":", "datetime", ",", "\n", "days_per_timestep", ":", "int", ",", "\n", "is_test", ":", "bool", ",", "\n", ")", "->", "Optional", "[", "GeoWikiDataInstance", "]", ":", "\n", "        ", "r\"\"\"\n        Return a tuple of np.ndarrays of shape [n_timesteps, n_features] for\n        1) the anchor (labelled)\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.exporters.geowiki.GeoWikiExporter.export": [[48, 57], ["geowiki.GeoWikiExporter.download_file"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.exporters.geowiki.GeoWikiExporter.download_file"], ["\n", "da", "=", "self", ".", "load_tif", "(", "\n", "path_to_file", ",", "days_per_timestep", "=", "days_per_timestep", ",", "start_date", "=", "start_date", "\n", ")", "\n", "\n", "# first, we find the label encompassed within the da", "\n", "\n", "min_lon", ",", "min_lat", "=", "float", "(", "da", ".", "x", ".", "min", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "min", "(", ")", ")", "\n", "max_lon", ",", "max_lat", "=", "float", "(", "da", ".", "x", ".", "max", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "max", "(", ")", ")", "\n", "overlap", "=", "self", ".", "labels", "[", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.exporters.gdrive.GDriveExporter.__init__": [[24, 53], ["pathlib.Path", "base.BaseExporter.__init__", "token_path.exists", "googleapiclient.discovery.build", "token_path.open", "pickle.load", "InstalledAppFlow.from_client_secrets_file.run_local_server.refresh", "google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file", "google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file.run_local_server", "pickle.dump", "google.auth.transport.requests.Request"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.__init__"], ["def", "__init__", "(", "self", ",", "data_folder", ":", "Path", "=", "Path", "(", "\"data\"", ")", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_folder", ")", "\n", "\n", "assert", "(", "self", ".", "output_folder", "/", "\"credentials.json\"", ")", ".", "exists", "(", ")", ",", "(", "\n", "f\"Enable the google drive API at this link: \"", "\n", "f\"https://developers.google.com/drive/api/v3/quickstart/python \"", "\n", "f\"to use this class. Save the credentials.json at {self.output_folder}\"", "\n", ")", "\n", "\n", "# https://developers.google.com/drive/api/v3/quickstart/python", "\n", "creds", "=", "None", "\n", "token_path", "=", "self", ".", "output_folder", "/", "\"token.pickle\"", "\n", "if", "token_path", ".", "exists", "(", ")", ":", "\n", "            ", "with", "token_path", ".", "open", "(", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "creds", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "if", "not", "creds", "or", "not", "creds", ".", "valid", ":", "\n", "            ", "if", "creds", "and", "creds", ".", "expired", "and", "creds", ".", "refresh_token", ":", "\n", "                ", "creds", ".", "refresh", "(", "Request", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "flow", "=", "InstalledAppFlow", ".", "from_client_secrets_file", "(", "\n", "self", ".", "output_folder", "/", "\"credentials.json\"", ",", "self", ".", "scopes", "\n", ")", "\n", "creds", "=", "flow", ".", "run_local_server", "(", "port", "=", "0", ")", "\n", "# Save the credentials for the next run", "\n", "", "with", "(", "self", ".", "output_folder", "/", "\"token.pickle\"", ")", ".", "open", "(", "\"wb\"", ")", "as", "token", ":", "\n", "                ", "pickle", ".", "dump", "(", "creds", ",", "token", ")", "\n", "\n", "", "", "self", ".", "service", "=", "build", "(", "\"drive\"", ",", "\"v3\"", ",", "credentials", "=", "creds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.exporters.gdrive.GDriveExporter.export": [[54, 117], ["gdrive.GDriveExporter.service.files().list().execute", "gdrive.GDriveExporter.get", "file_info.extend", "gdrive.GDriveExporter.get", "print", "enumerate", "gdrive.GDriveExporter.service.files().list().execute", "gdrive.GDriveExporter.get", "file_info.extend", "gdrive.GDriveExporter.get", "print", "download_path.exists", "gdown.download", "gdrive.GDriveExporter.service.files().list", "print", "str", "gdrive.GDriveExporter.service.files().list", "len", "gdrive.GDriveExporter.service.files", "gdrive.GDriveExporter.service.files"], "methods", ["None"], ["", "def", "export", "(", "self", ",", "region_name", ":", "str", ",", "max_downloads", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Download data from Google Drive. This is useful when downloading data exported by\n        the regional exporter, as the filesizes can be large.\n\n        :param region_name: The name of the downloaded region. The exporter will search for\n            this string in the google drive files to filter which files to download\n        :param max_downloads: The max number of downloads. If None, all tiff files containing\n            region_name are downloaded\n        \"\"\"", "\n", "\n", "query", "=", "f'(fullText contains \"{region_name}\") and (mimeType = \"image/tiff\")'", "\n", "\n", "file_info", ":", "List", "[", "Dict", "]", "=", "[", "]", "\n", "\n", "results", "=", "(", "\n", "self", ".", "service", ".", "files", "(", ")", "\n", ".", "list", "(", "pageSize", "=", "10", ",", "q", "=", "query", ",", "fields", "=", "\"nextPageToken, files(id, name)\"", ",", ")", "\n", ".", "execute", "(", ")", "\n", ")", "\n", "items", "=", "results", ".", "get", "(", "\"files\"", ",", "[", "]", ")", "\n", "\n", "file_info", ".", "extend", "(", "items", ")", "\n", "\n", "next_page", "=", "results", ".", "get", "(", "\"nextPageToken\"", ",", "None", ")", "\n", "\n", "while", "next_page", "is", "not", "None", ":", "\n", "            ", "results", "=", "(", "\n", "self", ".", "service", ".", "files", "(", ")", "\n", ".", "list", "(", "\n", "pageSize", "=", "10", ",", "\n", "pageToken", "=", "next_page", ",", "\n", "# https://stackoverflow.com/questions/47402545/", "\n", "# google-drive-js-api-nextpagetoken-invalid", "\n", "q", "=", "query", ",", "\n", "fields", "=", "\"nextPageToken, files(id, name)\"", ",", "\n", ")", "\n", ".", "execute", "(", ")", "\n", ")", "\n", "\n", "items", "=", "results", ".", "get", "(", "\"files\"", ",", "[", "]", ")", "\n", "file_info", ".", "extend", "(", "items", ")", "\n", "\n", "next_page", "=", "results", ".", "get", "(", "\"nextPageToken\"", ",", "None", ")", "\n", "\n", "", "print", "(", "f\"Downloading {len(file_info)} files\"", ")", "\n", "\n", "for", "idx", ",", "individual_file", "in", "enumerate", "(", "file_info", ")", ":", "\n", "            ", "if", "(", "max_downloads", "is", "not", "None", ")", "and", "(", "idx", ">=", "max_downloads", ")", ":", "\n", "                ", "return", "None", "\n", "\n", "", "print", "(", "f\"Downloading {individual_file['name']}\"", ")", "\n", "\n", "url", "=", "f\"https://drive.google.com/uc?id={individual_file['id']}\"", "\n", "\n", "download_path", "=", "(", "\n", "self", ".", "raw_folder", "/", "RegionalExporter", ".", "dataset", "/", "individual_file", "[", "\"name\"", "]", "\n", ")", "\n", "if", "download_path", ".", "exists", "(", ")", ":", "\n", "                ", "print", "(", "f\"File already exists! Skipping\"", ")", "\n", "continue", "\n", "\n", "", "gdown", ".", "download", "(", "url", ",", "str", "(", "download_path", ")", ",", "quiet", "=", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.base.BaseSentinelExporter.__init__": [[22, 32], ["pathlib.Path", "base.BaseExporter.__init__", "base.BaseSentinelExporter.load_labels", "ee.Initialize", "print"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.__init__", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.load_labels"], ["instance_lat", ":", "float", "\n", "instance_lon", ":", "float", "\n", "labelled_array", ":", "np", ".", "ndarray", "\n", "\n", "def", "isin", "(", "self", ",", "bounding_box", ":", "BoundingBox", ")", "->", "bool", ":", "\n", "        ", "return", "(", "\n", "(", "self", ".", "instance_lon", "<=", "bounding_box", ".", "max_lon", ")", "\n", "&", "(", "self", ".", "instance_lon", ">=", "bounding_box", ".", "min_lon", ")", "\n", "&", "(", "self", ".", "instance_lat", "<=", "bounding_box", ".", "max_lat", ")", "\n", "&", "(", "self", ".", "instance_lat", ">=", "bounding_box", ".", "min_lat", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.base.BaseSentinelExporter.load_labels": [[33, 36], ["None"], "methods", ["None"], ["\n", "\n", "", "", "class", "BaseEngineer", "(", "ABC", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.base.BaseSentinelExporter._export_for_polygon": [[37, 83], ["print", "ee.ImageCollection", "ee.Image", "cloudfree.export", "datetime.timedelta", "print", "image_collection_list.append", "datetime.timedelta", "datetime.timedelta", "ee.ImageCollection.iterate", "str", "str", "cloudfree.get_single_image", "str", "str"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.export", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.get_single_image"], ["\n", "\n", "sentinel_dataset", ":", "str", "\n", "dataset", ":", "str", "\n", "\n", "# should be True if the dataset contains data which will", "\n", "# only be used for evaluation (e.g. the TogoEvaluation dataset)", "\n", "eval_only", ":", "bool", "=", "False", "\n", "\n", "def", "__init__", "(", "self", ",", "data_folder", ":", "Path", ")", "->", "None", ":", "\n", "        ", "set_seed", "(", ")", "\n", "self", ".", "data_folder", "=", "data_folder", "\n", "self", ".", "geospatial_files", "=", "self", ".", "get_geospatial_files", "(", "data_folder", ")", "\n", "self", ".", "labels", "=", "self", ".", "read_labels", "(", "data_folder", ")", "\n", "\n", "self", ".", "savedir", "=", "self", ".", "data_folder", "/", "\"features\"", "/", "self", ".", "dataset", "\n", "self", ".", "savedir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "self", ".", "normalizing_dict_interim", ":", "Dict", "[", "str", ",", "Union", "[", "np", ".", "ndarray", ",", "int", "]", "]", "=", "{", "\"n\"", ":", "0", "}", "\n", "\n", "", "def", "get_geospatial_files", "(", "self", ",", "data_folder", ":", "Path", ")", "->", "List", "[", "Path", "]", ":", "\n", "        ", "sentinel_files", "=", "data_folder", "/", "\"raw\"", "/", "self", ".", "sentinel_dataset", "\n", "return", "list", "(", "sentinel_files", ".", "glob", "(", "\"*.tif\"", ")", ")", "\n", "\n", "", "@", "staticmethod", "\n", "@", "abstractmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "@", "staticmethod", "\n", "def", "find_nearest", "(", "array", ",", "value", ")", ":", "\n", "        ", "array", "=", "np", ".", "asarray", "(", "array", ")", "\n", "idx", "=", "(", "np", ".", "abs", "(", "array", "-", "value", ")", ")", ".", "argmin", "(", ")", "\n", "return", "array", "[", "idx", "]", "\n", "\n", "", "@", "staticmethod", "\n", "def", "randomly_select_latlon", "(", "\n", "lat", ":", "np", ".", "ndarray", ",", "lon", ":", "np", ".", "ndarray", ",", "label_lat", ":", "float", ",", "label_lon", ":", "float", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "\n", "        ", "lats", "=", "np", ".", "random", ".", "choice", "(", "lat", ",", "size", "=", "2", ",", "replace", "=", "False", ")", "\n", "lons", "=", "np", ".", "random", ".", "choice", "(", "lon", ",", "size", "=", "2", ",", "replace", "=", "False", ")", "\n", "\n", "if", "(", "lats", "[", "0", "]", "!=", "label_lat", ")", "or", "(", "lons", "[", "0", "]", "!=", "label_lon", ")", ":", "\n", "            ", "return", "lats", "[", "0", "]", ",", "lons", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.region.RegionalExporter.load_labels": [[19, 23], ["pandas.DataFrame"], "methods", ["None"], ["def", "load_labels", "(", "self", ")", "->", "pd", ".", "DataFrame", ":", "\n", "# We don't need any labels for this exporter,", "\n", "# so we can return an empty dataframe", "\n", "        ", "return", "pd", ".", "DataFrame", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.region.RegionalExporter.export_for_region": [[24, 81], ["utils.bounding_box_to_earth_engine_bounding_box", "utils.bounding_box_to_earth_engine_bounding_box.to_polygons", "enumerate", "utils.bounding_box_to_earth_engine_bounding_box.RegionalExporter._export_for_polygon", "datetime.timedelta", "utils.bounding_box_to_earth_engine_bounding_box.RegionalExporter._export_for_polygon", "utils.bounding_box_to_earth_engine_bounding_box.to_ee_polygon"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.bounding_box_to_earth_engine_bounding_box", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.EEBoundingBox.to_polygons", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.base.BaseSentinelExporter._export_for_polygon", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.base.BaseSentinelExporter._export_for_polygon", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.EEBoundingBox.to_ee_polygon"], ["", "def", "export_for_region", "(", "\n", "self", ",", "\n", "region_name", ":", "str", ",", "\n", "end_date", ":", "date", ",", "\n", "days_per_timestep", ":", "int", "=", "30", ",", "\n", "num_timesteps", ":", "int", "=", "12", ",", "\n", "checkpoint", ":", "bool", "=", "True", ",", "\n", "monitor", ":", "bool", "=", "True", ",", "\n", "metres_per_polygon", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"\n        Run the regional exporter. For each label, the exporter will export\n\n        data from (end_date - timedelta(days=days_per_timestep * num_timesteps)) to end_date\n\n        where each timestep consists of a mosaic of all available images within the\n        days_per_timestep of that timestep.\n\n        :param region_name: The name of the region to export. This must be defined in\n            src.utils.STR2BB\n        :param end_date: The end date of the data export\n        :param days_per_timestep: The number of days of data to use for each mosaiced image.\n        :param num_timesteps: The number of timesteps to export\n        :param checkpoint: Whether or not to check in self.data_folder to see if the file has\n            already been exported. If it has, skip it\n        :param monitor: Whether to monitor each task until it has been run\n        :param metres_per_polygon: Whether to split the export of a large region into smaller\n            boxes of (max) area metres_per_polygon * metres_per_polygon. It is better to instead\n            split the area once it has been exported\n        \"\"\"", "\n", "start_date", "=", "end_date", "-", "num_timesteps", "*", "timedelta", "(", "days", "=", "days_per_timestep", ")", "\n", "\n", "region", "=", "bounding_box_to_earth_engine_bounding_box", "(", "STR2BB", "[", "region_name", "]", ")", "\n", "\n", "if", "metres_per_polygon", "is", "not", "None", ":", "\n", "\n", "            ", "regions", "=", "region", ".", "to_polygons", "(", "metres_per_patch", "=", "metres_per_polygon", ")", "\n", "\n", "for", "idx", ",", "region", "in", "enumerate", "(", "regions", ")", ":", "\n", "                ", "self", ".", "_export_for_polygon", "(", "\n", "polygon", "=", "region", ",", "\n", "polygon_identifier", "=", "f\"{idx}-{region_name}\"", ",", "\n", "start_date", "=", "start_date", ",", "\n", "end_date", "=", "end_date", ",", "\n", "days_per_timestep", "=", "days_per_timestep", ",", "\n", "checkpoint", "=", "checkpoint", ",", "\n", "monitor", "=", "monitor", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_export_for_polygon", "(", "\n", "polygon", "=", "region", ".", "to_ee_polygon", "(", ")", ",", "\n", "polygon_identifier", "=", "region_name", ",", "\n", "start_date", "=", "start_date", ",", "\n", "end_date", "=", "end_date", ",", "\n", "days_per_timestep", "=", "days_per_timestep", ",", "\n", "checkpoint", "=", "checkpoint", ",", "\n", "monitor", "=", "monitor", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.get_single_image": [[51, 77], ["ee.DateRange", "ee.DateRange().start", "ee.DateRange().end", "ee.ImageCollection().filterDate().filterBounds", "imgC.map().map().map().map().map().sort.map().map().map().map().map().sort", "cloudfree.mergeCollection", "cloudfree.date_to_string", "cloudfree.date_to_string", "ee.DateRange", "ee.DateRange", "ee.ImageCollection().filterDate", "imgC.map().map().map().map().map().sort.map().map().map().map().map", "ee.ImageCollection", "imgC.map().map().map().map().map().sort.map().map().map().map", "imgC.map().map().map().map().map().sort.map().map().map", "imgC.map().map().map().map().map().sort.map().map", "imgC.map().map().map().map().map().sort.map", "x.set", "x.clip"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.mergeCollection", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.date_to_string", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.date_to_string"], ["def", "get_single_image", "(", "region", ":", "ee", ".", "Geometry", ",", "start_date", ":", "date", ",", "end_date", ":", "date", ")", "->", "ee", ".", "Image", ":", "\n", "\n", "    ", "image_collection", "=", "\"COPERNICUS/S2\"", "\n", "\n", "dates", "=", "ee", ".", "DateRange", "(", "date_to_string", "(", "start_date", ")", ",", "date_to_string", "(", "end_date", ")", ",", ")", "\n", "\n", "startDate", "=", "ee", ".", "DateRange", "(", "dates", ")", ".", "start", "(", ")", "\n", "endDate", "=", "ee", ".", "DateRange", "(", "dates", ")", ".", "end", "(", ")", "\n", "imgC", "=", "(", "\n", "ee", ".", "ImageCollection", "(", "image_collection", ")", "\n", ".", "filterDate", "(", "startDate", ",", "endDate", ")", "\n", ".", "filterBounds", "(", "region", ")", "\n", ")", "\n", "\n", "imgC", "=", "(", "\n", "imgC", ".", "map", "(", "lambda", "x", ":", "x", ".", "clip", "(", "region", ")", ")", "\n", ".", "map", "(", "lambda", "x", ":", "x", ".", "set", "(", "\"ROI\"", ",", "region", ")", ")", "\n", ".", "map", "(", "computeS2CloudScore", ")", "\n", ".", "map", "(", "projectShadows", ")", "\n", ".", "map", "(", "computeQualityScore", ")", "\n", ".", "sort", "(", "\"CLOUDY_PIXEL_PERCENTAGE\"", ")", "\n", ")", "\n", "\n", "cloudFree", "=", "mergeCollection", "(", "imgC", ")", "\n", "\n", "return", "cloudFree", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.combine_bands": [[79, 91], ["ee.Image", "current.select.select", "ee.Algorithms.If", "ee.Algorithms.IsEqual", "ee.Image.addBands", "ee.Image"], "function", ["None"], ["", "def", "combine_bands", "(", "current", ",", "previous", ")", ":", "\n", "# Transforms an Image Collection with 1 band per Image into a single Image with items as bands", "\n", "# Author: Jamie Vleeshouwer", "\n", "\n", "# Rename the band", "\n", "    ", "previous", "=", "ee", ".", "Image", "(", "previous", ")", "\n", "current", "=", "current", ".", "select", "(", "BANDS", ")", "\n", "# Append it to the result (Note: only return current item on first element/iteration)", "\n", "return", "ee", ".", "Algorithms", ".", "If", "(", "\n", "ee", ".", "Algorithms", ".", "IsEqual", "(", "previous", ",", "None", ")", ",", "\n", "current", ",", "\n", "previous", ".", "addBands", "(", "ee", ".", "Image", "(", "current", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.export": [[94, 118], ["ee.batch.Export.image", "image.clip", "ee.batch.Export.image.start", "cloudfree.monitor_task", "print"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.monitor_task"], ["", "def", "export", "(", "\n", "image", ":", "ee", ".", "Image", ",", "\n", "region", ":", "ee", ".", "Geometry", ",", "\n", "filename", ":", "str", ",", "\n", "drive_folder", ":", "str", ",", "\n", "monitor", ":", "bool", "=", "False", ",", "\n", ")", "->", "ee", ".", "batch", ".", "Export", ":", "\n", "\n", "    ", "task", "=", "ee", ".", "batch", ".", "Export", ".", "image", "(", "\n", "image", ".", "clip", "(", "region", ")", ",", "\n", "filename", ",", "\n", "{", "\"scale\"", ":", "10", ",", "\"region\"", ":", "region", ",", "\"maxPixels\"", ":", "1e13", ",", "\"driveFolder\"", ":", "drive_folder", "}", ",", "\n", ")", "\n", "\n", "try", ":", "\n", "        ", "task", ".", "start", "(", ")", "\n", "", "except", "ee", ".", "ee_exception", ".", "EEException", "as", "e", ":", "\n", "        ", "print", "(", "f\"Task not started! Got exception {e}\"", ")", "\n", "return", "task", "\n", "\n", "", "if", "monitor", ":", "\n", "        ", "monitor_task", "(", "task", ")", "\n", "\n", "", "return", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.date_to_string": [[120, 126], ["isinstance", "isinstance", "input_date.strftime"], "function", ["None"], ["", "def", "date_to_string", "(", "input_date", ":", "Union", "[", "date", ",", "str", "]", ")", "->", "str", ":", "\n", "    ", "if", "isinstance", "(", "input_date", ",", "str", ")", ":", "\n", "        ", "return", "input_date", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "input_date", ",", "date", ")", "\n", "return", "input_date", ".", "strftime", "(", "\"%Y-%m-%d\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.monitor_task": [[128, 132], ["print", "task.status", "task.status"], "function", ["None"], ["", "", "def", "monitor_task", "(", "task", ":", "ee", ".", "batch", ".", "Export", ")", "->", "None", ":", "\n", "\n", "    ", "while", "task", ".", "status", "(", ")", "[", "\"state\"", "]", "in", "[", "\"READY\"", ",", "\"RUNNING\"", "]", ":", "\n", "        ", "print", "(", "task", ".", "status", "(", ")", ")", "\n", "# print(f\"Running: {task.status()['state']}\")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.rescale": [[135, 140], ["img.expression().subtract().divide", "img.expression().subtract", "img.expression"], "function", ["None"], ["", "", "def", "rescale", "(", "img", ",", "exp", ",", "thresholds", ")", ":", "\n", "    ", "return", "(", "\n", "img", ".", "expression", "(", "exp", ",", "{", "\"img\"", ":", "img", "}", ")", "\n", ".", "subtract", "(", "thresholds", "[", "0", "]", ")", "\n", ".", "divide", "(", "thresholds", "[", "1", "]", "-", "thresholds", "[", "0", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.computeQualityScore": [[143, 153], ["img.select().max", "score.multiply.reproject().reduceNeighborhood", "score.multiply.multiply", "img.addBands", "img.select", "score.multiply.rename", "img.select", "score.multiply.reproject", "ee.Reducer.mean", "ee.Kernel.square"], "function", ["None"], ["", "def", "computeQualityScore", "(", "img", ")", ":", "\n", "    ", "score", "=", "img", ".", "select", "(", "[", "\"cloudScore\"", "]", ")", ".", "max", "(", "img", ".", "select", "(", "[", "\"shadowScore\"", "]", ")", ")", "\n", "\n", "score", "=", "score", ".", "reproject", "(", "\"EPSG:4326\"", ",", "None", ",", "20", ")", ".", "reduceNeighborhood", "(", "\n", "reducer", "=", "ee", ".", "Reducer", ".", "mean", "(", ")", ",", "kernel", "=", "ee", ".", "Kernel", ".", "square", "(", "5", ")", ",", "optimization", "=", "\"boxcar\"", "\n", ")", "\n", "\n", "score", "=", "score", ".", "multiply", "(", "-", "1", ")", "\n", "\n", "return", "img", ".", "addBands", "(", "score", ".", "rename", "(", "\"cloudShadowScore\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.computeS2CloudScore": [[155, 209], ["img.select().divide", "toa.addBands.addBands", "ee.Image", "score.reduceNeighborhood.min", "score.reduceNeighborhood.min", "score.reduceNeighborhood.min", "score.reduceNeighborhood.min", "img.normalizedDifference", "score.reduceNeighborhood.min", "img.normalizedDifference", "score.reduceNeighborhood.min", "score.reduceNeighborhood.max", "score.reduceNeighborhood.reduceNeighborhood", "img.addBands", "img.select", "cloudfree.rescale", "cloudfree.rescale", "cloudfree.rescale", "cloudfree.rescale", "cloudfree.rescale", "cloudfree.rescale", "ee.Image", "score.reduceNeighborhood.rename", "img.select", "ee.Reducer.mean", "ee.Kernel.square"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.rescale", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.rescale", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.rescale", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.rescale", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.rescale", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.rescale"], ["", "def", "computeS2CloudScore", "(", "img", ")", ":", "\n", "    ", "toa", "=", "img", ".", "select", "(", "\n", "[", "\n", "\"B1\"", ",", "\n", "\"B2\"", ",", "\n", "\"B3\"", ",", "\n", "\"B4\"", ",", "\n", "\"B5\"", ",", "\n", "\"B6\"", ",", "\n", "\"B7\"", ",", "\n", "\"B8\"", ",", "\n", "\"B8A\"", ",", "\n", "\"B9\"", ",", "\n", "\"B10\"", ",", "\n", "\"B11\"", ",", "\n", "\"B12\"", ",", "\n", "]", "\n", ")", ".", "divide", "(", "10000", ")", "\n", "\n", "toa", "=", "toa", ".", "addBands", "(", "img", ".", "select", "(", "[", "\"QA60\"", "]", ")", ")", "\n", "\n", "# ['QA60', 'B1','B2',    'B3',    'B4',   'B5','B6','B7', 'B8','  B8A',", "\n", "#  'B9',          'B10', 'B11','B12']", "\n", "# ['QA60','cb', 'blue', 'green', 'red', 're1','re2','re3','nir', 'nir2',", "\n", "#  'waterVapor', 'cirrus','swir1', 'swir2']);", "\n", "\n", "# Compute several indicators of cloudyness and take the minimum of them.", "\n", "score", "=", "ee", ".", "Image", "(", "1", ")", "\n", "\n", "# Clouds are reasonably bright in the blue and cirrus bands.", "\n", "score", "=", "score", ".", "min", "(", "rescale", "(", "toa", ",", "\"img.B2\"", ",", "[", "0.1", ",", "0.5", "]", ")", ")", "\n", "score", "=", "score", ".", "min", "(", "rescale", "(", "toa", ",", "\"img.B1\"", ",", "[", "0.1", ",", "0.3", "]", ")", ")", "\n", "score", "=", "score", ".", "min", "(", "rescale", "(", "toa", ",", "\"img.B1 + img.B10\"", ",", "[", "0.15", ",", "0.2", "]", ")", ")", "\n", "\n", "# Clouds are reasonably bright in all visible bands.", "\n", "score", "=", "score", ".", "min", "(", "rescale", "(", "toa", ",", "\"img.B4 + img.B3 + img.B2\"", ",", "[", "0.2", ",", "0.8", "]", ")", ")", "\n", "\n", "# Clouds are moist", "\n", "ndmi", "=", "img", ".", "normalizedDifference", "(", "[", "\"B8\"", ",", "\"B11\"", "]", ")", "\n", "score", "=", "score", ".", "min", "(", "rescale", "(", "ndmi", ",", "\"img\"", ",", "[", "-", "0.1", ",", "0.1", "]", ")", ")", "\n", "\n", "# However, clouds are not snow.", "\n", "ndsi", "=", "img", ".", "normalizedDifference", "(", "[", "\"B3\"", ",", "\"B11\"", "]", ")", "\n", "score", "=", "score", ".", "min", "(", "rescale", "(", "ndsi", ",", "\"img\"", ",", "[", "0.8", ",", "0.6", "]", ")", ")", "\n", "\n", "# Clip the lower end of the score", "\n", "score", "=", "score", ".", "max", "(", "ee", ".", "Image", "(", "0.001", ")", ")", "\n", "\n", "# score = score.multiply(dilated)", "\n", "score", "=", "score", ".", "reduceNeighborhood", "(", "\n", "reducer", "=", "ee", ".", "Reducer", ".", "mean", "(", ")", ",", "kernel", "=", "ee", ".", "Kernel", ".", "square", "(", "5", ")", "\n", ")", "\n", "\n", "return", "img", ".", "addBands", "(", "score", ".", "rename", "(", "\"cloudScore\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.projectShadows": [[211, 267], ["image.addBands.get", "image.addBands.get", "image.addBands.select().gt", "image.addBands.select().divide().reduce", "image.addBands.normalizedDifference", "image.normalizedDifference.lt", "image.select().divide().reduce.lt", "darkPixelsImg.lt.And", "darkPixelMask.And.And", "ee.Number().add().multiply().divide", "ee.Number().multiply().divide", "ee.List().map", "ee.ImageCollection.fromImages", "ee.ImageCollection.fromImages.mean", "cloudfree.dilatedErossion", "dilatedErossion.reduceNeighborhood", "image.addBands.addBands", "ee.Reducer.sum", "ndvi.lt.Not", "image.select().gt.Not", "ee.Number", "ee.Number().multiply().divide.tan().multiply", "ee.Number().add().multiply().divide.sin().multiply().multiply", "ee.Number().add().multiply().divide.cos().multiply().multiply", "image.addBands.select().displace", "dilatedErossion.multiply", "shadowMask.reduceNeighborhood.rename", "image.addBands.select", "image.addBands.select().divide", "ee.Number().add().multiply", "ee.Number().multiply", "ee.Image.constant().addBands", "ee.List", "ee.Number().multiply().divide.tan", "ee.Number().add().multiply().divide.sin().multiply", "ee.Number().add().multiply().divide.cos().multiply", "image.addBands.select", "ee.Image.constant", "ee.Reducer.max", "ee.Kernel.square", "image.addBands.select", "ee.Number().add", "ee.Number", "ee.Image.constant", "ee.Number().add().multiply().divide.sin", "ee.Number().add().multiply().divide.cos", "ee.Number"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.dilatedErossion"], ["", "def", "projectShadows", "(", "image", ")", ":", "\n", "    ", "meanAzimuth", "=", "image", ".", "get", "(", "\"MEAN_SOLAR_AZIMUTH_ANGLE\"", ")", "\n", "meanZenith", "=", "image", ".", "get", "(", "\"MEAN_SOLAR_ZENITH_ANGLE\"", ")", "\n", "\n", "cloudMask", "=", "image", ".", "select", "(", "[", "\"cloudScore\"", "]", ")", ".", "gt", "(", "cloudThresh", ")", "\n", "\n", "# Find dark pixels", "\n", "darkPixelsImg", "=", "(", "\n", "image", ".", "select", "(", "[", "\"B8\"", ",", "\"B11\"", ",", "\"B12\"", "]", ")", ".", "divide", "(", "10000", ")", ".", "reduce", "(", "ee", ".", "Reducer", ".", "sum", "(", ")", ")", "\n", ")", "\n", "\n", "ndvi", "=", "image", ".", "normalizedDifference", "(", "[", "\"B8\"", ",", "\"B4\"", "]", ")", "\n", "waterMask", "=", "ndvi", ".", "lt", "(", "ndviThresh", ")", "\n", "\n", "darkPixels", "=", "darkPixelsImg", ".", "lt", "(", "irSumThresh", ")", "\n", "\n", "# Get the mask of pixels which might be shadows excluding water", "\n", "darkPixelMask", "=", "darkPixels", ".", "And", "(", "waterMask", ".", "Not", "(", ")", ")", "\n", "darkPixelMask", "=", "darkPixelMask", ".", "And", "(", "cloudMask", ".", "Not", "(", ")", ")", "\n", "\n", "# Find where cloud shadows should be based on solar geometry", "\n", "# Convert to radians", "\n", "azR", "=", "ee", ".", "Number", "(", "meanAzimuth", ")", ".", "add", "(", "180", ")", ".", "multiply", "(", "math", ".", "pi", ")", ".", "divide", "(", "180.0", ")", "\n", "zenR", "=", "ee", ".", "Number", "(", "meanZenith", ")", ".", "multiply", "(", "math", ".", "pi", ")", ".", "divide", "(", "180.0", ")", "\n", "\n", "# Find the shadows", "\n", "def", "getShadows", "(", "cloudHeight", ")", ":", "\n", "        ", "cloudHeight", "=", "ee", ".", "Number", "(", "cloudHeight", ")", "\n", "\n", "shadowCastedDistance", "=", "zenR", ".", "tan", "(", ")", ".", "multiply", "(", "\n", "cloudHeight", "\n", ")", "# Distance shadow is cast", "\n", "x", "=", "(", "\n", "azR", ".", "sin", "(", ")", ".", "multiply", "(", "shadowCastedDistance", ")", ".", "multiply", "(", "-", "1", ")", "\n", ")", "# /X distance of shadow", "\n", "y", "=", "(", "\n", "azR", ".", "cos", "(", ")", ".", "multiply", "(", "shadowCastedDistance", ")", ".", "multiply", "(", "-", "1", ")", "\n", ")", "# Y distance of shadow", "\n", "return", "image", ".", "select", "(", "[", "\"cloudScore\"", "]", ")", ".", "displace", "(", "\n", "ee", ".", "Image", ".", "constant", "(", "x", ")", ".", "addBands", "(", "ee", ".", "Image", ".", "constant", "(", "y", ")", ")", "\n", ")", "\n", "\n", "", "shadows", "=", "ee", ".", "List", "(", "cloudHeights", ")", ".", "map", "(", "getShadows", ")", "\n", "shadowMasks", "=", "ee", ".", "ImageCollection", ".", "fromImages", "(", "shadows", ")", "\n", "shadowMask", "=", "shadowMasks", ".", "mean", "(", ")", "\n", "\n", "# Create shadow mask", "\n", "shadowMask", "=", "dilatedErossion", "(", "shadowMask", ".", "multiply", "(", "darkPixelMask", ")", ")", "\n", "\n", "shadowScore", "=", "shadowMask", ".", "reduceNeighborhood", "(", "\n", "**", "{", "\"reducer\"", ":", "ee", ".", "Reducer", ".", "max", "(", ")", ",", "\"kernel\"", ":", "ee", ".", "Kernel", ".", "square", "(", "1", ")", "}", "\n", ")", "\n", "\n", "image", "=", "image", ".", "addBands", "(", "shadowScore", ".", "rename", "(", "[", "\"shadowScore\"", "]", ")", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.dilatedErossion": [[269, 291], ["dilate.reproject", "cloudfree.dilatedErossion.erode"], "function", ["None"], ["", "def", "dilatedErossion", "(", "score", ")", ":", "\n", "# Perform opening on the cloud scores", "\n", "\n", "    ", "def", "erode", "(", "img", ",", "distance", ")", ":", "\n", "        ", "d", "=", "(", "\n", "img", ".", "Not", "(", ")", "\n", ".", "unmask", "(", "1", ")", "\n", ".", "fastDistanceTransform", "(", "30", ")", "\n", ".", "sqrt", "(", ")", "\n", ".", "multiply", "(", "ee", ".", "Image", ".", "pixelArea", "(", ")", ".", "sqrt", "(", ")", ")", "\n", ")", "\n", "return", "img", ".", "updateMask", "(", "d", ".", "gt", "(", "distance", ")", ")", "\n", "\n", "", "def", "dilate", "(", "img", ",", "distance", ")", ":", "\n", "        ", "d", "=", "img", ".", "fastDistanceTransform", "(", "30", ")", ".", "sqrt", "(", ")", ".", "multiply", "(", "ee", ".", "Image", ".", "pixelArea", "(", ")", ".", "sqrt", "(", ")", ")", "\n", "return", "d", ".", "lt", "(", "distance", ")", "\n", "\n", "", "score", "=", "score", ".", "reproject", "(", "\"EPSG:4326\"", ",", "None", ",", "20", ")", "\n", "score", "=", "erode", "(", "score", ",", "erodePixels", ")", "\n", "score", "=", "dilate", "(", "score", ",", "dilationPixels", ")", "\n", "\n", "return", "score", ".", "reproject", "(", "\"EPSG:4326\"", ",", "None", ",", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.mergeCollection": [[293, 296], ["imgC.qualityMosaic"], "function", ["None"], ["", "def", "mergeCollection", "(", "imgC", ")", ":", "\n", "    ", "filtered", "=", "imgC", ".", "qualityMosaic", "(", "\"cloudShadowScore\"", ")", "\n", "return", "filtered", "\n", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.geowiki.GeoWikiSentinelExporter.load_labels": [[17, 23], ["geowiki.exists", "xarray.open_dataset().to_dataframe().dropna().reset_index", "xarray.open_dataset().to_dataframe().dropna", "xarray.open_dataset().to_dataframe", "xarray.open_dataset"], "methods", ["None"], ["\n", "    ", "crop_probability", ":", "float", "\n", "neighbouring_array", ":", "np", ".", "ndarray", "\n", "\n", "\n", "", "class", "GeoWikiEngineer", "(", "BaseEngineer", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.geowiki.GeoWikiSentinelExporter.labels_to_bounding_boxes": [[24, 43], ["tqdm.tqdm.tqdm", "geowiki.GeoWikiSentinelExporter.labels.iterrows", "output.append", "utils.bounding_box_from_centre", "len"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.bounding_box_from_centre"], ["    ", "sentinel_dataset", "=", "GeoWikiSentinelExporter", ".", "dataset", "\n", "dataset", "=", "GeoWikiExporter", ".", "dataset", "\n", "\n", "@", "staticmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "geowiki", "=", "data_folder", "/", "\"processed\"", "/", "GeoWikiExporter", ".", "dataset", "/", "\"data.nc\"", "\n", "assert", "geowiki", ".", "exists", "(", ")", ",", "\"GeoWiki processor must be run to load labels\"", "\n", "return", "xr", ".", "open_dataset", "(", "geowiki", ")", ".", "to_dataframe", "(", ")", ".", "dropna", "(", ")", ".", "reset_index", "(", ")", "\n", "\n", "", "def", "process_single_file", "(", "\n", "self", ",", "\n", "path_to_file", ":", "Path", ",", "\n", "nan_fill", ":", "float", ",", "\n", "max_nan_ratio", ":", "float", ",", "\n", "add_ndvi", ":", "bool", ",", "\n", "calculate_normalizing_dict", ":", "bool", ",", "\n", "start_date", ":", "datetime", ",", "\n", "days_per_timestep", ":", "int", ",", "\n", "is_test", ":", "bool", ",", "\n", ")", "->", "Optional", "[", "GeoWikiDataInstance", "]", ":", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.geowiki.GeoWikiSentinelExporter.export_for_labels": [[44, 89], ["datetime.date", "datetime.date", "geowiki.GeoWikiSentinelExporter.labels_to_bounding_boxes", "enumerate", "geowiki.GeoWikiSentinelExporter._export_for_polygon", "bounding_box.to_ee_polygon"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.labels_to_bounding_boxes", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.base.BaseSentinelExporter._export_for_polygon", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.EEBoundingBox.to_ee_polygon"], ["        ", "r\"\"\"\n        Return a tuple of np.ndarrays of shape [n_timesteps, n_features] for\n        1) the anchor (labelled)\n        \"\"\"", "\n", "\n", "da", "=", "self", ".", "load_tif", "(", "\n", "path_to_file", ",", "days_per_timestep", "=", "days_per_timestep", ",", "start_date", "=", "start_date", "\n", ")", "\n", "\n", "# first, we find the label encompassed within the da", "\n", "\n", "min_lon", ",", "min_lat", "=", "float", "(", "da", ".", "x", ".", "min", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "min", "(", ")", ")", "\n", "max_lon", ",", "max_lat", "=", "float", "(", "da", ".", "x", ".", "max", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "max", "(", ")", ")", "\n", "overlap", "=", "self", ".", "labels", "[", "\n", "(", "\n", "(", "self", ".", "labels", ".", "lon", "<=", "max_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lon", ">=", "min_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", "<=", "max_lat", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", ">=", "min_lat", ")", "\n", ")", "\n", "]", "\n", "if", "len", "(", "overlap", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "label_lat", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lat", "\n", "label_lon", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lon", "\n", "\n", "# we turn the percentage into a fraction", "\n", "crop_probability", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "mean_sumcrop", "/", "100", "\n", "\n", "closest_lon", "=", "self", ".", "find_nearest", "(", "da", ".", "x", ",", "label_lon", ")", "\n", "closest_lat", "=", "self", ".", "find_nearest", "(", "da", ".", "y", ",", "label_lat", ")", "\n", "\n", "labelled_np", "=", "da", ".", "sel", "(", "x", "=", "closest_lon", ")", ".", "sel", "(", "y", "=", "closest_lat", ")", ".", "values", "\n", "\n", "# we randomly select another instance", "\n", "neighbour_lat", ",", "neighbour_lon", "=", "self", ".", "randomly_select_latlon", "(", "\n", "lat", "=", "da", ".", "y", ",", "lon", "=", "da", ".", "x", ",", "label_lat", "=", "label_lat", ",", "label_lon", "=", "label_lon", "\n", ")", "\n", "\n", "neighbour_np", "=", "da", ".", "sel", "(", "x", "=", "neighbour_lon", ")", ".", "sel", "(", "y", "=", "neighbour_lat", ")", ".", "values", "\n", "\n", "if", "add_ndvi", ":", "\n", "            ", "labelled_np", "=", "self", ".", "calculate_ndvi", "(", "labelled_np", ")", "\n", "neighbour_np", "=", "self", ".", "calculate_ndvi", "(", "neighbour_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.EEBoundingBox.to_ee_polygon": [[36, 44], ["ee.Geometry.Polygon"], "methods", ["None"], ["def", "to_ee_polygon", "(", "self", ")", "->", "ee", ".", "Geometry", ".", "Polygon", ":", "\n", "        ", "return", "ee", ".", "Geometry", ".", "Polygon", "(", "\n", "[", "\n", "[", "\n", "[", "self", ".", "min_lon", ",", "self", ".", "min_lat", "]", ",", "\n", "[", "self", ".", "min_lon", ",", "self", ".", "max_lat", "]", ",", "\n", "[", "self", ".", "max_lon", ",", "self", ".", "max_lat", "]", ",", "\n", "[", "self", ".", "max_lon", ",", "self", ".", "min_lat", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.EEBoundingBox.to_metres": [[48, 60], ["utils.metre_per_degree"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.metre_per_degree"], ["", "def", "to_metres", "(", "self", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "        ", "r\"\"\"\n        :return: [lat metres, lon metres]\n        \"\"\"", "\n", "# https://gis.stackexchange.com/questions/75528/understanding-terms-in-length-of-degree-formula", "\n", "mid_lat", "=", "(", "self", ".", "min_lat", "+", "self", ".", "max_lat", ")", "/", "2.0", "\n", "m_per_deg_lat", ",", "m_per_deg_lon", "=", "metre_per_degree", "(", "mid_lat", ")", "\n", "\n", "delta_lat", "=", "self", ".", "max_lat", "-", "self", ".", "min_lat", "\n", "delta_lon", "=", "self", ".", "max_lon", "-", "self", ".", "min_lon", "\n", "\n", "return", "delta_lat", "*", "m_per_deg_lat", ",", "delta_lon", "*", "m_per_deg_lon", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.EEBoundingBox.to_polygons": [[61, 95], ["utils.EEBoundingBox.to_metres", "int", "int", "print", "output_polygons.append", "ee.Geometry.Polygon"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.EEBoundingBox.to_metres"], ["", "def", "to_polygons", "(", "self", ",", "metres_per_patch", ":", "int", "=", "3300", ")", "->", "List", "[", "ee", ".", "Geometry", ".", "Polygon", "]", ":", "\n", "\n", "        ", "lat_metres", ",", "lon_metres", "=", "self", ".", "to_metres", "(", ")", "\n", "\n", "num_cols", "=", "int", "(", "lon_metres", "/", "metres_per_patch", ")", "\n", "num_rows", "=", "int", "(", "lat_metres", "/", "metres_per_patch", ")", "\n", "\n", "print", "(", "f\"Splitting into {num_cols} columns and {num_rows} rows\"", ")", "\n", "\n", "lon_size", "=", "(", "self", ".", "max_lon", "-", "self", ".", "min_lon", ")", "/", "num_cols", "\n", "lat_size", "=", "(", "self", ".", "max_lat", "-", "self", ".", "min_lat", ")", "/", "num_rows", "\n", "\n", "output_polygons", ":", "List", "[", "ee", ".", "Geometry", ".", "Polygon", "]", "=", "[", "]", "\n", "\n", "cur_lon", "=", "self", ".", "min_lon", "\n", "while", "cur_lon", "<", "self", ".", "max_lon", ":", "\n", "            ", "cur_lat", "=", "self", ".", "min_lat", "\n", "while", "cur_lat", "<", "self", ".", "max_lat", ":", "\n", "                ", "output_polygons", ".", "append", "(", "\n", "ee", ".", "Geometry", ".", "Polygon", "(", "\n", "[", "\n", "[", "\n", "[", "cur_lon", ",", "cur_lat", "]", ",", "\n", "[", "cur_lon", ",", "cur_lat", "+", "lat_size", "]", ",", "\n", "[", "cur_lon", "+", "lon_size", ",", "cur_lat", "+", "lat_size", "]", ",", "\n", "[", "cur_lon", "+", "lon_size", ",", "cur_lat", "]", ",", "\n", "]", "\n", "]", "\n", ")", "\n", ")", "\n", "cur_lat", "+=", "lat_size", "\n", "", "cur_lon", "+=", "lon_size", "\n", "\n", "", "return", "output_polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.date_overlap": [[11, 16], ["min", "max"], "function", ["None"], ["def", "date_overlap", "(", "start1", ":", "date", ",", "end1", ":", "date", ",", "start2", ":", "date", ",", "end2", ":", "date", ")", "->", "int", ":", "\n", "    ", "overlaps", "=", "start1", "<=", "end2", "and", "end1", ">=", "start2", "\n", "if", "not", "overlaps", ":", "\n", "        ", "return", "0", "\n", "", "return", "(", "min", "(", "end1", ",", "end2", ")", "-", "max", "(", "start1", ",", "start2", ")", ")", ".", "days", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.metre_per_degree": [[18, 27], ["math.cos", "math.cos", "math.radians", "math.cos", "math.radians"], "function", ["None"], ["", "def", "metre_per_degree", "(", "mid_lat", ":", "float", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "# https://gis.stackexchange.com/questions/75528/understanding-terms-in-length-of-degree-formula", "\n", "# see the link above to explain the magic numbers", "\n", "    ", "m_per_deg_lat", "=", "(", "\n", "111132.954", "-", "559.822", "*", "cos", "(", "2.0", "*", "mid_lat", ")", "+", "1.175", "*", "cos", "(", "radians", "(", "4.0", "*", "mid_lat", ")", ")", "\n", ")", "\n", "m_per_deg_lon", "=", "(", "3.14159265359", "/", "180", ")", "*", "6367449", "*", "cos", "(", "radians", "(", "mid_lat", ")", ")", "\n", "\n", "return", "m_per_deg_lat", ",", "m_per_deg_lon", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.bounding_box_from_centre": [[97, 116], ["utils.metre_per_degree", "isinstance", "utils.EEBoundingBox"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.metre_per_degree"], ["", "", "def", "bounding_box_from_centre", "(", "\n", "mid_lat", ":", "float", ",", "mid_lon", ":", "float", ",", "surrounding_metres", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "int", "]", "]", "\n", ")", "->", "EEBoundingBox", ":", "\n", "\n", "    ", "m_per_deg_lat", ",", "m_per_deg_lon", "=", "metre_per_degree", "(", "mid_lat", ")", "\n", "\n", "if", "isinstance", "(", "surrounding_metres", ",", "int", ")", ":", "\n", "        ", "surrounding_metres", "=", "(", "surrounding_metres", ",", "surrounding_metres", ")", "\n", "\n", "", "surrounding_lat", ",", "surrounding_lon", "=", "surrounding_metres", "\n", "\n", "deg_lat", "=", "surrounding_lat", "/", "m_per_deg_lat", "\n", "deg_lon", "=", "surrounding_lon", "/", "m_per_deg_lon", "\n", "\n", "max_lat", ",", "min_lat", "=", "mid_lat", "+", "deg_lat", ",", "mid_lat", "-", "deg_lat", "\n", "max_lon", ",", "min_lon", "=", "mid_lon", "+", "deg_lon", ",", "mid_lon", "-", "deg_lon", "\n", "\n", "return", "EEBoundingBox", "(", "\n", "max_lon", "=", "max_lon", ",", "min_lon", "=", "min_lon", ",", "max_lat", "=", "max_lat", ",", "min_lat", "=", "min_lat", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.bounding_box_to_earth_engine_bounding_box": [[119, 127], ["utils.EEBoundingBox"], "function", ["None"], ["", "def", "bounding_box_to_earth_engine_bounding_box", "(", "\n", "bounding_box", ":", "BoundingBox", ",", "\n", ")", "->", "EEBoundingBox", ":", "\n", "    ", "return", "EEBoundingBox", "(", "\n", "max_lat", "=", "bounding_box", ".", "max_lat", ",", "\n", "min_lat", "=", "bounding_box", ".", "min_lat", ",", "\n", "max_lon", "=", "bounding_box", ".", "max_lon", ",", "\n", "min_lon", "=", "bounding_box", ".", "min_lon", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.cancel_all_tasks": [[130, 145], ["ee.Initialize", "ee.batch.Task.list", "print", "task.status", "task.status", "task.cancel", "print", "print", "len"], "function", ["None"], ["", "def", "cancel_all_tasks", "(", ")", "->", "None", ":", "\n", "\n", "    ", "ee", ".", "Initialize", "(", ")", "\n", "\n", "tasks", "=", "ee", ".", "batch", ".", "Task", ".", "list", "(", ")", "\n", "print", "(", "f\"Cancelling up to {len(tasks)} tasks\"", ")", "\n", "# Cancel running and ready tasks", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "task_id", "=", "task", ".", "status", "(", ")", "[", "\"id\"", "]", "\n", "task_state", "=", "task", ".", "status", "(", ")", "[", "\"state\"", "]", "\n", "if", "task_state", "==", "\"RUNNING\"", "or", "task_state", "==", "\"READY\"", ":", "\n", "            ", "task", ".", "cancel", "(", ")", "\n", "print", "(", "f\"Task {task_id} cancelled\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"Task {task_id} state is {task_state}\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.load_labels": [[25, 31], ["togo.exists", "geopandas.read_file"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "togo", "=", "data_folder", "/", "\"processed\"", "/", "TogoProcessor", ".", "dataset", "/", "\"data.geojson\"", "\n", "assert", "togo", ".", "exists", "(", ")", ",", "\"Togo processor must be run to load labels\"", "\n", "return", "geopandas", ".", "read_file", "(", "togo", ")", "\n", "\n", "", "def", "process_single_file", "(", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.load_evaluation_labels": [[32, 44], ["data.exists", "pandas.read_csv"], "methods", ["None"], ["self", ",", "\n", "path_to_file", ":", "Path", ",", "\n", "nan_fill", ":", "float", ",", "\n", "max_nan_ratio", ":", "float", ",", "\n", "add_ndvi", ":", "bool", ",", "\n", "calculate_normalizing_dict", ":", "bool", ",", "\n", "start_date", ":", "datetime", ",", "\n", "days_per_timestep", ":", "int", ",", "\n", "is_test", ":", "bool", ",", "\n", ")", "->", "Optional", "[", "TogoDataInstance", "]", ":", "\n", "        "]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.labels_to_bounding_boxes": [[45, 65], ["tqdm.tqdm.tqdm", "togo.TogoSentinelExporter.labels.iterrows", "output.append", "utils.bounding_box_from_centre", "len"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.bounding_box_from_centre"], ["\n", "\n", "da", "=", "self", ".", "load_tif", "(", "\n", "path_to_file", ",", "days_per_timestep", "=", "days_per_timestep", ",", "start_date", "=", "start_date", "\n", ")", "\n", "\n", "# first, we find the label encompassed within the da", "\n", "\n", "min_lon", ",", "min_lat", "=", "float", "(", "da", ".", "x", ".", "min", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "min", "(", ")", ")", "\n", "max_lon", ",", "max_lat", "=", "float", "(", "da", ".", "x", ".", "max", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "max", "(", ")", ")", "\n", "overlap", "=", "self", ".", "labels", "[", "\n", "(", "\n", "(", "self", ".", "labels", ".", "lon", "<=", "max_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lon", ">=", "min_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", "<=", "max_lat", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", ">=", "min_lat", ")", "\n", ")", "\n", "]", "\n", "if", "len", "(", "overlap", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.export_for_labels": [[66, 127], ["pathlib.Path", "togo.TogoSentinelExporter.labels_to_bounding_boxes", "enumerate", "togo.TogoSentinelExporter.load_evaluation_labels", "togo.TogoSentinelExporter.output_folder.mkdir", "print", "togo.TogoSentinelExporter._export_for_polygon", "togo.TogoSentinelExporter.load_labels", "datetime.timedelta", "bounding_info.to_ee_polygon"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.labels_to_bounding_boxes", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.load_evaluation_labels", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.base.BaseSentinelExporter._export_for_polygon", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.load_labels", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.EEBoundingBox.to_ee_polygon"], ["", "label_lat", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lat", "\n", "label_lon", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lon", "\n", "\n", "closest_lon", "=", "self", ".", "find_nearest", "(", "da", ".", "x", ",", "label_lon", ")", "\n", "closest_lat", "=", "self", ".", "find_nearest", "(", "da", ".", "y", ",", "label_lat", ")", "\n", "\n", "labelled_np", "=", "da", ".", "sel", "(", "x", "=", "closest_lon", ")", ".", "sel", "(", "y", "=", "closest_lat", ")", ".", "values", "\n", "\n", "if", "add_ndvi", ":", "\n", "            ", "labelled_np", "=", "self", ".", "calculate_ndvi", "(", "labelled_np", ")", "\n", "\n", "", "labelled_array", "=", "self", ".", "maxed_nan_to_num", "(", "\n", "labelled_np", ",", "nan", "=", "nan_fill", ",", "max_ratio", "=", "max_nan_ratio", "\n", ")", "\n", "\n", "if", "(", "not", "is_test", ")", "and", "calculate_normalizing_dict", ":", "\n", "            ", "self", ".", "update_normalizing_values", "(", "labelled_array", ")", "\n", "\n", "", "if", "labelled_array", "is", "not", "None", ":", "\n", "            ", "return", "TogoDataInstance", "(", "\n", "label_lat", "=", "label_lat", ",", "\n", "label_lon", "=", "label_lon", ",", "\n", "instance_lat", "=", "closest_lat", ",", "\n", "instance_lon", "=", "closest_lon", ",", "\n", "labelled_array", "=", "labelled_array", ",", "\n", "is_crop", "=", "int", "(", "overlap", ".", "iloc", "[", "0", "]", ".", "is_crop", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Skipping! Too many nan values\"", ")", "\n", "return", "None", "\n", "\n", "\n", "", "", "", "class", "TogoEvaluationEngineer", "(", "TogoEngineer", ")", ":", "\n", "    ", "sentinel_dataset", "=", "TogoSentinelExporter", ".", "evaluation_dataset", "\n", "dataset", "=", "TogoProcessor", ".", "evaluation_dataset", "\n", "eval_only", "=", "True", "\n", "\n", "@", "staticmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "togo", "=", "data_folder", "/", "\"processed\"", "/", "TogoProcessor", ".", "evaluation_dataset", "/", "\"data.csv\"", "\n", "assert", "togo", ".", "exists", "(", ")", ",", "\"Togo processor must be run to load labels\"", "\n", "return", "pd", ".", "read_csv", "(", "togo", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.base.BaseProcessor.__init__": [[14, 22], ["base.BaseProcessor.raw_folder.exists", "base.BaseProcessor.output_folder.mkdir"], "methods", ["None"], ["from", "src", ".", "utils", "import", "set_seed", "\n", "from", "src", ".", "utils", ".", "regions", "import", "BoundingBox", "\n", "\n", "\n", "@", "dataclass", "\n", "class", "BaseDataInstance", ":", "\n", "    ", "label_lat", ":", "float", "\n", "label_lon", ":", "float", "\n", "instance_lat", ":", "float", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.geowiki.GeoWikiProcessor.load_raw_data": [[10, 27], ["participants_to_file_labels.get", "pandas.read_csv", "participants_to_file_labels.values"], "methods", ["None"], ["\n", "from", "src", ".", "exporters", "import", "GeoWikiExporter", ",", "GeoWikiSentinelExporter", "\n", "from", ".", "base", "import", "BaseEngineer", ",", "BaseDataInstance", "\n", "\n", "\n", "@", "dataclass", "\n", "class", "GeoWikiDataInstance", "(", "BaseDataInstance", ")", ":", "\n", "\n", "    ", "crop_probability", ":", "float", "\n", "neighbouring_array", ":", "np", ".", "ndarray", "\n", "\n", "\n", "", "class", "GeoWikiEngineer", "(", "BaseEngineer", ")", ":", "\n", "\n", "    ", "sentinel_dataset", "=", "GeoWikiSentinelExporter", ".", "dataset", "\n", "dataset", "=", "GeoWikiExporter", ".", "dataset", "\n", "\n", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.geowiki.GeoWikiProcessor.process": [[29, 55], ["geowiki.GeoWikiProcessor.load_raw_data", "location_data[].groupby().mean", "mean_per_location.rename.rename.rename", "[].to_xarray", "[].to_xarray.to_netcdf", "location_data[].groupby", "mean_per_location.rename.rename.reset_index().set_index", "mean_per_location.rename.rename.reset_index"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.geowiki.GeoWikiProcessor.load_raw_data"], ["        ", "geowiki", "=", "data_folder", "/", "\"processed\"", "/", "GeoWikiExporter", ".", "dataset", "/", "\"data.nc\"", "\n", "assert", "geowiki", ".", "exists", "(", ")", ",", "\"GeoWiki processor must be run to load labels\"", "\n", "return", "xr", ".", "open_dataset", "(", "geowiki", ")", ".", "to_dataframe", "(", ")", ".", "dropna", "(", ")", ".", "reset_index", "(", ")", "\n", "\n", "", "def", "process_single_file", "(", "\n", "self", ",", "\n", "path_to_file", ":", "Path", ",", "\n", "nan_fill", ":", "float", ",", "\n", "max_nan_ratio", ":", "float", ",", "\n", "add_ndvi", ":", "bool", ",", "\n", "calculate_normalizing_dict", ":", "bool", ",", "\n", "start_date", ":", "datetime", ",", "\n", "days_per_timestep", ":", "int", ",", "\n", "is_test", ":", "bool", ",", "\n", ")", "->", "Optional", "[", "GeoWikiDataInstance", "]", ":", "\n", "        ", "r\"\"\"\n        Return a tuple of np.ndarrays of shape [n_timesteps, n_features] for\n        1) the anchor (labelled)\n        \"\"\"", "\n", "\n", "da", "=", "self", ".", "load_tif", "(", "\n", "path_to_file", ",", "days_per_timestep", "=", "days_per_timestep", ",", "start_date", "=", "start_date", "\n", ")", "\n", "\n", "# first, we find the label encompassed within the da", "\n", "\n", "min_lon", ",", "min_lat", "=", "float", "(", "da", ".", "x", ".", "min", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "min", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.togo.TogoProcessor.__init__": [[16, 18], ["base.BaseProcessor.__init__"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.__init__"], ["class", "TogoDataInstance", "(", "BaseDataInstance", ")", ":", "\n", "    ", "is_crop", ":", "int", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.togo.TogoProcessor.process_single_shapefile": [[19, 34], ["geopandas.read_file", "filepath.name.lower"], "methods", ["None"], ["\n", "", "class", "TogoEngineer", "(", "BaseEngineer", ")", ":", "\n", "\n", "    ", "sentinel_dataset", "=", "TogoSentinelExporter", ".", "dataset", "\n", "dataset", "=", "TogoProcessor", ".", "dataset", "\n", "\n", "@", "staticmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "togo", "=", "data_folder", "/", "\"processed\"", "/", "TogoProcessor", ".", "dataset", "/", "\"data.geojson\"", "\n", "assert", "togo", ".", "exists", "(", ")", ",", "\"Togo processor must be run to load labels\"", "\n", "return", "geopandas", ".", "read_file", "(", "togo", ")", "\n", "\n", "", "def", "process_single_file", "(", "\n", "self", ",", "\n", "path_to_file", ":", "Path", ",", "\n", "nan_fill", ":", "float", ",", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.togo.TogoProcessor.process_eval_shapefile": [[35, 97], ["enumerate", "pandas.concat().dropna", "range", "range", "df[].sum", "geopandas.read_file", "df.rename.rename.rename", "labels.append", "lat_labels.append", "lon_labels.append", "dfs.append", "len", "len", "len", "pyproj.Transformer.from_crs", "pyproj.Transformer.from_crs.transform", "pandas.concat"], "methods", ["None"], ["max_nan_ratio", ":", "float", ",", "\n", "add_ndvi", ":", "bool", ",", "\n", "calculate_normalizing_dict", ":", "bool", ",", "\n", "start_date", ":", "datetime", ",", "\n", "days_per_timestep", ":", "int", ",", "\n", "is_test", ":", "bool", ",", "\n", ")", "->", "Optional", "[", "TogoDataInstance", "]", ":", "\n", "        ", "r\"\"\"\n        Return a tuple of np.ndarrays of shape [n_timesteps, n_features] for\n        1) the anchor (labelled)\n        \"\"\"", "\n", "\n", "da", "=", "self", ".", "load_tif", "(", "\n", "path_to_file", ",", "days_per_timestep", "=", "days_per_timestep", ",", "start_date", "=", "start_date", "\n", ")", "\n", "\n", "# first, we find the label encompassed within the da", "\n", "\n", "min_lon", ",", "min_lat", "=", "float", "(", "da", ".", "x", ".", "min", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "min", "(", ")", ")", "\n", "max_lon", ",", "max_lat", "=", "float", "(", "da", ".", "x", ".", "max", "(", ")", ")", ",", "float", "(", "da", ".", "y", ".", "max", "(", ")", ")", "\n", "overlap", "=", "self", ".", "labels", "[", "\n", "(", "\n", "(", "self", ".", "labels", ".", "lon", "<=", "max_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lon", ">=", "min_lon", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", "<=", "max_lat", ")", "\n", "&", "(", "self", ".", "labels", ".", "lat", ">=", "min_lat", ")", "\n", ")", "\n", "]", "\n", "if", "len", "(", "overlap", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "label_lat", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lat", "\n", "label_lon", "=", "overlap", ".", "iloc", "[", "0", "]", ".", "lon", "\n", "\n", "closest_lon", "=", "self", ".", "find_nearest", "(", "da", ".", "x", ",", "label_lon", ")", "\n", "closest_lat", "=", "self", ".", "find_nearest", "(", "da", ".", "y", ",", "label_lat", ")", "\n", "\n", "labelled_np", "=", "da", ".", "sel", "(", "x", "=", "closest_lon", ")", ".", "sel", "(", "y", "=", "closest_lat", ")", ".", "values", "\n", "\n", "if", "add_ndvi", ":", "\n", "            ", "labelled_np", "=", "self", ".", "calculate_ndvi", "(", "labelled_np", ")", "\n", "\n", "", "labelled_array", "=", "self", ".", "maxed_nan_to_num", "(", "\n", "labelled_np", ",", "nan", "=", "nan_fill", ",", "max_ratio", "=", "max_nan_ratio", "\n", ")", "\n", "\n", "if", "(", "not", "is_test", ")", "and", "calculate_normalizing_dict", ":", "\n", "            ", "self", ".", "update_normalizing_values", "(", "labelled_array", ")", "\n", "\n", "", "if", "labelled_array", "is", "not", "None", ":", "\n", "            ", "return", "TogoDataInstance", "(", "\n", "label_lat", "=", "label_lat", ",", "\n", "label_lon", "=", "label_lon", ",", "\n", "instance_lat", "=", "closest_lat", ",", "\n", "instance_lon", "=", "closest_lon", ",", "\n", "labelled_array", "=", "labelled_array", ",", "\n", "is_crop", "=", "int", "(", "overlap", ".", "iloc", "[", "0", "]", ".", "is_crop", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Skipping! Too many nan values\"", ")", "\n", "return", "None", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.togo.TogoProcessor.process": [[98, 133], ["pandas.concat", "pandas.concat.to_file", "output_dfs.append", "output_folder.mkdir", "togo.TogoProcessor.process_eval_shapefile", "togo.TogoProcessor.to_csv", "togo.TogoProcessor.process_single_shapefile"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.togo.TogoProcessor.process_eval_shapefile", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.togo.TogoProcessor.process_single_shapefile"], ["", "", "", "class", "TogoEvaluationEngineer", "(", "TogoEngineer", ")", ":", "\n", "    ", "sentinel_dataset", "=", "TogoSentinelExporter", ".", "evaluation_dataset", "\n", "dataset", "=", "TogoProcessor", ".", "evaluation_dataset", "\n", "eval_only", "=", "True", "\n", "\n", "@", "staticmethod", "\n", "def", "read_labels", "(", "data_folder", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "togo", "=", "data_folder", "/", "\"processed\"", "/", "TogoProcessor", ".", "evaluation_dataset", "/", "\"data.csv\"", "\n", "assert", "togo", ".", "exists", "(", ")", ",", "\"Togo processor must be run to load labels\"", "\n", "return", "pd", ".", "read_csv", "(", "togo", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.__init__": [[65, 123], ["pytorch_lightning.LightningModule.__init__", "src.utils.set_seed", "pathlib.Path", "models.LandCoverMapper.get_dataset", "range", "torch.nn.Sequential", "global_classification_layers.append", "range", "torch.nn.Sequential", "torch.nn.Linear", "global_classification_layers.append", "local_classification_layers.append", "torch.nn.ReLU", "torch.nn.Linear", "local_classification_layers.append", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.__init__", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.utils.__init__.set_seed", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.get_dataset"], ["def", "__init__", "(", "self", ",", "hparams", ":", "Namespace", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "set_seed", "(", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n", "self", ".", "data_folder", "=", "Path", "(", "hparams", ".", "data_folder", ")", "\n", "\n", "dataset", "=", "self", ".", "get_dataset", "(", "subset", "=", "\"training\"", ")", "\n", "self", ".", "input_size", "=", "dataset", ".", "num_input_features", "\n", "self", ".", "num_outputs", "=", "dataset", ".", "num_output_classes", "\n", "\n", "# we save the normalizing dict because we calculate weighted", "\n", "# normalization values based on the datasets we combine.", "\n", "# The number of instances per dataset (and therefore the weights) can", "\n", "# vary between the train / test / val sets - this ensures the normalizing", "\n", "# dict stays constant between them", "\n", "self", ".", "normalizing_dict", "=", "dataset", ".", "normalizing_dict", "\n", "\n", "self", ".", "model_base_name", "=", "hparams", ".", "model_base", "\n", "\n", "self", ".", "base", "=", "STR2BASE", "[", "hparams", ".", "model_base", "]", "(", "\n", "input_size", "=", "self", ".", "input_size", ",", "hparams", "=", "self", ".", "hparams", "\n", ")", "\n", "\n", "global_classification_layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "hparams", ".", "num_classification_layers", ")", ":", "\n", "            ", "global_classification_layers", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "\n", "in_features", "=", "hparams", ".", "hidden_vector_size", ",", "\n", "out_features", "=", "self", ".", "num_outputs", "\n", "if", "i", "==", "(", "hparams", ".", "num_classification_layers", "-", "1", ")", "\n", "else", "hparams", ".", "hidden_vector_size", ",", "\n", ")", "\n", ")", "\n", "if", "i", "<", "(", "hparams", ".", "num_classification_layers", "-", "1", ")", ":", "\n", "                ", "global_classification_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "", "self", ".", "global_classifier", "=", "nn", ".", "Sequential", "(", "*", "global_classification_layers", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "multi_headed", ":", "\n", "\n", "            ", "local_classification_layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "hparams", ".", "num_classification_layers", ")", ":", "\n", "                ", "local_classification_layers", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "\n", "in_features", "=", "hparams", ".", "hidden_vector_size", ",", "\n", "out_features", "=", "self", ".", "num_outputs", "\n", "if", "i", "==", "(", "hparams", ".", "num_classification_layers", "-", "1", ")", "\n", "else", "hparams", ".", "hidden_vector_size", ",", "\n", ")", "\n", ")", "\n", "if", "i", "<", "(", "hparams", ".", "num_classification_layers", "-", "1", ")", ":", "\n", "                    ", "local_classification_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "", "self", ".", "local_classifier", "=", "nn", ".", "Sequential", "(", "*", "local_classification_layers", ")", "\n", "\n", "", "self", ".", "loss_function", ":", "Callable", "=", "F", ".", "binary_cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.forward": [[124, 141], ["models.LandCoverMapper.base", "models.LandCoverMapper.global_classifier", "torch.sigmoid", "models.LandCoverMapper.local_classifier", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "x", ":", "torch", ".", "Tensor", "\n", ")", "->", "Union", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "base", "=", "self", ".", "base", "(", "x", ")", "\n", "x_global", "=", "self", ".", "global_classifier", "(", "base", ")", "\n", "\n", "if", "self", ".", "num_outputs", "==", "1", ":", "\n", "            ", "x_global", "=", "torch", ".", "sigmoid", "(", "x_global", ")", "\n", "\n", "", "if", "self", ".", "hparams", ".", "multi_headed", ":", "\n", "            ", "x_local", "=", "self", ".", "local_classifier", "(", "base", ")", "\n", "if", "self", ".", "num_outputs", "==", "1", ":", "\n", "                ", "x_local", "=", "torch", ".", "sigmoid", "(", "x_local", ")", "\n", "", "return", "x_global", ",", "x_local", "\n", "\n", "", "else", ":", "\n", "            ", "return", "x_global", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.get_dataset": [[142, 153], ["data.LandTypeClassificationDataset"], "methods", ["None"], ["", "", "def", "get_dataset", "(", "\n", "self", ",", "subset", ":", "str", ",", "normalizing_dict", ":", "Optional", "[", "Dict", "]", "=", "None", "\n", ")", "->", "LandTypeClassificationDataset", ":", "\n", "        ", "return", "LandTypeClassificationDataset", "(", "\n", "data_folder", "=", "self", ".", "data_folder", ",", "\n", "subset", "=", "subset", ",", "\n", "crop_probability_threshold", "=", "self", ".", "hparams", ".", "probability_threshold", ",", "\n", "include_geowiki", "=", "self", ".", "hparams", ".", "add_geowiki", ",", "\n", "include_togo", "=", "self", ".", "hparams", ".", "add_togo", ",", "\n", "normalizing_dict", "=", "normalizing_dict", ",", "\n", "remove_b1_b10", "=", "self", ".", "hparams", ".", "remove_b1_b10", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.train_dataloader": [[155, 160], ["torch.utils.data.DataLoader", "models.LandCoverMapper.get_dataset"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.get_dataset"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "get_dataset", "(", "subset", "=", "\"training\"", ")", ",", "\n", "shuffle", "=", "True", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.val_dataloader": [[162, 168], ["torch.utils.data.DataLoader", "models.LandCoverMapper.get_dataset"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.get_dataset"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "get_dataset", "(", "\n", "subset", "=", "\"validation\"", ",", "normalizing_dict", "=", "self", ".", "normalizing_dict", "\n", ")", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.test_dataloader": [[170, 174], ["torch.utils.data.DataLoader", "models.LandCoverMapper.get_dataset"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.get_dataset"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "get_dataset", "(", "subset", "=", "\"testing\"", ",", "normalizing_dict", "=", "self", ".", "normalizing_dict", ")", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.configure_optimizers": [[176, 178], ["torch.optim.Adam", "models.LandCoverMapper.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "hparams", ".", "learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.training_step": [[179, 182], ["models.LandCoverMapper._split_preds_and_get_loss"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper._split_preds_and_get_loss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "return", "self", ".", "_split_preds_and_get_loss", "(", "\n", "batch", ",", "add_preds", "=", "False", ",", "loss_label", "=", "\"loss\"", ",", "log_loss", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.validation_step": [[184, 187], ["models.LandCoverMapper._split_preds_and_get_loss"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper._split_preds_and_get_loss"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "return", "self", ".", "_split_preds_and_get_loss", "(", "\n", "batch", ",", "add_preds", "=", "True", ",", "loss_label", "=", "\"val_loss\"", ",", "log_loss", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.test_step": [[189, 192], ["models.LandCoverMapper._split_preds_and_get_loss"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper._split_preds_and_get_loss"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "return", "self", ".", "_split_preds_and_get_loss", "(", "\n", "batch", ",", "add_preds", "=", "True", ",", "loss_label", "=", "\"test_loss\"", ",", "log_loss", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.validation_epoch_end": [[194, 201], ["torch.stack().mean", "tensorboard_logs.update", "models.LandCoverMapper.get_interpretable_metrics", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.get_interpretable_metrics"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"val_loss\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "\n", "tensorboard_logs", "=", "{", "\"val_loss\"", ":", "avg_loss", "}", "\n", "tensorboard_logs", ".", "update", "(", "self", ".", "get_interpretable_metrics", "(", "outputs", ",", "prefix", "=", "\"val_\"", ")", ")", "\n", "\n", "return", "{", "\"val_loss\"", ":", "avg_loss", ",", "\"log\"", ":", "tensorboard_logs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.test_epoch_end": [[202, 209], ["torch.stack().mean().item", "output_dict.update", "models.LandCoverMapper.get_interpretable_metrics", "torch.stack().mean", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.get_interpretable_metrics"], ["", "def", "test_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"test_loss\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "output_dict", "=", "{", "\"test_loss\"", ":", "avg_loss", "}", "\n", "output_dict", ".", "update", "(", "self", ".", "get_interpretable_metrics", "(", "outputs", ",", "prefix", "=", "\"test_\"", ")", ")", "\n", "\n", "return", "{", "\"progress_bar\"", ":", "output_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.save_validation_predictions": [[210, 244], ["save_dir.mkdir", "models.LandCoverMapper.val_dataloader", "enumerate", "numpy.save", "numpy.save", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "numpy.save", "numpy.save", "pathlib.Path", "torch.no_grad", "outputs.append", "models.LandCoverMapper.validation_step", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.val_dataloader", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.validation_step"], ["", "def", "save_validation_predictions", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        This can be useful in combination with src.utils.plot_roc_curve\n        to find an appropriate threshold.\n        \"\"\"", "\n", "save_dir", "=", "(", "\n", "Path", "(", "self", ".", "hparams", ".", "data_folder", ")", "/", "self", ".", "__class__", ".", "__name__", "/", "\"validation\"", "\n", ")", "\n", "save_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "val_dl", "=", "self", ".", "val_dataloader", "(", ")", "\n", "\n", "outputs", ":", "List", "[", "Dict", "]", "=", "[", "]", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "val_dl", ")", ":", "\n", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", ".", "append", "(", "self", ".", "validation_step", "(", "batch", ",", "idx", ")", ")", "\n", "\n", "", "", "all_preds", "=", "(", "torch", ".", "cat", "(", "[", "x", "[", "\"pred\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", ")", "\n", "all_labels", "=", "(", "torch", ".", "cat", "(", "[", "x", "[", "\"label\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", ")", "\n", "\n", "np", ".", "save", "(", "save_dir", "/", "\"all_preds.npy\"", ",", "all_preds", ")", "\n", "np", ".", "save", "(", "save_dir", "/", "\"all_labels.npy\"", ",", "all_labels", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "multi_headed", ":", "\n", "            ", "r_preds", "=", "(", "\n", "torch", ".", "cat", "(", "[", "x", "[", "\"Togo_pred\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "r_labels", "=", "(", "\n", "torch", ".", "cat", "(", "[", "x", "[", "\"Togo_label\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "np", ".", "save", "(", "save_dir", "/", "\"Togo_preds.npy\"", ",", "r_preds", ")", "\n", "np", ".", "save", "(", "save_dir", "/", "\"Togo_labels.npy\"", ",", "r_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.predict": [[245, 300], ["models.LandCoverMapper.eval", "utils.tif_to_np", "models.LandCoverMapper.get_dataset", "tqdm.tqdm.tqdm", "numpy.concatenate", "utils.preds_to_xr", "torch.from_numpy().float", "predictions.append", "tqdm.tqdm.tqdm.update", "len", "numpy.expand_dims", "torch.no_grad", "models.LandCoverMapper.forward", "typing.cast().numpy", "torch.from_numpy", "torch.nn.functional.softmax", "models.LandCoverMapper.remove_bands", "typing.cast", "typing.cast"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.utils.tif_to_np", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.get_dataset", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.utils.preds_to_xr", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.forward", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.remove_bands"], ["", "", "def", "predict", "(", "\n", "self", ",", "\n", "path_to_file", ":", "Path", ",", "\n", "batch_size", ":", "int", "=", "64", ",", "\n", "add_ndvi", ":", "bool", "=", "True", ",", "\n", "nan_fill", ":", "float", "=", "0", ",", "\n", "days_per_timestep", ":", "int", "=", "30", ",", "\n", "local_head", ":", "bool", "=", "True", ",", "\n", ")", "->", "xr", ".", "Dataset", ":", "\n", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "\n", "input_data", "=", "tif_to_np", "(", "\n", "path_to_file", ",", "\n", "add_ndvi", "=", "add_ndvi", ",", "\n", "nan", "=", "nan_fill", ",", "\n", "normalizing_dict", "=", "self", ".", "normalizing_dict", ",", "\n", "days_per_timestep", "=", "days_per_timestep", ",", "\n", ")", "\n", "\n", "dataset", "=", "self", ".", "get_dataset", "(", "subset", "=", "\"training\"", ")", "\n", "\n", "predictions", ":", "List", "[", "np", ".", "ndarray", "]", "=", "[", "]", "\n", "cur_i", "=", "0", "\n", "\n", "pbar", "=", "tqdm", "(", "total", "=", "input_data", ".", "x", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "while", "cur_i", "<", "(", "input_data", ".", "x", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "            ", "batch_x", "=", "torch", ".", "from_numpy", "(", "\n", "dataset", ".", "remove_bands", "(", "input_data", ".", "x", "[", "cur_i", ":", "cur_i", "+", "batch_size", "]", ")", "\n", ")", ".", "float", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch_preds", "=", "self", ".", "forward", "(", "batch_x", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "multi_headed", ":", "\n", "                    ", "global_preds", ",", "local_preds", "=", "batch_preds", "\n", "\n", "if", "local_head", ":", "\n", "                        ", "batch_preds", "=", "local_preds", "\n", "", "else", ":", "\n", "                        ", "batch_preds", "=", "global_preds", "\n", "\n", "", "", "if", "self", ".", "num_outputs", ">", "1", ":", "\n", "                    ", "batch_preds", "=", "F", ".", "softmax", "(", "cast", "(", "torch", ".", "Tensor", ",", "batch_preds", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "predictions", ".", "append", "(", "cast", "(", "torch", ".", "Tensor", ",", "batch_preds", ")", ".", "numpy", "(", ")", ")", "\n", "cur_i", "+=", "batch_size", "\n", "pbar", ".", "update", "(", "batch_size", ")", "\n", "\n", "", "all_preds", "=", "np", ".", "concatenate", "(", "predictions", ",", "axis", "=", "0", ")", "\n", "if", "len", "(", "all_preds", ".", "shape", ")", "==", "1", ":", "\n", "            ", "all_preds", "=", "np", ".", "expand_dims", "(", "all_preds", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "preds_to_xr", "(", "\n", "all_preds", ",", "lats", "=", "input_data", ".", "lat", ",", "lons", "=", "input_data", ".", "lon", ",", "feature_labels", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.get_interpretable_metrics": [[302, 328], ["output_dict.update", "models.LandCoverMapper.single_output_metrics", "output_dict.update", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "models.LandCoverMapper.single_output_metrics", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.single_output_metrics", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.single_output_metrics"], ["", "def", "get_interpretable_metrics", "(", "self", ",", "outputs", ",", "prefix", ":", "str", ")", "->", "Dict", ":", "\n", "\n", "        ", "output_dict", "=", "{", "}", "\n", "\n", "# we want to calculate some more interpretable losses - accuracy,", "\n", "# and auc roc", "\n", "output_dict", ".", "update", "(", "\n", "self", ".", "single_output_metrics", "(", "\n", "torch", ".", "cat", "(", "[", "x", "[", "\"pred\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "torch", ".", "cat", "(", "[", "x", "[", "\"label\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "prefix", "=", "prefix", ",", "\n", ")", "\n", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "multi_headed", ":", "\n", "            ", "output_dict", ".", "update", "(", "\n", "self", ".", "single_output_metrics", "(", "\n", "torch", ".", "cat", "(", "[", "x", "[", "\"Togo_pred\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "torch", ".", "cat", "(", "[", "x", "[", "\"Togo_label\"", "]", "for", "x", "in", "outputs", "]", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", ",", "\n", "prefix", "=", "f\"{prefix}Togo_\"", ",", "\n", ")", "\n", ")", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.single_output_metrics": [[329, 351], ["sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "sklearn.metrics.accuracy_score", "len", "sklearn.metrics.roc_auc_score"], "methods", ["None"], ["", "def", "single_output_metrics", "(", "\n", "self", ",", "preds", ":", "np", ".", "ndarray", ",", "labels", ":", "np", ".", "ndarray", ",", "prefix", ":", "str", "=", "\"\"", "\n", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "\n", "        ", "if", "len", "(", "preds", ")", "==", "0", ":", "\n", "# sometimes this happens in the warmup", "\n", "            ", "return", "{", "}", "\n", "\n", "", "output_dict", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "}", "\n", "if", "not", "(", "labels", "==", "labels", "[", "0", "]", ")", ".", "all", "(", ")", ":", "\n", "# This can happen when lightning does its warm up on a subset of the", "\n", "# validation data", "\n", "            ", "output_dict", "[", "f\"{prefix}roc_auc_score\"", "]", "=", "roc_auc_score", "(", "labels", ",", "preds", ")", "\n", "\n", "", "preds", "=", "(", "preds", ">", "self", ".", "hparams", ".", "probability_threshold", ")", ".", "astype", "(", "int", ")", "\n", "\n", "output_dict", "[", "f\"{prefix}precision_score\"", "]", "=", "precision_score", "(", "labels", ",", "preds", ")", "\n", "output_dict", "[", "f\"{prefix}recall_score\"", "]", "=", "recall_score", "(", "labels", ",", "preds", ")", "\n", "output_dict", "[", "f\"{prefix}f1_score\"", "]", "=", "f1_score", "(", "labels", ",", "preds", ")", "\n", "output_dict", "[", "f\"{prefix}accuracy\"", "]", "=", "accuracy_score", "(", "labels", ",", "preds", ")", "\n", "\n", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper._split_preds_and_get_loss": [[352, 408], ["output_dict.update", "models.LandCoverMapper.forward", "models.LandCoverMapper.forward", "models.LandCoverMapper.loss_function", "models.LandCoverMapper.loss_function", "models.LandCoverMapper.loss_function", "preds_dict.update", "preds_dict.update", "local_preds.squeeze", "global_preds.squeeze", "typing.cast().squeeze", "typing.cast"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.forward", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.forward"], ["", "def", "_split_preds_and_get_loss", "(", "\n", "self", ",", "batch", ",", "add_preds", ":", "bool", ",", "loss_label", ":", "str", ",", "log_loss", ":", "bool", "\n", ")", "->", "Dict", ":", "\n", "\n", "        ", "x", ",", "label", ",", "is_togo", "=", "batch", "\n", "\n", "preds_dict", ":", "Dict", "=", "{", "}", "\n", "if", "self", ".", "hparams", ".", "multi_headed", ":", "\n", "            ", "global_preds", ",", "local_preds", "=", "self", ".", "forward", "(", "x", ")", "\n", "global_preds", "=", "global_preds", "[", "is_togo", "==", "0", "]", "\n", "global_labels", "=", "label", "[", "is_togo", "==", "0", "]", "\n", "\n", "local_preds", "=", "local_preds", "[", "is_togo", "==", "1", "]", "\n", "local_labels", "=", "label", "[", "is_togo", "==", "1", "]", "\n", "\n", "loss", "=", "0", "\n", "if", "local_preds", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "local_loss", "=", "self", ".", "loss_function", "(", "local_preds", ".", "squeeze", "(", "-", "1", ")", ",", "local_labels", ")", "\n", "loss", "+=", "local_loss", "\n", "\n", "", "if", "global_preds", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "global_loss", "=", "self", ".", "loss_function", "(", "\n", "global_preds", ".", "squeeze", "(", "-", "1", ")", ",", "global_labels", "\n", ")", "\n", "num_local_labels", "=", "local_preds", ".", "shape", "[", "0", "]", "\n", "if", "num_local_labels", "==", "0", ":", "\n", "                    ", "alpha", "=", "1", "\n", "", "else", ":", "\n", "                    ", "ratio", "=", "global_preds", ".", "shape", "[", "0", "]", "/", "num_local_labels", "\n", "alpha", "=", "ratio", "/", "self", ".", "hparams", ".", "alpha", "\n", "\n", "", "loss", "+=", "alpha", "*", "global_loss", "\n", "", "if", "add_preds", ":", "\n", "                ", "preds_dict", ".", "update", "(", "\n", "{", "\n", "\"pred\"", ":", "global_preds", ",", "\n", "\"label\"", ":", "global_labels", ",", "\n", "\"Togo_pred\"", ":", "local_preds", ",", "\n", "\"Togo_label\"", ":", "local_labels", ",", "\n", "}", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "preds", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "loss", "=", "self", ".", "loss_function", "(", "\n", "input", "=", "cast", "(", "torch", ".", "Tensor", ",", "preds", ")", ".", "squeeze", "(", "-", "1", ")", ",", "target", "=", "label", ",", "\n", ")", "\n", "\n", "if", "add_preds", ":", "\n", "                ", "preds_dict", ".", "update", "(", "{", "\"pred\"", ":", "preds", ",", "\"label\"", ":", "label", "}", ")", "\n", "\n", "", "", "output_dict", ":", "Dict", "=", "{", "loss_label", ":", "loss", "}", "\n", "if", "log_loss", ":", "\n", "            ", "output_dict", "[", "\"log\"", "]", "=", "{", "loss_label", ":", "loss", "}", "\n", "", "output_dict", ".", "update", "(", "preds_dict", ")", "\n", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.add_model_specific_args": [[409, 461], ["argparse.ArgumentParser", "parser_args.items", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "STR2BASE[].add_base_specific_arguments", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "str", "pathlib.Path().absolute", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.LSTM.add_base_specific_arguments"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ":", "ArgumentParser", ")", "->", "ArgumentParser", ":", "\n", "        ", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "\n", "# by default, this means no additional weighting will be given", "\n", "# if a region is passed, then we will assign a weighting of 10", "\n", "# (this happens in the dataloader, and empirically seems to work well. If", "\n", "# we do more experimenting with the hparams it might make sense to make it", "\n", "# modifiable here).", "\n", "parser_args", ":", "Dict", "[", "str", ",", "Tuple", "[", "Type", ",", "Any", "]", "]", "=", "{", "\n", "\"--data_folder\"", ":", "(", "\n", "str", ",", "\n", "# this allows the model to be run from", "\n", "# anywhere on the machine", "\n", "str", "(", "Path", "(", "\"../data\"", ")", ".", "absolute", "(", ")", ")", ",", "\n", ")", ",", "# assumes this is being run from \"scripts\"", "\n", "\"--model_base\"", ":", "(", "str", ",", "\"lstm\"", ")", ",", "\n", "\"--hidden_vector_size\"", ":", "(", "int", ",", "64", ")", ",", "\n", "\"--learning_rate\"", ":", "(", "float", ",", "0.001", ")", ",", "\n", "\"--batch_size\"", ":", "(", "int", ",", "64", ")", ",", "\n", "\"--probability_threshold\"", ":", "(", "float", ",", "0.5", ")", ",", "\n", "\"--num_classification_layers\"", ":", "(", "int", ",", "2", ")", ",", "\n", "\"--alpha\"", ":", "(", "float", ",", "10", ")", ",", "\n", "}", "\n", "\n", "for", "key", ",", "val", "in", "parser_args", ".", "items", "(", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "key", ",", "type", "=", "val", "[", "0", "]", ",", "default", "=", "val", "[", "1", "]", ")", "\n", "\n", "", "parser", ".", "add_argument", "(", "\"--add_togo\"", ",", "dest", "=", "\"add_togo\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exclude_togo\"", ",", "dest", "=", "\"add_togo\"", ",", "action", "=", "\"store_false\"", ")", "\n", "parser", ".", "set_defaults", "(", "add_togo", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--add_geowiki\"", ",", "dest", "=", "\"add_geowiki\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--exclude_geowiki\"", ",", "dest", "=", "\"add_geowiki\"", ",", "action", "=", "\"store_false\"", "\n", ")", "\n", "parser", ".", "set_defaults", "(", "add_geowiki", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--remove_b1_b10\"", ",", "dest", "=", "\"remove_b1_b10\"", ",", "action", "=", "\"store_true\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--keep_b1_b10\"", ",", "dest", "=", "\"remove_b1_b10\"", ",", "action", "=", "\"store_false\"", ")", "\n", "parser", ".", "set_defaults", "(", "remove_b1_b10", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--multi_headed\"", ",", "dest", "=", "\"multi_headed\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--not_multi_headed\"", ",", "dest", "=", "\"multi_headed\"", ",", "action", "=", "\"store_false\"", "\n", ")", "\n", "parser", ".", "set_defaults", "(", "multi_headed", "=", "True", ")", "\n", "\n", "temp_args", "=", "parser", ".", "parse_known_args", "(", ")", "[", "0", "]", "\n", "return", "STR2BASE", "[", "temp_args", ".", "model_base", "]", ".", "add_base_specific_arguments", "(", "parser", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.train_funcs.train_model": [[7, 23], ["pytorch_lightning.callbacks.EarlyStopping", "pytorch_lightning.Trainer", "pl.Trainer.fit"], "function", ["None"], ["def", "train_model", "(", "model", ":", "pl", ".", "LightningModule", ",", "hparams", ":", "Namespace", ")", "->", "pl", ".", "LightningModule", ":", "\n", "    ", "early_stop_callback", "=", "EarlyStopping", "(", "\n", "monitor", "=", "\"val_loss\"", ",", "\n", "min_delta", "=", "0.00", ",", "\n", "patience", "=", "hparams", ".", "patience", ",", "\n", "verbose", "=", "True", ",", "\n", "mode", "=", "\"min\"", ",", "\n", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "default_save_path", "=", "hparams", ".", "data_folder", ",", "\n", "max_epochs", "=", "hparams", ".", "max_epochs", ",", "\n", "early_stop_callback", "=", "early_stop_callback", ",", "\n", ")", "\n", "trainer", ".", "fit", "(", "model", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.__init__": [[29, 97], ["print", "data.LandTypeClassificationDataset.load_files_and_normalizing_dict", "max", "data.LandTypeClassificationDataset.load_files_and_normalizing_dict", "files_and_dicts.append", "data.LandTypeClassificationDataset.load_files_and_normalizing_dict", "files_and_dicts.append", "data.LandTypeClassificationDataset.adjust_normalizing_dict", "pickle_files.extend", "len"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.load_files_and_normalizing_dict", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.load_files_and_normalizing_dict", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.load_files_and_normalizing_dict", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.adjust_normalizing_dict"], ["def", "__init__", "(", "\n", "self", ",", "\n", "data_folder", ":", "Path", ",", "\n", "subset", ":", "str", ",", "\n", "crop_probability_threshold", ":", "Optional", "[", "float", "]", ",", "\n", "include_geowiki", ":", "bool", ",", "\n", "include_togo", ":", "bool", ",", "\n", "remove_b1_b10", ":", "bool", ",", "\n", "normalizing_dict", ":", "Optional", "[", "Dict", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "self", ".", "normalizing_dict", ":", "Optional", "[", "Dict", "]", "=", "None", "\n", "self", ".", "data_folder", "=", "data_folder", "\n", "self", ".", "features_dir", "=", "data_folder", "/", "\"features\"", "\n", "self", ".", "bands_to_remove", "=", "[", "\"B1\"", ",", "\"B10\"", "]", "\n", "self", ".", "remove_b1_b10", "=", "remove_b1_b10", "\n", "\n", "assert", "subset", "in", "[", "\"training\"", ",", "\"validation\"", ",", "\"testing\"", "]", "\n", "self", ".", "subset_name", "=", "subset", "\n", "\n", "self", ".", "crop_probability_threshold", "=", "crop_probability_threshold", "\n", "\n", "if", "(", "subset", "==", "\"testing\"", ")", "and", "(", "\n", "self", ".", "features_dir", "/", "TogoProcessor", ".", "evaluation_dataset", "\n", ")", ".", "exists", "(", ")", ":", "\n", "            ", "print", "(", "\"Evaluating using the togo evaluation dataset!\"", ")", "\n", "\n", "assert", "normalizing_dict", "is", "not", "None", "\n", "self", ".", "normalizing_dict", "=", "normalizing_dict", "\n", "\n", "self", ".", "pickle_files", ",", "_", "=", "self", ".", "load_files_and_normalizing_dict", "(", "\n", "self", ".", "features_dir", "/", "TogoProcessor", ".", "evaluation_dataset", ",", "subset", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "(", "\n", "max", "(", "include_geowiki", ",", "include_togo", ")", "is", "True", "\n", ")", ",", "\"At least one dataset must be included\"", "\n", "\n", "files_and_dicts", ":", "List", "[", "Tuple", "[", "List", "[", "Path", "]", ",", "Optional", "[", "Dict", "]", "]", "]", "=", "[", "]", "\n", "\n", "if", "include_geowiki", ":", "\n", "\n", "                ", "geowiki_files", ",", "geowiki_nd", "=", "self", ".", "load_files_and_normalizing_dict", "(", "\n", "self", ".", "features_dir", "/", "GeoWikiExporter", ".", "dataset", ",", "self", ".", "subset_name", "\n", ")", "\n", "\n", "files_and_dicts", ".", "append", "(", "(", "geowiki_files", ",", "geowiki_nd", ")", ")", "\n", "\n", "", "if", "include_togo", ":", "\n", "                ", "togo_files", ",", "togo_nd", "=", "self", ".", "load_files_and_normalizing_dict", "(", "\n", "self", ".", "features_dir", "/", "TogoProcessor", ".", "dataset", ",", "self", ".", "subset_name", ",", "\n", ")", "\n", "files_and_dicts", ".", "append", "(", "(", "togo_files", ",", "togo_nd", ")", ")", "\n", "\n", "", "if", "normalizing_dict", "is", "None", ":", "\n", "# if a normalizing dict wasn't passed to the constructor,", "\n", "# then we want to make our own", "\n", "                ", "self", ".", "normalizing_dict", "=", "self", ".", "adjust_normalizing_dict", "(", "\n", "[", "(", "len", "(", "x", "[", "0", "]", ")", ",", "x", "[", "1", "]", ")", "for", "x", "in", "files_and_dicts", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "normalizing_dict", "=", "normalizing_dict", "\n", "\n", "", "pickle_files", ":", "List", "[", "Path", "]", "=", "[", "]", "\n", "for", "files", ",", "_", "in", "files_and_dicts", ":", "\n", "                ", "pickle_files", ".", "extend", "(", "files", ")", "\n", "", "self", ".", "pickle_files", "=", "pickle_files", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.num_output_classes": [[98, 101], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_output_classes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.__getitem__": [[102, 138], ["isinstance", "pickle.load.isin", "target_file.open", "pickle.load", "isinstance", "torch.from_numpy().float", "torch.tensor().float", "torch.tensor().long", "int", "RuntimeError", "torch.from_numpy", "torch.tensor", "torch.tensor", "data.LandTypeClassificationDataset.remove_bands", "type", "data.LandTypeClassificationDataset._normalize"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseDataInstance.isin", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.remove_bands", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset._normalize"], ["", "def", "__getitem__", "(", "\n", "self", ",", "index", ":", "int", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Return the anchor, neighbour, distant tensors\n        \"\"\"", "\n", "target_file", "=", "self", ".", "pickle_files", "[", "index", "]", "\n", "\n", "# first, we load up the target file", "\n", "with", "target_file", ".", "open", "(", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "target_datainstance", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "if", "isinstance", "(", "target_datainstance", ",", "GeoWikiDataInstance", ")", ":", "\n", "            ", "if", "self", ".", "crop_probability_threshold", "is", "None", ":", "\n", "                ", "label", "=", "target_datainstance", ".", "crop_probability", "\n", "", "else", ":", "\n", "                ", "label", "=", "int", "(", "\n", "target_datainstance", ".", "crop_probability", "\n", ">=", "self", ".", "crop_probability_threshold", "\n", ")", "\n", "", "", "elif", "isinstance", "(", "target_datainstance", ",", "TogoDataInstance", ")", ":", "\n", "            ", "label", "=", "target_datainstance", ".", "is_crop", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f\"Unrecognized data instance type {type(target_datainstance)}\"", "\n", ")", "\n", "\n", "", "weight", "=", "0", "\n", "if", "target_datainstance", ".", "isin", "(", "STR2BB", "[", "\"Togo\"", "]", ")", ":", "\n", "            ", "weight", "=", "1", "\n", "\n", "", "return", "(", "\n", "torch", ".", "from_numpy", "(", "\n", "self", ".", "remove_bands", "(", "x", "=", "self", ".", "_normalize", "(", "target_datainstance", ".", "labelled_array", ")", ")", "\n", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "tensor", "(", "label", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "tensor", "(", "weight", ")", ".", "long", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.adjust_normalizing_dict": [[140, 170], ["typing.cast", "sum", "sum", "sum", "numpy.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "adjust_normalizing_dict", "(", "\n", "dicts", ":", "Sequence", "[", "Tuple", "[", "int", ",", "Optional", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", "]", "]", "\n", ")", "->", "Optional", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "\n", "        ", "for", "length", ",", "single_dict", "in", "dicts", ":", "\n", "            ", "if", "single_dict", "is", "None", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "dicts", "=", "cast", "(", "Sequence", "[", "Tuple", "[", "int", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", "]", ",", "dicts", ")", "\n", "\n", "new_total", "=", "sum", "(", "[", "x", "[", "0", "]", "for", "x", "in", "dicts", "]", ")", "\n", "\n", "new_mean", "=", "(", "\n", "sum", "(", "[", "single_dict", "[", "\"mean\"", "]", "*", "length", "for", "length", ",", "single_dict", "in", "dicts", "]", ")", "\n", "/", "new_total", "\n", ")", "\n", "\n", "new_variance", "=", "(", "\n", "sum", "(", "\n", "[", "\n", "(", "single_dict", "[", "\"std\"", "]", "**", "2", "+", "(", "single_dict", "[", "\"mean\"", "]", "-", "new_mean", ")", "**", "2", ")", "\n", "*", "length", "\n", "for", "length", ",", "single_dict", "in", "dicts", "\n", "]", "\n", ")", "\n", "/", "new_total", "\n", ")", "\n", "\n", "return", "{", "\"mean\"", ":", "new_mean", ",", "\"std\"", ":", "np", ".", "sqrt", "(", "new_variance", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.num_input_features": [[171, 177], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_input_features", "(", "self", ")", "->", "int", ":", "\n", "# assumes the first value in the tuple is x", "\n", "        ", "assert", "len", "(", "self", ".", "pickle_files", ")", ">", "0", ",", "\"No files to load!\"", "\n", "output_tuple", "=", "self", "[", "0", "]", "\n", "return", "output_tuple", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.num_timesteps": [[178, 184], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_timesteps", "(", "self", ")", "->", "int", ":", "\n", "# assumes the first value in the tuple is x", "\n", "        ", "assert", "len", "(", "self", ".", "pickle_files", ")", ">", "0", ",", "\"No files to load!\"", "\n", "output_tuple", "=", "self", "[", "0", "]", "\n", "return", "output_tuple", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.remove_bands": [[185, 206], ["indices_to_remove.append", "len", "src.exporters.sentinel.cloudfree.BANDS.index", "len", "range"], "methods", ["None"], ["", "def", "remove_bands", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Expects the input to be of shape [timesteps, bands]\n        \"\"\"", "\n", "if", "self", ".", "remove_b1_b10", ":", "\n", "            ", "indices_to_remove", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "for", "band", "in", "self", ".", "bands_to_remove", ":", "\n", "                ", "indices_to_remove", ".", "append", "(", "BANDS", ".", "index", "(", "band", ")", ")", "\n", "\n", "", "bands_index", "=", "1", "if", "len", "(", "x", ".", "shape", ")", "==", "2", "else", "2", "\n", "indices_to_keep", "=", "[", "\n", "i", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "bands_index", "]", ")", "if", "i", "not", "in", "indices_to_remove", "\n", "]", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "# timesteps, bands", "\n", "                ", "return", "x", "[", ":", ",", "indices_to_keep", "]", "\n", "", "else", ":", "\n", "# batches, timesteps, bands", "\n", "                ", "return", "x", "[", ":", ",", ":", ",", "indices_to_keep", "]", "\n", "", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.load_files_and_normalizing_dict": [[207, 221], ["list", "pickle.load"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "load_files_and_normalizing_dict", "(", "\n", "features_dir", ":", "Path", ",", "subset_name", ":", "str", "\n", ")", "->", "Tuple", "[", "List", "[", "Path", "]", ",", "Optional", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", "]", ":", "\n", "        ", "pickle_files", "=", "list", "(", "(", "features_dir", "/", "subset_name", ")", ".", "glob", "(", "\"*.pkl\"", ")", ")", "\n", "\n", "# try loading the normalizing dict. By default, if it exists we will use it", "\n", "if", "(", "features_dir", "/", "\"normalizing_dict.pkl\"", ")", ".", "exists", "(", ")", ":", "\n", "            ", "with", "(", "features_dir", "/", "\"normalizing_dict.pkl\"", ")", ".", "open", "(", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "normalizing_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "normalizing_dict", "=", "None", "\n", "\n", "", "return", "pickle_files", ",", "normalizing_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset._normalize": [[222, 228], ["None"], "methods", ["None"], ["", "def", "_normalize", "(", "self", ",", "array", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "if", "self", ".", "normalizing_dict", "is", "None", ":", "\n", "            ", "return", "array", "\n", "", "else", ":", "\n", "            ", "return", "(", "array", "-", "self", ".", "normalizing_dict", "[", "\"mean\"", "]", ")", "/", "self", ".", "normalizing_dict", "[", "\n", "\"std\"", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.data.LandTypeClassificationDataset.__len__": [[230, 232], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "pickle_files", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.utils.tif_to_np": [[20, 58], ["typing.cast", "src.engineer.base.BaseEngineer.load_tif", "numpy.meshgrid", "BaseEngineer.calculate_ndvi.reshape", "numpy.moveaxis", "src.engineer.base.BaseEngineer.maxed_nan_to_num", "utils.TestInstance", "src.engineer.base.BaseEngineer.process_filename", "numpy.squeeze", "numpy.squeeze", "src.engineer.base.BaseEngineer.calculate_ndvi", "lat.reshape", "lon.reshape"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.load_tif", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.maxed_nan_to_num", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.process_filename", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.calculate_ndvi"], ["# see the link above to explain the magic numbers", "\n", "    ", "m_per_deg_lat", "=", "(", "\n", "111132.954", "-", "559.822", "*", "cos", "(", "2.0", "*", "mid_lat", ")", "+", "1.175", "*", "cos", "(", "radians", "(", "4.0", "*", "mid_lat", ")", ")", "\n", ")", "\n", "m_per_deg_lon", "=", "(", "3.14159265359", "/", "180", ")", "*", "6367449", "*", "cos", "(", "radians", "(", "mid_lat", ")", ")", "\n", "\n", "return", "m_per_deg_lat", ",", "m_per_deg_lon", "\n", "\n", "\n", "", "@", "dataclass", "\n", "class", "EEBoundingBox", "(", "BoundingBox", ")", ":", "\n", "    ", "r\"\"\"\n    A bounding box with additional earth-engine specific\n    functionality\n    \"\"\"", "\n", "\n", "def", "to_ee_polygon", "(", "self", ")", "->", "ee", ".", "Geometry", ".", "Polygon", ":", "\n", "        ", "return", "ee", ".", "Geometry", ".", "Polygon", "(", "\n", "[", "\n", "[", "\n", "[", "self", ".", "min_lon", ",", "self", ".", "min_lat", "]", ",", "\n", "[", "self", ".", "min_lon", ",", "self", ".", "max_lat", "]", ",", "\n", "[", "self", ".", "max_lon", ",", "self", ".", "max_lat", "]", ",", "\n", "[", "self", ".", "max_lon", ",", "self", ".", "min_lat", "]", ",", "\n", "]", "\n", "]", "\n", ")", "\n", "\n", "", "def", "to_metres", "(", "self", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "        ", "r\"\"\"\n        :return: [lat metres, lon metres]\n        \"\"\"", "\n", "# https://gis.stackexchange.com/questions/75528/understanding-terms-in-length-of-degree-formula", "\n", "mid_lat", "=", "(", "self", ".", "min_lat", "+", "self", ".", "max_lat", ")", "/", "2.0", "\n", "m_per_deg_lat", ",", "m_per_deg_lon", "=", "metre_per_degree", "(", "mid_lat", ")", "\n", "\n", "delta_lat", "=", "self", ".", "max_lat", "-", "self", ".", "min_lat", "\n", "delta_lon", "=", "self", ".", "max_lon", "-", "self", ".", "min_lon", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.utils.preds_to_xr": [[60, 79], ["range", "pandas.DataFrame().set_index().to_xarray", "pandas.DataFrame().set_index", "pandas.DataFrame"], "function", ["None"], ["\n", "", "def", "to_polygons", "(", "self", ",", "metres_per_patch", ":", "int", "=", "3300", ")", "->", "List", "[", "ee", ".", "Geometry", ".", "Polygon", "]", ":", "\n", "\n", "        ", "lat_metres", ",", "lon_metres", "=", "self", ".", "to_metres", "(", ")", "\n", "\n", "num_cols", "=", "int", "(", "lon_metres", "/", "metres_per_patch", ")", "\n", "num_rows", "=", "int", "(", "lat_metres", "/", "metres_per_patch", ")", "\n", "\n", "print", "(", "f\"Splitting into {num_cols} columns and {num_rows} rows\"", ")", "\n", "\n", "lon_size", "=", "(", "self", ".", "max_lon", "-", "self", ".", "min_lon", ")", "/", "num_cols", "\n", "lat_size", "=", "(", "self", ".", "max_lat", "-", "self", ".", "min_lat", ")", "/", "num_rows", "\n", "\n", "output_polygons", ":", "List", "[", "ee", ".", "Geometry", ".", "Polygon", "]", "=", "[", "]", "\n", "\n", "cur_lon", "=", "self", ".", "min_lon", "\n", "while", "cur_lon", "<", "self", ".", "max_lon", ":", "\n", "            ", "cur_lat", "=", "self", ".", "min_lat", "\n", "while", "cur_lat", "<", "self", ".", "max_lat", ":", "\n", "                ", "output_polygons", ".", "append", "(", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.LSTM.__init__": [[25, 48], ["pytorch_lightning.LightningModule.__init__", "torch.nn.LSTM", "lstm.UnrolledLSTM"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ":", "int", ",", "hparams", ":", "Namespace", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hparmas", "=", "hparams", "\n", "\n", "if", "(", "hparams", ".", "num_lstm_layers", ">", "1", ")", "or", "(", "hparams", ".", "lstm_dropout", "==", "0", ")", ":", "\n", "# if we can, use the default LSTM implementation", "\n", "            ", "self", ".", "lstm", ":", "Union", "[", "nn", ".", "LSTM", ",", "UnrolledLSTM", "]", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hparams", ".", "hidden_vector_size", ",", "\n", "dropout", "=", "hparams", ".", "lstm_dropout", ",", "\n", "batch_first", "=", "True", ",", "\n", "num_layers", "=", "hparams", ".", "num_lstm_layers", ",", "\n", ")", "\n", "", "else", ":", "\n", "# if the LSTM is only one layer,", "\n", "# we will apply dropout between timesteps", "\n", "# instead of between layers", "\n", "            ", "self", ".", "lstm", "=", "UnrolledLSTM", "(", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hparams", ".", "hidden_vector_size", ",", "\n", "dropout", "=", "hparams", ".", "lstm_dropout", ",", "\n", "batch_first", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.LSTM.forward": [[50, 53], ["lstm.LSTM.lstm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "output", ",", "(", "hn", ",", "cn", ")", "=", "self", ".", "lstm", "(", "x", ")", "\n", "return", "hn", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.LSTM.add_base_specific_arguments": [[54, 67], ["argparse.ArgumentParser", "parser_args.items", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_base_specific_arguments", "(", "parent_parser", ":", "ArgumentParser", ")", "->", "ArgumentParser", ":", "\n", "        ", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "\n", "parser_args", ":", "Dict", "[", "str", ",", "Tuple", "[", "Type", ",", "Any", "]", "]", "=", "{", "\n", "\"--num_lstm_layers\"", ":", "(", "int", ",", "1", ")", ",", "\n", "\"--lstm_dropout\"", ":", "(", "float", ",", "0.2", ")", ",", "\n", "}", "\n", "\n", "for", "key", ",", "vals", "in", "parser_args", ".", "items", "(", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "key", ",", "type", "=", "vals", "[", "0", "]", ",", "default", "=", "vals", "[", "1", "]", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTM.__init__": [[70, 83], ["torch.nn.Module.__init__", "lstm.UnrolledLSTMCell", "torch.nn.Dropout", "lstm.UnrolledLSTM.initialize_weights"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.__init__", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTM.initialize_weights"], ["    ", "def", "__init__", "(", "\n", "self", ",", "input_size", ":", "int", ",", "hidden_size", ":", "int", ",", "dropout", ":", "float", ",", "batch_first", ":", "bool", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "rnn", "=", "UnrolledLSTMCell", "(", "\n", "input_size", "=", "input_size", ",", "hidden_size", "=", "hidden_size", ",", "batch_first", "=", "batch_first", "\n", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTM.initialize_weights": [[84, 89], ["math.sqrt", "lstm.UnrolledLSTM.rnn.parameters", "torch.nn.init.uniform_"], "methods", ["None"], ["", "def", "initialize_weights", "(", "self", ")", ":", "\n", "        ", "sqrt_k", "=", "math", ".", "sqrt", "(", "1", "/", "self", ".", "hidden_size", ")", "\n", "for", "parameters", "in", "self", ".", "rnn", ".", "parameters", "(", ")", ":", "\n", "            ", "for", "pam", "in", "parameters", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "pam", ".", "data", ",", "-", "sqrt_k", ",", "sqrt_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTM.forward": [[90, 117], ["range", "x[].unsqueeze", "lstm.UnrolledLSTM.rnn", "outputs.append", "lstm.UnrolledLSTM.dropout", "torch.stack", "torch.zeros", "torch.zeros", "lstm.UnrolledLSTM.cuda", "cell.cuda"], "methods", ["None"], ["", "", "", "def", "forward", "(", "# type: ignore", "\n", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "state", ":", "Optional", "[", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "\n", "        ", "sequence_length", "=", "x", ".", "shape", "[", "1", "]", "if", "self", ".", "batch_first", "else", "x", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "if", "self", ".", "batch_first", "else", "x", ".", "shape", "[", "1", "]", "\n", "\n", "if", "state", "is", "None", ":", "\n", "# initialize to zeros", "\n", "            ", "hidden", ",", "cell", "=", "(", "\n", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ",", "\n", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ",", "\n", ")", "\n", "\n", "if", "x", ".", "is_cuda", ":", "\n", "                ", "hidden", ",", "cell", "=", "hidden", ".", "cuda", "(", ")", ",", "cell", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "hidden", ",", "cell", "=", "state", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sequence_length", ")", ":", "\n", "            ", "input_x", "=", "x", "[", ":", ",", "i", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "\n", "_", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "rnn", "(", "input_x", ",", "(", "hidden", ",", "cell", ")", ")", "\n", "outputs", ".", "append", "(", "hidden", ")", "\n", "hidden", "=", "self", ".", "dropout", "(", "hidden", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "outputs", ",", "dim", "=", "0", ")", ",", "(", "hidden", ",", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.__init__": [[124, 176], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ":", "int", ",", "hidden_size", ":", "int", ",", "batch_first", ":", "bool", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "\n", "self", ".", "forget_gate", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "nn", ".", "Linear", "(", "\n", "in_features", "=", "input_size", "+", "hidden_size", ",", "\n", "out_features", "=", "hidden_size", ",", "\n", "bias", "=", "True", ",", "\n", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "update_gate", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "nn", ".", "Linear", "(", "\n", "in_features", "=", "input_size", "+", "hidden_size", ",", "\n", "out_features", "=", "hidden_size", ",", "\n", "bias", "=", "True", ",", "\n", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "update_candidates", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "nn", ".", "Linear", "(", "\n", "in_features", "=", "input_size", "+", "hidden_size", ",", "\n", "out_features", "=", "hidden_size", ",", "\n", "bias", "=", "True", ",", "\n", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "output_gate", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "nn", ".", "Linear", "(", "\n", "in_features", "=", "input_size", "+", "hidden_size", ",", "\n", "out_features", "=", "hidden_size", ",", "\n", "bias", "=", "True", ",", "\n", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "cell_state_activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.model_bases.lstm.UnrolledLSTMCell.forward": [[177, 199], ["lstm.UnrolledLSTMCell.forget_gate", "lstm.UnrolledLSTMCell.update_gate", "lstm.UnrolledLSTMCell.update_candidates", "lstm.UnrolledLSTMCell.output_gate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstm.UnrolledLSTMCell.cell_state_activation", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "forward", "(", "# type: ignore", "\n", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "state", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "hidden", ",", "cell", "=", "state", "\n", "\n", "if", "self", ".", "batch_first", ":", "\n", "            ", "hidden", ",", "cell", "=", "torch", ".", "transpose", "(", "hidden", ",", "0", ",", "1", ")", ",", "torch", ".", "transpose", "(", "cell", ",", "0", ",", "1", ")", "\n", "\n", "", "forget_state", "=", "self", ".", "forget_gate", "(", "torch", ".", "cat", "(", "(", "x", ",", "hidden", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "update_state", "=", "self", ".", "update_gate", "(", "torch", ".", "cat", "(", "(", "x", ",", "hidden", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "cell_candidates", "=", "self", ".", "update_candidates", "(", "torch", ".", "cat", "(", "(", "x", ",", "hidden", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "updated_cell", "=", "(", "forget_state", "*", "cell", ")", "+", "(", "update_state", "*", "cell_candidates", ")", "\n", "\n", "output_state", "=", "self", ".", "output_gate", "(", "torch", ".", "cat", "(", "(", "x", ",", "hidden", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "updated_hidden", "=", "output_state", "*", "self", ".", "cell_state_activation", "(", "updated_cell", ")", "\n", "\n", "if", "self", ".", "batch_first", ":", "\n", "            ", "updated_hidden", "=", "torch", ".", "transpose", "(", "updated_hidden", ",", "0", ",", "1", ")", "\n", "updated_cell", "=", "torch", ".", "transpose", "(", "updated_cell", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "updated_hidden", ",", "(", "updated_hidden", ",", "updated_cell", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.predict.landcover_mapper": [[19, 106], ["pathlib.Path", "pathlib.Path.glob", "print", "src.models.LandCoverMapper.load_from_checkpoint", "print", "LandCoverMapper.load_from_checkpoint.predict", "src.utils.sentinel_as_tci().isel", "tci.sortby().sortby.sortby().sortby", "out.sortby().sortby.sortby().sortby", "matplotlib.clf", "matplotlib.subplots", "fig.suptitle", "numpy.clip", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].imshow", "fig.colorbar", "save_dir.mkdir", "matplotlib.savefig", "matplotlib.close", "out.sortby().sortby.to_netcdf", "tci.sortby().sortby.x.min", "tci.sortby().sortby.x.max", "tci.sortby().sortby.y.min", "tci.sortby().sortby.y.max", "numpy.moveaxis", "pathlib.Path", "src.utils.sentinel_as_tci", "tci.sortby().sortby.sortby", "out.sortby().sortby.sortby", "cartopy.PlateCarree", "cartopy.PlateCarree", "cartopy.PlateCarree", "cartopy.PlateCarree", "ax.ravel().tolist", "src.engineer.base.BaseEngineer.load_tif", "cartopy.PlateCarree", "float", "float", "out.sortby().sortby.lat.min", "out.sortby().sortby.lon.min", "ax.ravel", "datetime.datetime"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.models.models.LandCoverMapper.predict", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.utils.visualize.sentinel_as_tci", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.load_tif"], ["def", "landcover_mapper", "(", ")", ":", "\n", "\n", "    ", "data_dir", "=", "\"../data\"", "\n", "\n", "test_folder", "=", "Path", "(", "\"../data/raw/earth_engine_region\"", ")", "\n", "test_files", "=", "test_folder", ".", "glob", "(", "\"*.tif\"", ")", "\n", "\n", "model_path", "=", "\"../data/model.ckpt\"", "\n", "print", "(", "f\"Using model {model_path}\"", ")", "\n", "\n", "model", "=", "LandCoverMapper", ".", "load_from_checkpoint", "(", "model_path", ")", "\n", "\n", "for", "test_path", "in", "test_files", ":", "\n", "\n", "        ", "print", "(", "f\"Running for {test_path}\"", ")", "\n", "out", "=", "model", ".", "predict", "(", "test_path", ")", "\n", "\n", "# the date passed is not too important here", "\n", "tci", "=", "sentinel_as_tci", "(", "\n", "BaseEngineer", ".", "load_tif", "(", "\n", "test_path", ",", "start_date", "=", "datetime", "(", "2020", ",", "1", ",", "1", ")", ",", "days_per_timestep", "=", "30", "\n", ")", ",", "\n", "scale", "=", "False", ",", "\n", ")", ".", "isel", "(", "time", "=", "-", "1", ")", "\n", "\n", "tci", "=", "tci", ".", "sortby", "(", "\"x\"", ")", ".", "sortby", "(", "\"y\"", ")", "\n", "out", "=", "out", ".", "sortby", "(", "\"lat\"", ")", ".", "sortby", "(", "\"lon\"", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "\n", "1", ",", "3", ",", "figsize", "=", "(", "20", ",", "7.5", ")", ",", "subplot_kw", "=", "{", "\"projection\"", ":", "ccrs", ".", "PlateCarree", "(", ")", "}", "\n", ")", "\n", "\n", "fig", ".", "suptitle", "(", "\n", "f\"Model results for tile with bottom left corner:\"", "\n", "f\"\\nat latitude {float(out.lat.min())}\"", "\n", "f\"\\n and longitude {float(out.lon.min())}\"", ",", "\n", "fontsize", "=", "15", ",", "\n", ")", "\n", "# ax 1 - original", "\n", "img_extent_1", "=", "(", "tci", ".", "x", ".", "min", "(", ")", ",", "tci", ".", "x", ".", "max", "(", ")", ",", "tci", ".", "y", ".", "min", "(", ")", ",", "tci", ".", "y", ".", "max", "(", ")", ")", "\n", "img", "=", "np", ".", "clip", "(", "np", ".", "moveaxis", "(", "tci", ".", "values", ",", "0", ",", "-", "1", ")", ",", "0", ",", "1", ")", "\n", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "\"True colour image\"", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "\n", "img", ",", "origin", "=", "\"upper\"", ",", "extent", "=", "img_extent_1", ",", "transform", "=", "ccrs", ".", "PlateCarree", "(", ")", "\n", ")", "\n", "\n", "# ax 2 - mask", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "\"Mask\"", ")", "\n", "im", "=", "ax", "[", "1", "]", ".", "imshow", "(", "\n", "out", ".", "prediction_0", ",", "\n", "origin", "=", "\"upper\"", ",", "\n", "extent", "=", "img_extent_1", ",", "\n", "transform", "=", "ccrs", ".", "PlateCarree", "(", ")", ",", "\n", "vmin", "=", "0", ",", "\n", "vmax", "=", "1", ",", "\n", ")", "\n", "\n", "# finally, all together", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "\"Mask on top of the true colour image\"", ")", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "\n", "img", ",", "origin", "=", "\"upper\"", ",", "extent", "=", "img_extent_1", ",", "transform", "=", "ccrs", ".", "PlateCarree", "(", ")", "\n", ")", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "\n", "out", ".", "prediction_0", ">", "0.5", ",", "\n", "origin", "=", "\"upper\"", ",", "\n", "extent", "=", "img_extent_1", ",", "\n", "transform", "=", "ccrs", ".", "PlateCarree", "(", ")", ",", "\n", "alpha", "=", "0.3", ",", "\n", "vmin", "=", "0", ",", "\n", "vmax", "=", "1", ",", "\n", ")", "\n", "\n", "fig", ".", "colorbar", "(", "\n", "im", ",", "ax", "=", "ax", ".", "ravel", "(", ")", ".", "tolist", "(", ")", ",", "\n", ")", "\n", "\n", "save_dir", "=", "Path", "(", "data_dir", ")", "/", "model", ".", "__class__", ".", "__name__", "\n", "save_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "plt", ".", "savefig", "(", "\n", "save_dir", "/", "f\"results_{test_path.name}.png\"", ",", "bbox_inches", "=", "\"tight\"", ",", "dpi", "=", "300", "\n", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# plt.show()", "\n", "out", ".", "to_netcdf", "(", "save_dir", "/", "f\"preds_{test_path.name}.nc\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.process.process_geowiki": [[12, 15], ["src.processors.GeoWikiProcessor", "src.processors.GeoWikiProcessor.process", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.togo.TogoProcessor.process"], ["def", "process_geowiki", "(", ")", ":", "\n", "    ", "processor", "=", "GeoWikiProcessor", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "processor", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.process.process_togo": [[17, 20], ["src.processors.TogoProcessor", "src.processors.TogoProcessor.process", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.processors.togo.TogoProcessor.process"], ["", "def", "process_togo", "(", ")", ":", "\n", "    ", "processor", "=", "TogoProcessor", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "processor", ".", "process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.split_tiff.splitImageIntoCells": [[13, 28], ["rasterio.open", "math.ceil", "math.ceil", "range", "min", "range", "min", "split_tiff.getTileGeom", "split_tiff.getCellFromGeom"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.split_tiff.getTileGeom", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.split_tiff.getCellFromGeom"], ["def", "splitImageIntoCells", "(", "\n", "img_path", ":", "Path", ",", "filename", ":", "str", ",", "squareDim", ":", "int", ",", "output_folder", ":", "Path", "\n", ")", ":", "\n", "\n", "    ", "img", "=", "rasterio", ".", "open", "(", "img_path", ")", "\n", "numberOfCellsWide", "=", "math", ".", "ceil", "(", "img", ".", "shape", "[", "1", "]", "/", "squareDim", ")", "\n", "numberOfCellsHigh", "=", "math", ".", "ceil", "(", "img", ".", "shape", "[", "0", "]", "/", "squareDim", ")", "\n", "count", "=", "0", "\n", "for", "hc", "in", "range", "(", "numberOfCellsHigh", ")", ":", "\n", "        ", "y", "=", "min", "(", "hc", "*", "squareDim", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "for", "wc", "in", "range", "(", "numberOfCellsWide", ")", ":", "\n", "            ", "x", "=", "min", "(", "wc", "*", "squareDim", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "geom", "=", "getTileGeom", "(", "img", ".", "transform", ",", "x", ",", "y", ",", "squareDim", ")", "\n", "getCellFromGeom", "(", "img", ",", "geom", ",", "filename", ",", "count", ",", "output_folder", ")", "\n", "count", "=", "count", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.split_tiff.getTileGeom": [[31, 35], ["shapely.geometry.box"], "function", ["None"], ["", "", "", "def", "getTileGeom", "(", "transform", ",", "x", ",", "y", ",", "squareDim", ")", ":", "\n", "    ", "corner1", "=", "(", "x", ",", "y", ")", "*", "transform", "\n", "corner2", "=", "(", "x", "+", "squareDim", ",", "y", "+", "squareDim", ")", "*", "transform", "\n", "return", "geometry", ".", "box", "(", "corner1", "[", "0", "]", ",", "corner1", "[", "1", "]", ",", "corner2", "[", "0", "]", ",", "corner2", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.split_tiff.getCellFromGeom": [[38, 42], ["rasterio.mask.mask", "split_tiff.writeImageAsGeoTIFF"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.split_tiff.writeImageAsGeoTIFF"], ["", "def", "getCellFromGeom", "(", "img", ",", "geom", ",", "filename", ",", "count", ",", "output_folder", ")", ":", "\n", "    ", "crop", ",", "cropTransform", "=", "mask", "(", "img", ",", "[", "geom", "]", ",", "crop", "=", "True", ")", "\n", "writeImageAsGeoTIFF", "(", "\n", "crop", ",", "cropTransform", ",", "img", ".", "meta", ",", "img", ".", "crs", ",", "f\"{count}-{filename}\"", ",", "output_folder", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.split_tiff.writeImageAsGeoTIFF": [[46, 58], ["metadata.update", "rasterio.open", "dest.write"], "function", ["None"], ["", "def", "writeImageAsGeoTIFF", "(", "img", ",", "transform", ",", "metadata", ",", "crs", ",", "filename", ",", "output_folder", ")", ":", "\n", "    ", "metadata", ".", "update", "(", "\n", "{", "\n", "\"driver\"", ":", "\"GTiff\"", ",", "\n", "\"height\"", ":", "img", ".", "shape", "[", "1", "]", ",", "\n", "\"width\"", ":", "img", ".", "shape", "[", "2", "]", ",", "\n", "\"transform\"", ":", "transform", ",", "\n", "\"crs\"", ":", "crs", ",", "\n", "}", "\n", ")", "\n", "with", "rasterio", ".", "open", "(", "output_folder", "/", "f\"{filename}.tif\"", ",", "\"w\"", ",", "**", "metadata", ")", "as", "dest", ":", "\n", "        ", "dest", ".", "write", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.engineer.engineer_geowiki": [[13, 16], ["src.engineer.GeoWikiEngineer", "src.engineer.GeoWikiEngineer.engineer", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.engineer"], ["def", "engineer_geowiki", "(", ")", ":", "\n", "    ", "engineer", "=", "GeoWikiEngineer", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "engineer", ".", "engineer", "(", "val_set_size", "=", "0.2", ",", "test_set_size", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.engineer.engineer_togo": [[18, 24], ["src.engineer.TogoEngineer", "src.engineer.TogoEngineer.engineer", "src.engineer.TogoEvaluationEngineer", "src.engineer.TogoEvaluationEngineer.engineer", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.engineer", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.engineer"], ["", "def", "engineer_togo", "(", ")", ":", "\n", "    ", "engineer", "=", "TogoEngineer", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "engineer", ".", "engineer", "(", "val_set_size", "=", "0.2", ",", "test_set_size", "=", "0", ")", "\n", "\n", "eval_engineer", "=", "TogoEvaluationEngineer", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "eval_engineer", ".", "engineer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.export.export_geowiki": [[17, 21], ["src.exporters.GeoWikiExporter", "src.exporters.GeoWikiExporter.export", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.export"], ["def", "export_geowiki", "(", ")", ":", "\n", "\n", "    ", "exporter", "=", "GeoWikiExporter", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "exporter", ".", "export", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.export.export_geowiki_sentinel_ee": [[23, 26], ["src.exporters.GeoWikiSentinelExporter", "src.exporters.GeoWikiSentinelExporter.export_for_labels", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.export_for_labels"], ["", "def", "export_geowiki_sentinel_ee", "(", ")", ":", "\n", "    ", "exporter", "=", "GeoWikiSentinelExporter", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "exporter", ".", "export_for_labels", "(", "num_labelled_points", "=", "None", ",", "monitor", "=", "False", ",", "checkpoint", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.export.export_togo": [[28, 32], ["src.exporters.TogoSentinelExporter", "src.exporters.TogoSentinelExporter.export_for_labels", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.togo.TogoSentinelExporter.export_for_labels"], ["", "def", "export_togo", "(", ")", ":", "\n", "    ", "exporter", "=", "TogoSentinelExporter", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "exporter", ".", "export_for_labels", "(", "\n", "num_labelled_points", "=", "None", ",", "monitor", "=", "False", ",", "checkpoint", "=", "True", ",", "evaluation_set", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.export.export_region": [[35, 43], ["src.exporters.RegionalExporter", "src.exporters.RegionalExporter.export_for_region", "pathlib.Path", "datetime.date"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.region.RegionalExporter.export_for_region"], ["", "def", "export_region", "(", ")", ":", "\n", "    ", "exporter", "=", "RegionalExporter", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "exporter", ".", "export_for_region", "(", "\n", "region_name", "=", "\"Togo\"", ",", "\n", "end_date", "=", "date", "(", "2020", ",", "4", ",", "20", ")", ",", "\n", "monitor", "=", "False", ",", "\n", "checkpoint", "=", "True", ",", "\n", "metres_per_polygon", "=", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.export.export_gdrive": [[46, 49], ["src.exporters.GDriveExporter", "src.exporters.GDriveExporter.export", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.cloudfree.export"], ["", "def", "export_gdrive", "(", ")", ":", "\n", "    ", "exporter", "=", "GDriveExporter", "(", "Path", "(", "\"../data\"", ")", ")", "\n", "exporter", ".", "export", "(", "region_name", "=", "\"Togo\"", ",", "max_downloads", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.scripts.export.cancel_tasks": [[51, 53], ["src.exporters.cancel_all_tasks"], "function", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.sentinel.utils.cancel_all_tasks"], ["", "def", "cancel_tasks", "(", ")", ":", "\n", "    ", "cancel_all_tasks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.tests.test_engineer.TestEngineer.test_sentinel_files_correctly_retrieved": [[10, 33], ["sentinel_hub_path.mkdir", "range", "MockEngineer", "src.engineer.GeoWikiEngineer.get_geospatial_files", "range", "len"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.get_geospatial_files"], ["    ", "def", "test_sentinel_files_correctly_retrieved", "(", "self", ",", "tmp_path", ")", ":", "\n", "\n", "# setup the files", "\n", "        ", "sentinel_hub_path", "=", "tmp_path", "/", "\"raw\"", "/", "GeoWikiSentinelExporter", ".", "dataset", "\n", "sentinel_hub_path", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "num_files", "=", "10", "\n", "for", "i", "in", "range", "(", "num_files", ")", ":", "\n", "\n", "            ", "(", "sentinel_hub_path", "/", "f\"{i}.tif\"", ")", ".", "touch", "(", ")", "\n", "\n", "# we want to make sure the engineer doesn't pick these guys up", "\n", "(", "sentinel_hub_path", "/", "f\"{i}.npy\"", ")", ".", "touch", "(", ")", "\n", "\n", "", "class", "MockEngineer", ":", "\n", "            ", "sentinel_dataset", "=", "GeoWikiSentinelExporter", ".", "dataset", "\n", "\n", "", "engineer", "=", "MockEngineer", "(", ")", "\n", "sentinel_files", "=", "GeoWikiEngineer", ".", "get_geospatial_files", "(", "engineer", ",", "tmp_path", ")", "\n", "assert", "len", "(", "sentinel_files", ")", "==", "num_files", "\n", "\n", "for", "i", "in", "range", "(", "num_files", ")", ":", "\n", "            ", "assert", "(", "sentinel_hub_path", "/", "f\"{i}.tif\"", ")", "in", "sentinel_files", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.tests.test_engineer.TestEngineer.test_find_nearest": [[34, 40], ["numpy.array", "src.engineer.base.BaseEngineer.find_nearest"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.find_nearest"], ["", "", "def", "test_find_nearest", "(", "self", ")", ":", "\n", "        ", "array", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n", "target", "=", "1.1", "\n", "\n", "assert", "BaseEngineer", ".", "find_nearest", "(", "array", ",", "target", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.tests.test_engineer.TestEngineer.test_randomly_selected_latlons_not_labels": [[41, 64], ["monkeypatch.setattr", "numpy.array", "numpy.array", "src.engineer.base.BaseEngineer.randomly_select_latlon", "src.engineer.base.BaseEngineer.randomly_select_latlon"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.randomly_select_latlon", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.randomly_select_latlon"], ["", "def", "test_randomly_selected_latlons_not_labels", "(", "self", ",", "monkeypatch", ")", ":", "\n", "        ", "def", "return_const_latlons", "(", "array", ",", "size", ",", "replace", ")", ":", "\n", "            ", "return", "array", "[", ":", "size", "]", "\n", "\n", "", "monkeypatch", ".", "setattr", "(", "np", ".", "random", ",", "\"choice\"", ",", "return_const_latlons", ")", "\n", "\n", "lat_array", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "lon_array", "=", "np", ".", "array", "(", "[", "4", ",", "5", ",", "6", "]", ")", "\n", "\n", "# test case 1 - both the lat and lon don't match - should skip", "\n", "label_lat", ",", "label_lon", "=", "1", ",", "4", "\n", "random_lat", ",", "random_lon", "=", "BaseEngineer", ".", "randomly_select_latlon", "(", "\n", "lat_array", ",", "lon_array", ",", "label_lat", ",", "label_lon", "\n", ")", "\n", "assert", "(", "random_lat", "==", "2", ")", "and", "(", "random_lon", "==", "5", ")", "\n", "\n", "# test case 2 - one of the lat and lon do match, but the other doesn't", "\n", "# - shouldn't skip", "\n", "label_lat", ",", "label_lon", "=", "1", ",", "2", "\n", "random_lat", ",", "random_lon", "=", "BaseEngineer", ".", "randomly_select_latlon", "(", "\n", "lat_array", ",", "lon_array", ",", "label_lat", ",", "label_lon", "\n", ")", "\n", "assert", "(", "random_lat", "==", "1", ")", "and", "(", "random_lon", "==", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.tests.test_engineer.TestEngineer.test_mixed_nan_to_num": [[65, 76], ["numpy.array", "src.engineer.base.BaseEngineer.maxed_nan_to_num", "src.engineer.base.BaseEngineer.maxed_nan_to_num", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.maxed_nan_to_num", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.maxed_nan_to_num"], ["", "def", "test_mixed_nan_to_num", "(", "self", ")", ":", "\n", "\n", "        ", "array", "=", "np", ".", "array", "(", "[", "1", ",", "np", ".", "nan", ",", "1", ",", "np", ".", "nan", "]", ")", "\n", "\n", "# case 1 - the array has less nans than would be triggered", "\n", "num_array", "=", "BaseEngineer", ".", "maxed_nan_to_num", "(", "array", ",", "nan", "=", "0", ",", "max_ratio", "=", "0.75", ")", "\n", "assert", "(", "num_array", "==", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", ",", "0", "]", ")", ")", ".", "all", "(", ")", "\n", "\n", "# case 2 - the array has more nans than would be triggered", "\n", "num_array", "=", "BaseEngineer", ".", "maxed_nan_to_num", "(", "array", ",", "nan", "=", "0", ",", "max_ratio", "=", "0.25", ")", "\n", "assert", "num_array", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.tests.test_engineer.TestEngineer.test_normalizing_dict_correctly_calculated": [[77, 98], ["processed_folder.mkdir", "xarray.Dataset().to_netcdf", "numpy.array", "numpy.array", "src.engineer.GeoWikiEngineer", "src.engineer.GeoWikiEngineer.update_normalizing_values", "src.engineer.GeoWikiEngineer.update_normalizing_values", "src.engineer.GeoWikiEngineer.calculate_normalizing_dict", "xarray.Dataset", "numpy.array", "numpy.array", "numpy.ones", "numpy.std", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.update_normalizing_values", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.update_normalizing_values", "home.repos.pwc.inspect_result.nasaharvest_togo-crop-mask.engineer.base.BaseEngineer.calculate_normalizing_dict"], ["", "def", "test_normalizing_dict_correctly_calculated", "(", "self", ",", "tmp_path", ")", ":", "\n", "\n", "# setup the files)", "\n", "        ", "processed_folder", "=", "tmp_path", "/", "\"processed\"", "/", "GeoWikiExporter", ".", "dataset", "\n", "processed_folder", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "xr", ".", "Dataset", "(", "{", "\"FEATURES\"", ":", "np", ".", "ones", "(", "10", ")", "}", ")", ".", "to_netcdf", "(", "processed_folder", "/", "\"data.nc\"", ")", "\n", "\n", "array_1", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "2", ",", "2", ",", "4", "]", "]", ")", "\n", "array_2", "=", "np", ".", "array", "(", "[", "[", "2", ",", "2", ",", "4", "]", ",", "[", "1", ",", "2", ",", "3", "]", "]", ")", "\n", "\n", "engineer", "=", "GeoWikiEngineer", "(", "tmp_path", ")", "\n", "\n", "engineer", ".", "update_normalizing_values", "(", "array_1", ")", "\n", "engineer", ".", "update_normalizing_values", "(", "array_2", ")", "\n", "\n", "normalizing_values", "=", "engineer", ".", "calculate_normalizing_dict", "(", ")", "\n", "\n", "assert", "(", "normalizing_values", "[", "\"mean\"", "]", "==", "np", ".", "array", "(", "[", "1.5", ",", "2", ",", "3.5", "]", ")", ")", ".", "all", "(", ")", "\n", "assert", "(", "\n", "normalizing_values", "[", "\"std\"", "]", "\n", "==", "np", ".", "array", "(", "[", "np", ".", "std", "(", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "ddof", "=", "1", ")", ",", "0", ",", "np", ".", "std", "(", "[", "3", ",", "4", ",", "4", ",", "3", "]", ",", "ddof", "=", "1", ")", "]", ")", "\n", ")", ".", "all", "(", ")", "\n"]]}