{"home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.Baseline.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.Baseline.predict": [[18, 20], ["class_sota.Baseline.model.prediction"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.prediction"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "prediction", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.Baseline.train": [[22, 24], ["class_sota.Baseline.model.training"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.training"], ["", "def", "train", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "model", ".", "training", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.CS.__init__": [[31, 47], ["class_sota.Baseline.__init__", "class_sota.CS.model.change_class_weights"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.__init__", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.change_class_weights"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "update_freq", ",", "upper_weight", ")", ":", "\n", "        ", "Baseline", ".", "__init__", "(", "self", ",", "model", ")", "\n", "\n", "# default values from paper", "\n", "self", ".", "cs_weight_abnormal", "=", "0.05", "# abnormal", "\n", "self", ".", "cs_weight_normal", "=", "0.95", "# normal", "\n", "self", ".", "cs_weight_pos", "=", "self", ".", "cs_weight_normal", "/", "self", ".", "cs_weight_abnormal", "\n", "self", ".", "cs_weight_neg", "=", "1.0", "\n", "\n", "# adaptive cs", "\n", "self", ".", "update_freq", "=", "update_freq", "\n", "self", ".", "upper_weight", "=", "upper_weight", "\n", "\n", "# init", "\n", "class_weights", "=", "{", "0", ":", "self", ".", "cs_weight_neg", ",", "1", ":", "self", ".", "cs_weight_pos", "}", "\n", "self", ".", "model", ".", "change_class_weights", "(", "class_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.CS.adapt_costs": [[48, 58], ["class_sota.CS.model.change_class_weights"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.change_class_weights"], ["", "def", "adapt_costs", "(", "self", ",", "current_time", ",", "new_cs_weight_neg", ",", "new_cs_weight_pos", ")", ":", "\n", "        ", "if", "current_time", "%", "self", ".", "update_freq", "==", "0", ":", "\n", "            ", "if", "new_cs_weight_neg", ">", "self", ".", "upper_weight", ":", "\n", "                ", "new_cs_weight_neg", "=", "self", ".", "upper_weight", "\n", "\n", "", "if", "new_cs_weight_pos", ">", "self", ".", "upper_weight", ":", "\n", "                ", "new_cs_weight_pos", "=", "self", ".", "upper_weight", "\n", "\n", "", "class_weights", "=", "{", "0", ":", "new_cs_weight_neg", ",", "1", ":", "new_cs_weight_pos", "}", "\n", "self", ".", "model", ".", "change_class_weights", "(", "class_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.Sliding.__init__": [[65, 73], ["class_sota.Baseline.__init__", "collections.deque", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "sliding_window_size", ")", ":", "\n", "        ", "Baseline", ".", "__init__", "(", "self", ",", "model", ")", "\n", "\n", "# init", "\n", "self", ".", "sliding_window_size", "=", "sliding_window_size", "\n", "\n", "self", ".", "xs", "=", "deque", "(", "maxlen", "=", "self", ".", "sliding_window_size", ")", "\n", "self", ".", "ys", "=", "deque", "(", "maxlen", "=", "self", ".", "sliding_window_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.Sliding.append_to_win": [[75, 90], ["class_sota.Sliding.xs.append", "class_sota.Sliding.ys.append", "len", "class_sota.Sliding.model.change_minibatch_size", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.change_minibatch_size"], ["", "def", "append_to_win", "(", "self", ",", "x", ",", "y", ",", "n_features", ")", ":", "\n", "# Append to queues (sliding windows)", "\n", "        ", "self", ".", "xs", ".", "append", "(", "x", ")", "\n", "self", ".", "ys", ".", "append", "(", "y", ")", "\n", "\n", "# batch GD", "\n", "size", "=", "len", "(", "self", ".", "ys", ")", "\n", "self", ".", "model", ".", "change_minibatch_size", "(", "size", ")", "\n", "\n", "# convert queues to np arrays", "\n", "x", "=", "np", ".", "array", "(", "self", ".", "xs", ")", ".", "reshape", "(", "size", ",", "n_features", ")", "\n", "y", "=", "np", ".", "array", "(", "self", ".", "ys", ")", ".", "reshape", "(", "size", ",", "1", ")", "\n", "\n", "# return", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.OOB.__init__": [[98, 101], ["numpy.zeros", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "models", ")", ":", "\n", "        ", "self", ".", "models", "=", "models", "\n", "self", ".", "flags_train", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "models", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.OOB.predict": [[103, 119], ["numpy.mean().reshape", "max", "numpy.array", "numpy.reshape", "round", "m.prediction", "a.flatten", "numpy.mean", "collections.Counter"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.prediction"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "preds", "=", "[", "m", ".", "prediction", "(", "x", ")", "[", "0", "]", "for", "m", "in", "self", ".", "models", "]", "\n", "y_hats", "=", "[", "a", ".", "flatten", "(", ")", "[", "0", "]", "for", "a", "in", "preds", "]", "\n", "\n", "# average vote\u00a0", "\n", "y_hats_avg", "=", "np", ".", "mean", "(", "y_hats", ")", ".", "reshape", "(", "1", ",", "1", ")", "\n", "# y_hats_avg_class = np.around(y_hats_avg)", "\n", "\n", "# majority vote", "\n", "rounded", "=", "[", "round", "(", "x", ")", "for", "x", "in", "y_hats", "]", "\n", "y_hats_avg_class", "=", "max", "(", "rounded", ",", "key", "=", "Counter", "(", "rounded", ")", ".", "get", ")", "\n", "\n", "temp", "=", "np", ".", "array", "(", "y_hats_avg_class", ")", "\n", "y_hats_avg_class", "=", "np", ".", "reshape", "(", "temp", ",", "(", "1", ",", "1", ")", ")", "\n", "\n", "return", "y_hats_avg", ",", "y_hats_avg_class", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.OOB.train": [[121, 125], ["m.get_num_epochs", "m.training"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.get_num_epochs", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.training"], ["", "def", "train", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "models", ":", "\n", "            ", "if", "m", ".", "get_num_epochs", "(", ")", "!=", "0", ":", "\n", "                ", "m", ".", "training", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.OOB.oob_oversample": [[127, 134], ["random_state.poisson", "m.change_num_epochs"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.change_num_epochs"], ["", "", "", "def", "oob_oversample", "(", "self", ",", "random_state", ",", "imbalance_rate", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "models", ":", "\n", "# sample from Poisson", "\n", "            ", "k", "=", "random_state", ".", "poisson", "(", "imbalance_rate", ")", "\n", "\n", "# change number of epochs", "\n", "m", ".", "change_num_epochs", "(", "k", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kmalialis_areba.None.plot_results.create_plots": [[13, 63], ["matplotlib.figure", "range", "matplotlib.xlabel", "matplotlib.xticks", "matplotlib.ylabel", "matplotlib.yticks", "matplotlib.ylim", "matplotlib.grid", "matplotlib.show", "len", "numpy.loadtxt", "numpy.mean", "numpy.arange", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.xlim", "numpy.arange", "numpy.arange", "matplotlib.legend", "plt.legend.get_frame().set_alpha", "numpy.std", "numpy.sqrt", "str", "plt.legend.get_frame"], "function", ["None"], ["def", "create_plots", "(", "list_filenames", ",", "list_legend_names", ",", "metric", ",", "y_axis_low", "=", "0.0", ",", "step", "=", "0.2", ",", "loc", "=", "'lower right'", ",", "out_name", "=", "''", ",", "flag_legend", "=", "1", ")", ":", "\n", "    ", "size", "=", "42", "\n", "size_legend", "=", "25", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "\n", "# markers = ['o', 'x', 'd', 's', '^', 'v', '>', '<']", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "list_filenames", ")", ")", ":", "\n", "        ", "arr", "=", "np", ".", "loadtxt", "(", "list_filenames", "[", "i", "]", ",", "delimiter", "=", "', '", ")", "# load data", "\n", "\n", "means", "=", "np", ".", "mean", "(", "arr", ",", "axis", "=", "0", ")", "# y-axis values", "\n", "x_axis", "=", "np", ".", "arange", "(", "means", ".", "shape", "[", "0", "]", ")", "#\u00a0x-axis values", "\n", "se", "=", "np", ".", "std", "(", "arr", ",", "ddof", "=", "1", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "arr", ".", "shape", "[", "0", "]", ")", "# standard error (ddof=1 for sample)", "\n", "\n", "# markers_on = range(0, arr.shape[1], 500)", "\n", "# plt.plot(x_axis, means, marker=markers[i], markevery=markers_on, label=str(list_legend_names[i]))", "\n", "plt", ".", "plot", "(", "x_axis", ",", "means", ",", "label", "=", "str", "(", "list_legend_names", "[", "i", "]", ")", ")", "\n", "plt", ".", "fill_between", "(", "x_axis", ",", "means", "-", "se", ",", "means", "+", "se", ",", "alpha", "=", "0.2", ")", "\n", "\n", "# x-axis", "\n", "plt", ".", "xlim", "(", "0", ",", "arr", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# y-axis", "\n", "", "if", "metric", "==", "'gmeans'", ":", "\n", "        ", "y_axis_label", "=", "'G-mean'", "\n", "", "elif", "metric", "==", "'recalls'", ":", "\n", "        ", "y_axis_label", "=", "'Recall'", "\n", "", "elif", "metric", "==", "'specificities'", ":", "\n", "        ", "y_axis_label", "=", "'Specificity'", "\n", "\n", "", "plt", ".", "xlabel", "(", "'Time Step'", ",", "fontsize", "=", "size", ",", "weight", "=", "'bold'", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "5000", ",", "1000", ")", ",", "fontsize", "=", "size", ")", "\n", "\n", "plt", ".", "ylabel", "(", "y_axis_label", ",", "fontsize", "=", "size", ",", "weight", "=", "'bold'", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "y_axis_low", ",", "1.000001", ",", "step", ")", ",", "fontsize", "=", "size", ")", "\n", "plt", ".", "ylim", "(", "y_axis_low", ",", "1.0", ")", "\n", "\n", "# legend", "\n", "if", "flag_legend", ":", "\n", "        ", "leg", "=", "plt", ".", "legend", "(", "ncol", "=", "1", ",", "loc", "=", "loc", ",", "fontsize", "=", "size_legend", ")", "\n", "leg", ".", "get_frame", "(", ")", ".", "set_alpha", "(", "0.9", ")", "\n", "\n", "# grid", "\n", "", "plt", ".", "grid", "(", "linestyle", "=", "'dotted'", ")", "\n", "\n", "# plot", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "# save", "\n", "out_name", "=", "metric", "+", "out_name", "\n", "# fig.savefig(out_dir + 'plot_' + out_name +'.pdf', bbox_inches='tight')", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.plot_results.calc_mean_se": [[66, 84], ["numpy.asarray", "numpy.asarray", "numpy.loadtxt", "numpy.mean", "np.asarray.append", "np.asarray.append", "numpy.std", "numpy.sqrt"], "function", ["None"], ["", "def", "calc_mean_se", "(", "files", ",", "idx", ")", ":", "\n", "    ", "means", "=", "[", "]", "\n", "ses", "=", "[", "]", "\n", "\n", "for", "f", "in", "files", ":", "\n", "        ", "arr", "=", "np", ".", "loadtxt", "(", "f", ",", "delimiter", "=", "', '", ")", "# load data", "\n", "arr", "=", "arr", "[", ":", ",", "idx", "]", "# last column", "\n", "\n", "mean", "=", "np", ".", "mean", "(", "arr", ",", "axis", "=", "0", ")", "# mean", "\n", "se", "=", "np", ".", "std", "(", "arr", ",", "ddof", "=", "1", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "arr", ".", "shape", "[", "0", "]", ")", "# standard error (ddof=1 for sample)", "\n", "\n", "means", ".", "append", "(", "mean", ")", "\n", "ses", ".", "append", "(", "se", ")", "\n", "\n", "", "means", "=", "np", ".", "asarray", "(", "means", ")", "\n", "ses", "=", "np", ".", "asarray", "(", "ses", ")", "\n", "\n", "return", "means", ",", "ses", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_standard.NN_standard.__init__": [[20, 60], ["class_nn_base.NN_base.__init__", "class_nn_standard.NN_standard.create_standard_model", "class_nn_standard.NN_standard.model.compile", "keras.optimizers.Adam"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.__init__", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_standard.NN_standard.create_standard_model"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "layer_dims", ",", "# [n_x, n_h1, n_h2, .., n_hL, n_y]", "\n", "learning_rate", ",", "\n", "output_activation", ",", "\n", "loss_function", ",", "\n", "weight_init", ",", "\n", "num_epochs", ",", "\n", "class_weights", ",", "\n", "minibatch_size", ",", "\n", "L2_lambda", "=", "0.0", ",", "\n", "flag_batchnorm", "=", "False", ",", "\n", "seed", "=", "0", "\n", ")", ":", "\n", "\n", "        ", "NN_base", ".", "__init__", "(", "\n", "self", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "output_activation", "=", "output_activation", ",", "\n", "loss_function", "=", "loss_function", ",", "\n", "weight_init", "=", "weight_init", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "class_weights", "=", "class_weights", ",", "\n", "minibatch_size", "=", "minibatch_size", ",", "\n", "L2_lambda", "=", "L2_lambda", ",", "\n", "flag_batchnorm", "=", "flag_batchnorm", ",", "\n", "seed", "=", "seed", "\n", ")", "\n", "\n", "# parameters", "\n", "self", ".", "layer_dims", "=", "layer_dims", "\n", "\n", "# model", "\n", "self", ".", "model", "=", "self", ".", "create_standard_model", "(", ")", "\n", "\n", "# configure model for training", "\n", "self", ".", "model", ".", "compile", "(", "\n", "optimizer", "=", "Adam", "(", "lr", "=", "self", ".", "learning_rate", ")", ",", "\n", "loss", "=", "self", ".", "loss_function", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_standard.NN_standard.create_standard_model": [[66, 120], ["keras.layers.Input", "keras.models.Model", "keras.layers.Dense", "keras.layers.LeakyReLU", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dense", "keras.layers.LeakyReLU", "keras.regularizers.l2", "keras.layers.BatchNormalization", "keras.regularizers.l2"], "methods", ["None"], ["", "def", "create_standard_model", "(", "self", ")", ":", "\n", "# Input and output dims", "\n", "        ", "n_x", "=", "self", ".", "layer_dims", "[", "0", "]", "\n", "n_y", "=", "self", ".", "layer_dims", "[", "-", "1", "]", "\n", "\n", "# Input layer", "\n", "X_input", "=", "Input", "(", "shape", "=", "(", "n_x", ",", ")", ",", "name", "=", "'input'", ")", "\n", "\n", "# \u00a0First hidden layer", "\n", "X", "=", "Dense", "(", "\n", "units", "=", "self", ".", "layer_dims", "[", "1", "]", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "self", ".", "weight_init", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "l2", "(", "self", ".", "L2_lambda", ")", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", "\n", ")", "(", "X_input", ")", "\n", "if", "self", ".", "flag_batchnorm", ":", "\n", "            ", "X", "=", "BatchNormalization", "(", ")", "(", "X", ")", "\n", "", "X", "=", "LeakyReLU", "(", "alpha", "=", "0.01", ")", "(", "X", ")", "\n", "\n", "# \u00a0Other hidden layers (if any)", "\n", "for", "l", "in", "self", ".", "layer_dims", "[", "2", ":", "-", "1", "]", ":", "\n", "            ", "X", "=", "Dense", "(", "\n", "units", "=", "l", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "self", ".", "weight_init", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "l2", "(", "self", ".", "L2_lambda", ")", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", "\n", ")", "(", "X", ")", "\n", "if", "self", ".", "flag_batchnorm", ":", "\n", "                ", "X", "=", "BatchNormalization", "(", ")", "(", "X", ")", "\n", "", "X", "=", "LeakyReLU", "(", "alpha", "=", "0.01", ")", "(", "X", ")", "\n", "\n", "# Output layer", "\n", "", "y_out", "=", "Dense", "(", "\n", "units", "=", "n_y", ",", "\n", "activation", "=", "self", ".", "output_activation", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "self", ".", "weight_init", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "name", "=", "'output'", "\n", ")", "(", "X", ")", "\n", "\n", "# Model", "\n", "return", "Model", "(", "inputs", "=", "X_input", ",", "outputs", "=", "y_out", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.update_preq_metric": [[14, 20], ["None"], "function", ["None"], ["def", "update_preq_metric", "(", "s_prev", ",", "n_prev", ",", "correct", ",", "fading_factor", ")", ":", "\n", "    ", "s", "=", "correct", "+", "fading_factor", "*", "s_prev", "\n", "n", "=", "1.0", "+", "fading_factor", "*", "n_prev", "\n", "metric", "=", "s", "/", "n", "\n", "\n", "return", "s", ",", "n", ",", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.update_delayed_metric": [[23, 25], ["None"], "function", ["None"], ["", "def", "update_delayed_metric", "(", "prev", ",", "flag", ",", "forget_rate", ")", ":", "\n", "    ", "return", "(", "1.0", "-", "forget_rate", ")", "*", "flag", "+", "forget_rate", "*", "prev", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.draw_example": [[28, 34], ["df.drop().reset_index", "random_state.choice", "df.drop"], "function", ["None"], ["", "def", "draw_example", "(", "random_state", ",", "df", ")", ":", "\n", "    ", "idx", "=", "random_state", ".", "choice", "(", "df", ".", "index", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "next", "=", "df", ".", "iloc", "[", "idx", ",", ":", "]", ".", "values", "\n", "df_new", "=", "df", ".", "drop", "(", "idx", ",", "axis", "=", "0", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "return", "df_new", ",", "next", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.draw_example_conditional": [[37, 49], ["random_state.rand", "df.drop().reset_index", "random_state.choice", "df.drop"], "function", ["None"], ["", "def", "draw_example_conditional", "(", "random_state", ",", "df", ",", "val_x", ",", "prob_x", ")", ":", "\n", "    ", "r", "=", "random_state", ".", "rand", "(", ")", "\n", "if", "r", "<=", "prob_x", ":", "\n", "        ", "df_temp", "=", "df", "[", "df", "[", "'x1'", "]", "<", "val_x", "]", "\n", "", "else", ":", "\n", "        ", "df_temp", "=", "df", "[", "df", "[", "'x1'", "]", ">=", "val_x", "]", "\n", "\n", "", "idx", "=", "random_state", ".", "choice", "(", "df_temp", ".", "index", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "next", "=", "df", ".", "iloc", "[", "idx", ",", ":", "]", ".", "values", "\n", "df_new", "=", "df", ".", "drop", "(", "idx", ",", "axis", "=", "0", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "return", "df_new", ",", "next", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.find_decay": [[52, 54], ["None"], "function", ["None"], ["", "def", "find_decay", "(", "pre_val", ",", "post_val", ",", "drift_time_start", ",", "drift_time_stop", ")", ":", "\n", "    ", "return", "(", "post_val", "-", "pre_val", ")", "/", "(", "drift_time_stop", "-", "drift_time_start", "+", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.revert_df_class": [[57, 69], ["srs.replace", "srs.replace", "srs.replace", "df.drop"], "function", ["None"], ["", "def", "revert_df_class", "(", "df", ",", "target", ")", ":", "\n", "# revert labels", "\n", "    ", "srs", "=", "df", "[", "target", "]", "\n", "srs", ".", "replace", "(", "to_replace", "=", "1.0", ",", "value", "=", "-", "1.0", ",", "inplace", "=", "True", ")", "\n", "srs", ".", "replace", "(", "to_replace", "=", "0.0", ",", "value", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "srs", ".", "replace", "(", "to_replace", "=", "-", "1.0", ",", "value", "=", "0.0", ",", "inplace", "=", "True", ")", "\n", "\n", "# create new df", "\n", "df_new", "=", "df", ".", "drop", "(", "target", ",", "axis", "=", "1", ")", "\n", "df_new", "[", "target", "]", "=", "srs", "\n", "\n", "return", "df_new", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.revert_truth": [[72, 87], ["numpy.array().reshape", "numpy.array"], "function", ["None"], ["", "def", "revert_truth", "(", "arr", ")", ":", "\n", "# get ground truth", "\n", "    ", "truth", "=", "arr", "[", "0", "]", "[", "0", "]", "# arr is of shape (1,1)", "\n", "\n", "# revert", "\n", "if", "truth", "==", "0.0", ":", "# if negative", "\n", "        ", "new_y", "=", "1.0", "\n", "example_neg", "=", "0", "\n", "", "else", ":", "# if positive", "\n", "        ", "new_y", "=", "0.0", "\n", "example_neg", "=", "1", "\n", "\n", "", "arr_new", "=", "np", ".", "array", "(", "[", "new_y", "]", ")", ".", "reshape", "(", "1", ",", "1", ")", "\n", "\n", "return", "arr_new", ",", "example_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.run": [[93, 309], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "class_sota.Baseline", "range", "class_sota.CS", "x.reshape.reshape", "class_areba.AREBA.predict", "numpy.array().reshape", "numpy.sqrt", "run_main_synthetic.update_delayed_metric", "run_main_synthetic.update_delayed_metric", "class_areba.AREBA.train", "class_sota.Sliding", "run_main_synthetic.find_decay", "print", "random_state.rand", "run_main_synthetic.draw_example", "run_main_synthetic.update_preq_metric", "run_main_synthetic.update_preq_metric", "class_areba.AREBA.append_to_win", "class_areba.AREBA.oob_oversample", "class_areba.AREBA.append_to_queues", "class_areba.AREBA.get_training_set", "class_sota.OOB", "run_main_synthetic.find_decay", "run_main_synthetic.draw_example", "run_main_synthetic.draw_example_conditional", "numpy.array", "random_state.rand", "run_main_synthetic.revert_truth", "class_areba.AREBA.adapt_costs", "class_areba.AREBA.adapt_queues", "class_qbr.QBR", "run_main_synthetic.revert_df_class", "run_main_synthetic.revert_df_class", "class_areba.AREBA.adapt_costs", "class_areba.AREBA"], "function", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.OOB.predict", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.update_delayed_metric", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.update_delayed_metric", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.OOB.train", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.find_decay", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.draw_example", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.update_preq_metric", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.update_preq_metric", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.Sliding.append_to_win", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.OOB.oob_oversample", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.append_to_queues", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.get_training_set", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.find_decay", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.draw_example", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.draw_example_conditional", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.revert_truth", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.CS.adapt_costs", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_areba.AREBA.adapt_queues", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.revert_df_class", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.revert_df_class", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.CS.adapt_costs"], ["", "def", "run", "(", "random_state", ",", "time_steps", ",", "df_neg", ",", "df_pos", ",", "models", ",", "method", ",", "prob_pos", ",", "preq_fading_factor", ",", "layer_dims", ",", "\n", "cs_update_freq", ",", "cs_upper_weight", ",", "sliding_window_size", ",", "queue_size_budget", ",", "delayed_forget_rate", ",", "\n", "flag_drift", ",", "drift_type", ",", "drift_speed", ",", "time_drift_start", ",", "time_drift_stop_gradual", ",", "post_prob_pos", ",", "\n", "val_x", ",", "prob_x", ",", "post_prob_x", ",", "target", ",", "flag_noisy_truth", ",", "prob_noisy_truth", ")", ":", "\n", "\n", "############################", "\n", "# Init prequential metrics #", "\n", "############################", "\n", "\n", "    ", "preq_recalls", "=", "np", ".", "zeros", "(", "time_steps", ")", "\n", "preq_specificities", "=", "np", ".", "zeros", "(", "time_steps", ")", "\n", "preq_gmeans", "=", "np", ".", "zeros", "(", "time_steps", ")", "\n", "\n", "preq_recall", ",", "preq_specificity", "=", "(", "1.0", ",", ")", "*", "2", "# NOTE: init to 1.0 not 0.0", "\n", "preq_recall_s", ",", "preq_recall_n", "=", "(", "0.0", ",", ")", "*", "2", "\n", "preq_specificity_s", ",", "preq_specificity_n", "=", "(", "0.0", ",", ")", "*", "2", "\n", "\n", "########################", "\n", "# Init delayed metrics #", "\n", "########################", "\n", "\n", "# size", "\n", "delayed_size_neg", ",", "delayed_size_pos", "=", "(", "0.0", ",", ")", "*", "2", "\n", "\n", "################", "\n", "# Init methods #", "\n", "################", "\n", "\n", "technique", "=", "Baseline", "(", "models", "[", "0", "]", ")", "# Baseline init", "\n", "\n", "# State-of-the-art", "\n", "if", "method", "==", "'cs'", "or", "method", "==", "'adaptive_cs'", ":", "\n", "        ", "technique", "=", "CS", "(", "models", "[", "0", "]", ",", "cs_update_freq", ",", "cs_upper_weight", ")", "\n", "", "elif", "method", "==", "'sliding'", ":", "\n", "        ", "technique", "=", "Sliding", "(", "models", "[", "0", "]", ",", "sliding_window_size", ")", "\n", "", "elif", "method", "==", "'oob_single'", "or", "method", "==", "'oob'", ":", "\n", "        ", "technique", "=", "OOB", "(", "models", ")", "\n", "# Proposed", "\n", "", "elif", "method", "==", "'qbr'", ":", "\n", "        ", "technique", "=", "QBR", "(", "models", "[", "0", "]", ",", "queue_size_budget", ")", "\n", "", "elif", "method", "==", "'areba'", ":", "\n", "        ", "technique", "=", "AREBA", "(", "models", "[", "0", "]", ",", "queue_size_budget", ")", "\n", "\n", "######################", "\n", "# Init concept drift #", "\n", "######################", "\n", "\n", "", "drift_gradual_decay", "=", "0.0", "\n", "if", "flag_drift", "and", "drift_speed", "==", "'gradual'", ":", "\n", "        ", "if", "drift_type", "==", "'prior'", ":", "\n", "            ", "drift_gradual_decay", "=", "find_decay", "(", "prob_pos", ",", "post_prob_pos", ",", "time_drift_start", ",", "time_drift_stop_gradual", ")", "\n", "", "elif", "drift_type", "==", "'likelihood'", ":", "\n", "            ", "drift_gradual_decay", "=", "find_decay", "(", "prob_x", ",", "post_prob_x", ",", "time_drift_start", ",", "time_drift_stop_gradual", ")", "\n", "\n", "#########", "\n", "# Start #", "\n", "#########", "\n", "\n", "", "", "for", "t", "in", "range", "(", "time_steps", ")", ":", "\n", "        ", "if", "t", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'Time step: '", ",", "t", ")", "\n", "\n", "#################", "\n", "# Concept drift #", "\n", "#################", "\n", "\n", "", "if", "flag_drift", ":", "\n", "            ", "if", "not", "(", "drift_type", "==", "'posterior'", ")", ":", "\n", "                ", "if", "t", "==", "time_drift_start", "and", "drift_speed", "==", "'abrupt'", ":", "\n", "                    ", "if", "drift_type", "==", "'prior'", ":", "\n", "                        ", "prob_pos", "=", "post_prob_pos", "\n", "", "elif", "drift_type", "==", "'likelihood'", ":", "\n", "                        ", "prob_x", "=", "post_prob_x", "\n", "\n", "", "", "elif", "time_drift_start", "<=", "t", "<=", "time_drift_stop_gradual", "and", "drift_speed", "==", "'gradual'", ":", "\n", "                    ", "if", "drift_type", "==", "'prior'", ":", "\n", "                        ", "prob_pos", "+=", "drift_gradual_decay", "\n", "", "elif", "drift_type", "==", "'likelihood'", ":", "\n", "                        ", "prob_x", "+=", "drift_gradual_decay", "\n", "", "", "", "else", ":", "\n", "                ", "if", "t", "==", "time_drift_start", "and", "drift_speed", "==", "'abrupt'", ":", "\n", "                    ", "df_pos_temp", "=", "revert_df_class", "(", "df_neg", ",", "target", ")", "\n", "df_neg", "=", "revert_df_class", "(", "df_pos", ",", "target", ")", "\n", "df_pos", "=", "df_pos_temp", "\n", "\n", "# reset preq. (not delayed) metrics for plotting purposes", "\n", "", "", "if", "(", "t", "==", "time_drift_start", "and", "drift_speed", "==", "'abrupt'", ")", "or", "(", "(", "t", "==", "time_drift_start", "or", "t", "==", "time_drift_stop_gradual", ")", "and", "drift_speed", "==", "'gradual'", ")", ":", "\n", "                ", "preq_recall", ",", "preq_recall_s", ",", "preq_recall_n", "=", "(", "0.0", ",", ")", "*", "3", "\n", "preq_specificity", ",", "preq_specificity_s", ",", "preq_specificity_n", "=", "(", "0.0", ",", ")", "*", "3", "\n", "\n", "####################", "\n", "# Get next example #", "\n", "####################", "\n", "\n", "", "", "if", "random_state", ".", "rand", "(", ")", ">", "prob_pos", ":", "\n", "            ", "if", "(", "not", "flag_drift", ")", "or", "(", "flag_drift", "and", "(", "drift_type", "==", "'prior'", "or", "drift_type", "==", "'posterior'", ")", ")", ":", "\n", "                ", "df_neg", ",", "next", "=", "draw_example", "(", "random_state", ",", "df_neg", ")", "\n", "\n", "", "if", "flag_drift", "and", "drift_type", "==", "'likelihood'", ":", "\n", "                ", "df_neg", ",", "next", "=", "draw_example_conditional", "(", "random_state", ",", "df_neg", ",", "val_x", ",", "prob_x", ")", "\n", "\n", "", "example_neg", "=", "True", "\n", "", "else", ":", "\n", "# positive example", "\n", "            ", "df_pos", ",", "next", "=", "draw_example", "(", "random_state", ",", "df_pos", ")", "\n", "example_neg", "=", "False", "\n", "\n", "##############", "\n", "# Prediction #", "\n", "##############", "\n", "\n", "# get x", "\n", "", "x", "=", "next", "[", ":", "-", "1", "]", "\n", "x", "=", "x", ".", "reshape", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# predict", "\n", "_", ",", "y_hat_class", "=", "technique", ".", "predict", "(", "x", ")", "\n", "\n", "####################", "\n", "# Get ground truth #", "\n", "####################", "\n", "\n", "# get ground truth", "\n", "y", "=", "next", "[", "-", "1", "]", "\n", "y", "=", "np", ".", "array", "(", "y", ")", ".", "reshape", "(", "1", ",", "1", ")", "\n", "\n", "#######################", "\n", "# Update preq metrics #", "\n", "#######################", "\n", "\n", "# check if misclassification", "\n", "correct", "=", "0", "\n", "if", "y", "==", "y_hat_class", ":", "\n", "            ", "correct", "=", "1", "\n", "\n", "# update preq. recall / specificity", "\n", "", "if", "example_neg", ":", "\n", "            ", "preq_specificity_s", ",", "preq_specificity_n", ",", "preq_specificity", "=", "update_preq_metric", "(", "preq_specificity_s", ",", "\n", "preq_specificity_n", ",", "correct", ",", "\n", "preq_fading_factor", ")", "\n", "", "else", ":", "\n", "            ", "preq_recall_s", ",", "preq_recall_n", ",", "preq_recall", "=", "update_preq_metric", "(", "preq_recall_s", ",", "preq_recall_n", ",", "correct", ",", "\n", "preq_fading_factor", ")", "\n", "\n", "", "preq_gmean", "=", "np", ".", "sqrt", "(", "preq_recall", "*", "preq_specificity", ")", "\n", "\n", "# \u00a0append to results", "\n", "preq_recalls", "[", "t", "]", "=", "preq_recall", "\n", "preq_specificities", "[", "t", "]", "=", "preq_specificity", "\n", "preq_gmeans", "[", "t", "]", "=", "preq_gmean", "\n", "\n", "######################", "\n", "# Noisy ground truth #", "\n", "######################", "\n", "# this piece of code must be placed here as the prequential metrics must remain unaffected", "\n", "\n", "if", "flag_noisy_truth", ":", "\n", "            ", "if", "random_state", ".", "rand", "(", ")", "<=", "prob_noisy_truth", ":", "\n", "                ", "y", ",", "example_neg", "=", "revert_truth", "(", "y", ")", "\n", "\n", "##########################", "\n", "# Update delayed metrics #", "\n", "##########################", "\n", "\n", "", "", "delayed_size_neg", "=", "update_delayed_metric", "(", "delayed_size_neg", ",", "example_neg", ",", "delayed_forget_rate", ")", "\n", "delayed_size_pos", "=", "update_delayed_metric", "(", "delayed_size_pos", ",", "not", "example_neg", ",", "delayed_forget_rate", ")", "\n", "\n", "####################", "\n", "# State-of-the-art #", "\n", "####################", "\n", "\n", "# Sliding window", "\n", "if", "method", "==", "'sliding'", ":", "\n", "            ", "x", ",", "y", "=", "technique", ".", "append_to_win", "(", "x", ",", "y", ",", "layer_dims", "[", "0", "]", ")", "\n", "\n", "# Adaptive cs", "\n", "", "if", "method", "==", "'adaptive_cs'", ":", "\n", "            ", "if", "(", "delayed_size_pos", "<", "delayed_size_neg", ")", "and", "(", "delayed_size_pos", "!=", "0.0", ")", ":", "\n", "                ", "imbalance_rate", "=", "delayed_size_neg", "/", "delayed_size_pos", "\n", "technique", ".", "adapt_costs", "(", "t", ",", "new_cs_weight_neg", "=", "1.0", ",", "new_cs_weight_pos", "=", "imbalance_rate", ")", "\n", "", "elif", "(", "delayed_size_neg", "<", "delayed_size_pos", ")", "and", "(", "delayed_size_neg", "!=", "0.0", ")", ":", "\n", "                ", "imbalance_rate", "=", "delayed_size_pos", "/", "delayed_size_neg", "\n", "technique", ".", "adapt_costs", "(", "t", ",", "new_cs_weight_neg", "=", "imbalance_rate", ",", "new_cs_weight_pos", "=", "1.0", ")", "\n", "\n", "# OOB", "\n", "", "", "if", "method", "==", "'oob_single'", "or", "method", "==", "'oob'", ":", "\n", "# Calculate class imbalance rate", "\n", "            ", "imbalance_rate", "=", "1.0", "\n", "if", "(", "not", "example_neg", ")", "and", "(", "delayed_size_pos", "<", "delayed_size_neg", ")", "and", "(", "delayed_size_pos", "!=", "0.0", ")", ":", "\n", "                ", "imbalance_rate", "=", "delayed_size_neg", "/", "delayed_size_pos", "\n", "", "elif", "example_neg", "and", "(", "delayed_size_neg", "<", "delayed_size_pos", ")", "and", "(", "delayed_size_neg", "!=", "0.0", ")", ":", "\n", "                ", "imbalance_rate", "=", "delayed_size_pos", "/", "delayed_size_neg", "\n", "\n", "# OOB oversample", "\n", "", "technique", ".", "oob_oversample", "(", "random_state", ",", "imbalance_rate", ")", "\n", "\n", "###############", "\n", "# QBR / AREBA #", "\n", "###############", "\n", "\n", "", "if", "method", "==", "'qbr'", "or", "method", "==", "'areba'", ":", "\n", "            ", "technique", ".", "append_to_queues", "(", "x", ",", "y", ")", "\n", "\n", "if", "method", "==", "'areba'", ":", "\n", "                ", "technique", ".", "adapt_queues", "(", "delayed_size_neg", ",", "delayed_size_pos", ")", "\n", "\n", "", "x", ",", "y", "=", "technique", ".", "get_training_set", "(", "layer_dims", "[", "0", "]", ")", "\n", "\n", "####################", "\n", "# Train classifier #", "\n", "####################", "\n", "\n", "", "technique", ".", "train", "(", "x", ",", "y", ")", "\n", "\n", "", "return", "preq_recalls", ",", "preq_specificities", ",", "preq_gmeans", "\n", "", ""]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_areba.AREBA.__init__": [[18, 30], ["class_sota.Baseline.__init__", "collections.deque", "collections.deque", "collections.deque", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "queue_size_budget", ")", ":", "\n", "        ", "Baseline", ".", "__init__", "(", "self", ",", "model", ")", "\n", "\n", "# budget", "\n", "self", ".", "budget", "=", "queue_size_budget", "\n", "\n", "# init queues", "\n", "self", ".", "xs_neg", "=", "deque", "(", "maxlen", "=", "1", ")", "\n", "self", ".", "ys_neg", "=", "deque", "(", "maxlen", "=", "1", ")", "\n", "\n", "self", ".", "xs_pos", "=", "deque", "(", "maxlen", "=", "1", ")", "\n", "self", ".", "ys_pos", "=", "deque", "(", "maxlen", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_areba.AREBA.adapt_queue": [[35, 42], ["collections.deque", "collections.deque", "collections.deque", "collections.deque"], "methods", ["None"], ["", "def", "adapt_queue", "(", "self", ",", "q", ",", "q_cap", ")", ":", "\n", "        ", "if", "q", "==", "'neg'", ":", "\n", "            ", "self", ".", "xs_neg", "=", "deque", "(", "self", ".", "xs_neg", ",", "q_cap", ")", "\n", "self", ".", "ys_neg", "=", "deque", "(", "self", ".", "ys_neg", ",", "q_cap", ")", "\n", "", "elif", "q", "==", "'pos'", ":", "\n", "            ", "self", ".", "xs_pos", "=", "deque", "(", "self", ".", "xs_pos", ",", "q_cap", ")", "\n", "self", ".", "ys_pos", "=", "deque", "(", "self", ".", "ys_pos", ",", "q_cap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_areba.AREBA.get_training_set": [[47, 62], ["len", "numpy.array().reshape", "numpy.array().reshape", "class_areba.AREBA.model.change_minibatch_size", "list", "list", "list", "list", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.change_minibatch_size"], ["", "", "def", "get_training_set", "(", "self", ",", "n_features", ")", ":", "\n", "# merge queues", "\n", "        ", "xs", "=", "list", "(", "self", ".", "xs_neg", ")", "+", "list", "(", "self", ".", "xs_pos", ")", "\n", "ys", "=", "list", "(", "self", ".", "ys_neg", ")", "+", "list", "(", "self", ".", "ys_pos", ")", "\n", "\n", "# convert merged queues to np arrays", "\n", "size", "=", "len", "(", "ys", ")", "# current queue size", "\n", "x", "=", "np", ".", "array", "(", "xs", ")", ".", "reshape", "(", "size", ",", "n_features", ")", "\n", "y", "=", "np", ".", "array", "(", "ys", ")", ".", "reshape", "(", "size", ",", "1", ")", "\n", "\n", "# \u00a0batch GD", "\n", "self", ".", "model", ".", "change_minibatch_size", "(", "size", ")", "\n", "\n", "# return", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_areba.AREBA.append_to_queues": [[63, 72], ["class_areba.AREBA.xs_neg.append", "class_areba.AREBA.ys_neg.append", "class_areba.AREBA.xs_pos.append", "class_areba.AREBA.ys_pos.append"], "methods", ["None"], ["", "def", "append_to_queues", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "y", "==", "0", ":", "\n", "# append", "\n", "            ", "self", ".", "xs_neg", ".", "append", "(", "x", ")", "\n", "self", ".", "ys_neg", ".", "append", "(", "y", ")", "\n", "", "else", ":", "\n", "# append", "\n", "            ", "self", ".", "xs_pos", ".", "append", "(", "x", ")", "\n", "self", ".", "ys_pos", ".", "append", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_areba.AREBA.adapt_queues": [[74, 101], ["len", "len", "class_areba.AREBA.adapt_queue", "class_areba.AREBA.adapt_queue", "class_areba.AREBA.adapt_queue", "class_areba.AREBA.adapt_queue", "class_areba.AREBA.adapt_queue", "class_areba.AREBA.adapt_queue", "class_areba.AREBA.adapt_queue", "class_areba.AREBA.adapt_queue"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue"], ["", "", "def", "adapt_queues", "(", "self", ",", "delayed_size_neg", ",", "delayed_size_pos", ")", ":", "\n", "        ", "length_q_pos", "=", "len", "(", "self", ".", "ys_pos", ")", "\n", "capacity_q_pos", "=", "self", ".", "ys_pos", ".", "maxlen", "\n", "\n", "length_q_neg", "=", "len", "(", "self", ".", "ys_neg", ")", "\n", "capacity_q_neg", "=", "self", ".", "ys_neg", ".", "maxlen", "\n", "\n", "if", "length_q_pos", "==", "0", "and", "capacity_q_neg", "<", "self", ".", "budget", ":", "\n", "            ", "self", ".", "adapt_queue", "(", "'neg'", ",", "capacity_q_neg", "+", "1", ")", "\n", "", "elif", "length_q_neg", "==", "0", "and", "capacity_q_pos", "<", "self", ".", "budget", ":", "\n", "            ", "self", ".", "adapt_queue", "(", "'pos'", ",", "capacity_q_pos", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "delayed_size_neg", ">", "delayed_size_pos", ":", "\n", "                ", "if", "capacity_q_pos", "==", "length_q_pos", ":", "\n", "                    ", "if", "capacity_q_pos", "<", "self", ".", "budget", "/", "2.0", ":", "\n", "                        ", "self", ".", "adapt_queue", "(", "'pos'", ",", "capacity_q_pos", "+", "1", ")", "\n", "self", ".", "adapt_queue", "(", "'neg'", ",", "capacity_q_pos", ")", "\n", "", "elif", "capacity_q_pos", "==", "self", ".", "budget", "/", "2.0", "and", "capacity_q_neg", "!=", "capacity_q_pos", ":", "\n", "                        ", "self", ".", "adapt_queue", "(", "'neg'", ",", "capacity_q_pos", ")", "\n", "\n", "", "", "", "if", "delayed_size_neg", "<=", "delayed_size_pos", ":", "\n", "                ", "if", "capacity_q_neg", "==", "length_q_neg", ":", "\n", "                    ", "if", "capacity_q_neg", "<", "self", ".", "budget", "/", "2.0", ":", "\n", "                        ", "self", ".", "adapt_queue", "(", "'neg'", ",", "capacity_q_neg", "+", "1", ")", "\n", "self", ".", "adapt_queue", "(", "'pos'", ",", "capacity_q_neg", ")", "\n", "", "elif", "capacity_q_neg", "==", "self", ".", "budget", "/", "2.0", "and", "capacity_q_pos", "!=", "capacity_q_neg", ":", "\n", "                        ", "self", ".", "adapt_queue", "(", "'pos'", ",", "capacity_q_neg", ")", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kmalialis_areba.None.main_synthetic.create_file": [[47, 50], ["open", "open.close"], "function", ["None"], ["def", "create_file", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.main_synthetic.write_to_file": [[53, 56], ["open", "numpy.savetxt"], "function", ["None"], ["", "def", "write_to_file", "(", "filename", ",", "arr", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "np", ".", "savetxt", "(", "f", ",", "[", "arr", "]", ",", "delimiter", "=", "', '", ",", "fmt", "=", "'%1.6f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.main_synthetic.main": [[62, 264], ["numpy.random.RandomState", "pandas.read_csv", "df_neg.reset_index", "df_pos.reset_index", "range", "Exception", "str", "main_synthetic.create_file", "main_synthetic.create_file", "main_synthetic.create_file", "print", "class_nn_standard.NN_standard", "run_main_synthetic.run", "str", "range", "main_synthetic.write_to_file", "main_synthetic.write_to_file", "main_synthetic.write_to_file", "int", "str", "models.append", "class_nn_standard.NN_standard", "str", "str", "int"], "function", ["home.repos.pwc.inspect_result.kmalialis_areba.None.main_synthetic.create_file", "home.repos.pwc.inspect_result.kmalialis_areba.None.main_synthetic.create_file", "home.repos.pwc.inspect_result.kmalialis_areba.None.main_synthetic.create_file", "home.repos.pwc.inspect_result.kmalialis_areba.None.run_main_synthetic.run", "home.repos.pwc.inspect_result.kmalialis_areba.None.main_synthetic.write_to_file", "home.repos.pwc.inspect_result.kmalialis_areba.None.main_synthetic.write_to_file", "home.repos.pwc.inspect_result.kmalialis_areba.None.main_synthetic.write_to_file"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "# Reproducibility", "\n", "    ", "seed", "=", "0", "\n", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "########################", "\n", "# Settings A: Scenario #", "\n", "########################", "\n", "\n", "# time steps & repetitions", "\n", "repeats", "=", "10", "# number of repetitions", "\n", "times", "=", "5000", "# time steps per repetition", "\n", "\n", "# Dataset", "\n", "dataset", "=", "'sine'", "# 'sine', 'circle', 'sea'", "\n", "target", "=", "'class'", "\n", "\n", "# class imbalanace method", "\n", "method", "=", "'areba'", "# 'baseline', 'cs', 'sliding', 'adaptive_cs', 'oob_single', 'oob', 'qbr', 'areba'", "\n", "\n", "# class imbalance rate", "\n", "prob_pos", "=", "0.01", "\n", "\n", "# noisy ground truth", "\n", "flag_noisy_truth", "=", "0", "\n", "prob_noisy_truth", "=", "0.1", "\n", "\n", "# fixed - do not alter the following for reproducibility", "\n", "\n", "# Prequential evaluation", "\n", "preq_fading_factor", "=", "0.99", "# 0 << f < 1.0 - typically, >= 0.8", "\n", "\n", "# Delayed size metric", "\n", "delayed_forget_rate", "=", "preq_fading_factor", "\n", "\n", "# store results", "\n", "flag_store", "=", "1", "\n", "\n", "#############################", "\n", "# Settings B: Concept drift #", "\n", "#############################", "\n", "\n", "flag_drift", "=", "False", "\n", "\n", "time_drift_start", "=", "10000", "# time_drift_stop_abrupt = time_drift_start", "\n", "time_drift_stop_gradual", "=", "3000", "\n", "\n", "drift_type", "=", "'likelihood'", "# 'prior', 'likelihood', 'posterior'", "\n", "drift_speed", "=", "'abrupt'", "# 'abrupt', 'gradual'", "\n", "\n", "# fixed - do not alter the following for reproducibility", "\n", "\n", "if", "flag_drift", "and", "drift_type", "==", "'posterior'", "and", "drift_speed", "==", "'gradual'", ":", "\n", "        ", "raise", "Exception", "(", "'Drift setting not currently implemented.'", ")", "\n", "\n", "# prior drift", "\n", "", "post_prob_pos", "=", "1.0", "-", "prob_pos", "\n", "\n", "# likelihood drift", "\n", "if", "dataset", "==", "'sine'", ":", "\n", "        ", "val_x", "=", "0.6", "\n", "", "elif", "dataset", "==", "'circle'", ":", "\n", "        ", "val_x", "=", "0.4", "\n", "", "elif", "dataset", "==", "\"sea\"", ":", "\n", "        ", "val_x", "=", "0.5", "\n", "\n", "", "prob_x", "=", "0.9", "# p(x < val_x | neg)", "\n", "post_prob_x", "=", "1.0", "-", "prob_x", "\n", "\n", "#######################", "\n", "# Settigns C: Methods #", "\n", "#######################", "\n", "\n", "# AREBA or QBR: budget >= 2", "\n", "queue_size_budget", "=", "20", "\n", "\n", "# fixed - do not alter the following for reproducibility", "\n", "\n", "# Baseline", "\n", "learning_rate", "=", "0.01", "\n", "output_activation", "=", "'sigmoid'", "\n", "loss_function", "=", "'binary_crossentropy'", "\n", "weight_init", "=", "\"he\"", "\n", "class_weights", "=", "{", "0", ":", "1.0", ",", "1", ":", "1.0", "}", "\n", "num_epochs", "=", "1", "\n", "minibatch_size", "=", "1", "\n", "layer_dims", "=", "[", "2", ",", "8", ",", "1", "]", "\n", "\n", "# Adaptive CS: for stability", "\n", "cs_update_freq", "=", "250", "\n", "cs_upper_weight", "=", "50", "\n", "\n", "# Sliding: window size", "\n", "sliding_window_size", "=", "100", "\n", "\n", "# OOB: number of classifiers", "\n", "ensemble_size", "=", "20", "\n", "\n", "# safety check", "\n", "if", "method", "==", "'oob_single'", ":", "\n", "        ", "ensemble_size", "=", "1", "\n", "\n", "################", "\n", "# Output files #", "\n", "################", "\n", "\n", "# output directory", "\n", "", "out_dir", "=", "'exps/'", "+", "dataset", "+", "'/prob_pos_'", "+", "str", "(", "int", "(", "prob_pos", "*", "100", ")", ")", "+", "'/'", "\n", "if", "flag_drift", ":", "\n", "        ", "out_dir", "=", "'exps/'", "+", "dataset", "+", "'/prob_pos_'", "+", "str", "(", "int", "(", "prob_pos", "*", "100", ")", ")", "+", "'_drift_'", "+", "str", "(", "drift_type", ")", "+", "'_'", "+", "str", "(", "drift_speed", ")", "+", "'/'", "\n", "", "out_dir", "=", "'exps/'", "\n", "\n", "# output filenames", "\n", "out_name", "=", "method", "\n", "if", "method", "==", "'qbr'", "or", "method", "==", "'areba'", ":", "\n", "        ", "out_name", "+=", "str", "(", "queue_size_budget", ")", "\n", "\n", "", "filename_recalls", "=", "out_name", "+", "'_preq_recalls'", "+", "'.txt'", "\n", "filename_specificities", "=", "out_name", "+", "'_preq_specificities'", "+", "'.txt'", "\n", "filename_gmeans", "=", "out_name", "+", "'_preq_gmeans'", "+", "'.txt'", "\n", "\n", "# Create output files", "\n", "if", "flag_store", ":", "\n", "        ", "create_file", "(", "out_dir", "+", "filename_recalls", ")", "\n", "create_file", "(", "out_dir", "+", "filename_specificities", ")", "\n", "create_file", "(", "out_dir", "+", "filename_gmeans", ")", "\n", "\n", "##############", "\n", "# Input data #", "\n", "##############", "\n", "\n", "# Dataset dirs", "\n", "", "dataset_dir", "=", "''", "# init", "\n", "if", "dataset", "==", "'sine'", ":", "\n", "        ", "dataset_dir", "=", "'data/sine/sine.csv'", "\n", "", "elif", "dataset", "==", "'circle'", ":", "\n", "        ", "dataset_dir", "=", "'data/circle/circle.csv'", "\n", "", "elif", "dataset", "==", "'sea'", ":", "\n", "        ", "dataset_dir", "=", "'data/sea/sea.csv'", "\n", "\n", "# Load data", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "dataset_dir", ")", "# must already be pre-processed", "\n", "\n", "df_neg", "=", "df", "[", "df", "[", "target", "]", "==", "0", "]", "\n", "df_neg", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "\n", "df_pos", "=", "df", "[", "df", "[", "target", "]", "==", "1", "]", "\n", "df_pos", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "\n", "#########", "\n", "# Start #", "\n", "#########", "\n", "\n", "for", "r", "in", "range", "(", "repeats", ")", ":", "\n", "        ", "print", "(", "'Repetition: '", ",", "r", ")", "\n", "\n", "# NN", "\n", "nn_standard", "=", "NN_standard", "(", "\n", "layer_dims", "=", "layer_dims", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "output_activation", "=", "output_activation", ",", "\n", "loss_function", "=", "loss_function", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "weight_init", "=", "weight_init", ",", "\n", "class_weights", "=", "class_weights", ",", "\n", "minibatch_size", "=", "minibatch_size", ")", "\n", "\n", "# nn_standard.model.summary()", "\n", "# for layer in nn_standard.model.layers:", "\n", "#     print(layer.get_output_at(0).get_shape().as_list())", "\n", "\n", "# model(s)", "\n", "models", "=", "[", "nn_standard", "]", "\n", "if", "method", "==", "'oob'", ":", "\n", "            ", "for", "i", "in", "range", "(", "ensemble_size", "-", "1", ")", ":", "\n", "                ", "models", ".", "append", "(", "\n", "NN_standard", "(", "\n", "layer_dims", "=", "layer_dims", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "output_activation", "=", "output_activation", ",", "\n", "loss_function", "=", "loss_function", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "weight_init", "=", "weight_init", ",", "\n", "class_weights", "=", "class_weights", ",", "\n", "minibatch_size", "=", "minibatch_size", ",", "\n", "seed", "=", "seed", "+", "i", "+", "1", ")", ")", "\n", "\n", "# start", "\n", "", "", "recall", ",", "specificity", ",", "gmean", "=", "run", "(", "random_state", ",", "times", ",", "df_neg", ",", "df_pos", ",", "models", ",", "method", ",", "prob_pos", ",", "\n", "preq_fading_factor", ",", "layer_dims", ",", "cs_update_freq", ",", "cs_upper_weight", ",", "\n", "sliding_window_size", ",", "queue_size_budget", ",", "delayed_forget_rate", ",", "\n", "flag_drift", ",", "drift_type", ",", "drift_speed", ",", "time_drift_start", ",", "\n", "time_drift_stop_gradual", ",", "post_prob_pos", ",", "val_x", ",", "prob_x", ",", "post_prob_x", ",", "target", ",", "\n", "flag_noisy_truth", ",", "prob_noisy_truth", ")", "\n", "\n", "# store", "\n", "if", "flag_store", ":", "\n", "            ", "write_to_file", "(", "out_dir", "+", "filename_recalls", ",", "recall", ")", "\n", "write_to_file", "(", "out_dir", "+", "filename_specificities", ",", "specificity", ")", "\n", "write_to_file", "(", "out_dir", "+", "filename_gmeans", ",", "gmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.__init__": [[17, 53], ["keras.initializers.glorot_uniform", "keras.initializers.he_normal"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "learning_rate", ",", "\n", "output_activation", ",", "\n", "loss_function", ",", "\n", "weight_init", ",", "\n", "num_epochs", ",", "\n", "class_weights", ",", "\n", "minibatch_size", ",", "\n", "L2_lambda", ",", "\n", "flag_batchnorm", ",", "\n", "seed", "\n", ")", ":", "\n", "\n", "# seed", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "\n", "# NN parameters", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "output_activation", "=", "output_activation", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "class_weights", "=", "class_weights", "\n", "self", ".", "minibatch_size", "=", "minibatch_size", "\n", "self", ".", "L2_lambda", "=", "L2_lambda", "\n", "self", ".", "flag_batchnorm", "=", "flag_batchnorm", "\n", "\n", "if", "weight_init", "==", "\"glorot\"", ":", "\n", "            ", "self", ".", "weight_init", "=", "glorot_uniform", "(", "seed", "=", "self", ".", "seed", ")", "\n", "", "elif", "weight_init", "==", "\"he\"", ":", "\n", "            ", "self", ".", "weight_init", "=", "he_normal", "(", "seed", "=", "self", ".", "seed", ")", "\n", "\n", "# loss function", "\n", "", "self", ".", "loss_function", "=", "loss_function", "\n", "\n", "# model to be defined in sub-classes", "\n", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.cast_classes": [[58, 60], ["y_data.astype"], "methods", ["None"], ["", "def", "cast_classes", "(", "self", ",", "y_datasets", ")", ":", "\n", "        ", "return", "[", "y_data", ".", "astype", "(", "'int'", ")", "for", "y_data", "in", "y_datasets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.prediction": [[69, 74], ["class_nn_base.NN_base.model.predict", "numpy.around"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_sota.OOB.predict"], ["", "def", "prediction", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_hat", "=", "self", ".", "model", ".", "predict", "(", "x", "=", "x", ",", "verbose", "=", "0", ")", "\n", "y_hat_class", "=", "np", ".", "around", "(", "y_hat", ")", "\n", "\n", "return", "y_hat", ",", "y_hat_class", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.training": [[79, 87], ["class_nn_base.NN_base.model.fit", "class_nn_base.NN_base.cast_classes"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.cast_classes"], ["", "def", "training", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "model", ".", "fit", "(", "\n", "x", "=", "x", ",", "\n", "y", "=", "self", ".", "cast_classes", "(", "[", "y", "]", ")", ",", "# cast class to integer", "\n", "epochs", "=", "self", ".", "num_epochs", ",", "\n", "batch_size", "=", "self", ".", "minibatch_size", ",", "\n", "class_weight", "=", "self", ".", "class_weights", ",", "\n", "verbose", "=", "0", "# 0: off, 1: full, 2: brief", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.change_class_weights": [[93, 96], ["None"], "methods", ["None"], ["", "def", "change_class_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "if", "self", ".", "class_weights", "!=", "weights", ":", "\n", "            ", "self", ".", "class_weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.get_num_epochs": [[101, 103], ["None"], "methods", ["None"], ["", "", "def", "get_num_epochs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.change_num_epochs": [[108, 111], ["None"], "methods", ["None"], ["", "def", "change_num_epochs", "(", "self", ",", "n_epochs", ")", ":", "\n", "        ", "if", "self", ".", "num_epochs", "!=", "n_epochs", ":", "\n", "            ", "self", ".", "num_epochs", "=", "n_epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.change_minibatch_size": [[116, 119], ["None"], "methods", ["None"], ["", "", "def", "change_minibatch_size", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "minibatch_size", "!=", "batch_size", ":", "\n", "            ", "self", ".", "minibatch_size", "=", "batch_size", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.__init__": [[18, 30], ["class_sota.Baseline.__init__", "collections.deque", "collections.deque", "collections.deque", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "queue_size_budget", ")", ":", "\n", "        ", "Baseline", ".", "__init__", "(", "self", ",", "model", ")", "\n", "\n", "# budget", "\n", "self", ".", "budget", "=", "queue_size_budget", "\n", "\n", "# init queues", "\n", "self", ".", "xs_neg", "=", "deque", "(", "maxlen", "=", "1", ")", "\n", "self", ".", "ys_neg", "=", "deque", "(", "maxlen", "=", "1", ")", "\n", "\n", "self", ".", "xs_pos", "=", "deque", "(", "maxlen", "=", "1", ")", "\n", "self", ".", "ys_pos", "=", "deque", "(", "maxlen", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue": [[35, 42], ["collections.deque", "collections.deque", "collections.deque", "collections.deque"], "methods", ["None"], ["", "def", "adapt_queue", "(", "self", ",", "q", ",", "q_cap", ")", ":", "\n", "        ", "if", "q", "==", "'neg'", ":", "\n", "            ", "self", ".", "xs_neg", "=", "deque", "(", "self", ".", "xs_neg", ",", "q_cap", ")", "\n", "self", ".", "ys_neg", "=", "deque", "(", "self", ".", "ys_neg", ",", "q_cap", ")", "\n", "", "elif", "q", "==", "'pos'", ":", "\n", "            ", "self", ".", "xs_pos", "=", "deque", "(", "self", ".", "xs_pos", ",", "q_cap", ")", "\n", "self", ".", "ys_pos", "=", "deque", "(", "self", ".", "ys_pos", ",", "q_cap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.get_training_set": [[47, 62], ["len", "numpy.array().reshape", "numpy.array().reshape", "class_qbr.QBR.model.change_minibatch_size", "list", "list", "list", "list", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_nn_base.NN_base.change_minibatch_size"], ["", "", "def", "get_training_set", "(", "self", ",", "n_features", ")", ":", "\n", "# merge queues", "\n", "        ", "xs", "=", "list", "(", "self", ".", "xs_neg", ")", "+", "list", "(", "self", ".", "xs_pos", ")", "\n", "ys", "=", "list", "(", "self", ".", "ys_neg", ")", "+", "list", "(", "self", ".", "ys_pos", ")", "\n", "\n", "# convert merged queues to np arrays", "\n", "size", "=", "len", "(", "ys", ")", "# current queue size", "\n", "x", "=", "np", ".", "array", "(", "xs", ")", ".", "reshape", "(", "size", ",", "n_features", ")", "\n", "y", "=", "np", ".", "array", "(", "ys", ")", ".", "reshape", "(", "size", ",", "1", ")", "\n", "\n", "# \u00a0batch GD", "\n", "self", ".", "model", ".", "change_minibatch_size", "(", "size", ")", "\n", "\n", "# return", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.append_to_queues": [[63, 80], ["class_qbr.QBR.xs_neg.append", "class_qbr.QBR.ys_neg.append", "len", "class_qbr.QBR.xs_pos.append", "class_qbr.QBR.ys_pos.append", "len", "class_qbr.QBR.adapt_queue", "class_qbr.QBR.adapt_queue"], "methods", ["home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue", "home.repos.pwc.inspect_result.kmalialis_areba.None.class_qbr.QBR.adapt_queue"], ["", "def", "append_to_queues", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "y", "==", "0", ":", "\n", "            ", "self", ".", "xs_neg", ".", "append", "(", "x", ")", "\n", "self", ".", "ys_neg", ".", "append", "(", "y", ")", "\n", "\n", "length", "=", "len", "(", "self", ".", "ys_neg", ")", "\n", "capacity", "=", "self", ".", "ys_neg", ".", "maxlen", "\n", "if", "length", "==", "capacity", "and", "capacity", "<", "self", ".", "budget", "/", "2.0", ":", "\n", "                ", "self", ".", "adapt_queue", "(", "'neg'", ",", "capacity", "+", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "xs_pos", ".", "append", "(", "x", ")", "\n", "self", ".", "ys_pos", ".", "append", "(", "y", ")", "\n", "\n", "length", "=", "len", "(", "self", ".", "ys_pos", ")", "\n", "capacity", "=", "self", ".", "ys_pos", ".", "maxlen", "\n", "if", "length", "==", "capacity", "and", "capacity", "<", "self", ".", "budget", "/", "2.0", ":", "\n", "                ", "self", ".", "adapt_queue", "(", "'pos'", ",", "capacity", "+", "1", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kmalialis_areba.circle.data_generate_circle.create_circle": [[39, 61], ["numpy.zeros", "numpy.random.uniform", "numpy.random.uniform", "numpy.sqrt", "numpy.power", "numpy.power"], "function", ["None"], ["def", "create_circle", "(", "range_x", ",", "range_y", ",", "size", ")", ":", "\n", "# Generate samples", "\n", "    ", "data", "=", "np", ".", "zeros", "(", "(", "size", ",", "3", ")", ")", "\n", "sample_xs", "=", "np", ".", "random", ".", "uniform", "(", "range_x", "[", "0", "]", ",", "range_x", "[", "1", "]", ",", "size", "=", "size", ")", "\n", "sample_ys", "=", "np", ".", "random", ".", "uniform", "(", "range_y", "[", "0", "]", ",", "range_y", "[", "1", "]", ",", "size", "=", "size", ")", "\n", "\n", "# Store samples", "\n", "data", "[", ":", ",", "0", "]", "=", "sample_xs", "\n", "data", "[", ":", ",", "1", "]", "=", "sample_ys", "\n", "\n", "# Derive class", "\n", "temp", "=", "circle_radius", ">=", "np", ".", "sqrt", "(", "\n", "np", ".", "power", "(", "sample_xs", "-", "circle_originX", ",", "2", ")", "+", "\n", "np", ".", "power", "(", "sample_ys", "-", "circle_originY", ",", "2", ")", "\n", ")", "\n", "\n", "temp", "[", "temp", "==", "True", "]", "=", "1", "# fault if within circle", "\n", "temp", "[", "temp", "==", "False", "]", "=", "0", "# normal if outside the circle", "\n", "data", "[", ":", ",", "2", "]", "=", "temp", "\n", "\n", "# Return", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.sea.data_generate_sea.create_sea": [[27, 60], ["numpy.zeros", "numpy.random.uniform", "numpy.random.uniform", "numpy.concatenate", "numpy.random.shuffle"], "function", ["None"], ["def", "create_sea", "(", "range_x", ",", "range_y", ",", "size", ")", ":", "\n", "# Generate samples", "\n", "    ", "data", "=", "np", ".", "zeros", "(", "(", "size", ",", "3", ")", ")", "\n", "sample_xs", "=", "np", ".", "random", ".", "uniform", "(", "range_x", "[", "0", "]", ",", "range_x", "[", "1", "]", ",", "size", "=", "size", ")", "\n", "sample_ys", "=", "np", ".", "random", ".", "uniform", "(", "range_y", "[", "0", "]", ",", "range_y", "[", "1", "]", ",", "size", "=", "size", ")", "\n", "\n", "# Store samples", "\n", "data", "[", ":", ",", "0", "]", "=", "sample_xs", "\n", "data", "[", ":", ",", "1", "]", "=", "sample_ys", "\n", "\n", "# Derive class", "\n", "temp", "=", "data", "[", ":", ",", "0", "]", "+", "data", "[", ":", ",", "1", "]", "\n", "temp", "[", "temp", "<=", "7.0", "]", "=", "1", "\n", "temp", "[", "temp", ">", "7.0", "]", "=", "0", "\n", "data", "[", ":", ",", "2", "]", "=", "temp", "\n", "\n", "# balance dataset", "\n", "data1", "=", "data", "[", "data", "[", ":", ",", "2", "]", "==", "1", "]", "\n", "data1", "=", "data1", "[", ":", "50000", ",", ":", "]", "\n", "\n", "data0", "=", "data", "[", "data", "[", ":", ",", "2", "]", "==", "0", "]", "\n", "data0", "=", "data0", "[", ":", "50000", ",", ":", "]", "\n", "\n", "data", "=", "np", ".", "concatenate", "(", "(", "data0", ",", "data1", ")", ")", "\n", "\n", "# shuffle dataset", "\n", "np", ".", "random", ".", "shuffle", "(", "data", ")", "\n", "\n", "# normalise dataset", "\n", "data", "[", ":", ",", ":", "2", "]", "=", "data", "[", ":", ",", ":", "2", "]", "/", "10.0", "\n", "\n", "# Return", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.kmalialis_areba.sine.data_generate_sine.create_sine": [[32, 51], ["numpy.zeros", "numpy.random.uniform", "numpy.random.uniform", "numpy.sin"], "function", ["None"], ["def", "create_sine", "(", "range_x", ",", "range_y", ",", "size", ")", ":", "\n", "# Generate samples", "\n", "    ", "data", "=", "np", ".", "zeros", "(", "(", "size", ",", "3", ")", ")", "\n", "sample_xs", "=", "np", ".", "random", ".", "uniform", "(", "range_x", "[", "0", "]", ",", "range_x", "[", "1", "]", ",", "size", "=", "size", ")", "\n", "sample_ys", "=", "np", ".", "random", ".", "uniform", "(", "range_y", "[", "0", "]", ",", "range_y", "[", "1", "]", ",", "size", "=", "size", ")", "\n", "\n", "# Store samples", "\n", "data", "[", ":", ",", "0", "]", "=", "sample_xs", "\n", "data", "[", ":", ",", "1", "]", "=", "sample_ys", "\n", "\n", "# Derive class", "\n", "temp", "=", "sample_ys", "<", "np", ".", "sin", "(", "sample_xs", ")", "\n", "\n", "temp", "[", "temp", "==", "True", "]", "=", "1", "# fault if below the curve", "\n", "temp", "[", "temp", "==", "False", "]", "=", "0", "# normal if above (or on) the curve", "\n", "data", "[", ":", ",", "2", "]", "=", "temp", "\n", "\n", "# Return", "\n", "return", "data", "\n", "\n"]]}