{"home.repos.pwc.inspect_result.inigoval_fixmatch.main.config.update_config": [[9, 36], ["None"], "function", ["None"], ["def", "update_config", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    Adjust config values if using rgz data to remove obsolete values\n    \"\"\"", "\n", "# TODO only use cut_threshold as an arg for save directory when using rgz dataset - modify in train script. Then can safely delete here.", "\n", "if", "config", "[", "\"method\"", "]", "==", "\"fixmatch\"", ":", "\n", "        ", "if", "config", "[", "\"data\"", "]", "[", "\"unlabelled\"", "]", "!=", "\"rgz\"", ":", "\n", "            ", "del", "config", "[", "\"cut_threshold\"", "]", "\n", "\n", "", "if", "config", "[", "\"mu\"", "]", "==", "-", "1", ":", "\n", "            ", "config", "[", "\"mu\"", "]", "=", "config", "[", "\"data\"", "]", "[", "\"u_frac\"", "]", "\n", "\n", "", "if", "config", "[", "\"data\"", "]", "[", "\"unlabelled\"", "]", "==", "\"rgz\"", ":", "\n", "            ", "config", "[", "\"data\"", "]", "[", "\"fri_R\"", "]", "=", "-", "1", "\n", "\n", "", "", "if", "config", "[", "\"method\"", "]", "==", "\"baseline\"", ":", "\n", "        ", "config", "[", "\"data\"", "]", "[", "\"fri_R\"", "]", "=", "-", "1", "\n", "config", "[", "\"data\"", "]", "[", "\"unlabelled\"", "]", "=", "\"all\"", "\n", "config", "[", "\"mu\"", "]", "=", "1", "\n", "config", "[", "\"data\"", "]", "[", "\"u_frac\"", "]", "=", "1", "\n", "config", "[", "\"train\"", "]", "[", "\"p-strong\"", "]", "=", "0", "\n", "config", "[", "\"cutout\"", "]", "=", "0", "\n", "config", "[", "\"randpixel\"", "]", "=", "0", "\n", "\n", "del", "config", "[", "\"cut_threshold\"", "]", "# used to specify save directory", "\n", "del", "config", "[", "\"lambda\"", "]", "\n", "del", "config", "[", "\"tau\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.config.load_config": [[40, 48], ["config.update_config", "open", "yaml.load"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.config.update_config"], ["", "", "def", "load_config", "(", ")", ":", "\n", "    ", "\"\"\"Helper function to load yaml config file, convert to python dictionary and return.\"\"\"", "\n", "path", "=", "path_dict", "[", "\"root\"", "]", "/", "\"config.yml\"", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "ymlconfig", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "ymlconfig", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "update_config", "(", "config", ")", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.entropy": [[28, 47], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.mean", "torch.mean", "torch.mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.detach().cpu().numpy", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.clamp.detach().cpu", "torch.clamp.detach"], "function", ["None"], ["def", "entropy", "(", "p", ",", "eps", "=", "0.0000001", ",", "loss", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the entropy of a binary classification prediction given a probability for either of the two classes.\n\n    Keyword arguments:\n    eps -- small additive factor to avoid log(0)\n    loss -- boolean value determines whether to return detached value for inference (False) or differentiable value for training (True)\n    \"\"\"", "\n", "H_i", "=", "-", "torch", ".", "log", "(", "p", "+", "eps", ")", "*", "p", "\n", "H", "=", "torch", ".", "sum", "(", "H_i", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "not", "loss", ":", "\n", "# Clamp to avoid negative values due to eps", "\n", "        ", "H", "=", "torch", ".", "clamp", "(", "H", ",", "min", "=", "0", ")", "\n", "return", "H", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "H", "=", "torch", ".", "mean", "(", "H", ")", "\n", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.fig2img": [[49, 58], ["io.BytesIO", "fig.savefig", "io.BytesIO.seek", "PIL.Image.open"], "function", ["None"], ["", "def", "fig2img", "(", "fig", ")", ":", "\n", "    ", "\"\"\"Convert a Matplotlib figure to a PIL Image and return it\"\"\"", "\n", "import", "io", "\n", "\n", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "fig", ".", "savefig", "(", "buf", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "img", "=", "Image", ".", "open", "(", "buf", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.dset2tens": [[60, 63], ["next", "iter", "torch.utils.data.DataLoader", "int", "len"], "function", ["None"], ["", "def", "dset2tens", "(", "dset", ")", ":", "\n", "    ", "\"\"\"Return a tuple (x, y) containing the entire input dataset (carefuwith large datasets)\"\"\"", "\n", "return", "next", "(", "iter", "(", "DataLoader", "(", "dset", ",", "int", "(", "len", "(", "dset", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.flip": [[65, 73], ["int", "torch.randint", "torch.randint", "torch.randint"], "function", ["None"], ["", "def", "flip", "(", "labels", ",", "p_flip", ")", ":", "\n", "    ", "\"\"\"Flip a number of labels\"\"\"", "\n", "n_labels", "=", "labels", ".", "shape", "[", "0", "]", "\n", "n_flip", "=", "int", "(", "p_flip", "*", "n_labels", ")", "\n", "if", "n_flip", ":", "\n", "        ", "idx", "=", "torch", ".", "randint", "(", "labels", ".", "shape", "[", "0", "]", ",", "(", "n_flip", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.compute_mu_sig": [[75, 79], ["utilities.dset2tens", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.dset2tens"], ["", "", "def", "compute_mu_sig", "(", "dset", ")", ":", "\n", "    ", "\"\"\"Compute mean and standard variance of a dataset (careful with large datasets)\"\"\"", "\n", "x", ",", "_", "=", "dset2tens", "(", "dset", ")", "\n", "return", "torch", ".", "mean", "(", "x", ")", ",", "torch", ".", "std", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.batch_eval": [[81, 103], ["len", "torch.utils.data.DataLoader", "fn_dict.keys", "fn_dict.items", "outs[].append", "fn"], "function", ["None"], ["", "def", "batch_eval", "(", "fn_dict", ",", "dset", ",", "batch_size", "=", "200", ")", ":", "\n", "    ", "\"\"\"\n    Take functions which acts on data x,y and evaluates over the whole dataset in batches, returning a list of results for each calculated metric\n    \"\"\"", "\n", "n", "=", "len", "(", "dset", ")", "\n", "loader", "=", "DataLoader", "(", "dset", ",", "batch_size", ")", "\n", "\n", "# Fill the output dictionary with empty lists", "\n", "outs", "=", "{", "}", "\n", "for", "key", "in", "fn_dict", ".", "keys", "(", ")", ":", "\n", "        ", "outs", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "for", "x", ",", "y", "in", "loader", ":", "\n", "# Take only weakly augmented sample if passing through unlabelled data", "\n", "#        if strong_T:", "\n", "#            x = x[0]", "\n", "\n", "# Append result from each batch to list in outputs dictionary", "\n", "        ", "for", "key", ",", "fn", "in", "fn_dict", ".", "items", "(", ")", ":", "\n", "            ", "outs", "[", "key", "]", ".", "append", "(", "fn", "(", "x", ",", "y", ")", ")", "\n", "\n", "", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.log_examples": [[105, 128], ["torch.utils.data.DataLoader", "wandb_logger.log_image", "matplotlib.figure", "mpl_toolkits.axes_grid1.ImageGrid", "zip", "matplotlib.axis", "utilities.fig2img", "save_list.append", "matplotlib.close", "im.reshape.reshape", "ax.axis", "ax.imshow"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.fig2img"], ["", "def", "log_examples", "(", "wandb_logger", ",", "dset", ",", "n", "=", "18", ")", ":", "\n", "    ", "save_list", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "x", ",", "_", "in", "DataLoader", "(", "dset", ",", "1", ")", ":", "\n", "        ", "if", "count", ">", "n", ":", "\n", "            ", "break", "\n", "", "x1", ",", "x2", "=", "x", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "13.0", ",", "13.0", ")", ")", "\n", "grid", "=", "ImageGrid", "(", "fig", ",", "111", ",", "nrows_ncols", "=", "(", "1", ",", "2", ")", ",", "axes_pad", "=", "0", ")", "\n", "\n", "img_list", "=", "[", "x1", ",", "x2", "]", "\n", "for", "ax", ",", "im", "in", "zip", "(", "grid", ",", "img_list", ")", ":", "\n", "            ", "im", "=", "im", ".", "reshape", "(", "(", "150", ",", "150", ")", ")", "\n", "ax", ".", "axis", "(", "\"off\"", ")", "\n", "ax", ".", "imshow", "(", "im", ",", "cmap", "=", "\"hot\"", ")", "\n", "\n", "", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "pil_img", "=", "fig2img", "(", "fig", ")", "\n", "save_list", ".", "append", "(", "pil_img", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "count", "+=", "1", "\n", "\n", "", "wandb_logger", ".", "log_image", "(", "key", "=", "f\"image_pairs\"", ",", "images", "=", "save_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.GaussianNoise.__init__": [[22, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "std", ")", ":", "\n", "        ", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.GaussianNoise.__call__": [[25, 29], ["torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "mean", "=", "torch", ".", "full_like", "(", "img", ",", "0", ")", "\n", "std", "=", "torch", ".", "full_like", "(", "img", ",", "self", ".", "std", ")", "\n", "return", "img", "+", "torch", ".", "normal", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.TransformFixMatch.__init__": [[34, 62], ["torchvision.Compose", "torchvision.Compose", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.ToTensor", "dataloading.utils.Circle_Crop", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.ToTensor", "dataloading.utils.Circle_Crop", "torchvision.ToPILImage", "randaugmentmc.RandAugmentMC", "torchvision.ToTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ",", "mu", ",", "sig", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "weak", "=", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "T", ".", "RandomRotation", "(", "180", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "Circle_Crop", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# crop_scale = (self.config[\"random_crop_min\"], self.config[\"random_crop_max\"])", "\n", "self", ".", "strong", "=", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "T", ".", "RandomRotation", "(", "180", ")", ",", "\n", "# T.CenterCrop(self.config[\"center_crop\"]),", "\n", "# T.RandomResizedCrop(150, scale=crop_scale),", "\n", "# T.RandomCrop(size=32, padding=int(32 * 0.125), padding_mode=\"reflect\"),", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "Circle_Crop", "(", ")", ",", "\n", "T", ".", "ToPILImage", "(", ")", ",", "\n", "RandAugmentMC", "(", "n", "=", "self", ".", "config", "[", "\"n_aug\"", "]", ",", "m", "=", "self", ".", "config", "[", "\"m_aug\"", "]", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "normalize", "=", "T", ".", "Normalize", "(", "(", "mu", ",", ")", ",", "(", "sig", ",", ")", ")", "\n", "# self.noise = GaussianNoise(self.config[\"std\"])", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.TransformFixMatch.__call__": [[64, 69], ["fixmatch.TransformFixMatch.weak", "fixmatch.TransformFixMatch.strong", "fixmatch.TransformFixMatch.normalize", "fixmatch.TransformFixMatch.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "weak", "=", "self", ".", "weak", "(", "x", ")", "\n", "strong", "=", "self", ".", "strong", "(", "x", ")", "\n", "# returns both weak and strong augmentations", "\n", "return", "self", ".", "normalize", "(", "weak", ")", ",", "self", ".", "normalize", "(", "strong", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.clf.__init__": [[72, 81], ["pytorch_lightning.LightningModule.__init__", "fixmatch.clf.save_hyperparameters", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "paths.Path_Handler.Path_Handler", "networks.models.Tang"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "self", ".", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"mean\"", ")", "\n", "self", ".", "best_acc", "=", "0", "\n", "self", ".", "config", "=", "config", "\n", "paths", "=", "Path_Handler", "(", ")", "\n", "self", ".", "paths", "=", "paths", ".", "dict", "\n", "self", ".", "C", "=", "Tang", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.clf.forward": [[82, 88], ["fixmatch.clf.C", "fixmatch.clf.C"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "logit", "=", "False", ")", ":", "\n", "        ", "\"\"\"Return logits or probability on forward pass\"\"\"", "\n", "if", "logit", ":", "\n", "            ", "return", "self", ".", "C", "(", "x", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "C", "(", "x", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.clf.training_step": [[89, 161], ["fixmatch.clf.C", "fixmatch.clf.C", "fixmatch.clf.C", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "fixmatch.clf.log", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "p_pseudo_label.ge().float", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "fixmatch.clf.log", "fixmatch.clf.log", "p_u_w.detach", "fixmatch.clf.C", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "fixmatch.clf.log", "fixmatch.clf.log", "p_pseudo_label.ge"], "methods", ["None"], ["", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "if", "self", ".", "config", "[", "\"type\"", "]", "==", "\"fixmatch\"", ":", "\n", "# Retrieve batches of (un)labelled data ##", "\n", "# l = labelled, u = unlabelled", "\n", "# CombinedLoader does NOT combine, exactly, it parallel hands them. Up to you to combine them.", "\n", "            ", "x_l", ",", "y_l", "=", "batch", "[", "\"l\"", "]", "\n", "x_u", ",", "_", "=", "batch", "[", "\"u\"", "]", "\n", "x_u_w", ",", "x_u_s", "=", "x_u", "# transform outputs a tuple of (weak, strong) augmented images", "\n", "\n", "## Pass through classifier ##", "\n", "l_l", ",", "_", "=", "self", ".", "C", "(", "x_l", ")", "\n", "l_u_w", ",", "p_u_w", "=", "self", ".", "C", "(", "x_u_w", ")", "\n", "l_u_s", ",", "p_u_s", "=", "self", ".", "C", "(", "x_u_s", ")", "\n", "\n", "#########################", "\n", "## Supervised Loss l_l ##", "\n", "#########################", "\n", "\n", "ce_loss", "=", "F", ".", "cross_entropy", "(", "l_l", ",", "y_l", ")", "\n", "self", ".", "log", "(", "\"train/cross entropy loss\"", ",", "ce_loss", ")", "\n", "\n", "#######################", "\n", "## Pseudo label loss ##", "\n", "#######################", "\n", "\n", "# get pseudo labels", "\n", "p_pseudo_label", ",", "pseudo_label", "=", "torch", ".", "max", "(", "p_u_w", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# create a thresholding mask", "\n", "threshold_mask", "=", "p_pseudo_label", ".", "ge", "(", "self", ".", "config", "[", "\"tau\"", "]", ")", ".", "float", "(", ")", "\n", "\n", "# calculate loss and mask out values below loss", "\n", "pseudo_loss", "=", "F", ".", "cross_entropy", "(", "l_u_s", ",", "pseudo_label", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "# calculate label balance in labelled data", "\n", "#            if self.config[\"train\"][\"label_weighting\"]:", "\n", "#                r_labels_l = []", "\n", "#                r_labels_u = []", "\n", "#                for l in range(self.config[\"data\"][\"n_labels\"]):", "\n", "#                    # calculate labelled data label ratios", "\n", "#                    r_labels_l.append(torch.count_nonzero(y_l == l) / len(y_l))", "\n", "#", "\n", "#                    # calculate propagated label ratios", "\n", "#                    prop_label = pseudo_label[threshold_mask]", "\n", "#                    r_labels_u.append(torch.count_nonzero(prop_label == l) / len(y_l))", "\n", "\n", "pseudo_loss", "=", "(", "pseudo_loss", "*", "threshold_mask", ")", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "\"train/pseudo-label loss\"", ",", "pseudo_loss", ")", "\n", "\n", "################", "\n", "## Total Loss ##", "\n", "################", "\n", "\n", "loss", "=", "ce_loss", "+", "self", ".", "config", "[", "\"lambda\"", "]", "*", "pseudo_loss", "\n", "self", ".", "log", "(", "\"train/loss\"", ",", "loss", ")", "\n", "return", "loss", "\n", "\n", "", "elif", "self", ".", "config", "[", "\"type\"", "]", "==", "\"baseline\"", ":", "\n", "\n", "## Retrieve batch of labelled data only ##", "\n", "            ", "x_l", ",", "y_l", "=", "batch", "[", "\"l\"", "]", "\n", "\n", "## Pass through classifier ##", "\n", "l_l", ",", "_", "=", "self", ".", "C", "(", "x_l", ")", "\n", "\n", "## Supervised Loss l_l", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "l_l", ",", "y_l", ")", "\n", "self", ".", "log", "(", "\"train/cross entropy loss\"", ",", "loss", ")", "\n", "\n", "## Total Loss ##", "\n", "self", ".", "log", "(", "\"train/loss\"", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.clf.validation_step": [[162, 176], ["fixmatch.clf.C", "fixmatch.clf.ce_loss", "fixmatch.clf.log", "torchmetrics.accuracy", "fixmatch.clf.log"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.accuracy"], ["", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# Loop through unlabelled and test loaders to calculate metrics #", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "logits", ",", "y_pred", "=", "self", ".", "C", "(", "x", ")", "\n", "\n", "## Loss ##", "\n", "loss", "=", "self", ".", "ce_loss", "(", "logits", ",", "y", ")", "\n", "self", ".", "log", "(", "\"val/loss\"", ",", "loss", ")", "\n", "\n", "## Accuracy ##", "\n", "acc", "=", "tmF", ".", "accuracy", "(", "y_pred", ",", "y", ")", "\n", "self", ".", "log", "(", "\"val/accuracy\"", ",", "acc", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.clf.validation_epoch_end": [[177, 186], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "fixmatch.clf.log"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outs", ")", ":", "\n", "## Compute mean over epoch ##", "\n", "        ", "outs", "=", "torch", ".", "FloatTensor", "(", "outs", ")", "\n", "acc", "=", "torch", ".", "mean", "(", "outs", ")", "\n", "\n", "## Save accuracy if best in run ##", "\n", "if", "acc", ">", "self", ".", "best_acc", ":", "\n", "            ", "self", ".", "best_acc", "=", "acc", "\n", "", "self", ".", "log", "(", "\"val/best_accuracy\"", ",", "self", ".", "best_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.clf.test_step": [[187, 235], ["fixmatch.clf.C", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "fixmatch.clf.log", "torchmetrics.accuracy", "fixmatch.clf.log", "torchmetrics.f1", "torchmetrics.precision", "torchmetrics.recall", "zip", "fixmatch.clf.C", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torchmetrics.accuracy", "fixmatch.clf.log", "fixmatch.clf.log", "torchmetrics.f1", "torchmetrics.precision", "torchmetrics.recall", "zip", "fixmatch.clf.log", "fixmatch.clf.log", "fixmatch.clf.log", "fixmatch.clf.log", "fixmatch.clf.log", "fixmatch.clf.log"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.accuracy", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.accuracy"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "        ", "if", "dataloader_idx", "==", "0", ":", "\n", "## Load test batch ##", "\n", "            ", "x", ",", "y", "=", "batch", "\n", "logits", ",", "y_pred", "=", "self", ".", "C", "(", "x", ")", "\n", "\n", "## Calculate and log test loss ##", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "self", ".", "log", "(", "f\"test/loss\"", ",", "loss", ",", "add_dataloader_idx", "=", "False", ")", "\n", "\n", "## Calculate and log test accuracy ##", "\n", "acc", "=", "tmF", ".", "accuracy", "(", "y_pred", ",", "y", ")", "\n", "self", ".", "log", "(", "f\"test/accuracy\"", ",", "acc", ",", "add_dataloader_idx", "=", "False", ")", "\n", "\n", "## Calculate and log F1, precision, recall for both classes ##", "\n", "f1", "=", "tmF", ".", "f1", "(", "y_pred", ",", "y", ",", "num_classes", "=", "2", ",", "average", "=", "\"none\"", ")", "\n", "precision", "=", "tmF", ".", "precision", "(", "y_pred", ",", "y", ",", "num_classes", "=", "2", ",", "average", "=", "\"none\"", ")", "\n", "recall", "=", "tmF", ".", "recall", "(", "y_pred", ",", "y", ",", "num_classes", "=", "2", ",", "average", "=", "\"none\"", ")", "\n", "names", "=", "[", "\"fri\"", ",", "\"frii\"", "]", "\n", "\n", "for", "p", ",", "r", ",", "f", ",", "name", "in", "zip", "(", "precision", ",", "recall", ",", "f1", ",", "names", ")", ":", "\n", "                ", "self", ".", "log", "(", "f\"test/{name}_precision\"", ",", "p", ",", "add_dataloader_idx", "=", "False", ")", "\n", "self", ".", "log", "(", "f\"test/{name}_recall\"", ",", "r", ",", "add_dataloader_idx", "=", "False", ")", "\n", "self", ".", "log", "(", "f\"test/{name}_f1\"", ",", "f", ",", "add_dataloader_idx", "=", "False", ")", "\n", "\n", "", "", "if", "dataloader_idx", "==", "1", ":", "\n", "## Load unlabelled batch ##", "\n", "            ", "x", ",", "y", "=", "batch", "\n", "x", "=", "x", "[", "0", "]", "\n", "logits", ",", "y_pred", "=", "self", ".", "C", "(", "x", ")", "\n", "\n", "## Accuracy and Loss ##", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "acc", "=", "tmF", ".", "accuracy", "(", "y_pred", ",", "y", ")", "\n", "self", ".", "log", "(", "f\"unlabelled/loss\"", ",", "loss", ",", "add_dataloader_idx", "=", "False", ")", "\n", "self", ".", "log", "(", "f\"unlabelled/accuracy\"", ",", "acc", ",", "add_dataloader_idx", "=", "False", ")", "\n", "\n", "## F1, precision, recall ##", "\n", "f1", "=", "tmF", ".", "f1", "(", "y_pred", ",", "y", ",", "num_classes", "=", "2", ",", "average", "=", "\"none\"", ")", "\n", "precision", "=", "tmF", ".", "precision", "(", "y_pred", ",", "y", ",", "num_classes", "=", "2", ",", "average", "=", "\"none\"", ")", "\n", "recall", "=", "tmF", ".", "recall", "(", "y_pred", ",", "y", ",", "num_classes", "=", "2", ",", "average", "=", "\"none\"", ")", "\n", "names", "=", "[", "\"fri\"", ",", "\"frii\"", "]", "\n", "\n", "## F1, precision, recall ##", "\n", "for", "p", ",", "r", ",", "f", ",", "name", "in", "zip", "(", "precision", ",", "recall", ",", "f1", ",", "names", ")", ":", "\n", "                ", "self", ".", "log", "(", "f\"unlabelled/{name}_precision\"", ",", "p", ",", "add_dataloader_idx", "=", "False", ")", "\n", "self", ".", "log", "(", "f\"unlabelled/{name}_recall\"", ",", "r", ",", "add_dataloader_idx", "=", "False", ")", "\n", "self", ".", "log", "(", "f\"unlabelled/{name}_f1\"", ",", "f", ",", "add_dataloader_idx", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.fixmatch.clf.configure_optimizers": [[236, 239], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "fixmatch.clf.parameters"], "methods", ["None"], ["", "", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "config", "[", "\"lr\"", "]", ")", "\n", "return", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.paths.Path_Handler.__init__": [[7, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.paths.Path_Handler.fill_dict": [[10, 23], ["pathlib.Path().resolve", "pathlib.Path"], "methods", ["None"], ["", "def", "fill_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create dictionary of required paths\"\"\"", "\n", "root", "=", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", ".", "parent", "\n", "path_dict", "=", "{", "}", "\n", "path_dict", "[", "\"root\"", "]", "=", "root", "\n", "\n", "path_dict", "[", "\"data\"", "]", "=", "root", "/", "\"data\"", "\n", "path_dict", "[", "\"files\"", "]", "=", "root", "/", "\"files\"", "\n", "\n", "path_dict", "[", "\"rgz\"", "]", "=", "root", "/", "\"data\"", "/", "\"rgz\"", "\n", "path_dict", "[", "\"mb\"", "]", "=", "root", "/", "\"data\"", "/", "\"mb\"", "\n", "\n", "self", ".", "dict", "=", "path_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.paths.Path_Handler.create_paths": [[24, 29], ["paths.Path_Handler.dict.values", "pathlib.Path.exists", "pathlib.Path.mkdir"], "methods", ["None"], ["", "def", "create_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create missing directories\"\"\"", "\n", "for", "path", "in", "self", ".", "dict", ".", "values", "(", ")", ":", "\n", "            ", "if", "not", "Path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "Path", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.paths.Path_Handler._dict": [[30, 35], ["paths.Path_Handler.fill_dict", "paths.Path_Handler.create_paths"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.paths.Path_Handler.fill_dict", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.paths.Path_Handler.create_paths"], ["", "", "", "def", "_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate path dictionary, create any missing directories and return dictionary\"\"\"", "\n", "self", ".", "fill_dict", "(", ")", "\n", "self", ".", "create_paths", "(", ")", "\n", "return", "self", ".", "dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.callbacks.MetricLogger.__init__": [[19, 21], ["pytorch_lightning.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.callbacks.MetricLogger.on_test_epoch_end": [[22, 51], ["utilities.dset2tens", "x.type_as.type_as.type_as", "y.type_as.type_as.type_as", "pl_module.forward", "utilities.entropy", "H.tolist.tolist.tolist", "wandb.Table", "trainer.logger.experiment.log", "pl_module.forward", "torch.max", "torch.nonzero().view", "numpy.mean", "pl_module.log", "utilities.entropy", "wandb.plot.histogram", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.dset2tens", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.Circle_Crop.forward", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.entropy", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.Circle_Crop.forward", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.entropy"], ["", "def", "on_test_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "\n", "        ", "x", ",", "y", "=", "dset2tens", "(", "pl_module", ".", "trainer", ".", "datamodule", ".", "data", "[", "\"test\"", "]", ")", "\n", "x", "=", "x", ".", "type_as", "(", "pl_module", ".", "C", ".", "conv1", "[", "0", "]", ".", "weight", ")", "\n", "y", "=", "y", ".", "type_as", "(", "pl_module", ".", "C", ".", "conv1", "[", "0", "]", ".", "weight", ")", "\n", "\n", "y_hat", "=", "pl_module", ".", "forward", "(", "x", ")", "\n", "\n", "# Softmax entropy #", "\n", "H", "=", "entropy", "(", "y_hat", ")", "\n", "H", "=", "H", ".", "tolist", "(", ")", "\n", "\n", "# Plot histogram #", "\n", "data", "=", "[", "[", "h", ",", "pl_module", ".", "current_epoch", "]", "for", "h", "in", "H", "]", "\n", "table", "=", "wandb", ".", "Table", "(", "data", "=", "data", ",", "columns", "=", "[", "\"entropy\"", ",", "\"epoch\"", "]", ")", "\n", "trainer", ".", "logger", ".", "experiment", ".", "log", "(", "\n", "{", "\n", "\"test/entropy\"", ":", "wandb", ".", "plot", ".", "histogram", "(", "\n", "table", ",", "\"entropy\"", ",", "title", "=", "\"softmax entropy (test)\"", "\n", ")", "\n", "}", "\n", ")", "\n", "\n", "y_hat", "=", "pl_module", ".", "forward", "(", "x", ")", "\n", "p_pred", ",", "y_pred", "=", "torch", ".", "max", "(", "y_hat", ",", "1", ")", "\n", "idx_wrong", "=", "torch", ".", "nonzero", "(", "y_pred", "!=", "y", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "H_wrong", "=", "np", ".", "mean", "(", "entropy", "(", "y_hat", "[", "idx_wrong", ",", "...", "]", ")", ")", "\n", "pl_module", ".", "log", "(", "\"average misclassification entropy\"", ",", "H_wrong", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.callbacks.FeaturePlot.__init__": [[56, 58], ["pytorch_lightning.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.callbacks.FeaturePlot.on_test_epoch_end": [[59, 91], ["utilities.dset2tens", "x_l.type_as.type_as.type_as", "y_l.type_as.type_as.type_as", "utilities.dset2tens", "x_test.type_as.type_as.type_as", "y_test.type_as.type_as.type_as", "x_u.type_as.type_as.type_as", "y_u.type_as.type_as.type_as", "zip", "trainer.logger.experiment.log", "utilities.dset2tens", "pl_module.forward", "torch.cat().tolist", "wandb.Table", "wandb.plot.scatter", "torch.cat", "y.view"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.dset2tens", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.dset2tens", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.dset2tens", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.Circle_Crop.forward"], ["", "def", "on_test_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "x_l", ",", "y_l", "=", "dset2tens", "(", "pl_module", ".", "trainer", ".", "datamodule", ".", "data", "[", "\"l\"", "]", ")", "\n", "x_l", "=", "x_l", ".", "type_as", "(", "pl_module", ".", "C", ".", "conv1", "[", "0", "]", ".", "weight", ")", "\n", "y_l", "=", "y_l", ".", "type_as", "(", "pl_module", ".", "C", ".", "conv1", "[", "0", "]", ".", "weight", ")", "\n", "\n", "x_test", ",", "y_test", "=", "dset2tens", "(", "pl_module", ".", "trainer", ".", "datamodule", ".", "data", "[", "\"test\"", "]", ")", "\n", "x_test", "=", "x_test", ".", "type_as", "(", "pl_module", ".", "C", ".", "conv1", "[", "0", "]", ".", "weight", ")", "\n", "y_test", "=", "y_test", ".", "type_as", "(", "pl_module", ".", "C", ".", "conv1", "[", "0", "]", ".", "weight", ")", "\n", "\n", "x_u", ",", "y_u", "=", "dset2tens", "(", "pl_module", ".", "trainer", ".", "datamodule", ".", "data", "[", "\"u\"", "]", ")", "[", "0", "]", "\n", "x_u", "=", "x_u", ".", "type_as", "(", "pl_module", ".", "C", ".", "conv1", "[", "0", "]", ".", "weight", ")", "\n", "y_u", "=", "y_u", ".", "type_as", "(", "pl_module", ".", "C", ".", "conv1", "[", "0", "]", ".", "weight", ")", "\n", "\n", "plot_dict", "=", "{", "}", "\n", "\n", "for", "x", ",", "y", ",", "name", "in", "zip", "(", "\n", "[", "x_u", ",", "x_test", ",", "x_l", "]", ",", "\n", "[", "y_u", ",", "y_test", ",", "y_l", "]", ",", "\n", "[", "\"unlabelled\"", ",", "\"test\"", ",", "\"labelled\"", "]", ",", "\n", ")", ":", "\n", "\n", "            ", "logits", "=", "pl_module", ".", "forward", "(", "x", ",", "logit", "=", "True", ")", "\n", "\n", "data", "=", "torch", ".", "cat", "(", "(", "logits", ",", "y", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "table", "=", "wandb", ".", "Table", "(", "data", "=", "data", ",", "columns", "=", "[", "\"fr1\"", ",", "\"fr2\"", ",", "\"label\"", "]", ")", "\n", "\n", "plot_dict", "[", "f\"test/logits {name}\"", "]", "=", "wandb", ".", "plot", ".", "scatter", "(", "\n", "table", ",", "\"fr1\"", ",", "\"fr2\"", ",", "title", "=", "f\"{name} logits\"", "\n", ")", "\n", "\n", "", "trainer", ".", "logger", ".", "experiment", ".", "log", "(", "plot_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.callbacks.ImpurityLogger.__init__": [[96, 98], ["pytorch_lightning.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.callbacks.ImpurityLogger.on_validation_epoch_end": [[99, 115], ["utilities.batch_eval", "pl_module.log", "pl_module.log", "callbacks.ImpurityLogger.Impurities", "callbacks.ImpurityLogger.MaskRate", "numpy.sum", "len", "numpy.sum", "len", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.batch_eval"], ["", "def", "on_validation_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "\n", "# Initialise metrics into dictionary", "\n", "        ", "self", ".", "fn_dict", "=", "{", "\n", "\"impurities\"", ":", "self", ".", "Impurities", "(", "pl_module", ")", ",", "\n", "\"mask_rate\"", ":", "self", ".", "MaskRate", "(", "pl_module", ")", ",", "\n", "}", "\n", "data_u", "=", "pl_module", ".", "trainer", ".", "datamodule", ".", "data", "[", "\"u\"", "]", "\n", "\n", "outs", "=", "batch_eval", "(", "self", ".", "fn_dict", ",", "data_u", ")", "\n", "\n", "mask_rate", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "outs", "[", "\"mask_rate\"", "]", ")", ")", "/", "len", "(", "data_u", ")", "\n", "pl_module", ".", "log", "(", "\"train/mask_rate\"", ",", "mask_rate", ")", "\n", "\n", "impurities", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "outs", "[", "\"impurities\"", "]", ")", ")", "/", "len", "(", "data_u", ")", "\n", "pl_module", ".", "log", "(", "\"train/impurities\"", ",", "impurities", "/", "(", "mask_rate", "+", "0.0000001", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.callbacks.ImpurityLogger.on_test_epoch_end": [[116, 127], ["utilities.batch_eval", "pl_module.log", "pl_module.log", "numpy.sum", "len", "numpy.sum", "len", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.utilities.batch_eval"], ["", "def", "on_test_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "\n", "        ", "data_u", "=", "pl_module", ".", "trainer", ".", "datamodule", ".", "data", "[", "\"u\"", "]", "\n", "\n", "outs", "=", "batch_eval", "(", "self", ".", "fn_dict", ",", "data_u", ")", "\n", "\n", "mask_rate", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "outs", "[", "\"mask_rate\"", "]", ")", ")", "/", "len", "(", "data_u", ")", "\n", "pl_module", ".", "log", "(", "\"unlabelled/mask_rate\"", ",", "mask_rate", ")", "\n", "\n", "impurities", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "outs", "[", "\"impurities\"", "]", ")", ")", "/", "len", "(", "data_u", ")", "\n", "pl_module", ".", "log", "(", "\"unlabelled/impurities\"", ",", "impurities", "/", "(", "mask_rate", "+", "0.0000001", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.callbacks.ImpurityLogger.calc_impurities": [[174, 180], ["torch.nonzero().view", "torch.count_nonzero", "len", "torch.nonzero"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "calc_impurities", "(", "tau", ",", "p_pred", ",", "y_pred", ",", "y", ")", ":", "\n", "        ", "idx_wrong", "=", "torch", ".", "nonzero", "(", "y_pred", "!=", "y", ")", ".", "view", "(", "-", "1", ")", "\n", "p_wrong", "=", "p_pred", "[", "idx_wrong", ",", "...", "]", "\n", "impurities", "=", "torch", ".", "count_nonzero", "(", "p_wrong", ">", "tau", ")", "\n", "return", "impurities", "/", "len", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.callbacks.ImpurityLogger.calc_mask_rate": [[181, 185], ["torch.count_nonzero", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "calc_mask_rate", "(", "tau", ",", "p_pred", ")", ":", "\n", "        ", "masks", "=", "torch", ".", "count_nonzero", "(", "p_pred", ">", "tau", ")", "\n", "return", "masks", "/", "len", "(", "p_pred", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.RandAugmentMC.__init__": [[205, 211], ["randaugmentmc.my_augment_pool"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.my_augment_pool"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "assert", "n", ">=", "1", "\n", "assert", "1", "<=", "m", "<=", "10", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_pool", "=", "my_augment_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.RandAugmentMC.__call__": [[212, 224], ["random.choices", "numpy.random.randint", "randaugmentmc.CutoutAbs", "random.random", "op", "int"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.CutoutAbs"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_pool", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "max_v", ",", "bias", "in", "ops", ":", "\n", "            ", "v", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "m", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "config", "[", "\"p-strong\"", "]", ":", "\n", "                ", "img", "=", "op", "(", "img", ",", "v", "=", "v", ",", "max_v", "=", "max_v", ",", "bias", "=", "bias", ")", "\n", "\n", "", "", "if", "config", "[", "\"cutout\"", "]", ">", "0", ":", "\n", "            ", "img", "=", "CutoutAbs", "(", "img", ",", "int", "(", "config", "[", "\"cutout\"", "]", "*", "0.5", ")", ")", "\n", "\n", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.AutoContrast": [[18, 20], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["def", "AutoContrast", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Brightness": [[22, 25], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "randaugmentmc._float_parameter", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Brightness", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Brightness", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Brightness", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Color": [[27, 30], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "randaugmentmc._float_parameter", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Color", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Color", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Color", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Color"], ["", "def", "Color", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Contrast": [[32, 35], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "randaugmentmc._float_parameter", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Contrast", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Contrast", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Contrast", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Cutout": [[37, 43], ["int", "randaugmentmc.CutoutAbs", "randaugmentmc._float_parameter", "min"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.CutoutAbs", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter"], ["", "def", "Cutout", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "if", "v", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "v", "=", "int", "(", "v", "*", "min", "(", "img", ".", "size", ")", ")", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.CutoutAbs": [[45, 58], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "int", "int", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "min", "min", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ",", "**", "kwarg", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "h", ")", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.0", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.0", ")", ")", "\n", "x1", "=", "int", "(", "min", "(", "w", ",", "x0", "+", "v", ")", ")", "\n", "y1", "=", "int", "(", "min", "(", "h", ",", "y0", "+", "v", ")", ")", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "color", "=", "255", "# white pixel value", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "fill", "=", "color", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Equalize": [[60, 62], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Identity": [[64, 66], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Invert": [[68, 70], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Posterize": [[72, 75], ["PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "randaugmentmc._int_parameter"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._int_parameter"], ["", "def", "Posterize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Rotate": [[77, 82], ["img.rotate", "randaugmentmc._int_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._int_parameter"], ["", "def", "Rotate", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Sharpness": [[84, 87], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "randaugmentmc._float_parameter", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Sharpness", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Sharpness", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Sharpness", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.ShearX": [[89, 94], ["img.transform", "randaugmentmc._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter"], ["", "def", "ShearX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.ShearY": [[96, 101], ["img.transform", "randaugmentmc._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter"], ["", "def", "ShearY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.Solarize": [[103, 106], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "randaugmentmc._int_parameter"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._int_parameter"], ["", "def", "Solarize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "256", "-", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.SolarizeAdd": [[108, 118], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "randaugmentmc._int_parameter", "random.random", "numpy.array"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._int_parameter"], ["", "def", "SolarizeAdd", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "v", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.TranslateX": [[120, 126], ["int", "img.transform", "randaugmentmc._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter"], ["", "def", "TranslateX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.TranslateY": [[128, 134], ["int", "img.transform", "randaugmentmc._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter"], ["", "def", "TranslateY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._float_parameter": [[145, 147], ["float"], "function", ["None"], ["", "def", "_float_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "float", "(", "v", ")", "*", "max_v", "/", "PARAMETER_MAX", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc._int_parameter": [[149, 151], ["int"], "function", ["None"], ["", "def", "_int_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "int", "(", "v", "*", "max_v", "/", "PARAMETER_MAX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.fixmatch_augment_pool": [[153, 172], ["None"], "function", ["None"], ["", "def", "fixmatch_augment_pool", "(", ")", ":", "\n", "# FixMatch paper", "\n", "    ", "augs", "=", "[", "\n", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Color", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Contrast", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Identity", ",", "None", ",", "None", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "# (Rotate, 30, 0),", "\n", "(", "Sharpness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "ShearX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "ShearY", ",", "0.3", ",", "0", ")", ",", "\n", "(", "Solarize", ",", "256", ",", "0", ")", ",", "\n", "(", "TranslateX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "TranslateY", ",", "0.3", ",", "0", ")", ",", "\n", "]", "\n", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.randaugmentmc.my_augment_pool": [[174, 202], ["None"], "function", ["None"], ["", "def", "my_augment_pool", "(", "color", "=", "False", ")", ":", "\n", "    ", "bw_augs", "=", "[", "\n", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Contrast", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Identity", ",", "None", ",", "None", ")", ",", "\n", "# (Invert, 0, 0),  # try removing", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "(", "Sharpness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "ShearX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "ShearY", ",", "0.3", ",", "0", ")", ",", "\n", "# (Solarize, 256, 0),  # try removing", "\n", "# (SolarizeAdd, 110, 0),  # try removing", "\n", "(", "TranslateX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "TranslateY", ",", "0.3", ",", "0", ")", ",", "\n", "]", "\n", "\n", "color_augs", "=", "[", "\n", "(", "Color", ",", "0.9", ",", "0.05", ")", ",", "\n", "]", "\n", "\n", "if", "color", ":", "\n", "        ", "augs", "=", "bw_augs", "+", "color_augs", "\n", "", "else", ":", "\n", "        ", "augs", "=", "bw_augs", "\n", "\n", "", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.accuracy": [[14, 20], ["torch.max", "y.size"], "function", ["None"], ["def", "accuracy", "(", "y_hat", ",", "y", ")", ":", "\n", "    ", "_", ",", "y_pred", "=", "torch", ".", "max", "(", "y_hat", ",", "1", ")", "\n", "n_test", "=", "y", ".", "size", "(", "0", ")", "\n", "n_correct", "=", "(", "y_pred", "==", "y", ")", ".", "sum", "(", ")", "\n", "accuracy", "=", "n_correct", "/", "n_test", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.count_elements": [[27, 31], ["torch.nonzero().numel", "torch.nonzero"], "function", ["None"], ["", "def", "count_elements", "(", "tens", ",", "value", ")", ":", "\n", "    ", "bool_tens", "=", "tens", "==", "value", "\n", "n", "=", "torch", ".", "nonzero", "(", "bool_tens", ")", ".", "numel", "(", ")", "\n", "return", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.pred_label_fraction": [[33, 39], ["torch.max", "evaluation.count_elements", "torch.numel"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.count_elements"], ["", "def", "pred_label_fraction", "(", "y_hat", ",", "label", ")", ":", "\n", "    ", "_", ",", "y_pred", "=", "torch", ".", "max", "(", "y_hat", ",", "1", ")", "\n", "n_label", "=", "count_elements", "(", "y_pred", ",", "label", ")", "\n", "# y_pred = y_pred.detach().cpu().numpy()", "\n", "# n_label = np.count_nonzero(y_pred == label)", "\n", "return", "n_label", "/", "torch", ".", "numel", "(", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.compute_mu_sig": [[46, 50], ["numpy.mean", "numpy.cov"], "function", ["None"], ["", "def", "compute_mu_sig", "(", "f_layer", ")", ":", "\n", "    ", "mu", "=", "np", ".", "mean", "(", "f_layer", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "f_layer", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.calculate_fid": [[52, 67], ["f_real.detach().cpu().numpy.detach().cpu().numpy", "f_fake.detach().cpu().numpy.detach().cpu().numpy", "evaluation.compute_mu_sig", "evaluation.compute_mu_sig", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.square().sum", "numpy.dot", "numpy.trace", "f_real.detach().cpu().numpy.detach().cpu", "f_fake.detach().cpu().numpy.detach().cpu", "numpy.square", "f_real.detach().cpu().numpy.detach", "f_fake.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.compute_mu_sig", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.compute_mu_sig"], ["", "def", "calculate_fid", "(", "f_real", ",", "f_fake", ")", ":", "\n", "    ", "f_real", "=", "f_real", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "f_fake", "=", "f_fake", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mu_real", ",", "sig_real", "=", "compute_mu_sig", "(", "f_real", ")", "\n", "mu_fake", ",", "sig_fake", "=", "compute_mu_sig", "(", "f_fake", ")", "\n", "\n", "S", "=", "sqrtm", "(", "(", "np", ".", "dot", "(", "sig_fake", ",", "sig_real", ")", ")", ")", "\n", "\n", "if", "np", ".", "iscomplexobj", "(", "S", ")", ":", "\n", "        ", "S", "=", "S", ".", "real", "\n", "\n", "", "Dmu", "=", "np", ".", "square", "(", "mu_fake", "-", "mu_real", ")", ".", "sum", "(", ")", "\n", "\n", "fid", "=", "Dmu", "+", "np", ".", "trace", "(", "(", "sig_fake", "+", "sig_real", "-", "2", "*", "S", ")", ",", "axis1", "=", "0", ",", "axis2", "=", "1", ")", "\n", "return", "fid", "\n", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.networks.models.Tang.__init__": [[11, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Tang", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Conv2D(in_channels, out_channels, kernel size, stride, padding)", "\n", "\n", "# conv1 (1, 28, 28)  ->  (32, 14, 14)", "\n", "# conv2 (32, 14, 14) ->  (64, 7, 7)", "\n", "# conv3 (64, 7, 7) ->  (128, 4, 4)", "\n", "# conv4 (128, 4, 4)   ->  (1, 1, 1 )", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "6", ",", "11", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "24", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "24", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "24", ",", "24", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "24", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "24", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "\n", "16", ",", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "5", ",", "stride", "=", "4", ")", ",", "\n", ")", "\n", "\n", "# 8192 -> 2048", "\n", "# 2048 -> 512", "\n", "# 512  -> 512", "\n", "# 512  -> 3", "\n", "self", ".", "linear1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "256", ",", "2", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.networks.models.Tang.forward": [[67, 83], ["models.Tang.conv1", "models.Tang.conv2", "models.Tang.conv3", "models.Tang.conv4", "models.Tang.conv5", "models.Tang.view", "models.Tang.linear1", "models.Tang.linear2", "models.Tang.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "logit", "=", "False", ",", "features", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", ")", "\n", "f", "=", "x", "\n", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "if", "logit", ":", "\n", "            ", "return", "x", "\n", "", "elif", "features", ":", "\n", "            ", "return", "f", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "self", ".", "softmax", "(", "x", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.networks.layers.conv_block": [[9, 45], ["torch.ModuleDict", "layers.append", "torch.Sequential", "torch.Conv2d", "layers.append", "layers.append", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.ReLU", "torch.Tanh", "torch.Sigmoid"], "function", ["None"], ["def", "conv_block", "(", "\n", "C_in", ",", "\n", "C_out", ",", "\n", "K", "=", "3", ",", "\n", "S", "=", "1", ",", "\n", "P", "=", "1", ",", "\n", "activation", "=", "\"lrelu\"", ",", "\n", "batchnorm", "=", "True", ",", "\n", "bias", "=", "False", ",", "\n", ")", ":", "\n", "\n", "    ", "activations", "=", "nn", ".", "ModuleDict", "(", "\n", "[", "\n", "[", "\"lrelu\"", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ",", "\n", "[", "\"relu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ",", "\n", "[", "\"tanh\"", ",", "nn", ".", "Tanh", "(", ")", "]", ",", "\n", "[", "\"sig\"", ",", "nn", ".", "Sigmoid", "(", ")", "]", ",", "\n", "]", "\n", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "# Convolution layer", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "K", ",", "S", ",", "P", ",", "bias", "=", "bias", ")", ")", "\n", "\n", "# Batchnorm layer", "\n", "if", "batchnorm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "C_out", ")", ")", "\n", "\n", "# Activation layer", "\n", "", "if", "activation", ":", "\n", "        ", "layers", ".", "append", "(", "activations", "[", "activation", "]", ")", "\n", "\n", "# Unpack list of layers into nn.Sequential", "\n", "", "block", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.networks.layers.convT_block": [[47, 82], ["torch.ModuleDict", "layers.append", "torch.Sequential", "torch.ConvTranspose2d", "layers.append", "layers.append", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.ReLU", "torch.Tanh", "torch.Sigmoid"], "function", ["None"], ["", "def", "convT_block", "(", "\n", "C_in", ",", "\n", "C_out", ",", "\n", "K", "=", "3", ",", "\n", "S", "=", "1", ",", "\n", "P", "=", "1", ",", "\n", "activation", "=", "\"lrelu\"", ",", "\n", "batchnorm", "=", "True", ",", "\n", "bias", "=", "False", ",", "\n", ")", ":", "\n", "    ", "activations", "=", "nn", ".", "ModuleDict", "(", "\n", "[", "\n", "[", "\"lrelu\"", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ",", "\n", "[", "\"relu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ",", "\n", "[", "\"tanh\"", ",", "nn", ".", "Tanh", "(", ")", "]", ",", "\n", "[", "\"sig\"", ",", "nn", ".", "Sigmoid", "(", ")", "]", ",", "\n", "]", "\n", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "# Convolution layer", "\n", "layers", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "C_in", ",", "C_out", ",", "K", ",", "S", ",", "P", ",", "bias", "=", "bias", ")", ")", "\n", "\n", "# Batchnorm layer", "\n", "if", "batchnorm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "C_out", ")", ")", "\n", "\n", "# Activation layer", "\n", "", "if", "activation", ":", "\n", "        ", "layers", ".", "append", "(", "activations", "[", "activation", "]", ")", "\n", "\n", "# Unpack list of layers into nn.Sequential", "\n", "", "block", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.networks.layers.linear_block": [[84, 106], ["torch.ModuleDict", "layers.append", "torch.Sequential", "torch.Linear", "layers.append", "layers.append", "torch.Dropout", "torch.LeakyReLU", "torch.ReLU", "torch.Tanh", "torch.Sigmoid", "torch.Softmax"], "function", ["None"], ["", "def", "linear_block", "(", "C_in", ",", "C_out", ",", "activation", "=", "\"lrelu\"", ",", "dropout", "=", "True", ")", ":", "\n", "\n", "    ", "activations", "=", "nn", ".", "ModuleDict", "(", "\n", "[", "\n", "[", "\"lrelu\"", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", ",", "\n", "[", "\"relu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ",", "\n", "[", "\"tanh\"", ",", "nn", ".", "Tanh", "(", ")", "]", ",", "\n", "[", "\"sig\"", ",", "nn", ".", "Sigmoid", "(", ")", "]", ",", "\n", "[", "\"softmax\"", ",", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "]", ",", "\n", "]", "\n", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "C_in", ",", "C_out", ")", ")", "\n", "if", "activation", ":", "\n", "        ", "layers", ".", "append", "(", "activations", "[", "activation", "]", ")", "\n", "", "if", "dropout", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "\n", "# Unpack list of layers into nn.Sequential", "\n", "", "block", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.networks.layers.UPSoftmax": [[108, 113], ["torch.exp", "torch.exp", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "UPSoftmax", "(", "input", ")", ":", "\n", "    ", "exp", "=", "torch", ".", "exp", "(", "input", ")", "\n", "expsum", "=", "torch", ".", "sum", "(", "exp", ",", "1", ")", "\n", "assert", "exp", ".", "shape", "[", "0", "]", "==", "expsum", ".", "shape", "[", "0", "]", "\n", "return", "expsum", "/", "(", "expsum", "+", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.rgz_test.matplotlib_imshow": [[23, 36], ["img.mean.numpy", "pylab.show", "img.mean.mean", "pylab.imshow", "pylab.imshow", "numpy.transpose"], "function", ["None"], ["def", "matplotlib_imshow", "(", "img", ",", "one_channel", "=", "False", ")", ":", "\n", "    ", "if", "one_channel", ":", "\n", "        ", "img", "=", "img", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "img", "=", "img", "/", "2", "+", "0.5", "# unnormalize", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "if", "one_channel", ":", "\n", "        ", "pl", ".", "imshow", "(", "npimg", ",", "cmap", "=", "\"Greys\"", ")", "\n", "", "else", ":", "\n", "        ", "pl", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "", "pl", ".", "show", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.Circle_Crop.__init__": [[24, 26], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.Circle_Crop.forward": [[27, 47], ["torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.max", "torch.max", "torch.max", "torch.max", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Returns an image with all values outside the central circle bounded by image edge masked to 0.\n\n        !!! Support for multiple channels not implemented yet !!!\n        \"\"\"", "\n", "H", ",", "W", ",", "C", "=", "img", ".", "shape", "[", "-", "1", "]", ",", "img", ".", "shape", "[", "-", "2", "]", ",", "img", ".", "shape", "[", "-", "3", "]", "\n", "assert", "H", "==", "W", "\n", "x", "=", "torch", ".", "arange", "(", "W", ",", "dtype", "=", "torch", ".", "float", ")", ".", "repeat", "(", "H", ",", "1", ")", "\n", "x", "=", "(", "x", "-", "74.5", ")", "/", "74.5", "\n", "y", "=", "torch", ".", "transpose", "(", "x", ",", "0", ",", "1", ")", "\n", "r", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", "+", "torch", ".", "pow", "(", "y", ",", "2", ")", ")", "\n", "r", "=", "r", "/", "torch", ".", "max", "(", "r", ")", "\n", "r", "[", "r", "<", "0.5", "]", "=", "-", "1", "\n", "r", "[", "r", "==", "0.5", "]", "=", "-", "1", "\n", "r", "[", "r", "!=", "-", "1", "]", "=", "0", "\n", "r", "=", "torch", ".", "pow", "(", "r", ",", "2", ")", ".", "view", "(", "C", ",", "H", ",", "W", ")", "\n", "assert", "r", ".", "shape", "==", "img", ".", "shape", "\n", "img", "=", "torch", ".", "mul", "(", "r", ",", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.label_fraction": [[48, 57], ["torch.utils.data.DataLoader", "next", "numpy.asarray", "numpy.count_nonzero", "len", "iter"], "function", ["None"], ["", "", "def", "label_fraction", "(", "dset", ",", "label", ")", ":", "\n", "    ", "\"\"\"\n    Computes ratio of a given ```label``` in a ```dset```\n    \"\"\"", "\n", "loader", "=", "DataLoader", "(", "dset", ",", "len", "(", "dset", ")", ")", "\n", "_", ",", "y", "=", "next", "(", "iter", "(", "loader", ")", ")", "\n", "targets", "=", "np", ".", "asarray", "(", "y", ")", "\n", "n", "=", "np", ".", "count_nonzero", "(", "targets", "==", "label", ")", "\n", "return", "n", "/", "targets", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.flip_targets": [[59, 76], ["len", "int", "numpy.asarray", "numpy.random.randint"], "function", ["None"], ["", "def", "flip_targets", "(", "dset", ",", "fraction", ")", ":", "\n", "    ", "\"\"\"unused\"\"\"", "\n", "# Get random flipping indices", "\n", "targets", "=", "dset", ".", "data", ".", "targets", "\n", "n_targets", "=", "len", "(", "targets", ")", "\n", "n_flip", "=", "int", "(", "fraction", "*", "n_targets", ")", "\n", "targets", "=", "np", ".", "asarray", "(", "targets", ")", "\n", "flip_idx", "=", "np", ".", "random", ".", "randint", "(", "n_targets", ",", "size", "=", "n_flip", ")", "\n", "flip_labels", "=", "targets", "[", "flip_idx", "]", "\n", "\n", "# Change 1s to 0s and 0s to 1s #", "\n", "flipped_labels", "=", "(", "flip_labels", "-", "1", ")", "**", "2", "\n", "\n", "# Reassign subarray with flipped labels and reassign dataset labels #", "\n", "targets", "[", "flip_idx", "]", "=", "flipped_labels", "\n", "dset", ".", "data", ".", "targets", "=", "targets", "\n", "return", "dset", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.data_splitter": [[78, 110], ["len", "numpy.arange", "numpy.random.shuffle", "utils.subindex", "sklearn.model_selection.train_test_split", "utils.subindex", "torch.clamp().item", "torch.clamp().item", "numpy.random.choice", "idx_dict.items", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.clamp", "torch.clamp", "torch.tensor", "torch.tensor", "len", "int", "len"], "function", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.subindex", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.subindex"], ["", "def", "data_splitter", "(", "dset", ",", "fraction", "=", "1", ",", "split", "=", "1", ",", "val_frac", "=", "0.2", ")", ":", "\n", "    ", "\"\"\"Deprecated - using stratified splitting to reduce variance in results\"\"\"", "\n", "n", "=", "len", "(", "dset", ")", "\n", "idx", "=", "np", ".", "arange", "(", "n", ")", "\n", "# Shuffling is inplace", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "\n", "data_dict", ",", "idx_dict", "=", "{", "\"full\"", ":", "dset", "}", ",", "{", "\"full\"", ":", "idx", "}", "\n", "\n", "# Reduce dataset #", "\n", "idx_dict", "[", "\"train_val\"", "]", ",", "idx_dict", "[", "\"rest\"", "]", "=", "subindex", "(", "idx_dict", "[", "\"full\"", "]", ",", "fraction", ")", "\n", "\n", "# Split into train/val #", "\n", "idx_dict", "[", "\"train\"", "]", ",", "idx_dict", "[", "\"val\"", "]", "=", "train_test_split", "(", "\n", "idx_dict", "[", "\"train_val\"", "]", ",", "test_size", "=", "val_frac", ",", "stratify", "=", "True", "\n", ")", "\n", "\n", "# Split into unlabelled/labelled #", "\n", "idx_dict", "[", "\"labelled\"", "]", ",", "idx_dict", "[", "\"unlabelled\"", "]", "=", "subindex", "(", "idx_dict", "[", "\"train\"", "]", ",", "split", ")", "\n", "\n", "# Subset unlabelled data", "\n", "len_u", "=", "torch", ".", "clamp", "(", "\n", "torch", ".", "tensor", "(", "int", "(", "config", "[", "\"mu\"", "]", "*", "len", "(", "idx_dict", "[", "\"labelled\"", "]", ")", ")", ")", ",", "\n", "0", ",", "\n", "len", "(", "idx_dict", "[", "\"unlabelled\"", "]", ")", ",", "\n", ")", ".", "item", "(", ")", "\n", "idx_dict", "[", "\"unlabelled\"", "]", "=", "np", ".", "random", ".", "choice", "(", "idx_dict", "[", "\"unlabelled\"", "]", ",", "size", "=", "len_u", ",", "replace", "=", "False", ")", "\n", "\n", "for", "key", ",", "idx", "in", "idx_dict", ".", "items", "(", ")", ":", "\n", "        ", "data_dict", "[", "key", "]", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dset", ",", "idx", ")", "\n", "\n", "", "return", "data_dict", ",", "idx_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.data_splitter_strat": [[112, 152], ["len", "numpy.arange", "numpy.array", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "idx_dict.items", "numpy.random.randint", "torch.clamp().item", "torch.clamp().item", "numpy.random.choice", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.clamp", "torch.clamp", "torch.tensor", "torch.tensor", "int", "len", "len"], "function", ["None"], ["", "def", "data_splitter_strat", "(", "dset", ",", "seed", "=", "None", ",", "split", "=", "1", ",", "val_frac", "=", "0.2", ",", "u_cut", "=", "False", ")", ":", "\n", "    ", "if", "seed", "==", "None", ":", "\n", "        ", "seed", "=", "np", ".", "random", ".", "randint", "(", "9999999", ")", "\n", "\n", "", "n", "=", "len", "(", "dset", ")", "\n", "idx", "=", "np", ".", "arange", "(", "n", ")", "\n", "labels", "=", "np", ".", "array", "(", "dset", ".", "targets", ")", "\n", "\n", "data_dict", ",", "idx_dict", "=", "{", "\"train_val\"", ":", "dset", "}", ",", "{", "\"train_val\"", ":", "idx", "}", "\n", "\n", "# Split into train/val #", "\n", "idx_dict", "[", "\"train\"", "]", ",", "idx_dict", "[", "\"val\"", "]", "=", "train_test_split", "(", "\n", "idx_dict", "[", "\"train_val\"", "]", ",", "\n", "test_size", "=", "val_frac", ",", "\n", "stratify", "=", "labels", "[", "idx_dict", "[", "\"train_val\"", "]", "]", ",", "\n", "random_state", "=", "seed", ",", "\n", ")", "\n", "\n", "# Split into unlabelled/labelled #", "\n", "idx_dict", "[", "\"labelled\"", "]", ",", "idx_dict", "[", "\"unlabelled\"", "]", "=", "train_test_split", "(", "\n", "idx_dict", "[", "\"train\"", "]", ",", "\n", "train_size", "=", "split", ",", "\n", "stratify", "=", "labels", "[", "idx_dict", "[", "\"train\"", "]", "]", ",", "\n", "random_state", "=", "seed", ",", "\n", ")", "\n", "\n", "# Subset unlabelled data to match mu value #", "\n", "if", "u_cut", ":", "\n", "        ", "len_u", "=", "torch", ".", "clamp", "(", "\n", "torch", ".", "tensor", "(", "int", "(", "config", "[", "\"mu\"", "]", "*", "len", "(", "idx_dict", "[", "\"labelled\"", "]", ")", ")", ")", ",", "\n", "min", "=", "0", ",", "\n", "max", "=", "len", "(", "idx_dict", "[", "\"unlabelled\"", "]", ")", ",", "\n", ")", ".", "item", "(", ")", "\n", "idx_dict", "[", "\"unlabelled\"", "]", "=", "np", ".", "random", ".", "choice", "(", "idx_dict", "[", "\"unlabelled\"", "]", ",", "size", "=", "len_u", ",", "replace", "=", "False", ")", "\n", "\n", "", "for", "key", ",", "idx", "in", "idx_dict", ".", "items", "(", ")", ":", "\n", "# update data dict with each item in idx_dict", "\n", "        ", "data_dict", "[", "key", "]", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dset", ",", "idx", ")", "\n", "\n", "", "return", "data_dict", ",", "idx_dict", "# pass data dict to dataloaders", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.uval_splitter_strat": [[154, 177], ["len", "numpy.arange", "numpy.array", "sklearn.model_selection.train_test_split", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "numpy.random.randint"], "function", ["None"], ["", "def", "uval_splitter_strat", "(", "\n", "dsets", ",", "data_dict", ",", "idx_dict", ",", "seed", "=", "None", ",", "val_frac", "=", "0.2", ",", "u_cut", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"unused function\"\"\"", "\n", "if", "seed", "==", "None", ":", "\n", "        ", "seed", "=", "np", ".", "random", ".", "randint", "(", "9999999", ")", "\n", "\n", "", "n", "=", "len", "(", "dset", ")", "\n", "idx", "=", "np", ".", "arange", "(", "n", ")", "\n", "labels", "=", "np", ".", "array", "(", "dset", ".", "targets", ")", "\n", "\n", "# Split into train/val #", "\n", "idx_dict", "[", "\"unlabelled\"", "]", ",", "idx_dict", "[", "\"val\"", "]", "=", "train_test_split", "(", "\n", "idx", ",", "\n", "test_size", "=", "val_frac", ",", "\n", "stratify", "=", "labels", ",", "\n", "random_state", "=", "seed", ",", "\n", ")", "\n", "\n", "data_dict", "[", "\"unlabelled\"", "]", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dset", ",", "idx_dict", "[", "\"unlabelled\"", "]", ")", "\n", "data_dict", "[", "\"val\"", "]", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dset", ",", "idx_dict", "[", "\"val\"", "]", ")", "\n", "\n", "return", "data_dict", ",", "idx_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.subindex": [[179, 185], ["len", "int"], "function", ["None"], ["", "def", "subindex", "(", "idx", ",", "fraction", ")", ":", "\n", "    ", "\"\"\"Return a ```fraction``` of all given ```idx```\"\"\"", "\n", "n", "=", "len", "(", "idx", ")", "\n", "n_sub", "=", "int", "(", "fraction", "*", "n", ")", "\n", "sub_idx", ",", "rest_idx", "=", "idx", "[", ":", "n_sub", "]", ",", "idx", "[", "n_sub", ":", "]", "\n", "return", "sub_idx", ",", "rest_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.random_subset": [[187, 192], ["numpy.arange", "numpy.random.choice", "torch.Subset"], "function", ["None"], ["", "def", "random_subset", "(", "dset", ",", "size", ")", ":", "\n", "    ", "\"\"\"Randomly subset a given data-set to a given size\"\"\"", "\n", "idx", "=", "np", ".", "arange", "(", "size", ")", "\n", "subset_idx", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "size", "=", "size", ")", "\n", "return", "D", ".", "Subset", "(", "dset", ",", "subset_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.size_cut": [[194, 199], ["len", "numpy.argwhere().flatten", "numpy.argwhere"], "function", ["None"], ["", "def", "size_cut", "(", "threshold", ",", "dset", ")", ":", "\n", "    ", "\"\"\"Cut the RGZ DR1 dataset based on angular size\"\"\"", "\n", "length", "=", "len", "(", "dset", ")", "\n", "idx", "=", "np", ".", "argwhere", "(", "dset", ".", "sizes", ">", "threshold", ")", ".", "flatten", "(", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.mb_cut": [[201, 210], ["len", "numpy.argwhere", "print", "len"], "function", ["None"], ["", "def", "mb_cut", "(", "dset", ")", ":", "\n", "    ", "length", "=", "len", "(", "dset", ")", "\n", "idx", "=", "np", ".", "argwhere", "(", "dset", ".", "mbflg", "==", "0", ")", "\n", "dset", ".", "data", "=", "dset", ".", "data", "[", "idx", ",", "...", "]", "\n", "dset", ".", "names", "=", "dset", ".", "names", "[", "idx", ",", "...", "]", "\n", "dset", ".", "rgzid", "=", "dset", ".", "rgzid", "[", "idx", ",", "...", "]", "\n", "dset", ".", "sizes", "=", "dset", ".", "sizes", "[", "idx", ",", "...", "]", "\n", "dset", ".", "mbflg", "=", "dset", ".", "mbflg", "[", "idx", ",", "...", "]", "\n", "print", "(", "f\"RGZ dataset cut to {len(dset)} samples\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.unbalance_idx": [[212, 232], ["len", "numpy.concatenate().tolist", "numpy.array().flatten", "numpy.random.choice", "numpy.random.choice", "numpy.argwhere().flatten", "numpy.argwhere().flatten", "len", "numpy.concatenate", "numpy.array", "len", "len", "numpy.clip", "numpy.clip", "numpy.argwhere", "numpy.argwhere", "int", "len", "int", "len"], "function", ["None"], ["", "def", "unbalance_idx", "(", "dset", ",", "fri_R", ")", ":", "\n", "    ", "n", "=", "len", "(", "dset", ")", "\n", "idx", "=", "dset", ".", "indices", "\n", "labels", "=", "np", ".", "array", "(", "dset", ".", "dataset", ".", "targets", ")", ".", "flatten", "(", ")", "[", "idx", "]", "\n", "fri_idx", "=", "idx", "[", "np", ".", "argwhere", "(", "labels", "==", "0", ")", ".", "flatten", "(", ")", "]", "\n", "frii_idx", "=", "idx", "[", "np", ".", "argwhere", "(", "labels", "==", "1", ")", ".", "flatten", "(", ")", "]", "\n", "\n", "if", "fri_R", "<", "len", "(", "fri_idx", ")", "/", "(", "len", "(", "fri_idx", ")", "+", "len", "(", "frii_idx", ")", ")", ":", "\n", "        ", "fri_idx", "=", "np", ".", "random", ".", "choice", "(", "\n", "fri_idx", ",", "size", "=", "np", ".", "clip", "(", "int", "(", "fri_R", "*", "n", ")", ",", "0", ",", "len", "(", "fri_idx", ")", ")", ",", "replace", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "frii_idx", "=", "np", ".", "random", ".", "choice", "(", "\n", "frii_idx", ",", "\n", "size", "=", "np", ".", "clip", "(", "int", "(", "(", "1", "-", "fri_R", ")", "*", "n", ")", ",", "0", ",", "len", "(", "frii_idx", ")", ")", ",", "\n", "replace", "=", "False", ",", "\n", ")", "\n", "\n", "", "idx", "=", "np", ".", "concatenate", "(", "(", "fri_idx", ",", "frii_idx", ")", ")", ".", "tolist", "(", ")", "\n", "return", "idx", "\n", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MiraBest_full.__init__": [[56, 102], ["os.path.expanduser", "numpy.vstack().reshape", "datasets.MiraBest_full.data.transpose", "datasets.MiraBest_full._load_meta", "datasets.MiraBest_full.download", "datasets.MiraBest_full._check_integrity", "RuntimeError", "os.path.join", "open", "datasets.MiraBest_full.data.append", "numpy.vstack", "pickle.load", "pickle.load", "datasets.MiraBest_full.targets.extend", "datasets.MiraBest_full.targets.extend"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._load_meta", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.download", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._check_integrity"], ["def", "__init__", "(", "\n", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Dataset not found or corrupted.\"", "\n", "+", "\" You can use download=True to download it\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "\n", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "\"data\"", "]", ")", "\n", "if", "\"labels\"", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "\"labels\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "\"fine_labels\"", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "150", ",", "150", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MiraBest_full._load_meta": [[103, 117], ["os.path.join", "torchvision.datasets.utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load", "enumerate"], "methods", ["None"], ["", "def", "_load_meta", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "meta", "[", "\"filename\"", "]", ")", "\n", "if", "not", "check_integrity", "(", "path", ",", "self", ".", "meta", "[", "\"md5\"", "]", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Dataset metadata file not found or corrupted.\"", "\n", "+", "\" You can use download=True to download it\"", "\n", ")", "\n", "", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "infile", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "\"latin1\"", ")", "\n", "", "self", ".", "classes", "=", "data", "[", "self", ".", "meta", "[", "\"key\"", "]", "]", "\n", "", "self", ".", "class_to_idx", "=", "{", "_class", ":", "i", "for", "i", ",", "_class", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MiraBest_full.__getitem__": [[118, 140], ["numpy.reshape", "PIL.Image.fromarray", "datasets.MiraBest_full.transform", "datasets.MiraBest_full.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "np", ".", "reshape", "(", "img", ",", "(", "150", ",", "150", ")", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"L\"", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MiraBest_full.__len__": [[141, 143], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MiraBest_full._check_integrity": [[144, 152], ["os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "self", ".", "train_list", "+", "self", ".", "test_list", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MiraBest_full.download": [[153, 165], ["datasets.MiraBest_full._check_integrity", "torchvision.datasets.utils.download_url", "print", "tarfile.open", "tar.extractall", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._check_integrity"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "\"Files already downloaded and verified\"", ")", "\n", "return", "\n", "\n", "", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "self", ".", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "# extract file", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ",", "\"r:gz\"", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MiraBest_full.__repr__": [[166, 181], ["datasets.MiraBest_full.__len__", "datasets.MiraBest_full.transform.__repr__().replace", "datasets.MiraBest_full.target_transform.__repr__().replace", "datasets.MiraBest_full.transform.__repr__", "datasets.MiraBest_full.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__len__", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__repr__", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__repr__"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "\"Dataset \"", "+", "self", ".", "__class__", ".", "__name__", "+", "\"\\n\"", "\n", "fmt_str", "+=", "\"    Number of datapoints: {}\\n\"", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "\"train\"", "if", "self", ".", "train", "is", "True", "else", "\"test\"", "\n", "fmt_str", "+=", "\"    Split: {}\\n\"", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "\"    Root Location: {}\\n\"", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "\"    Transforms (if any): \"", "\n", "fmt_str", "+=", "\"{0}{1}\\n\"", ".", "format", "(", "\n", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\\n\"", "+", "\" \"", "*", "len", "(", "tmp", ")", ")", "\n", ")", "\n", "tmp", "=", "\"    Target Transforms (if any): \"", "\n", "fmt_str", "+=", "\"{0}{1}\"", ".", "format", "(", "\n", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\\n\"", "+", "\" \"", "*", "len", "(", "tmp", ")", ")", "\n", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MB_nohybrids.__init__": [[188, 221], ["datasets.MiraBest_full.__init__", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MB_nohybrids", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "fr1_list", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", "\n", "fr2_list", "=", "[", "5", ",", "6", ",", "7", "]", "\n", "exclude_list", "=", "[", "8", ",", "9", "]", "\n", "\n", "if", "exclude_list", "==", "[", "]", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class 0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class 1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MBFRConfident.__init__": [[229, 262], ["datasets.MiraBest_full.__init__", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MBFRConfident", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "fr1_list", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "fr2_list", "=", "[", "5", ",", "6", "]", "\n", "exclude_list", "=", "[", "3", ",", "4", ",", "7", ",", "8", ",", "9", "]", "\n", "\n", "if", "exclude_list", "==", "[", "]", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class 0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class 1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.MBFRUncertain.__init__": [[270, 303], ["datasets.MiraBest_full.__init__", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MBFRUncertain", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "fr1_list", "=", "[", "3", ",", "4", "]", "\n", "fr2_list", "=", "[", "7", "]", "\n", "exclude_list", "=", "[", "0", ",", "1", ",", "2", ",", "5", ",", "6", ",", "8", ",", "9", "]", "\n", "\n", "if", "exclude_list", "==", "[", "]", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k.__init__": [[349, 405], ["os.path.expanduser", "numpy.vstack().reshape", "numpy.vstack().reshape", "numpy.vstack().reshape", "numpy.vstack().reshape", "numpy.vstack().reshape", "datasets.RGZ20k.data.transpose", "datasets.RGZ20k._load_meta", "datasets.RGZ20k.download", "datasets.RGZ20k._check_integrity", "RuntimeError", "os.path.join", "open", "datasets.RGZ20k.data.append", "datasets.RGZ20k.names.append", "datasets.RGZ20k.rgzid.append", "datasets.RGZ20k.mbflg.append", "datasets.RGZ20k.sizes.append", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._load_meta", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.download", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._check_integrity"], ["def", "__init__", "(", "\n", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Dataset not found or corrupted.\"", "\n", "+", "\" You can use download=True to download it\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "# object image data", "\n", "self", ".", "names", "=", "[", "]", "# object file names", "\n", "self", ".", "rgzid", "=", "[", "]", "# object RGZ ID", "\n", "self", ".", "mbflg", "=", "[", "]", "# object MiraBest flag", "\n", "self", ".", "sizes", "=", "[", "]", "# object largest angular sizes", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "\n", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "\n", "# print(entry.keys())", "\n", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "\"data\"", "]", ")", "\n", "self", ".", "names", ".", "append", "(", "entry", "[", "\"filenames\"", "]", ")", "\n", "self", ".", "rgzid", ".", "append", "(", "entry", "[", "\"src_ids\"", "]", ")", "\n", "self", ".", "mbflg", ".", "append", "(", "entry", "[", "\"mb_flag\"", "]", ")", "\n", "self", ".", "sizes", ".", "append", "(", "entry", "[", "\"LAS\"", "]", ")", "\n", "\n", "", "", "self", ".", "rgzid", "=", "np", ".", "vstack", "(", "self", ".", "rgzid", ")", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "sizes", "=", "np", ".", "vstack", "(", "self", ".", "sizes", ")", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "mbflg", "=", "np", ".", "vstack", "(", "self", ".", "mbflg", ")", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "names", "=", "np", ".", "vstack", "(", "self", ".", "names", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "150", ",", "150", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k._load_meta": [[406, 420], ["os.path.join", "torchvision.datasets.utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load"], "methods", ["None"], ["", "def", "_load_meta", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "meta", "[", "\"filename\"", "]", ")", "\n", "if", "not", "check_integrity", "(", "path", ",", "self", ".", "meta", "[", "\"md5\"", "]", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Dataset metadata file not found or corrupted.\"", "\n", "+", "\" You can use download=True to download it\"", "\n", ")", "\n", "", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "infile", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "\"latin1\"", ")", "\n", "\n", "", "self", ".", "classes", "=", "data", "[", "self", ".", "meta", "[", "\"key\"", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k.__getitem__": [[423, 446], ["numpy.reshape", "PIL.Image.fromarray", "datasets.RGZ20k.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            image (array): Image\n        \"\"\"", "\n", "\n", "img", "=", "self", ".", "data", "[", "index", "]", "\n", "# las = self.sizes[index]", "\n", "# mbf = self.mbflg[index]", "\n", "# rgz = self.rgzid[index]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "np", ".", "reshape", "(", "img", ",", "(", "150", ",", "150", ")", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"L\"", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k.__len__": [[447, 449], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k._check_integrity": [[450, 458], ["os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "self", ".", "train_list", "+", "self", ".", "test_list", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k.download": [[459, 471], ["datasets.RGZ20k._check_integrity", "torchvision.datasets.utils.download_url", "print", "tarfile.open", "tar.extractall", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._check_integrity"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "\"Files already downloaded and verified\"", ")", "\n", "return", "\n", "\n", "", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "self", ".", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "# extract file", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ",", "\"r:gz\"", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k.__repr__": [[472, 487], ["datasets.RGZ20k.__len__", "datasets.RGZ20k.transform.__repr__().replace", "datasets.RGZ20k.target_transform.__repr__().replace", "datasets.RGZ20k.transform.__repr__", "datasets.RGZ20k.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__len__", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__repr__", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__repr__"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "\"Dataset \"", "+", "self", ".", "__class__", ".", "__name__", "+", "\"\\n\"", "\n", "fmt_str", "+=", "\"    Number of datapoints: {}\\n\"", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "\"train\"", "if", "self", ".", "train", "is", "True", "else", "\"test\"", "\n", "fmt_str", "+=", "\"    Split: {}\\n\"", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "\"    Root Location: {}\\n\"", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "\"    Transforms (if any): \"", "\n", "fmt_str", "+=", "\"{0}{1}\\n\"", ".", "format", "(", "\n", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\\n\"", "+", "\" \"", "*", "len", "(", "tmp", ")", ")", "\n", ")", "\n", "tmp", "=", "\"    Target Transforms (if any): \"", "\n", "fmt_str", "+=", "\"{0}{1}\"", ".", "format", "(", "\n", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\\n\"", "+", "\" \"", "*", "len", "(", "tmp", ")", ")", "\n", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__init__": [[533, 589], ["os.path.expanduser", "numpy.vstack().reshape", "numpy.vstack().reshape", "numpy.vstack().reshape", "numpy.vstack().reshape", "numpy.vstack().reshape", "datasets.RGZ20k_test.data.transpose", "datasets.RGZ20k_test._load_meta", "datasets.RGZ20k_test.download", "datasets.RGZ20k_test._check_integrity", "RuntimeError", "os.path.join", "open", "datasets.RGZ20k_test.data.append", "datasets.RGZ20k_test.names.append", "datasets.RGZ20k_test.rgzid.append", "datasets.RGZ20k_test.mbflg.append", "datasets.RGZ20k_test.sizes.append", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._load_meta", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.download", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._check_integrity"], ["def", "__init__", "(", "\n", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Dataset not found or corrupted.\"", "\n", "+", "\" You can use download=True to download it\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "# object image data", "\n", "self", ".", "names", "=", "[", "]", "# object file names", "\n", "self", ".", "rgzid", "=", "[", "]", "# object RGZ ID", "\n", "self", ".", "mbflg", "=", "[", "]", "# object MiraBest flag", "\n", "self", ".", "sizes", "=", "[", "]", "# object largest angular sizes", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "\n", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "\n", "# print(entry.keys())", "\n", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "\"data\"", "]", ")", "\n", "self", ".", "names", ".", "append", "(", "entry", "[", "\"filenames\"", "]", ")", "\n", "self", ".", "rgzid", ".", "append", "(", "entry", "[", "\"src_ids\"", "]", ")", "\n", "self", ".", "mbflg", ".", "append", "(", "entry", "[", "\"mb_flag\"", "]", ")", "\n", "self", ".", "sizes", ".", "append", "(", "entry", "[", "\"LAS\"", "]", ")", "\n", "\n", "", "", "self", ".", "rgzid", "=", "np", ".", "vstack", "(", "self", ".", "rgzid", ")", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "sizes", "=", "np", ".", "vstack", "(", "self", ".", "sizes", ")", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "mbflg", "=", "np", ".", "vstack", "(", "self", ".", "mbflg", ")", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "names", "=", "np", ".", "vstack", "(", "self", ".", "names", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "150", ",", "150", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._load_meta": [[590, 604], ["os.path.join", "torchvision.datasets.utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load"], "methods", ["None"], ["", "def", "_load_meta", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "meta", "[", "\"filename\"", "]", ")", "\n", "if", "not", "check_integrity", "(", "path", ",", "self", ".", "meta", "[", "\"md5\"", "]", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Dataset metadata file not found or corrupted.\"", "\n", "+", "\" You can use download=True to download it\"", "\n", ")", "\n", "", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "infile", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "\"latin1\"", ")", "\n", "\n", "", "self", ".", "classes", "=", "data", "[", "self", ".", "meta", "[", "\"key\"", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__getitem__": [[607, 630], ["numpy.reshape", "PIL.Image.fromarray", "datasets.RGZ20k_test.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            image (array): Image\n        \"\"\"", "\n", "\n", "img", "=", "self", ".", "data", "[", "index", "]", "\n", "las", "=", "self", ".", "sizes", "[", "index", "]", "\n", "mbf", "=", "self", ".", "mbflg", "[", "index", "]", "\n", "rgz", "=", "self", ".", "rgzid", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "np", ".", "reshape", "(", "img", ",", "(", "150", ",", "150", ")", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"L\"", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "rgz", ",", "las", ",", "mbf", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__len__": [[631, 633], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._check_integrity": [[634, 642], ["os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "self", ".", "train_list", "+", "self", ".", "test_list", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.download": [[643, 655], ["datasets.RGZ20k_test._check_integrity", "torchvision.datasets.utils.download_url", "print", "tarfile.open", "tar.extractall", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test._check_integrity"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "\"Files already downloaded and verified\"", ")", "\n", "return", "\n", "\n", "", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "self", ".", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "# extract file", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ",", "\"r:gz\"", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__repr__": [[656, 671], ["datasets.RGZ20k_test.__len__", "datasets.RGZ20k_test.transform.__repr__().replace", "datasets.RGZ20k_test.target_transform.__repr__().replace", "datasets.RGZ20k_test.transform.__repr__", "datasets.RGZ20k_test.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__len__", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__repr__", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datasets.RGZ20k_test.__repr__"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "\"Dataset \"", "+", "self", ".", "__class__", ".", "__name__", "+", "\"\\n\"", "\n", "fmt_str", "+=", "\"    Number of datapoints: {}\\n\"", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "\"train\"", "if", "self", ".", "train", "is", "True", "else", "\"test\"", "\n", "fmt_str", "+=", "\"    Split: {}\\n\"", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "\"    Root Location: {}\\n\"", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "\"    Transforms (if any): \"", "\n", "fmt_str", "+=", "\"{0}{1}\\n\"", ".", "format", "(", "\n", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\\n\"", "+", "\" \"", "*", "len", "(", "tmp", ")", ")", "\n", ")", "\n", "tmp", "=", "\"    Target Transforms (if any): \"", "\n", "fmt_str", "+=", "\"{0}{1}\"", ".", "format", "(", "\n", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\\n\"", "+", "\" \"", "*", "len", "(", "tmp", ")", ")", "\n", ")", "\n", "return", "fmt_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.__init__": [[36, 43], ["pytorch_lightning.LightningDataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "config", ",", "path", "=", "path_dict", "[", "'data'", "]", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "hyperparams", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.prepare_data": [[44, 49], ["galaxy_mnist.GalaxyMNIST"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "# trigger download now", "\n", "        ", "_", "=", "GalaxyMNIST", "(", "\n", "root", "=", "self", ".", "path", ",", "\n", "download", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.get_gz_mnist": [[52, 59], ["galaxy_mnist.GalaxyMNIST", "torch.Subset", "torch.Subset"], "methods", ["None"], ["", "def", "get_gz_mnist", "(", "self", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "indices", "=", "None", ")", ":", "\n", "# little wrapper around GZ MNIST to load fresh and subset it with specified indices", "\n", "        ", "dataset", "=", "GalaxyMNIST", "(", "root", "=", "self", ".", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "if", "indices", "is", "None", ":", "\n", "            ", "return", "dataset", "\n", "", "else", ":", "\n", "            ", "return", "D", ".", "Subset", "(", "dataset", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.setup": [[61, 97], ["datamodules.GalaxyMNISTDataModule.get_gz_mnist", "dataloading.utils.data_splitter_strat", "utilities.compute_mu_sig", "datamodules.default_transforms", "datamodules.GalaxyMNISTDataModule.get_gz_mnist", "datamodules.GalaxyMNISTDataModule.get_gz_mnist", "datamodules.GalaxyMNISTDataModule.get_gz_mnist", "datamodules.GalaxyMNISTDataModule.get_gz_mnist", "logging.info", "torch.ConcatDataset", "torch.ConcatDataset", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.get_gz_mnist", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.data_splitter_strat", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.compute_mu_sig", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.default_transforms", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.get_gz_mnist", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.get_gz_mnist", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.get_gz_mnist", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.get_gz_mnist"], ["", "", "def", "setup", "(", "self", ",", "stage", "=", "None", ")", ":", "\n", "\n", "        ", "untransformed_dataset", "=", "self", ".", "get_gz_mnist", "(", "transform", "=", "T", ".", "ToTensor", "(", ")", ")", "\n", "\n", "# Split the data while preserving class balance", "\n", "untransformed_data_dict", ",", "data_idx_dict", "=", "data_splitter_strat", "(", "\n", "untransformed_dataset", ",", "\n", "split", "=", "self", ".", "config", "[", "\"data\"", "]", "[", "\"split\"", "]", ",", "\n", "val_frac", "=", "self", ".", "config", "[", "\"data\"", "]", "[", "\"val_frac\"", "]", ",", "\n", "seed", "=", "self", ".", "config", "[", "\"seed\"", "]", ",", "\n", ")", "\n", "\n", "# untransformed_data_dict used only for estimating mean/std. Will be reloaded with transforms on for training.", "\n", "# data_idx_dict is used to select the same split again when training.", "\n", "\n", "# print(self.data)", "\n", "# print(data_idx_dict)", "\n", "\n", "# Calculate mean and std of data, with no transforms applied", "\n", "mu", ",", "sig", "=", "compute_mu_sig", "(", "\n", "D", ".", "ConcatDataset", "(", "[", "untransformed_data_dict", "[", "\"labelled\"", "]", ",", "untransformed_data_dict", "[", "\"unlabelled\"", "]", ",", "untransformed_data_dict", "[", "\"val\"", "]", "]", ")", "\n", ")", "\n", "# self.mu, self.sig = mu, sig", "\n", "\n", "# Initialise transforms with mean and std from data", "\n", "transforms_dict", "=", "default_transforms", "(", "self", ".", "config", ",", "mu", ",", "sig", ")", "\n", "\n", "## subset all data using correct transform ##", "\n", "transformed_data", "=", "{", "}", "\n", "transformed_data", "[", "\"unlabelled\"", "]", "=", "self", ".", "get_gz_mnist", "(", "transform", "=", "transforms_dict", "[", "\"unlabelled\"", "]", ",", "indices", "=", "data_idx_dict", "[", "\"unlabelled\"", "]", ")", "\n", "transformed_data", "[", "\"labelled\"", "]", "=", "self", ".", "get_gz_mnist", "(", "transform", "=", "transforms_dict", "[", "\"weak\"", "]", ",", "indices", "=", "data_idx_dict", "[", "\"labelled\"", "]", ")", "# slightly odd - weak?", "\n", "transformed_data", "[", "\"val\"", "]", "=", "self", ".", "get_gz_mnist", "(", "transform", "=", "transforms_dict", "[", "\"val\"", "]", ",", "indices", "=", "data_idx_dict", "[", "\"val\"", "]", ")", "\n", "transformed_data", "[", "\"test\"", "]", "=", "self", ".", "get_gz_mnist", "(", "transform", "=", "transforms_dict", "[", "\"test\"", "]", ",", "train", "=", "False", ")", "# implicitly train=True for the rest", "\n", "self", ".", "data", "=", "transformed_data", "\n", "\n", "logging", ".", "info", "(", "'Setup complete'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.train_dataloader": [[99, 119], ["int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pytorch_lightning.trainer.supporters.CombinedLoader"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "\"\"\"Batch unlabelled and labelled data together\"\"\"", "\n", "\n", "l_batch_size", "=", "self", ".", "config", "[", "\"batch_size\"", "]", "\n", "\n", "# Calculate larger batch size for unlabelled data", "\n", "u_batch_size", "=", "int", "(", "self", ".", "config", "[", "\"mu\"", "]", "*", "l_batch_size", ")", "\n", "\n", "# Define loaders with different batch sizes", "\n", "loader_labelled", "=", "DataLoader", "(", "self", ".", "data", "[", "\"labelled\"", "]", ",", "l_batch_size", ",", "shuffle", "=", "True", ")", "\n", "loader_unlabelled", "=", "DataLoader", "(", "self", ".", "data", "[", "\"unlabelled\"", "]", ",", "u_batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "# \"Zip\" loaders together for simultaneous loading", "\n", "loaders", "=", "{", "\"unlabelled\"", ":", "loader_unlabelled", ",", "\"labelled\"", ":", "loader_labelled", "}", "\n", "# dict of dataloaders", "\n", "combined_loaders", "=", "CombinedLoader", "(", "loaders", ",", "\"min_size\"", ")", "\n", "# see also max_size_cycle. ", "\n", "# Should each epoch be the size of the number of batches in smallest dataloader or the largest dataloader. ", "\n", "# Min size easier to compare epochs as cutting the unlabelled data by dif amounts, making metrics tricky to compare.", "\n", "return", "combined_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.val_dataloader": [[120, 124], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "val_batch_size", "=", "100", "\n", "loader_val", "=", "DataLoader", "(", "self", ".", "data", "[", "\"val\"", "]", ",", "val_batch_size", ")", "\n", "return", "loader_val", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.test_dataloader": [[125, 132], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "int", "len"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "\"\"\"Batch test and unlabelled data sequentially\"\"\"", "\n", "u_batch_size", "=", "200", "\n", "# test step where idx is an arg, list-type. Runs sequentially (all of one, than all of the next), while CombinedLoader does ", "\n", "loader_test", "=", "DataLoader", "(", "self", ".", "data", "[", "\"test\"", "]", ",", "int", "(", "len", "(", "self", ".", "data", "[", "\"test\"", "]", ")", ")", ")", "\n", "loader_unlabelled", "=", "DataLoader", "(", "self", ".", "data", "[", "\"unlabelled\"", "]", ",", "u_batch_size", ")", "\n", "return", "[", "loader_test", ",", "loader_unlabelled", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.GalaxyMNISTDataModule.save_hparams": [[133, 142], ["datamodules.GalaxyMNISTDataModule.hyperparams.update", "len", "len", "len", "len", "dataloading.utils.label_fraction", "dataloading.utils.label_fraction"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.label_fraction", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.label_fraction"], ["", "def", "save_hparams", "(", "self", ")", ":", "\n", "        ", "self", ".", "hyperparams", ".", "update", "(", "\n", "{", "\n", "\"n_labelled\"", ":", "len", "(", "self", ".", "data", "[", "\"labelled\"", "]", ")", ",", "\n", "\"n_unlabelled\"", ":", "len", "(", "self", ".", "data", "[", "\"unlabelled\"", "]", ")", ",", "\n", "\"n_test\"", ":", "len", "(", "self", ".", "data", "[", "\"test\"", "]", ")", ",", "\n", "\"n_val\"", ":", "len", "(", "self", ".", "data", "[", "\"val\"", "]", ")", ",", "\n", "\"f_u\"", ":", "label_fraction", "(", "self", ".", "data", "[", "\"unlabelled\"", "]", ",", "0", ")", ",", "\n", "\"f_l\"", ":", "label_fraction", "(", "self", ".", "data", "[", "\"labelled\"", "]", ",", "0", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__": [[147, 156], ["pytorch_lightning.LightningDataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "path", "=", "path_dict", "[", "\"data\"", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "hyperparams", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.prepare_data": [[157, 163], ["dataloading.datasets.MB_nohybrids", "dataloading.datasets.MB_nohybrids", "dataloading.datasets.MBFRUncertain", "dataloading.datasets.MBFRConfident", "dataloading.datasets.RGZ20k"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "        ", "MB_nohybrids", "(", "self", ".", "path", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "MB_nohybrids", "(", "self", ".", "path", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "MBFRUncertain", "(", "self", ".", "path", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "MBFRConfident", "(", "self", ".", "path", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "RGZ20k", "(", "self", ".", "path", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.setup": [[164, 268], ["dataloading.utils.data_splitter_strat", "utilities.compute_mu_sig", "datamodules.default_transforms", "torch.Subset", "torch.Subset", "torch.Subset", "torch.Subset", "torch.Subset", "torch.Subset", "datamodules.mbDataModule.save_hparams", "print", "print", "len", "numpy.arange", "torch.Subset", "torch.Subset", "dataloading.utils.unbalance_idx", "torch.Subset", "torch.Subset", "torch.ConcatDataset", "torch.ConcatDataset", "dataloading.utils.flip_targets", "dataloading.datasets.MBFRConfident", "dataloading.datasets.MBFRUncertain", "dataloading.datasets.MB_nohybrids", "dataloading.datasets.MB_nohybrids", "dataloading.datasets.RGZ20k", "dataloading.utils.size_cut", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "numpy.random.choice", "int", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.data_splitter_strat", "home.repos.pwc.inspect_result.inigoval_fixmatch.main.evaluation.compute_mu_sig", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.default_transforms", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.save_hparams", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.unbalance_idx", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.flip_targets", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.size_cut"], ["", "def", "setup", "(", "self", ",", "stage", "=", "None", ")", ":", "\n", "\n", "# Define dictionary with different subsets of data", "\n", "        ", "mb", "=", "{", "\n", "\"confident\"", ":", "lambda", "transform", ":", "MBFRConfident", "(", "\n", "self", ".", "path", ",", "train", "=", "True", ",", "transform", "=", "transform", "\n", ")", ",", "\n", "\"uncertain\"", ":", "lambda", "transform", ":", "MBFRUncertain", "(", "\n", "self", ".", "path", ",", "train", "=", "True", ",", "transform", "=", "transform", "\n", ")", ",", "\n", "\"all\"", ":", "lambda", "transform", ":", "MB_nohybrids", "(", "\n", "self", ".", "path", ",", "train", "=", "True", ",", "transform", "=", "transform", "\n", ")", ",", "\n", "\"test\"", ":", "lambda", "transform", ":", "MB_nohybrids", "(", "\n", "self", ".", "path", ",", "train", "=", "False", ",", "transform", "=", "transform", "\n", ")", ",", "\n", "\"rgz\"", ":", "lambda", "transform", ":", "RGZ20k", "(", "self", ".", "path", ",", "train", "=", "True", ",", "transform", "=", "transform", ")", ",", "\n", "}", "\n", "\n", "# Use config to extract correct subsets for (l)abelled/(u)nlabelled data", "\n", "datasets", "=", "{", "\n", "\"labelled\"", ":", "mb", "[", "self", ".", "config", "[", "\"data\"", "]", "[", "\"labelled\"", "]", "]", ",", "\n", "\"unlabelled\"", ":", "mb", "[", "self", ".", "config", "[", "\"data\"", "]", "[", "\"unlabelled\"", "]", "]", ",", "\n", "}", "\n", "\n", "# Split the data while preserving class balance", "\n", "self", ".", "data", ",", "self", ".", "data_idx", "=", "data_splitter_strat", "(", "\n", "datasets", "[", "\"labelled\"", "]", "(", "to_tensor", ")", ",", "\n", "split", "=", "self", ".", "config", "[", "\"data\"", "]", "[", "\"split\"", "]", ",", "\n", "val_frac", "=", "self", ".", "config", "[", "\"data\"", "]", "[", "\"val_frac\"", "]", ",", "\n", "seed", "=", "self", ".", "config", "[", "\"seed\"", "]", ",", "\n", ")", "\n", "\n", "# Draw unlabelled samples from different set if required", "\n", "if", "self", ".", "config", "[", "\"data\"", "]", "[", "\"labelled\"", "]", "!=", "self", ".", "config", "[", "\"data\"", "]", "[", "\"unlabelled\"", "]", ":", "\n", "            ", "n_max", "=", "len", "(", "datasets", "[", "\"unlabelled\"", "]", "(", "to_tensor", ")", ")", "\n", "self", ".", "data_idx", "[", "\"unlabelled\"", "]", "=", "np", ".", "arange", "(", "n_max", ")", "\n", "\n", "# Apply angular size lower limit if using rgz", "\n", "if", "self", ".", "config", "[", "\"data\"", "]", "[", "\"unlabelled\"", "]", "==", "\"rgz\"", ":", "\n", "                ", "self", ".", "data_idx", "[", "\"unlabelled\"", "]", "=", "size_cut", "(", "\n", "self", ".", "config", "[", "\"cut_threshold\"", "]", ",", "datasets", "[", "\"unlabelled\"", "]", "(", "to_tensor", ")", "\n", ")", "\n", "\n", "# Adjust unlabelled data set size to match mu value (probably don't need this anymore)", "\n", "", "if", "self", ".", "config", "[", "\"data\"", "]", "[", "\"clamp_unlabelled\"", "]", ":", "\n", "                ", "n", "=", "torch", ".", "clamp", "(", "\n", "torch", ".", "tensor", "(", "\n", "self", ".", "config", "[", "\"data\"", "]", "[", "\"clamp_unlabelled\"", "]", "\n", "*", "len", "(", "self", ".", "data", "[", "\"labelled\"", "]", ")", "\n", "*", "self", ".", "config", "[", "\"mu\"", "]", "\n", ")", ",", "\n", "min", "=", "0", ",", "\n", "max", "=", "n_max", ",", "\n", ")", ".", "item", "(", ")", "\n", "self", ".", "data_idx", "[", "\"unlabelled\"", "]", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "data_idx", "[", "\"unlabelled\"", "]", ",", "int", "(", "n", ")", ")", "\n", "\n", "# Re-subset unlabelled data using new indices", "\n", "", "self", ".", "data", "[", "\"unlabelled\"", "]", "=", "D", ".", "Subset", "(", "datasets", "[", "\"unlabelled\"", "]", "(", "to_tensor", ")", ",", "self", ".", "data_idx", "[", "\"unlabelled\"", "]", ")", "\n", "\n", "# Unbalance the unlabelled dataset", "\n", "", "if", "self", ".", "config", "[", "\"data\"", "]", "[", "\"fri_R\"", "]", ">=", "0", ":", "\n", "            ", "self", ".", "data_idx", "[", "\"unlabelled\"", "]", "=", "unbalance_idx", "(", "\n", "self", ".", "data", "[", "\"unlabelled\"", "]", ",", "\n", "self", ".", "config", "[", "\"data\"", "]", "[", "\"fri_R\"", "]", ",", "\n", ")", "\n", "\n", "# Re-subset unlabelled data using new indices", "\n", "self", ".", "data", "[", "\"unlabelled\"", "]", "=", "D", ".", "Subset", "(", "datasets", "[", "\"unlabelled\"", "]", "(", "to_tensor", ")", ",", "self", ".", "data_idx", "[", "\"unlabelled\"", "]", ")", "\n", "\n", "# Calculate mean and std of data", "\n", "", "mu", ",", "sig", "=", "compute_mu_sig", "(", "\n", "D", ".", "ConcatDataset", "(", "[", "self", ".", "data", "[", "\"labelled\"", "]", ",", "self", ".", "data", "[", "\"unlabelled\"", "]", ",", "self", ".", "data", "[", "\"val\"", "]", "]", ")", "\n", ")", "\n", "self", ".", "mu", ",", "self", ".", "sig", "=", "mu", ",", "sig", "\n", "\n", "# Initialise transforms with mean and std from data", "\n", "self", ".", "transforms", "=", "default_transforms", "(", "self", ".", "config", ",", "mu", ",", "sig", ")", "\n", "\n", "## Finally subset all data using correct transform ##", "\n", "self", ".", "data", "[", "\"unlabelled\"", "]", "=", "D", ".", "Subset", "(", "\n", "datasets", "[", "\"unlabelled\"", "]", "(", "self", ".", "transforms", "[", "\"unlabelled\"", "]", ")", ",", "self", ".", "data_idx", "[", "\"unlabelled\"", "]", "\n", ")", "\n", "\n", "self", ".", "data", "[", "\"labelled\"", "]", "=", "D", ".", "Subset", "(", "\n", "datasets", "[", "\"labelled\"", "]", "(", "self", ".", "transforms", "[", "\"weak\"", "]", ")", ",", "self", ".", "data_idx", "[", "\"labelled\"", "]", "\n", ")", "\n", "\n", "self", ".", "data", "[", "\"val\"", "]", "=", "D", ".", "Subset", "(", "\n", "datasets", "[", "\"labelled\"", "]", "(", "self", ".", "transforms", "[", "\"val\"", "]", ")", ",", "self", ".", "data_idx", "[", "\"val\"", "]", "\n", ")", "\n", "\n", "self", ".", "data", "[", "\"test\"", "]", "=", "mb", "[", "\"test\"", "]", "(", "self", ".", "transforms", "[", "\"test\"", "]", ")", "\n", "\n", "# Flip a number of targets randomly", "\n", "if", "self", ".", "config", "[", "\"train\"", "]", "[", "\"flip\"", "]", ":", "\n", "            ", "self", ".", "data", "[", "\"labelled\"", "]", "=", "flip_targets", "(", "self", ".", "data", "[", "\"labelled\"", "]", ",", "self", ".", "config", "[", "\"train\"", "]", "[", "\"flip\"", "]", ")", "\n", "\n", "# Compute & save data hyperparameters and #", "\n", "", "self", ".", "save_hparams", "(", ")", "\n", "\n", "# Print indices and data-set used in case needed", "\n", "print", "(", "self", ".", "config", "[", "\"data\"", "]", "[", "\"labelled\"", "]", ")", "\n", "print", "(", "self", ".", "data_idx", "[", "\"labelled\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.train_dataloader": [[269, 289], ["int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pytorch_lightning.trainer.supporters.CombinedLoader"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "\"\"\"Batch unlabelled and labelled data together\"\"\"", "\n", "\n", "l_batch_size", "=", "self", ".", "config", "[", "\"batch_size\"", "]", "\n", "\n", "# Calculate larger batch size for unlabelled data", "\n", "u_batch_size", "=", "int", "(", "self", ".", "config", "[", "\"mu\"", "]", "*", "l_batch_size", ")", "\n", "\n", "# Define loaders with different batch sizes", "\n", "loader_labelled", "=", "DataLoader", "(", "self", ".", "data", "[", "\"labelled\"", "]", ",", "l_batch_size", ",", "shuffle", "=", "True", ")", "\n", "loader_unlabelled", "=", "DataLoader", "(", "self", ".", "data", "[", "\"unlabelled\"", "]", ",", "u_batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "# \"Zip\" loaders together for simultaneous loading", "\n", "loaders", "=", "{", "\"unlabelled\"", ":", "loader_unlabelled", ",", "\"labelled\"", ":", "loader_labelled", "}", "\n", "# dict of dataloaders", "\n", "combined_loaders", "=", "CombinedLoader", "(", "loaders", ",", "\"min_size\"", ")", "\n", "# see also max_size_cycle. ", "\n", "# Should each epoch be the size of the number of batches in smallest dataloader or the largest dataloader. ", "\n", "# Min size easier to compare epochs as cutting the unlabelled data by dif amounts, making metrics tricky to compare.", "\n", "return", "combined_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.val_dataloader": [[290, 294], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "val_batch_size", "=", "100", "\n", "loader_val", "=", "DataLoader", "(", "self", ".", "data", "[", "\"val\"", "]", ",", "val_batch_size", ")", "\n", "return", "loader_val", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.test_dataloader": [[295, 302], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "int", "len"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "\"\"\"Batch test and unlabelled data sequentially\"\"\"", "\n", "u_batch_size", "=", "200", "\n", "# test step where idx is an arg, list-type. Runs sequentially (all of one, than all of the next), while CombinedLoader does ", "\n", "loader_test", "=", "DataLoader", "(", "self", ".", "data", "[", "\"test\"", "]", ",", "int", "(", "len", "(", "self", ".", "data", "[", "\"test\"", "]", ")", ")", ")", "\n", "loader_unlabelled", "=", "DataLoader", "(", "self", ".", "data", "[", "\"unlabelled\"", "]", ",", "u_batch_size", ")", "\n", "return", "[", "loader_test", ",", "loader_unlabelled", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.mbDataModule.save_hparams": [[303, 312], ["datamodules.mbDataModule.hyperparams.update", "len", "len", "len", "len", "dataloading.utils.label_fraction", "dataloading.utils.label_fraction"], "methods", ["home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.label_fraction", "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.utils.label_fraction"], ["", "def", "save_hparams", "(", "self", ")", ":", "\n", "        ", "self", ".", "hyperparams", ".", "update", "(", "\n", "{", "\n", "\"n_labelled\"", ":", "len", "(", "self", ".", "data", "[", "\"labelled\"", "]", ")", ",", "\n", "\"n_unlabelled\"", ":", "len", "(", "self", ".", "data", "[", "\"unlabelled\"", "]", ")", ",", "\n", "\"n_test\"", ":", "len", "(", "self", ".", "data", "[", "\"test\"", "]", ")", ",", "\n", "\"n_val\"", ":", "len", "(", "self", ".", "data", "[", "\"val\"", "]", ")", ",", "\n", "\"f_u\"", ":", "label_fraction", "(", "self", ".", "data", "[", "\"unlabelled\"", "]", ",", "0", ")", ",", "\n", "\"f_l\"", ":", "label_fraction", "(", "self", ".", "data", "[", "\"labelled\"", "]", ",", "0", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.inigoval_fixmatch.dataloading.datamodules.default_transforms": [[316, 340], ["torchvision.Compose", "fixmatch.TransformFixMatch", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.ToTensor", "dataloading.utils.Circle_Crop", "torchvision.Normalize", "torchvision.ToTensor", "dataloading.utils.Circle_Crop", "torchvision.Normalize", "torchvision.ToTensor", "dataloading.utils.Circle_Crop", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "default_transforms", "(", "config", ",", "mu", ",", "sig", ")", ":", "\n", "    ", "return", "{", "\n", "\"weak\"", ":", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "T", ".", "RandomRotation", "(", "180", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "Circle_Crop", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "(", "mu", ",", ")", ",", "(", "sig", ",", ")", ")", ",", "\n", "]", "\n", ")", ",", "\n", "\"unlabelled\"", ":", "TransformFixMatch", "(", "config", ",", "mu", ",", "sig", ")", ",", "\n", "\"test\"", ":", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "Circle_Crop", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "(", "mu", ",", ")", ",", "(", "sig", ",", ")", ")", ",", "\n", "]", "\n", ")", ",", "\n", "\"val\"", ":", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "Circle_Crop", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "(", "mu", ",", ")", ",", "(", "sig", ",", ")", ")", ",", "\n", "]", "\n"]]}