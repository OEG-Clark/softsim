{"home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.calculate_metrics": [[23, 37], ["preds[].values.astype", "preds[].values.astype", "sklearn.metrics.roc_auc_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.average_precision_score", "sklearn.metrics.confusion_matrix", "sklearn.metrics.confusion_matrix.ravel", "numpy.where"], "function", ["None"], ["def", "calculate_metrics", "(", "preds", ")", ":", "\n", "    ", "labels_array", "=", "preds", "[", "'label'", "]", ".", "values", ".", "astype", "(", "int", ")", "\n", "scores_array", "=", "preds", "[", "'score'", "]", ".", "values", ".", "astype", "(", "float", ")", "\n", "auc", "=", "roc_auc_score", "(", "labels_array", ",", "scores_array", ")", "\n", "acc", "=", "accuracy_score", "(", "\n", "labels_array", ",", "np", ".", "where", "(", "scores_array", ">=", "0.5", ",", "1", ",", "0", ")", ")", "\n", "avp", "=", "average_precision_score", "(", "labels_array", ",", "scores_array", ")", "\n", "conf_matrix", "=", "confusion_matrix", "(", "labels_array", ",", "scores_array", ">=", "0.5", ")", "\n", "tn", ",", "fp", ",", "fn", ",", "tp", "=", "conf_matrix", ".", "ravel", "(", ")", "\n", "specificity", "=", "tn", "/", "(", "tn", "+", "fp", ")", "\n", "sensitivity", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "\n", "return", "{", "'auc'", ":", "auc", ",", "'acc'", ":", "acc", ",", "'avp'", ":", "avp", ",", "\n", "'spec'", ":", "specificity", ",", "'sens'", ":", "sensitivity", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.ensemble": [[39, 51], ["pandas.concat", "pd.concat.groupby().mean", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pd.concat.groupby"], "function", ["None"], ["", "def", "ensemble", "(", "ids", ",", "epoch", "=", "'best'", ")", ":", "\n", "    ", "if", "epoch", "==", "'best+last'", ":", "\n", "        ", "dfs", "=", "[", "pd", ".", "read_csv", "(", "\n", "'results/{}/test-aug-best.csv'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "ids", "]", "\n", "dfs", "+=", "[", "pd", ".", "read_csv", "(", "\n", "'results/{}/test-aug-last.csv'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "ids", "]", "\n", "", "else", ":", "\n", "        ", "dfs", "=", "[", "pd", ".", "read_csv", "(", "\n", "'results/{}/test-aug-{}.csv'", ".", "format", "(", "i", ",", "epoch", ")", ")", "for", "i", "in", "ids", "]", "\n", "", "df_concat", "=", "pd", ".", "concat", "(", "dfs", ")", "\n", "df_means", "=", "df_concat", ".", "groupby", "(", "'image'", ")", ".", "mean", "(", ")", "\n", "return", "df_means", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.first_ensemble": [[53, 73], ["pandas.DataFrame", "range", "data.name.unique", "list", "ensemble_1.append.append", "create_ensambles.calculate_metrics", "create_ensambles.ensemble", "list"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.calculate_metrics", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.ensemble"], ["", "def", "first_ensemble", "(", "data", ")", ":", "\n", "    ", "ensemble_ids", "=", "{", "}", "\n", "ensemble_1", "=", "pd", ".", "DataFrame", "(", "columns", "=", "(", "'split'", ",", "'net'", ",", "'epoch'", ",", "'auc'", ",", "'acc'", ",", "\n", "'avp'", ",", "'spec'", ",", "'sens'", ")", ")", "\n", "\n", "for", "epoch", "in", "(", "'best'", ",", "'last'", ",", "'best+last'", ")", ":", "\n", "        ", "for", "split", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "ensemble_ids", "[", "split", "]", "=", "{", "}", "\n", "for", "net", "in", "data", ".", "name", ".", "unique", "(", ")", ":", "\n", "                ", "models", "=", "data", ".", "loc", "[", "\n", "(", "(", "data", "[", "'name'", "]", "==", "net", ")", "&", "(", "data", "[", "'split'", "]", "==", "split", ")", ")", "]", "\n", "ensemble_ids", "[", "split", "]", "[", "net", "]", "=", "list", "(", "models", "[", "'id'", "]", ")", "\n", "ensemble_1", "=", "ensemble_1", ".", "append", "(", "\n", "{", "'net'", ":", "net", ",", "'split'", ":", "split", ",", "'epoch'", ":", "epoch", ",", "\n", "**", "calculate_metrics", "(", "\n", "ensemble", "(", "list", "(", "models", "[", "'id'", "]", ")", ",", "epoch", "=", "epoch", ")", ")", "\n", "}", ",", "\n", "ignore_index", "=", "True", ")", "\n", "\n", "", "", "", "return", "ensemble_1", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.second_ensemble": [[75, 92], ["pandas.DataFrame", "range", "range", "list", "random.shuffle", "range", "ensemble_2.append.append", "len", "create_ensambles.calculate_metrics", "create_ensambles.ensemble"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.calculate_metrics", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.ensemble"], ["", "def", "second_ensemble", "(", "data", ")", ":", "\n", "    ", "ensemble_2", "=", "pd", ".", "DataFrame", "(", "columns", "=", "(", "'split'", ",", "'n_models'", ",", "'epoch'", ",", "'auc'", ",", "\n", "'acc'", ",", "'avp'", ",", "'spec'", ",", "'sens'", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "for", "epoch", "in", "(", "'best'", ",", "'last'", ")", ":", "\n", "            ", "for", "split", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "                ", "filtered", "=", "data", ".", "loc", "[", "(", "data", "[", "'split'", "]", "==", "split", ")", "]", "\n", "ids", "=", "list", "(", "filtered", "[", "'id'", "]", ")", "\n", "shuffle", "(", "ids", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "ids", ")", "+", "1", ")", ":", "\n", "                    ", "ensemble_2", "=", "ensemble_2", ".", "append", "(", "\n", "{", "'n_models'", ":", "i", ",", "'split'", ":", "split", ",", "'epoch'", ":", "epoch", ",", "\n", "**", "calculate_metrics", "(", "ensemble", "(", "ids", "[", "0", ":", "i", "]", ",", "epoch", "=", "epoch", ")", ")", "}", ",", "\n", "ignore_index", "=", "True", ")", "\n", "\n", "", "", "", "", "return", "ensemble_2", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.third_ensemble": [[94, 110], ["pandas.DataFrame", "range", "filtered.sort_values.sort_values", "list", "range", "ensemble_3.append.append", "len", "create_ensambles.calculate_metrics", "create_ensambles.ensemble"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.calculate_metrics", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.ensemble"], ["", "def", "third_ensemble", "(", "data", ")", ":", "\n", "    ", "ensemble_3", "=", "pd", ".", "DataFrame", "(", "columns", "=", "(", "'split'", ",", "'n_models'", ",", "'epoch'", ",", "'auc'", ",", "\n", "'acc'", ",", "'avp'", ",", "'spec'", ",", "'sens'", ")", ")", "\n", "\n", "for", "epoch", "in", "(", "'best'", ",", "'last'", ")", ":", "\n", "        ", "for", "split", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "filtered", "=", "data", ".", "loc", "[", "(", "data", "[", "'split'", "]", "==", "split", ")", "]", "\n", "filtered", "=", "filtered", ".", "sort_values", "(", "'best_val_auc'", ",", "ascending", "=", "False", ")", "\n", "ids", "=", "list", "(", "filtered", "[", "'id'", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "ids", ")", "+", "1", ")", ":", "\n", "                ", "ensemble_3", "=", "ensemble_3", ".", "append", "(", "\n", "{", "'n_models'", ":", "i", ",", "'split'", ":", "split", ",", "'epoch'", ":", "epoch", ",", "\n", "**", "calculate_metrics", "(", "ensemble", "(", "ids", "[", "0", ":", "i", "]", ",", "epoch", "=", "epoch", ")", ")", "}", ",", "\n", "ignore_index", "=", "True", ")", "\n", "\n", "", "", "", "return", "ensemble_3", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.main": [[112, 122], ["pandas.read_csv", "create_ensambles.first_ensemble", "create_ensambles.second_ensemble", "create_ensambles.third_ensemble", "first_ensemble.to_csv", "second_ensemble.to_csv", "third_ensemble.to_csv", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.first_ensemble", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.second_ensemble", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.create_ensambles.third_ensemble"], ["", "def", "main", "(", ")", ":", "\n", "    ", "results", "=", "pd", ".", "read_csv", "(", "'results_github.csv'", ",", "header", "=", "None", ")", "\n", "results", ".", "columns", "=", "pd", ".", "read_csv", "(", "'columns.csv'", ")", ".", "columns", "\n", "ensemble_1", "=", "first_ensemble", "(", "results", ")", "\n", "ensemble_2", "=", "second_ensemble", "(", "results", ")", "\n", "ensemble_3", "=", "third_ensemble", "(", "results", ")", "\n", "\n", "ensemble_1", ".", "to_csv", "(", "'results/ensemble_1.csv'", ",", "index", "=", "False", ")", "\n", "ensemble_2", ".", "to_csv", "(", "'results/ensemble_2.csv'", ",", "index", "=", "False", ")", "\n", "ensemble_3", ".", "to_csv", "(", "'results/ensemble_3.csv'", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.train.cfg": [[36, 69], ["None"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "cfg", "(", ")", ":", "\n", "    ", "train_root", "=", "None", "# path to train images", "\n", "train_csv", "=", "None", "# path to train CSV", "\n", "val_root", "=", "None", "# path to validation images", "\n", "val_csv", "=", "None", "# path to validation CSV", "\n", "test_root", "=", "None", "# path to test images", "\n", "test_csv", "=", "None", "# path to test CSV", "\n", "epochs", "=", "30", "# number of epochs", "\n", "batch_size", "=", "32", "# batch size", "\n", "num_workers", "=", "8", "# parallel jobs for data loading and augmentation", "\n", "model_name", "=", "None", "# model", "\n", "val_samples", "=", "16", "# number of samples per image in validation", "\n", "test_samples", "=", "64", "# number of samples per image in test", "\n", "early_stopping_patience", "=", "8", "# patience for early stopping", "\n", "images_per_epoch", "=", "None", "# number of images per epoch", "\n", "limit_data", "=", "False", "# limit dataset to N images", "\n", "split_id", "=", "None", "# split id (int)", "\n", "# augmentations", "\n", "aug", "=", "{", "\n", "'hflip'", ":", "False", ",", "# Random Horizontal Flip", "\n", "'vflip'", ":", "False", ",", "# Random Vertical Flip", "\n", "'rotation'", ":", "0", ",", "# Rotation (in degrees)", "\n", "'shear'", ":", "0", ",", "# Shear (in degrees)", "\n", "'scale'", ":", "1.0", ",", "# Scale (tuple (min, max))", "\n", "'color_contrast'", ":", "0", ",", "# Color Jitter: Contrast", "\n", "'color_saturation'", ":", "0", ",", "# Color Jitter: Saturation", "\n", "'color_brightness'", ":", "0", ",", "# Color Jitter: Brightness", "\n", "'color_hue'", ":", "0", ",", "# Color Jitter: Hue", "\n", "'random_crop'", ":", "False", ",", "# Random Crops", "\n", "'random_erasing'", ":", "False", ",", "# Random Erasing", "\n", "'piecewise_affine'", ":", "False", ",", "# Piecewise Affine", "\n", "'tps'", ":", "False", ",", "# TPS Affine", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.train.train_epoch": [[72, 114], ["auglib.meters.AverageMeter", "auglib.meters.AverageMeter", "model.train", "sklearn.metrics.roc_auc_score", "tqdm.tqdm", "tqdm.tqdm", "inputs.to.to", "labels.to.to", "optimizer.zero_grad", "auglib.meters.AverageMeter.update", "auglib.meters.AverageMeter.update", "list", "list", "tqdm.tqdm.set_postfix", "itertools.islice", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model", "torch.max", "torch.max", "torch.max", "torch.max", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "inputs.to.size", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "[].cpu().data.numpy", "labels.to.cpu().data.numpy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "[].cpu", "labels.to.cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.meters.AverageMeter.update", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.meters.AverageMeter.update"], ["", "def", "train_epoch", "(", "device", ",", "model", ",", "dataloaders", ",", "criterion", ",", "optimizer", ",", "\n", "batches_per_epoch", "=", "None", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "accuracies", "=", "AverageMeter", "(", ")", "\n", "all_preds", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "batches_per_epoch", ":", "\n", "# Another option would be to use a PyTorch Sampler.", "\n", "        ", "tqdm_loader", "=", "tqdm", "(", "\n", "islice", "(", "dataloaders", "[", "'train'", "]", ",", "0", ",", "batches_per_epoch", ")", ",", "\n", "total", "=", "batches_per_epoch", ")", "\n", "", "else", ":", "\n", "        ", "tqdm_loader", "=", "tqdm", "(", "dataloaders", "[", "'train'", "]", ")", "\n", "\n", "", "for", "data", "in", "tqdm_loader", ":", "\n", "        ", "inputs", ",", "labels", "=", "data", "\n", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "inputs", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "acc", "=", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "data", ")", ".", "item", "(", ")", "/", "preds", ".", "shape", "[", "0", "]", "\n", "accuracies", ".", "update", "(", "acc", ")", "\n", "all_preds", "+=", "list", "(", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "all_labels", "+=", "list", "(", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "tqdm_loader", ".", "set_postfix", "(", "loss", "=", "losses", ".", "avg", ",", "acc", "=", "accuracies", ".", "avg", ")", "\n", "\n", "", "auc", "=", "roc_auc_score", "(", "all_labels", ",", "all_preds", ")", "\n", "\n", "return", "{", "'loss'", ":", "losses", ".", "avg", ",", "'auc'", ":", "auc", ",", "'acc'", ":", "accuracies", ".", "avg", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.train.save_images": [[116, 120], ["range", "os.path.join", "torchvision.utils.save_image"], "function", ["None"], ["", "def", "save_images", "(", "dataset", ",", "to", ",", "n", "=", "32", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "to", ",", "'img_{}.png'", ".", "format", "(", "i", ")", ")", "\n", "save_image", "(", "dataset", "[", "i", "]", "[", "0", "]", ",", "img_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.train.main": [[122, 408], ["cv2.setNumThreads", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.device", "torch.device", "torch.device", "torch.device", "auglib.models.MobileNetV2.MobileNetV2.to", "auglib.augmentation.Augmentations", "train.save_images", "next", "torchvision.utils.save_image", "torch.CrossEntropyLoss", "torch.SGD", "torch.lr_scheduler.ReduceLROnPlateau", "range", "auglib.test.test_with_augmentation", "print", "auglib.test.test_with_augmentation", "print", "auglib.test.test_with_augmentation", "print", "auglib.test.test_with_augmentation", "print", "preds.to_csv", "preds_noaug.to_csv", "preds_last.to_csv", "preds_noaug_last.to_csv", "os.makedirs", "pretrainedmodels.inceptionv4", "torch.Linear", "auglib.dataset_loader.CSVDataset", "auglib.dataset_loader.CSVDataset", "auglib.dataset_loader.CSVDatasetWithName", "auglib.dataset_loader.CSVDatasetWithName", "auglib.dataset_loader.CSVDatasetWithName", "auglib.dataset_loader.CSVDatasetWithName", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "torchvision.utils.make_grid", "os.path.join", "auglib.models.MobileNetV2.MobileNetV2.parameters", "pandas.DataFrame", "pandas.DataFrame", "print", "train.train_epoch", "metrics[].append", "print", "auglib.test.test_with_augmentation", "metrics[].append", "print", "print", "optim.lr_scheduler.ReduceLROnPlateau.step", "metrics[].epoch.astype", "metrics[].to_csv", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "file.write", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.models.resnet152", "torch.Linear", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torchvision.models.densenet161", "torch.Linear", "pretrainedmodels.senet154", "torch.Linear", "pretrainedmodels.squeezenet1_1", "torch.Conv2d", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "pretrainedmodels.pnasnet5large", "torch.Linear", "pretrainedmodels.nasnetalarge", "torch.Linear", "pretrainedmodels.xception", "torch.Linear", "pretrainedmodels.dpn131", "torch.Conv2d", "pretrainedmodels.resnext101_64x4d", "torch.Linear", "pretrainedmodels.inceptionresnetv2", "torch.Linear", "auglib.models.MobileNetV2.MobileNetV2", "auglib.models.MobileNetV2.MobileNetV2.load_state_dict", "torch.Sequential", "torch.load", "torch.load", "torch.load", "torch.load", "torch.Dropout", "torch.Linear"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.train.save_images", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.test_with_augmentation", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.test_with_augmentation", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.test_with_augmentation", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.test_with_augmentation", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.train.train_epoch", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.test_with_augmentation"], ["", "", "@", "ex", ".", "automain", "\n", "def", "main", "(", "train_root", ",", "train_csv", ",", "val_root", ",", "val_csv", ",", "test_root", ",", "test_csv", ",", "\n", "epochs", ",", "aug", ",", "model_name", ",", "batch_size", ",", "num_workers", ",", "val_samples", ",", "\n", "test_samples", ",", "early_stopping_patience", ",", "limit_data", ",", "images_per_epoch", ",", "\n", "split_id", ",", "_run", ")", ":", "\n", "    ", "assert", "(", "model_name", "in", "(", "'inceptionv4'", ",", "'resnet152'", ",", "'densenet161'", ",", "\n", "'senet154'", ",", "'pnasnet5large'", ",", "'nasnetalarge'", ",", "\n", "'xception'", ",", "'squeezenet'", ",", "'resnext'", ",", "'dpn'", ",", "\n", "'inceptionresnetv2'", ",", "'mobilenetv2'", ")", ")", "\n", "\n", "cv2", ".", "setNumThreads", "(", "0", ")", "\n", "\n", "AUGMENTED_IMAGES_DIR", "=", "os", ".", "path", ".", "join", "(", "fs_observer", ".", "dir", ",", "'images'", ")", "\n", "CHECKPOINTS_DIR", "=", "os", ".", "path", ".", "join", "(", "fs_observer", ".", "dir", ",", "'checkpoints'", ")", "\n", "BEST_MODEL_PATH", "=", "os", ".", "path", ".", "join", "(", "CHECKPOINTS_DIR", ",", "'model_best.pth'", ")", "\n", "LAST_MODEL_PATH", "=", "os", ".", "path", ".", "join", "(", "CHECKPOINTS_DIR", ",", "'model_last.pth'", ")", "\n", "RESULTS_CSV_PATH", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "'results.csv'", ")", "\n", "EXP_NAME", "=", "_run", ".", "meta_info", "[", "'options'", "]", "[", "'--name'", "]", "\n", "EXP_ID", "=", "_run", ".", "_id", "\n", "\n", "for", "directory", "in", "(", "AUGMENTED_IMAGES_DIR", ",", "CHECKPOINTS_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "if", "model_name", "==", "'inceptionv4'", ":", "\n", "        ", "model", "=", "ptm", ".", "inceptionv4", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "model", ".", "last_linear", "=", "nn", ".", "Linear", "(", "model", ".", "last_linear", ".", "in_features", ",", "2", ")", "\n", "aug", "[", "'size'", "]", "=", "299", "\n", "aug", "[", "'mean'", "]", "=", "model", ".", "mean", "\n", "aug", "[", "'std'", "]", "=", "model", ".", "std", "\n", "", "elif", "model_name", "==", "'resnet152'", ":", "\n", "        ", "model", "=", "models", ".", "resnet152", "(", "pretrained", "=", "True", ")", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "fc", ".", "in_features", ",", "2", ")", "\n", "aug", "[", "'size'", "]", "=", "224", "\n", "aug", "[", "'mean'", "]", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "aug", "[", "'std'", "]", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "model_name", "==", "'densenet161'", ":", "\n", "        ", "model", "=", "models", ".", "densenet161", "(", "pretrained", "=", "True", ")", "\n", "model", ".", "classifier", "=", "nn", ".", "Linear", "(", "model", ".", "classifier", ".", "in_features", ",", "2", ")", "\n", "aug", "[", "'size'", "]", "=", "224", "\n", "aug", "[", "'mean'", "]", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "aug", "[", "'std'", "]", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "model_name", "==", "'senet154'", ":", "\n", "        ", "model", "=", "ptm", ".", "senet154", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "model", ".", "last_linear", "=", "nn", ".", "Linear", "(", "model", ".", "last_linear", ".", "in_features", ",", "2", ")", "\n", "aug", "[", "'size'", "]", "=", "model", ".", "input_size", "[", "1", "]", "\n", "aug", "[", "'mean'", "]", "=", "model", ".", "mean", "\n", "aug", "[", "'std'", "]", "=", "model", ".", "std", "\n", "", "elif", "model_name", "==", "'squeezenet'", ":", "\n", "        ", "model", "=", "ptm", ".", "squeezenet1_1", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "model", ".", "last_conv", "=", "nn", ".", "Conv2d", "(", "\n", "512", ",", "2", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "aug", "[", "'size'", "]", "=", "model", ".", "input_size", "[", "1", "]", "\n", "aug", "[", "'mean'", "]", "=", "model", ".", "mean", "\n", "aug", "[", "'std'", "]", "=", "model", ".", "std", "\n", "", "elif", "model_name", "==", "'pnasnet5large'", ":", "\n", "        ", "model", "=", "ptm", ".", "pnasnet5large", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "model", ".", "last_linear", "=", "nn", ".", "Linear", "(", "model", ".", "last_linear", ".", "in_features", ",", "2", ")", "\n", "aug", "[", "'size'", "]", "=", "model", ".", "input_size", "[", "1", "]", "\n", "aug", "[", "'mean'", "]", "=", "model", ".", "mean", "\n", "aug", "[", "'std'", "]", "=", "model", ".", "std", "\n", "", "elif", "model_name", "==", "'nasnetalarge'", ":", "\n", "        ", "model", "=", "ptm", ".", "nasnetalarge", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "model", ".", "last_linear", "=", "nn", ".", "Linear", "(", "model", ".", "last_linear", ".", "in_features", ",", "2", ")", "\n", "aug", "[", "'size'", "]", "=", "model", ".", "input_size", "[", "1", "]", "\n", "aug", "[", "'mean'", "]", "=", "model", ".", "mean", "\n", "aug", "[", "'std'", "]", "=", "model", ".", "std", "\n", "", "elif", "model_name", "==", "'xception'", ":", "\n", "        ", "model", "=", "ptm", ".", "xception", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "model", ".", "last_linear", "=", "nn", ".", "Linear", "(", "model", ".", "last_linear", ".", "in_features", ",", "2", ")", "\n", "aug", "[", "'size'", "]", "=", "model", ".", "input_size", "[", "1", "]", "\n", "aug", "[", "'mean'", "]", "=", "model", ".", "mean", "\n", "aug", "[", "'std'", "]", "=", "model", ".", "std", "\n", "", "elif", "model_name", "==", "'dpn'", ":", "\n", "        ", "model", "=", "ptm", ".", "dpn131", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "model", ".", "last_linear", "=", "nn", ".", "Conv2d", "(", "model", ".", "last_linear", ".", "in_channels", ",", "2", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "aug", "[", "'size'", "]", "=", "model", ".", "input_size", "[", "1", "]", "\n", "aug", "[", "'mean'", "]", "=", "model", ".", "mean", "\n", "aug", "[", "'std'", "]", "=", "model", ".", "std", "\n", "", "elif", "model_name", "==", "'resnext'", ":", "\n", "        ", "model", "=", "ptm", ".", "resnext101_64x4d", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "model", ".", "last_linear", "=", "nn", ".", "Linear", "(", "model", ".", "last_linear", ".", "in_features", ",", "2", ")", "\n", "aug", "[", "'size'", "]", "=", "model", ".", "input_size", "[", "1", "]", "\n", "aug", "[", "'mean'", "]", "=", "model", ".", "mean", "\n", "aug", "[", "'std'", "]", "=", "model", ".", "std", "\n", "", "elif", "model_name", "==", "'inceptionresnetv2'", ":", "\n", "        ", "model", "=", "ptm", ".", "inceptionresnetv2", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "model", ".", "last_linear", "=", "nn", ".", "Linear", "(", "model", ".", "last_linear", ".", "in_features", ",", "2", ")", "\n", "aug", "[", "'size'", "]", "=", "model", ".", "input_size", "[", "1", "]", "\n", "aug", "[", "'mean'", "]", "=", "model", ".", "mean", "\n", "aug", "[", "'std'", "]", "=", "model", ".", "std", "\n", "", "elif", "model_name", "==", "'mobilenetv2'", ":", "\n", "        ", "model", "=", "MobileNetV2", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./auglib/models/mobilenet_v2.pth'", ")", ")", "\n", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "model", ".", "last_channel", ",", "2", ")", ",", "\n", ")", "\n", "aug", "[", "'size'", "]", "=", "224", "\n", "aug", "[", "'mean'", "]", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "aug", "[", "'std'", "]", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "augs", "=", "Augmentations", "(", "**", "aug", ")", "\n", "model", ".", "aug_params", "=", "aug", "\n", "\n", "datasets", "=", "{", "\n", "'samples'", ":", "CSVDataset", "(", "train_root", ",", "train_csv", ",", "'image_id'", ",", "'melanoma'", ",", "\n", "transform", "=", "augs", ".", "tf_augment", ",", "add_extension", "=", "'.jpg'", ",", "\n", "limit", "=", "(", "400", ",", "433", ")", ")", ",", "\n", "'train'", ":", "CSVDataset", "(", "train_root", ",", "train_csv", ",", "'image_id'", ",", "'melanoma'", ",", "\n", "transform", "=", "augs", ".", "tf_transform", ",", "add_extension", "=", "'.jpg'", ",", "\n", "random_subset_size", "=", "limit_data", ")", ",", "\n", "'val'", ":", "CSVDatasetWithName", "(", "\n", "val_root", ",", "val_csv", ",", "'image_id'", ",", "'melanoma'", ",", "\n", "transform", "=", "augs", ".", "tf_transform", ",", "add_extension", "=", "'.jpg'", ")", ",", "\n", "'test'", ":", "CSVDatasetWithName", "(", "\n", "test_root", ",", "test_csv", ",", "'image_id'", ",", "'melanoma'", ",", "\n", "transform", "=", "augs", ".", "tf_transform", ",", "add_extension", "=", "'.jpg'", ")", ",", "\n", "'test_no_aug'", ":", "CSVDatasetWithName", "(", "\n", "test_root", ",", "test_csv", ",", "'image_id'", ",", "'melanoma'", ",", "\n", "transform", "=", "augs", ".", "no_augmentation", ",", "add_extension", "=", "'.jpg'", ")", ",", "\n", "'test_144'", ":", "CSVDatasetWithName", "(", "\n", "test_root", ",", "test_csv", ",", "'image_id'", ",", "'melanoma'", ",", "\n", "transform", "=", "augs", ".", "inception_crop", ",", "add_extension", "=", "'.jpg'", ")", ",", "\n", "}", "\n", "\n", "dataloaders", "=", "{", "\n", "'train'", ":", "DataLoader", "(", "datasets", "[", "'train'", "]", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "\n", "worker_init_fn", "=", "set_seeds", ")", ",", "\n", "'samples'", ":", "DataLoader", "(", "datasets", "[", "'samples'", "]", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "\n", "worker_init_fn", "=", "set_seeds", ")", ",", "\n", "}", "\n", "\n", "save_images", "(", "datasets", "[", "'samples'", "]", ",", "to", "=", "AUGMENTED_IMAGES_DIR", ",", "n", "=", "32", ")", "\n", "sample_batch", ",", "_", "=", "next", "(", "iter", "(", "dataloaders", "[", "'samples'", "]", ")", ")", "\n", "save_image", "(", "make_grid", "(", "sample_batch", ",", "padding", "=", "0", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "AUGMENTED_IMAGES_DIR", ",", "'grid.jpg'", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "0.001", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.001", ")", "\n", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "factor", "=", "0.1", ",", "\n", "min_lr", "=", "1e-5", ",", "\n", "patience", "=", "8", ")", "\n", "metrics", "=", "{", "\n", "'train'", ":", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'epoch'", ",", "'loss'", ",", "'acc'", ",", "'auc'", "]", ")", ",", "\n", "'val'", ":", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'epoch'", ",", "'loss'", ",", "'acc'", ",", "'auc'", "]", ")", "\n", "}", "\n", "\n", "best_val_auc", "=", "0.0", "\n", "best_epoch", "=", "0", "\n", "epochs_without_improvement", "=", "0", "\n", "if", "images_per_epoch", ":", "\n", "        ", "batches_per_epoch", "=", "images_per_epoch", "//", "batch_size", "\n", "", "else", ":", "\n", "        ", "batches_per_epoch", "=", "None", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "print", "(", "'train epoch {}/{}'", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ")", ")", "\n", "epoch_train_result", "=", "train_epoch", "(", "\n", "device", ",", "model", ",", "dataloaders", ",", "criterion", ",", "optimizer", ",", "\n", "batches_per_epoch", ")", "\n", "\n", "metrics", "[", "'train'", "]", "=", "metrics", "[", "'train'", "]", ".", "append", "(", "\n", "{", "**", "epoch_train_result", ",", "'epoch'", ":", "epoch", "}", ",", "ignore_index", "=", "True", ")", "\n", "print", "(", "'train'", ",", "epoch_train_result", ")", "\n", "\n", "epoch_val_result", ",", "_", "=", "test_with_augmentation", "(", "\n", "model", ",", "datasets", "[", "'val'", "]", ",", "device", ",", "num_workers", ",", "val_samples", ")", "\n", "\n", "metrics", "[", "'val'", "]", "=", "metrics", "[", "'val'", "]", ".", "append", "(", "\n", "{", "**", "epoch_val_result", ",", "'epoch'", ":", "epoch", "}", ",", "ignore_index", "=", "True", ")", "\n", "print", "(", "'val'", ",", "epoch_val_result", ")", "\n", "print", "(", "'-'", "*", "40", ")", "\n", "\n", "scheduler", ".", "step", "(", "epoch_val_result", "[", "'loss'", "]", ")", "\n", "\n", "if", "epoch_val_result", "[", "'auc'", "]", ">", "best_val_auc", ":", "\n", "            ", "best_val_auc", "=", "epoch_val_result", "[", "'auc'", "]", "\n", "best_val_result", "=", "epoch_val_result", "\n", "best_epoch", "=", "epoch", "\n", "epochs_without_improvement", "=", "0", "\n", "torch", ".", "save", "(", "model", ",", "BEST_MODEL_PATH", ")", "\n", "", "else", ":", "\n", "            ", "epochs_without_improvement", "+=", "1", "\n", "\n", "", "if", "epochs_without_improvement", ">", "early_stopping_patience", ":", "\n", "            ", "last_val_result", "=", "epoch_val_result", "\n", "torch", ".", "save", "(", "model", ",", "LAST_MODEL_PATH", ")", "\n", "break", "\n", "\n", "", "if", "epoch", "==", "(", "epochs", "-", "1", ")", ":", "\n", "            ", "last_val_result", "=", "epoch_val_result", "\n", "torch", ".", "save", "(", "model", ",", "LAST_MODEL_PATH", ")", "\n", "\n", "", "", "for", "phase", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "        ", "metrics", "[", "phase", "]", ".", "epoch", "=", "metrics", "[", "phase", "]", ".", "epoch", ".", "astype", "(", "int", ")", "\n", "metrics", "[", "phase", "]", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "fs_observer", ".", "dir", ",", "phase", "+", "'.csv'", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n", "# Run testing", "\n", "# TODO: reduce code repetition", "\n", "", "test_result", ",", "preds", "=", "test_with_augmentation", "(", "\n", "torch", ".", "load", "(", "BEST_MODEL_PATH", ")", ",", "datasets", "[", "'test'", "]", ",", "device", ",", "\n", "num_workers", ",", "test_samples", ")", "\n", "print", "(", "'[best] test'", ",", "test_result", ")", "\n", "\n", "test_noaug_result", ",", "preds_noaug", "=", "test_with_augmentation", "(", "\n", "torch", ".", "load", "(", "BEST_MODEL_PATH", ")", ",", "datasets", "[", "'test_no_aug'", "]", ",", "device", ",", "\n", "num_workers", ",", "1", ")", "\n", "print", "(", "'[best] test (no augmentation)'", ",", "test_noaug_result", ")", "\n", "\n", "test_result_last", ",", "preds_last", "=", "test_with_augmentation", "(", "\n", "torch", ".", "load", "(", "LAST_MODEL_PATH", ")", ",", "datasets", "[", "'test'", "]", ",", "device", ",", "\n", "num_workers", ",", "test_samples", ")", "\n", "print", "(", "'[last] test'", ",", "test_result_last", ")", "\n", "\n", "test_noaug_result_last", ",", "preds_noaug_last", "=", "test_with_augmentation", "(", "\n", "torch", ".", "load", "(", "LAST_MODEL_PATH", ")", ",", "datasets", "[", "'test_no_aug'", "]", ",", "device", ",", "\n", "num_workers", ",", "1", ")", "\n", "print", "(", "'[last] test (no augmentation)'", ",", "test_noaug_result_last", ")", "\n", "\n", "# Save predictions", "\n", "preds", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "fs_observer", ".", "dir", ",", "'test-aug-best.csv'", ")", ",", "\n", "index", "=", "False", ",", "columns", "=", "[", "'image'", ",", "'label'", ",", "'score'", "]", ")", "\n", "preds_noaug", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "fs_observer", ".", "dir", ",", "'test-noaug-best.csv'", ")", ",", "\n", "index", "=", "False", ",", "columns", "=", "[", "'image'", ",", "'label'", ",", "'score'", "]", ")", "\n", "preds_last", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "fs_observer", ".", "dir", ",", "'test-aug-last.csv'", ")", ",", "\n", "index", "=", "False", ",", "columns", "=", "[", "'image'", ",", "'label'", ",", "'score'", "]", ")", "\n", "preds_noaug_last", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "fs_observer", ".", "dir", ",", "'test-noaug-last.csv'", ")", ",", "\n", "index", "=", "False", ",", "columns", "=", "[", "'image'", ",", "'label'", ",", "'score'", "]", ")", "\n", "\n", "# TODO: Avoid repetition.", "\n", "#       use ordereddict, or create a pandas df before saving", "\n", "with", "open", "(", "RESULTS_CSV_PATH", ",", "'a'", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "','", ".", "join", "(", "(", "\n", "EXP_NAME", ",", "\n", "str", "(", "EXP_ID", ")", ",", "\n", "str", "(", "split_id", ")", ",", "\n", "str", "(", "best_epoch", ")", ",", "\n", "str", "(", "best_val_result", "[", "'loss'", "]", ")", ",", "\n", "str", "(", "best_val_result", "[", "'acc'", "]", ")", ",", "\n", "str", "(", "best_val_result", "[", "'auc'", "]", ")", ",", "\n", "str", "(", "best_val_result", "[", "'avp'", "]", ")", ",", "\n", "str", "(", "best_val_result", "[", "'sens'", "]", ")", ",", "\n", "str", "(", "best_val_result", "[", "'spec'", "]", ")", ",", "\n", "str", "(", "last_val_result", "[", "'loss'", "]", ")", ",", "\n", "str", "(", "last_val_result", "[", "'acc'", "]", ")", ",", "\n", "str", "(", "last_val_result", "[", "'auc'", "]", ")", ",", "\n", "str", "(", "last_val_result", "[", "'avp'", "]", ")", ",", "\n", "str", "(", "last_val_result", "[", "'sens'", "]", ")", ",", "\n", "str", "(", "last_val_result", "[", "'spec'", "]", ")", ",", "\n", "str", "(", "best_val_auc", ")", ",", "\n", "str", "(", "test_result", "[", "'auc'", "]", ")", ",", "\n", "str", "(", "test_result_last", "[", "'auc'", "]", ")", ",", "\n", "str", "(", "test_result", "[", "'acc'", "]", ")", ",", "\n", "str", "(", "test_result_last", "[", "'acc'", "]", ")", ",", "\n", "str", "(", "test_result", "[", "'spec'", "]", ")", ",", "\n", "str", "(", "test_result_last", "[", "'spec'", "]", ")", ",", "\n", "str", "(", "test_result", "[", "'sens'", "]", ")", ",", "\n", "str", "(", "test_result_last", "[", "'sens'", "]", ")", ",", "\n", "str", "(", "test_result", "[", "'avp'", "]", ")", ",", "\n", "str", "(", "test_result_last", "[", "'avp'", "]", ")", ",", "\n", "str", "(", "test_noaug_result", "[", "'auc'", "]", ")", ",", "\n", "str", "(", "test_noaug_result_last", "[", "'auc'", "]", ")", ",", "\n", "str", "(", "test_noaug_result", "[", "'acc'", "]", ")", ",", "\n", "str", "(", "test_noaug_result_last", "[", "'acc'", "]", ")", ",", "\n", "str", "(", "test_noaug_result", "[", "'spec'", "]", ")", ",", "\n", "str", "(", "test_noaug_result_last", "[", "'spec'", "]", ")", ",", "\n", "str", "(", "test_noaug_result", "[", "'sens'", "]", ")", ",", "\n", "str", "(", "test_noaug_result_last", "[", "'sens'", "]", ")", ",", "\n", "str", "(", "test_noaug_result", "[", "'avp'", "]", ")", ",", "\n", "str", "(", "test_noaug_result_last", "[", "'avp'", "]", ")", ",", "\n", ")", ")", "+", "'\\n'", ")", "\n", "\n", "", "return", "(", "test_noaug_result", "[", "'auc'", "]", ",", "\n", "test_result", "[", "'auc'", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.test.parse_args": [[10, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'model'", ",", "help", "=", "'Path to the model'", ")", "\n", "parser", ".", "add_argument", "(", "'dataset_root'", ",", "help", "=", "'Path to dataset root'", ")", "\n", "parser", ".", "add_argument", "(", "'dataset_csv'", ",", "help", "=", "'Path to dataset csv'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of image copies'", ")", "\n", "parser", ".", "add_argument", "(", "'--print-predictions'", ",", "'-p'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Print the predicted value for each image'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "'-o'", ",", "\n", "help", "=", "'Path to output CSV file'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.None.test.main": [[24, 48], ["torch.device", "torch.load", "torch.load.eval", "torch.load.to", "auglib.augmentation.Augmentations", "auglib.dataset_loader.CSVDatasetWithName", "auglib.test.test_with_augmentation", "print", "preds.iterrows", "preds.to_csv", "torch.cuda.is_available", "print"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.test_with_augmentation"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "model", "=", "torch", ".", "load", "(", "args", ".", "model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "augs", "=", "Augmentations", "(", "**", "model", ".", "aug_params", ")", "\n", "dataset", "=", "CSVDatasetWithName", "(", "args", ".", "dataset_root", ",", "\n", "args", ".", "dataset_csv", ",", "\n", "'image_id'", ",", "\n", "'melanoma'", ",", "\n", "transform", "=", "augs", ".", "tf_transform", ",", "\n", "add_extension", "=", "'.jpg'", ")", "\n", "\n", "score", ",", "preds", "=", "test_with_augmentation", "(", "model", ",", "dataset", ",", "device", ",", "8", ",", "args", ".", "n", ")", "\n", "print", "(", "score", ")", "\n", "\n", "if", "args", ".", "print_predictions", ":", "\n", "        ", "for", "_", ",", "row", "in", "preds", ".", "iterrows", "(", ")", ":", "\n", "            ", "print", "(", "\"{},{}\"", ".", "format", "(", "row", "[", "'image'", "]", ",", "row", "[", "'score'", "]", ")", ")", "\n", "\n", "", "", "if", "args", ".", "output", ":", "\n", "        ", "preds", ".", "to_csv", "(", "args", ".", "output", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.AugmentOnTest.__init__": [[17, 20], ["None"], "methods", ["None"], ["parser", ".", "add_argument", "(", "'--print-predictions'", ",", "'-p'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Print the predicted value for each image'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "'-o'", ",", "\n", "help", "=", "'Path to output CSV file'", ")", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.AugmentOnTest.__len__": [[21, 23], ["len"], "methods", ["None"], ["return", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.AugmentOnTest.__getitem__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.test.test_with_augmentation": [[28, 90], ["model.eval", "torch.CrossEntropyLoss", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "meters.AverageMeter", "pandas.DataFrame", "enumerate", "predictions[].values.astype", "predictions[].values.astype", "sklearn.metrics.roc_auc_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.average_precision_score", "sklearn.metrics.confusion_matrix", "sklearn.metrics.confusion_matrix.ravel", "test.AugmentOnTest", "tqdm.tqdm", "inputs.squeeze.to", "labels.repeat.to", "meters.AverageMeter.update", "predictions.append.append", "numpy.where", "inputs.squeeze.dim", "inputs.squeeze.squeeze", "labels.repeat.repeat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "[].cpu().data.numpy", "nn.CrossEntropyLoss.", "criterion.item", "inputs.squeeze.size", "torchvision.utils.save_image", "labels.repeat.data[].item", "[].cpu().data.numpy.mean", "torchvision.utils.make_grid", "[].cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.meters.AverageMeter.update"], ["model", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "augs", "=", "Augmentations", "(", "**", "model", ".", "aug_params", ")", "\n", "dataset", "=", "CSVDatasetWithName", "(", "args", ".", "dataset_root", ",", "\n", "args", ".", "dataset_csv", ",", "\n", "'image_id'", ",", "\n", "'melanoma'", ",", "\n", "transform", "=", "augs", ".", "tf_transform", ",", "\n", "add_extension", "=", "'.jpg'", ")", "\n", "\n", "score", ",", "preds", "=", "test_with_augmentation", "(", "model", ",", "dataset", ",", "device", ",", "8", ",", "args", ".", "n", ")", "\n", "print", "(", "score", ")", "\n", "\n", "if", "args", ".", "print_predictions", ":", "\n", "        ", "for", "_", ",", "row", "in", "preds", ".", "iterrows", "(", ")", ":", "\n", "            ", "print", "(", "\"{},{}\"", ".", "format", "(", "row", "[", "'image'", "]", ",", "row", "[", "'score'", "]", ")", ")", "\n", "\n", "", "", "if", "args", ".", "output", ":", "\n", "        ", "preds", ".", "to_csv", "(", "args", ".", "output", ",", "index", "=", "False", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "main", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.meters.AverageMeter.__init__": [[3, 5], ["meters.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.meters.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.meters.AverageMeter.reset": [[6, 11], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.meters.AverageMeter.update": [[12, 17], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.dataset_loader.CSVDataset.__init__": [[10, 45], ["pandas.read_csv", "list", "list.sort", "print", "dataset_loader.CSVDataset.class_to_idx.items", "dataset_loader.CSVDataset.data.sample", "dataset_loader.CSVDataset.data.reset_index", "type", "type", "dataset_loader.CSVDataset.data.reset_index", "dataset_loader.CSVDataset.data[].unique", "dict", "print", "range", "len", "len", "dataset_loader.CSVDataset.data[].value_counts", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "csv_file", ",", "image_field", ",", "target_field", ",", "\n", "loader", "=", "default_loader", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "add_extension", "=", "None", ",", "\n", "limit", "=", "None", ",", "random_subset_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "image_field", "=", "image_field", "\n", "self", ".", "target_field", "=", "target_field", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "add_extension", "=", "add_extension", "\n", "\n", "self", ".", "data", "=", "pd", ".", "read_csv", "(", "csv_file", ")", "\n", "\n", "if", "random_subset_size", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", ".", "sample", "(", "n", "=", "random_subset_size", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "reset_index", "(", ")", "\n", "\n", "", "if", "type", "(", "limit", ")", "==", "int", ":", "\n", "            ", "limit", "=", "(", "0", ",", "limit", ")", "\n", "", "if", "type", "(", "limit", ")", "==", "tuple", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "limit", "[", "0", "]", ":", "limit", "[", "1", "]", "]", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "reset_index", "(", ")", "\n", "\n", "", "classes", "=", "list", "(", "self", ".", "data", "[", "self", ".", "target_field", "]", ".", "unique", "(", ")", ")", "\n", "classes", ".", "sort", "(", ")", "\n", "self", ".", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "self", ".", "classes", "=", "classes", "\n", "\n", "print", "(", "'Found {} images from {} classes.'", ".", "format", "(", "len", "(", "self", ".", "data", ")", ",", "\n", "len", "(", "classes", ")", ")", ")", "\n", "for", "class_name", ",", "idx", "in", "self", ".", "class_to_idx", ".", "items", "(", ")", ":", "\n", "            ", "n_images", "=", "dict", "(", "self", ".", "data", "[", "self", ".", "target_field", "]", ".", "value_counts", "(", ")", ")", "\n", "print", "(", "\"    Class '{}' ({}): {} images.\"", ".", "format", "(", "\n", "class_name", ",", "idx", ",", "n_images", "[", "class_name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.dataset_loader.CSVDataset.__getitem__": [[46, 59], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset_loader.CSVDataset.loader", "dataset_loader.CSVDataset.transform", "dataset_loader.CSVDataset.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "data", ".", "loc", "[", "index", ",", "self", ".", "image_field", "]", ")", "\n", "if", "self", ".", "add_extension", ":", "\n", "            ", "path", "=", "path", "+", "self", ".", "add_extension", "\n", "", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "target", "=", "self", ".", "class_to_idx", "[", "self", ".", "data", ".", "loc", "[", "index", ",", "self", ".", "target_field", "]", "]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.dataset_loader.CSVDataset.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.dataset_loader.CSVDatasetWithName.__getitem__": [[68, 78], ["dataset_loader.CSVDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.auglib.dataset_loader.CSVDatasetWithName.__getitem__"], ["def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            tuple(tuple(PIL image, int), str): a tuple\n            containing another tuple with an image and\n            the label, and a string representing the\n            name of the image.\n        \"\"\"", "\n", "name", "=", "self", ".", "data", ".", "loc", "[", "i", ",", "self", ".", "image_field", "]", "\n", "return", "super", "(", ")", ".", "__getitem__", "(", "i", ")", ",", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.inception_crop.InceptionCrop.__init__": [[29, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "resizes", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "resizes", "=", "resizes", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.inception_crop.InceptionCrop.__call__": [[33, 35], ["inception_crop._inception_crop"], "methods", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.inception_crop._inception_crop"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "_inception_crop", "(", "img", ",", "self", ".", "size", ",", "self", ".", "resizes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.inception_crop._inception_crop": [[5, 26], ["torchvision.transforms.Resize", "resized_img.crop", "resized_img.crop", "resized_img.crop", "resized_img.crop", "resized_img.crop", "resized_img.crop", "results.append", "results.append", "torchvision.transforms.Resize", "resized_square.transpose", "torchvision.transforms.TenCrop"], "function", ["None"], ["def", "_inception_crop", "(", "img", ",", "size", ",", "resizes", "=", "(", "256", ",", "288", ",", "320", ",", "352", ")", ")", ":", "\n", "    ", "resized", "=", "[", "Resize", "(", "size_", ")", "(", "img", ")", "for", "size_", "in", "resizes", "]", "\n", "results", "=", "[", "]", "\n", "for", "resized_img", "in", "resized", ":", "\n", "        ", "w", ",", "h", "=", "resized_img", ".", "size", "\n", "if", "w", "<", "h", ":", "\n", "            ", "t1", "=", "resized_img", ".", "crop", "(", "(", "0", ",", "0", ",", "w", ",", "w", ")", ")", "\n", "t2", "=", "resized_img", ".", "crop", "(", "(", "0", ",", "h", "/", "2", "-", "w", "/", "2", ",", "w", ",", "h", "/", "2", "+", "w", "/", "2", ")", ")", "\n", "t3", "=", "resized_img", ".", "crop", "(", "(", "0", ",", "h", "-", "w", ",", "w", ",", "h", ")", ")", "\n", "", "else", ":", "\n", "            ", "t1", "=", "resized_img", ".", "crop", "(", "(", "0", ",", "0", ",", "h", ",", "h", ")", ")", "\n", "t2", "=", "resized_img", ".", "crop", "(", "(", "w", "/", "2", "-", "h", "/", "2", ",", "0", ",", "w", "/", "2", "+", "h", "/", "2", ",", "h", ")", ")", "\n", "t3", "=", "resized_img", ".", "crop", "(", "(", "w", "-", "h", ",", "0", ",", "w", ",", "h", ")", ")", "\n", "\n", "", "for", "square", "in", "(", "t1", ",", "t2", ",", "t3", ")", ":", "\n", "            ", "resized_square", "=", "Resize", "(", "size", ")", "(", "square", ")", "\n", "results", ".", "append", "(", "resized_square", ")", "\n", "results", ".", "append", "(", "resized_square", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ")", "\n", "results", "+=", "TenCrop", "(", "size", ")", "(", "square", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.two_lesions._histogram_matching": [[9, 58], ["template.ravel.copy", "source.ravel.copy", "source.ravel.ravel", "template.ravel.ravel", "numpy.unique", "numpy.unique", "numpy.delete", "numpy.delete", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.interp", "interp_t_values[].reshape", "numpy.cumsum", "numpy.cumsum"], "function", ["None"], ["def", "_histogram_matching", "(", "source", ",", "template", ")", ":", "\n", "    ", "\"\"\"\n    Adjust the pixel values of a grayscale image such that its histogram\n    matches that of a target image\n\n    Arguments:\n    -----------\n        source: np.ndarray\n            Image to transform; the histogram is computed over the flattened\n            array\n        template: np.ndarray\n            Template image; can have different dimensions to source\n    Returns:\n    -----------\n        matched: np.ndarray\n            The transformed output image\n\n    Source: https://stackoverflow.com/a/33047048/604734 (Creative Commons)\n    \"\"\"", "\n", "\n", "template", "=", "template", ".", "copy", "(", ")", "\n", "source", "=", "source", ".", "copy", "(", ")", "\n", "template", "[", "template", ".", "mask", "]", "=", "0", "\n", "\n", "oldshape", "=", "source", ".", "shape", "\n", "source", "=", "source", ".", "ravel", "(", ")", "\n", "template", "=", "template", ".", "ravel", "(", ")", "\n", "\n", "# get the set of unique pixel values and their corresponding indices and", "\n", "# counts", "\n", "s_values", ",", "bin_idx", ",", "s_counts", "=", "np", ".", "unique", "(", "source", ",", "return_inverse", "=", "True", ",", "\n", "return_counts", "=", "True", ")", "\n", "t_values", ",", "t_counts", "=", "np", ".", "unique", "(", "template", ",", "return_counts", "=", "True", ")", "\n", "t_values", "=", "np", ".", "delete", "(", "t_values", ",", "0", ")", "\n", "t_counts", "=", "np", ".", "delete", "(", "t_counts", ",", "0", ")", "\n", "\n", "# take the cumsum of the counts and normalize by the number of pixels to", "\n", "# get the empirical cumulative distribution functions for the source and", "\n", "# template images (maps pixel value --> quantile)", "\n", "s_quantiles", "=", "np", ".", "cumsum", "(", "s_counts", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "s_quantiles", "/=", "s_quantiles", "[", "-", "1", "]", "\n", "t_quantiles", "=", "np", ".", "cumsum", "(", "t_counts", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "t_quantiles", "/=", "t_quantiles", "[", "-", "1", "]", "\n", "\n", "# interpolate linearly to find the pixel values in the template image", "\n", "# that correspond most closely to the quantiles in the source image", "\n", "interp_t_values", "=", "np", ".", "interp", "(", "s_quantiles", ",", "t_quantiles", ",", "t_values", ")", "\n", "\n", "return", "interp_t_values", "[", "bin_idx", "]", ".", "reshape", "(", "oldshape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.two_lesions.mix_lesions": [[60, 125], ["range", "random.randint", "skimage.transform.rotate().astype", "skimage.transform.rotate().astype", "scipy.ndimage.center_of_mass", "scipy.ndimage.center_of_mass", "skimage.transform.SimilarityTransform", "skimage.transform.warp().astype", "skimage.transform.warp().astype", "scipy.ndimage.center_of_mass", "numpy.zeros", "skimage.transform.rotate().astype", "skimage.transform.SimilarityTransform", "skimage.transform.warp().astype", "numpy.where", "numpy.argwhere", "np.argwhere.min", "numpy.dstack", "skimage.filters.gaussian.astype", "skimage.filters.gaussian", "numpy.copy", "numpy.where", "numpy.ma.array", "two_lesions._histogram_matching", "numpy.logical_and", "np.argwhere.max", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.warp", "skimage.transform.warp", "skimage.transform.rotate", "skimage.transform.warp", "random.randint"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.two_lesions._histogram_matching"], ["", "def", "mix_lesions", "(", "lesion_bg", ",", "lesion_fg", ",", "mask_bg", ",", "mask_fg", ",", "gauss_sigma", "=", "0", ")", ":", "\n", "    ", "height", ",", "width", "=", "lesion_bg", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# Histogram matching", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "lesion_bg_masked", "=", "ma", ".", "array", "(", "lesion_bg", "[", "...", ",", "i", "]", ",", "mask", "=", "~", "mask_bg", ")", "\n", "lesion_fg", "[", "...", ",", "i", "]", "=", "_histogram_matching", "(", "lesion_fg", "[", "...", ",", "i", "]", ",", "\n", "lesion_bg_masked", ")", "\n", "\n", "", "rotation", "=", "randint", "(", "0", ",", "90", ")", "\n", "lesion_fg", "=", "rotate", "(", "lesion_fg", ",", "rotation", ",", "mode", "=", "'reflect'", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "mask_fg", "=", "rotate", "(", "mask_fg", ",", "rotation", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "cm_fg", "=", "center_of_mass", "(", "mask_fg", ")", "\n", "cm_bg", "=", "center_of_mass", "(", "mask_bg", ")", "\n", "\n", "tf_", "=", "SimilarityTransform", "(", "\n", "scale", "=", "1", ",", "rotation", "=", "0", ",", "\n", "translation", "=", "(", "cm_fg", "[", "1", "]", "-", "cm_bg", "[", "1", "]", ",", "cm_fg", "[", "0", "]", "-", "cm_bg", "[", "0", "]", ")", ")", "\n", "\n", "lesion_fg", "=", "warp", "(", "lesion_fg", ",", "tf_", ",", "mode", "=", "'constant'", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "mask_fg", "=", "warp", "(", "mask_fg", ",", "tf_", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "cm_fg", "=", "center_of_mass", "(", "mask_fg", ")", "\n", "\n", "# Cut mask", "\n", "cut_mask", "=", "np", ".", "zeros", "(", "mask_fg", ".", "shape", ")", "\n", "cut_mask", "[", "cut_mask", ".", "shape", "[", "0", "]", "//", "2", ":", ",", ":", "]", "=", "255", "\n", "cut_mask", "=", "rotate", "(", "cut_mask", ",", "\n", "randint", "(", "0", ",", "90", ")", ",", "\n", "mode", "=", "'reflect'", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "tf_cm", "=", "SimilarityTransform", "(", "\n", "scale", "=", "1", ",", "\n", "rotation", "=", "0", ",", "\n", "translation", "=", "(", "width", "//", "2", "-", "cm_bg", "[", "1", "]", ",", "height", "//", "2", "-", "cm_bg", "[", "0", "]", ")", ")", "\n", "cut_mask", "=", "warp", "(", "cut_mask", ",", "tf_cm", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "mask_fg", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "mask_fg", ",", "cut_mask", ")", ",", "255", ",", "0", ")", "\n", "\n", "# Calculate mask bounding box", "\n", "coords", "=", "np", ".", "argwhere", "(", "mask_fg", "==", "255", ")", "\n", "y0", ",", "x0", "=", "coords", ".", "min", "(", "axis", "=", "0", ")", "\n", "y1", ",", "x1", "=", "coords", ".", "max", "(", "axis", "=", "0", ")", "+", "1", "\n", "\n", "# Convert mask to 3 channels", "\n", "mask_fg", "=", "np", ".", "dstack", "(", "(", "mask_fg", ",", "mask_fg", ",", "mask_fg", ")", ")", "\n", "# Convert it to float", "\n", "mask_fg", "=", "mask_fg", ".", "astype", "(", "'float'", ")", "\n", "# And normalize it to 0.0~1.0", "\n", "mask_fg", "*=", "(", "1.0", "/", "255.0", ")", "\n", "\n", "# Apply Gaussian Blur to the mask", "\n", "mask_fg", "=", "gaussian", "(", "mask_fg", ",", "sigma", "=", "gauss_sigma", ",", "multichannel", "=", "True", ",", "\n", "preserve_range", "=", "True", ")", "\n", "\n", "out", "=", "np", ".", "copy", "(", "lesion_bg", ")", "\n", "\n", "out_", "=", "(", "lesion_bg", "*", "(", "1.0", "-", "mask_fg", ")", "+", "lesion_fg", "*", "mask_fg", ")", ".", "astype", "(", "'uint8'", ")", "\n", "out", "=", "np", ".", "where", "(", "mask_fg", "==", "0", ",", "lesion_bg", ",", "out_", ")", "\n", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.RandomErasing.__init__": [[39, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.RandomErasing.__call__": [[45, 68], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "math.sqrt", "math.sqrt", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "shape", "[", "1", "]", "and", "h", "<", "img", ".", "shape", "[", "0", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "0", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "1", "]", "-", "w", ")", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "                    ", "img", "[", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", ",", ":", "]", "=", "np", ".", "random", ".", "rand", "(", "h", ",", "w", ",", "3", ")", "*", "255.", "\n", "", "else", ":", "\n", "                    ", "img", "[", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", ",", "0", "]", "=", "np", ".", "random", ".", "rand", "(", "h", ",", "w", ",", "1", ")", "*", "255.", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations.__init__": [[71, 131], ["imgaug.augmenters.Affine", "imgaug.augmenters.PiecewiseAffine", "tf_list.append", "tf_list.append", "tf_list.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "augmentations.Augmentations._get_crop_transform", "augmentations.Augmentations._get_crop_transform", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.Resize", "numpy.array", "augmentations.RandomErasing", "PIL.Image.fromarray", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "imgaug.augmenters.Affine.augment_image", "imgaug.augmenters.PiecewiseAffine.augment_image", "tps.tps_warp.tps_warp"], "methods", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations._get_crop_transform", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations._get_crop_transform", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.tps_warp.tps_warp"], ["    ", "def", "__init__", "(", "self", ",", "**", "augs", ")", ":", "\n", "        ", "self", ".", "mean", "=", "augs", "[", "'mean'", "]", "\n", "self", ".", "std", "=", "augs", "[", "'std'", "]", "\n", "self", ".", "size", "=", "augs", "[", "'size'", "]", "\n", "\n", "tf_list", "=", "[", "]", "\n", "\n", "if", "not", "augs", "[", "'scale'", "]", ":", "\n", "            ", "augs", "[", "'scale'", "]", "=", "1.0", "\n", "\n", "", "affine", "=", "iaa", ".", "Affine", "(", "\n", "rotate", "=", "(", "-", "augs", "[", "'rotation'", "]", ",", "augs", "[", "'rotation'", "]", ")", ",", "\n", "shear", "=", "(", "-", "augs", "[", "'shear'", "]", ",", "augs", "[", "'shear'", "]", ")", ",", "\n", "scale", "=", "(", "{", "'x'", ":", "augs", "[", "'scale'", "]", ",", "'y'", ":", "augs", "[", "'scale'", "]", "}", ")", ",", "\n", "mode", "=", "'symmetric'", ")", "\n", "\n", "piecewise_affine", "=", "iaa", ".", "PiecewiseAffine", "(", "\n", "scale", "=", "(", "0.0", ",", "0.1", ")", ",", "nb_rows", "=", "4", ",", "nb_cols", "=", "4", ",", "\n", "mode", "=", "'symmetric'", ")", "\n", "\n", "if", "augs", "[", "'random_crop'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "RandomResizedCrop", "(", "\n", "augs", "[", "'size'", "]", ",", "scale", "=", "(", "0.4", ",", "1.0", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "augs", "[", "'size'", "]", ",", "augs", "[", "'size'", "]", ")", ")", ")", "\n", "", "tf_list", ".", "append", "(", "lambda", "x", ":", "np", ".", "array", "(", "x", ")", ")", "\n", "if", "augs", "[", "'random_erasing'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "RandomErasing", "(", "sh", "=", "0.3", ")", ")", "\n", "", "if", "augs", "[", "'rotation'", "]", "or", "augs", "[", "'shear'", "]", "or", "augs", "[", "'scale'", "]", "!=", "1.0", ":", "\n", "            ", "tf_list", ".", "append", "(", "lambda", "x", ":", "affine", ".", "augment_image", "(", "x", ")", ")", "\n", "", "if", "augs", "[", "'piecewise_affine'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "lambda", "x", ":", "piecewise_affine", ".", "augment_image", "(", "x", ")", ")", "\n", "", "if", "augs", "[", "'tps'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "lambda", "x", ":", "tps_warp", "(", "x", ",", "4", ",", "0.1", ")", ")", "\n", "", "tf_list", ".", "append", "(", "lambda", "x", ":", "PIL", ".", "Image", ".", "fromarray", "(", "x", ")", ")", "\n", "if", "augs", "[", "'hflip'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "if", "augs", "[", "'vflip'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "RandomVerticalFlip", "(", ")", ")", "\n", "", "if", "(", "augs", "[", "'color_saturation'", "]", "or", "augs", "[", "'color_contrast'", "]", "\n", "or", "augs", "[", "'color_brightness'", "]", "or", "augs", "[", "'color_hue'", "]", ")", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "augs", "[", "'color_brightness'", "]", ",", "\n", "contrast", "=", "augs", "[", "'color_contrast'", "]", ",", "\n", "saturation", "=", "augs", "[", "'color_saturation'", "]", ",", "\n", "hue", "=", "augs", "[", "'color_hue'", "]", ")", ")", "\n", "\n", "", "tf_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "self", ".", "tf_augment", "=", "transforms", ".", "Compose", "(", "tf_list", ")", "\n", "self", ".", "tf_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "self", ".", "tf_augment", ",", "\n", "transforms", ".", "Normalize", "(", "augs", "[", "'mean'", "]", ",", "augs", "[", "'std'", "]", ")", "\n", "]", ")", "\n", "self", ".", "no_augmentation", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "augs", "[", "'size'", "]", ",", "augs", "[", "'size'", "]", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "augs", "[", "'mean'", "]", ",", "augs", "[", "'std'", "]", ")", "\n", "]", ")", "\n", "self", ".", "ten_crop", "=", "self", ".", "_get_crop_transform", "(", "'ten'", ")", "\n", "self", ".", "inception_crop", "=", "self", ".", "_get_crop_transform", "(", "'inception'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations.seed": [[132, 136], ["imgaug.seed", "numpy.random.seed", "random.seed"], "methods", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations.seed", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations.seed", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations.seed"], ["", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "ia", ".", "seed", "(", "seed", "+", "1", "%", "2", "**", "32", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "1", "%", "2", "**", "32", ")", "\n", "random", ".", "seed", "(", "seed", "+", "1", "%", "2", "**", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations._get_crop_transform": [[137, 157], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "inception_crop.InceptionCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Lambda", "torchvision.transforms.Resize", "torchvision.transforms.TenCrop", "tuple", "range", "torch.stack", "torchvision.transforms.Compose."], "methods", ["None"], ["", "def", "_get_crop_transform", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "==", "'ten'", ":", "\n", "            ", "crop_tf", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "size", "+", "32", ",", "self", ".", "size", "+", "32", ")", ")", ",", "\n", "transforms", ".", "TenCrop", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ")", "\n", "]", ")", "\n", "", "if", "method", "==", "'inception'", ":", "\n", "            ", "crop_tf", "=", "InceptionCrop", "(", "\n", "self", ".", "size", ",", "\n", "resizes", "=", "tuple", "(", "range", "(", "self", ".", "size", "+", "32", ",", "self", ".", "size", "+", "129", ",", "32", ")", ")", "\n", ")", "\n", "", "after_crop", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", ",", "\n", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "crop_tf", ",", "\n", "transforms", ".", "Lambda", "(", "\n", "lambda", "crops", ":", "torch", ".", "stack", "(", "\n", "[", "after_crop", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.set_seeds": [[15, 24], ["imgaug.seed", "numpy.random.seed", "random.seed", "torch.initial_seed"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations.seed", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations.seed", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.augmentation.augmentations.Augmentations.seed"], ["def", "set_seeds", "(", "worker_id", ")", ":", "\n", "    ", "\"\"\"\n    Set random seeds. Used for setting different seeds for each\n    worker created by DataLoader.\n    \"\"\"", "\n", "seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "2", "**", "31", "\n", "ia", ".", "seed", "(", "seed", "+", "1", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "2", ")", "\n", "random", ".", "seed", "(", "seed", "+", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.tps_warp._get_regular_grid": [[6, 12], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "numpy.dstack"], "function", ["None"], ["def", "_get_regular_grid", "(", "image", ",", "points_per_dim", ")", ":", "\n", "    ", "nrows", ",", "ncols", "=", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", "\n", "rows", "=", "np", ".", "linspace", "(", "0", ",", "nrows", ",", "points_per_dim", ")", "\n", "cols", "=", "np", ".", "linspace", "(", "0", ",", "ncols", ",", "points_per_dim", ")", "\n", "rows", ",", "cols", "=", "np", ".", "meshgrid", "(", "rows", ",", "cols", ")", "\n", "return", "np", ".", "dstack", "(", "[", "cols", ".", "flat", ",", "rows", ".", "flat", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.tps_warp._generate_random_vectors": [[14, 17], ["numpy.random.uniform"], "function", ["None"], ["", "def", "_generate_random_vectors", "(", "image", ",", "src_points", ",", "scale", ")", ":", "\n", "    ", "dst_pts", "=", "src_points", "+", "np", ".", "random", ".", "uniform", "(", "-", "scale", ",", "scale", ",", "src_points", ".", "shape", ")", "\n", "return", "dst_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.tps_warp._thin_plate_spline_warp": [[19, 30], ["warp_image.warp_images", "numpy.moveaxis", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.moveaxis", "numpy.array"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image.warp_images"], ["", "def", "_thin_plate_spline_warp", "(", "image", ",", "src_points", ",", "dst_points", ",", "keep_corners", "=", "True", ")", ":", "\n", "    ", "width", ",", "height", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "if", "keep_corners", ":", "\n", "        ", "corner_points", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "width", "]", ",", "[", "height", ",", "0", "]", ",", "[", "height", ",", "width", "]", "]", ")", "\n", "src_points", "=", "np", ".", "concatenate", "(", "(", "src_points", ",", "corner_points", ")", ")", "\n", "dst_points", "=", "np", ".", "concatenate", "(", "(", "dst_points", ",", "corner_points", ")", ")", "\n", "", "out", "=", "warp_images", "(", "src_points", ",", "dst_points", ",", "\n", "np", ".", "moveaxis", "(", "image", ",", "2", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ",", "width", "-", "1", ",", "height", "-", "1", ")", ")", "\n", "return", "np", ".", "moveaxis", "(", "np", ".", "array", "(", "out", ")", ",", "0", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.tps_warp.tps_warp": [[32, 38], ["tps_warp._get_regular_grid", "tps_warp._generate_random_vectors", "tps_warp._thin_plate_spline_warp"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.tps_warp._get_regular_grid", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.tps_warp._generate_random_vectors", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.tps_warp._thin_plate_spline_warp"], ["", "def", "tps_warp", "(", "image", ",", "points_per_dim", ",", "scale", ")", ":", "\n", "    ", "width", ",", "height", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "src", "=", "_get_regular_grid", "(", "image", ",", "points_per_dim", "=", "points_per_dim", ")", "\n", "dst", "=", "_generate_random_vectors", "(", "image", ",", "src", ",", "scale", "=", "scale", "*", "width", ")", "\n", "out", "=", "_thin_plate_spline_warp", "(", "image", ",", "src", ",", "dst", ")", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image.warp_images": [[17, 39], ["warp_image._make_inverse_warp", "scipy.ndimage.map_coordinates", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._make_inverse_warp"], ["def", "warp_images", "(", "from_points", ",", "to_points", ",", "images", ",", "output_region", ",", "interpolation_order", "=", "1", ",", "approximate_grid", "=", "2", ")", ":", "\n", "    ", "\"\"\"Define a thin-plate-spline warping transform that warps from the from_points\n    to the to_points, and then warp the given images by that transform. This\n    transform is described in the paper: \"Principal Warps: Thin-Plate Splines and\n    the Decomposition of Deformations\" by F.L. Bookstein.\n\n    Parameters:\n        - from_points and to_points: Nx2 arrays containing N 2D landmark points.\n        - images: list of images to warp with the given warp transform.\n        - output_region: the (xmin, ymin, xmax, ymax) region of the output\n                image that should be produced. (Note: The region is inclusive, i.e.\n                xmin <= x <= xmax)\n        - interpolation_order: if 1, then use linear interpolation; if 0 then use\n                nearest-neighbor.\n        - approximate_grid: defining the warping transform is slow. If approximate_grid\n                is greater than 1, then the transform is defined on a grid 'approximate_grid'\n                times smaller than the output image region, and then the transform is\n                bilinearly interpolated to the larger region. This is fairly accurate\n                for values up to 10 or so.\n    \"\"\"", "\n", "transform", "=", "_make_inverse_warp", "(", "from_points", ",", "to_points", ",", "output_region", ",", "approximate_grid", ")", "\n", "return", "[", "ndimage", ".", "map_coordinates", "(", "numpy", ".", "asarray", "(", "image", ")", ",", "transform", ",", "order", "=", "interpolation_order", ",", "mode", "=", "'reflect'", ")", "for", "image", "in", "images", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._make_inverse_warp": [[40, 74], ["warp_image._make_warp", "numpy.modf", "numpy.modf", "x_indices.astype.astype", "y_indices.astype.astype", "float", "float"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._make_warp"], ["", "def", "_make_inverse_warp", "(", "from_points", ",", "to_points", ",", "output_region", ",", "approximate_grid", ")", ":", "\n", "    ", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", "=", "output_region", "\n", "if", "approximate_grid", "is", "None", ":", "approximate_grid", "=", "1", "\n", "x_steps", "=", "(", "x_max", "-", "x_min", ")", "/", "approximate_grid", "\n", "y_steps", "=", "(", "y_max", "-", "y_min", ")", "/", "approximate_grid", "\n", "x", ",", "y", "=", "numpy", ".", "mgrid", "[", "x_min", ":", "x_max", ":", "x_steps", "*", "1j", ",", "y_min", ":", "y_max", ":", "y_steps", "*", "1j", "]", "\n", "\n", "# make the reverse transform warping from the to_points to the from_points, because we", "\n", "# do image interpolation in this reverse fashion", "\n", "transform", "=", "_make_warp", "(", "to_points", ",", "from_points", ",", "x", ",", "y", ")", "\n", "\n", "if", "approximate_grid", "!=", "1", ":", "\n", "# linearly interpolate the zoomed transform grid", "\n", "        ", "new_x", ",", "new_y", "=", "numpy", ".", "mgrid", "[", "x_min", ":", "x_max", "+", "1", ",", "y_min", ":", "y_max", "+", "1", "]", "\n", "x_fracs", ",", "x_indices", "=", "numpy", ".", "modf", "(", "(", "x_steps", "-", "1", ")", "*", "(", "new_x", "-", "x_min", ")", "/", "float", "(", "x_max", "-", "x_min", ")", ")", "\n", "y_fracs", ",", "y_indices", "=", "numpy", ".", "modf", "(", "(", "y_steps", "-", "1", ")", "*", "(", "new_y", "-", "y_min", ")", "/", "float", "(", "y_max", "-", "y_min", ")", ")", "\n", "x_indices", "=", "x_indices", ".", "astype", "(", "int", ")", "\n", "y_indices", "=", "y_indices", ".", "astype", "(", "int", ")", "\n", "x1", "=", "1", "-", "x_fracs", "\n", "y1", "=", "1", "-", "y_fracs", "\n", "ix1", "=", "(", "x_indices", "+", "1", ")", ".", "clip", "(", "0", ",", "x_steps", "-", "1", ")", ".", "astype", "(", "int", ")", "\n", "iy1", "=", "(", "y_indices", "+", "1", ")", ".", "clip", "(", "0", ",", "y_steps", "-", "1", ")", ".", "astype", "(", "int", ")", "\n", "t00", "=", "transform", "[", "0", "]", "[", "(", "x_indices", ",", "y_indices", ")", "]", "\n", "t01", "=", "transform", "[", "0", "]", "[", "(", "x_indices", ",", "iy1", ")", "]", "\n", "t10", "=", "transform", "[", "0", "]", "[", "(", "ix1", ",", "y_indices", ")", "]", "\n", "t11", "=", "transform", "[", "0", "]", "[", "(", "ix1", ",", "iy1", ")", "]", "\n", "transform_x", "=", "t00", "*", "x1", "*", "y1", "+", "t01", "*", "x1", "*", "y_fracs", "+", "t10", "*", "x_fracs", "*", "y1", "+", "t11", "*", "x_fracs", "*", "y_fracs", "\n", "t00", "=", "transform", "[", "1", "]", "[", "(", "x_indices", ",", "y_indices", ")", "]", "\n", "t01", "=", "transform", "[", "1", "]", "[", "(", "x_indices", ",", "iy1", ")", "]", "\n", "t10", "=", "transform", "[", "1", "]", "[", "(", "ix1", ",", "y_indices", ")", "]", "\n", "t11", "=", "transform", "[", "1", "]", "[", "(", "ix1", ",", "iy1", ")", "]", "\n", "transform_y", "=", "t00", "*", "x1", "*", "y1", "+", "t01", "*", "x1", "*", "y_fracs", "+", "t10", "*", "x_fracs", "*", "y1", "+", "t11", "*", "x_fracs", "*", "y_fracs", "\n", "transform", "=", "[", "transform_x", ",", "transform_y", "]", "\n", "", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._U": [[76, 78], ["numpy.where", "numpy.log"], "function", ["None"], ["def", "_U", "(", "x", ")", ":", "\n", "    ", "return", "(", "x", "**", "2", ")", "*", "numpy", ".", "where", "(", "x", "<", "_small", ",", "0", ",", "numpy", ".", "log", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._interpoint_distances": [[79, 83], ["numpy.subtract.outer", "numpy.subtract.outer", "numpy.sqrt"], "function", ["None"], ["", "def", "_interpoint_distances", "(", "points", ")", ":", "\n", "    ", "xd", "=", "numpy", ".", "subtract", ".", "outer", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "0", "]", ")", "\n", "yd", "=", "numpy", ".", "subtract", ".", "outer", "(", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "1", "]", ")", "\n", "return", "numpy", ".", "sqrt", "(", "xd", "**", "2", "+", "yd", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._make_L_matrix": [[84, 92], ["len", "warp_image._U", "numpy.ones", "numpy.zeros", "numpy.asarray", "warp_image._interpoint_distances", "numpy.bmat", "numpy.ones.transpose"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._U", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._interpoint_distances"], ["", "def", "_make_L_matrix", "(", "points", ")", ":", "\n", "    ", "n", "=", "len", "(", "points", ")", "\n", "K", "=", "_U", "(", "_interpoint_distances", "(", "points", ")", ")", "\n", "P", "=", "numpy", ".", "ones", "(", "(", "n", ",", "3", ")", ")", "\n", "P", "[", ":", ",", "1", ":", "]", "=", "points", "\n", "O", "=", "numpy", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "L", "=", "numpy", ".", "asarray", "(", "numpy", ".", "bmat", "(", "[", "[", "K", ",", "P", "]", ",", "[", "P", ".", "transpose", "(", ")", ",", "O", "]", "]", ")", ")", "\n", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._calculate_f": [[93, 103], ["numpy.zeros", "zip", "warp_image._U", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._U"], ["", "def", "_calculate_f", "(", "coeffs", ",", "points", ",", "x", ",", "y", ")", ":", "\n", "    ", "w", "=", "coeffs", "[", ":", "-", "3", "]", "\n", "a1", ",", "ax", ",", "ay", "=", "coeffs", "[", "-", "3", ":", "]", "\n", "# The following uses too much RAM:", "\n", "# distances = _U(numpy.sqrt((points[:,0]-x[...,numpy.newaxis])**2 + (points[:,1]-y[...,numpy.newaxis])**2))", "\n", "# summation = (w * distances).sum(axis=-1)", "\n", "summation", "=", "numpy", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "for", "wi", ",", "Pi", "in", "zip", "(", "w", ",", "points", ")", ":", "\n", "        ", "summation", "+=", "wi", "*", "_U", "(", "numpy", ".", "sqrt", "(", "(", "x", "-", "Pi", "[", "0", "]", ")", "**", "2", "+", "(", "y", "-", "Pi", "[", "1", "]", ")", "**", "2", ")", ")", "\n", "", "return", "a1", "+", "ax", "*", "x", "+", "ay", "*", "y", "+", "summation", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._make_warp": [[104, 115], ["numpy.seterr", "warp_image._make_L_matrix", "numpy.resize", "numpy.dot", "warp_image._calculate_f", "warp_image._calculate_f", "numpy.seterr", "numpy.asarray", "numpy.asarray", "numpy.linalg.pinv", "len"], "function", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._make_L_matrix", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._calculate_f", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.tps.warp_image._calculate_f"], ["", "def", "_make_warp", "(", "from_points", ",", "to_points", ",", "x_vals", ",", "y_vals", ")", ":", "\n", "    ", "from_points", ",", "to_points", "=", "numpy", ".", "asarray", "(", "from_points", ")", ",", "numpy", ".", "asarray", "(", "to_points", ")", "\n", "err", "=", "numpy", ".", "seterr", "(", "divide", "=", "'ignore'", ")", "\n", "L", "=", "_make_L_matrix", "(", "from_points", ")", "\n", "V", "=", "numpy", ".", "resize", "(", "to_points", ",", "(", "len", "(", "to_points", ")", "+", "3", ",", "2", ")", ")", "\n", "V", "[", "-", "3", ":", ",", ":", "]", "=", "0", "\n", "coeffs", "=", "numpy", ".", "dot", "(", "numpy", ".", "linalg", ".", "pinv", "(", "L", ")", ",", "V", ")", "\n", "x_warp", "=", "_calculate_f", "(", "coeffs", "[", ":", ",", "0", "]", ",", "from_points", ",", "x_vals", ",", "y_vals", ")", "\n", "y_warp", "=", "_calculate_f", "(", "coeffs", "[", ":", ",", "1", "]", ",", "from_points", ",", "x_vals", ",", "y_vals", ")", "\n", "numpy", ".", "seterr", "(", "**", "err", ")", "\n", "return", "[", "x_warp", ",", "y_warp", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.InvertedResidual.__init__": [[29, 60], ["torch.Module.__init__", "round", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.MobileNetV2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "round", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.InvertedResidual.forward": [[62, 67], ["MobileNetV2.InvertedResidual.conv", "MobileNetV2.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.MobileNetV2.__init__": [[70, 112], ["torch.Module.__init__", "int", "MobileNetV2.MobileNetV2.features.append", "torch.Sequential", "torch.Sequential", "MobileNetV2.MobileNetV2._initialize_weights", "int", "MobileNetV2.conv_bn", "int", "range", "MobileNetV2.conv_1x1_bn", "torch.Dropout", "torch.Linear", "MobileNetV2.MobileNetV2.features.append", "MobileNetV2.MobileNetV2.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.MobileNetV2.__init__", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.conv_bn", "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.conv_1x1_bn"], ["    ", "def", "__init__", "(", "self", ",", "n_class", "=", "1000", ",", "input_size", "=", "224", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "n_class", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.MobileNetV2.forward": [[113, 118], ["MobileNetV2.MobileNetV2.features", "MobileNetV2.MobileNetV2.mean().mean", "MobileNetV2.MobileNetV2.classifier", "MobileNetV2.MobileNetV2.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.MobileNetV2._initialize_weights": [[119, 133], ["MobileNetV2.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.conv_bn": [[12, 17], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.learningtitans_cvpr-skin-solo-ensemble.models.MobileNetV2.conv_1x1_bn": [[20, 25], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]]}