{"home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.flatten_dict": [[19, 29], ["list", "d.items", "type", "generator.flatten_dict", "new_d.update"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.flatten_dict"], ["def", "flatten_dict", "(", "d", ",", "prefix", "=", "None", ",", "seperator", "=", "'.'", ",", "value_map", "=", "lambda", "x", ":", "x", ")", ":", "\n", "    ", "new_d", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "list", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "        ", "new_key", "=", "key", "if", "prefix", "is", "None", "else", "prefix", "+", "seperator", "+", "key", "\n", "if", "type", "(", "value", ")", "==", "dict", ":", "\n", "            ", "flattened", "=", "flatten_dict", "(", "value", ",", "new_key", ",", "seperator", ")", "\n", "new_d", ".", "update", "(", "flattened", ")", "\n", "", "else", ":", "\n", "            ", "new_d", "[", "new_key", "]", "=", "value", "\n", "", "", "return", "new_d", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.substitute_hyperparams": [[31, 49], ["from_syntactic_sugar", "copy.deepcopy", "get_args", "update_dict_exclusive", "print", "pprint.pprint", "len", "expand_three_phase"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.from_syntactic_sugar", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_args", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_three_phase"], ["", "def", "substitute_hyperparams", "(", "hyperparams", ",", "config", "=", "None", ",", "suppress_warning", "=", "True", ")", ":", "\n", "    ", "hyperparams", "=", "from_syntactic_sugar", "(", "copy", ".", "deepcopy", "(", "hyperparams", ")", ")", "\n", "\n", "if", "config", "is", "None", ":", "\n", "        ", "combined_args", ",", "excluded_args", ",", "_", "=", "get_args", "(", "[", "]", ",", "hyperparams", ")", "\n", "", "else", ":", "\n", "# Convert from three phase syntactic sugar format", "\n", "        ", "for", "three_phase_args", "in", "[", "'dataset_args'", ",", "'ptracker_args'", ",", "'task_args'", "]", ":", "\n", "            ", "if", "three_phase_args", "in", "hyperparams", ":", "\n", "                ", "hyperparams", "[", "three_phase_args", "]", "=", "expand_three_phase", "(", "hyperparams", "[", "three_phase_args", "]", ")", "\n", "\n", "", "", "combined_args", ",", "excluded_args", "=", "update_dict_exclusive", "(", "config", ",", "hyperparams", ")", "\n", "\n", "", "if", "not", "suppress_warning", "and", "len", "(", "excluded_args", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"\"\"excluded\"\"\"", ")", "\n", "pprint", "(", "excluded_args", ")", "\n", "\n", "", "return", "combined_args", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.unpack": [[51, 60], ["comb.items", "new_comb.update", "type", "type", "zip"], "function", ["None"], ["", "def", "unpack", "(", "comb", ")", ":", "\n", "    ", "new_comb", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "comb", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "key", ")", "is", "tuple", "and", "type", "(", "value", ")", "is", "tuple", ":", "\n", "            ", "unpacked_dict", "=", "{", "a", "[", "0", "]", ":", "a", "[", "1", "]", "for", "a", "in", "zip", "(", "key", ",", "value", ")", "}", "\n", "new_comb", ".", "update", "(", "unpacked_dict", ")", "\n", "", "else", ":", "\n", "            ", "new_comb", "[", "key", "]", "=", "value", "\n", "", "", "return", "new_comb", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.hyperparameter_combinations": [[62, 79], ["zip", "all", "dict", "generator.unpack", "variables.items", "isinstance", "zip", "itertools.product"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.unpack"], ["", "def", "hyperparameter_combinations", "(", "variables", ")", ":", "\n", "    ", "'''\n    Generates all possible combinations of variables\n    :param variables: dictionary mapping variable names to a list of variable values that vary between experiments\n    :returns experiments: a list of dictionaries mapping variable names to singular variable values\n    '''", "\n", "# https://codereview.stackexchange.com/a/171189", "\n", "keys", ",", "values", "=", "zip", "(", "*", "variables", ".", "items", "(", ")", ")", "\n", "\n", "assert", "all", "(", "[", "isinstance", "(", "v", ",", "list", ")", "for", "v", "in", "values", "]", ")", ",", "\"All variable values should be contained in a list!\"", "+", "\" Put square parentheses, ie. '[' and ']', around the lonely value. \"", "\n", "\n", "combinations", "=", "[", "dict", "(", "zip", "(", "keys", ",", "v", ")", ")", "for", "v", "in", "itertools", ".", "product", "(", "*", "values", ")", "]", "\n", "\n", "unpacked_combinations", "=", "[", "unpack", "(", "comb", ")", "for", "comb", "in", "combinations", "]", "\n", "\n", "return", "unpacked_combinations", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.get_python_script": [[81, 86], ["None"], "function", ["None"], ["", "def", "get_python_script", "(", "exp_kwargs", "=", "{", "}", ")", ":", "\n", "    ", "script", "=", "'python src/main.py '", "\n", "for", "arg", "in", "exp_kwargs", ":", "\n", "        ", "script", "+=", "'--{} {} '", ".", "format", "(", "arg", ",", "exp_kwargs", "[", "arg", "]", ")", "\n", "", "return", "script", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.get_bash_script": [[88, 93], ["generator.get_python_script"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.get_python_script"], ["", "def", "get_bash_script", "(", "exp_kwargs", "=", "{", "}", ")", ":", "\n", "    ", "script", "=", "'export CUDA_VISIBLE_DEVICES=$1; \\n'", "\n", "exp_kwargs", "[", "'gpu'", "]", "=", "0", "\n", "script", "+=", "get_python_script", "(", "exp_kwargs", ")", "+", "' $2'", "\n", "return", "script", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.value_map": [[95, 97], ["int", "type"], "function", ["None"], ["", "def", "value_map", "(", "x", ")", ":", "\n", "    ", "return", "int", "(", "x", ")", "if", "type", "(", "x", ")", "==", "bool", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.generate_experiments": [[98, 192], ["len", "generator.hyperparameter_combinations", "enumerate", "zip", "variables.update", "generator.substitute_hyperparams", "compress_args", "name_template.replace().format", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "scripts.append", "script_paths.append", "configs.append", "config_paths.append", "generator.flatten_dict", "generator.flatten_dict", "os.path.abspath", "os.path.abspath", "os.path.abspath", "generator.get_python_script", "print", "os.makedirs", "os.makedirs", "os.makedirs", "name_template.replace", "generator.get_bash_script", "os.path.dirname", "os.path.dirname", "os.path.dirname", "open", "json.dump", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.hyperparameter_combinations", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.substitute_hyperparams", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.compress_args", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.flatten_dict", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.flatten_dict", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.get_python_script", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.get_bash_script"], ["", "def", "generate_experiments", "(", "name_template", ",", "\n", "variables", ",", "\n", "g_args", ",", "\n", "default_config", "=", "None", ",", "\n", "config_name", "=", "'config'", ",", "\n", "script_name", "=", "'script'", ",", "\n", "log_name", "=", "'log'", ",", "\n", "save", "=", "True", ")", ":", "\n", "\n", "    ", "global", "GPU_COUNTER", "#\u00a0used to evenly distribute jobs among the gpus (optional)", "\n", "ngpus", "=", "len", "(", "g_args", ".", "gpu", ")", "\n", "\n", "#\u00a0If dry run", "\n", "if", "g_args", ".", "dummy_run", ":", "\n", "        ", "variables", ".", "update", "(", "{", "\n", "'num_epochs'", ":", "[", "3", "]", ",", "\n", "'num_tasks_per_epoch'", ":", "[", "3", "]", ",", "\n", "'num_tasks_per_validation'", ":", "[", "3", "]", ",", "\n", "'num_tasks_per_testing'", ":", "[", "3", "]", "\n", "}", ")", "\n", "if", "(", "'model'", "in", "variables", "and", "variables", "[", "'model'", "]", "==", "'simpleshot'", ")", "or", "(", "default_config", "is", "not", "None", "and", "'model'", "in", "default_config", "and", "default_config", "[", "'model'", "]", "==", "'simpleshot'", ")", ":", "\n", "            ", "variables", "[", "'model_args.approx_train_mean'", "]", "=", "[", "True", "]", "\n", "\n", "", "", "scripts", "=", "[", "]", "\n", "configs", "=", "[", "]", "\n", "script_paths", "=", "[", "]", "\n", "config_paths", "=", "[", "]", "\n", "\n", "# Iterate over variable combinations", "\n", "combinations", "=", "hyperparameter_combinations", "(", "variables", ")", "\n", "\n", "for", "i_comb", ",", "hyperparams", "in", "enumerate", "(", "combinations", ")", ":", "\n", "\n", "# Generate full config", "\n", "        ", "full_config", "=", "substitute_hyperparams", "(", "hyperparams", ",", "default_config", ")", "\n", "\n", "# Generate a compressed version of config", "\n", "compressed_config", "=", "compress_args", "(", "full_config", ")", "\n", "\n", "# Flattened config for template name", "\n", "sperator", "=", "'_'", "\n", "flat_config", "=", "{", "\n", "**", "flatten_dict", "(", "full_config", ",", "seperator", "=", "sperator", ",", "value_map", "=", "value_map", ")", ",", "\n", "**", "flatten_dict", "(", "compressed_config", ",", "seperator", "=", "sperator", ",", "value_map", "=", "value_map", ")", "\n", "}", "\n", "\n", "# Assign experiment_name", "\n", "experiment_name", "=", "name_template", ".", "replace", "(", "'.'", ",", "'_'", ")", ".", "format", "(", "**", "flat_config", ")", "\n", "full_config", "[", "'experiment_name'", "]", "=", "compressed_config", "[", "'experiment_name'", "]", "=", "experiment_name", "\n", "\n", "# Setup paths", "\n", "experiment_path", "=", "os", ".", "path", ".", "join", "(", "g_args", ".", "results_folder", ",", "experiment_name", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "experiment_path", ",", "'configs'", ",", "'{}.json'", ".", "format", "(", "config_name", ")", ")", "\n", "script_path", "=", "os", ".", "path", ".", "join", "(", "experiment_path", ",", "'scripts'", ",", "'{}.sh'", ".", "format", "(", "script_name", ")", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "experiment_path", ",", "'logs'", ",", "'{}.txt'", ".", "format", "(", "log_name", ")", ")", "\n", "\n", "# Select gpu", "\n", "gpu", "=", "g_args", ".", "gpu", "[", "GPU_COUNTER", "%", "ngpus", "]", "\n", "GPU_COUNTER", "+=", "1", "\n", "\n", "# Run from .sh script file or directly using python", "\n", "if", "g_args", ".", "bash", ":", "\n", "            ", "config_path", "=", "os", ".", "path", ".", "abspath", "(", "config_path", ")", "\n", "script_path", "=", "os", ".", "path", ".", "abspath", "(", "script_path", ")", "\n", "output_path", "=", "os", ".", "path", ".", "abspath", "(", "output_path", ")", "\n", "script_content", "=", "get_bash_script", "(", "exp_kwargs", "=", "{", "'args_file'", ":", "config_path", ",", "'gpu'", ":", "gpu", "}", ")", "+", "'\\n'", "\n", "script_command", "=", "'bash {} {} '", ".", "format", "(", "script_path", ",", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "script_content", "=", "get_python_script", "(", "exp_kwargs", "=", "{", "'args_file'", ":", "config_path", ",", "'gpu'", ":", "gpu", "}", ")", "\n", "script_command", "=", "script_content", "\n", "\n", "# Save script content", "\n", "", "if", "save", ":", "\n", "            ", "if", "not", "g_args", ".", "no_log", ":", "script_command", "+=", "' &> '", "+", "output_path", "\n", "print", "(", "script_command", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "output_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "config_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "script_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "with", "open", "(", "config_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "compressed_config", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "", "with", "open", "(", "script_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "script_content", ")", "\n", "\n", "# Save scripts for reference", "\n", "", "", "scripts", ".", "append", "(", "script_command", ")", "\n", "script_paths", ".", "append", "(", "script_path", ")", "\n", "configs", ".", "append", "(", "compressed_config", ")", "\n", "config_paths", ".", "append", "(", "config_path", ")", "\n", "\n", "", "return", "zip", "(", "scripts", ",", "script_paths", ",", "configs", ",", "config_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.make_names": [[194, 206], ["names.append", "int", "int"], "function", ["None"], ["", "def", "make_names", "(", "settings", ",", "way", ",", "shot_half", "=", "True", ",", "query_half", "=", "True", ")", ":", "\n", "    ", "names", "=", "[", "]", "\n", "for", "setting", "in", "settings", ":", "\n", "        ", "min_k", ",", "max_k", ",", "minor", ",", "dist", ",", "t_min_k", ",", "t_max_k", ",", "t_minor", ",", "t_dist", "=", "setting", "\n", "name", "=", "\"\"", "\n", "if", "shot_half", ":", "\n", "            ", "name", "+=", "'{}-{}shot_{}{}'", ".", "format", "(", "min_k", ",", "max_k", ",", "dist", ",", "\"\"", "if", "minor", "is", "None", "else", "'_{}minor'", ".", "format", "(", "int", "(", "minor", "*", "way", ")", ")", ")", "\n", "", "if", "query_half", ":", "\n", "            ", "name", "+=", "'_{}-{}query_{}{}'", ".", "format", "(", "t_min_k", ",", "t_max_k", ",", "t_dist", ",", "\n", "\"\"", "if", "t_minor", "is", "None", "else", "'_{}minor'", ".", "format", "(", "int", "(", "t_minor", "*", "way", ")", ")", ")", "\n", "", "names", ".", "append", "(", "name", ")", "\n", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.fsl_imbalanced": [[209, 377], ["generator.make_names", "variables.update", "is_baseline", "variables.update", "generator.generate_experiments", "experiement_files.extend", "variables.update", "len", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.make_names", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.generate_experiments"], ["", "def", "fsl_imbalanced", "(", "g_args", ",", "models", "=", "[", "]", ",", "strategies", "=", "[", "]", ",", "seeds", "=", "[", "]", ",", "train_tasks", "=", "[", "]", ",", "test_tasks", "=", "[", "]", ",", "var_update", "=", "{", "}", ",", "save", "=", "True", ",", "\n", "expfolder", "=", "''", ",", "pretrained_backbone", "=", "None", ",", "slow_learning", "=", "False", ",", "dataset", "=", "'mini'", ",", "backbone", "=", "'Conv4'", ",", "\n", "template_prefix", "=", "'{dataset}/'", ")", ":", "\n", "\n", "    ", "n_way", "=", "5", "\n", "\n", "if", "slow_learning", ":", "\n", "        ", "train_setup", "=", "{", "\n", "'num_epochs'", ":", "[", "200", "]", ",", "\n", "'model_args.lr'", ":", "[", "0.001", "]", ",", "\n", "'model_args.lr_decay'", ":", "[", "1.0", "]", ",", "\n", "'model_args.lr_decay_step'", ":", "[", "200", "]", ",", "\n", "'num_tasks_per_epoch'", ":", "[", "2500", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "        ", "train_setup", "=", "{", "\n", "'num_epochs'", ":", "[", "200", "]", ",", "\n", "'model_args.lr'", ":", "[", "0.001", "]", ",", "\n", "'model_args.lr_decay'", ":", "[", "0.1", "]", ",", "\n", "'model_args.lr_decay_step'", ":", "[", "100", "]", ",", "\n", "'num_tasks_per_epoch'", ":", "[", "500", "]", ",", "\n", "}", "\n", "\n", "", "if", "pretrained_backbone", "is", "not", "None", ":", "\n", "        ", "train_setup", "=", "{", "\n", "'num_epochs'", ":", "[", "50", "]", ",", "\n", "'model_args.lr'", ":", "[", "0.0001", "]", ",", "\n", "'model_args.lr_decay'", ":", "[", "0.1", "]", ",", "\n", "'model_args.lr_decay_step'", ":", "[", "25", "]", ",", "\n", "}", "\n", "\n", "", "is_baseline", "=", "lambda", "x", ":", "x", "in", "[", "'baseline'", ",", "'baselinepp'", ",", "'knn'", "]", "\n", "\n", "experiement_files", "=", "[", "]", "\n", "for", "seed", "in", "seeds", ":", "\n", "        ", "for", "model", "in", "models", ":", "\n", "            ", "for", "train_task", "in", "train_tasks", ":", "\n", "                ", "train_name", "=", "make_names", "(", "[", "train_task", "]", ",", "n_way", ")", "[", "0", "]", "\n", "\n", "for", "strategy", "in", "strategies", ":", "\n", "\n", "                    ", "variables", "=", "{", "\n", "'results_folder'", ":", "[", "os", ".", "path", ".", "abspath", "(", "g_args", ".", "results_folder", ")", "]", ",", "\n", "'seed'", ":", "[", "seed", "]", ",", "\n", "'backbone'", ":", "[", "backbone", "]", ",", "\n", "'num_tasks_per_validation'", ":", "[", "200", "]", ",", "\n", "'num_tasks_per_testing'", ":", "[", "600", "]", ",", "\n", "'strategy'", ":", "[", "strategy", "]", ",", "\n", "'model'", ":", "[", "model", "]", ",", "\n", "'task'", ":", "[", "'fsl_imbalanced'", "]", ",", "\n", "'task_args.batch_size'", ":", "[", "1", "]", ",", "\n", "'task_args.num_classes'", ":", "[", "n_way", "]", ",", "\n", "'dataset'", ":", "[", "dataset", "]", ",", "\n", "'dataset_args.data_path'", ":", "[", "g_args", ".", "data_path", "]", ",", "\n", "'dataset_args.train.aug'", ":", "[", "True", "]", ",", "\n", "'ptracker_args.test.metrics'", ":", "[", "[", "'accuracy'", ",", "'loss'", ",", "'per_cls_stats'", "]", "]", ",", "\n", "'tqdm'", ":", "[", "False", "]", "\n", "}", "\n", "variables", ".", "update", "(", "train_setup", ")", "\n", "\n", "variables", "[", "(", "'task_args.min_num_supports'", ",", "\n", "'task_args.max_num_supports'", ",", "\n", "'task_args.num_minority'", ",", "\n", "'task_args.imbalance_distribution'", ",", "\n", "'task_args.min_num_targets'", ",", "\n", "'task_args.max_num_targets'", ",", "\n", "'task_args.num_minority_targets'", ",", "\n", "'task_args.imbalance_distribution_targets'", ")", "]", "=", "[", "train_task", "]", "\n", "\n", "if", "is_baseline", "(", "model", ")", ":", "\n", "                        ", "variables", ".", "update", "(", "{", "\n", "'no_val_loop'", ":", "[", "False", "]", ",", "\n", "'conventional_split'", ":", "[", "True", "]", ",", "\n", "'conventional_split_from_train_only'", ":", "[", "False", "]", ",", "\n", "}", ")", "\n", "\n", "\n", "", "if", "len", "(", "test_tasks", ")", ">", "0", ":", "# else if no test task is given, assume train task is the same as evaluation task ", "\n", "                        ", "variables", "[", "(", "'task_args.eval.min_num_supports'", ",", "\n", "'task_args.eval.max_num_supports'", ",", "\n", "'task_args.eval.num_minority'", ",", "\n", "'task_args.eval.imbalance_distribution'", ",", "\n", "'task_args.eval.min_num_targets'", ",", "\n", "'task_args.eval.max_num_targets'", ",", "\n", "'task_args.eval.num_minority_targets'", ",", "\n", "'task_args.eval.imbalance_distribution_targets'", ")", "]", "=", "test_tasks", "\n", "\n", "", "is_pretrained", "=", "''", "\n", "if", "pretrained_backbone", "is", "not", "None", ":", "\n", "                        ", "variables", "[", "'continue_from'", "]", "=", "[", "pretrained_backbone", "]", "\n", "variables", "[", "'load_backbone_only'", "]", "=", "[", "True", "]", "\n", "is_pretrained", "=", "'pretrained_'", "\n", "\n", "# experiment path", "\n", "", "template", "=", "expfolder", "+", "template_prefix", "+", "is_pretrained", "+", "'{backbone}/train_on_'", "+", "train_name", "\n", "template", "+=", "'/{strategy}/'", "\n", "#           + '{num_epochs}epochs_{num_tasks_per_epoch}tasks/'", "\n", "\n", "if", "slow_learning", ":", "\n", "                        ", "template", "+=", "'{num_tasks_per_epoch}x{num_epochs}ep_{model_args.lr}lr_'", "+", "'{model_args.lr_decay_step}step/'", "\n", "\n", "", "template", "+=", "'{model}/'", "\n", "\n", "if", "model", "in", "[", "'protonet'", "]", ":", "\n", "                        ", "variables", "[", "(", "\n", "'task_args.train.num_classes'", ",", "\n", "'task_args.train.min_num_targets'", ",", "\n", "'task_args.train.max_num_targets'", ")", "]", "=", "[", "\n", "(", "20", ",", "5", ",", "5", ")", ",", "\n", "(", "5", ",", "15", ",", "15", ")", "\n", "]", "\n", "template", "+=", "'{task_args.train.num_classes}trainway/'", "\n", "\n", "", "elif", "model", "in", "[", "'baseline'", ",", "'baselinepp'", ",", "'knn'", "]", ":", "\n", "                        ", "variables", "[", "'task_args.trval.batch_size'", "]", "=", "[", "128", "]", "# train and validation batch", "\n", "\n", "", "elif", "model", "in", "[", "'maml'", ",", "'protomaml'", "]", ":", "\n", "                        ", "variables", "[", "'model_args.batch_size'", "]", "=", "[", "4", "]", "if", "model", "==", "'maml'", "else", "[", "1", "]", "\n", "variables", "[", "'model_args.inner_loop_lr'", "]", "=", "[", "0.1", "]", "if", "model", "==", "'maml'", "else", "[", "0.005", "]", "\n", "variables", "[", "'model_args.num_inner_loop_steps'", "]", "=", "[", "10", "]", "if", "model", "==", "'maml'", "else", "[", "5", "]", "\n", "\n", "#template += '{model_args.num_inner_loop_steps}innersteps_' +\\", "\n", "#          '{model_args.inner_loop_lr}innerlr/'", "\n", "\n", "", "elif", "model", "in", "[", "'bmaml'", ",", "'bmaml_chaser'", "]", ":", "\n", "                        ", "variables", "[", "'model_args.batch_size'", "]", "=", "[", "1", "]", "\n", "variables", "[", "'model_args.inner_loop_lr'", "]", "=", "[", "0.1", "]", "\n", "variables", "[", "'model_args.num_inner_loop_steps'", "]", "=", "[", "1", "]", "\n", "variables", "[", "'model_args.num_draws'", "]", "=", "[", "20", "]", "\n", "\n", "if", "model", "==", "'bmaml_chaser'", ":", "\n", "                            ", "variables", "[", "'model_args.leader_inner_loop_lr'", "]", "=", "[", "0.5", "]", "\n", "\n", "\n", "", "", "elif", "model", "==", "'btaml'", ":", "\n", "                        ", "variables", "[", "'model_args.approx'", "]", "=", "[", "False", "]", "\n", "variables", "[", "'model_args.batch_size'", "]", "=", "[", "4", "]", "\n", "variables", "[", "'model_args.inner_loop_lr'", "]", "=", "[", "0.01", "]", "\n", "variables", "[", "'model_args.num_inner_loop_steps'", "]", "=", "[", "{", "\"train\"", ":", "4", ",", "\"val\"", ":", "10", ",", "\"test\"", ":", "10", "}", "]", "\n", "variables", "[", "(", "'model_args.alpha_on'", ",", "\n", "'model_args.omega_on'", ",", "\n", "'model_args.gamma_on'", ",", "\n", "'model_args.z_on'", ")", "]", "=", "[", "(", "True", ",", "True", ",", "True", ",", "True", ")", "]", "\n", "\n", "#template += \"{model_args.alpha_on}a_{model_args.omega_on}o_\" + \\", "\n", "#            \"{model_args.gamma_on}g_\" + \\", "\n", "#            \"{model_args.z_on}z_{model_args.approx_until}till/\"", "\n", "#template += '{model_args.batch_size}trainbatch_'+ \\", "\n", "#            '{model_args.inner_loop_lr}innerlr_' + \\", "\n", "#            '{model_args.num_inner_loop_steps}innersteps/'", "\n", "\n", "", "elif", "model", "==", "'relationnet'", ":", "\n", "                        ", "variables", "[", "'model_args.loss_type'", "]", "=", "[", "'softmax'", "]", "\n", "template", "+=", "'{model_args.loss_type}/'", "\n", "\n", "", "elif", "model", "==", "'simpleshot'", ":", "\n", "                        ", "variables", "[", "'task_args.train.batch_size'", "]", "=", "[", "128", "]", "\n", "variables", "[", "'model_args.feat_trans_name'", "]", "=", "[", "'CL2N'", "]", "\n", "variables", "[", "'model_args.train_feat_trans'", "]", "=", "[", "False", "]", "\n", "variables", "[", "'model_args.approx_train_mean'", "]", "=", "[", "False", "]", "# if true will speed up dataset mean calculation", "\n", "\n", "", "template", "+=", "'{seed}/'", "\n", "variables", ".", "update", "(", "var_update", ")", "\n", "\n", "expfiles", "=", "generate_experiments", "(", "template", ",", "variables", ",", "g_args", ",", "save", "=", "save", ")", "\n", "experiement_files", ".", "extend", "(", "expfiles", ")", "\n", "", "", "", "", "return", "experiement_files", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.imbalanced_task_test": [[379, 455], ["generator.make_names", "generator.substitute_hyperparams", "enumerate", "generator.generate_experiments"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.make_names", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.substitute_hyperparams", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.generate_experiments"], ["", "def", "imbalanced_task_test", "(", "g_args", ",", "expfiles", ")", ":", "\n", "    ", "n_way", "=", "5", "\n", "\n", "test_settings", "=", "[", "\n", "# Test of 5 avr shot experiments", "\n", "(", "5", ",", "5", ",", "None", ",", "'balanced'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", ",", "\n", "(", "4", ",", "6", ",", "None", ",", "'linear'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", ",", "\n", "(", "1", ",", "9", ",", "None", ",", "'random'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", ",", "\n", "(", "1", ",", "9", ",", "0.2", ",", "'step'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", ",", "\n", "\n", "# (3, 7,  None, 'linear', 15, 15, None, 'balanced'),", "\n", "# (2, 8,  None, 'linear', 15, 15, None, 'balanced'),", "\n", "# (1, 9,  None, 'linear', 15, 15, None, 'balanced'),", "\n", "# (1, 21,  0.8, 'step', 15, 15, None, 'balanced'),", "\n", "# (1, 6,  0.2, 'step', 15, 15, None, 'balanced'),", "\n", "# (1, 9,  0.8, 'step', 15, 15, None, 'balanced'),", "\n", "# (3, 7,  None, 'random', 15, 15, None, 'balanced'),", "\n", "\n", "#### Test settings for 15 avr shot experiments ", "\n", "# (15, 15,  None, 'balanced', 15, 15, None, 'balanced'),", "\n", "# (10, 20,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "# (13, 17,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "# ( 5, 25,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "# ( 3, 27,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "# ( 1, 29,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "\n", "#### Test settings for 25 avr shot experiments ", "\n", "# (25, 25,  None, 'balanced', 15, 15, None, 'balanced'),", "\n", "# (20, 30,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "# (15, 35,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "# (10, 40,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "# ( 5, 45,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "# ( 1, 49,  None,   'linear', 15, 15, None, 'balanced'),", "\n", "]", "\n", "\n", "test_names", "=", "make_names", "(", "test_settings", ",", "n_way", ")", "\n", "\n", "for", "experiment", "in", "expfiles", ":", "\n", "\n", "        ", "script", ",", "script_path", ",", "config", ",", "config_path", "=", "experiment", "\n", "\n", "# expanded args also useful for backward compatibility. ", "\n", "config", "=", "substitute_hyperparams", "(", "config", ")", "\n", "\n", "assert", "config", "[", "'task'", "]", "==", "'fsl_imbalanced'", "\n", "\n", "for", "t", ",", "test_setting", "in", "enumerate", "(", "test_settings", ")", ":", "\n", "            ", "test_name", "=", "test_names", "[", "t", "]", "\n", "\n", "variables", "=", "{", "\n", "'continue_from'", ":", "[", "'best'", "]", ",", "\n", "'evaluate_on_test_set_only'", ":", "[", "True", "]", ",", "\n", "'test_performance_tag'", ":", "[", "test_name", "]", ",", "\n", "'task_args.test.num_classes'", ":", "[", "n_way", "]", ",", "\n", "}", "\n", "\n", "variables", "[", "(", "\n", "'task_args.test.min_num_supports'", ",", "\n", "'task_args.test.max_num_supports'", ",", "\n", "'task_args.test.num_minority'", ",", "\n", "'task_args.test.imbalance_distribution'", ",", "\n", "'task_args.test.min_num_targets'", ",", "\n", "'task_args.test.max_num_targets'", ",", "\n", "'task_args.test.num_minority_targets'", ",", "\n", "'task_args.test.imbalance_distribution_targets'", "\n", ")", "]", "=", "[", "test_setting", "]", "\n", "\n", "generate_experiments", "(", "\n", "config", "[", "'experiment_name'", "]", ",", "\n", "variables", ",", "\n", "g_args", ",", "\n", "default_config", "=", "config", ",", "\n", "save", "=", "True", ",", "\n", "config_name", "=", "'config_test_on_{}'", ".", "format", "(", "test_name", ")", ",", "\n", "script_name", "=", "'script_test_on_{}'", ".", "format", "(", "test_name", ")", ",", "\n", "log_name", "=", "'log_test_on_{}'", ".", "format", "(", "test_name", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.strategy_inference": [[458, 545], ["generator.make_names", "generator.substitute_hyperparams", "os.path.join", "os.path.join", "enumerate", "copy.deepcopy", "generator.generate_experiments"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.make_names", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.substitute_hyperparams", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.generate_experiments"], ["", "", "", "def", "strategy_inference", "(", "g_args", ",", "expfiles", ")", ":", "\n", "    ", "n_way", "=", "5", "\n", "test_tasks", "=", "[", "\n", "(", "5", ",", "5", ",", "None", ",", "'balanced'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", ",", "# K_min, K_max, N_min, I-distribution ", "\n", "(", "4", ",", "6", ",", "None", ",", "'linear'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", ",", "\n", "(", "1", ",", "9", ",", "None", ",", "'random'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", ",", "\n", "(", "1", ",", "9", ",", "0.2", ",", "'step'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", "# N_min expressed as a fraction of 'n_way'", "\n", "\n", "# Other, uncomment if appropiate", "\n", "# (5, 5,  None, 'balanced', 15, 15, None, 'balanced'),  # K_min, K_max, N_min, I-distribution ", "\n", "# (4, 6,  None, 'linear', 15, 15, None, 'balanced'),", "\n", "# (3, 7,  None, 'linear', 15, 15, None, 'balanced'),", "\n", "# (2, 8,  None, 'linear', 15, 15, None, 'balanced'),", "\n", "# (1, 9,  None, 'linear', 15, 15, None, 'balanced'),", "\n", "# (1, 21,  0.8, 'step', 15, 15, None, 'balanced'),", "\n", "# (1, 6,  0.2, 'step', 15, 15, None, 'balanced'),", "\n", "# (1, 9,  0.8, 'step', 15, 15, None, 'balanced'),", "\n", "# (3, 7,  None, 'random', 15, 15, None, 'balanced'),", "\n", "]", "\n", "test_names", "=", "make_names", "(", "test_tasks", ",", "n_way", ",", "query_half", "=", "False", ")", "\n", "\n", "# Inference Strategies", "\n", "strategies", "=", "[", "\n", "'ros'", ",", "\n", "# 'ros_aug',", "\n", "# 'focal_loss',", "\n", "# 'weighted_loss',", "\n", "# 'cb_loss',", "\n", "]", "\n", "\n", "for", "experiment", "in", "expfiles", ":", "\n", "        ", "for", "strategy", "in", "strategies", ":", "\n", "            ", "script", ",", "script_path", ",", "base_config", ",", "config_path", "=", "experiment", "\n", "\n", "base_config", "[", "'strategy'", "]", "=", "strategy", "\n", "base_config", "[", "'strategy_args'", "]", "=", "{", "}", "\n", "\n", "# expanded args also useful for backward compatibility. ", "\n", "base_config", "=", "substitute_hyperparams", "(", "base_config", ")", "\n", "\n", "assert", "base_config", "[", "'task'", "]", "==", "'fsl_imbalanced'", "\n", "\n", "continue_from", "=", "os", ".", "path", ".", "join", "(", "g_args", ".", "results_folder", ",", "base_config", "[", "'experiment_name'", "]", ")", "\n", "template", "=", "os", ".", "path", ".", "join", "(", "'inference/{strategy}/'", ",", "base_config", "[", "'experiment_name'", "]", ")", "\n", "\n", "for", "t", ",", "setting", "in", "enumerate", "(", "test_tasks", ")", ":", "\n", "                ", "config", "=", "copy", ".", "deepcopy", "(", "base_config", ")", "\n", "test_name", "=", "test_names", "[", "t", "]", "\n", "\n", "variables", "=", "{", "\n", "'continue_from'", ":", "[", "continue_from", "]", ",", "\n", "'evaluate_on_test_set_only'", ":", "[", "True", "]", ",", "\n", "'test_performance_tag'", ":", "[", "test_name", "]", ",", "\n", "'task_args.test.num_classes'", ":", "[", "n_way", "]", ",", "\n", "}", "\n", "variables", "[", "(", "\n", "'task_args.test.min_num_supports'", ",", "\n", "'task_args.test.max_num_supports'", ",", "\n", "'task_args.test.num_minority'", ",", "\n", "'task_args.test.imbalance_distribution'", ",", "\n", "'task_args.test.min_num_targets'", ",", "\n", "'task_args.test.max_num_targets'", ",", "\n", "'task_args.test.num_minority_tagets'", ",", "\n", "'task_args.test.imbalance_distribution_targets'", "\n", ")", "]", "=", "[", "setting", "]", "\n", "\n", "template", "=", "'inference/{strategy}/'", "\n", "\n", "if", "strategy", "==", "'cb_loss'", ":", "\n", "                    ", "variables", "[", "'strategy_args.beta'", "]", "=", "[", "0.8", "]", "\n", "#                     template += \"{strategy_args.beta}beta/\"", "\n", "\n", "", "template", "+=", "config", "[", "'experiment_name'", "]", "\n", "\n", "#                 print('# ', config['experiment_name'])", "\n", "#                 print('# ', template)", "\n", "#                 print('#', config['continue_from'])", "\n", "\n", "generate_experiments", "(", "\n", "template", ",", "\n", "variables", ",", "\n", "g_args", ",", "\n", "default_config", "=", "config", ",", "\n", "save", "=", "True", ",", "\n", "config_name", "=", "'config_test_on_{}'", ".", "format", "(", "test_name", ")", ",", "\n", "script_name", "=", "'script_test_on_{}'", ".", "format", "(", "test_name", ")", ",", "\n", "log_name", "=", "'log_test_on_{}'", ".", "format", "(", "test_name", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.imbalanced_dataset": [[548, 626], ["generator.fsl_imbalanced", "generator.substitute_hyperparams", "variables.update", "is_baseline", "os.path.join", "experiement_files.extend", "variables.update", "variables.update", "generator.generate_experiments"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.fsl_imbalanced", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.substitute_hyperparams", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.generate_experiments"], ["", "", "", "", "def", "imbalanced_dataset", "(", "g_args", ",", "models", "=", "[", "]", ",", "seeds", "=", "[", "]", ",", "save", "=", "True", ",", "backbone", "=", "None", ")", ":", "\n", "# meta-training dataset imbalance settings", "\n", "    ", "imbalance_settings", "=", "[", "\n", "(", "300", ",", "300", ",", "None", ",", "'balanced'", ")", ",", "\n", "(", "30", ",", "570", ",", "None", ",", "'linear'", ")", ",", "\n", "(", "30", ",", "570", ",", "0.5", ",", "'step'", ")", ",", "\n", "(", "25", ",", "444", ",", "0.34375", ",", "'step'", ")", ",", "\n", "(", "None", ",", "None", ",", "None", ",", "'step-animal'", ")", ",", "\n", "\n", "# Reduced Dataset", "\n", "# (150, 150, None, 'balanced'),", "\n", "# (30, 190, 0.25, 'step'),", "\n", "# (30, 270,  0.5, 'step'),", "\n", "# (30, 510, 0.75, 'step'),", "\n", "]", "\n", "\n", "strategies", "=", "[", "None", "]", "\n", "train_tasks", "=", "[", "\n", "(", "5", ",", "5", ",", "None", ",", "'balanced'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", ",", "\n", "#(1, 9, None, 'linear', 15, 15, None, 'balanced')  # uncomment for combined imbalance results", "\n", "]", "\n", "var_update", "=", "{", "\n", "'num_epochs'", ":", "[", "200", "]", ",", "\n", "'num_tasks_per_epoch'", ":", "[", "500", "]", ",", "\n", "# 'dataset_args.train.use_classes_frac': [0.5]", "\n", "}", "\n", "\n", "is_baseline", "=", "lambda", "x", ":", "x", "in", "[", "'baseline'", ",", "'baselinepp'", ",", "'knn'", "]", "\n", "\n", "experiement_files", "=", "[", "]", "\n", "\n", "for", "experiment", "in", "fsl_imbalanced", "(", "g_args", ",", "models", "=", "models", ",", "strategies", "=", "strategies", ",", "\n", "seeds", "=", "seeds", ",", "var_update", "=", "var_update", ",", "\n", "train_tasks", "=", "train_tasks", ",", "save", "=", "False", ",", "\n", "backbone", "=", "backbone", ")", ":", "\n", "\n", "        ", "for", "setting", "in", "imbalance_settings", ":", "\n", "            ", "script", ",", "script_path", ",", "config", ",", "config_path", "=", "experiment", "\n", "\n", "# expanded args also useful for backward compatibility. ", "\n", "config", "=", "substitute_hyperparams", "(", "config", ")", "\n", "model", "=", "config", "[", "'model'", "]", "\n", "min_s", ",", "max_s", ",", "minor", ",", "dist", "=", "setting", "\n", "\n", "variables", "=", "{", "}", "\n", "\n", "if", "dist", "==", "'step-animal'", ":", "\n", "                ", "variables", ".", "update", "(", "{", "'dataset_args.train.dataset_version'", ":", "[", "'step-animal'", "]", "}", ")", "\n", "dist", "=", "None", "\n", "\n", "", "variables", ".", "update", "(", "{", "\n", "'dataset_args.train.min_num_samples'", ":", "[", "min_s", "]", ",", "\n", "'dataset_args.train.max_num_samples'", ":", "[", "max_s", "]", ",", "\n", "'dataset_args.train.num_minority'", ":", "[", "minor", "]", ",", "\n", "'dataset_args.train.imbalance_distribution'", ":", "[", "dist", "]", ",", "\n", "}", ")", "\n", "\n", "if", "is_baseline", "(", "model", ")", ":", "\n", "                ", "variables", ".", "update", "(", "{", "\n", "'no_val_loop'", ":", "[", "True", "]", ",", "# no validation loop for baselines", "\n", "'conventional_split'", ":", "[", "False", "]", ",", "\n", "'conventional_split_from_train_only'", ":", "[", "False", "]", ",", "\n", "}", ")", "\n", "\n", "", "template", "=", "os", ".", "path", ".", "join", "(", "'imb_mini'", ",", "'{dataset_args.train.min_num_samples}_'", "+", "'{dataset_args.train.max_num_samples}_'", "+", "'{dataset_args.train.num_minority}_'", "+", "'{dataset_args.train.imbalance_distribution}'", ",", "\n", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "experiement_files", ".", "extend", "(", "generate_experiments", "(", "\n", "template", ",", "\n", "variables", ",", "\n", "g_args", ",", "\n", "default_config", "=", "config", ",", "\n", "save", "=", "save", "\n", ")", ")", "\n", "", "", "return", "experiement_files", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.tailed_dataset": [[628, 675], ["generator.fsl_imbalanced", "generator.substitute_hyperparams", "os.path.join", "experiement_files.extend", "generator.generate_experiments", "is_baseline"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.fsl_imbalanced", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.substitute_hyperparams", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.generate_experiments"], ["", "def", "tailed_dataset", "(", "g_args", ",", "models", "=", "[", "]", ",", "seeds", "=", "[", "]", ",", "save", "=", "True", ",", "backbone", "=", "'Conv4'", ")", ":", "\n", "\n", "# meta-training dataset imbalance settings", "\n", "    ", "datasets", "=", "[", "\n", "\"imgnt\"", "\n", "]", "\n", "dataset_versions", "=", "[", "\n", "\"longtail\"", ",", "\n", "\"balanced\"", ",", "\n", "]", "\n", "\n", "strategies", "=", "[", "None", "]", "\n", "train_tasks", "=", "[", "(", "5", ",", "5", ",", "None", ",", "'balanced'", ",", "15", ",", "15", ",", "None", ",", "'balanced'", ")", "]", "\n", "var_update", "=", "{", "'num_epochs'", ":", "[", "200", "]", ",", "'num_tasks_per_epoch'", ":", "[", "1000", "]", "}", "\n", "\n", "is_baseline", "=", "lambda", "x", ":", "x", "in", "[", "'baseline'", ",", "'baselinepp'", ",", "'knn'", "]", "\n", "\n", "experiement_files", "=", "[", "]", "\n", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "for", "version", "in", "dataset_versions", ":", "\n", "            ", "for", "experiment", "in", "fsl_imbalanced", "(", "g_args", ",", "models", "=", "models", ",", "strategies", "=", "strategies", ",", "seeds", "=", "seeds", ",", "var_update", "=", "var_update", ",", "\n", "train_tasks", "=", "train_tasks", ",", "save", "=", "False", ",", "dataset", "=", "dataset", ",", "backbone", "=", "'ResNet10'", ",", "\n", "template_prefix", "=", "''", ")", ":", "\n", "                ", "script", ",", "script_path", ",", "config", ",", "config_path", "=", "experiment", "\n", "# expanded args also useful for backward compatibility.", "\n", "config", "=", "substitute_hyperparams", "(", "config", ")", "\n", "\n", "template", "=", "os", ".", "path", ".", "join", "(", "'imb_{dataset}/{dataset_args.dataset_version}/'", ",", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "experiement_files", ".", "extend", "(", "generate_experiments", "(", "\n", "template", ",", "\n", "{", "\n", "\"dataset\"", ":", "[", "dataset", "]", ",", "\n", "\"dataset_args.dataset_version\"", ":", "[", "version", "]", ",", "\n", "'dataset_args.imbalance_distribution'", ":", "[", "None", "]", ",", "\n", "\"dataset_args.seed\"", ":", "[", "config", "[", "'seed'", "]", "]", ",", "\n", "'no_val_loop'", ":", "[", "is_baseline", "(", "config", "[", "'model'", "]", ")", "]", ",", "\n", "'conventional_split'", ":", "[", "False", "]", ",", "\n", "'conventional_split_from_train_only'", ":", "[", "False", "]", "\n", "}", ",", "\n", "g_args", ",", "\n", "config", ",", "\n", "save", "=", "save", "\n", ")", ")", "\n", "\n", "", "", "", "return", "experiement_files", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.cub_inference": [[677, 707], ["copy.deepcopy", "generator.substitute_hyperparams", "os.path.join", "os.path.join", "generator.generate_experiments"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.substitute_hyperparams", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.None.generator.generate_experiments"], ["", "def", "cub_inference", "(", "g_args", ",", "expfiles", ",", "save", "=", "True", ")", ":", "\n", "\n", "    ", "datasets", "=", "[", "\n", "(", "'cub_inf'", ",", "'mini_to_cub'", ")", "\n", "]", "\n", "\n", "for", "prefix", ",", "dateset", "in", "datasets", ":", "\n", "\n", "        ", "for", "experiment", "in", "expfiles", ":", "\n", "            ", "script", ",", "script_path", ",", "config", ",", "config_path", "=", "experiment", "\n", "config", "=", "copy", ".", "deepcopy", "(", "base_config", ")", "\n", "\n", "# expanded args also useful for backward compatibility. ", "\n", "config", "=", "substitute_hyperparams", "(", "config", ")", "\n", "continue_from", "=", "os", ".", "path", ".", "join", "(", "g_args", ".", "results_folder", ",", "config", "[", "'experiment_name'", "]", ")", "\n", "template", "=", "os", ".", "path", ".", "join", "(", "prefix", ",", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "variables", "=", "{", "\n", "'continue_from'", ":", "[", "continue_from", "]", ",", "\n", "'dataset'", ":", "[", "dateset", "]", ",", "\n", "'evaluate_on_test_set_only'", ":", "[", "True", "]", ",", "\n", "'dataset_args.test.imbalance_distribution'", ":", "[", "None", "]", ",", "\n", "}", "\n", "\n", "generate_experiments", "(", "\n", "template", ",", "\n", "variables", ",", "\n", "g_args", ",", "\n", "config", ",", "\n", "save", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.NumpyEncoder.default": [[130, 134], ["isinstance", "json.JSONEncoder.default", "obj.tolist"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.NumpyEncoder.default"], ["    ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.TaskPerformance.__init__": [[140, 174], ["dict.__init__", "ptracker.TaskPerformance.update", "list", "list", "float", "float", "max", "numpy.zeros", "ptracker.update_confusion_matrix", "max", "numpy.zeros", "ptracker.update_class_freq", "sklearn.metrics.precision_recall_fscore_support", "ptracker.compute_accuracy", "max", "max"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.update_confusion_matrix", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.update_class_freq", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.compute_accuracy"], ["def", "__init__", "(", "self", ",", "y_pred", ",", "y_true", ",", "loss", ",", "metrics", ",", "other_metrics_dict", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "\"preds\"", "in", "metrics", ":", "\n", "            ", "self", "[", "\"preds\"", "]", "=", "list", "(", "y_pred", ")", "\n", "\n", "", "if", "\"true\"", "in", "metrics", ":", "\n", "            ", "self", "[", "\"true\"", "]", "=", "list", "(", "y_true", ")", "\n", "\n", "", "if", "\"loss\"", "in", "metrics", ":", "\n", "            ", "self", "[", "\"loss\"", "]", "=", "float", "(", "loss", ")", "\n", "\n", "", "if", "\"accuracy\"", "in", "metrics", ":", "\n", "            ", "self", "[", "\"accuracy\"", "]", "=", "float", "(", "compute_accuracy", "(", "y_pred", ",", "y_true", ")", ")", "\n", "\n", "", "if", "\"conf_matrix\"", "in", "metrics", ":", "\n", "            ", "max_lbl", "=", "max", "(", "max", "(", "y_pred", ")", ",", "max", "(", "y_true", ")", ")", "\n", "conf_matrix", "=", "np", ".", "zeros", "(", "(", "max_lbl", "+", "1", ",", "max_lbl", "+", "1", ")", ")", "\n", "conf_matrix", "=", "update_confusion_matrix", "(", "y_pred", ",", "y_true", ",", "conf_matrix", ")", "\n", "self", "[", "\"conf_matrix\"", "]", "=", "conf_matrix", "\n", "\n", "", "if", "\"class_freq\"", "in", "metrics", ":", "\n", "            ", "max_lbl", "=", "max", "(", "y_true", ")", "\n", "class_freq", "=", "np", ".", "zeros", "(", "max_lbl", "+", "1", ")", "\n", "class_freq", "=", "update_class_freq", "(", "y_true", ",", "class_freq", ")", "\n", "self", "[", "\"class_freq\"", "]", "=", "class_freq", "\n", "\n", "", "if", "\"per_cls_stats\"", "in", "metrics", ":", "\n", "            ", "output", "=", "precision_recall_fscore_support", "(", "y_true", ",", "y_pred", ",", "beta", "=", "1.0", ",", "zero_division", "=", "0", ")", "\n", "self", "[", "\"precision\"", "]", "=", "output", "[", "0", "]", "\n", "self", "[", "\"recall\"", "]", "=", "output", "[", "1", "]", "\n", "self", "[", "\"f1\"", "]", "=", "output", "[", "2", "]", "\n", "\n", "", "self", ".", "update", "(", "other_metrics_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.TaskPerformance.metrics": [[175, 177], ["list", "ptracker.TaskPerformance.keys"], "methods", ["None"], ["", "def", "metrics", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.TaskPerformance.to_dict": [[178, 180], ["None"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceBatch.__init__": [[184, 202], ["dict.__init__", "len", "performances[].metrics", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.TaskPerformance.metrics"], ["    ", "def", "__init__", "(", "self", ",", "performances", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Holds TaskPerformance objects and averages the metrics over the given TaskPerformance objects. A PerformanceBatch\n        handles the performances obtained from within a single epoch - either from the training iterations or evaluation \n        tasks, also See PerformanceTracker. Assumes all TaskPerformances within the batch contain the same metrics.\n        :param performances: a list of TaskPerformance objects\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "performances", "is", "not", "None", ":", "\n", "# summarise the performances ", "\n", "            ", "metrics", "=", "performances", "[", "0", "]", ".", "metrics", "(", ")", "\n", "for", "m", "in", "metrics", ":", "\n", "                ", "self", "[", "'avr_'", "+", "m", "]", "=", "np", ".", "mean", "(", "[", "tp", "[", "m", "]", "for", "tp", "in", "performances", "]", ",", "axis", "=", "0", ")", "\n", "", "self", "[", "\"performances\"", "]", "=", "performances", "\n", "", "else", ":", "\n", "            ", "self", "[", "\"performances\"", "]", "=", "[", "]", "\n", "\n", "", "self", "[", "'num_performances'", "]", "=", "len", "(", "self", "[", "'performances'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceBatch.add_performance": [[203, 219], ["ptracker.PerformanceBatch.append", "p.metrics", "ptracker.confusion_matrix_combine"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.TaskPerformance.metrics", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.confusion_matrix_combine"], ["", "def", "add_performance", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", "[", "'performances'", "]", ".", "append", "(", "p", ")", "\n", "self", "[", "'num_performances'", "]", "+=", "1", "\n", "n", "=", "self", "[", "'num_performances'", "]", "\n", "\n", "# incremental average for each metric", "\n", "for", "m", "in", "p", ".", "metrics", "(", ")", ":", "\n", "            ", "if", "'avr_'", "+", "m", "not", "in", "self", ":", "\n", "                ", "self", "[", "'avr_'", "+", "m", "]", "=", "p", "[", "m", "]", "\n", "if", "\"conf_matrix\"", "not", "in", "m", ":", "\n", "                    ", "self", "[", "'var_'", "+", "m", "]", "=", "0.0", "\n", "", "", "elif", "\"conf_matrix\"", "in", "m", ":", "\n", "                ", "self", "[", "'avr_'", "+", "m", "]", "=", "confusion_matrix_combine", "(", "[", "p", "[", "m", "]", ",", "(", "n", "-", "1", ")", "*", "self", "[", "'avr_'", "+", "m", "]", "]", ",", "normalise", "=", "False", ")", "/", "n", "\n", "", "else", ":", "\n", "                ", "self", "[", "'var_'", "+", "m", "]", "=", "(", "(", "n", "-", "2.", ")", "/", "(", "n", "-", "1.", ")", ")", "*", "self", "[", "'var_'", "+", "m", "]", "+", "(", "1.", "/", "n", ")", "*", "(", "p", "[", "m", "]", "-", "self", "[", "'avr_'", "+", "m", "]", ")", "**", "2", "\n", "self", "[", "'avr_'", "+", "m", "]", "+=", "(", "p", "[", "m", "]", "-", "self", "[", "'avr_'", "+", "m", "]", ")", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceBatch.to_dict": [[220, 237], ["len", "p.metrics", "ptracker.PerformanceBatch.copy", "numpy.mean", "numpy.isclose", "numpy.isnan", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.TaskPerformance.metrics"], ["", "", "", "def", "to_dict", "(", "self", ",", "with_performances", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "if", "len", "(", "self", "[", "'performances'", "]", ")", ">", "0", ":", "\n", "            ", "p", "=", "self", "[", "'performances'", "]", "[", "0", "]", "\n", "for", "m", "in", "p", ".", "metrics", "(", ")", ":", "\n", "                ", "if", "'conf_matrix'", "not", "in", "m", "and", "'precision'", "not", "in", "m", "and", "'recall'", "not", "in", "m", "and", "'f1'", "not", "in", "m", ":", "\n", "                    ", "np_mean", "=", "np", ".", "mean", "(", "[", "p", "[", "m", "]", "for", "p", "in", "self", "[", "'performances'", "]", "]", ",", "axis", "=", "0", ")", "\n", "assert", "np", ".", "isclose", "(", "np_mean", ",", "self", "[", "'avr_'", "+", "m", "]", ")", "or", "(", "np", ".", "isnan", "(", "self", "[", "'avr_'", "+", "m", "]", ")", "and", "np", ".", "isnan", "(", "np_mean", ")", ")", "\n", "\n", "", "", "", "if", "not", "with_performances", ":", "\n", "            ", "temp", "=", "self", ".", "copy", "(", ")", "# shallow copy", "\n", "del", "temp", "[", "'performances'", "]", "\n", "return", "temp", "\n", "", "else", ":", "\n", "            ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceBatch.from_dict": [[238, 241], ["ptracker.PerformanceBatch.update"], "methods", ["None"], ["", "", "def", "from_dict", "(", "self", ",", "dct", ")", ":", "\n", "        ", "self", ".", "update", "(", "dct", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.get_parser": [[246, 255], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_task_performance'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Saves performance for individual task in the ptracker log files, not just the average'", ")", "\n", "parser", ".", "add_argument", "(", "'--metrics'", ",", "type", "=", "list", ",", "default", "=", "[", "'accuracy'", ",", "'loss'", "]", ",", "\n", "help", "=", "\"Metrics to assess performance for each. Choices={}\"", ".", "format", "(", "TaskPerformance", ".", "METRICS", ")", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.__init__": [[256, 290], ["ptracker.PerformanceBatch", "ptracker.PerformanceBatch", "ptracker.PerformanceBatch", "collections.deque", "collections.deque", "collections.deque", "Exception"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "folder", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Keeps track of performance for epochs.\n        :param folder: folder where to save performance statistics, typically in the form of [experiment_name]/[folder]/\n        \"\"\"", "\n", "self", ".", "folder", "=", "folder", "\n", "self", ".", "args", "=", "args", "\n", "\n", "#\u00a0Checks validity of given metric names", "\n", "for", "s", "in", "self", ".", "args", ":", "\n", "            ", "for", "m", "in", "self", ".", "args", "[", "s", "]", "[", "'metrics'", "]", ":", "\n", "                ", "if", "m", "not", "in", "TaskPerformance", ".", "METRICS", ":", "\n", "                    ", "raise", "Exception", "(", "\"metrics.{}.{} not found. Choices={}\"", ".", "format", "(", "s", ",", "m", ",", "TaskPerformance", ".", "METRICS", ")", ")", "\n", "\n", "", "", "", "self", ".", "mode", "=", "'train'", "# or 'val' or 'test'", "\n", "self", ".", "epoch_cache", "=", "{", "\"train\"", ":", "PerformanceBatch", "(", ")", ",", "\n", "\"val\"", ":", "PerformanceBatch", "(", ")", ",", "\n", "\"test\"", ":", "PerformanceBatch", "(", ")", "}", "\n", "\n", "self", ".", "deque_maxlen", "=", "5", "\n", "\n", "self", ".", "current_best", "=", "{", "\n", "\"train\"", ":", "{", "'acc'", ":", "0.0", ",", "'path'", ":", "None", ",", "'epoch'", ":", "-", "1", "}", ",", "\n", "\"val\"", ":", "{", "'acc'", ":", "0.0", ",", "'path'", ":", "None", ",", "'epoch'", ":", "-", "1", "}", ",", "\n", "\"test\"", ":", "{", "'acc'", ":", "0.0", ",", "'path'", ":", "None", ",", "'epoch'", ":", "-", "1", "}", "}", "\n", "\n", "# Stores previous 5 best performances", "\n", "self", ".", "previous_bests", "=", "{", "\n", "\"train\"", ":", "deque", "(", "maxlen", "=", "self", ".", "deque_maxlen", ")", ",", "\n", "\"val\"", ":", "deque", "(", "maxlen", "=", "self", ".", "deque_maxlen", ")", ",", "\n", "\"test\"", ":", "deque", "(", "maxlen", "=", "self", ".", "deque_maxlen", ")", "\n", "}", "\n", "\n", "self", ".", "lastest_task_performance", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.set_mode": [[291, 293], ["None"], "methods", ["None"], ["", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance": [[294, 298], ["ptracker.TaskPerformance", "ptracker.PerformanceTracker.epoch_cache[].add_performance"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceBatch.add_performance"], ["", "def", "add_task_performance", "(", "self", ",", "y_pred", ",", "y_true", ",", "loss", ",", "other_metrics_dict", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "lastest_task_performance", "=", "TaskPerformance", "(", "y_pred", ",", "y_true", ",", "loss", ",", "metrics", "=", "self", ".", "args", "[", "self", ".", "mode", "]", "[", "'metrics'", "]", ",", "\n", "other_metrics_dict", "=", "other_metrics_dict", ")", "\n", "self", ".", "epoch_cache", "[", "self", ".", "mode", "]", ".", "add_performance", "(", "self", ".", "lastest_task_performance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.get_lastest_task_performance": [[299, 301], ["None"], "methods", ["None"], ["", "def", "get_lastest_task_performance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lastest_task_performance", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.update_best": [[302, 323], ["ptracker.PerformanceTracker.previous_bests[].append", "copy.copy"], "methods", ["None"], ["", "def", "update_best", "(", "self", ",", "checkpointpath", ",", "current_epoch", ",", "metric", "=", "'avr_accuracy'", ")", ":", "\n", "        ", "\"\"\"\n        Updates best statistics for the epoch/checkpoint.\n        :param checkpointpath: path of the current epoch\n        :param metric: metric to evaluate the best performance by \n        \"\"\"", "\n", "is_updated", "=", "{", "}", "\n", "for", "setname", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "\n", "            ", "is_updated", "[", "setname", "]", "=", "False", "\n", "if", "metric", "not", "in", "self", ".", "epoch_cache", "[", "setname", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "self", ".", "epoch_cache", "[", "setname", "]", "[", "metric", "]", ">=", "self", ".", "current_best", "[", "setname", "]", "[", "'acc'", "]", ":", "\n", "                ", "self", ".", "previous_bests", "[", "setname", "]", ".", "append", "(", "copy", ".", "copy", "(", "self", ".", "current_best", "[", "setname", "]", ")", ")", "\n", "self", ".", "current_best", "[", "setname", "]", "[", "'acc'", "]", "=", "self", ".", "epoch_cache", "[", "setname", "]", "[", "metric", "]", "\n", "self", ".", "current_best", "[", "setname", "]", "[", "'path'", "]", "=", "checkpointpath", "\n", "self", ".", "current_best", "[", "setname", "]", "[", "'epoch'", "]", "=", "current_epoch", "\n", "is_updated", "[", "setname", "]", "=", "True", "\n", "\n", "", "", "return", "is_updated", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.reset_epoch_cache": [[324, 330], ["ptracker.PerformanceBatch", "ptracker.PerformanceBatch", "ptracker.PerformanceBatch"], "methods", ["None"], ["", "def", "reset_epoch_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\" Resets the epoch cache. Call this before the next epoch, but after save_to_logfile() otherwise all the performances \n        logged during the epoch will never be recovered. \"\"\"", "\n", "self", ".", "epoch_cache", "=", "{", "\"train\"", ":", "PerformanceBatch", "(", ")", ",", "\n", "\"val\"", ":", "PerformanceBatch", "(", ")", ",", "\n", "\"test\"", ":", "PerformanceBatch", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.get_performance_str": [[331, 351], ["None"], "methods", ["None"], ["", "def", "get_performance_str", "(", "self", ",", "metrics", "=", "[", "'avr_accuracy'", ",", "'avr_loss'", "]", ",", "\n", "abbrev", "=", "{", "'avr_accuracy'", ":", "'acc'", ",", "'avr_loss'", ":", "'loss'", "}", ")", ":", "\n", "        ", "\"\"\"\n        Returns the accumulated performances so far in the format of a string\n        :param metrics: metrics to be returned in from of a string\n        :param abbrev: abbreviations for the metric names to display for easier viewing\n        \"\"\"", "\n", "mystr", "=", "\"\"", "\n", "if", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "mystr", "+=", "\"best_epoch={} best_acc={:.3f} \"", ".", "format", "(", "\n", "self", ".", "current_best", "[", "self", ".", "mode", "]", "[", "'epoch'", "]", ",", "\n", "self", ".", "current_best", "[", "self", ".", "mode", "]", "[", "'acc'", "]", "\n", ")", "\n", "\n", "", "if", "self", ".", "epoch_cache", "[", "self", ".", "mode", "]", "[", "\"num_performances\"", "]", ">", "0", ":", "\n", "            ", "for", "m", "in", "metrics", ":", "\n", "                ", "mystr", "+=", "\"{}={:.3f} \"", ".", "format", "(", "abbrev", "[", "m", "]", ",", "self", ".", "epoch_cache", "[", "self", ".", "mode", "]", "[", "m", "]", ")", "\n", "", "return", "mystr", "\n", "", "else", ":", "\n", "            ", "return", "\"Use ptracker.add_task_performance() to track performance! \"", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.save_logfile": [[352, 356], ["open", "json.dump", "ptracker.PerformanceTracker.to_dict"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.to_dict"], ["", "", "def", "save_logfile", "(", "self", ",", "filepath", ",", "setnames", "=", "[", "]", ")", ":", "\n", "        ", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "to_dict", "(", "setnames", ")", ",", "f", ",", "indent", "=", "2", ",", "cls", "=", "NumpyEncoder", ")", "# NumpyEncoder turns numpy arrays into lists", "\n", "", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.load_from_logfile": [[357, 361], ["open", "ptracker.PerformanceTracker.from_dict", "json.load"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.from_dict"], ["", "def", "load_from_logfile", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "# note: numpy objects should be loaded as numpy objects again - currently they are lists.", "\n", "            ", "self", ".", "from_dict", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.to_dict": [[362, 387], ["list", "list", "list", "dct[].update", "ptracker.PerformanceTracker.epoch_cache[].to_dict", "dct[].update", "numpy.isinf", "Exception"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.to_dict"], ["", "", "def", "to_dict", "(", "self", ",", "setnames", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ")", ":", "\n", "        ", "\"\"\"\n        Turn into dict object\n        \"\"\"", "\n", "dct", "=", "{", "s", ":", "{", "}", "for", "s", "in", "setnames", "}", "\n", "\n", "dct", "[", "'current_best'", "]", "=", "self", ".", "current_best", "\n", "dct", "[", "'previous_bests'", "]", "=", "{", "\n", "'train'", ":", "list", "(", "self", ".", "previous_bests", "[", "'train'", "]", ")", ",", "\n", "'val'", ":", "list", "(", "self", ".", "previous_bests", "[", "'val'", "]", ")", ",", "\n", "'test'", ":", "list", "(", "self", ".", "previous_bests", "[", "'test'", "]", ")", "\n", "}", "\n", "\n", "for", "s", "in", "setnames", ":", "\n", "            ", "dct", "[", "s", "]", ".", "update", "(", "{", "\n", "\"best_acc\"", ":", "self", ".", "current_best", "[", "s", "]", "[", "'acc'", "]", ",", "\n", "\"best_epoch_checkpoint_path\"", ":", "self", ".", "current_best", "[", "s", "]", "[", "'path'", "]", "\n", "}", ")", "\n", "epoch_performance", "=", "self", ".", "epoch_cache", "[", "s", "]", ".", "to_dict", "(", "with_performances", "=", "self", ".", "args", "[", "s", "]", "[", "'save_task_performance'", "]", ")", "\n", "dct", "[", "s", "]", ".", "update", "(", "epoch_performance", ")", "\n", "if", "s", "==", "'train'", ":", "\n", "                ", "if", "np", ".", "isinf", "(", "epoch_performance", "[", "'avr_loss'", "]", ")", ":", "\n", "                    ", "raise", "Exception", "(", "\"Loss is out of control.\"", ")", "\n", "\n", "", "", "", "return", "dct", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.from_dict": [[388, 415], ["collections.deque", "collections.deque", "collections.deque", "ptracker.PerformanceBatch.from_dict", "ptracker.PerformanceBatch"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.from_dict"], ["", "def", "from_dict", "(", "self", ",", "dct", ",", "reset_epoch", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Load from dict object\n        \"\"\"", "\n", "if", "'current_best'", "in", "dct", ":", "\n", "            ", "self", ".", "current_best", "=", "dct", "[", "'current_best'", "]", "\n", "del", "dct", "[", "'current_best'", "]", "\n", "\n", "", "if", "'previous_bests'", "in", "dct", ":", "\n", "            ", "pb_dct", "=", "dct", "[", "'previous_bests'", "]", "\n", "self", ".", "previous_bests", "=", "{", "\n", "'train'", ":", "deque", "(", "pb_dct", "[", "'train'", "]", ",", "maxlen", "=", "self", ".", "deque_maxlen", ")", ",", "\n", "'val'", ":", "deque", "(", "pb_dct", "[", "'val'", "]", ",", "maxlen", "=", "self", ".", "deque_maxlen", ")", ",", "\n", "'test'", ":", "deque", "(", "pb_dct", "[", "'test'", "]", ",", "maxlen", "=", "self", ".", "deque_maxlen", ")", "\n", "}", "\n", "del", "dct", "[", "'previous_bests'", "]", "\n", "\n", "", "for", "setname", "in", "dct", ":", "\n", "            ", "self", ".", "current_best", "[", "setname", "]", "[", "'acc'", "]", "=", "dct", "[", "setname", "]", "[", "\"best_acc\"", "]", "\n", "self", ".", "current_best", "[", "setname", "]", "[", "'path'", "]", "=", "dct", "[", "setname", "]", "[", "\"best_epoch_checkpoint_path\"", "]", "\n", "\n", "if", "reset_epoch", ":", "\n", "                ", "del", "dct", "[", "setname", "]", "[", "\"best_acc\"", "]", "\n", "del", "dct", "[", "setname", "]", "[", "\"best_epoch_checkpoint_path\"", "]", "\n", "self", ".", "epoch_cache", "[", "setname", "]", "=", "PerformanceBatch", "(", ")", ".", "from_dict", "(", "dct", "[", "setname", "]", ")", "\n", "\n", "", "", "return", "dct", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.compute_accuracy": [[10, 23], ["numpy.shape", "numpy.shape", "len", "len", "numpy.sum", "numpy.sum", "numpy.all"], "function", ["None"], ["def", "compute_accuracy", "(", "y_pred", ",", "y_true", ")", ":", "\n", "    ", "size_pred", "=", "np", ".", "shape", "(", "y_pred", ")", "\n", "size_true", "=", "np", ".", "shape", "(", "y_true", ")", "\n", "\n", "if", "len", "(", "size_pred", ")", "==", "1", ":", "\n", "        ", "n", "=", "size_pred", "[", "0", "]", "\n", "acc", "=", "np", ".", "sum", "(", "y_pred", "==", "y_true", ")", "*", "1.0", "/", "n", "\n", "\n", "", "elif", "len", "(", "size_pred", ")", "==", "2", ":", "\n", "        ", "n", "=", "size_pred", "[", "0", "]", "\n", "acc", "=", "np", ".", "sum", "(", "np", ".", "all", "(", "y_pred", "==", "y_true", ",", "1", ")", ")", "*", "1.0", "/", "n", "\n", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.update_confusion_matrix": [[24, 32], ["zip", "conf_matrix.sum"], "function", ["None"], ["", "def", "update_confusion_matrix", "(", "y_pred", ",", "y_true", ",", "conf_matrix", ",", "normalise", "=", "True", ")", ":", "\n", "    ", "for", "y", ",", "y_p", "in", "zip", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "conf_matrix", "[", "y", ",", "y_p", "]", "+=", "1", "\n", "\n", "", "if", "normalise", ":", "\n", "        ", "conf_matrix", "/=", "conf_matrix", ".", "sum", "(", ")", "\n", "\n", "", "return", "conf_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.update_class_freq": [[34, 42], ["class_freq.sum"], "function", ["None"], ["", "def", "update_class_freq", "(", "labels", ",", "class_freq", ",", "normalise", "=", "False", ")", ":", "\n", "    ", "for", "y", "in", "labels", ":", "\n", "        ", "class_freq", "[", "y", ",", "y_p", "]", "+=", "1", "\n", "\n", "", "if", "normalise", ":", "\n", "        ", "class_freq", "/=", "class_freq", ".", "sum", "(", ")", "\n", "\n", "", "return", "conf_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.update_confusion_matrix_with_checks": [[43, 56], ["max", "numpy.shape", "numpy.zeros", "ptracker.update_confusion_matrix", "ptracker.update_confusion_matrix", "max", "max", "update_confusion_matrix.sum"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.update_confusion_matrix", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.update_confusion_matrix"], ["", "def", "update_confusion_matrix_with_checks", "(", "y_pred", ",", "y_true", ",", "conf_matrix", ",", "normalise", "=", "True", ",", "max_lbl", "=", "None", ")", ":", "\n", "    ", "if", "max_lbl", "is", "None", ":", "\n", "        ", "max_lbl", "=", "max", "(", "max", "(", "y_pred", ")", ",", "max", "(", "y_true", ")", ")", "\n", "", "conf_len", "=", "np", ".", "shape", "(", "conf_matrix", ")", "[", "0", "]", "\n", "if", "conf_len", "<=", "max_lbl", ":", "\n", "        ", "new_conf_matrix", "=", "np", ".", "zeros", "(", "(", "max_lbl", "+", "1", ",", "max_lbl", "+", "1", ")", ")", "\n", "new_conf_matrix", "[", ":", "conf_len", ",", ":", "conf_len", "]", "=", "conf_matrix", "\n", "cm", "=", "update_confusion_matrix", "(", "y_pred", ",", "y_true", ",", "new_conf_matrix", ")", "\n", "", "else", ":", "\n", "        ", "cm", "=", "update_confusion_matrix", "(", "y_pred", ",", "y_true", ",", "conf_matrix", ")", "\n", "", "if", "normalise", ":", "\n", "        ", "cm", "=", "cm", "/", "cm", ".", "sum", "(", ")", "\n", "", "return", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.confusion_matrix_combine": [[57, 67], ["max", "numpy.zeros", "enumerate", "numpy.sum", "numpy.shape"], "function", ["None"], ["", "def", "confusion_matrix_combine", "(", "conf_matrices", ",", "normalise", "=", "True", ")", ":", "\n", "    ", "lens", "=", "[", "np", ".", "shape", "(", "cm", ")", "[", "0", "]", "for", "cm", "in", "conf_matrices", "]", "\n", "max_len", "=", "max", "(", "lens", ")", "\n", "new_cm", "=", "np", ".", "zeros", "(", "(", "max_len", ",", "max_len", ")", ")", "\n", "for", "i", ",", "cm", "in", "enumerate", "(", "conf_matrices", ")", ":", "\n", "        ", "cm_len", "=", "lens", "[", "i", "]", "\n", "new_cm", "[", ":", "cm_len", ",", ":", "cm_len", "]", "+=", "cm", "\n", "", "if", "normalise", ":", "\n", "        ", "new_cm", "/=", "np", ".", "sum", "(", "new_cm", ")", "\n", "", "return", "new_cm", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.save_conf_matrix_visualisation": [[68, 78], ["numpy.shape", "pd.DataFrame", "plt.figure", "sn.heatmap", "sn.heatmap.get_figure", "ax.get_figure.savefig", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "save_conf_matrix_visualisation", "(", "conf_matrix", ",", "filepath", ")", ":", "\n", "    ", "\"\"\"\n    Saves visualisation of the confusion matrix saved in the task performance\n    \"\"\"", "\n", "n_row", ",", "n_col", "=", "np", ".", "shape", "(", "conf_matrix", ")", "\n", "df_cm", "=", "pd", ".", "DataFrame", "(", "array", ",", "index", "=", "np", ".", "arange", "(", "n_row", ")", ",", "columns", "=", "np", ".", "arange", "(", "n_col", ")", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "35", ",", "35", ")", ")", "\n", "ax", "=", "sn", ".", "heatmap", "(", "df_cm", ",", "annot", "=", "True", ")", "\n", "fig", "=", "ax", ".", "get_figure", "(", ")", "\n", "fig", ".", "savefig", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.class_freq_combine": [[79, 89], ["max", "numpy.zeros", "enumerate", "numpy.sum", "numpy.shape"], "function", ["None"], ["", "def", "class_freq_combine", "(", "class_freqs", ",", "normalise", "=", "False", ")", ":", "\n", "    ", "lens", "=", "[", "np", ".", "shape", "(", "cf", ")", "[", "0", "]", "for", "cf", "in", "class_freqs", "]", "\n", "max_len", "=", "max", "(", "lens", ")", "\n", "new_cf", "=", "np", ".", "zeros", "(", "max_len", ")", "\n", "for", "i", ",", "cf", "in", "enumerate", "(", "class_freqs", ")", ":", "\n", "        ", "cf_len", "=", "lens", "[", "i", "]", "\n", "new_cf", "[", ":", "cm_len", "]", "+=", "cf", "\n", "", "if", "normalise", ":", "\n", "        ", "new_cf", "/=", "np", ".", "sum", "(", "new_cf", ")", "\n", "", "return", "new_cf", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.subtract_confusion_matrices": [[90, 98], ["numpy.shape", "numpy.shape"], "function", ["None"], ["", "def", "subtract_confusion_matrices", "(", "conf_matrix1", ",", "conf_matrix2", ")", ":", "\n", "    ", "shape1", "=", "np", ".", "shape", "(", "conf_matrix1", ")", "\n", "shape2", "=", "np", ".", "shape", "(", "conf_matrix2", ")", "\n", "if", "shape1", "[", "0", "]", ">", "shape2", "[", "0", "]", ":", "\n", "        ", "conf_matrix1", "=", "conf_matrix1", "[", ":", "shape2", "[", "0", "]", ",", ":", "shape2", "[", "0", "]", "]", "\n", "", "elif", "shape1", "[", "0", "]", "<", "shape2", "[", "0", "]", ":", "\n", "        ", "conf_matrix2", "=", "conf_matrix2", "[", ":", "shape1", "[", "0", "]", ",", ":", "shape1", "[", "0", "]", "]", "\n", "", "return", "conf_matrix1", "-", "conf_matrix2", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.compute_errors": [[99, 105], ["numpy.diag", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.diag", "numpy.diag"], "function", ["None"], ["", "def", "compute_errors", "(", "conf_matrix", ")", ":", "\n", "    ", "TP", "=", "np", ".", "diag", "(", "conf_matrix", ")", "\n", "FN", "=", "np", ".", "sum", "(", "conf_matrix", "-", "np", ".", "diag", "(", "TP", ")", ",", "axis", "=", "1", ")", "\n", "FP", "=", "np", ".", "sum", "(", "conf_matrix", "-", "np", ".", "diag", "(", "TP", ")", ",", "axis", "=", "0", ")", "\n", "TN", "=", "np", ".", "sum", "(", "conf_matrix", ")", "-", "(", "TP", "+", "FN", "+", "FP", ")", "\n", "return", "TP", ",", "TN", ",", "FP", ",", "FN", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.compute_precision_and_recall": [[106, 110], ["None"], "function", ["None"], ["", "def", "compute_precision_and_recall", "(", "TP", ",", "TN", ",", "FP", ",", "FN", ")", ":", "\n", "    ", "precision", "=", "TP", "/", "(", "TP", "+", "FP", ")", "\n", "recall", "=", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "return", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.compute_precision_and_recall_from_matrix": [[111, 116], ["ptracker.compute_errors"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.compute_errors"], ["", "def", "compute_precision_and_recall_from_matrix", "(", "conf_matrix", ")", ":", "\n", "    ", "TP", ",", "TN", ",", "FP", ",", "FN", "=", "compute_errors", "(", "conf_matrix", ")", "\n", "precision", "=", "TP", "/", "(", "TP", "+", "FP", ")", "\n", "recall", "=", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "return", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.compute_per_class_accuracies_from_matrix": [[117, 120], ["ptracker.compute_errors"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.compute_errors"], ["", "def", "compute_per_class_accuracies_from_matrix", "(", "conf_matrix", ")", ":", "\n", "    ", "TP", ",", "TN", ",", "FP", ",", "FN", "=", "compute_errors", "(", "conf_matrix", ")", "\n", "return", "(", "TP", "+", "TN", ")", "/", "(", "TP", "+", "FP", "+", "FN", "+", "TN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.get_bwt": [[121, 128], ["numpy.mean", "acc.append"], "function", ["None"], ["", "def", "get_bwt", "(", "task_performances", ")", ":", "\n", "    ", "prev_task", "=", "task_performances", "[", "0", "]", "\n", "acc", "=", "[", "]", "\n", "for", "task", "in", "task_performances", "[", "1", ":", "]", ":", "\n", "        ", "acc", ".", "append", "(", "prev_task", "[", "'accuracy'", "]", "-", "task", "[", "'accuracy'", "]", ")", "\n", "prev_task", "=", "task", "\n", "", "return", "np", ".", "mean", "(", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.__init__": [[19, 41], ["print", "datetime.datetime.fromtimestamp().strftime", "builder.ExperimentBuilder.create_experiment_folder", "builder.State", "utils.ptracker.PerformanceTracker", "datetime.datetime.fromtimestamp", "time.time"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.create_experiment_folder"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "tasks", ",", "datasets", ",", "device", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Builds a single experiment based on the configuration parameters.\n        \"\"\"", "\n", "print", "(", "'Setting up Experiment Builder'", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "datasets", "=", "datasets", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "task_args", "=", "args", ".", "task_args", "\n", "\n", "self", ".", "experiment_timestamp", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "time", ".", "time", "(", ")", ")", ".", "strftime", "(", "'%Y%m%d%H%M%S'", ")", "\n", "self", ".", "create_experiment_folder", "(", ")", "\n", "\n", "self", ".", "state", "=", "State", "(", "args", ".", "seed", ")", "\n", "self", ".", "ptracker", "=", "PerformanceTracker", "(", "\n", "folder", "=", "self", ".", "performance_folder", ",", "\n", "args", "=", "self", ".", "args", ".", "ptracker_args", "\n", ")", "\n", "self", ".", "val_or_test", "=", "args", ".", "val_or_test", "\n", "self", ".", "template", "=", "'epoch-{:03d}'", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.create_experiment_folder": [[43, 76], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "print", "print", "shutil.rmtree", "open", "json.dump", "os.path.abspath"], "methods", ["None"], ["", "def", "create_experiment_folder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Creates the experiment folder where checkpoint, configs, and performance is saved\n        \"\"\"", "\n", "if", "self", ".", "args", ".", "experiment_folder", "is", "None", ":", "\n", "            ", "self", ".", "args", ".", "experiment_folder", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "self", ".", "args", ".", "results_folder", ")", ",", "self", ".", "args", ".", "experiment_name", ")", "\n", "\n", "", "self", ".", "experiment_folder", "=", "self", ".", "args", ".", "experiment_folder", "\n", "self", ".", "checkpoint_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_folder", ",", "'checkpoint'", ")", "\n", "self", ".", "log_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_folder", ",", "'logs'", ")", "\n", "self", ".", "performance_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_folder", ",", "'performance'", ")", "\n", "self", ".", "visualisation_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_folder", ",", "'visualisation'", ")", "\n", "\n", "if", "self", ".", "args", ".", "dummy_run", ":", "\n", "            ", "print", "(", "'NOT Creating: '", ",", "self", ".", "experiment_folder", ")", "\n", "return", "\n", "\n", "", "print", "(", "'Experiment folder: '", ",", "self", ".", "experiment_folder", ")", "\n", "if", "self", ".", "args", ".", "continue_from", "in", "[", "None", ",", "'None'", ",", "'from_scratch'", "]", "and", "self", ".", "args", ".", "clean_folder", ":", "\n", "            ", "print", "(", "'CLEARING FOLDER'", ")", "\n", "shutil", ".", "rmtree", "(", "self", ".", "experiment_folder", ",", "ignore_errors", "=", "True", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "self", ".", "experiment_folder", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "checkpoint_folder", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "log_folder", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "performance_folder", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "visualisation_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_folder", ",", "'config_{}.json'", ".", "format", "(", "self", ".", "experiment_timestamp", ")", ")", "\n", "\n", "# Save args into a file", "\n", "with", "open", "(", "config_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "args", ",", "f", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.load_from_checkpoint": [[78, 114], ["os.path.isfile", "torch.cuda.is_available", "print", "torch.load", "builder.ExperimentBuilder.state.from_dict", "builder.ExperimentBuilder.model.load_state_dict", "builder.ExperimentBuilder.ptracker.load_from_logfile", "os.path.join", "builder.ExperimentBuilder.model.load_state_dict", "os.path.isfile", "Exception", "storage.cuda", "builder.ExperimentBuilder.model.state_dict", "builder.ExperimentBuilder.update", "builder.ExperimentBuilder.model.load_state_dict", "model_.items"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.from_dict", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.load_state_dict", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.load_from_logfile", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.load_state_dict", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.state_dict", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.load_state_dict"], ["", "", "def", "load_from_checkpoint", "(", "self", ",", "checkpoint_name_or_path", ",", "load_model_only", "=", "False", ",", "load_backbone_only", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Loads the model and state of the experiment from a checkpoint file\n        \"\"\"", "\n", "#\u00a0Find checkpoint", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint_name_or_path", ")", ":", "\n", "            ", "filepath", "=", "checkpoint_name_or_path", "\n", "", "else", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_folder", ",", "checkpoint_name_or_path", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "                ", "raise", "Exception", "(", "'Invalid checkpoint name or path: {}'", ".", "format", "(", "checkpoint_name_or_path", ")", ")", "\n", "\n", "# Device mapping", "\n", "", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "map_location", "=", "lambda", "storage", ",", "location", ":", "storage", ".", "cuda", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "map_location", "=", "'cpu'", "\n", "\n", "", "print", "(", "'Loading from checkpoint'", ",", "filepath", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filepath", ",", "map_location", "=", "map_location", ")", "\n", "state_", ",", "model_", ",", "performance_log", "=", "checkpoint", "[", "'state'", "]", ",", "checkpoint", "[", "'model'", "]", ",", "checkpoint", "[", "'performance_log'", "]", "\n", "\n", "if", "load_model_only", "and", "not", "load_backbone_only", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "model_", ")", "\n", "return", "\n", "\n", "", "elif", "load_backbone_only", ":", "\n", "            ", "model_layers", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "to_load", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "model_", ".", "items", "(", ")", "if", "'backbone.'", "in", "k", "and", "k", "in", "model_layers", "}", "# load only if in model", "\n", "model_layers", ".", "update", "(", "to_load", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "model_layers", ")", "\n", "return", "\n", "\n", "", "self", ".", "state", ".", "from_dict", "(", "state_", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "model_", ")", "\n", "self", ".", "ptracker", ".", "load_from_logfile", "(", "performance_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.save_checkpoint": [[116, 194], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "builder.ExperimentBuilder.state.to_dict", "builder.ExperimentBuilder.model.state_dict", "print", "torch.save", "builder.ExperimentBuilder.ptracker.save_logfile", "print", "builder.ExperimentBuilder.template.format", "builder.ExperimentBuilder.ptracker.update_best", "os.path.isfile", "open", "f.write", "open", "f.write", "os.path.join", "print", "os.remove", "os.path.join", "print", "os.remove", "in_allowed_epochs", "builder.ExperimentBuilder.template.format", "in_allowed_epochs", "builder.ExperimentBuilder.template.format"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.to_dict", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.state_dict", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.save_logfile", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.update_best"], ["", "def", "save_checkpoint", "(", "self", ",", "checkpoint_name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Saves the model and state of the experiment in a checkpoint file\n        \"\"\"", "\n", "if", "self", ".", "args", ".", "dummy_run", ":", "\n", "            ", "print", "(", "'dummy run, no saving'", ")", "\n", "return", "(", "self", ".", "state", ".", "epoch", "+", "1", ")", ">=", "self", ".", "args", ".", "num_epochs", "\n", "\n", "", "if", "checkpoint_name", "is", "None", ":", "\n", "            ", "checkpoint_name", "=", "self", ".", "template", ".", "format", "(", "self", ".", "state", ".", "epoch", ")", "\n", "\n", "", "checkpointpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_folder", ",", "checkpoint_name", ")", "\n", "performance_logfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "performance_folder", ",", "checkpoint_name", "+", "'.json'", ")", "\n", "checkpoint_path_to_best", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_folder", ",", "'path_to_best'", ")", "\n", "ptracker_path_to_best", "=", "os", ".", "path", ".", "join", "(", "self", ".", "performance_folder", ",", "'path_to_best'", ")", "\n", "\n", "# Updates best val model if the validation score beats the previous best", "\n", "is_val_best_updated", "=", "self", ".", "ptracker", ".", "update_best", "(", "checkpointpath", ",", "self", ".", "state", ".", "epoch", ")", "[", "'val'", "]", "\n", "is_val_best_updated", "=", "is_val_best_updated", "# or if no validation", "\n", "\n", "# Update path_to_best if best updated or no previous 'path to best'", "\n", "if", "is_val_best_updated", "or", "self", ".", "args", ".", "no_val_loop", "or", "not", "os", ".", "path", ".", "isfile", "(", "checkpoint_path_to_best", ")", ":", "\n", "            ", "with", "open", "(", "checkpoint_path_to_best", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "checkpointpath", ")", "\n", "", "with", "open", "(", "ptracker_path_to_best", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "performance_logfile", ")", "\n", "\n", "#\u00a0Make checkpoint", "\n", "", "", "checkpoint", "=", "{", "}", "\n", "checkpoint", "[", "'state'", "]", "=", "self", ".", "state", ".", "to_dict", "(", ")", "\n", "checkpoint", "[", "'model'", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "checkpoint", "[", "'performance_log'", "]", "=", "performance_logfile", "\n", "\n", "# Save checkpoint", "\n", "print", "(", "'saving to'", ",", "checkpointpath", ",", "'\\t\\t'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpointpath", ")", "\n", "self", ".", "ptracker", ".", "save_logfile", "(", "performance_logfile", ",", "[", "'train'", ",", "'val'", "]", ")", "\n", "\n", "# Delete checkpoints due to heavy storage", "\n", "if", "(", "self", ".", "args", ".", "model", "in", "[", "'matchingnet'", ",", "'btaml'", "]", ")", "or", "(", "'ResNet'", "in", "self", ".", "args", ".", "backbone", ")", "or", "self", ".", "args", ".", "storage_friendly", ":", "\n", "            ", "in_allowed_epochs", "=", "lambda", "x", ":", "x", "%", "40", "==", "19", "# allowed every 40th epoch, e.i. at 19th, 59th, 99th etc..", "\n", "\n", "current_epoch", "=", "self", ".", "state", ".", "epoch", "\n", "previous_epoch", "=", "self", ".", "state", ".", "epoch", "-", "1", "\n", "\n", "if", "not", "self", ".", "args", ".", "no_val_loop", ":", "\n", "                ", "current_best_epoch", "=", "self", ".", "ptracker", ".", "current_best", "[", "'val'", "]", "[", "'epoch'", "]", "\n", "previous_best_epoch", "=", "self", ".", "ptracker", ".", "previous_bests", "[", "'val'", "]", "[", "-", "1", "]", "[", "'epoch'", "]", "\n", "", "else", ":", "\n", "                ", "current_best_epoch", "=", "current_epoch", "\n", "previous_best_epoch", "=", "previous_epoch", "\n", "\n", "# remove previous epoch checkpoint (unless current best or in allowed epochs)", "\n", "", "if", "previous_epoch", ">=", "0", "and", "not", "in_allowed_epochs", "(", "previous_epoch", ")", "and", "previous_epoch", "!=", "current_best_epoch", ":", "\n", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_folder", ",", "self", ".", "template", ".", "format", "(", "previous_epoch", ")", ")", "\n", "print", "(", "'removing'", ",", "path", ",", "'\\t\\t'", ")", "\n", "os", ".", "remove", "(", "path", ")", "\n", "\n", "# remove previous best epoch checkpoint if best has been updated (unless is in allowed epochs)", "\n", "", "if", "is_val_best_updated", "and", "previous_best_epoch", ">=", "0", "and", "not", "in_allowed_epochs", "(", "previous_best_epoch", ")", "and", "previous_best_epoch", "!=", "current_best_epoch", "and", "previous_best_epoch", "!=", "previous_epoch", ":", "\n", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_folder", ",", "self", ".", "template", ".", "format", "(", "previous_best_epoch", ")", ")", "\n", "print", "(", "'removing'", ",", "path", ",", "'\\t\\t'", ")", "\n", "os", ".", "remove", "(", "path", ")", "\n", "\n", "# Stop criterion ", "\n", "", "", "if", "self", ".", "args", ".", "num_epochs", "is", "None", ":", "\n", "            ", "current_best_epoch", "=", "self", ".", "ptracker", ".", "current_best", "[", "'val'", "]", "[", "'epoch'", "]", "\n", "return", "(", "self", ".", "state", ".", "epoch", "-", "current_best_epoch", ")", ">", "30", "\n", "\n", "", "return", "(", "self", ".", "state", ".", "epoch", "+", "1", ")", ">=", "self", ".", "args", ".", "num_epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.load_pretrained": [[196, 243], ["print", "utils.utils.find", "sorted", "print", "builder.ExperimentBuilder.load_from_checkpoint", "builder.ExperimentBuilder.ptracker.reset_epoch_cache", "builder.ExperimentBuilder.state.next_epoch", "builder.ExperimentBuilder.model.next_epoch", "print", "builder.ExperimentBuilder.load_from_checkpoint", "builder.ExperimentBuilder.args.continue_from.isdigit", "open", "f.read", "os.path.join", "print", "builder.ExperimentBuilder.load_from_checkpoint", "os.path.isdir", "print", "builder.ExperimentBuilder.load_from_checkpoint", "os.path.join", "int", "os.path.isfile", "open", "f.read", "Exception", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.find", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.load_from_checkpoint", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.reset_epoch_cache", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.next_epoch", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.next_epoch", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.load_from_checkpoint", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.load_from_checkpoint", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.load_from_checkpoint"], ["", "def", "load_pretrained", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Loads model from self.args.continue_from\n        Return value indicates whether to continue from next epoch\n        \"\"\"", "\n", "print", "(", "'Continuing from'", ",", "self", ".", "args", ".", "continue_from", ")", "\n", "\n", "if", "self", ".", "args", ".", "continue_from", "in", "[", "None", ",", "'None'", ",", "'from_scratch'", "]", "or", "self", ".", "args", ".", "dummy_run", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "args", ".", "continue_from", "==", "'latest'", ":", "\n", "            ", "checkpoint_names", "=", "find", "(", "'epoch*'", ",", "self", ".", "checkpoint_folder", ")", "\n", "checkpoint_names", "=", "sorted", "(", "checkpoint_names", ")", "\n", "self", ".", "args", ".", "continue_from", "=", "checkpoint_names", "[", "-", "1", "]", "\n", "print", "(", "'LATEST'", ",", "self", ".", "args", ".", "continue_from", ")", "\n", "self", ".", "load_from_checkpoint", "(", "self", ".", "args", ".", "continue_from", ",", "load_backbone_only", "=", "self", ".", "args", ".", "load_backbone_only", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "continue_from", "==", "'best'", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_folder", ",", "'path_to_best'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "args", ".", "continue_from", "=", "f", ".", "read", "(", ")", "\n", "", "print", "(", "'BEST'", ",", "self", ".", "args", ".", "continue_from", ")", "\n", "self", ".", "load_from_checkpoint", "(", "self", ".", "args", ".", "continue_from", ",", "load_backbone_only", "=", "self", ".", "args", ".", "load_backbone_only", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "continue_from", ".", "isdigit", "(", ")", ":", "\n", "            ", "checkpoint_name", "=", "'epoch-{:03d}'", ".", "format", "(", "int", "(", "self", ".", "args", ".", "continue_from", ")", ")", "\n", "self", ".", "args", ".", "continue_from", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_folder", ",", "checkpoint_name", ")", "\n", "print", "(", "'EPOCH'", ",", "self", ".", "args", ".", "continue_from", ")", "\n", "self", ".", "load_from_checkpoint", "(", "self", ".", "args", ".", "continue_from", ",", "load_backbone_only", "=", "self", ".", "args", ".", "load_backbone_only", ")", "\n", "\n", "", "else", ":", "#\u00a0assume 'continue_from' contains a checkpoint folder, or if not, a filename ", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "args", ".", "continue_from", ")", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "continue_from", ",", "'checkpoint'", ",", "'path_to_best'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "filename", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "self", ".", "args", ".", "continue_from", ")", ":", "\n", "                ", "filename", "=", "self", ".", "args", ".", "continue_from", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Filename / experiment folder not found! Path given: {}\"", ".", "format", "(", "self", ".", "args", ".", "continue_from", ")", ")", "\n", "\n", "", "print", "(", "'FILE'", ",", "filename", ")", "\n", "self", ".", "load_from_checkpoint", "(", "filename", ",", "load_model_only", "=", "True", ",", "load_backbone_only", "=", "self", ".", "args", ".", "load_backbone_only", ")", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "load_backbone_only", ":", "#\u00a0since otherwise we want to start from epoch 0", "\n", "            ", "self", ".", "ptracker", ".", "reset_epoch_cache", "(", ")", "\n", "self", ".", "state", ".", "next_epoch", "(", ")", "\n", "self", ".", "model", ".", "next_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.get_task_generator": [[245, 255], ["tasks.task_generator.TaskGenerator"], "methods", ["None"], ["", "", "def", "get_task_generator", "(", "self", ",", "set_name", ",", "num_tasks", ",", "seed", ")", ":", "\n", "        ", "return", "TaskGenerator", "(", "self", ".", "datasets", "[", "set_name", "]", ",", "\n", "task", "=", "self", ".", "tasks", "[", "set_name", "]", ",", "\n", "task_args", "=", "self", ".", "task_args", "[", "set_name", "]", ",", "\n", "num_tasks", "=", "num_tasks", ",", "\n", "seed", "=", "seed", ",", "\n", "epoch", "=", "self", ".", "state", ".", "epoch", ",", "\n", "mode", "=", "set_name", ",", "\n", "fix_classes", "=", "self", ".", "args", ".", "fix_class_distribution", ",", "\n", "deterministic", "=", "self", ".", "args", ".", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.get_dataloader": [[257, 259], ["utils.dataloader.DataLoader"], "methods", ["None"], ["", "def", "get_dataloader", "(", "self", ",", "dataset", ",", "sampler", ",", "epoch", ",", "mode", ")", ":", "\n", "        ", "return", "DataLoader", "(", "dataset", ",", "sampler", ",", "self", ".", "device", ",", "epoch", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.train_model": [[261, 326], ["print", "builder.ExperimentBuilder.get_task_generator", "builder.ExperimentBuilder.ptracker.set_mode", "builder.ExperimentBuilder.get_task_generator", "builder.ExperimentBuilder.ptracker.set_mode", "builder.ExperimentBuilder.save_checkpoint", "builder.ExperimentBuilder.ptracker.reset_epoch_cache", "builder.ExperimentBuilder.state.next_epoch", "builder.ExperimentBuilder.model.next_epoch", "print", "tqdm.tqdm", "print", "builder.ExperimentBuilder.model.set_train_mean", "print", "builder.ExperimentBuilder.get_dataloader", "builder.ExperimentBuilder.model.meta_train", "train_pbar.set_description", "train_pbar.update", "tqdm.tqdm", "print", "builder.ExperimentBuilder.ptracker.get_performance_str", "builder.ExperimentBuilder.model.get_summary_str", "builder.ExperimentBuilder.get_dataloader", "builder.ExperimentBuilder.model.meta_val", "pbar_val.set_description", "pbar_val.update", "builder.ExperimentBuilder.ptracker.get_performance_str", "builder.ExperimentBuilder.model.get_summary_str", "builder.ExperimentBuilder.ptracker.get_performance_str", "builder.ExperimentBuilder.model.get_summary_str", "builder.ExperimentBuilder.ptracker.get_performance_str", "builder.ExperimentBuilder.model.get_summary_str"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.get_task_generator", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.set_mode", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.get_task_generator", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.set_mode", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.save_checkpoint", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.reset_epoch_cache", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.next_epoch", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.next_epoch", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.set_train_mean", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.get_dataloader", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml_chaser.BayesianMAMLChaser.meta_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.get_performance_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.get_summary_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.get_dataloader", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.meta_val", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.get_performance_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.get_summary_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.get_performance_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.get_summary_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.get_performance_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.get_summary_str"], ["", "def", "train_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Runs the main thread of the experiment\n        \"\"\"", "\n", "\n", "if", "self", ".", "args", ".", "evaluate_on_test_set_only", ":", "\n", "            ", "return", "\n", "\n", "", "converged", "=", "False", "if", "self", ".", "args", ".", "num_epochs", "is", "None", "else", "self", ".", "state", ".", "epoch", ">=", "self", ".", "args", ".", "num_epochs", "\n", "\n", "while", "not", "converged", ":", "\n", "            ", "train_generator", "=", "self", ".", "get_task_generator", "(", "\n", "'train'", ",", "\n", "self", ".", "args", ".", "num_tasks_per_epoch", ",", "\n", "self", ".", "state", ".", "epoch_seed", ")", "\n", "\n", "self", ".", "ptracker", ".", "set_mode", "(", "'train'", ")", "\n", "\n", "# train", "\n", "with", "tqdm", ".", "tqdm", "(", "initial", "=", "0", ",", "total", "=", "self", ".", "args", ".", "num_tasks_per_epoch", ",", "disable", "=", "not", "self", ".", "args", ".", "tqdm", ")", "as", "train_pbar", ":", "\n", "                ", "for", "train_sampler", "in", "train_generator", ":", "\n", "                    ", "dataloader", "=", "self", ".", "get_dataloader", "(", "self", ".", "datasets", "[", "'train'", "]", ",", "train_sampler", ",", "self", ".", "state", ".", "epoch", ",", "'train'", ")", "\n", "self", ".", "model", ".", "meta_train", "(", "dataloader", ",", "self", ".", "ptracker", ")", "\n", "train_pbar", ".", "set_description", "(", "'Train phase {} -> {} {}'", ".", "format", "(", "\n", "self", ".", "state", ".", "epoch", ",", "self", ".", "ptracker", ".", "get_performance_str", "(", ")", ",", "self", ".", "model", ".", "get_summary_str", "(", ")", ")", ")", "\n", "train_pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "", "val_generator", "=", "self", ".", "get_task_generator", "(", "\n", "self", ".", "val_or_test", ",", "\n", "self", ".", "args", ".", "num_tasks_per_validation", ",", "\n", "self", ".", "state", ".", "epoch_seed", ")", "\n", "\n", "if", "not", "self", ".", "args", ".", "tqdm", ":", "\n", "                ", "print", "(", "'Train phase {} -> {} {}'", ".", "format", "(", "\n", "self", ".", "state", ".", "epoch", ",", "self", ".", "ptracker", ".", "get_performance_str", "(", ")", ",", "self", ".", "model", ".", "get_summary_str", "(", ")", ")", ")", "\n", "\n", "", "self", ".", "ptracker", ".", "set_mode", "(", "'val'", ")", "\n", "\n", "# simpleshot calc train dataset mean for normalisation during validation", "\n", "if", "self", ".", "args", ".", "model", "==", "'simpleshot'", ":", "\n", "                ", "self", ".", "model", ".", "set_train_mean", "(", "self", ".", "datasets", "[", "'train'", "]", ",", "istqdm", "=", "self", ".", "args", ".", "tqdm", ")", "\n", "\n", "# validation", "\n", "", "if", "not", "self", ".", "args", ".", "no_val_loop", ":", "\n", "                ", "with", "tqdm", ".", "tqdm", "(", "initial", "=", "0", ",", "total", "=", "self", ".", "args", ".", "num_tasks_per_validation", ",", "disable", "=", "not", "self", ".", "args", ".", "tqdm", ")", "as", "pbar_val", ":", "\n", "                    ", "for", "val_sampler", "in", "val_generator", ":", "\n", "                        ", "val_dataloader", "=", "self", ".", "get_dataloader", "(", "self", ".", "datasets", "[", "self", ".", "val_or_test", "]", ",", "val_sampler", ",", "self", ".", "state", ".", "epoch", ",", "'val'", ")", "\n", "self", ".", "model", ".", "meta_val", "(", "val_dataloader", ",", "self", ".", "ptracker", ")", "\n", "pbar_val", ".", "set_description", "(", "'Val phase {} -> {} {}'", ".", "format", "(", "\n", "self", ".", "state", ".", "epoch", ",", "self", ".", "ptracker", ".", "get_performance_str", "(", ")", ",", "self", ".", "model", ".", "get_summary_str", "(", ")", ")", ")", "\n", "pbar_val", ".", "update", "(", "1", ")", "\n", "\n", "", "", "if", "not", "self", ".", "args", ".", "tqdm", ":", "\n", "                    ", "print", "(", "'Val phase {} -> {} {}'", ".", "format", "(", "\n", "self", ".", "state", ".", "epoch", ",", "self", ".", "ptracker", ".", "get_performance_str", "(", ")", ",", "self", ".", "model", ".", "get_summary_str", "(", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"No validation phase; set '--no_val_loop False' \"", ")", "\n", "\n", "", "converged", "=", "self", ".", "save_checkpoint", "(", ")", "\n", "self", ".", "ptracker", ".", "reset_epoch_cache", "(", ")", "# call after save_checkpoint() otherwise performance will be lost", "\n", "self", ".", "state", ".", "next_epoch", "(", ")", "\n", "self", ".", "model", ".", "next_epoch", "(", ")", "\n", "print", "(", ")", "\n", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.evaluate_model": [[329, 346], ["os.path.join", "builder.ExperimentBuilder.load_from_checkpoint", "builder.ExperimentBuilder.evaluate_on_test", "builder.ExperimentBuilder.evaluate_on_test", "os.path.exists", "Exception", "open", "f.read"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.load_from_checkpoint", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.evaluate_on_test", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.evaluate_on_test"], ["", "def", "evaluate_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate final performance on the best model\n        \"\"\"", "\n", "if", "self", ".", "args", ".", "dummy_run", "or", "self", ".", "args", ".", "evaluate_on_test_set_only", ":", "\n", "            ", "self", ".", "evaluate_on_test", "(", ")", "\n", "return", "\n", "\n", "# Load best checkpoint path from path_to_best", "\n", "", "path_to_best", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_folder", ",", "'path_to_best'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_best", ")", ":", "\n", "            ", "raise", "Exception", "(", "'path_to_best not found: {}'", ".", "format", "(", "path_to_best", ")", ")", "\n", "", "with", "open", "(", "path_to_best", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "checkpointfile", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "self", ".", "load_from_checkpoint", "(", "checkpointfile", ")", "\n", "self", ".", "evaluate_on_test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.evaluate_on_test": [[348, 385], ["builder.ExperimentBuilder.ptracker.set_mode", "builder.ExperimentBuilder.template.format", "builder.ExperimentBuilder.get_task_generator", "builder.ExperimentBuilder.ptracker.save_logfile", "builder.ExperimentBuilder.ptracker.reset_epoch_cache", "builder.ExperimentBuilder.model.set_train_mean", "tqdm.tqdm", "print", "os.path.join", "builder.ExperimentBuilder.get_dataloader", "builder.ExperimentBuilder.model.meta_test", "pbar_val.update", "pbar_val.set_description", "builder.ExperimentBuilder.ptracker.get_performance_str", "builder.ExperimentBuilder.model.get_summary_str", "builder.ExperimentBuilder.ptracker.get_performance_str", "builder.ExperimentBuilder.model.get_summary_str"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.set_mode", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.get_task_generator", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.save_logfile", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.reset_epoch_cache", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.set_train_mean", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.ExperimentBuilder.get_dataloader", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.meta_test", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.get_performance_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.get_summary_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.get_performance_str", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.get_summary_str"], ["", "def", "evaluate_on_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates the current model on the test set\n        \"\"\"", "\n", "self", ".", "ptracker", ".", "set_mode", "(", "'test'", ")", "\n", "checkpoint_name", "=", "self", ".", "template", ".", "format", "(", "self", ".", "state", ".", "epoch", ")", "\n", "\n", "# Get train mean for simpleshot for faster performance", "\n", "if", "self", ".", "args", ".", "model", "==", "'simpleshot'", ":", "\n", "            ", "self", ".", "model", ".", "set_train_mean", "(", "self", ".", "datasets", "[", "'train'", "]", ")", "\n", "\n", "# Evaluate on test (note: seed set to experiment seed, not epoch seed, which allows for fair evaluation)", "\n", "", "generator", "=", "self", ".", "get_task_generator", "(", "'test'", ",", "self", ".", "args", ".", "num_tasks_per_testing", ",", "self", ".", "args", ".", "seed", ")", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "self", ".", "args", ".", "num_tasks_per_testing", ",", "disable", "=", "not", "self", ".", "args", ".", "tqdm", ")", "as", "pbar_val", ":", "\n", "            ", "for", "sampler", "in", "generator", ":", "\n", "                ", "dataloader", "=", "self", ".", "get_dataloader", "(", "self", ".", "datasets", "[", "'test'", "]", ",", "sampler", ",", "self", ".", "state", ".", "epoch", ",", "'test'", ")", "\n", "\n", "self", ".", "model", ".", "meta_test", "(", "dataloader", ",", "self", ".", "ptracker", ")", "\n", "pbar_val", ".", "update", "(", "1", ")", "\n", "pbar_val", ".", "set_description", "(", "'Testing ({}) -> {} {}'", ".", "format", "(", "checkpoint_name", ",", "\n", "self", ".", "ptracker", ".", "get_performance_str", "(", ")", ",", "\n", "self", ".", "model", ".", "get_summary_str", "(", ")", ")", ")", "\n", "\n", "", "", "if", "not", "self", ".", "args", ".", "tqdm", ":", "\n", "            ", "print", "(", "'Testing ({}) -> {} {}'", ".", "format", "(", "checkpoint_name", ",", "\n", "self", ".", "ptracker", ".", "get_performance_str", "(", ")", ",", "\n", "self", ".", "model", ".", "get_summary_str", "(", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "dummy_run", ":", "# no saving", "\n", "            ", "return", "\n", "\n", "", "performance_logfile", "=", "'{}_{}_{}.json'", ".", "format", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "performance_folder", ",", "checkpoint_name", ")", ",", "\n", "self", ".", "args", ".", "test_performance_tag", ",", "\n", "self", ".", "experiment_timestamp", ")", "\n", "self", ".", "ptracker", ".", "save_logfile", "(", "performance_logfile", ",", "[", "'test'", "]", ")", "\n", "self", ".", "ptracker", ".", "reset_epoch_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.__init__": [[389, 397], ["numpy.random.RandomState", "builder.State.epoch_rng.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "experiment_seed", ")", ":", "\n", "        ", "\"\"\"\n        Keeps track of the current training epoch and seed\n        \"\"\"", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "epoch_completed_in_this_run", "=", "0", "\n", "self", ".", "epoch_rng", "=", "np", ".", "random", ".", "RandomState", "(", "experiment_seed", ")", "\n", "self", ".", "epoch_seed", "=", "self", ".", "epoch_rng", ".", "randint", "(", "999999999", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.next_epoch": [[398, 402], ["builder.State.epoch_rng.randint"], "methods", ["None"], ["", "def", "next_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "self", ".", "epoch_completed_in_this_run", "+=", "1", "\n", "self", ".", "epoch_seed", "=", "self", ".", "epoch_rng", ".", "randint", "(", "999999999", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.to_dict": [[403, 408], ["None"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'epoch_seed'", ":", "self", ".", "epoch_seed", ",", "\n", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'epoch_rng'", ":", "self", ".", "epoch_rng", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.builder.State.from_dict": [[410, 414], ["None"], "methods", ["None"], ["", "def", "from_dict", "(", "self", ",", "adict", ")", ":", "\n", "        ", "self", ".", "epoch_seed", "=", "adict", "[", "'epoch_seed'", "]", "\n", "self", ".", "epoch", "=", "adict", "[", "'epoch'", "]", "\n", "self", ".", "epoch_rng", "=", "adict", "[", "'epoch_rng'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.OnePhaseDict.TYPE": [[322, 327], ["dict"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "TYPE", "(", "default", "=", "None", ")", ":", "\n", "        ", "return", "dict", "(", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "default", ",", "#vars(model_parser.parse_args([])),", "\n", "action", "=", "OnePhaseDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.OnePhaseDict.__init__": [[328, 332], ["argparse.Action.__init__", "vars", "subparser.parse_args"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "option_strings", ",", "subparser", ",", "default", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_subparser", "=", "subparser", "\n", "if", "default", "is", "None", ":", "default", "=", "vars", "(", "subparser", ".", "parse_args", "(", "[", "]", ")", ")", "\n", "super", "(", "OnePhaseDict", ",", "self", ")", ".", "__init__", "(", "option_strings", "=", "option_strings", ",", "default", "=", "default", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.OnePhaseDict.__call__": [[333, 339], ["parser_utils.from_syntactic_sugar", "parser_utils.from_syntactic_sugar", "parser_utils.update_dict_exclusive", "setattr", "vars"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.from_syntactic_sugar", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.from_syntactic_sugar", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive"], ["", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "defaults", "=", "from_syntactic_sugar", "(", "vars", "(", "namespace", ")", "[", "self", ".", "dest", "]", ")", "\n", "values", "=", "from_syntactic_sugar", "(", "values", ")", "\n", "new_values", ",", "excluded", "=", "update_dict_exclusive", "(", "defaults", ",", "values", ")", "\n", "new_values", "[", "'__excluded'", "]", "=", "excluded", "\n", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "new_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.TYPE": [[343, 348], ["dict"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "TYPE", "(", "default", "=", "None", ")", ":", "\n", "        ", "return", "dict", "(", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "default", ",", "\n", "action", "=", "ThreePhaseDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.__init__": [[349, 357], ["argparse.Action.__init__", "isinstance", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "vars", "_parser.parse_args", "subparser.items"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "option_strings", ",", "subparser", ",", "default", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "subparser", ",", "abc", ".", "Mapping", ")", ":", "\n", "            ", "subparser", "=", "{", "'train'", ":", "copy", ".", "deepcopy", "(", "subparser", ")", ",", "\n", "'val'", ":", "copy", ".", "deepcopy", "(", "subparser", ")", ",", "\n", "'test'", ":", "copy", ".", "deepcopy", "(", "subparser", ")", "}", "\n", "", "self", ".", "_subparser", "=", "subparser", "\n", "if", "default", "is", "None", ":", "default", "=", "{", "_phase", ":", "vars", "(", "_parser", ".", "parse_args", "(", "[", "]", ")", ")", "for", "_phase", ",", "_parser", "in", "subparser", ".", "items", "(", ")", "}", "\n", "super", "(", "ThreePhaseDict", ",", "self", ")", ".", "__init__", "(", "option_strings", "=", "option_strings", ",", "default", "=", "default", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.__call__": [[358, 364], ["parser_utils.expand_three_phase", "parser_utils.expand_three_phase", "parser_utils.update_dict_exclusive", "setattr", "parser_utils.from_syntactic_sugar", "parser_utils.from_syntactic_sugar", "vars"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_three_phase", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_three_phase", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.from_syntactic_sugar", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.from_syntactic_sugar"], ["", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "defaults", "=", "expand_three_phase", "(", "from_syntactic_sugar", "(", "vars", "(", "namespace", ")", "[", "self", ".", "dest", "]", ")", ")", "\n", "values", "=", "expand_three_phase", "(", "from_syntactic_sugar", "(", "values", ")", ",", "self", ".", "_subparser", ")", "\n", "new_values", ",", "excluded", "=", "update_dict_exclusive", "(", "defaults", ",", "values", ")", "\n", "new_values", "[", "'__excluded'", "]", "=", "excluded", "\n", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "new_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.PrintHelpAction.__call__": [[368, 451], ["vars", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "sys.exit", "parser.print_help", "print", "PerformanceTracker.get_parser().format_help", "print", "print", "print", "MODELS[].get_parser().format_help", "print", "print", "print", "get_dataset_parser().format_help", "print", "print", "print", "TASKS[].get_parser().format_help", "print", "print", "print", "print", "STRATEGIES[].get_parser().format_help", "print", "print", "print", "PerformanceTracker.get_parser", "STRATEGIES[].get_parser().format_help.replace", "MODELS[].get_parser", "STRATEGIES[].get_parser().format_help.replace", "get_dataset_parser", "STRATEGIES[].get_parser().format_help.replace", "TASKS[].get_parser", "STRATEGIES[].get_parser().format_help.replace", "STRATEGIES[].get_parser", "STRATEGIES[].get_parser().format_help.replace", "list", "argparse.ArgumentParser", "argparse.ArgumentParser", "argparse.ArgumentParser", "argparse.ArgumentParser", "STRATEGIES.keys", "argparse.ArgumentParser"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_dataset_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "\n", "        ", "arg_vars", "=", "vars", "(", "namespace", ")", "\n", "model", "=", "arg_vars", "[", "\"model\"", "]", "\n", "task", "=", "arg_vars", "[", "\"task\"", "]", "\n", "strategy", "=", "arg_vars", "[", "\"strategy\"", "]", "\n", "dataset", "=", "arg_vars", "[", "\"dataset\"", "]", "\n", "\n", "print_model", "=", "(", "option_string", "==", "'--help_all'", ")", "|", "(", "option_string", "==", "'--help_model'", ")", "\n", "print_dataset", "=", "(", "option_string", "==", "'--help_all'", ")", "|", "(", "option_string", "==", "'--help_dataset'", ")", "\n", "print_strategy", "=", "(", "option_string", "==", "'--help_all'", ")", "|", "(", "option_string", "==", "'--help_strategy'", ")", "\n", "print_task", "=", "(", "option_string", "==", "'--help_all'", ")", "|", "(", "option_string", "==", "'--help_task'", ")", "\n", "print_ptracker", "=", "(", "option_string", "==", "'--help_all'", ")", "|", "(", "option_string", "==", "'--help_ptracker'", ")", "\n", "\n", "if", "(", "option_string", "==", "'--help_all'", ")", ":", "\n", "            ", "parser", ".", "print_help", "(", ")", "\n", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "print", "(", "''", ",", "\"-\"", "*", "87", ")", "\n", "print", "(", "\"\\t\\t\\t\\tJSON parsable ARG OPTIONS\"", ")", "\n", "print", "(", "''", ",", "\"-\"", "*", "87", ")", "\n", "print", "(", "''", ",", "\"-\"", "*", "87", ")", "\n", "print", "(", "\"|\"", ",", "\"Note: \"", ",", "\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t|\"", ")", "\n", "print", "(", "\"|\"", ",", "\"\\t'3-phase'\"", ",", "\"args means that three separate copies of args are generated - one for\"", ",", "\"|\"", ")", "\n", "print", "(", "\"|\"", ",", "\"\\t\"", ",", "\"each of the three different phases of the experiment: train, val, test).\"", ",", "\"\\t|\"", ")", "\n", "print", "(", "\"|\"", ",", "\"\\t\"", ",", "\"Use the syntactic sugar for easy differentiation between phases:\"", ",", "\"\\t\\t|\"", ")", "\n", "print", "(", "\"|\"", ",", "\"\\t\\t\"", ",", "'\\'{\"{train,val,test,trval,eval}.[ARG1]\":[VALUE1], ... }\\''", ",", "\"\\t\\t|\"", ")", "\n", "print", "(", "''", ",", "\"-\"", "*", "87", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n", "usage_args", "=", "'\\'{\"[ARG1]\":[VALUE1], ... }\\''", "\n", "\n", "if", "print_ptracker", ":", "\n", "            ", "print", "(", "\"PTRACKER_ARGS (3-phase):\"", ")", "\n", "helpstr", "=", "PerformanceTracker", ".", "get_parser", "(", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "usage", "=", "'%(prog)s --ptracker_args {}'", ".", "format", "(", "usage_args", ")", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", "add_help", "=", "False", ")", ")", ".", "format_help", "(", ")", "\n", "print", "(", "'\\t'", "+", "helpstr", ".", "replace", "(", "'\\n'", ",", "'\\n\\t'", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n", "", "if", "print_model", ":", "\n", "            ", "print", "(", "\"MODEL_ARGS for '{}' (1-phase):\"", ".", "format", "(", "model", ")", ")", "\n", "helpstr", "=", "MODELS", "[", "model", "]", ".", "get_parser", "(", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "usage", "=", "'%(prog)s --model {} --model_args {}'", ".", "format", "(", "model", ",", "usage_args", ")", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", "add_help", "=", "False", ")", ")", ".", "format_help", "(", ")", "\n", "print", "(", "'\\t'", "+", "helpstr", ".", "replace", "(", "'\\n'", ",", "'\\n\\t'", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n", "", "if", "print_dataset", ":", "\n", "            ", "print", "(", "\"DATASET_ARGS for '{}' (3-phase)\"", ".", "format", "(", "dataset", ")", ")", "\n", "helpstr", "=", "get_dataset_parser", "(", "dataset", ",", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "usage", "=", "'%(prog)s --dataset {} --dataset_args {}'", ".", "format", "(", "dataset", ",", "usage_args", ")", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", "add_help", "=", "False", ")", ")", ".", "format_help", "(", ")", "\n", "print", "(", "'\\t'", "+", "helpstr", ".", "replace", "(", "'\\n'", ",", "'\\n\\t'", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n", "", "if", "print_task", ":", "\n", "            ", "print", "(", "\"TASK_ARGS for '{}' (3-phase)\"", ".", "format", "(", "task", ")", ")", "\n", "helpstr", "=", "TASKS", "[", "task", "]", ".", "get_parser", "(", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "usage", "=", "'%(prog)s --task {} --task_args {}'", ".", "format", "(", "task", ",", "usage_args", ")", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", "add_help", "=", "False", ")", ")", ".", "format_help", "(", ")", "\n", "print", "(", "'\\t'", "+", "helpstr", ".", "replace", "(", "'\\n'", ",", "'\\n\\t'", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n", "", "if", "print_strategy", ":", "\n", "            ", "print", "(", "\"STRATEGY_ARGS for '{}' (1-phase)\"", ".", "format", "(", "strategy", ")", ")", "\n", "if", "strategy", "is", "not", "None", ":", "\n", "                ", "helpstr", "=", "STRATEGIES", "[", "strategy", "]", ".", "get_parser", "(", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "usage", "=", "'%(prog)s --strategy {} --strategy_args {}'", ".", "format", "(", "strategy", ",", "usage_args", ")", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", "add_help", "=", "False", ")", ")", ".", "format_help", "(", ")", "\n", "print", "(", "'\\t'", "+", "helpstr", ".", "replace", "(", "'\\n'", ",", "'\\n\\t'", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"\\tStrategy unspecified (no strategy will be applied).\"", ")", "\n", "print", "(", "\"\\tSelect strategy OPTIONS: {}\"", ".", "format", "(", "list", "(", "STRATEGIES", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n", "", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict": [[12, 25], ["to_update.items", "isinstance", "parser_utils.update_dict"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict"], ["def", "update_dict", "(", "base", ",", "to_update", ")", ":", "\n", "    ", "\"\"\"\n    Updates a nested dict\n    \"\"\"", "\n", "if", "base", "is", "None", ":", "\n", "        ", "return", "to_update", "\n", "\n", "", "for", "k", ",", "v", "in", "to_update", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "abc", ".", "Mapping", ")", "and", "k", "in", "base", ":", "\n", "            ", "base", "[", "k", "]", "=", "update_dict", "(", "base", "[", "k", "]", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "base", "[", "k", "]", "=", "v", "\n", "", "", "return", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive": [[27, 46], ["to_update.items", "isinstance", "parser_utils.update_dict_exclusive", "excluded.items"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive"], ["", "def", "update_dict_exclusive", "(", "base", ",", "to_update", ")", ":", "\n", "    ", "\"\"\"\n    Updates a nested dict, excluding any parameters missing from base\n    \"\"\"", "\n", "if", "base", "is", "None", ":", "\n", "        ", "return", "to_update", "\n", "\n", "", "excluded", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "to_update", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "abc", ".", "Mapping", ")", "and", "k", "in", "base", ":", "\n", "            ", "base", "[", "k", "]", ",", "excluded", "[", "k", "]", "=", "update_dict_exclusive", "(", "base", "[", "k", "]", ",", "v", ")", "\n", "", "elif", "k", "in", "base", ":", "\n", "            ", "base", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "excluded", "[", "k", "]", "=", "v", "\n", "\n", "# filter empty", "\n", "", "", "excluded", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "excluded", ".", "items", "(", ")", "if", "v", "!=", "{", "}", "}", "\n", "return", "base", ",", "excluded", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.from_syntactic_sugar": [[48, 57], ["dict", "list", "params.items", "parser_utils.expand_key", "parser_utils.update_dict", "key.split"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_key", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict"], ["", "def", "from_syntactic_sugar", "(", "params", ")", ":", "\n", "    ", "\"\"\"\n    Splits keys containing '.', and converts into a nested dict\n    \"\"\"", "\n", "combined", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "list", "(", "params", ".", "items", "(", ")", ")", ":", "\n", "        ", "dict_item", "=", "expand_key", "(", "key", ".", "split", "(", "\".\"", ")", ",", "value", ")", "\n", "combined", "=", "update_dict", "(", "combined", ",", "dict_item", ")", "\n", "", "return", "combined", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_key": [[59, 80], ["len", "parser_utils.expand_value", "len", "dict", "parser_utils.expand_value", "parser_utils.expand_key", "dict", "parser_utils.expand_value"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_value", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_value", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_key", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_value"], ["", "def", "expand_key", "(", "keylist", ",", "value", ")", ":", "\n", "    ", "\"\"\"\n    Recursive method for converting into a nested dict\n    Splits keys containing '.', and converts into a nested dict\n    \"\"\"", "\n", "\n", "if", "len", "(", "keylist", ")", "==", "0", ":", "\n", "        ", "return", "expand_value", "(", "value", ")", "\n", "\n", "", "elif", "len", "(", "keylist", ")", "==", "1", ":", "\n", "        ", "key", "=", "'.'", ".", "join", "(", "keylist", ")", "\n", "base", "=", "dict", "(", ")", "\n", "base", "[", "key", "]", "=", "expand_value", "(", "value", ")", "\n", "return", "base", "\n", "\n", "", "else", ":", "\n", "        ", "key", "=", "keylist", "[", "0", "]", "\n", "value", "=", "expand_key", "(", "keylist", "[", "1", ":", "]", ",", "value", ")", "\n", "base", "=", "dict", "(", ")", "\n", "base", "[", "key", "]", "=", "expand_value", "(", "value", ")", "\n", "return", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_value": [[82, 87], ["isinstance", "parser_utils.from_syntactic_sugar"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.from_syntactic_sugar"], ["", "", "def", "expand_value", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "abc", ".", "Mapping", ")", ":", "# if dict", "\n", "        ", "return", "from_syntactic_sugar", "(", "v", ")", "\n", "", "else", ":", "\n", "        ", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.to_syntactic_sugar": [[89, 113], ["dict", "list", "isinstance", "args.items", "isinstance", "parser_utils.to_syntactic_sugar", "list", "to_syntactic_sugar.items", "parser_utils.to_syntactic_sugar", "parser_utils.to_syntactic_sugar", "dict", "str", "str"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.to_syntactic_sugar", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.to_syntactic_sugar", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.to_syntactic_sugar"], ["", "", "def", "to_syntactic_sugar", "(", "args", ",", "fromlvl", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "fromlvl", "=", "0", "if", "fromlvl", "is", "None", "else", "fromlvl", "\n", "\n", "if", "not", "isinstance", "(", "args", ",", "abc", ".", "Mapping", ")", ":", "# if not dict", "\n", "        ", "return", "args", "\n", "\n", "", "sugar_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "list", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "abc", ".", "Mapping", ")", ":", "# if not dict", "\n", "            ", "value", "=", "to_syntactic_sugar", "(", "value", ",", "fromlvl", "-", "1", ")", "\n", "for", "subkey", ",", "subvalue", "in", "list", "(", "value", ".", "items", "(", ")", ")", ":", "\n", "                ", "if", "fromlvl", "<=", "0", ":", "\n", "                    ", "new_key", "=", "'.'", ".", "join", "(", "[", "str", "(", "key", ")", ",", "str", "(", "subkey", ")", "]", ")", "\n", "sugar_dict", "[", "new_key", "]", "=", "to_syntactic_sugar", "(", "subvalue", ",", "fromlvl", "-", "2", ")", "\n", "", "else", ":", "\n", "                    ", "if", "key", "not", "in", "sugar_dict", ":", "\n", "                        ", "sugar_dict", "[", "key", "]", "=", "dict", "(", ")", "\n", "", "sugar_dict", "[", "key", "]", "[", "subkey", "]", "=", "to_syntactic_sugar", "(", "subvalue", ",", "fromlvl", "-", "2", ")", "\n", "", "", "", "else", ":", "\n", "            ", "sugar_dict", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "sugar_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_three_phase_and_update": [[115, 186], ["dict", "parser_utils.update_dict", "list", "dict.keys", "dict", "dict", "dict", "dict", "dict", "dict", "print", "len", "len", "bucket_clushes.append", "print", "bucket_order.index", "bucket_order.index", "set().isdisjoint", "print", "set", "set"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict"], ["", "def", "expand_three_phase_and_update", "(", "default_args", ",", "args", ",", "suppress_warning", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Updated default_args with hyperparameters in args\n    param default_args: should a dict(test=dict(), train=dict(), val=dict()) to update, containing full default arguments\n    \"\"\"", "\n", "\n", "#     print(\"default_args\",default_args)", "\n", "#     print(\"args\",args)", "\n", "#     import pdb; pdb.set_trace()", "\n", "\n", "# Place args in buckets such that they can be sorted out properly according to bucket rank", "\n", "args_in_buckets", "=", "dict", "(", "test", "=", "dict", "(", ")", ",", "train", "=", "dict", "(", ")", ",", "val", "=", "dict", "(", ")", ",", "eval", "=", "dict", "(", ")", ",", "trval", "=", "dict", "(", ")", ",", "_other", "=", "dict", "(", ")", ")", "\n", "update_dict", "(", "args_in_buckets", ",", "args", ")", "\n", "for", "param", "in", "list", "(", "args_in_buckets", ".", "keys", "(", ")", ")", ":", "# any hyperparams without an unassigned bucket go into '_other'", "\n", "        ", "if", "param", "not", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", ",", "\"eval\"", ",", "\"trval\"", ",", "\"_other\"", "]", ":", "\n", "            ", "args_in_buckets", "[", "\"_other\"", "]", "[", "param", "]", "=", "args_in_buckets", "[", "param", "]", "\n", "del", "args_in_buckets", "[", "param", "]", "\n", "\n", "# Mapping between buckets and setnames eg <param> in args['eval'][<param>] goes to args['test'] and args['val'] ", "\n", "", "", "buckets_to_setnames", "=", "{", "\n", "\"_other\"", ":", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", "]", ",", "\n", "\"trval\"", ":", "[", "\"train\"", ",", "\"val\"", "]", ",", "\n", "\"eval\"", ":", "[", "\"test\"", ",", "\"val\"", "]", ",", "\n", "\"test\"", ":", "[", "\"test\"", "]", ",", "\n", "\"val\"", ":", "[", "\"val\"", "]", ",", "\n", "\"train\"", ":", "[", "\"train\"", "]", ",", "\n", "}", "\n", "# List order defines bucket rank. Gives priority to the more specific bucket, eg eval < val", "\n", "bucket_order", "=", "[", "'_other'", ",", "'trval'", ",", "'eval'", ",", "'test'", ",", "'val'", ",", "'train'", "]", "\n", "\n", "# Goes through each bucket in turn, adding to default_args from args_in_buckets, while taking order into account", "\n", "for", "bucket", "in", "bucket_order", ":", "\n", "        ", "setnames", "=", "buckets_to_setnames", "[", "bucket", "]", "\n", "\n", "# For each hyperparam in a bucket, sort out any clashes based on bucket order", "\n", "for", "hyperparam", "in", "args_in_buckets", "[", "bucket", "]", ":", "\n", "\n", "# Detect if the hyperparam is missing from the default_args", "\n", "            ", "missing_from", "=", "[", "s", "for", "s", "in", "setnames", "if", "hyperparam", "not", "in", "default_args", "[", "s", "]", "]", "\n", "if", "len", "(", "missing_from", ")", "!=", "0", "and", "not", "suppress_warning", ":", "\n", "                ", "print", "(", "\"#\\t Hyperparameter args.{}.{} not found in default_args.{}\"", ".", "format", "(", "\n", "bucket", ",", "hyperparam", ",", "'|'", ".", "join", "(", "missing_from", ")", ")", ")", "\n", "\n", "# Detect if the hyperparam is defined in another bucket of a lower order with overlapping setnames", "\n", "", "bucket_clushes", "=", "[", "]", "\n", "for", "other_bucket", "in", "bucket_order", ":", "\n", "                ", "if", "not", "suppress_warning", "and", "hyperparam", "in", "args_in_buckets", "[", "other_bucket", "]", "and", "bucket_order", ".", "index", "(", "other_bucket", ")", "<", "bucket_order", ".", "index", "(", "bucket", ")", "and", "not", "set", "(", "buckets_to_setnames", "[", "bucket", "]", ")", ".", "isdisjoint", "(", "set", "(", "buckets_to_setnames", "[", "other_bucket", "]", ")", ")", ":", "\n", "                    ", "bucket_clushes", ".", "append", "(", "other_bucket", ")", "\n", "\n", "", "", "if", "len", "(", "bucket_clushes", ")", ">", "0", ":", "\n", "                ", "other_bucket", "=", "bucket_clushes", "[", "-", "1", "]", "#\u00a0get highest order bucket", "\n", "if", "not", "suppress_warning", ":", "\n", "                    ", "print", "(", "\"#\\t Overwriting args{}.{} = {} \\t with args{}.{} = {} \"", ".", "format", "(", "\n", "''", "if", "other_bucket", "==", "'_other'", "else", "\".{}\"", ".", "format", "(", "other_bucket", ")", ",", "\n", "hyperparam", ",", "args_in_buckets", "[", "other_bucket", "]", "[", "hyperparam", "]", ",", "\n", "''", "if", "bucket", "==", "'_other'", "else", "\".{}\"", ".", "format", "(", "bucket", ")", ",", "\n", "hyperparam", ",", "args_in_buckets", "[", "bucket", "]", "[", "hyperparam", "]", ")", ")", "\n", "\n", "# update parameter", "\n", "", "", "for", "s", "in", "setnames", ":", "\n", "                ", "if", "hyperparam", "in", "default_args", "[", "s", "]", ":", "\n", "                    ", "default_args", "[", "s", "]", "[", "hyperparam", "]", "=", "args_in_buckets", "[", "bucket", "]", "[", "hyperparam", "]", "\n", "", "elif", "not", "suppressed", ":", "\n", "                    ", "print", "(", "\"#\\t Ignoring hyperparameter args.{}.{}\"", ".", "format", "(", "s", ",", "hyperparam", ")", ")", "\n", "\n", "#     print(\"default_args\", default_args)", "\n", "#     import pdb; pdb.set_trace()", "\n", "\n", "", "", "", "", "return", "default_args", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_three_phase": [[189, 248], ["dict", "parser_utils.update_dict", "list", "update_dict.keys", "dict", "dict", "dict", "dict", "dict", "dict", "len", "bucket_clushes.append", "print", "bucket_order.index", "bucket_order.index", "set().isdisjoint", "set", "set"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict"], ["", "def", "expand_three_phase", "(", "args", ",", "suppress_warning", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Updated default_args with hyperparameters in args\n    param default_args: should a dict(test=dict(), train=dict(), val=dict()) to update, containing full default arguments\n    \"\"\"", "\n", "\n", "# Place args in buckets such that they can be sorted out properly according to bucket rank", "\n", "args_in_buckets", "=", "dict", "(", "test", "=", "dict", "(", ")", ",", "train", "=", "dict", "(", ")", ",", "val", "=", "dict", "(", ")", ",", "eval", "=", "dict", "(", ")", ",", "trval", "=", "dict", "(", ")", ",", "_other", "=", "dict", "(", ")", ")", "\n", "args_in_buckets", "=", "update_dict", "(", "args_in_buckets", ",", "args", ")", "\n", "for", "param", "in", "list", "(", "args_in_buckets", ".", "keys", "(", ")", ")", ":", "# any hyperparams without an unassigned bucket go into '_other'", "\n", "        ", "if", "param", "not", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", ",", "\"eval\"", ",", "\"trval\"", ",", "\"_other\"", "]", ":", "\n", "            ", "args_in_buckets", "[", "\"_other\"", "]", "[", "param", "]", "=", "args_in_buckets", "[", "param", "]", "\n", "del", "args_in_buckets", "[", "param", "]", "\n", "\n", "# Mapping between buckets and setnames eg <param> in args['eval'][<param>] goes to args['test'] and args['val'] ", "\n", "", "", "buckets_to_setnames", "=", "{", "\n", "\"_other\"", ":", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", "]", ",", "\n", "\"trval\"", ":", "[", "\"train\"", ",", "\"val\"", "]", ",", "\n", "\"eval\"", ":", "[", "\"test\"", ",", "\"val\"", "]", ",", "\n", "\"test\"", ":", "[", "\"test\"", "]", ",", "\n", "\"val\"", ":", "[", "\"val\"", "]", ",", "\n", "\"train\"", ":", "[", "\"train\"", "]", ",", "\n", "}", "\n", "# List order defines bucket rank. Gives priority to the more specific bucket, eg eval < val", "\n", "bucket_order", "=", "[", "'_other'", ",", "'trval'", ",", "'eval'", ",", "'test'", ",", "'val'", ",", "'train'", "]", "\n", "\n", "new_args", "=", "{", "}", "\n", "\n", "# Goes through each bucket in turn, adding to new_args from args_in_buckets, while taking order into account", "\n", "for", "bucket", "in", "bucket_order", ":", "\n", "        ", "setnames", "=", "buckets_to_setnames", "[", "bucket", "]", "\n", "\n", "# For each hyperparam in a bucket, sort out any clashes based on bucket order", "\n", "for", "hyperparam", "in", "args_in_buckets", "[", "bucket", "]", ":", "\n", "\n", "# Detect if the hyperparam is defined in another bucket of a lower order with overlapping setnames", "\n", "            ", "bucket_clushes", "=", "[", "]", "\n", "for", "other_bucket", "in", "bucket_order", ":", "\n", "                ", "if", "not", "suppress_warning", "and", "hyperparam", "in", "args_in_buckets", "[", "other_bucket", "]", "and", "bucket_order", ".", "index", "(", "other_bucket", ")", "<", "bucket_order", ".", "index", "(", "bucket", ")", "and", "not", "set", "(", "buckets_to_setnames", "[", "bucket", "]", ")", ".", "isdisjoint", "(", "set", "(", "buckets_to_setnames", "[", "other_bucket", "]", ")", ")", ":", "\n", "                    ", "bucket_clushes", ".", "append", "(", "other_bucket", ")", "\n", "\n", "", "", "if", "len", "(", "bucket_clushes", ")", ">", "0", ":", "\n", "                ", "other_bucket", "=", "bucket_clushes", "[", "-", "1", "]", "#\u00a0get highest order bucket", "\n", "if", "not", "suppress_warning", ":", "\n", "                    ", "print", "(", "\"#\\t Overwriting args{}.{} = {} \\t with args{}.{} = {} \"", ".", "format", "(", "\n", "''", "if", "other_bucket", "==", "'_other'", "else", "\".{}\"", ".", "format", "(", "other_bucket", ")", ",", "\n", "hyperparam", ",", "args_in_buckets", "[", "other_bucket", "]", "[", "hyperparam", "]", ",", "\n", "''", "if", "bucket", "==", "'_other'", "else", "\".{}\"", ".", "format", "(", "bucket", ")", ",", "\n", "hyperparam", ",", "args_in_buckets", "[", "bucket", "]", "[", "hyperparam", "]", ")", ")", "\n", "\n", "# update parameter", "\n", "", "", "for", "s", "in", "setnames", ":", "\n", "                ", "if", "s", "not", "in", "new_args", ":", "\n", "                    ", "new_args", "[", "s", "]", "=", "{", "}", "\n", "", "new_args", "[", "s", "]", "[", "hyperparam", "]", "=", "args_in_buckets", "[", "bucket", "]", "[", "hyperparam", "]", "\n", "\n", "", "", "", "return", "new_args", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.compress_three_phase": [[250, 291], ["collections.defaultdict", "enumerate", "dict", "collections.defaultdict.items", "all", "args.items", "list", "similarity_args[].append", "type", "tuple", "len", "dict", "len", "dict", "len", "dict"], "function", ["None"], ["", "def", "compress_three_phase", "(", "args_dict", ")", ":", "\n", "    ", "\"\"\"\n    Compresses an args_dict into a more compact form of dictionary\n    The args_dict should contain 'train', 'test', 'val' keys\n    \"\"\"", "\n", "\n", "similarity_args", "=", "defaultdict", "(", "lambda", ":", "list", "(", ")", ")", "\n", "\n", "setnames", "=", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", "]", "\n", "if", "not", "all", "(", "[", "(", "s", "in", "args_dict", ")", "for", "s", "in", "setnames", "]", ")", ":", "\n", "        ", "return", "args_dict", "\n", "\n", "", "for", "i", ",", "s", "in", "enumerate", "(", "setnames", ")", ":", "\n", "        ", "args", "=", "args_dict", "[", "s", "]", "\n", "for", "k", ",", "v", "in", "args", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "v", ")", "is", "list", ":", "\n", "                ", "v", "=", "tuple", "(", "v", ")", "\n", "", "similarity_args", "[", "(", "k", ",", "v", ")", "]", ".", "append", "(", "s", ")", "\n", "\n", "", "", "compressed_args", "=", "dict", "(", ")", "\n", "for", "k_v_pair", ",", "setnames", "in", "similarity_args", ".", "items", "(", ")", ":", "\n", "        ", "k", ",", "v", "=", "k_v_pair", "\n", "if", "len", "(", "setnames", ")", "==", "2", "and", "\"test\"", "in", "setnames", "and", "\"val\"", "in", "setnames", ":", "\n", "            ", "s", "=", "\"eval\"", "\n", "if", "s", "not", "in", "compressed_args", ":", "compressed_args", "[", "s", "]", "=", "dict", "(", ")", "\n", "compressed_args", "[", "s", "]", "[", "k", "]", "=", "v", "\n", "\n", "", "elif", "len", "(", "setnames", ")", "==", "2", "and", "\"train\"", "in", "setnames", "and", "\"val\"", "in", "setnames", ":", "\n", "            ", "s", "=", "\"trval\"", "\n", "if", "s", "not", "in", "compressed_args", ":", "compressed_args", "[", "s", "]", "=", "dict", "(", ")", "\n", "compressed_args", "[", "s", "]", "[", "k", "]", "=", "v", "\n", "\n", "", "elif", "len", "(", "setnames", ")", "==", "3", ":", "\n", "            ", "compressed_args", "[", "k", "]", "=", "v", "\n", "\n", "", "else", ":", "\n", "            ", "for", "s", "in", "setnames", ":", "\n", "                ", "if", "s", "not", "in", "compressed_args", ":", "compressed_args", "[", "s", "]", "=", "dict", "(", ")", "\n", "compressed_args", "[", "s", "]", "[", "k", "]", "=", "v", "\n", "\n", "", "", "", "return", "compressed_args", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.str2bool": [[294, 306], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n    Acceptable boolean type passed through stdin\n    \"\"\"", "\n", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ",", "'True'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ",", "'False'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.load_json": [[314, 318], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "json_args", "=", "json", ".", "load", "(", "fp", "=", "f", ")", "\n", "", "return", "json_args", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.my_test_cases": [[453, 581], ["None"], "function", ["None"], ["", "", "def", "my_test_cases", "(", ")", ":", "\n", "    ", "return", "[", "\n", "(", "\n", "\"\"\"--args_file test.json --args2 {\"test.version\":1.7} \"\"\"", ".", "split", "(", ")", ",", "\n", "{", "'args1'", ":", "{", "'lr3'", ":", "0.3", "}", ",", "\n", "'args2'", ":", "{", "'train'", ":", "{", "'version'", ":", "2.3", "}", ",", "\n", "'eval'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "\n", "}", ",", "{", "\n", "'args1'", ":", "{", "'lr1'", ":", "{", "'test'", ":", "0.1", ",", "'val'", ":", "0.1", "}", ",", "'lr2'", ":", "0.2", "}", ",", "\n", "'args2'", ":", "{", "\n", "'test'", ":", "{", "'version'", ":", "1.7", "}", ",", "\n", "'train'", ":", "{", "'version'", ":", "2.3", "}", ",", "\n", "'val'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "#             'args4': {'model':'abc'},", "\n", "'model'", ":", "'model'", ",", "\n", "'data'", ":", "'data'", ",", "\n", "'args_file'", ":", "'test.json'", ",", "\n", "'args5'", ":", "'tochange'", "\n", "}", ",", "\n", "{", "'args1'", ":", "{", "'lr3'", ":", "0.3", "}", ",", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "}", "\n", ")", ",", "\n", "(", "\n", "\"\"\"\"\"\"", ".", "split", "(", ")", ",", "\n", "{", "'args1'", ":", "{", "'lr3'", ":", "0.3", "}", ",", "\n", "'args2'", ":", "{", "\n", "'train'", ":", "{", "'version'", ":", "2.3", "}", ",", "\n", "'eval'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "\n", "}", ",", "{", "\n", "'args1'", ":", "{", "'lr1'", ":", "{", "'test'", ":", "0.1", ",", "'val'", ":", "0.1", "}", ",", "'lr2'", ":", "0.2", "}", ",", "\n", "'args2'", ":", "{", "\n", "'test'", ":", "{", "'version'", ":", "None", "}", ",", "\n", "'train'", ":", "{", "'version'", ":", "None", "}", ",", "\n", "'val'", ":", "{", "'version'", ":", "None", "}", "}", ",", "\n", "'args_file'", ":", "None", ",", "\n", "'model'", ":", "'model'", ",", "\n", "'data'", ":", "'data'", ",", "\n", "'args5'", ":", "'tochange'", "\n", "}", ",", "\n", "{", "}", "\n", ")", ",", "\n", "(", "\n", "\"\"\"--args_file test.json\"\"\"", ".", "split", "(", ")", ",", "\n", "{", "'args1'", ":", "{", "'lr2'", ":", "0.3", ",", "'lr3'", ":", "0.5", "}", ",", "\n", "'args2'", ":", "{", "\n", "'train'", ":", "{", "'version'", ":", "2.3", "}", ",", "\n", "'eval'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "\n", "}", ",", "{", "\n", "'args1'", ":", "{", "'lr1'", ":", "{", "'test'", ":", "0.1", ",", "'val'", ":", "0.1", "}", ",", "'lr2'", ":", "0.3", "}", ",", "\n", "'args2'", ":", "{", "\n", "'test'", ":", "{", "'version'", ":", "3.4", "}", ",", "\n", "'train'", ":", "{", "'version'", ":", "2.3", "}", ",", "\n", "'val'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args_file'", ":", "'test.json'", ",", "\n", "#             'args4': {'model':'abc'},", "\n", "'model'", ":", "'model'", ",", "\n", "'data'", ":", "'data'", ",", "\n", "'args5'", ":", "'tochange'", "\n", "}", ",", "\n", "{", "'args1'", ":", "{", "'lr3'", ":", "0.5", "}", ",", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "}", "\n", ")", ",", "\n", "(", "\n", "\"\"\"--args_file test.json\"\"\"", ".", "split", "(", ")", ",", "\n", "{", "'args1'", ":", "{", "'lr2'", ":", "0.3", ",", "'lr3'", ":", "0.66", "}", ",", "\n", "'args2'", ":", "{", "\n", "'eval'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "\n", "}", ",", "{", "\n", "'args1'", ":", "{", "'lr1'", ":", "{", "'test'", ":", "0.1", ",", "'val'", ":", "0.1", "}", ",", "'lr2'", ":", "0.3", "}", ",", "\n", "'args2'", ":", "{", "\n", "'test'", ":", "{", "'version'", ":", "3.4", "}", ",", "\n", "'train'", ":", "{", "'version'", ":", "None", "}", ",", "\n", "'val'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args_file'", ":", "'test.json'", ",", "\n", "#             'args4': {'model':'abc'},", "\n", "'model'", ":", "'model'", ",", "\n", "'data'", ":", "'data'", ",", "\n", "'args5'", ":", "'tochange'", "\n", "}", ",", "\n", "{", "'args1'", ":", "{", "'lr3'", ":", "0.66", "}", ",", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "}", "\n", ")", ",", "\n", "(", "\n", "\"\"\"--args_file test.json --args5 changed\"\"\"", ".", "split", "(", ")", ",", "\n", "{", "'args1'", ":", "{", "'lr2'", ":", "0.3", ",", "'lr3'", ":", "0.66", "}", ",", "\n", "'args2'", ":", "{", "\n", "'eval'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "\n", "}", ",", "{", "\n", "'args1'", ":", "{", "'lr1'", ":", "{", "'test'", ":", "0.1", ",", "'val'", ":", "0.1", "}", ",", "'lr2'", ":", "0.3", "}", ",", "\n", "'args2'", ":", "{", "\n", "'test'", ":", "{", "'version'", ":", "3.4", "}", ",", "\n", "'train'", ":", "{", "'version'", ":", "None", "}", ",", "\n", "'val'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args_file'", ":", "'test.json'", ",", "\n", "#             'args4': {'model':'abc'},", "\n", "'model'", ":", "'model'", ",", "\n", "'data'", ":", "'data'", ",", "\n", "'args5'", ":", "'changed'", "\n", "}", ",", "\n", "{", "'args1'", ":", "{", "'lr3'", ":", "0.66", "}", ",", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "}", "\n", ")", ",", "\n", "(", "\n", "\"\"\"--args_file test.json  --args2 {\"toexclude\":0.123} \"\"\"", ".", "split", "(", ")", ",", "\n", "{", "'args1'", ":", "{", "'lr2'", ":", "0.3", ",", "'lr3'", ":", "0.66", "}", ",", "\n", "'args2'", ":", "{", "\n", "'eval'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", ",", "\n", "'args5'", ":", "'changed'", "\n", "}", ",", "{", "\n", "'args1'", ":", "{", "'lr1'", ":", "{", "'test'", ":", "0.1", ",", "'val'", ":", "0.1", "}", ",", "'lr2'", ":", "0.3", "}", ",", "\n", "'args2'", ":", "{", "\n", "'test'", ":", "{", "'version'", ":", "3.4", "}", ",", "\n", "'train'", ":", "{", "'version'", ":", "None", "}", ",", "\n", "'val'", ":", "{", "'version'", ":", "3.4", "}", "}", ",", "\n", "'args_file'", ":", "'test.json'", ",", "\n", "#             'args4': {'model':'abc'},", "\n", "'model'", ":", "'model'", ",", "\n", "'data'", ":", "'data'", ",", "\n", "'args5'", ":", "'changed'", "\n", "}", ",", "{", "\n", "'args1'", ":", "{", "'lr3'", ":", "0.66", "}", ",", "\n", "'args2'", ":", "{", "\n", "'test'", ":", "{", "'toexclude'", ":", "0.123", "}", ",", "\n", "'train'", ":", "{", "'toexclude'", ":", "0.123", "}", ",", "\n", "'val'", ":", "{", "'toexclude'", ":", "0.123", "}", "}", ",", "\n", "'args4'", ":", "{", "'model'", ":", "'abc'", "}", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.test_parser": [[585, 660], ["pytest.mark.parametrize", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "vars", "vars", "parser_utils.update_dict_exclusive", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_known_args", "vars", "argparse.ArgumentParser", "argparse.ArgumentParser", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "excluded_args.keys", "vars", "parser_utils.update_dict_exclusive", "parser_utils.update_dict_exclusive", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_known_args", "vars", "list", "parser_utils.my_test_cases", "parser_utils.from_syntactic_sugar", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "vars.keys", "parser_utils.OnePhaseDict.TYPE", "parser_utils.ThreePhaseDict.TYPE", "type", "parser_utils.expand_three_phase", "isinstance", "parser_utils.update_dict"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.my_test_cases", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.from_syntactic_sugar", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.TYPE", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.TYPE", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_three_phase", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sysargv, json_args, target_args, target_excluded\"", ",", "my_test_cases", "(", ")", ")", "\n", "def", "test_parser", "(", "sysargv", ",", "json_args", ",", "target_args", ",", "target_excluded", ")", ":", "\n", "\n", "    ", "config_parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "config_parser", ".", "add_argument", "(", "'--args_file'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "#     base_parser.add_argument('--args_file', type=str, default=None, ", "\n", "#                              action=ArgsLoad, args_for_test_only=json_args)", "\n", "\n", "base_parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Base Parser\"", ",", "add_help", "=", "False", ",", "parents", "=", "[", "config_parser", "]", ")", "\n", "base_parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'model'", ")", "\n", "base_parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'data'", ")", "\n", "base_parser", ".", "add_argument", "(", "'--args5'", ",", "type", "=", "str", ",", "default", "=", "'tochange'", ")", "\n", "\n", "# Step 1. Get config file", "\n", "config_args", ",", "remaining_argv", "=", "config_parser", ".", "parse_known_args", "(", "sysargv", ")", "\n", "config_args", "=", "vars", "(", "config_args", ")", "\n", "if", "config_args", "[", "'args_file'", "]", "not", "in", "[", "None", ",", "'None'", ",", "'none'", ",", "''", "]", ":", "\n", "#json_args = load_json(base_args['args_file'])", "\n", "        ", "json_args", "=", "from_syntactic_sugar", "(", "json_args", ")", "\n", "json_args", "[", "'args_file'", "]", "=", "config_args", "[", "'args_file'", "]", "\n", "", "else", ":", "\n", "        ", "json_args", "=", "{", "}", "\n", "\n", "# Step 2. Update base args defaults using json", "\n", "", "default_args", "=", "vars", "(", "base_parser", ".", "parse_args", "(", "[", "]", ")", ")", "\n", "default_args", ",", "excluded_args", "=", "update_dict_exclusive", "(", "default_args", ",", "json_args", ")", "\n", "base_parser", ".", "set_defaults", "(", "**", "default_args", ")", "\n", "\n", "# Step 3. Update base args using command line args", "\n", "base_args", ",", "remaining_argv", "=", "base_parser", ".", "parse_known_args", "(", "remaining_argv", ")", "\n", "base_args", "=", "vars", "(", "base_args", ")", "\n", "\n", "# Step 4. Initilize nested parsers", "\n", "model_parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Model args\"", ")", "\n", "data_parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Data args\"", ")", "\n", "if", "base_args", "[", "'model'", "]", "==", "'model'", ":", "\n", "        ", "model_parser", ".", "add_argument", "(", "'--lr1'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "{", "'test'", ":", "0.1", ",", "'val'", ":", "0.1", "}", ")", "\n", "model_parser", ".", "add_argument", "(", "'--lr2'", ",", "type", "=", "int", ",", "default", "=", "0.2", ")", "\n", "", "if", "base_args", "[", "'data'", "]", "==", "'data'", ":", "\n", "        ", "data_parser", ".", "add_argument", "(", "'--version'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "", "nested_parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Nested Parser\"", ",", "parents", "=", "[", "base_parser", "]", ",", "add_help", "=", "False", ")", "\n", "nested_parser", ".", "add_argument", "(", "'--args1'", ",", "**", "OnePhaseDict", ".", "TYPE", "(", ")", ",", "subparser", "=", "model_parser", ")", "\n", "nested_parser", ".", "add_argument", "(", "'--args2'", ",", "**", "ThreePhaseDict", ".", "TYPE", "(", ")", ",", "subparser", "=", "data_parser", ")", "\n", "\n", "# Step 5. Translate and expand nested args in excluded args", "\n", "is_three_phase", "=", "{", "a", ".", "dest", ":", "type", "(", "a", ")", "is", "ThreePhaseDict", "for", "a", "in", "nested_parser", ".", "_actions", "}", "\n", "for", "k", "in", "excluded_args", ".", "keys", "(", ")", ":", "\n", "        ", "if", "k", "in", "is_three_phase", "and", "is_three_phase", "[", "k", "]", ":", "\n", "            ", "excluded_args", "[", "k", "]", "=", "expand_three_phase", "(", "excluded_args", "[", "k", "]", ")", "\n", "\n", "# Step 6. Updated nested args defaults using base_args", "\n", "", "", "default_args", "=", "vars", "(", "nested_parser", ".", "parse_args", "(", "[", "]", ")", ")", "\n", "default_args", ",", "excluded", "=", "update_dict_exclusive", "(", "default_args", ",", "base_args", ")", "\n", "assert", "excluded", "==", "{", "}", "\n", "default_args", ",", "excluded_args", "=", "update_dict_exclusive", "(", "default_args", ",", "excluded_args", ")", "\n", "nested_parser", ".", "set_defaults", "(", "**", "default_args", ")", "\n", "\n", "# Step 7. Update nested args using command line args", "\n", "nested_args", ",", "remaining_argv", "=", "nested_parser", ".", "parse_known_args", "(", "remaining_argv", ")", "\n", "nested_args", "=", "vars", "(", "nested_args", ")", "\n", "\n", "# Step 8. Delete excluded args left over by nestedparsers", "\n", "for", "k", "in", "list", "(", "nested_args", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "nested_args", "[", "k", "]", ",", "abc", ".", "Mapping", ")", "and", "'__excluded'", "in", "nested_args", "[", "k", "]", ":", "\n", "            ", "if", "k", "not", "in", "excluded_args", ":", "\n", "                ", "excluded_args", "[", "k", "]", "=", "{", "}", "\n", "", "excluded_args", "[", "k", "]", "=", "update_dict", "(", "excluded_args", "[", "k", "]", ",", "nested_args", "[", "k", "]", "[", "'__excluded'", "]", ")", "\n", "if", "excluded_args", "[", "k", "]", "==", "{", "}", ":", "del", "excluded_args", "[", "k", "]", "\n", "del", "nested_args", "[", "k", "]", "[", "'__excluded'", "]", "\n", "\n", "", "", "assert", "nested_args", "==", "target_args", ",", "'Assert fail \\n*******\\n{}\\n != \\n{}\\n*******'", ".", "format", "(", "nested_args", ",", "target_args", ")", "\n", "assert", "excluded_args", "==", "target_excluded", ",", "'Assert fail \\n*******\\n{}\\n != \\n{}\\n*******'", ".", "format", "(", "excluded_args", ",", "\n", "target_excluded", ")", "\n", "return", "nested_args", ",", "excluded_args", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.dataloader.DataLoader.__init__": [[8, 16], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "task_sampler", ",", "device", ",", "epoch", "=", "None", ",", "mode", "=", "None", ",", "strategy", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "strategy", "=", "strategy", "\n", "self", ".", "n_episodes", "=", "len", "(", "task_sampler", ")", "\n", "self", ".", "task_sampler", "=", "task_sampler", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.dataloader.DataLoader.__len__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.dataloader.DataLoader.__iter__": [[21, 73], ["list", "list", "zip", "zip", "torch.stack.append", "torch.tensor.append", "torch.stack.append", "torch.tensor.append", "torch.stack().float", "torch.as_tensor().long", "torch.tensor", "torch.tensor", "torch.stack().float", "torch.as_tensor().long", "torch.tensor", "torch.tensor", "torch.squeeze", "torch.stack", "torch.squeeze", "torch.stack", "torch.stack.to", "torch.tensor.to", "torch.stack.to", "torch.tensor.to", "torch.stack", "torch.as_tensor", "torch.stack", "torch.as_tensor"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "        ", "tasks", "=", "[", "]", "\n", "\n", "for", "subtask", "in", "self", ".", "task_sampler", ":", "\n", "            ", "support_set", ",", "target_set", "=", "subtask", "\n", "support_set", "=", "list", "(", "zip", "(", "*", "support_set", ")", ")", "\n", "target_set", "=", "list", "(", "zip", "(", "*", "target_set", ")", ")", "\n", "\n", "support_x", "=", "[", "]", "\n", "support_y", "=", "[", "]", "\n", "targets_x", "=", "[", "]", "\n", "targets_y", "=", "[", "]", "\n", "\n", "for", "tag", "in", "support_set", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "dataset", "[", "tag", "]", "\n", "support_x", ".", "append", "(", "x", ")", "\n", "support_y", ".", "append", "(", "y", ")", "\n", "\n", "", "for", "tag", "in", "target_set", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "dataset", "[", "tag", "]", "\n", "targets_x", ".", "append", "(", "x", ")", "\n", "targets_y", ".", "append", "(", "y", ")", "\n", "\n", "", "if", "support_x", "!=", "[", "]", ":", "\n", "                ", "support_x", "=", "torch", ".", "stack", "(", "support_x", ")", ".", "float", "(", ")", "\n", "support_y", "=", "torch", ".", "as_tensor", "(", "support_y", ")", ".", "long", "(", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "support_x", ".", "shape", "\n", "if", "c", "==", "1", "and", "self", ".", "dataset", ".", "image_channels", "==", "3", ":", "\n", "                    ", "support_x", "=", "torch", ".", "squeeze", "(", "support_x", ",", "1", ")", "\n", "support_x", "=", "torch", ".", "stack", "(", "(", "support_x", ",", ")", "*", "3", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "support_x", "=", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "support_y", "=", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "\n", "", "if", "targets_x", "!=", "[", "]", ":", "\n", "                ", "targets_x", "=", "torch", ".", "stack", "(", "targets_x", ")", ".", "float", "(", ")", "\n", "targets_y", "=", "torch", ".", "as_tensor", "(", "targets_y", ")", ".", "long", "(", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "targets_x", ".", "shape", "\n", "if", "c", "==", "1", "and", "self", ".", "dataset", ".", "image_channels", "==", "3", ":", "\n", "                    ", "targets_x", "=", "torch", ".", "squeeze", "(", "targets_x", ",", "1", ")", "\n", "targets_x", "=", "torch", ".", "stack", "(", "(", "targets_x", ",", ")", "*", "3", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "targets_x", "=", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "targets_y", "=", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "\n", "", "subtask", "=", "(", "(", "support_x", ".", "to", "(", "self", ".", "device", ")", ",", "support_y", ".", "to", "(", "self", ".", "device", ")", ")", ",", "\n", "(", "targets_x", ".", "to", "(", "self", ".", "device", ")", ",", "targets_y", ".", "to", "(", "self", ".", "device", ")", ")", ")", "\n", "\n", "yield", "subtask", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_base_parser": [[123, 207], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "TASKS.keys", "DATASETS.keys", "MODELS.keys", "BACKBONES.keys", "STRATEGIES.keys"], "function", ["None"], ["def", "get_base_parser", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Main parser\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "#         formatter_class=argparse.ArgumentDefaultsHelpFormatter,", "\n", "#     )", "\n", "\n", "#     parser.add_argument('--help_all', '--help_model', '--help_dataset', '--help_strategy', '--help_task', '--help_ptracker',", "\n", "#                         action=PrintHelpAction, nargs=0,", "\n", "#                         help=\"Print help for given model, dataset, task, strategy args\")", "\n", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "type", "=", "str", ",", "default", "=", "'fsl'", ",", "choices", "=", "TASKS", ".", "keys", "(", ")", ",", "\n", "help", "=", "'Task name'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'mini'", ",", "choices", "=", "DATASETS", ".", "keys", "(", ")", ",", "\n", "help", "=", "'Dataset name'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'protonet'", ",", "choices", "=", "MODELS", ".", "keys", "(", ")", ",", "\n", "help", "=", "'FSL method name'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "'Conv4'", ",", "choices", "=", "BACKBONES", ".", "keys", "(", ")", ",", "\n", "help", "=", "'Backbone neural network name'", ")", "\n", "parser", ".", "add_argument", "(", "'--strategy'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "choices", "=", "STRATEGIES", ".", "keys", "(", ")", ",", "\n", "help", "=", "'Imbalance strategy. If None, no imbalance strategy is used'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'gpu number or \"cpu\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--deterministic'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "True", ",", "\n", "help", "=", "'If true, the tasks are generated deteministically based on the given seed'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results_folder'", ",", "type", "=", "str", ",", "default", "=", "\"../experiments/dummy/\"", ",", "#  default=\"../../experiments/\", ", "\n", "help", "=", "'parent folder where all experiments are saved'", ")", "\n", "parser", ".", "add_argument", "(", "'--experiment_name'", ",", "type", "=", "str", ",", "default", "=", "\"default\"", ")", "\n", "parser", ".", "add_argument", "(", "'--experiment_folder'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'experiment folder used to save checkpoints and results'", ")", "\n", "parser", ".", "add_argument", "(", "'--clean_folder'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "'Clears the experiment folder if it exisits'", ")", "\n", "parser", ".", "add_argument", "(", "'--storage_friendly'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "True", ",", "\n", "help", "=", "'Deletes previously saved models systematically, only keeps best, latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "\"data/\"", ",", "\n", "help", "=", "'Data folder with datasets in named subdirectories.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--continue_from'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Continue from a checkpoint file, epoch, or 'latest', 'best', or 'from_scratch'/None.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_backbone_only'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Loads the backbone only from 'continue_from'\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dummy_run'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "'A dry run of the settings with a 1 epoch and validation, a reduced number of tasks, no saving'", ")", "\n", "parser", ".", "add_argument", "(", "'--conventional_split'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "None", ",", "\n", "help", "=", "'Joins classes in meta-training and meta-validation datests. '", "\n", "'Then conventional 80%%-20%% split for train-val datasets. '", "\n", "'If None, will be split automatically based on model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--conventional_split_from_train_only'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "'Performs conventional 80%%-20%% data split from the train dataset only,'", "\n", "' without joining with the validation split. Working only when meta-dataset reduced, see'", "\n", "' data.dataset_utils.prep_datasets() for details.'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_channel_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'Number of channels of the backbone model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tqdm'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Enable/Disable tqdm, especially useful when running experiment and redirecting to files\"", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'TASK SAMPLING OPTIONS'", ")", "\n", "group", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"If none, then will stop training after achieving a stopping criterion, see ExperimentBuilder\"", ")", "\n", "group", ".", "add_argument", "(", "'--num_tasks_per_epoch'", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "group", ".", "add_argument", "(", "'--num_tasks_per_validation'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "\"Number of tasks to evaluate on after every epoch.\"", ")", "\n", "group", ".", "add_argument", "(", "'--num_tasks_per_testing'", ",", "type", "=", "int", ",", "default", "=", "600", ",", "\n", "help", "=", "\"Number of tasks to evaluate on after meta-training.\"", ")", "\n", "group", ".", "add_argument", "(", "'--evaluate_on_test_set_only'", ",", "'--test'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "\"If present, no (further) training is performed and only the test dataset is evaluated.\"", ")", "\n", "group", ".", "add_argument", "(", "'--val_or_test'", ",", "type", "=", "str", ",", "choices", "=", "[", "\"test\"", ",", "\"val\"", "]", ",", "default", "=", "\"val\"", ",", "\n", "help", "=", "\"Dataset to perform validation on. Default val\"", ")", "\n", "group", ".", "add_argument", "(", "'--no_val_loop'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "\"No validation loop. Default=False, meaning assume there is a validation loop.\"", ")", "\n", "group", ".", "add_argument", "(", "'--test_performance_tag'", ",", "type", "=", "str", ",", "default", "=", "\"test\"", ",", "\n", "help", "=", "'The tag name for the performance file evaluated on test set, eg \"test\" in epoch-###_test.json'", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'VISUALISATION OPTIONS'", ")", "\n", "group", ".", "add_argument", "(", "'--fix_class_distribution'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "'If present, will fix the class distribution such that the model will be evaluated and tested '", "\n", "'on the same set of classes between tasks.'", ")", "\n", "group", ".", "add_argument", "(", "'--count_samples_stats'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true, counts the images and stores the distribution stats of images shown during the run'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_dataset_parser": [[209, 249], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser", "Exception"], "function", ["None"], ["", "def", "get_dataset_parser", "(", "dataset_name", ",", "parser", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generic dataset parser\n    \"\"\"", "\n", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "if", "dataset_name", "not", "in", "DATASETS", ":", "\n", "        ", "raise", "Exception", "(", "\"Dataset not found: {}\"", ".", "format", "(", "dataset_name", ")", ")", "\n", "\n", "", "parser", ".", "add_argument", "(", "'--dataset_version'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Path to folder with all datasets.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--aug'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "'Boolean for data augmentation. '", "\n", "'Use train.aug/test.aug/val.aug to turn on/off augmentation for different stages'", ")", "\n", "parser", ".", "add_argument", "(", "'--normalise'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "True", ",", "\n", "help", "=", "'Set true to normalise colour'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_cache'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "True", ",", "\n", "help", "=", "'Loads and caches a dataset stored in subfolder structure for faster subsequent loading.'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_width'", ",", "type", "=", "int", ",", "default", "=", "84", ",", "\n", "help", "=", "'image width'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_height'", ",", "type", "=", "int", ",", "default", "=", "84", ",", "\n", "help", "=", "'image height'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_channels'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--min_num_samples'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Minimum number of samples per class\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_num_samples'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Max number of samples per class\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_minority'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Fraction of classes used as minority classes (used with 'step'-imbalance distribution)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--imbalance_distribution'", ",", "type", "=", "str", ",", "choices", "=", "IMBALANCE_DIST", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Imbalance type, specifies how to sample images from larger meta-training dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--use_classes_frac'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Selects a random subset of classes of dataset (expressed as a fraction in range [0,1]). \"", "\n", "\"Set 'imbalance_distribution' to 'balanced' or other to make this work.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'seed for dataset manipulations, if -1 uses the main program seed'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_args": [[251, 351], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "utils.get_base_parser", "argparse.ArgumentParser.parse_known_args", "vars", "vars", "update_dict_exclusive", "get_base_parser.set_defaults", "get_base_parser.parse_known_args", "vars", "MODELS[].get_parser", "STRATEGIES[].get_parser", "utils.get_dataset_parser", "utils.ptracker.PerformanceTracker.get_parser", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "excluded_args.keys", "vars", "update_dict_exclusive", "update_dict_exclusive", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_known_args", "vars", "list", "load_json", "from_syntactic_sugar", "get_base_parser.parse_args", "argparse.ArgumentParser", "argparse.ArgumentParser", "_class.get_parser", "argparse.ArgumentParser.parse_args", "vars.keys", "vars.update", "get_task_classes().items", "OnePhaseDict.TYPE", "OnePhaseDict.TYPE", "ThreePhaseDict.TYPE", "ThreePhaseDict.TYPE", "ThreePhaseDict.TYPE", "type", "expand_three_phase", "isinstance", "update_dict", "dict", "utils.get_task_classes"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_base_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_dataset_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict_exclusive", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.load_json", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.from_syntactic_sugar", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.TYPE", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.TYPE", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.TYPE", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.TYPE", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.ThreePhaseDict.TYPE", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.expand_three_phase", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.update_dict", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_task_classes"], ["", "def", "get_args", "(", "sysargv", "=", "None", ",", "json_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Gets parameters passed from the stdin or stdin_list or arg_dict, and loads parameters from a file if available\n    Arguments passed through sys.argv take priority over config file args and default parser args\n    Arguments passed through config file take priority over default parser args\n    \"\"\"", "\n", "#     pprint.pprint(sysargv)", "\n", "#     pprint.pprint(json_args), ", "\n", "#     import pdb; pdb.set_trace()", "\n", "\n", "if", "sysargv", "is", "None", ":", "\n", "        ", "sysargv", "=", "sys", ".", "argv", "\n", "\n", "", "config_parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "config_parser", ".", "add_argument", "(", "'--args_file'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "base_parser", "=", "get_base_parser", "(", "description", "=", "\"FSL Pytorch Framework\"", ",", "add_help", "=", "False", ",", "parents", "=", "[", "config_parser", "]", ")", "\n", "\n", "# Step 1. Get config file", "\n", "config_args", ",", "remaining_argv", "=", "config_parser", ".", "parse_known_args", "(", "sysargv", ")", "\n", "config_args", "=", "vars", "(", "config_args", ")", "\n", "\n", "if", "json_args", "is", "None", "and", "config_args", "[", "'args_file'", "]", "not", "in", "[", "None", ",", "'None'", ",", "'none'", ",", "''", "]", ":", "\n", "        ", "json_args", "=", "load_json", "(", "config_args", "[", "'args_file'", "]", ")", "\n", "json_args", "=", "from_syntactic_sugar", "(", "json_args", ")", "\n", "json_args", "[", "'args_file'", "]", "=", "config_args", "[", "'args_file'", "]", "\n", "\n", "", "elif", "json_args", "is", "None", ":", "\n", "        ", "json_args", "=", "{", "}", "\n", "\n", "# Step 2. Update base args defaults using json", "\n", "", "default_args", "=", "vars", "(", "base_parser", ".", "parse_args", "(", "[", "]", ")", ")", "\n", "default_args", ",", "excluded_args", "=", "update_dict_exclusive", "(", "default_args", ",", "json_args", ")", "\n", "base_parser", ".", "set_defaults", "(", "**", "default_args", ")", "\n", "\n", "# Step 3. Update base args using command line args", "\n", "base_args", ",", "remaining_argv", "=", "base_parser", ".", "parse_known_args", "(", "remaining_argv", ")", "\n", "base_args", "=", "vars", "(", "base_args", ")", "\n", "\n", "# Step 4. Initilize nested parsers", "\n", "model", "=", "base_args", "[", "'model'", "]", "\n", "strategy", "=", "base_args", "[", "'strategy'", "]", "\n", "dataset", "=", "base_args", "[", "'dataset'", "]", "\n", "task", "=", "base_args", "[", "'task'", "]", "\n", "\n", "model_parser", "=", "MODELS", "[", "model", "]", ".", "get_parser", "(", "argparse", ".", "ArgumentParser", "(", ")", ")", "\n", "strategy_parser", "=", "STRATEGIES", "[", "strategy", "]", ".", "get_parser", "(", "argparse", ".", "ArgumentParser", "(", ")", ")", "\n", "data_parser", "=", "get_dataset_parser", "(", "dataset", ")", "\n", "task_parsers", "=", "{", "_phase", ":", "_class", ".", "get_parser", "(", ")", "for", "_phase", ",", "_class", "in", "get_task_classes", "(", "task", ",", "model", ")", ".", "items", "(", ")", "}", "\n", "ptracker_parser", "=", "PerformanceTracker", ".", "get_parser", "(", ")", "\n", "\n", "nested_parsers", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Nested Parser\"", ",", "parents", "=", "[", "base_parser", "]", ",", "add_help", "=", "False", ")", "\n", "nested_parsers", ".", "add_argument", "(", "'--model_args'", ",", "**", "OnePhaseDict", ".", "TYPE", "(", ")", ",", "subparser", "=", "model_parser", ",", "\n", "help", "=", "'FSL method settings as a json parsable string (one phase args)'", ")", "\n", "nested_parsers", ".", "add_argument", "(", "'--strategy_args'", ",", "**", "OnePhaseDict", ".", "TYPE", "(", ")", ",", "subparser", "=", "strategy_parser", ",", "\n", "help", "=", "'Imbalance strategy settings as a json parsable string (one phase args)'", ")", "\n", "nested_parsers", ".", "add_argument", "(", "'--dataset_args'", ",", "**", "ThreePhaseDict", ".", "TYPE", "(", ")", ",", "subparser", "=", "data_parser", ",", "\n", "help", "=", "'Dataset settings as a json parsable string (three phase args)'", ")", "\n", "nested_parsers", ".", "add_argument", "(", "'--ptracker_args'", ",", "**", "ThreePhaseDict", ".", "TYPE", "(", ")", ",", "subparser", "=", "ptracker_parser", ",", "\n", "help", "=", "'Task arguments as a json parsable string (three phase args)'", ")", "\n", "nested_parsers", ".", "add_argument", "(", "'--task_args'", ",", "**", "ThreePhaseDict", ".", "TYPE", "(", ")", ",", "subparser", "=", "task_parsers", ",", "\n", "help", "=", "'Task settings as a json parsable string (three phase args)'", ")", "\n", "\n", "# Step 5. Translate and expand nested args in excluded args", "\n", "is_three_phase", "=", "{", "a", ".", "dest", ":", "type", "(", "a", ")", "is", "ThreePhaseDict", "for", "a", "in", "nested_parsers", ".", "_actions", "}", "\n", "for", "k", "in", "excluded_args", ".", "keys", "(", ")", ":", "\n", "        ", "if", "k", "in", "is_three_phase", "and", "is_three_phase", "[", "k", "]", ":", "\n", "            ", "excluded_args", "[", "k", "]", "=", "expand_three_phase", "(", "excluded_args", "[", "k", "]", ")", "\n", "\n", "# Step 6. Updated nested args defaults using base_args", "\n", "", "", "default_args", "=", "vars", "(", "nested_parsers", ".", "parse_args", "(", "[", "]", ")", ")", "\n", "default_args", ",", "_excluded", "=", "update_dict_exclusive", "(", "default_args", ",", "base_args", ")", "\n", "assert", "_excluded", "==", "{", "}", ",", "\"This should be empty. Something must have gone wrong.\"", "\n", "default_args", ",", "excluded_args", "=", "update_dict_exclusive", "(", "default_args", ",", "excluded_args", ")", "\n", "nested_parsers", ".", "set_defaults", "(", "**", "default_args", ")", "\n", "\n", "# Step 7. Update nested args using command line args", "\n", "nested_args", ",", "remaining_argv", "=", "nested_parsers", ".", "parse_known_args", "(", "remaining_argv", ")", "\n", "nested_args", "=", "vars", "(", "nested_args", ")", "\n", "\n", "# Step 8. Delete excluded args left over by nestedparsers", "\n", "for", "k", "in", "list", "(", "nested_args", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "nested_args", "[", "k", "]", ",", "abc", ".", "Mapping", ")", "and", "'__excluded'", "in", "nested_args", "[", "k", "]", ":", "\n", "            ", "if", "k", "not", "in", "excluded_args", ":", "\n", "                ", "excluded_args", "[", "k", "]", "=", "{", "}", "\n", "", "excluded_args", "[", "k", "]", "=", "update_dict", "(", "excluded_args", "[", "k", "]", ",", "nested_args", "[", "k", "]", "[", "'__excluded'", "]", ")", "\n", "if", "excluded_args", "[", "k", "]", "==", "{", "}", ":", "del", "excluded_args", "[", "k", "]", "\n", "del", "nested_args", "[", "k", "]", "[", "'__excluded'", "]", "\n", "\n", "# Dry run settings for testing purposes", "\n", "", "", "if", "'dummy_run'", "in", "nested_args", "and", "nested_args", "[", "'dummy_run'", "]", ":", "\n", "        ", "nested_args", ".", "update", "(", "dict", "(", "\n", "num_epochs", "=", "1", ",", "\n", "num_tasks_per_epoch", "=", "3", ",", "\n", "num_tasks_per_validation", "=", "3", ",", "\n", "num_tasks_per_testing", "=", "3", "\n", ")", ")", "\n", "\n", "", "return", "nested_args", ",", "excluded_args", ",", "nested_parsers", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.set_torch_seed": [[353, 358], ["torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["", "def", "set_torch_seed", "(", "seed", ")", ":", "\n", "    ", "\"\"\"\n    Sets the torch seed\n    \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.set_gpu": [[360, 370], ["print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["None"], ["", "def", "set_gpu", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Sets the cpu or gpu device\n    \"\"\"", "\n", "if", "x", "==", "'cpu'", "or", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "x", ")", ")", "\n", "", "print", "(", "'Using device:'", ",", "device", ")", "\n", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_data": [[372, 393], ["print", "args.dataset_args.keys", "datasets.dataset_utils.prep_datasets"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.prep_datasets"], ["", "def", "get_data", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Loads and returns dataset objects for each experiment stage (train, val, test).\n    \"\"\"", "\n", "print", "(", "\"Getting data: {}\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "\n", "for", "phase", "in", "args", ".", "dataset_args", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'seed'", "not", "in", "args", ".", "dataset_args", "[", "phase", "]", "or", "args", ".", "dataset_args", "[", "phase", "]", "[", "'seed'", "]", "<", "0", ":", "\n", "            ", "args", ".", "dataset_args", "[", "phase", "]", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "", "if", "'data_path'", "not", "in", "args", ".", "dataset_args", "[", "phase", "]", "or", "args", ".", "dataset_args", "[", "phase", "]", "[", "'data_path'", "]", "is", "None", ":", "\n", "            ", "args", ".", "dataset_args", "[", "phase", "]", "[", "'data_path'", "]", "=", "args", ".", "data_path", "\n", "\n", "", "", "if", "(", "args", ".", "conventional_split", "is", "None", "and", "args", ".", "model", "in", "[", "\"baseline\"", ",", "\"baselinepp\"", ",", "\"knn\"", "]", ")", ":", "\n", "        ", "args", ".", "conventional_split", "=", "True", "\n", "\n", "", "datasets", "=", "DATASETS", "[", "args", ".", "dataset", "]", "(", "args", ".", "dataset_args", ")", "\n", "datasets", "=", "prep_datasets", "(", "datasets", ",", "args", ",", "\n", "conventional_split", "=", "args", ".", "conventional_split", ",", "\n", "from_train_only", "=", "args", ".", "conventional_split_from_train_only", ")", "\n", "\n", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_task_classes": [[395, 423], ["dict", "Exception"], "function", ["None"], ["", "def", "get_task_classes", "(", "task_name", ",", "model_name", ")", ":", "\n", "    ", "\"\"\"\n    Returns task sampler classes for each stage of the experiment\n    \"\"\"", "\n", "if", "task_name", "not", "in", "TASKS", ":", "\n", "        ", "raise", "Exception", "(", "\"Task {} not found. See utils.get_tasks() or utils.TASKS\"", ".", "format", "(", "task_name", ")", ")", "\n", "\n", "", "train_task", "=", "TASKS", "[", "task_name", "]", "\n", "val_task", "=", "TASKS", "[", "task_name", "]", "\n", "test_task", "=", "TASKS", "[", "task_name", "]", "\n", "\n", "# Special samplers for baseline and simpleshot", "\n", "if", "model_name", "in", "[", "\"baseline\"", ",", "\"baselinepp\"", ",", "\"knn\"", "]", ":", "\n", "        ", "if", "task_name", "in", "[", "\"fsl\"", ",", "\"fsl_imbalanced\"", "]", ":", "\n", "            ", "train_task", "=", "SimpleBatchTask", "\n", "val_task", "=", "SimpleBatchTask", "\n", "\n", "", "", "if", "model_name", "in", "[", "\"simpleshot\"", "]", ":", "\n", "        ", "if", "task_name", "in", "[", "\"fsl\"", ",", "\"fsl_imbalanced\"", "]", ":", "\n", "            ", "train_task", "=", "SimpleBatchTask", "\n", "\n", "", "", "task_classes", "=", "dict", "(", "\n", "train", "=", "train_task", ",", "\n", "val", "=", "val_task", ",", "\n", "test", "=", "test_task", "\n", ")", "\n", "\n", "return", "task_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_tasks": [[425, 432], ["utils.get_task_classes"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_task_classes"], ["", "def", "get_tasks", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Returns task sampler classes for each stage of the experiment\n    Sorts out task_args\n    \"\"\"", "\n", "tasks", "=", "get_task_classes", "(", "args", ".", "task", ",", "args", ".", "model", ")", "\n", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_backbone": [[434, 452], ["Exception", "backbones.conv.Conv4NP", "backbones.conv.Conv6NP"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.Conv4NP", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.Conv6NP"], ["", "def", "get_backbone", "(", "args", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Returns the backbone model\n    \"\"\"", "\n", "\n", "if", "args", ".", "backbone", "not", "in", "BACKBONES", ":", "\n", "        ", "raise", "Exception", "(", "\"Backbone not found: {}\"", ".", "format", "(", "args", ".", "backbone", ")", ")", "\n", "\n", "", "if", "args", ".", "model", "in", "[", "\"relationnet\"", ",", "\"relationdkt\"", "]", ":", "\n", "        ", "if", "args", ".", "backbone", "==", "\"Conv4\"", ":", "\n", "            ", "return", "Conv4NP", "(", "device", ",", "outdim", "=", "args", ".", "backbone_channel_dim", ")", "\n", "", "if", "args", ".", "backbone", "==", "\"Conv6\"", ":", "\n", "            ", "return", "Conv6NP", "(", "device", ",", "outdim", "=", "args", ".", "backbone_channel_dim", ")", "\n", "\n", "", "", "if", "args", ".", "model", "in", "[", "\"maml\"", ",", "\"protomaml\"", ",", "\"btaml\"", "]", ":", "\n", "        ", "return", "BACKBONES", "[", "args", ".", "backbone", "]", "(", "device", ",", "maml", "=", "True", ",", "outdim", "=", "args", ".", "backbone_channel_dim", ")", "\n", "\n", "", "return", "BACKBONES", "[", "args", ".", "backbone", "]", "(", "device", ",", "outdim", "=", "args", ".", "backbone_channel_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_model": [[454, 484], ["print", "model.setup_model", "model.to", "Exception", "dict", "utils.bunch.bunch.bunchify", "tasks[].get_output_dim", "max", "max"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.setup_model", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.bunchify", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl_imbalanced.ImbalancedFSLTask.get_output_dim"], ["", "def", "get_model", "(", "backbone", ",", "tasks", ",", "datasets", ",", "stategy", ",", "args", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Returns FSL model and sorts out model_args\n    \"\"\"", "\n", "print", "(", "\"Getting model: {}\"", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "\n", "if", "args", ".", "model", "not", "in", "MODELS", ":", "\n", "        ", "raise", "Exception", "(", "\"Model {} does not exist\"", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "\n", "", "if", "'seed'", "in", "args", ".", "model_args", "and", "args", ".", "model_args", ".", "seed", "==", "-", "1", ":", "\n", "        ", "args", ".", "model_args", ".", "seed", "=", "args", ".", "seed", "\n", "\n", "", "if", "args", ".", "model", "in", "[", "\"baseline\"", ",", "\"baselinepp\"", ",", "\"maml\"", ",", "\"gpshot\"", ",", "\"dkt\"", ",", "\n", "\"relationdkt\"", ",", "\"protomaml\"", ",", "\"knn\"", ",", "\"simpleshot\"", ",", "\n", "\"bmaml\"", ",", "\"bmaml_chaser\"", ",", "\"btaml\"", ",", "\"btaml_star\"", "]", ":", "\n", "        ", "output_dims", "=", "dict", "(", ")", "\n", "for", "s", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ":", "\n", "            ", "output_dims", "[", "s", "]", "=", "tasks", "[", "s", "]", ".", "get_output_dim", "(", "args", ".", "task_args", "[", "s", "]", ",", "datasets", "[", "s", "]", ")", "\n", "", "args", ".", "model_args", "[", "'output_dim'", "]", "=", "bunch", ".", "bunchify", "(", "output_dims", ")", "\n", "\n", "", "if", "args", ".", "model", "in", "[", "'btaml'", "]", ":", "\n", "        ", "if", "args", ".", "task", "in", "[", "'fsl'", "]", ":", "\n", "            ", "maxshot", "=", "max", "(", "[", "args", ".", "task_args", "[", "setname", "]", ".", "num_supports", "for", "setname", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "]", ")", "\n", "", "if", "args", ".", "task", "in", "[", "'fsl_imbalanced'", "]", ":", "\n", "            ", "maxshot", "=", "max", "(", "[", "args", ".", "task_args", "[", "setname", "]", ".", "max_num_supports", "for", "setname", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "]", ")", "\n", "", "args", ".", "model_args", "[", "'max_shot'", "]", "=", "maxshot", "\n", "\n", "", "model", "=", "MODELS", "[", "args", ".", "model", "]", "(", "backbone", ",", "stategy", ",", "args", ".", "model_args", ",", "device", ")", "\n", "model", ".", "setup_model", "(", ")", "\n", "return", "model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_strategy": [[486, 494], ["print", "Exception"], "function", ["None"], ["", "def", "get_strategy", "(", "args", ",", "device", ")", ":", "\n", "    ", "print", "(", "\"Getting strategy: {}\"", ".", "format", "(", "args", ".", "strategy", ")", ")", "\n", "\n", "if", "args", ".", "strategy", "not", "in", "STRATEGIES", ":", "\n", "        ", "raise", "Exception", "(", "\"Ups. Imbalance strategy {} does not exist!\"", ".", "format", "(", "args", ".", "strategy", ")", ")", "\n", "\n", "", "strategy", "=", "STRATEGIES", "[", "args", ".", "strategy", "]", "(", "args", ".", "strategy_args", ",", "device", ",", "args", ".", "seed", ")", "\n", "return", "strategy", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.compress_args": [[495, 507], ["copy.deepcopy", "copy.deepcopy.keys", "utils.get_args", "type", "compress_three_phase"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.get_args", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.parser_utils.compress_three_phase"], ["", "def", "compress_args", "(", "args", ",", "parser", "=", "None", ")", ":", "\n", "    ", "compressed_args", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "\n", "if", "parser", "is", "None", ":", "\n", "        ", "_", ",", "_", ",", "parser", "=", "get_args", "(", "[", "]", ",", "args", ")", "\n", "\n", "", "is_three_phase", "=", "{", "a", ".", "dest", ":", "type", "(", "a", ")", "is", "ThreePhaseDict", "for", "a", "in", "parser", ".", "_actions", "}", "\n", "for", "k", "in", "compressed_args", ".", "keys", "(", ")", ":", "\n", "        ", "if", "k", "in", "is_three_phase", "and", "is_three_phase", "[", "k", "]", ":", "\n", "            ", "compressed_args", "[", "k", "]", "=", "compress_three_phase", "(", "compressed_args", "[", "k", "]", ")", "\n", "\n", "", "", "return", "compressed_args", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.torch_summarize": [[509, 535], ["model._modules.items", "torch.nn.modules.module._addindent", "sum", "tuple", "type", "utils.torch_summarize", "module.__repr__", "numpy.prod", "tuple", "p.size", "module.parameters", "p.size", "module.parameters"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.torch_summarize", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.__repr__"], ["", "def", "torch_summarize", "(", "model", ",", "show_weights", "=", "True", ",", "show_parameters", "=", "True", ")", ":", "\n", "    ", "\"\"\"Summarizes torch model by showing trainable parameters and weights.\"\"\"", "\n", "tmpstr", "=", "model", ".", "__class__", ".", "__name__", "+", "' (\\n'", "\n", "for", "key", ",", "module", "in", "model", ".", "_modules", ".", "items", "(", ")", ":", "\n", "# if it contains layers let call it recursively to get params and weights", "\n", "        ", "if", "type", "(", "module", ")", "in", "[", "\n", "torch", ".", "nn", ".", "modules", ".", "container", ".", "Container", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "container", ".", "Sequential", "\n", "]", ":", "\n", "            ", "modstr", "=", "torch_summarize", "(", "module", ")", "\n", "", "else", ":", "\n", "            ", "modstr", "=", "module", ".", "__repr__", "(", ")", "\n", "", "modstr", "=", "_addindent", "(", "modstr", ",", "2", ")", "\n", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "module", ".", "parameters", "(", ")", "]", ")", "\n", "weights", "=", "tuple", "(", "[", "tuple", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "module", ".", "parameters", "(", ")", "]", ")", "\n", "\n", "tmpstr", "+=", "'  ('", "+", "key", "+", "'): '", "+", "modstr", "\n", "if", "show_weights", ":", "\n", "            ", "tmpstr", "+=", "', weights={}'", ".", "format", "(", "weights", ")", "\n", "", "if", "show_parameters", ":", "\n", "            ", "tmpstr", "+=", "', parameters={}'", ".", "format", "(", "params", ")", "\n", "", "tmpstr", "+=", "'\\n'", "\n", "\n", "", "tmpstr", "=", "tmpstr", "+", "')'", "\n", "return", "tmpstr", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.onehot": [[537, 557], ["a.clone", "b.to.to", "a.max", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "a.get_device", "numpy.arange", "len"], "function", ["None"], ["", "def", "onehot", "(", "a", ",", "dim", "=", "None", ",", "fill_with", "=", "0", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Converts a vector into onehot encoding\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "dim", "=", "a", ".", "max", "(", ")", "+", "1", "\n", "\n", "if", "-", "1", "in", "a", ":", "# i.e. there is a distractor / out of distribution class", "\n", "        ", "a_tmp", "=", "a", ".", "clone", "(", ")", "\n", "a_tmp", "=", "a_tmp", "[", "a", "!=", "-", "1", "]", "\n", "b", "=", "torch", ".", "ones", "(", "(", "*", "a", ".", "shape", ",", "dim", ")", ",", "dtype", "=", "dtype", ")", "*", "fill_with", "\n", "b", "[", "a", "!=", "-", "1", ",", "a_tmp", "]", "=", "1", "\n", "\n", "", "else", ":", "\n", "        ", "b", "=", "torch", ".", "ones", "(", "(", "*", "a", ".", "shape", ",", "dim", ")", ",", "dtype", "=", "dtype", ")", "*", "fill_with", "\n", "b", "[", "np", ".", "arange", "(", "len", "(", "a", ")", ")", ",", "a", "]", "=", "1", "\n", "\n", "", "cuda_check", "=", "a", ".", "is_cuda", "\n", "if", "cuda_check", ":", "\n", "        ", "b", "=", "b", ".", "to", "(", "a", ".", "get_device", "(", ")", ")", "\n", "", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.find": [[559, 571], ["os.walk", "fnmatch.fnmatch", "result.append", "os.path.join"], "function", ["None"], ["", "def", "find", "(", "pattern", ",", "path", ")", ":", "\n", "    ", "\"\"\"\n    Generic file finder method \n    \"\"\"", "\n", "import", "os", ",", "fnmatch", "\n", "\n", "result", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "path", ")", ":", "\n", "        ", "for", "name", "in", "files", ":", "\n", "            ", "if", "fnmatch", ".", "fnmatch", "(", "name", ",", "pattern", ")", ":", "\n", "                ", "result", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "name", ")", ")", "\n", "", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.test.test": [[5, 10], ["doctest.testmod"], "function", ["None"], ["def", "test", "(", ")", ":", "\n", "    ", "import", "bunch", "\n", "import", "doctest", "\n", "returned", "=", "doctest", ".", "testmod", "(", "bunch", ")", "\n", "return", "returned", ".", "failed", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.__contains__": [[73, 96], ["dict.__contains__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.__contains__"], []], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.__getattr__": [[98, 129], ["object.__getattribute__", "AttributeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.__setattr__": [[130, 156], ["object.__getattribute__", "object.__setattr__", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.__setattr__"], []], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.__delattr__": [[157, 183], ["object.__getattribute__", "object.__delattr__", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.__delattr__"], []], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.toDict": [[184, 194], ["__init__.unbunchify"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.unbunchify"], []], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.__repr__": [[195, 210], ["list", "list.sort", "iterkeys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.Bunch.fromDict": [[211, 222], ["__init__.bunchify"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.bunchify"], []], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.bunchify": [[232, 257], ["isinstance", "__init__.Bunch", "isinstance", "type", "__init__.bunchify", "iteritems", "__init__.bunchify"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.bunchify", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.bunchify"], []], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.unbunchify": [[258, 282], ["isinstance", "dict", "isinstance", "type", "__init__.unbunchify", "iteritems", "__init__.unbunchify"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.unbunchify", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.bunch.__init__.unbunchify"], []], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.custom.get_custom_dataset_from_folders": [[6, 31], ["os.path.join", "Exception", "datasets.dataset_utils.load_dataset_from_from_folder", "datasets.dataset_template.ColorDatasetInMemory", "datasets.dataset_utils.load_dataset_from_from_folder", "datasets.dataset_template.ColorDatasetOnDisk"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_from_folder", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_from_folder"], ["def", "get_custom_dataset_from_folders", "(", "args_per_set", ",", "setnames", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ")", ":", "\n", "    ", "\"\"\"\n    Returns a datasets from folder \"train\", \"val\", \"test\" folder structure\n    \"\"\"", "\n", "\n", "datasets", "=", "{", "}", "\n", "for", "setname", "in", "setnames", ":", "\n", "        ", "args", "=", "args_per_set", "[", "setname", "]", "\n", "\n", "if", "args", ".", "dataset_version", "!=", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Custom dataset version '{}' does not exist\"", ".", "format", "(", "version", ")", ")", "\n", "\n", "", "datasetpath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"custom\"", ",", "setname", ")", "\n", "augment", "=", "args", ".", "augment", "\n", "\n", "if", "args", ".", "use_cache", ":", "\n", "            ", "data", "=", "load_dataset_from_from_folder", "(", "datasetpath", ",", "use_cache", "=", "True", ",", "image_size", "=", "(", "args", ".", "image_height", ",", "args", ".", "image_width", ")", ")", "\n", "dataset", "=", "ColorDatasetInMemory", "(", "data", "[", "\"image_data\"", "]", ",", "data", "[", "\"class_dict\"", "]", ",", "args", ")", "\n", "\n", "", "else", ":", "\n", "            ", "data_paths", "=", "load_dataset_from_from_folder", "(", "datasetpath", ",", "use_cache", "=", "False", ")", "\n", "dataset", "=", "ColorDatasetOnDisk", "(", "data_paths", "[", "\"image_data\"", "]", ",", "data_paths", "[", "\"class_dict\"", "]", ",", "args", ",", "folder_path", "=", "setname", ")", "\n", "\n", "", "datasets", "[", "setname", "]", "=", "dataset", "\n", "", "return", "datasets", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.imgnt.get_ImageNet": [[5, 27], ["os.path.abspath", "datasets.dataset_utils.load_dataset_from_pkl", "Exception", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_pkl"], ["def", "get_ImageNet", "(", "args_per_set", ",", "setnames", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ")", ":", "\n", "    ", "\"\"\"\n    Returns MiniImagenet datasets.\n    \"\"\"", "\n", "datasets", "=", "{", "}", "\n", "for", "setname", "in", "setnames", ":", "\n", "        ", "args", "=", "args_per_set", "[", "setname", "]", "\n", "\n", "if", "args", ".", "dataset_version", "not", "in", "[", "'random'", ",", "'longtail'", ",", "'balanced'", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"Dataset version not found {}\"", ".", "format", "(", "args", ".", "dataset_version", ")", ")", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "data_path", ")", "\n", "version", "=", "args", ".", "dataset_version", "if", "setname", "==", "'train'", "else", "'balanced'", "\n", "if", "version", "==", "'random'", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"imgnt\"", ",", "\"imgnt-{0}-{1}-cache-{2}.pkl\"", ".", "format", "(", "version", ",", "args", ".", "seed", ",", "setname", ")", ")", "\n", "", "else", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"imgnt\"", ",", "\"imgnt-{0}-cache-{1}.pkl\"", ".", "format", "(", "version", ",", "setname", ")", ")", "\n", "", "data", "=", "load_dataset_from_pkl", "(", "filepath", ")", "\n", "dataset_class", "=", "ColorDatasetInMemory", "\n", "datasets", "[", "setname", "]", "=", "[", "data", "[", "'image_data'", "]", ",", "data", "[", "'class_dict'", "]", ",", "args", ",", "dataset_class", "]", "\n", "\n", "", "return", "datasets", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.ImageJitter.__init__": [[475, 477], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "(", "ImageJitter", ".", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.ImageJitter.__call__": [[478, 490], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "enumerate", "len", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "# pick level of jitter for each transform", "\n", "probtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "# pick probabilty for type of jitter", "\n", "\n", "for", "i", ",", "(", "transformer", ",", "value", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "            ", "alpha", ",", "thresh", "=", "value", "\n", "if", "probtensor", "[", "i", "]", "<", "thresh", ":", "\n", "                ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.MonoImageJitter.__init__": [[501, 503], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "(", "ImageJitter", ".", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.MonoImageJitter.__call__": [[504, 516], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "enumerate", "len", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "# pick level of jitter for each transform", "\n", "probtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "# pick probabilty for type of jitter", "\n", "\n", "for", "i", ",", "(", "transformer", ",", "value", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "            ", "alpha", ",", "thresh", "=", "value", "\n", "if", "probtensor", "[", "i", "]", "<", "thresh", ":", "\n", "                ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "'L'", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.MyRotateTransform.__init__": [[519, 521], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "angles", ":", "Sequence", "[", "int", "]", ")", ":", "\n", "        ", "self", ".", "angles", "=", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.MyRotateTransform.__call__": [[522, 525], ["random.choice", "torchvision.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "angle", "=", "random", ".", "choice", "(", "self", ".", "angles", ")", "\n", "return", "TF", ".", "rotate", "(", "x", ",", "angle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.UnNormalize.__init__": [[528, 531], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.UnNormalize.__call__": [[532, 543], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "# The normalize code -> t.sub_(m).div_(s)", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.Normalize.__init__": [[546, 549], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.Normalize.__call__": [[550, 560], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "return", "tensor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.denorm3d": [[27, 29], ["dataset_utils.UnNormalize"], "function", ["None"], ["def", "denorm3d", "(", ")", ":", "\n", "    ", "return", "UnNormalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.norm3d": [[30, 32], ["dataset_utils.Normalize"], "function", ["None"], ["", "def", "norm3d", "(", ")", ":", "\n", "    ", "return", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_pkl": [[34, 45], ["print", "numpy.load", "os.isfile", "Exception"], "function", ["None"], ["", "def", "load_dataset_from_pkl", "(", "filepath", ")", ":", "\n", "    ", "\"\"\"\n    Loads dataset from a prepared pickel file and returns two objects. First, image array containing all images in a list or \n    array. Second, a dictionary mapping class names to image indexes belonging to the class.\n    :param filepath: Path to file\n    \"\"\"", "\n", "if", "not", "osp", ".", "isfile", "(", "filepath", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"File not found: {}\"", ".", "format", "(", "filepath", ")", ")", "\n", "", "print", "(", "\"Loading data from: {}\"", ".", "format", "(", "filepath", ")", ")", "\n", "data", "=", "np", ".", "load", "(", "filepath", ",", "allow_pickle", "=", "True", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.rgb_to_bw": [[47, 51], ["numpy.mean", "numpy.expand_dims", "np.expand_dims.astype"], "function", ["None"], ["", "def", "rgb_to_bw", "(", "images", ")", ":", "\n", "    ", "images", "=", "np", ".", "mean", "(", "images", ",", "axis", "=", "-", "1", ")", "\n", "images", "=", "np", ".", "expand_dims", "(", "images", ",", "axis", "=", "-", "1", ")", "\n", "return", "images", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.merge_extend_dict": [[53, 57], ["dict2.items", "dict1[].extend"], "function", ["None"], ["", "def", "merge_extend_dict", "(", "dict1", ",", "dict2", ")", ":", "\n", "    ", "for", "i", ",", "j", "in", "dict2", ".", "items", "(", ")", ":", "\n", "        ", "dict1", "[", "i", "]", ".", "extend", "(", "j", ")", "\n", "", "return", "dict1", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.join_data": [[59, 72], ["print", "dict", "len", "dataset_utils.merge_extend_dict", "numpy.concatenate", "len", "len", "collections.defaultdict", "numpy.array", "data[].items"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.merge_extend_dict"], ["", "def", "join_data", "(", "data_list", ")", ":", "\n", "    ", "print", "(", "\"Joining {} datasets\"", ".", "format", "(", "len", "(", "data_list", ")", ")", ")", "\n", "data", "=", "data_list", "[", "0", "]", "\n", "new_data", "=", "dict", "(", "class_dict", "=", "defaultdict", "(", "list", ",", "data", "[", "\"class_dict\"", "]", ")", ",", "image_data", "=", "data", "[", "\"image_data\"", "]", ")", "\n", "offset", "=", "len", "(", "data", "[", "\"image_data\"", "]", ")", "\n", "\n", "for", "data", "in", "data_list", "[", "1", ":", "]", ":", "\n", "        ", "new_class_dict", "=", "{", "k", ":", "np", ".", "array", "(", "v", ")", "+", "offset", "for", "k", ",", "v", "in", "data", "[", "\"class_dict\"", "]", ".", "items", "(", ")", "}", "\n", "new_data", "[", "\"class_dict\"", "]", "=", "merge_extend_dict", "(", "new_data", "[", "\"class_dict\"", "]", ",", "new_class_dict", ")", "\n", "new_data", "[", "\"image_data\"", "]", "=", "np", ".", "concatenate", "(", "(", "new_data", "[", "\"image_data\"", "]", ",", "data", "[", "\"image_data\"", "]", ")", ")", "\n", "offset", "+=", "len", "(", "data", "[", "\"image_data\"", "]", ")", "\n", "\n", "", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_from_folder": [[74, 109], ["os.path.exists", "os.path.exists", "Exception", "print", "dataset_utils.scan_folder_structure", "print", "print", "os.path.isfile", "os.path.isfile", "dataset_utils.scan_folder_structure", "print", "dataset_utils.load_images_from_paths_parallel", "print", "print", "print", "open", "pickle.dump", "dataset_utils.load_dataset_from_pkl", "len", "numpy.shape"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.scan_folder_structure", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.scan_folder_structure", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_images_from_paths_parallel", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_pkl"], ["", "def", "load_dataset_from_from_folder", "(", "in_path", ",", "cache_path", ",", "use_cache", "=", "True", ",", "image_size", "=", "None", ",", "use_cache_if_exists", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Scans the given folder for images, where the parenting folder name indicates the image class.\n    :param use_cache: If True, generates and/or loads cached images into memory. If False, loads image paths into memory.\n    :param image_size: Optional parameter specifying the image size in format (h, w) to resize cached images\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "in_path", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"Path not found: {}\"", ".", "format", "(", "in_path", ")", ")", "\n", "\n", "", "if", "use_cache", ":", "\n", "        ", "data", "=", "None", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cache_path", ")", ":", "\n", "            ", "image_paths", ",", "class_dict", "=", "scan_folder_structure", "(", "in_path", ")", "\n", "print", "(", "\"Scanning for images {}\"", ".", "format", "(", "in_path", ",", "''", ")", ")", "\n", "image_data", "=", "load_images_from_paths_parallel", "(", "image_paths", ",", "final_image_size", "=", "image_size", ")", "\n", "data", "=", "{", "\"image_data\"", ":", "image_data", ",", "\"class_dict\"", ":", "class_dict", "}", "\n", "\n", "print", "(", "\"Saving image cache {}\"", ".", "format", "(", "cache_path", ")", ")", "\n", "print", "(", "\"Image shape: {}\"", ".", "format", "(", "np", ".", "shape", "(", "image_data", ")", ")", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "handle", ":", "\n", "                ", "pickle", ".", "dump", "(", "data", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"Cache file already exists\"", ")", "\n", "if", "use_cache_if_exists", ":", "\n", "                ", "data", "=", "load_dataset_from_pkl", "(", "cache_path", ")", "\n", "\n", "", "", "return", "data", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Scanning for images {}\"", ".", "format", "(", "in_path", ")", ")", "\n", "image_paths", ",", "class_dict", "=", "scan_folder_structure", "(", "in_path", ")", "\n", "print", "(", "\"Found {} image files\"", ".", "format", "(", "len", "(", "image_paths", ")", ")", ")", "\n", "print", "(", "\"No caching performed, set use_cache=True for computation efficiency\"", ")", "\n", "return", "{", "\"image_data\"", ":", "image_paths", ",", "\"class_dict\"", ":", "class_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.scan_folder_structure": [[111, 132], ["os.walk", "os.walk", "enumerate", "filename.lower().endswith", "image_path.split", "class_dict[].append", "image_paths.append", "filename.lower", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "scan_folder_structure", "(", "directory", ")", ":", "\n", "    ", "\"\"\"\n    Scans the given folder for images, where the parenting folder name indicates the image class. \n    Returns filenames and associated class dictionary that maps labels to indexes of images belonging to class.\n    \"\"\"", "\n", "image_paths", "=", "[", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "directory", ")", ":", "\n", "        ", "for", "filename", "in", "files", ":", "\n", "            ", "if", "filename", ".", "lower", "(", ")", ".", "endswith", "(", "(", "'.jpg'", ",", "'.jpeg'", ",", "'.gif'", ",", "'.png'", ",", "'.JPEG'", ")", ")", ":", "\n", "                ", "image_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "\n", "", "", "", "class_dict", "=", "{", "}", "\n", "for", "i", ",", "image_path", "in", "enumerate", "(", "image_paths", ")", ":", "\n", "        ", "class_label", "=", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "if", "class_label", "not", "in", "class_dict", ":", "\n", "            ", "class_dict", "[", "class_label", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "class_dict", "[", "class_label", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "image_paths", ",", "class_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_images_from_paths": [[134, 147], ["print", "tqdm.tqdm", "enumerate", "len", "dataset_utils.load_image", "image_data.append", "pbar_memory_load.set_description", "pbar_memory_load.update", "len", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.load_image"], ["", "def", "load_images_from_paths", "(", "image_paths", ")", ":", "\n", "    ", "print", "(", "\"Loading {} images into RAM\"", ".", "format", "(", "len", "(", "image_paths", ")", ")", ")", "\n", "image_data", "=", "[", "]", "\n", "\n", "# Process the list of files, but split the work across the process pool", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "image_paths", ")", ")", "as", "pbar_memory_load", ":", "\n", "        ", "for", "i", ",", "image_path", "in", "enumerate", "(", "image_paths", ")", ":", "\n", "            ", "image", "=", "load_image", "(", "image_path", ")", "\n", "image_data", ".", "append", "(", "image", ")", "\n", "pbar_memory_load", ".", "set_description", "(", "\"Getting: {}\"", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "image_path", ")", ")", ")", "\n", "pbar_memory_load", ".", "update", "(", "1", ")", "\n", "\n", "", "", "return", "image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_images_from_paths_parallel": [[149, 167], ["print", "numpy.asarray", "len", "concurrent.futures.ThreadPoolExecutor", "len", "tqdm.tqdm", "zip", "range", "executor.map", "numpy.asarray", "numpy.shape", "pbar_memory_load.update", "pbar_memory_load.set_description", "len", "len", "zip", "dataset_utils.load_image", "itertools.repeat", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.load_image"], ["", "def", "load_images_from_paths_parallel", "(", "image_paths", ",", "num_threads", "=", "16", ",", "final_image_size", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Loading {} images into RAM\"", ".", "format", "(", "len", "(", "image_paths", ")", ")", ")", "\n", "image_data", "=", "[", "None", "]", "*", "len", "(", "image_paths", ")", "\n", "\n", "# Process the list of files, but split the work across the process pool", "\n", "with", "concurrent", ".", "futures", ".", "ThreadPoolExecutor", "(", "max_workers", "=", "num_threads", ")", "as", "executor", ":", "\n", "        ", "with", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "image_paths", ")", ")", "as", "pbar_memory_load", ":", "\n", "            ", "for", "i", ",", "(", "image", ",", "image_path", ")", "in", "zip", "(", "range", "(", "len", "(", "image_paths", ")", ")", ",", "\n", "executor", ".", "map", "(", "lambda", "p", ":", "load_image", "(", "*", "p", ")", ",", "\n", "zip", "(", "image_paths", ",", "itertools", ".", "repeat", "(", "final_image_size", ")", ")", ")", ")", ":", "\n", "                ", "image_data", "[", "i", "]", "=", "np", ".", "asarray", "(", "image", ")", "\n", "assert", "image_path", "==", "image_paths", "[", "i", "]", "\n", "image_size", "=", "np", ".", "shape", "(", "image", ")", "\n", "assert", "image_size", "==", "final_image_size", ",", "\"Image was not properly resized. Image of shape {}\"", ".", "format", "(", "image_size", ")", "\n", "pbar_memory_load", ".", "update", "(", "1", ")", "\n", "pbar_memory_load", ".", "set_description", "(", "\"Getting{}: {} to {}\"", ".", "format", "(", "\n", "\" and resizing\"", "if", "final_image_size", "is", "not", "None", "else", "\"\"", ",", "os", ".", "path", ".", "basename", "(", "image_path", ")", ",", "final_image_size", ")", ")", "\n", "", "", "", "return", "np", ".", "asarray", "(", "image_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_image": [[169, 182], ["PIL.Image.open", "im.convert.load", "len", "im.convert.resize", "im.convert.convert"], "function", ["None"], ["", "def", "load_image", "(", "image_path", ",", "image_size", "=", "None", ")", ":", "\n", "    ", "if", "len", "(", "image_size", ")", "==", "3", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "image_size", "\n", "", "else", ":", "\n", "        ", "h", ",", "w", "=", "image_size", "\n", "c", "=", "1", "\n", "", "im", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "im", ".", "load", "(", ")", "\n", "if", "image_size", "is", "not", "None", ":", "\n", "        ", "im", "=", "im", ".", "resize", "(", "(", "h", ",", "w", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "", "if", "c", "==", "3", "and", "im", ".", "mode", "==", "'L'", ":", "\n", "        ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "", "return", "im", ",", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.color_transform": [[184, 223], ["transform_list.append", "torchvision.transforms.Compose", "transform_list.extend", "transform_list.extend", "torchvision.transforms.ToTensor", "transform_list.append", "transforms.Compose.", "torchvision.transforms.ToPILImage", "torchvision.transforms.Normalize", "torchvision.transforms.RandomRotation", "torchvision.transforms.RandomResizedCrop", "dataset_utils.ImageJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "dict", "int", "int"], "function", ["None"], ["", "def", "color_transform", "(", "augment", ",", "normalise", ",", "image_width", ",", "image_height", ",", "toPIL", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the trasformation function for data augmentation of colour images\n    Add/edit your own augmentation in 'basic_augmentation' variable\n    \"\"\"", "\n", "transform_list", "=", "[", "]", "\n", "\n", "if", "toPIL", ":", "\n", "        ", "transform_list", "=", "[", "transforms", ".", "ToPILImage", "(", ")", "]", "\n", "\n", "", "if", "augment", ":", "\n", "        ", "transform_list", ".", "extend", "(", "[", "\n", "transforms", ".", "RandomRotation", "(", "10", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "(", "image_width", ",", "image_height", ")", ",", "scale", "=", "(", "0.15", ",", "1.1", ")", ")", ",", "\n", "ImageJitter", "(", "dict", "(", "\n", "Brightness", "=", "(", "0.4", ",", "1.", ")", ",", "# means random level of brightness (upto 0.4) applied 100% of the time ", "\n", "Contrast", "=", "(", "0.4", ",", "1.", ")", ",", "\n", "Color", "=", "(", "0.4", ",", "1.", ")", "\n", "#                 Sharpness=(0.4, 1.)", "\n", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "transform_list", ".", "extend", "(", "[", "\n", "# leaves out things around the egdes giving an additional boost of 1-5% accuracy points", "\n", "transforms", ".", "Resize", "(", "[", "int", "(", "image_height", "*", "1.15", ")", ",", "int", "(", "image_width", "*", "1.15", ")", "]", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "(", "image_height", ",", "image_width", ")", ")", "\n", "]", ")", "\n", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "if", "normalise", ":", "\n", "        ", "transform_list", ".", "append", "(", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "return", "lambda", "image", ":", "transform", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.mono_transform": [[225, 265], ["transform_list.append", "torchvision.transforms.Compose", "transform_list.extend", "transform_list.extend", "torchvision.transforms.ToTensor", "transform_list.append", "transforms.Compose.", "torchvision.transforms.ToPILImage", "torchvision.transforms.Normalize", "dataset_utils.MonoImageJitter", "torchvision.transforms.RandomRotation", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "dict", "int", "int"], "function", ["None"], ["", "def", "mono_transform", "(", "augment", ",", "normalise", ",", "image_width", ",", "image_height", ",", "toPIL", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the trasformation function for data augmentation of monochrome images\n    Add/edit your own augmentation in 'basic_augmentation' variable\n    \"\"\"", "\n", "transform_list", "=", "[", "]", "\n", "\n", "if", "toPIL", ":", "\n", "        ", "transform_list", "=", "[", "transforms", ".", "ToPILImage", "(", "'L'", ")", "]", "\n", "\n", "", "if", "augment", ":", "\n", "        ", "transform_list", ".", "extend", "(", "[", "\n", "# transforms.Grayscale(num_output_channels=1),", "\n", "MonoImageJitter", "(", "dict", "(", "\n", "Brightness", "=", "(", "0.25", ",", "1.", ")", ",", "\n", "Contrast", "=", "(", "0.25", ",", "1.", ")", ",", "\n", "Color", "=", "(", "0.25", ",", "1.", ")", ",", "\n", "Sharpness", "=", "(", "0.25", ",", "1.", ")", "\n", ")", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "20", ",", "fill", "=", "(", "128", ",", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "(", "image_width", ",", "image_height", ")", ",", "(", "0.25", ",", "1.0", ")", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "transform_list", ".", "extend", "(", "[", "\n", "# leaves out things around the egdes giving an additional boost of 1-5% accuracy points", "\n", "transforms", ".", "Resize", "(", "[", "int", "(", "image_height", "*", "1.15", ")", ",", "int", "(", "image_width", "*", "1.15", ")", "]", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "(", "image_height", ",", "image_width", ")", ")", "\n", "]", ")", "\n", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "if", "normalise", ":", "\n", "        ", "transform_list", ".", "append", "(", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", "\n", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "return", "lambda", "image", ":", "transform", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.prep_datasets": [[267, 304], ["dataset_utils.prep_data", "dataset_class", "print", "dataset_utils.prep_data", "dataset_class", "print", "dataset_utils.merge_train_val_and_conventional_split", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.prep_data", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.prep_data", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.merge_train_val_and_conventional_split"], ["", "def", "prep_datasets", "(", "datasets", ",", "general_args", ",", "conventional_split", "=", "False", ",", "from_train_only", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    behaviour: \n        option 1. Using the val and train datasets as given.\n        option 2. Combine val and train classes, and then repartition the samples using conventional 80/20 split\n        option 3. If train dataset is smaller than original, use leftovers from new train dataset to create val dataset\n    \"\"\"", "\n", "\n", "new_datasets", "=", "{", "}", "\n", "splits", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "\n", "if", "(", "conventional_split", "and", "from_train_only", "and", "datasets", "[", "'train'", "]", "[", "2", "]", ".", "imbalance_distribution", "is", "None", ")", ":", "# option 3", "\n", "        ", "image_data", ",", "class_dict", ",", "args", ",", "dataset_class", "=", "datasets", "[", "'train'", "]", "\n", "new_image_data", ",", "new_class_dict", ",", "extra_image_data", ",", "extra_class_dict", "=", "prep_data", "(", "image_data", ",", "class_dict", ",", "args", ",", "extra_samples", "=", "True", ")", "\n", "new_datasets", "[", "'train'", "]", "=", "dataset_class", "(", "new_image_data", ",", "new_class_dict", ",", "args", ")", "\n", "print", "(", "\"{} dataset contains: {} images, {} classes\"", ".", "format", "(", "'train'", ",", "len", "(", "new_image_data", ")", ",", "len", "(", "new_class_dict", ")", ")", ")", "\n", "\n", "# Val from extra train samples", "\n", "datasets", "[", "'val'", "]", "[", "0", "]", "=", "extra_image_data", "\n", "datasets", "[", "'val'", "]", "[", "1", "]", "=", "extra_class_dict", "\n", "\n", "splits", "=", "[", "\"val\"", ",", "\"test\"", "]", "\n", "\n", "", "elif", "conventional_split", ":", "# option 2", "\n", "        ", "data1", "=", "datasets", "[", "'train'", "]", "[", ":", "2", "]", "\n", "data2", "=", "datasets", "[", "'val'", "]", "[", ":", "2", "]", "\n", "newdata1", ",", "newdata2", "=", "merge_train_val_and_conventional_split", "(", "data1", ",", "data2", ")", "\n", "datasets", "[", "'train'", "]", "[", ":", "2", "]", "=", "newdata1", "\n", "datasets", "[", "'val'", "]", "[", ":", "2", "]", "=", "newdata2", "\n", "\n", "", "for", "split", "in", "splits", ":", "# default", "\n", "        ", "image_data", ",", "class_dict", ",", "args", ",", "dataset_class", "=", "datasets", "[", "split", "]", "\n", "new_image_data", ",", "new_class_dict", "=", "prep_data", "(", "image_data", ",", "class_dict", ",", "args", ")", "\n", "new_datasets", "[", "split", "]", "=", "dataset_class", "(", "new_image_data", ",", "new_class_dict", ",", "args", ")", "\n", "print", "(", "\"{} dataset contains: {} images, {} classes\"", ".", "format", "(", "split", ",", "len", "(", "new_image_data", ")", ",", "len", "(", "new_class_dict", ")", ")", ")", "\n", "\n", "", "return", "new_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.prep_data": [[306, 372], ["min", "numpy.random.RandomState", "tasks.imbalance_utils.get_num_samples_per_class", "np.random.RandomState.shuffle", "sorted", "sorted", "numpy.array", "int", "len", "class_dict.keys", "len", "np.random.RandomState.choice", "min", "max", "enumerate", "numpy.vstack", "numpy.vstack", "enumerate", "numpy.vstack", "class_dict.items", "numpy.array", "min", "np.random.RandomState.choice", "np.vstack.append", "np.vstack.append", "numpy.array", "min", "np.random.RandomState.choice", "np.vstack.append", "len", "len", "tasks.imbalance_utils.get_num_samples_per_class.max", "len", "numpy.arange", "numpy.arange", "len", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.get_num_samples_per_class"], ["", "def", "prep_data", "(", "image_data", ",", "class_dict", ",", "args", ",", "extra_samples", "=", "False", ")", ":", "\n", "\n", "    ", "if", "args", ".", "imbalance_distribution", "is", "None", ":", "\n", "        ", "image_data", "=", "image_data", "\n", "class_dict", "=", "{", "class_name", ":", "np", ".", "array", "(", "indices", ")", "for", "class_name", ",", "indices", "in", "class_dict", ".", "items", "(", ")", "}", "\n", "new_image_data", ",", "new_class_dict", "=", "image_data", ",", "class_dict", "\n", "return", "new_image_data", ",", "new_class_dict", "\n", "\n", "", "else", ":", "\n", "        ", "frac", "=", "1.", "if", "args", ".", "use_classes_frac", "is", "None", "else", "args", ".", "use_classes_frac", "\n", "num_classes", "=", "min", "(", "int", "(", "len", "(", "class_dict", ")", "*", "frac", ")", ",", "len", "(", "class_dict", ")", ")", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "args", ".", "seed", ")", "\n", "num_samples", "=", "get_num_samples_per_class", "(", "args", ".", "imbalance_distribution", ",", "num_classes", ",", "args", ".", "min_num_samples", ",", "\n", "args", ".", "max_num_samples", ",", "args", ".", "num_minority", ",", "rng", ")", "\n", "rng", ".", "shuffle", "(", "num_samples", ")", "\n", "\n", "class_labels", "=", "sorted", "(", "class_dict", ".", "keys", "(", ")", ")", "# sort for determinism", "\n", "\n", "if", "num_classes", "<", "len", "(", "class_labels", ")", ":", "\n", "            ", "class_labels", "=", "rng", ".", "choice", "(", "class_labels", ",", "num_classes", ",", "replace", "=", "False", ")", "\n", "\n", "", "class_labels", "=", "sorted", "(", "class_labels", ")", "\n", "\n", "if", "extra_samples", ":", "\n", "# Get extra samples which will be used for validation", "\n", "            ", "min_samples_per_class", "=", "min", "(", "[", "len", "(", "class_dict", "[", "label", "]", ")", "for", "label", "in", "class_labels", "]", ")", "\n", "extra_sample_per_class", "=", "max", "(", "0", ",", "min_samples_per_class", "-", "num_samples", ".", "max", "(", ")", ")", "\n", "\n", "new_image_data1", "=", "[", "]", "\n", "new_image_data2", "=", "[", "]", "\n", "new_class_dict1", "=", "{", "}", "\n", "new_class_dict2", "=", "{", "}", "\n", "index_offset1", "=", "0", "\n", "index_offset2", "=", "0", "\n", "for", "l", ",", "label", "in", "enumerate", "(", "class_labels", ")", ":", "\n", "                ", "class_idx", "=", "np", ".", "array", "(", "class_dict", "[", "label", "]", ")", "\n", "n1", ",", "n2", "=", "num_samples", "[", "l", "]", ",", "extra_sample_per_class", "\n", "n", "=", "min", "(", "n1", "+", "n2", ",", "len", "(", "class_idx", ")", ")", "\n", "selected_idx", "=", "rng", ".", "choice", "(", "class_idx", ",", "n", ",", "replace", "=", "False", ")", "\n", "new_image_data1", ".", "append", "(", "image_data", "[", "selected_idx", "[", ":", "n1", "]", "]", ")", "\n", "new_image_data2", ".", "append", "(", "image_data", "[", "selected_idx", "[", "n1", ":", "]", "]", ")", "\n", "new_class_dict1", "[", "label", "]", "=", "index_offset1", "+", "np", ".", "arange", "(", "n1", ")", "\n", "new_class_dict2", "[", "label", "]", "=", "index_offset2", "+", "np", ".", "arange", "(", "n2", ")", "\n", "index_offset1", "+=", "n1", "\n", "index_offset2", "+=", "n2", "\n", "\n", "", "new_image_data1", "=", "np", ".", "vstack", "(", "new_image_data1", ")", "\n", "new_image_data2", "=", "np", ".", "vstack", "(", "new_image_data2", ")", "\n", "return", "new_image_data1", ",", "new_class_dict1", ",", "new_image_data2", ",", "new_class_dict2", "\n", "\n", "", "else", ":", "\n", "            ", "new_image_data", "=", "[", "]", "\n", "new_class_dict", "=", "{", "}", "\n", "index_offset", "=", "0", "\n", "\n", "for", "l", ",", "label", "in", "enumerate", "(", "class_labels", ")", ":", "\n", "                ", "class_idx", "=", "np", ".", "array", "(", "class_dict", "[", "label", "]", ")", "\n", "n", "=", "min", "(", "num_samples", "[", "l", "]", ",", "len", "(", "class_idx", ")", ")", "\n", "selected_idx", "=", "rng", ".", "choice", "(", "class_idx", ",", "n", ",", "replace", "=", "False", ")", "\n", "new_image_data", ".", "append", "(", "image_data", "[", "selected_idx", "]", ")", "\n", "new_class_dict", "[", "label", "]", "=", "index_offset", "+", "np", ".", "arange", "(", "n", ")", "\n", "index_offset", "+=", "n", "\n", "\n", "", "new_image_data", "=", "np", ".", "vstack", "(", "new_image_data", ")", "\n", "return", "new_image_data", ",", "new_class_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.partial_shuffle": [[374, 391], ["numpy.random.RandomState", "numpy.around().astype", "numpy.arange", "np.random.RandomState.choice", "copy.copy", "range", "len", "np.random.RandomState.randint", "dataset_utils.swap", "len", "numpy.around", "len"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.swap"], ["", "", "", "def", "partial_shuffle", "(", "array", ",", "fraction", ",", "seed", ")", ":", "# shuffles elements within a fraction of the array", "\n", "    ", "if", "len", "(", "array", ")", "==", "0", "or", "fraction", "==", "0.0", ":", "\n", "        ", "return", "array", "\n", "", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "n_to_shuffle", "=", "np", ".", "around", "(", "fraction", "*", "len", "(", "array", ")", ")", ".", "astype", "(", "int", ")", "\n", "array_idx", "=", "np", ".", "arange", "(", "len", "(", "array", ")", ")", "\n", "idx_to_shuffle", "=", "rng", ".", "choice", "(", "array_idx", ",", "n_to_shuffle", ",", "replace", "=", "False", ")", "\n", "\n", "new_array", "=", "copy", ".", "copy", "(", "array", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_to_shuffle", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "j", "=", "rng", ".", "randint", "(", "i", ")", "# add +1 to allow swap with itself", "\n", "a", "=", "idx_to_shuffle", "[", "i", "]", "\n", "b", "=", "idx_to_shuffle", "[", "j", "]", "\n", "new_array", "=", "swap", "(", "new_array", ",", "a", ",", "b", ")", "\n", "\n", "", "return", "new_array", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.swap": [[393, 398], ["None"], "function", ["None"], ["", "def", "swap", "(", "array", ",", "a", ",", "b", ")", ":", "\n", "    ", "temp", "=", "array", "[", "a", "]", "\n", "array", "[", "a", "]", "=", "array", "[", "b", "]", "\n", "array", "[", "b", "]", "=", "temp", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.get_unique_counts": [[400, 406], ["torch.unique", "torch.unique", "counts.append", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "get_unique_counts", "(", "y", ")", ":", "\n", "    ", "unique", "=", "torch", ".", "unique", "(", "y", ")", "\n", "counts", "=", "[", "]", "\n", "for", "lbl", "in", "unique", ":", "\n", "        ", "counts", ".", "append", "(", "(", "y", "==", "lbl", ")", ".", "sum", "(", ")", ")", "\n", "", "return", "unique", ",", "torch", ".", "tensor", "(", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.conventional_split": [[408, 444], ["print", "dict", "dict", "dict", "dict", "dict", "dict", "class_dict.items", "Exception", "dict", "dict", "dict", "len", "numpy.array", "int", "int", "int", "numpy.random.permutation", "numpy.arange", "numpy.arange", "numpy.arange", "image_split[].append", "image_split[].append", "image_split[].append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "def", "conventional_split", "(", "image_data", ",", "class_dict", ",", "split_portions", "=", "[", "0.8", ",", "0.2", ",", "0.0", "]", ",", "method", "=", "'per_class'", ")", ":", "\n", "    ", "print", "(", "\"Creating conventional {}/{}/{} split\"", ".", "format", "(", "*", "split_portions", ")", ")", "\n", "data_split", "=", "dict", "(", "train", "=", "dict", "(", ")", ",", "val", "=", "dict", "(", ")", ",", "test", "=", "dict", "(", ")", ")", "\n", "image_split", "=", "dict", "(", "train", "=", "[", "]", ",", "val", "=", "[", "]", ",", "test", "=", "[", "]", ")", "\n", "idx_counter", "=", "dict", "(", "train", "=", "0", ",", "val", "=", "0", ",", "test", "=", "0", ")", "\n", "\n", "if", "method", "==", "'per_class'", ":", "\n", "        ", "for", "cls", ",", "idxs", "in", "class_dict", ".", "items", "(", ")", ":", "\n", "            ", "n", "=", "len", "(", "idxs", ")", "\n", "idxs", "=", "np", ".", "array", "(", "idxs", ")", "\n", "n_train", "=", "int", "(", "n", "*", "split_portions", "[", "0", "]", ")", "\n", "n_val", "=", "int", "(", "n", "*", "split_portions", "[", "1", "]", ")", "\n", "n_test", "=", "int", "(", "n", "*", "split_portions", "[", "2", "]", ")", "\n", "perms", "=", "np", ".", "random", ".", "permutation", "(", "n", ")", "\n", "\n", "data_split", "[", "'train'", "]", "[", "cls", "]", "=", "np", ".", "arange", "(", "idx_counter", "[", "'train'", "]", ",", "idx_counter", "[", "'train'", "]", "+", "n_train", ")", "\n", "data_split", "[", "'val'", "]", "[", "cls", "]", "=", "np", ".", "arange", "(", "idx_counter", "[", "'val'", "]", ",", "idx_counter", "[", "'val'", "]", "+", "n_val", ")", "\n", "data_split", "[", "'test'", "]", "[", "cls", "]", "=", "np", ".", "arange", "(", "idx_counter", "[", "'test'", "]", ",", "idx_counter", "[", "'test'", "]", "+", "n_test", ")", "\n", "\n", "idx_counter", "[", "'train'", "]", "+=", "n_train", "\n", "idx_counter", "[", "'val'", "]", "+=", "n_val", "\n", "idx_counter", "[", "'test'", "]", "+=", "n_test", "\n", "\n", "image_split", "[", "'train'", "]", ".", "append", "(", "image_data", "[", "idxs", "[", "perms", "[", ":", "n_train", "]", "]", "]", ")", "\n", "image_split", "[", "'val'", "]", ".", "append", "(", "image_data", "[", "idxs", "[", "perms", "[", "n_train", ":", "n_train", "+", "n_val", "]", "]", "]", ")", "\n", "image_split", "[", "'test'", "]", ".", "append", "(", "image_data", "[", "idxs", "[", "perms", "[", "n_train", "+", "n_val", ":", "]", "]", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "# there could be other ways to do this eg. without taking classes into consideration but then there might some imbalance ", "\n", "        ", "raise", "Exception", "(", "'Unimplemented Error'", ")", "\n", "\n", "", "train", "=", "dict", "(", "image_data", "=", "np", ".", "concatenate", "(", "image_split", "[", "'train'", "]", ")", ",", "class_dict", "=", "data_split", "[", "'train'", "]", ")", "\n", "val", "=", "dict", "(", "image_data", "=", "np", ".", "concatenate", "(", "image_split", "[", "'val'", "]", ")", ",", "class_dict", "=", "data_split", "[", "'val'", "]", ")", "\n", "test", "=", "dict", "(", "image_data", "=", "np", ".", "concatenate", "(", "image_split", "[", "'test'", "]", ")", ",", "class_dict", "=", "data_split", "[", "'test'", "]", ")", "\n", "\n", "return", "train", ",", "val", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.merge_train_val_and_conventional_split": [[445, 465], ["dataset_utils.join_data", "dataset_utils.conventional_split", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.join_data", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.conventional_split"], ["", "def", "merge_train_val_and_conventional_split", "(", "data1", ",", "data2", ")", ":", "\n", "    ", "\"\"\"\n    Merges the train and the validation splits into a single set of classes.\n    Creates a conventional split of 75%/25% samples for train/val\n    \"\"\"", "\n", "image_data1", ",", "class_dict1", "=", "data1", "\n", "image_data2", ",", "class_dict2", "=", "data2", "\n", "\n", "# joining is slow but works", "\n", "data", "=", "join_data", "(", "[", "\n", "dict", "(", "image_data", "=", "image_data1", ",", "class_dict", "=", "class_dict1", ")", ",", "\n", "dict", "(", "image_data", "=", "image_data2", ",", "class_dict", "=", "class_dict2", ")", ",", "\n", "]", ")", "\n", "\n", "# then split", "\n", "train", ",", "val", ",", "_", "=", "conventional_split", "(", "data", "[", "'image_data'", "]", ",", "data", "[", "'class_dict'", "]", ")", "\n", "data1", "=", "(", "train", "[", "'image_data'", "]", ",", "train", "[", "'class_dict'", "]", ")", "\n", "data2", "=", "(", "val", "[", "'image_data'", "]", ",", "val", "[", "'class_dict'", "]", ")", "\n", "\n", "return", "data1", ",", "data2", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.mini_to_cub.get_MiniImageNet_to_CUB200": [[8, 16], ["datasets.update", "datasets.update", "datasets.mini.get_MiniImageNet", "datasets.cub.get_CUB200"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.mini.get_MiniImageNet", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.cub.get_CUB200"], ["def", "get_MiniImageNet_to_CUB200", "(", "args_per_set", ")", ":", "\n", "    ", "\"\"\"\n    Returns MiniImagenet datasets.\n    \"\"\"", "\n", "datasets", "=", "{", "}", "\n", "datasets", ".", "update", "(", "get_MiniImageNet", "(", "args_per_set", ",", "setnames", "=", "[", "\"train\"", ",", "\"val\"", "]", ")", ")", "\n", "datasets", ".", "update", "(", "get_CUB200", "(", "args_per_set", ",", "setnames", "=", "[", "\"test\"", "]", ")", ")", "\n", "return", "datasets", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.cub.get_CUB200": [[5, 26], ["os.path.abspath", "Exception", "os.path.join", "datasets.dataset_utils.load_dataset_from_pkl"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_pkl"], ["def", "get_CUB200", "(", "args_per_set", ",", "setnames", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ")", ":", "\n", "    ", "\"\"\"\n    Returns MiniImagenet datasets.\n    \"\"\"", "\n", "datasets", "=", "{", "}", "\n", "for", "setname", "in", "setnames", ":", "\n", "        ", "args", "=", "args_per_set", "[", "setname", "]", "\n", "\n", "if", "args", ".", "dataset_version", "not", "in", "[", "None", ",", "\"2011\"", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"Dataset version not found {}\"", ".", "format", "(", "args", ".", "dataset_version", ")", ")", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "data_path", ")", "\n", "\n", "if", "args", ".", "dataset_version", "in", "[", "None", ",", "\"2011\"", "]", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"cub\"", ",", "\"cub-cache-{0}.pkl\"", ".", "format", "(", "setname", ")", ")", "\n", "data", "=", "load_dataset_from_pkl", "(", "filepath", ")", "\n", "dataset_class", "=", "ColorDatasetInMemory", "\n", "\n", "", "datasets", "[", "setname", "]", "=", "[", "data", "[", "'image_data'", "]", ",", "data", "[", "'class_dict'", "]", ",", "args", ",", "dataset_class", "]", "\n", "\n", "", "return", "datasets", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.mini.get_MiniImageNet": [[6, 38], ["os.path.abspath", "Exception", "os.path.join", "datasets.dataset_utils.load_dataset_from_pkl", "os.path.join", "datasets.dataset_utils.load_dataset_from_from_folder", "os.path.join", "datasets.dataset_utils.load_dataset_from_pkl", "mini.animalreduced_step_imbalance_miniimagenet"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_pkl", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_from_folder", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.load_dataset_from_pkl", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.mini.animalreduced_step_imbalance_miniimagenet"], ["def", "get_MiniImageNet", "(", "args_per_set", ",", "setnames", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ")", ":", "\n", "    ", "\"\"\"\n    Returns MiniImagenet datasets.\n    \"\"\"", "\n", "datasets", "=", "{", "}", "\n", "for", "setname", "in", "setnames", ":", "\n", "        ", "args", "=", "args_per_set", "[", "setname", "]", "\n", "\n", "if", "args", ".", "dataset_version", "not", "in", "[", "None", ",", "\"ravi\"", ",", "\"from_folder\"", ",", "\"step-animal\"", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"Dataset version not found {}\"", ".", "format", "(", "args", ".", "dataset_version", ")", ")", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "data_path", ")", "\n", "\n", "if", "args", ".", "dataset_version", "in", "[", "None", ",", "\"ravi\"", "]", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"mini\"", ",", "\"mini-cache-{0}.pkl\"", ".", "format", "(", "setname", ")", ")", "\n", "data", "=", "load_dataset_from_pkl", "(", "filepath", ")", "\n", "dataset_class", "=", "ColorDatasetInMemory", "\n", "\n", "", "elif", "args", ".", "dataset_version", "in", "[", "\"from_folder\"", "]", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"mini_from_folder\"", ",", "setname", ")", "\n", "data", "=", "load_dataset_from_from_folder", "(", "filepath", ",", "use_cache", "=", "args", ".", "use_cache", ")", "\n", "dataset_class", "=", "ColorDatasetInMemory", "if", "args", ".", "use_cache", "else", "ColorDatasetOnDisk", "\n", "\n", "", "elif", "args", ".", "dataset_version", "in", "[", "\"step-animal\"", "]", "and", "setname", "in", "[", "\"train\"", "]", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"mini\"", ",", "\"mini-cache-{0}.pkl\"", ".", "format", "(", "setname", ")", ")", "\n", "data", "=", "load_dataset_from_pkl", "(", "filepath", ")", "\n", "data", "=", "animalreduced_step_imbalance_miniimagenet", "(", "data", ",", "args", ")", "\n", "dataset_class", "=", "ColorDatasetInMemory", "\n", "\n", "", "datasets", "[", "setname", "]", "=", "[", "data", "[", "'image_data'", "]", ",", "data", "[", "'class_dict'", "]", ",", "args", ",", "dataset_class", "]", "\n", "\n", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.mini.animalreduced_step_imbalance_miniimagenet": [[39, 102], ["list", "list", "numpy.random.RandomState", "enumerate", "numpy.vstack", "map", "sorted", "numpy.array", "np.random.RandomState.choice", "np.vstack.append", "data[].keys", "numpy.arange", "x.split"], "function", ["None"], ["", "def", "animalreduced_step_imbalance_miniimagenet", "(", "data", ",", "args", ")", ":", "\n", "\n", "    ", "animal_classes", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "split", "(", ")", "[", "0", "]", ",", "\"\"\"n02606052 rock_beauty # animal \nn02108089 boxer # animal \nn04275548 spider_web # animal \nn02120079 Arctic_fox # animal \nn01910747 jellyfish # animal \nn02457408 three-toed_sloth # animal\nn02108915 French_bulldog # animal \nn01770081 harvestman # animal \nn01749939 green_mamba # animal \nn02111277 Newfoundland # animal \nn01704323 triceratops # animal (deceased)\nn02113712 miniature_poodle # animal \nn02091831 Saluki # animal \nn02089867 Walker_hound # animal \nn02165456 ladybug # animal \nn02101006 Gordon_setter # animal \nn02074367 dugong # animal \nn02105505 komondor # animal \nn02108551 Tibetan_mastiff # animal \nn01532829 house_finch # bird\nn01558993 robin # bird\nn01843383 toucan # bird \"\"\"", ".", "split", "(", "'\\n'", ")", ")", ")", "\n", "\n", "# for cls in data[\"class_dict\"].keys():", "\n", "\n", "#     if cls in animal_classes:", "\n", "#         print(cls)", "\n", "#         idx = data[\"class_dict\"][cls]", "\n", "#         selected = np.random.choice(idx, 25, replace=False)", "\n", "#         data[\"class_dict\"][cls] = selected", "\n", "#     else:", "\n", "#         idx = data[\"class_dict\"][cls]", "\n", "#         selected = np.random.choice(idx, 444, replace=False)", "\n", "#         data[\"class_dict\"][cls] = selected", "\n", "\n", "\n", "# delete images and shift index", "\n", "class_labels", "=", "list", "(", "sorted", "(", "data", "[", "\"class_dict\"", "]", ".", "keys", "(", ")", ")", ")", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "args", ".", "seed", ")", "\n", "class_dict", "=", "data", "[", "\"class_dict\"", "]", "\n", "image_data", "=", "data", "[", "\"image_data\"", "]", "\n", "\n", "new_image_data", "=", "[", "]", "\n", "new_class_dict", "=", "{", "}", "\n", "index_offset", "=", "0", "\n", "\n", "for", "l", ",", "label", "in", "enumerate", "(", "class_labels", ")", ":", "\n", "        ", "class_idx", "=", "np", ".", "array", "(", "class_dict", "[", "label", "]", ")", "\n", "n", "=", "25", "if", "label", "in", "animal_classes", "else", "444", "\n", "selected_idx", "=", "rng", ".", "choice", "(", "class_idx", ",", "n", ",", "replace", "=", "False", ")", "\n", "new_image_data", ".", "append", "(", "image_data", "[", "selected_idx", "]", ")", "\n", "new_class_dict", "[", "label", "]", "=", "index_offset", "+", "np", ".", "arange", "(", "n", ")", "\n", "index_offset", "+=", "n", "\n", "\n", "", "new_image_data", "=", "np", ".", "vstack", "(", "new_image_data", ")", "\n", "\n", "new_data", "=", "{", "}", "\n", "new_data", "[", "'class_dict'", "]", "=", "new_class_dict", "\n", "new_data", "[", "'image_data'", "]", "=", "new_image_data", "\n", "\n", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.mini.__animalreduced_step_imbalance_miniimagenet": [[104, 143], ["list", "data[].keys", "map", "print", "numpy.random.choice", "numpy.random.choice", "x.split"], "function", ["None"], ["", "def", "__animalreduced_step_imbalance_miniimagenet", "(", "data", ")", ":", "\n", "\n", "    ", "animal_classes", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "split", "(", ")", "[", "0", "]", ",", "\"\"\"n02606052 rock_beauty # animal \nn02108089 boxer # animal \nn04275548 spider_web # animal \nn02120079 Arctic_fox # animal \nn01910747 jellyfish # animal \nn02457408 three-toed_sloth # animal\nn02108915 French_bulldog # animal \nn01770081 harvestman # animal \nn01749939 green_mamba # animal \nn02111277 Newfoundland # animal \nn01704323 triceratops # animal (deceased)\nn02113712 miniature_poodle # animal \nn02091831 Saluki # animal \nn02089867 Walker_hound # animal \nn02165456 ladybug # animal \nn02101006 Gordon_setter # animal \nn02074367 dugong # animal \nn02105505 komondor # animal \nn02108551 Tibetan_mastiff # animal \nn01532829 house_finch # bird\nn01558993 robin # bird\nn01843383 toucan # bird \"\"\"", ".", "split", "(", "'\\n'", ")", ")", ")", "\n", "\n", "for", "cls", "in", "data", "[", "\"class_dict\"", "]", ".", "keys", "(", ")", ":", "\n", "\n", "        ", "if", "cls", "in", "animal_classes", ":", "\n", "            ", "print", "(", "cls", ")", "\n", "idx", "=", "data", "[", "\"class_dict\"", "]", "[", "cls", "]", "\n", "selected", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "25", ",", "replace", "=", "False", ")", "\n", "data", "[", "\"class_dict\"", "]", "[", "cls", "]", "=", "selected", "\n", "", "else", ":", "\n", "#print(cls)", "\n", "            ", "idx", "=", "data", "[", "\"class_dict\"", "]", "[", "cls", "]", "\n", "selected", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "444", ",", "replace", "=", "False", ")", "\n", "data", "[", "\"class_dict\"", "]", "[", "cls", "]", "=", "selected", "\n", "\n", "", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.__init__": [[22, 37], ["sorted", "len", "datasets.dataset_utils.color_transform", "datasets.dataset_utils.color_transform", "hashlib.md5", "list", "str.encode", "dataset_template.DatasetTemplate.class_dict.items", "dataset_template.DatasetTemplate.class_dict.keys", "enumerate", "range"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.color_transform", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.color_transform"], ["    ", "def", "__init__", "(", "self", ",", "image_data", ",", "class_dict", ",", "args", ")", ":", "\n", "        ", "self", ".", "image_data", ",", "self", ".", "class_dict", "=", "image_data", ",", "class_dict", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "inv_class_dict", "=", "{", "index", ":", "class_name", "for", "class_name", ",", "indices", "in", "self", ".", "class_dict", ".", "items", "(", ")", "for", "index", "in", "indices", "}", "\n", "self", ".", "augment", "=", "args", ".", "aug", "\n", "self", ".", "image_height", "=", "args", ".", "image_height", "\n", "self", ".", "image_width", "=", "args", ".", "image_width", "\n", "self", ".", "image_channels", "=", "args", ".", "image_channels", "\n", "self", ".", "class_id_to_name", "=", "sorted", "(", "list", "(", "self", ".", "class_dict", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "class_name_to_id", "=", "{", "class_name", ":", "index", "for", "index", ",", "class_name", "in", "enumerate", "(", "self", ".", "class_id_to_name", ")", "}", "\n", "self", ".", "data_len", "=", "len", "(", "self", ".", "image_data", ")", "\n", "self", ".", "transform", "=", "color_transform", "(", "self", ".", "augment", ",", "args", ".", "normalise", ",", "self", ".", "image_width", ",", "self", ".", "image_height", ")", "\n", "self", ".", "raw_transform", "=", "color_transform", "(", "False", ",", "args", ".", "normalise", ",", "self", ".", "image_width", ",", "self", ".", "image_height", ")", "\n", "self", ".", "hash_signature", "=", "hashlib", ".", "md5", "(", "str", ".", "encode", "(", "\" \"", ".", "join", "(", "[", "\n", "self", ".", "inv_class_dict", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "data_len", ")", "\n", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.__len__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_len", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.__getitem__": [[42, 44], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "meta_index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_num_images_per_class": [[45, 51], ["len"], "methods", ["None"], ["", "def", "get_num_images_per_class", "(", "self", ",", "class_id", ")", ":", "\n", "        ", "\"\"\"\n        Returns number of images contained in the class\n        :param class_id: Class id/number of the class\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "class_dict", "[", "self", ".", "class_id_to_name", "[", "class_id", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_image_idxs_per_class": [[52, 58], ["None"], "methods", ["None"], ["", "def", "get_image_idxs_per_class", "(", "self", ",", "class_id", ")", ":", "\n", "        ", "\"\"\"\n        Returns image indexes contained in the class.\n        :param class_id: Class id/number of the class\n        \"\"\"", "\n", "return", "self", ".", "class_dict", "[", "self", ".", "class_id_to_name", "[", "class_id", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_class_names": [[59, 61], ["None"], "methods", ["None"], ["", "def", "get_class_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "class_id_to_name", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_class_ids": [[62, 64], ["numpy.arange", "len"], "methods", ["None"], ["", "def", "get_class_ids", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "arange", "(", "len", "(", "self", ".", "class_id_to_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_num_classes": [[65, 67], ["len"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_id_to_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.sample_reset": [[68, 70], ["None"], "methods", ["None"], ["", "def", "sample_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "class_dict_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.sample_image_idxs": [[71, 89], ["numpy.random.RandomState", "numpy.random.RandomState.permutation", "numpy.random.RandomState.permutation", "dataset_template.DatasetTemplate.get_image_idxs_per_class", "dataset_template.DatasetTemplate.get_image_idxs_per_class"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_image_idxs_per_class", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_image_idxs_per_class"], ["", "def", "sample_image_idxs", "(", "self", ",", "class_id", ",", "n", ",", "seed", "=", "0", ",", "with_replacement", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Samples n images from the given class, using the given seed\n        \"\"\"", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "if", "with_replacement", ":", "\n", "            ", "image_idx", "=", "rng", ".", "permutation", "(", "self", ".", "get_image_idxs_per_class", "(", "class_id", ")", ")", "[", ":", "n", "]", "\n", "return", "image_idx", "\n", "\n", "", "else", ":", "\n", "            ", "if", "class_id", "not", "in", "self", ".", "class_dict_cache", ":", "\n", "                ", "image_idx", "=", "rng", ".", "permutation", "(", "self", ".", "get_image_idxs_per_class", "(", "class_id", ")", ")", "\n", "self", ".", "class_dict_cache", "[", "class_id", "]", "=", "image_idx", "\n", "\n", "", "selected", "=", "self", ".", "class_dict_cache", "[", "class_id", "]", "[", ":", "n", "]", "\n", "self", ".", "class_dict_cache", "[", "class_id", "]", "=", "self", ".", "class_dict_cache", "[", "class_id", "]", "[", "n", ":", "]", "\n", "return", "selected", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_signature": [[90, 92], ["dataset_template.DatasetTemplate.hash_signature.hexdigest"], "methods", ["None"], ["", "", "def", "get_signature", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hash_signature", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.ColorDatasetInMemory.__init__": [[97, 106], ["dataset_template.DatasetTemplate.__init__", "numpy.shape"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "class_dict", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of DatasetInMemory for datasets that can fit in memory. Use DatasetOnDrive to load images from hard drive.\n        :param images: All images in a single array or list already loaded in memory\n        :param class_dict: Dictionary mapping class names to a list of indices of images belonging to the class\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "images", ",", "class_dict", ",", "args", ")", "\n", "assert", "self", ".", "image_channels", "==", "3", "\n", "assert", "np", ".", "shape", "(", "self", ".", "image_data", ")", "[", "-", "1", "]", "==", "self", ".", "image_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.ColorDatasetInMemory.__getitem__": [[107, 121], ["PIL.Image.fromarray().convert", "dataset_template.ColorDatasetInMemory.transform", "PIL.Image.fromarray", "numpy.uint8"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "meta_index", ")", ":", "\n", "        ", "\"\"\"\n        Returns a transformed image. To call this method, use normal indexing i.e. dataset_object[index]\n        :param meta_index: Meta index containing Image index\n        \"\"\"", "\n", "index", ",", "tag", "=", "meta_index", "\n", "label", ",", "seed", "=", "tag", "\n", "image", "=", "self", ".", "image_data", "[", "index", "]", "\n", "h", ",", "w", ",", "c", "=", "image", ".", "shape", "\n", "image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "# random.seed(seed) # setting the seed significantly reduces data sample variance, decreasing the performance", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.ColorDatasetInMemory.get_untransformed_image": [[122, 130], ["PIL.Image.fromarray", "dataset_template.ColorDatasetInMemory.raw_transform", "numpy.uint8"], "methods", ["None"], ["", "def", "get_untransformed_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns an untransformed image\n        :param index: Image index\n        \"\"\"", "\n", "image", "=", "self", ".", "image_data", "[", "index", "]", "\n", "image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", ")", ")", "\n", "return", "self", ".", "raw_transform", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.ColorDatasetOnDisk.__init__": [[134, 142], ["dataset_template.DatasetTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_paths", ",", "class_dict", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of DatesetOnDrive for datasets that cannot fit in memory and are to be accessed individually from hard drive.\n        :param image_paths: All image directories in a single array or list, paths can be relative or absolute\n        :param class_dict: Dictionary mapping class names to a list of indices of images belonging to the class\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "image_paths", ",", "class_dict", ",", "args", ")", "\n", "assert", "self", ".", "image_channels", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.ColorDatasetOnDisk.load_image": [[143, 151], ["PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns an untransformed image loaded directly from disk\n        :param index: Image index\n        \"\"\"", "\n", "image_path", "=", "self", ".", "image_data", "[", "index", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.ColorDatasetOnDisk.__getitem__": [[152, 165], ["dataset_template.ColorDatasetOnDisk.load_image", "dataset_template.ColorDatasetOnDisk.transform"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.load_image"], ["", "def", "__getitem__", "(", "self", ",", "meta_index", ")", ":", "\n", "        ", "\"\"\"\n        Returns a transformed image. To call this method, use normal indexing i.e. dataset_object[index]\n        :param index: Image index\n        \"\"\"", "\n", "index", ",", "tag", "=", "meta_index", "\n", "label", ",", "seed", "=", "tag", "\n", "image", "=", "self", ".", "load_image", "(", "index", ")", "\n", "h", ",", "w", ",", "c", "=", "image", ".", "shape", "\n", "assert", "c", "==", "self", ".", "image_channels", "\n", "# random.seed(seed) # setting the seed significantly reduces data sample variance, decreasing the performance", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.ColorDatasetOnDisk.get_untransformed_image": [[166, 174], ["dataset_template.ColorDatasetOnDisk.load_image", "PIL.Image.fromarray", "dataset_template.ColorDatasetOnDisk.raw_transform", "numpy.uint8"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.load_image"], ["", "def", "get_untransformed_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns an untransformed image\n        :param index: Image index\n        \"\"\"", "\n", "image", "=", "self", ".", "load_image", "(", "index", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", ")", ")", "\n", "return", "self", ".", "raw_transform", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetInMemory.__init__": [[177, 184], ["dataset_template.DatasetTemplate.__init__", "datasets.dataset_utils.mono_transform", "datasets.dataset_utils.mono_transform"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.mono_transform", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.mono_transform"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "class_dict", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Black and white dataset in memory\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "images", ",", "class_dict", ",", "args", ")", "\n", "self", ".", "transform", "=", "mono_transform", "(", "self", ".", "augment", ",", "False", ",", "self", ".", "image_width", ",", "self", ".", "image_height", ")", "\n", "self", ".", "raw_transform", "=", "mono_transform", "(", "False", ",", "False", ",", "self", ".", "image_width", ",", "self", ".", "image_height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetInMemory.__getitem__": [[185, 200], ["PIL.Image.fromarray().convert", "dataset_template.MonoDatasetInMemory.transform", "PIL.Image.fromarray", "numpy.uint8().squeeze", "numpy.uint8"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "meta_index", ")", ":", "\n", "        ", "\"\"\"\n        Returns a transformed image. To call this method, use normal indexing i.e. dataset_object[index]\n        :param meta_index: Meta index containing Image index\n        \"\"\"", "\n", "index", ",", "tag", "=", "meta_index", "\n", "label", ",", "seed", "=", "tag", "\n", "image", "=", "self", ".", "image_data", "[", "index", "]", "\n", "\n", "h", ",", "w", ",", "c", "=", "image", ".", "shape", "\n", "image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", ")", ".", "squeeze", "(", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "\n", "# random.seed(seed) # setting the seed significantly reduces data sample variance ", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetInMemory.get_untransformed_image": [[201, 209], ["PIL.Image.fromarray", "dataset_template.MonoDatasetInMemory.raw_transform", "numpy.uint8"], "methods", ["None"], ["", "def", "get_untransformed_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns an untransformed image\n        :param index: Image index\n        \"\"\"", "\n", "image", "=", "self", ".", "image_data", "[", "index", "]", "\n", "image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", ")", ")", "\n", "return", "self", ".", "raw_transform", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.__init__": [[214, 221], ["dataset_template.DatasetTemplate.__init__", "datasets.dataset_utils.mono_transform", "datasets.dataset_utils.mono_transform"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.mono_transform", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.mono_transform"], ["    ", "def", "__init__", "(", "self", ",", "image_paths", ",", "class_dict", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of BWDatasetOnDisk for monochrome datasets to be loaded from the disk.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "image_paths", ",", "class_dict", ",", "args", ")", "\n", "self", ".", "transform", "=", "mono_transform", "(", "self", ".", "augment", ",", "False", ",", "self", ".", "image_width", ",", "self", ".", "image_height", ")", "\n", "self", ".", "raw_transform", "=", "mono_transform", "(", "False", ",", "False", ",", "self", ".", "image_width", ",", "self", ".", "image_height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.load_image": [[222, 230], ["PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns an untransformed image loaded directly from disk\n        :param index: Image index\n        \"\"\"", "\n", "image_path", "=", "self", ".", "image_data", "[", "index", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'LA'", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.__getitem__": [[231, 245], ["dataset_template.MonoDatasetOnDisk.load_image", "dataset_template.MonoDatasetOnDisk.transform"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.load_image"], ["", "def", "__getitem__", "(", "self", ",", "meta_index", ")", ":", "\n", "        ", "\"\"\"\n        Returns a transformed image. To call this method, use normal indexing i.e. dataset_object[index]\n        :param index: Image index\n        \"\"\"", "\n", "index", ",", "tag", "=", "meta_index", "\n", "label", ",", "seed", "=", "tag", "\n", "image", "=", "self", ".", "load_image", "(", "index", ")", "\n", "h", ",", "w", "=", "image", ".", "size", "\n", "c", "=", "self", ".", "c", "\n", "\n", "# random.seed(seed) # setting the seed significantly reduces data sample variance ", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.get_untransformed_image": [[246, 254], ["dataset_template.MonoDatasetOnDisk.load_image", "PIL.Image.fromarray", "dataset_template.MonoDatasetOnDisk.raw_transform", "numpy.uint8"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.load_image"], ["", "def", "get_untransformed_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns an untransformed image\n        :param index: Image index\n        \"\"\"", "\n", "image", "=", "self", ".", "load_image", "(", "index", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", ")", ")", "\n", "return", "self", ".", "raw_transform", "(", "image", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.batch_simple.SimpleBatchTask.get_parser": [[8, 13], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.batch_simple.SimpleBatchTask.get_output_dim": [[14, 17], ["dataset.get_num_classes"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_num_classes"], ["", "@", "staticmethod", "\n", "def", "get_output_dim", "(", "args", ",", "dataset", ")", ":", "\n", "        ", "return", "dataset", ".", "get_num_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.batch_simple.SimpleBatchTask.__init__": [[18, 21], ["tasks.task_template.TaskTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "dataset", ",", "args", ",", "class_seed", ",", "sample_seed", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "args", ",", "class_seed", ",", "sample_seed", ")", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.batch_simple.SimpleBatchTask.__len__": [[22, 24], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.batch_simple.SimpleBatchTask.__iter__": [[25, 33], ["numpy.random.RandomState", "numpy.random.RandomState.choice", "numpy.random.RandomState.randint", "numpy.arange", "len", "zip"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "sample_seed", ")", "\n", "idx", "=", "rng", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ",", "self", ".", "batch_size", ",", "replace", "=", "False", ")", "\n", "seeds", "=", "rng", ".", "randint", "(", "0", ",", "999999", ",", "(", "self", ".", "batch_size", ",", ")", ")", "\n", "labels", "=", "[", "(", "self", ".", "dataset", ".", "class_name_to_id", "[", "self", ".", "dataset", ".", "inv_class_dict", "[", "i", "]", "]", ",", "i", ")", "for", "i", ",", "seed", "in", "zip", "(", "idx", ",", "seeds", ")", "]", "\n", "support_set", "=", "(", "idx", ",", "labels", ")", "\n", "target_set", "=", "(", "[", "]", ",", "[", "]", ")", "\n", "yield", "(", "support_set", ",", "target_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_template.TaskTemplate.get_parser": [[5, 9], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_template.TaskTemplate.get_output_dim": [[10, 13], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_output_dim", "(", "args", ",", "dataset", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_template.TaskTemplate.__init__": [[14, 19], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "dataset", ",", "args", ",", "class_seed", ",", "sample_seed", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "class_seed", "=", "class_seed", "\n", "self", ".", "sample_seed", "=", "sample_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_template.TaskTemplate.__len__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_template.TaskTemplate.__iter__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl.FSLTask.get_parser": [[10, 23], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"FSL Task Parser\"", ")", "\n", "", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "\"Number of classes per episode (n-way).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_supports'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "\"Number of support set supports per class (k-shot).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_targets'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "\"Number of target supports per class in query set.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of episodes, sampled independently, in a single batch\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl.FSLTask.get_output_dim": [[24, 27], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_output_dim", "(", "args", ",", "dataset", ")", ":", "\n", "        ", "return", "args", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl.FSLTask.__init__": [[28, 37], ["tasks.task_template.TaskTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "dataset", ",", "args", ",", "class_seed", ",", "sample_seed", ")", ":", "\n", "        ", "\"\"\"\n        Few Shot Learning Task sampler for creating a single episode for a few-shot learning task\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "args", ",", "class_seed", ",", "sample_seed", ")", "\n", "self", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "num_supports", "=", "args", ".", "num_supports", "\n", "self", ".", "num_targets", "=", "args", ".", "num_targets", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl.FSLTask.__len__": [[38, 40], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl.FSLTask.__iter__": [[41, 81], ["numpy.random.RandomState", "range", "numpy.random.RandomState", "fsl.FSLTask.dataset.get_num_classes", "enumerate", "numpy.random.RandomState.randint", "numpy.random.RandomState.randint", "list", "list", "numpy.random.RandomState.permutation", "numpy.random.RandomState", "fsl.FSLTask.dataset.get_image_idxs_per_class", "numpy.random.RandomState.permutation", "supports_x.extend", "targets_x.extend", "list.extend", "list.extend", "len", "len", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_num_classes", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_image_idxs_per_class"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "sample_seed", ")", "\n", "\n", "for", "batch_id", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "\n", "            ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "class_seed", ")", "\n", "total_classes", "=", "self", ".", "dataset", ".", "get_num_classes", "(", ")", "\n", "selected_classes", "=", "rng", ".", "permutation", "(", "total_classes", ")", "[", ":", "self", ".", "num_classes", "]", "\n", "\n", "supports_x", "=", "[", "]", "\n", "supports_y", "=", "[", "]", "\n", "targets_x", "=", "[", "]", "\n", "targets_y", "=", "[", "]", "\n", "\n", "for", "episode_lbl", ",", "actual_lbl", "in", "enumerate", "(", "selected_classes", ")", ":", "\n", "\n", "                ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "sample_seed", ")", "\n", "\n", "img_idxs", "=", "self", ".", "dataset", ".", "get_image_idxs_per_class", "(", "actual_lbl", ")", "\n", "img_idxs", "=", "rng", ".", "permutation", "(", "img_idxs", ")", "\n", "\n", "supports_x", ".", "extend", "(", "img_idxs", "[", ":", "self", ".", "num_supports", "]", ")", "\n", "targets_x", ".", "extend", "(", "img_idxs", "[", "self", ".", "num_supports", ":", "self", ".", "num_supports", "+", "self", ".", "num_targets", "]", ")", "\n", "\n", "supports_y", ".", "extend", "(", "[", "episode_lbl", "]", "*", "self", ".", "num_supports", ")", "\n", "targets_y", ".", "extend", "(", "[", "episode_lbl", "]", "*", "self", ".", "num_targets", ")", "\n", "\n", "\n", "", "support_seeds", "=", "rng", ".", "randint", "(", "0", ",", "999999999", ",", "len", "(", "supports_y", ")", ")", "\n", "target_seeds", "=", "rng", ".", "randint", "(", "0", ",", "999999999", ",", "len", "(", "targets_y", ")", ")", "\n", "supports_y", "=", "list", "(", "zip", "(", "supports_y", ",", "support_seeds", ")", ")", "\n", "targets_y", "=", "list", "(", "zip", "(", "targets_y", ",", "target_seeds", ")", ")", "\n", "\n", "support_set", "=", "(", "supports_x", ",", "supports_y", ")", "\n", "target_set", "=", "(", "targets_x", ",", "targets_y", ")", "\n", "\n", "yield", "(", "support_set", ",", "target_set", ")", "\n", "\n", "if", "self", ".", "class_seed", "is", "not", "None", ":", "\n", "                ", "self", ".", "class_seed", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_generator.TaskGenerator.__init__": [[9, 36], ["numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "task", ",", "\n", "num_tasks", ",", "\n", "seed", ",", "\n", "epoch", ",", "\n", "deterministic", ",", "\n", "fix_classes", ",", "\n", "mode", ",", "\n", "task_args", ")", ":", "\n", "        ", "\"\"\"\n        Task Generator creates independent tasks for the outerloop of the algorithms.\n        :param dataset: Dataset object to generate tasks from\n        :param num_tasks: number of tasks\n        :param seed: Start seed for the generator\n        :param args: Arguments object\n        \"\"\"", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_tasks", "=", "num_tasks", "\n", "self", ".", "epoch_seed", "=", "seed", "\n", "self", ".", "task_args", "=", "task_args", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "fix_classes", "=", "fix_classes", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "task_rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "epoch_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_generator.TaskGenerator.__len__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_generator.TaskGenerator.get_task_sampler": [[40, 56], ["task_generator.TaskGenerator.task"], "methods", ["None"], ["", "def", "get_task_sampler", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return appropiate_task_sampler\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "deterministic", ":", "\n", "            ", "class_seed", "=", "None", "\n", "sample_seed", "=", "None", "\n", "", "else", ":", "\n", "            ", "class_seed", "=", "self", ".", "epoch_seed", "if", "self", ".", "fix_classes", "else", "self", ".", "task_seed", "\n", "sample_seed", "=", "self", ".", "task_seed", "\n", "\n", "", "return", "self", ".", "task", "(", "self", ".", "dataset", ",", "\n", "self", ".", "task_args", ",", "\n", "class_seed", "=", "class_seed", ",", "\n", "sample_seed", "=", "sample_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_generator.TaskGenerator.__iter__": [[57, 64], ["range", "task_generator.TaskGenerator.task_rng.randint", "task_generator.TaskGenerator.get_task_sampler"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.task_generator.TaskGenerator.get_task_sampler"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :returns: a sampler class that samples images from the dataset for the specific task\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "num_tasks", ")", ":", "\n", "            ", "self", ".", "task_seed", "=", "self", ".", "task_rng", ".", "randint", "(", "999999999", ")", "\n", "yield", "self", ".", "get_task_sampler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl_imbalanced.ImbalancedFSLTask.get_parser": [[10, 37], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "\"Number of classes per episode (n-way).\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--min_num_supports'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of support set samples per class (min k-shot).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_num_supports'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "\"Number of support set samples per class (max k-shot).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_minority'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Fraction of classes used as minority classes (used with 'step'-imbalance distribution)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--imbalance_distribution'", ",", "type", "=", "str", ",", "choices", "=", "IMBALANCE_DIST", ",", "default", "=", "'linear'", ",", "\n", "help", "=", "\"Imbalance type, specifies how to sample supports.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--min_num_targets'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "\"Number of target set samples per class (min k-shot).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_num_targets'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "\"Number of target set samples per class (max k-shot).\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_minority_targets'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Fraction of classes used as minority classes in target set (used with 'step'-imbalance)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--imbalance_distribution_targets'", ",", "type", "=", "str", ",", "choices", "=", "IMBALANCE_DIST", ",", "default", "=", "'balanced'", ",", "\n", "help", "=", "\"Imbalance type for targets, specifies how to sample targets.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of episodes, sampled independently, in a single batch\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl_imbalanced.ImbalancedFSLTask.get_output_dim": [[38, 41], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_output_dim", "(", "args", ",", "dataset", ")", ":", "\n", "        ", "return", "args", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl_imbalanced.ImbalancedFSLTask.__init__": [[42, 60], ["task_template.TaskTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "dataset", ",", "args", ",", "class_seed", ",", "sample_seed", ")", ":", "\n", "        ", "\"\"\"\n        Few Shot Learning Task sampler for creating a single episode for a few-shot learning task\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "args", ",", "class_seed", ",", "sample_seed", ")", "\n", "self", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "\n", "self", ".", "min_num_supports", "=", "args", ".", "min_num_supports", "\n", "self", ".", "max_num_supports", "=", "args", ".", "max_num_supports", "\n", "self", ".", "num_minority", "=", "args", ".", "num_minority", "\n", "self", ".", "imbalance_distribution", "=", "args", ".", "imbalance_distribution", "\n", "\n", "self", ".", "min_num_targets", "=", "args", ".", "min_num_targets", "\n", "self", ".", "max_num_targets", "=", "args", ".", "max_num_targets", "\n", "self", ".", "num_minority_targets", "=", "args", ".", "num_minority_targets", "\n", "self", ".", "imbalance_distribution_targets", "=", "args", ".", "imbalance_distribution_targets", "\n", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl_imbalanced.ImbalancedFSLTask.__len__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.fsl_imbalanced.ImbalancedFSLTask.__iter__": [[64, 108], ["numpy.random.RandomState", "numpy.random.RandomState.randint", "range", "numpy.random.RandomState", "fsl_imbalanced.ImbalancedFSLTask.dataset.get_num_classes", "tasks.imbalance_utils.get_num_samples_per_class", "tasks.imbalance_utils.get_num_samples_per_class", "enumerate", "numpy.random.RandomState.randint", "numpy.random.RandomState.randint", "zip", "zip", "numpy.random.RandomState.permutation", "numpy.random.RandomState", "fsl_imbalanced.ImbalancedFSLTask.dataset.get_image_idxs_per_class", "numpy.random.RandomState.permutation", "supports_x.extend", "targets_x.extend", "zip.extend", "zip.extend", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_num_classes", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.get_num_samples_per_class", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.get_num_samples_per_class", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.DatasetTemplate.get_image_idxs_per_class"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "sample_seed", ")", "\n", "sampling_seed", "=", "rng", ".", "randint", "(", "9999999", ")", "\n", "\n", "for", "batch_id", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "\n", "            ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "class_seed", ")", "\n", "total_classes", "=", "self", ".", "dataset", ".", "get_num_classes", "(", ")", "\n", "selected_classes", "=", "rng", ".", "permutation", "(", "total_classes", ")", "[", ":", "self", ".", "num_classes", "]", "\n", "\n", "num_supports", "=", "get_num_samples_per_class", "(", "self", ".", "imbalance_distribution", ",", "self", ".", "num_classes", ",", "self", ".", "min_num_supports", ",", "\n", "self", ".", "max_num_supports", ",", "self", ".", "num_minority", ",", "rng", ")", "\n", "num_targets", "=", "get_num_samples_per_class", "(", "self", ".", "imbalance_distribution_targets", ",", "self", ".", "num_classes", ",", "self", ".", "min_num_targets", ",", "\n", "self", ".", "max_num_targets", ",", "self", ".", "num_minority_targets", ",", "rng", ")", "\n", "\n", "supports_x", "=", "[", "]", "\n", "supports_y", "=", "[", "]", "\n", "targets_x", "=", "[", "]", "\n", "targets_y", "=", "[", "]", "\n", "\n", "for", "lbl", ",", "actual_lbl", "in", "enumerate", "(", "selected_classes", ")", ":", "\n", "\n", "                ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "sample_seed", ")", "\n", "img_idxs", "=", "self", ".", "dataset", ".", "get_image_idxs_per_class", "(", "actual_lbl", ")", "\n", "img_idxs", "=", "rng", ".", "permutation", "(", "img_idxs", ")", "\n", "\n", "supports_x", ".", "extend", "(", "img_idxs", "[", ":", "num_supports", "[", "lbl", "]", "]", ")", "\n", "targets_x", ".", "extend", "(", "img_idxs", "[", "num_supports", "[", "lbl", "]", ":", "num_supports", "[", "lbl", "]", "+", "num_targets", "[", "lbl", "]", "]", ")", "\n", "\n", "supports_y", ".", "extend", "(", "[", "lbl", "]", "*", "num_supports", "[", "lbl", "]", ")", "\n", "targets_y", ".", "extend", "(", "[", "lbl", "]", "*", "num_targets", "[", "lbl", "]", ")", "\n", "\n", "", "support_seeds", "=", "rng", ".", "randint", "(", "0", ",", "999999999", ",", "len", "(", "supports_y", ")", ")", "\n", "target_seeds", "=", "rng", ".", "randint", "(", "0", ",", "999999999", ",", "len", "(", "targets_y", ")", ")", "\n", "supports_y", "=", "zip", "(", "supports_y", ",", "support_seeds", ")", "\n", "targets_y", "=", "zip", "(", "targets_y", ",", "target_seeds", ")", "\n", "\n", "support_set", "=", "(", "supports_x", ",", "supports_y", ")", "\n", "target_set", "=", "(", "targets_x", ",", "targets_y", ")", "\n", "\n", "yield", "(", "support_set", ",", "target_set", ")", "\n", "\n", "if", "self", ".", "class_seed", "is", "not", "None", ":", "\n", "                ", "self", ".", "class_seed", "+=", "1", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.calc_comb": [[9, 11], ["int", "math.factorial", "math.factorial", "math.factorial"], "function", ["None"], ["def", "calc_comb", "(", "n", ",", "k", ")", ":", "\n", "    ", "return", "int", "(", "math", ".", "factorial", "(", "n", "+", "k", "-", "1", ")", "/", "(", "math", ".", "factorial", "(", "n", "-", "1", ")", "*", "math", ".", "factorial", "(", "k", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.combination_generator": [[12, 31], ["range", "numpy.array", "imbalance_utils.calc_comb", "combs.append", "imbalance_utils.calc_comb"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.calc_comb", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.calc_comb"], ["", "def", "combination_generator", "(", "i", ",", "n", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    returns the i-th combination of k numbers chosen from 1,2,...,n\n    \"\"\"", "\n", "#     all_combs = calc_comb(n, k)", "\n", "#     assert 0<= i < all_combs, \"ith index must be within range 0 <= i < {}\".format(calc_comb(n, k))", "\n", "\n", "combs", "=", "[", "]", "\n", "remaining", "=", "i", "\n", "digit_proposal", "=", "1", "\n", "\n", "for", "place", "in", "range", "(", "k", ")", ":", "\n", "        ", "digit_combs", "=", "calc_comb", "(", "n", "-", "digit_proposal", "+", "1", ",", "k", "-", "1", "-", "place", ")", "\n", "while", "remaining", "-", "digit_combs", ">=", "0", ":", "\n", "            ", "remaining", "-=", "digit_combs", "\n", "digit_proposal", "+=", "1", "\n", "digit_combs", "=", "calc_comb", "(", "n", "-", "digit_proposal", "+", "1", ",", "k", "-", "1", "-", "place", ")", "\n", "", "combs", ".", "append", "(", "digit_proposal", ")", "\n", "", "return", "np", ".", "array", "(", "combs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.get_num_samples_per_class": [[32, 117], ["numpy.linspace", "numpy.around().astype", "numpy.random.shuffle", "np.ones.sort", "int", "numpy.empty", "numpy.around", "rng.randint", "rng.randint", "imbalance_utils.calc_comb", "rng.randint", "numpy.empty", "imbalance_utils.combination_generator", "numpy.ones", "numpy.unique", "int", "rng.choice", "int", "numpy.ones", "numpy.unique", "int", "rng.choice", "numpy.all", "numpy.ones", "numpy.linspace", "Exception"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.calc_comb", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.tasks.imbalance_utils.combination_generator"], ["", "def", "get_num_samples_per_class", "(", "imbalance_distribution", ",", "num_classes", ",", "min_num_samples", ",", "max_num_samples", ",", "num_minority", ",", "rng", ")", ":", "\n", "\n", "#\u00a0Linear distribution of k-shots", "\n", "    ", "if", "imbalance_distribution", "in", "[", "'linear'", ",", "None", ",", "'shuffled_linear'", "]", ":", "\n", "        ", "num_samples", "=", "np", ".", "linspace", "(", "min_num_samples", "-", "0.49", ",", "max_num_samples", "+", "0.49", ",", "num_classes", ")", "\n", "num_samples", "=", "np", ".", "around", "(", "num_samples", ")", ".", "astype", "(", "int", ")", "# round to nearest int", "\n", "\n", "# Step imbalance, controlled by num_minority", "\n", "", "elif", "imbalance_distribution", "in", "[", "'step'", ",", "'shuffled_step'", "]", ":", "\n", "        ", "num_minority", "=", "int", "(", "num_minority", "*", "num_classes", ")", "\n", "num_samples", "=", "np", ".", "empty", "(", "num_classes", ",", "dtype", "=", "int", ")", "\n", "num_samples", "[", ":", "num_minority", "]", "=", "min_num_samples", "\n", "num_samples", "[", "num_minority", ":", "]", "=", "max_num_samples", "\n", "\n", "#\u00a0Random distribution of k-shots between max and min", "\n", "", "elif", "imbalance_distribution", "in", "[", "'random'", ",", "'random_sorted'", "]", ":", "\n", "        ", "num_samples", "=", "rng", ".", "randint", "(", "min_num_samples", ",", "max_num_samples", "+", "1", ",", "num_classes", ")", "\n", "\n", "# Uniform Random Imbalance distribution of k-shots between max and min, this distribution is automatically sorted", "\n", "", "elif", "imbalance_distribution", "in", "[", "'unbiased'", ",", "'shuffled_unbiased'", "]", ":", "\n", "        ", "n", "=", "max_num_samples", "-", "min_num_samples", "+", "1", "\n", "k", "=", "num_classes", "\n", "ith", "=", "rng", ".", "randint", "(", "calc_comb", "(", "n", ",", "k", ")", ")", "\n", "num_samples", "=", "combination_generator", "(", "ith", ",", "n", ",", "k", ")", "+", "min_num_samples", "-", "1", "\n", "\n", "# Step imbalance, controlled by a randomly selected num_minority", "\n", "", "elif", "imbalance_distribution", "==", "'random_step'", ":", "\n", "        ", "num_minority", "=", "rng", ".", "randint", "(", "1", ",", "num_classes", ")", "# minimum 1 minority class & 1 majority class", "\n", "num_samples", "=", "np", ".", "empty", "(", "num_classes", ",", "dtype", "=", "int", ")", "\n", "num_samples", "[", ":", "num_minority", "]", "=", "min_num_samples", "\n", "num_samples", "[", "num_minority", ":", "]", "=", "max_num_samples", "\n", "\n", "# Random imbalance with capped total samples", "\n", "", "elif", "imbalance_distribution", "==", "'random_capped'", ":", "\n", "        ", "num_samples", "=", "np", ".", "ones", "(", "num_classes", ",", "dtype", "=", "int", ")", "#\u00a0at least one sample per class", "\n", "total", "=", "int", "(", "(", "min_num_samples", "+", "max_num_samples", ")", "/", "2", ")", "*", "num_classes", "#\u00a0capped total", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "rng", ".", "choice", "(", "num_classes", ",", "total", "-", "num_classes", ")", ",", "return_counts", "=", "True", ")", "\n", "num_samples", "[", "unique", "]", "+=", "counts", "\n", "\n", "# Constant (specific) imbalance, with capped total samples", "\n", "", "elif", "imbalance_distribution", "==", "'constant_controlled'", ":", "\n", "        ", "total", "=", "int", "(", "(", "min_num_samples", "+", "max_num_samples", ")", "/", "2", ")", "*", "num_classes", "#\u00a0capped total", "\n", "found", "=", "False", "\n", "while", "not", "found", ":", "\n", "            ", "num_samples", "=", "np", ".", "ones", "(", "num_classes", ",", "dtype", "=", "int", ")", "#\u00a0at least one sample per class", "\n", "num_samples", "[", "0", "]", "=", "min_num_samples", "\n", "num_samples", "[", "num_classes", "-", "1", "]", "=", "max_num_samples", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "rng", ".", "choice", "(", "\n", "num_classes", "-", "2", ",", "\n", "total", "-", "min_num_samples", "-", "max_num_samples", "-", "num_classes", "+", "2", ",", "\n", "return_counts", "=", "True", ")", ")", "\n", "num_samples", "[", "unique", "+", "1", "]", "+=", "counts", "\n", "if", "np", ".", "all", "(", "num_samples", ")", "<=", "max_num_samples", ":", "\n", "                ", "found", "=", "True", "\n", "\n", "# No imbalance", "\n", "", "", "", "elif", "imbalance_distribution", "==", "'balanced'", ":", "\n", "        ", "mean_samples", "=", "int", "(", "(", "min_num_samples", "+", "max_num_samples", ")", "/", "2", ")", "\n", "num_samples", "=", "np", ".", "ones", "(", "num_classes", ",", "dtype", "=", "int", ")", "*", "mean_samples", "\n", "\n", "# Long-tail distribution, where min_minority is used as the exponential for power law distribution", "\n", "", "elif", "imbalance_distribution", "==", "'tail'", ":", "\n", "        ", "px", ",", "py", "=", "(", "1.", "/", "num_classes", ",", "min_num_samples", "/", "max_num_samples", ")", "\n", "qx", ",", "qy", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "# power law distribution: y = ax^b + c", "\n", "# where y is the fraction of samples per class, and x is the class id.", "\n", "b", "=", "num_minority", "\n", "c", "=", "py", "\n", "a", "=", "(", "qy", "-", "c", ")", "/", "(", "qx", "**", "b", ")", "\n", "\n", "x", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "num_classes", ")", "\n", "y", "=", "(", "a", "*", "(", "x", "**", "b", ")", "+", "c", ")", "\n", "num_samples", "=", "(", "y", "*", "max_num_samples", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Imbalance distribution not found: {}\"", ".", "format", "(", "imbalance_distribution", ")", ")", "\n", "\n", "", "if", "imbalance_distribution", "in", "[", "'shuffled_linear'", ",", "'shuffled_step'", ",", "'shuffled_unbiased'", "]", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "num_samples", ")", "\n", "\n", "", "if", "imbalance_distribution", "in", "[", "'random_sorted'", "]", ":", "\n", "        ", "num_samples", ".", "sort", "(", ")", "\n", "\n", "", "return", "num_samples", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.get_parser": [[15, 39], ["models.model_template.ModelTemplate.get_parser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        returns a parser for the given model\n        \"\"\"", "\n", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", "=", "ModelTemplate", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--num_inner_loop_steps'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "5", ",", "\"val\"", ":", "10", ",", "\"test\"", ":", "10", "}", ")", "\n", "parser", ".", "add_argument", "(", "'--inner_loop_lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--approx'", ",", "type", "=", "utils", ".", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--approx_until'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'approx until the specified epoch to expediate training'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of tasks before the outerloop update, eg. update meta learner every 4th task'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dim'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "-", "1", ",", "\"val\"", ":", "-", "1", ",", "\"test\"", ":", "-", "1", "}", ",", "\n", "help", "=", "'output dimention for the classifer, if -1 set in code'", ")", "\n", "parser", ".", "add_argument", "(", "'--omega_on'", ",", "type", "=", "utils", ".", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma_on'", ",", "type", "=", "utils", ".", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_on'", ",", "type", "=", "utils", ".", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--z_on'", ",", "type", "=", "utils", ".", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--with_sampling'", ",", "type", "=", "utils", ".", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--num_draws'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "1", ",", "\"val\"", ":", "1", ",", "\"test\"", ":", "10", "}", ")", "\n", "parser", ".", "add_argument", "(", "'--max_shot'", ",", "type", "=", "dict", ",", "default", "=", "-", "1", ",", "help", "=", "'Max shot (if -1, set in code)'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.__init__": [[40, 58], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", "BayesianTAML", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "approx", "=", "args", ".", "approx", "\n", "self", ".", "approx_until", "=", "args", ".", "approx_until", "\n", "self", ".", "inner_loop_lr", "=", "args", ".", "inner_loop_lr", "\n", "self", ".", "num_steps", "=", "args", ".", "num_inner_loop_steps", "\n", "self", ".", "with_sampling", "=", "args", ".", "with_sampling", "\n", "self", ".", "output_dim", "=", "args", ".", "output_dim", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "num_draws", "=", "args", ".", "num_draws", "\n", "self", ".", "omega_on", "=", "args", ".", "omega_on", "\n", "self", ".", "gamma_on", "=", "args", ".", "gamma_on", "\n", "self", ".", "alpha_on", "=", "args", ".", "alpha_on", "\n", "self", ".", "z_on", "=", "args", ".", "z_on", "\n", "self", ".", "batch_count", "=", "0", "\n", "self", ".", "batch_losses", "=", "[", "]", "\n", "self", ".", "fast_parameters", "=", "[", "]", "\n", "assert", "self", ".", "output_dim", ".", "train", "==", "self", ".", "output_dim", ".", "test", ",", "'maml training output dim must mimic the testing scenario'", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.setup_model": [[59, 76], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "btaml.BayesianTAML.setup_classifier", "InferenceNetwork().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "btaml.BayesianTAML.optimizer.zero_grad", "btaml.BayesianTAML.optimizer.step", "list", "btaml.BayesianTAML.get_alpha", "list", "btaml.InferenceNetwork", "list", "list", "btaml.BayesianTAML.inference_network.parameters", "btaml.BayesianTAML.get_inner_loop_named_params", "btaml.BayesianTAML.alpha.values", "btaml.BayesianTAML.backbone.parameters", "btaml.BayesianTAML.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.setup_classifier", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.get_alpha", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.get_inner_loop_named_params"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduce", "=", "False", ")", "\n", "self", ".", "classifier", "=", "self", ".", "setup_classifier", "(", "self", ".", "output_dim", ".", "train", ")", "\n", "self", ".", "inference_network", "=", "InferenceNetwork", "(", "self", ".", "backbone", ".", "num_layers", ",", "self", ".", "backbone", ".", "layer_channels", ",", "\n", "self", ".", "args", ",", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "all_params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "inference_network", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "alpha_on", ":", "\n", "            ", "self", ".", "alpha", "=", "self", ".", "get_alpha", "(", "self", ".", "get_inner_loop_named_params", "(", ")", ")", "\n", "self", ".", "all_params", "+=", "list", "(", "self", ".", "alpha", ".", "values", "(", ")", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "all_params", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.setup_classifier": [[77, 81], ["backbones.layers.Linear_fw().to", "backbones.layers.Linear_fw().to.bias.data.fill_", "backbones.layers.Linear_fw"], "methods", ["None"], ["", "def", "setup_classifier", "(", "self", ",", "output_dim", ")", ":", "\n", "        ", "classifier", "=", "Linear_fw", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "output_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.meta_train": [[82, 133], ["btaml.BayesianTAML.train", "btaml.BayesianTAML.inference_network.train", "btaml.BayesianTAML.net_reset", "btaml.BayesianTAML.zero_grad", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "btaml.BayesianTAML.batch_losses.append", "btaml.BayesianTAML.strategy.update_support_set", "range", "total_losses.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "btaml.BayesianTAML.optimizer.zero_grad", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum.backward", "torch.stack().sum.backward", "torch.stack().sum.backward", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "btaml.BayesianTAML.optimizer.step", "btaml.BayesianTAML.net_reset", "btaml.BayesianTAML.net_train", "btaml.BayesianTAML.net_eval", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "pred_y.detach().cpu().numpy", "targets_y.detach().cpu().numpy", "losses.detach().cpu().numpy", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pred_y.detach().cpu", "targets_y.detach().cpu", "losses.detach().cpu", "pred_y.detach", "targets_y.detach", "losses.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of meta training (outer) loop ", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "self", ".", "inference_network", ".", "train", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "self", ".", "batch_count", "+=", "1", "\n", "self", ".", "approx", "=", "self", ".", "approx", "if", "self", ".", "epoch", "<", "self", ".", "approx_until", "else", "False", "\n", "\n", "num_draws", "=", "self", ".", "num_draws", "[", "self", ".", "mode", "]", "\n", "\n", "total_losses", "=", "[", "]", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "support_set", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "support_x", ",", "support_y", "=", "support_set", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "kl_losses", "=", "0.", "\n", "sample_scores", "=", "0.", "\n", "losses", "=", "0.", "\n", "kl_scaling", "=", "1.", "/", "(", "len", "(", "support_y", ")", "+", "len", "(", "targets_y", ")", ")", "\n", "for", "n_sample", "in", "range", "(", "num_draws", ")", ":", "\n", "                ", "self", ".", "net_reset", "(", ")", "\n", "kl_loss", "=", "self", ".", "net_train", "(", "support_set", ")", "\n", "loss", ",", "scores", "=", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "sample_scores", "+=", "torch", ".", "softmax", "(", "scores", ",", "-", "1", ")", "\n", "losses", "+=", "loss", "\n", "kl_losses", "+=", "kl_loss", "*", "kl_scaling", "\n", "\n", "", "losses", "/=", "num_draws", "\n", "kl_losses", "/=", "num_draws", "\n", "sample_scores", "/=", "num_draws", "\n", "\n", "total_losses", ".", "append", "(", "losses", "+", "0.1", "*", "kl_losses", ")", "\n", "\n", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "sample_scores", ",", "axis", "=", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "losses", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "loss", "=", "torch", ".", "stack", "(", "total_losses", ")", ".", "sum", "(", "0", ")", "\n", "self", ".", "batch_losses", ".", "append", "(", "loss", ")", "\n", "\n", "if", "self", ".", "batch_count", "%", "self", ".", "batch_size", "==", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "self", ".", "batch_losses", ")", ".", "sum", "(", "0", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_value_", "(", "self", ".", "all_params", ",", "3", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "batch_losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.meta_eval": [[134, 163], ["btaml.BayesianTAML.eval", "btaml.BayesianTAML.inference_network.eval", "btaml.BayesianTAML.net_reset", "btaml.BayesianTAML.strategy.update_support_set", "range", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "btaml.BayesianTAML.net_reset", "btaml.BayesianTAML.net_train", "btaml.BayesianTAML.net_eval", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "loss.detach().cpu", "pred_y.numpy", "targets_y.detach().cpu().numpy", "losses.numpy", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "loss.detach", "targets_y.detach().cpu", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "targets_y.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "", "def", "meta_eval", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of evaluation of task ", "\n", "        ", "num_draws", "=", "self", ".", "num_draws", "[", "self", ".", "mode", "]", "\n", "self", ".", "eval", "(", ")", "\n", "self", ".", "inference_network", ".", "eval", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "support_set", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "sample_scores", "=", "0.", "\n", "losses", "=", "0.", "\n", "\n", "for", "n_sample", "in", "range", "(", "num_draws", ")", ":", "\n", "                ", "self", ".", "net_reset", "(", ")", "\n", "self", ".", "net_train", "(", "support_set", ")", "\n", "loss", ",", "scores", "=", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "sample_scores", "+=", "torch", ".", "softmax", "(", "scores", ",", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "losses", "+=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "del", "loss", "\n", "del", "scores", "\n", "\n", "", "losses", "/=", "num_draws", "\n", "sample_scores", "/=", "num_draws", "\n", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "sample_scores", ",", "axis", "=", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "losses", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.net_reset": [[164, 169], ["btaml.BayesianTAML.strategy.reset", "btaml.BayesianTAML.get_inner_loop_params"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.get_inner_loop_params"], ["", "", "def", "net_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "strategy", ".", "reset", "(", ")", "\n", "self", ".", "fast_parameters", "=", "self", ".", "get_inner_loop_params", "(", ")", "\n", "for", "weight", "in", "self", ".", "fast_parameters", ":", "# reset fast parameters", "\n", "            ", "weight", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.net_train": [[170, 233], ["support_y.unique", "btaml.BayesianTAML.inference_network", "range", "enumerate", "btaml.BayesianTAML.backbone.forward", "btaml.BayesianTAML.classifier.forward", "btaml.BayesianTAML.loss_fn", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "btaml.BayesianTAML.backbone.named_parameters", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "btaml.BayesianTAML.get_inner_loop_named_params", "btaml.BayesianTAML.fast_parameters.append", "len", "len", "g.detach", "int", "int", "name.split", "s.isdigit", "len", "name.split", "s.isdigit", "[].view", "losses[].sum", "btaml.BayesianTAML.alpha[].repeat", "btaml.BayesianTAML.alpha[].repeat"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.get_inner_loop_named_params"], ["", "", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "# inner loop  ", "\n", "        ", "(", "support_x", ",", "support_y", ")", "=", "support_set", "\n", "uniq_y", "=", "support_y", ".", "unique", "(", ")", "\n", "\n", "with_sampling", "=", "(", "self", ".", "with_sampling", "and", "self", ".", "mode", "!=", "'val'", ")", "\n", "omega", ",", "gamma", ",", "z", ",", "kl", "=", "self", ".", "inference_network", "(", "(", "support_x", ",", "support_y", ")", ",", "with_sampling", "=", "with_sampling", ")", "\n", "\n", "if", "self", ".", "z_on", ":", "\n", "            ", "for", "i", ",", "named_weight", "in", "enumerate", "(", "self", ".", "backbone", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "name", ",", "weight", "=", "named_weight", "\n", "layer_id", "=", "[", "int", "(", "s", ")", "for", "s", "in", "name", ".", "split", "(", "'.'", ")", "if", "s", ".", "isdigit", "(", ")", "]", "[", "0", "]", "\n", "if", "\"C.weight\"", "in", "name", ":", "\n", "                    ", "weight", "=", "weight", "*", "(", "1", "+", "z", "[", "'w'", "]", "[", "layer_id", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "\"C.bias\"", "in", "name", ":", "\n", "                    ", "weight", "=", "weight", "+", "z", "[", "'b'", "]", "[", "layer_id", "]", "\n", "\n", "", "", "", "for", "n_step", "in", "range", "(", "self", ".", "num_steps", "[", "self", ".", "mode", "]", ")", ":", "\n", "            ", "support_h", "=", "self", ".", "backbone", ".", "forward", "(", "support_x", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "support_h", ")", "\n", "losses", "=", "self", ".", "loss_fn", "(", "scores", ",", "support_y", ")", "\n", "\n", "if", "self", ".", "omega_on", ":", "\n", "                ", "set_loss", "=", "0.", "# inner loss", "\n", "scaling", "=", "len", "(", "uniq_y", ")", "/", "len", "(", "support_y", ")", "# number of classes per sample ", "\n", "for", "i_class", "in", "uniq_y", ":", "# per class loss", "\n", "                    ", "class_loss", "=", "losses", "[", "support_y", "==", "i_class", "]", ".", "sum", "(", ")", "*", "scaling", "*", "omega", "[", "i_class", "]", "\n", "set_loss", "+=", "class_loss", "\n", "", "set_loss", "=", "set_loss", "\n", "", "else", ":", "\n", "                ", "set_loss", "=", "torch", ".", "mean", "(", "losses", ")", "\n", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "set_loss", ",", "\n", "self", ".", "fast_parameters", ",", "\n", "create_graph", "=", "True", ")", "\n", "\n", "if", "self", ".", "approx", ":", "\n", "                ", "grad", "=", "[", "g", ".", "detach", "(", ")", "for", "g", "in", "grad", "]", "\n", "\n", "# grad step", "\n", "", "self", ".", "fast_parameters", "=", "[", "]", "\n", "for", "w", ",", "named_weight", "in", "enumerate", "(", "self", ".", "get_inner_loop_named_params", "(", ")", ")", ":", "\n", "                ", "name", ",", "weight", "=", "named_weight", "\n", "layer_id", "=", "[", "int", "(", "s", ")", "for", "s", "in", "name", ".", "split", "(", "'.'", ")", "if", "s", ".", "isdigit", "(", ")", "]", "\n", "layer_id", "=", "layer_id", "[", "0", "]", "if", "len", "(", "layer_id", ")", ">", "0", "else", "-", "1", "\n", "if", "self", ".", "alpha_on", ":", "\n", "                    ", "if", "\"trunk\"", "in", "name", ":", "# backbone", "\n", "                        ", "lr", "=", "self", ".", "alpha", "[", "name", "]", "\n", "", "else", ":", "# classifier", "\n", "                        ", "if", "\"weight\"", "in", "name", ":", "\n", "                            ", "lr", "=", "self", ".", "alpha", "[", "name", "]", ".", "repeat", "(", "self", ".", "output_dim", "[", "self", ".", "mode", "]", ",", "1", ")", "\n", "", "else", ":", "# bias", "\n", "                            ", "lr", "=", "self", ".", "alpha", "[", "name", "]", ".", "repeat", "(", "self", ".", "output_dim", "[", "self", ".", "mode", "]", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "lr", "=", "self", ".", "inner_loop_lr", "\n", "", "g", "=", "gamma", "[", "layer_id", "]", "if", "self", ".", "gamma_on", "else", "1", "\n", "if", "weight", ".", "fast", "is", "None", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", "-", "g", "*", "lr", "*", "grad", "[", "w", "]", "# create weight.fast ", "\n", "", "else", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", ".", "fast", "-", "g", "*", "lr", "*", "grad", "[", "w", "]", "# update weight.fast", "\n", "", "self", ".", "fast_parameters", ".", "append", "(", "weight", ".", "fast", ")", "\n", "\n", "", "", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.net_eval": [[234, 245], ["btaml.BayesianTAML.backbone.forward", "btaml.BayesianTAML.classifier.forward", "btaml.BayesianTAML.loss_fn", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward"], ["", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "targets_h", "=", "self", ".", "backbone", ".", "forward", "(", "targets_x", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "targets_h", ")", "\n", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "targets_y", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "\n", "return", "loss", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.get_inner_loop_params": [[246, 248], ["btaml.BayesianTAML.get_inner_loop_named_params"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.get_inner_loop_named_params"], ["", "def", "get_inner_loop_params", "(", "self", ")", ":", "\n", "        ", "return", "[", "p", "[", "1", "]", "for", "p", "in", "self", ".", "get_inner_loop_named_params", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.get_inner_loop_named_params": [[249, 255], ["list", "btaml.BayesianTAML.backbone.named_parameters", "list", "list.append", "btaml.BayesianTAML.classifier.named_parameters"], "methods", ["None"], ["", "def", "get_inner_loop_named_params", "(", "self", ")", ":", "\n", "        ", "named_params", "=", "list", "(", ")", "\n", "for", "named_param", "in", "self", ".", "backbone", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'.BN.'", "not", "in", "named_param", "[", "0", "]", ":", "\n", "                ", "named_params", ".", "append", "(", "named_param", ")", "\n", "", "", "return", "named_params", "+", "list", "(", "self", ".", "classifier", ".", "named_parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.get_alpha": [[256, 267], ["torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "get_alpha", "(", "self", ",", "named_weights", ")", ":", "# learning rates", "\n", "        ", "alpha", "=", "{", "}", "\n", "for", "named_weight", "in", "named_weights", ":", "\n", "            ", "name", ",", "weight", "=", "named_weight", "\n", "if", "\"trunk\"", "in", "name", ":", "# backbone ", "\n", "                ", "new_weight", "=", "torch", ".", "ones", "(", "weight", ".", "shape", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", "*", "self", ".", "inner_loop_lr", "# initialise", "\n", "", "else", ":", "# classifier", "\n", "                ", "new_shape", "=", "(", "1", ",", "*", "weight", ".", "shape", "[", "1", ":", "]", ")", "\n", "new_weight", "=", "torch", ".", "ones", "(", "new_shape", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", "*", "self", ".", "inner_loop_lr", "# initialise", "\n", "", "alpha", "[", "name", "]", "=", "nn", ".", "Parameter", "(", "0.01", "*", "new_weight", ")", "\n", "", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.load_state_dict": [[269, 275], ["list", "super().load_state_dict", "state_dict.items", "k.startswith", "k.replace"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "list", "(", "state_dict", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'alpha.'", ")", ":", "\n", "                ", "self", ".", "alpha", "[", "k", ".", "replace", "(", "'alpha.'", ",", "''", ")", "]", "=", "v", "\n", "del", "state_dict", "[", "k", "]", "\n", "", "", "return", "super", "(", "BayesianTAML", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.state_dict": [[277, 282], ["super().state_dict", "super().state_dict.update", "btaml.BayesianTAML.alpha.items"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.BayesianTAML.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "state_dict", "=", "super", "(", "BayesianTAML", ",", "self", ")", ".", "state_dict", "(", ")", "\n", "if", "self", ".", "alpha_on", ":", "\n", "            ", "state_dict", ".", "update", "(", "{", "'alpha.'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "alpha", ".", "items", "(", ")", "}", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.InferenceNetwork.__init__": [[286, 352], ["torch.Module.__init__", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Softplus().to", "torch.Softplus().to", "torch.Softplus().to", "torch.Softmax().to", "torch.Softmax().to", "torch.Softmax().to", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Softplus", "torch.Softplus", "torch.Softplus", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "sum"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone_num_layers", ",", "backbone_layer_channels", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", "InferenceNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone_num_layers", "=", "backbone_num_layers", "\n", "self", ".", "backbone_layer_channels", "=", "backbone_layer_channels", "\n", "self", ".", "omega_on", "=", "args", ".", "omega_on", "\n", "self", ".", "gamma_on", "=", "args", ".", "gamma_on", "\n", "self", ".", "z_on", "=", "args", ".", "z_on", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "num_channel", "=", "3", "\n", "self", ".", "max_shot", "=", "args", ".", "max_shot", "\n", "self", ".", "output_dim", "=", "args", ".", "output_dim", "\n", "\n", "# sample encoder (1)", "\n", "self", ".", "sample_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "3", ",", "10", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "10", ",", "10", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "10", "*", "21", "*", "21", ",", "64", ")", "# will fail if image not 84 x 84 ", "\n", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# interact1", "\n", "self", ".", "interact1", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Linear", "(", "3", ",", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "# set of (class) sets encoder (2)", "\n", "self", ".", "stats_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Linear", "(", "64", "*", "4", ",", "128", ")", ",", "# 64*4 = 256", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "32", ")", "\n", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "# interact2", "\n", "self", ".", "interact2", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Linear", "(", "3", ",", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "# omega encoder", "\n", "self", ".", "o_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Linear", "(", "256", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "2", ")", "# std and mean", "\n", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "# gamma encoder", "\n", "self", ".", "g_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Linear", "(", "128", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "2", "*", "(", "self", ".", "backbone_num_layers", "+", "1", ")", ")", "# std and mean, for each layer (incl. classifier)", "\n", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "# z encoder", "\n", "self", ".", "z_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Linear", "(", "128", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "2", "*", "2", "*", "sum", "(", "self", ".", "backbone_layer_channels", ")", ")", "# std and mean, for bias and weight, for each channel", "\n", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "softplus", "=", "nn", ".", "Softplus", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.InferenceNetwork._stat_pool": [[353, 358], ["N.reshape().repeat().to.reshape().repeat().to.reshape().repeat().to", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.mean", "x.var", "N.reshape().repeat().to.reshape().repeat().to.reshape().repeat", "N.reshape().repeat().to.reshape().repeat().to.reshape"], "methods", ["None"], ["", "def", "_stat_pool", "(", "self", ",", "x", ",", "N", ")", ":", "\n", "# Compute element-wise sample mean, var., and set cardinality", "\n", "        ", "mean", ",", "var", "=", "x", ".", "mean", "(", "dim", "=", "0", ")", ",", "x", ".", "var", "(", "dim", "=", "0", ",", "unbiased", "=", "False", ")", "\n", "N", "=", "N", ".", "reshape", "(", "[", "-", "1", "]", ")", ".", "repeat", "(", "mean", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "torch", ".", "stack", "(", "[", "mean", ",", "var", ",", "N", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.InferenceNetwork.get_posterior": [[359, 405], ["btaml.InferenceNetwork.sample_encoder", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "btaml.InferenceNetwork.interact1", "class_stats.view.view.view", "btaml.InferenceNetwork.stats_encoder", "btaml.InferenceNetwork._stat_pool", "btaml.InferenceNetwork.interact2", "encoded_stats.view.view.view", "btaml.InferenceNetwork.o_encoder", "o_stats[].squeeze", "o_stats[].squeeze", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "btaml.InferenceNetwork.g_encoder", "g_stats[].squeeze", "g_stats[].squeeze", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "btaml.InferenceNetwork.z_encoder", "z_stats[].squeeze", "z_stats[].squeeze", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "len", "btaml.InferenceNetwork._stat_pool", "class_stats.view.view.append", "class_num.append", "btaml.InferenceNetwork.softplus", "btaml.InferenceNetwork.softplus", "btaml.InferenceNetwork.softplus", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.InferenceNetwork._stat_pool", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.InferenceNetwork._stat_pool"], ["", "def", "get_posterior", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "(", "x", ",", "y", ")", "=", "inputs", "\n", "\n", "# statistics pooling 1", "\n", "x", "=", "self", ".", "sample_encoder", "(", "x", ")", "\n", "\n", "class_stats", "=", "[", "]", "\n", "class_num", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "torch", ".", "max", "(", "y", ")", "+", "1", ")", ":", "\n", "            ", "x_c", "=", "x", "[", "y", "==", "c", "]", "\n", "n_c", "=", "len", "(", "x_c", ")", "# num of class samples ", "\n", "n_c", "=", "(", "n_c", "-", "1", ")", "/", "(", "self", ".", "max_shot", "-", "1", ")", "# normalized class support set size", "\n", "\n", "stat_c", "=", "self", ".", "_stat_pool", "(", "x_c", ",", "N", "=", "torch", ".", "tensor", "(", "n_c", ")", ")", "\n", "class_stats", ".", "append", "(", "stat_c", ")", "\n", "class_num", ".", "append", "(", "n_c", ")", "\n", "\n", "", "class_stats", "=", "torch", ".", "stack", "(", "class_stats", ")", "\n", "class_stats", "=", "self", ".", "interact1", "(", "class_stats", ")", "\n", "class_stats", "=", "class_stats", ".", "view", "(", "class_stats", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "# statistics pooling 2", "\n", "encoded_stats", "=", "self", ".", "stats_encoder", "(", "class_stats", ")", "\n", "encoded_stats", "=", "self", ".", "_stat_pool", "(", "encoded_stats", ",", "N", "=", "torch", ".", "mean", "(", "torch", ".", "tensor", "(", "class_num", ")", ")", ")", "\n", "encoded_stats", "=", "self", ".", "interact2", "(", "encoded_stats", ")", "\n", "encoded_stats", "=", "encoded_stats", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# generate omega (from statistics pooling 1) for each class", "\n", "o_stats", "=", "self", ".", "o_encoder", "(", "class_stats", ")", "\n", "mu_omega", "=", "o_stats", "[", ":", ",", "0", "]", ".", "squeeze", "(", ")", "\n", "sigma_omega", "=", "o_stats", "[", ":", ",", "1", "]", ".", "squeeze", "(", ")", "\n", "q_omega", "=", "torch", ".", "distributions", ".", "Normal", "(", "mu_omega", ",", "self", ".", "softplus", "(", "sigma_omega", ")", ")", "\n", "\n", "# generate gamma (from statistics pooling 2) for each backbone layer", "\n", "g_stats", "=", "self", ".", "g_encoder", "(", "encoded_stats", ")", "\n", "mu_gamma", "=", "g_stats", "[", ":", ",", "0", ":", ":", "2", "]", ".", "squeeze", "(", ")", "# even indices for mean", "\n", "sigma_gamma", "=", "g_stats", "[", ":", ",", "1", ":", ":", "2", "]", ".", "squeeze", "(", ")", "# odd indices for sigma", "\n", "q_gamma", "=", "torch", ".", "distributions", ".", "Normal", "(", "mu_gamma", ",", "self", ".", "softplus", "(", "sigma_gamma", ")", ")", "\n", "\n", "# generate z (from statistics pooling 2) for each backbone layer channel output ", "\n", "z_stats", "=", "self", ".", "z_encoder", "(", "encoded_stats", ")", "\n", "mu_z", "=", "z_stats", "[", ":", ",", "0", ":", ":", "2", "]", ".", "squeeze", "(", ")", "# even indices for mean ", "\n", "sigma_z", "=", "z_stats", "[", ":", ",", "1", ":", ":", "2", "]", ".", "squeeze", "(", ")", "# odd indices for sigma ", "\n", "q_z", "=", "torch", ".", "distributions", ".", "Normal", "(", "mu_z", ",", "self", ".", "softplus", "(", "sigma_z", ")", ")", "\n", "\n", "return", "q_omega", ",", "q_gamma", ",", "q_z", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.InferenceNetwork.forward": [[407, 453], ["btaml.InferenceNetwork.get_posterior", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "btaml.kl_diagnormal_stdnormal", "btaml.kl_diagnormal_stdnormal", "btaml.kl_diagnormal_stdnormal", "btaml.InferenceNetwork.softmax", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "range", "gamma.append", "z_[].squeeze", "z_[].squeeze", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "range", "q_omega.rsample", "q_gamma.rsample", "gamma.append", "q_z.rsample", "z[].append", "z[].append"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.InferenceNetwork.get_posterior", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.kl_diagnormal_stdnormal", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.kl_diagnormal_stdnormal", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.kl_diagnormal_stdnormal"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "with_sampling", "=", "False", ")", ":", "\n", "\n", "# compute posterior", "\n", "        ", "q_omega", ",", "q_gamma", ",", "q_z", "=", "self", ".", "get_posterior", "(", "inputs", ")", "\n", "\n", "# compute kl", "\n", "kl_omega", "=", "torch", ".", "sum", "(", "kl_diagnormal_stdnormal", "(", "q_omega", ")", ")", "\n", "kl_gamma", "=", "torch", ".", "sum", "(", "kl_diagnormal_stdnormal", "(", "q_gamma", ")", ")", "\n", "kl_z", "=", "torch", ".", "sum", "(", "kl_diagnormal_stdnormal", "(", "q_z", ")", ")", "\n", "\n", "# sample variables from the posterior", "\n", "omega", ",", "gamma", ",", "z", "=", "None", ",", "None", ",", "None", "\n", "\n", "kl", "=", "0.", "\n", "\n", "if", "self", ".", "omega_on", ":", "\n", "            ", "kl", "=", "kl", "+", "kl_omega", "\n", "omega", "=", "q_omega", ".", "rsample", "(", ")", "if", "with_sampling", "else", "q_omega", ".", "mean", "\n", "omega", "=", "self", ".", "softmax", "(", "omega", ")", "\n", "\n", "", "if", "self", ".", "gamma_on", ":", "\n", "            ", "kl", "=", "kl", "+", "kl_gamma", "\n", "g_", "=", "q_gamma", ".", "rsample", "(", ")", "if", "with_sampling", "else", "q_gamma", ".", "mean", "\n", "g_", "=", "torch", ".", "exp", "(", "g_", ")", "\n", "g_", "=", "torch", ".", "split", "(", "g_", ",", "[", "1", "]", "*", "(", "self", ".", "backbone_num_layers", "+", "1", ")", ",", "0", ")", "\n", "gamma", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "backbone_num_layers", ")", ":", "\n", "                ", "gamma", ".", "append", "(", "g_", "[", "l", "]", ")", "\n", "\n", "", "l", "=", "self", ".", "backbone_num_layers", "\n", "gamma", ".", "append", "(", "g_", "[", "l", "]", ")", "# last gamma for classifier", "\n", "\n", "", "if", "self", ".", "z_on", ":", "\n", "            ", "kl", "=", "kl", "+", "kl_z", "\n", "z_", "=", "q_z", ".", "rsample", "(", ")", "if", "with_sampling", "else", "q_z", ".", "mean", "\n", "zw_", "=", "z_", "[", "0", ":", ":", "2", "]", ".", "squeeze", "(", ")", "# even indices for weights ", "\n", "zb_", "=", "z_", "[", "1", ":", ":", "2", "]", ".", "squeeze", "(", ")", "# odd indices for biases", "\n", "zw_", "=", "torch", ".", "split", "(", "zw_", ",", "self", ".", "backbone_layer_channels", ")", "\n", "zb_", "=", "torch", ".", "split", "(", "zb_", ",", "self", ".", "backbone_layer_channels", ")", "\n", "\n", "z", "=", "{", "'w'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "for", "l", "in", "range", "(", "self", ".", "backbone_num_layers", ")", ":", "\n", "                ", "z", "[", "'w'", "]", ".", "append", "(", "zw_", "[", "l", "]", ")", "\n", "z", "[", "'b'", "]", ".", "append", "(", "zb_", "[", "l", "]", ")", "\n", "\n", "", "", "return", "omega", ",", "gamma", ",", "z", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.btaml.kl_diagnormal_stdnormal": [[455, 460], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.kl.kl_divergence().to", "torch.distributions.kl.kl_divergence().to", "torch.distributions.kl.kl_divergence().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence"], "function", ["None"], ["", "", "def", "kl_diagnormal_stdnormal", "(", "p", ")", ":", "\n", "    ", "pshape", "=", "p", ".", "mean", ".", "shape", "\n", "device", "=", "p", ".", "mean", ".", "device", "\n", "q", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros", "(", "pshape", ",", "device", "=", "device", ")", ",", "torch", ".", "ones", "(", "pshape", ",", "device", "=", "device", ")", ")", "\n", "return", "torch", ".", "distributions", ".", "kl", ".", "kl_divergence", "(", "p", ",", "q", ")", ".", "to", "(", "device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.get_parser": [[14, 29], ["models.model_template.ModelTemplate.get_parser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        returns a parser for the given model. Can also return a subparser\n        \"\"\"", "\n", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", "=", "ModelTemplate", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--num_inner_loop_steps'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--inner_loop_lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--approx'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of tasks before the outerloop update, eg. update meta learner every 4th task'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dim'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "-", "1", ",", "\"val\"", ":", "-", "1", ",", "\"test\"", ":", "-", "1", "}", ",", "\n", "help", "=", "'output dimention for the classifer, if -1 set in code'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.__init__": [[30, 41], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "approx", "=", "args", ".", "approx", "\n", "self", ".", "inner_loop_lr", "=", "args", ".", "inner_loop_lr", "\n", "self", ".", "num_steps", "=", "args", ".", "num_inner_loop_steps", "\n", "self", ".", "output_dim", "=", "args", ".", "output_dim", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "batch_count", "=", "0", "\n", "self", ".", "batch_losses", "=", "[", "]", "\n", "self", ".", "fast_parameters", "=", "[", "]", "\n", "assert", "self", ".", "output_dim", ".", "train", "==", "self", ".", "output_dim", ".", "test", ",", "'maml training output dim must mimic the testing scenario'", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.setup_model": [[42, 51], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "mamldkt.MamlDKT.setup_classifier", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "mamldkt.MamlDKT.optimizer.zero_grad", "mamldkt.MamlDKT.optimizer.step", "list", "list", "mamldkt.MamlDKT.backbone.parameters", "mamldkt.MamlDKT.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.setup_classifier"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "classifier", "=", "self", ".", "setup_classifier", "(", "self", ".", "output_dim", ".", "train", ")", "\n", "all_params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "all_params", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.setup_classifier": [[52, 56], ["backbones.layers.Linear_fw().to", "backbones.layers.Linear_fw().to.bias.data.fill_", "backbones.layers.Linear_fw"], "methods", ["None"], ["", "def", "setup_classifier", "(", "self", ",", "output_dim", ")", ":", "\n", "        ", "classifier", "=", "Linear_fw", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "output_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.meta_train": [[57, 78], ["mamldkt.MamlDKT.train", "mamldkt.MamlDKT.net_reset", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "mamldkt.MamlDKT.batch_losses.append", "mamldkt.MamlDKT.net_train", "mamldkt.MamlDKT.net_eval", "total_losses.append", "mamldkt.MamlDKT.optimizer.zero_grad", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum.backward", "torch.stack().sum.backward", "torch.stack().sum.backward", "mamldkt.MamlDKT.optimizer.step", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of meta training (outer) loop ", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "self", ".", "batch_count", "+=", "1", "\n", "\n", "total_losses", "=", "[", "]", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "loss", "=", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "total_losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "loss", "=", "torch", ".", "stack", "(", "total_losses", ")", ".", "sum", "(", "0", ")", "\n", "self", ".", "batch_losses", ".", "append", "(", "loss", ")", "\n", "\n", "if", "self", ".", "batch_count", "%", "self", ".", "batch_size", "==", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "self", ".", "batch_losses", ")", ".", "sum", "(", "0", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "batch_losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.meta_eval": [[79, 84], ["mamldkt.MamlDKT.net_reset", "mamldkt.MamlDKT.net_train", "mamldkt.MamlDKT.net_eval"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "", "def", "meta_eval", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of evaluation of task ", "\n", "        ", "self", ".", "net_reset", "(", ")", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.net_reset": [[85, 90], ["mamldkt.MamlDKT.strategy.reset", "mamldkt.MamlDKT.get_inner_loop_params", "mamldkt.MamlDKT.parameters"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.get_inner_loop_params"], ["", "", "def", "net_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "strategy", ".", "reset", "(", ")", "\n", "self", ".", "fast_parameters", "=", "self", ".", "get_inner_loop_params", "(", ")", "\n", "for", "weight", "in", "self", ".", "parameters", "(", ")", ":", "# reset fast parameters", "\n", "            ", "weight", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.net_train": [[91, 120], ["mamldkt.MamlDKT.zero_grad", "mamldkt.MamlDKT.strategy.update_support_set", "range", "mamldkt.MamlDKT.backbone.forward", "mamldkt.MamlDKT.strategy.update_support_features", "mamldkt.MamlDKT.classifier.forward", "mamldkt.MamlDKT.strategy.apply_inner_loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "mamldkt.MamlDKT.parameters", "mamldkt.MamlDKT.fast_parameters.append", "g.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_inner_loss"], ["", "", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "# inner loop       ", "\n", "        ", "self", ".", "zero_grad", "(", ")", "\n", "\n", "(", "support_x", ",", "support_y", ")", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "\n", "# Using gaussian processes to minimise this loop", "\n", "# TODO", "\n", "\n", "for", "n_step", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "            ", "support_h", "=", "self", ".", "backbone", ".", "forward", "(", "support_x", ")", "\n", "support_h", ",", "support_y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "support_h", ",", "support_y", ")", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "support_h", ")", "\n", "set_loss", "=", "self", ".", "strategy", ".", "apply_inner_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "support_y", ")", "\n", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "set_loss", ",", "\n", "self", ".", "fast_parameters", ",", "\n", "create_graph", "=", "True", ")", "# build full graph support gradient of gradient", "\n", "\n", "if", "self", ".", "approx", ":", "\n", "                ", "grad", "=", "[", "g", ".", "detach", "(", ")", "for", "g", "in", "grad", "]", "#do not calculate gradient of gradient if using first order approximation", "\n", "\n", "", "self", ".", "fast_parameters", "=", "[", "]", "\n", "for", "k", ",", "weight", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "weight", ".", "fast", "is", "None", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", "-", "self", ".", "inner_loop_lr", "*", "grad", "[", "k", "]", "# create weight.fast ", "\n", "", "else", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", ".", "fast", "-", "self", ".", "inner_loop_lr", "*", "grad", "[", "k", "]", "# update weight.fast", "\n", "", "self", ".", "fast_parameters", ".", "append", "(", "weight", ".", "fast", ")", "# gradients are based on newest weights, but the graph will retain the link to old weight.fasts", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.net_eval": [[121, 138], ["mamldkt.MamlDKT.backbone.forward", "mamldkt.MamlDKT.classifier.forward", "mamldkt.MamlDKT.strategy.apply_outer_loss", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "pred_y.detach().cpu().numpy", "targets_y.detach().cpu().numpy", "mamldkt.MamlDKT.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pred_y.detach().cpu", "targets_y.detach().cpu", "mamldkt.MamlDKT.detach().cpu", "pred_y.detach", "targets_y.detach", "mamldkt.MamlDKT.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "", "", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "targets_h", "=", "self", ".", "backbone", ".", "forward", "(", "targets_x", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "targets_h", ")", "\n", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "targets_y", ")", "\n", "\n", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.mamldkt.MamlDKT.get_inner_loop_params": [[139, 141], ["list", "list", "mamldkt.MamlDKT.backbone.parameters", "mamldkt.MamlDKT.classifier.parameters"], "methods", ["None"], ["", "def", "get_inner_loop_params", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.get_parser": [[14, 22], ["models.model_template.ModelTemplate.get_parser", "argparse.ArgumentParser"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MatchingNet'", ")", "\n", "\"\"\"\n        returns a parser for the given model. Can also return a subparser\n        \"\"\"", "\n", "parser", "=", "ModelTemplate", ".", "get_parser", "(", "parser", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.__init__": [[23, 25], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.setup_model": [[26, 37], ["torch.NLLLoss().to", "torch.NLLLoss().to", "torch.NLLLoss().to", "FullyContextualEmbedding().to", "torch.LSTM().to", "torch.LSTM().to", "torch.LSTM().to", "torch.ReLU().to", "torch.ReLU().to", "torch.ReLU().to", "torch.Softmax().to", "torch.Softmax().to", "torch.Softmax().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "list", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "matchingnet.FullyContextualEmbedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax", "list", "list", "matchingnet.MatchingNet.FCE.parameters", "matchingnet.MatchingNet.backbone.parameters", "matchingnet.MatchingNet.G_encoder.parameters"], "methods", ["None"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_fn", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "feat_dim", "=", "self", ".", "backbone", ".", "final_feat_dim", "\n", "self", ".", "FCE", "=", "FullyContextualEmbedding", "(", "feat_dim", ",", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "G_encoder", "=", "nn", ".", "LSTM", "(", "feat_dim", ",", "feat_dim", ",", "1", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "all_params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "G_encoder", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "FCE", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "all_params", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.net_train": [[38, 45], ["matchingnet.MatchingNet.strategy.update_support_set", "matchingnet.MatchingNet.backbone.forward", "matchingnet.MatchingNet.strategy.update_support_features", "z.contiguous().view.contiguous().view.contiguous().view", "matchingnet.MatchingNet.encode_training_set", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "len", "z.contiguous().view.contiguous().view.contiguous", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.onehot().float", "utils.onehot"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.encode_training_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.onehot"], ["", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "# innerloop / adaptation step", "\n", "        ", "x", ",", "y", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "z", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "z", ",", "y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "z", ",", "y", ")", ")", "\n", "z", "=", "z", ".", "contiguous", "(", ")", ".", "view", "(", "len", "(", "z", ")", ",", "-", "1", ")", "\n", "self", ".", "G", "=", "self", ".", "encode_training_set", "(", "z", ")", "\n", "self", ".", "support_y_onehot", "=", "Variable", "(", "utils", ".", "onehot", "(", "y", ")", ".", "float", "(", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.net_eval": [[46, 61], ["matchingnet.MatchingNet.backbone", "matchingnet.MatchingNet.get_logprobs", "matchingnet.MatchingNet.strategy.apply_outer_loss", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "pred_y.detach().cpu().numpy", "y.detach().cpu().numpy", "matchingnet.MatchingNet.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pred_y.detach().cpu", "y.detach().cpu", "matchingnet.MatchingNet.detach().cpu", "pred_y.detach", "y.detach", "matchingnet.MatchingNet.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.get_logprobs", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "# evaluation of a target set ", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x", ",", "y", "=", "target_set", "\n", "z", "=", "self", ".", "backbone", "(", "x", ")", "\n", "y_onehot", "=", "self", ".", "support_y_onehot", "\n", "logprobs", "=", "self", ".", "get_logprobs", "(", "z", ",", "self", ".", "G", ",", "y_onehot", ")", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "logprobs", ",", "y", ")", "\n", "\n", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "logprobs", ",", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.net_reset": [[62, 66], ["matchingnet.MatchingNet.strategy.reset"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset"], ["", "def", "net_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "G", "=", "None", "\n", "self", ".", "support_y_onehot", "=", "None", "\n", "self", ".", "strategy", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.encode_training_set": [[67, 74], ["out_G.squeeze.squeeze.squeeze", "G_encoder", "S.unsqueeze", "S.size", "S.size"], "methods", ["None"], ["", "def", "encode_training_set", "(", "self", ",", "S", ",", "G_encoder", "=", "None", ")", ":", "\n", "        ", "if", "G_encoder", "is", "None", ":", "\n", "            ", "G_encoder", "=", "self", ".", "G_encoder", "\n", "", "out_G", "=", "G_encoder", "(", "S", ".", "unsqueeze", "(", "0", ")", ")", "[", "0", "]", "\n", "out_G", "=", "out_G", ".", "squeeze", "(", "0", ")", "\n", "G", "=", "S", "+", "out_G", "[", ":", ",", ":", "S", ".", "size", "(", "1", ")", "]", "+", "out_G", "[", ":", ",", "S", ".", "size", "(", "1", ")", ":", "]", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.MatchingNet.get_logprobs": [[75, 90], ["FCE", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "FCE.div", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "G.div", "matchingnet.MatchingNet.softmax", "matchingnet.MatchingNet.relu", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "FCE.div.mm", "G.div.transpose", "matchingnet.MatchingNet.mm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "get_logprobs", "(", "self", ",", "f", ",", "G", ",", "Y_S", ",", "FCE", "=", "None", ")", ":", "\n", "        ", "if", "FCE", "is", "None", ":", "\n", "            ", "FCE", "=", "self", ".", "FCE", "\n", "", "F", "=", "FCE", "(", "f", ",", "G", ")", "\n", "F_norm", "=", "torch", ".", "norm", "(", "F", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "F", ")", "\n", "F_normalized", "=", "F", ".", "div", "(", "F_norm", "+", "0.00001", ")", "\n", "\n", "G_norm", "=", "torch", ".", "norm", "(", "G", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "G", ")", "\n", "G_normalized", "=", "G", ".", "div", "(", "G_norm", "+", "0.00001", ")", "\n", "\n", "# The original paper use cosine simlarity, but here we scale it by 100 to strengthen highest probability after softmax", "\n", "scores", "=", "self", ".", "relu", "(", "F_normalized", ".", "mm", "(", "G_normalized", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", "*", "100", "\n", "softmax", "=", "self", ".", "softmax", "(", "scores", ")", "\n", "logprobs", "=", "(", "softmax", ".", "mm", "(", "Y_S", ")", "+", "1e-6", ")", ".", "log", "(", ")", "\n", "return", "logprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.FullyContextualEmbedding.__init__": [[93, 99], ["torch.Module.__init__", "torch.LSTMCell().to", "torch.LSTMCell().to", "torch.LSTMCell().to", "torch.Softmax().to", "torch.Softmax().to", "torch.Softmax().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "device", ")", ":", "\n", "        ", "super", "(", "FullyContextualEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstmcell", "=", "nn", ".", "LSTMCell", "(", "feat_dim", "*", "2", ",", "feat_dim", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "c_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "feat_dim", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "#self.K = K", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.matchingnet.FullyContextualEmbedding.forward": [[101, 116], ["matchingnet.FullyContextualEmbedding.c_0.expand_as", "G.transpose", "G.size", "range", "h.mm", "matchingnet.FullyContextualEmbedding.softmax", "matchingnet.FullyContextualEmbedding.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matchingnet.FullyContextualEmbedding.lstmcell"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "f", ",", "G", ")", ":", "\n", "        ", "h", "=", "f", "\n", "c", "=", "self", ".", "c_0", ".", "expand_as", "(", "f", ")", "\n", "G_T", "=", "G", ".", "transpose", "(", "0", ",", "1", ")", "\n", "K", "=", "G", ".", "size", "(", "0", ")", "#Tuna to be comfirmed", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "            ", "logit_a", "=", "h", ".", "mm", "(", "G_T", ")", "\n", "a", "=", "self", ".", "softmax", "(", "logit_a", ")", "\n", "r", "=", "a", ".", "mm", "(", "G", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "f", ",", "r", ")", ",", "1", ")", "\n", "\n", "h", ",", "c", "=", "self", ".", "lstmcell", "(", "x", ",", "(", "h", ",", "c", ")", ")", "\n", "h", "=", "h", "+", "f", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protomaml.ProtoMaml.__init__": [[13, 15], ["models.maml.Maml.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protomaml.ProtoMaml.init_classifier": [[16, 27], ["protomaml.ProtoMaml.backbone", "protomaml.ProtoMaml.calc_prototypes", "torch.normalize", "torch.normalize", "torch.normalize", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.normalize.norm"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.calc_prototypes"], ["", "def", "init_classifier", "(", "self", ",", "supports_x", ",", "supports_y", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the fast weights of FC layer with prototype embeddings\n        \"\"\"", "\n", "supports_h", "=", "self", ".", "backbone", "(", "supports_x", ")", "\n", "proto_h", ",", "proto_y", "=", "self", ".", "calc_prototypes", "(", "supports_h", ",", "supports_y", ")", "\n", "proto_h", "=", "torch", ".", "stack", "(", "proto_h", ",", "0", ")", "[", "proto_y", "]", "\n", "#         import pdb; pdb.set_trace()", "\n", "proto_h", "=", "F", ".", "normalize", "(", "proto_h", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "self", ".", "classifier", ".", "weight", ".", "data", "=", "2", "*", "nn", ".", "Parameter", "(", "proto_h", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "classifier", ".", "bias", ".", "data", "=", "-", "nn", ".", "Parameter", "(", "torch", ".", "square", "(", "proto_h", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", ")", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protomaml.ProtoMaml.calc_prototypes": [[28, 37], ["torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "proto_h.append", "h[].mean"], "methods", ["None"], ["", "def", "calc_prototypes", "(", "self", ",", "h", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Computes prototypes\n        \"\"\"", "\n", "unique_labels", "=", "torch", ".", "unique", "(", "y", ")", "\n", "proto_h", "=", "[", "]", "\n", "for", "label", "in", "unique_labels", ":", "\n", "            ", "proto_h", ".", "append", "(", "h", "[", "y", "==", "label", "]", ".", "mean", "(", "0", ")", ")", "\n", "", "return", "proto_h", ",", "unique_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protomaml.ProtoMaml.net_train": [[38, 67], ["protomaml.ProtoMaml.zero_grad", "protomaml.ProtoMaml.strategy.update_support_set", "protomaml.ProtoMaml.init_classifier", "range", "protomaml.ProtoMaml.backbone.forward", "protomaml.ProtoMaml.strategy.update_support_features", "protomaml.ProtoMaml.classifier.forward", "protomaml.ProtoMaml.strategy.apply_inner_loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "protomaml.ProtoMaml.parameters", "protomaml.ProtoMaml.fast_parameters.append", "g.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protomaml.ProtoMaml.init_classifier", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_inner_loss"], ["", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "# inner loop      ", "\n", "        ", "self", ".", "zero_grad", "(", ")", "\n", "\n", "(", "support_x", ",", "support_y", ")", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "self", ".", "init_classifier", "(", "support_x", ",", "support_y", ")", "# difference with MAML", "\n", "\n", "for", "n_step", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "            ", "support_h", "=", "self", ".", "backbone", ".", "forward", "(", "support_x", ")", "\n", "support_h", ",", "support_y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "support_h", ",", "support_y", ")", ")", "\n", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "support_h", ")", "\n", "set_loss", "=", "self", ".", "strategy", ".", "apply_inner_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "support_y", ")", "\n", "\n", "# build full graph support gradient of gradient", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "set_loss", ",", "\n", "self", ".", "fast_parameters", ",", "\n", "create_graph", "=", "True", ")", "\n", "\n", "if", "self", ".", "approx", ":", "\n", "                ", "grad", "=", "[", "g", ".", "detach", "(", ")", "for", "g", "in", "grad", "]", "#do not calculate gradient of gradient if using first order approximation", "\n", "\n", "", "self", ".", "fast_parameters", "=", "[", "]", "\n", "for", "k", ",", "weight", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "weight", ".", "fast", "is", "None", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", "-", "self", ".", "inner_loop_lr", "*", "grad", "[", "k", "]", "# create weight.fast ", "\n", "", "else", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", ".", "fast", "-", "self", ".", "inner_loop_lr", "*", "grad", "[", "k", "]", "# update weight.fast", "\n", "", "self", ".", "fast_parameters", ".", "append", "(", "weight", ".", "fast", ")", "# gradients are based on newest weights, but the graph will retain the link to old weight.fast", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.dkt.DKT.get_parser": [[17, 31], ["models.model_template.ModelTemplate.get_parser", "models.model_template.ModelTemplate.get_parser.add_argument", "models.model_template.ModelTemplate.get_parser.add_argument", "models.model_template.ModelTemplate.get_parser.add_argument", "models.model_template.ModelTemplate.get_parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        returns a parser for the given model. Can also return a subparser\n        \"\"\"", "\n", "parser", "=", "ModelTemplate", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--kernel_type'", ",", "type", "=", "str", ",", "choices", "=", "DKT", ".", "KERNEL_TYPES", ",", "default", "=", "'bncossim'", ",", "\n", "help", "=", "'kernel type'", ")", "\n", "parser", ".", "add_argument", "(", "'--laplace'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'use laplace approximation during evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dim'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "-", "1", ",", "\"val\"", ":", "-", "1", ",", "\"test\"", ":", "-", "1", "}", ",", "\n", "help", "=", "'output dimention for the classifer, if -1 set in code'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpmodel_lr'", ",", "'--gp_lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.dkt.DKT.__init__": [[32, 38], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", "DKT", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "kernel_type", "=", "self", ".", "args", ".", "kernel_type", "\n", "self", ".", "laplace", "=", "self", ".", "args", ".", "laplace", "\n", "self", ".", "output_dim", "=", "self", ".", "args", ".", "output_dim", "\n", "self", ".", "normalize", "=", "(", "self", ".", "kernel_type", "in", "[", "'cossim'", ",", "'bncossim'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.dkt.DKT.setup_model": [[39, 58], ["torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "gpytorch.likelihoods.GaussianLikelihood().to", "ExactGPLayer().to", "gpytorch.mlls.ExactMarginalLogLikelihood().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "numpy.prod", "dkt.DKT.backbone.trunk.add_module", "torch.BatchNorm1d().to", "torch.BatchNorm1d().to", "torch.BatchNorm1d().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "gpytorch.likelihoods.GaussianLikelihood", "dkt.ExactGPLayer", "gpytorch.mlls.ExactMarginalLogLikelihood", "dkt.DKT.backbone.parameters", "dkt.DKT.gpmodel.parameters", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["None"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "kernel_type", "==", "\"bncossim\"", ":", "\n", "            ", "latent_size", "=", "np", ".", "prod", "(", "self", ".", "backbone", ".", "final_feat_dim", ")", "\n", "self", ".", "backbone", ".", "trunk", ".", "add_module", "(", "\"bn_out\"", ",", "nn", ".", "BatchNorm1d", "(", "latent_size", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "", "train_x", "=", "torch", ".", "ones", "(", "100", ",", "64", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "train_y", "=", "torch", ".", "ones", "(", "100", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "gpmodel", "=", "ExactGPLayer", "(", "train_x", "=", "train_x", ",", "train_y", "=", "train_y", ",", "likelihood", "=", "self", ".", "likelihood", ",", "\n", "kernel", "=", "self", ".", "kernel_type", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "loss_fn", "=", "gpytorch", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "self", ".", "likelihood", ",", "self", ".", "gpmodel", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "self", ".", "backbone", ".", "parameters", "(", ")", ",", "'lr'", ":", "self", ".", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "gpmodel", ".", "parameters", "(", ")", ",", "'lr'", ":", "self", ".", "args", ".", "gpmodel_lr", "}", "\n", "]", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "\n", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.dkt.DKT.meta_train": [[59, 131], ["dkt.DKT.train", "dkt.DKT.net_reset", "dkt.DKT.backbone.train", "dkt.DKT.gpmodel.train", "dkt.DKT.likelihood.train", "dkt.DKT.strategy.update_support_set", "len", "dkt.DKT.forward", "dkt.DKT.strategy.update_support_features", "utils.onehot", "range", "dkt.DKT.optimizer.zero_grad", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum.backward", "torch.stack().sum.backward", "torch.stack().sum.backward", "dkt.DKT.optimizer.step", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dkt.DKT.gpmodel.set_train_data", "dkt.DKT.gpmodel", "list.append", "len", "dkt.DKT.loss_fn", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dkt.DKT.gpmodel.eval", "dkt.DKT.likelihood.eval", "dkt.DKT.backbone.eval", "dkt.DKT.forward", "list", "list", "range", "list.argmax", "ptracker.add_task_performance", "dkt.DKT.gpmodel.set_train_data", "dkt.DKT.gpmodel", "list.append", "dkt.DKT.likelihood", "list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "list.argmax.detach().cpu().numpy", "target_y.detach().cpu().numpy", "torch.stack().sum.detach().cpu().numpy", "torch.stack().sum.detach().cpu().numpy", "torch.stack().sum.detach().cpu().numpy", "dkt.DKT.loss_fn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "list.argmax.detach().cpu", "target_y.detach().cpu", "torch.stack().sum.detach().cpu", "torch.stack().sum.detach().cpu", "torch.stack().sum.detach().cpu", "list.argmax.detach", "target_y.detach", "torch.stack().sum.detach", "torch.stack().sum.detach", "torch.stack().sum.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.onehot", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Trained by feeding both the query set and the support set into the model \n        \"\"\"", "\n", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "total_losses", "=", "[", "]", "\n", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "backbone", ".", "train", "(", ")", "\n", "self", ".", "gpmodel", ".", "train", "(", ")", "\n", "self", ".", "likelihood", ".", "train", "(", ")", "\n", "\n", "support_set", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "support_x", ",", "support_y", "=", "support_set", "\n", "target_x", ",", "target_y", "=", "target_set", "\n", "support_n", "=", "len", "(", "support_y", ")", "\n", "\n", "# Combine target and support set", "\n", "if", "len", "(", "target_x", ")", ">", "0", ":", "\n", "                ", "all_x", "=", "torch", ".", "cat", "(", "(", "support_x", ",", "target_x", ")", ",", "dim", "=", "0", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "(", "support_y", ",", "target_y", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "all_x", "=", "support_x", "\n", "all_y", "=", "support_y", "\n", "\n", "", "all_h", "=", "self", ".", "forward", "(", "all_x", ")", "\n", "all_h", ",", "all_y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "all_h", ",", "all_y", ")", ")", "\n", "all_y_onehots", "=", "uu", ".", "onehot", "(", "all_y", ",", "fill_with", "=", "-", "1", ",", "dim", "=", "self", ".", "output_dim", "[", "self", ".", "mode", "]", ")", "\n", "\n", "total_losses", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "output_dim", "[", "self", ".", "mode", "]", ")", ":", "\n", "                ", "self", ".", "gpmodel", ".", "set_train_data", "(", "inputs", "=", "all_h", ",", "targets", "=", "all_y_onehots", "[", ":", ",", "idx", "]", ",", "strict", "=", "False", ")", "\n", "output", "=", "self", ".", "gpmodel", "(", "*", "self", ".", "gpmodel", ".", "train_inputs", ")", "\n", "loss", "=", "-", "self", ".", "loss_fn", "(", "output", ",", "self", ".", "gpmodel", ".", "train_targets", ")", "\n", "total_losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "total_losses", ")", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "len", "(", "target_x", ")", ">", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "self", ".", "gpmodel", ".", "eval", "(", ")", "\n", "self", ".", "likelihood", ".", "eval", "(", ")", "\n", "self", ".", "backbone", ".", "eval", "(", ")", "\n", "\n", "target_h", "=", "self", ".", "forward", "(", "target_x", ")", "\n", "\n", "predictions_list", "=", "list", "(", ")", "\n", "total_losses", "=", "list", "(", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "output_dim", "[", "self", ".", "mode", "]", ")", ":", "\n", "                        ", "self", ".", "gpmodel", ".", "set_train_data", "(", "\n", "inputs", "=", "all_h", "[", ":", "support_n", "]", ",", "\n", "targets", "=", "all_y_onehots", "[", ":", "support_n", ",", "idx", "]", ",", "\n", "strict", "=", "False", ")", "\n", "output", "=", "self", ".", "gpmodel", "(", "all_h", "[", "support_n", ":", "]", ")", "\n", "total_losses", ".", "append", "(", "self", ".", "loss_fn", "(", "output", ",", "all_y_onehots", "[", "support_n", ":", ",", "idx", "]", ")", ")", "\n", "prediction", "=", "self", ".", "likelihood", "(", "output", ")", "\n", "predictions_list", ".", "append", "(", "torch", ".", "sigmoid", "(", "prediction", ".", "mean", ")", ")", "\n", "\n", "", "predictions_list", "=", "torch", ".", "stack", "(", "predictions_list", ")", ".", "T", "\n", "loss", "=", "-", "torch", ".", "stack", "(", "total_losses", ")", ".", "sum", "(", ")", "\n", "\n", "pred_y", "=", "predictions_list", ".", "argmax", "(", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "target_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.dkt.DKT.forward": [[133, 137], ["dkt.DKT.backbone.forward", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "normalize", ":", "h", "=", "F", ".", "normalize", "(", "h", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.dkt.DKT.net_train": [[138, 150], ["dkt.DKT.gpmodel.train", "dkt.DKT.likelihood.train", "dkt.DKT.backbone.eval", "dkt.DKT.strategy.update_support_set", "dkt.DKT.forward().detach", "dkt.DKT.strategy.update_support_features", "utils.onehot", "dkt.DKT.forward"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.onehot", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward"], ["", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "\n", "        ", "self", ".", "gpmodel", ".", "train", "(", ")", "\n", "self", ".", "likelihood", ".", "train", "(", ")", "\n", "self", ".", "backbone", ".", "eval", "(", ")", "\n", "\n", "support_set", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "support_x", ",", "support_y", "=", "support_set", "\n", "support_h", "=", "self", ".", "forward", "(", "support_x", ")", ".", "detach", "(", ")", "\n", "support_h", ",", "support_y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "support_h", ",", "support_y", ")", ")", "\n", "\n", "self", ".", "support_y_onehots", "=", "uu", ".", "onehot", "(", "support_y", ",", "fill_with", "=", "-", "1", ",", "dim", "=", "self", ".", "output_dim", "[", "self", ".", "mode", "]", ")", "\n", "self", ".", "support_h", "=", "support_h", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.dkt.DKT.net_eval": [[151, 184], ["utils.onehot", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dkt.DKT.gpmodel.eval", "dkt.DKT.likelihood.eval", "dkt.DKT.backbone.eval", "dkt.DKT.forward().detach", "list", "range", "torch.stack().argmax", "torch.stack().argmax", "torch.stack().argmax", "torch.stack().argmax", "torch.stack().argmax", "torch.stack().argmax", "torch.stack().argmax", "torch.stack().argmax", "torch.stack().argmax", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "ptracker.add_task_performance", "dkt.DKT.gpmodel.set_train_data", "dkt.DKT.gpmodel", "dkt.DKT.likelihood", "list.append", "total_losses.append", "torch.stack().argmax.detach().cpu().numpy", "torch.stack().argmax.detach().cpu().numpy", "torch.stack().argmax.detach().cpu().numpy", "target_y.detach().cpu().numpy", "torch.stack().sum.detach().cpu().numpy", "torch.stack().sum.detach().cpu().numpy", "torch.stack().sum.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dkt.DKT.forward", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "dkt.DKT.loss_fn", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().argmax.detach().cpu", "torch.stack().argmax.detach().cpu", "torch.stack().argmax.detach().cpu", "target_y.detach().cpu", "torch.stack().sum.detach().cpu", "torch.stack().sum.detach().cpu", "torch.stack().sum.detach().cpu", "torch.stack().argmax.detach", "torch.stack().argmax.detach", "torch.stack().argmax.detach", "target_y.detach", "torch.stack().sum.detach", "torch.stack().sum.detach", "torch.stack().sum.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.onehot", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward"], ["", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "target_x", ",", "target_y", "=", "target_set", "\n", "target_y_onehots", "=", "uu", ".", "onehot", "(", "target_y", ",", "fill_with", "=", "-", "1", ",", "dim", "=", "self", ".", "output_dim", "[", "self", ".", "mode", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "gpmodel", ".", "eval", "(", ")", "\n", "self", ".", "likelihood", ".", "eval", "(", ")", "\n", "self", ".", "backbone", ".", "eval", "(", ")", "\n", "\n", "target_h", "=", "self", ".", "forward", "(", "target_x", ")", ".", "detach", "(", ")", "\n", "\n", "total_losses", "=", "[", "]", "\n", "predictions_list", "=", "list", "(", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "output_dim", "[", "self", ".", "mode", "]", ")", ":", "\n", "                ", "self", ".", "gpmodel", ".", "set_train_data", "(", "\n", "inputs", "=", "self", ".", "support_h", ",", "\n", "targets", "=", "self", ".", "support_y_onehots", "[", ":", ",", "idx", "]", ",", "\n", "strict", "=", "False", ")", "\n", "output", "=", "self", ".", "gpmodel", "(", "target_h", ")", "\n", "prediction", "=", "self", ".", "likelihood", "(", "output", ")", "\n", "predictions_list", ".", "append", "(", "torch", ".", "sigmoid", "(", "prediction", ".", "mean", ")", ")", "\n", "loss", "=", "-", "self", ".", "loss_fn", "(", "output", ",", "target_y_onehots", "[", ":", ",", "idx", "]", ")", "\n", "total_losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "pred_y", "=", "torch", ".", "stack", "(", "predictions_list", ")", ".", "argmax", "(", "0", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "total_losses", ")", ".", "sum", "(", "0", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "target_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.dkt.ExactGPLayer.__init__": [[193, 228], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "super().__init__", "gpytorch.means.ConstantMean", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.LinearKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.RBFKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.MaternKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.PolynomialKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.PolynomialKernel", "gpytorch.kernels.ScaleKernel", "ValueError", "gpytorch.kernels.LinearKernel", "str"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel", "=", "'linear'", ")", ":", "\n", "#Set the likelihood noise and enable/disable learning", "\n", "        ", "likelihood", ".", "noise_covar", ".", "raw_noise", ".", "requires_grad", "=", "False", "\n", "likelihood", ".", "noise_covar", ".", "noise", "=", "torch", ".", "tensor", "(", "0.1", ")", "\n", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ConstantMean", "(", ")", "\n", "\n", "## Linear kernel", "\n", "if", "(", "kernel", "==", "'linear'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "LinearKernel", "(", ")", ")", "\n", "\n", "## RBF kernel", "\n", "", "elif", "(", "kernel", "==", "'rbf'", "or", "kernel", "==", "'RBF'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", ")", ")", "\n", "\n", "## Matern kernel", "\n", "", "elif", "(", "kernel", "==", "'matern'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "MaternKernel", "(", ")", ")", "\n", "\n", "## Polynomial (p=1)", "\n", "", "elif", "(", "kernel", "==", "'poli1'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "PolynomialKernel", "(", "power", "=", "1", ")", ")", "\n", "\n", "## Polynomial (p=2) ", "\n", "", "elif", "(", "kernel", "==", "'poli2'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "PolynomialKernel", "(", "power", "=", "2", ")", ")", "\n", "\n", "## Cosine distance and BatchNorm Cosine distance", "\n", "", "elif", "(", "kernel", "==", "'cossim'", "or", "kernel", "==", "'bncossim'", ")", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "LinearKernel", "(", ")", ")", "\n", "self", ".", "covar_module", ".", "base_kernel", ".", "variance", "=", "1.0", "\n", "self", ".", "covar_module", ".", "base_kernel", ".", "raw_variance", ".", "requires_grad", "=", "False", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"[ERROR] the kernel '\"", "+", "str", "(", "kernel", ")", "+", "\"' is not supported!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.dkt.ExactGPLayer.forward": [[229, 233], ["dkt.ExactGPLayer.mean_module", "dkt.ExactGPLayer.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.get_parser": [[9, 20], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\" \n        Return model subparser for model dependent hyperparameters / arguments found in self.args variable\n        \"\"\"", "\n", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'seed, if -1 set in code'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'learning rate decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'learning rate decay step size'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.__init__": [[21, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "strategy", "=", "strategy", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "mode", "=", "None", "\n", "self", ".", "epoch", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.setup_model": [[30, 38], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "model_template.ModelTemplate.backbone.parameters"], "methods", ["None"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialises additional model parameters, setup of optimiser and lr_scheduler, etc\n        \"\"\"", "\n", "self", ".", "loss_fn", "=", "None", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "self", ".", "optimizer", ",", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.meta_train": [[39, 59], ["model_template.ModelTemplate.train", "model_template.ModelTemplate.net_reset", "model_template.ModelTemplate.optimizer.zero_grad", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "model_template.ModelTemplate.backward", "model_template.ModelTemplate.optimizer.step", "model_template.ModelTemplate.net_train", "model_template.ModelTemplate.net_eval", "total_losses.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Outer loop used for training\n        \"\"\"", "\n", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "\n", "self", ".", "net_reset", "(", ")", "\n", "total_losses", "=", "[", "]", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "# could be a continual learning task ", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "loss", "=", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "total_losses", ".", "append", "(", "loss", ")", "\n", "\n", "# Optimise meta-learner", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "total_losses", ")", ".", "sum", "(", "0", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "total_losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.meta_test": [[60, 67], ["model_template.ModelTemplate.eval", "model_template.ModelTemplate.meta_eval"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.meta_eval"], ["", "def", "meta_test", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Outer loop used for testing\n        \"\"\"", "\n", "self", ".", "mode", "=", "'test'", "\n", "self", ".", "eval", "(", ")", "\n", "self", ".", "meta_eval", "(", "task", ",", "ptracker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.meta_val": [[68, 75], ["model_template.ModelTemplate.eval", "model_template.ModelTemplate.meta_eval"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.meta_eval"], ["", "def", "meta_val", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Outer loop used for validation\n        \"\"\"", "\n", "self", ".", "mode", "=", "'val'", "\n", "self", ".", "eval", "(", ")", "\n", "self", ".", "meta_eval", "(", "task", ",", "ptracker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.meta_eval": [[76, 86], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_template.ModelTemplate.net_reset", "model_template.ModelTemplate.net_post", "model_template.ModelTemplate.net_train", "model_template.ModelTemplate.net_eval"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.net_post", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "def", "meta_eval", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Outer loop used for validation and testing if they are the same\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "net_reset", "(", ")", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "                ", "self", ".", "net_train", "(", "support_set", ")", "\n", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "", "self", ".", "net_post", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.net_reset": [[87, 93], ["model_template.ModelTemplate.strategy.reset"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset"], ["", "", "def", "net_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Used mainly by demo app.\n        Network preparation set before inner loop / adaptation step\n        \"\"\"", "\n", "self", ".", "strategy", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.net_train": [[94, 101], ["model_template.ModelTemplate.strategy.update_support_set"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set"], ["", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "\n", "        ", "\"\"\"\n        Used mainly by demo app.\n        Network innerloop / adaptation step on the support set\n        \"\"\"", "\n", "# don't forget to get the full support set!", "\n", "support_set", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "# ... do adaptation here ", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.net_eval": [[103, 121], ["model_template.ModelTemplate.backbone", "model_template.ModelTemplate.strategy.apply_outer_loss", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "model_template.ModelTemplate.detach().cpu().numpy", "targets_y.detach().cpu().numpy", "model_template.ModelTemplate.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model_template.ModelTemplate.detach().cpu", "targets_y.detach().cpu", "model_template.ModelTemplate.detach().cpu", "model_template.ModelTemplate.detach", "targets_y.detach", "model_template.ModelTemplate.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Used mainly by demo app.\n        Network evaluation on target set after the inner loop / adaptation process\n        \"\"\"", "\n", "if", "len", "(", "target_set", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "pred_y", "=", "self", ".", "backbone", "(", "targets_x", ")", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "pred_y", ",", "targets_y", ")", "\n", "\n", "# don't forget to store performance", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.net_post": [[122, 129], ["None"], "methods", ["None"], ["", "def", "net_post", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Used mainly by demo app.\n        Used to tidy up after a task.\n        eg. net_reset() could store pretrained weights temporarily, net_post() could then restore them\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.set_mode": [[130, 139], ["model_template.ModelTemplate.train", "model_template.ModelTemplate.eval"], "methods", ["None"], ["", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Sets the mode of algorithm ie. mode \\in {'train', 'val', 'test'}\n        \"\"\"", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.set_epoch": [[140, 146], ["None"], "methods", ["None"], ["", "", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Sets the current epoch number for the meta-learning algorithm\n        Updates the learning rate scheduler\n        \"\"\"", "\n", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.next_epoch": [[147, 149], ["model_template.ModelTemplate.lr_scheduler.step"], "methods", ["None"], ["", "def", "next_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.model_template.ModelTemplate.get_summary_str": [[150, 158], ["enumerate"], "methods", ["None"], ["", "def", "get_summary_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a short string for diagonosing model, displayed in tqdm description\n        \"\"\"", "\n", "summary", "=", "\"\"", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "summary", "+=", "\"lr{}={:.3E} \"", ".", "format", "(", "i", ",", "param_group", "[", "'lr'", "]", ")", "\n", "", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protonet.ProtoNet.__init__": [[12, 14], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protonet.ProtoNet.setup_model": [[15, 19], ["super().setup_model", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "dict", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.setup_model"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "setup_model", "(", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "proto_memory", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protonet.ProtoNet.net_reset": [[20, 23], ["dict", "protonet.ProtoNet.strategy.reset"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset"], ["", "def", "net_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "proto_memory", "=", "dict", "(", ")", "\n", "self", ".", "strategy", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protonet.ProtoNet.net_train": [[24, 30], ["protonet.ProtoNet.strategy.update_support_set", "protonet.ProtoNet.backbone", "protonet.ProtoNet.strategy.update_support_features", "protonet.ProtoNet.calc_prototypes", "protonet.ProtoNet.update_memory"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.calc_prototypes", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.update_memory"], ["", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "\n", "        ", "supports_x", ",", "supports_y", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "supports_h", "=", "self", ".", "backbone", "(", "supports_x", ")", "\n", "supports_h", ",", "supports_y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "supports_h", ",", "supports_y", ")", ")", "\n", "new_proto_h", ",", "new_proto_y", "=", "self", ".", "calc_prototypes", "(", "supports_h", ",", "supports_y", ")", "\n", "self", ".", "update_memory", "(", "new_proto_h", ",", "new_proto_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protonet.ProtoNet.net_eval": [[31, 48], ["protonet.ProtoNet.backbone", "protonet.ProtoNet.get_prototypes", "protonet.euclidean_dist", "protonet.ProtoNet.strategy.apply_outer_loss", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "pred_y.detach().cpu().numpy", "targets_y.detach().cpu().numpy", "protonet.ProtoNet.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pred_y.detach().cpu", "targets_y.detach().cpu", "protonet.ProtoNet.detach().cpu", "pred_y.detach", "targets_y.detach", "protonet.ProtoNet.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.get_prototypes", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.euclidean_dist", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "targets_h", "=", "self", ".", "backbone", "(", "targets_x", ")", "\n", "proto_h", ",", "proto_y", "=", "self", ".", "get_prototypes", "(", ")", "\n", "dist", "=", "euclidean_dist", "(", "targets_h", ",", "proto_h", ")", "\n", "scores", "=", "-", "dist", "\n", "targets_y", "=", "targets_y", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "targets_y", ")", "\n", "\n", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "scores", ",", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protonet.ProtoNet.calc_prototypes": [[49, 58], ["torch.unique", "torch.unique", "torch.unique", "torch.unique", "proto_h.append", "h[].mean"], "methods", ["None"], ["", "def", "calc_prototypes", "(", "self", ",", "h", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Computes prototypes\n        \"\"\"", "\n", "unique_labels", "=", "torch", ".", "unique", "(", "y", ")", "\n", "proto_h", "=", "[", "]", "\n", "for", "label", "in", "unique_labels", ":", "\n", "            ", "proto_h", ".", "append", "(", "h", "[", "y", "==", "label", "]", ".", "mean", "(", "0", ")", ")", "\n", "", "return", "proto_h", ",", "unique_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protonet.ProtoNet.update_memory": [[59, 66], ["proto_y.detach().cpu().numpy", "enumerate", "proto_y.detach().cpu", "int", "proto_y.detach"], "methods", ["None"], ["", "def", "update_memory", "(", "self", ",", "proto_h", ",", "proto_y", ")", ":", "\n", "        ", "\"\"\"\n        Update memory for prototypes\n        \"\"\"", "\n", "labels", "=", "proto_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "self", ".", "proto_memory", "[", "int", "(", "label", ")", "]", "=", "proto_h", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protonet.ProtoNet.get_prototypes": [[67, 83], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.arange", "y.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "torch.stack.append", "torch.stack.append", "len", "protonet.ProtoNet.proto_memory.keys", "y.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "int", "y.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["None"], ["", "", "def", "get_prototypes", "(", "self", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns prototypes for the corresponding labels\n        \"\"\"", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "proto_memory", ".", "keys", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "proto_h", "=", "[", "]", "\n", "for", "l", "in", "y", ":", "\n", "            ", "h", "=", "self", ".", "proto_memory", "[", "int", "(", "l", ")", "]", "\n", "proto_h", ".", "append", "(", "h", ")", "\n", "\n", "", "proto_h", "=", "torch", ".", "stack", "(", "proto_h", ",", "0", ")", "\n", "return", "proto_h", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.protonet.euclidean_dist": [[85, 98], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow", "torch.pow"], "function", ["None"], ["", "", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Distance calculation between two sets of vectors x (n x d) and y (m x d)\n    \"\"\"", "\n", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.get_parser": [[57, 73], ["models.model_template.ModelTemplate.get_parser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser", "FEATURE_TRANSFORMS.keys"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'SimpleShot'", ")", "\n", "\"\"\"\n        returns a parser for the given model. Can also return a subparser\n        \"\"\"", "\n", "parser", "=", "ModelTemplate", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_trans_name'", ",", "type", "=", "str", ",", "choices", "=", "FEATURE_TRANSFORMS", ".", "keys", "(", ")", ",", "default", "=", "'CL2N'", ",", "\n", "help", "=", "'feature transformations'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_feat_trans'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Applies feature transform during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--approx_train_mean'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Approximates the train mean using only a fraction of the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dim'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "-", "1", ",", "\"val\"", ":", "-", "1", ",", "\"test\"", ":", "-", "1", "}", ",", "\n", "help", "=", "'output dimention for the classifer, if -1 set in code'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.__init__": [[74, 82], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "output_dim", "=", "args", ".", "output_dim", "\n", "self", ".", "feat_trans_name", "=", "args", ".", "feat_trans_name", "\n", "self", ".", "train_feat_trans", "=", "args", ".", "train_feat_trans", "\n", "self", ".", "approx_train_mean", "=", "args", ".", "approx_train_mean", "\n", "self", ".", "train_mean", "=", "None", "\n", "self", ".", "update_train_mean", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.setup_model": [[83, 97], ["torch.Linear().to", "torch.Linear().to", "torch.Linear().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "simpleshot.SimpleShot.optimizer.step", "list", "list", "torch.Linear", "torch.Linear", "torch.Linear", "simpleshot.SimpleShot.backbone.parameters", "simpleshot.SimpleShot.classifier.parameters", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "self", ".", "output_dim", "[", "'train'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "feat_transform", "=", "FEATURE_TRANSFORMS", "[", "self", ".", "feat_trans_name", "]", "\n", "\n", "all_params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "all_params", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "\n", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.meta_train": [[98, 118], ["simpleshot.SimpleShot.train", "simpleshot.SimpleShot.optimizer.zero_grad", "simpleshot.SimpleShot.backbone.forward", "simpleshot.SimpleShot.classifier.forward", "simpleshot.SimpleShot.loss_fn", "simpleshot.SimpleShot.backward", "simpleshot.SimpleShot.optimizer.step", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "simpleshot.SimpleShot.feat_transform", "preds.detach().cpu().numpy", "y.detach().cpu().numpy", "simpleshot.SimpleShot.detach().cpu().numpy", "preds.detach().cpu", "y.detach().cpu", "simpleshot.SimpleShot.detach().cpu", "preds.detach", "y.detach", "simpleshot.SimpleShot.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# simple batch task, the same as baseline/++", "\n", "        ", "self", ".", "update_train_mean", "=", "True", "\n", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "\n", "for", "support_set", ",", "_", "in", "task", ":", "\n", "            ", "x", ",", "y", "=", "support_set", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "z", "=", "self", ".", "feat_transform", "(", "z", ")", "if", "self", ".", "train_feat_trans", "else", "z", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "z", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.meta_eval": [[119, 124], ["simpleshot.SimpleShot.net_reset", "simpleshot.SimpleShot.net_train", "simpleshot.SimpleShot.net_eval"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "", "def", "meta_eval", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# FSL task", "\n", "        ", "self", ".", "net_reset", "(", ")", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.net_reset": [[125, 128], ["simpleshot.SimpleShot.strategy.reset", "dict"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset"], ["", "", "def", "net_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "strategy", ".", "reset", "(", ")", "\n", "self", ".", "proto_memory", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.set_train_mean": [[129, 168], ["simpleshot.SimpleShot.eval", "len", "tqdm.tqdm.close", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "tqdm.tqdm.set_description", "numpy.random.permutation", "range", "print", "len", "dataset.get_untransformed_image", "torch.stack().to.append", "torch.stack().to.append", "torch.stack().to.append", "tqdm.tqdm.update", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "simpleshot.SimpleShot.backbone", "simpleshot.SimpleShot.mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "simpleshot.SimpleShot.mean"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_template.MonoDatasetOnDisk.get_untransformed_image"], ["", "def", "set_train_mean", "(", "self", ",", "dataset", ",", "istqdm", "=", "False", ")", ":", "\n", "        ", "if", "not", "self", ".", "update_train_mean", ":", "return", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "length", "=", "len", "(", "dataset", ")", "\n", "if", "self", ".", "approx_train_mean", ":", "\n", "            ", "length", "=", "int", "(", "length", "*", "0.05", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pbar", "=", "tqdm", ".", "tqdm", "(", "initial", "=", "0", ",", "total", "=", "length", ",", "disable", "=", "(", "not", "istqdm", ")", ")", "\n", "pbar", ".", "set_description", "(", "\"Calculating train mean\"", ")", "\n", "\n", "if", "not", "istqdm", ":", "\n", "                ", "print", "(", "\"Calculating train mean\"", ")", "\n", "\n", "", "batch_size", "=", "64", "\n", "batch", "=", "[", "]", "\n", "train_mean", "=", "None", "\n", "old_i", "=", "0", "\n", "perm", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "length", ")", ":", "\n", "                ", "image", "=", "dataset", ".", "get_untransformed_image", "(", "perm", "[", "i", "]", ")", "\n", "batch", ".", "append", "(", "image", ")", "\n", "\n", "if", "(", "i", "%", "batch_size", "==", "batch_size", "-", "1", ")", "or", "(", "i", "+", "1", "==", "length", ")", ":", "\n", "                    ", "pbar", ".", "update", "(", "batch_size", ")", "\n", "batch", "=", "torch", ".", "stack", "(", "batch", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_h", "=", "self", ".", "backbone", "(", "batch", ")", "\n", "if", "train_mean", "is", "None", ":", "\n", "                        ", "train_mean", "=", "batch_h", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "                        ", "train_mean", "=", "(", "old_i", "/", "i", ")", "*", "train_mean", "+", "(", "(", "i", "-", "old_i", ")", "/", "i", ")", "*", "batch_h", ".", "mean", "(", "0", ")", "\n", "", "old_i", "=", "i", "\n", "batch", "=", "[", "]", "\n", "\n", "", "", "", "self", ".", "train_mean", "=", "train_mean", "\n", "self", ".", "update_train_mean", "=", "False", "\n", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.net_train": [[169, 177], ["simpleshot.SimpleShot.strategy.update_support_set", "simpleshot.SimpleShot.backbone", "simpleshot.SimpleShot.strategy.update_support_features", "simpleshot.SimpleShot.feat_transform", "simpleshot.SimpleShot.calc_prototypes", "simpleshot.SimpleShot.update_memory"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.calc_prototypes", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.update_memory"], ["", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "\n", "        ", "assert", "self", ".", "train_mean", "is", "not", "None", ",", "'call set_train_mean before meta_eval()'", "\n", "supports_x", ",", "supports_y", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "supports_h", "=", "self", ".", "backbone", "(", "supports_x", ")", "\n", "supports_h", ",", "supports_y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "supports_h", ",", "supports_y", ")", ")", "\n", "supports_h", "=", "self", ".", "feat_transform", "(", "supports_h", ",", "self", ".", "train_mean", ")", "\n", "new_proto_h", ",", "new_proto_y", "=", "self", ".", "calc_prototypes", "(", "supports_h", ",", "supports_y", ")", "\n", "self", ".", "update_memory", "(", "new_proto_h", ",", "new_proto_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.net_eval": [[178, 198], ["simpleshot.SimpleShot.backbone", "simpleshot.SimpleShot.feat_transform", "simpleshot.SimpleShot.get_prototypes", "simpleshot.euclidean_dist", "simpleshot.SimpleShot.strategy.apply_outer_loss", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "pred_y.detach().cpu().numpy", "targets_y.detach().cpu().numpy", "simpleshot.SimpleShot.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pred_y.detach().cpu", "targets_y.detach().cpu", "simpleshot.SimpleShot.detach().cpu", "pred_y.detach", "targets_y.detach", "simpleshot.SimpleShot.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.get_prototypes", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.euclidean_dist", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "targets_h", "=", "self", ".", "backbone", "(", "targets_x", ")", "\n", "targets_h", "=", "self", ".", "feat_transform", "(", "targets_h", ",", "self", ".", "train_mean", ")", "\n", "proto_h", ",", "proto_y", "=", "self", ".", "get_prototypes", "(", ")", "\n", "dist", "=", "euclidean_dist", "(", "targets_h", ",", "proto_h", ")", "\n", "scores", "=", "-", "dist", "\n", "targets_y", "=", "targets_y", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "targets_y", ")", "\n", "\n", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "scores", ",", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.calc_prototypes": [[199, 211], ["torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "proto_h.append", "h[].mean"], "methods", ["None"], ["", "def", "calc_prototypes", "(", "self", ",", "h", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Computes a prototypes for using array of mapped images\n        :param h: tensors of mapped images (in embedding space)\n        :param y: labels for the tensors\n        :returns: the prototypes and their labels as tensor\n        \"\"\"", "\n", "unique_labels", "=", "torch", ".", "unique", "(", "y", ")", "\n", "proto_h", "=", "[", "]", "\n", "for", "label", "in", "unique_labels", ":", "\n", "            ", "proto_h", ".", "append", "(", "h", "[", "y", "==", "label", "]", ".", "mean", "(", "0", ")", ")", "\n", "", "return", "proto_h", ",", "unique_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.update_memory": [[212, 216], ["proto_y.detach().cpu().numpy", "enumerate", "proto_y.detach().cpu", "int", "proto_y.detach"], "methods", ["None"], ["", "def", "update_memory", "(", "self", ",", "proto_h", ",", "proto_y", ")", ":", "\n", "        ", "labels", "=", "proto_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "self", ".", "proto_memory", "[", "int", "(", "label", ")", "]", "=", "proto_h", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.get_prototypes": [[217, 230], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.arange", "y.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "torch.stack.append", "torch.stack.append", "torch.stack.append", "len", "simpleshot.SimpleShot.proto_memory.keys", "y.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "int", "y.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["None"], ["", "", "def", "get_prototypes", "(", "self", ",", "y", "=", "None", ")", ":", "\n", "        ", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "proto_memory", ".", "keys", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "proto_h", "=", "[", "]", "\n", "for", "l", "in", "y", ":", "\n", "            ", "h", "=", "self", ".", "proto_memory", "[", "int", "(", "l", ")", "]", "\n", "proto_h", ".", "append", "(", "h", ")", "\n", "\n", "", "proto_h", "=", "torch", ".", "stack", "(", "proto_h", ",", "0", ")", "\n", "return", "proto_h", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.euclidean_dist": [[14, 26], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "# x: N x D", "\n", "# y: M x D", "\n", "    ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.unnormalised": [[27, 29], ["None"], "function", ["None"], ["", "def", "unnormalised", "(", "batch", ",", "train_mean", "=", "None", ")", ":", "\n", "    ", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.l2_normalised": [[30, 32], ["torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "l2_normalised", "(", "batch", ",", "train_mean", "=", "None", ")", ":", "\n", "    ", "return", "batch", "/", "torch", ".", "norm", "(", "batch", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# normalise each feature", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.centered_l2_normalised": [[33, 39], ["batch.mean", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "centered_l2_normalised", "(", "batch", ",", "train_mean", "=", "None", ")", ":", "\n", "    ", "if", "train_mean", "is", "None", ":", "\n", "        ", "train_mean", "=", "batch", ".", "mean", "(", "0", ")", "\n", "\n", "", "batch", "=", "batch", "-", "train_mean", "\n", "return", "batch", "/", "torch", ".", "norm", "(", "batch", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# normalise each feature", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.freeze_model": [[46, 49], ["model.parameters"], "function", ["None"], ["def", "freeze_model", "(", "model", ")", ":", "\n", "    ", "for", "params", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "params", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.unfreeze_model": [[50, 53], ["model.parameters"], "function", ["None"], ["", "", "def", "unfreeze_model", "(", "model", ")", ":", "\n", "    ", "for", "params", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "params", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.get_parser": [[14, 29], ["models.model_template.ModelTemplate.get_parser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        returns a parser for the given model. Can also return a subparser\n        \"\"\"", "\n", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", "=", "ModelTemplate", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--num_inner_loop_steps'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--inner_loop_lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--approx'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of tasks before the outerloop update, eg. update meta learner every 4th task'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dim'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "-", "1", ",", "\"val\"", ":", "-", "1", ",", "\"test\"", ":", "-", "1", "}", ",", "\n", "help", "=", "'output dimention for the classifer, if -1 set in code'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.__init__": [[30, 41], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "approx", "=", "args", ".", "approx", "\n", "self", ".", "inner_loop_lr", "=", "args", ".", "inner_loop_lr", "\n", "self", ".", "num_steps", "=", "args", ".", "num_inner_loop_steps", "\n", "self", ".", "output_dim", "=", "args", ".", "output_dim", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "batch_count", "=", "0", "\n", "self", ".", "batch_losses", "=", "[", "]", "\n", "self", ".", "fast_parameters", "=", "[", "]", "\n", "assert", "self", ".", "output_dim", ".", "train", "==", "self", ".", "output_dim", ".", "test", ",", "'maml training output dim must mimic the testing scenario'", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.setup_model": [[42, 51], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "maml.Maml.setup_classifier", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "maml.Maml.optimizer.zero_grad", "maml.Maml.optimizer.step", "list", "list", "maml.Maml.backbone.parameters", "maml.Maml.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.setup_classifier"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "classifier", "=", "self", ".", "setup_classifier", "(", "self", ".", "output_dim", ".", "train", ")", "\n", "all_params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "all_params", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.setup_classifier": [[52, 56], ["backbones.layers.Linear_fw().to", "backbones.layers.Linear_fw().to.bias.data.fill_", "backbones.layers.Linear_fw"], "methods", ["None"], ["", "def", "setup_classifier", "(", "self", ",", "output_dim", ")", ":", "\n", "        ", "classifier", "=", "Linear_fw", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "output_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.meta_train": [[57, 78], ["maml.Maml.train", "maml.Maml.net_reset", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "maml.Maml.batch_losses.append", "maml.Maml.net_train", "maml.Maml.net_eval", "total_losses.append", "maml.Maml.optimizer.zero_grad", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum.backward", "torch.stack().sum.backward", "torch.stack().sum.backward", "maml.Maml.optimizer.step", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of meta training (outer) loop ", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "self", ".", "batch_count", "+=", "1", "\n", "\n", "total_losses", "=", "[", "]", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "loss", "=", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "total_losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "loss", "=", "torch", ".", "stack", "(", "total_losses", ")", ".", "sum", "(", "0", ")", "\n", "self", ".", "batch_losses", ".", "append", "(", "loss", ")", "\n", "\n", "if", "self", ".", "batch_count", "%", "self", ".", "batch_size", "==", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "self", ".", "batch_losses", ")", ".", "sum", "(", "0", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "batch_losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.meta_eval": [[79, 84], ["maml.Maml.net_reset", "maml.Maml.net_train", "maml.Maml.net_eval"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "", "def", "meta_eval", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of evaluation of task ", "\n", "        ", "self", ".", "net_reset", "(", ")", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.net_reset": [[85, 90], ["maml.Maml.strategy.reset", "maml.Maml.get_inner_loop_params", "maml.Maml.parameters"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.get_inner_loop_params"], ["", "", "def", "net_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "strategy", ".", "reset", "(", ")", "\n", "self", ".", "fast_parameters", "=", "self", ".", "get_inner_loop_params", "(", ")", "\n", "for", "weight", "in", "self", ".", "parameters", "(", ")", ":", "# reset fast parameters", "\n", "            ", "weight", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.net_train": [[91, 117], ["maml.Maml.zero_grad", "maml.Maml.strategy.update_support_set", "range", "maml.Maml.backbone.forward", "maml.Maml.strategy.update_support_features", "maml.Maml.classifier.forward", "maml.Maml.strategy.apply_inner_loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "maml.Maml.parameters", "maml.Maml.fast_parameters.append", "g.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_inner_loss"], ["", "", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "# inner loop       ", "\n", "        ", "self", ".", "zero_grad", "(", ")", "\n", "\n", "(", "support_x", ",", "support_y", ")", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "\n", "for", "n_step", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "            ", "support_h", "=", "self", ".", "backbone", ".", "forward", "(", "support_x", ")", "\n", "support_h", ",", "support_y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "support_h", ",", "support_y", ")", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "support_h", ")", "\n", "set_loss", "=", "self", ".", "strategy", ".", "apply_inner_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "support_y", ")", "\n", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "set_loss", ",", "\n", "self", ".", "fast_parameters", ",", "\n", "create_graph", "=", "True", ")", "# build full graph support gradient of gradient", "\n", "\n", "if", "self", ".", "approx", ":", "\n", "                ", "grad", "=", "[", "g", ".", "detach", "(", ")", "for", "g", "in", "grad", "]", "#do not calculate gradient of gradient if using first order approximation", "\n", "\n", "", "self", ".", "fast_parameters", "=", "[", "]", "\n", "for", "k", ",", "weight", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "weight", ".", "fast", "is", "None", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", "-", "self", ".", "inner_loop_lr", "*", "grad", "[", "k", "]", "# create weight.fast ", "\n", "", "else", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", ".", "fast", "-", "self", ".", "inner_loop_lr", "*", "grad", "[", "k", "]", "# update weight.fast", "\n", "", "self", ".", "fast_parameters", ".", "append", "(", "weight", ".", "fast", ")", "# gradients are based on newest weights, but the graph will retain the link to old weight.fasts", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.net_eval": [[118, 135], ["maml.Maml.backbone.forward", "maml.Maml.classifier.forward", "maml.Maml.strategy.apply_outer_loss", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "pred_y.detach().cpu().numpy", "targets_y.detach().cpu().numpy", "maml.Maml.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pred_y.detach().cpu", "targets_y.detach().cpu", "maml.Maml.detach().cpu", "pred_y.detach", "targets_y.detach", "maml.Maml.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "", "", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "targets_h", "=", "self", ".", "backbone", ".", "forward", "(", "targets_x", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "targets_h", ")", "\n", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "targets_y", ")", "\n", "\n", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.maml.Maml.get_inner_loop_params": [[136, 138], ["list", "list", "maml.Maml.backbone.parameters", "maml.Maml.classifier.parameters"], "methods", ["None"], ["", "def", "get_inner_loop_params", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baselinepp.BaselinePP.__init__": [[6, 8], ["models.baseline.Baseline.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baselinepp.BaselinePP.setup_classifier": [[16, 18], ["backbones.layers.distLinear().to", "backbones.layers.distLinear"], "methods", ["None"], ["", "def", "setup_classifier", "(", "self", ",", "output_dim", ")", ":", "\n", "        ", "return", "distLinear", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "output_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baselinepp.BaselinePP.reset_test_classifier": [[19, 21], ["baselinepp.BaselinePP.setup_classifier"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.setup_classifier"], ["", "def", "reset_test_classifier", "(", "self", ")", ":", "\n", "        ", "self", ".", "test_classifier", "=", "self", ".", "setup_classifier", "(", "self", ".", "output_dim", "[", "self", ".", "mode", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationNet.get_parser": [[16, 22], ["models.protonet.ProtoNet.get_parser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'RelationNet'", ")", "\n", "parser", "=", "ProtoNet", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_type'", ",", "type", "=", "str", ",", "choices", "=", "[", "'mse'", ",", "'softmax'", "]", ",", "default", "=", "'mse'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationNet.__init__": [[23, 26], ["models.protonet.ProtoNet.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "loss_type", "=", "self", ".", "args", ".", "loss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationNet.setup_model": [[27, 40], ["RelationModule().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "list", "list", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "Exception", "relationnet.RelationModule", "relationnet.RelationNet.backbone.parameters", "relationnet.RelationNet.relation_module.parameters"], "methods", ["None"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'softmax'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid loss type: {}\"", ".", "format", "(", "self", ".", "loss_type", ")", ")", "\n", "\n", "", "self", ".", "relation_module", "=", "RelationModule", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "8", ",", "self", ".", "loss_type", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "all_params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "relation_module", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "all_params", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationNet.meta_train": [[41, 56], ["relationnet.RelationNet.train", "relationnet.RelationNet.net_reset", "relationnet.RelationNet.optimizer.zero_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "relationnet.RelationNet.backward", "relationnet.RelationNet.optimizer.step", "relationnet.RelationNet.net_train", "relationnet.RelationNet.net_eval", "total_losses.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of meta training (outer) loop ", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "\n", "self", ".", "net_reset", "(", ")", "\n", "total_losses", "=", "[", "]", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "# in protonet", "\n", "loss", "=", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "total_losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "total_losses", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationNet.net_eval": [[57, 84], ["relationnet.RelationNet.backbone", "relationnet.RelationNet.get_prototypes", "relationnet.RelationNet.construct_pairs", "len", "relationnet.RelationNet.relation_module", "scores.view.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "relationnet.RelationNet.strategy.apply_outer_loss", "relationnet.RelationNet.strategy.apply_outer_loss", "pred_y.detach().cpu().numpy", "targets_y.detach().cpu().numpy", "relationnet.RelationNet.detach().cpu().numpy", "utils.onehot().float().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pred_y.detach().cpu", "targets_y.detach().cpu", "relationnet.RelationNet.detach().cpu", "utils.onehot().float", "pred_y.detach", "targets_y.detach", "relationnet.RelationNet.detach", "utils.onehot"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.simpleshot.SimpleShot.get_prototypes", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationNet.construct_pairs", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.utils.onehot"], ["", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "targets_h", "=", "self", ".", "backbone", "(", "targets_x", ")", "\n", "proto_h", ",", "proto_y", "=", "self", ".", "get_prototypes", "(", ")", "\n", "\n", "relation_pairs", "=", "self", ".", "construct_pairs", "(", "proto_h", ",", "targets_h", ")", "\n", "\n", "n_way", "=", "len", "(", "proto_y", ")", "\n", "scores", "=", "self", ".", "relation_module", "(", "relation_pairs", ")", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ",", "n_way", ")", "\n", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "targets_y_onehot", "=", "Variable", "(", "uu", ".", "onehot", "(", "targets_y", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "targets_y_onehot", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "targets_y", ")", "\n", "\n", "", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "scores", ",", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationNet.construct_pairs": [[85, 101], ["proto_h.view.view.view", "targets_h.view.view.view", "len", "len", "proto_h.view.view.unsqueeze().repeat", "targets_h.view.view.unsqueeze().repeat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "relationnet.RelationNet.backbone.final_feat_dim.copy", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "proto_h.view.view.unsqueeze", "targets_h.view.view.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "construct_pairs", "(", "self", ",", "proto_h", ",", "targets_h", ")", ":", "\n", "        ", "proto_h", "=", "proto_h", ".", "view", "(", "-", "1", ",", "*", "self", ".", "backbone", ".", "final_feat_dim", ")", "\n", "targets_h", "=", "targets_h", ".", "view", "(", "-", "1", ",", "*", "self", ".", "backbone", ".", "final_feat_dim", ")", "\n", "\n", "n_proto", "=", "len", "(", "proto_h", ")", "# n_way", "\n", "n_targets", "=", "len", "(", "targets_h", ")", "# n_query * n_way", "\n", "\n", "proto_h_ext", "=", "proto_h", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "n_targets", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "targets_h_ext", "=", "targets_h", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "n_proto", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "targets_h_ext", "=", "torch", ".", "transpose", "(", "targets_h_ext", ",", "0", ",", "1", ")", "\n", "\n", "extend_final_feat_dim", "=", "self", ".", "backbone", ".", "final_feat_dim", ".", "copy", "(", ")", "\n", "extend_final_feat_dim", "[", "0", "]", "*=", "2", "\n", "relation_pairs", "=", "torch", ".", "cat", "(", "(", "proto_h_ext", ",", "targets_h_ext", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "*", "extend_final_feat_dim", ")", "\n", "return", "relation_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationConvBlock.__init__": [[104, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbones.layers.init_layer"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "RelationConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", ",", "self", ".", "pool", "]", "\n", "\n", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationConvBlock.forward": [[120, 123], ["relationnet.RelationConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationModule.__init__": [[127, 139], ["torch.Module.__init__", "relationnet.RelationConvBlock", "relationnet.RelationConvBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "shrink_s", "shrink_s", "int"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "feat_dim", ",", "hidden_size", ",", "loss_type", "=", "'mse'", ")", ":", "\n", "        ", "super", "(", "RelationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "padding", "=", "1", "if", "(", "feat_dim", "[", "1", "]", "<", "10", ")", "and", "(", "feat_dim", "[", "2", "]", "<", "10", ")", "else", "0", "# when using Resnet, conv map without avgpooling is 7x7, need padding in block to do pooling", "\n", "\n", "self", ".", "layer1", "=", "RelationConvBlock", "(", "feat_dim", "[", "0", "]", "*", "2", ",", "feat_dim", "[", "0", "]", ",", "padding", "=", "padding", ")", "\n", "self", ".", "layer2", "=", "RelationConvBlock", "(", "feat_dim", "[", "0", "]", ",", "feat_dim", "[", "0", "]", ",", "padding", "=", "padding", ")", "\n", "\n", "shrink_s", "=", "lambda", "s", ":", "int", "(", "(", "int", "(", "(", "s", "-", "2", "+", "2", "*", "padding", ")", "/", "2", ")", "-", "2", "+", "2", "*", "padding", ")", "/", "2", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "feat_dim", "[", "0", "]", "*", "shrink_s", "(", "feat_dim", "[", "1", "]", ")", "*", "shrink_s", "(", "feat_dim", "[", "2", "]", ")", ",", "hidden_size", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.relationnet.RelationModule.forward": [[140, 152], ["relationnet.RelationModule.layer1", "relationnet.RelationModule.layer2", "relationnet.RelationModule.view", "torch.relu", "torch.relu", "torch.relu", "relationnet.RelationModule.size", "relationnet.RelationModule.fc1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "relationnet.RelationModule.fc2", "relationnet.RelationModule.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "out", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'softmax'", ":", "\n", "            ", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "\n", "", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.KNN.get_parser": [[26, 37], ["models.model_template.ModelTemplate.get_parser", "models.model_template.ModelTemplate.get_parser.add_argument", "models.model_template.ModelTemplate.get_parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        returns a parser for the given model. Can also return a subparser\n        \"\"\"", "\n", "parser", "=", "ModelTemplate", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--k'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of neighbours used'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dim'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "-", "1", ",", "\"test\"", ":", "-", "1", "}", ",", "\n", "help", "=", "'output dimention for the classifer, if -1 set in code'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.KNN.__init__": [[38, 42], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", "KNN", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "output_dim", "=", "args", ".", "output_dim", "\n", "self", ".", "k", "=", "args", ".", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.KNN.setup_model": [[43, 52], ["torch.Linear().to", "torch.Linear().to", "knn.KNN.train_classifier.bias.data.fill_", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "list", "list", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "knn.KNN.backbone.parameters", "knn.KNN.train_classifier.parameters"], "methods", ["None"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_classifier", "=", "nn", ".", "Linear", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "self", ".", "output_dim", "[", "'train'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "train_classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "all_params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "train_classifier", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "all_params", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "\n", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.KNN.meta_train": [[53, 72], ["knn.KNN.train", "knn.KNN.optimizer.zero_grad", "knn.KNN.backbone.forward", "knn.KNN.train_classifier.forward", "knn.KNN.loss_fn", "knn.KNN.backward", "knn.KNN.optimizer.step", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "preds.detach().cpu().numpy", "y.detach().cpu().numpy", "knn.KNN.detach().cpu().numpy", "preds.detach().cpu", "y.detach().cpu", "knn.KNN.detach().cpu", "preds.detach", "y.detach", "knn.KNN.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "\n", "for", "batch", ",", "_", "in", "task", ":", "\n", "            ", "x", ",", "y", "=", "batch", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "train_classifier", ".", "forward", "(", "z", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.KNN.meta_val": [[73, 92], ["knn.KNN.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "knn.KNN.optimizer.zero_grad", "knn.KNN.backbone.forward", "knn.KNN.train_classifier.forward", "knn.KNN.loss_fn", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "preds.detach().cpu().numpy", "y.detach().cpu().numpy", "knn.KNN.detach().cpu().numpy", "preds.detach().cpu", "y.detach().cpu", "knn.KNN.detach().cpu", "preds.detach", "y.detach", "knn.KNN.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "", "def", "meta_val", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Validates just like in conventional machine learning, on different samples from same set of train classes\n        \"\"\"", "\n", "self", ".", "mode", "=", "'val'", "\n", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch", ",", "_", "in", "task", ":", "\n", "                ", "x", ",", "y", "=", "batch", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "train_classifier", ".", "forward", "(", "z", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.KNN.meta_test": [[93, 104], ["knn.KNN.eval", "knn.KNN.net_reset", "knn.KNN.net_post", "knn.KNN.net_train", "knn.KNN.net_eval"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.net_post", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "", "", "def", "meta_test", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Test loop for FSL task\n        \"\"\"", "\n", "self", ".", "mode", "=", "'test'", "\n", "self", ".", "eval", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "", "self", ".", "net_post", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.KNN.net_train": [[105, 109], ["knn.KNN.strategy.update_support_set", "knn.KNN.backbone.forward", "knn.KNN.strategy.update_support_features"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features"], ["", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "z", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "self", ".", "support_memory", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "z", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.KNN.net_eval": [[110, 126], ["dist.topk.KNN.backbone.forward", "knn.euclidean_dist", "euclidean_dist.topk", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mode", "torch.mode", "torch.mode", "torch.mode", "preds.detach().cpu().numpy", "target_y.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "preds.detach().cpu", "target_y.detach().cpu", "preds.detach", "target_y.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.euclidean_dist", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "target_x", ",", "target_y", "=", "target_set", "\n", "target_z", "=", "self", ".", "backbone", ".", "forward", "(", "target_x", ")", "\n", "\n", "support_z", ",", "support_y", "=", "self", ".", "support_memory", "\n", "\n", "dist", "=", "euclidean_dist", "(", "target_z", ",", "support_z", ")", "\n", "knn", "=", "dist", ".", "topk", "(", "self", ".", "k", ",", "largest", "=", "False", ")", "\n", "preds", "=", "torch", ".", "mode", "(", "support_y", "[", "knn", ".", "indices", "]", ",", "1", ")", ".", "values", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "target_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "0.0", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.knn.euclidean_dist": [[10, 22], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow", "torch.pow"], "function", ["None"], ["def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "# x: N x D", "\n", "# y: M x D", "\n", "    ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.get_parser": [[13, 26], ["models.model_template.ModelTemplate.get_parser", "models.model_template.ModelTemplate.get_parser.add_argument", "models.model_template.ModelTemplate.get_parser.add_argument", "models.model_template.ModelTemplate.get_parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        returns a parser for the given model. Can also return a subparser\n        \"\"\"", "\n", "parser", "=", "ModelTemplate", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--finetune_batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'batch size used in the inner loop for finetunning'", ")", "\n", "parser", ".", "add_argument", "(", "'--finetune_iter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'number of finetuning iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dim'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "-", "1", ",", "\"test\"", ":", "-", "1", "}", ",", "\n", "help", "=", "'output dimention for the classifer, if -1 set in code'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.__init__": [[27, 32], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "output_dim", "=", "args", ".", "output_dim", "\n", "self", ".", "finetune_iter", "=", "args", ".", "finetune_iter", "\n", "self", ".", "finetune_batch_size", "=", "args", ".", "finetune_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.setup_model": [[33, 44], ["baseline.Baseline.setup_classifier", "baseline.Baseline.setup_classifier", "baseline.Baseline.reset_test_classifier", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "list", "list", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "baseline.Baseline.backbone.parameters", "baseline.Baseline.train_classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.setup_classifier", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.setup_classifier", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.reset_test_classifier"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_classifier", "=", "self", ".", "setup_classifier", "(", "self", ".", "output_dim", ".", "train", ")", "\n", "self", ".", "test_classifier", "=", "self", ".", "setup_classifier", "(", "self", ".", "output_dim", ".", "test", ")", "\n", "self", ".", "reset_test_classifier", "(", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "all_params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "train_classifier", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "all_params", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "\n", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.meta_train": [[45, 64], ["baseline.Baseline.train", "baseline.Baseline.optimizer.zero_grad", "baseline.Baseline.backbone.forward", "baseline.Baseline.train_classifier.forward", "baseline.Baseline.loss_fn", "baseline.Baseline.backward", "baseline.Baseline.optimizer.step", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "preds.detach().cpu().numpy", "y.detach().cpu().numpy", "baseline.Baseline.detach().cpu().numpy", "preds.detach().cpu", "y.detach().cpu", "baseline.Baseline.detach().cpu", "preds.detach", "y.detach", "baseline.Baseline.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "\n", "for", "batch", ",", "_", "in", "task", ":", "\n", "            ", "x", ",", "y", "=", "batch", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "train_classifier", ".", "forward", "(", "z", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.meta_val": [[65, 85], ["baseline.Baseline.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "baseline.Baseline.optimizer.zero_grad", "baseline.Baseline.backbone.forward", "baseline.Baseline.train_classifier.forward", "baseline.Baseline.loss_fn", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "preds.detach().cpu().numpy", "y.detach().cpu().numpy", "baseline.Baseline.detach().cpu().numpy", "preds.detach().cpu", "y.detach().cpu", "baseline.Baseline.detach().cpu", "preds.detach", "y.detach", "baseline.Baseline.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "", "def", "meta_val", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Validates just like in conventional machine learning, on different samples from same set of train classes\n        Note: there's no validation loop used in the original implementation\n        \"\"\"", "\n", "self", ".", "mode", "=", "'val'", "\n", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch", ",", "_", "in", "task", ":", "\n", "                ", "x", ",", "y", "=", "batch", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "train_classifier", ".", "forward", "(", "z", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.meta_test": [[87, 98], ["baseline.Baseline.eval", "baseline.Baseline.net_reset", "baseline.Baseline.net_post", "baseline.Baseline.net_train", "baseline.Baseline.net_eval"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.net_post", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "", "", "def", "meta_test", "(", "self", ",", "task", ",", "ptracker", ")", ":", "\n", "        ", "\"\"\"\n        Test loop for FSL task\n        \"\"\"", "\n", "self", ".", "mode", "=", "'test'", "\n", "self", ".", "eval", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "", "self", ".", "net_post", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.net_reset": [[99, 105], ["baseline.freeze_model", "baseline.Baseline.strategy.reset"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.freeze_model", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset"], ["", "def", "net_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Prep network for FSL task\n        \"\"\"", "\n", "freeze_model", "(", "self", ".", "backbone", ")", "\n", "self", ".", "strategy", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.net_train": [[106, 136], ["baseline.Baseline.strategy.update_support_set", "baseline.Baseline.backbone.forward", "baseline.Baseline.strategy.update_support_features", "len", "baseline.Baseline.test_classifier.train", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "baseline.Baseline.test_classifier.parameters", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "range", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "baseline.Baseline.test_classifier.zero_grad", "baseline.Baseline.test_classifier.forward", "baseline.Baseline.strategy.apply_inner_loss", "baseline.Baseline.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.permutation", "min"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_inner_loss"], ["", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "z", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "z", ",", "y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "z", ",", "y", ")", ")", "\n", "n", "=", "len", "(", "x", ")", "\n", "\n", "self", ".", "test_classifier", ".", "train", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "test_classifier", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "0.01", ",", "\n", "momentum", "=", "0.9", ",", "\n", "dampening", "=", "0.9", ",", "\n", "weight_decay", "=", "0.001", "\n", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "finetune_iter", ")", ":", "\n", "            ", "rand_id", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "n", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ",", "self", ".", "finetune_batch_size", ")", ":", "\n", "                ", "selected_id", "=", "rand_id", "[", "i", ":", "min", "(", "i", "+", "self", ".", "finetune_batch_size", ",", "n", ")", "]", "\n", "z_batch", "=", "z", "[", "selected_id", "]", "\n", "y_batch", "=", "y", "[", "selected_id", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "test_classifier", ".", "zero_grad", "(", ")", "\n", "scores", "=", "self", ".", "test_classifier", ".", "forward", "(", "z_batch", ")", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_inner_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "y_batch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.net_eval": [[137, 152], ["baseline.Baseline.test_classifier.eval", "baseline.Baseline.backbone.forward", "baseline.Baseline.test_classifier.forward", "baseline.Baseline.strategy.apply_outer_loss", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "preds.detach().cpu().numpy", "y.detach().cpu().numpy", "baseline.Baseline.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "preds.detach().cpu", "y.detach().cpu", "baseline.Baseline.detach().cpu", "preds.detach", "y.detach", "baseline.Baseline.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "", "", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "test_classifier", ".", "eval", "(", ")", "\n", "\n", "x", ",", "y", "=", "target_set", "\n", "z", "=", "self", ".", "backbone", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "test_classifier", ".", "forward", "(", "z", ")", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "y", ")", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.net_post": [[153, 156], ["baseline.unfreeze_model", "baseline.Baseline.reset_test_classifier"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.unfreeze_model", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.reset_test_classifier"], ["", "def", "net_post", "(", "self", ")", ":", "\n", "        ", "unfreeze_model", "(", "self", ".", "backbone", ")", "\n", "self", ".", "reset_test_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.setup_classifier": [[157, 164], ["torch.Linear().to", "torch.Linear().to", "torch.Linear().to.bias.data.fill_", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "setup_classifier", "(", "self", ",", "output_dim", ")", ":", "\n", "        ", "\"\"\"\n        Setups a regular classifer\n        \"\"\"", "\n", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "output_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.Baseline.reset_test_classifier": [[165, 169], ["baseline.Baseline.test_classifier.weight.data.uniform_", "baseline.Baseline.test_classifier.bias.data.fill_", "math.sqrt", "baseline.Baseline.test_classifier.weight.size"], "methods", ["None"], ["", "def", "reset_test_classifier", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "test_classifier", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "test_classifier", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "test_classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.freeze_model": [[170, 173], ["model.parameters"], "function", ["None"], ["", "", "def", "freeze_model", "(", "model", ")", ":", "\n", "    ", "for", "params", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "params", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.baseline.unfreeze_model": [[174, 177], ["model.parameters"], "function", ["None"], ["", "", "def", "unfreeze_model", "(", "model", ")", ":", "\n", "    ", "for", "params", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "params", ".", "requires_grad", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.get_parser": [[82, 98], ["models.model_template.ModelTemplate.get_parser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        returns a parser for the given model. Can also return a subparser\n        \"\"\"", "\n", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", "=", "ModelTemplate", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--num_inner_loop_steps'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--inner_loop_lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of tasks before the outerloop update, eg. update meta learner every 4th task'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_draws'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'number of particles'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dim'", ",", "type", "=", "dict", ",", "default", "=", "{", "\"train\"", ":", "-", "1", ",", "\"val\"", ":", "-", "1", ",", "\"test\"", ":", "-", "1", "}", ",", "\n", "help", "=", "'output dimention for the classifer, if -1 set in code'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.__init__": [[99, 111], ["models.model_template.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "inner_loop_lr", "=", "args", ".", "inner_loop_lr", "\n", "self", ".", "num_inner_loop_steps", "=", "args", ".", "num_inner_loop_steps", "\n", "self", ".", "output_dim", "=", "args", ".", "output_dim", "\n", "self", ".", "n_way", "=", "self", ".", "args", ".", "output_dim", ".", "train", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "num_draws", "=", "args", ".", "num_draws", "\n", "self", ".", "batch_count", "=", "0", "\n", "self", ".", "batch_losses", "=", "[", "]", "\n", "self", ".", "fast_parameters", "=", "[", "]", "\n", "assert", "self", ".", "output_dim", ".", "train", "==", "self", ".", "output_dim", ".", "test", ",", "'training output dim must mimic the testing scenario'", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.setup_model": [[112, 125], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter().to", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "bmaml.BayesianMAML.optimizer.zero_grad", "bmaml.BayesianMAML.optimizer.step", "bmaml.BayesianMAML.backbone.parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bmaml.init_theta"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.init_theta"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "theta", "=", "nn", ".", "Parameter", "(", "\n", "init_theta", "(", "self", ".", "backbone", ".", "final_feat_dim", ",", "self", ".", "args", ".", "output_dim", ".", "train", ",", "self", ".", "num_draws", ")", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "all_params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "all_params", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "args", ".", "lr_decay_step", ",", "gamma", "=", "self", ".", "args", ".", "lr_decay", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.meta_train": [[126, 147], ["bmaml.BayesianMAML.train", "bmaml.BayesianMAML.net_reset", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "bmaml.BayesianMAML.batch_losses.append", "bmaml.BayesianMAML.net_train", "bmaml.BayesianMAML.net_eval", "total_losses.append", "bmaml.BayesianMAML.optimizer.zero_grad", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum.backward", "torch.stack().sum.backward", "torch.stack().sum.backward", "bmaml.BayesianMAML.optimizer.step", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of meta training (outer) loop ", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "self", ".", "batch_count", "+=", "1", "\n", "\n", "total_losses", "=", "[", "]", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "loss", "=", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "total_losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "loss", "=", "torch", ".", "stack", "(", "total_losses", ")", ".", "sum", "(", "0", ")", "\n", "self", ".", "batch_losses", ".", "append", "(", "loss", ")", "\n", "\n", "if", "self", ".", "batch_count", "%", "self", ".", "batch_size", "==", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "self", ".", "batch_losses", ")", ".", "sum", "(", "0", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "batch_losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.meta_eval": [[148, 154], ["bmaml.BayesianMAML.eval", "bmaml.BayesianMAML.net_reset", "bmaml.BayesianMAML.net_train", "bmaml.BayesianMAML.net_eval"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval"], ["", "", "def", "meta_eval", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of evaluation of task ", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "self", ".", "net_train", "(", "support_set", ")", "\n", "self", ".", "net_eval", "(", "target_set", ",", "ptracker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset": [[155, 159], ["bmaml.BayesianMAML.strategy.reset"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset"], ["", "", "def", "net_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "svgd_state", "=", "None", "\n", "self", ".", "model_state", "=", "None", "\n", "self", ".", "strategy", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_train": [[160, 166], ["bmaml.BayesianMAML.strategy.update_support_set", "bmaml.BayesianMAML.backbone.forward", "bmaml.BayesianMAML.strategy.update_support_features", "BayesianMAMLModelState", "bmaml.BayesianMAML.svgd_update"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.svgd_update"], ["", "def", "net_train", "(", "self", ",", "support_set", ")", ":", "# inner loop", "\n", "        ", "(", "support_x", ",", "support_y", ")", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "support_h", "=", "self", ".", "backbone", ".", "forward", "(", "support_x", ")", "\n", "(", "support_h", ",", "support_y", ")", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "support_h", ",", "support_y", ")", ")", "\n", "self", ".", "model_state", "=", "BayesianMAMLModelState", "(", "X", "=", "support_h", ",", "y", "=", "support_y", ")", "\n", "self", ".", "svgd_state", "=", "self", ".", "svgd_update", "(", "self", ".", "model_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_eval": [[167, 189], ["bmaml.BayesianMAML.backbone.forward", "bmaml.BayesianMAML.theta_forward", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "bmaml.BayesianMAML.strategy.apply_outer_loss", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "numpy.log", "pred_y.detach().cpu().numpy", "targets_y.detach().cpu().numpy", "bmaml.BayesianMAML.detach().cpu().numpy", "torch.log_softmax.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pred_y.detach().cpu", "targets_y.detach().cpu", "bmaml.BayesianMAML.detach().cpu", "pred_y.detach", "targets_y.detach", "bmaml.BayesianMAML.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.theta_forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "net_eval", "(", "self", ",", "target_set", ",", "ptracker", ")", ":", "\n", "        ", "if", "len", "(", "target_set", "[", "0", "]", ")", "==", "0", ":", "return", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "targets_h", "=", "self", ".", "backbone", ".", "forward", "(", "targets_x", ")", "\n", "\n", "# theta forward", "\n", "logits", "=", "self", ".", "theta_forward", "(", "self", ".", "svgd_state", ".", "theta", ",", "targets_h", ")", "\n", "\n", "# predict", "\n", "log_proba", "=", "F", ".", "log_softmax", "(", "logits", ",", "-", "1", ")", "\n", "scores", "=", "(", "torch", ".", "logsumexp", "(", "log_proba", ",", "0", ")", "-", "np", ".", "log", "(", "log_proba", ".", "size", "(", "0", ")", ")", ")", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "targets_y", ")", "\n", "\n", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.svgd_update": [[190, 195], ["BayesianMAMLSVGDState", "range", "bmaml.BayesianMAML.next_svgd_state"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.next_svgd_state"], ["", "def", "svgd_update", "(", "self", ",", "model_state", ")", ":", "\n", "        ", "svgd_state", "=", "BayesianMAMLSVGDState", "(", "self", ".", "theta", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_inner_loop_steps", ")", ":", "\n", "            ", "svgd_state", "=", "self", ".", "next_svgd_state", "(", "model_state", ",", "svgd_state", ",", "self", ".", "inner_loop_lr", ")", "\n", "", "return", "svgd_state", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.next_svgd_state": [[196, 216], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "bmaml.get_kernel", "BayesianMAMLSVGDState", "torch.stack.append", "torch.stack.append", "torch.stack.append", "bmaml.BayesianMAML.theta_forward", "bmaml.BayesianMAML.strategy.apply_inner_loss", "bmaml.BayesianMAML.theta_log_prior", "particle.unsqueeze", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "kernel_matrix.matmul"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.get_kernel", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.theta_forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_inner_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml_chaser.BayesianMAMLChaser.theta_log_prior"], ["", "def", "next_svgd_state", "(", "self", ",", "model_state", ",", "svgd_state", ",", "inner_lr", ")", ":", "\n", "        ", "grads", "=", "[", "]", "\n", "\n", "for", "particle_ind", "in", "range", "(", "self", ".", "num_draws", ")", ":", "\n", "            ", "particle", "=", "svgd_state", ".", "theta", "[", "particle_ind", "]", "\n", "logits", "=", "self", ".", "theta_forward", "(", "particle", ".", "unsqueeze", "(", "0", ")", ",", "model_state", ".", "X", ")", "[", "0", "]", "\n", "\n", "loss", "=", "self", ".", "strategy", ".", "apply_inner_loss", "(", "self", ".", "loss_fn", ",", "\n", "logits", ",", "model_state", ".", "y", "\n", ")", "-", "self", ".", "theta_log_prior", "(", "particle", ")", "\n", "\n", "grads", ".", "append", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "loss", ",", "inputs", "=", "particle", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "grads", "=", "torch", ".", "stack", "(", "grads", ")", "\n", "kernel_matrix", ",", "grad_kernel", ",", "_", "=", "get_kernel", "(", "particle_tensor", "=", "svgd_state", ".", "theta", ")", "\n", "\n", "return", "BayesianMAMLSVGDState", "(", "\n", "svgd_state", ".", "theta", "-", "inner_lr", "*", "(", "kernel_matrix", ".", "matmul", "(", "grads", ")", "-", "grad_kernel", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.theta_forward": [[218, 222], ["theta[].view", "X.matmul", "b.unsqueeze"], "methods", ["None"], ["", "def", "theta_forward", "(", "self", ",", "theta", ",", "X", ")", ":", "\n", "        ", "W", "=", "theta", "[", ":", ",", ":", "-", "(", "self", ".", "n_way", "+", "1", ")", "]", ".", "view", "(", "-", "1", ",", "self", ".", "backbone", ".", "final_feat_dim", ",", "self", ".", "n_way", ")", "\n", "b", "=", "theta", "[", ":", ",", "-", "(", "self", ".", "n_way", "+", "1", ")", ":", "-", "1", "]", "\n", "return", "X", ".", "matmul", "(", "W", ")", "+", "b", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.theta_log_prior": [[223, 235], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Gamma", "torch.distributions.Gamma", "torch.distributions.Gamma", "torch.distributions.Gamma", "torch.distributions.Gamma", "torch.distributions.Gamma", "torch.distributions.Gamma", "torch.distributions.Gamma", "torch.distributions.Gamma", "torch.distributions.Normal.log_prob().sum", "torch.distributions.Normal.log_prob().sum", "torch.distributions.Normal.log_prob().sum", "torch.distributions.Gamma.log_prob().to", "torch.distributions.Gamma.log_prob().to", "torch.distributions.Gamma.log_prob().to", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob", "torch.distributions.Gamma.log_prob", "torch.distributions.Gamma.log_prob", "torch.distributions.Gamma.log_prob"], "methods", ["None"], ["", "def", "theta_log_prior", "(", "self", ",", "theta_flat", ")", ":", "\n", "        ", "log_\u03bb", "=", "theta_flat", "[", "-", "1", "]", "\n", "\n", "\u03bb", "=", "torch", ".", "exp", "(", "log_\u03bb", ")", "\n", "\u03bb_inv", "=", "torch", ".", "exp", "(", "-", "log_\u03bb", ")", "\n", "\n", "w_prior", "=", "torch", ".", "distributions", ".", "Normal", "(", "0.0", ",", "\u03bb_inv", ")", "\n", "\n", "\u03bb_prior", "=", "torch", ".", "distributions", ".", "Gamma", "(", "1.0", ",", "0.1", ")", "\n", "\n", "return", "w_prior", ".", "log_prob", "(", "theta_flat", "[", ":", "-", "1", "]", ")", ".", "sum", "(", ")", "+", "\u03bb_prior", ".", "log_prob", "(", "\u03bb", ")", ".", "to", "(", "\n", "theta_flat", ".", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.get_kernel": [[13, 34], ["particle_tensor.size", "bmaml.get_pairwise_distance_matrix", "torch.median", "torch.median", "torch.median", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "numpy.log", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.get_pairwise_distance_matrix"], ["def", "get_kernel", "(", "particle_tensor", ")", ":", "\n", "    ", "\"\"\"\n    Compute the RBF kernel for the input particles\n    Input: particles = tensor of shape (N, M)\n    Output: kernel_matrix = tensor of shape (N, N)\n    \"\"\"", "\n", "num_particles", "=", "particle_tensor", ".", "size", "(", "0", ")", "\n", "\n", "pairwise_d_matrix", "=", "get_pairwise_distance_matrix", "(", "particle_tensor", ")", "\n", "\n", "median_dist", "=", "torch", ".", "median", "(", "\n", "pairwise_d_matrix", "\n", ")", "# tf.reduce_mean(euclidean_dists) ** 2", "\n", "h", "=", "median_dist", "/", "np", ".", "log", "(", "num_particles", ")", "\n", "\n", "kernel_matrix", "=", "torch", ".", "exp", "(", "-", "pairwise_d_matrix", "/", "h", ")", "\n", "kernel_sum", "=", "torch", ".", "sum", "(", "input", "=", "kernel_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "grad_kernel", "=", "-", "torch", ".", "matmul", "(", "kernel_matrix", ",", "particle_tensor", ")", "\n", "grad_kernel", "+=", "particle_tensor", "*", "kernel_sum", "\n", "grad_kernel", "/=", "h", "\n", "return", "kernel_matrix", ",", "grad_kernel", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.get_pairwise_distance_matrix": [[36, 60], ["torch.nn.functional.pdist", "torch.nn.functional.pdist", "torch.nn.functional.pdist", "torch.zeros", "torch.zeros", "torch.zeros", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "torch.transpose", "torch.transpose", "torch.transpose"], "function", ["None"], ["", "def", "get_pairwise_distance_matrix", "(", "particle_tensor", ")", ":", "\n", "    ", "\"\"\"\n    Input: tensors of particles\n    Output: matrix of pairwise distances\n    \"\"\"", "\n", "num_particles", "=", "particle_tensor", ".", "shape", "[", "0", "]", "\n", "euclidean_dists", "=", "torch", ".", "nn", ".", "functional", ".", "pdist", "(", "\n", "input", "=", "particle_tensor", ",", "p", "=", "2", "\n", ")", "# shape of (N)", "\n", "\n", "# initialize matrix of pairwise distances as a N x N matrix", "\n", "pairwise_d_matrix", "=", "torch", ".", "zeros", "(", "\n", "(", "num_particles", ",", "num_particles", ")", ",", "device", "=", "particle_tensor", ".", "device", "\n", ")", "\n", "\n", "# assign upper-triangle part", "\n", "triu_indices", "=", "torch", ".", "triu_indices", "(", "row", "=", "num_particles", ",", "col", "=", "num_particles", ",", "offset", "=", "1", ")", "\n", "pairwise_d_matrix", "[", "triu_indices", "[", "0", "]", ",", "triu_indices", "[", "1", "]", "]", "=", "euclidean_dists", "\n", "\n", "# assign lower-triangle part", "\n", "pairwise_d_matrix", "=", "torch", ".", "transpose", "(", "pairwise_d_matrix", ",", "dim0", "=", "0", ",", "dim1", "=", "1", ")", "\n", "pairwise_d_matrix", "[", "triu_indices", "[", "0", "]", ",", "triu_indices", "[", "1", "]", "]", "=", "euclidean_dists", "\n", "\n", "return", "pairwise_d_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.init_theta": [[62, 78], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "ret.append", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.empty.view", "torch.empty.view", "torch.empty.view"], "function", ["None"], ["", "def", "init_theta", "(", "D", ",", "n_way", ",", "num_particles", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "num_particles", ")", ":", "\n", "        ", "w", "=", "torch", ".", "empty", "(", "D", ",", "n_way", ")", "\n", "b", "=", "torch", ".", "empty", "(", "n_way", ")", "\n", "log_\u03bb", "=", "torch", ".", "empty", "(", "1", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "w", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "b", ")", "\n", "torch", ".", "nn", ".", "init", ".", "ones_", "(", "log_\u03bb", ")", "\n", "\n", "ret", ".", "append", "(", "\n", "torch", ".", "cat", "(", "[", "w", ".", "view", "(", "-", "1", ")", ",", "b", ".", "view", "(", "-", "1", ")", ",", "log_\u03bb", ".", "view", "(", "-", "1", ")", "]", ",", "0", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", ")", "\n", "", "return", "torch", ".", "cat", "(", "ret", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml_chaser.BayesianMAMLChaser.get_parser": [[12, 21], ["models.bmaml.BayesianMAML.get_parser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser"], ["    ", "@", "staticmethod", "\n", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        returns a parser for the given model. Can also return a subparser\n        \"\"\"", "\n", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", "=", "BayesianMAML", ".", "get_parser", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--leader_inner_loop_lr'", ",", "type", "=", "float", ",", "default", "=", "0.005", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml_chaser.BayesianMAMLChaser.__init__": [[22, 25], ["models.bmaml.BayesianMAML.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "backbone", ",", "strategy", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", "BayesianMAMLChaser", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "strategy", ",", "args", ",", "device", ")", "\n", "self", ".", "leader_inner_lr", "=", "args", ".", "leader_inner_loop_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml_chaser.BayesianMAMLChaser.theta_log_prior": [[26, 30], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal.log_prob().sum().to", "torch.distributions.Normal.log_prob().sum().to", "torch.distributions.Normal.log_prob().sum().to", "torch.distributions.Normal.log_prob().sum", "torch.distributions.Normal.log_prob().sum", "torch.distributions.Normal.log_prob().sum", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob"], "methods", ["None"], ["", "def", "theta_log_prior", "(", "self", ",", "theta_flat", ")", ":", "\n", "        ", "\u03bb_inv", "=", "1.0", "\n", "w_prior", "=", "torch", ".", "distributions", ".", "Normal", "(", "0.0", ",", "\u03bb_inv", ")", "\n", "return", "w_prior", ".", "log_prob", "(", "theta_flat", "[", ":", "-", "1", "]", ")", ".", "sum", "(", ")", ".", "to", "(", "theta_flat", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml_chaser.BayesianMAMLChaser.meta_train": [[31, 105], ["bmaml_chaser.BayesianMAMLChaser.train", "bmaml_chaser.BayesianMAMLChaser.net_reset", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "bmaml_chaser.BayesianMAMLChaser.batch_losses.append", "bmaml_chaser.BayesianMAMLChaser.strategy.update_support_set", "len", "bmaml_chaser.BayesianMAMLChaser.backbone.forward", "bmaml_chaser.BayesianMAMLChaser.strategy.update_support_features", "models.bmaml.BayesianMAMLModelState", "bmaml_chaser.BayesianMAMLChaser.svgd_update", "models.bmaml.BayesianMAMLModelState", "models.bmaml.BayesianMAMLSVGDState", "range", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "total_losses.append", "bmaml_chaser.BayesianMAMLChaser.optimizer.zero_grad", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum.backward", "torch.stack().sum.backward", "torch.stack().sum.backward", "bmaml_chaser.BayesianMAMLChaser.optimizer.step", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bmaml_chaser.BayesianMAMLChaser.next_svgd_state", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bmaml_chaser.BayesianMAMLChaser.theta_forward", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "bmaml_chaser.BayesianMAMLChaser.strategy.apply_outer_loss", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ptracker.add_task_performance", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "numpy.log", "pred_y.detach().cpu().numpy", "targets_y.detach().cpu().numpy", "bmaml_chaser.BayesianMAMLChaser.detach().cpu().numpy", "bmaml_chaser.BayesianMAMLChaser.theta.detach", "torch.log_softmax.size", "pred_y.detach().cpu", "targets_y.detach().cpu", "bmaml_chaser.BayesianMAMLChaser.detach().cpu", "pred_y.detach", "targets_y.detach", "bmaml_chaser.BayesianMAMLChaser.detach"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.net_reset", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.svgd_update", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.next_svgd_state", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.models.bmaml.BayesianMAML.theta_forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.utils.ptracker.PerformanceTracker.add_task_performance"], ["", "def", "meta_train", "(", "self", ",", "task", ",", "ptracker", ")", ":", "# single iter of meta training (outer) loop ", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "train", "(", ")", "\n", "self", ".", "net_reset", "(", ")", "\n", "self", ".", "batch_count", "+=", "1", "\n", "\n", "total_losses", "=", "[", "]", "\n", "for", "support_set", ",", "target_set", "in", "task", ":", "\n", "            ", "support_set", "=", "self", ".", "strategy", ".", "update_support_set", "(", "support_set", ")", "\n", "support_x", ",", "support_y", "=", "support_set", "\n", "targets_x", ",", "targets_y", "=", "target_set", "\n", "support_n", "=", "len", "(", "support_y", ")", "\n", "\n", "# Combine target and support set", "\n", "if", "len", "(", "targets_x", ")", ">", "0", ":", "\n", "                ", "all_x", "=", "torch", ".", "cat", "(", "(", "support_x", ",", "targets_x", ")", ",", "dim", "=", "0", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "(", "support_y", ",", "targets_y", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "all_x", "=", "support_x", "\n", "all_y", "=", "support_y", "\n", "\n", "", "all_h", "=", "self", ".", "backbone", ".", "forward", "(", "all_x", ")", "\n", "all_h", ",", "all_y", "=", "self", ".", "strategy", ".", "update_support_features", "(", "(", "all_h", ",", "all_y", ")", ")", "\n", "support_h", "=", "all_h", "[", ":", "support_n", "]", "\n", "\n", "# chaser", "\n", "model_state", "=", "BayesianMAMLModelState", "(", "X", "=", "support_h", ",", "y", "=", "support_y", ")", "\n", "chaser_svgd_state", "=", "self", ".", "svgd_update", "(", "model_state", ")", "\n", "\n", "# leader", "\n", "merged_model_state", "=", "BayesianMAMLModelState", "(", "X", "=", "all_h", ",", "y", "=", "all_y", ")", "\n", "leader_svgd_state", "=", "BayesianMAMLSVGDState", "(", "chaser_svgd_state", ".", "theta", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_inner_loop_steps", ")", ":", "\n", "                ", "leader_svgd_state", "=", "self", ".", "next_svgd_state", "(", "\n", "merged_model_state", ",", "leader_svgd_state", ",", "self", ".", "leader_inner_lr", "\n", ")", "\n", "\n", "", "loss", "=", "torch", ".", "pow", "(", "\n", "chaser_svgd_state", ".", "theta", "-", "leader_svgd_state", ".", "theta", ".", "detach", "(", ")", ",", "2", "\n", ")", ".", "sum", "(", ")", "\n", "\n", "total_losses", ".", "append", "(", "loss", ")", "\n", "\n", "if", "len", "(", "targets_x", ")", "!=", "0", ":", "\n", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "targets_h", "=", "all_h", "[", "support_n", ":", "]", "\n", "\n", "# theta forward", "\n", "logits", "=", "self", ".", "theta_forward", "(", "chaser_svgd_state", ".", "theta", ",", "targets_h", ")", "\n", "\n", "# predict", "\n", "log_proba", "=", "F", ".", "log_softmax", "(", "logits", ",", "-", "1", ")", "\n", "scores", "=", "(", "torch", ".", "logsumexp", "(", "log_proba", ",", "0", ")", "-", "np", ".", "log", "(", "log_proba", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "target_loss", "=", "self", ".", "strategy", ".", "apply_outer_loss", "(", "self", ".", "loss_fn", ",", "scores", ",", "targets_y", ")", "\n", "\n", "_", ",", "pred_y", "=", "torch", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n", "ptracker", ".", "add_task_performance", "(", "\n", "pred_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "targets_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "target_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "loss", "=", "torch", ".", "stack", "(", "total_losses", ")", ".", "sum", "(", "0", ")", "\n", "self", ".", "batch_losses", ".", "append", "(", "loss", ")", "\n", "\n", "if", "self", ".", "batch_count", "%", "self", ".", "batch_size", "==", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "self", ".", "batch_losses", ")", ".", "sum", "(", "0", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "batch_losses", "=", "[", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.weighted_loss.WeightedLoss.get_parser": [[11, 14], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.weighted_loss.WeightedLoss.__init__": [[15, 18], ["strategies.strategy_template.StrategyTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ",", "device", ",", "seed", ")", ":", "\n", "        ", "super", "(", "WeightedLoss", ",", "self", ")", ".", "__init__", "(", "args", ",", "device", ",", "seed", ")", "\n", "self", ".", "inv_clas_freq", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.weighted_loss.WeightedLoss.update_support_set": [[19, 25], ["super().update_support_set", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "counts.float().to", "counts.float"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set"], ["", "def", "update_support_set", "(", "self", ",", "support", ")", ":", "\n", "        ", "support", "=", "super", "(", "WeightedLoss", ",", "self", ")", ".", "update_support_set", "(", "support", ")", "\n", "x", ",", "y", "=", "support", "\n", "uniq", ",", "counts", "=", "torch", ".", "unique", "(", "y", ",", "return_counts", "=", "True", ")", "\n", "self", ".", "inv_clas_freq", "=", "1", "/", "counts", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "support", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.weighted_loss.WeightedLoss.apply_inner_loss": [[26, 29], ["weighted_loss_fn", "type"], "methods", ["None"], ["", "def", "apply_inner_loss", "(", "self", ",", "loss_fn", ",", "*", "args", ")", ":", "\n", "        ", "weighted_loss_fn", "=", "type", "(", "loss_fn", ")", "(", "weight", "=", "self", ".", "inv_clas_freq", ")", "\n", "return", "weighted_loss_fn", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.weighted_loss.WeightedLoss.apply_outer_loss": [[30, 33], ["weighted_loss_fn", "type"], "methods", ["None"], ["", "def", "apply_outer_loss", "(", "self", ",", "loss_fn", ",", "*", "args", ")", ":", "\n", "        ", "weighted_loss_fn", "=", "type", "(", "loss_fn", ")", "(", "weight", "=", "self", ".", "inv_clas_freq", ")", "\n", "return", "weighted_loss_fn", "(", "*", "args", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.get_parser": [[6, 12], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parser for arguments\n        \"\"\"", "\n", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.__init__": [[13, 18], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "args", ",", "device", ",", "seed", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "support_memory", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.reset": [[19, 21], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "support_memory", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_set": [[22, 38], ["torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "update_support_set", "(", "self", ",", "support_set", ")", ":", "\n", "        ", "\"\"\"\n        Can be used by eg. ROS, RUS\n        This rather questionable design was also designed to be compatible with Continual Few-Shot Learning\n        \"\"\"", "\n", "if", "self", ".", "support_memory", "is", "None", ":", "\n", "            ", "self", ".", "support_memory", "=", "support_set", "\n", "\n", "", "else", ":", "\n", "            ", "new_support_x", ",", "new_support_y", "=", "support_set", "\n", "support_x", ",", "support_y", "=", "self", ".", "support_memory", "\n", "support_x", "=", "torch", ".", "cat", "(", "(", "support_x", ",", "new_support_x", ")", ",", "0", ")", "\n", "support_y", "=", "torch", ".", "cat", "(", "(", "support_y", ",", "new_support_y", ")", ",", "0", ")", "\n", "self", ".", "support_memory", "=", "support_x", ",", "support_y", "\n", "\n", "", "return", "self", ".", "support_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.update_support_features": [[39, 45], ["None"], "methods", ["None"], ["", "def", "update_support_features", "(", "self", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        Can be used by eg. SMOTE\n        \"\"\"", "\n", "z", ",", "y", "=", "features", "\n", "return", "z", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.apply_inner_loss": [[46, 51], ["loss_fn"], "methods", ["None"], ["", "def", "apply_inner_loss", "(", "self", ",", "loss_fn", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        Apply model's inner loop loss by default\n        \"\"\"", "\n", "return", "loss_fn", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.strategy_template.StrategyTemplate.apply_outer_loss": [[52, 57], ["loss_fn"], "methods", ["None"], ["", "def", "apply_outer_loss", "(", "self", ",", "loss_fn", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        Apply model's outer loop loss by default\n        \"\"\"", "\n", "return", "loss_fn", "(", "*", "args", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.cb_loss.CBLoss.get_parser": [[11, 16], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "2", ",", "\n", "help", "=", "'Class balance loss constant between [0,1)'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.cb_loss.CBLoss.__init__": [[17, 21], ["strategies.strategy_template.StrategyTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ",", "device", ",", "seed", ")", ":", "\n", "        ", "super", "(", "CBLoss", ",", "self", ")", ".", "__init__", "(", "args", ",", "device", ",", "seed", ")", "\n", "self", ".", "inv_clas_freq", "=", "[", "]", "\n", "self", ".", "beta", "=", "args", ".", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.cb_loss.CBLoss.update_support_set": [[22, 30], ["super().update_support_set", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "counts.float().to", "counts.float"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set"], ["", "def", "update_support_set", "(", "self", ",", "support", ")", ":", "\n", "        ", "support", "=", "super", "(", "CBLoss", ",", "self", ")", ".", "update_support_set", "(", "support", ")", "\n", "x", ",", "y", "=", "support", "\n", "uniq", ",", "counts", "=", "torch", ".", "unique", "(", "y", ",", "return_counts", "=", "True", ")", "\n", "n", "=", "counts", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "b", "=", "self", ".", "beta", "\n", "self", ".", "weights", "=", "(", "1", "-", "b", ")", "/", "(", "1", "-", "b", "**", "n", ")", "\n", "return", "support", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.cb_loss.CBLoss.apply_inner_loss": [[31, 34], ["weighted_loss_fn", "type"], "methods", ["None"], ["", "def", "apply_inner_loss", "(", "self", ",", "loss_fn", ",", "*", "args", ")", ":", "\n", "        ", "weighted_loss_fn", "=", "type", "(", "loss_fn", ")", "(", "weight", "=", "self", ".", "weights", ")", "\n", "return", "weighted_loss_fn", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.cb_loss.CBLoss.apply_outer_loss": [[35, 38], ["weighted_loss_fn", "type"], "methods", ["None"], ["", "def", "apply_outer_loss", "(", "self", ",", "loss_fn", ",", "*", "args", ")", ":", "\n", "        ", "weighted_loss_fn", "=", "type", "(", "loss_fn", ")", "(", "weight", "=", "self", ".", "weights", ")", "\n", "return", "weighted_loss_fn", "(", "*", "args", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.ROS_AUG.get_parser": [[11, 16], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--mono'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true apply monochromatic augmentation otherwise apply color augmentation'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.ROS_AUG.__init__": [[17, 21], ["strategies.strategy_template.StrategyTemplate.__init__", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ",", "device", ",", "seed", ")", ":", "\n", "        ", "super", "(", "ROS_AUG", ",", "self", ")", ".", "__init__", "(", "args", ",", "device", ",", "seed", ")", "\n", "self", ".", "mono", "=", "args", ".", "mono", "\n", "self", ".", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.ROS_AUG.update_support_set": [[22, 32], ["super().update_support_set", "ros_aug.ROS_AUG.oversample", "ros_aug.mono_transform", "ros_aug.color_transform"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros.ROS.oversample", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.mono_transform", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.color_transform"], ["", "def", "update_support_set", "(", "self", ",", "support", ")", ":", "\n", "        ", "super", "(", "ROS_AUG", ",", "self", ")", ".", "update_support_set", "(", "support", ")", "\n", "\n", "if", "self", ".", "mono", ":", "\n", "            ", "augment", "=", "mono_transform", "(", "augment", "=", "True", ",", "normalise", "=", "True", ",", "toPIL", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "augment", "=", "color_transform", "(", "augment", "=", "True", ",", "normalise", "=", "True", ",", "toPIL", "=", "True", ")", "\n", "\n", "", "x", ",", "y", "=", "self", ".", "oversample", "(", "support", ",", "augment", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.ROS_AUG.oversample": [[33, 64], ["x.cpu", "torch.unique", "count.max().cpu().numpy", "enumerate", "torch.stack().to", "torch.stack", "torch.cat", "torch.cat", "[].cpu().numpy", "ros_aug.ROS_AUG.rnd.choice", "len", "count.max().cpu", "len", "torch.stack().to.append", "torch.stack.append", "torch.stack", "[].cpu", "augment", "count.max", "x_cpu[].clone", "torch.where"], "methods", ["None"], ["", "def", "oversample", "(", "self", ",", "supports", ",", "augment", ")", ":", "\n", "        ", "x", ",", "y", "=", "supports", "\n", "device", "=", "x", ".", "device", "\n", "\n", "x_cpu", "=", "x", ".", "cpu", "(", ")", "\n", "uniq", ",", "count", "=", "torch", ".", "unique", "(", "y", ",", "return_counts", "=", "True", ")", "\n", "max_count", "=", "count", ".", "max", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "new_idx", "=", "[", "]", "\n", "\n", "resampled_x", "=", "[", "]", "\n", "resampled_y", "=", "[", "]", "\n", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "uniq", ")", ":", "\n", "            ", "clss_idx", "=", "torch", ".", "where", "(", "y", "==", "cls", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n_resampled", "=", "max_count", "-", "len", "(", "clss_idx", ")", "\n", "resampled_idx", "=", "self", ".", "rnd", ".", "choice", "(", "clss_idx", ",", "n_resampled", ")", "\n", "\n", "for", "idx", "in", "resampled_idx", ":", "\n", "                ", "resampled_x", ".", "append", "(", "augment", "(", "x_cpu", "[", "idx", "]", ".", "clone", "(", ")", ")", ")", "\n", "resampled_y", ".", "append", "(", "cls", ")", "\n", "\n", "", "", "if", "len", "(", "resampled_x", ")", "==", "0", ":", "\n", "            ", "return", "x", ",", "y", "\n", "\n", "", "resampled_x", "=", "torch", ".", "stack", "(", "resampled_x", ")", ".", "to", "(", "device", ")", "\n", "resampled_y", "=", "torch", ".", "stack", "(", "resampled_y", ")", "\n", "\n", "new_x", "=", "torch", ".", "cat", "(", "(", "x", ",", "resampled_x", ")", ")", "\n", "new_y", "=", "torch", ".", "cat", "(", "(", "y", ",", "resampled_y", ")", ")", "\n", "\n", "return", "new_x", ",", "new_y", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.color_transform": [[66, 101], ["transform_list.append", "torchvision.transforms.Compose", "transform_list.append", "transform_list.append", "transform_list.extend", "transform_list.extend", "torchvision.transforms.ToTensor", "transform_list.append", "transforms.Compose.", "datasets.dataset_utils.denorm3d", "torchvision.transforms.ToPILImage", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "datasets.dataset_utils.ImageJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "dict", "int", "int"], "function", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.datasets.dataset_utils.denorm3d"], ["", "", "def", "color_transform", "(", "augment", ",", "normalise", ",", "toPIL", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the trasformation function for data augmentation of colour images\n    Add/edit your own augmentation in 'basic_augmentation' variable\n    \"\"\"", "\n", "transform_list", "=", "[", "]", "\n", "image_width", "=", "84", "\n", "image_height", "=", "84", "# hard coded for now, but shouldn't be", "\n", "\n", "if", "normalise", ":", "transform_list", ".", "append", "(", "denorm3d", "(", ")", ")", "\n", "\n", "if", "toPIL", ":", "transform_list", ".", "append", "(", "transforms", ".", "ToPILImage", "(", ")", ")", "\n", "\n", "if", "augment", ":", "\n", "        ", "transform_list", ".", "extend", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "(", "image_width", ",", "image_height", ")", ",", "scale", "=", "(", "0.15", ",", "1.1", ")", ")", ",", "\n", "ImageJitter", "(", "dict", "(", "\n", "Brightness", "=", "(", "0.4", ",", "1.", ")", ",", "\n", "Contrast", "=", "(", "0.4", ",", "1.", ")", ",", "\n", "Color", "=", "(", "0.4", ",", "1.", ")", "\n", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "transform_list", ".", "extend", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "int", "(", "image_height", "*", "1.0", ")", ",", "int", "(", "image_width", "*", "1.0", ")", "]", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "(", "image_height", ",", "image_width", ")", ")", "\n", "]", ")", "\n", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "if", "normalise", ":", "transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "return", "lambda", "image", ":", "transform", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros_aug.mono_transform": [[103, 140], ["transform_list.append", "torchvision.transforms.Compose", "transform_list.extend", "transform_list.extend", "torchvision.transforms.ToTensor", "transform_list.append", "transforms.Compose.", "torchvision.transforms.ToPILImage", "torchvision.transforms.Normalize", "torch.stack", "torchvision.transforms.RandomRotation", "torchvision.transforms.RandomResizedCrop", "MonoImageJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "dict", "int", "int", "torch.squeeze"], "function", ["None"], ["", "def", "mono_transform", "(", "augment", ",", "normalise", ",", "image_width", ",", "image_height", ",", "toPIL", "=", "False", ",", "from3dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the trasformation function for data augmentation of monochrome images\n    Add/edit your own augmentation in 'basic_augmentation' variable\n    \"\"\"", "\n", "transform_list", "=", "[", "]", "\n", "\n", "if", "from3dim", ":", "lambda", "x", ":", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "\n", "if", "toPIL", ":", "transform_list", "=", "[", "transforms", ".", "ToPILImage", "(", "'L'", ")", "]", "\n", "\n", "if", "augment", ":", "\n", "        ", "transform_list", ".", "extend", "(", "[", "\n", "# transforms.Grayscale(num_output_channels=1),", "\n", "transforms", ".", "RandomRotation", "(", "10", ",", "fill", "=", "(", "128", ",", ")", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "(", "image_width", ",", "image_height", ")", ",", "scale", "=", "(", "0.15", ",", "1.1", ")", ")", ",", "\n", "MonoImageJitter", "(", "dict", "(", "\n", "Brightness", "=", "(", "0.25", ",", "1.", ")", ",", "\n", "Contrast", "=", "(", "0.25", ",", "1.", ")", ",", "\n", "Color", "=", "(", "0.25", ",", "1.", ")", "\n", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "transform_list", ".", "extend", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "int", "(", "image_height", "*", "1.0", ")", ",", "int", "(", "image_width", "*", "1.0", ")", "]", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "(", "image_height", ",", "image_width", ")", ")", "\n", "]", ")", "\n", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "if", "normalise", ":", "transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", ")", "\n", "if", "from3dim", ":", "lambda", "x", ":", "torch", ".", "stack", "(", "(", "torch", ".", "squeeze", "(", "x", ",", "1", ")", ",", ")", "*", "3", ",", "axis", "=", "1", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "return", "lambda", "image", ":", "transform", "(", "image", ")", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros.ROS.get_parser": [[8, 11], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros.ROS.__init__": [[12, 15], ["strategies.strategy_template.StrategyTemplate.__init__", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ",", "device", ",", "seed", ")", ":", "\n", "        ", "super", "(", "ROS", ",", "self", ")", ".", "__init__", "(", "args", ",", "device", ",", "seed", ")", "\n", "self", ".", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros.ROS.update_support_set": [[16, 20], ["super().update_support_set", "ros.ROS.oversample"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros.ROS.oversample"], ["", "def", "update_support_set", "(", "self", ",", "support", ")", ":", "\n", "        ", "super", "(", "ROS", ",", "self", ")", ".", "update_support_set", "(", "support", ")", "\n", "x", ",", "y", "=", "self", ".", "oversample", "(", "support", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.ros.ROS.oversample": [[21, 42], ["torch.unique", "count.max().cpu().numpy", "enumerate", "torch.Tensor().long().to", "[].cpu().numpy", "ros.ROS.rnd.choice", "torch.Tensor().long().to.extend", "torch.Tensor().long().to.extend", "len", "count.max().cpu", "torch.Tensor().long", "[].cpu", "len", "count.max", "torch.Tensor", "torch.where"], "methods", ["None"], ["", "def", "oversample", "(", "self", ",", "support", ")", ":", "\n", "        ", "x", ",", "y", "=", "support", "\n", "device", "=", "x", ".", "device", "\n", "\n", "uniq", ",", "count", "=", "torch", ".", "unique", "(", "y", ",", "return_counts", "=", "True", ")", "\n", "max_count", "=", "count", ".", "max", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "new_idx", "=", "[", "]", "\n", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "uniq", ")", ":", "\n", "            ", "clss_idx", "=", "torch", ".", "where", "(", "y", "==", "cls", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "resampled", "=", "self", ".", "rnd", ".", "choice", "(", "clss_idx", ",", "max_count", "-", "len", "(", "clss_idx", ")", ")", "\n", "new_idx", ".", "extend", "(", "clss_idx", ")", "\n", "new_idx", ".", "extend", "(", "resampled", ")", "\n", "\n", "", "if", "len", "(", "new_idx", ")", "==", "0", ":", "\n", "            ", "return", "x", ",", "y", "\n", "\n", "", "new_idx", "=", "torch", ".", "Tensor", "(", "new_idx", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "new_x", "=", "x", "[", "new_idx", "]", "\n", "new_y", "=", "y", "[", "new_idx", "]", "\n", "return", "new_x", ",", "new_y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.get_parser": [[14, 23], ["argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "get_parser", "(", "parser", "=", "None", ")", ":", "\n", "        ", "if", "parser", "is", "None", ":", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'Adjusts the rate at which easy examples are downweighted. At gamma=0, equivalent to CE'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'If False, the weighting factor alpha=1 for all classes, otherwise alpha=<inverse support class freq>'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_average'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true, averages the loss, else sums the loss'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.__init__": [[24, 28], ["strategies.strategy_template.StrategyTemplate.__init__", "focal_loss.FocalLossFunc"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ",", "device", ",", "seed", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", "args", ",", "device", ",", "seed", ")", "\n", "self", ".", "focal_loss", "=", "FocalLossFunc", "(", "args", ",", "device", ")", "\n", "self", ".", "inv_clas_freq", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set": [[29, 35], ["super().update_support_set", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "counts.float().to", "counts.float"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.update_support_set"], ["", "def", "update_support_set", "(", "self", ",", "support", ")", ":", "\n", "        ", "support", "=", "super", "(", "FocalLoss", ",", "self", ")", ".", "update_support_set", "(", "support", ")", "\n", "x", ",", "y", "=", "support", "\n", "uniq", ",", "counts", "=", "torch", ".", "unique", "(", "y", ",", "return_counts", "=", "True", ")", "\n", "self", ".", "inv_clas_freq", "=", "1", "/", "counts", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "support", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_inner_loss": [[36, 41], ["type", "focal_loss.FocalLoss.focal_loss.forward", "Exception", "type"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward"], ["", "def", "apply_inner_loss", "(", "self", ",", "loss_fn", ",", "*", "args", ")", ":", "\n", "        ", "if", "type", "(", "loss_fn", ")", "==", "nn", ".", "CrossEntropyLoss", ":", "\n", "            ", "return", "self", ".", "focal_loss", ".", "forward", "(", "*", "args", ",", "weights", "=", "self", ".", "inv_clas_freq", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Focal Loss not compatible with {}\"", ".", "format", "(", "type", "(", "loss_fn", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLoss.apply_outer_loss": [[42, 47], ["type", "focal_loss.FocalLoss.focal_loss.forward", "Exception", "type"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward"], ["", "", "def", "apply_outer_loss", "(", "self", ",", "loss_fn", ",", "*", "args", ")", ":", "\n", "        ", "if", "type", "(", "loss_fn", ")", "==", "nn", ".", "CrossEntropyLoss", ":", "\n", "            ", "return", "self", ".", "focal_loss", ".", "forward", "(", "*", "args", ",", "weights", "=", "self", ".", "inv_clas_freq", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Focal Loss not compatible with {}\"", ".", "format", "(", "type", "(", "loss_fn", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLossFunc.__init__": [[51, 55], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", "FocalLossFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.strategies.focal_loss.FocalLossFunc.forward": [[56, 85], ["target.view.view.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "logpt.view.view.data.exp", "torch.zeros().type_as.gather", "torch.zeros().type_as.gather", "torch.zeros().type_as.gather", "loss.mean", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.gather", "torch.zeros().type_as.gather", "torch.zeros().type_as.gather", "target.view.view.data.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.contiguous", "count.sum", "target.view.view.data.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "count.type_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weights", "=", "None", ")", ":", "\n", "        ", "gamma", "=", "self", ".", "args", ".", "gamma", "\n", "is_alpha", "=", "self", ".", "args", ".", "alpha", "\n", "size_average", "=", "self", ".", "args", ".", "size_average", "\n", "\n", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "Variable", "(", "logpt", ".", "data", ".", "exp", "(", ")", ")", "#.to(self.device)", "\n", "\n", "if", "is_alpha", ":", "\n", "            ", "if", "weights", "is", "None", ":", "\n", "                ", "uniq", ",", "count", "=", "torch", ".", "unique", "(", "target", ",", "return_counts", "=", "True", ")", "\n", "n", "=", "input", ".", "shape", "[", "1", "]", "\n", "weights", "=", "torch", ".", "zeros", "(", "(", "n", ",", ")", ")", ".", "type_as", "(", "input", ".", "data", ")", "\n", "weights", "[", "uniq", "]", "=", "count", ".", "sum", "(", ")", "/", "(", "n", "*", "count", ".", "type_as", "(", "input", ".", "data", ")", ")", "\n", "at", "=", "weights", ".", "gather", "(", "0", ",", "target", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "logpt", "*", "Variable", "(", "at", ")", "#.to(self.device)", "\n", "", "at", "=", "weights", ".", "gather", "(", "0", ",", "target", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "logpt", "*", "Variable", "(", "at", ")", "#.to(self.device)", "\n", "\n", "", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "gamma", "*", "logpt", "\n", "if", "size_average", ":", "return", "loss", ".", "mean", "(", ")", "\n", "else", ":", "return", "loss", ".", "sum", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.backbone_template.BackboneTemplate.__init__": [[5, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "final_feat_dim", "=", "[", "]", "\n", "self", ".", "layer_channels", "=", "[", "]", "\n", "self", ".", "trunk", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.backbone_template.BackboneTemplate.forward": [[11, 13], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.ConvBlock.__init__": [[14, 37], ["torch.Module.__init__", "torch.ReLU().to", "torch.ReLU().to", "torch.ReLU().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "print", "backbones.layers.Conv2d_fw().to", "backbones.layers.BatchNorm2d_fw().to", "torch.Conv2d().to", "torch.Conv2d().to", "torch.Conv2d().to", "torch.BatchNorm2d().to", "torch.BatchNorm2d().to", "torch.BatchNorm2d().to", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "conv.ConvBlock.parametrized_layers.append", "backbones.layers.init_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbones.layers.Conv2d_fw", "backbones.layers.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "device", ",", "pool", "=", "True", ",", "padding", "=", "1", ",", "maml", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "self", ".", "maml", "=", "maml", "\n", "if", "self", ".", "maml", ":", "print", "(", "\"Maml backbone\"", ")", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "BN", "=", "BatchNorm2d_fw", "(", "outdim", ",", "device", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", ".", "to", "(", "device", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", "]", "\n", "if", "pool", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "pool", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.ConvBlock.forward": [[38, 41], ["conv.ConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.ConvNet.__init__": [[44, 58], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv.ConvBlock", "trunk.append", "trunk.append", "backbones.layers.Flatten"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "device", ",", "flatten", "=", "True", ",", "maml", "=", "False", ",", "outdim", "=", "64", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "depth", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "outdim", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "device", ",", "pool", "=", "(", "i", "<", "4", ")", ",", "maml", "=", "maml", ")", "#only pooling for fist 4 layers", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "5", "*", "5", "*", "outdim", "\n", "self", ".", "layer_channels", "=", "[", "outdim", "]", "*", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.ConvNet.forward": [[59, 62], ["conv.ConvNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.ConvNetNopool.__init__": [[65, 82], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv.ConvBlock", "trunk.append", "trunk.append", "backbones.layers.Flatten().to", "backbones.layers.Flatten"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "device", ",", "flatten", ",", "outdim", ")", ":", "\n", "        ", "super", "(", "ConvNetNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "depth", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "outdim", "\n", "outdim", "=", "outdim", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "device", ",", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", ")", "#only first two layer has pooling and no padding", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "outdim", "*", "19", "*", "19", "]", "\n", "trunk", ".", "append", "(", "Flatten", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "outdim", ",", "19", ",", "19", "]", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.ConvNetNopool.forward": [[83, 86], ["conv.ConvNetNopool.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.Conv4": [[88, 90], ["conv.ConvNet"], "function", ["None"], ["", "", "def", "Conv4", "(", "device", ",", "flatten", "=", "True", ",", "maml", "=", "False", ",", "outdim", "=", "64", ")", ":", "\n", "    ", "return", "ConvNet", "(", "4", ",", "device", ",", "flatten", "=", "flatten", ",", "maml", "=", "maml", ",", "outdim", "=", "outdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.Conv6": [[91, 93], ["conv.ConvNet"], "function", ["None"], ["", "def", "Conv6", "(", "device", ",", "flatten", "=", "True", ",", "maml", "=", "False", ",", "outdim", "=", "64", ")", ":", "\n", "    ", "return", "ConvNet", "(", "6", ",", "device", ",", "flatten", "=", "flatten", ",", "maml", "=", "maml", ",", "outdim", "=", "outdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.Conv4NP": [[94, 96], ["conv.ConvNetNopool"], "function", ["None"], ["", "def", "Conv4NP", "(", "device", ",", "flatten", "=", "False", ",", "maml", "=", "None", ",", "outdim", "=", "64", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "4", ",", "device", ",", "flatten", "=", "flatten", ",", "outdim", "=", "outdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.conv.Conv6NP": [[97, 99], ["conv.ConvNetNopool"], "function", ["None"], ["", "def", "Conv6NP", "(", "device", ",", "flatten", "=", "False", ",", "maml", "=", "None", ",", "outdim", "=", "64", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "6", ",", "device", ",", "flatten", "=", "flatten", ",", "outdim", "=", "outdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.distLinear.__init__": [[22, 33], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm.WeightNorm.apply", "torch.nn.utils.weight_norm.WeightNorm.apply", "torch.nn.utils.weight_norm.WeightNorm.apply"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ")", ":", "\n", "        ", "super", "(", "distLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L", "=", "nn", ".", "Linear", "(", "indim", ",", "outdim", ",", "bias", "=", "False", ")", "\n", "self", ".", "class_wise_learnable_norm", "=", "True", "\n", "if", "self", ".", "class_wise_learnable_norm", ":", "\n", "            ", "WeightNorm", ".", "apply", "(", "self", ".", "L", ",", "'weight'", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "outdim", "<=", "200", ":", "\n", "            ", "self", ".", "scale_factor", "=", "2", ";", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_factor", "=", "10", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.distLinear.forward": [[34, 41], ["torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "x.div", "layers.distLinear.L", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "x_normalized", "=", "x", ".", "div", "(", "x_norm", "+", "0.00001", ")", "\n", "cos_dist", "=", "self", ".", "L", "(", "x_normalized", ")", "\n", "scores", "=", "self", ".", "scale_factor", "*", "(", "cos_dist", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.Flatten.__init__": [[44, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.Flatten.forward": [[47, 49], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.Linear_fw.__init__": [[52, 56], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "Linear_fw", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "# Lazy hack to add fast weight link", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.Linear_fw.forward": [[57, 63], ["torch.linear", "torch.linear", "torch.linear", "super().forward"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ")", "#weight.fast (fast weight) is the temporaily adapted weight", "\n", "", "else", ":", "\n", "            ", "out", "=", "super", "(", "Linear_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.Conv2d_fw.__init__": [[66, 71], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.Conv2d_fw.forward": [[72, 85], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward", "torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "None", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.BatchNorm2d_fw.__init__": [[88, 93], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "device", ")", ":", "\n", "        ", "super", "(", "BatchNorm2d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.BatchNorm2d_fw.forward": [[94, 103], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.data.size", "x.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "running_mean", "=", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "running_var", "=", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "#batch_norm momentum hack: follow hack of Kate Rakelly in pytorch-maml/src/layers.py", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.init_layer": [[10, 19], ["isinstance", "L.weight.data.normal_", "isinstance", "math.sqrt", "L.weight.data.fill_", "L.bias.data.fill_", "float"], "function", ["None"], ["def", "init_layer", "(", "L", ")", ":", "\n", "# Initialization using fan-in", "\n", "    ", "if", "isinstance", "(", "L", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "L", ".", "kernel_size", "[", "0", "]", "*", "L", ".", "kernel_size", "[", "1", "]", "*", "L", ".", "out_channels", "\n", "L", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "n", ")", ")", ")", "\n", "\n", "", "elif", "isinstance", "(", "L", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "L", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "L", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.SimpleBlock.__init__": [[14, 53], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbones.layers.Conv2d_fw", "backbones.layers.BatchNorm2d_fw", "backbones.layers.Conv2d_fw", "backbones.layers.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.SimpleBlock.parametrized_layers.append", "resnet.SimpleBlock.parametrized_layers.append", "backbones.layers.init_layer", "backbones.layers.Conv2d_fw", "backbones.layers.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ",", "device", ",", "maml", "=", "False", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "self", ".", "maml", "=", "maml", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "outdim", ",", "device", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "outdim", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "C2", ",", "self", ".", "BN1", ",", "self", ".", "BN2", "]", "\n", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "BatchNorm2d_fw", "(", "outdim", ",", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "BNshortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.SimpleBlock.forward": [[54, 64], ["resnet.SimpleBlock.C1", "resnet.SimpleBlock.BN1", "resnet.SimpleBlock.relu1", "resnet.SimpleBlock.C2", "resnet.SimpleBlock.BN2", "resnet.SimpleBlock.relu2", "resnet.SimpleBlock.BNshortcut", "resnet.SimpleBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "BNshortcut", "(", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.BottleneckBlock.__init__": [[69, 109], ["torch.Module.__init__", "int", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbones.layers.Conv2d_fw().to", "backbones.layers.BatchNorm2d_fw().to", "backbones.layers.Conv2d_fw().to", "backbones.layers.BatchNorm2d_fw().to", "backbones.layers.Conv2d_fw().to", "backbones.layers.BatchNorm2d_fw().to", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.BottleneckBlock.parametrized_layers.append", "backbones.layers.init_layer", "backbones.layers.Conv2d_fw().to", "torch.Conv2d().to", "torch.Conv2d().to", "torch.Conv2d().to", "backbones.layers.Conv2d_fw", "backbones.layers.BatchNorm2d_fw", "backbones.layers.Conv2d_fw", "backbones.layers.BatchNorm2d_fw", "backbones.layers.Conv2d_fw", "backbones.layers.BatchNorm2d_fw", "backbones.layers.Conv2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ",", "device", ",", "maml", "=", "False", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bottleneckdim", "=", "int", "(", "outdim", "/", "4", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "self", ".", "maml", "=", "maml", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ",", "device", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ",", "device", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "C3", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "BN3", "=", "BatchNorm2d_fw", "(", "outdim", ",", "device", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "BN1", ",", "self", ".", "C2", ",", "self", ".", "BN2", ",", "self", ".", "C3", ",", "self", ".", "BN3", "]", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.BottleneckBlock.forward": [[111, 126], ["resnet.BottleneckBlock.C1", "resnet.BottleneckBlock.BN1", "resnet.BottleneckBlock.relu", "resnet.BottleneckBlock.C2", "resnet.BottleneckBlock.BN2", "resnet.BottleneckBlock.relu", "resnet.BottleneckBlock.C3", "resnet.BottleneckBlock.BN3", "resnet.BottleneckBlock.relu", "resnet.BottleneckBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C3", "(", "out", ")", "\n", "out", "=", "self", ".", "BN3", "(", "out", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__": [[129, 170], ["backbones.backbone_template.BackboneTemplate.__init__", "torch.ReLU().to", "torch.ReLU().to", "torch.ReLU().to", "torch.MaxPool2d().to", "torch.MaxPool2d().to", "torch.MaxPool2d().to", "backbones.layers.init_layer", "backbones.layers.init_layer", "range", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "len", "backbones.layers.Conv2d_fw().to", "backbones.layers.BatchNorm2d_fw().to", "torch.Conv2d().to", "torch.Conv2d().to", "torch.Conv2d().to", "torch.BatchNorm2d().to", "torch.BatchNorm2d().to", "torch.BatchNorm2d().to", "range", "torch.AvgPool2d().to", "torch.AvgPool2d().to", "torch.AvgPool2d().to", "trunk.append", "trunk.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "block().to", "trunk.append", "backbones.layers.Flatten().to", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbones.layers.Conv2d_fw", "backbones.layers.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "block", "backbones.layers.Flatten"], "methods", ["home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.init_layer", "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.layers.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "list_of_num_layers", ",", "list_of_out_dims", ",", "device", ",", "flatten", "=", "True", ",", "maml", "=", "False", ")", ":", "\n", "# list_of_num_layers specifies number of layers in each stage", "\n", "# list_of_out_dims specifies number of output channel for each stage", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maml", "=", "maml", "\n", "self", ".", "num_layers", "=", "4", "\n", "assert", "len", "(", "list_of_num_layers", ")", "==", "4", ",", "'Can have only four stages'", "\n", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "conv1", "=", "Conv2d_fw", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "bn1", "=", "BatchNorm2d_fw", "(", "64", ",", "device", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "relu", "=", "nn", ".", "ReLU", "(", ")", ".", "to", "(", "device", ")", "\n", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "init_layer", "(", "conv1", ")", "\n", "init_layer", "(", "bn1", ")", "\n", "\n", "trunk", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "pool1", "]", "\n", "\n", "indim", "=", "64", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "\n", "            ", "for", "j", "in", "range", "(", "list_of_num_layers", "[", "i", "]", ")", ":", "\n", "                ", "half_res", "=", "(", "i", ">=", "3", ")", "and", "(", "j", "==", "0", ")", "\n", "B", "=", "block", "(", "indim", ",", "list_of_out_dims", "[", "i", "]", ",", "half_res", ",", "device", ",", "maml", "=", "maml", ")", ".", "to", "(", "device", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "indim", "=", "list_of_out_dims", "[", "i", "]", "\n", "\n", "", "", "if", "flatten", ":", "\n", "            ", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", ".", "to", "(", "device", ")", "\n", "trunk", ".", "append", "(", "avgpool", ")", "\n", "trunk", ".", "append", "(", "Flatten", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "self", ".", "final_feat_dim", "=", "indim", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "indim", ",", "7", ",", "7", "]", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet.forward": [[171, 174], ["resnet.ResNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet10": [[176, 178], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet10", "(", "device", ",", "flatten", "=", "True", ",", "maml", "=", "False", ",", "outdim", "=", "None", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "device", ",", "flatten", ",", "maml", "=", "maml", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet18": [[179, 181], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet18", "(", "device", ",", "flatten", "=", "True", ",", "maml", "=", "False", ",", "outdim", "=", "None", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "device", ",", "flatten", ",", "maml", "=", "maml", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet34": [[182, 184], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "device", ",", "flatten", "=", "True", ",", "maml", "=", "False", ",", "outdim", "=", "None", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "device", ",", "flatten", ",", "maml", "=", "maml", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet50": [[185, 187], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "device", ",", "flatten", "=", "True", ",", "maml", "=", "False", ",", "outdim", "=", "None", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "device", ",", "flatten", ",", "maml", "=", "maml", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mattochal_imbalanced_fsl_public.backbones.resnet.ResNet101": [[188, 190], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "device", ",", "flatten", "=", "True", ",", "maml", "=", "False", ",", "outdim", "=", "None", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "device", ",", "flatten", ",", "maml", "=", "maml", ")", "\n", "\n"]]}