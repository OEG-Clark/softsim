{"home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.create_word_embeddings.SequencialIterator.__init__": [[20, 24], ["map", "utils.parse_utils.Preprocessing"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "files", ")", ":", "\n", "        ", "self", ".", "files", "=", "files", "\n", "types", "=", "map", "(", "lambda", "x", ":", "x", "[", "'text_type'", "]", ",", "files", ")", "\n", "self", ".", "preprocessor", "=", "Preprocessing", "(", "types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.create_word_embeddings.SequencialIterator.__iter__": [[25, 40], ["utils.config_utils.open_file", "f[].values", "enumerate", "line.replace().replace().split.replace().replace().split.replace().replace().split", "len", "line.replace().replace().split.replace().replace().split.replace().replace", "create_word_embeddings.SequencialIterator.preprocessor.preprocess_text", "line.replace().replace().split.replace().replace().split.replace"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.open_file", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.Preprocessing.preprocess_text"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "f", "in", "self", ".", "files", ":", "\n", "            ", "max_sentences", "=", "f", "[", "'max_sentences'", "]", "\n", "file", "=", "open_file", "(", "f", "[", "'file_name'", "]", ",", "f", "[", "'file_type'", "]", ")", "\n", "text_type", "=", "f", "[", "'text_type'", "]", "\n", "text_idx", "=", "f", "[", "'tags'", "]", ".", "values", "(", ")", "\n", "max_index", "=", "f", "[", "'max_index'", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "file", ")", ":", "\n", "                ", "if", "i", ">=", "max_sentences", ":", "\n", "                    ", "break", "\n", "", "line", "=", "line", ".", "replace", "(", "'\\r'", ",", "''", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "line", ")", "==", "max_index", "+", "1", ":", "\n", "                    ", "for", "idx", "in", "text_idx", ":", "\n", "                        ", "text", "=", "self", ".", "preprocessor", ".", "preprocess_text", "(", "line", "[", "idx", "]", ",", "text_type", ")", "\n", "yield", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.create_word_embeddings.MixedIterator.__init__": [[43, 47], ["set", "map"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "files", ",", "batch_size", "=", "10000", ")", ":", "\n", "        ", "self", ".", "files", "=", "files", "\n", "self", ".", "types", "=", "set", "(", "map", "(", "lambda", "x", ":", "x", "[", "'text_type'", "]", ",", "files", ")", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.create_word_embeddings.MixedIterator.__iter__": [[48, 60], ["list", "map", "len", "iterator.get_next_batch", "create_word_embeddings.SingleFileBatchIterator", "list.remove"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_mixed_iterator.SingleFileBatchIterator.get_next_batch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "iterators", "=", "list", "(", "map", "(", "lambda", "x", ":", "SingleFileBatchIterator", "(", "x", ",", "self", ".", "types", ",", "self", ".", "batch_size", ")", ",", "self", ".", "files", ")", ")", "\n", "while", "True", ":", "\n", "            ", "if", "len", "(", "iterators", ")", "==", "0", ":", "\n", "                ", "break", "\n", "", "for", "iterator", "in", "iterators", ":", "\n", "                ", "it_batch", "=", "iterator", ".", "get_next_batch", "(", ")", "\n", "if", "not", "it_batch", ":", "\n", "                    ", "iterators", ".", "remove", "(", "iterator", ")", "\n", "continue", "\n", "", "for", "line", "in", "it_batch", ":", "\n", "                    ", "yield", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.create_word_embeddings.SingleFileBatchIterator.__init__": [[63, 71], ["ifname[].values", "utils.config_utils.open_file", "utils.parse_utils.Preprocessing"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.open_file"], ["    ", "def", "__init__", "(", "self", ",", "ifname", ",", "types", ",", "batch_size", "=", "10000", ")", ":", "\n", "        ", "self", ".", "max_sentences", "=", "ifname", "[", "'max_sentences'", "]", "\n", "self", ".", "text_type", "=", "ifname", "[", "'text_type'", "]", "\n", "self", ".", "text_idx", "=", "ifname", "[", "'tags'", "]", ".", "values", "(", ")", "\n", "self", ".", "max_index", "=", "ifname", "[", "'max_index'", "]", "\n", "self", ".", "ifile", "=", "open_file", "(", "ifname", "[", "'file_name'", "]", ",", "ifname", "[", "'file_type'", "]", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "preprocessor", "=", "Preprocessing", "(", "types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.create_word_embeddings.SingleFileBatchIterator.get_next_batch": [[72, 87], ["itertools.islice", "create_word_embeddings.SingleFileBatchIterator.ifile.close", "line.replace().replace().split.replace().replace().split.replace().replace().split", "create_word_embeddings.SingleFileBatchIterator.ifile.close", "create_word_embeddings.SingleFileBatchIterator.preprocessor.preprocess_text", "batch.append", "line.replace().replace().split.replace().replace().split.replace().replace", "line.replace().replace().split.replace().replace().split.replace"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.Preprocessing.preprocess_text"], ["", "def", "get_next_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "max_sentences", "<=", "0", ":", "\n", "            ", "self", ".", "ifile", ".", "close", "(", ")", "\n", "return", "[", "]", "\n", "", "batch", "=", "[", "]", "\n", "for", "line", "in", "islice", "(", "self", ".", "ifile", ",", "self", ".", "batch_size", ")", ":", "\n", "            ", "line", "=", "line", ".", "replace", "(", "'\\r'", ",", "''", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "self", ".", "max_sentences", "<=", "0", ":", "\n", "                ", "self", ".", "ifile", ".", "close", "(", ")", "\n", "return", "batch", "\n", "", "for", "idx", "in", "self", ".", "text_idx", ":", "\n", "                ", "line_preprocessed", "=", "self", ".", "preprocessor", ".", "preprocess_text", "(", "line", "[", "idx", "]", ",", "text_type", "=", "self", ".", "text_type", ")", "\n", "batch", ".", "append", "(", "line_preprocessed", ")", "\n", "", "self", ".", "max_sentences", "-=", "1", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.create_word_embeddings.copy_vocabulary": [[89, 100], ["vocab.items", "max"], "function", ["None"], ["", "", "def", "copy_vocabulary", "(", "vocab", ")", ":", "\n", "    ", "vocabulary", "=", "{", "}", "\n", "max_idx", "=", "0", "\n", "for", "(", "k", ",", "v", ")", "in", "vocab", ".", "items", "(", ")", ":", "\n", "        ", "vocabulary", "[", "k", "]", "=", "(", "v", ".", "index", ",", "v", ".", "count", ")", "\n", "max_idx", "=", "max", "(", "[", "v", ".", "index", ",", "max_idx", "]", ")", "\n", "\n", "#add an unknown word placeholder and dummyword (used for padding)", "\n", "", "vocabulary", "[", "'UNK'", "]", "=", "(", "max_idx", "+", "1", ",", "1", ")", "\n", "vocabulary", "[", "'DUMMY_WORD'", "]", "=", "(", "max_idx", "+", "2", ",", "1", ")", "\n", "return", "vocabulary", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.create_word_embeddings.main": [[102, 182], ["logging.basicConfig", "getopt.getopt", "open", "json.load", "utils.config_utils.get_list_of_files", "range", "gensim.models.Word2Vec", "os.path.join", "gensim.models.Word2Vec.save_word2vec_format", "create_word_embeddings.copy_vocabulary", "numpy.zeros", "copy_vocabulary.items", "os.path.join", "numpy.save", "_pickle.dump", "json.dump", "enumerate", "print", "sys.exit", "os.path.join", "create_word_embeddings.MixedIterator", "create_word_embeddings.SequencialIterator", "gensim.models.Phrases", "ngram_processors.append", "os.path.exists", "os.mkdir", "os.path.join", "open", "open", "ngram_processor.save", "gensim.models.Word2Vec.vocab.keys", "numpy.random.uniform", "os.path.join", "os.path.join", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.get_list_of_files", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.create_word_embeddings.copy_vocabulary"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s : %(levelname)s : %(message)s'", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "args", ",", "\"c:\"", ",", "[", "\"config=\"", "]", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "print", "(", "'usage: -c my_config.json'", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "in", "(", "\"-c\"", ",", "\"--config\"", ")", ":", "\n", "            ", "config_fname", "=", "os", ".", "path", ".", "join", "(", "'configurations'", ",", "arg", ")", "\n", "\n", "", "", "with", "open", "(", "config_fname", ",", "'r'", ")", "as", "json_data", ":", "\n", "        ", "config_data", "=", "json", ".", "load", "(", "json_data", ")", "\n", "word2vec_params", "=", "config_data", "[", "'word2vec_parameter'", "]", "\n", "max_vocab_size", "=", "word2vec_params", "[", "'max_vocab_size'", "]", "\n", "files", "=", "get_list_of_files", "(", "config_data", "[", "'input_directories'", "]", ")", "\n", "if", "config_data", "[", "'sequence'", "]", "==", "'mixed'", ":", "\n", "            ", "sentences", "=", "MixedIterator", "(", "files", ",", "batch_size", "=", "1000", ")", "\n", "", "else", ":", "\n", "            ", "sentences", "=", "SequencialIterator", "(", "files", ")", "\n", "\n", "#prepare all the word2phrase transformers, first unigram to bigram, then bigram to 3-gram,..", "\n", "", "ngram_processors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config_data", "[", "'ngrams'", "]", "-", "1", ")", ":", "\n", "            ", "transformed_sentences", "=", "sentences", "\n", "for", "ngram_processor", "in", "ngram_processors", ":", "\n", "                ", "transformed_sentences", "=", "ngram_processor", "[", "transformed_sentences", "]", "\n", "\n", "", "bigram_trainsformer", "=", "Phrases", "(", "transformed_sentences", ",", "min_count", "=", "word2vec_params", "[", "'min_count'", "]", ",", "max_vocab_size", "=", "max_vocab_size", ")", "\n", "ngram_processors", ".", "append", "(", "bigram_trainsformer", ")", "\n", "\n", "", "transformed_sentences", "=", "sentences", "\n", "for", "ngram_processor", "in", "ngram_processors", ":", "\n", "            ", "transformed_sentences", "=", "ngram_processor", "[", "transformed_sentences", "]", "\n", "\n", "#train word embeddings", "\n", "\n", "", "model", "=", "Word2Vec", "(", "\n", "transformed_sentences", ",", "\n", "size", "=", "word2vec_params", "[", "'size'", "]", ",", "\n", "window", "=", "word2vec_params", "[", "'window'", "]", ",", "\n", "min_count", "=", "word2vec_params", "[", "'min_count'", "]", ",", "\n", "workers", "=", "word2vec_params", "[", "'workers'", "]", ",", "\n", "sg", "=", "word2vec_params", "[", "'sg'", "]", ",", "\n", "sample", "=", "word2vec_params", "[", "'sample'", "]", ",", "\n", "hs", "=", "word2vec_params", "[", "'hs'", "]", ",", "\n", "iter", "=", "word2vec_params", "[", "'iter'", "]", ",", "\n", "negative", "=", "word2vec_params", "[", "'negative'", "]", ",", "\n", "max_vocab_size", "=", "max_vocab_size", "\n", ")", "\n", "\n", "#save all the data", "\n", "output_basename", "=", "config_data", "[", "'output_basename'", "]", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "config_data", "[", "'output_directory'", "]", ",", "output_basename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "model", ".", "save_word2vec_format", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'embedding_file'", ")", ",", "binary", "=", "False", ")", "\n", "vocabulary", "=", "copy_vocabulary", "(", "model", ".", "vocab", ")", "\n", "\n", "#create numpy embedding matrix as input for the EmbeddingLayer in Keras", "\n", "vocab_emb", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocabulary", ")", "+", "1", ",", "word2vec_params", "[", "'size'", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "word", ",", "(", "idx", ",", "freq", ")", "in", "vocabulary", ".", "items", "(", ")", ":", "\n", "            ", "word_vec", "=", "None", "\n", "if", "word", "in", "model", ".", "vocab", ".", "keys", "(", ")", ":", "\n", "                ", "word_vec", "=", "model", "[", "word", "]", "\n", "", "if", "word_vec", "is", "None", ":", "\n", "                ", "word_vec", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "word2vec_params", "[", "'size'", "]", ")", "\n", "", "vocab_emb", "[", "idx", "]", "=", "word_vec", "\n", "\n", "", "outfile", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'embedding_matrix.npy'", ")", "\n", "np", ".", "save", "(", "outfile", ",", "vocab_emb", ")", "\n", "\n", "#save the vocabulary, which is augmented by inserting an unknown word and dummy word", "\n", "cPickle", ".", "dump", "(", "vocabulary", ",", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'vocabulary.pickle'", ")", ",", "'wb'", ")", ")", "\n", "json", ".", "dump", "(", "config_data", ",", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'config.json'", ")", ",", "'wt'", ")", ")", "\n", "\n", "#save word2vec transformers in order of their application", "\n", "for", "i", ",", "ngram_processor", "in", "enumerate", "(", "ngram_processors", ")", ":", "\n", "            ", "ngram_processor", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'{}gram'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.runner.main": [[15, 122], ["logging.basicConfig", "getopt.getopt", "open", "json.load", "numpy.random.seed", "os.path.join", "embeddings_container.EmbeddingContainer", "model_utils.pop_layer.summary", "print", "sys.exit", "os.path.join", "os.path.exists", "os.mkdir", "logging.info", "utils.run_utils.get_iterator", "logging.info", "utils.run_utils.get_iterator", "logging.info", "utils.run_utils.get_iterator", "utils.run_utils.get_model", "model_utils.pop_layer.to_json", "open().write", "keras.models.model_from_json.to_json", "open().write", "os.path.join", "os.path.join", "logging.info", "model_utils.pop_layer.load_weights", "utils.run_utils.get_optimizer", "utils.run_utils.get_evaluation_metric", "model_utils.pop_layer.compile", "utils.fit_utils.fit_model", "os.path.join", "logging.info", "keras.models.model_from_json.load_weights", "os.path.join", "utils.run_utils.get_evaluation", "print", "open().write", "open().read", "keras.models.model_from_json", "open().read", "keras.models.model_from_json", "json.load.get", "utils.model_utils.pop_layer", "os.path.exists", "os.mkdir", "os.path.join", "json.dump", "logging.info", "model_utils.pop_layer.save_weights", "os.path.join", "json.dump", "os.path.exists", "os.mkdir", "open", "open", "open", "open", "open", "os.path.join", "os.path.join", "open", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_iterator", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_iterator", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_iterator", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_model", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_optimizer", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_evaluation_metric", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.fit_utils.fit_model", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_evaluation", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.pop_layer"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s : %(levelname)s : %(message)s'", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "args", ",", "\"c:\"", ",", "[", "\"config=\"", "]", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "print", "(", "'usage: -c my_config.json'", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "in", "(", "\"-c\"", ",", "\"--config\"", ")", ":", "\n", "            ", "config_fname", "=", "os", ".", "path", ".", "join", "(", "'configurations'", ",", "arg", ")", "\n", "\n", "", "", "with", "open", "(", "config_fname", ",", "'r'", ")", "as", "json_data", ":", "\n", "        ", "config_data", "=", "json", ".", "load", "(", "json_data", ")", "\n", "np", ".", "random", ".", "seed", "(", "1337", ")", "\n", "\n", "path", "=", "config_data", "[", "'output_path'", "]", "\n", "basename", "=", "config_data", "[", "'output_basename'", "]", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "basename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "base_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "base_path", ")", "\n", "\n", "", "embeddings", "=", "EmbeddingContainer", "(", "config_data", ")", "\n", "train_iterator", "=", "None", "\n", "valid_iterator", "=", "None", "\n", "test_iterator", "=", "None", "\n", "\n", "if", "config_data", "[", "'input_train_directories'", "]", ":", "\n", "            ", "logging", ".", "info", "(", "'Loading Training Data'", ")", "\n", "train_iterator", "=", "run_utils", ".", "get_iterator", "(", "config_data", ",", "embeddings", ",", "mode", "=", "'train'", ")", "\n", "\n", "", "if", "config_data", "[", "'input_valid_directories'", "]", ":", "\n", "            ", "logging", ".", "info", "(", "'Loading Validation Data'", ")", "\n", "valid_iterator", "=", "run_utils", ".", "get_iterator", "(", "config_data", ",", "embeddings", ",", "mode", "=", "'valid'", ")", "\n", "", "else", ":", "\n", "            ", "valid_iterator", "=", "None", "\n", "\n", "", "if", "config_data", "[", "'input_test_directories'", "]", ":", "\n", "            ", "logging", ".", "info", "(", "'Loading Testing Data'", ")", "\n", "test_iterator", "=", "run_utils", ".", "get_iterator", "(", "config_data", ",", "embeddings", ",", "mode", "=", "'test'", ")", "\n", "\n", "", "if", "train_iterator", "is", "not", "None", ":", "\n", "            ", "model", ",", "test_model", "=", "run_utils", ".", "get_model", "(", "config_data", ",", "train_iterator", ")", "\n", "json_string", "=", "model", ".", "to_json", "(", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'model_definition.json'", ")", ",", "'wt'", ")", ".", "write", "(", "json_string", ")", "\n", "json_string", "=", "test_model", ".", "to_json", "(", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'test_model_definition.json'", ")", ",", "'wt'", ")", ".", "write", "(", "json_string", ")", "\n", "\n", "", "pretrained", "=", "False", "\n", "if", "not", "config_data", "[", "'pretrained_model_directory'", "]", "==", "'None'", "and", "not", "config_data", "[", "'pretrained_model_basename'", "]", "==", "'None'", ":", "\n", "            ", "pretrained_model_path", "=", "os", ".", "path", ".", "join", "(", "config_data", "[", "'pretrained_model_directory'", "]", ",", "config_data", "[", "'pretrained_model_basename'", "]", ")", "\n", "pretrained_model", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_path", ",", "'best_model.h5'", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading Pretraind Model from: {}'", ".", "format", "(", "pretrained_model", ")", ")", "\n", "\n", "if", "train_iterator", "is", "None", ":", "\n", "                ", "json_string", "=", "open", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_path", ",", "'model_definition.json'", ")", ",", "'rt'", ")", ".", "read", "(", ")", "\n", "model", "=", "model_from_json", "(", "json_string", ")", "\n", "\n", "json_string", "=", "open", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_path", ",", "'test_model_definition.json'", ")", ",", "'rt'", ")", ".", "read", "(", ")", "\n", "test_model", "=", "model_from_json", "(", "json_string", ")", "\n", "\n", "", "model", ".", "load_weights", "(", "pretrained_model", ")", "\n", "if", "config_data", ".", "get", "(", "'transfer_learning'", ",", "None", ")", "==", "'True'", ":", "\n", "                ", "model", "=", "model_utils", ".", "pop_layer", "(", "model", ",", "config_data", "[", "'nlabels'", "]", ")", "\n", "", "pretrained", "=", "True", "\n", "\n", "", "model", ".", "summary", "(", ")", "\n", "\n", "trained", "=", "False", "\n", "if", "config_data", "[", "'nb_epochs'", "]", ">", "0", ":", "\n", "            ", "optimizer", "=", "run_utils", ".", "get_optimizer", "(", "config_data", ")", "\n", "metrics", "=", "run_utils", ".", "get_evaluation_metric", "(", "config_data", ")", "\n", "\n", "model", ".", "compile", "(", "loss", "=", "config_data", "[", "'loss'", "]", ",", "optimizer", "=", "optimizer", ",", "metrics", "=", "metrics", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n", "\n", "\n", "", "fit_utils", ".", "fit_model", "(", "config_data", ",", "model", ",", "train_iterator", ",", "valid_iterator", ")", "\n", "trained", "=", "True", "\n", "\n", "", "if", "test_iterator", ":", "\n", "            ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'best_model.h5'", ")", "\n", "if", "not", "trained", "and", "not", "pretrained", ":", "\n", "                ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'best_model.h5'", ")", "\n", "json", ".", "dump", "(", "config_data", ",", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'config.json'", ")", ",", "'w'", ")", ")", "\n", "logging", ".", "info", "(", "'Storing Trained Model'", ")", "\n", "model", ".", "save_weights", "(", "weights_path", ",", "overwrite", "=", "True", ")", "\n", "\n", "", "if", "not", "trained", "and", "pretrained", ":", "\n", "                ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_path", ",", "'best_model.h5'", ")", "\n", "json", ".", "dump", "(", "config_data", ",", "open", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_path", ",", "'config.json'", ")", ",", "'w'", ")", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Load Trained Model'", ")", "\n", "test_model", ".", "load_weights", "(", "weights_path", ")", "\n", "\n", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "basename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "result_path", ")", "\n", "\n", "", "oline_test", "=", "run_utils", ".", "get_evaluation", "(", "config_data", ",", "test_model", ",", "test_iterator", ",", "basename", ",", "result_path", ")", "\n", "print", "(", "oline_test", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "'results'", ",", "'results_log.tsv'", ")", ",", "'at'", ")", ".", "write", "(", "oline_test", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.embeddings_container.EmbeddingContainer.__init__": [[12, 15], ["embeddings_container.EmbeddingContainer.load_vocabulary", "embeddings_container.EmbeddingContainer.load_transformer_list"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.embeddings_container.EmbeddingContainer.load_vocabulary", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.embeddings_container.EmbeddingContainer.load_transformer_list"], ["    ", "def", "__init__", "(", "self", ",", "config_data", ")", ":", "\n", "        ", "self", ".", "vocabulary", "=", "self", ".", "load_vocabulary", "(", "config_data", ")", "\n", "self", ".", "transformers", "=", "self", ".", "load_transformer_list", "(", "config_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.embeddings_container.EmbeddingContainer.load_vocabulary": [[16, 26], ["os.path.join", "os.path.join", "cPickle.load", "open"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_vocabulary", "(", "config_data", ")", ":", "\n", "        ", "output_directory", "=", "config_data", "[", "'embeddings_directory'", "]", "\n", "output_basename", "=", "config_data", "[", "'embeddings_basename'", "]", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "output_basename", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'vocabulary.pickle'", ")", "\n", "\n", "vocabulary", "=", "cPickle", ".", "load", "(", "open", "(", "fname", ",", "'rb'", ")", ")", "\n", "return", "vocabulary", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.embeddings_container.EmbeddingContainer.load_transformer_list": [[27, 44], ["os.path.join", "os.path.join", "open", "json.load", "range", "gensim.models.Phrases.load", "transformers.append", "os.path.join"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_transformer_list", "(", "config_data", ")", ":", "\n", "        ", "output_directory", "=", "config_data", "[", "'embeddings_directory'", "]", "\n", "output_basename", "=", "config_data", "[", "'embeddings_basename'", "]", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "output_basename", ")", "\n", "config_fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'config.json'", ")", "\n", "with", "open", "(", "config_fname", ",", "'r'", ")", "as", "json_data", ":", "\n", "            ", "wemb_config", "=", "json", ".", "load", "(", "json_data", ")", "\n", "ngrams", "=", "wemb_config", "[", "'ngrams'", "]", "\n", "\n", "transformers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ngrams", "-", "1", ")", ":", "\n", "                ", "phrase_model", "=", "Phrases", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'{}gram'", ".", "format", "(", "i", ")", ")", ")", "\n", "transformers", ".", "append", "(", "phrase_model", ")", "\n", "\n", "", "", "return", "transformers", "", "", "", ""]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.evaluation_metrics.pearsons_correlation": [[7, 21], ["keras.mean", "keras.mean", "keras.sum", "keras.sum", "keras.sum", "keras.square", "keras.square", "keras.epsilon", "keras.sqrt", "keras.sqrt"], "function", ["None"], ["def", "pearsons_correlation", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_true_mean", "=", "K", ".", "mean", "(", "y_true", ")", "\n", "y_pred_mean", "=", "K", ".", "mean", "(", "y_pred", ")", "\n", "\n", "true_diff_mean", "=", "y_true", "-", "y_true_mean", "\n", "pred_diff_mean", "=", "y_pred", "-", "y_pred_mean", "\n", "\n", "sum_prod_diff_mean", "=", "K", ".", "sum", "(", "true_diff_mean", "*", "pred_diff_mean", ")", "\n", "true_diff_mean_sq", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "true_diff_mean", ")", ")", "\n", "pred_diff_mean_sq", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "pred_diff_mean", ")", ")", "\n", "\n", "r", "=", "sum_prod_diff_mean", "/", "(", "K", ".", "sqrt", "(", "true_diff_mean_sq", ")", "*", "K", ".", "sqrt", "(", "pred_diff_mean_sq", ")", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.evaluation_metrics.f1_score_keras": [[23, 61], ["keras.zeros_like", "keras.expand_dims", "keras.expand_dims", "keras.concatenate", "keras.sum", "keras.cast", "tensorflow.SparseTensor", "keras.sum", "keras.sum", "keras.sum", "tensorflow.select", "tensorflow.select", "tensorflow.select", "keras.mean", "keras.arange", "keras.argmax", "keras.ones_like", "tensorflow.shape", "tensorflow.sparse_tensor_to_dense", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "tensorflow.shape"], "function", ["None"], ["", "def", "f1_score_keras", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "# y_pred_ones[:, K.argmax(y_pred, axis=-1)] = 1", "\n", "\n", "# indices_x = K.arange(start=0, stop=y_true.get_shape()[0])", "\n", "indices_x", "=", "K", ".", "expand_dims", "(", "K", ".", "arange", "(", "start", "=", "0", ",", "stop", "=", "tf", ".", "shape", "(", "y_true", ")", "[", "0", "]", ",", "dtype", "=", "'int64'", ")", ",", "dim", "=", "-", "1", ")", "\n", "indices_y", "=", "K", ".", "expand_dims", "(", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "indices", "=", "K", ".", "concatenate", "(", "(", "indices_x", ",", "indices_y", ")", ")", "\n", "values", "=", "K", ".", "sum", "(", "K", ".", "ones_like", "(", "indices_x", ",", "dtype", "=", "'float32'", ")", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "K", ".", "cast", "(", "tf", ".", "shape", "(", "y_pred_ones", ")", ",", "dtype", "=", "'int64'", ")", "\n", "delta", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n", "y_pred_ones", "=", "y_pred_ones", "+", "tf", ".", "sparse_tensor_to_dense", "(", "delta", ")", "\n", "\n", "# where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "# precision for each class", "\n", "precision", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "pred_cnt", ",", "\n", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "# recall for each class", "\n", "recall", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "gold_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "gold_cnt", ",", "\n", "name", "=", "'racall_f1_semeval'", ")", "\n", "\n", "# f1 for each class", "\n", "f1_class", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "precision", "+", "recall", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "\n", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ",", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "# return average f1 score over all classes", "\n", "return", "K", ".", "mean", "(", "f1_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.evaluation_metrics.f1_score_taskB": [[63, 88], ["keras.zeros_like", "keras.sum", "keras.sum", "keras.sum", "keras.switch", "keras.switch", "keras.switch", "keras.equal", "keras.equal", "keras.equal", "keras.argmax"], "function", ["None"], ["", "def", "f1_score_taskB", "(", "y_true", ",", "y_pred", ")", ":", "\n", "#convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "y_pred_ones", "[", ":", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", "=", "1", "\n", "\n", "#where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "#precision for each class", "\n", "precision", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "#recall for each class", "\n", "recall", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "gold_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "gold_cnt", ")", "\n", "\n", "#f1 for each class", "\n", "f1_class", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "precision", "+", "recall", ",", "0", ")", ",", "0", ",", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ")", "\n", "\n", "#return average f1 score over all classes", "\n", "return", "f1_class", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.evaluation_metrics.f1_score_semeval": [[89, 124], ["keras.zeros_like", "keras.expand_dims", "keras.expand_dims", "keras.concatenate", "keras.sum", "keras.cast", "tensorflow.SparseTensor", "keras.sum", "keras.sum", "keras.sum", "tensorflow.select", "tensorflow.select", "tensorflow.select", "keras.arange", "keras.argmax", "keras.ones_like", "tensorflow.shape", "tensorflow.sparse_tensor_to_dense", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "tensorflow.shape"], "function", ["None"], ["", "def", "f1_score_semeval", "(", "y_true", ",", "y_pred", ")", ":", "\n", "#convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "#y_pred_ones[:, K.argmax(y_pred, axis=-1)] = 1", "\n", "\n", "#indices_x = K.arange(start=0, stop=y_true.get_shape()[0])", "\n", "indices_x", "=", "K", ".", "expand_dims", "(", "K", ".", "arange", "(", "start", "=", "0", ",", "stop", "=", "tf", ".", "shape", "(", "y_true", ",", "name", "=", "'get_indicec_x_shape'", ")", "[", "0", "]", ",", "dtype", "=", "'int64'", ")", ",", "dim", "=", "-", "1", ")", "\n", "indices_y", "=", "K", ".", "expand_dims", "(", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "indices", "=", "K", ".", "concatenate", "(", "(", "indices_x", ",", "indices_y", ")", ")", "\n", "values", "=", "K", ".", "sum", "(", "K", ".", "ones_like", "(", "indices_x", ",", "dtype", "=", "'float32'", ")", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "K", ".", "cast", "(", "tf", ".", "shape", "(", "y_pred_ones", ")", ",", "dtype", "=", "'int64'", ")", "\n", "delta", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n", "y_pred_ones", "=", "y_pred_ones", "+", "tf", ".", "sparse_tensor_to_dense", "(", "delta", ")", "\n", "\n", "#where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "#precision for each class", "\n", "precision", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "pred_cnt", ",", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "#recall for each class", "\n", "recall", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "gold_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "gold_cnt", ",", "name", "=", "'racall_f1_semeval'", ")", "\n", "\n", "#f1 for each class", "\n", "f1_class", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "precision", "+", "recall", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ",", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "#return average f1 score over all classes", "\n", "return", "(", "f1_class", "[", "0", "]", "+", "f1_class", "[", "2", "]", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.evaluation_metrics.precision_keras": [[125, 141], ["keras.zeros_like", "keras.sum", "keras.sum", "keras.switch", "keras.mean", "keras.equal", "keras.argmax"], "function", ["None"], ["", "def", "precision_keras", "(", "y_true", ",", "y_pred", ")", ":", "\n", "#convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "y_pred_ones", "[", ":", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", "=", "1", "\n", "\n", "#where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#precision for each class", "\n", "precision", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "#return average f1 score over all classes", "\n", "return", "K", ".", "mean", "(", "precision", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.code.evaluation_metrics.f1_score_task3": [[143, 175], ["keras.zeros_like", "keras.arange", "keras.argmax", "keras.concatenate", "keras.ones_like", "tensorflow.SparseTensor", "keras.sum", "keras.sum", "keras.sum", "keras.switch", "keras.switch", "keras.switch", "keras.equal", "keras.equal", "keras.equal", "keras.argmax"], "function", ["None"], ["", "def", "f1_score_task3", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "# y_pred_ones = K.T.set_subtensor(y_ppred[K.T.arange(y_true.shape[0]), K.argmax(y_pred, axis=-1)], 1)", "\n", "indices_x", "=", "K", ".", "arange", "(", "y_true", ".", "shape", "[", "0", "]", ")", "\n", "indices_y", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "indices", "=", "K", ".", "concatenate", "(", "indices_x", ",", "indices_y", ")", "\n", "values", "=", "K", ".", "ones_like", "(", "indices_x", ")", "\n", "shape", "=", "y_pred_ones", ".", "shape", "\n", "delta", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "y_pred_ones", "[", ":", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", "=", "1", "\n", "\n", "# where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "# precision for each class", "\n", "precision", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "# recall for each class", "\n", "recall", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "gold_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "gold_cnt", ")", "\n", "\n", "# f1 for each class", "\n", "f1_class", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "precision", "+", "recall", ",", "0", ")", ",", "0", ",", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ")", "\n", "\n", "# return average f1 score over all classes", "\n", "return", "f1_class", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.Preprocessing.__init__": [[6, 11], ["parse_utils.TwitterPreprocessing"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "types", ")", ":", "\n", "        ", "self", ".", "preprocessors", "=", "{", "}", "\n", "for", "t", "in", "types", ":", "\n", "            ", "if", "t", "==", "'tweets'", ":", "\n", "                ", "self", ".", "preprocessors", "[", "t", "]", "=", "TwitterPreprocessing", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.Preprocessing.preprocess_text": [[12, 14], ["parse_utils.Preprocessing.preprocessors[].preprocess", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.TwitterPreprocessing.preprocess"], ["", "", "", "def", "preprocess_text", "(", "self", ",", "text", ",", "text_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "preprocessors", "[", "text_type", "]", ".", "preprocess", "(", "text", ",", "kwargs", ".", "get", "(", "'language'", ",", "'default'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.TwitterPreprocessing.__init__": [[17, 27], ["nltk.tokenize.TweetTokenizer", "nltk.tokenize.TweetTokenizer", "nltk.tokenize.WordPunctTokenizer", "nltk.tokenize.WordPunctTokenizer", "nltk.tokenize.WordPunctTokenizer", "nltk.tokenize.WordPunctTokenizer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tokenizers", "=", "{", "\n", "'en'", ":", "TweetTokenizer", "(", ")", ",", "\n", "'de'", ":", "WordPunctTokenizer", "(", ")", ",", "\n", "'it'", ":", "WordPunctTokenizer", "(", ")", ",", "\n", "'fr'", ":", "WordPunctTokenizer", "(", ")", ",", "\n", "'default'", ":", "WordPunctTokenizer", "(", ")", "\n", "}", "\n", "\n", "self", ".", "tokenizer", "=", "TweetTokenizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.TwitterPreprocessing.preprocess": [[28, 39], ["parse_utils.TwitterPreprocessing.lower", "parse_utils.TwitterPreprocessing.replace", "re.sub", "re.sub", "re.sub", "parse_utils.TwitterPreprocessing.tokenizers.get().tokenize", "list", "map", "parse_utils.TwitterPreprocessing.tokenizers.get", "x.replace"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "tweet", ",", "lang", ")", ":", "\n", "#lowercase and normalize urls", "\n", "        ", "tweet", "=", "tweet", ".", "lower", "(", ")", "\n", "tweet", "=", "tweet", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "tweet", "=", "re", ".", "sub", "(", "'((www\\.[^\\s]+)|(https?://[^\\s]+)|(http?://[^\\s]+))'", ",", "'URLTOK'", ",", "tweet", ")", "\n", "tweet", "=", "re", ".", "sub", "(", "'@[^\\s]+'", ",", "'USRTOK'", ",", "tweet", ")", "\n", "tweet", "=", "re", ".", "sub", "(", "r'#([^\\s]+)'", ",", "r'\\1'", ",", "tweet", ")", "\n", "\n", "tweet", "=", "self", ".", "tokenizers", ".", "get", "(", "lang", ",", "self", ".", "tokenizer", ")", ".", "tokenize", "(", "tweet", ")", "\n", "\n", "return", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "replace", "(", "' '", ",", "''", ")", ",", "tweet", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_iterator": [[21, 30], ["data_loader.supervised_data_loader.SupervisedDataLoader", "data_loader.distant_phase_mixed_iterator.DistantDataParseIterator", "data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator"], "function", ["None"], ["def", "get_iterator", "(", "config_data", ",", "embeddings", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "if", "config_data", "[", "'{}_loader_type'", ".", "format", "(", "mode", ")", "]", "==", "'supervised_data_loader'", ":", "\n", "        ", "return", "SupervisedDataLoader", "(", "config_data", ",", "embeddings", ",", "mode", "=", "mode", ")", "\n", "", "elif", "config_data", "[", "'{}_loader_type'", ".", "format", "(", "mode", ")", "]", "==", "'distant_phase_mixed_iterator'", ":", "\n", "        ", "return", "DistantDataParseIterator", "(", "config_data", ",", "embeddings", ")", "\n", "", "elif", "config_data", "[", "'{}_loader_type'", ".", "format", "(", "mode", ")", "]", "==", "'distant_phase_sequencial_iterator'", ":", "\n", "        ", "return", "data_loader", ".", "distant_phase_sequencial_iterator", ".", "DistantDataParseIterator", "(", "config_data", ",", "embeddings", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_model": [[32, 37], ["architectures.default_cnn.create_default_model"], "function", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.architectures.default_cnn.create_default_model"], ["", "", "def", "get_model", "(", "config_data", ",", "train_iterator", ")", ":", "\n", "    ", "if", "config_data", "[", "'model'", "]", "==", "'default_cnn'", ":", "\n", "        ", "return", "create_default_model", "(", "config_data", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_callbacks": [[39, 58], ["keras.callbacks.TensorBoard", "ret_callbacks.append", "ret_callbacks.append", "os.path.join", "keras.callbacks.EarlyStopping", "os.path.join", "os.path.join", "bool", "ret_callbacks.append", "keras.callbacks.ModelCheckpoint"], "function", ["None"], ["", "", "def", "get_callbacks", "(", "config_data", ",", "appendix", "=", "''", ")", ":", "\n", "    ", "ret_callbacks", "=", "[", "]", "\n", "model_stored", "=", "False", "\n", "callbacks", "=", "config_data", "[", "'callbacks'", "]", "\n", "if", "K", ".", "_BACKEND", "==", "'tensorflow'", ":", "\n", "        ", "tensor_board", "=", "TensorBoard", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "'logging'", ",", "config_data", "[", "'tb_log_dir'", "]", ")", ",", "histogram_freq", "=", "10", ")", "\n", "ret_callbacks", ".", "append", "(", "tensor_board", ")", "\n", "", "for", "callback", "in", "callbacks", ":", "\n", "        ", "if", "callback", "[", "'name'", "]", "==", "'early_stopping'", ":", "\n", "            ", "ret_callbacks", ".", "append", "(", "EarlyStopping", "(", "monitor", "=", "callback", "[", "'monitor'", "]", ",", "patience", "=", "callback", "[", "'patience'", "]", ",", "verbose", "=", "callback", "[", "'verbose'", "]", ",", "mode", "=", "callback", "[", "'mode'", "]", ")", ")", "\n", "", "elif", "callback", "[", "'name'", "]", "==", "'model_checkpoit'", ":", "\n", "            ", "model_stored", "=", "True", "\n", "path", "=", "config_data", "[", "'output_path'", "]", "\n", "basename", "=", "config_data", "[", "'output_basename'", "]", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "basename", ")", "\n", "opath", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'best_model{}.h5'", ".", "format", "(", "appendix", ")", ")", "\n", "save_best", "=", "bool", "(", "callback", "[", "'save_best_only'", "]", ")", "\n", "ret_callbacks", ".", "append", "(", "ModelCheckpoint", "(", "filepath", "=", "opath", ",", "verbose", "=", "callback", "[", "'verbose'", "]", ",", "save_best_only", "=", "save_best", ",", "monitor", "=", "callback", "[", "'monitor'", "]", ",", "mode", "=", "callback", "[", "'mode'", "]", ")", ")", "\n", "", "", "return", "ret_callbacks", ",", "model_stored", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_evaluation": [[60, 68], ["os.path.join", "evaluation.senti_lang_eval.evaluate", "evaluation.senti_lang_eval_sentence_emb_output.evaluate"], "function", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation.senti_lang_eval_sentence_emb_output.evaluate", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation.senti_lang_eval_sentence_emb_output.evaluate"], ["", "def", "get_evaluation", "(", "config_data", ",", "model", ",", "test_iterator", ",", "basename", ",", "opath", ")", ":", "\n", "    ", "ofname", "=", "os", ".", "path", ".", "join", "(", "opath", ",", "'outfile.tsv'", ")", "\n", "if", "config_data", "[", "'evaluation'", "]", "==", "'senti_lang_eval'", ":", "\n", "        ", "return", "evaluate", "(", "model", ",", "test_iterator", ",", "basename", ",", "ofname", ")", "\n", "", "elif", "config_data", "[", "'evaluation'", "]", "==", "'senti_lang_eval_sentence_emb_output'", ":", "\n", "        ", "return", "senti_lang_eval_sentence_emb_output", ".", "evaluate", "(", "model", ",", "test_iterator", ",", "basename", ",", "ofname", ")", "\n", "", "else", ":", "\n", "        ", "return", "'None'", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_evaluation_metric": [[70, 88], ["None"], "function", ["None"], ["", "", "def", "get_evaluation_metric", "(", "config_data", ")", ":", "\n", "    ", "name", "=", "config_data", "[", "'metrics'", "]", "\n", "if", "name", "==", "'f1_score_keras'", ":", "\n", "        ", "return", "[", "evaluation_metrics", ".", "f1_score_keras", "]", "\n", "", "elif", "name", "==", "'f1_score_semeval'", ":", "\n", "        ", "return", "[", "evaluation_metrics", ".", "f1_score_semeval", "]", "\n", "", "elif", "name", "==", "'f1_score_task3'", ":", "\n", "        ", "return", "[", "evaluation_metrics", ".", "f1_score_task3", "]", "\n", "", "elif", "name", "==", "'precision_keras'", ":", "\n", "        ", "return", "[", "evaluation_metrics", ".", "precision_keras", "]", "\n", "", "elif", "name", "==", "'accuracy'", ":", "\n", "        ", "return", "[", "'accuracy'", "]", "\n", "", "elif", "name", "==", "'f1_score_taskB'", ":", "\n", "        ", "return", "[", "evaluation_metrics", ".", "f1_score_taskB", "]", "\n", "", "elif", "name", "==", "'pearsons_correlation'", ":", "\n", "        ", "return", "[", "evaluation_metrics", ".", "pearsons_correlation", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_classweight": [[90, 98], ["config_data.get"], "function", ["None"], ["", "", "def", "get_classweight", "(", "config_data", ")", ":", "\n", "    ", "if", "config_data", ".", "get", "(", "'class_weight'", ",", "None", ")", ":", "\n", "        ", "return", "{", "\n", "0", ":", "config_data", "[", "'class_weight'", "]", "[", "'0'", "]", ",", "\n", "1", ":", "config_data", "[", "'class_weight'", "]", "[", "'1'", "]", "\n", "}", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_optimizer": [[100, 108], ["keras.Adadelta", "keras.SGD"], "function", ["None"], ["", "", "def", "get_optimizer", "(", "config_data", ")", ":", "\n", "    ", "options", "=", "config_data", "[", "'optimizer'", "]", "\n", "name", "=", "options", "[", "'name'", "]", "\n", "\n", "if", "name", "==", "'adadelta'", ":", "\n", "        ", "return", "optimizers", ".", "Adadelta", "(", "lr", "=", "options", "[", "'lr'", "]", ",", "rho", "=", "options", "[", "'rho'", "]", ",", "epsilon", "=", "options", "[", "'epsilon'", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "optimizers", ".", "SGD", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.model_utils.pop_layer": [[5, 13], ["keras.models.Model", "Exception", "keras.layers.Dense"], "function", ["None"], ["def", "pop_layer", "(", "model", ",", "nlabels", ")", ":", "\n", "    ", "if", "not", "model", ".", "outputs", ":", "\n", "        ", "raise", "Exception", "(", "'Sequential model cannot be popped: model is empty.'", ")", "\n", "\n", "", "model", ".", "layers", "[", "-", "1", "]", ".", "trainable", "=", "False", "\n", "softmax_layer1", "=", "Dense", "(", "nlabels", ",", "activation", "=", "'softmax'", ",", "name", "=", "'sentiment_softmax'", ",", "init", "=", "'lecun_uniform'", ")", "(", "model", ".", "layers", "[", "-", "2", "]", ".", "output", ")", "\n", "model", "=", "Model", "(", "input", "=", "model", ".", "inputs", ",", "output", "=", "softmax_layer1", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.model_utils.get_regularizer": [[14, 21], ["keras.l2"], "function", ["None"], ["", "def", "get_regularizer", "(", "config_data", ")", ":", "\n", "    ", "reg", "=", "config_data", "[", "'regularizer'", "]", "\n", "name", "=", "reg", "[", "'name'", "]", "\n", "if", "name", "==", "'l2'", ":", "\n", "        ", "return", "regs", ".", "l2", "(", "l", "=", "reg", "[", "'l2'", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.apply_transformer": [[7, 11], ["None"], "function", ["None"], ["def", "apply_transformer", "(", "sentence", ",", "transofrmers", ")", ":", "\n", "    ", "for", "transofrmer", "in", "transofrmers", ":", "\n", "        ", "sentence", "=", "transofrmer", "[", "sentence", "]", "\n", "", "return", "sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.number_of_samples": [[13, 18], ["None"], "function", ["None"], ["", "def", "number_of_samples", "(", "directory_list", ")", ":", "\n", "    ", "nsamples", "=", "0", "\n", "for", "directory", "in", "directory_list", ":", "\n", "        ", "nsamples", "+=", "directory", "[", "'max_sentences'", "]", "\n", "", "return", "nsamples", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.load_embedding_matrix": [[20, 28], ["os.path.join", "os.path.join", "numpy.load"], "function", ["None"], ["", "def", "load_embedding_matrix", "(", "config_data", ")", ":", "\n", "    ", "output_directory", "=", "config_data", "[", "'embeddings_directory'", "]", "\n", "output_basename", "=", "config_data", "[", "'embeddings_basename'", "]", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "output_basename", ")", "\n", "matrix_fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'embedding_matrix.npy'", ")", "\n", "embedding_matrix", "=", "np", ".", "load", "(", "matrix_fname", ")", "\n", "return", "embedding_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.convert2indices": [[30, 54], ["numpy.array().astype", "max", "enumerate", "np.array().astype.append", "print", "print", "print", "numpy.ones", "len", "len", "alphabet.get", "numpy.array"], "function", ["None"], ["", "def", "convert2indices", "(", "data", ",", "alphabet", ",", "dummy_word_idx", ",", "unk_word_idx", ",", "max_sent_length", "=", "140", ",", "verbose", "=", "0", ")", ":", "\n", "    ", "data_idx", "=", "[", "]", "\n", "max_len", "=", "0", "\n", "unknown_words", "=", "0", "\n", "known_words", "=", "0", "\n", "for", "sentence", "in", "data", ":", "\n", "        ", "ex", "=", "np", ".", "ones", "(", "max_sent_length", ")", "*", "dummy_word_idx", "\n", "max_len", "=", "max", "(", "len", "(", "sentence", ")", ",", "max_len", ")", "\n", "if", "len", "(", "sentence", ")", ">", "max_sent_length", ":", "\n", "            ", "sentence", "=", "sentence", "[", ":", "max_sent_length", "]", "\n", "", "for", "i", ",", "token", "in", "enumerate", "(", "sentence", ")", ":", "\n", "            ", "idx", ",", "freq", "=", "alphabet", ".", "get", "(", "token", ",", "(", "unk_word_idx", ",", "0", ")", ")", "\n", "ex", "[", "i", "]", "=", "idx", "\n", "if", "idx", "==", "unk_word_idx", ":", "\n", "                ", "unknown_words", "+=", "1", "\n", "", "else", ":", "\n", "                ", "known_words", "+=", "1", "\n", "", "", "data_idx", ".", "append", "(", "ex", ")", "\n", "", "data_idx", "=", "np", ".", "array", "(", "data_idx", ")", ".", "astype", "(", "'int32'", ")", "\n", "if", "verbose", "==", "1", ":", "\n", "        ", "print", "(", "\"Max length in this batch:\"", ",", "max_len", ")", "\n", "print", "(", "\"Number of unknown words:\"", ",", "unknown_words", ")", "\n", "print", "(", "\"Number of known words:\"", ",", "known_words", ")", "\n", "", "return", "data_idx", "", "", ""]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.fit_utils.fit_model": [[6, 13], ["config_data.get", "fit_utils.fit_model_single", "config_data.get", "fit_utils.fit_model_cv", "fit_utils.fit_model_single"], "function", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.fit_utils.fit_model_single", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.fit_utils.fit_model_cv", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.fit_utils.fit_model_single"], ["def", "fit_model", "(", "config_data", ",", "model", ",", "train_iterator", ",", "valid_iterator", "=", "None", ")", ":", "\n", "    ", "if", "not", "config_data", ".", "get", "(", "'cross_valid'", ")", ":", "\n", "        ", "return", "fit_model_single", "(", "config_data", ",", "model", ",", "train_iterator", ",", "valid_iterator", ")", "\n", "", "elif", "config_data", ".", "get", "(", "'cross_valid'", ")", "==", "'true'", ":", "\n", "        ", "return", "fit_model_cv", "(", "config_data", ",", "model", ",", "train_iterator", ",", "valid_iterator", ")", "\n", "", "else", ":", "\n", "        ", "return", "fit_model_single", "(", "config_data", ",", "model", ",", "train_iterator", ",", "valid_iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.fit_utils.fit_model_cv": [[15, 66], ["sklearn.cross_validation.KFold", "os.path.join", "os.path.join", "model.save_weights", "enumerate", "model.load_weights", "utils.run_utils.get_callbacks", "model.fit", "appendices.append", "os.path.join", "model.load_weights", "utils.run_utils.get_evaluation", "print", "len", "utils.run_utils.get_classweight"], "function", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_callbacks", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_evaluation", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_classweight"], ["", "", "def", "fit_model_cv", "(", "config_data", ",", "model", ",", "train_iterator", ",", "valid_iterator", ")", ":", "\n", "    ", "assert", "train_iterator", ".", "type", "==", "'loader'", "\n", "\n", "nb_epochs", "=", "config_data", "[", "'nb_epochs'", "]", "\n", "batch_size", "=", "config_data", "[", "'batch_size'", "]", "\n", "\n", "X_train", "=", "train_iterator", ".", "input_data", "\n", "y_train", "=", "train_iterator", ".", "output_data", "\n", "\n", "kf", "=", "KFold", "(", "n_folds", "=", "5", ",", "shuffle", "=", "True", ",", "n", "=", "len", "(", "X_train", "[", "0", "]", ")", ")", "\n", "\n", "path", "=", "config_data", "[", "'output_path'", "]", "\n", "basename", "=", "config_data", "[", "'output_basename'", "]", "\n", "base_path", "=", "join", "(", "path", ",", "basename", ")", "\n", "opath", "=", "join", "(", "base_path", ",", "'base_model.h5'", ")", "\n", "model", ".", "save_weights", "(", "opath", ")", "\n", "\n", "appendices", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "train", ",", "test", ")", "in", "enumerate", "(", "kf", ")", ":", "\n", "        ", "model", ".", "load_weights", "(", "opath", ")", "\n", "\n", "input_train", "=", "[", "X", "[", "train", "]", "for", "X", "in", "X_train", "]", "\n", "output_train", "=", "[", "y", "[", "train", "]", "for", "y", "in", "y_train", "]", "\n", "\n", "input_valid", "=", "[", "X", "[", "test", "]", "for", "X", "in", "X_train", "]", "\n", "output_valid", "=", "[", "y", "[", "test", "]", "for", "y", "in", "y_train", "]", "\n", "\n", "appendix", "=", "'_{}'", ".", "format", "(", "i", ")", "\n", "callbacks", "=", "run_utils", ".", "get_callbacks", "(", "config_data", ",", "appendix", "=", "appendix", ")", "\n", "stored_model", "=", "True", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "input_train", ",", "\n", "y", "=", "output_train", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "validation_data", "=", "(", "input_valid", ",", "output_valid", ")", ",", "\n", "nb_epoch", "=", "nb_epochs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "class_weight", "=", "run_utils", ".", "get_classweight", "(", "config_data", ")", "\n", ")", "\n", "\n", "appendices", ".", "append", "(", "appendix", ")", "\n", "\n", "weights_path", "=", "join", "(", "base_path", ",", "'best_model{}.h5'", ".", "format", "(", "appendix", ")", ")", "\n", "model", ".", "load_weights", "(", "weights_path", ")", "\n", "\n", "oline_test", "=", "run_utils", ".", "get_evaluation", "(", "config_data", ",", "model", ",", "train_iterator", ",", "basename", ",", "''", ")", "\n", "print", "(", "oline_test", ")", "\n", "\n", "", "return", "hist", ",", "stored_model", ",", "appendices", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.fit_utils.fit_model_single": [[68, 147], ["utils.run_utils.get_callbacks", "utils.run_utils.get_callbacks", "model.fit_generator", "model.fit_generator", "train_iterator.flow", "utils.run_utils.get_callbacks", "model.fit", "train_iterator.flow", "utils.run_utils.get_callbacks", "model.fit_generator", "utils.run_utils.get_callbacks", "model.fit", "train_iterator.flow", "utils.run_utils.get_callbacks", "model.fit", "valid_iterator.flow", "utils.run_utils.get_classweight", "valid_iterator.flow"], "function", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_callbacks", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_callbacks", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator.flow", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_callbacks", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator.flow", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_callbacks", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_callbacks", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator.flow", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_callbacks", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator.flow", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.run_utils.get_classweight", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator.flow"], ["", "def", "fit_model_single", "(", "config_data", ",", "model", ",", "train_iterator", ",", "valid_iterator", ")", ":", "\n", "    ", "stored_model", "=", "False", "\n", "nb_epochs", "=", "config_data", "[", "'nb_epochs'", "]", "\n", "batch_size", "=", "config_data", "[", "'batch_size'", "]", "\n", "\n", "if", "not", "train_iterator", ":", "\n", "        ", "return", "None", ",", "False", ",", "''", "\n", "\n", "", "if", "train_iterator", ".", "type", "==", "'generator'", "and", "train_iterator", ".", "nsamples", ">", "0", ":", "\n", "        ", "callbacks", ",", "stored_model", "=", "run_utils", ".", "get_callbacks", "(", "config_data", ")", "\n", "if", "valid_iterator", ":", "\n", "            ", "if", "valid_iterator", ".", "type", "==", "'loader'", ":", "\n", "                ", "hist", "=", "model", ".", "fit_generator", "(", "\n", "train_iterator", ".", "flow", "(", "batch_size", ")", ",", "\n", "samples_per_epoch", "=", "train_iterator", ".", "nsamples", ",", "\n", "validation_data", "=", "(", "valid_iterator", ".", "input_data", ",", "valid_iterator", ".", "output_data", ")", ",", "\n", "nb_epoch", "=", "nb_epochs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks", "\n", ")", "\n", "", "elif", "valid_iterator", ".", "type", "==", "'generator'", ":", "\n", "                ", "callbacks", ",", "stored_model", "=", "run_utils", ".", "get_callbacks", "(", "config_data", ")", "\n", "hist", "=", "model", ".", "fit_generator", "(", "\n", "train_iterator", ".", "flow", "(", "batch_size", ")", ",", "\n", "samples_per_epoch", "=", "train_iterator", ".", "nsamples", ",", "\n", "validation_data", "=", "valid_iterator", ".", "flow", "(", "batch_size", ")", ",", "\n", "nb_val_samples", "=", "valid_iterator", ".", "nsamples", ",", "\n", "nb_epoch", "=", "nb_epochs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "callbacks", ",", "stored_model", "=", "run_utils", ".", "get_callbacks", "(", "config_data", ")", "\n", "hist", "=", "model", ".", "fit_generator", "(", "\n", "train_iterator", ".", "flow", "(", "batch_size", ")", ",", "\n", "samples_per_epoch", "=", "train_iterator", ".", "nsamples", ",", "\n", "nb_epoch", "=", "nb_epochs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks", "\n", ")", "\n", "", "", "elif", "train_iterator", ".", "type", "==", "'loader'", ":", "\n", "        ", "if", "valid_iterator", ":", "\n", "            ", "if", "valid_iterator", ".", "type", "==", "'loader'", ":", "\n", "                ", "callbacks", ",", "stored_model", "=", "run_utils", ".", "get_callbacks", "(", "config_data", ")", "\n", "stored_model", "=", "True", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "train_iterator", ".", "input_data", ",", "\n", "y", "=", "train_iterator", ".", "output_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "validation_data", "=", "(", "valid_iterator", ".", "input_data", ",", "valid_iterator", ".", "output_data", ")", ",", "\n", "nb_epoch", "=", "nb_epochs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "class_weight", "=", "run_utils", ".", "get_classweight", "(", "config_data", ")", "\n", ")", "\n", "", "elif", "valid_iterator", ".", "type", "==", "'generator'", ":", "\n", "                ", "callbacks", ",", "stored_model", "=", "run_utils", ".", "get_callbacks", "(", "config_data", ")", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "train_iterator", ".", "input_data", ",", "\n", "y", "=", "train_iterator", ".", "output_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "validation_data", "=", "valid_iterator", ".", "flow", "(", "batch_size", ")", ",", "\n", "nb_epoch", "=", "nb_epochs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks", "\n", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "callbacks", ",", "stored_model", "=", "run_utils", ".", "get_callbacks", "(", "config_data", ")", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "train_iterator", ".", "input_data", ",", "\n", "y", "=", "train_iterator", ".", "output_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "nb_epoch", "=", "nb_epochs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks", "\n", ")", "\n", "\n", "", "", "return", "hist", ",", "stored_model", ",", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.get_list_of_files": [[10, 61], ["open", "json.load", "max", "os.listdir", "os.path.join", "filter", "files.append", "files.append", "schema_attributes.values", "os.path.join", "os.path.join", "type"], "function", ["None"], ["def", "get_list_of_files", "(", "directory_list", ")", ":", "\n", "    ", "files", "=", "[", "]", "\n", "for", "directory", "in", "directory_list", ":", "\n", "        ", "dir_name", "=", "directory", "[", "'directory_name'", "]", "\n", "\n", "schema_dir", "=", "directory", "[", "'schema_directory'", "]", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "schema_dir", ",", "'schema.json'", ")", ",", "'r'", ")", "as", "json_data", ":", "\n", "            ", "schema", "=", "json", ".", "load", "(", "json_data", ")", "\n", "schema_attributes", "=", "schema", "[", "'attributes'", "]", "\n", "schema_meta_data", "=", "schema", "[", "'meta_data'", "]", "\n", "\n", "#tsv, gzip,..", "\n", "file_type", "=", "schema_meta_data", "[", "'file_type'", "]", "\n", "\n", "#tweets, news, used to decide parsing", "\n", "text_type", "=", "schema_meta_data", "[", "'text_type'", "]", "\n", "\n", "#limit the number of sentence used, if limit is -1, then use all the data", "\n", "max_sentences", "=", "directory", "[", "'max_sentences'", "]", "\n", "if", "max_sentences", "==", "-", "1", ":", "\n", "                ", "max_sentences", "=", "schema_meta_data", "[", "'length'", "]", "\n", "\n", "#number of attributes in the file", "\n", "", "max_idx", "=", "max", "(", "filter", "(", "lambda", "x", ":", "type", "(", "x", ")", "==", "int", ",", "schema_attributes", ".", "values", "(", ")", ")", ")", "\n", "\n", "", "if", "not", "directory", "[", "'file_names'", "]", ":", "\n", "            ", "for", "fname", "in", "os", ".", "listdir", "(", "dir_name", ")", ":", "\n", "                ", "if", "fname", "==", "'schema.json'", ":", "\n", "                    ", "continue", "\n", "", "files", ".", "append", "(", "{", "\n", "'file_name'", ":", "os", ".", "path", ".", "join", "(", "dir_name", ",", "fname", ")", ",", "\n", "'file_type'", ":", "file_type", ",", "\n", "'tags'", ":", "schema_attributes", ",", "\n", "'text_type'", ":", "text_type", ",", "\n", "'max_sentences'", ":", "max_sentences", ",", "\n", "'max_index'", ":", "max_idx", "\n", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "fname", "in", "directory", "[", "'file_names'", "]", ":", "\n", "                ", "if", "fname", "==", "'schema.json'", ":", "\n", "                    ", "continue", "\n", "", "files", ".", "append", "(", "{", "\n", "'file_name'", ":", "os", ".", "path", ".", "join", "(", "dir_name", ",", "fname", ")", ",", "\n", "'file_type'", ":", "file_type", ",", "\n", "'tags'", ":", "schema_attributes", ",", "\n", "'text_type'", ":", "text_type", ",", "\n", "'max_sentences'", ":", "max_sentences", ",", "\n", "'max_index'", ":", "max_idx", "\n", "}", ")", "\n", "", "", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.open_file": [[63, 74], ["gzip.open", "gzip.open", "codecs.open", "open"], "function", ["None"], ["", "def", "open_file", "(", "fname", ",", "file_type", ")", ":", "\n", "    ", "if", "file_type", "==", "'gzip'", ":", "\n", "        ", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "return", "gzip", ".", "open", "(", "fname", ",", "mode", "=", "'rt'", ")", "\n", "", "else", ":", "\n", "            ", "return", "gzip", ".", "open", "(", "fname", ",", "mode", "=", "'rt'", ",", "encoding", "=", "'utf-8'", ")", "\n", "", "", "elif", "file_type", "==", "'tsv'", ":", "\n", "        ", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "return", "codecs", ".", "open", "(", "fname", ",", "mode", "=", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "", "else", ":", "\n", "            ", "return", "open", "(", "fname", ",", "encoding", "=", "'utf-8'", ",", "mode", "=", "'rt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.compute_max_sent_len": [[76, 88], ["open", "json.load", "max", "os.path.join"], "function", ["None"], ["", "", "", "def", "compute_max_sent_len", "(", "directory_list", ")", ":", "\n", "    ", "max_sentence_length", "=", "-", "1", "\n", "for", "directory", "in", "directory_list", ":", "\n", "        ", "dir_name", "=", "directory", "[", "'directory_name'", "]", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir_name", ",", "'schema.json'", ")", ",", "'r'", ")", "as", "json_data", ":", "\n", "            ", "schema", "=", "json", ".", "load", "(", "json_data", ")", "\n", "schema_meta_data", "=", "schema", "[", "'meta_data'", "]", "\n", "sen_len", "=", "schema_meta_data", "[", "'sentence_length'", "]", "\n", "max_sentence_length", "=", "max", "(", "[", "sen_len", ",", "max_sentence_length", "]", ")", "\n", "\n", "", "", "return", "max_sentence_length", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.pop_layer": [[90, 103], ["model.layers.pop", "Exception"], "function", ["None"], ["", "def", "pop_layer", "(", "model", ")", ":", "\n", "    ", "if", "not", "model", ".", "outputs", ":", "\n", "        ", "raise", "Exception", "(", "'Sequential model cannot be popped: model is empty.'", ")", "\n", "\n", "", "model", ".", "layers", ".", "pop", "(", ")", "\n", "if", "not", "model", ".", "layers", ":", "\n", "        ", "model", ".", "outputs", "=", "[", "]", "\n", "model", ".", "inbound_nodes", "=", "[", "]", "\n", "model", ".", "outbound_nodes", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "layers", "[", "-", "1", "]", ".", "outbound_nodes", "=", "[", "]", "\n", "model", ".", "outputs", "=", "[", "model", ".", "layers", "[", "-", "1", "]", ".", "output", "]", "\n", "", "model", ".", "built", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.supervised_data_loader.SupervisedDataLoader.__init__": [[30, 81], ["utils.config_utils.get_list_of_files", "set", "utils.parse_utils.Preprocessing", "map", "numpy.vstack", "numpy.hstack", "supervised_data_loader.SupervisedDataLoader.transform_data", "input.append", "senti.append", "keras.utils.np_utils.to_categorical", "supervised_data_loader.SupervisedDataLoader.transform_data", "input_test.append", "senti_test.append", "names_test.append", "ids_test.append", "len", "keras.utils.np_utils.to_categorical", "len"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.get_list_of_files", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.supervised_data_loader.SupervisedDataLoader.transform_data", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.supervised_data_loader.SupervisedDataLoader.transform_data"], ["    ", "def", "__init__", "(", "self", ",", "config_data", ",", "embeddings", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "type", "=", "'loader'", "\n", "# files: (fname, file_type, tags, text_type, max_sentneces, max_idx)", "\n", "files", "=", "get_list_of_files", "(", "config_data", "[", "'input_{}_directories'", ".", "format", "(", "mode", ")", "]", ")", "\n", "\n", "max_sentence_len", "=", "config_data", "[", "'max_sentence_length'", "]", "\n", "\n", "if", "max_sentence_len", "==", "-", "1", ":", "\n", "            ", "self", ".", "max_sentence_len", "=", "140", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_sentence_len", "=", "max_sentence_len", "\n", "\n", "", "types", "=", "set", "(", "map", "(", "lambda", "x", ":", "x", "[", "'text_type'", "]", ",", "files", ")", ")", "\n", "preprocessor", "=", "Preprocessing", "(", "types", ")", "\n", "vocabulary", "=", "embeddings", ".", "vocabulary", "\n", "transformers", "=", "embeddings", ".", "transformers", "\n", "\n", "if", "not", "mode", "==", "'test'", ":", "\n", "            ", "input", "=", "[", "]", "\n", "senti", "=", "[", "]", "\n", "language", "=", "[", "]", "\n", "for", "train_file", "in", "files", ":", "\n", "                ", "preprocessed_data", "=", "self", ".", "transform_data", "(", "train_file", ",", "preprocessor", ",", "vocabulary", ",", "transformers", ",", "max_sentence_len", ")", "\n", "input", ".", "append", "(", "preprocessed_data", "[", "'text'", "]", ")", "\n", "senti", ".", "append", "(", "preprocessed_data", "[", "'sentiment_label'", "]", ")", "\n", "\n", "", "input_train_matrix", "=", "np", ".", "vstack", "(", "input", ")", "\n", "senti_train_matrix", "=", "np", ".", "hstack", "(", "senti", ")", "\n", "\n", "# join validation and training sets into one train set and one validation set", "\n", "self", ".", "input_data", "=", "[", "input_train_matrix", "]", "\n", "self", ".", "output_data", "=", "[", "to_categorical", "(", "senti_train_matrix", ",", "len", "(", "senti_map", ")", ")", "]", "\n", "self", ".", "nsamples", "=", "input_train_matrix", ".", "shape", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "            ", "input_test", "=", "[", "]", "\n", "senti_test", "=", "[", "]", "\n", "names_test", "=", "[", "]", "\n", "ids_test", "=", "[", "]", "\n", "for", "test_file", "in", "files", ":", "\n", "                ", "preprocessed_data", "=", "self", ".", "transform_data", "(", "test_file", ",", "preprocessor", ",", "vocabulary", ",", "transformers", ",", "max_sentence_len", ")", "\n", "input_test", ".", "append", "(", "preprocessed_data", "[", "'text'", "]", ")", "\n", "senti_test", ".", "append", "(", "to_categorical", "(", "preprocessed_data", "[", "'sentiment_label'", "]", ",", "len", "(", "senti_map", ")", ")", ")", "\n", "names_test", ".", "append", "(", "test_file", "[", "'file_name'", "]", ")", "\n", "ids_test", ".", "append", "(", "preprocessed_data", "[", "'id'", "]", ")", "\n", "\n", "#test sets are treated seperately", "\n", "", "self", ".", "input_data", "=", "input_test", "\n", "self", ".", "output_data", "=", "senti_test", "\n", "self", ".", "names", "=", "names_test", "\n", "self", ".", "ids", "=", "ids_test", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.supervised_data_loader.SupervisedDataLoader.transform_data": [[83, 114], ["utils.config_utils.open_file", "list", "list", "map", "filter", "map", "utils.config_utils.open_file.readlines", "map", "list", "utils.data_utils.convert2indices", "utils.config_utils.open_file.readlines", "x.replace().replace().split", "map", "list", "numpy.asarray", "x.replace().split", "len", "preprocessor.preprocess_text", "map", "list", "numpy.asarray", "x.replace().replace", "utils.data_utils.apply_transformer", "map", "list", "numpy.asarray", "x.replace", "senti_map.get", "map", "x.replace", "lang_map.get"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.open_file", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.convert2indices", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.Preprocessing.preprocess_text", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.apply_transformer"], ["", "", "def", "transform_data", "(", "self", ",", "f", ",", "preprocessor", ",", "vocabulary", ",", "transformers", ",", "max_sentence_len", ")", ":", "\n", "        ", "file", "=", "open_file", "(", "f", "[", "'file_name'", "]", ",", "f", "[", "'file_type'", "]", ")", "\n", "text_type", "=", "f", "[", "'text_type'", "]", "\n", "attributes", "=", "f", "[", "'tags'", "]", "\n", "max_index", "=", "f", "[", "'max_index'", "]", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "curr_tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", ",", "file", ".", "readlines", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "curr_tweets", "=", "map", "(", "lambda", "x", ":", "x", ".", "replace", "(", "'\\r'", ",", "''", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", ",", "file", ".", "readlines", "(", ")", ")", "\n", "", "curr_tweets", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", "==", "max_index", "+", "1", ",", "curr_tweets", ")", ")", "\n", "unk_word_idx", "=", "vocabulary", "[", "'UNK'", "]", "[", "0", "]", "\n", "dummy_word_idx", "=", "vocabulary", "[", "'DUMMY_WORD'", "]", "[", "0", "]", "\n", "\n", "preprocessed_data", "=", "{", "}", "\n", "for", "attribute", "in", "attributes", ":", "\n", "            ", "if", "attribute", "==", "'text'", ":", "\n", "                ", "text", "=", "map", "(", "lambda", "x", ":", "preprocessor", ".", "preprocess_text", "(", "x", "[", "attributes", "[", "attribute", "]", "]", ",", "text_type", ")", ",", "curr_tweets", ")", "\n", "text", "=", "list", "(", "map", "(", "lambda", "x", ":", "apply_transformer", "(", "x", ",", "transformers", ")", ",", "text", ")", ")", "\n", "text_idx", "=", "convert2indices", "(", "text", ",", "vocabulary", ",", "dummy_word_idx", ",", "unk_word_idx", ",", "max_sent_length", "=", "max_sentence_len", ")", "\n", "preprocessed_data", "[", "attribute", "]", "=", "text_idx", "\n", "", "elif", "attribute", "==", "'sentiment_label'", ":", "\n", "                ", "sentiments", "=", "list", "(", "map", "(", "lambda", "x", ":", "senti_map", ".", "get", "(", "x", "[", "attributes", "[", "attribute", "]", "]", ",", "1", ")", ",", "curr_tweets", ")", ")", "\n", "preprocessed_data", "[", "attribute", "]", "=", "np", ".", "asarray", "(", "sentiments", ")", "\n", "", "elif", "attribute", "==", "'language_label'", ":", "\n", "                ", "languages", "=", "list", "(", "map", "(", "lambda", "x", ":", "lang_map", ".", "get", "(", "x", "[", "attributes", "[", "attribute", "]", "]", ")", ",", "curr_tweets", ")", ")", "\n", "preprocessed_data", "[", "attribute", "]", "=", "np", ".", "asarray", "(", "languages", ")", "\n", "", "elif", "attribute", "==", "'id'", ":", "\n", "                ", "ids", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "attributes", "[", "attribute", "]", "]", ",", "curr_tweets", ")", ")", "\n", "preprocessed_data", "[", "attribute", "]", "=", "np", ".", "asarray", "(", "ids", ")", "\n", "\n", "", "", "return", "preprocessed_data", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.supervised_data_loader.SupervisedDataLoader.max_sentence_len": [[115, 118], ["max", "map", "utils.config_utils.compute_max_sent_len"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.compute_max_sent_len"], ["", "def", "max_sentence_len", "(", "self", ",", "config_data", ")", ":", "\n", "        ", "tags", "=", "[", "'input_train_directories'", ",", "'input_valid_directories'", ",", "'input_test_directories'", "]", "\n", "return", "max", "(", "map", "(", "lambda", "x", ":", "compute_max_sent_len", "(", "config_data", "[", "x", "]", ")", ",", "tags", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.supervised_data_loader.SupervisedDataLoader.number_of_samples": [[119, 122], ["sum", "map", "utils.data_utils.number_of_samples"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.supervised_data_loader.SupervisedDataLoader.number_of_samples"], ["", "def", "number_of_samples", "(", "self", ",", "config_data", ")", ":", "\n", "        ", "tags", "=", "[", "'input_train_directories'", ",", "'input_valid_directories'", ",", "'input_test_directories'", "]", "\n", "return", "sum", "(", "map", "(", "lambda", "x", ":", "number_of_samples", "(", "config_data", "[", "x", "]", ")", ",", "tags", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_mixed_iterator.DistantDataParseIterator.__init__": [[36, 58], ["utils.config_utils.get_list_of_files", "set", "utils.parse_utils.Preprocessing", "utils.data_utils.number_of_samples", "map"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.get_list_of_files", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.supervised_data_loader.SupervisedDataLoader.number_of_samples"], ["    ", "def", "__init__", "(", "self", ",", "config_data", ",", "embeddings", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "type", "=", "'generator'", "\n", "train_dirs", "=", "config_data", "[", "'input_{}_directories'", ".", "format", "(", "mode", ")", "]", "\n", "# files: (fname, file_type, tags, text_type, max_sentneces, max_idx)", "\n", "self", ".", "files", "=", "get_list_of_files", "(", "train_dirs", ")", "\n", "max_sentence_len", "=", "config_data", "[", "'max_sentence_length'", "]", "\n", "if", "max_sentence_len", "==", "-", "1", ":", "\n", "            ", "self", ".", "max_sentence_len", "=", "140", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_sentence_len", "=", "max_sentence_len", "\n", "\n", "", "self", ".", "types", "=", "set", "(", "map", "(", "lambda", "x", ":", "x", "[", "'text_type'", "]", ",", "self", ".", "files", ")", ")", "\n", "self", ".", "preprocessor", "=", "Preprocessing", "(", "self", ".", "types", ")", "\n", "self", ".", "vocabulary", "=", "embeddings", ".", "vocabulary", "\n", "self", ".", "transformers", "=", "embeddings", ".", "transformers", "\n", "self", ".", "nsamples", "=", "number_of_samples", "(", "train_dirs", ")", "\n", "\n", "if", "self", ".", "nsamples", "<", "0", ":", "\n", "            ", "for", "f", "in", "self", ".", "files", ":", "\n", "                ", "self", ".", "nsamples", "+=", "f", "[", "'max_sentences'", "]", "\n", "\n", "", "", "self", ".", "nsamples", "=", "self", ".", "nsamples", "/", "config_data", "[", "'nb_epochs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_mixed_iterator.DistantDataParseIterator.flow": [[59, 91], ["int", "list", "len", "map", "numpy.vstack", "numpy.vstack", "numpy.random.permutation", "len", "iterator.get_next_batch", "distant_phase_mixed_iterator.DistantDataParseIterator.process_batch", "tweets.append", "senti_labels.append", "len", "len", "len", "len", "distant_phase_mixed_iterator.SingleFileBatchIterator", "list.remove"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_mixed_iterator.SingleFileBatchIterator.get_next_batch", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator.process_batch"], ["", "def", "flow", "(", "self", ",", "batch_size", "=", "1000", ")", ":", "\n", "        ", "it_batchsize", "=", "int", "(", "batch_size", "/", "len", "(", "self", ".", "files", ")", ")", "\n", "#never ending iterator", "\n", "while", "True", ":", "\n", "            ", "iterators", "=", "list", "(", "map", "(", "lambda", "x", ":", "SingleFileBatchIterator", "(", "x", ",", "it_batchsize", ")", ",", "self", ".", "files", ")", ")", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "iterators", ")", "==", "0", ":", "\n", "                    ", "break", "\n", "", "tweets", ",", "senti_labels", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "iterator", "in", "iterators", ":", "\n", "                    ", "itbatch", "=", "iterator", ".", "get_next_batch", "(", ")", "\n", "if", "not", "itbatch", ":", "\n", "                        ", "iterators", ".", "remove", "(", "iterator", ")", "\n", "continue", "\n", "", "text_idx", "=", "iterator", ".", "text_idx", "\n", "text_type", "=", "iterator", ".", "text_type", "\n", "sentiment_label_idx", "=", "iterator", ".", "sentiment_label_idx", "\n", "itweeets", ",", "isentiments", "=", "self", ".", "process_batch", "(", "itbatch", ",", "text_idx", ",", "text_type", ",", "sentiment_label_idx", ")", "\n", "\n", "tweets", ".", "append", "(", "itweeets", ")", "\n", "senti_labels", ".", "append", "(", "isentiments", ")", "\n", "\n", "", "assert", "len", "(", "tweets", ")", "==", "len", "(", "senti_labels", ")", "\n", "if", "len", "(", "tweets", ")", "==", "0", ":", "\n", "                    ", "break", "\n", "\n", "", "rtweets", "=", "np", ".", "vstack", "(", "tweets", ")", "\n", "rsenti", "=", "np", ".", "vstack", "(", "senti_labels", ")", "\n", "\n", "p", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "rtweets", ")", ")", "\n", "yield", "rtweets", "[", "p", "]", ",", "rsenti", "[", "p", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_mixed_iterator.DistantDataParseIterator.process_batch": [[92, 105], ["map", "list", "utils.data_utils.convert2indices", "numpy.asarray().astype", "list", "list", "map", "keras.utils.np_utils.to_categorical", "map", "map", "distant_phase_mixed_iterator.DistantDataParseIterator.preprocessor.preprocess_text", "numpy.asarray", "len", "utils.data_utils.apply_transformer", "list", "x.decode().replace().split", "x.replace().split", "map", "x.decode().replace", "x.replace", "senti_map.get", "x.decode"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.convert2indices", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.Preprocessing.preprocess_text", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.apply_transformer"], ["", "", "", "def", "process_batch", "(", "self", ",", "batch", ",", "text_idx", ",", "text_type", ",", "sentiment_label_idx", ")", ":", "\n", "        ", "unk_word_idx", "=", "self", ".", "vocabulary", "[", "'UNK'", "]", "[", "0", "]", "\n", "dummy_word_idx", "=", "self", ".", "vocabulary", "[", "'DUMMY_WORD'", "]", "[", "0", "]", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "curr_tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "decode", "(", "'utf-8'", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", ",", "batch", ")", ")", "\n", "", "else", ":", "\n", "            ", "curr_tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", ",", "batch", ")", ")", "\n", "", "tweets", "=", "map", "(", "lambda", "x", ":", "self", ".", "preprocessor", ".", "preprocess_text", "(", "x", "[", "text_idx", "]", ",", "text_type", ")", ",", "curr_tweets", ")", "\n", "tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "apply_transformer", "(", "x", ",", "self", ".", "transformers", ")", ",", "tweets", ")", ")", "\n", "tweet_idx", "=", "convert2indices", "(", "tweets", ",", "self", ".", "vocabulary", ",", "dummy_word_idx", ",", "unk_word_idx", ",", "max_sent_length", "=", "self", ".", "max_sentence_len", ")", "\n", "sentiments", "=", "np", ".", "asarray", "(", "list", "(", "map", "(", "lambda", "x", ":", "senti_map", ".", "get", "(", "x", "[", "sentiment_label_idx", "]", ")", ",", "curr_tweets", ")", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n", "return", "tweet_idx", ",", "to_categorical", "(", "sentiments", ",", "len", "(", "senti_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_mixed_iterator.SingleFileBatchIterator.__init__": [[108, 117], ["utils.config_utils.open_file"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.open_file"], ["    ", "def", "__init__", "(", "self", ",", "ifname", ",", "batch_size", "=", "1000", ")", ":", "\n", "        ", "self", ".", "sentences_left", "=", "ifname", "[", "'max_sentences'", "]", "\n", "self", ".", "text_type", "=", "ifname", "[", "'text_type'", "]", "\n", "self", ".", "max_index", "=", "ifname", "[", "'max_index'", "]", "\n", "self", ".", "ifile", "=", "open_file", "(", "ifname", "[", "'file_name'", "]", ",", "ifname", "[", "'file_type'", "]", ")", "\n", "attributes", "=", "ifname", "[", "'tags'", "]", "\n", "self", ".", "sentiment_label_idx", "=", "attributes", "[", "'sentiment_label'", "]", "\n", "self", ".", "text_idx", "=", "attributes", "[", "'text'", "]", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_mixed_iterator.SingleFileBatchIterator.get_next_batch": [[118, 131], ["itertools.islice", "distant_phase_mixed_iterator.SingleFileBatchIterator.ifile.close", "batch.append", "distant_phase_mixed_iterator.SingleFileBatchIterator.ifile.close"], "methods", ["None"], ["", "def", "get_next_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sentences_left", "<=", "0", ":", "\n", "            ", "self", ".", "ifile", ".", "close", "(", ")", "\n", "return", "[", "]", "\n", "", "batch", "=", "[", "]", "\n", "for", "line", "in", "islice", "(", "self", ".", "ifile", ",", "self", ".", "batch_size", ")", ":", "\n", "            ", "if", "self", ".", "sentences_left", "<=", "0", ":", "\n", "                ", "self", ".", "ifile", ".", "close", "(", ")", "\n", "return", "batch", "\n", "", "batch", ".", "append", "(", "line", ")", "\n", "self", ".", "sentences_left", "-=", "1", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator.__init__": [[33, 55], ["utils.config_utils.get_list_of_files", "set", "utils.parse_utils.Preprocessing", "utils.data_utils.number_of_samples", "map"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.get_list_of_files", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.supervised_data_loader.SupervisedDataLoader.number_of_samples"], ["    ", "def", "__init__", "(", "self", ",", "config_data", ",", "embeddings", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "type", "=", "'generator'", "\n", "train_dirs", "=", "config_data", "[", "'input_{}_directories'", ".", "format", "(", "mode", ")", "]", "\n", "# files: (fname, file_type, tags, text_type, max_sentneces, max_idx)", "\n", "self", ".", "files", "=", "get_list_of_files", "(", "train_dirs", ")", "\n", "max_sentence_len", "=", "config_data", "[", "'max_sentence_length'", "]", "\n", "if", "max_sentence_len", "==", "-", "1", ":", "\n", "            ", "self", ".", "max_sentence_len", "=", "140", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_sentence_len", "=", "max_sentence_len", "\n", "\n", "", "self", ".", "types", "=", "set", "(", "map", "(", "lambda", "x", ":", "x", "[", "'text_type'", "]", ",", "self", ".", "files", ")", ")", "\n", "self", ".", "preprocessor", "=", "Preprocessing", "(", "self", ".", "types", ")", "\n", "self", ".", "vocabulary", "=", "embeddings", ".", "vocabulary", "\n", "self", ".", "transformers", "=", "embeddings", ".", "transformers", "\n", "self", ".", "nsamples", "=", "number_of_samples", "(", "train_dirs", ")", "\n", "\n", "if", "self", ".", "nsamples", "<", "0", ":", "\n", "            ", "for", "f", "in", "self", ".", "files", ":", "\n", "                ", "self", ".", "nsamples", "+=", "f", "[", "'max_sentences'", "]", "\n", "\n", "", "", "self", ".", "nsamples", "=", "self", ".", "nsamples", "/", "config_data", "[", "'nb_epochs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator.process_batch": [[56, 73], ["list", "list", "numpy.asarray", "map", "list", "utils.data_utils.convert2indices", "numpy.asarray", "list", "list", "map", "map", "map", "list", "keras.utils.np_utils.to_categorical", "map", "map", "distant_phase_sequencial_iterator.DistantDataParseIterator.preprocessor.preprocess_text", "map", "x.replace().split", "lang_map.get", "utils.data_utils.apply_transformer", "x.decode().replace().split", "x.replace().split", "senti_map.get", "x.replace", "x.decode().replace", "x.replace", "x.decode"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.convert2indices", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.Preprocessing.preprocess_text", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.apply_transformer"], ["", "def", "process_batch", "(", "self", ",", "batch", ",", "lang_tag", ",", "text_idx", ",", "text_type", ",", "sentiment_label_idx", ")", ":", "\n", "        ", "unk_word_idx", "=", "self", ".", "vocabulary", "[", "'UNK'", "]", "[", "0", "]", "\n", "dummy_word_idx", "=", "self", ".", "vocabulary", "[", "'DUMMY_WORD'", "]", "[", "0", "]", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "curr_tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "decode", "(", "'utf-8'", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", ",", "batch", ")", ")", "\n", "", "else", ":", "\n", "            ", "curr_tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", ",", "batch", ")", ")", "\n", "\n", "", "curr_tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", ",", "curr_tweets", ")", ")", "\n", "lang", "=", "list", "(", "map", "(", "lambda", "x", ":", "lang_map", ".", "get", "(", "x", "[", "lang_tag", "]", ")", ",", "curr_tweets", ")", ")", "\n", "languages", "=", "np", ".", "asarray", "(", "lang", ")", "\n", "tweets", "=", "map", "(", "lambda", "x", ",", "y", ":", "self", ".", "preprocessor", ".", "preprocess_text", "(", "x", "[", "text_idx", "]", ",", "text_type", ",", "language", "=", "y", ")", ",", "curr_tweets", ",", "languages", ")", "\n", "tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "apply_transformer", "(", "x", ",", "self", ".", "transformers", ")", ",", "tweets", ")", ")", "\n", "tweet_idx", "=", "convert2indices", "(", "tweets", ",", "self", ".", "vocabulary", ",", "dummy_word_idx", ",", "unk_word_idx", ",", "max_sent_length", "=", "self", ".", "max_sentence_len", ")", "\n", "sentiments", "=", "np", ".", "asarray", "(", "list", "(", "map", "(", "lambda", "x", ":", "senti_map", ".", "get", "(", "x", "[", "sentiment_label_idx", "]", ")", ",", "curr_tweets", ")", ")", ")", "\n", "\n", "return", "tweet_idx", ",", "to_categorical", "(", "sentiments", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.data_loader.distant_phase_sequencial_iterator.DistantDataParseIterator.flow": [[74, 112], ["utils.config_utils.open_file", "enumerate", "utils.config_utils.open_file.close", "list.append", "map", "list", "utils.data_utils.convert2indices", "numpy.asarray", "len", "list", "list", "map", "list", "map", "map", "distant_phase_sequencial_iterator.DistantDataParseIterator.preprocessor.preprocess_text", "map", "keras.utils.np_utils.to_categorical", "utils.data_utils.apply_transformer", "x.decode().replace().split", "x.replace().split", "senti_map.get", "x.decode().replace", "x.replace", "x.decode"], "methods", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.config_utils.open_file", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.convert2indices", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.parse_utils.Preprocessing.preprocess_text", "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.apply_transformer"], ["", "def", "flow", "(", "self", ",", "batch_size", "=", "1000", ")", ":", "\n", "        ", "unk_word_idx", "=", "self", ".", "vocabulary", "[", "'UNK'", "]", "[", "0", "]", "\n", "dummy_word_idx", "=", "self", ".", "vocabulary", "[", "'DUMMY_WORD'", "]", "[", "0", "]", "\n", "\n", "while", "True", ":", "\n", "            ", "for", "f", "in", "self", ".", "files", ":", "\n", "                ", "max_sentences", "=", "f", "[", "'max_sentences'", "]", "\n", "if", "max_sentences", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "file", "=", "open_file", "(", "f", "[", "'file_name'", "]", ",", "f", "[", "'file_type'", "]", ")", "\n", "text_type", "=", "f", "[", "'text_type'", "]", "\n", "attributes", "=", "f", "[", "'tags'", "]", "\n", "max_index", "=", "f", "[", "'max_index'", "]", "\n", "curr_tweets", "=", "[", "]", "\n", "\n", "text_idx", "=", "attributes", "[", "'text'", "]", "\n", "sentiment_label_idx", "=", "attributes", "[", "'sentiment_label'", "]", "\n", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "file", ")", ":", "\n", "                    ", "curr_tweets", ".", "append", "(", "line", ")", "\n", "if", "len", "(", "curr_tweets", ")", "==", "batch_size", "or", "i", ">=", "max_sentences", ":", "\n", "                        ", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "                            ", "curr_tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "decode", "(", "'utf-8'", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", ",", "curr_tweets", ")", ")", "\n", "", "else", ":", "\n", "                            ", "curr_tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", ",", "curr_tweets", ")", ")", "\n", "\n", "", "tweets", "=", "map", "(", "lambda", "x", ":", "self", ".", "preprocessor", ".", "preprocess_text", "(", "x", "[", "text_idx", "]", ",", "text_type", ")", ",", "curr_tweets", ")", "\n", "tweets", "=", "list", "(", "map", "(", "lambda", "x", ":", "apply_transformer", "(", "x", ",", "self", ".", "transformers", ")", ",", "tweets", ")", ")", "\n", "tweet_idx", "=", "convert2indices", "(", "tweets", ",", "self", ".", "vocabulary", ",", "dummy_word_idx", ",", "unk_word_idx", ",", "max_sent_length", "=", "self", ".", "max_sentence_len", ")", "\n", "\n", "sentiments", "=", "np", ".", "asarray", "(", "list", "(", "map", "(", "lambda", "x", ":", "senti_map", ".", "get", "(", "x", "[", "sentiment_label_idx", "]", ")", ",", "curr_tweets", ")", ")", ")", "\n", "\n", "yield", "tweet_idx", ",", "to_categorical", "(", "sentiments", ",", "3", ")", "\n", "curr_tweets", "=", "[", "]", "\n", "", "if", "i", ">=", "max_sentences", ":", "\n", "                        ", "break", "\n", "\n", "", "", "file", ".", "close", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.architectures.default_cnn.create_default_model": [[8, 64], ["utils.data_utils.load_embedding_matrix", "logging.info", "logging.info", "keras.layers.Input", "keras.models.Model", "keras.models.Model", "config_data.get", "logging.info", "logging.info", "keras.layers.ZeroPadding1D", "keras.layers.Convolution1D", "keras.layers.MaxPooling1D", "keras.layers.Convolution1D", "keras.layers.MaxPooling1D", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Embedding", "keras.layers.Embedding"], "function", ["home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.utils.data_utils.load_embedding_matrix"], ["def", "create_default_model", "(", "config_data", ")", ":", "\n", "    ", "nb_filter", "=", "200", "\n", "filter_length", "=", "6", "\n", "hidden_dims", "=", "nb_filter", "\n", "\n", "embedding_matrix", "=", "load_embedding_matrix", "(", "config_data", ")", "\n", "max_features", "=", "embedding_matrix", ".", "shape", "[", "0", "]", "\n", "embedding_dims", "=", "embedding_matrix", ".", "shape", "[", "1", "]", "\n", "\n", "max_len", "=", "config_data", "[", "'max_sentence_length'", "]", "\n", "\n", "logging", ".", "info", "(", "'Build Model...'", ")", "\n", "logging", ".", "info", "(", "'Embedding Dimensions: ({},{})'", ".", "format", "(", "max_features", ",", "embedding_dims", ")", ")", "\n", "\n", "main_input", "=", "Input", "(", "batch_shape", "=", "(", "None", ",", "max_len", ")", ",", "dtype", "=", "'int32'", ",", "name", "=", "'main_input'", ")", "\n", "if", "not", "config_data", ".", "get", "(", "'random_embedding'", ",", "None", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Pretrained Word Embeddings'", ")", "\n", "embeddings", "=", "Embedding", "(", "\n", "max_features", ",", "\n", "embedding_dims", ",", "\n", "input_length", "=", "max_len", ",", "\n", "weights", "=", "[", "embedding_matrix", "]", ",", "\n", "trainable", "=", "False", "\n", ")", "(", "main_input", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Random Word Embeddings'", ")", "\n", "embeddings", "=", "Embedding", "(", "max_features", ",", "embedding_dims", ",", "init", "=", "'lecun_uniform'", ",", "input_length", "=", "max_len", ")", "(", "main_input", ")", "\n", "\n", "", "zeropadding", "=", "ZeroPadding1D", "(", "filter_length", "-", "1", ")", "(", "embeddings", ")", "\n", "\n", "conv1", "=", "Convolution1D", "(", "\n", "nb_filter", "=", "nb_filter", ",", "\n", "filter_length", "=", "filter_length", ",", "\n", "border_mode", "=", "'valid'", ",", "\n", "activation", "=", "'relu'", ",", "\n", "subsample_length", "=", "1", ")", "(", "zeropadding", ")", "\n", "\n", "max_pooling1", "=", "MaxPooling1D", "(", "pool_length", "=", "4", ",", "stride", "=", "2", ")", "(", "conv1", ")", "\n", "\n", "conv2", "=", "Convolution1D", "(", "\n", "nb_filter", "=", "nb_filter", ",", "\n", "filter_length", "=", "filter_length", ",", "\n", "border_mode", "=", "'valid'", ",", "\n", "activation", "=", "'relu'", ",", "\n", "subsample_length", "=", "1", ")", "(", "max_pooling1", ")", "\n", "\n", "max_pooling2", "=", "MaxPooling1D", "(", "pool_length", "=", "conv2", ".", "_keras_shape", "[", "1", "]", ")", "(", "conv2", ")", "\n", "flatten", "=", "Flatten", "(", ")", "(", "max_pooling2", ")", "\n", "hidden", "=", "Dense", "(", "hidden_dims", ")", "(", "flatten", ")", "\n", "softmax_layer1", "=", "Dense", "(", "3", ",", "activation", "=", "'softmax'", ",", "name", "=", "'sentiment_softmax'", ",", "init", "=", "'lecun_uniform'", ")", "(", "hidden", ")", "\n", "\n", "model", "=", "Model", "(", "input", "=", "[", "main_input", "]", ",", "output", "=", "softmax_layer1", ")", "\n", "\n", "test_model", "=", "Model", "(", "input", "=", "[", "main_input", "]", ",", "output", "=", "[", "softmax_layer1", ",", "hidden", "]", ")", "\n", "\n", "return", "model", ",", "test_model", "", "", ""]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_tf.pearsons_correlation": [[7, 21], ["keras.mean", "keras.mean", "keras.sum", "keras.sum", "keras.sum", "keras.square", "keras.square", "keras.epsilon", "keras.sqrt", "keras.sqrt"], "function", ["None"], ["def", "pearsons_correlation", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_true_mean", "=", "K", ".", "mean", "(", "y_true", ")", "\n", "y_pred_mean", "=", "K", ".", "mean", "(", "y_pred", ")", "\n", "\n", "true_diff_mean", "=", "y_true", "-", "y_true_mean", "\n", "pred_diff_mean", "=", "y_pred", "-", "y_pred_mean", "\n", "\n", "sum_prod_diff_mean", "=", "K", ".", "sum", "(", "true_diff_mean", "*", "pred_diff_mean", ")", "\n", "true_diff_mean_sq", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "true_diff_mean", ")", ")", "\n", "pred_diff_mean_sq", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "pred_diff_mean", ")", ")", "\n", "\n", "r", "=", "sum_prod_diff_mean", "/", "(", "K", ".", "sqrt", "(", "true_diff_mean_sq", ")", "*", "K", ".", "sqrt", "(", "pred_diff_mean_sq", ")", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_tf.f1_score_keras": [[23, 61], ["keras.zeros_like", "keras.expand_dims", "keras.expand_dims", "keras.concatenate", "keras.sum", "keras.cast", "tensorflow.SparseTensor", "keras.sum", "keras.sum", "keras.sum", "tensorflow.select", "tensorflow.select", "tensorflow.select", "keras.mean", "keras.arange", "keras.argmax", "keras.ones_like", "tensorflow.shape", "tensorflow.sparse_tensor_to_dense", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "tensorflow.shape"], "function", ["None"], ["", "def", "f1_score_keras", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "# y_pred_ones[:, K.argmax(y_pred, axis=-1)] = 1", "\n", "\n", "# indices_x = K.arange(start=0, stop=y_true.get_shape()[0])", "\n", "indices_x", "=", "K", ".", "expand_dims", "(", "K", ".", "arange", "(", "start", "=", "0", ",", "stop", "=", "tf", ".", "shape", "(", "y_true", ")", "[", "0", "]", ",", "dtype", "=", "'int64'", ")", ",", "dim", "=", "-", "1", ")", "\n", "indices_y", "=", "K", ".", "expand_dims", "(", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "indices", "=", "K", ".", "concatenate", "(", "(", "indices_x", ",", "indices_y", ")", ")", "\n", "values", "=", "K", ".", "sum", "(", "K", ".", "ones_like", "(", "indices_x", ",", "dtype", "=", "'float32'", ")", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "K", ".", "cast", "(", "tf", ".", "shape", "(", "y_pred_ones", ")", ",", "dtype", "=", "'int64'", ")", "\n", "delta", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n", "y_pred_ones", "=", "y_pred_ones", "+", "tf", ".", "sparse_tensor_to_dense", "(", "delta", ")", "\n", "\n", "# where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "# precision for each class", "\n", "precision", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "pred_cnt", ",", "\n", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "# recall for each class", "\n", "recall", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "gold_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "gold_cnt", ",", "\n", "name", "=", "'racall_f1_semeval'", ")", "\n", "\n", "# f1 for each class", "\n", "f1_class", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "precision", "+", "recall", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "\n", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ",", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "# return average f1 score over all classes", "\n", "return", "K", ".", "mean", "(", "f1_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_tf.f1_score_taskB": [[63, 88], ["keras.zeros_like", "keras.sum", "keras.sum", "keras.sum", "keras.switch", "keras.switch", "keras.switch", "keras.equal", "keras.equal", "keras.equal", "keras.argmax"], "function", ["None"], ["", "def", "f1_score_taskB", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "y_pred_ones", "[", ":", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", "=", "1", "\n", "\n", "# where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "# precision for each class", "\n", "precision", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "# recall for each class", "\n", "recall", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "gold_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "gold_cnt", ")", "\n", "\n", "# f1 for each class", "\n", "f1_class", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "precision", "+", "recall", ",", "0", ")", ",", "0", ",", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ")", "\n", "\n", "# return average f1 score over all classes", "\n", "return", "f1_class", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_tf.f1_score_semeval": [[90, 129], ["keras.zeros_like", "keras.expand_dims", "keras.expand_dims", "keras.concatenate", "keras.sum", "keras.cast", "tensorflow.SparseTensor", "keras.sum", "keras.sum", "keras.sum", "tensorflow.select", "tensorflow.select", "tensorflow.select", "keras.arange", "keras.argmax", "keras.ones_like", "tensorflow.shape", "tensorflow.sparse_tensor_to_dense", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "tensorflow.shape"], "function", ["None"], ["", "def", "f1_score_semeval", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "# y_pred_ones[:, K.argmax(y_pred, axis=-1)] = 1", "\n", "\n", "# indices_x = K.arange(start=0, stop=y_true.get_shape()[0])", "\n", "indices_x", "=", "K", ".", "expand_dims", "(", "K", ".", "arange", "(", "start", "=", "0", ",", "stop", "=", "tf", ".", "shape", "(", "y_true", ",", "name", "=", "'get_indicec_x_shape'", ")", "[", "0", "]", ",", "dtype", "=", "'int64'", ")", ",", "\n", "dim", "=", "-", "1", ")", "\n", "indices_y", "=", "K", ".", "expand_dims", "(", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "indices", "=", "K", ".", "concatenate", "(", "(", "indices_x", ",", "indices_y", ")", ")", "\n", "values", "=", "K", ".", "sum", "(", "K", ".", "ones_like", "(", "indices_x", ",", "dtype", "=", "'float32'", ")", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "K", ".", "cast", "(", "tf", ".", "shape", "(", "y_pred_ones", ")", ",", "dtype", "=", "'int64'", ")", "\n", "delta", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n", "y_pred_ones", "=", "y_pred_ones", "+", "tf", ".", "sparse_tensor_to_dense", "(", "delta", ")", "\n", "\n", "# where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "# precision for each class", "\n", "precision", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "pred_cnt", ",", "\n", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "# recall for each class", "\n", "recall", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "gold_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "gold_cnt", ",", "\n", "name", "=", "'racall_f1_semeval'", ")", "\n", "\n", "# f1 for each class", "\n", "f1_class", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "precision", "+", "recall", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "\n", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ",", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "# return average f1 score over all classes", "\n", "return", "(", "f1_class", "[", "0", "]", "+", "f1_class", "[", "2", "]", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_tf.precision_keras": [[131, 147], ["keras.zeros_like", "keras.sum", "keras.sum", "keras.switch", "keras.mean", "keras.equal", "keras.argmax"], "function", ["None"], ["", "def", "precision_keras", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "y_pred_ones", "[", ":", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", "=", "1", "\n", "\n", "# where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# precision for each class", "\n", "precision", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "# return average f1 score over all classes", "\n", "return", "K", ".", "mean", "(", "precision", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_tf.f1_score_task3": [[149, 186], ["keras.zeros_like", "keras.expand_dims", "keras.expand_dims", "keras.concatenate", "keras.sum", "keras.cast", "tensorflow.SparseTensor", "keras.sum", "keras.sum", "keras.sum", "tensorflow.select", "tensorflow.select", "tensorflow.select", "keras.arange", "keras.argmax", "keras.ones_like", "tensorflow.shape", "tensorflow.sparse_tensor_to_dense", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "keras.equal", "keras.zeros_like", "tensorflow.shape"], "function", ["None"], ["", "def", "f1_score_task3", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "# y_pred_ones = K.T.set_subtensor(y_ppred[K.T.arange(y_true.shape[0]), K.argmax(y_pred, axis=-1)], 1)", "\n", "indices_x", "=", "K", ".", "expand_dims", "(", "K", ".", "arange", "(", "start", "=", "0", ",", "stop", "=", "tf", ".", "shape", "(", "y_true", ",", "name", "=", "'get_indicec_x_shape'", ")", "[", "0", "]", ",", "dtype", "=", "'int64'", ")", ",", "\n", "dim", "=", "-", "1", ")", "\n", "indices_y", "=", "K", ".", "expand_dims", "(", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "indices", "=", "K", ".", "concatenate", "(", "(", "indices_x", ",", "indices_y", ")", ")", "\n", "values", "=", "K", ".", "sum", "(", "K", ".", "ones_like", "(", "indices_x", ",", "dtype", "=", "'float32'", ")", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "K", ".", "cast", "(", "tf", ".", "shape", "(", "y_pred_ones", ")", ",", "dtype", "=", "'int64'", ")", "\n", "delta", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n", "y_pred_ones", "=", "y_pred_ones", "+", "tf", ".", "sparse_tensor_to_dense", "(", "delta", ")", "\n", "\n", "# where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "# precision for each class", "\n", "precision", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "pred_cnt", ",", "\n", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "# recall for each class", "\n", "recall", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "gold_cnt", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "y_true_pred", "/", "gold_cnt", ",", "\n", "name", "=", "'racall_f1_semeval'", ")", "\n", "\n", "# f1 for each class", "\n", "f1_class", "=", "tf", ".", "select", "(", "K", ".", "equal", "(", "precision", "+", "recall", ",", "0", ")", ",", "K", ".", "zeros_like", "(", "y_true_pred", ")", ",", "\n", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ",", "name", "=", "'precision_f1_semeval'", ")", "\n", "\n", "# return average f1 score over all classes", "\n", "return", "f1_class", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_theano.average_precision": [[6, 16], ["keras.T.cumsum", "keras.T.arange", "keras.sum", "keras.T.switch", "keras.T.argsort", "keras.T.eq", "keras.sum"], "function", ["None"], ["def", "average_precision", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_pred_sort_idx", "=", "K", ".", "T", ".", "argsort", "(", "y_pred", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "y_true_sorted", "=", "y_true", "[", "y_pred_sort_idx", "]", "\n", "\n", "true_cumsum", "=", "K", ".", "T", ".", "cumsum", "(", "y_true_sorted", ")", "\n", "true_range", "=", "K", ".", "T", ".", "arange", "(", "1", ",", "y_true", ".", "shape", "[", "0", "]", "+", "1", ")", "\n", "true_sum", "=", "K", ".", "sum", "(", "y_true", ")", "\n", "\n", "#if no prediction is relevant just return 0", "\n", "return", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "true_sum", ",", "0", ")", ",", "0", ",", "K", ".", "sum", "(", "(", "true_cumsum", "/", "true_range", ")", "*", "y_true_sorted", ")", "*", "(", "1", "/", "true_sum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_theano.mean_average_precision": [[18, 29], ["keras.reshape", "keras.reshape", "theano.scan", "keras.mean"], "function", ["None"], ["", "def", "mean_average_precision", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_pred", "=", "K", ".", "reshape", "(", "y_pred", "[", ":", ",", "1", "]", ",", "shape", "=", "(", "y_pred", ".", "shape", "[", "0", "]", "//", "10", ",", "10", ")", ")", "\n", "y_true", "=", "K", ".", "reshape", "(", "y_true", "[", ":", ",", "1", "]", ",", "shape", "=", "(", "y_true", ".", "shape", "[", "0", "]", "//", "10", ",", "10", ")", ")", "\n", "\n", "results", ",", "updates", "=", "scan", "(", "\n", "fn", "=", "average_precision", ",", "\n", "outputs_info", "=", "None", ",", "\n", "sequences", "=", "[", "y_true", ",", "y_pred", "]", "\n", ")", "\n", "\n", "return", "K", ".", "mean", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_theano.pearsons_correlation": [[30, 44], ["keras.mean", "keras.mean", "keras.sum", "keras.sum", "keras.sum", "keras.square", "keras.square", "keras.epsilon", "keras.sqrt", "keras.sqrt"], "function", ["None"], ["", "def", "pearsons_correlation", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_true_mean", "=", "K", ".", "mean", "(", "y_true", ")", "\n", "y_pred_mean", "=", "K", ".", "mean", "(", "y_pred", ")", "\n", "\n", "true_diff_mean", "=", "y_true", "-", "y_true_mean", "\n", "pred_diff_mean", "=", "y_pred", "-", "y_pred_mean", "\n", "\n", "sum_prod_diff_mean", "=", "K", ".", "sum", "(", "true_diff_mean", "*", "pred_diff_mean", ")", "\n", "true_diff_mean_sq", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "true_diff_mean", ")", ")", "\n", "pred_diff_mean_sq", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "pred_diff_mean", ")", ")", "\n", "\n", "r", "=", "sum_prod_diff_mean", "/", "(", "K", ".", "sqrt", "(", "true_diff_mean_sq", ")", "*", "K", ".", "sqrt", "(", "pred_diff_mean_sq", ")", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_theano.f1_score_keras": [[45, 70], ["keras.zeros_like", "keras.T.set_subtensor", "keras.sum", "keras.sum", "keras.sum", "keras.T.switch", "keras.T.switch", "keras.T.switch", "keras.mean", "keras.T.eq", "keras.T.eq", "keras.T.eq", "keras.T.arange", "keras.argmax"], "function", ["None"], ["", "def", "f1_score_keras", "(", "y_true", ",", "y_pred", ")", ":", "\n", "#convert probas to 0,1", "\n", "    ", "y_ppred", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "y_pred_ones", "=", "K", ".", "T", ".", "set_subtensor", "(", "y_ppred", "[", "K", ".", "T", ".", "arange", "(", "y_true", ".", "shape", "[", "0", "]", ")", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", ",", "1", ")", "\n", "\n", "#where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "#precision for each class", "\n", "precision", "=", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "#recall for each class", "\n", "recall", "=", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "gold_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "gold_cnt", ")", "\n", "\n", "#f1 for each class", "\n", "f1_class", "=", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "precision", "+", "recall", ",", "0", ")", ",", "0", ",", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ")", "\n", "\n", "#return average f1 score over all classes", "\n", "return", "K", ".", "mean", "(", "f1_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_theano.f1_score_taskB": [[72, 97], ["keras.zeros_like", "keras.sum", "keras.sum", "keras.sum", "keras.switch", "keras.switch", "keras.switch", "keras.equal", "keras.equal", "keras.equal", "keras.argmax"], "function", ["None"], ["", "def", "f1_score_taskB", "(", "y_true", ",", "y_pred", ")", ":", "\n", "#convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "y_pred_ones", "[", ":", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", "=", "1", "\n", "\n", "#where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "#precision for each class", "\n", "precision", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "#recall for each class", "\n", "recall", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "gold_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "gold_cnt", ")", "\n", "\n", "#f1 for each class", "\n", "f1_class", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "precision", "+", "recall", ",", "0", ")", ",", "0", ",", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ")", "\n", "\n", "#return average f1 score over all classes", "\n", "return", "f1_class", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_theano.f1_score_semeval": [[98, 123], ["keras.zeros_like", "keras.T.set_subtensor", "keras.sum", "keras.sum", "keras.sum", "keras.T.switch", "keras.T.switch", "keras.T.switch", "keras.T.eq", "keras.T.eq", "keras.T.eq", "keras.T.arange", "keras.argmax"], "function", ["None"], ["", "def", "f1_score_semeval", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# convert probas to 0,1", "\n", "    ", "y_ppred", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "y_pred_ones", "=", "K", ".", "T", ".", "set_subtensor", "(", "y_ppred", "[", "K", ".", "T", ".", "arange", "(", "y_true", ".", "shape", "[", "0", "]", ")", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", ",", "1", ")", "\n", "\n", "# where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "# for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "# precision for each class", "\n", "precision", "=", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "# recall for each class", "\n", "recall", "=", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "gold_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "gold_cnt", ")", "\n", "\n", "# f1 for each class", "\n", "f1_class", "=", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "precision", "+", "recall", ",", "0", ")", ",", "0", ",", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ")", "\n", "\n", "#return average f1 score over all classes", "\n", "return", "(", "f1_class", "[", "0", "]", "+", "f1_class", "[", "2", "]", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_theano.precision_keras": [[124, 140], ["keras.zeros_like", "keras.sum", "keras.sum", "keras.switch", "keras.mean", "keras.equal", "keras.argmax"], "function", ["None"], ["", "def", "precision_keras", "(", "y_true", ",", "y_pred", ")", ":", "\n", "#convert probas to 0,1", "\n", "    ", "y_pred_ones", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "y_pred_ones", "[", ":", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", "=", "1", "\n", "\n", "#where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#precision for each class", "\n", "precision", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "#return average f1 score over all classes", "\n", "return", "K", ".", "mean", "(", "precision", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation_metrics.evaluation_metrics_theano.f1_score_task3": [[142, 167], ["keras.zeros_like", "keras.T.set_subtensor", "keras.sum", "keras.sum", "keras.sum", "keras.T.switch", "keras.T.switch", "keras.T.switch", "keras.T.eq", "keras.T.eq", "keras.T.eq", "keras.T.arange", "keras.argmax"], "function", ["None"], ["", "def", "f1_score_task3", "(", "y_true", ",", "y_pred", ")", ":", "\n", "#convert probas to 0,1", "\n", "    ", "y_ppred", "=", "K", ".", "zeros_like", "(", "y_true", ")", "\n", "y_pred_ones", "=", "K", ".", "T", ".", "set_subtensor", "(", "y_ppred", "[", "K", ".", "T", ".", "arange", "(", "y_true", ".", "shape", "[", "0", "]", ")", ",", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "]", ",", "1", ")", "\n", "\n", "#where y_ture=1 and y_pred=1 -> true positive", "\n", "y_true_pred", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many where classified as said class", "\n", "pred_cnt", "=", "K", ".", "sum", "(", "y_pred_ones", ",", "axis", "=", "0", ")", "\n", "\n", "#for each class: how many are true members of said class", "\n", "gold_cnt", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "#precision for each class", "\n", "precision", "=", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "pred_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "pred_cnt", ")", "\n", "\n", "#recall for each class", "\n", "recall", "=", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "gold_cnt", ",", "0", ")", ",", "0", ",", "y_true_pred", "/", "gold_cnt", ")", "\n", "\n", "#f1 for each class", "\n", "f1_class", "=", "K", ".", "T", ".", "switch", "(", "K", ".", "T", ".", "eq", "(", "precision", "+", "recall", ",", "0", ")", ",", "0", ",", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ")", "\n", "\n", "#return average f1 score over all classes", "\n", "return", "f1_class", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation.senti_lang_eval.evaluate": [[7, 43], ["zip", "keras.utils.np_utils.probas_to_classes", "model.predict", "keras.utils.np_utils.probas_to_classes", "sklearn.metrics.f1_score", "open", "zip", "type", "numpy.mean", "keras.utils.np_utils.probas_to_classes.tolist", "open.write"], "function", ["None"], ["def", "evaluate", "(", "model", ",", "test_iteraotr", ",", "experiment_name", ",", "ofname", ")", ":", "\n", "    ", "inputs", "=", "test_iteraotr", ".", "input_data", "\n", "outputs", "=", "test_iteraotr", ".", "output_data", "\n", "names", "=", "test_iteraotr", ".", "names", "\n", "ids_list", "=", "test_iteraotr", ".", "ids", "\n", "\n", "output_line", "=", "'{}\\n'", ".", "format", "(", "experiment_name", ")", "\n", "for", "i", ",", "o", ",", "n", ",", "ids", "in", "zip", "(", "inputs", ",", "outputs", ",", "names", ",", "ids_list", ")", ":", "\n", "        ", "y_test_senti", "=", "probas_to_classes", "(", "o", ")", "\n", "\n", "y_pred", "=", "model", ".", "predict", "(", "i", ")", "\n", "\n", "if", "type", "(", "y_pred", ")", "==", "list", ":", "\n", "            ", "y_pred_senti", "=", "y_pred", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "y_pred_senti", "=", "y_pred", "\n", "\n", "", "y_pred_senti_cls", "=", "probas_to_classes", "(", "y_pred_senti", ")", "\n", "\n", "f1_score_senti", "=", "f1_score", "(", "y_test_senti", ",", "y_pred_senti_cls", ",", "average", "=", "None", ",", "pos_label", "=", "None", ",", "labels", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "\n", "output_line", "+=", "'{}\\n'", ".", "format", "(", "n", ")", "\n", "output_line", "+=", "'Sentiment:\\tF1 Score:{}\\tF1 Score SEval:{}\\tF1 Score Neg:{}\\tF1 Score Neut:{}\\tF1 Score Pos:{}\\n'", ".", "format", "(", "\n", "np", ".", "mean", "(", "f1_score_senti", ")", ",", "\n", "0.5", "*", "(", "f1_score_senti", "[", "0", "]", "+", "f1_score_senti", "[", "2", "]", ")", ",", "\n", "f1_score_senti", "[", "0", "]", ",", "\n", "f1_score_senti", "[", "1", "]", ",", "\n", "f1_score_senti", "[", "2", "]", "\n", ")", "\n", "\n", "ofile", "=", "open", "(", "ofname", ",", "'wt'", ")", "\n", "for", "id", ",", "pred", "in", "zip", "(", "ids", ",", "y_pred_senti_cls", ".", "tolist", "(", ")", ")", ":", "\n", "            ", "oline", "=", "'{}\\t{}\\n'", ".", "format", "(", "id", ",", "pred", ")", "\n", "ofile", ".", "write", "(", "oline", ")", "\n", "\n", "", "", "return", "output_line", "", "", ""]], "home.repos.pwc.inspect_result.spinningbytes_deep-mlsa.evaluation.senti_lang_eval_sentence_emb_output.evaluate": [[5, 40], ["zip", "open", "keras.utils.np_utils.probas_to_classes", "model.predict", "keras.utils.np_utils.probas_to_classes", "sklearn.metrics.f1_score", "numpy.mean", "open.write", "str", "list.tolist"], "function", ["None"], ["def", "evaluate", "(", "model", ",", "test_iteraotr", ",", "experiment_name", ",", "ofname", ")", ":", "\n", "    ", "inputs", "=", "test_iteraotr", ".", "input_data", "\n", "outputs", "=", "test_iteraotr", ".", "output_data", "\n", "names", "=", "test_iteraotr", ".", "names", "\n", "\n", "for", "i", ",", "o", ",", "n", "in", "zip", "(", "inputs", ",", "outputs", ",", "names", ")", ":", "\n", "        ", "ofile", "=", "open", "(", "ofname", ",", "'wt'", ")", "\n", "y_test_senti", "=", "probas_to_classes", "(", "o", ")", "\n", "\n", "model_output", "=", "model", ".", "predict", "(", "i", ")", "\n", "sentence_embeddings", "=", "model_output", "[", "1", "]", "\n", "y_pred", "=", "model_output", "[", "0", "]", "\n", "\n", "y_pred_senti", "=", "y_pred", "\n", "\n", "y_pred_senti_cls", "=", "probas_to_classes", "(", "y_pred_senti", ")", "\n", "\n", "f1_score_senti", "=", "f1_score", "(", "y_test_senti", ",", "y_pred_senti_cls", ",", "average", "=", "None", ",", "pos_label", "=", "None", ",", "labels", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "\n", "output_line", "=", "'{}\\n'", ".", "format", "(", "n", ")", "\n", "output_line", "+=", "'Sentiment:\\tF1 Score:{}\\tF1 Score SEval:{}\\tF1 Score Neg:{}\\tF1 Score Neut:{}\\tF1 Score Pos:{}\\n'", ".", "format", "(", "\n", "np", ".", "mean", "(", "f1_score_senti", ")", ",", "\n", "0.5", "*", "(", "f1_score_senti", "[", "0", "]", "+", "f1_score_senti", "[", "2", "]", ")", ",", "\n", "f1_score_senti", "[", "0", "]", ",", "\n", "f1_score_senti", "[", "1", "]", ",", "\n", "f1_score_senti", "[", "2", "]", "\n", ")", "\n", "\n", "for", "list", "in", "sentence_embeddings", ":", "\n", "            ", "slist", "=", "[", "str", "(", "x", ")", "for", "x", "in", "list", ".", "tolist", "(", ")", "]", "\n", "\n", "file_output_line", "=", "'{}\\n'", ".", "format", "(", "' '", ".", "join", "(", "slist", ")", ")", "\n", "ofile", ".", "write", "(", "file_output_line", ")", "\n", "\n", "", "", "return", "output_line", "", "", ""]]}