{"home.repos.pwc.inspect_result.berlino_nest-trans-em18.None.config.Config.__init__": [[5, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "\"./\"", "\n", "\n", "# for data loader", "\n", "self", ".", "data_set", "=", "\"genia_sample\"", "\n", "self", ".", "batch_size", "=", "64", "\n", "self", ".", "if_shuffle", "=", "True", "\n", "\n", "# override when loading data", "\n", "self", ".", "voc_size", "=", "None", "\n", "self", ".", "pos_size", "=", "None", "\n", "self", ".", "label_size", "=", "None", "\n", "self", ".", "actions", "=", "None", "\n", "\n", "# embed size", "\n", "self", ".", "token_embed", "=", "100", "\n", "self", ".", "action_embed", "=", "20", "\n", "self", ".", "entity_embed", "=", "self", ".", "action_embed", "\n", "self", ".", "pos_embed", "=", "20", "\n", "self", ".", "input_dropout", "=", "0.5", "\n", "self", ".", "lstm_dropout", "=", "0.5", "\n", "\n", "# for lstm", "\n", "self", ".", "if_treelstm", "=", "True", "\n", "self", ".", "rnn_layers", "=", "1", "\n", "self", ".", "hidden_dim", "=", "128", "\n", "\n", "# reversed, for convenience of buffer", "\n", "self", ".", "reversed", "=", "True", "\n", "\n", "# for training", "\n", "self", ".", "embed_path", "=", "self", ".", "root_path", "+", "\"/data/word_vec_{0}_{1}.pkl\"", ".", "format", "(", "self", ".", "data_set", ",", "self", ".", "token_embed", ")", "\n", "self", ".", "epoch", "=", "500", "\n", "self", ".", "if_gpu", "=", "False", "\n", "self", ".", "opt", "=", "\"Adam\"", "\n", "self", ".", "lr", "=", "0.005", "# [0.3, 0.00006]", "\n", "self", ".", "l2", "=", "1e-4", "\n", "self", ".", "check_every", "=", "1", "\n", "self", ".", "clip_norm", "=", "3", "\n", "\n", "# for early stop", "\n", "self", ".", "lr_patience", "=", "6", "\n", "self", ".", "decay_patience", "=", "3", "\n", "\n", "self", ".", "pre_trained", "=", "True", "\n", "self", ".", "data_path", "=", "self", ".", "root_path", "+", "\"/data/{0}\"", ".", "format", "(", "self", ".", "data_set", ")", "\n", "self", ".", "model_path", "=", "self", ".", "root_path", "+", "\"/dumps/{0}_model.pt\"", ".", "format", "(", "self", ".", "data_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.None.config.Config.__repr__": [[55, 57], ["str", "vars"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "vars", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.None.gen_data.batch_stat": [[10, 30], ["zip", "print", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "collections.defaultdict.items", "start_dic[].append", "end_dic[].append", "len", "len", "len", "len"], "function", ["None"], ["def", "batch_stat", "(", "batches", ")", ":", "\n", "    ", "all_num", "=", "0", "\n", "start_num", "=", "0", "\n", "end_num", "=", "0", "\n", "for", "token_batch", ",", "pos_batch", ",", "label_batch", ",", "action_batch", "in", "zip", "(", "*", "batches", ")", ":", "\n", "        ", "for", "labels", "in", "label_batch", ":", "\n", "            ", "start_dic", "=", "defaultdict", "(", "list", ")", "\n", "end_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "ent", "in", "labels", ":", "\n", "                ", "start_dic", "[", "(", "ent", "[", "0", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "end_dic", "[", "(", "ent", "[", "1", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "all_num", "+=", "1", "\n", "", "for", "k", ",", "v", "in", "start_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "start_num", "+=", "len", "(", "v", ")", "\n", "", "", "for", "k", ",", "v", "in", "end_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "end_num", "+=", "len", "(", "v", ")", "\n", "\n", "", "", "", "", "print", "(", "\"All {}, start {}, end {}\"", ".", "format", "(", "all_num", ",", "start_num", ",", "end_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.tree_rnn.TreeLSTM.__init__": [[7, 16], ["torch.Module.__init__", "tree_rnn.LeafModule", "tree_rnn.ReduceModule", "tree_rnn.UnaryModule"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "reduce_linears", ",", "unary_linears", ")", ":", "\n", "        ", "\"\"\"\n        linears: 4 * 2label_size \n        \"\"\"", "\n", "super", "(", "TreeLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "leaf_module", "=", "LeafModule", "(", "input_dim", ",", "hidden_dim", ")", "\n", "self", ".", "reduce_module", "=", "ReduceModule", "(", "reduce_linears", ")", "\n", "self", ".", "unary_moduel", "=", "UnaryModule", "(", "unary_linears", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.tree_rnn.TreeLSTM.forward": [[17, 26], ["tree_rnn.TreeLSTM.leaf_module.forward", "tree_rnn.TreeLSTM.reduce_module.forward", "tree_rnn.TreeLSTM.unary_moduel.forward"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.forward", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.forward", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.forward"], ["", "def", "forward", "(", "self", ",", "node_str", ",", "vecs", ")", ":", "\n", "        ", "if", "node_str", "==", "\"leaf\"", ":", "\n", "            ", "return", "self", ".", "leaf_module", ".", "forward", "(", "vecs", ")", "\n", "", "elif", "node_str", "==", "\"reduce\"", ":", "\n", "            ", "return", "self", ".", "reduce_module", ".", "forward", "(", "*", "vecs", ")", "\n", "", "elif", "node_str", "==", "\"unary\"", ":", "\n", "            ", "return", "self", ".", "unary_moduel", ".", "forward", "(", "*", "vecs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.tree_rnn.LeafModule.__init__": [[31, 35], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.__init__"], ["def", "__init__", "(", "self", ",", "w_ixh", ",", "w_oxh", ")", ":", "\n", "        ", "super", "(", "LeafModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_ixh", "=", "w_ixh", "\n", "self", ".", "w_oxh", "=", "w_oxh", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.tree_rnn.LeafModule.forward": [[36, 41], ["tree_rnn.LeafModule.w_ixh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "tree_rnn.LeafModule.w_oxh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_vec", ")", ":", "\n", "        ", "c", "=", "self", ".", "w_ixh", "(", "input_vec", ")", "\n", "o", "=", "F", ".", "sigmoid", "(", "self", ".", "w_oxh", "(", "input_vec", ")", ")", "\n", "h", "=", "o", "*", "F", ".", "tanh", "(", "c", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.tree_rnn.ReduceModule.__init__": [[43, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduce_linears", ")", ":", "\n", "        ", "super", "(", "ReduceModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduce_linears", "=", "reduce_linears", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.tree_rnn.ReduceModule.forward": [[47, 56], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lc", ",", "lh", ",", "rc", ",", "rh", ",", "label", ")", ":", "\n", "        ", "lrh", "=", "torch", ".", "cat", "(", "[", "lh", ",", "rh", "]", ",", "0", ")", "\n", "i", "=", "F", ".", "sigmoid", "(", "self", ".", "reduce_linears", "[", "0", "]", "[", "label", "]", "(", "lrh", ")", ")", "\n", "lf", "=", "F", ".", "sigmoid", "(", "self", ".", "reduce_linears", "[", "1", "]", "[", "label", "]", "(", "lrh", ")", ")", "\n", "rf", "=", "F", ".", "sigmoid", "(", "self", ".", "reduce_linears", "[", "2", "]", "[", "label", "]", "(", "lrh", ")", ")", "\n", "update", "=", "F", ".", "tanh", "(", "self", ".", "reduce_linears", "[", "3", "]", "[", "label", "]", "(", "lrh", ")", ")", "\n", "c", "=", "i", "*", "update", "+", "lf", "*", "lc", "+", "rf", "*", "rc", "\n", "h", "=", "F", ".", "tanh", "(", "c", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.tree_rnn.UnaryModule.__init__": [[58, 61], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "unary_linears", ")", ":", "\n", "        ", "super", "(", "UnaryModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unary_linears", "=", "unary_linears", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.tree_rnn.UnaryModule.forward": [[62, 69], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c", ",", "h", ",", "label", ")", ":", "\n", "        ", "i", "=", "F", ".", "sigmoid", "(", "self", ".", "unary_linears", "[", "0", "]", "[", "label", "]", "(", "h", ")", ")", "\n", "f", "=", "F", ".", "sigmoid", "(", "self", ".", "unary_linears", "[", "1", "]", "[", "label", "]", "(", "h", ")", ")", "\n", "update", "=", "F", ".", "tanh", "(", "self", ".", "unary_linears", "[", "2", "]", "[", "label", "]", "(", "h", ")", ")", "\n", "c", "=", "i", "*", "update", "+", "f", "*", "c", "\n", "h", "=", "F", ".", "tanh", "(", "c", ")", "\n", "return", "h", ",", "c", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.Stack.__init__": [[11, 21], ["stack_lstm.StackRNN"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cell", ",", "initial_state", ",", "reduce_linears", ",", "unary_linears", ",", "empty_vec", ")", ":", "\n", "        ", "self", ".", "stack", "=", "StackRNN", "(", "cell", ",", "initial_state", ")", "\n", "\n", "# partial tree representations", "\n", "self", ".", "empty", "=", "(", "empty_vec", ",", "None", ")", "\n", "self", ".", "embeds", "=", "[", "self", ".", "empty", "]", "\n", "\n", "# vanilla recursive rnn", "\n", "self", ".", "reduce_linears", "=", "reduce_linears", "\n", "self", ".", "unary_linears", "=", "unary_linears", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.Stack.shift": [[22, 25], ["stack.Stack.embeds.append", "stack.Stack.stack.push"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push"], ["", "def", "shift", "(", "self", ",", "word_vec", ")", ":", "\n", "        ", "self", ".", "embeds", ".", "append", "(", "(", "word_vec", ",", "None", ")", ")", "\n", "self", ".", "stack", ".", "push", "(", "word_vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.Stack.reduceX": [[26, 35], ["stack.Stack.stack.pop", "stack.Stack.stack.pop", "stack.Stack.embeds.pop", "stack.Stack.embeds.pop", "torch.tanh", "torch.tanh", "stack.Stack.embeds.append", "stack.Stack.stack.push", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push"], ["", "def", "reduceX", "(", "self", ",", "label_id", ")", ":", "\n", "        ", "self", ".", "stack", ".", "pop", "(", ")", "\n", "self", ".", "stack", ".", "pop", "(", ")", "\n", "embed_2", ",", "_", "=", "self", ".", "embeds", ".", "pop", "(", ")", "\n", "embed_1", ",", "_", "=", "self", ".", "embeds", ".", "pop", "(", ")", "\n", "\n", "new_embed", "=", "F", ".", "tanh", "(", "self", ".", "reduce_linears", "[", "label_id", "]", "(", "torch", ".", "cat", "(", "[", "embed_1", ",", "embed_2", "]", ",", "0", ")", ")", ")", "\n", "self", ".", "embeds", ".", "append", "(", "(", "new_embed", ",", "label_id", ")", ")", "\n", "self", ".", "stack", ".", "push", "(", "new_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.Stack.unaryX": [[36, 42], ["stack.Stack.stack.pop", "stack.Stack.embeds.pop", "torch.tanh", "torch.tanh", "stack.Stack.embeds.append", "stack.Stack.stack.push"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push"], ["", "def", "unaryX", "(", "self", ",", "label_id", ")", ":", "\n", "        ", "self", ".", "stack", ".", "pop", "(", ")", "\n", "embed", ",", "_", "=", "self", ".", "embeds", ".", "pop", "(", ")", "\n", "new_embed", "=", "F", ".", "tanh", "(", "self", ".", "unary_linears", "[", "label_id", "]", "(", "embed", ")", ")", "\n", "self", ".", "embeds", ".", "append", "(", "(", "new_embed", ",", "label_id", ")", ")", "\n", "self", ".", "stack", ".", "push", "(", "new_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.Stack.pop": [[43, 51], ["stack.Stack.stack.pop", "len", "[].squeeze"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop"], ["", "@", "DeprecationWarning", "\n", "def", "pop", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        different from the pop operation of stack-lstm\n        \"\"\"", "\n", "assert", "len", "(", "self", ".", "stack", ")", "==", "2", "\n", "element", "=", "self", ".", "stack", ".", "pop", "(", ")", "\n", "return", "(", "element", "[", "0", "]", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "element", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.Stack.embedding": [[52, 56], ["stack.Stack.stack.embedding"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding"], ["", "def", "embedding", "(", "self", ")", ":", "\n", "        ", "stack_summary", "=", "self", ".", "stack", ".", "embedding", "(", ")", "\n", "embed", "=", "self", ".", "embeds", "[", "-", "1", "]", "[", "0", "]", "\n", "return", "(", "stack_summary", ",", "embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.Stack.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "stack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.Stack.top3": [[60, 64], ["stack.Stack.stack.top3", "stack.Stack.stack.top3", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.top3", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.top3"], ["", "def", "top3", "(", "self", ")", ":", "\n", "        ", "t3", "=", "self", ".", "stack", ".", "top3", "(", ")", "\n", "assert", "len", "(", "t3", ")", "==", "3", "\n", "return", "self", ".", "stack", ".", "top3", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.__init__": [[70, 81], ["stack_lstm.StackRNN", "tree_rnn.LeafModule", "tree_rnn.ReduceModule", "tree_rnn.UnaryModule"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cell", ",", "initial_state", ",", "ih_linear", ",", "oh_linear", ",", "reduce_linears", ",", "unary_linears", ",", "empty_vec", ")", ":", "\n", "        ", "self", ".", "stack", "=", "StackRNN", "(", "cell", ",", "initial_state", ")", "\n", "\n", "# tree lstm", "\n", "self", ".", "leaf_module", "=", "LeafModule", "(", "ih_linear", ",", "oh_linear", ")", "\n", "self", ".", "reduce_module", "=", "ReduceModule", "(", "reduce_linears", ")", "\n", "self", ".", "unary_module", "=", "UnaryModule", "(", "unary_linears", ")", "\n", "\n", "# partial tree representations", "\n", "self", ".", "empty", "=", "(", "(", "empty_vec", ",", "empty_vec", ")", ",", "None", ")", "\n", "self", ".", "embeds", "=", "[", "self", ".", "empty", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.shift": [[83, 87], ["stack.AugStack.leaf_module.forward", "stack.AugStack.embeds.append", "stack.AugStack.stack.push"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.forward", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push"], ["", "def", "shift", "(", "self", ",", "word_vec", ")", ":", "\n", "        ", "h", ",", "c", "=", "self", ".", "leaf_module", ".", "forward", "(", "word_vec", ")", "\n", "self", ".", "embeds", ".", "append", "(", "(", "(", "h", ",", "c", ")", ",", "None", ")", ")", "\n", "self", ".", "stack", ".", "push", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.reduceX": [[88, 102], ["stack.AugStack.stack.pop", "stack.AugStack.stack.pop", "stack.AugStack.embeds.pop", "stack.AugStack.embeds.pop", "stack.AugStack.reduce_module.forward", "stack.AugStack.embeds.append", "stack.AugStack.stack.push"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.forward", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push"], ["", "def", "reduceX", "(", "self", ",", "label_id", ")", ":", "\n", "        ", "self", ".", "stack", ".", "pop", "(", ")", "\n", "self", ".", "stack", ".", "pop", "(", ")", "\n", "(", "h_2", ",", "c_2", ")", ",", "_", "=", "self", ".", "embeds", ".", "pop", "(", ")", "\n", "(", "h_1", ",", "c_1", ")", ",", "_", "=", "self", ".", "embeds", ".", "pop", "(", ")", "\n", "\n", "# (h_2, c_2) = self.stack.pop()", "\n", "# (h_1, c_1) = self.stack.pop()", "\n", "# self.embeds.pop()", "\n", "# self.embeds.pop()", "\n", "\n", "h", ",", "c", "=", "self", ".", "reduce_module", ".", "forward", "(", "c_1", ",", "h_1", ",", "c_2", ",", "h_2", ",", "label_id", ")", "\n", "self", ".", "embeds", ".", "append", "(", "(", "(", "h", ",", "c", ")", ",", "label_id", ")", ")", "\n", "self", ".", "stack", ".", "push", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.unaryX": [[103, 113], ["stack.AugStack.stack.pop", "stack.AugStack.embeds.pop", "stack.AugStack.unary_module.forward", "stack.AugStack.embeds.append", "stack.AugStack.stack.push"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.forward", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push"], ["", "def", "unaryX", "(", "self", ",", "label_id", ")", ":", "\n", "        ", "self", ".", "stack", ".", "pop", "(", ")", "\n", "(", "h_", ",", "c_", ")", ",", "_", "=", "self", ".", "embeds", ".", "pop", "(", ")", "\n", "\n", "# (h_, c_ ) = self.stack.pop()", "\n", "# self.embeds.pop()", "\n", "\n", "h", ",", "c", "=", "self", ".", "unary_module", ".", "forward", "(", "c_", ",", "h_", ",", "label_id", ")", "\n", "self", ".", "embeds", ".", "append", "(", "(", "(", "h", ",", "c", ")", ",", "label_id", ")", ")", "\n", "self", ".", "stack", ".", "push", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.embedding": [[114, 118], ["stack.AugStack.stack.embedding"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding"], ["", "def", "embedding", "(", "self", ")", ":", "\n", "        ", "stack_summary", "=", "self", ".", "stack", ".", "embedding", "(", ")", "\n", "h", "=", "self", ".", "embeds", "[", "-", "1", "]", "[", "0", "]", "[", "0", "]", "\n", "return", "(", "stack_summary", ",", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.top3": [[119, 123], ["stack.AugStack.stack.top3", "stack.AugStack.stack.top3", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.top3", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.top3"], ["", "def", "top3", "(", "self", ")", ":", "\n", "        ", "t3", "=", "self", ".", "stack", ".", "top3", "(", ")", "\n", "assert", "len", "(", "t3", ")", "==", "3", "\n", "return", "self", ".", "stack", ".", "top3", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.__len__": [[124, 126], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "stack", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.__init__": [[7, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cell", ",", "initial_state", ",", "if_cell", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        if_cell: support LSTM that function like LSTMcell\n        \"\"\"", "\n", "if", "if_cell", ":", "\n", "            ", "self", ".", "real_cell", "=", "cell", "\n", "", "else", ":", "\n", "            ", "self", ".", "fake_cell", "=", "cell", "\n", "self", ".", "real_cell", "=", "self", ".", "cell", "\n", "", "self", ".", "state", "=", "[", "initial_state", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push": [[18, 24], ["vec.unsqueeze.unsqueeze.unsqueeze", "stack_lstm.StackRNN.state.append", "stack_lstm.StackRNN.real_cell"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "vec", ")", ":", "\n", "        ", "\"\"\"\n        state <hidden_vec, cell_vec>\n        \"\"\"", "\n", "vec", "=", "vec", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "state", ".", "append", "(", "self", ".", "real_cell", "(", "vec", ",", "self", ".", "state", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.pop": [[25, 28], ["stack_lstm.StackRNN.state.pop", "top_state[].squeeze", "top_state[].squeeze"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "top_state", "=", "self", ".", "state", ".", "pop", "(", ")", "\n", "return", "(", "top_state", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "top_state", "[", "1", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.embedding": [[29, 32], ["[].squeeze", "len"], "methods", ["None"], ["", "def", "embedding", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "state", ")", ">", "0", "\n", "return", "self", ".", "state", "[", "-", "1", "]", "[", "0", "]", ".", "squeeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.top3": [[33, 38], ["len", "[].squeeze", "[].squeeze", "[].squeeze", "s[].squeeze", "[].squeeze", "len"], "methods", ["None"], ["", "def", "top3", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ")", ">=", "3", ":", "\n", "            ", "return", "(", "self", ".", "state", "[", "-", "3", "]", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "self", ".", "state", "[", "-", "2", "]", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "self", ".", "state", "[", "-", "1", "]", "[", "0", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "state", "[", "0", "]", "[", "0", "]", ".", "squeeze", "(", "0", ")", "]", "*", "(", "3", "-", "len", "(", "self", ")", "-", "1", ")", "+", "[", "s", "[", "0", "]", ".", "squeeze", "(", "0", ")", "for", "s", "in", "self", ".", "state", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.cell": [[39, 45], ["input_v.unsqueeze.unsqueeze.unsqueeze", "stack_lstm.StackRNN.fake_cell", "state[].unsqueeze", "state[].unsqueeze", "new_state[].squeeze", "new_state[].squeeze"], "methods", ["None"], ["", "", "@", "DeprecationWarning", "\n", "def", "cell", "(", "self", ",", "input_v", ",", "state", ")", ":", "\n", "        ", "input_v", "=", "input_v", ".", "unsqueeze", "(", "0", ")", "\n", "state", "=", "(", "state", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ",", "state", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "ouput", ",", "new_state", "=", "self", ".", "fake_cell", "(", "input_v", ",", "state", ")", "\n", "return", "(", "new_state", "[", "0", "]", ".", "squeeze", "(", "0", ")", ",", "new_state", "[", "1", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "state", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.BufferR.__init__": [[50, 61], ["vecs.size"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vecs", ",", "embeds", ",", "empty", ")", ":", "\n", "        ", "\"\"\"\n        vecs with dimention sent_len * dim, input is already reversed\n        embeds with dimention sent_len * input_dim, input is already reversed\n        \"\"\"", "\n", "sent_len", ",", "dim", "=", "vecs", ".", "size", "(", ")", "\n", "self", ".", "buffer", "=", "vecs", "\n", "self", ".", "embeds", "=", "embeds", "\n", "self", ".", "sent_len", "=", "sent_len", "\n", "self", ".", "empty", "=", "empty", "\n", "self", ".", "pointer", "=", "sent_len", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.BufferR.embedding": [[62, 70], ["None"], "methods", ["None"], ["", "def", "embedding", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        funciton like top\n        \"\"\"", "\n", "if", "self", ".", "pointer", "<", "0", ":", "\n", "            ", "return", "(", "self", ".", "empty", ",", "self", ".", "empty", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "self", ".", "buffer", "[", "self", ".", "pointer", "]", ",", "self", ".", "embeds", "[", "self", ".", "pointer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.BufferR.pop": [[71, 81], ["None"], "methods", ["None"], ["", "", "def", "pop", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        pop the buffer lstm and also the embeds\n        \"\"\"", "\n", "if", "self", ".", "pointer", "<", "0", ":", "\n", "            ", "raise", "ValueError", "\n", "", "popped_buffer", "=", "self", ".", "buffer", "[", "self", ".", "pointer", "]", "\n", "popped_embed", "=", "self", ".", "embeds", "[", "self", ".", "pointer", "]", "\n", "self", ".", "pointer", "-=", "1", "\n", "return", "popped_buffer", ",", "popped_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.BufferR.__len__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pointer", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.__init__": [[89, 100], ["vecs.size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vecs", ",", "embeds", ",", "empty", ")", ":", "\n", "        ", "\"\"\"\n        vecs with dimention sent_len * dim\n        \"\"\"", "\n", "sent_len", ",", "dim", "=", "vecs", ".", "size", "(", ")", "\n", "self", ".", "buffer", "=", "vecs", "\n", "self", ".", "embeds", "=", "embeds", "\n", "\n", "self", ".", "sent_len", "=", "sent_len", "\n", "self", ".", "empty", "=", "empty", "\n", "self", ".", "pointer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding": [[101, 106], ["None"], "methods", ["None"], ["", "def", "embedding", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pointer", "==", "self", ".", "sent_len", ":", "\n", "            ", "return", "(", "self", ".", "empty", ",", "self", ".", "empty", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "self", ".", "buffer", "[", "self", ".", "pointer", "]", ",", "self", ".", "embeds", "[", "self", ".", "pointer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop": [[107, 114], ["None"], "methods", ["None"], ["", "", "def", "pop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pointer", "==", "self", ".", "sent_len", ":", "\n", "            ", "raise", "ValueError", "\n", "", "popped_buffer", "=", "self", ".", "buffer", "[", "self", ".", "pointer", "]", "\n", "popped_embed", "=", "self", ".", "embeds", "[", "self", ".", "pointer", "]", "\n", "self", ".", "pointer", "+=", "1", "\n", "return", "popped_buffer", ",", "popped_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.__len__": [[115, 117], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sent_len", "-", "self", ".", "pointer", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.__init__": [[23, 32], ["util.oracle.ExecutorR"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "UNK", "=", "\"#UNK#\"", "\n", "\n", "self", ".", "END", "=", "\"#END#\"", "\n", "self", ".", "ENDPOS", "=", "\"#ENDPOS#\"", "\n", "\n", "#self.executor = Executor()", "\n", "self", ".", "executor", "=", "ExecutorR", "(", ")", "\n", "#self.executor = ExecutorR(mode=config.data_set)", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.is_crossing": [[34, 41], ["None"], "methods", ["None"], ["", "def", "is_crossing", "(", "self", ",", "new_entity", ",", "entity_list", ")", ":", "\n", "        ", "for", "entity", "in", "entity_list", ":", "\n", "            ", "if", "(", "entity", "[", "0", "]", "<", "new_entity", "[", "0", "]", "and", "new_entity", "[", "0", "]", "<", "entity", "[", "1", "]", "and", "new_entity", "[", "1", "]", ">", "entity", "[", "1", "]", ")", "or", "(", "new_entity", "[", "0", "]", "<", "entity", "[", "0", "]", "and", "entity", "[", "0", "]", "<", "new_entity", "[", "1", "]", "and", "entity", "[", "0", "]", ">", "new_entity", "[", "1", "]", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.is_identical": [[42, 48], ["None"], "methods", ["None"], ["", "", "def", "is_identical", "(", "self", ",", "new_entity", ",", "entity_list", ")", ":", "\n", "        ", "for", "entity", "in", "entity_list", ":", "\n", "            ", "if", "entity", "[", "0", "]", "==", "new_entity", "[", "0", "]", "and", "entity", "[", "1", "]", "==", "new_entity", "[", "1", "]", ":", "\n", "                ", "return", "True", "\n", "", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.read_file": [[49, 125], ["print", "print", "print", "open", "line.strip.strip.strip", "line.strip.strip.split", "line.strip.split.append", "next().strip().split", "list.append", "next().strip", "sent_list.append", "list", "len", "len", "pdb.set_trace", "list", "list", "len", "len", "reader.Reader.executor.triple2actions", "SentInst", "next().strip.split", "reader.Reader.executor.triple2actions", "SentInst", "next().strip", "next().strip", "p.split", "reversed", "reversed", "next", "len", "item.split", "pointers.split.split.split", "len", "int", "len", "pdb.set_trace", "int", "int", "int", "reader.Reader.is_crossing", "next", "next", "int", "reader.Reader.is_identical", "entity_list.append"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.triple2actions", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.triple2actions", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.is_crossing", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.is_identical"], ["", "", "def", "read_file", "(", "self", ",", "filename", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "sent_list", "=", "[", "]", "\n", "max_len", "=", "0", "\n", "num_overlap", "=", "0", "\n", "num_identical", "=", "0", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "\"\"", ":", "# last few blank lines", "\n", "                    ", "break", "\n", "\n", "", "raw_tokens", "=", "line", ".", "split", "(", ")", "\n", "raw_tokens", ".", "append", "(", "self", ".", "END", ")", "\n", "\n", "chars", "=", "[", "list", "(", "t", ")", "for", "t", "in", "raw_tokens", "]", "\n", "# TODO: chars is cap sensitive, token is not", "\n", "tokens", "=", "raw_tokens", "\n", "# tokens = [t.lower() for t in raw_tokens]", "\n", "# tokens = line.split()", "\n", "\n", "pos", "=", "next", "(", "f", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "pos", "=", "[", "p", ".", "split", "(", "'|'", ")", "[", "0", "]", "for", "p", "in", "pos", "]", "\n", "pos", ".", "append", "(", "self", ".", "ENDPOS", ")", "\n", "\n", "# issue of genia", "\n", "if", "len", "(", "tokens", ")", "!=", "len", "(", "pos", ")", ":", "\n", "                    ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "reversed", ":", "\n", "                    ", "tokens", "=", "list", "(", "reversed", "(", "tokens", ")", ")", "\n", "pos", "=", "list", "(", "reversed", "(", "pos", ")", ")", "\n", "\n", "", "assert", "len", "(", "tokens", ")", "==", "len", "(", "pos", ")", "\n", "entities", "=", "next", "(", "f", ")", ".", "strip", "(", ")", "\n", "if", "entities", "==", "\"\"", ":", "# no entities", "\n", "                    ", "actions", "=", "self", ".", "executor", ".", "triple2actions", "(", "[", "]", ",", "len", "(", "tokens", ")", ")", "\n", "sentInst", "=", "SentInst", "(", "tokens", ",", "chars", ",", "pos", ",", "[", "]", ",", "actions", ")", "\n", "", "else", ":", "\n", "                    ", "entity_list", "=", "[", "]", "\n", "entites", "=", "entities", ".", "split", "(", "\"|\"", ")", "\n", "for", "item", "in", "entites", ":", "\n", "                        ", "pointers", ",", "label", "=", "item", ".", "split", "(", ")", "\n", "pointers", "=", "pointers", ".", "split", "(", "\",\"", ")", "\n", "if", "int", "(", "pointers", "[", "1", "]", ")", ">", "len", "(", "tokens", ")", ":", "\n", "                            ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "# end - 1 inclusive", "\n", "", "span_len", "=", "int", "(", "pointers", "[", "1", "]", ")", "-", "int", "(", "pointers", "[", "0", "]", ")", "\n", "if", "span_len", ">", "max_len", ":", "\n", "                            ", "max_len", "=", "span_len", "\n", "\n", "", "new_entity", "=", "(", "int", "(", "pointers", "[", "0", "]", ")", ",", "int", "(", "pointers", "[", "1", "]", ")", "-", "1", ",", "label", ")", "\n", "# may be dumplicate entities in some datasets", "\n", "if", "new_entity", "not", "in", "entity_list", ":", "\n", "                            ", "if", "self", ".", "is_crossing", "(", "new_entity", ",", "entity_list", ")", ":", "\n", "# print(\"Overlapping!\")", "\n", "                                ", "num_overlap", "+=", "1", "\n", "", "elif", "self", ".", "is_identical", "(", "new_entity", ",", "entity_list", ")", ":", "\n", "# print(\"Identical!\")", "\n", "                                ", "num_identical", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "entity_list", ".", "append", "(", "new_entity", ")", "\n", "\n", "# assert len(entity_list) == len(set(entity_list)) # check duplicate", "\n", "", "", "", "actions", "=", "self", ".", "executor", ".", "triple2actions", "(", "entity_list", ",", "len", "(", "tokens", ")", ")", "\n", "sentInst", "=", "SentInst", "(", "tokens", ",", "chars", ",", "pos", ",", "entity_list", ",", "actions", ")", "\n", "", "assert", "next", "(", "f", ")", ".", "strip", "(", ")", "==", "\"\"", "# seperating line", "\n", "\n", "# for test", "\n", "# triples = self.executor.execute(len(tokens), actions)", "\n", "\n", "sent_list", ".", "append", "(", "sentInst", ")", "\n", "", "", "print", "(", "\"Max length: \"", ",", "max_len", ")", "\n", "print", "(", "\"Num of overlap: \"", ",", "num_overlap", ")", "\n", "print", "(", "\"Num of identical: \"", ",", "num_identical", ")", "\n", "return", "sent_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.gen_dic": [[126, 160], ["set", "set", "set", "set", "set", "list", "list", "list", "list", "print", "list", "len", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "set.add", "set.add", "set.add", "set.add", "set.add"], "methods", ["None"], ["", "def", "gen_dic", "(", "self", ")", ":", "\n", "        ", "word_set", "=", "set", "(", ")", "\n", "pos_set", "=", "set", "(", ")", "\n", "label_set", "=", "set", "(", ")", "\n", "char_set", "=", "set", "(", ")", "\n", "action_set", "=", "set", "(", ")", "\n", "\n", "for", "sent_list", "in", "[", "self", ".", "train", ",", "self", ".", "dev", ",", "self", ".", "test", "]", ":", "\n", "            ", "num_mention", "=", "0", "\n", "for", "sentInst", "in", "sent_list", ":", "\n", "                ", "for", "token", "in", "sentInst", ".", "chars", ":", "\n", "                    ", "for", "char", "in", "token", ":", "\n", "                        ", "char_set", ".", "add", "(", "char", ")", "\n", "", "", "for", "token", "in", "sentInst", ".", "tokens", ":", "\n", "                    ", "word_set", ".", "add", "(", "token", ")", "\n", "", "for", "pos", "in", "sentInst", ".", "pos", ":", "\n", "                    ", "pos_set", ".", "add", "(", "pos", ")", "\n", "", "for", "entity", "in", "sentInst", ".", "entities", ":", "\n", "                    ", "label_set", ".", "add", "(", "entity", "[", "2", "]", ")", "\n", "", "for", "action", "in", "sentInst", ".", "actions", ":", "\n", "                    ", "action_set", ".", "add", "(", "action", ")", "\n", "", "num_mention", "+=", "len", "(", "sentInst", ".", "entities", ")", "\n", "", "print", "(", "\"# mentions :{}\"", ".", "format", "(", "num_mention", ")", ")", "\n", "\n", "", "self", ".", "id2char", "=", "list", "(", "char_set", ")", "\n", "self", ".", "char2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "id2char", ")", "}", "\n", "self", ".", "id2word", "=", "list", "(", "word_set", ")", "\n", "self", ".", "word2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "id2word", ")", "}", "\n", "self", ".", "id2pos", "=", "list", "(", "pos_set", ")", "\n", "self", ".", "pos2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "id2pos", ")", "}", "\n", "self", ".", "id2label", "=", "list", "(", "label_set", ")", "\n", "self", ".", "label2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "id2label", ")", "}", "\n", "self", ".", "id2action", "=", "list", "(", "action_set", ")", "+", "[", "PAD_ACTION", "]", "\n", "self", ".", "action2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "id2action", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.to_batch": [[161, 220], ["tuple", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.keys", "ret_list.append", "token_dic[].append", "pos_dic[].append", "label_dic[].append", "action_dic[].append", "char_dic[].append", "char_len_dic[].append", "reader.Reader.pad_action", "len", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.pad_action"], ["", "def", "to_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        TODO: dev and test doesn't need to meet the batch_size\n        return: TensorDataset\n        \"\"\"", "\n", "ret_list", "=", "[", "]", "\n", "\n", "for", "sent_list", "in", "[", "self", ".", "train", ",", "self", ".", "dev", ",", "self", ".", "test", "]", ":", "\n", "            ", "token_dic", "=", "defaultdict", "(", "list", ")", "\n", "pos_dic", "=", "defaultdict", "(", "list", ")", "\n", "label_dic", "=", "defaultdict", "(", "list", ")", "\n", "char_dic", "=", "defaultdict", "(", "list", ")", "\n", "char_len_dic", "=", "defaultdict", "(", "list", ")", "\n", "action_dic", "=", "defaultdict", "(", "list", ")", "\n", "\n", "this_token_batches", "=", "[", "]", "\n", "this_pos_batches", "=", "[", "]", "\n", "this_label_batches", "=", "[", "]", "\n", "this_char_batches", "=", "[", "]", "\n", "this_char_len_batches", "=", "[", "]", "\n", "this_action_batches", "=", "[", "]", "\n", "\n", "for", "sentInst", "in", "sent_list", ":", "\n", "                ", "char_mat", "=", "[", "[", "self", ".", "char2id", "[", "c", "]", "for", "c", "in", "t", "]", "for", "t", "in", "sentInst", ".", "chars", "]", "\n", "# max_len = max([len(t) for t in sentInst.chars])", "\n", "# char_mat = [ t + [0] * (max_len - len(t)) for t in char_mat ]", "\n", "\n", "char_len_vec", "=", "[", "len", "(", "t", ")", "for", "t", "in", "sentInst", ".", "chars", "]", "\n", "token_vec", "=", "[", "self", ".", "word2id", "[", "t", "]", "for", "t", "in", "sentInst", ".", "tokens", "]", "\n", "pos_vec", "=", "[", "self", ".", "pos2id", "[", "p", "]", "for", "p", "in", "sentInst", ".", "pos", "]", "\n", "action_vec", "=", "[", "self", ".", "action2id", "[", "p", "]", "for", "p", "in", "sentInst", ".", "actions", "]", "\n", "label_list", "=", "[", "(", "u", "[", "0", "]", ",", "u", "[", "1", "]", ",", "self", ".", "label2id", "[", "u", "[", "2", "]", "]", ")", "for", "u", "in", "sentInst", ".", "entities", "]", "\n", "token_dic", "[", "len", "(", "sentInst", ".", "tokens", ")", "]", ".", "append", "(", "token_vec", ")", "\n", "pos_dic", "[", "len", "(", "sentInst", ".", "tokens", ")", "]", ".", "append", "(", "pos_vec", ")", "\n", "label_dic", "[", "len", "(", "sentInst", ".", "tokens", ")", "]", ".", "append", "(", "label_list", ")", "\n", "action_dic", "[", "len", "(", "sentInst", ".", "tokens", ")", "]", ".", "append", "(", "action_vec", ")", "\n", "char_dic", "[", "len", "(", "sentInst", ".", "tokens", ")", "]", ".", "append", "(", "char_mat", ")", "\n", "char_len_dic", "[", "len", "(", "sentInst", ".", "tokens", ")", "]", ".", "append", "(", "char_len_vec", ")", "\n", "\n", "", "for", "length", "in", "token_dic", ".", "keys", "(", ")", ":", "\n", "                ", "token_batches", "=", "[", "token_dic", "[", "length", "]", "[", "i", ":", "i", "+", "self", ".", "config", ".", "batch_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "token_dic", "[", "length", "]", ")", ",", "self", ".", "config", ".", "batch_size", ")", "]", "\n", "pos_batches", "=", "[", "pos_dic", "[", "length", "]", "[", "i", ":", "i", "+", "self", ".", "config", ".", "batch_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "pos_dic", "[", "length", "]", ")", ",", "self", ".", "config", ".", "batch_size", ")", "]", "\n", "label_batches", "=", "[", "label_dic", "[", "length", "]", "[", "i", ":", "i", "+", "self", ".", "config", ".", "batch_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "label_dic", "[", "length", "]", ")", ",", "self", ".", "config", ".", "batch_size", ")", "]", "\n", "action_padded", "=", "self", ".", "pad_action", "(", "action_dic", "[", "length", "]", ")", "\n", "action_batches", "=", "[", "action_padded", "[", "i", ":", "i", "+", "self", ".", "config", ".", "batch_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "action_dic", "[", "length", "]", ")", ",", "self", ".", "config", ".", "batch_size", ")", "]", "\n", "char_batches", "=", "[", "char_dic", "[", "length", "]", "[", "i", ":", "i", "+", "self", ".", "config", ".", "batch_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "label_dic", "[", "length", "]", ")", ",", "self", ".", "config", ".", "batch_size", ")", "]", "\n", "char_len_batches", "=", "[", "char_len_dic", "[", "length", "]", "[", "i", ":", "i", "+", "self", ".", "config", ".", "batch_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "label_dic", "[", "length", "]", ")", ",", "self", ".", "config", ".", "batch_size", ")", "]", "\n", "\n", "this_token_batches", "+=", "token_batches", "\n", "this_pos_batches", "+=", "pos_batches", "\n", "this_label_batches", "+=", "label_batches", "\n", "this_action_batches", "+=", "action_batches", "\n", "this_char_batches", "+=", "char_batches", "\n", "this_char_len_batches", "+=", "char_len_batches", "\n", "\n", "# ret_list.append((this_token_batches, this_char_batches, this_char_len_batches, this_pos_batches, this_label_batches))", "\n", "", "ret_list", ".", "append", "(", "(", "this_token_batches", ",", "this_pos_batches", ",", "this_label_batches", ",", "this_action_batches", ")", ")", "\n", "\n", "", "return", "tuple", "(", "ret_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.pad_action": [[221, 230], ["max", "ret.append", "len", "len"], "methods", ["None"], ["", "def", "pad_action", "(", "self", ",", "batch", ")", ":", "\n", "        ", "max_len", "=", "0", "\n", "for", "v", "in", "batch", ":", "\n", "            ", "max_len", "=", "max", "(", "max_len", ",", "len", "(", "v", ")", ")", "\n", "", "ret", "=", "[", "]", "\n", "for", "v", "in", "batch", ":", "\n", "            ", "v", "=", "v", "+", "[", "self", ".", "action2id", "[", "PAD_ACTION", "]", "]", "*", "(", "max_len", "-", "len", "(", "v", ")", ")", "\n", "ret", ".", "append", "(", "v", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.read_all_data": [[231, 237], ["reader.Reader.read_file", "reader.Reader.read_file", "reader.Reader.read_file", "reader.Reader.gen_dic"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.read_file", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.read_file", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.read_file", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.gen_dic"], ["", "def", "read_all_data", "(", "self", ")", ":", "\n", "        ", "file_path", "=", "FILE_PATH", "[", "self", ".", "config", ".", "data_set", "]", "\n", "self", ".", "train", "=", "self", ".", "read_file", "(", "file_path", "+", "\"train.data\"", ")", "\n", "self", ".", "dev", "=", "self", ".", "read_file", "(", "file_path", "+", "\"dev.data\"", ",", "mode", "=", "\"dev\"", ")", "\n", "self", ".", "test", "=", "self", ".", "read_file", "(", "file_path", "+", "\"test.data\"", ",", "mode", "=", "\"test\"", ")", "\n", "self", ".", "gen_dic", "(", ")", "\n", "# pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.gen_vectors_glove": [[239, 262], ["numpy.random.uniform().astype", "numpy.array", "print", "open", "token.lower.lower.lower", "open", "pickle.dump", "line.split", "numpy.random.uniform", "numpy.array.append", "numpy.array.append", "len", "numpy.array", "float"], "methods", ["None"], ["", "def", "gen_vectors_glove", "(", "self", ")", ":", "\n", "        ", "vocab_dic", "=", "{", "}", "\n", "with", "open", "(", "GLOVE_FILE", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "s_s", "=", "line", ".", "split", "(", ")", "\n", "if", "s_s", "[", "0", "]", "in", "self", ".", "word2id", ":", "\n", "                    ", "vocab_dic", "[", "s_s", "[", "0", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "s_s", "[", "1", ":", "]", "]", ")", "\n", "\n", "", "", "", "unknowns", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.01", ",", "0.01", ",", "self", ".", "config", ".", "token_embed", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "ret_mat", "=", "[", "]", "\n", "unk_counter", "=", "0", "\n", "for", "token", "in", "self", ".", "id2word", ":", "\n", "            ", "token", "=", "token", ".", "lower", "(", ")", "\n", "if", "token", "in", "vocab_dic", ":", "\n", "                ", "ret_mat", ".", "append", "(", "vocab_dic", "[", "token", "]", ")", "\n", "", "else", ":", "\n", "                ", "ret_mat", ".", "append", "(", "unknowns", ")", "\n", "# print \"Unknown token:\", token", "\n", "unk_counter", "+=", "1", "\n", "", "", "ret_mat", "=", "np", ".", "array", "(", "ret_mat", ")", "\n", "with", "open", "(", "self", ".", "config", ".", "embed_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "ret_mat", ",", "f", ")", "\n", "", "print", "(", "\"{0} unk out of {1} vocab\"", ".", "format", "(", "unk_counter", ",", "len", "(", "self", ".", "id2word", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.reader.reader.Reader.debug_single_sample": [[264, 271], ["print", "print", "print", "print"], "methods", ["None"], ["", "def", "debug_single_sample", "(", "self", ",", "token_v", ",", "pos_v", ",", "label_list", ",", "action_v", ")", ":", "\n", "        ", "print", "(", "\" \"", ".", "join", "(", "[", "self", ".", "id2word", "[", "t", "]", "for", "t", "in", "token_v", "]", ")", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "[", "self", ".", "id2pos", "[", "t", "]", "for", "t", "in", "pos_v", "]", ")", ")", "\n", "for", "label", "in", "label_list", ":", "\n", "            ", "print", "(", "label", "[", "0", "]", ",", "label", "[", "1", "]", ",", "self", ".", "id2label", "[", "label", "[", "2", "]", "]", ")", "\n", "", "for", "action", "in", "action_v", ":", "\n", "            ", "print", "(", "self", ".", "id2action", "[", "action", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_mr.TransitionMR.__init__": [[14, 67], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTMCell", "torch.LSTMCell", "torch.ParameterList", "torch.ParameterList", "torch.Parameter", "torch.Parameter", "torch.LSTMCell", "torch.LSTMCell", "torch.ParameterList", "torch.ParameterList", "torch.Parameter", "torch.Parameter", "torch.LSTMCell", "torch.LSTMCell", "torch.ParameterList", "torch.ParameterList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.oracle.Executor", "len", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "enumerate", "enumerate", "len", "model.xavier_init", "model.xavier_init", "model.xavier_init", "model.xavier_init", "model.xavier_init", "model.xavier_init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.__init__", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransitionMR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "# for debug", "\n", "self", ".", "id2word", "=", "config", ".", "id2word", "\n", "self", ".", "id2label", "=", "config", ".", "id2label", "\n", "self", ".", "id2action", "=", "config", ".", "id2action", "\n", "self", ".", "id2pos", "=", "config", ".", "id2pos", "\n", "self", ".", "action2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "id2action", ")", "}", "\n", "self", ".", "label2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "id2label", ")", "}", "\n", "\n", "self", ".", "word_embeds", "=", "nn", ".", "Embedding", "(", "config", ".", "voc_size", ",", "config", ".", "token_embed", ")", "\n", "self", ".", "pos_embeds", "=", "nn", ".", "Embedding", "(", "config", ".", "pos_size", ",", "config", ".", "pos_embed", ")", "\n", "self", ".", "action_embeds", "=", "nn", ".", "Embedding", "(", "len", "(", "config", ".", "id2action", ")", ",", "config", ".", "action_embed", ")", "\n", "self", ".", "entity_embeds", "=", "nn", ".", "Embedding", "(", "len", "(", "config", ".", "id2label", ")", "+", "1", ",", "config", ".", "entity_embed", ")", "\n", "\n", "self", ".", "rnn_layers", "=", "config", ".", "rnn_layers", "\n", "self", ".", "token_lstm", "=", "nn", ".", "LSTM", "(", "config", ".", "token_embed", "+", "config", ".", "pos_embed", ",", "config", ".", "hidden_dim", ",", "\n", "num_layers", "=", "config", ".", "rnn_layers", ",", "bidirectional", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "stack_lstm", "=", "nn", ".", "LSTMCell", "(", "config", ".", "hidden_dim", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "stack_lstm_initial", "=", "nn", ".", "ParameterList", "(", "[", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", ",", "\n", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", "]", ")", "\n", "self", ".", "stack_empty", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "config", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "output_lstm", "=", "nn", ".", "LSTMCell", "(", "config", ".", "hidden_dim", "+", "config", ".", "entity_embed", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "output_lstm_initial", "=", "nn", ".", "ParameterList", "(", "[", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", ",", "\n", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", "]", ")", "\n", "self", ".", "output_empty", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "config", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "action_lstm", "=", "nn", ".", "LSTMCell", "(", "config", ".", "action_embed", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "action_lstm_initial", "=", "nn", ".", "ParameterList", "(", "[", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", ",", "\n", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", "]", ")", "\n", "self", ".", "action_empty", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "config", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "token_empty", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "config", ".", "hidden_dim", ")", ")", "\n", "self", ".", "token_lstm_empty", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "config", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "shift2stack", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_dim", "+", "config", ".", "token_embed", "+", "config", ".", "pos_embed", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "reduce2stack", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "3", "*", "config", ".", "hidden_dim", ",", "\n", "config", ".", "hidden_dim", ")", "for", "_", "in", "range", "(", "len", "(", "self", ".", "id2label", ")", "*", "2", ")", "]", ")", "\n", "self", ".", "unary2stack", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "2", "*", "config", ".", "hidden_dim", ",", "\n", "config", ".", "hidden_dim", ")", "for", "_", "in", "range", "(", "len", "(", "self", ".", "id2label", ")", ")", "]", ")", "\n", "\n", "self", ".", "input_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "input_dropout", ")", "\n", "self", ".", "lstm_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "lstm_dropout", ")", "\n", "\n", "self", ".", "hidden2feat", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_dim", "*", "4", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "feat2act", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_dim", ",", "len", "(", "config", ".", "id2action", ")", ")", "\n", "self", ".", "entity2output", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_dim", "*", "2", "+", "config", ".", "action_embed", ",", "config", ".", "token_embed", ")", "\n", "\n", "self", ".", "executor", "=", "Executor", "(", "label2id", "=", "self", ".", "label2id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_mr.TransitionMR.action2label_star": [[69, 79], ["transition_mr.TransitionMR.id2action[].split", "len"], "methods", ["None"], ["", "def", "action2label_star", "(", "self", ",", "action_id", ")", ":", "\n", "        ", "\"\"\"\n        include label*\n        label* = label + label_size\n        \"\"\"", "\n", "label_str", "=", "self", ".", "id2action", "[", "action_id", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "if", "label_str", "[", "-", "1", "]", "==", "\"*\"", ":", "\n", "            ", "return", "self", ".", "label2id", "[", "label_str", "[", ":", "-", "1", "]", "]", "+", "len", "(", "self", ".", "id2label", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "label2id", "[", "label_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_mr.TransitionMR.get_possible_actions": [[80, 99], ["torch.autograd.Variable", "torch.autograd.Variable", "stack.embedding", "len", "valid_actions.append", "valid_actions.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "valid_actions_v.cuda.cuda.cuda", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding"], ["", "", "def", "get_possible_actions", "(", "self", ",", "stack", ",", "buffer", ")", ":", "\n", "        ", "valid_actions", "=", "[", "]", "\n", "cur_state_label_id", "=", "stack", ".", "embedding", "(", ")", "[", "1", "]", "\n", "\n", "if", "len", "(", "buffer", ")", ">", "0", ":", "\n", "            ", "valid_actions", ".", "append", "(", "self", ".", "action2id", "[", "\"Shift\"", "]", ")", "\n", "", "if", "len", "(", "stack", ")", ">", "0", "and", "cur_state_label_id", "is", "None", ":", "\n", "            ", "valid_actions", "+=", "[", "self", ".", "action2id", "[", "\"Unary-\"", "+", "label", "]", "for", "label", "in", "self", ".", "id2label", "]", "\n", "", "if", "len", "(", "stack", ")", "==", "2", "and", "len", "(", "buffer", ")", "==", "0", ":", "\n", "            ", "valid_actions", "+=", "[", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "label", "]", "for", "label", "in", "self", ".", "id2label", "]", "\n", "", "elif", "len", "(", "stack", ")", ">", "1", ":", "\n", "            ", "valid_actions", "+=", "[", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "label", "]", "for", "label", "in", "self", ".", "id2label", "]", "\n", "valid_actions", "+=", "[", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "label", "+", "\"*\"", "]", "for", "label", "in", "self", ".", "id2label", "]", "\n", "", "if", "len", "(", "stack", ")", "==", "1", "and", "(", "cur_state_label_id", "is", "None", "or", "cur_state_label_id", "<", "len", "(", "self", ".", "id2label", ")", ")", ":", "# cannot pop intermedia label", "\n", "            ", "valid_actions", ".", "append", "(", "self", ".", "action2id", "[", "\"Pop\"", "]", ")", "\n", "\n", "", "valid_actions_v", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "valid_actions", ")", ")", "\n", "if", "self", ".", "config", ".", "if_gpu", ":", "valid_actions_v", "=", "valid_actions_v", ".", "cuda", "(", ")", "\n", "return", "valid_actions", ",", "valid_actions_v", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_mr.TransitionMR.load_vector": [[100, 106], ["open", "pickle.load", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "print", "torch.Parameter", "torch.Parameter", "torch.Tensor.size", "torch.Tensor.size"], "methods", ["None"], ["", "def", "load_vector", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "config", ".", "embed_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "vectors", "=", "pickle", ".", "load", "(", "f", ")", "\n", "t_v", "=", "torch", ".", "Tensor", "(", "vectors", ")", "\n", "print", "(", "\"Loading from {} with size {}\"", ".", "format", "(", "self", ".", "config", ".", "embed_path", ",", "t_v", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "word_embeds", ".", "weight", "=", "nn", ".", "Parameter", "(", "t_v", ")", "\n", "# self.word_embeds.weight.requires_grad = False", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_mr.TransitionMR.rand_init": [[108, 123], ["model.init_embedding", "model.init_embedding", "model.init_embedding", "model.init_embedding", "model.init_linear", "model.init_linear", "model.init_linear", "model.init_lstm_cell", "model.init_lstm_cell"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_linear", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_linear", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_linear", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_lstm_cell", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_lstm_cell"], ["", "", "def", "rand_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        TODO: to be updated\n        \"\"\"", "\n", "util", ".", "init_embedding", "(", "self", ".", "word_embeds", ".", "weight", ")", "\n", "util", ".", "init_embedding", "(", "self", ".", "pos_embeds", ".", "weight", ")", "\n", "util", ".", "init_embedding", "(", "self", ".", "action_embeds", ".", "weight", ")", "\n", "util", ".", "init_embedding", "(", "self", ".", "entity_embeds", ".", "weight", ")", "\n", "\n", "util", ".", "init_linear", "(", "self", ".", "hidden2feat", ")", "\n", "util", ".", "init_linear", "(", "self", ".", "feat2act", ")", "\n", "util", ".", "init_linear", "(", "self", ".", "entity2output", ")", "\n", "\n", "util", ".", "init_lstm_cell", "(", "self", ".", "stack_lstm", ")", "\n", "util", ".", "init_lstm_cell", "(", "self", ".", "output_lstm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_mr.TransitionMR._map2actions": [[125, 132], ["type", "action_v.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "action_v.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["None"], ["", "def", "_map2actions", "(", "self", ",", "action_v", ")", ":", "\n", "        ", "\"\"\"\n        for debugging\n        \"\"\"", "\n", "if", "type", "(", "action_v", ")", "==", "torch", ".", "Tensor", ":", "\n", "            ", "action_v", "=", "action_v", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "return", "[", "self", ".", "id2action", "[", "a", "]", "for", "a", "in", "action_v", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_mr.TransitionMR.forward": [[134, 247], ["token_batch.size", "action_batch.size", "transition_mr.TransitionMR.word_embeds", "transition_mr.TransitionMR.pos_embeds", "transition_mr.TransitionMR.input_dropout", "transition_mr.TransitionMR.token_lstm", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module.stack_lstm.ShiftRNN", "module.stack_lstm.StackRNN", "module.stack_lstm.StackRNN", "module.stack_lstm.BufferR", "module.stack_lstm.BufferR", "range", "loss_v.append", "len", "range", "range", "range", "range", "transition_mr.TransitionMR.get_possible_actions", "predict_actions[].append", "torch.autograd.Variable", "torch.autograd.Variable", "transition_mr.TransitionMR.action_embeds().squeeze", "transition_mr.TransitionMR.input_dropout", "module.stack_lstm.StackRNN.push", "len", "len", "sum", "sum", "type", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu().data.numpy().item", "type", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu().data.numpy().item", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "[].data.numpy().item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "action_v.cuda.cuda.cuda", "module.stack_lstm.BufferR.pop", "module.stack_lstm.BufferR.pop", "module.stack_lstm.ShiftRNN.shift", "real_action.startswith", "len", "transition_mr.TransitionMR.hidden2feat", "transition_mr.TransitionMR.feat2act", "pdb.set_trace", "transition_mr.TransitionMR.action_embeds", "module.stack_lstm.BufferR.embedding", "transition_mr.TransitionMR.action2label_star", "module.stack_lstm.ShiftRNN.reduceX", "real_action.startswith", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu().data.numpy", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu().data.numpy", "module.stack_lstm.StackRNN.embedding", "module.stack_lstm.BufferR.embedding", "module.stack_lstm.StackRNN.embedding", "transition_mr.TransitionMR.input_dropout", "enumerate", "[].data.numpy", "losses[].append", "losses[].append", "module.stack_lstm.BufferR.embedding", "transition_mr.TransitionMR.action2label_star", "module.stack_lstm.ShiftRNN.unaryX", "module.stack_lstm.ShiftRNN.embedding", "torch.autograd.Variable", "torch.autograd.Variable", "transition_mr.TransitionMR.entity_embeds().squeeze", "transition_mr.TransitionMR.input_dropout", "module.stack_lstm.ShiftRNN.pop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module.stack_lstm.StackRNN.push", "module.stack_lstm.ShiftRNN.embedding", "len", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "entity_id_v.cuda.cuda.cuda", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu", "transition_mr.TransitionMR.entity_embeds", "torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.functional.log_softmax.cpu", "torch.nn.functional.log_softmax.cpu"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.get_possible_actions", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.shift", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.action2label_star", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.reduceX", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.action2label_star", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.unaryX", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding"], ["", "def", "forward", "(", "self", ",", "token_batch", ",", "pos_batch", ",", "label_batch", ",", "action_batch", ")", ":", "\n", "        ", "batch_size", ",", "sent_len", "=", "token_batch", ".", "size", "(", ")", "\n", "_", ",", "action_max_len", "=", "action_batch", ".", "size", "(", ")", "\n", "word_mat", "=", "self", ".", "word_embeds", "(", "token_batch", ")", "\n", "pos_mat", "=", "self", ".", "pos_embeds", "(", "pos_batch", ")", "\n", "token_mat", "=", "self", ".", "input_dropout", "(", "torch", ".", "cat", "(", "[", "word_mat", ",", "pos_mat", "]", ",", "2", ")", ")", "\n", "\n", "losses", "=", "[", "[", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "predict_actions", "=", "[", "[", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "correct_num_action", "=", "[", "0", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "totol_num_action", "=", "[", "0", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "tok_output", ",", "_", "=", "self", ".", "token_lstm", "(", "token_mat", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "stack", "=", "ShiftRNN", "(", "self", ".", "stack_lstm", ",", "self", ".", "stack_lstm_initial", ",", "self", ".", "shift2stack", ",", "self", ".", "reduce2stack", ",", "self", ".", "unary2stack", ",", "self", ".", "stack_empty", ")", "\n", "output_stack", "=", "StackRNN", "(", "self", ".", "output_lstm", ",", "self", ".", "output_lstm_initial", ",", "self", ".", "output_empty", ")", "\n", "action_stack", "=", "StackRNN", "(", "self", ".", "action_lstm", ",", "self", ".", "action_lstm_initial", ",", "self", ".", "action_empty", ")", "\n", "\n", "token_buffer", "=", "BufferR", "(", "token_mat", "[", "batch_idx", "]", ",", "self", ".", "token_empty", ")", "\n", "token_lstm_buffer", "=", "BufferR", "(", "tok_output", "[", "batch_idx", "]", ",", "self", ".", "token_lstm_empty", ")", "\n", "\n", "for", "action_idx", "in", "range", "(", "action_max_len", ")", ":", "\n", "                ", "cur_action", "=", "action_batch", ".", "data", "[", "batch_idx", "]", "[", "action_idx", "]", "\n", "if", "type", "(", "cur_action", ")", "!=", "int", ":", "cur_action", "=", "cur_action", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "if", "cur_action", "==", "self", ".", "action2id", "[", "\"Pad\"", "]", ":", "break", "\n", "real_action", "=", "self", ".", "id2action", "[", "cur_action", "]", "\n", "\n", "#compute the loss", "\n", "if", "type", "(", "cur_action", ")", "!=", "int", ":", "cur_action", "=", "cur_action", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "valid_actions", ",", "valid_actions_v", "=", "self", ".", "get_possible_actions", "(", "stack", ",", "token_buffer", ")", "\n", "log_probs", "=", "None", "\n", "if", "len", "(", "valid_actions", ")", ">", "1", ":", "\n", "                    ", "decision_feature", "=", "torch", ".", "cat", "(", "[", "stack", ".", "embedding", "(", ")", "[", "0", "]", ",", "output_stack", ".", "embedding", "(", ")", ",", "\n", "token_lstm_buffer", ".", "embedding", "(", ")", ",", "action_stack", ".", "embedding", "(", ")", "]", ",", "0", ")", "\n", "hidden_output", "=", "torch", ".", "tanh", "(", "self", ".", "hidden2feat", "(", "self", ".", "input_dropout", "(", "decision_feature", ")", ")", ")", "\n", "\n", "logits", "=", "self", ".", "feat2act", "(", "hidden_output", ")", "[", "valid_actions_v", "]", "\n", "va_table", "=", "{", "a", ":", "i", "for", "i", ",", "a", "in", "enumerate", "(", "valid_actions", ")", "}", "\n", "log_probs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits", ",", "0", ")", "\n", "max_id", "=", "torch", ".", "max", "(", "log_probs", ".", "cpu", "(", ")", ",", "0", ")", "[", "1", "]", ".", "data", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "action_predict", "=", "valid_actions", "[", "max_id", "]", "\n", "\n", "if", "cur_action", "not", "in", "va_table", ":", "\n", "                        ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "if", "log_probs", "is", "not", "None", ":", "\n", "                        ", "single_loss", "=", "log_probs", "[", "va_table", "[", "cur_action", "]", "]", "\n", "# losses[batch_idx].append(single_loss)", "\n", "\n", "# for balance", "\n", "if", "real_action", "==", "\"Pop\"", ":", "\n", "                            ", "losses", "[", "batch_idx", "]", ".", "append", "(", "self", ".", "config", ".", "discount", "*", "single_loss", ")", "\n", "", "else", ":", "\n", "                            ", "losses", "[", "batch_idx", "]", ".", "append", "(", "single_loss", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "action_predict", "=", "valid_actions", "[", "0", "]", "\n", "\n", "", "predict_actions", "[", "batch_idx", "]", ".", "append", "(", "action_predict", ")", "\n", "totol_num_action", "[", "batch_idx", "]", "+=", "1", "\n", "if", "real_action", "==", "self", ".", "id2action", "[", "action_predict", "]", ":", "\n", "                    ", "correct_num_action", "[", "batch_idx", "]", "+=", "1", "\n", "\n", "# push the action", "\n", "", "action_v", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "cur_action", "]", ")", ")", "\n", "if", "self", ".", "config", ".", "if_gpu", ":", "action_v", "=", "action_v", ".", "cuda", "(", ")", "\n", "action_var", "=", "self", ".", "action_embeds", "(", "action_v", ")", ".", "squeeze", "(", "0", ")", "\n", "action_var", "=", "self", ".", "input_dropout", "(", "action_var", ")", "\n", "action_stack", ".", "push", "(", "action_var", ")", "\n", "\n", "# execute the action", "\n", "if", "real_action", "==", "'Shift'", ":", "\n", "                    ", "buffer_state", "=", "token_lstm_buffer", ".", "pop", "(", ")", "\n", "word_state", "=", "token_buffer", ".", "pop", "(", ")", "\n", "stack", ".", "shift", "(", "buffer_state", ",", "word_state", ")", "\n", "", "elif", "real_action", ".", "startswith", "(", "'Reduce'", ")", ":", "\n", "                    ", "buffer_state", "=", "token_lstm_buffer", ".", "embedding", "(", ")", "\n", "label_id", "=", "self", ".", "action2label_star", "(", "cur_action", ")", "\n", "stack", ".", "reduceX", "(", "buffer_state", ",", "label_id", ")", "\n", "", "elif", "real_action", ".", "startswith", "(", "'Unary'", ")", ":", "\n", "                    ", "buffer_state", "=", "token_lstm_buffer", ".", "embedding", "(", ")", "\n", "label_id", "=", "self", ".", "action2label_star", "(", "cur_action", ")", "\n", "stack", ".", "unaryX", "(", "buffer_state", ",", "label_id", ")", "\n", "", "elif", "real_action", "==", "'Pop'", ":", "\n", "                    ", "label_id", "=", "stack", ".", "embedding", "(", ")", "[", "1", "]", "\n", "if", "label_id", "is", "None", ":", "label_id", "=", "len", "(", "self", ".", "id2label", ")", "\n", "assert", "label_id", "<=", "len", "(", "self", ".", "id2label", ")", "\n", "entity_id_v", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "label_id", "]", ")", ")", "\n", "if", "self", ".", "config", ".", "if_gpu", ":", "entity_id_v", "=", "entity_id_v", ".", "cuda", "(", ")", "\n", "entity_vec", "=", "self", ".", "entity_embeds", "(", "entity_id_v", ")", ".", "squeeze", "(", "0", ")", "\n", "entity_vec", "=", "self", ".", "input_dropout", "(", "entity_vec", ")", "\n", "\n", "stack_state", ",", "_", "=", "stack", ".", "pop", "(", ")", "\n", "entity_state", "=", "torch", ".", "cat", "(", "[", "stack_state", ",", "entity_vec", "]", ",", "0", ")", "\n", "output_stack", ".", "push", "(", "entity_state", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "\n", "\n", "# sanity check", "\n", "", "", "assert", "len", "(", "token_buffer", ")", "==", "0", "\n", "assert", "len", "(", "token_lstm_buffer", ")", "==", "0", "\n", "action_strs", "=", "[", "self", ".", "id2action", "[", "a", "]", "for", "a", "in", "predict_actions", "[", "batch_idx", "]", "]", "\n", "# print(\" \".join(action_strs))", "\n", "\n", "", "loss_v", "=", "[", "]", "\n", "action_num", "=", "0", "\n", "for", "idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "loss_v", ".", "append", "(", "sum", "(", "losses", "[", "idx", "]", ")", ")", "\n", "action_num", "+=", "len", "(", "losses", "[", "idx", "]", ")", "\n", "\n", "", "batch_mean_loss", "=", "-", "1.0", "*", "sum", "(", "loss_v", ")", "/", "batch_size", "\n", "return", "batch_mean_loss", ",", "(", "predict_actions", ",", "correct_num_action", ",", "totol_num_action", ")", "if", "len", "(", "losses", ")", ">", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_mr.TransitionMR.predict": [[248, 332], ["token_batch.size", "transition_mr.TransitionMR.word_embeds", "transition_mr.TransitionMR.pos_embeds", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transition_mr.TransitionMR.token_lstm", "range", "enumerate", "module.stack_lstm.ShiftRNN", "module.stack_lstm.StackRNN", "module.stack_lstm.StackRNN", "module.stack_lstm.BufferR", "module.stack_lstm.BufferR", "transition_mr.TransitionMR.executor.execute", "ret_triples.append", "range", "range", "range", "transition_mr.TransitionMR.get_possible_actions", "predict_actions[].append", "torch.autograd.Variable", "torch.autograd.Variable", "transition_mr.TransitionMR.action_embeds().squeeze", "module.stack_lstm.StackRNN.push", "len", "len", "len", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "[].data.numpy().item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "action_v.cuda.cuda.cuda", "module.stack_lstm.BufferR.pop", "module.stack_lstm.BufferR.pop", "module.stack_lstm.ShiftRNN.shift", "real_action.startswith", "transition_mr.TransitionMR.hidden2feat", "transition_mr.TransitionMR.feat2act", "len", "pdb.set_trace", "transition_mr.TransitionMR.action_embeds", "module.stack_lstm.BufferR.embedding", "transition_mr.TransitionMR.action2label_star", "module.stack_lstm.ShiftRNN.reduceX", "real_action.startswith", "module.stack_lstm.StackRNN.embedding", "module.stack_lstm.BufferR.embedding", "module.stack_lstm.StackRNN.embedding", "enumerate", "[].data.numpy", "module.stack_lstm.BufferR.embedding", "transition_mr.TransitionMR.action2label_star", "module.stack_lstm.ShiftRNN.unaryX", "module.stack_lstm.ShiftRNN.embedding", "torch.autograd.Variable", "torch.autograd.Variable", "transition_mr.TransitionMR.entity_embeds().squeeze", "module.stack_lstm.ShiftRNN.pop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module.stack_lstm.StackRNN.push", "module.stack_lstm.ShiftRNN.embedding", "len", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "entity_id_v.cuda.cuda.cuda", "transition_mr.TransitionMR.entity_embeds", "torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.functional.log_softmax.cpu", "torch.nn.functional.log_softmax.cpu"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.execute", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.get_possible_actions", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.shift", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.action2label_star", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.reduceX", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.action2label_star", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.unaryX", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding"], ["", "def", "predict", "(", "self", ",", "token_batch", ",", "pos_batch", ")", ":", "\n", "        ", "batch_size", ",", "sent_len", "=", "token_batch", ".", "size", "(", ")", "\n", "word_mat", "=", "self", ".", "word_embeds", "(", "token_batch", ")", "\n", "pos_mat", "=", "self", ".", "pos_embeds", "(", "pos_batch", ")", "\n", "token_mat", "=", "torch", ".", "cat", "(", "[", "word_mat", ",", "pos_mat", "]", ",", "2", ")", "\n", "\n", "losses", "=", "[", "[", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "correct_num_action", "=", "[", "0", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "predict_actions", "=", "[", "[", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "tok_output", ",", "_", "=", "self", ".", "token_lstm", "(", "token_mat", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "stack", "=", "ShiftRNN", "(", "self", ".", "stack_lstm", ",", "self", ".", "stack_lstm_initial", ",", "self", ".", "shift2stack", ",", "self", ".", "reduce2stack", ",", "self", ".", "unary2stack", ",", "self", ".", "stack_empty", ")", "\n", "output_stack", "=", "StackRNN", "(", "self", ".", "output_lstm", ",", "self", ".", "output_lstm_initial", ",", "self", ".", "output_empty", ")", "\n", "action_stack", "=", "StackRNN", "(", "self", ".", "action_lstm", ",", "self", ".", "action_lstm_initial", ",", "self", ".", "action_empty", ")", "\n", "\n", "token_buffer", "=", "BufferR", "(", "token_mat", "[", "batch_idx", "]", ",", "self", ".", "token_empty", ")", "\n", "token_lstm_buffer", "=", "BufferR", "(", "tok_output", "[", "batch_idx", "]", ",", "self", ".", "token_lstm_empty", ")", "\n", "\n", "while", "len", "(", "token_buffer", ")", ">", "0", "or", "len", "(", "stack", ")", ">", "0", ":", "\n", "# pdb.set_trace()", "\n", "                ", "valid_actions", ",", "valid_actions_v", "=", "self", ".", "get_possible_actions", "(", "stack", ",", "token_buffer", ")", "\n", "if", "len", "(", "valid_actions", ")", ">", "1", ":", "\n", "                    ", "decision_feature", "=", "torch", ".", "cat", "(", "[", "stack", ".", "embedding", "(", ")", "[", "0", "]", ",", "output_stack", ".", "embedding", "(", ")", ",", "\n", "token_lstm_buffer", ".", "embedding", "(", ")", ",", "action_stack", ".", "embedding", "(", ")", "]", ",", "0", ")", "\n", "hidden_output", "=", "torch", ".", "tanh", "(", "self", ".", "hidden2feat", "(", "decision_feature", ")", ")", "\n", "\n", "logits", "=", "self", ".", "feat2act", "(", "hidden_output", ")", "[", "valid_actions_v", "]", "\n", "va_table", "=", "{", "a", ":", "i", "for", "i", ",", "a", "in", "enumerate", "(", "valid_actions", ")", "}", "\n", "log_probs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits", ",", "0", ")", "\n", "max_id", "=", "torch", ".", "max", "(", "log_probs", ".", "cpu", "(", ")", ",", "0", ")", "[", "1", "]", ".", "data", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "action_predict", "=", "valid_actions", "[", "max_id", "]", "\n", "", "else", ":", "\n", "                    ", "if", "len", "(", "valid_actions", ")", "==", "0", ":", "pdb", ".", "set_trace", "(", ")", "\n", "action_predict", "=", "valid_actions", "[", "0", "]", "\n", "\n", "", "predict_actions", "[", "batch_idx", "]", ".", "append", "(", "self", ".", "id2action", "[", "action_predict", "]", ")", "\n", "real_action", "=", "self", ".", "id2action", "[", "action_predict", "]", "\n", "\n", "# push the action", "\n", "action_v", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "action_predict", "]", ")", ")", "\n", "if", "self", ".", "config", ".", "if_gpu", ":", "action_v", "=", "action_v", ".", "cuda", "(", ")", "\n", "action_var", "=", "self", ".", "action_embeds", "(", "action_v", ")", ".", "squeeze", "(", "0", ")", "\n", "action_stack", ".", "push", "(", "action_var", ")", "\n", "\n", "# execute the action", "\n", "if", "real_action", "==", "'Shift'", ":", "\n", "                    ", "buffer_state", "=", "token_lstm_buffer", ".", "pop", "(", ")", "\n", "word_state", "=", "token_buffer", ".", "pop", "(", ")", "\n", "stack", ".", "shift", "(", "buffer_state", ",", "word_state", ")", "\n", "", "elif", "real_action", ".", "startswith", "(", "'Reduce'", ")", ":", "\n", "                    ", "buffer_state", "=", "token_lstm_buffer", ".", "embedding", "(", ")", "\n", "label_id", "=", "self", ".", "action2label_star", "(", "action_predict", ")", "\n", "stack", ".", "reduceX", "(", "buffer_state", ",", "label_id", ")", "\n", "", "elif", "real_action", ".", "startswith", "(", "'Unary'", ")", ":", "\n", "                    ", "buffer_state", "=", "token_lstm_buffer", ".", "embedding", "(", ")", "\n", "label_id", "=", "self", ".", "action2label_star", "(", "action_predict", ")", "\n", "stack", ".", "unaryX", "(", "buffer_state", ",", "label_id", ")", "\n", "", "elif", "real_action", "==", "'Pop'", ":", "\n", "                    ", "label_id", "=", "stack", ".", "embedding", "(", ")", "[", "1", "]", "\n", "if", "label_id", "is", "None", ":", "label_id", "=", "len", "(", "self", ".", "id2label", ")", "\n", "assert", "label_id", "<=", "len", "(", "self", ".", "id2label", ")", "\n", "entity_id_v", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "label_id", "]", ")", ")", "\n", "if", "self", ".", "config", ".", "if_gpu", ":", "entity_id_v", "=", "entity_id_v", ".", "cuda", "(", ")", "\n", "entity_vec", "=", "self", ".", "entity_embeds", "(", "entity_id_v", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "stack_state", ",", "_", "=", "stack", ".", "pop", "(", ")", "\n", "entity_state", "=", "torch", ".", "cat", "(", "[", "stack_state", ",", "entity_vec", "]", ",", "0", ")", "\n", "output_stack", ".", "push", "(", "entity_state", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "\n", "\n", "# sanity check", "\n", "", "", "assert", "len", "(", "token_buffer", ")", "==", "0", "\n", "assert", "len", "(", "token_lstm_buffer", ")", "==", "0", "\n", "# print(\" \".join(predict_actions[batch_idx]))", "\n", "\n", "", "ret_triples", "=", "[", "]", "\n", "for", "i", ",", "actions", "in", "enumerate", "(", "predict_actions", ")", ":", "\n", "            ", "triples", "=", "self", ".", "executor", ".", "execute", "(", "sent_len", ",", "actions", ")", "\n", "ret_triples", ".", "append", "(", "triples", ")", "\n", "\n", "", "return", "ret_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init": [[8, 12], ["torch.init.xavier_normal_", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "var.cuda.cuda"], "function", ["None"], ["def", "xavier_init", "(", "if_gpu", ",", "*", "size", ")", ":", "\n", "    ", "var", "=", "nn", ".", "init", ".", "xavier_normal_", "(", "torch", ".", "FloatTensor", "(", "*", "size", ")", ")", "\n", "if", "if_gpu", ":", "var", "=", "var", ".", "cuda", "(", ")", "\n", "return", "nn", ".", "Parameter", "(", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_embedding": [[14, 17], ["numpy.sqrt", "torch.init.uniform", "input_embedding.size"], "function", ["None"], ["", "def", "init_embedding", "(", "input_embedding", ")", ":", "\n", "    ", "bias", "=", "np", ".", "sqrt", "(", "3.0", "/", "input_embedding", ".", "size", "(", "1", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "input_embedding", ",", "-", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_linear": [[19, 24], ["numpy.sqrt", "torch.init.uniform", "input_linear.bias.data.zero_", "input_linear.weight.size", "input_linear.weight.size"], "function", ["None"], ["", "def", "init_linear", "(", "input_linear", ")", ":", "\n", "    ", "bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "input_linear", ".", "weight", ".", "size", "(", "0", ")", "+", "input_linear", ".", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "input_linear", ".", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "if", "input_linear", ".", "bias", "is", "not", "None", ":", "\n", "        ", "input_linear", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_lstm": [[26, 43], ["range", "eval", "numpy.sqrt", "torch.init.uniform", "eval", "numpy.sqrt", "torch.init.uniform", "range", "eval", "eval.data.zero_", "eval", "eval.data.zero_", "str", "str", "eval.size", "eval.size", "str", "str", "eval.size", "eval.size"], "function", ["None"], ["", "", "def", "init_lstm", "(", "input_lstm", ")", ":", "\n", "    ", "for", "ind", "in", "range", "(", "0", ",", "input_lstm", ".", "num_layers", ")", ":", "\n", "        ", "weight", "=", "eval", "(", "'input_lstm.weight_ih_l'", "+", "str", "(", "ind", ")", ")", "\n", "bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "weight", ".", "size", "(", "0", ")", "/", "4", "+", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "weight", "=", "eval", "(", "'input_lstm.weight_hh_l'", "+", "str", "(", "ind", ")", ")", "\n", "bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "weight", ".", "size", "(", "0", ")", "/", "4", "+", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "\n", "", "if", "input_lstm", ".", "bias", ":", "\n", "        ", "for", "ind", "in", "range", "(", "0", ",", "input_lstm", ".", "num_layers", ")", ":", "\n", "            ", "weight", "=", "eval", "(", "'input_lstm.bias_ih_l'", "+", "str", "(", "ind", ")", ")", "\n", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "weight", ".", "data", "[", "input_lstm", ".", "hidden_size", ":", "2", "*", "input_lstm", ".", "hidden_size", "]", "=", "1", "\n", "weight", "=", "eval", "(", "'input_lstm.bias_hh_l'", "+", "str", "(", "ind", ")", ")", "\n", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "weight", ".", "data", "[", "input_lstm", ".", "hidden_size", ":", "2", "*", "input_lstm", ".", "hidden_size", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_lstm_cell": [[45, 60], ["eval", "numpy.sqrt", "torch.init.uniform", "eval", "numpy.sqrt", "torch.init.uniform", "eval", "eval.data.zero_", "eval", "eval.data.zero_", "eval.size", "eval.size", "eval.size", "eval.size"], "function", ["None"], ["", "", "", "def", "init_lstm_cell", "(", "input_lstm", ")", ":", "\n", "    ", "weight", "=", "eval", "(", "'input_lstm.weight_ih'", ")", "\n", "bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "weight", ".", "size", "(", "0", ")", "/", "4", "+", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "weight", "=", "eval", "(", "'input_lstm.weight_hh'", ")", "\n", "bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "weight", ".", "size", "(", "0", ")", "/", "4", "+", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "\n", "if", "input_lstm", ".", "bias", ":", "\n", "        ", "weight", "=", "eval", "(", "'input_lstm.bias_ih'", ")", "\n", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "weight", ".", "data", "[", "input_lstm", ".", "hidden_size", ":", "2", "*", "input_lstm", ".", "hidden_size", "]", "=", "1", "\n", "weight", "=", "eval", "(", "'input_lstm.bias_hh'", ")", "\n", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "weight", ".", "data", "[", "input_lstm", ".", "hidden_size", ":", "2", "*", "input_lstm", ".", "hidden_size", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.__init__": [[15, 73], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.oracle.ExecutorR", "len", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "enumerate", "enumerate", "model.xavier_init", "model.xavier_init", "model.xavier_init", "model.xavier_init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "range", "range", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.__init__", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.xavier_init"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransitionForest", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "# for debug", "\n", "self", ".", "id2word", "=", "config", ".", "id2word", "\n", "self", ".", "id2label", "=", "config", ".", "id2label", "\n", "self", ".", "id2action", "=", "config", ".", "id2action", "\n", "self", ".", "id2pos", "=", "config", ".", "id2pos", "\n", "self", ".", "action2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "id2action", ")", "}", "\n", "self", ".", "label2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "id2label", ")", "}", "\n", "\n", "self", ".", "word_embeds", "=", "nn", ".", "Embedding", "(", "config", ".", "voc_size", ",", "config", ".", "token_embed", ")", "\n", "self", ".", "pos_embeds", "=", "nn", ".", "Embedding", "(", "config", ".", "pos_size", ",", "config", ".", "pos_embed", ")", "\n", "self", ".", "action_embeds", "=", "nn", ".", "Embedding", "(", "len", "(", "config", ".", "id2action", ")", ",", "config", ".", "action_embed", ")", "\n", "\n", "self", ".", "rnn_layers", "=", "config", ".", "rnn_layers", "\n", "self", ".", "token_lstm", "=", "nn", ".", "LSTM", "(", "config", ".", "token_embed", "+", "config", ".", "pos_embed", ",", "config", ".", "hidden_dim", ",", "\n", "num_layers", "=", "config", ".", "rnn_layers", ",", "bidirectional", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "word_dim", "=", "config", ".", "token_embed", "+", "config", ".", "pos_embed", "\n", "self", ".", "stack_lstm", "=", "nn", ".", "LSTMCell", "(", "config", ".", "hidden_dim", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "stack_lstm_initial", "=", "nn", ".", "ParameterList", "(", "[", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", ",", "\n", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", "]", ")", "\n", "self", ".", "stack_empty", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "config", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "action_lstm", "=", "nn", ".", "LSTMCell", "(", "config", ".", "action_embed", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "action_lstm_initial", "=", "nn", ".", "ParameterList", "(", "[", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", ",", "\n", "util", ".", "xavier_init", "(", "self", ".", "config", ".", "if_gpu", ",", "1", ",", "self", ".", "config", ".", "hidden_dim", ")", "]", ")", "\n", "self", ".", "action_empty", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "config", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "token_empty", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "word_dim", ")", ")", "\n", "\n", "if", "not", "config", ".", "if_treelstm", ":", "\n", "            ", "self", ".", "reduce2stack", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "2", "*", "self", ".", "word_dim", ",", "\n", "self", ".", "word_dim", ")", "for", "_", "in", "range", "(", "len", "(", "self", ".", "id2label", ")", "*", "2", ")", "]", ")", "\n", "self", ".", "unary2stack", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "word_dim", ",", "\n", "self", ".", "word_dim", ")", "for", "_", "in", "range", "(", "len", "(", "self", ".", "id2label", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ih_linear", "=", "nn", ".", "Linear", "(", "self", ".", "word_dim", "+", "config", ".", "hidden_dim", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "oh_linear", "=", "nn", ".", "Linear", "(", "self", ".", "word_dim", "+", "config", ".", "hidden_dim", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "reduce2stack", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "2", "*", "config", ".", "hidden_dim", ",", "config", ".", "hidden_dim", ")", "for", "_", "in", "range", "(", "len", "(", "self", ".", "id2label", ")", "*", "2", ")", "]", ")", "for", "_", "in", "range", "(", "4", ")", "]", ")", "\n", "self", ".", "unary2stack", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "config", ".", "hidden_dim", ",", "config", ".", "hidden_dim", ")", "for", "_", "in", "range", "(", "len", "(", "self", ".", "id2label", ")", "*", "2", ")", "]", ")", "for", "_", "in", "range", "(", "3", ")", "]", ")", "\n", "\n", "\n", "", "self", ".", "input_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "input_dropout", ")", "\n", "# self.lstm_dropout = nn.Dropout(p=config.lstm_dropout)", "\n", "\n", "self", ".", "hidden2feat", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_dim", "*", "5", ",", "config", ".", "hidden_dim", ")", "\n", "self", ".", "feat2act", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_dim", ",", "len", "(", "config", ".", "id2action", ")", ")", "\n", "\n", "self", ".", "executor", "=", "ExecutorR", "(", "label2id", "=", "self", ".", "label2id", ")", "\n", "# self.executor = ExecutorR(label2id=self.label2id, mode=self.config.data_set)", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.action2label_star": [[76, 86], ["transition_forest.TransitionForest.id2action[].split", "len"], "methods", ["None"], ["", "def", "action2label_star", "(", "self", ",", "action_id", ")", ":", "\n", "        ", "\"\"\"\n        include label*\n        label* = label + label_size\n        \"\"\"", "\n", "label_str", "=", "self", ".", "id2action", "[", "action_id", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "if", "label_str", "[", "-", "1", "]", "==", "\"*\"", ":", "\n", "            ", "return", "self", ".", "label2id", "[", "label_str", "[", ":", "-", "1", "]", "]", "+", "len", "(", "self", ".", "id2label", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "label2id", "[", "label_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.get_possible_actions": [[87, 124], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "valid_actions.append", "len", "valid_actions_v.cuda.cuda.cuda", "len", "len", "valid_actions.append", "valid_actions.append", "len", "len", "valid_actions.append", "valid_actions.append", "len", "len", "valid_actions.append", "len", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "", "def", "get_possible_actions", "(", "self", ",", "stack", ",", "buffer", ")", ":", "\n", "        ", "valid_actions", "=", "[", "]", "\n", "\n", "if", "len", "(", "buffer", ")", ">", "1", ":", "\n", "            ", "valid_actions", ".", "append", "(", "self", ".", "action2id", "[", "\"Shift\"", "]", ")", "\n", "", "elif", "len", "(", "buffer", ")", "==", "1", ":", "# only when the stack is complete can the buffer shift the last symbol", "\n", "            ", "flag", "=", "True", "\n", "for", "embed", ",", "lab_", "in", "stack", ".", "embeds", ":", "\n", "                ", "if", "lab_", "is", "not", "None", "and", "lab_", ">=", "len", "(", "self", ".", "id2label", ")", ":", "\n", "                    ", "flag", "=", "False", "\n", "", "", "if", "flag", ":", "\n", "                ", "valid_actions", ".", "append", "(", "self", ".", "action2id", "[", "\"Shift\"", "]", ")", "\n", "\n", "", "", "if", "len", "(", "stack", ")", ">", "0", "and", "stack", ".", "embeds", "[", "-", "1", "]", "[", "1", "]", "is", "None", ":", "\n", "            ", "valid_actions", "+=", "[", "self", ".", "action2id", "[", "\"Unary-\"", "+", "label", "]", "for", "label", "in", "self", ".", "id2label", "]", "\n", "\n", "", "if", "len", "(", "stack", ")", ">=", "2", ":", "\n", "            ", "label_2", "=", "stack", ".", "embeds", "[", "-", "1", "]", "[", "1", "]", "\n", "label_1", "=", "stack", ".", "embeds", "[", "-", "2", "]", "[", "1", "]", "\n", "\n", "if", "(", "label_2", "is", "not", "None", "and", "label_2", ">=", "len", "(", "self", ".", "id2label", ")", ")", ":", "\n", "                ", "valid_actions", ".", "append", "(", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "self", ".", "id2label", "[", "label_2", "-", "len", "(", "self", ".", "id2label", ")", "]", "]", ")", "\n", "if", "len", "(", "buffer", ")", ">", "1", ":", "\n", "                    ", "valid_actions", ".", "append", "(", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "self", ".", "id2label", "[", "label_2", "-", "len", "(", "self", ".", "id2label", ")", "]", "+", "\"*\"", "]", ")", "\n", "", "", "elif", "(", "label_1", "is", "not", "None", "and", "label_1", ">=", "len", "(", "self", ".", "id2label", ")", ")", ":", "\n", "                ", "valid_actions", ".", "append", "(", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "self", ".", "id2label", "[", "label_1", "-", "len", "(", "self", ".", "id2label", ")", "]", "]", ")", "\n", "if", "len", "(", "buffer", ")", ">", "1", ":", "\n", "                    ", "valid_actions", ".", "append", "(", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "self", ".", "id2label", "[", "label_1", "-", "len", "(", "self", ".", "id2label", ")", "]", "+", "\"*\"", "]", ")", "\n", "", "", "elif", "len", "(", "stack", ")", "==", "2", "and", "len", "(", "buffer", ")", "==", "1", ":", "\n", "                ", "valid_actions", "+=", "[", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "label", "]", "for", "label", "in", "self", ".", "id2label", "]", "\n", "", "else", ":", "\n", "                ", "valid_actions", "+=", "[", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "label", "]", "for", "label", "in", "self", ".", "id2label", "]", "\n", "valid_actions", "+=", "[", "self", ".", "action2id", "[", "\"Reduce-\"", "+", "label", "+", "\"*\"", "]", "for", "label", "in", "self", ".", "id2label", "]", "\n", "\n", "", "", "valid_actions_v", "=", "torch", ".", "LongTensor", "(", "valid_actions", ")", "\n", "if", "self", ".", "config", ".", "if_gpu", ":", "valid_actions_v", "=", "valid_actions_v", ".", "cuda", "(", ")", "\n", "return", "valid_actions", ",", "valid_actions_v", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.load_vector": [[125, 131], ["open", "pickle.load", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "print", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor.size", "torch.Tensor.size", "torch.Tensor.size"], "methods", ["None"], ["", "def", "load_vector", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "config", ".", "embed_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "vectors", "=", "pickle", ".", "load", "(", "f", ")", "\n", "t_v", "=", "torch", ".", "Tensor", "(", "vectors", ")", "\n", "print", "(", "\"Loading from {} with size {}\"", ".", "format", "(", "self", ".", "config", ".", "embed_path", ",", "t_v", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "word_embeds", ".", "weight", "=", "nn", ".", "Parameter", "(", "t_v", ")", "\n", "# self.word_embeds.weight.requires_grad = False", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.rand_init": [[133, 153], ["model.init_embedding", "model.init_embedding", "model.init_linear", "model.init_linear", "model.init_linear", "model.init_lstm", "model.init_lstm_cell", "model.init_lstm_cell", "model.init_linear", "model.init_linear"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_linear", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_linear", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_linear", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_lstm", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_lstm_cell", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_lstm_cell", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_linear", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.util.init_linear"], ["", "", "def", "rand_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        TODO: to be updated\n        \"\"\"", "\n", "# util.init_embedding(self.word_embeds.weight)", "\n", "util", ".", "init_embedding", "(", "self", ".", "pos_embeds", ".", "weight", ")", "\n", "util", ".", "init_embedding", "(", "self", ".", "action_embeds", ".", "weight", ")", "\n", "\n", "util", ".", "init_linear", "(", "self", ".", "shift2stack", ")", "\n", "for", "mod", "in", "self", ".", "reduce2stack", ":", "\n", "            ", "util", ".", "init_linear", "(", "mod", ")", "\n", "", "for", "mod", "in", "self", ".", "unary2stack", ":", "\n", "            ", "util", ".", "init_linear", "(", "mod", ")", "\n", "\n", "", "util", ".", "init_linear", "(", "self", ".", "hidden2feat", ")", "\n", "util", ".", "init_linear", "(", "self", ".", "feat2act", ")", "\n", "\n", "util", ".", "init_lstm", "(", "self", ".", "token_lstm", ")", "\n", "util", ".", "init_lstm_cell", "(", "self", ".", "stack_lstm", ")", "\n", "util", ".", "init_lstm_cell", "(", "self", ".", "action_lstm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest._map2actions": [[155, 162], ["type", "action_v.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "action_v.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["None"], ["", "def", "_map2actions", "(", "self", ",", "action_v", ")", ":", "\n", "        ", "\"\"\"\n        for debugging\n        \"\"\"", "\n", "if", "type", "(", "action_v", ")", "==", "torch", ".", "Tensor", ":", "\n", "            ", "action_v", "=", "action_v", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "return", "[", "self", ".", "id2action", "[", "a", "]", "for", "a", "in", "action_v", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.forward": [[164, 264], ["token_batch.size", "action_batch.size", "transition_forest.TransitionForest.word_embeds", "transition_forest.TransitionForest.pos_embeds", "transition_forest.TransitionForest.input_dropout", "transition_forest.TransitionForest.token_lstm", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module.stack_lstm.StackRNN", "module.stack_lstm.BufferR", "range", "loss_v.append", "len", "range", "range", "range", "range", "module.stack.AugStack", "module.stack.Stack", "transition_forest.TransitionForest.get_possible_actions", "predict_actions[].append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "transition_forest.TransitionForest.action_embeds().squeeze", "transition_forest.TransitionForest.input_dropout", "module.stack_lstm.StackRNN.push", "len", "sum", "sum", "type", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu().data.numpy().item", "type", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu().data.numpy().item", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transition_forest.TransitionForest.hidden2feat", "torch.relu", "torch.relu", "torch.relu", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "[].data.numpy().item", "action_v.cuda.cuda.cuda", "module.stack_lstm.BufferR.pop", "module.stack.Stack.shift", "real_action.startswith", "len", "transition_forest.TransitionForest.input_dropout", "transition_forest.TransitionForest.feat2act", "pdb.set_trace", "transition_forest.TransitionForest.action_embeds", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transition_forest.TransitionForest.action2label_star", "module.stack.Stack.reduceX", "real_action.startswith", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu().data.numpy", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu().data.numpy", "module.stack_lstm.StackRNN.embedding", "enumerate", "[].data.numpy", "losses[].append", "losses[].append", "transition_forest.TransitionForest.action2label_star", "module.stack.Stack.unaryX", "module.stack.Stack.top3", "module.stack_lstm.BufferR.embedding", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu", "cur_action.cpu().data.numpy().item.cpu().data.numpy().item.cpu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.functional.log_softmax.cpu", "torch.nn.functional.log_softmax.cpu", "torch.nn.functional.log_softmax.cpu"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.get_possible_actions", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.shift", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.action2label_star", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.reduceX", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.action2label_star", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.unaryX", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.top3", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding"], ["", "def", "forward", "(", "self", ",", "token_batch", ",", "pos_batch", ",", "label_batch", ",", "action_batch", ")", ":", "\n", "        ", "batch_size", ",", "sent_len", "=", "token_batch", ".", "size", "(", ")", "\n", "_", ",", "action_max_len", "=", "action_batch", ".", "size", "(", ")", "\n", "word_mat", "=", "self", ".", "word_embeds", "(", "token_batch", ")", "\n", "pos_mat", "=", "self", ".", "pos_embeds", "(", "pos_batch", ")", "\n", "token_mat", "=", "self", ".", "input_dropout", "(", "torch", ".", "cat", "(", "[", "word_mat", ",", "pos_mat", "]", ",", "2", ")", ")", "\n", "\n", "losses", "=", "[", "[", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "predict_actions", "=", "[", "[", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "correct_num_action", "=", "[", "0", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "totol_num_action", "=", "[", "0", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "tok_output", ",", "_", "=", "self", ".", "token_lstm", "(", "token_mat", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "self", ".", "config", ".", "if_treelstm", ":", "\n", "                ", "stack", "=", "AugStack", "(", "self", ".", "stack_lstm", ",", "self", ".", "stack_lstm_initial", ",", "self", ".", "ih_linear", ",", "self", ".", "oh_linear", ",", "self", ".", "reduce2stack", ",", "self", ".", "unary2stack", ",", "self", ".", "stack_empty", ")", "\n", "", "else", ":", "\n", "                ", "stack", "=", "Stack", "(", "self", ".", "stack_lstm", ",", "self", ".", "stack_lstm_initial", ",", "self", ".", "reduce2stack", ",", "self", ".", "unary2stack", ",", "self", ".", "stack_empty", ")", "\n", "\n", "", "action_stack", "=", "StackRNN", "(", "self", ".", "action_lstm", ",", "self", ".", "action_lstm_initial", ")", "\n", "buffer", "=", "BufferR", "(", "tok_output", "[", "batch_idx", "]", ",", "token_mat", "[", "batch_idx", "]", ",", "self", ".", "token_empty", ")", "\n", "\n", "for", "action_idx", "in", "range", "(", "action_max_len", ")", ":", "\n", "                ", "cur_action", "=", "action_batch", ".", "data", "[", "batch_idx", "]", "[", "action_idx", "]", "\n", "if", "type", "(", "cur_action", ")", "!=", "int", ":", "cur_action", "=", "cur_action", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "if", "cur_action", "==", "self", ".", "action2id", "[", "\"Pad\"", "]", ":", "break", "\n", "real_action", "=", "self", ".", "id2action", "[", "cur_action", "]", "\n", "\n", "#compute the loss", "\n", "if", "type", "(", "cur_action", ")", "!=", "int", ":", "cur_action", "=", "cur_action", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "valid_actions", ",", "valid_actions_v", "=", "self", ".", "get_possible_actions", "(", "stack", ",", "buffer", ")", "\n", "log_probs", "=", "None", "\n", "if", "len", "(", "valid_actions", ")", ">", "1", ":", "\n", "# decision_feature = torch.cat([stack.embedding()[0],", "\n", "                    ", "decision_feature", "=", "torch", ".", "cat", "(", "[", "*", "stack", ".", "top3", "(", ")", ",", "\n", "buffer", ".", "embedding", "(", ")", "[", "0", "]", ",", "action_stack", ".", "embedding", "(", ")", "]", ",", "0", ")", "\n", "hidden_output", "=", "self", ".", "hidden2feat", "(", "self", ".", "input_dropout", "(", "decision_feature", ")", ")", "\n", "score_feat", "=", "F", ".", "relu", "(", "hidden_output", ")", "\n", "logits", "=", "self", ".", "feat2act", "(", "score_feat", ")", "[", "valid_actions_v", "]", "\n", "\n", "va_table", "=", "{", "a", ":", "i", "for", "i", ",", "a", "in", "enumerate", "(", "valid_actions", ")", "}", "\n", "log_probs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits", ",", "0", ")", "\n", "max_id", "=", "torch", ".", "max", "(", "log_probs", ".", "cpu", "(", ")", ",", "0", ")", "[", "1", "]", ".", "data", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "action_predict", "=", "valid_actions", "[", "max_id", "]", "\n", "\n", "if", "cur_action", "not", "in", "va_table", ":", "\n", "                        ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "if", "log_probs", "is", "not", "None", ":", "\n", "                        ", "single_loss", "=", "log_probs", "[", "va_table", "[", "cur_action", "]", "]", "\n", "# losses[batch_idx].append(single_loss)", "\n", "\n", "# for balance", "\n", "if", "real_action", "==", "\"Pop\"", ":", "\n", "                            ", "losses", "[", "batch_idx", "]", ".", "append", "(", "self", ".", "config", ".", "discount", "*", "single_loss", ")", "\n", "", "else", ":", "\n", "                            ", "losses", "[", "batch_idx", "]", ".", "append", "(", "single_loss", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "action_predict", "=", "valid_actions", "[", "0", "]", "\n", "\n", "", "predict_actions", "[", "batch_idx", "]", ".", "append", "(", "action_predict", ")", "\n", "totol_num_action", "[", "batch_idx", "]", "+=", "1", "\n", "if", "real_action", "==", "self", ".", "id2action", "[", "action_predict", "]", ":", "\n", "                    ", "correct_num_action", "[", "batch_idx", "]", "+=", "1", "\n", "\n", "# push the action", "\n", "", "action_v", "=", "torch", ".", "LongTensor", "(", "[", "cur_action", "]", ")", "\n", "if", "self", ".", "config", ".", "if_gpu", ":", "action_v", "=", "action_v", ".", "cuda", "(", ")", "\n", "action_var", "=", "self", ".", "action_embeds", "(", "action_v", ")", ".", "squeeze", "(", "0", ")", "\n", "action_var", "=", "self", ".", "input_dropout", "(", "action_var", ")", "\n", "action_stack", ".", "push", "(", "action_var", ")", "\n", "\n", "# execute the action", "\n", "if", "real_action", "==", "'Shift'", ":", "\n", "                    ", "buffer_state", ",", "word_vec", "=", "buffer", ".", "pop", "(", ")", "\n", "stack", ".", "shift", "(", "torch", ".", "cat", "(", "[", "buffer_state", ",", "word_vec", "]", ",", "0", ")", ")", "\n", "", "elif", "real_action", ".", "startswith", "(", "'Reduce'", ")", ":", "\n", "                    ", "label_id", "=", "self", ".", "action2label_star", "(", "cur_action", ")", "\n", "stack", ".", "reduceX", "(", "label_id", ")", "\n", "", "elif", "real_action", ".", "startswith", "(", "'Unary'", ")", ":", "\n", "                    ", "label_id", "=", "self", ".", "action2label_star", "(", "cur_action", ")", "\n", "stack", ".", "unaryX", "(", "label_id", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "\n", "\n", "# sanity check", "\n", "", "", "assert", "len", "(", "buffer", ")", "==", "0", "\n", "action_strs", "=", "[", "self", ".", "id2action", "[", "a", "]", "for", "a", "in", "predict_actions", "[", "batch_idx", "]", "]", "\n", "# print(\" \".join(action_strs))", "\n", "\n", "", "loss_v", "=", "[", "]", "\n", "action_num", "=", "0", "\n", "for", "idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "loss_v", ".", "append", "(", "sum", "(", "losses", "[", "idx", "]", ")", ")", "\n", "action_num", "+=", "len", "(", "losses", "[", "idx", "]", ")", "\n", "\n", "", "batch_mean_loss", "=", "-", "1.0", "*", "sum", "(", "loss_v", ")", "/", "batch_size", "\n", "return", "batch_mean_loss", ",", "(", "predict_actions", ",", "correct_num_action", ",", "totol_num_action", ")", "if", "len", "(", "losses", ")", ">", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.predict": [[265, 344], ["token_batch.size", "transition_forest.TransitionForest.word_embeds", "transition_forest.TransitionForest.pos_embeds", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transition_forest.TransitionForest.token_lstm", "range", "collections.defaultdict", "enumerate", "module.stack_lstm.StackRNN", "module.stack_lstm.BufferR", "transition_forest.TransitionForest.executor.execute", "ret_triples.append", "range", "range", "range", "module.stack.AugStack", "module.stack.Stack", "len", "transition_forest.TransitionForest.get_possible_actions", "predict_actions[].append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "transition_forest.TransitionForest.action_embeds().squeeze", "module.stack_lstm.StackRNN.push", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transition_forest.TransitionForest.hidden2feat", "torch.relu", "torch.relu", "torch.relu", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "[].data.numpy().item", "action_v.cuda.cuda.cuda", "module.stack_lstm.BufferR.pop", "module.stack.Stack.shift", "real_action.startswith", "transition_forest.TransitionForest.feat2act", "len", "pdb.set_trace", "transition_forest.TransitionForest.action_embeds", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transition_forest.TransitionForest.action2label_star", "module.stack.Stack.reduceX", "real_action.startswith", "module.stack_lstm.StackRNN.embedding", "enumerate", "[].data.numpy", "transition_forest.TransitionForest.action2label_star", "module.stack.Stack.unaryX", "module.stack.Stack.top3", "module.stack_lstm.BufferR.embedding", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.functional.log_softmax.cpu", "torch.nn.functional.log_softmax.cpu", "torch.nn.functional.log_softmax.cpu"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.execute", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.get_possible_actions", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.push", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.shift", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.action2label_star", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.reduceX", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.action2label_star", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack.AugStack.unaryX", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.StackRNN.top3", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.embedding"], ["", "def", "predict", "(", "self", ",", "token_batch", ",", "pos_batch", ")", ":", "\n", "        ", "\"\"\"\n        return predicted triples and error dict for all kinds of errors\n        \"\"\"", "\n", "batch_size", ",", "sent_len", "=", "token_batch", ".", "size", "(", ")", "\n", "word_mat", "=", "self", ".", "word_embeds", "(", "token_batch", ")", "\n", "pos_mat", "=", "self", ".", "pos_embeds", "(", "pos_batch", ")", "\n", "token_mat", "=", "torch", ".", "cat", "(", "[", "word_mat", ",", "pos_mat", "]", ",", "2", ")", "\n", "\n", "losses", "=", "[", "[", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "correct_num_action", "=", "[", "0", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "predict_actions", "=", "[", "[", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "tok_output", ",", "_", "=", "self", ".", "token_lstm", "(", "token_mat", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "self", ".", "config", ".", "if_treelstm", ":", "\n", "                ", "stack", "=", "AugStack", "(", "self", ".", "stack_lstm", ",", "self", ".", "stack_lstm_initial", ",", "self", ".", "ih_linear", ",", "self", ".", "oh_linear", ",", "self", ".", "reduce2stack", ",", "self", ".", "unary2stack", ",", "self", ".", "stack_empty", ")", "\n", "", "else", ":", "\n", "                ", "stack", "=", "Stack", "(", "self", ".", "stack_lstm", ",", "self", ".", "stack_lstm_initial", ",", "self", ".", "reduce2stack", ",", "self", ".", "unary2stack", ",", "self", ".", "stack_empty", ")", "\n", "\n", "", "action_stack", "=", "StackRNN", "(", "self", ".", "action_lstm", ",", "self", ".", "action_lstm_initial", ")", "\n", "buffer", "=", "BufferR", "(", "tok_output", "[", "batch_idx", "]", ",", "token_mat", "[", "batch_idx", "]", ",", "self", ".", "token_empty", ")", "\n", "\n", "while", "len", "(", "buffer", ")", ">", "0", ":", "\n", "# pdb.set_trace()", "\n", "                ", "valid_actions", ",", "valid_actions_v", "=", "self", ".", "get_possible_actions", "(", "stack", ",", "buffer", ")", "\n", "if", "len", "(", "valid_actions", ")", ">", "1", ":", "\n", "# decision_feature = torch.cat([stack.embedding()[0],", "\n", "                    ", "decision_feature", "=", "torch", ".", "cat", "(", "[", "*", "stack", ".", "top3", "(", ")", ",", "\n", "buffer", ".", "embedding", "(", ")", "[", "0", "]", ",", "action_stack", ".", "embedding", "(", ")", "]", ",", "0", ")", "\n", "hidden_output", "=", "self", ".", "hidden2feat", "(", "decision_feature", ")", "\n", "score_feat", "=", "F", ".", "relu", "(", "hidden_output", ")", "\n", "logits", "=", "self", ".", "feat2act", "(", "score_feat", ")", "[", "valid_actions_v", "]", "\n", "\n", "va_table", "=", "{", "a", ":", "i", "for", "i", ",", "a", "in", "enumerate", "(", "valid_actions", ")", "}", "\n", "log_probs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits", ",", "0", ")", "\n", "max_id", "=", "torch", ".", "max", "(", "log_probs", ".", "cpu", "(", ")", ",", "0", ")", "[", "1", "]", ".", "data", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "action_predict", "=", "valid_actions", "[", "max_id", "]", "\n", "", "else", ":", "\n", "                    ", "if", "len", "(", "valid_actions", ")", "==", "0", ":", "pdb", ".", "set_trace", "(", ")", "\n", "action_predict", "=", "valid_actions", "[", "0", "]", "\n", "\n", "", "predict_actions", "[", "batch_idx", "]", ".", "append", "(", "self", ".", "id2action", "[", "action_predict", "]", ")", "\n", "real_action", "=", "self", ".", "id2action", "[", "action_predict", "]", "\n", "\n", "# push the action", "\n", "action_v", "=", "torch", ".", "LongTensor", "(", "[", "action_predict", "]", ")", "\n", "if", "self", ".", "config", ".", "if_gpu", ":", "action_v", "=", "action_v", ".", "cuda", "(", ")", "\n", "action_var", "=", "self", ".", "action_embeds", "(", "action_v", ")", ".", "squeeze", "(", "0", ")", "\n", "action_stack", ".", "push", "(", "action_var", ")", "\n", "\n", "# execute the action", "\n", "if", "real_action", "==", "'Shift'", ":", "\n", "                    ", "buffer_state", ",", "word_vec", "=", "buffer", ".", "pop", "(", ")", "\n", "stack", ".", "shift", "(", "torch", ".", "cat", "(", "[", "buffer_state", ",", "word_vec", "]", ",", "0", ")", ")", "\n", "", "elif", "real_action", ".", "startswith", "(", "'Reduce'", ")", ":", "\n", "                    ", "label_id", "=", "self", ".", "action2label_star", "(", "action_predict", ")", "\n", "stack", ".", "reduceX", "(", "label_id", ")", "\n", "", "elif", "real_action", ".", "startswith", "(", "'Unary'", ")", ":", "\n", "                    ", "label_id", "=", "self", ".", "action2label_star", "(", "action_predict", ")", "\n", "stack", ".", "unaryX", "(", "label_id", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "\n", "\n", "# sanity check", "\n", "", "", "assert", "len", "(", "buffer", ")", "==", "0", "\n", "# print(\" \".join(predict_actions[batch_idx]))", "\n", "\n", "", "error_dir", "=", "defaultdict", "(", "int", ")", "\n", "ret_triples", "=", "[", "]", "\n", "num_invalids", "=", "0", "\n", "for", "i", ",", "actions", "in", "enumerate", "(", "predict_actions", ")", ":", "\n", "            ", "triples", ",", "inv_", "=", "self", ".", "executor", ".", "execute", "(", "sent_len", ",", "actions", ")", "\n", "ret_triples", ".", "append", "(", "triples", ")", "\n", "num_invalids", "+=", "inv_", "\n", "\n", "", "error_dir", "[", "\"invalid_chunks\"", "]", "=", "num_invalids", "\n", "return", "ret_triples", ",", "error_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.training.util.adjust_learning_rate": [[6, 13], ["print"], "function", ["None"], ["\n", "\n", "def", "xavier_init", "(", "if_gpu", ",", "*", "size", ")", ":", "\n", "    ", "var", "=", "nn", ".", "init", ".", "xavier_normal_", "(", "torch", ".", "FloatTensor", "(", "*", "size", ")", ")", "\n", "if", "if_gpu", ":", "var", "=", "var", ".", "cuda", "(", ")", "\n", "return", "nn", ".", "Parameter", "(", "var", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.training.util.create_opt": [[14, 27], ["torch.SGD", "torch.Adam", "torch.Adadelta", "torch.Adagrad", "print", "util.adamw.AdamW"], "function", ["None"], ["", "def", "init_embedding", "(", "input_embedding", ")", ":", "\n", "    ", "bias", "=", "np", ".", "sqrt", "(", "3.0", "/", "input_embedding", ".", "size", "(", "1", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "input_embedding", ",", "-", "bias", ",", "bias", ")", "\n", "\n", "\n", "", "def", "init_linear", "(", "input_linear", ")", ":", "\n", "    ", "bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "input_linear", ".", "weight", ".", "size", "(", "0", ")", "+", "input_linear", ".", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "input_linear", ".", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "if", "input_linear", ".", "bias", "is", "not", "None", ":", "\n", "        ", "input_linear", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "\n", "", "", "def", "init_lstm", "(", "input_lstm", ")", ":", "\n", "    ", "for", "ind", "in", "range", "(", "0", ",", "input_lstm", ".", "num_layers", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.training.util.clip_model_grad": [[29, 31], ["torch.utils.clip_grad_norm_", "model.parameters"], "function", ["None"], ["bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "weight", ".", "size", "(", "0", ")", "/", "4", "+", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "weight", "=", "eval", "(", "'input_lstm.weight_hh_l'", "+", "str", "(", "ind", ")", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.training.util.load_dynamic_config": [[34, 40], ["print"], "function", ["None"], ["\n", "", "if", "input_lstm", ".", "bias", ":", "\n", "        ", "for", "ind", "in", "range", "(", "0", ",", "input_lstm", ".", "num_layers", ")", ":", "\n", "            ", "weight", "=", "eval", "(", "'input_lstm.bias_ih_l'", "+", "str", "(", "ind", ")", ")", "\n", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "weight", ".", "data", "[", "input_lstm", ".", "hidden_size", ":", "2", "*", "input_lstm", ".", "hidden_size", "]", "=", "1", "\n", "weight", "=", "eval", "(", "'input_lstm.bias_hh_l'", "+", "str", "(", "ind", ")", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.adamw.AdamW.__init__": [[25, 30], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.adamw.AdamW.step": [[31, 85], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "p.data.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'AdamW does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# according to the paper, this penalty should come after the bias correction", "\n", "# if group['weight_decay'] != 0:", "\n", "#     grad = grad.add(group['weight_decay'], p.data)", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.evaluate.evaluate": [[6, 21], ["zip", "len", "len"], "function", ["None"], ["def", "evaluate", "(", "gold_entities", ",", "pred_entities", ")", ":", "\n", "    ", "prec_all_num", ",", "prec_num", ",", "recall_all_num", ",", "recall_num", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "g_ets", ",", "p_ets", "in", "zip", "(", "gold_entities", ",", "pred_entities", ")", ":", "\n", "        ", "recall_all_num", "+=", "len", "(", "g_ets", ")", "\n", "prec_all_num", "+=", "len", "(", "p_ets", ")", "\n", "\n", "for", "et", "in", "g_ets", ":", "\n", "            ", "if", "et", "in", "p_ets", ":", "\n", "                ", "recall_num", "+=", "1", "\n", "\n", "", "", "for", "et", "in", "p_ets", ":", "\n", "            ", "if", "et", "in", "g_ets", ":", "\n", "                ", "prec_num", "+=", "1", "\n", "\n", "", "", "", "return", "prec_all_num", ",", "prec_num", ",", "recall_all_num", ",", "recall_num", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.evaluate.get_f1": [[22, 64], ["print", "print", "print", "torch.LongTensor", "torch.LongTensor", "token_batch_var.cuda.size", "numpy.array", "numpy.array", "token_batch_var.cuda.cuda", "pos_batch_var.cuda.cuda", "torch.no_grad", "model.eval", "model.predict", "evaluate.evaluate"], "function", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.model.transition_forest.TransitionForest.predict", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.evaluate.evaluate"], ["", "def", "get_f1", "(", "model", ",", "batch_zip", ",", "config", ")", ":", "\n", "    ", "pred_all", ",", "pred", ",", "recall_all", ",", "recall", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "f_pred_all", ",", "f_pred", ",", "f_recall_all", ",", "f_recall", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "num_invalids", "=", "0", "\n", "num_words", "=", "0", "\n", "\n", "for", "token_batch", ",", "pos_batch", ",", "label_batch", ",", "action_batch", "in", "batch_zip", ":", "\n", "        ", "token_batch_var", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "token_batch", ")", ")", "\n", "pos_batch_var", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "pos_batch", ")", ")", "\n", "if", "config", ".", "if_gpu", ":", "\n", "            ", "token_batch_var", "=", "token_batch_var", ".", "cuda", "(", ")", "\n", "pos_batch_var", "=", "pos_batch_var", ".", "cuda", "(", ")", "\n", "\n", "", "sent_len", ",", "batch_size", "=", "token_batch_var", ".", "size", "(", ")", "\n", "num_words", "+=", "sent_len", "*", "batch_size", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "pred_entities", ",", "error_dic", "=", "model", ".", "predict", "(", "token_batch_var", ",", "pos_batch_var", ")", "\n", "p_a", ",", "p", ",", "r_a", ",", "r", "=", "evaluate", "(", "label_batch", ",", "pred_entities", ")", "\n", "\n", "", "pred_all", "+=", "p_a", "\n", "pred", "+=", "p", "\n", "recall_all", "+=", "r_a", "\n", "recall", "+=", "r", "\n", "\n", "num_invalids", "+=", "error_dic", "[", "\"invalid_chunk\"", "]", "\n", "\n", "", "if", "pred_all", "==", "0", ":", "\n", "        ", "p", "=", "0", "\n", "", "else", ":", "\n", "        ", "p", "=", "pred", "/", "pred_all", "\n", "\n", "", "r", "=", "recall", "/", "recall_all", "\n", "if", "p", "==", "0", "or", "r", "==", "0", ":", "\n", "        ", "f1", "=", "0", "\n", "", "else", ":", "\n", "        ", "f1", "=", "2.0", "/", "(", "(", "1.0", "/", "p", ")", "+", "(", "1.0", "/", "r", ")", ")", "\n", "", "print", "(", "\"Precision {0}, Recall {1}, F1 {2}\"", ".", "format", "(", "p", ",", "r", ",", "f1", ")", ")", "\n", "print", "(", "\"Number of invalid mentions {}\"", ".", "format", "(", "num_invalids", ")", ")", "\n", "print", "(", "\"Number of word {}\"", ".", "format", "(", "num_words", ")", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.evaluate.get_action_acc": [[65, 72], ["zip"], "function", ["None"], ["", "def", "get_action_acc", "(", "acc_num", ",", "total_num", ")", ":", "\n", "    ", "acc", "=", "0", "\n", "total", "=", "0", "\n", "for", "a", ",", "t", "in", "zip", "(", "acc_num", ",", "total_num", ")", ":", "\n", "        ", "acc", "+=", "a", "\n", "total", "+=", "t", "\n", "", "return", "acc", "*", "1.0", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.__init__": [[9, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tuples", ")", ":", "\n", "        ", "\"\"\"\n        tuple: <start, end, ...>\n        \"\"\"", "\n", "self", ".", "tuples", "=", "tuples", "\n", "self", ".", "query_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.__getitem__": [[16, 27], ["rets.append"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        return tuples that overlaps with the input\n        \"\"\"", "\n", "rets", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "tuples", ":", "\n", "            ", "if", "(", "q", "[", "0", "]", ">=", "item", "[", "0", "]", "and", "q", "[", "0", "]", "<=", "item", "[", "1", "]", ")", "or", "(", "(", "q", "[", "1", "]", ">=", "item", "[", "0", "]", "and", "q", "[", "1", "]", "<=", "item", "[", "1", "]", ")", ")", "or", "(", "q", "[", "0", "]", "<", "item", "[", "0", "]", "and", "q", "[", "1", "]", ">", "item", "[", "1", "]", ")", ":", "\n", "                ", "if", "q", "!=", "item", ":", "\n", "                    ", "rets", ".", "append", "(", "item", ")", "\n", "", "", "", "return", "rets", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.query": [[28, 40], ["len", "range"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        if idx is contained in a chunk\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "query_cache", ")", "==", "0", ":", "\n", "            ", "for", "item", "in", "self", ".", "tuples", ":", "\n", "                ", "for", "i", "in", "range", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", "+", "1", ")", ":", "\n", "                    ", "self", ".", "query_cache", "[", "i", "]", "=", "item", "\n", "", "", "", "if", "idx", "in", "self", ".", "query_cache", ":", "\n", "            ", "return", "self", ".", "query_cache", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.update": [[41, 48], ["oracle.SegmentSet.tuples.append", "oracle.SegmentSet.tuples.remove"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "parent", ",", "children", ")", ":", "\n", "        ", "\"\"\"\n        update the segment set, remove children from tuples\n        \"\"\"", "\n", "for", "item", "in", "children", ":", "\n", "            ", "self", ".", "tuples", ".", "remove", "(", "item", ")", "\n", "", "self", ".", "tuples", ".", "append", "(", "parent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.TreeNode.__init__": [[50, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "segment", ",", "label", ",", "children", ")", ":", "\n", "        ", "self", ".", "segment", "=", "segment", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "children", "=", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.TreeNode.__repr__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"<start: {}, end: {}, label: {}>\"", ".", "format", "(", "self", ".", "segment", "[", "0", "]", ",", "self", ".", "segment", "[", "1", "]", ",", "self", ".", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.Executor.__init__": [[62, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "labels", "=", "None", ",", "label2id", "=", "None", ")", ":", "\n", "        ", "ACTIONS_1", "=", "[", "\"Shift\"", ",", "\"Pop\"", "]", "\n", "ACTIONS_2", "=", "[", "\"Unary-\"", ",", "\"Reduce-\"", "]", "\n", "# self.actions = ACTIONS_1 + [ac_ + label_ for ac_ in ACTIONS_2 for label_ in labels]", "\n", "self", ".", "non_label", "=", "\"O\"", "\n", "self", ".", "label2id", "=", "label2id", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.Executor.execute": [[69, 114], ["oracle.Executor.execute.recur_resolve"], "methods", ["None"], ["", "def", "execute", "(", "self", ",", "sent_len", ",", "actions", ")", ":", "\n", "        ", "\"\"\"\n        maps a sequence of actions to triples\n        \"\"\"", "\n", "output", "=", "[", "]", "\n", "stack", "=", "[", "]", "\n", "buffer_len", "=", "sent_len", "\n", "buffer_pointer", "=", "0", "\n", "\n", "for", "action", "in", "actions", ":", "\n", "            ", "if", "action", "==", "\"Shift\"", ":", "\n", "                ", "item", "=", "TreeNode", "(", "(", "buffer_pointer", ",", "buffer_pointer", ")", ",", "self", ".", "non_label", ",", "None", ")", "\n", "stack", ".", "append", "(", "item", ")", "\n", "buffer_pointer", "+=", "1", "\n", "", "elif", "action", "==", "\"Pop\"", ":", "\n", "                ", "if", "len", "(", "stack", ")", "!=", "1", ":", "pdb", ".", "set_trace", "(", ")", "\n", "item", "=", "stack", "[", ":", "]", "[", "0", "]", "\n", "output", ".", "append", "(", "item", ")", "\n", "stack", "=", "[", "]", "\n", "", "elif", "action", ".", "startswith", "(", "\"Reduce\"", ")", ":", "\n", "                ", "label", "=", "action", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "if", "len", "(", "stack", ")", "<", "2", ":", "pdb", ".", "set_trace", "(", ")", "\n", "x1", "=", "stack", ".", "pop", "(", ")", "\n", "x0", "=", "stack", ".", "pop", "(", ")", "\n", "new_segment", "=", "(", "x0", ".", "segment", "[", "0", "]", ",", "x1", ".", "segment", "[", "1", "]", ")", "\n", "item", "=", "TreeNode", "(", "new_segment", ",", "label", ",", "(", "x0", ",", "x1", ")", ")", "\n", "stack", ".", "append", "(", "item", ")", "\n", "", "elif", "action", ".", "startswith", "(", "\"Unary\"", ")", ":", "\n", "                ", "label", "=", "action", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "stack", "[", "-", "1", "]", ".", "label", "=", "label", "\n", "\n", "", "", "ret_triples", "=", "[", "]", "\n", "def", "recur_resolve", "(", "treenode", ")", ":", "\n", "            ", "if", "treenode", ".", "label", "!=", "self", ".", "non_label", "and", "treenode", ".", "label", "[", "-", "1", "]", "!=", "\"*\"", ":", "\n", "                ", "if", "self", ".", "label2id", "is", "not", "None", ":", "\n", "                    ", "ret_triples", ".", "append", "(", "(", "treenode", ".", "segment", "[", "0", "]", ",", "treenode", ".", "segment", "[", "1", "]", ",", "self", ".", "label2id", "[", "treenode", ".", "label", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ret_triples", ".", "append", "(", "(", "treenode", ".", "segment", "[", "0", "]", ",", "treenode", ".", "segment", "[", "1", "]", ",", "treenode", ".", "label", ")", ")", "\n", "\n", "", "", "if", "treenode", ".", "children", "is", "not", "None", ":", "\n", "                ", "for", "child", "in", "treenode", ".", "children", ":", "\n", "                    ", "recur_resolve", "(", "child", ")", "\n", "", "", "", "for", "node", "in", "output", ":", "\n", "            ", "recur_resolve", "(", "node", ")", "\n", "", "return", "ret_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.Executor.triple2actions": [[116, 200], ["sorted", "collections.defaultdict", "oracle.SegmentSet", "oracle.SegmentSet.query", "chunk2actions[].append", "chunk2actions[].append", "oracle.SegmentSet.update", "oracle.SegmentSet.update", "ret_actions.append", "ret_actions.append", "ret_actions.append", "len", "chunk2actions[].append", "range", "chunk2actions[].append", "chunk2actions[].append", "sorted", "chunk2actions[].append", "chunk2actions[].append", "len", "sorted.pop", "chunk2actions[].append", "chunk2actions[].append", "chunk2actions[].append", "range", "chunk2actions[].append", "range", "chunk2actions[].append", "chunk2actions[].append", "chunk2actions[].append", "chunk2actions[].append", "chunk2actions[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.query", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.update", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.update", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop"], ["", "def", "triple2actions", "(", "self", ",", "triples", ",", "sent_len", ",", "branching", "=", "\"left\"", ")", ":", "\n", "        ", "\"\"\"\n        Convert triples to a sequence of actions \n        \"\"\"", "\n", "sort_triples", "=", "sorted", "(", "triples", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "-", "x", "[", "0", "]", ")", "\n", "\n", "chunk2actions", "=", "defaultdict", "(", "list", ")", "\n", "segmentset", "=", "SegmentSet", "(", "[", "]", ")", "\n", "for", "triple", "in", "sort_triples", ":", "\n", "# print(triple)", "\n", "            ", "if", "triple", "[", "1", "]", "-", "triple", "[", "0", "]", "==", "0", ":", "\n", "                ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Unary-\"", "+", "triple", "[", "2", "]", ")", "\n", "segmentset", ".", "update", "(", "triple", ",", "[", "]", ")", "\n", "", "else", ":", "\n", "# pdb.set_trace()", "\n", "                ", "overlaps", "=", "segmentset", "[", "triple", "]", "\n", "segmentset", ".", "update", "(", "triple", ",", "overlaps", ")", "\n", "if", "len", "(", "overlaps", ")", "==", "0", ":", "\n", "                    ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "for", "_", "in", "range", "(", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "-", "1", ")", ":", "\n", "                        ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", "+", "\"*\"", ")", "\n", "", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "# pdb.set_trace()", "\n", "# serve as a stack", "\n", "                    ", "overlaps", "=", "sorted", "(", "overlaps", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "0", "]", ")", "\n", "i", "=", "triple", "[", "0", "]", "\n", "stack_empty", "=", "True", "\n", "while", "i", "<", "triple", "[", "1", "]", "+", "1", ":", "\n", "                        ", "if", "len", "(", "overlaps", ")", ">", "0", ":", "\n", "# before overlap", "\n", "                            ", "count", "=", "overlaps", "[", "-", "1", "]", "[", "0", "]", "-", "i", "\n", "if", "count", ">", "0", ":", "\n", "                                ", "if", "stack_empty", ":", "\n", "                                    ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "num_shift_reduce", "=", "count", "-", "1", "\n", "", "else", ":", "\n", "                                    ", "num_shift_reduce", "=", "count", "\n", "\n", "", "if", "num_shift_reduce", ">", "0", ":", "\n", "                                    ", "for", "_", "in", "range", "(", "num_shift_reduce", ")", ":", "\n", "                                        ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", "+", "\"*\"", ")", "\n", "\n", "# overlap", "\n", "", "", "", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", "+=", "chunk2actions", "[", "overlaps", "[", "-", "1", "]", "[", "0", "]", ",", "overlaps", "[", "-", "1", "]", "[", "1", "]", "]", "\n", "\n", "# after overlap", "\n", "if", "triple", "[", "1", "]", "==", "overlaps", "[", "-", "1", "]", "[", "1", "]", ":", "\n", "                                ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", ")", "\n", "", "elif", "(", "overlaps", "[", "-", "1", "]", "[", "0", "]", "-", "triple", "[", "0", "]", ")", ">", "0", ":", "\n", "                                ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", "+", "\"*\"", ")", "\n", "\n", "# pop it", "\n", "", "i", "=", "overlaps", "[", "-", "1", "]", "[", "1", "]", "+", "1", "\n", "del", "chunk2actions", "[", "overlaps", "[", "-", "1", "]", "[", "0", "]", ",", "overlaps", "[", "-", "1", "]", "[", "1", "]", "]", "\n", "stack_empty", "=", "False", "\n", "overlaps", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "                            ", "count", "=", "triple", "[", "1", "]", "-", "i", "+", "1", "\n", "if", "count", ">", "1", ":", "\n", "                                ", "for", "_", "in", "range", "(", "count", "-", "1", ")", ":", "\n", "                                    ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", "+", "\"*\"", ")", "\n", "", "", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", ")", "\n", "i", "+=", "count", "\n", "\n", "", "", "", "", "", "ret_actions", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "sent_len", ":", "\n", "            ", "seg", "=", "segmentset", ".", "query", "(", "i", ")", "\n", "if", "seg", "is", "None", ":", "\n", "                ", "ret_actions", ".", "append", "(", "\"Shift\"", ")", "\n", "ret_actions", ".", "append", "(", "\"Pop\"", ")", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "ret_actions", "+=", "chunk2actions", "[", "seg", "[", "0", "]", ",", "seg", "[", "1", "]", "]", "\n", "ret_actions", ".", "append", "(", "\"Pop\"", ")", "\n", "i", "=", "seg", "[", "1", "]", "+", "1", "\n", "", "", "return", "ret_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.__init__": [[205, 211], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "labels", "=", "None", ",", "label2id", "=", "None", ",", "mode", "=", "\"normal\"", ")", ":", "\n", "        ", "ACTIONS_1", "=", "[", "\"Shift\"", "]", "\n", "ACTIONS_2", "=", "[", "\"Unary-\"", ",", "\"Reduce-\"", "]", "\n", "self", ".", "non_label", "=", "\"O\"", "\n", "self", ".", "label2id", "=", "label2id", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.execute": [[212, 264], ["oracle.ExecutorR.execute.recur_resolve"], "methods", ["None"], ["", "def", "execute", "(", "self", ",", "sent_len", ",", "actions", ")", ":", "\n", "        ", "\"\"\"\n        maps a sequence of actions to triples\n        return: valid_triples, num_invalid_triples, \n        \"\"\"", "\n", "stack", "=", "[", "]", "\n", "buffer_len", "=", "sent_len", "\n", "buffer_pointer", "=", "0", "\n", "\n", "for", "action", "in", "actions", ":", "\n", "            ", "if", "action", "==", "\"Shift\"", ":", "\n", "                ", "item", "=", "TreeNode", "(", "(", "buffer_pointer", ",", "buffer_pointer", ")", ",", "self", ".", "non_label", ",", "None", ")", "\n", "stack", ".", "append", "(", "item", ")", "\n", "buffer_pointer", "+=", "1", "\n", "", "elif", "action", ".", "startswith", "(", "\"Reduce\"", ")", ":", "\n", "                ", "label", "=", "action", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "if", "len", "(", "stack", ")", "<", "2", ":", "pdb", ".", "set_trace", "(", ")", "\n", "x1", "=", "stack", ".", "pop", "(", ")", "\n", "x0", "=", "stack", ".", "pop", "(", ")", "\n", "new_segment", "=", "(", "x0", ".", "segment", "[", "0", "]", ",", "x1", ".", "segment", "[", "1", "]", ")", "\n", "item", "=", "TreeNode", "(", "new_segment", ",", "label", ",", "(", "x0", ",", "x1", ")", ")", "\n", "stack", ".", "append", "(", "item", ")", "\n", "", "elif", "action", ".", "startswith", "(", "\"Unary\"", ")", ":", "\n", "                ", "label", "=", "action", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "stack", "[", "-", "1", "]", ".", "label", "=", "label", "\n", "\n", "", "", "num_invalid", "=", "0", "\n", "ret_triples", "=", "[", "]", "\n", "def", "recur_resolve", "(", "treenode", ")", ":", "\n", "            ", "if", "treenode", ".", "label", "!=", "self", ".", "non_label", "and", "treenode", ".", "label", "[", "-", "1", "]", "!=", "\"*\"", ":", "\n", "                ", "if", "self", ".", "label2id", "is", "not", "None", ":", "\n", "                    ", "ret_triples", ".", "append", "(", "(", "treenode", ".", "segment", "[", "0", "]", ",", "treenode", ".", "segment", "[", "1", "]", ",", "self", ".", "label2id", "[", "treenode", ".", "label", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ret_triples", ".", "append", "(", "(", "treenode", ".", "segment", "[", "0", "]", ",", "treenode", ".", "segment", "[", "1", "]", ",", "treenode", ".", "label", ")", ")", "\n", "", "", "elif", "treenode", ".", "label", "==", "self", ".", "non_label", "and", "self", ".", "mode", "==", "\"mws\"", ":", "\n", "                ", "if", "self", ".", "label2id", "is", "not", "None", ":", "\n", "                    ", "ret_triples", ".", "append", "(", "(", "treenode", ".", "segment", "[", "0", "]", ",", "treenode", ".", "segment", "[", "1", "]", ",", "self", ".", "label2id", "[", "\"0\"", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ret_triples", ".", "append", "(", "(", "treenode", ".", "segment", "[", "0", "]", ",", "treenode", ".", "segment", "[", "1", "]", ",", "\"0\"", ")", ")", "\n", "\n", "\n", "", "", "if", "treenode", ".", "children", "is", "not", "None", ":", "\n", "                ", "for", "child", "in", "treenode", ".", "children", ":", "\n", "                    ", "recur_resolve", "(", "child", ")", "\n", "\n", "", "", "", "for", "node", "in", "stack", ":", "\n", "# invalid nodes", "\n", "            ", "if", "node", ".", "label", "!=", "self", ".", "non_label", "and", "node", ".", "label", "[", "-", "1", "]", "==", "\"*\"", ":", "\n", "                ", "num_invalid", "+=", "0", "\n", "\n", "", "recur_resolve", "(", "node", ")", "\n", "", "return", "ret_triples", ",", "num_invalid", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.ExecutorR.triple2actions": [[266, 357], ["sorted", "collections.defaultdict", "oracle.SegmentSet", "oracle.SegmentSet.query", "chunk2actions[].append", "chunk2actions[].append", "oracle.SegmentSet.update", "oracle.SegmentSet.update", "ret_actions.append", "filter_triples.append", "len", "chunk2actions[].append", "range", "chunk2actions[].append", "chunk2actions[].append", "sorted", "chunk2actions[].append", "chunk2actions[].append", "len", "sorted.pop", "chunk2actions[].append", "chunk2actions[].append", "chunk2actions[].append", "range", "chunk2actions[].append", "range", "chunk2actions[].append", "chunk2actions[].append", "chunk2actions[].append", "chunk2actions[].append", "chunk2actions[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.query", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.update", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.util.oracle.SegmentSet.update", "home.repos.pwc.inspect_result.berlino_nest-trans-em18.module.stack_lstm.Buffer.pop"], ["", "def", "triple2actions", "(", "self", ",", "triples", ",", "sent_len", ",", "branching", "=", "\"left\"", ")", ":", "\n", "        ", "\"\"\"\n        Convert triples to a sequence of actions \n        \"\"\"", "\n", "\n", "# filter length with 1", "\n", "if", "self", ".", "mode", "==", "\"mws\"", ":", "\n", "            ", "filter_triples", "=", "[", "]", "\n", "for", "t", "in", "triples", ":", "\n", "                ", "if", "t", "[", "0", "]", "!=", "t", "[", "1", "]", ":", "\n", "                    ", "filter_triples", ".", "append", "(", "t", ")", "\n", "", "", "triples", "=", "filter_triples", "\n", "\n", "", "sort_triples", "=", "sorted", "(", "triples", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "-", "x", "[", "0", "]", ")", "\n", "\n", "chunk2actions", "=", "defaultdict", "(", "list", ")", "\n", "segmentset", "=", "SegmentSet", "(", "[", "]", ")", "\n", "for", "triple", "in", "sort_triples", ":", "\n", "# print(triple)", "\n", "            ", "if", "triple", "[", "1", "]", "-", "triple", "[", "0", "]", "==", "0", ":", "\n", "                ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Unary-\"", "+", "triple", "[", "2", "]", ")", "\n", "segmentset", ".", "update", "(", "triple", ",", "[", "]", ")", "\n", "", "else", ":", "\n", "# pdb.set_trace()", "\n", "                ", "overlaps", "=", "segmentset", "[", "triple", "]", "\n", "segmentset", ".", "update", "(", "triple", ",", "overlaps", ")", "\n", "if", "len", "(", "overlaps", ")", "==", "0", ":", "\n", "                    ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "for", "_", "in", "range", "(", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "-", "1", ")", ":", "\n", "                        ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", "+", "\"*\"", ")", "\n", "", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "# pdb.set_trace()", "\n", "# serve as a stack", "\n", "                    ", "overlaps", "=", "sorted", "(", "overlaps", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "0", "]", ")", "\n", "i", "=", "triple", "[", "0", "]", "\n", "stack_empty", "=", "True", "\n", "while", "i", "<", "triple", "[", "1", "]", "+", "1", ":", "\n", "                        ", "if", "len", "(", "overlaps", ")", ">", "0", ":", "\n", "# before overlap", "\n", "                            ", "count", "=", "overlaps", "[", "-", "1", "]", "[", "0", "]", "-", "i", "\n", "if", "count", ">", "0", ":", "\n", "                                ", "if", "stack_empty", ":", "\n", "                                    ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "num_shift_reduce", "=", "count", "-", "1", "\n", "", "else", ":", "\n", "                                    ", "num_shift_reduce", "=", "count", "\n", "\n", "", "if", "num_shift_reduce", ">", "0", ":", "\n", "                                    ", "for", "_", "in", "range", "(", "num_shift_reduce", ")", ":", "\n", "                                        ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", "+", "\"*\"", ")", "\n", "\n", "# overlap", "\n", "", "", "", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", "+=", "chunk2actions", "[", "overlaps", "[", "-", "1", "]", "[", "0", "]", ",", "overlaps", "[", "-", "1", "]", "[", "1", "]", "]", "\n", "\n", "# after overlap", "\n", "if", "triple", "[", "1", "]", "==", "overlaps", "[", "-", "1", "]", "[", "1", "]", ":", "\n", "                                ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", ")", "\n", "", "elif", "(", "overlaps", "[", "-", "1", "]", "[", "0", "]", "-", "triple", "[", "0", "]", ")", ">", "0", ":", "\n", "                                ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", "+", "\"*\"", ")", "\n", "\n", "# pop it", "\n", "", "i", "=", "overlaps", "[", "-", "1", "]", "[", "1", "]", "+", "1", "\n", "del", "chunk2actions", "[", "overlaps", "[", "-", "1", "]", "[", "0", "]", ",", "overlaps", "[", "-", "1", "]", "[", "1", "]", "]", "\n", "stack_empty", "=", "False", "\n", "overlaps", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "                            ", "count", "=", "triple", "[", "1", "]", "-", "i", "+", "1", "\n", "if", "count", ">", "1", ":", "\n", "                                ", "for", "_", "in", "range", "(", "count", "-", "1", ")", ":", "\n", "                                    ", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", "+", "\"*\"", ")", "\n", "", "", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Shift\"", ")", "\n", "chunk2actions", "[", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", "]", ".", "append", "(", "\"Reduce-\"", "+", "triple", "[", "2", "]", ")", "\n", "i", "+=", "count", "\n", "\n", "", "", "", "", "", "ret_actions", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "sent_len", ":", "\n", "            ", "seg", "=", "segmentset", ".", "query", "(", "i", ")", "\n", "if", "seg", "is", "None", ":", "\n", "                ", "ret_actions", ".", "append", "(", "\"Shift\"", ")", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "ret_actions", "+=", "chunk2actions", "[", "seg", "[", "0", "]", ",", "seg", "[", "1", "]", "]", "\n", "i", "=", "seg", "[", "1", "]", "+", "1", "\n", "", "", "return", "ret_actions", "\n", "\n"]]}