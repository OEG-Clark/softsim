{"home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm.Swarm.__init__": [[15, 56], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "Main_algorithm_GCN.GCO.GCO", "np.zeros", "Main_algorithm_GCN.CR_MGC.CR_MGC", "Traditional_Algorithm.GCN_2017.GCN_2017", "Traditional_Algorithm.HERO.HERO", "np.zeros", "np.zeros", "Traditional_Algorithm.CSDS.CSDS", "range", "copy.deepcopy", "range", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "algorithm_mode", "=", "0", ",", "enable_csds", "=", "False", ",", "meta_param_use", "=", "False", ")", ":", "\n", "        ", "self", ".", "initial_positions", "=", "deepcopy", "(", "config_initial_swarm_positions", ")", "\n", "self", ".", "remain_list", "=", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "self", ".", "remain_num", "=", "config_num_of_agents", "\n", "self", ".", "num_of_agents", "=", "config_num_of_agents", "\n", "self", ".", "max_destroy_num", "=", "config_maximum_destroy_num", "\n", "\n", "self", ".", "remain_positions", "=", "deepcopy", "(", "self", ".", "initial_positions", ")", "\n", "self", ".", "true_positions", "=", "deepcopy", "(", "self", ".", "initial_positions", ")", "\n", "\n", "self", ".", "database", "=", "[", "{", "\"known_positions\"", ":", "deepcopy", "(", "self", ".", "initial_positions", ")", ",", "\n", "\"existing_list\"", ":", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", ",", "\n", "\"connected\"", ":", "True", ",", "\n", "\"if_destroyed\"", ":", "False", "}", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "# 0 for CSDS, 1 for centering, 2 for SIDR, 3 for GCN_2017, 4 for CR-GCM, 5 for CR_GCM_N", "\n", "self", ".", "algorithm_mode", "=", "algorithm_mode", "\n", "\n", "self", ".", "gco", "=", "GCO", "(", ")", "\n", "self", ".", "if_once_gcn", "=", "False", "\n", "self", ".", "once_destroy_gcn_speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "self", ".", "max_time", "=", "0", "\n", "\n", "self", ".", "cr_gcm", "=", "CR_MGC", "(", "use_meta", "=", "meta_param_use", ")", "\n", "self", ".", "gcn_2017", "=", "GCN_2017", "(", ")", "\n", "\n", "self", ".", "hero", "=", "HERO", "(", "self", ".", "initial_positions", ")", "\n", "\n", "self", ".", "if_once_gcn_network", "=", "False", "\n", "self", ".", "once_destroy_gcn_network_speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "\n", "if", "enable_csds", ":", "\n", "            ", "self", ".", "csds", "=", "CSDS", "(", "config_num_of_agents", ",", "self", ".", "initial_positions", ")", "\n", "", "self", ".", "best_final_positions", "=", "0", "\n", "\n", "self", ".", "notice_destroy", "=", "False", "\n", "self", ".", "destination_positions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "self", ".", "inertia_counter", "=", "0", "\n", "self", ".", "inertia", "=", "100", "\n", "self", ".", "if_finish", "=", "[", "True", "for", "i", "in", "range", "(", "self", ".", "num_of_agents", ")", "]", "\n", "\n", "self", ".", "time_consuming", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm.Swarm.destroy_happens": [[57, 63], ["copy.deepcopy", "len", "Swarm.Swarm.remain_list.remove"], "methods", ["None"], ["", "def", "destroy_happens", "(", "self", ",", "destroy_list", ",", "environment_positions", ")", ":", "\n", "        ", "self", ".", "notice_destroy", "=", "True", "\n", "for", "destroy_index", "in", "destroy_list", ":", "\n", "            ", "self", ".", "remain_list", ".", "remove", "(", "destroy_index", ")", "\n", "", "self", ".", "true_positions", "=", "deepcopy", "(", "environment_positions", ")", "\n", "self", ".", "remain_num", "=", "len", "(", "self", ".", "remain_list", ")", "\n", "# self.csds.notice_destroy(deepcopy(destroy_list))", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm.Swarm.update_true_positions": [[65, 67], ["copy.deepcopy"], "methods", ["None"], ["", "def", "update_true_positions", "(", "self", ",", "environment_positions", ")", ":", "\n", "        ", "self", ".", "true_positions", "=", "deepcopy", "(", "environment_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm.Swarm.reset": [[68, 88], ["np.zeros", "np.zeros", "range", "copy.deepcopy", "range", "range"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "change_algorithm_mode", "=", "False", ",", "algorithm_mode", "=", "0", ")", ":", "\n", "        ", "self", ".", "remain_list", "=", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "self", ".", "remain_num", "=", "config_num_of_agents", "\n", "self", ".", "database", "=", "[", "{", "\"known_positions\"", ":", "deepcopy", "(", "self", ".", "initial_positions", ")", ",", "\n", "\"existing_list\"", ":", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", ",", "\n", "\"connected\"", ":", "True", ",", "\n", "\"if_destroyed\"", ":", "False", "}", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "self", ".", "positions", "=", "[", "]", "\n", "self", ".", "mean_positions", "=", "[", "]", "\n", "self", ".", "target_positions", "=", "[", "]", "\n", "self", ".", "max_time", "=", "0", "\n", "\n", "if", "change_algorithm_mode", ":", "\n", "            ", "self", ".", "algorithm_mode", "=", "algorithm_mode", "\n", "\n", "", "self", ".", "if_once_gcn", "=", "False", "\n", "self", ".", "once_destroy_gcn_speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "\n", "self", ".", "if_once_gcn_network", "=", "False", "\n", "self", ".", "once_destroy_gcn_network_speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm.Swarm.take_actions": [[89, 168], ["np.zeros", "Swarm.Swarm.make_remain_positions", "Utils.check_if_a_connected_graph", "copy.deepcopy", "len", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "Swarm.Swarm.csds.csds", "copy.deepcopy", "copy.deepcopy", "Swarm.Swarm.hero.hero", "Utils.difference_set", "Traditional_Algorithm.Centering.centering_fly", "Traditional_Algorithm.Centering.centering_fly", "Traditional_Algorithm.SIDR.SIDR", "Traditional_Algorithm.Centering.centering_fly", "range", "range", "copy.deepcopy", "Swarm.Swarm.gcn_2017.cr_gcm_n", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "print", "len", "copy.deepcopy", "copy.deepcopy", "range", "copy.deepcopy", "Swarm.Swarm.cr_gcm.cr_gcm", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "np.linalg.norm", "copy.deepcopy", "len", "copy.deepcopy", "copy.deepcopy", "np.linalg.norm", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.make_remain_positions", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.csds", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.HERO.HERO.hero", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.difference_set", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.SIDR.SIDR", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_2017.cr_gcm_n", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.cr_gcm"], ["", "def", "take_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        take actions with global information (GI)\n        :return: unit speed vectors\n        \"\"\"", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "max_time", "=", "0", "\n", "self", ".", "make_remain_positions", "(", ")", "\n", "flag", ",", "num_cluster", "=", "Utils", ".", "check_if_a_connected_graph", "(", "deepcopy", "(", "self", ".", "remain_positions", ")", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "if", "flag", ":", "\n", "# print(\"connected\")", "\n", "            ", "return", "deepcopy", "(", "actions", ")", ",", "max_time", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "algorithm_mode", "==", "0", ":", "\n", "# CSDS", "\n", "                ", "actions_csds", ",", "max_time", "=", "self", ".", "csds", ".", "csds", "(", "deepcopy", "(", "self", ".", "true_positions", ")", ",", "deepcopy", "(", "self", ".", "remain_list", ")", ")", "\n", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "actions", "[", "i", "]", "=", "0.05", "*", "centering_fly", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ",", "i", ")", "+", "0.95", "*", "actions_csds", "[", "i", "]", "\n", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "1", ":", "\n", "# HERO", "\n", "                ", "actions_hero", "=", "self", ".", "hero", ".", "hero", "(", "\n", "Utils", ".", "difference_set", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "num_of_agents", ")", "]", ",", "self", ".", "remain_list", ")", ",", "self", ".", "true_positions", ")", "\n", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "actions", "[", "i", "]", "=", "0.2", "*", "centering_fly", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ",", "i", ")", "+", "0.8", "*", "actions_hero", "[", "i", "]", "\n", "\n", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "2", ":", "\n", "# centering", "\n", "                ", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "actions", "[", "i", "]", "=", "centering_fly", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ",", "i", ")", "\n", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "3", ":", "\n", "# SIDR", "\n", "                ", "actions", "=", "SIDR", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ")", "\n", "\n", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "4", ":", "\n", "# GCN_2017", "\n", "                ", "if", "self", ".", "if_once_gcn_network", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "remain_list", ")", ")", ":", "\n", "                        ", "if", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "true_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "self", ".", "best_final_positions", "[", "i", "]", ")", ">=", "0.55", ":", "\n", "                            ", "actions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "deepcopy", "(", "\n", "self", ".", "once_destroy_gcn_network_speed", "[", "self", ".", "remain_list", "[", "i", "]", "]", ")", "\n", "# else:", "\n", "#     print(\"%d already finish\" % self.remain_list[i])", "\n", "", "", "max_time", "=", "deepcopy", "(", "self", ".", "max_time", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "if_once_gcn_network", "=", "True", "\n", "actions", ",", "max_time", ",", "best_final_positions", "=", "self", ".", "gcn_2017", ".", "cr_gcm_n", "(", "deepcopy", "(", "self", ".", "true_positions", ")", ",", "\n", "deepcopy", "(", "self", ".", "remain_list", ")", ")", "\n", "self", ".", "once_destroy_gcn_network_speed", "=", "deepcopy", "(", "actions", ")", "\n", "self", ".", "best_final_positions", "=", "deepcopy", "(", "best_final_positions", ")", "\n", "self", ".", "max_time", "=", "deepcopy", "(", "max_time", ")", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "5", ":", "\n", "# proposed algorithm", "\n", "                ", "if", "self", ".", "if_once_gcn_network", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "remain_list", ")", ")", ":", "\n", "                        ", "if", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "true_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "self", ".", "best_final_positions", "[", "i", "]", ")", ">=", "0.55", ":", "\n", "                            ", "actions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "deepcopy", "(", "\n", "self", ".", "once_destroy_gcn_network_speed", "[", "self", ".", "remain_list", "[", "i", "]", "]", ")", "\n", "\n", "# else:", "\n", "#     print(\"%d already finish\" % self.remain_list[i])", "\n", "", "", "max_time", "=", "deepcopy", "(", "self", ".", "max_time", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "if_once_gcn_network", "=", "True", "\n", "actions", ",", "max_time", ",", "best_final_positions", "=", "self", ".", "cr_gcm", ".", "cr_gcm", "(", "deepcopy", "(", "self", ".", "true_positions", ")", ",", "\n", "deepcopy", "(", "self", ".", "remain_list", ")", ")", "\n", "self", ".", "once_destroy_gcn_network_speed", "=", "deepcopy", "(", "actions", ")", "\n", "self", ".", "best_final_positions", "=", "deepcopy", "(", "best_final_positions", ")", "\n", "self", ".", "max_time", "=", "deepcopy", "(", "max_time", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"No such algorithm\"", ")", "\n", "", "", "return", "deepcopy", "(", "actions", ")", ",", "deepcopy", "(", "max_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm.Swarm.make_remain_positions": [[169, 174], ["np.array", "Swarm.Swarm.remain_positions.append", "copy.deepcopy"], "methods", ["None"], ["", "def", "make_remain_positions", "(", "self", ")", ":", "\n", "        ", "self", ".", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "            ", "self", ".", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "self", ".", "remain_positions", "=", "np", ".", "array", "(", "self", ".", "remain_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm.Swarm.check_if_finish": [[175, 182], ["range", "len"], "methods", ["None"], ["", "def", "check_if_finish", "(", "self", ",", "cluster_index", ")", ":", "\n", "        ", "flag", "=", "True", "\n", "for", "i", "in", "range", "(", "len", "(", "cluster_index", ")", ")", ":", "\n", "            ", "if", "not", "self", ".", "if_finish", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "i", "]", "]", "]", ":", "\n", "                ", "flag", "=", "False", "\n", "break", "\n", "", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm.Swarm.save_GCN": [[183, 185], ["torch.save"], "methods", ["None"], ["", "def", "save_GCN", "(", "self", ",", "filename", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "cr_gcm", ".", "gcn_network", ",", "filename", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.__init__": [[176, 178], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "memory", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.push": [[179, 181], ["Utils.Stack.memory.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "num", ")", ":", "\n", "        ", "self", ".", "memory", ".", "append", "(", "num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.pop": [[182, 189], ["len"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "memory", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "temp", "=", "self", ".", "memory", "[", "-", "1", "]", "\n", "del", "self", ".", "memory", "[", "-", "1", "]", "\n", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.length": [[190, 192], ["len"], "methods", ["None"], ["", "", "def", "length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.top_element": [[193, 195], ["None"], "methods", ["None"], ["", "def", "top_element", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "memory", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix": [[7, 19], ["numpy.zeros", "range", "copy.deepcopy", "range", "numpy.linalg.norm"], "function", ["None"], ["def", "make_A_matrix", "(", "positions", ",", "num_of_agents", ",", "d", ")", ":", "\n", "    ", "A", "=", "np", ".", "zeros", "(", "(", "num_of_agents", ",", "num_of_agents", ")", ")", "\n", "for", "i", "in", "range", "(", "num_of_agents", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "num_of_agents", ")", ":", "\n", "            ", "if", "j", "==", "i", ":", "\n", "                ", "A", "[", "i", ",", "j", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "positions", "[", "i", ",", ":", "]", "-", "positions", "[", "j", ",", ":", "]", ")", "\n", "if", "distance", "<=", "d", ":", "\n", "                    ", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "A", "[", "j", ",", "i", "]", "=", "1", "\n", "", "", "", "", "return", "deepcopy", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix": [[21, 26], ["numpy.zeros", "range", "copy.deepcopy", "numpy.sum"], "function", ["None"], ["", "def", "make_D_matrix", "(", "A", ",", "num_of_agents", ")", ":", "\n", "    ", "D", "=", "np", ".", "zeros", "(", "(", "num_of_agents", ",", "num_of_agents", ")", ")", "\n", "for", "i", "in", "range", "(", "num_of_agents", ")", ":", "\n", "        ", "D", "[", "i", ",", "i", "]", "=", "np", ".", "sum", "(", "A", "[", "i", "]", ")", "\n", "", "return", "deepcopy", "(", "D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters": [[28, 38], ["numpy.linalg.eig", "range"], "function", ["None"], ["", "def", "check_number_of_clusters", "(", "L", ",", "num_of_agents", ")", ":", "\n", "    ", "e_vals", ",", "e_vecs", "=", "np", ".", "linalg", ".", "eig", "(", "L", ")", "\n", "eig_0_counter", "=", "0", "\n", "for", "i", "in", "range", "(", "num_of_agents", ")", ":", "\n", "        ", "if", "e_vals", "[", "i", "]", "<", "0.000001", ":", "\n", "            ", "eig_0_counter", "+=", "1", "\n", "", "", "if", "eig_0_counter", "==", "1", ":", "\n", "        ", "return", "True", ",", "1", "\n", "", "else", ":", "\n", "        ", "return", "False", ",", "eig_0_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.normalized_single_vector": [[40, 43], ["copy.deepcopy", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "normalized_single_vector", "(", "speed", ")", ":", "\n", "    ", "normalized_speed", "=", "speed", "/", "np", ".", "linalg", ".", "norm", "(", "speed", ")", "\n", "return", "deepcopy", "(", "normalized_speed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.normalized_batch_vector": [[45, 50], ["copy.deepcopy", "range", "copy.deepcopy", "len", "numpy.linalg.norm"], "function", ["None"], ["", "def", "normalized_batch_vector", "(", "speed", ")", ":", "\n", "    ", "normalized_speed", "=", "deepcopy", "(", "speed", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "speed", ")", ")", ":", "\n", "        ", "normalized_speed", "[", "i", "]", "=", "speed", "[", "i", "]", "/", "np", ".", "linalg", ".", "norm", "(", "speed", "[", "i", "]", ")", "\n", "", "return", "deepcopy", "(", "normalized_speed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.calculate_d_max": [[52, 60], ["range", "copy.deepcopy", "range", "len", "len", "numpy.linalg.norm", "copy.deepcopy", "numpy.linalg.norm"], "function", ["None"], ["", "def", "calculate_d_max", "(", "positions", ")", ":", "\n", "    ", "d_max", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "positions", ")", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "positions", ")", ")", ":", "\n", "            ", "if", "d_max", "<", "np", ".", "linalg", ".", "norm", "(", "positions", "[", "j", "]", "-", "positions", "[", "i", "]", ")", ":", "\n", "                ", "d_max", "=", "deepcopy", "(", "np", ".", "linalg", ".", "norm", "(", "positions", "[", "j", "]", "-", "positions", "[", "i", "]", ")", ")", "\n", "\n", "", "", "", "return", "deepcopy", "(", "d_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.store_dataframe_to_excel": [[62, 78], ["isinstance", "print", "data.to_excel", "print", "print"], "function", ["None"], ["", "def", "store_dataframe_to_excel", "(", "data", ",", "filename", ",", "sheetname", "=", "\"None\"", ")", ":", "\n", "    ", "\"\"\"\n    :param data: receive dataframe datatype (not numpy)\n    :param filename:\n    :param sheetname:\n    :return: storage flag\n    \"\"\"", "\n", "# data.to_excel(filename, sheet_name=sheetname)", "\n", "if", "isinstance", "(", "data", ",", "pd", ".", "DataFrame", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data", ".", "to_excel", "(", "filename", ",", "sheet_name", "=", "sheetname", ")", "\n", "print", "(", "\"Store successful\"", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Storage error\"", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"Data type error\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.calculate_norm": [[80, 85], ["numpy.zeros", "range", "copy.deepcopy", "len", "len", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "calculate_norm", "(", "speeds", ")", ":", "\n", "    ", "normalized_speed", "=", "np", ".", "zeros", "(", "(", "len", "(", "speeds", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "normalized_speed", ")", ")", ":", "\n", "        ", "normalized_speed", "[", "i", "]", "=", "np", ".", "linalg", ".", "norm", "(", "speeds", "[", "i", "]", ")", "\n", "", "return", "deepcopy", "(", "normalized_speed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.random_sampling": [[87, 99], ["numpy.random.randint().tolist", "list_.append", "numpy.random.randint"], "function", ["None"], ["", "def", "random_sampling", "(", ")", ":", "\n", "    ", "\"\"\"\n    :return: list with form [ , , , , ,]\n    \"\"\"", "\n", "list_", "=", "[", "]", "\n", "count", "=", "0", "\n", "while", "count", "<", "config_sample_number", ":", "\n", "        ", "random_number", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "config_buffer_capacity", ",", "1", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "if", "random_number", "not", "in", "list_", ":", "\n", "            ", "list_", ".", "append", "(", "random_number", ")", "\n", "count", "+=", "1", "\n", "", "", "return", "list_", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.soft_update": [[101, 106], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["", "def", "soft_update", "(", "target", ",", "source", ",", "t", ")", ":", "\n", "    ", "for", "target_param", ",", "source_param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "\n", "source", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "target_param", ".", "data", ".", "copy_", "(", "\n", "(", "1", "-", "t", ")", "*", "target_param", ".", "data", "+", "t", "*", "source_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.normalize_positions": [[108, 115], ["numpy.array", "copy.deepcopy", "copy.deepcopy"], "function", ["None"], ["", "", "def", "normalize_positions", "(", "positions", ")", ":", "\n", "    ", "positions", "=", "np", ".", "array", "(", "positions", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "norm_positions", "=", "deepcopy", "(", "positions", ")", "\n", "norm_positions", "[", ":", ",", "0", "]", "=", "2", "*", "(", "positions", "[", ":", ",", "0", "]", "-", "0.5", "*", "config_width", ")", "/", "config_width", "\n", "norm_positions", "[", ":", ",", "1", "]", "=", "2", "*", "(", "positions", "[", ":", ",", "1", "]", "-", "0.5", "*", "config_length", ")", "/", "config_length", "\n", "norm_positions", "[", ":", ",", "2", "]", "=", "2", "*", "(", "positions", "[", ":", ",", "2", "]", "-", "0.5", "*", "config_height", ")", "/", "config_height", "\n", "return", "deepcopy", "(", "norm_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.normalize_single_positions": [[117, 123], ["copy.deepcopy", "float", "float", "float", "copy.deepcopy", "numpy.array"], "function", ["None"], ["", "def", "normalize_single_positions", "(", "positions", ")", ":", "\n", "    ", "norm_positions", "=", "deepcopy", "(", "np", ".", "array", "(", "positions", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "norm_positions", "[", "0", "]", "=", "float", "(", "2", "*", "(", "positions", "[", "0", "]", "-", "0.5", "*", "config_width", ")", "/", "config_width", ")", "\n", "norm_positions", "[", "1", "]", "=", "float", "(", "2", "*", "(", "positions", "[", "1", "]", "-", "0.5", "*", "config_length", ")", "/", "config_length", ")", "\n", "norm_positions", "[", "2", "]", "=", "float", "(", "2", "*", "(", "positions", "[", "2", "]", "-", "0.5", "*", "config_height", ")", "/", "config_height", ")", "\n", "return", "deepcopy", "(", "norm_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph": [[125, 131], ["Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "copy.deepcopy", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "def", "check_if_a_connected_graph", "(", "remain_positions", ",", "remain_num", ")", ":", "\n", "    ", "A", "=", "make_A_matrix", "(", "remain_positions", ",", "remain_num", ",", "config_communication_range", ")", "\n", "D", "=", "make_D_matrix", "(", "A", ",", "remain_num", ")", "\n", "L", "=", "D", "-", "A", "\n", "connected_flag", ",", "num_of_clusters", "=", "check_number_of_clusters", "(", "L", ",", "remain_num", ")", "\n", "return", "deepcopy", "(", "connected_flag", ")", ",", "deepcopy", "(", "num_of_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.split_the_positions_into_clusters": [[133, 173], ["range", "copy.deepcopy", "range", "numpy.zeros", "Utils.Stack", "Utils.Stack.push", "range", "range", "positions_with_clusters.append", "len", "len", "Utils.Stack.length", "Utils.Stack.top_element", "len", "remain_list.remove", "temp_positions.append", "copy.deepcopy", "Utils.Stack.pop", "visited_node.append", "copy.deepcopy", "numpy.array", "Utils.Stack.push"], "function", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.push", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.length", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.top_element", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.pop", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.push"], ["", "def", "split_the_positions_into_clusters", "(", "positions", ",", "num_of_clusters", ",", "A", ")", ":", "\n", "    ", "positions_with_clusters", "=", "[", "]", "\n", "remain_list", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "positions", ")", ")", "]", "\n", "if", "num_of_clusters", "<=", "1", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "for", "k", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "            ", "temp_positions", "=", "[", "]", "\n", "\n", "visited", "=", "np", ".", "zeros", "(", "len", "(", "remain_list", ")", ")", "\n", "counter", "=", "0", "\n", "stack", "=", "Stack", "(", ")", "\n", "stack", ".", "push", "(", "remain_list", "[", "0", "]", ")", "\n", "visited", "[", "0", "]", "=", "1", "\n", "counter", "+=", "1", "\n", "\n", "while", "stack", ".", "length", "(", ")", "!=", "0", ":", "\n", "                ", "current", "=", "stack", ".", "top_element", "(", ")", "\n", "flag", "=", "True", "\n", "temp_counter", "=", "0", "\n", "for", "i", "in", "remain_list", ":", "\n", "                    ", "if", "A", "[", "current", ",", "i", "]", "==", "1", "and", "visited", "[", "temp_counter", "]", "==", "0", ":", "\n", "                        ", "visited", "[", "temp_counter", "]", "=", "1", "\n", "counter", "+=", "1", "\n", "stack", ".", "push", "(", "i", ")", "\n", "flag", "=", "False", "\n", "break", "\n", "", "temp_counter", "+=", "1", "\n", "", "if", "flag", ":", "\n", "                    ", "stack", ".", "pop", "(", ")", "\n", "\n", "", "", "visited_node", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "remain_list", ")", ")", ":", "\n", "                ", "if", "visited", "[", "j", "]", "==", "1", ":", "\n", "                    ", "visited_node", ".", "append", "(", "remain_list", "[", "j", "]", ")", "\n", "", "", "for", "j", "in", "range", "(", "counter", ")", ":", "\n", "                ", "remain_list", ".", "remove", "(", "visited_node", "[", "j", "]", ")", "\n", "temp_positions", ".", "append", "(", "deepcopy", "(", "positions", "[", "visited_node", "[", "j", "]", "]", ")", ")", "\n", "", "positions_with_clusters", ".", "append", "(", "deepcopy", "(", "np", ".", "array", "(", "temp_positions", ")", ")", ")", "\n", "", "return", "deepcopy", "(", "positions_with_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.split_the_positions_into_clusters_and_indexes": [[197, 244], ["positions_with_clusters.append", "cluster_index.append", "range", "range", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "numpy.zeros", "Utils.Stack", "Utils.Stack.push", "range", "range", "positions_with_clusters.append", "cluster_index.append", "copy.deepcopy", "copy.deepcopy", "len", "len", "Utils.Stack.length", "Utils.Stack.top_element", "len", "remain_list.remove", "temp_positions.append", "copy.deepcopy", "copy.deepcopy", "Utils.Stack.pop", "visited_node.append", "temp_index.append", "copy.deepcopy", "numpy.array", "Utils.Stack.push"], "function", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.push", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.length", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.top_element", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.pop", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.push"], ["", "", "def", "split_the_positions_into_clusters_and_indexes", "(", "positions", ",", "num_of_clusters", ",", "A", ")", ":", "\n", "    ", "positions_with_clusters", "=", "[", "]", "\n", "cluster_index", "=", "[", "]", "\n", "remain_list", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "positions", ")", ")", "]", "\n", "if", "num_of_clusters", "<=", "1", ":", "\n", "        ", "positions_with_clusters", ".", "append", "(", "deepcopy", "(", "positions", ")", ")", "\n", "cluster_index", ".", "append", "(", "remain_list", ")", "\n", "return", "deepcopy", "(", "positions_with_clusters", ")", ",", "deepcopy", "(", "cluster_index", ")", "\n", "", "else", ":", "\n", "        ", "for", "k", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "            ", "temp_positions", "=", "[", "]", "\n", "temp_index", "=", "[", "]", "\n", "\n", "visited", "=", "np", ".", "zeros", "(", "len", "(", "remain_list", ")", ")", "\n", "counter", "=", "0", "\n", "stack", "=", "Stack", "(", ")", "\n", "stack", ".", "push", "(", "remain_list", "[", "0", "]", ")", "\n", "visited", "[", "0", "]", "=", "1", "\n", "counter", "+=", "1", "\n", "\n", "while", "stack", ".", "length", "(", ")", "!=", "0", ":", "\n", "                ", "current", "=", "stack", ".", "top_element", "(", ")", "\n", "flag", "=", "True", "\n", "temp_counter", "=", "0", "\n", "for", "i", "in", "remain_list", ":", "\n", "                    ", "if", "A", "[", "current", ",", "i", "]", "==", "1", "and", "visited", "[", "temp_counter", "]", "==", "0", ":", "\n", "                        ", "visited", "[", "temp_counter", "]", "=", "1", "\n", "counter", "+=", "1", "\n", "stack", ".", "push", "(", "i", ")", "\n", "flag", "=", "False", "\n", "break", "\n", "", "temp_counter", "+=", "1", "\n", "", "if", "flag", ":", "\n", "                    ", "stack", ".", "pop", "(", ")", "\n", "\n", "", "", "visited_node", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "remain_list", ")", ")", ":", "\n", "                ", "if", "visited", "[", "j", "]", "==", "1", ":", "\n", "                    ", "visited_node", ".", "append", "(", "remain_list", "[", "j", "]", ")", "\n", "temp_index", ".", "append", "(", "remain_list", "[", "j", "]", ")", "\n", "", "", "for", "j", "in", "range", "(", "counter", ")", ":", "\n", "                ", "remain_list", ".", "remove", "(", "visited_node", "[", "j", "]", ")", "\n", "temp_positions", ".", "append", "(", "deepcopy", "(", "positions", "[", "visited_node", "[", "j", "]", "]", ")", ")", "\n", "\n", "", "positions_with_clusters", ".", "append", "(", "deepcopy", "(", "np", ".", "array", "(", "temp_positions", ")", ")", ")", "\n", "cluster_index", ".", "append", "(", "deepcopy", "(", "temp_index", ")", ")", "\n", "", "return", "deepcopy", "(", "positions_with_clusters", ")", ",", "deepcopy", "(", "cluster_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.intersection_set": [[246, 249], ["copy.deepcopy"], "function", ["None"], ["", "", "def", "intersection_set", "(", "listA", ",", "listB", ")", ":", "\n", "    ", "intersection_list", "=", "[", "i", "for", "i", "in", "listA", "if", "i", "in", "listB", "]", "\n", "return", "deepcopy", "(", "intersection_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.difference_set": [[251, 254], ["copy.deepcopy"], "function", ["None"], ["", "def", "difference_set", "(", "listA", ",", "listB", ")", ":", "\n", "    ", "difference_list", "=", "[", "i", "for", "i", "in", "listA", "if", "i", "not", "in", "listB", "]", "\n", "return", "deepcopy", "(", "difference_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.union_set": [[256, 262], ["copy.deepcopy", "union_set.append", "copy.deepcopy"], "function", ["None"], ["", "def", "union_set", "(", "listA", ",", "listB", ")", ":", "\n", "    ", "union_set", "=", "[", "i", "for", "i", "in", "listA", "]", "\n", "for", "i", "in", "listB", ":", "\n", "        ", "if", "i", "not", "in", "listA", ":", "\n", "            ", "union_set", ".", "append", "(", "deepcopy", "(", "i", ")", ")", "\n", "", "", "return", "deepcopy", "(", "union_set", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.__init__": [[16, 55], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "np.zeros", "Main_algorithm_GCN.CR_MGC.CR_MGC", "Traditional_Algorithm.GCN_2017.GCN_2017", "Traditional_Algorithm.HERO.HERO", "np.zeros", "np.zeros", "range", "copy.deepcopy", "range", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "algorithm_mode", "=", "0", ",", "meta_param_use", "=", "False", ")", ":", "\n", "        ", "self", ".", "initial_positions", "=", "deepcopy", "(", "config_initial_swarm_positions", ")", "\n", "self", ".", "remain_list", "=", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "self", ".", "remain_num", "=", "config_num_of_agents", "\n", "self", ".", "num_of_agents", "=", "config_num_of_agents", "\n", "self", ".", "max_destroy_num", "=", "config_maximum_destroy_num", "\n", "\n", "self", ".", "remain_positions", "=", "deepcopy", "(", "self", ".", "initial_positions", ")", "\n", "self", ".", "true_positions", "=", "deepcopy", "(", "self", ".", "initial_positions", ")", "\n", "\n", "self", ".", "database", "=", "[", "{", "\"known_positions\"", ":", "deepcopy", "(", "self", ".", "initial_positions", ")", ",", "\n", "\"existing_list\"", ":", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", ",", "\n", "\"connected\"", ":", "True", ",", "\n", "\"if_destroyed\"", ":", "False", "}", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "# 0 for CSDS, 1 for centering, 2 for SIDR, 3 for GCN_2017, 5 for CR_GCM_N", "\n", "self", ".", "algorithm_mode", "=", "algorithm_mode", "\n", "\n", "self", ".", "if_once_gcn", "=", "False", "\n", "self", ".", "once_destroy_gcn_speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "self", ".", "max_time", "=", "0", "\n", "\n", "self", ".", "cr_mgc", "=", "CR_MGC", "(", "use_meta", "=", "meta_param_use", ")", "\n", "self", ".", "gcn_2017", "=", "GCN_2017", "(", ")", "\n", "\n", "self", ".", "hero", "=", "HERO", "(", "self", ".", "initial_positions", ")", "\n", "\n", "self", ".", "if_once_gcn_network", "=", "False", "\n", "self", ".", "once_destroy_gcn_network_speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "\n", "# self.csds = CSDS(config_num_of_agents, self.initial_positions)", "\n", "self", ".", "best_final_positions", "=", "0", "\n", "\n", "self", ".", "notice_destroy", "=", "False", "\n", "self", ".", "destination_positions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "self", ".", "inertia_counter", "=", "0", "\n", "self", ".", "inertia", "=", "100", "\n", "self", ".", "if_finish", "=", "[", "True", "for", "i", "in", "range", "(", "self", ".", "num_of_agents", ")", "]", "\n", "\n", "self", ".", "time_consuming", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.destroy_happens": [[56, 64], ["Swarm_general.Swarm.remain_list.remove", "Swarm_general.Swarm.broadcast_destroy_information"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.broadcast_destroy_information"], ["", "def", "destroy_happens", "(", "self", ",", "destroy_list", ",", "environment_positions", ")", ":", "\n", "        ", "self", ".", "notice_destroy", "=", "True", "\n", "self", ".", "inertia_counter", "=", "0", "\n", "for", "i", "in", "destroy_list", ":", "\n", "            ", "self", ".", "remain_num", "-=", "1", "\n", "self", ".", "remain_list", ".", "remove", "(", "i", ")", "\n", "self", ".", "database", "[", "i", "]", "[", "\"if_destroyed\"", "]", "=", "True", "\n", "self", ".", "broadcast_destroy_information", "(", "i", ",", "environment_positions", ",", "destroy_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.destroy_happens_GI_version": [[65, 71], ["copy.deepcopy", "len", "Swarm_general.Swarm.remain_list.remove"], "methods", ["None"], ["", "", "def", "destroy_happens_GI_version", "(", "self", ",", "destroy_list", ",", "environment_positions", ")", ":", "\n", "        ", "self", ".", "notice_destroy", "=", "True", "\n", "for", "destroy_index", "in", "destroy_list", ":", "\n", "            ", "self", ".", "remain_list", ".", "remove", "(", "destroy_index", ")", "\n", "", "self", ".", "true_positions", "=", "deepcopy", "(", "environment_positions", ")", "\n", "self", ".", "remain_num", "=", "len", "(", "self", ".", "remain_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.update_true_positions": [[74, 76], ["copy.deepcopy"], "methods", ["None"], ["", "def", "update_true_positions", "(", "self", ",", "environment_positions", ")", ":", "\n", "        ", "self", ".", "true_positions", "=", "deepcopy", "(", "environment_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.broadcast_destroy_information": [[77, 123], ["np.zeros", "Utils.Stack", "Utils.Stack.push", "copy.deepcopy", "np.array", "Utils.make_A_matrix", "range", "Utils.Stack.length", "Utils.Stack.top_element", "range", "Utils.Stack.pop", "[].remove", "Utils.Stack.push"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.push", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.length", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.top_element", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.pop", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.push"], ["", "def", "broadcast_destroy_information", "(", "self", ",", "No_destroy", ",", "environment_positions", ",", "destroy_list", ")", ":", "\n", "        ", "\"\"\"\n        Broadcast according to the environment positions\n        :param No_destroy:\n        :param environment_positions:\n        :return:\n        \"\"\"", "\n", "visited", "=", "np", ".", "zeros", "(", "config_num_of_agents", ")", "\n", "counter", "=", "0", "\n", "stack", "=", "Stack", "(", ")", "\n", "stack", ".", "push", "(", "No_destroy", ")", "\n", "visited", "[", "No_destroy", "]", "=", "1", "\n", "counter", "+=", "1", "\n", "\n", "virtual_positions", "=", "[", "]", "\n", "\n", "# for i in range(config_num_of_agents):", "\n", "#     if i in destroy_list and i != No_destroy:", "\n", "#         virtual_positions.append(deepcopy(np.array([-10000000.0, -10000000.0, -10000000.0])))", "\n", "#         # virtual_positions.append(deepcopy(environment_positions[i]))", "\n", "#     else:", "\n", "#         virtual_positions.append(deepcopy(environment_positions[i]))", "\n", "# second mechanism", "\n", "virtual_positions", "=", "deepcopy", "(", "environment_positions", ")", "\n", "\n", "virtual_positions", "=", "np", ".", "array", "(", "virtual_positions", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "virtual_positions", ",", "config_num_of_agents", ",", "config_communication_range", ")", "\n", "\n", "while", "stack", ".", "length", "(", ")", "!=", "0", ":", "\n", "            ", "current", "=", "stack", ".", "top_element", "(", ")", "\n", "flag", "=", "True", "\n", "temp_counter", "=", "0", "\n", "for", "i", "in", "range", "(", "config_num_of_agents", ")", ":", "\n", "                ", "if", "A", "[", "current", ",", "i", "]", "==", "1", "and", "visited", "[", "temp_counter", "]", "==", "0", ":", "\n", "                    ", "visited", "[", "temp_counter", "]", "=", "1", "\n", "counter", "+=", "1", "\n", "stack", ".", "push", "(", "i", ")", "\n", "flag", "=", "False", "\n", "break", "\n", "", "temp_counter", "+=", "1", "\n", "", "if", "flag", ":", "\n", "                ", "stack", ".", "pop", "(", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "config_num_of_agents", ")", ":", "\n", "            ", "if", "visited", "[", "i", "]", "==", "1", ":", "\n", "                ", "self", ".", "database", "[", "i", "]", "[", "\"existing_list\"", "]", ".", "remove", "(", "No_destroy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.reset": [[124, 144], ["np.zeros", "np.zeros", "range", "copy.deepcopy", "range", "range"], "methods", ["None"], ["", "", "", "def", "reset", "(", "self", ",", "change_algorithm_mode", "=", "False", ",", "algorithm_mode", "=", "0", ")", ":", "\n", "        ", "self", ".", "remain_list", "=", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "self", ".", "remain_num", "=", "config_num_of_agents", "\n", "self", ".", "database", "=", "[", "{", "\"known_positions\"", ":", "deepcopy", "(", "self", ".", "initial_positions", ")", ",", "\n", "\"existing_list\"", ":", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", ",", "\n", "\"connected\"", ":", "True", ",", "\n", "\"if_destroyed\"", ":", "False", "}", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "self", ".", "positions", "=", "[", "]", "\n", "self", ".", "mean_positions", "=", "[", "]", "\n", "self", ".", "target_positions", "=", "[", "]", "\n", "self", ".", "max_time", "=", "0", "\n", "\n", "if", "change_algorithm_mode", ":", "\n", "            ", "self", ".", "algorithm_mode", "=", "algorithm_mode", "\n", "\n", "", "self", ".", "if_once_gcn", "=", "False", "\n", "self", ".", "once_destroy_gcn_speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "\n", "self", ".", "if_once_gcn_network", "=", "False", "\n", "self", ".", "once_destroy_gcn_network_speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.broadcast_next_position_information": [[145, 174], ["Utils.make_A_matrix", "copy.deepcopy", "np.zeros", "Utils.Stack", "Utils.Stack.push", "range", "Utils.Stack.length", "Utils.Stack.top_element", "range", "Utils.Stack.pop", "copy.deepcopy", "Utils.Stack.push"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.push", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.length", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.top_element", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.pop", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.Stack.push"], ["", "def", "broadcast_next_position_information", "(", "self", ",", "environment_next_positions", ")", ":", "\n", "        ", "\"\"\"\n        broadcast position information to other UAVs in the same cluster based no the topology formed by real positions\n        :param environment_next_positions:\n        :return:\n        \"\"\"", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "environment_next_positions", ",", "config_num_of_agents", ",", "config_communication_range", ")", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "            ", "self", ".", "database", "[", "i", "]", "[", "\"known_positions\"", "]", "[", "i", "]", "=", "deepcopy", "(", "environment_next_positions", "[", "i", "]", ")", "\n", "visited", "=", "np", ".", "zeros", "(", "config_num_of_agents", ")", "\n", "stack", "=", "Stack", "(", ")", "\n", "stack", ".", "push", "(", "i", ")", "\n", "visited", "[", "i", "]", "=", "1", "\n", "\n", "while", "stack", ".", "length", "(", ")", "!=", "0", ":", "\n", "                ", "current", "=", "stack", ".", "top_element", "(", ")", "\n", "flag", "=", "True", "\n", "for", "j", "in", "range", "(", "config_num_of_agents", ")", ":", "\n", "                    ", "if", "A", "[", "current", ",", "j", "]", "==", "1", "and", "visited", "[", "j", "]", "==", "0", ":", "\n", "                        ", "visited", "[", "j", "]", "=", "1", "\n", "stack", ".", "push", "(", "j", ")", "\n", "flag", "=", "False", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "                    ", "stack", ".", "pop", "(", ")", "\n", "\n", "", "", "for", "k", "in", "range", "(", "config_num_of_agents", ")", ":", "\n", "                ", "if", "visited", "[", "k", "]", "==", "1", ":", "\n", "                    ", "self", ".", "database", "[", "k", "]", "[", "\"known_positions\"", "]", "[", "i", "]", "=", "deepcopy", "(", "environment_next_positions", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.broadcast_remain_list_information": [[175, 211], ["len", "np.array", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "Utils.split_the_positions_into_clusters_and_indexes", "range", "range", "np.array.append", "Utils.make_A_matrix", "true_cluster_index.append", "range", "range", "copy.deepcopy", "temp_true_index.append", "copy.deepcopy", "Utils.intersection_set", "len", "copy.deepcopy", "copy.deepcopy", "len", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.split_the_positions_into_clusters_and_indexes", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.intersection_set"], ["", "", "", "", "def", "broadcast_remain_list_information", "(", "self", ",", "environment_positions", ")", ":", "\n", "        ", "\"\"\"\n        broadcast remain list information to other UAVs in the same cluster based no the topology formed by real positions\n        :param environment_positions:\n        :return:\n        \"\"\"", "\n", "num_of_remain", "=", "len", "(", "self", ".", "remain_list", ")", "\n", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "            ", "remain_positions", ".", "append", "(", "deepcopy", "(", "environment_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "num_of_remain", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num_of_remain", ")", "\n", "L", "=", "D", "-", "A", "\n", "connected_flag", ",", "num_of_clusters", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "num_of_remain", ")", "\n", "positions_with_clusters", ",", "cluster_index", "=", "Utils", ".", "split_the_positions_into_clusters_and_indexes", "(", "remain_positions", ",", "\n", "num_of_clusters", ",", "\n", "Utils", ".", "make_A_matrix", "(", "\n", "remain_positions", ",", "\n", "num_of_remain", ",", "\n", "config_communication_range", ")", ")", "\n", "true_cluster_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "            ", "temp_true_index", "=", "[", "]", "\n", "for", "j", "in", "cluster_index", "[", "i", "]", ":", "\n", "                ", "temp_true_index", ".", "append", "(", "deepcopy", "(", "self", ".", "remain_list", "[", "j", "]", ")", ")", "\n", "", "true_cluster_index", ".", "append", "(", "deepcopy", "(", "temp_true_index", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "            ", "temp_remain_list", "=", "self", ".", "database", "[", "true_cluster_index", "[", "i", "]", "[", "0", "]", "]", "[", "\"existing_list\"", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "true_cluster_index", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "# take intersections between remain lists in IDs", "\n", "                ", "temp_remain_list", "=", "Utils", ".", "intersection_set", "(", "deepcopy", "(", "temp_remain_list", ")", ",", "deepcopy", "(", "\n", "self", ".", "database", "[", "true_cluster_index", "[", "i", "]", "[", "j", "+", "1", "]", "]", "[", "\"existing_list\"", "]", ")", ")", "\n", "", "for", "k", "in", "range", "(", "len", "(", "true_cluster_index", "[", "i", "]", ")", ")", ":", "\n", "                ", "self", ".", "database", "[", "true_cluster_index", "[", "i", "]", "[", "k", "]", "]", "[", "\"existing_list\"", "]", "=", "deepcopy", "(", "temp_remain_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.take_actions": [[212, 278], ["np.zeros", "Swarm_general.Swarm.make_remain_positions", "Utils.check_if_a_connected_graph", "copy.deepcopy", "len", "print", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "Swarm_general.Swarm.csds.csds", "copy.deepcopy", "copy.deepcopy", "Traditional_Algorithm.Centering.centering_fly", "Traditional_Algorithm.SIDR.SIDR", "range", "copy.deepcopy", "Swarm_general.Swarm.gcn_2017.cr_gcm_n", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "print", "len", "copy.deepcopy", "copy.deepcopy", "range", "copy.deepcopy", "Swarm_general.Swarm.cr_mgc.cr_gcm", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "np.linalg.norm", "copy.deepcopy", "len", "copy.deepcopy", "copy.deepcopy", "np.linalg.norm", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.make_remain_positions", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.csds", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.SIDR.SIDR", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_2017.cr_gcm_n", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.cr_gcm"], ["", "", "", "def", "take_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        take actions with global information (GI)\n        :return: unit speed vectors\n        \"\"\"", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "max_time", "=", "0", "\n", "self", ".", "make_remain_positions", "(", ")", "\n", "flag", ",", "num_cluster", "=", "Utils", ".", "check_if_a_connected_graph", "(", "deepcopy", "(", "self", ".", "remain_positions", ")", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "if", "flag", ":", "\n", "            ", "print", "(", "\"connected\"", ")", "\n", "return", "deepcopy", "(", "actions", ")", ",", "max_time", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "algorithm_mode", "==", "0", ":", "\n", "# CSDS", "\n", "                ", "actions", ",", "max_time", "=", "self", ".", "csds", ".", "csds", "(", "deepcopy", "(", "self", ".", "true_positions", ")", ",", "deepcopy", "(", "self", ".", "remain_list", ")", ")", "\n", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "1", ":", "\n", "# centering", "\n", "                ", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "actions", "[", "i", "]", "=", "centering_fly", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ",", "i", ")", "\n", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "2", ":", "\n", "# SIDR", "\n", "                ", "actions", "=", "SIDR", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ")", "\n", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "4", ":", "\n", "# GCN_2017", "\n", "                ", "if", "self", ".", "if_once_gcn_network", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "remain_list", ")", ")", ":", "\n", "                        ", "if", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "true_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "self", ".", "best_final_positions", "[", "i", "]", ")", ">=", "0.55", ":", "\n", "                            ", "actions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "deepcopy", "(", "\n", "self", ".", "once_destroy_gcn_network_speed", "[", "self", ".", "remain_list", "[", "i", "]", "]", ")", "\n", "# else:", "\n", "#     print(\"%d already finish\" % self.remain_list[i])", "\n", "", "", "max_time", "=", "deepcopy", "(", "self", ".", "max_time", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "if_once_gcn_network", "=", "True", "\n", "actions", ",", "max_time", ",", "best_final_positions", "=", "self", ".", "gcn_2017", ".", "cr_gcm_n", "(", "deepcopy", "(", "self", ".", "true_positions", ")", ",", "\n", "deepcopy", "(", "self", ".", "remain_list", ")", ")", "\n", "self", ".", "once_destroy_gcn_network_speed", "=", "deepcopy", "(", "actions", ")", "\n", "self", ".", "best_final_positions", "=", "deepcopy", "(", "best_final_positions", ")", "\n", "self", ".", "max_time", "=", "deepcopy", "(", "max_time", ")", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "6", ":", "\n", "# CR-GCM-N", "\n", "                ", "if", "self", ".", "if_once_gcn_network", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "remain_list", ")", ")", ":", "\n", "                        ", "if", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "true_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "self", ".", "best_final_positions", "[", "i", "]", ")", ">=", "0.55", ":", "\n", "                            ", "actions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "deepcopy", "(", "\n", "self", ".", "once_destroy_gcn_network_speed", "[", "self", ".", "remain_list", "[", "i", "]", "]", ")", "\n", "\n", "# else:", "\n", "#     print(\"%d already finish\" % self.remain_list[i])", "\n", "", "", "max_time", "=", "deepcopy", "(", "self", ".", "max_time", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "if_once_gcn_network", "=", "True", "\n", "actions", ",", "max_time", ",", "best_final_positions", "=", "self", ".", "cr_mgc", ".", "cr_gcm", "(", "deepcopy", "(", "self", ".", "true_positions", ")", ",", "\n", "deepcopy", "(", "self", ".", "remain_list", ")", ")", "\n", "self", ".", "once_destroy_gcn_network_speed", "=", "deepcopy", "(", "actions", ")", "\n", "self", ".", "best_final_positions", "=", "deepcopy", "(", "best_final_positions", ")", "\n", "self", ".", "max_time", "=", "deepcopy", "(", "max_time", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"No such algorithm\"", ")", "\n", "", "", "return", "deepcopy", "(", "actions", ")", ",", "deepcopy", "(", "max_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.make_remain_positions": [[279, 284], ["np.array", "Swarm_general.Swarm.remain_positions.append", "copy.deepcopy"], "methods", ["None"], ["", "def", "make_remain_positions", "(", "self", ")", ":", "\n", "        ", "self", ".", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "            ", "self", ".", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "self", ".", "remain_positions", "=", "np", ".", "array", "(", "self", ".", "remain_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.take_actions_GI_continuous_mode": [[285, 357], ["np.zeros", "Swarm_general.Swarm.make_remain_positions", "Utils.check_if_a_connected_graph", "copy.deepcopy", "copy.deepcopy", "len", "print", "copy.deepcopy", "Swarm_general.Swarm.csds.csds", "copy.deepcopy", "copy.deepcopy", "Swarm_general.Swarm.hero.hero", "Utils.difference_set", "Traditional_Algorithm.Centering.centering_fly", "Traditional_Algorithm.Centering.centering_fly", "Traditional_Algorithm.SIDR.SIDR", "Traditional_Algorithm.Centering.centering_fly", "range", "Swarm_general.Swarm.gcn_2017.cr_gcm_n", "range", "print", "copy.deepcopy", "copy.deepcopy", "len", "copy.deepcopy", "Swarm_general.Swarm.cr_mgc.cr_gcm", "range", "np.linalg.norm", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "len", "copy.deepcopy", "np.linalg.norm", "copy.deepcopy", "np.linalg.norm", "np.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.make_remain_positions", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.csds", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.HERO.HERO.hero", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.difference_set", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.SIDR.SIDR", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_2017.cr_gcm_n", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.cr_gcm"], ["", "def", "take_actions_GI_continuous_mode", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        take actions with global information (GI)\n        :return: unit speed vectors\n        \"\"\"", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "self", ".", "make_remain_positions", "(", ")", "\n", "flag", ",", "num_cluster", "=", "Utils", ".", "check_if_a_connected_graph", "(", "deepcopy", "(", "self", ".", "remain_positions", ")", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "if", "flag", ":", "\n", "            ", "print", "(", "\"connected\"", ")", "\n", "return", "deepcopy", "(", "actions", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "algorithm_mode", "==", "0", ":", "\n", "# CSDS", "\n", "\n", "                ", "actions_csds", ",", "max_time", "=", "self", ".", "csds", ".", "csds", "(", "deepcopy", "(", "self", ".", "true_positions", ")", ",", "deepcopy", "(", "self", ".", "remain_list", ")", ")", "\n", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "actions", "[", "i", "]", "=", "0.05", "*", "centering_fly", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ",", "i", ")", "+", "0.95", "*", "actions_csds", "[", "i", "]", "\n", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "1", ":", "\n", "# HERO", "\n", "\n", "                ", "actions_hero", "=", "self", ".", "hero", ".", "hero", "(", "\n", "Utils", ".", "difference_set", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "num_of_agents", ")", "]", ",", "self", ".", "remain_list", ")", ",", "self", ".", "true_positions", ")", "\n", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "actions", "[", "i", "]", "=", "0.2", "*", "centering_fly", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ",", "i", ")", "+", "0.8", "*", "actions_hero", "[", "i", "]", "\n", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "2", ":", "\n", "# centering", "\n", "                ", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "actions", "[", "i", "]", "=", "centering_fly", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ",", "i", ")", "\n", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "3", ":", "\n", "# SIDR", "\n", "\n", "                ", "actions", "=", "SIDR", "(", "self", ".", "true_positions", ",", "self", ".", "remain_list", ")", "\n", "\n", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "4", ":", "\n", "# GCN2017", "\n", "                ", "if", "self", ".", "notice_destroy", ":", "\n", "                    ", "self", ".", "notice_destroy", "=", "False", "\n", "actions", ",", "max_time", ",", "final_positions", "=", "self", ".", "gcn_2017", ".", "cr_gcm_n", "(", "deepcopy", "(", "self", ".", "true_positions", ")", ",", "\n", "deepcopy", "(", "self", ".", "remain_list", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "remain_list", ")", ")", ":", "\n", "                        ", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "deepcopy", "(", "final_positions", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                        ", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "destination_positions", "[", "i", "]", "-", "self", ".", "true_positions", "[", "i", "]", ")", ">=", "0.55", ":", "\n", "                            ", "actions", "[", "i", "]", "=", "deepcopy", "(", "\n", "(", "self", ".", "destination_positions", "[", "i", "]", "-", "self", ".", "true_positions", "[", "i", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "destination_positions", "[", "i", "]", "-", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "\n", "", "", "", "", "elif", "self", ".", "algorithm_mode", "==", "6", ":", "\n", "# CR-GCM-N", "\n", "                ", "if", "self", ".", "notice_destroy", ":", "\n", "                    ", "self", ".", "notice_destroy", "=", "False", "\n", "actions", ",", "max_time", ",", "final_positions", "=", "self", ".", "cr_mgc", ".", "cr_gcm", "(", "deepcopy", "(", "self", ".", "true_positions", ")", ",", "\n", "deepcopy", "(", "self", ".", "remain_list", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "remain_list", ")", ")", ":", "\n", "                        ", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "deepcopy", "(", "final_positions", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                        ", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "destination_positions", "[", "i", "]", "-", "self", ".", "true_positions", "[", "i", "]", ")", ">=", "0.55", ":", "\n", "                            ", "actions", "[", "i", "]", "=", "deepcopy", "(", "\n", "(", "self", ".", "destination_positions", "[", "i", "]", "-", "self", ".", "true_positions", "[", "i", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "destination_positions", "[", "i", "]", "-", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "print", "(", "\"No such algorithm\"", ")", "\n", "", "", "return", "deepcopy", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.take_actions_incomplete_information": [[358, 406], ["np.zeros", "copy.deepcopy", "Utils.split_the_positions_into_clusters_and_indexes", "print", "Swarm_general.Swarm.gcn_2017.cr_gcm_n", "copy.deepcopy", "np.array", "Utils.make_A_matrix", "Utils.check_if_a_connected_graph", "Utils.split_the_positions_into_clusters_and_indexes", "range", "print", "copy.deepcopy", "copy.deepcopy", "np.array.append", "len", "len", "Swarm_general.Swarm.cr_gcm_n.cr_gcm_n", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.split_the_positions_into_clusters_and_indexes", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_2017.cr_gcm_n", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.split_the_positions_into_clusters_and_indexes", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_2017.cr_gcm_n"], ["", "def", "take_actions_incomplete_information", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        take actions with incomplete information in IDs (II)\n        :return: unit speed vectors\n        \"\"\"", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "if", "self", ".", "algorithm_mode", "==", "0", ":", "\n", "# CRS", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "1", ":", "\n", "# centering", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "2", ":", "\n", "# SIDR", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "3", ":", "\n", "# GCN-2017", "\n", "            ", "positions_with_clusters", ",", "cluster_index", "=", "Utils", ".", "split_the_positions_into_clusters_and_indexes", "(", "\n", "self", ".", "remain_positions", ",", ")", "\n", "for", "uav", "in", "self", ".", "remain_list", ":", "\n", "                ", "print", "(", "\"decision_for_UAV_%d\"", "%", "uav", ")", "\n", "temp_actions", ",", "max_time", "=", "self", ".", "gcn_2017", ".", "cr_gcm_n", "(", "deepcopy", "(", "self", ".", "database", "[", "uav", "]", "[", "\"known_positions\"", "]", ")", ",", "\n", "deepcopy", "(", "self", ".", "database", "[", "uav", "]", "[", "\"existing_list\"", "]", ")", ")", "\n", "actions", "[", "uav", "]", "=", "deepcopy", "(", "temp_actions", "[", "uav", "]", ")", "\n", "\n", "", "", "elif", "self", ".", "algorithm_mode", "==", "5", ":", "\n", "# CR-GCM-N", "\n", "# CR-GCM", "\n", "            ", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                ", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ",", "config_communication_range", ")", "\n", "flag", ",", "num_of_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "positions_with_clusters", ",", "cluster_index", "=", "Utils", ".", "split_the_positions_into_clusters_and_indexes", "(", "\n", "remain_positions", ",", "num_of_clusters", ",", "A", ")", "\n", "\n", "for", "cluster", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "                ", "temp_actions", ",", "final_positions", ",", "max_time", "=", "self", ".", "cr_gcm_n", ".", "cr_gcm_n", "(", "\n", "deepcopy", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"known_positions\"", "]", ")", ",", "\n", "deepcopy", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ")", ")", "\n", "for", "i", "in", "cluster_index", "[", "cluster", "]", ":", "\n", "                    ", "actions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "temp_actions", "[", "i", "]", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "print", "(", "\"No such algorithm\"", ")", "\n", "", "return", "deepcopy", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.take_actions_incomplete_information_continuous": [[407, 689], ["np.zeros", "copy.deepcopy", "np.array", "Utils.make_A_matrix", "Utils.check_if_a_connected_graph", "Utils.split_the_positions_into_clusters_and_indexes", "range", "np.array.append", "len", "len", "np.array", "Utils.check_if_a_connected_graph", "np.array", "Utils.check_if_a_connected_graph", "copy.deepcopy", "np.array.append", "copy.deepcopy", "len", "time.perf_counter", "print", "time.perf_counter", "np.array.append", "len", "time.perf_counter", "print", "time.perf_counter", "np.array", "Utils.check_if_a_connected_graph", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "time.perf_counter", "print", "time.perf_counter", "time.perf_counter", "Swarm_general.Swarm.csds.csds", "time.perf_counter", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "time.perf_counter", "Swarm_general.Swarm.hero.hero", "time.perf_counter", "np.array.append", "len", "time.perf_counter", "print", "time.perf_counter", "np.array", "Utils.check_if_a_connected_graph", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "Swarm_general.Swarm.time_consuming.append", "copy.deepcopy", "Utils.difference_set", "Swarm_general.Swarm.time_consuming.append", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "time.perf_counter", "Traditional_Algorithm.Centering.centering_fly", "time.perf_counter", "np.array.append", "len", "time.perf_counter", "print", "time.perf_counter", "np.array", "Utils.make_A_matrix", "Utils.check_if_a_connected_graph", "Utils.split_the_positions_into_clusters_and_indexes", "range", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "Traditional_Algorithm.Centering.centering_fly", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "time.perf_counter", "Traditional_Algorithm.SIDR.SIDR", "time.perf_counter", "copy.deepcopy", "np.array.append", "len", "len", "np.array", "Utils.check_if_a_connected_graph", "np.array", "Utils.make_A_matrix", "Utils.check_if_a_connected_graph", "Utils.split_the_positions_into_clusters_and_indexes", "range", "print", "Traditional_Algorithm.Centering.centering_fly", "copy.deepcopy", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "copy.deepcopy", "np.array.append", "copy.deepcopy", "len", "Swarm_general.Swarm.check_if_finish", "time.perf_counter", "print", "time.perf_counter", "np.array.append", "len", "len", "np.array", "Utils.check_if_a_connected_graph", "range", "copy.deepcopy", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "time.perf_counter", "print", "time.perf_counter", "time.perf_counter", "time.perf_counter", "copy.deepcopy", "np.array.append", "copy.deepcopy", "len", "Swarm_general.Swarm.check_if_finish", "time.perf_counter", "print", "time.perf_counter", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "Swarm_general.Swarm.gcn_2017.cr_gcm_n", "Swarm_general.Swarm.time_consuming.append", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "time.perf_counter", "print", "time.perf_counter", "time.perf_counter", "time.perf_counter", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "Swarm_general.Swarm.time_consuming.append", "Swarm_general.Swarm.cr_mgc.cr_gcm", "Swarm_general.Swarm.time_consuming.append", "np.linalg.norm", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "np.linalg.norm", "np.linalg.norm", "np.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.split_the_positions_into_clusters_and_indexes", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.csds", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.HERO.HERO.hero", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.difference_set", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.split_the_positions_into_clusters_and_indexes", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.SIDR.SIDR", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.split_the_positions_into_clusters_and_indexes", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.check_if_finish", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.check_if_finish", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_2017.cr_gcm_n", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.cr_gcm"], ["", "def", "take_actions_incomplete_information_continuous", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        take actions with incomplete information in IDs (II)\n        :return: unit speed vectors\n        \"\"\"", "\n", "record_time", "=", "False", "\n", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "if", "self", ".", "algorithm_mode", "==", "0", ":", "\n", "# CSDS", "\n", "            ", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                ", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ",", "config_communication_range", ")", "\n", "flag", ",", "num_of_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "positions_with_clusters", ",", "cluster_index", "=", "Utils", ".", "split_the_positions_into_clusters_and_indexes", "(", "\n", "remain_positions", ",", "num_of_clusters", ",", "A", ")", "\n", "\n", "for", "cluster", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "                ", "temp_remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ":", "\n", "                    ", "temp_remain_positions", ".", "append", "(", "\n", "deepcopy", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"known_positions\"", "]", "[", "i", "]", ")", ")", "\n", "", "temp_remain_positions", "=", "np", ".", "array", "(", "temp_remain_positions", ")", "\n", "flag", ",", "num_cluster", "=", "Utils", ".", "check_if_a_connected_graph", "(", "deepcopy", "(", "temp_remain_positions", ")", ",", "\n", "len", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "\n", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ")", ")", "\n", "if", "flag", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"connected\"", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "# return deepcopy(actions)", "\n", "", "", "elif", "num_of_clusters", "==", "1", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"connected\"", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "", "else", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "actions_csds", ",", "max_time", "=", "self", ".", "csds", ".", "csds", "(", "\n", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"known_positions\"", "]", "\n", ",", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "for", "k", "in", "cluster_index", "[", "cluster", "]", ":", "\n", "                        ", "actions", "[", "self", ".", "remain_list", "[", "k", "]", "]", "=", "0.05", "*", "centering_fly", "(", "\n", "self", ".", "database", "[", "self", ".", "remain_list", "[", "k", "]", "]", "[", "\"known_positions\"", "]", ",", "\n", "self", ".", "database", "[", "self", ".", "remain_list", "[", "k", "]", "]", "[", "\"existing_list\"", "]", ",", "self", ".", "remain_list", "[", "k", "]", ")", "+", "0.95", "*", "actions_csds", "[", "self", ".", "remain_list", "[", "k", "]", "]", "\n", "\n", "", "", "", "", "elif", "self", ".", "algorithm_mode", "==", "1", ":", "\n", "# hero", "\n", "            ", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                ", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "\n", "flag", ",", "num_of_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "if", "flag", ":", "\n", "                ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"connected\"", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                    ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "actions_hero", "=", "self", ".", "hero", ".", "hero", "(", "\n", "Utils", ".", "difference_set", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "num_of_agents", ")", "]", ",", "self", ".", "database", "[", "i", "]", "[", "\"existing_list\"", "]", ")", ",", "\n", "self", ".", "database", "[", "i", "]", "[", "\"known_positions\"", "]", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "actions", "[", "i", "]", "=", "0.2", "*", "centering_fly", "(", "self", ".", "database", "[", "i", "]", "[", "\"known_positions\"", "]", ",", "\n", "self", ".", "database", "[", "i", "]", "[", "\"existing_list\"", "]", ",", "i", ")", "+", "0.8", "*", "actions_hero", "[", "i", "]", "\n", "\n", "", "", "", "elif", "self", ".", "algorithm_mode", "==", "2", ":", "\n", "# centering", "\n", "            ", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                ", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "\n", "flag", ",", "num_of_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "if", "flag", ":", "\n", "                ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"connected\"", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                    ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "actions", "[", "i", "]", "=", "centering_fly", "(", "self", ".", "database", "[", "i", "]", "[", "\"known_positions\"", "]", ",", "self", ".", "database", "[", "i", "]", "[", "\"existing_list\"", "]", ",", "\n", "i", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "", "", "", "elif", "self", ".", "algorithm_mode", "==", "3", ":", "\n", "# SIDR", "\n", "            ", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                ", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "\n", "flag", ",", "num_of_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "\n", "if", "flag", ":", "\n", "                ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"connected\"", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                    ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "temp_actions", "=", "SIDR", "(", "self", ".", "database", "[", "i", "]", "[", "\"known_positions\"", "]", ",", "self", ".", "database", "[", "i", "]", "[", "\"existing_list\"", "]", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "actions", "[", "i", "]", "=", "deepcopy", "(", "temp_actions", "[", "i", "]", ")", "\n", "\n", "", "", "", "elif", "self", ".", "algorithm_mode", "==", "4", ":", "\n", "# GCN-2017", "\n", "            ", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                ", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ",", "config_communication_range", ")", "\n", "flag", ",", "num_of_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "positions_with_clusters", ",", "cluster_index", "=", "Utils", ".", "split_the_positions_into_clusters_and_indexes", "(", "\n", "remain_positions", ",", "num_of_clusters", ",", "A", ")", "\n", "\n", "for", "cluster", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "                ", "temp_remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ":", "\n", "                    ", "temp_remain_positions", ".", "append", "(", "\n", "deepcopy", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"known_positions\"", "]", "[", "i", "]", ")", ")", "\n", "", "temp_remain_positions", "=", "np", ".", "array", "(", "temp_remain_positions", ")", "\n", "flag", ",", "num_cluster", "=", "Utils", ".", "check_if_a_connected_graph", "(", "deepcopy", "(", "temp_remain_positions", ")", ",", "\n", "len", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "\n", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ")", ")", "\n", "\n", "if", "flag", "and", "self", ".", "check_if_finish", "(", "cluster_index", "[", "cluster", "]", ")", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"connected\"", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "# return deepcopy(actions)", "\n", "", "", "elif", "num_of_clusters", "==", "1", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"connected\"", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "", "else", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "self", ".", "notice_destroy", "or", "self", ".", "inertia_counter", ">", "self", ".", "inertia", ":", "\n", "\n", "                        ", "temp_actions", ",", "max_time", ",", "final_positions", "=", "self", ".", "gcn_2017", ".", "cr_gcm_n", "(", "\n", "deepcopy", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"known_positions\"", "]", ")", ",", "\n", "deepcopy", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ")", ")", "\n", "for", "i", "in", "cluster_index", "[", "cluster", "]", ":", "\n", "                            ", "actions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "temp_actions", "[", "i", "]", "\n", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "final_positions", "[", "i", "]", "\n", "self", ".", "if_finish", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "False", "\n", "", "", "else", ":", "\n", "\n", "                        ", "for", "i", "in", "cluster_index", "[", "cluster", "]", ":", "\n", "                            ", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "self", ".", "true_positions", "[", "\n", "self", ".", "remain_list", "[", "i", "]", "]", ")", ">=", "0.55", ":", "\n", "                                ", "actions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "(", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "\n", "self", ".", "true_positions", "[", "\n", "self", ".", "remain_list", "[", "i", "]", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "self", ".", "true_positions", "[", "\n", "self", ".", "remain_list", "[", "i", "]", "]", ")", "\n", "", "else", ":", "\n", "                                ", "self", ".", "if_finish", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "True", "\n", "", "", "", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "", "", "if", "self", ".", "notice_destroy", ":", "\n", "                ", "self", ".", "notice_destroy", "=", "False", "\n", "", "if", "self", ".", "inertia_counter", ">", "self", ".", "inertia", ":", "\n", "                ", "self", ".", "inertia_counter", "=", "0", "\n", "", "self", ".", "inertia_counter", "+=", "1", "\n", "\n", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "6", ":", "\n", "# CR-GCM-N", "\n", "# make the clusters", "\n", "            ", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "                ", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "true_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ",", "config_communication_range", ")", "\n", "flag", ",", "num_of_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "positions_with_clusters", ",", "cluster_index", "=", "Utils", ".", "split_the_positions_into_clusters_and_indexes", "(", "\n", "remain_positions", ",", "num_of_clusters", ",", "A", ")", "\n", "\n", "for", "cluster", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "                ", "temp_remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ":", "\n", "                    ", "temp_remain_positions", ".", "append", "(", "\n", "deepcopy", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"known_positions\"", "]", "[", "i", "]", ")", ")", "\n", "", "temp_remain_positions", "=", "np", ".", "array", "(", "temp_remain_positions", ")", "\n", "flag", ",", "num_cluster", "=", "Utils", ".", "check_if_a_connected_graph", "(", "deepcopy", "(", "temp_remain_positions", ")", ",", "\n", "len", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "\n", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ")", ")", "\n", "if", "flag", "and", "self", ".", "check_if_finish", "(", "cluster_index", "[", "cluster", "]", ")", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"connected\"", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "# return deepcopy(actions)", "\n", "", "", "elif", "num_of_clusters", "==", "1", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\"connected\"", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "", "else", ":", "\n", "                    ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "self", ".", "notice_destroy", "or", "self", ".", "inertia_counter", ">", "self", ".", "inertia", ":", "\n", "\n", "                        ", "temp_actions", ",", "max_time", ",", "final_positions", "=", "self", ".", "cr_mgc", ".", "cr_gcm", "(", "\n", "deepcopy", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"known_positions\"", "]", ")", ",", "\n", "deepcopy", "(", "self", ".", "database", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "cluster", "]", "[", "0", "]", "]", "]", "[", "\"existing_list\"", "]", ")", ")", "\n", "for", "i", "in", "cluster_index", "[", "cluster", "]", ":", "\n", "                            ", "actions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "temp_actions", "[", "i", "]", "\n", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "final_positions", "[", "i", "]", "\n", "self", ".", "if_finish", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "False", "\n", "", "", "else", ":", "\n", "\n", "                        ", "for", "i", "in", "cluster_index", "[", "cluster", "]", ":", "\n", "                            ", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "self", ".", "true_positions", "[", "\n", "self", ".", "remain_list", "[", "i", "]", "]", ")", ">=", "0.55", ":", "\n", "                                ", "actions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "(", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "\n", "self", ".", "true_positions", "[", "\n", "self", ".", "remain_list", "[", "i", "]", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "destination_positions", "[", "self", ".", "remain_list", "[", "i", "]", "]", "-", "self", ".", "true_positions", "[", "\n", "self", ".", "remain_list", "[", "i", "]", "]", ")", "\n", "", "else", ":", "\n", "                                ", "self", ".", "if_finish", "[", "self", ".", "remain_list", "[", "i", "]", "]", "=", "True", "\n", "", "", "", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "record_time", ":", "\n", "                        ", "self", ".", "time_consuming", ".", "append", "(", "deepcopy", "(", "end", "-", "start", ")", ")", "\n", "record_time", "=", "True", "\n", "", "", "", "if", "self", ".", "notice_destroy", ":", "\n", "                ", "self", ".", "notice_destroy", "=", "False", "\n", "", "if", "self", ".", "inertia_counter", ">", "self", ".", "inertia", ":", "\n", "                ", "self", ".", "inertia_counter", "=", "0", "\n", "", "self", ".", "inertia_counter", "+=", "1", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"No such algorithm\"", ")", "\n", "", "return", "deepcopy", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.check_if_finish": [[690, 697], ["range", "len"], "methods", ["None"], ["", "def", "check_if_finish", "(", "self", ",", "cluster_index", ")", ":", "\n", "        ", "flag", "=", "True", "\n", "for", "i", "in", "range", "(", "len", "(", "cluster_index", ")", ")", ":", "\n", "            ", "if", "not", "self", ".", "if_finish", "[", "self", ".", "remain_list", "[", "cluster_index", "[", "i", "]", "]", "]", ":", "\n", "                ", "flag", "=", "False", "\n", "break", "\n", "", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.save_GCN": [[698, 700], ["torch.save"], "methods", ["None"], ["", "def", "save_GCN", "(", "self", ",", "filename", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "cr_mgc", ".", "gcn_network", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Swarm_general.Swarm.save_time_consuming": [[701, 720], ["pd.DataFrame", "Utils.store_dataframe_to_excel", "np.array", "pd.DataFrame", "Utils.store_dataframe_to_excel", "np.array", "pd.DataFrame", "Utils.store_dataframe_to_excel", "np.array", "pd.DataFrame", "Utils.store_dataframe_to_excel", "np.array", "pd.DataFrame", "Utils.store_dataframe_to_excel", "np.array", "pd.DataFrame", "Utils.store_dataframe_to_excel", "np.array"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.store_dataframe_to_excel", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.store_dataframe_to_excel", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.store_dataframe_to_excel", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.store_dataframe_to_excel", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.store_dataframe_to_excel", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.store_dataframe_to_excel"], ["", "def", "save_time_consuming", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "algorithm_mode", "==", "0", ":", "\n", "            ", "self", ".", "time_consuming", "=", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "self", ".", "time_consuming", ")", ")", "\n", "Utils", ".", "store_dataframe_to_excel", "(", "self", ".", "time_consuming", ",", "\"Experiment_Fig/time_consuming/CSDS.xlsx\"", ")", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "1", ":", "\n", "            ", "self", ".", "time_consuming", "=", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "self", ".", "time_consuming", ")", ")", "\n", "Utils", ".", "store_dataframe_to_excel", "(", "self", ".", "time_consuming", ",", "\"Experiment_Fig/time_consuming/HERO.xlsx\"", ")", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "2", ":", "\n", "            ", "self", ".", "time_consuming", "=", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "self", ".", "time_consuming", ")", ")", "\n", "Utils", ".", "store_dataframe_to_excel", "(", "self", ".", "time_consuming", ",", "\"Experiment_Fig/time_consuming/CEN.xlsx\"", ")", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "3", ":", "\n", "            ", "self", ".", "time_consuming", "=", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "self", ".", "time_consuming", ")", ")", "\n", "Utils", ".", "store_dataframe_to_excel", "(", "self", ".", "time_consuming", ",", "\"Experiment_Fig/time_consuming/SIDR.xlsx\"", ")", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "4", ":", "\n", "            ", "self", ".", "time_consuming", "=", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "self", ".", "time_consuming", ")", ")", "\n", "Utils", ".", "store_dataframe_to_excel", "(", "self", ".", "time_consuming", ",", "\"Experiment_Fig/time_consuming/GCN_2017.xlsx\"", ")", "\n", "", "elif", "self", ".", "algorithm_mode", "==", "6", ":", "\n", "            ", "self", ".", "time_consuming", "=", "pd", ".", "DataFrame", "(", "np", ".", "array", "(", "self", ".", "time_consuming", ")", ")", "\n", "Utils", ".", "store_dataframe_to_excel", "(", "self", ".", "time_consuming", ",", "\"Experiment_Fig/time_consuming/CR_GCM_N.xlsx\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.__init__": [[8, 19], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_of_total_agents", "=", "config_num_of_agents", "\n", "\n", "self", ".", "initial_positions", "=", "deepcopy", "(", "config_initial_swarm_positions", ")", "\n", "self", ".", "environment_positions", "=", "deepcopy", "(", "self", ".", "initial_positions", ")", "\n", "self", ".", "environment_next_positions", "=", "deepcopy", "(", "self", ".", "environment_positions", ")", "\n", "\n", "self", ".", "num_of_remain_agents", "=", "config_num_of_agents", "\n", "self", ".", "remain_list", "=", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "self", ".", "remain_positions", "=", "deepcopy", "(", "self", ".", "environment_positions", ")", "\n", "self", ".", "max_destroy_num", "=", "config_maximum_destroy_num", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.reset": [[20, 28], ["copy.deepcopy", "copy.deepcopy", "Environment.Environment.make_remain_positions", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.make_remain_positions"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "environment_positions", "=", "deepcopy", "(", "self", ".", "initial_positions", ")", "\n", "self", ".", "environment_next_positions", "=", "deepcopy", "(", "self", ".", "environment_positions", ")", "\n", "self", ".", "remain_list", "=", "[", "i", "for", "i", "in", "range", "(", "config_num_of_agents", ")", "]", "\n", "self", ".", "num_of_remain_agents", "=", "config_num_of_agents", "\n", "self", ".", "make_remain_positions", "(", ")", "\n", "\n", "return", "deepcopy", "(", "self", ".", "environment_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.check_if_connected_graph": [[29, 39], ["Environment.Environment.make_remain_positions", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.make_remain_positions", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "def", "check_if_connected_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "make_remain_positions", "(", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "self", ".", "remain_positions", ",", "self", ".", "num_of_remain_agents", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "self", ".", "num_of_remain_agents", ")", "\n", "L", "=", "D", "-", "A", "\n", "connected_flag", ",", "num_of_clusters", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "self", ".", "num_of_remain_agents", ")", "\n", "if", "connected_flag", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.check_the_clusters": [[40, 47], ["Environment.Environment.make_remain_positions", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.make_remain_positions", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "", "def", "check_the_clusters", "(", "self", ")", ":", "\n", "        ", "self", ".", "make_remain_positions", "(", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "self", ".", "remain_positions", ",", "self", ".", "num_of_remain_agents", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "self", ".", "num_of_remain_agents", ")", "\n", "L", "=", "D", "-", "A", "\n", "connected_flag", ",", "num_of_clusters", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "self", ".", "num_of_remain_agents", ")", "\n", "return", "deepcopy", "(", "num_of_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.next_state": [[48, 57], ["copy.deepcopy"], "methods", ["None"], ["", "def", "next_state", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"\n        :param actions: list\n        :return:\n        \"\"\"", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "            ", "delta_positions", "=", "actions", "[", "i", "]", "*", "config_constant_speed", "\n", "self", ".", "environment_next_positions", "[", "i", "]", "=", "self", ".", "environment_positions", "[", "i", "]", "+", "delta_positions", "\n", "", "return", "deepcopy", "(", "self", ".", "environment_next_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.update": [[58, 60], ["copy.deepcopy"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "self", ".", "environment_positions", "=", "deepcopy", "(", "self", ".", "environment_next_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.stochastic_destroy": [[61, 125], ["numpy.array", "print", "Environment.Environment.make_remain_positions", "copy.deepcopy", "copy.deepcopy", "random.sample", "copy.deepcopy", "copy.deepcopy", "numpy.random.randint", "range", "copy.deepcopy.append", "Environment.Environment.remain_list.remove", "random.sample", "print", "range", "copy.deepcopy.append", "Environment.Environment.remain_list.remove", "len", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "print", "Environment.Environment.remain_list.remove", "range", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy.append", "Environment.Environment.remain_list.remove", "numpy.linalg.norm", "random.sample.append"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.make_remain_positions"], ["", "def", "stochastic_destroy", "(", "self", ",", "mode", "=", "1", ",", "num_of_destroyed", "=", "10", ",", "real_destroy_list", "=", "[", "]", ",", "destroy_center", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "destroy_range", "=", "200", ")", ":", "\n", "        ", "destroy_list", "=", "[", "]", "\n", "destroy_num", "=", "0", "\n", "if", "self", ".", "num_of_remain_agents", "<", "config_minimum_remain_num", ":", "\n", "            ", "print", "(", "\"Warning: the number of remaining nodes is less than the minimal threshold\"", ")", "\n", "return", "deepcopy", "(", "destroy_num", ")", ",", "deepcopy", "(", "destroy_list", ")", "\n", "", "else", ":", "\n", "            ", "if", "mode", "==", "1", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "destroy_num", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "max_destroy_num", ")", "\n", "if", "destroy_num", "<=", "self", ".", "num_of_remain_agents", ":", "\n", "                        ", "break", "\n", "", "", "destroy_index", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "self", ".", "num_of_remain_agents", ")", ",", "destroy_num", ")", "\n", "for", "i", "in", "destroy_index", ":", "\n", "                    ", "destroy_list", ".", "append", "(", "self", ".", "remain_list", "[", "i", "]", ")", "\n", "", "for", "i", "in", "destroy_list", ":", "\n", "                    ", "self", ".", "remain_list", ".", "remove", "(", "i", ")", "\n", "", "self", ".", "num_of_remain_agents", "-=", "destroy_num", "\n", "\n", "", "elif", "mode", "==", "2", ":", "\n", "# stochastically destroy", "\n", "                ", "destroy_num", "=", "num_of_destroyed", "\n", "if", "destroy_num", ">=", "self", ".", "num_of_remain_agents", ":", "\n", "                    ", "print", "(", "\"ERROR: already destroy all nodes\"", ")", "\n", "return", "deepcopy", "(", "destroy_num", ")", ",", "deepcopy", "(", "destroy_list", ")", "\n", "", "destroy_index", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "self", ".", "num_of_remain_agents", ")", ",", "destroy_num", ")", "\n", "for", "i", "in", "destroy_index", ":", "\n", "                    ", "destroy_list", ".", "append", "(", "self", ".", "remain_list", "[", "i", "]", ")", "\n", "", "for", "i", "in", "destroy_list", ":", "\n", "                    ", "self", ".", "remain_list", ".", "remove", "(", "i", ")", "\n", "", "self", ".", "num_of_remain_agents", "-=", "destroy_num", "\n", "\n", "", "elif", "mode", "==", "4", ":", "\n", "# stochastically destroy", "\n", "                ", "destroy_num", "=", "len", "(", "real_destroy_list", ")", "\n", "if", "destroy_num", ">=", "self", ".", "num_of_remain_agents", ":", "\n", "                    ", "print", "(", "\"ERROR: already destroy all nodes\"", ")", "\n", "return", "deepcopy", "(", "destroy_num", ")", ",", "deepcopy", "(", "destroy_list", ")", "\n", "", "destroy_list", "=", "deepcopy", "(", "real_destroy_list", ")", "\n", "for", "i", "in", "destroy_list", ":", "\n", "                    ", "self", ".", "remain_list", ".", "remove", "(", "i", ")", "\n", "", "self", ".", "num_of_remain_agents", "-=", "destroy_num", "\n", "\n", "", "elif", "mode", "==", "3", ":", "\n", "# destroy a certain range", "\n", "                ", "destroy_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_of_remain_agents", ")", ":", "\n", "                    ", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "remain_positions", "[", "i", "]", "-", "destroy_center", ")", "<=", "destroy_range", ":", "\n", "                        ", "destroy_num", "+=", "1", "\n", "destroy_index", ".", "append", "(", "i", ")", "\n", "", "", "for", "i", "in", "destroy_index", ":", "\n", "                    ", "destroy_list", ".", "append", "(", "self", ".", "remain_list", "[", "i", "]", ")", "\n", "", "for", "i", "in", "destroy_list", ":", "\n", "                    ", "self", ".", "remain_list", ".", "remove", "(", "i", ")", "\n", "", "self", ".", "num_of_remain_agents", "-=", "destroy_num", "\n", "\n", "# remain positions", "\n", "", "self", ".", "make_remain_positions", "(", ")", "\n", "# for i in destroy_list:", "\n", "#     self.environment_positions[i] = np.array([-100000, -100000, -1000000], dtype=np.float64)", "\n", "#     self.environment_next_positions[i] = np.array([-100000, -100000, -100000], dtype=np.float64)", "\n", "\n", "return", "deepcopy", "(", "destroy_num", ")", ",", "deepcopy", "(", "destroy_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Environment.Environment.make_remain_positions": [[126, 131], ["numpy.array", "Environment.Environment.remain_positions.append", "copy.deepcopy"], "methods", ["None"], ["", "", "def", "make_remain_positions", "(", "self", ")", ":", "\n", "        ", "self", ".", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "            ", "self", ".", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "environment_positions", "[", "i", "]", ")", ")", "\n", "", "self", ".", "remain_positions", "=", "np", ".", "array", "(", "self", ".", "remain_positions", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.HERO.HERO.__init__": [[8, 23], ["copy.deepcopy", "len", "Utils.make_A_matrix", "numpy.zeros", "numpy.zeros", "range", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix"], ["    ", "def", "__init__", "(", "self", ",", "initial_positions", ")", ":", "\n", "        ", "self", ".", "init_positions", "=", "deepcopy", "(", "initial_positions", ")", "\n", "self", ".", "num_of_agents", "=", "len", "(", "self", ".", "init_positions", ")", "\n", "\n", "self", ".", "A", "=", "Utils", ".", "make_A_matrix", "(", "self", ".", "init_positions", ",", "self", ".", "num_of_agents", ",", "config_communication_range", ")", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "self", ".", "num_of_neighbors", "=", "np", ".", "zeros", "(", "self", ".", "num_of_agents", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_of_agents", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "num_of_agents", ")", ":", "\n", "                ", "if", "i", "!=", "j", "and", "self", ".", "A", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "self", ".", "mean", "[", "i", "]", "+=", "self", ".", "init_positions", "[", "j", "]", "\n", "self", ".", "num_of_neighbors", "[", "i", "]", "+=", "1", "\n", "", "", "self", ".", "mean", "[", "i", "]", "=", "self", ".", "mean", "[", "i", "]", "/", "self", ".", "num_of_neighbors", "[", "i", "]", "\n", "\n", "", "self", ".", "changed_mean", "=", "deepcopy", "(", "self", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.HERO.HERO.hero": [[24, 59], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "copy.deepcopy", "copy.deepcopy", "range", "numpy.linalg.norm", "numpy.linalg.norm", "temp_destroy_list.append", "numpy.linalg.norm", "numpy.linalg.norm", "copy.deepcopy"], "methods", ["None"], ["", "def", "hero", "(", "self", ",", "destroy_index", ",", "current_positions", ")", ":", "\n", "        ", "speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "self", ".", "num_of_neighbors", "=", "np", ".", "zeros", "(", "self", ".", "num_of_agents", ")", "\n", "self", ".", "changed_mean", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_of_agents", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_of_agents", ")", ":", "\n", "            ", "if", "i", "not", "in", "destroy_index", ":", "\n", "                ", "temp_flag", "=", "False", "\n", "temp_destroy_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "num_of_agents", ")", ":", "\n", "                    ", "if", "i", "!=", "j", "and", "self", ".", "A", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                        ", "if", "j", "in", "destroy_index", ":", "\n", "                            ", "temp_destroy_list", ".", "append", "(", "deepcopy", "(", "j", ")", ")", "\n", "temp_flag", "=", "True", "\n", "", "else", ":", "\n", "                            ", "self", ".", "changed_mean", "[", "i", "]", "+=", "self", ".", "init_positions", "[", "j", "]", "\n", "self", ".", "num_of_neighbors", "[", "i", "]", "+=", "1", "\n", "", "", "", "self", ".", "changed_mean", "[", "i", "]", "=", "self", ".", "changed_mean", "[", "i", "]", "/", "self", ".", "num_of_neighbors", "[", "i", "]", "\n", "if", "temp_flag", ":", "\n", "                    ", "target_position", "=", "0", "\n", "counter", "=", "0", "\n", "for", "k", "in", "temp_destroy_list", ":", "\n", "                        ", "target_position", "+=", "self", ".", "init_positions", "[", "k", "]", "\n", "counter", "+=", "1", "\n", "", "target_position", "/=", "counter", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "\n", "target_position", "-", "current_positions", "[", "i", "]", ")", ">", "0.01", ":", "\n", "                        ", "speed", "[", "i", "]", "=", "(", "target_position", "-", "current_positions", "[", "i", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "target_position", "-", "current_positions", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "changed_mean", "[", "i", "]", "-", "self", ".", "mean", "[", "i", "]", ")", ">", "0.01", ":", "\n", "                        ", "speed", "[", "i", "]", "=", "(", "self", ".", "changed_mean", "[", "i", "]", "-", "self", ".", "mean", "[", "i", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "changed_mean", "[", "i", "]", "-", "self", ".", "mean", "[", "i", "]", ")", "\n", "", "", "", "", "self", ".", "mean", "=", "deepcopy", "(", "self", ".", "changed_mean", ")", "\n", "return", "deepcopy", "(", "speed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_2017.__init__": [[18, 29], ["GCN_2017.GCN_fixed_structure", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "GCN_2017.GCN_2017.gcn_network.cuda", "GCN_2017.GCN_2017.gcn_network.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "hidden_dimension", "=", "best_hidden_dimension", "\n", "self", ".", "dropout_value", "=", "best_dropout", "\n", "self", ".", "gcn_network", "=", "GCN_fixed_structure", "(", "nfeat", "=", "3", ",", "nhid", "=", "self", ".", "hidden_dimension", ",", "nclass", "=", "3", ",", "\n", "dropout", "=", "self", ".", "dropout_value", ",", "if_dropout", "=", "True", ",", "bias", "=", "True", ")", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "self", ".", "gcn_network", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "Adam", "(", "self", ".", "gcn_network", ".", "parameters", "(", ")", ",", "lr", "=", "0.00001", ")", "\n", "self", ".", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "use_cuda", "else", "torch", ".", "FloatTensor", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_2017.cr_gcm_n": [[30, 106], ["time.perf_counter", "np.array", "len", "Utils.make_A_matrix", "Utils.make_D_matrix", "np.diag", "np.diag.dot().dot", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "range", "np.zeros", "torch.FloatTensor().type.cpu().data.numpy", "torch.FloatTensor().type.cpu().data.numpy", "torch.FloatTensor().type.cpu().data.numpy", "range", "time.perf_counter", "print", "torch.FloatTensor().type.append", "torch.FloatTensor().type.append", "torch.FloatTensor().type.append", "len", "np.identity", "len", "GCN_2017.GCN_2017.gcn_network", "GCN_2017.GCN_2017.cpu().data.numpy", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "range", "GCN_2017.GCN_2017.optimizer.zero_grad", "loss.backward", "GCN_2017.GCN_2017.optimizer.step", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "len", "Utils.make_D_matrix.diagonal", "np.diag.dot", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "len", "len", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "loss.cpu().data.numpy", "copy.deepcopy", "copy.deepcopy", "np.linalg.norm", "np.linalg.norm", "copy.deepcopy", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "loss.cpu().data.numpy", "GCN_2017.GCN_2017.cpu().data.numpy", "torch.FloatTensor().type.cpu", "torch.FloatTensor().type.cpu", "torch.FloatTensor().type.cpu", "np.linalg.norm", "np.linalg.norm", "GCN_2017.GCN_2017.cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "loss.cpu", "np.array", "loss.cpu", "GCN_2017.GCN_2017.cpu"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "def", "cr_gcm_n", "(", "self", ",", "global_positions", ",", "remain_list", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "remain_list", ":", "\n", "            ", "remain_positions", ".", "append", "(", "deepcopy", "(", "global_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "num_remain", "=", "len", "(", "remain_list", ")", "\n", "# proposed", "\n", "# d_min = smallest_d_algorithm(deepcopy(remain_positions), num_remain, config_communication_range)", "\n", "# d_max = Utils.calculate_d_max(deepcopy(remain_positions))", "\n", "# A = Utils.make_A_matrix(remain_positions, num_remain, d_min + (d_max - d_min) * 0.25)", "\n", "#", "\n", "# D = Utils.make_D_matrix(A, num_remain)", "\n", "# L = D - A", "\n", "# A_norm = np.linalg.norm(A, ord=np.inf)", "\n", "# k0 = 1 / A_norm", "\n", "# K = 0.99 * k0", "\n", "# A_hat = np.eye(num_remain) - K * L", "\n", "\n", "# 2017", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "len", "(", "remain_positions", ")", ",", "config_communication_range", ")", "\n", "A_tilde", "=", "A", "+", "np", ".", "identity", "(", "len", "(", "A", ")", ")", "\n", "D_tilde", "=", "Utils", ".", "make_D_matrix", "(", "A_tilde", ",", "len", "(", "remain_positions", ")", ")", "\n", "\n", "D_tilde_sqrt", "=", "np", ".", "diag", "(", "D_tilde", ".", "diagonal", "(", ")", "**", "(", "-", "0.5", ")", ")", "\n", "A_hat", "=", "D_tilde_sqrt", ".", "dot", "(", "A_tilde", ")", ".", "dot", "(", "D_tilde_sqrt", ")", "\n", "\n", "remain_positions", "=", "torch", ".", "FloatTensor", "(", "remain_positions", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "A_hat", "=", "torch", ".", "FloatTensor", "(", "A_hat", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "best_final_positions", "=", "0", "\n", "best_loss", "=", "1000000000000", "\n", "for", "train_step", "in", "range", "(", "1000", ")", ":", "\n", "\n", "            ", "final_positions", "=", "self", ".", "gcn_network", "(", "remain_positions", ",", "A_hat", ")", "\n", "\n", "final_positions", "=", "0.5", "*", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "1000", ",", "1000", ",", "100", "]", ")", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "*", "final_positions", "\n", "\n", "# check if connected", "\n", "final_positions_", "=", "final_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "final_positions_", ",", "len", "(", "final_positions_", ")", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "len", "(", "A", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "flag", ",", "num", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "len", "(", "L", ")", ")", "\n", "# loss", "\n", "temp_max", "=", "0", "\n", "max_index", "=", "0", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "final_positions", ")", ")", ":", "\n", "                ", "if", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", ">", "temp_max", ":", "\n", "                    ", "temp_max", "=", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", "\n", "max_index", "=", "j", "\n", "", "", "loss", "=", "1000", "*", "(", "num", "-", "1", ")", "+", "torch", ".", "norm", "(", "final_positions", "[", "max_index", "]", "-", "remain_positions", "[", "max_index", "]", ")", "\n", "# loss_F = 1000 * (num - 1) + torch.norm(final_positions-F,p='fro')", "\n", "\n", "if", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "<", "best_loss", ":", "\n", "                ", "best_loss", "=", "deepcopy", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "best_final_positions", "=", "deepcopy", "(", "final_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "speed", "=", "np", ".", "zeros", "(", "(", "config_num_of_agents", ",", "3", ")", ")", "\n", "remain_positions_numpy", "=", "remain_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "temp_max_distance", "=", "0", "\n", "for", "i", "in", "range", "(", "num_remain", ")", ":", "\n", "            ", "if", "np", ".", "linalg", ".", "norm", "(", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", ">", "0", ":", "\n", "                ", "speed", "[", "remain_list", "[", "i", "]", "]", "=", "(", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", "\n", "", "if", "np", ".", "linalg", ".", "norm", "(", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", ">", "temp_max_distance", ":", "\n", "                ", "temp_max_distance", "=", "deepcopy", "(", "np", ".", "linalg", ".", "norm", "(", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", ")", "\n", "\n", "", "", "max_time", "=", "temp_max_distance", "/", "config_constant_speed", "\n", "# print(max_time)", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "end", "-", "start", ")", "\n", "return", "deepcopy", "(", "speed", ")", ",", "deepcopy", "(", "max_time", ")", ",", "deepcopy", "(", "best_final_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GraphConvolution.__init__": [[108, 118], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "GCN_2017.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "GCN_2017.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.GCO.GCO.__init__", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GraphConvolution.reset_parameters": [[119, 124], ["GCN_2017.GraphConvolution.weight.data.uniform_", "math.sqrt", "GCN_2017.GraphConvolution.bias.data.uniform_", "GCN_2017.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GraphConvolution.forward": [[125, 132], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "mm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GraphConvolution.__repr__": [[133, 137], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_fixed_structure.__init__": [[140, 153], ["torch.Module.__init__", "GCN_2017.GraphConvolution", "GCN_2017.GraphConvolution", "GCN_2017.GraphConvolution", "GCN_2017.GraphConvolution", "GCN_2017.GraphConvolution", "GCN_2017.GraphConvolution", "GCN_2017.GraphConvolution", "GCN_2017.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.GCO.GCO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", "=", "3", ",", "nhid", "=", "5", ",", "nclass", "=", "3", ",", "dropout", "=", "0.5", ",", "if_dropout", "=", "True", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GCN_fixed_structure", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "nfeat", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc3", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc4", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc5", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc6", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc7", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc8", "=", "GraphConvolution", "(", "nhid", ",", "nclass", ",", "bias", "=", "bias", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "training", "=", "if_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.GCN_2017.GCN_fixed_structure.forward": [[154, 167], ["torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "GCN_2017.GCN_fixed_structure.gc8", "GCN_2017.GCN_fixed_structure.gc1", "GCN_2017.GCN_fixed_structure.gc2", "GCN_2017.GCN_fixed_structure.gc3", "GCN_2017.GCN_fixed_structure.gc4", "GCN_2017.GCN_fixed_structure.gc5", "GCN_2017.GCN_fixed_structure.gc6", "GCN_2017.GCN_fixed_structure.gc7", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc2", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc3", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc4", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc5", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc6", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc7", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "self", ".", "gc8", "(", "x", ",", "adj", ")", "\n", "return", "torch", ".", "tanh", "(", "x", ")", "+", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.SIDR.SIDR": [[6, 38], ["len", "np.array", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "Utils.split_the_positions_into_clusters_and_indexes", "range", "np.zeros", "np.array", "range", "copy.deepcopy", "np.array.append", "true_cluster_index.append", "len", "np.array", "np.mean", "copy.deepcopy", "temp_true_index.append", "copy.deepcopy", "np.array.append", "copy.deepcopy", "np.linalg.norm", "np.linalg.norm"], "function", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.split_the_positions_into_clusters_and_indexes"], ["def", "SIDR", "(", "positions", ",", "remain_list", ")", ":", "\n", "    ", "num_of_remain", "=", "len", "(", "remain_list", ")", "\n", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "remain_list", ":", "\n", "        ", "remain_positions", ".", "append", "(", "deepcopy", "(", "positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "num_of_remain", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num_of_remain", ")", "\n", "L", "=", "D", "-", "A", "\n", "connected_flag", ",", "num_of_clusters", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "num_of_remain", ")", "\n", "positions_with_clusters", ",", "cluster_index", "=", "Utils", ".", "split_the_positions_into_clusters_and_indexes", "(", "remain_positions", ",", "\n", "num_of_clusters", ",", "\n", "A", ")", "\n", "true_cluster_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "        ", "temp_true_index", "=", "[", "]", "\n", "for", "j", "in", "cluster_index", "[", "i", "]", ":", "\n", "            ", "temp_true_index", ".", "append", "(", "deepcopy", "(", "remain_list", "[", "j", "]", ")", ")", "\n", "", "true_cluster_index", ".", "append", "(", "deepcopy", "(", "temp_true_index", ")", ")", "\n", "\n", "", "speed", "=", "np", ".", "zeros", "(", "(", "config_num_of_agents", ",", "3", ")", ")", "\n", "trajectory_point", "=", "np", ".", "array", "(", "[", "500", ",", "500", ",", "50", "]", ")", "\n", "for", "num_c", "in", "range", "(", "len", "(", "true_cluster_index", ")", ")", ":", "\n", "        ", "temp_positions", "=", "[", "]", "\n", "for", "i", "in", "true_cluster_index", "[", "num_c", "]", ":", "\n", "            ", "temp_positions", ".", "append", "(", "positions", "[", "i", "]", ")", "\n", "", "temp_positions", "=", "np", ".", "array", "(", "temp_positions", ")", "\n", "average_positions", "=", "np", ".", "mean", "(", "temp_positions", ")", "\n", "for", "uav", "in", "true_cluster_index", "[", "num_c", "]", ":", "\n", "            ", "if", "np", ".", "linalg", ".", "norm", "(", "trajectory_point", "-", "average_positions", ")", ">", "0", ":", "\n", "                ", "speed", "[", "uav", "]", "=", "(", "trajectory_point", "-", "average_positions", ")", "/", "np", ".", "linalg", ".", "norm", "(", "trajectory_point", "-", "average_positions", ")", "\n", "", "", "", "return", "deepcopy", "(", "speed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.Centering.centering_fly": [[5, 19], ["numpy.array", "numpy.mean", "copy.deepcopy", "np.array.append", "numpy.linalg.norm", "copy.deepcopy"], "function", ["None"], ["def", "centering_fly", "(", "node_global_positions", ",", "remain_list", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    fly to the center of the swarm is thinks\n    :param node_global_positions:\n    :return:\n    \"\"\"", "\n", "remain_positions", "=", "[", "]", "\n", "self_positions", "=", "node_global_positions", "[", "index", "]", "\n", "for", "i", "in", "remain_list", ":", "\n", "        ", "remain_positions", ".", "append", "(", "deepcopy", "(", "node_global_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "final_positions", "=", "np", ".", "mean", "(", "remain_positions", ",", "0", ")", "\n", "flying_direction", "=", "(", "final_positions", "-", "self_positions", ")", "/", "np", ".", "linalg", ".", "norm", "(", "final_positions", "-", "self_positions", ")", "\n", "return", "deepcopy", "(", "flying_direction", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.__init__": [[7, 30], ["copy.deepcopy", "copy.deepcopy", "numpy.zeros", "copy.deepcopy", "CSDS.CSDS.determine_the_backup", "range"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.determine_the_backup"], ["    ", "def", "__init__", "(", "self", ",", "total_num", ",", "global_positions", ")", ":", "\n", "        ", "self", ".", "global_positions", "=", "deepcopy", "(", "global_positions", ")", "\n", "self", ".", "remain_positions", "=", "deepcopy", "(", "self", ".", "global_positions", ")", "\n", "\n", "self", ".", "total_num", "=", "total_num", "\n", "\n", "self", ".", "remain_list", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "total_num", ")", "]", "\n", "self", ".", "remain_num", "=", "self", ".", "total_num", "\n", "\n", "self", ".", "destroy_happen", "=", "False", "\n", "self", ".", "num_cluster", "=", "0", "\n", "self", ".", "speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_num", ",", "3", ")", ")", "\n", "self", ".", "prepare_speed", "=", "deepcopy", "(", "self", ".", "speed", ")", "\n", "self", ".", "destroy_list", "=", "[", "]", "\n", "\n", "self", ".", "critical_set", "=", "[", "]", "\n", "self", ".", "non_critical_set", "=", "[", "]", "\n", "\n", "self", ".", "backup", "=", "[", "]", "\n", "\n", "self", ".", "determine_the_backup", "(", ")", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "backup_time", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.determine_the_backup": [[31, 46], ["CSDS.CSDS.determine_critical_nodes", "CSDS.CSDS.backup.append", "CSDS.CSDS.backup_time.append", "copy.deepcopy", "numpy.linalg.norm", "copy.deepcopy", "numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.determine_critical_nodes"], ["", "def", "determine_the_backup", "(", "self", ")", ":", "\n", "        ", "self", ".", "determine_critical_nodes", "(", ")", "\n", "self", ".", "backup", "=", "[", "]", "\n", "self", ".", "backup_time", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "critical_set", ":", "\n", "            ", "minimal_distance", "=", "10000000", "\n", "index", "=", "0", "\n", "for", "k", "in", "self", ".", "non_critical_set", ":", "\n", "                ", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "global_positions", "[", "i", "]", "-", "self", ".", "global_positions", "[", "k", "]", ")", "<", "minimal_distance", ":", "\n", "                    ", "index", "=", "k", "\n", "", "", "self", ".", "backup", ".", "append", "(", "deepcopy", "(", "index", ")", ")", "\n", "self", ".", "prepare_speed", "[", "index", "]", "=", "(", "self", ".", "global_positions", "[", "i", "]", "-", "self", ".", "global_positions", "[", "index", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "global_positions", "[", "i", "]", "-", "self", ".", "global_positions", "[", "index", "]", ")", "\n", "self", ".", "backup_time", ".", "append", "(", "deepcopy", "(", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "global_positions", "[", "i", "]", "-", "self", ".", "global_positions", "[", "index", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.csds": [[47, 81], ["copy.deepcopy", "numpy.zeros", "numpy.array", "copy.deepcopy", "len", "Utils.check_if_a_connected_graph", "copy.deepcopy", "CSDS.CSDS.remain_positions.append", "copy.deepcopy", "numpy.zeros", "copy.deepcopy", "CSDS.CSDS.determine_the_backup", "copy.deepcopy", "CSDS.CSDS.determine_the_backup", "copy.deepcopy", "copy.deepcopy", "numpy.argwhere", "copy.deepcopy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.determine_the_backup", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.determine_the_backup"], ["", "", "def", "csds", "(", "self", ",", "global_positions", ",", "remain_list", ")", ":", "\n", "        ", "self", ".", "remain_positions", "=", "[", "]", "\n", "self", ".", "global_positions", "=", "deepcopy", "(", "global_positions", ")", "\n", "speed", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_num", ",", "3", ")", ")", "\n", "for", "i", "in", "remain_list", ":", "\n", "            ", "self", ".", "remain_positions", ".", "append", "(", "deepcopy", "(", "global_positions", "[", "i", "]", ")", ")", "\n", "", "self", ".", "remain_positions", "=", "np", ".", "array", "(", "self", ".", "remain_positions", ")", "\n", "self", ".", "remain_list", "=", "deepcopy", "(", "remain_list", ")", "\n", "self", ".", "remain_num", "=", "len", "(", "self", ".", "remain_list", ")", "\n", "flag", ",", "num_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "self", ".", "remain_positions", ",", "self", ".", "remain_num", ")", "\n", "self", ".", "num_cluster", "=", "deepcopy", "(", "num_clusters", ")", "\n", "if", "flag", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "self", ".", "total_num", ",", "3", ")", ")", ",", "0", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "destroy_happen", ":", "\n", "                ", "self", ".", "destroy_happen", "=", "False", "\n", "self", ".", "counter", "=", "0", "\n", "for", "destroy_index", "in", "self", ".", "destroy_list", ":", "\n", "                    ", "if", "destroy_index", "in", "self", ".", "non_critical_set", ":", "\n", "                        ", "pass", "\n", "", "elif", "destroy_index", "in", "self", ".", "critical_set", ":", "\n", "                        ", "true_backup_index", "=", "np", ".", "argwhere", "(", "np", ".", "array", "(", "self", ".", "critical_set", ")", "==", "destroy_index", ")", "[", "0", ",", "0", "]", "\n", "speed", "[", "true_backup_index", "]", "=", "deepcopy", "(", "self", ".", "prepare_speed", "[", "true_backup_index", "]", ")", "\n", "if", "self", ".", "backup_time", "[", "true_backup_index", "]", ">", "self", ".", "counter", ":", "\n", "                            ", "self", ".", "counter", "=", "deepcopy", "(", "self", ".", "backup_time", "[", "true_backup_index", "]", ")", "\n", "", "", "", "self", ".", "speed", "=", "deepcopy", "(", "speed", ")", "\n", "self", ".", "determine_the_backup", "(", ")", "\n", "return", "deepcopy", "(", "speed", ")", ",", "self", ".", "counter", "\n", "", "else", ":", "\n", "                ", "self", ".", "counter", "-=", "1", "\n", "if", "self", ".", "counter", "<", "0", ":", "\n", "                    ", "self", ".", "destroy_happen", "=", "True", "\n", "self", ".", "determine_the_backup", "(", ")", "\n", "", "return", "deepcopy", "(", "self", ".", "speed", ")", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.determine_critical_nodes": [[82, 102], ["numpy.array", "Utils.check_if_a_connected_graph", "numpy.array.append", "len", "numpy.array", "Utils.check_if_a_connected_graph", "copy.deepcopy", "CSDS.CSDS.non_critical_set.append", "CSDS.CSDS.critical_set.append", "numpy.array.append", "len", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_if_a_connected_graph"], ["", "", "", "def", "determine_critical_nodes", "(", "self", ")", ":", "\n", "        ", "self", ".", "critical_set", "=", "[", "]", "\n", "self", ".", "non_critical_set", "=", "[", "]", "\n", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "            ", "remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "global_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "flag", ",", "overall_num_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", ")", "\n", "\n", "for", "i", "in", "self", ".", "remain_list", ":", "\n", "            ", "temp_remain_positions", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "remain_list", ":", "\n", "                ", "if", "k", "!=", "i", ":", "\n", "                    ", "temp_remain_positions", ".", "append", "(", "deepcopy", "(", "self", ".", "global_positions", "[", "k", "]", ")", ")", "\n", "", "", "temp_remain_positions", "=", "np", ".", "array", "(", "temp_remain_positions", ")", "\n", "flag", ",", "num_clusters", "=", "Utils", ".", "check_if_a_connected_graph", "(", "temp_remain_positions", ",", "len", "(", "self", ".", "remain_list", ")", "-", "1", ")", "\n", "if", "num_clusters", "==", "overall_num_clusters", ":", "\n", "                ", "self", ".", "non_critical_set", ".", "append", "(", "deepcopy", "(", "i", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "critical_set", ".", "append", "(", "deepcopy", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.notice_destroy": [[103, 108], ["copy.deepcopy", "CSDS.CSDS.determine_the_backup"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Traditional_Algorithm.CSDS.CSDS.determine_the_backup"], ["", "", "", "def", "notice_destroy", "(", "self", ",", "destroy_list", ")", ":", "\n", "        ", "self", ".", "destroy_happen", "=", "True", "\n", "self", ".", "destroy_list", "=", "deepcopy", "(", "destroy_list", ")", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "determine_the_backup", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.__init__": [[19, 31], ["CR_MGC.GCN_fixed_structure", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "CR_MGC.CR_MGC.gcn_network.cuda", "CR_MGC.CR_MGC.gcn_network.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "use_meta", "=", "False", ")", ":", "\n", "        ", "self", ".", "hidden_dimension", "=", "best_hidden_dimension", "\n", "self", ".", "dropout_value", "=", "best_dropout", "\n", "self", ".", "gcn_network", "=", "GCN_fixed_structure", "(", "nfeat", "=", "3", ",", "nhid", "=", "self", ".", "hidden_dimension", ",", "nclass", "=", "3", ",", "\n", "dropout", "=", "self", ".", "dropout_value", ",", "if_dropout", "=", "True", ",", "bias", "=", "True", ")", "\n", "self", ".", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "self", ".", "gcn_network", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "Adam", "(", "self", ".", "gcn_network", ".", "parameters", "(", ")", ",", "lr", "=", "0.0001", ")", "\n", "self", ".", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "use_cuda", "else", "torch", ".", "FloatTensor", "\n", "self", ".", "if_meta", "=", "use_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.load_meta_params": [[32, 46], ["CR_MGC.GCN_fixed_structure", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "np.load", "meta_param.item.item.item", "print", "CR_MGC.CR_MGC.gcn_network.state_dict().keys", "CR_MGC.CR_MGC.gcn_network.cuda", "CR_MGC.CR_MGC.gcn_network.parameters", "[].copy_", "CR_MGC.CR_MGC.gcn_network.state_dict", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "CR_MGC.CR_MGC.gcn_network.state_dict", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "load_meta_params", "(", "self", ",", "remain_num", ")", ":", "\n", "        ", "self", ".", "gcn_network", "=", "GCN_fixed_structure", "(", "nfeat", "=", "3", ",", "nhid", "=", "self", ".", "hidden_dimension", ",", "nclass", "=", "3", ",", "\n", "dropout", "=", "self", ".", "dropout_value", ",", "if_dropout", "=", "True", ",", "bias", "=", "True", ")", "\n", "if", "self", ".", "if_meta", ":", "\n", "            ", "meta_param", "=", "np", ".", "load", "(", "'Meta_Learning_Results/meta_parameters/meta_%d.npy'", "%", "remain_num", ",", "allow_pickle", "=", "True", ")", "\n", "meta_param", "=", "meta_param", ".", "item", "(", ")", "\n", "print", "(", "\"loading meta param meta_%d\"", "%", "remain_num", ")", "\n", "for", "key", "in", "self", ".", "gcn_network", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "gcn_network", ".", "state_dict", "(", ")", "[", "key", "]", ".", "copy_", "(", "torch", ".", "Tensor", "(", "meta_param", "[", "key", "]", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", ")", "\n", "# self.if_meta = False", "\n", "", "", "if", "self", ".", "use_cuda", ":", "\n", "            ", "self", ".", "gcn_network", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "Adam", "(", "self", ".", "gcn_network", ".", "parameters", "(", ")", ",", "lr", "=", "0.0001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.cr_gcm": [[47, 134], ["CR_MGC.CR_MGC.load_meta_params", "np.array", "len", "Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "Utils.calculate_d_max", "Utils.make_A_matrix", "Utils.make_D_matrix", "np.linalg.norm", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "print", "print", "print", "range", "np.zeros", "torch.FloatTensor().type.cpu().data.numpy", "torch.FloatTensor().type.cpu().data.numpy", "torch.FloatTensor().type.cpu().data.numpy", "print", "range", "len", "torch.FloatTensor().type.append", "torch.FloatTensor().type.append", "torch.FloatTensor().type.append", "copy.deepcopy", "copy.deepcopy", "np.eye", "CR_MGC.CR_MGC.gcn_network", "CR_MGC.CR_MGC.cpu().data.numpy", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "range", "CR_MGC.CR_MGC.optimizer.zero_grad", "loss.backward", "CR_MGC.CR_MGC.optimizer.step", "loss.cpu().data.numpy", "print", "print", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "len", "len", "len", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "loss.cpu().data.numpy", "copy.deepcopy", "copy.deepcopy", "np.linalg.norm", "np.linalg.norm", "copy.deepcopy", "CR_MGC.CR_MGC.gcn_network.parameters", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "loss.cpu().data.numpy", "CR_MGC.CR_MGC.cpu().data.numpy", "torch.FloatTensor().type.cpu", "torch.FloatTensor().type.cpu", "torch.FloatTensor().type.cpu", "np.linalg.norm", "np.linalg.norm", "CR_MGC.CR_MGC.cpu", "loss.cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "loss.cpu", "np.array", "loss.cpu", "CR_MGC.CR_MGC.cpu"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.load_meta_params", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.calculate_d_max", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "def", "cr_gcm", "(", "self", ",", "global_positions", ",", "remain_list", ")", ":", "\n", "        ", "self", ".", "load_meta_params", "(", "len", "(", "remain_list", ")", ")", "\n", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "remain_list", ":", "\n", "            ", "remain_positions", ".", "append", "(", "deepcopy", "(", "global_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "num_remain", "=", "len", "(", "remain_list", ")", "\n", "\n", "# proposed", "\n", "d_min", "=", "smallest_d_algorithm", "(", "deepcopy", "(", "remain_positions", ")", ",", "num_remain", ",", "config_communication_range", ")", "\n", "d_max", "=", "Utils", ".", "calculate_d_max", "(", "deepcopy", "(", "remain_positions", ")", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "num_remain", ",", "d_min", "+", "(", "d_max", "-", "d_min", ")", "*", "0.25", ")", "\n", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num_remain", ")", "\n", "L", "=", "D", "-", "A", "\n", "A_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", ",", "ord", "=", "np", ".", "inf", ")", "\n", "k0", "=", "1", "/", "A_norm", "\n", "K", "=", "0.99", "*", "k0", "\n", "A_hat", "=", "np", ".", "eye", "(", "num_remain", ")", "-", "K", "*", "L", "\n", "\n", "remain_positions", "=", "torch", ".", "FloatTensor", "(", "remain_positions", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "A_hat", "=", "torch", ".", "FloatTensor", "(", "A_hat", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "best_final_positions", "=", "0", "\n", "best_loss", "=", "1000000000000", "\n", "loss_", "=", "0", "\n", "counter_loss", "=", "0", "\n", "print", "(", "\"---------------------------------------\"", ")", "\n", "print", "(", "\"start training GCN ... \"", ")", "\n", "print", "(", "\"=======================================\"", ")", "\n", "for", "train_step", "in", "range", "(", "1000", ")", ":", "\n", "# print(train_step)", "\n", "            ", "if", "loss_", ">", "1000", "and", "train_step", ">", "50", ":", "\n", "                ", "self", ".", "optimizer", "=", "Adam", "(", "self", ".", "gcn_network", ".", "parameters", "(", ")", ",", "lr", "=", "0.00001", ")", "\n", "", "if", "counter_loss", ">", "4", "and", "train_step", ">", "50", ":", "\n", "                ", "break", "\n", "", "final_positions", "=", "self", ".", "gcn_network", "(", "remain_positions", ",", "A_hat", ")", "\n", "\n", "final_positions", "=", "0.5", "*", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "config_width", ",", "config_length", ",", "config_height", "]", ")", ")", ".", "type", "(", "\n", "self", ".", "FloatTensor", ")", "*", "final_positions", "\n", "\n", "# check if connected", "\n", "final_positions_", "=", "final_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "final_positions_", ",", "len", "(", "final_positions_", ")", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "len", "(", "A", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "flag", ",", "num", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "len", "(", "L", ")", ")", "\n", "# loss", "\n", "temp_max", "=", "0", "\n", "max_index", "=", "0", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "final_positions", ")", ")", ":", "\n", "                ", "if", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", ">", "temp_max", ":", "\n", "                    ", "temp_max", "=", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", "\n", "max_index", "=", "j", "\n", "", "", "loss", "=", "1000", "*", "(", "num", "-", "1", ")", "+", "torch", ".", "norm", "(", "final_positions", "[", "max_index", "]", "-", "remain_positions", "[", "max_index", "]", ")", "\n", "# loss_F = 1000 * (num - 1) + torch.norm(final_positions-F,p='fro')", "\n", "\n", "if", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "<", "best_loss", ":", "\n", "                ", "best_loss", "=", "deepcopy", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "best_final_positions", "=", "deepcopy", "(", "final_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "loss_", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "if", "loss_", ">", "1000", "and", "train_step", ">", "50", ":", "\n", "                ", "counter_loss", "+=", "1", "\n", "", "print", "(", "\"    episode %d, loss %f\"", "%", "(", "train_step", ",", "loss_", ")", ")", "\n", "print", "(", "\"---------------------------------------\"", ")", "\n", "", "speed", "=", "np", ".", "zeros", "(", "(", "config_num_of_agents", ",", "3", ")", ")", "\n", "remain_positions_numpy", "=", "remain_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "temp_max_distance", "=", "0", "\n", "print", "(", "\"=======================================\"", ")", "\n", "\n", "# store_best_final_positions = pd.DataFrame(best_final_positions)", "\n", "# Utils.store_dataframe_to_excel(store_best_final_positions,\"Experiment_Fig/Experiment_3_compare_GI/positions_2_2.xlsx\")", "\n", "\n", "for", "i", "in", "range", "(", "num_remain", ")", ":", "\n", "            ", "if", "np", ".", "linalg", ".", "norm", "(", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", ">", "0", ":", "\n", "                ", "speed", "[", "remain_list", "[", "i", "]", "]", "=", "(", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", "\n", "", "if", "np", ".", "linalg", ".", "norm", "(", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", ">", "temp_max_distance", ":", "\n", "                ", "temp_max_distance", "=", "deepcopy", "(", "np", ".", "linalg", ".", "norm", "(", "best_final_positions", "[", "i", "]", "-", "remain_positions_numpy", "[", "i", "]", ")", ")", "\n", "\n", "", "", "max_time", "=", "temp_max_distance", "/", "config_constant_speed", "\n", "# print(max_time)", "\n", "return", "deepcopy", "(", "speed", ")", ",", "deepcopy", "(", "max_time", ")", ",", "deepcopy", "(", "best_final_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.train_support_set": [[135, 188], ["range", "CR_MGC.CR_MGC.optimizer.zero_grad", "loss.backward", "CR_MGC.CR_MGC.optimizer.step", "copy.deepcopy", "len", "Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "Utils.calculate_d_max", "Utils.make_A_matrix", "Utils.make_D_matrix", "np.linalg.norm", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "CR_MGC.CR_MGC.gcn_network", "CR_MGC.CR_MGC.cpu().data.numpy", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "range", "loss.cpu().data.numpy", "copy.deepcopy", "copy.deepcopy", "np.eye", "len", "len", "len", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "CR_MGC.CR_MGC.cpu", "loss.cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "np.array"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.calculate_d_max", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "def", "train_support_set", "(", "self", ",", "remain_positions_", ",", "num_remain", ")", ":", "\n", "        ", "loss", "=", "0.0", "\n", "for", "piece", "in", "range", "(", "len", "(", "remain_positions_", ")", ")", ":", "\n", "            ", "remain_positions", "=", "remain_positions_", "[", "piece", "]", "\n", "# proposed", "\n", "d_min", "=", "smallest_d_algorithm", "(", "deepcopy", "(", "remain_positions", ")", ",", "num_remain", ",", "config_communication_range", ")", "\n", "d_max", "=", "Utils", ".", "calculate_d_max", "(", "deepcopy", "(", "remain_positions", ")", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "num_remain", ",", "d_min", "+", "(", "d_max", "-", "d_min", ")", "*", "0.25", ")", "\n", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num_remain", ")", "\n", "L", "=", "D", "-", "A", "\n", "A_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", ",", "ord", "=", "np", ".", "inf", ")", "\n", "k0", "=", "1", "/", "A_norm", "\n", "K", "=", "0.99", "*", "k0", "\n", "A_hat", "=", "np", ".", "eye", "(", "num_remain", ")", "-", "K", "*", "L", "\n", "\n", "# 2017", "\n", "# A = Utils.make_A_matrix(remain_positions, len(remain_positions), config_communication_range)", "\n", "# A_tilde = A + np.identity(len(A))", "\n", "# D_tilde = Utils.make_D_matrix(A_tilde, len(remain_positions))", "\n", "#", "\n", "# D_tilde_sqrt = np.diag(D_tilde.diagonal() ** (-0.5))", "\n", "# A_hat = D_tilde_sqrt.dot(A_tilde).dot(D_tilde_sqrt)", "\n", "\n", "remain_positions", "=", "torch", ".", "FloatTensor", "(", "remain_positions", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "A_hat", "=", "torch", ".", "FloatTensor", "(", "A_hat", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "\n", "final_positions", "=", "self", ".", "gcn_network", "(", "remain_positions", ",", "A_hat", ")", "\n", "\n", "final_positions", "=", "0.5", "*", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "1000", ",", "1000", ",", "100", "]", ")", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "*", "final_positions", "\n", "\n", "# check if connected", "\n", "final_positions_", "=", "final_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "final_positions_", ",", "len", "(", "final_positions_", ")", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "len", "(", "A", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "flag", ",", "num", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "len", "(", "L", ")", ")", "\n", "# loss", "\n", "temp_max", "=", "0", "\n", "max_index", "=", "0", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "final_positions", ")", ")", ":", "\n", "                ", "if", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", ">", "temp_max", ":", "\n", "                    ", "temp_max", "=", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", "\n", "max_index", "=", "j", "\n", "", "", "loss", "+=", "1000", "*", "(", "num", "-", "1", ")", "+", "torch", ".", "norm", "(", "final_positions", "[", "max_index", "]", "-", "remain_positions", "[", "max_index", "]", ")", "\n", "# loss_F = 1000 * (num - 1) + torch.norm(final_positions-F,p='fro')", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "deepcopy", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.train_support_set_single": [[189, 241], ["Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "Utils.calculate_d_max", "Utils.make_A_matrix", "Utils.make_D_matrix", "np.linalg.norm", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "CR_MGC.CR_MGC.gcn_network", "CR_MGC.CR_MGC.cpu().data.numpy", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "range", "CR_MGC.CR_MGC.optimizer.zero_grad", "loss.backward", "CR_MGC.CR_MGC.optimizer.step", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "np.eye", "len", "len", "len", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "loss.cpu().data.numpy", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "CR_MGC.CR_MGC.cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "loss.cpu", "np.array"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.calculate_d_max", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "def", "train_support_set_single", "(", "self", ",", "remain_positions_", ",", "num_remain", ")", ":", "\n", "\n", "        ", "remain_positions", "=", "remain_positions_", "\n", "# proposed", "\n", "d_min", "=", "smallest_d_algorithm", "(", "deepcopy", "(", "remain_positions", ")", ",", "num_remain", ",", "config_communication_range", ")", "\n", "d_max", "=", "Utils", ".", "calculate_d_max", "(", "deepcopy", "(", "remain_positions", ")", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "num_remain", ",", "d_min", "+", "(", "d_max", "-", "d_min", ")", "*", "0.25", ")", "\n", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num_remain", ")", "\n", "L", "=", "D", "-", "A", "\n", "A_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", ",", "ord", "=", "np", ".", "inf", ")", "\n", "k0", "=", "1", "/", "A_norm", "\n", "K", "=", "0.99", "*", "k0", "\n", "A_hat", "=", "np", ".", "eye", "(", "num_remain", ")", "-", "K", "*", "L", "\n", "\n", "# 2017", "\n", "# A = Utils.make_A_matrix(remain_positions, len(remain_positions), config_communication_range)", "\n", "# A_tilde = A + np.identity(len(A))", "\n", "# D_tilde = Utils.make_D_matrix(A_tilde, len(remain_positions))", "\n", "#", "\n", "# D_tilde_sqrt = np.diag(D_tilde.diagonal() ** (-0.5))", "\n", "# A_hat = D_tilde_sqrt.dot(A_tilde).dot(D_tilde_sqrt)", "\n", "\n", "remain_positions", "=", "torch", ".", "FloatTensor", "(", "remain_positions", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "A_hat", "=", "torch", ".", "FloatTensor", "(", "A_hat", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "\n", "final_positions", "=", "self", ".", "gcn_network", "(", "remain_positions", ",", "A_hat", ")", "\n", "\n", "final_positions", "=", "0.5", "*", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "1000", ",", "1000", ",", "100", "]", ")", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "*", "final_positions", "\n", "\n", "# check if connected", "\n", "final_positions_", "=", "final_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "final_positions_", ",", "len", "(", "final_positions_", ")", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "len", "(", "A", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "flag", ",", "num", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "len", "(", "L", ")", ")", "\n", "# loss", "\n", "temp_max", "=", "0", "\n", "max_index", "=", "0", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "final_positions", ")", ")", ":", "\n", "            ", "if", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", ">", "temp_max", ":", "\n", "                ", "temp_max", "=", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", "\n", "max_index", "=", "j", "\n", "", "", "loss", "=", "1000", "*", "(", "num", "-", "1", ")", "+", "torch", ".", "norm", "(", "final_positions", "[", "max_index", "]", "-", "remain_positions", "[", "max_index", "]", ")", "\n", "# loss_F = 1000 * (num - 1) + torch.norm(final_positions-F,p='fro')", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "deepcopy", "(", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.train_query_set": [[242, 310], ["CR_MGC.CR_MGC.gcn_network.state_dict().keys", "range", "CR_MGC.CR_MGC.optimizer.zero_grad", "loss.backward", "CR_MGC.CR_MGC.optimizer.step", "dict", "CR_MGC.CR_MGC.gcn_network.state_dict().keys", "copy.deepcopy", "len", "Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "Utils.calculate_d_max", "Utils.make_A_matrix", "Utils.make_D_matrix", "np.linalg.norm", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "CR_MGC.CR_MGC.gcn_network", "CR_MGC.CR_MGC.cpu().data.numpy", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "range", "CR_MGC.CR_MGC.gcn_network.named_parameters", "loss.cpu().data.numpy", "CR_MGC.CR_MGC.gcn_network.state_dict", "copy.deepcopy", "copy.deepcopy", "np.eye", "len", "len", "len", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "CR_MGC.CR_MGC.gcn_network.state_dict", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "CR_MGC.CR_MGC.gcn_network.state_dict", "CR_MGC.CR_MGC.cpu", "loss.cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "np.array"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.calculate_d_max", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "def", "train_query_set", "(", "self", ",", "remain_positions_", ",", "num_remain", ")", ":", "\n", "        ", "original_param", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "gcn_network", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "original_param", "[", "key", "]", "=", "deepcopy", "(", "self", ".", "gcn_network", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ")", "\n", "", "loss", "=", "0", "\n", "for", "piece", "in", "range", "(", "len", "(", "remain_positions_", ")", ")", ":", "\n", "            ", "remain_positions", "=", "remain_positions_", "[", "piece", "]", "\n", "# proposed", "\n", "d_min", "=", "smallest_d_algorithm", "(", "deepcopy", "(", "remain_positions", ")", ",", "num_remain", ",", "config_communication_range", ")", "\n", "d_max", "=", "Utils", ".", "calculate_d_max", "(", "deepcopy", "(", "remain_positions", ")", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "num_remain", ",", "d_min", "+", "(", "d_max", "-", "d_min", ")", "*", "0.25", ")", "\n", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num_remain", ")", "\n", "L", "=", "D", "-", "A", "\n", "A_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", ",", "ord", "=", "np", ".", "inf", ")", "\n", "k0", "=", "1", "/", "A_norm", "\n", "K", "=", "0.99", "*", "k0", "\n", "A_hat", "=", "np", ".", "eye", "(", "num_remain", ")", "-", "K", "*", "L", "\n", "\n", "# 2017", "\n", "# A = Utils.make_A_matrix(remain_positions, len(remain_positions), config_communication_range)", "\n", "# A_tilde = A + np.identity(len(A))", "\n", "# D_tilde = Utils.make_D_matrix(A_tilde, len(remain_positions))", "\n", "#", "\n", "# D_tilde_sqrt = np.diag(D_tilde.diagonal() ** (-0.5))", "\n", "# A_hat = D_tilde_sqrt.dot(A_tilde).dot(D_tilde_sqrt)", "\n", "\n", "remain_positions", "=", "torch", ".", "FloatTensor", "(", "remain_positions", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "A_hat", "=", "torch", ".", "FloatTensor", "(", "A_hat", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "\n", "final_positions", "=", "self", ".", "gcn_network", "(", "remain_positions", ",", "A_hat", ")", "\n", "\n", "final_positions", "=", "0.5", "*", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "1000", ",", "1000", ",", "100", "]", ")", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "*", "final_positions", "\n", "\n", "# check if connected", "\n", "final_positions_", "=", "final_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "final_positions_", ",", "len", "(", "final_positions_", ")", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "len", "(", "A", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "flag", ",", "num", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "len", "(", "L", ")", ")", "\n", "# loss", "\n", "temp_max", "=", "0", "\n", "max_index", "=", "0", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "final_positions", ")", ")", ":", "\n", "                ", "if", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", ">", "temp_max", ":", "\n", "                    ", "temp_max", "=", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", "\n", "max_index", "=", "j", "\n", "", "", "loss", "+=", "1000", "*", "(", "num", "-", "1", ")", "+", "torch", ".", "norm", "(", "final_positions", "[", "max_index", "]", "-", "remain_positions", "[", "max_index", "]", ")", "\n", "# loss_F = 1000 * (num - 1) + torch.norm(final_positions-F,p='fro')", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# print(loss.cpu().data.numpy())", "\n", "gradient", "=", "{", "}", "\n", "# for name, parms in self.gcn_network.named_parameters():", "\n", "#     # print('-->name:', name, '-->grad_requirs:', parms.requires_grad, \\", "\n", "#     #       ' -->grad_value:', parms.grad)", "\n", "#     gradient[name] = parms.grad.data * 0.001", "\n", "\n", "update_param", "=", "dict", "(", "self", ".", "gcn_network", ".", "named_parameters", "(", ")", ")", "\n", "\n", "for", "key", "in", "self", ".", "gcn_network", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "gradient", "[", "key", "]", "=", "update_param", "[", "key", "]", "-", "original_param", "[", "key", "]", "\n", "\n", "", "return", "gradient", ",", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.train_query_set_single": [[311, 378], ["CR_MGC.CR_MGC.gcn_network.state_dict().keys", "Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "Utils.calculate_d_max", "Utils.make_A_matrix", "Utils.make_D_matrix", "np.linalg.norm", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "torch.FloatTensor().type", "CR_MGC.CR_MGC.gcn_network", "CR_MGC.CR_MGC.cpu().data.numpy", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "range", "CR_MGC.CR_MGC.optimizer.zero_grad", "loss.backward", "CR_MGC.CR_MGC.optimizer.step", "dict", "CR_MGC.CR_MGC.gcn_network.state_dict().keys", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "np.eye", "len", "len", "len", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "CR_MGC.CR_MGC.gcn_network.named_parameters", "loss.cpu().data.numpy", "CR_MGC.CR_MGC.gcn_network.state_dict", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "CR_MGC.CR_MGC.gcn_network.state_dict", "CR_MGC.CR_MGC.cpu", "CR_MGC.CR_MGC.gcn_network.state_dict", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "loss.cpu", "np.array"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.calculate_d_max", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "def", "train_query_set_single", "(", "self", ",", "remain_positions_", ",", "num_remain", ")", ":", "\n", "        ", "original_param", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "gcn_network", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "original_param", "[", "key", "]", "=", "deepcopy", "(", "self", ".", "gcn_network", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ")", "\n", "\n", "", "remain_positions", "=", "remain_positions_", "\n", "# proposed", "\n", "d_min", "=", "smallest_d_algorithm", "(", "deepcopy", "(", "remain_positions", ")", ",", "num_remain", ",", "config_communication_range", ")", "\n", "d_max", "=", "Utils", ".", "calculate_d_max", "(", "deepcopy", "(", "remain_positions", ")", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "remain_positions", ",", "num_remain", ",", "d_min", "+", "(", "d_max", "-", "d_min", ")", "*", "0.25", ")", "\n", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num_remain", ")", "\n", "L", "=", "D", "-", "A", "\n", "A_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", ",", "ord", "=", "np", ".", "inf", ")", "\n", "k0", "=", "1", "/", "A_norm", "\n", "K", "=", "0.99", "*", "k0", "\n", "A_hat", "=", "np", ".", "eye", "(", "num_remain", ")", "-", "K", "*", "L", "\n", "\n", "# 2017", "\n", "# A = Utils.make_A_matrix(remain_positions, len(remain_positions), config_communication_range)", "\n", "# A_tilde = A + np.identity(len(A))", "\n", "# D_tilde = Utils.make_D_matrix(A_tilde, len(remain_positions))", "\n", "#", "\n", "# D_tilde_sqrt = np.diag(D_tilde.diagonal() ** (-0.5))", "\n", "# A_hat = D_tilde_sqrt.dot(A_tilde).dot(D_tilde_sqrt)", "\n", "\n", "remain_positions", "=", "torch", ".", "FloatTensor", "(", "remain_positions", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "A_hat", "=", "torch", ".", "FloatTensor", "(", "A_hat", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "\n", "\n", "final_positions", "=", "self", ".", "gcn_network", "(", "remain_positions", ",", "A_hat", ")", "\n", "\n", "final_positions", "=", "0.5", "*", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "1000", ",", "1000", ",", "100", "]", ")", ")", ".", "type", "(", "self", ".", "FloatTensor", ")", "*", "final_positions", "\n", "\n", "# check if connected", "\n", "final_positions_", "=", "final_positions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "final_positions_", ",", "len", "(", "final_positions_", ")", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "len", "(", "A", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "flag", ",", "num", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "len", "(", "L", ")", ")", "\n", "# loss", "\n", "temp_max", "=", "0", "\n", "max_index", "=", "0", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "final_positions", ")", ")", ":", "\n", "            ", "if", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", ">", "temp_max", ":", "\n", "                ", "temp_max", "=", "torch", ".", "norm", "(", "final_positions", "[", "j", "]", "-", "remain_positions", "[", "j", "]", ")", "\n", "max_index", "=", "j", "\n", "", "", "loss", "=", "1000", "*", "(", "num", "-", "1", ")", "+", "torch", ".", "norm", "(", "final_positions", "[", "max_index", "]", "-", "remain_positions", "[", "max_index", "]", ")", "\n", "# loss_F = 1000 * (num - 1) + torch.norm(final_positions-F,p='fro')", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# print(loss.cpu().data.numpy())", "\n", "gradient", "=", "{", "}", "\n", "# for name, parms in self.gcn_network.named_parameters():", "\n", "#     # print('-->name:', name, '-->grad_requirs:', parms.requires_grad, \\", "\n", "#     #       ' -->grad_value:', parms.grad)", "\n", "#     gradient[name] = parms.grad.data * 0.001", "\n", "\n", "update_param", "=", "dict", "(", "self", ".", "gcn_network", ".", "named_parameters", "(", ")", ")", "\n", "\n", "for", "key", "in", "self", ".", "gcn_network", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "gradient", "[", "key", "]", "=", "update_param", "[", "key", "]", "-", "original_param", "[", "key", "]", "\n", "\n", "", "return", "gradient", ",", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.save_GCN": [[379, 381], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_GCN", "(", "self", ",", "counter", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "gcn_network", ",", "\"Trainable_GCN/meta_parameters/GCN__small_small_scale_%d.pkl\"", "%", "counter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.CR_MGC.save_meta_param": [[382, 384], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_meta_param", "(", "self", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "gcn_network", ",", "\"Trainable_GCN/meta_param.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.GraphConvolution.__init__": [[386, 396], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "CR_MGC.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "CR_MGC.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.GCO.GCO.__init__", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.GraphConvolution.reset_parameters": [[397, 402], ["CR_MGC.GraphConvolution.weight.data.uniform_", "math.sqrt", "CR_MGC.GraphConvolution.bias.data.uniform_", "CR_MGC.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.GraphConvolution.forward": [[403, 410], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "mm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.GraphConvolution.__repr__": [[411, 415], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.GCN_fixed_structure.__init__": [[418, 431], ["torch.Module.__init__", "CR_MGC.GraphConvolution", "CR_MGC.GraphConvolution", "CR_MGC.GraphConvolution", "CR_MGC.GraphConvolution", "CR_MGC.GraphConvolution", "CR_MGC.GraphConvolution", "CR_MGC.GraphConvolution", "CR_MGC.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.GCO.GCO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", "=", "3", ",", "nhid", "=", "5", ",", "nclass", "=", "3", ",", "dropout", "=", "0.5", ",", "if_dropout", "=", "True", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GCN_fixed_structure", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "nfeat", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc3", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc4", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc5", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc6", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc7", "=", "GraphConvolution", "(", "nhid", ",", "nhid", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc8", "=", "GraphConvolution", "(", "nhid", ",", "nclass", ",", "bias", "=", "bias", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "training", "=", "if_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.CR_MGC.GCN_fixed_structure.forward": [[432, 445], ["torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "CR_MGC.GCN_fixed_structure.gc8", "CR_MGC.GCN_fixed_structure.gc1", "CR_MGC.GCN_fixed_structure.gc2", "CR_MGC.GCN_fixed_structure.gc3", "CR_MGC.GCN_fixed_structure.gc4", "CR_MGC.GCN_fixed_structure.gc5", "CR_MGC.GCN_fixed_structure.gc6", "CR_MGC.GCN_fixed_structure.gc7", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc2", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc3", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc4", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc5", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc6", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gc7", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "self", ".", "gc8", "(", "x", ",", "adj", ")", "\n", "return", "torch", ".", "tanh", "(", "x", ")", "+", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm": [[7, 39], ["Utils.make_A_matrix", "copy.deepcopy", "range", "range", "range", "range", "copy.deepcopy", "range", "len", "sorted_list.append", "len", "len", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "unsorted_list.append", "dis.append", "sorted", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "enumerate", "numpy.linalg.norm", "operator.itemgetter", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["def", "smallest_d_algorithm", "(", "positions", ",", "num", ",", "d0", ")", ":", "\n", "    ", "A", "=", "Utils", ".", "make_A_matrix", "(", "positions", ",", "num", ",", "d0", ")", "\n", "d_min", "=", "deepcopy", "(", "d0", ")", "\n", "unsorted_list", "=", "[", "]", "\n", "dis", "=", "[", "]", "\n", "sorted_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "num", ")", ":", "\n", "            ", "unsorted_list", ".", "append", "(", "deepcopy", "(", "{", "\"start\"", ":", "i", ",", "\n", "\"end\"", ":", "j", ",", "\n", "\"distance\"", ":", "np", ".", "linalg", ".", "norm", "(", "positions", "[", "i", "]", "-", "positions", "[", "j", "]", ")", "}", ")", ")", "\n", "dis", ".", "append", "(", "deepcopy", "(", "np", ".", "linalg", ".", "norm", "(", "positions", "[", "i", "]", "-", "positions", "[", "j", "]", ")", ")", ")", "\n", "", "", "sorted_index", "=", "[", "index", "for", "index", ",", "value", "in", "sorted", "(", "enumerate", "(", "dis", ")", ",", "key", "=", "itemgetter", "(", "1", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_index", ")", ")", ":", "\n", "        ", "sorted_list", ".", "append", "(", "unsorted_list", "[", "sorted_index", "[", "i", "]", "]", ")", "\n", "\n", "# find the threshold", "\n", "", "threshold_for_d0", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_index", ")", ")", ":", "\n", "        ", "if", "sorted_list", "[", "i", "]", "[", "\"distance\"", "]", ">", "d_min", ":", "\n", "            ", "threshold_for_d0", "=", "deepcopy", "(", "i", ")", "\n", "break", "\n", "", "", "for", "i", "in", "range", "(", "threshold_for_d0", ",", "len", "(", "sorted_index", ")", ")", ":", "\n", "        ", "A", "[", "sorted_list", "[", "i", "]", "[", "\"start\"", "]", ",", "sorted_list", "[", "i", "]", "[", "\"end\"", "]", "]", "=", "1", "\n", "A", "[", "sorted_list", "[", "i", "]", "[", "\"end\"", "]", ",", "sorted_list", "[", "i", "]", "[", "\"start\"", "]", "]", "=", "1", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num", ")", "\n", "L", "=", "D", "-", "A", "\n", "connected_flag", ",", "num_cluster", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "num", ")", "\n", "if", "connected_flag", ":", "\n", "            ", "d_min", "=", "deepcopy", "(", "sorted_list", "[", "i", "]", "[", "\"distance\"", "]", ")", "\n", "break", "\n", "", "", "return", "deepcopy", "(", "d_min", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.GCO.GCO.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "K", "=", "config_K", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.GCO.GCO.gco": [[11, 32], ["np.array", "GCO.GCO.graph_convolutional", "np.zeros", "range", "range", "np.array.append", "len", "len", "len", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "np.linalg.norm", "np.linalg.norm", "copy.deepcopy", "np.linalg.norm", "np.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.GCO.GCO.graph_convolutional"], ["", "def", "gco", "(", "self", ",", "global_positions", ",", "remain_list", ",", "alpha", "=", "0.99", ",", "expansion_rate", "=", "0.25", ")", ":", "\n", "        ", "remain_positions", "=", "[", "]", "\n", "for", "i", "in", "remain_list", ":", "\n", "            ", "remain_positions", ".", "append", "(", "deepcopy", "(", "global_positions", "[", "i", "]", ")", ")", "\n", "", "remain_positions", "=", "np", ".", "array", "(", "remain_positions", ")", "\n", "\n", "final_positions", ",", "counter", ",", "storage_positions", "=", "self", ".", "graph_convolutional", "(", "remain_positions", ",", "len", "(", "remain_list", ")", ",", "\n", "alpha", "=", "alpha", ",", "\n", "expansion_rate", "=", "expansion_rate", ")", "\n", "speed", "=", "np", ".", "zeros", "(", "(", "config_num_of_agents", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "remain_list", ")", ")", ":", "\n", "            ", "if", "np", ".", "linalg", ".", "norm", "(", "final_positions", "[", "i", "]", "-", "remain_positions", "[", "i", "]", ")", ">", "0", ":", "\n", "                ", "speed", "[", "remain_list", "[", "i", "]", "]", "=", "(", "final_positions", "[", "i", "]", "-", "remain_positions", "[", "i", "]", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "final_positions", "[", "i", "]", "-", "remain_positions", "[", "i", "]", ")", "\n", "", "", "temp_max_distance", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "remain_list", ")", ")", ":", "\n", "            ", "if", "np", ".", "linalg", ".", "norm", "(", "final_positions", "[", "i", "]", "-", "remain_positions", "[", "i", "]", ")", ">", "temp_max_distance", ":", "\n", "                ", "temp_max_distance", "=", "deepcopy", "(", "np", ".", "linalg", ".", "norm", "(", "final_positions", "[", "i", "]", "-", "remain_positions", "[", "i", "]", ")", ")", "\n", "", "", "max_time", "=", "temp_max_distance", "/", "config_constant_speed", "\n", "# print(max_time)", "\n", "return", "deepcopy", "(", "speed", ")", ",", "deepcopy", "(", "final_positions", ")", ",", "deepcopy", "(", "max_time", ")", ",", "deepcopy", "(", "storage_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.GCO.GCO.graph_convolutional": [[33, 83], ["storage_positions.append", "Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "Utils.calculate_d_max", "Utils.make_A_matrix", "Utils.make_D_matrix", "copy.deepcopy", "np.linalg.norm", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "np.dot", "storage_positions.append", "Utils.make_A_matrix", "Utils.make_D_matrix", "Utils.check_number_of_clusters", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "np.eye"], "methods", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Main_algorithm_GCN.Smallest_d_algorithm.smallest_d_algorithm", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.calculate_d_max", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_A_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.make_D_matrix", "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.None.Utils.check_number_of_clusters"], ["", "def", "graph_convolutional", "(", "self", ",", "remain_swarm_positions", ",", "num_remain", ",", "alpha", "=", "0.99", ",", "expansion_rate", "=", "0.25", ")", ":", "\n", "        ", "\"\"\"\n        :param alpha:\n        :param remain_swarm_positions:\n        :param num_remain:\n        :param expansion_rate:\n        :return:\n        \"\"\"", "\n", "storage_positions", "=", "[", "]", "\n", "storage_positions", ".", "append", "(", "deepcopy", "(", "remain_swarm_positions", ")", ")", "\n", "\n", "d_min", "=", "smallest_d_algorithm", "(", "remain_swarm_positions", ",", "num_remain", ",", "\n", "config_communication_range", ")", "\n", "d_max", "=", "Utils", ".", "calculate_d_max", "(", "remain_swarm_positions", ")", "\n", "A_", "=", "Utils", ".", "make_A_matrix", "(", "remain_swarm_positions", ",", "num_remain", ",", "d_min", "+", "(", "d_max", "-", "d_min", ")", "*", "expansion_rate", ")", "\n", "D_", "=", "Utils", ".", "make_D_matrix", "(", "A_", ",", "num_remain", ")", "\n", "L_", "=", "D_", "-", "A_", "\n", "F", "=", "deepcopy", "(", "remain_swarm_positions", ")", "\n", "counter", "=", "0", "\n", "\n", "A_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A_", ",", "ord", "=", "np", ".", "inf", ")", "\n", "k0", "=", "1", "/", "A_norm", "\n", "self", ".", "K", "=", "alpha", "*", "k0", "\n", "# print(\"K is %f\" % self.K)", "\n", "\n", "A", "=", "Utils", ".", "make_A_matrix", "(", "F", ",", "num_remain", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num_remain", ")", "\n", "L", "=", "D", "-", "A", "\n", "connected_flag", ",", "num_of_clusters", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "num_remain", ")", "\n", "if", "connected_flag", ":", "\n", "# print(\"remain one cluster\")", "\n", "            ", "return", "deepcopy", "(", "F", ")", ",", "deepcopy", "(", "counter", ")", ",", "[", "]", "\n", "", "else", ":", "\n", "# print(\"become into %d clusters\" % num_of_clusters)", "\n", "            ", "while", "not", "connected_flag", ":", "\n", "                ", "F", "=", "np", ".", "dot", "(", "(", "np", ".", "eye", "(", "num_remain", ")", "-", "self", ".", "K", "*", "L_", ")", ",", "F", ")", "\n", "counter", "+=", "1", "\n", "\n", "storage_positions", ".", "append", "(", "deepcopy", "(", "F", ")", ")", "\n", "if", "counter", ">=", "10000", ":", "\n", "                    ", "break", "\n", "\n", "", "A", "=", "Utils", ".", "make_A_matrix", "(", "F", ",", "num_remain", ",", "config_communication_range", ")", "\n", "D", "=", "Utils", ".", "make_D_matrix", "(", "A", ",", "num_remain", ")", "\n", "L", "=", "D", "-", "A", "\n", "connected_flag", ",", "num_of_clusters", "=", "Utils", ".", "check_number_of_clusters", "(", "L", ",", "num_remain", ")", "\n", "# print(connected_flag, num_of_clusters)", "\n", "# print(\"total %d times iterations\" % counter)", "\n", "\n", "", "return", "deepcopy", "(", "F", ")", ",", "deepcopy", "(", "counter", ")", ",", "deepcopy", "(", "storage_positions", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Drawing.Draw_Static.draw_once": [[8, 32], ["matplotlib.figure", "mpl_toolkits.mplot3d.Axes3D", "range", "mpl_toolkits.mplot3d.Axes3D.set_zlabel", "mpl_toolkits.mplot3d.Axes3D.set_ylabel", "mpl_toolkits.mplot3d.Axes3D.set_xlabel", "range", "mpl_toolkits.mplot3d.Axes3D.set_xlim", "mpl_toolkits.mplot3d.Axes3D.set_ylim", "mpl_toolkits.mplot3d.Axes3D.set_zlim", "matplotlib.savefig", "matplotlib.show", "mpl_toolkits.mplot3d.Axes3D.scatter", "len", "range", "len", "mpl_toolkits.mplot3d.Axes3D.plot"], "function", ["None"], ["def", "draw_once", "(", "remain_num", ",", "storage_positions", ",", "storage_connectivity_matrix", ",", "\n", "save_path", "=", "'Experiment_Fig/gcn_only_final_positions.png'", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "Axes3D", "(", "fig", ")", "\n", "for", "i", "in", "range", "(", "remain_num", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "storage_positions", "[", "i", ",", "0", "]", ",", "storage_positions", "[", "i", ",", "1", "]", ",", "storage_positions", "[", "i", ",", "2", "]", ",", "\n", "s", "=", "30", ",", "c", "=", "'g'", ")", "\n", "\n", "", "ax", ".", "set_zlabel", "(", "'Height'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_ylabel", "(", "'Ground Y'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_xlabel", "(", "'Ground X'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "storage_positions", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "len", "(", "storage_positions", ")", ")", ":", "\n", "            ", "if", "storage_connectivity_matrix", "[", "i", ",", "j", "]", ">=", "1", ":", "\n", "                ", "x", "=", "[", "storage_positions", "[", "i", ",", "0", "]", ",", "storage_positions", "[", "j", ",", "0", "]", "]", "\n", "y", "=", "[", "storage_positions", "[", "i", ",", "1", "]", ",", "storage_positions", "[", "j", ",", "1", "]", "]", "\n", "z", "=", "[", "storage_positions", "[", "i", ",", "2", "]", ",", "storage_positions", "[", "j", ",", "2", "]", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "c", "=", "'lightsteelblue'", ")", "\n", "", "", "", "ax", ".", "set_xlim", "(", "0", ",", "1000", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1000", ")", "\n", "ax", ".", "set_zlim", "(", "-", "50", ",", "150", ")", "\n", "plt", ".", "savefig", "(", "save_path", ",", "dpi", "=", "500", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Drawing.Draw_Static.draw_once_two_nodes": [[34, 66], ["matplotlib.figure", "mpl_toolkits.mplot3d.Axes3D", "range", "print", "range", "mpl_toolkits.mplot3d.Axes3D.set_zlabel", "mpl_toolkits.mplot3d.Axes3D.set_ylabel", "mpl_toolkits.mplot3d.Axes3D.set_xlabel", "mpl_toolkits.mplot3d.Axes3D.set_xlim", "mpl_toolkits.mplot3d.Axes3D.set_ylim", "mpl_toolkits.mplot3d.Axes3D.set_zlim", "matplotlib.savefig", "matplotlib.show", "mpl_toolkits.mplot3d.Axes3D.scatter", "mpl_toolkits.mplot3d.Axes3D.scatter", "numpy.linalg.norm", "numpy.linalg.norm", "copy.deepcopy", "mpl_toolkits.mplot3d.Axes3D.plot", "mpl_toolkits.mplot3d.Axes3D.plot"], "function", ["None"], ["", "def", "draw_once_two_nodes", "(", "remain_num", ",", "storage_positions", ",", "storage_positions_2", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "Axes3D", "(", "fig", ")", "\n", "max_distance", "=", "0", "\n", "max_distance_index", "=", "0", "\n", "for", "i", "in", "range", "(", "remain_num", ")", ":", "\n", "        ", "if", "max_distance", "<", "np", ".", "linalg", ".", "norm", "(", "storage_positions", "[", "i", "]", "-", "storage_positions_2", "[", "i", "]", ")", ":", "\n", "            ", "max_distance", "=", "np", ".", "linalg", ".", "norm", "(", "storage_positions", "[", "i", "]", "-", "storage_positions_2", "[", "i", "]", ")", "\n", "max_distance_index", "=", "deepcopy", "(", "i", ")", "\n", "", "", "print", "(", "max_distance", ")", "\n", "for", "i", "in", "range", "(", "remain_num", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "storage_positions", "[", "i", ",", "0", "]", ",", "storage_positions", "[", "i", ",", "1", "]", ",", "storage_positions", "[", "i", ",", "2", "]", ",", "\n", "s", "=", "30", ",", "c", "=", "'g'", ")", "\n", "ax", ".", "scatter", "(", "storage_positions_2", "[", "i", ",", "0", "]", ",", "storage_positions_2", "[", "i", ",", "1", "]", ",", "storage_positions_2", "[", "i", ",", "2", "]", ",", "\n", "s", "=", "30", ",", "c", "=", "'b'", ")", "\n", "x", "=", "[", "storage_positions", "[", "i", ",", "0", "]", ",", "storage_positions_2", "[", "i", ",", "0", "]", "]", "\n", "y", "=", "[", "storage_positions", "[", "i", ",", "1", "]", ",", "storage_positions_2", "[", "i", ",", "1", "]", "]", "\n", "z", "=", "[", "storage_positions", "[", "i", ",", "2", "]", ",", "storage_positions_2", "[", "i", ",", "2", "]", "]", "\n", "if", "i", "==", "max_distance_index", ":", "\n", "            ", "ax", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "c", "=", "'red'", ",", "linestyle", "=", "'--'", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "c", "=", "'lightsteelblue'", ",", "linestyle", "=", "'--'", ")", "\n", "\n", "", "", "ax", ".", "set_zlabel", "(", "'Height'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_ylabel", "(", "'Ground Y'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_xlabel", "(", "'Ground X'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1000", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1000", ")", "\n", "ax", ".", "set_zlim", "(", "-", "50", ",", "150", ")", "\n", "plt", ".", "savefig", "(", "'Experiment_Fig/one_off_UEDs/Fig_12(c).png'", ",", "dpi", "=", "1000", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Drawing.Draw_Static.draw_pic_with_destroyed": [[68, 107], ["matplotlib.figure", "mpl_toolkits.mplot3d.Axes3D", "range", "mpl_toolkits.mplot3d.Axes3D.set_zlabel", "mpl_toolkits.mplot3d.Axes3D.set_ylabel", "mpl_toolkits.mplot3d.Axes3D.set_xlabel", "range", "range", "mpl_toolkits.mplot3d.Axes3D.set_xlim", "mpl_toolkits.mplot3d.Axes3D.set_ylim", "mpl_toolkits.mplot3d.Axes3D.set_zlim", "matplotlib.savefig", "matplotlib.show", "mpl_toolkits.mplot3d.Axes3D.scatter", "range", "range", "len", "mpl_toolkits.mplot3d.Axes3D.scatter", "mpl_toolkits.mplot3d.Axes3D.plot", "len"], "function", ["None"], ["", "def", "draw_pic_with_destroyed", "(", "num_of_remain", ",", "num_of_destroy", ",", "remain_positions", ",", "positions_of_exists_with_clusters", ",", "\n", "positions_of_destroyed", ",", "\n", "num_of_clusters", ",", "A", ")", ":", "\n", "    ", "\"\"\"\n    :param num_of_remain:\n    :param num_of_destroy:\n    :param positions_of_exists_with_clusters:  list [  np, , , , ,]\n    :param positions_of_destroyed: np\n    :param num_of_clusters:\n    :return:\n    \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "Axes3D", "(", "fig", ")", "\n", "for", "i", "in", "range", "(", "num_of_destroy", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "positions_of_destroyed", "[", "i", ",", "0", "]", ",", "positions_of_destroyed", "[", "i", ",", "1", "]", ",", "positions_of_destroyed", "[", "i", ",", "2", "]", ",", "\n", "s", "=", "30", ",", "c", "=", "'r'", ")", "\n", "\n", "", "ax", ".", "set_zlabel", "(", "'Height'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_ylabel", "(", "'Ground Y'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_xlabel", "(", "'Ground X'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_of_clusters", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "positions_of_exists_with_clusters", "[", "i", "]", ")", ")", ":", "\n", "            ", "ax", ".", "scatter", "(", "positions_of_exists_with_clusters", "[", "i", "]", "[", "j", ",", "0", "]", ",", "positions_of_exists_with_clusters", "[", "i", "]", "[", "j", ",", "1", "]", ",", "\n", "positions_of_exists_with_clusters", "[", "i", "]", "[", "j", ",", "2", "]", ",", "\n", "s", "=", "30", ",", "c", "=", "common_color_list", "[", "i", "%", "len", "(", "common_color_list", ")", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "num_of_remain", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "num_of_remain", ")", ":", "\n", "            ", "if", "A", "[", "i", ",", "j", "]", ">=", "1", ":", "\n", "                ", "x", "=", "[", "remain_positions", "[", "i", ",", "0", "]", ",", "remain_positions", "[", "j", ",", "0", "]", "]", "\n", "y", "=", "[", "remain_positions", "[", "i", ",", "1", "]", ",", "remain_positions", "[", "j", ",", "1", "]", "]", "\n", "z", "=", "[", "remain_positions", "[", "i", ",", "2", "]", ",", "remain_positions", "[", "j", ",", "2", "]", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "c", "=", "'lightsteelblue'", ")", "\n", "", "", "", "ax", ".", "set_xlim", "(", "0", ",", "1000", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1000", ")", "\n", "ax", ".", "set_zlim", "(", "-", "50", ",", "150", ")", "\n", "plt", ".", "savefig", "(", "'Experiment_Fig/one_off_UEDs/Fig_12(a)'", ",", "dpi", "=", "500", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Drawing.Draw_Static.draw_approximate_pic": [[109, 139], ["len", "matplotlib.figure", "mpl_toolkits.mplot3d.Axes3D", "range", "mpl_toolkits.mplot3d.Axes3D.set_zlabel", "mpl_toolkits.mplot3d.Axes3D.set_ylabel", "mpl_toolkits.mplot3d.Axes3D.set_xlabel", "mpl_toolkits.mplot3d.Axes3D.set_xlim", "mpl_toolkits.mplot3d.Axes3D.set_ylim", "mpl_toolkits.mplot3d.Axes3D.set_zlim", "matplotlib.savefig", "matplotlib.show", "int", "int", "int", "Draw_Static.RGB_to_Hex", "range", "str", "mpl_toolkits.mplot3d.Axes3D.scatter", "mpl_toolkits.mplot3d.Axes3D.quiver", "str", "str"], "function", ["home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Drawing.Draw_Static.RGB_to_Hex"], ["", "def", "draw_approximate_pic", "(", "num_of_remain", ",", "positions_trajectory", ")", ":", "\n", "    ", "trajectory_step", "=", "len", "(", "positions_trajectory", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "Axes3D", "(", "fig", ")", "\n", "for", "i", "in", "range", "(", "trajectory_step", ")", ":", "\n", "        ", "red", "=", "int", "(", "50", "-", "(", "50", "-", "10", ")", "*", "(", "i", "/", "trajectory_step", ")", ")", "\n", "green", "=", "int", "(", "230", "-", "(", "230", "-", "30", ")", "*", "(", "i", "/", "trajectory_step", ")", ")", "\n", "blue", "=", "int", "(", "50", "-", "(", "50", "-", "10", ")", "*", "(", "i", "/", "trajectory_step", ")", ")", "\n", "c", "=", "str", "(", "red", ")", "+", "','", "+", "str", "(", "green", ")", "+", "','", "+", "str", "(", "blue", ")", "\n", "c", "=", "RGB_to_Hex", "(", "c", ")", "\n", "\n", "for", "j", "in", "range", "(", "num_of_remain", ")", ":", "\n", "            ", "ax", ".", "scatter", "(", "positions_trajectory", "[", "i", "]", "[", "j", ",", "0", "]", ",", "positions_trajectory", "[", "i", "]", "[", "j", ",", "1", "]", ",", "positions_trajectory", "[", "i", "]", "[", "j", ",", "2", "]", ",", "\n", "s", "=", "30", ",", "c", "=", "c", ")", "\n", "if", "i", ">", "0", ":", "\n", "                ", "x", "=", "[", "positions_trajectory", "[", "i", "-", "1", "]", "[", "j", ",", "0", "]", ",", "positions_trajectory", "[", "i", "]", "[", "j", ",", "0", "]", "]", "\n", "y", "=", "[", "positions_trajectory", "[", "i", "-", "1", "]", "[", "j", ",", "1", "]", ",", "positions_trajectory", "[", "i", "]", "[", "j", ",", "1", "]", "]", "\n", "z", "=", "[", "positions_trajectory", "[", "i", "-", "1", "]", "[", "j", ",", "2", "]", ",", "positions_trajectory", "[", "i", "]", "[", "j", ",", "2", "]", "]", "\n", "# ax.plot(x, y, z, c='b')", "\n", "ax", ".", "quiver", "(", "x", "[", "0", "]", ",", "y", "[", "0", "]", ",", "z", "[", "0", "]", ",", "x", "[", "1", "]", "-", "x", "[", "0", "]", ",", "y", "[", "1", "]", "-", "y", "[", "0", "]", ",", "z", "[", "1", "]", "-", "z", "[", "0", "]", ",", "normalize", "=", "False", ")", "\n", "\n", "", "", "", "ax", ".", "set_zlabel", "(", "'Height'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_ylabel", "(", "'Ground Y'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_xlabel", "(", "'Ground X'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1000", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1000", ")", "\n", "ax", ".", "set_zlim", "(", "-", "50", ",", "150", ")", "\n", "plt", ".", "savefig", "(", "'Experiment_Fig/one_off_UEDs/Fig_12(b).png'", ",", "dpi", "=", "500", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Drawing.Draw_Static.RGB_to_Hex": [[141, 149], ["rgb.split", "int", "[].replace().upper", "[].replace", "str", "hex"], "function", ["None"], ["", "def", "RGB_to_Hex", "(", "rgb", ")", ":", "\n", "    ", "RGB", "=", "rgb", ".", "split", "(", "','", ")", "# \u5c06RGB\u683c\u5f0f\u5212\u5206\u5f00\u6765", "\n", "color", "=", "'#'", "\n", "for", "i", "in", "RGB", ":", "\n", "        ", "num", "=", "int", "(", "i", ")", "\n", "# \u5c06R\u3001G\u3001B\u5206\u522b\u8f6c\u5316\u4e3a16\u8fdb\u5236\u62fc\u63a5\u8f6c\u6362\u5e76\u5927\u5199  hex() \u51fd\u6570\u7528\u4e8e\u5c0610\u8fdb\u5236\u6574\u6570\u8f6c\u6362\u621016\u8fdb\u5236\uff0c\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a", "\n", "color", "+=", "str", "(", "hex", "(", "num", ")", ")", "[", "-", "2", ":", "]", ".", "replace", "(", "'x'", ",", "'0'", ")", ".", "upper", "(", ")", "\n", "", "return", "color", "\n", "", ""]], "home.repos.pwc.inspect_result.nobodymx_resilient-swarm-communications-with-meta-graph-convolutional-networks.Drawing.Draw_GIF.update": [[26, 59], ["mpl_toolkits.mplot3d.Axes3D", "range", "mpl_toolkits.mplot3d.Axes3D.text", "mpl_toolkits.mplot3d.Axes3D.text", "mpl_toolkits.mplot3d.Axes3D.set_zlabel", "mpl_toolkits.mplot3d.Axes3D.set_ylabel", "mpl_toolkits.mplot3d.Axes3D.set_xlabel", "range", "mpl_toolkits.mplot3d.Axes3D.set_xlim", "mpl_toolkits.mplot3d.Axes3D.set_ylim", "mpl_toolkits.mplot3d.Axes3D.set_zlim", "mpl_toolkits.mplot3d.Axes3D.text", "mpl_toolkits.mplot3d.Axes3D.text", "len", "range", "mpl_toolkits.mplot3d.Axes3D.scatter", "mpl_toolkits.mplot3d.Axes3D.scatter", "mpl_toolkits.mplot3d.Axes3D.text", "len", "mpl_toolkits.mplot3d.Axes3D.plot"], "function", ["None"], ["def", "update", "(", "frame", ")", ":", "\n", "    ", "ax", "=", "Axes3D", "(", "fig", ")", "\n", "for", "i", "in", "range", "(", "config_num_of_agents", ")", ":", "\n", "        ", "if", "i", "in", "storage_remain_list", "[", "frame", "]", ":", "\n", "            ", "ax", ".", "scatter", "(", "storage_positions", "[", "frame", "]", "[", "i", ",", "0", "]", ",", "storage_positions", "[", "frame", "]", "[", "i", ",", "1", "]", ",", "storage_positions", "[", "frame", "]", "[", "i", ",", "2", "]", ",", "\n", "s", "=", "50", ",", "c", "=", "'g'", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "scatter", "(", "storage_positions", "[", "i", ",", "0", "]", ",", "storage_positions", "[", "i", ",", "1", "]", ",", "\n", "storage_positions", "[", "i", ",", "2", "]", ",", "\n", "s", "=", "50", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "text", "(", "storage_positions", "[", "i", "-", "num_remain", ",", "0", "]", "+", "1", ",", "storage_positions", "[", "i", "-", "num_remain", ",", "1", "]", "+", "1", ",", "\n", "storage_positions", "[", "i", "-", "num_remain", ",", "2", "]", "+", "1", ",", "\n", "'Destroyed'", ",", "c", "=", "'r'", ")", "\n", "", "", "ax", ".", "text", "(", "5", ",", "5", ",", "5", ",", "'distance = %f'", "%", "120", ",", "c", "=", "'blue'", ")", "\n", "ax", ".", "text", "(", "5", ",", "5", ",", "-", "3", ",", "'time steps = %d'", "%", "frame", ",", "c", "=", "'b'", ")", "\n", "if", "storage_connection_states", "[", "frame", "]", ":", "\n", "        ", "ax", ".", "text", "(", "5", ",", "5", ",", "15", ",", "'Connected...'", ",", "c", "=", "'g'", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "text", "(", "5", ",", "5", ",", "15", ",", "'Unconnected...'", ",", "c", "=", "'r'", ")", "\n", "", "ax", ".", "set_zlabel", "(", "'Height'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_ylabel", "(", "'Ground Y'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "ax", ".", "set_xlabel", "(", "'Ground X'", ",", "fontdict", "=", "{", "'size'", ":", "15", ",", "'color'", ":", "'black'", "}", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "storage_positions", "[", "frame", "]", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "len", "(", "storage_positions", "[", "frame", "]", ")", ")", ":", "\n", "            ", "if", "storage_connectivity_matrix", "[", "frame", "]", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                ", "x", "=", "[", "storage_positions", "[", "frame", "]", "[", "i", ",", "0", "]", ",", "storage_positions", "[", "frame", "]", "[", "j", ",", "0", "]", "]", "\n", "y", "=", "[", "storage_positions", "[", "frame", "]", "[", "i", ",", "1", "]", ",", "storage_positions", "[", "frame", "]", "[", "j", ",", "1", "]", "]", "\n", "z", "=", "[", "storage_positions", "[", "frame", "]", "[", "i", ",", "2", "]", ",", "storage_positions", "[", "frame", "]", "[", "j", ",", "2", "]", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "c", "=", "'lightsteelblue'", ")", "\n", "", "", "", "ax", ".", "set_xlim", "(", "0", ",", "config_width", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "config_length", ")", "\n", "ax", ".", "set_zlim", "(", "-", "10", ",", "config_height", ")", "\n", "\n"]]}